
stx-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002598  080187a4  080187a4  000287a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ad3c  0801ad3c  0002ad3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ad44  0801ad44  0002ad44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ad48  0801ad48  0002ad48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000030c  20000000  0801ad4c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ad8  2000030c  0801b058  0003030c  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20001de4  0801b058  00031de4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006c151  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f35e  00000000  00000000  0009c485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032c54  00000000  00000000  000ab7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003148  00000000  00000000  000de438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00004b88  00000000  00000000  000e1580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003e3db  00000000  00000000  000e6108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00014054  00000000  00000000  001244e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00138537  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a77c  00000000  00000000  00138588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  00142d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000183  00000000  00000000  00142db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000030c 	.word	0x2000030c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801878c 	.word	0x0801878c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000310 	.word	0x20000310
 8000104:	0801878c 	.word	0x0801878c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_llsl>:
 8000454:	4091      	lsls	r1, r2
 8000456:	0003      	movs	r3, r0
 8000458:	4090      	lsls	r0, r2
 800045a:	469c      	mov	ip, r3
 800045c:	3a20      	subs	r2, #32
 800045e:	4093      	lsls	r3, r2
 8000460:	4319      	orrs	r1, r3
 8000462:	4252      	negs	r2, r2
 8000464:	4663      	mov	r3, ip
 8000466:	40d3      	lsrs	r3, r2
 8000468:	4319      	orrs	r1, r3
 800046a:	4770      	bx	lr

0800046c <__aeabi_cdrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0010      	movs	r0, r2
 8000470:	4662      	mov	r2, ip
 8000472:	468c      	mov	ip, r1
 8000474:	0019      	movs	r1, r3
 8000476:	4663      	mov	r3, ip
 8000478:	e000      	b.n	800047c <__aeabi_cdcmpeq>
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_cdcmpeq>:
 800047c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047e:	f001 fce1 	bl	8001e44 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	d401      	bmi.n	800048a <__aeabi_cdcmpeq+0xe>
 8000486:	2100      	movs	r1, #0
 8000488:	42c8      	cmn	r0, r1
 800048a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800048c <__aeabi_dcmpeq>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fc31 	bl	8001cf4 <__eqdf2>
 8000492:	4240      	negs	r0, r0
 8000494:	3001      	adds	r0, #1
 8000496:	bd10      	pop	{r4, pc}

08000498 <__aeabi_dcmplt>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 fcd3 	bl	8001e44 <__ledf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	db01      	blt.n	80004a6 <__aeabi_dcmplt+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_dcmple>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f001 fcc9 	bl	8001e44 <__ledf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	dd01      	ble.n	80004ba <__aeabi_dcmple+0xe>
 80004b6:	2000      	movs	r0, #0
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	2001      	movs	r0, #1
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_dcmpgt>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f001 fc59 	bl	8001d78 <__gedf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	dc01      	bgt.n	80004ce <__aeabi_dcmpgt+0xe>
 80004ca:	2000      	movs	r0, #0
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	2001      	movs	r0, #1
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_dcmpge>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f001 fc4f 	bl	8001d78 <__gedf2>
 80004da:	2800      	cmp	r0, #0
 80004dc:	da01      	bge.n	80004e2 <__aeabi_dcmpge+0xe>
 80004de:	2000      	movs	r0, #0
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	2001      	movs	r0, #1
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_uldivmod>:
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <__aeabi_uldivmod+0x28>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d10f      	bne.n	8000510 <__aeabi_uldivmod+0x28>
 80004f0:	2900      	cmp	r1, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_uldivmod+0xe>
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d002      	beq.n	80004fe <__aeabi_uldivmod+0x16>
 80004f8:	2100      	movs	r1, #0
 80004fa:	43c9      	mvns	r1, r1
 80004fc:	0008      	movs	r0, r1
 80004fe:	b407      	push	{r0, r1, r2}
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <__aeabi_uldivmod+0x24>)
 8000502:	a102      	add	r1, pc, #8	; (adr r1, 800050c <__aeabi_uldivmod+0x24>)
 8000504:	1840      	adds	r0, r0, r1
 8000506:	9002      	str	r0, [sp, #8]
 8000508:	bd03      	pop	{r0, r1, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	ffffff45 	.word	0xffffff45
 8000510:	b403      	push	{r0, r1}
 8000512:	4668      	mov	r0, sp
 8000514:	b501      	push	{r0, lr}
 8000516:	9802      	ldr	r0, [sp, #8]
 8000518:	f000 f852 	bl	80005c0 <__udivmoddi4>
 800051c:	9b01      	ldr	r3, [sp, #4]
 800051e:	469e      	mov	lr, r3
 8000520:	b002      	add	sp, #8
 8000522:	bc0c      	pop	{r2, r3}
 8000524:	4770      	bx	lr
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_lmul>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	46ce      	mov	lr, r9
 800052c:	4647      	mov	r7, r8
 800052e:	b580      	push	{r7, lr}
 8000530:	0007      	movs	r7, r0
 8000532:	4699      	mov	r9, r3
 8000534:	0c3b      	lsrs	r3, r7, #16
 8000536:	469c      	mov	ip, r3
 8000538:	0413      	lsls	r3, r2, #16
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	001d      	movs	r5, r3
 800053e:	000e      	movs	r6, r1
 8000540:	4661      	mov	r1, ip
 8000542:	0400      	lsls	r0, r0, #16
 8000544:	0c14      	lsrs	r4, r2, #16
 8000546:	0c00      	lsrs	r0, r0, #16
 8000548:	4345      	muls	r5, r0
 800054a:	434b      	muls	r3, r1
 800054c:	4360      	muls	r0, r4
 800054e:	4361      	muls	r1, r4
 8000550:	18c0      	adds	r0, r0, r3
 8000552:	0c2c      	lsrs	r4, r5, #16
 8000554:	1820      	adds	r0, r4, r0
 8000556:	468c      	mov	ip, r1
 8000558:	4283      	cmp	r3, r0
 800055a:	d903      	bls.n	8000564 <__aeabi_lmul+0x3c>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	025b      	lsls	r3, r3, #9
 8000560:	4698      	mov	r8, r3
 8000562:	44c4      	add	ip, r8
 8000564:	4649      	mov	r1, r9
 8000566:	4379      	muls	r1, r7
 8000568:	4372      	muls	r2, r6
 800056a:	0c03      	lsrs	r3, r0, #16
 800056c:	4463      	add	r3, ip
 800056e:	042d      	lsls	r5, r5, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	18c9      	adds	r1, r1, r3
 8000574:	0400      	lsls	r0, r0, #16
 8000576:	1940      	adds	r0, r0, r5
 8000578:	1889      	adds	r1, r1, r2
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_d2uiz>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	2200      	movs	r2, #0
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <__aeabi_d2uiz+0x38>)
 800058a:	0004      	movs	r4, r0
 800058c:	000d      	movs	r5, r1
 800058e:	f7ff ffa1 	bl	80004d4 <__aeabi_dcmpge>
 8000592:	2800      	cmp	r0, #0
 8000594:	d104      	bne.n	80005a0 <__aeabi_d2uiz+0x1c>
 8000596:	0020      	movs	r0, r4
 8000598:	0029      	movs	r1, r5
 800059a:	f002 fab5 	bl	8002b08 <__aeabi_d2iz>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <__aeabi_d2uiz+0x38>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	0020      	movs	r0, r4
 80005a6:	0029      	movs	r1, r5
 80005a8:	f001 ff1c 	bl	80023e4 <__aeabi_dsub>
 80005ac:	f002 faac 	bl	8002b08 <__aeabi_d2iz>
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	061b      	lsls	r3, r3, #24
 80005b4:	469c      	mov	ip, r3
 80005b6:	4460      	add	r0, ip
 80005b8:	e7f1      	b.n	800059e <__aeabi_d2uiz+0x1a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	41e00000 	.word	0x41e00000

080005c0 <__udivmoddi4>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	4657      	mov	r7, sl
 80005c4:	464e      	mov	r6, r9
 80005c6:	4645      	mov	r5, r8
 80005c8:	46de      	mov	lr, fp
 80005ca:	b5e0      	push	{r5, r6, r7, lr}
 80005cc:	0004      	movs	r4, r0
 80005ce:	000d      	movs	r5, r1
 80005d0:	4692      	mov	sl, r2
 80005d2:	4699      	mov	r9, r3
 80005d4:	b083      	sub	sp, #12
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d830      	bhi.n	800063c <__udivmoddi4+0x7c>
 80005da:	d02d      	beq.n	8000638 <__udivmoddi4+0x78>
 80005dc:	4649      	mov	r1, r9
 80005de:	4650      	mov	r0, sl
 80005e0:	f002 fb84 	bl	8002cec <__clzdi2>
 80005e4:	0029      	movs	r1, r5
 80005e6:	0006      	movs	r6, r0
 80005e8:	0020      	movs	r0, r4
 80005ea:	f002 fb7f 	bl	8002cec <__clzdi2>
 80005ee:	1a33      	subs	r3, r6, r0
 80005f0:	4698      	mov	r8, r3
 80005f2:	3b20      	subs	r3, #32
 80005f4:	469b      	mov	fp, r3
 80005f6:	d433      	bmi.n	8000660 <__udivmoddi4+0xa0>
 80005f8:	465a      	mov	r2, fp
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	4642      	mov	r2, r8
 8000600:	001f      	movs	r7, r3
 8000602:	4653      	mov	r3, sl
 8000604:	4093      	lsls	r3, r2
 8000606:	001e      	movs	r6, r3
 8000608:	42af      	cmp	r7, r5
 800060a:	d83a      	bhi.n	8000682 <__udivmoddi4+0xc2>
 800060c:	42af      	cmp	r7, r5
 800060e:	d100      	bne.n	8000612 <__udivmoddi4+0x52>
 8000610:	e078      	b.n	8000704 <__udivmoddi4+0x144>
 8000612:	465b      	mov	r3, fp
 8000614:	1ba4      	subs	r4, r4, r6
 8000616:	41bd      	sbcs	r5, r7
 8000618:	2b00      	cmp	r3, #0
 800061a:	da00      	bge.n	800061e <__udivmoddi4+0x5e>
 800061c:	e075      	b.n	800070a <__udivmoddi4+0x14a>
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	9200      	str	r2, [sp, #0]
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	465a      	mov	r2, fp
 800062a:	4093      	lsls	r3, r2
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	4642      	mov	r2, r8
 8000632:	4093      	lsls	r3, r2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	e028      	b.n	800068a <__udivmoddi4+0xca>
 8000638:	4282      	cmp	r2, r0
 800063a:	d9cf      	bls.n	80005dc <__udivmoddi4+0x1c>
 800063c:	2200      	movs	r2, #0
 800063e:	2300      	movs	r3, #0
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <__udivmoddi4+0x8e>
 800064a:	601c      	str	r4, [r3, #0]
 800064c:	605d      	str	r5, [r3, #4]
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	b003      	add	sp, #12
 8000654:	bcf0      	pop	{r4, r5, r6, r7}
 8000656:	46bb      	mov	fp, r7
 8000658:	46b2      	mov	sl, r6
 800065a:	46a9      	mov	r9, r5
 800065c:	46a0      	mov	r8, r4
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	4652      	mov	r2, sl
 8000668:	40da      	lsrs	r2, r3
 800066a:	4641      	mov	r1, r8
 800066c:	0013      	movs	r3, r2
 800066e:	464a      	mov	r2, r9
 8000670:	408a      	lsls	r2, r1
 8000672:	0017      	movs	r7, r2
 8000674:	4642      	mov	r2, r8
 8000676:	431f      	orrs	r7, r3
 8000678:	4653      	mov	r3, sl
 800067a:	4093      	lsls	r3, r2
 800067c:	001e      	movs	r6, r3
 800067e:	42af      	cmp	r7, r5
 8000680:	d9c4      	bls.n	800060c <__udivmoddi4+0x4c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4643      	mov	r3, r8
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0d9      	beq.n	8000644 <__udivmoddi4+0x84>
 8000690:	07fb      	lsls	r3, r7, #31
 8000692:	0872      	lsrs	r2, r6, #1
 8000694:	431a      	orrs	r2, r3
 8000696:	4646      	mov	r6, r8
 8000698:	087b      	lsrs	r3, r7, #1
 800069a:	e00e      	b.n	80006ba <__udivmoddi4+0xfa>
 800069c:	42ab      	cmp	r3, r5
 800069e:	d101      	bne.n	80006a4 <__udivmoddi4+0xe4>
 80006a0:	42a2      	cmp	r2, r4
 80006a2:	d80c      	bhi.n	80006be <__udivmoddi4+0xfe>
 80006a4:	1aa4      	subs	r4, r4, r2
 80006a6:	419d      	sbcs	r5, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	1924      	adds	r4, r4, r4
 80006ac:	416d      	adcs	r5, r5
 80006ae:	2100      	movs	r1, #0
 80006b0:	3e01      	subs	r6, #1
 80006b2:	1824      	adds	r4, r4, r0
 80006b4:	414d      	adcs	r5, r1
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d006      	beq.n	80006c8 <__udivmoddi4+0x108>
 80006ba:	42ab      	cmp	r3, r5
 80006bc:	d9ee      	bls.n	800069c <__udivmoddi4+0xdc>
 80006be:	3e01      	subs	r6, #1
 80006c0:	1924      	adds	r4, r4, r4
 80006c2:	416d      	adcs	r5, r5
 80006c4:	2e00      	cmp	r6, #0
 80006c6:	d1f8      	bne.n	80006ba <__udivmoddi4+0xfa>
 80006c8:	9800      	ldr	r0, [sp, #0]
 80006ca:	9901      	ldr	r1, [sp, #4]
 80006cc:	465b      	mov	r3, fp
 80006ce:	1900      	adds	r0, r0, r4
 80006d0:	4169      	adcs	r1, r5
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db24      	blt.n	8000720 <__udivmoddi4+0x160>
 80006d6:	002b      	movs	r3, r5
 80006d8:	465a      	mov	r2, fp
 80006da:	4644      	mov	r4, r8
 80006dc:	40d3      	lsrs	r3, r2
 80006de:	002a      	movs	r2, r5
 80006e0:	40e2      	lsrs	r2, r4
 80006e2:	001c      	movs	r4, r3
 80006e4:	465b      	mov	r3, fp
 80006e6:	0015      	movs	r5, r2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db2a      	blt.n	8000742 <__udivmoddi4+0x182>
 80006ec:	0026      	movs	r6, r4
 80006ee:	409e      	lsls	r6, r3
 80006f0:	0033      	movs	r3, r6
 80006f2:	0026      	movs	r6, r4
 80006f4:	4647      	mov	r7, r8
 80006f6:	40be      	lsls	r6, r7
 80006f8:	0032      	movs	r2, r6
 80006fa:	1a80      	subs	r0, r0, r2
 80006fc:	4199      	sbcs	r1, r3
 80006fe:	9000      	str	r0, [sp, #0]
 8000700:	9101      	str	r1, [sp, #4]
 8000702:	e79f      	b.n	8000644 <__udivmoddi4+0x84>
 8000704:	42a3      	cmp	r3, r4
 8000706:	d8bc      	bhi.n	8000682 <__udivmoddi4+0xc2>
 8000708:	e783      	b.n	8000612 <__udivmoddi4+0x52>
 800070a:	4642      	mov	r2, r8
 800070c:	2320      	movs	r3, #32
 800070e:	2100      	movs	r1, #0
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	2200      	movs	r2, #0
 8000714:	9100      	str	r1, [sp, #0]
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	40da      	lsrs	r2, r3
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	e786      	b.n	800062e <__udivmoddi4+0x6e>
 8000720:	4642      	mov	r2, r8
 8000722:	2320      	movs	r3, #32
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	002a      	movs	r2, r5
 8000728:	4646      	mov	r6, r8
 800072a:	409a      	lsls	r2, r3
 800072c:	0023      	movs	r3, r4
 800072e:	40f3      	lsrs	r3, r6
 8000730:	4644      	mov	r4, r8
 8000732:	4313      	orrs	r3, r2
 8000734:	002a      	movs	r2, r5
 8000736:	40e2      	lsrs	r2, r4
 8000738:	001c      	movs	r4, r3
 800073a:	465b      	mov	r3, fp
 800073c:	0015      	movs	r5, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	dad4      	bge.n	80006ec <__udivmoddi4+0x12c>
 8000742:	4642      	mov	r2, r8
 8000744:	002f      	movs	r7, r5
 8000746:	2320      	movs	r3, #32
 8000748:	0026      	movs	r6, r4
 800074a:	4097      	lsls	r7, r2
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	40de      	lsrs	r6, r3
 8000750:	003b      	movs	r3, r7
 8000752:	4333      	orrs	r3, r6
 8000754:	e7cd      	b.n	80006f2 <__udivmoddi4+0x132>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <__aeabi_fdiv>:
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	464f      	mov	r7, r9
 800075c:	4646      	mov	r6, r8
 800075e:	46d6      	mov	lr, sl
 8000760:	0245      	lsls	r5, r0, #9
 8000762:	b5c0      	push	{r6, r7, lr}
 8000764:	0047      	lsls	r7, r0, #1
 8000766:	1c0c      	adds	r4, r1, #0
 8000768:	0a6d      	lsrs	r5, r5, #9
 800076a:	0e3f      	lsrs	r7, r7, #24
 800076c:	0fc6      	lsrs	r6, r0, #31
 800076e:	2f00      	cmp	r7, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fdiv+0x1c>
 8000772:	e070      	b.n	8000856 <__aeabi_fdiv+0xfe>
 8000774:	2fff      	cmp	r7, #255	; 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fdiv+0x22>
 8000778:	e075      	b.n	8000866 <__aeabi_fdiv+0x10e>
 800077a:	00eb      	lsls	r3, r5, #3
 800077c:	2580      	movs	r5, #128	; 0x80
 800077e:	04ed      	lsls	r5, r5, #19
 8000780:	431d      	orrs	r5, r3
 8000782:	2300      	movs	r3, #0
 8000784:	4699      	mov	r9, r3
 8000786:	469a      	mov	sl, r3
 8000788:	3f7f      	subs	r7, #127	; 0x7f
 800078a:	0260      	lsls	r0, r4, #9
 800078c:	0a43      	lsrs	r3, r0, #9
 800078e:	4698      	mov	r8, r3
 8000790:	0063      	lsls	r3, r4, #1
 8000792:	0e1b      	lsrs	r3, r3, #24
 8000794:	0fe4      	lsrs	r4, r4, #31
 8000796:	2b00      	cmp	r3, #0
 8000798:	d04e      	beq.n	8000838 <__aeabi_fdiv+0xe0>
 800079a:	2bff      	cmp	r3, #255	; 0xff
 800079c:	d046      	beq.n	800082c <__aeabi_fdiv+0xd4>
 800079e:	4642      	mov	r2, r8
 80007a0:	00d0      	lsls	r0, r2, #3
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4302      	orrs	r2, r0
 80007a8:	4690      	mov	r8, r2
 80007aa:	2200      	movs	r2, #0
 80007ac:	3b7f      	subs	r3, #127	; 0x7f
 80007ae:	0031      	movs	r1, r6
 80007b0:	1aff      	subs	r7, r7, r3
 80007b2:	464b      	mov	r3, r9
 80007b4:	4061      	eors	r1, r4
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	4313      	orrs	r3, r2
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d900      	bls.n	80007c0 <__aeabi_fdiv+0x68>
 80007be:	e0b5      	b.n	800092c <__aeabi_fdiv+0x1d4>
 80007c0:	486e      	ldr	r0, [pc, #440]	; (800097c <__aeabi_fdiv+0x224>)
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	58c3      	ldr	r3, [r0, r3]
 80007c6:	469f      	mov	pc, r3
 80007c8:	2300      	movs	r3, #0
 80007ca:	4698      	mov	r8, r3
 80007cc:	0026      	movs	r6, r4
 80007ce:	4645      	mov	r5, r8
 80007d0:	4692      	mov	sl, r2
 80007d2:	4653      	mov	r3, sl
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d100      	bne.n	80007da <__aeabi_fdiv+0x82>
 80007d8:	e089      	b.n	80008ee <__aeabi_fdiv+0x196>
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fdiv+0x88>
 80007de:	e09e      	b.n	800091e <__aeabi_fdiv+0x1c6>
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d018      	beq.n	8000816 <__aeabi_fdiv+0xbe>
 80007e4:	003b      	movs	r3, r7
 80007e6:	337f      	adds	r3, #127	; 0x7f
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dd69      	ble.n	80008c0 <__aeabi_fdiv+0x168>
 80007ec:	076a      	lsls	r2, r5, #29
 80007ee:	d004      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f0:	220f      	movs	r2, #15
 80007f2:	402a      	ands	r2, r5
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d000      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f8:	3504      	adds	r5, #4
 80007fa:	012a      	lsls	r2, r5, #4
 80007fc:	d503      	bpl.n	8000806 <__aeabi_fdiv+0xae>
 80007fe:	4b60      	ldr	r3, [pc, #384]	; (8000980 <__aeabi_fdiv+0x228>)
 8000800:	401d      	ands	r5, r3
 8000802:	003b      	movs	r3, r7
 8000804:	3380      	adds	r3, #128	; 0x80
 8000806:	2bfe      	cmp	r3, #254	; 0xfe
 8000808:	dd00      	ble.n	800080c <__aeabi_fdiv+0xb4>
 800080a:	e070      	b.n	80008ee <__aeabi_fdiv+0x196>
 800080c:	01ad      	lsls	r5, r5, #6
 800080e:	0a6d      	lsrs	r5, r5, #9
 8000810:	b2d8      	uxtb	r0, r3
 8000812:	e002      	b.n	800081a <__aeabi_fdiv+0xc2>
 8000814:	000e      	movs	r6, r1
 8000816:	2000      	movs	r0, #0
 8000818:	2500      	movs	r5, #0
 800081a:	05c0      	lsls	r0, r0, #23
 800081c:	4328      	orrs	r0, r5
 800081e:	07f6      	lsls	r6, r6, #31
 8000820:	4330      	orrs	r0, r6
 8000822:	bce0      	pop	{r5, r6, r7}
 8000824:	46ba      	mov	sl, r7
 8000826:	46b1      	mov	r9, r6
 8000828:	46a8      	mov	r8, r5
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	4643      	mov	r3, r8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d13f      	bne.n	80008b2 <__aeabi_fdiv+0x15a>
 8000832:	2202      	movs	r2, #2
 8000834:	3fff      	subs	r7, #255	; 0xff
 8000836:	e003      	b.n	8000840 <__aeabi_fdiv+0xe8>
 8000838:	4643      	mov	r3, r8
 800083a:	2b00      	cmp	r3, #0
 800083c:	d12d      	bne.n	800089a <__aeabi_fdiv+0x142>
 800083e:	2201      	movs	r2, #1
 8000840:	0031      	movs	r1, r6
 8000842:	464b      	mov	r3, r9
 8000844:	4061      	eors	r1, r4
 8000846:	b2c9      	uxtb	r1, r1
 8000848:	4313      	orrs	r3, r2
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d834      	bhi.n	80008b8 <__aeabi_fdiv+0x160>
 800084e:	484d      	ldr	r0, [pc, #308]	; (8000984 <__aeabi_fdiv+0x22c>)
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	58c3      	ldr	r3, [r0, r3]
 8000854:	469f      	mov	pc, r3
 8000856:	2d00      	cmp	r5, #0
 8000858:	d113      	bne.n	8000882 <__aeabi_fdiv+0x12a>
 800085a:	2304      	movs	r3, #4
 800085c:	4699      	mov	r9, r3
 800085e:	3b03      	subs	r3, #3
 8000860:	2700      	movs	r7, #0
 8000862:	469a      	mov	sl, r3
 8000864:	e791      	b.n	800078a <__aeabi_fdiv+0x32>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d105      	bne.n	8000876 <__aeabi_fdiv+0x11e>
 800086a:	2308      	movs	r3, #8
 800086c:	4699      	mov	r9, r3
 800086e:	3b06      	subs	r3, #6
 8000870:	27ff      	movs	r7, #255	; 0xff
 8000872:	469a      	mov	sl, r3
 8000874:	e789      	b.n	800078a <__aeabi_fdiv+0x32>
 8000876:	230c      	movs	r3, #12
 8000878:	4699      	mov	r9, r3
 800087a:	3b09      	subs	r3, #9
 800087c:	27ff      	movs	r7, #255	; 0xff
 800087e:	469a      	mov	sl, r3
 8000880:	e783      	b.n	800078a <__aeabi_fdiv+0x32>
 8000882:	0028      	movs	r0, r5
 8000884:	f002 fa14 	bl	8002cb0 <__clzsi2>
 8000888:	2776      	movs	r7, #118	; 0x76
 800088a:	1f43      	subs	r3, r0, #5
 800088c:	409d      	lsls	r5, r3
 800088e:	2300      	movs	r3, #0
 8000890:	427f      	negs	r7, r7
 8000892:	4699      	mov	r9, r3
 8000894:	469a      	mov	sl, r3
 8000896:	1a3f      	subs	r7, r7, r0
 8000898:	e777      	b.n	800078a <__aeabi_fdiv+0x32>
 800089a:	4640      	mov	r0, r8
 800089c:	f002 fa08 	bl	8002cb0 <__clzsi2>
 80008a0:	4642      	mov	r2, r8
 80008a2:	1f43      	subs	r3, r0, #5
 80008a4:	409a      	lsls	r2, r3
 80008a6:	2376      	movs	r3, #118	; 0x76
 80008a8:	425b      	negs	r3, r3
 80008aa:	4690      	mov	r8, r2
 80008ac:	1a1b      	subs	r3, r3, r0
 80008ae:	2200      	movs	r2, #0
 80008b0:	e77d      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b2:	23ff      	movs	r3, #255	; 0xff
 80008b4:	2203      	movs	r2, #3
 80008b6:	e77a      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b8:	000e      	movs	r6, r1
 80008ba:	20ff      	movs	r0, #255	; 0xff
 80008bc:	2500      	movs	r5, #0
 80008be:	e7ac      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008c0:	2001      	movs	r0, #1
 80008c2:	1ac0      	subs	r0, r0, r3
 80008c4:	281b      	cmp	r0, #27
 80008c6:	dca6      	bgt.n	8000816 <__aeabi_fdiv+0xbe>
 80008c8:	379e      	adds	r7, #158	; 0x9e
 80008ca:	002a      	movs	r2, r5
 80008cc:	40bd      	lsls	r5, r7
 80008ce:	40c2      	lsrs	r2, r0
 80008d0:	1e6b      	subs	r3, r5, #1
 80008d2:	419d      	sbcs	r5, r3
 80008d4:	4315      	orrs	r5, r2
 80008d6:	076b      	lsls	r3, r5, #29
 80008d8:	d004      	beq.n	80008e4 <__aeabi_fdiv+0x18c>
 80008da:	230f      	movs	r3, #15
 80008dc:	402b      	ands	r3, r5
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fdiv+0x18c>
 80008e2:	3504      	adds	r5, #4
 80008e4:	016b      	lsls	r3, r5, #5
 80008e6:	d544      	bpl.n	8000972 <__aeabi_fdiv+0x21a>
 80008e8:	2001      	movs	r0, #1
 80008ea:	2500      	movs	r5, #0
 80008ec:	e795      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	2500      	movs	r5, #0
 80008f2:	e792      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	2600      	movs	r6, #0
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	03ed      	lsls	r5, r5, #15
 80008fc:	e78d      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008fe:	2300      	movs	r3, #0
 8000900:	4698      	mov	r8, r3
 8000902:	2080      	movs	r0, #128	; 0x80
 8000904:	03c0      	lsls	r0, r0, #15
 8000906:	4205      	tst	r5, r0
 8000908:	d009      	beq.n	800091e <__aeabi_fdiv+0x1c6>
 800090a:	4643      	mov	r3, r8
 800090c:	4203      	tst	r3, r0
 800090e:	d106      	bne.n	800091e <__aeabi_fdiv+0x1c6>
 8000910:	4645      	mov	r5, r8
 8000912:	4305      	orrs	r5, r0
 8000914:	026d      	lsls	r5, r5, #9
 8000916:	0026      	movs	r6, r4
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	0a6d      	lsrs	r5, r5, #9
 800091c:	e77d      	b.n	800081a <__aeabi_fdiv+0xc2>
 800091e:	2080      	movs	r0, #128	; 0x80
 8000920:	03c0      	lsls	r0, r0, #15
 8000922:	4305      	orrs	r5, r0
 8000924:	026d      	lsls	r5, r5, #9
 8000926:	20ff      	movs	r0, #255	; 0xff
 8000928:	0a6d      	lsrs	r5, r5, #9
 800092a:	e776      	b.n	800081a <__aeabi_fdiv+0xc2>
 800092c:	4642      	mov	r2, r8
 800092e:	016b      	lsls	r3, r5, #5
 8000930:	0150      	lsls	r0, r2, #5
 8000932:	4283      	cmp	r3, r0
 8000934:	d219      	bcs.n	800096a <__aeabi_fdiv+0x212>
 8000936:	221b      	movs	r2, #27
 8000938:	2500      	movs	r5, #0
 800093a:	3f01      	subs	r7, #1
 800093c:	2601      	movs	r6, #1
 800093e:	001c      	movs	r4, r3
 8000940:	006d      	lsls	r5, r5, #1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2c00      	cmp	r4, #0
 8000946:	db01      	blt.n	800094c <__aeabi_fdiv+0x1f4>
 8000948:	4298      	cmp	r0, r3
 800094a:	d801      	bhi.n	8000950 <__aeabi_fdiv+0x1f8>
 800094c:	1a1b      	subs	r3, r3, r0
 800094e:	4335      	orrs	r5, r6
 8000950:	3a01      	subs	r2, #1
 8000952:	2a00      	cmp	r2, #0
 8000954:	d1f3      	bne.n	800093e <__aeabi_fdiv+0x1e6>
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	4193      	sbcs	r3, r2
 800095a:	431d      	orrs	r5, r3
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	000e      	movs	r6, r1
 8000962:	2b00      	cmp	r3, #0
 8000964:	dd00      	ble.n	8000968 <__aeabi_fdiv+0x210>
 8000966:	e741      	b.n	80007ec <__aeabi_fdiv+0x94>
 8000968:	e7aa      	b.n	80008c0 <__aeabi_fdiv+0x168>
 800096a:	221a      	movs	r2, #26
 800096c:	2501      	movs	r5, #1
 800096e:	1a1b      	subs	r3, r3, r0
 8000970:	e7e4      	b.n	800093c <__aeabi_fdiv+0x1e4>
 8000972:	01ad      	lsls	r5, r5, #6
 8000974:	2000      	movs	r0, #0
 8000976:	0a6d      	lsrs	r5, r5, #9
 8000978:	e74f      	b.n	800081a <__aeabi_fdiv+0xc2>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	0801881c 	.word	0x0801881c
 8000980:	f7ffffff 	.word	0xf7ffffff
 8000984:	0801885c 	.word	0x0801885c

08000988 <__aeabi_fmul>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464f      	mov	r7, r9
 800098c:	4646      	mov	r6, r8
 800098e:	46d6      	mov	lr, sl
 8000990:	0244      	lsls	r4, r0, #9
 8000992:	0045      	lsls	r5, r0, #1
 8000994:	b5c0      	push	{r6, r7, lr}
 8000996:	0a64      	lsrs	r4, r4, #9
 8000998:	1c0f      	adds	r7, r1, #0
 800099a:	0e2d      	lsrs	r5, r5, #24
 800099c:	0fc6      	lsrs	r6, r0, #31
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fmul+0x1c>
 80009a2:	e08d      	b.n	8000ac0 <__aeabi_fmul+0x138>
 80009a4:	2dff      	cmp	r5, #255	; 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fmul+0x22>
 80009a8:	e092      	b.n	8000ad0 <__aeabi_fmul+0x148>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	4699      	mov	r9, r3
 80009b0:	469a      	mov	sl, r3
 80009b2:	00e4      	lsls	r4, r4, #3
 80009b4:	04c0      	lsls	r0, r0, #19
 80009b6:	4304      	orrs	r4, r0
 80009b8:	3d7f      	subs	r5, #127	; 0x7f
 80009ba:	0278      	lsls	r0, r7, #9
 80009bc:	0a43      	lsrs	r3, r0, #9
 80009be:	4698      	mov	r8, r3
 80009c0:	007b      	lsls	r3, r7, #1
 80009c2:	0e1b      	lsrs	r3, r3, #24
 80009c4:	0fff      	lsrs	r7, r7, #31
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x44>
 80009ca:	e070      	b.n	8000aae <__aeabi_fmul+0x126>
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fmul+0x4a>
 80009d0:	e086      	b.n	8000ae0 <__aeabi_fmul+0x158>
 80009d2:	4642      	mov	r2, r8
 80009d4:	00d0      	lsls	r0, r2, #3
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	3b7f      	subs	r3, #127	; 0x7f
 80009da:	18ed      	adds	r5, r5, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	04d2      	lsls	r2, r2, #19
 80009e0:	4302      	orrs	r2, r0
 80009e2:	4690      	mov	r8, r2
 80009e4:	469c      	mov	ip, r3
 80009e6:	0031      	movs	r1, r6
 80009e8:	464b      	mov	r3, r9
 80009ea:	4079      	eors	r1, r7
 80009ec:	1c68      	adds	r0, r5, #1
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d81c      	bhi.n	8000a2c <__aeabi_fmul+0xa4>
 80009f2:	4a76      	ldr	r2, [pc, #472]	; (8000bcc <__aeabi_fmul+0x244>)
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	469f      	mov	pc, r3
 80009fa:	0039      	movs	r1, r7
 80009fc:	4644      	mov	r4, r8
 80009fe:	46e2      	mov	sl, ip
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d00f      	beq.n	8000a26 <__aeabi_fmul+0x9e>
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fmul+0x84>
 8000a0a:	e0d7      	b.n	8000bbc <__aeabi_fmul+0x234>
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d137      	bne.n	8000a80 <__aeabi_fmul+0xf8>
 8000a10:	2000      	movs	r0, #0
 8000a12:	2400      	movs	r4, #0
 8000a14:	05c0      	lsls	r0, r0, #23
 8000a16:	4320      	orrs	r0, r4
 8000a18:	07c9      	lsls	r1, r1, #31
 8000a1a:	4308      	orrs	r0, r1
 8000a1c:	bce0      	pop	{r5, r6, r7}
 8000a1e:	46ba      	mov	sl, r7
 8000a20:	46b1      	mov	r9, r6
 8000a22:	46a8      	mov	r8, r5
 8000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2400      	movs	r4, #0
 8000a2a:	e7f3      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000a2c:	0c26      	lsrs	r6, r4, #16
 8000a2e:	0424      	lsls	r4, r4, #16
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	4644      	mov	r4, r8
 8000a34:	0424      	lsls	r4, r4, #16
 8000a36:	0c24      	lsrs	r4, r4, #16
 8000a38:	4643      	mov	r3, r8
 8000a3a:	0027      	movs	r7, r4
 8000a3c:	0c1b      	lsrs	r3, r3, #16
 8000a3e:	4357      	muls	r7, r2
 8000a40:	4374      	muls	r4, r6
 8000a42:	435a      	muls	r2, r3
 8000a44:	435e      	muls	r6, r3
 8000a46:	1912      	adds	r2, r2, r4
 8000a48:	0c3b      	lsrs	r3, r7, #16
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_fmul+0xd0>
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0252      	lsls	r2, r2, #9
 8000a54:	4694      	mov	ip, r2
 8000a56:	4466      	add	r6, ip
 8000a58:	043f      	lsls	r7, r7, #16
 8000a5a:	041a      	lsls	r2, r3, #16
 8000a5c:	0c3f      	lsrs	r7, r7, #16
 8000a5e:	19d2      	adds	r2, r2, r7
 8000a60:	0194      	lsls	r4, r2, #6
 8000a62:	1e67      	subs	r7, r4, #1
 8000a64:	41bc      	sbcs	r4, r7
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	0e92      	lsrs	r2, r2, #26
 8000a6a:	199b      	adds	r3, r3, r6
 8000a6c:	4314      	orrs	r4, r2
 8000a6e:	019b      	lsls	r3, r3, #6
 8000a70:	431c      	orrs	r4, r3
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	d400      	bmi.n	8000a78 <__aeabi_fmul+0xf0>
 8000a76:	e09b      	b.n	8000bb0 <__aeabi_fmul+0x228>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	0862      	lsrs	r2, r4, #1
 8000a7c:	401c      	ands	r4, r3
 8000a7e:	4314      	orrs	r4, r2
 8000a80:	0002      	movs	r2, r0
 8000a82:	327f      	adds	r2, #127	; 0x7f
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	dd64      	ble.n	8000b52 <__aeabi_fmul+0x1ca>
 8000a88:	0763      	lsls	r3, r4, #29
 8000a8a:	d004      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4023      	ands	r3, r4
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a94:	3404      	adds	r4, #4
 8000a96:	0123      	lsls	r3, r4, #4
 8000a98:	d503      	bpl.n	8000aa2 <__aeabi_fmul+0x11a>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <__aeabi_fmul+0x248>)
 8000a9e:	3280      	adds	r2, #128	; 0x80
 8000aa0:	401c      	ands	r4, r3
 8000aa2:	2afe      	cmp	r2, #254	; 0xfe
 8000aa4:	dcbf      	bgt.n	8000a26 <__aeabi_fmul+0x9e>
 8000aa6:	01a4      	lsls	r4, r4, #6
 8000aa8:	0a64      	lsrs	r4, r4, #9
 8000aaa:	b2d0      	uxtb	r0, r2
 8000aac:	e7b2      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d13d      	bne.n	8000b30 <__aeabi_fmul+0x1a8>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4691      	mov	r9, r2
 8000abc:	469c      	mov	ip, r3
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d129      	bne.n	8000b18 <__aeabi_fmul+0x190>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	2500      	movs	r5, #0
 8000acc:	469a      	mov	sl, r3
 8000ace:	e774      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11b      	bne.n	8000b0c <__aeabi_fmul+0x184>
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	3b06      	subs	r3, #6
 8000ada:	25ff      	movs	r5, #255	; 0xff
 8000adc:	469a      	mov	sl, r3
 8000ade:	e76c      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	35ff      	adds	r5, #255	; 0xff
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10b      	bne.n	8000b00 <__aeabi_fmul+0x178>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	464a      	mov	r2, r9
 8000aec:	431a      	orrs	r2, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	469c      	mov	ip, r3
 8000af2:	e778      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000af4:	4653      	mov	r3, sl
 8000af6:	0031      	movs	r1, r6
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d000      	beq.n	8000afe <__aeabi_fmul+0x176>
 8000afc:	e783      	b.n	8000a06 <__aeabi_fmul+0x7e>
 8000afe:	e792      	b.n	8000a26 <__aeabi_fmul+0x9e>
 8000b00:	2303      	movs	r3, #3
 8000b02:	464a      	mov	r2, r9
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4691      	mov	r9, r2
 8000b08:	469c      	mov	ip, r3
 8000b0a:	e76c      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b09      	subs	r3, #9
 8000b12:	25ff      	movs	r5, #255	; 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e750      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b18:	0020      	movs	r0, r4
 8000b1a:	f002 f8c9 	bl	8002cb0 <__clzsi2>
 8000b1e:	2576      	movs	r5, #118	; 0x76
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409c      	lsls	r4, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	426d      	negs	r5, r5
 8000b28:	4699      	mov	r9, r3
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	e744      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b30:	4640      	mov	r0, r8
 8000b32:	f002 f8bd 	bl	8002cb0 <__clzsi2>
 8000b36:	4642      	mov	r2, r8
 8000b38:	1f43      	subs	r3, r0, #5
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	4690      	mov	r8, r2
 8000b42:	469c      	mov	ip, r3
 8000b44:	3d76      	subs	r5, #118	; 0x76
 8000b46:	e74e      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b48:	2480      	movs	r4, #128	; 0x80
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	03e4      	lsls	r4, r4, #15
 8000b50:	e760      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b52:	2301      	movs	r3, #1
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	2b1b      	cmp	r3, #27
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_fmul+0x1d4>
 8000b5a:	e759      	b.n	8000a10 <__aeabi_fmul+0x88>
 8000b5c:	0022      	movs	r2, r4
 8000b5e:	309e      	adds	r0, #158	; 0x9e
 8000b60:	40da      	lsrs	r2, r3
 8000b62:	4084      	lsls	r4, r0
 8000b64:	0013      	movs	r3, r2
 8000b66:	1e62      	subs	r2, r4, #1
 8000b68:	4194      	sbcs	r4, r2
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	0763      	lsls	r3, r4, #29
 8000b6e:	d004      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b78:	3404      	adds	r4, #4
 8000b7a:	0163      	lsls	r3, r4, #5
 8000b7c:	d51a      	bpl.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2400      	movs	r4, #0
 8000b82:	e747      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	03c0      	lsls	r0, r0, #15
 8000b88:	4204      	tst	r4, r0
 8000b8a:	d009      	beq.n	8000ba0 <__aeabi_fmul+0x218>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4203      	tst	r3, r0
 8000b90:	d106      	bne.n	8000ba0 <__aeabi_fmul+0x218>
 8000b92:	4644      	mov	r4, r8
 8000b94:	4304      	orrs	r4, r0
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0039      	movs	r1, r7
 8000b9a:	20ff      	movs	r0, #255	; 0xff
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	e739      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	03c0      	lsls	r0, r0, #15
 8000ba4:	4304      	orrs	r4, r0
 8000ba6:	0264      	lsls	r4, r4, #9
 8000ba8:	0031      	movs	r1, r6
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	e731      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	e765      	b.n	8000a80 <__aeabi_fmul+0xf8>
 8000bb4:	01a4      	lsls	r4, r4, #6
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e72b      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	03c0      	lsls	r0, r0, #15
 8000bc0:	4304      	orrs	r4, r0
 8000bc2:	0264      	lsls	r4, r4, #9
 8000bc4:	20ff      	movs	r0, #255	; 0xff
 8000bc6:	0a64      	lsrs	r4, r4, #9
 8000bc8:	e724      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	0801889c 	.word	0x0801889c
 8000bd0:	f7ffffff 	.word	0xf7ffffff

08000bd4 <__aeabi_fsub>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	46ce      	mov	lr, r9
 8000bd8:	4647      	mov	r7, r8
 8000bda:	0243      	lsls	r3, r0, #9
 8000bdc:	0a5b      	lsrs	r3, r3, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	00da      	lsls	r2, r3, #3
 8000be2:	4694      	mov	ip, r2
 8000be4:	0a72      	lsrs	r2, r6, #9
 8000be6:	4691      	mov	r9, r2
 8000be8:	0045      	lsls	r5, r0, #1
 8000bea:	004a      	lsls	r2, r1, #1
 8000bec:	b580      	push	{r7, lr}
 8000bee:	0e2d      	lsrs	r5, r5, #24
 8000bf0:	001f      	movs	r7, r3
 8000bf2:	0fc4      	lsrs	r4, r0, #31
 8000bf4:	0e12      	lsrs	r2, r2, #24
 8000bf6:	0fc9      	lsrs	r1, r1, #31
 8000bf8:	09b6      	lsrs	r6, r6, #6
 8000bfa:	2aff      	cmp	r2, #255	; 0xff
 8000bfc:	d05b      	beq.n	8000cb6 <__aeabi_fsub+0xe2>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4041      	eors	r1, r0
 8000c02:	428c      	cmp	r4, r1
 8000c04:	d039      	beq.n	8000c7a <__aeabi_fsub+0xa6>
 8000c06:	1aa8      	subs	r0, r5, r2
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	dd5a      	ble.n	8000cc2 <__aeabi_fsub+0xee>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d06a      	beq.n	8000ce6 <__aeabi_fsub+0x112>
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x42>
 8000c14:	e0d9      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	04d2      	lsls	r2, r2, #19
 8000c1a:	4316      	orrs	r6, r2
 8000c1c:	281b      	cmp	r0, #27
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_fsub+0x4e>
 8000c20:	e0e9      	b.n	8000df6 <__aeabi_fsub+0x222>
 8000c22:	2001      	movs	r0, #1
 8000c24:	4663      	mov	r3, ip
 8000c26:	1a18      	subs	r0, r3, r0
 8000c28:	0143      	lsls	r3, r0, #5
 8000c2a:	d400      	bmi.n	8000c2e <__aeabi_fsub+0x5a>
 8000c2c:	e0b4      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000c2e:	0180      	lsls	r0, r0, #6
 8000c30:	0987      	lsrs	r7, r0, #6
 8000c32:	0038      	movs	r0, r7
 8000c34:	f002 f83c 	bl	8002cb0 <__clzsi2>
 8000c38:	3805      	subs	r0, #5
 8000c3a:	4087      	lsls	r7, r0
 8000c3c:	4285      	cmp	r5, r0
 8000c3e:	dc00      	bgt.n	8000c42 <__aeabi_fsub+0x6e>
 8000c40:	e0cc      	b.n	8000ddc <__aeabi_fsub+0x208>
 8000c42:	1a2d      	subs	r5, r5, r0
 8000c44:	48b5      	ldr	r0, [pc, #724]	; (8000f1c <__aeabi_fsub+0x348>)
 8000c46:	4038      	ands	r0, r7
 8000c48:	0743      	lsls	r3, r0, #29
 8000c4a:	d004      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4003      	ands	r3, r0
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c54:	3004      	adds	r0, #4
 8000c56:	0143      	lsls	r3, r0, #5
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fsub+0x88>
 8000c5a:	e0a0      	b.n	8000d9e <__aeabi_fsub+0x1ca>
 8000c5c:	1c6a      	adds	r2, r5, #1
 8000c5e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x90>
 8000c62:	e08d      	b.n	8000d80 <__aeabi_fsub+0x1ac>
 8000c64:	0180      	lsls	r0, r0, #6
 8000c66:	0a47      	lsrs	r7, r0, #9
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	05d0      	lsls	r0, r2, #23
 8000c6c:	4338      	orrs	r0, r7
 8000c6e:	07e4      	lsls	r4, r4, #31
 8000c70:	4320      	orrs	r0, r4
 8000c72:	bcc0      	pop	{r6, r7}
 8000c74:	46b9      	mov	r9, r7
 8000c76:	46b0      	mov	r8, r6
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	1aa8      	subs	r0, r5, r2
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dd45      	ble.n	8000d0e <__aeabi_fsub+0x13a>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d070      	beq.n	8000d68 <__aeabi_fsub+0x194>
 8000c86:	2dff      	cmp	r5, #255	; 0xff
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0xb8>
 8000c8a:	e09e      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	04db      	lsls	r3, r3, #19
 8000c90:	431e      	orrs	r6, r3
 8000c92:	4643      	mov	r3, r8
 8000c94:	2b1b      	cmp	r3, #27
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0xc6>
 8000c98:	e0d2      	b.n	8000e40 <__aeabi_fsub+0x26c>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	4460      	add	r0, ip
 8000c9e:	0143      	lsls	r3, r0, #5
 8000ca0:	d57a      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	2dff      	cmp	r5, #255	; 0xff
 8000ca6:	d06b      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4a9d      	ldr	r2, [pc, #628]	; (8000f20 <__aeabi_fsub+0x34c>)
 8000cac:	4003      	ands	r3, r0
 8000cae:	0840      	lsrs	r0, r0, #1
 8000cb0:	4010      	ands	r0, r2
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	e7c8      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d020      	beq.n	8000cfc <__aeabi_fsub+0x128>
 8000cba:	428c      	cmp	r4, r1
 8000cbc:	d023      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	38ff      	subs	r0, #255	; 0xff
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d039      	beq.n	8000d3a <__aeabi_fsub+0x166>
 8000cc6:	1b57      	subs	r7, r2, r5
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_fsub+0xfa>
 8000ccc:	e09d      	b.n	8000e0a <__aeabi_fsub+0x236>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x102>
 8000cd4:	e0db      	b.n	8000e8e <__aeabi_fsub+0x2ba>
 8000cd6:	1e7b      	subs	r3, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x10a>
 8000cdc:	e10d      	b.n	8000efa <__aeabi_fsub+0x326>
 8000cde:	2fff      	cmp	r7, #255	; 0xff
 8000ce0:	d071      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	e098      	b.n	8000e18 <__aeabi_fsub+0x244>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x118>
 8000cea:	e0a7      	b.n	8000e3c <__aeabi_fsub+0x268>
 8000cec:	1e42      	subs	r2, r0, #1
 8000cee:	2801      	cmp	r0, #1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x120>
 8000cf2:	e0e6      	b.n	8000ec2 <__aeabi_fsub+0x2ee>
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d068      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	e78f      	b.n	8000c1c <__aeabi_fsub+0x48>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4041      	eors	r1, r0
 8000d00:	42a1      	cmp	r1, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000d04:	e77f      	b.n	8000c06 <__aeabi_fsub+0x32>
 8000d06:	20ff      	movs	r0, #255	; 0xff
 8000d08:	4240      	negs	r0, r0
 8000d0a:	4680      	mov	r8, r0
 8000d0c:	44a8      	add	r8, r5
 8000d0e:	4640      	mov	r0, r8
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d038      	beq.n	8000d86 <__aeabi_fsub+0x1b2>
 8000d14:	1b51      	subs	r1, r2, r5
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x148>
 8000d1a:	e0ae      	b.n	8000e7a <__aeabi_fsub+0x2a6>
 8000d1c:	2aff      	cmp	r2, #255	; 0xff
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x14e>
 8000d20:	e0df      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	4660      	mov	r0, ip
 8000d26:	04db      	lsls	r3, r3, #19
 8000d28:	4318      	orrs	r0, r3
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	291b      	cmp	r1, #27
 8000d2e:	dc00      	bgt.n	8000d32 <__aeabi_fsub+0x15e>
 8000d30:	e0d9      	b.n	8000ee6 <__aeabi_fsub+0x312>
 8000d32:	2001      	movs	r0, #1
 8000d34:	0015      	movs	r5, r2
 8000d36:	1980      	adds	r0, r0, r6
 8000d38:	e7b1      	b.n	8000c9e <__aeabi_fsub+0xca>
 8000d3a:	20fe      	movs	r0, #254	; 0xfe
 8000d3c:	1c6a      	adds	r2, r5, #1
 8000d3e:	4210      	tst	r0, r2
 8000d40:	d171      	bne.n	8000e26 <__aeabi_fsub+0x252>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x174>
 8000d46:	e0a6      	b.n	8000e96 <__aeabi_fsub+0x2c2>
 8000d48:	4663      	mov	r3, ip
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x17c>
 8000d4e:	e0d9      	b.n	8000f04 <__aeabi_fsub+0x330>
 8000d50:	2200      	movs	r2, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x184>
 8000d56:	e788      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d58:	1b98      	subs	r0, r3, r6
 8000d5a:	0143      	lsls	r3, r0, #5
 8000d5c:	d400      	bmi.n	8000d60 <__aeabi_fsub+0x18c>
 8000d5e:	e0e1      	b.n	8000f24 <__aeabi_fsub+0x350>
 8000d60:	4663      	mov	r3, ip
 8000d62:	000c      	movs	r4, r1
 8000d64:	1af0      	subs	r0, r6, r3
 8000d66:	e76f      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x19a>
 8000d6c:	e0b7      	b.n	8000ede <__aeabi_fsub+0x30a>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	2801      	cmp	r0, #1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1a4>
 8000d76:	e09c      	b.n	8000eb2 <__aeabi_fsub+0x2de>
 8000d78:	28ff      	cmp	r0, #255	; 0xff
 8000d7a:	d026      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	e788      	b.n	8000c92 <__aeabi_fsub+0xbe>
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	2700      	movs	r7, #0
 8000d84:	e771      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d86:	20fe      	movs	r0, #254	; 0xfe
 8000d88:	1c6a      	adds	r2, r5, #1
 8000d8a:	4210      	tst	r0, r2
 8000d8c:	d064      	beq.n	8000e58 <__aeabi_fsub+0x284>
 8000d8e:	2aff      	cmp	r2, #255	; 0xff
 8000d90:	d0f6      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000d92:	0015      	movs	r5, r2
 8000d94:	4466      	add	r6, ip
 8000d96:	0870      	lsrs	r0, r6, #1
 8000d98:	0743      	lsls	r3, r0, #29
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fsub+0x1ca>
 8000d9c:	e756      	b.n	8000c4c <__aeabi_fsub+0x78>
 8000d9e:	08c3      	lsrs	r3, r0, #3
 8000da0:	2dff      	cmp	r5, #255	; 0xff
 8000da2:	d012      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	0a5f      	lsrs	r7, r3, #9
 8000da8:	b2ea      	uxtb	r2, r5
 8000daa:	e75e      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000dac:	4662      	mov	r2, ip
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000db2:	e096      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d008      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	03d2      	lsls	r2, r2, #15
 8000dbc:	4213      	tst	r3, r2
 8000dbe:	d004      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	4210      	tst	r0, r2
 8000dc4:	d101      	bne.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc6:	000c      	movs	r4, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0d8      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000dce:	2780      	movs	r7, #128	; 0x80
 8000dd0:	03ff      	lsls	r7, r7, #15
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	027f      	lsls	r7, r7, #9
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	0a7f      	lsrs	r7, r7, #9
 8000dda:	e746      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000ddc:	2320      	movs	r3, #32
 8000dde:	003a      	movs	r2, r7
 8000de0:	1b45      	subs	r5, r0, r5
 8000de2:	0038      	movs	r0, r7
 8000de4:	3501      	adds	r5, #1
 8000de6:	40ea      	lsrs	r2, r5
 8000de8:	1b5d      	subs	r5, r3, r5
 8000dea:	40a8      	lsls	r0, r5
 8000dec:	1e43      	subs	r3, r0, #1
 8000dee:	4198      	sbcs	r0, r3
 8000df0:	2500      	movs	r5, #0
 8000df2:	4310      	orrs	r0, r2
 8000df4:	e728      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000df6:	2320      	movs	r3, #32
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	0032      	movs	r2, r6
 8000dfc:	409e      	lsls	r6, r3
 8000dfe:	40c2      	lsrs	r2, r0
 8000e00:	0030      	movs	r0, r6
 8000e02:	1e43      	subs	r3, r0, #1
 8000e04:	4198      	sbcs	r0, r3
 8000e06:	4310      	orrs	r0, r2
 8000e08:	e70c      	b.n	8000c24 <__aeabi_fsub+0x50>
 8000e0a:	2aff      	cmp	r2, #255	; 0xff
 8000e0c:	d0db      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	4660      	mov	r0, ip
 8000e12:	04db      	lsls	r3, r3, #19
 8000e14:	4318      	orrs	r0, r3
 8000e16:	4684      	mov	ip, r0
 8000e18:	2f1b      	cmp	r7, #27
 8000e1a:	dd56      	ble.n	8000eca <__aeabi_fsub+0x2f6>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	000c      	movs	r4, r1
 8000e20:	0015      	movs	r5, r2
 8000e22:	1a30      	subs	r0, r6, r0
 8000e24:	e700      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000e26:	4663      	mov	r3, ip
 8000e28:	1b9f      	subs	r7, r3, r6
 8000e2a:	017b      	lsls	r3, r7, #5
 8000e2c:	d43d      	bmi.n	8000eaa <__aeabi_fsub+0x2d6>
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000e32:	e6fe      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000e34:	2400      	movs	r4, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e716      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e3c:	0005      	movs	r5, r0
 8000e3e:	e7af      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e40:	0032      	movs	r2, r6
 8000e42:	4643      	mov	r3, r8
 8000e44:	4641      	mov	r1, r8
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	2320      	movs	r3, #32
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	409e      	lsls	r6, r3
 8000e4e:	0030      	movs	r0, r6
 8000e50:	1e43      	subs	r3, r0, #1
 8000e52:	4198      	sbcs	r0, r3
 8000e54:	4310      	orrs	r0, r2
 8000e56:	e721      	b.n	8000c9c <__aeabi_fsub+0xc8>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d1a7      	bne.n	8000dac <__aeabi_fsub+0x1d8>
 8000e5c:	4663      	mov	r3, ip
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d059      	beq.n	8000f16 <__aeabi_fsub+0x342>
 8000e62:	2200      	movs	r2, #0
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x296>
 8000e68:	e6ff      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e6a:	0030      	movs	r0, r6
 8000e6c:	4460      	add	r0, ip
 8000e6e:	0143      	lsls	r3, r0, #5
 8000e70:	d592      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <__aeabi_fsub+0x348>)
 8000e74:	3501      	adds	r5, #1
 8000e76:	4018      	ands	r0, r3
 8000e78:	e78e      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d047      	beq.n	8000f10 <__aeabi_fsub+0x33c>
 8000e80:	1e4b      	subs	r3, r1, #1
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d015      	beq.n	8000eb2 <__aeabi_fsub+0x2de>
 8000e86:	29ff      	cmp	r1, #255	; 0xff
 8000e88:	d02b      	beq.n	8000ee2 <__aeabi_fsub+0x30e>
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	e74e      	b.n	8000d2c <__aeabi_fsub+0x158>
 8000e8e:	000c      	movs	r4, r1
 8000e90:	464b      	mov	r3, r9
 8000e92:	003d      	movs	r5, r7
 8000e94:	e784      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e96:	4662      	mov	r2, ip
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d18b      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d192      	bne.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ea0:	2780      	movs	r7, #128	; 0x80
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	03ff      	lsls	r7, r7, #15
 8000ea8:	e6df      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000eaa:	4663      	mov	r3, ip
 8000eac:	000c      	movs	r4, r1
 8000eae:	1af7      	subs	r7, r6, r3
 8000eb0:	e6bf      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	4460      	add	r0, ip
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x2ea>
 8000ebc:	e76c      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ebe:	2502      	movs	r5, #2
 8000ec0:	e6f2      	b.n	8000ca8 <__aeabi_fsub+0xd4>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2501      	movs	r5, #1
 8000ec6:	1b98      	subs	r0, r3, r6
 8000ec8:	e6ae      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000eca:	2320      	movs	r3, #32
 8000ecc:	4664      	mov	r4, ip
 8000ece:	4660      	mov	r0, ip
 8000ed0:	40fc      	lsrs	r4, r7
 8000ed2:	1bdf      	subs	r7, r3, r7
 8000ed4:	40b8      	lsls	r0, r7
 8000ed6:	1e43      	subs	r3, r0, #1
 8000ed8:	4198      	sbcs	r0, r3
 8000eda:	4320      	orrs	r0, r4
 8000edc:	e79f      	b.n	8000e1e <__aeabi_fsub+0x24a>
 8000ede:	0005      	movs	r5, r0
 8000ee0:	e75e      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	e771      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	4665      	mov	r5, ip
 8000eea:	4660      	mov	r0, ip
 8000eec:	40cd      	lsrs	r5, r1
 8000eee:	1a59      	subs	r1, r3, r1
 8000ef0:	4088      	lsls	r0, r1
 8000ef2:	1e43      	subs	r3, r0, #1
 8000ef4:	4198      	sbcs	r0, r3
 8000ef6:	4328      	orrs	r0, r5
 8000ef8:	e71c      	b.n	8000d34 <__aeabi_fsub+0x160>
 8000efa:	4663      	mov	r3, ip
 8000efc:	000c      	movs	r4, r1
 8000efe:	2501      	movs	r5, #1
 8000f00:	1af0      	subs	r0, r6, r3
 8000f02:	e691      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d095      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000f08:	000c      	movs	r4, r1
 8000f0a:	464f      	mov	r7, r9
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	e6ac      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f10:	464b      	mov	r3, r9
 8000f12:	000d      	movs	r5, r1
 8000f14:	e744      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000f16:	464f      	mov	r7, r9
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f1c:	fbffffff 	.word	0xfbffffff
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x356>
 8000f28:	e736      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	e69c      	b.n	8000c6a <__aeabi_fsub+0x96>

08000f30 <__aeabi_f2iz>:
 8000f30:	0241      	lsls	r1, r0, #9
 8000f32:	0042      	lsls	r2, r0, #1
 8000f34:	0fc3      	lsrs	r3, r0, #31
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	2000      	movs	r0, #0
 8000f3a:	0e12      	lsrs	r2, r2, #24
 8000f3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000f3e:	dd03      	ble.n	8000f48 <__aeabi_f2iz+0x18>
 8000f40:	2a9d      	cmp	r2, #157	; 0x9d
 8000f42:	dd02      	ble.n	8000f4a <__aeabi_f2iz+0x1a>
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <__aeabi_f2iz+0x3c>)
 8000f46:	1898      	adds	r0, r3, r2
 8000f48:	4770      	bx	lr
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	0400      	lsls	r0, r0, #16
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	2a95      	cmp	r2, #149	; 0x95
 8000f52:	dc07      	bgt.n	8000f64 <__aeabi_f2iz+0x34>
 8000f54:	2096      	movs	r0, #150	; 0x96
 8000f56:	1a82      	subs	r2, r0, r2
 8000f58:	40d1      	lsrs	r1, r2
 8000f5a:	4248      	negs	r0, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__aeabi_f2iz+0x18>
 8000f60:	0008      	movs	r0, r1
 8000f62:	e7f1      	b.n	8000f48 <__aeabi_f2iz+0x18>
 8000f64:	3a96      	subs	r2, #150	; 0x96
 8000f66:	4091      	lsls	r1, r2
 8000f68:	e7f7      	b.n	8000f5a <__aeabi_f2iz+0x2a>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7fffffff 	.word	0x7fffffff

08000f70 <__aeabi_i2f>:
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d013      	beq.n	8000f9e <__aeabi_i2f+0x2e>
 8000f76:	17c3      	asrs	r3, r0, #31
 8000f78:	18c6      	adds	r6, r0, r3
 8000f7a:	405e      	eors	r6, r3
 8000f7c:	0fc4      	lsrs	r4, r0, #31
 8000f7e:	0030      	movs	r0, r6
 8000f80:	f001 fe96 	bl	8002cb0 <__clzsi2>
 8000f84:	239e      	movs	r3, #158	; 0x9e
 8000f86:	0005      	movs	r5, r0
 8000f88:	1a1b      	subs	r3, r3, r0
 8000f8a:	2b96      	cmp	r3, #150	; 0x96
 8000f8c:	dc0f      	bgt.n	8000fae <__aeabi_i2f+0x3e>
 8000f8e:	2808      	cmp	r0, #8
 8000f90:	dd01      	ble.n	8000f96 <__aeabi_i2f+0x26>
 8000f92:	3d08      	subs	r5, #8
 8000f94:	40ae      	lsls	r6, r5
 8000f96:	0276      	lsls	r6, r6, #9
 8000f98:	0a76      	lsrs	r6, r6, #9
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	e002      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	05c0      	lsls	r0, r0, #23
 8000fa6:	4330      	orrs	r0, r6
 8000fa8:	07e4      	lsls	r4, r4, #31
 8000faa:	4320      	orrs	r0, r4
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fae:	2b99      	cmp	r3, #153	; 0x99
 8000fb0:	dd0c      	ble.n	8000fcc <__aeabi_i2f+0x5c>
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	0031      	movs	r1, r6
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	40d1      	lsrs	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	0001      	movs	r1, r0
 8000fbe:	0030      	movs	r0, r6
 8000fc0:	311b      	adds	r1, #27
 8000fc2:	4088      	lsls	r0, r1
 8000fc4:	1e41      	subs	r1, r0, #1
 8000fc6:	4188      	sbcs	r0, r1
 8000fc8:	4302      	orrs	r2, r0
 8000fca:	0016      	movs	r6, r2
 8000fcc:	2d05      	cmp	r5, #5
 8000fce:	dc12      	bgt.n	8000ff6 <__aeabi_i2f+0x86>
 8000fd0:	0031      	movs	r1, r6
 8000fd2:	4f0d      	ldr	r7, [pc, #52]	; (8001008 <__aeabi_i2f+0x98>)
 8000fd4:	4039      	ands	r1, r7
 8000fd6:	0772      	lsls	r2, r6, #29
 8000fd8:	d009      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8000fda:	200f      	movs	r0, #15
 8000fdc:	4030      	ands	r0, r6
 8000fde:	2804      	cmp	r0, #4
 8000fe0:	d005      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8000fe2:	3104      	adds	r1, #4
 8000fe4:	014a      	lsls	r2, r1, #5
 8000fe6:	d502      	bpl.n	8000fee <__aeabi_i2f+0x7e>
 8000fe8:	239f      	movs	r3, #159	; 0x9f
 8000fea:	4039      	ands	r1, r7
 8000fec:	1b5b      	subs	r3, r3, r5
 8000fee:	0189      	lsls	r1, r1, #6
 8000ff0:	0a4e      	lsrs	r6, r1, #9
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	e7d6      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000ff6:	1f6a      	subs	r2, r5, #5
 8000ff8:	4096      	lsls	r6, r2
 8000ffa:	0031      	movs	r1, r6
 8000ffc:	4f02      	ldr	r7, [pc, #8]	; (8001008 <__aeabi_i2f+0x98>)
 8000ffe:	4039      	ands	r1, r7
 8001000:	0772      	lsls	r2, r6, #29
 8001002:	d0f4      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8001004:	e7e9      	b.n	8000fda <__aeabi_i2f+0x6a>
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	fbffffff 	.word	0xfbffffff

0800100c <__aeabi_ui2f>:
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	1e05      	subs	r5, r0, #0
 8001010:	d00e      	beq.n	8001030 <__aeabi_ui2f+0x24>
 8001012:	f001 fe4d 	bl	8002cb0 <__clzsi2>
 8001016:	239e      	movs	r3, #158	; 0x9e
 8001018:	0004      	movs	r4, r0
 800101a:	1a1b      	subs	r3, r3, r0
 800101c:	2b96      	cmp	r3, #150	; 0x96
 800101e:	dc0c      	bgt.n	800103a <__aeabi_ui2f+0x2e>
 8001020:	2808      	cmp	r0, #8
 8001022:	dd01      	ble.n	8001028 <__aeabi_ui2f+0x1c>
 8001024:	3c08      	subs	r4, #8
 8001026:	40a5      	lsls	r5, r4
 8001028:	026d      	lsls	r5, r5, #9
 800102a:	0a6d      	lsrs	r5, r5, #9
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	e001      	b.n	8001034 <__aeabi_ui2f+0x28>
 8001030:	2000      	movs	r0, #0
 8001032:	2500      	movs	r5, #0
 8001034:	05c0      	lsls	r0, r0, #23
 8001036:	4328      	orrs	r0, r5
 8001038:	bd70      	pop	{r4, r5, r6, pc}
 800103a:	2b99      	cmp	r3, #153	; 0x99
 800103c:	dd09      	ble.n	8001052 <__aeabi_ui2f+0x46>
 800103e:	0002      	movs	r2, r0
 8001040:	0029      	movs	r1, r5
 8001042:	321b      	adds	r2, #27
 8001044:	4091      	lsls	r1, r2
 8001046:	1e4a      	subs	r2, r1, #1
 8001048:	4191      	sbcs	r1, r2
 800104a:	2205      	movs	r2, #5
 800104c:	1a12      	subs	r2, r2, r0
 800104e:	40d5      	lsrs	r5, r2
 8001050:	430d      	orrs	r5, r1
 8001052:	2c05      	cmp	r4, #5
 8001054:	dc12      	bgt.n	800107c <__aeabi_ui2f+0x70>
 8001056:	0029      	movs	r1, r5
 8001058:	4e0c      	ldr	r6, [pc, #48]	; (800108c <__aeabi_ui2f+0x80>)
 800105a:	4031      	ands	r1, r6
 800105c:	076a      	lsls	r2, r5, #29
 800105e:	d009      	beq.n	8001074 <__aeabi_ui2f+0x68>
 8001060:	200f      	movs	r0, #15
 8001062:	4028      	ands	r0, r5
 8001064:	2804      	cmp	r0, #4
 8001066:	d005      	beq.n	8001074 <__aeabi_ui2f+0x68>
 8001068:	3104      	adds	r1, #4
 800106a:	014a      	lsls	r2, r1, #5
 800106c:	d502      	bpl.n	8001074 <__aeabi_ui2f+0x68>
 800106e:	239f      	movs	r3, #159	; 0x9f
 8001070:	4031      	ands	r1, r6
 8001072:	1b1b      	subs	r3, r3, r4
 8001074:	0189      	lsls	r1, r1, #6
 8001076:	0a4d      	lsrs	r5, r1, #9
 8001078:	b2d8      	uxtb	r0, r3
 800107a:	e7db      	b.n	8001034 <__aeabi_ui2f+0x28>
 800107c:	1f62      	subs	r2, r4, #5
 800107e:	4095      	lsls	r5, r2
 8001080:	0029      	movs	r1, r5
 8001082:	4e02      	ldr	r6, [pc, #8]	; (800108c <__aeabi_ui2f+0x80>)
 8001084:	4031      	ands	r1, r6
 8001086:	076a      	lsls	r2, r5, #29
 8001088:	d0f4      	beq.n	8001074 <__aeabi_ui2f+0x68>
 800108a:	e7e9      	b.n	8001060 <__aeabi_ui2f+0x54>
 800108c:	fbffffff 	.word	0xfbffffff

08001090 <__aeabi_dadd>:
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	464f      	mov	r7, r9
 8001094:	4646      	mov	r6, r8
 8001096:	46d6      	mov	lr, sl
 8001098:	000d      	movs	r5, r1
 800109a:	0004      	movs	r4, r0
 800109c:	b5c0      	push	{r6, r7, lr}
 800109e:	001f      	movs	r7, r3
 80010a0:	0011      	movs	r1, r2
 80010a2:	0328      	lsls	r0, r5, #12
 80010a4:	0f62      	lsrs	r2, r4, #29
 80010a6:	0a40      	lsrs	r0, r0, #9
 80010a8:	4310      	orrs	r0, r2
 80010aa:	007a      	lsls	r2, r7, #1
 80010ac:	0d52      	lsrs	r2, r2, #21
 80010ae:	00e3      	lsls	r3, r4, #3
 80010b0:	033c      	lsls	r4, r7, #12
 80010b2:	4691      	mov	r9, r2
 80010b4:	0a64      	lsrs	r4, r4, #9
 80010b6:	0ffa      	lsrs	r2, r7, #31
 80010b8:	0f4f      	lsrs	r7, r1, #29
 80010ba:	006e      	lsls	r6, r5, #1
 80010bc:	4327      	orrs	r7, r4
 80010be:	4692      	mov	sl, r2
 80010c0:	46b8      	mov	r8, r7
 80010c2:	0d76      	lsrs	r6, r6, #21
 80010c4:	0fed      	lsrs	r5, r5, #31
 80010c6:	00c9      	lsls	r1, r1, #3
 80010c8:	4295      	cmp	r5, r2
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x3e>
 80010cc:	e099      	b.n	8001202 <__aeabi_dadd+0x172>
 80010ce:	464c      	mov	r4, r9
 80010d0:	1b34      	subs	r4, r6, r4
 80010d2:	46a4      	mov	ip, r4
 80010d4:	2c00      	cmp	r4, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_dadd+0x4a>
 80010d8:	e07c      	b.n	80011d4 <__aeabi_dadd+0x144>
 80010da:	464a      	mov	r2, r9
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x52>
 80010e0:	e0b8      	b.n	8001254 <__aeabi_dadd+0x1c4>
 80010e2:	4ac5      	ldr	r2, [pc, #788]	; (80013f8 <__aeabi_dadd+0x368>)
 80010e4:	4296      	cmp	r6, r2
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x5a>
 80010e8:	e11c      	b.n	8001324 <__aeabi_dadd+0x294>
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	003c      	movs	r4, r7
 80010ee:	0412      	lsls	r2, r2, #16
 80010f0:	4314      	orrs	r4, r2
 80010f2:	46a0      	mov	r8, r4
 80010f4:	4662      	mov	r2, ip
 80010f6:	2a38      	cmp	r2, #56	; 0x38
 80010f8:	dd00      	ble.n	80010fc <__aeabi_dadd+0x6c>
 80010fa:	e161      	b.n	80013c0 <__aeabi_dadd+0x330>
 80010fc:	2a1f      	cmp	r2, #31
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dadd+0x72>
 8001100:	e1cc      	b.n	800149c <__aeabi_dadd+0x40c>
 8001102:	4664      	mov	r4, ip
 8001104:	2220      	movs	r2, #32
 8001106:	1b12      	subs	r2, r2, r4
 8001108:	4644      	mov	r4, r8
 800110a:	4094      	lsls	r4, r2
 800110c:	000f      	movs	r7, r1
 800110e:	46a1      	mov	r9, r4
 8001110:	4664      	mov	r4, ip
 8001112:	4091      	lsls	r1, r2
 8001114:	40e7      	lsrs	r7, r4
 8001116:	464c      	mov	r4, r9
 8001118:	1e4a      	subs	r2, r1, #1
 800111a:	4191      	sbcs	r1, r2
 800111c:	433c      	orrs	r4, r7
 800111e:	4642      	mov	r2, r8
 8001120:	4321      	orrs	r1, r4
 8001122:	4664      	mov	r4, ip
 8001124:	40e2      	lsrs	r2, r4
 8001126:	1a80      	subs	r0, r0, r2
 8001128:	1a5c      	subs	r4, r3, r1
 800112a:	42a3      	cmp	r3, r4
 800112c:	419b      	sbcs	r3, r3
 800112e:	425f      	negs	r7, r3
 8001130:	1bc7      	subs	r7, r0, r7
 8001132:	023b      	lsls	r3, r7, #8
 8001134:	d400      	bmi.n	8001138 <__aeabi_dadd+0xa8>
 8001136:	e0d0      	b.n	80012da <__aeabi_dadd+0x24a>
 8001138:	027f      	lsls	r7, r7, #9
 800113a:	0a7f      	lsrs	r7, r7, #9
 800113c:	2f00      	cmp	r7, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_dadd+0xb2>
 8001140:	e0ff      	b.n	8001342 <__aeabi_dadd+0x2b2>
 8001142:	0038      	movs	r0, r7
 8001144:	f001 fdb4 	bl	8002cb0 <__clzsi2>
 8001148:	0001      	movs	r1, r0
 800114a:	3908      	subs	r1, #8
 800114c:	2320      	movs	r3, #32
 800114e:	0022      	movs	r2, r4
 8001150:	1a5b      	subs	r3, r3, r1
 8001152:	408f      	lsls	r7, r1
 8001154:	40da      	lsrs	r2, r3
 8001156:	408c      	lsls	r4, r1
 8001158:	4317      	orrs	r7, r2
 800115a:	42b1      	cmp	r1, r6
 800115c:	da00      	bge.n	8001160 <__aeabi_dadd+0xd0>
 800115e:	e0ff      	b.n	8001360 <__aeabi_dadd+0x2d0>
 8001160:	1b89      	subs	r1, r1, r6
 8001162:	1c4b      	adds	r3, r1, #1
 8001164:	2b1f      	cmp	r3, #31
 8001166:	dd00      	ble.n	800116a <__aeabi_dadd+0xda>
 8001168:	e0a8      	b.n	80012bc <__aeabi_dadd+0x22c>
 800116a:	2220      	movs	r2, #32
 800116c:	0039      	movs	r1, r7
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	0020      	movs	r0, r4
 8001172:	4094      	lsls	r4, r2
 8001174:	4091      	lsls	r1, r2
 8001176:	40d8      	lsrs	r0, r3
 8001178:	1e62      	subs	r2, r4, #1
 800117a:	4194      	sbcs	r4, r2
 800117c:	40df      	lsrs	r7, r3
 800117e:	2600      	movs	r6, #0
 8001180:	4301      	orrs	r1, r0
 8001182:	430c      	orrs	r4, r1
 8001184:	0763      	lsls	r3, r4, #29
 8001186:	d009      	beq.n	800119c <__aeabi_dadd+0x10c>
 8001188:	230f      	movs	r3, #15
 800118a:	4023      	ands	r3, r4
 800118c:	2b04      	cmp	r3, #4
 800118e:	d005      	beq.n	800119c <__aeabi_dadd+0x10c>
 8001190:	1d23      	adds	r3, r4, #4
 8001192:	42a3      	cmp	r3, r4
 8001194:	41a4      	sbcs	r4, r4
 8001196:	4264      	negs	r4, r4
 8001198:	193f      	adds	r7, r7, r4
 800119a:	001c      	movs	r4, r3
 800119c:	023b      	lsls	r3, r7, #8
 800119e:	d400      	bmi.n	80011a2 <__aeabi_dadd+0x112>
 80011a0:	e09e      	b.n	80012e0 <__aeabi_dadd+0x250>
 80011a2:	4b95      	ldr	r3, [pc, #596]	; (80013f8 <__aeabi_dadd+0x368>)
 80011a4:	3601      	adds	r6, #1
 80011a6:	429e      	cmp	r6, r3
 80011a8:	d100      	bne.n	80011ac <__aeabi_dadd+0x11c>
 80011aa:	e0b7      	b.n	800131c <__aeabi_dadd+0x28c>
 80011ac:	4a93      	ldr	r2, [pc, #588]	; (80013fc <__aeabi_dadd+0x36c>)
 80011ae:	08e4      	lsrs	r4, r4, #3
 80011b0:	4017      	ands	r7, r2
 80011b2:	077b      	lsls	r3, r7, #29
 80011b4:	0571      	lsls	r1, r6, #21
 80011b6:	027f      	lsls	r7, r7, #9
 80011b8:	4323      	orrs	r3, r4
 80011ba:	0b3f      	lsrs	r7, r7, #12
 80011bc:	0d4a      	lsrs	r2, r1, #21
 80011be:	0512      	lsls	r2, r2, #20
 80011c0:	433a      	orrs	r2, r7
 80011c2:	07ed      	lsls	r5, r5, #31
 80011c4:	432a      	orrs	r2, r5
 80011c6:	0018      	movs	r0, r3
 80011c8:	0011      	movs	r1, r2
 80011ca:	bce0      	pop	{r5, r6, r7}
 80011cc:	46ba      	mov	sl, r7
 80011ce:	46b1      	mov	r9, r6
 80011d0:	46a8      	mov	r8, r5
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	d04b      	beq.n	8001270 <__aeabi_dadd+0x1e0>
 80011d8:	464c      	mov	r4, r9
 80011da:	1ba4      	subs	r4, r4, r6
 80011dc:	46a4      	mov	ip, r4
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_dadd+0x154>
 80011e2:	e123      	b.n	800142c <__aeabi_dadd+0x39c>
 80011e4:	0004      	movs	r4, r0
 80011e6:	431c      	orrs	r4, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x15c>
 80011ea:	e1af      	b.n	800154c <__aeabi_dadd+0x4bc>
 80011ec:	4662      	mov	r2, ip
 80011ee:	1e54      	subs	r4, r2, #1
 80011f0:	2a01      	cmp	r2, #1
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x166>
 80011f4:	e215      	b.n	8001622 <__aeabi_dadd+0x592>
 80011f6:	4d80      	ldr	r5, [pc, #512]	; (80013f8 <__aeabi_dadd+0x368>)
 80011f8:	45ac      	cmp	ip, r5
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x16e>
 80011fc:	e1c8      	b.n	8001590 <__aeabi_dadd+0x500>
 80011fe:	46a4      	mov	ip, r4
 8001200:	e11b      	b.n	800143a <__aeabi_dadd+0x3aa>
 8001202:	464a      	mov	r2, r9
 8001204:	1ab2      	subs	r2, r6, r2
 8001206:	4694      	mov	ip, r2
 8001208:	2a00      	cmp	r2, #0
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x17e>
 800120c:	e0ac      	b.n	8001368 <__aeabi_dadd+0x2d8>
 800120e:	464a      	mov	r2, r9
 8001210:	2a00      	cmp	r2, #0
 8001212:	d043      	beq.n	800129c <__aeabi_dadd+0x20c>
 8001214:	4a78      	ldr	r2, [pc, #480]	; (80013f8 <__aeabi_dadd+0x368>)
 8001216:	4296      	cmp	r6, r2
 8001218:	d100      	bne.n	800121c <__aeabi_dadd+0x18c>
 800121a:	e1af      	b.n	800157c <__aeabi_dadd+0x4ec>
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	003c      	movs	r4, r7
 8001220:	0412      	lsls	r2, r2, #16
 8001222:	4314      	orrs	r4, r2
 8001224:	46a0      	mov	r8, r4
 8001226:	4662      	mov	r2, ip
 8001228:	2a38      	cmp	r2, #56	; 0x38
 800122a:	dc67      	bgt.n	80012fc <__aeabi_dadd+0x26c>
 800122c:	2a1f      	cmp	r2, #31
 800122e:	dc00      	bgt.n	8001232 <__aeabi_dadd+0x1a2>
 8001230:	e15f      	b.n	80014f2 <__aeabi_dadd+0x462>
 8001232:	4647      	mov	r7, r8
 8001234:	3a20      	subs	r2, #32
 8001236:	40d7      	lsrs	r7, r2
 8001238:	4662      	mov	r2, ip
 800123a:	2a20      	cmp	r2, #32
 800123c:	d005      	beq.n	800124a <__aeabi_dadd+0x1ba>
 800123e:	4664      	mov	r4, ip
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	1b12      	subs	r2, r2, r4
 8001244:	4644      	mov	r4, r8
 8001246:	4094      	lsls	r4, r2
 8001248:	4321      	orrs	r1, r4
 800124a:	1e4a      	subs	r2, r1, #1
 800124c:	4191      	sbcs	r1, r2
 800124e:	000c      	movs	r4, r1
 8001250:	433c      	orrs	r4, r7
 8001252:	e057      	b.n	8001304 <__aeabi_dadd+0x274>
 8001254:	003a      	movs	r2, r7
 8001256:	430a      	orrs	r2, r1
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x1cc>
 800125a:	e105      	b.n	8001468 <__aeabi_dadd+0x3d8>
 800125c:	0022      	movs	r2, r4
 800125e:	3a01      	subs	r2, #1
 8001260:	2c01      	cmp	r4, #1
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x1d6>
 8001264:	e182      	b.n	800156c <__aeabi_dadd+0x4dc>
 8001266:	4c64      	ldr	r4, [pc, #400]	; (80013f8 <__aeabi_dadd+0x368>)
 8001268:	45a4      	cmp	ip, r4
 800126a:	d05b      	beq.n	8001324 <__aeabi_dadd+0x294>
 800126c:	4694      	mov	ip, r2
 800126e:	e741      	b.n	80010f4 <__aeabi_dadd+0x64>
 8001270:	4c63      	ldr	r4, [pc, #396]	; (8001400 <__aeabi_dadd+0x370>)
 8001272:	1c77      	adds	r7, r6, #1
 8001274:	4227      	tst	r7, r4
 8001276:	d000      	beq.n	800127a <__aeabi_dadd+0x1ea>
 8001278:	e0c4      	b.n	8001404 <__aeabi_dadd+0x374>
 800127a:	0004      	movs	r4, r0
 800127c:	431c      	orrs	r4, r3
 800127e:	2e00      	cmp	r6, #0
 8001280:	d000      	beq.n	8001284 <__aeabi_dadd+0x1f4>
 8001282:	e169      	b.n	8001558 <__aeabi_dadd+0x4c8>
 8001284:	2c00      	cmp	r4, #0
 8001286:	d100      	bne.n	800128a <__aeabi_dadd+0x1fa>
 8001288:	e1bf      	b.n	800160a <__aeabi_dadd+0x57a>
 800128a:	4644      	mov	r4, r8
 800128c:	430c      	orrs	r4, r1
 800128e:	d000      	beq.n	8001292 <__aeabi_dadd+0x202>
 8001290:	e1d0      	b.n	8001634 <__aeabi_dadd+0x5a4>
 8001292:	0742      	lsls	r2, r0, #29
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	4313      	orrs	r3, r2
 8001298:	08c0      	lsrs	r0, r0, #3
 800129a:	e029      	b.n	80012f0 <__aeabi_dadd+0x260>
 800129c:	003a      	movs	r2, r7
 800129e:	430a      	orrs	r2, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x214>
 80012a2:	e170      	b.n	8001586 <__aeabi_dadd+0x4f6>
 80012a4:	4662      	mov	r2, ip
 80012a6:	4664      	mov	r4, ip
 80012a8:	3a01      	subs	r2, #1
 80012aa:	2c01      	cmp	r4, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dadd+0x220>
 80012ae:	e0e0      	b.n	8001472 <__aeabi_dadd+0x3e2>
 80012b0:	4c51      	ldr	r4, [pc, #324]	; (80013f8 <__aeabi_dadd+0x368>)
 80012b2:	45a4      	cmp	ip, r4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x228>
 80012b6:	e161      	b.n	800157c <__aeabi_dadd+0x4ec>
 80012b8:	4694      	mov	ip, r2
 80012ba:	e7b4      	b.n	8001226 <__aeabi_dadd+0x196>
 80012bc:	003a      	movs	r2, r7
 80012be:	391f      	subs	r1, #31
 80012c0:	40ca      	lsrs	r2, r1
 80012c2:	0011      	movs	r1, r2
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d003      	beq.n	80012d0 <__aeabi_dadd+0x240>
 80012c8:	2240      	movs	r2, #64	; 0x40
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	409f      	lsls	r7, r3
 80012ce:	433c      	orrs	r4, r7
 80012d0:	1e63      	subs	r3, r4, #1
 80012d2:	419c      	sbcs	r4, r3
 80012d4:	2700      	movs	r7, #0
 80012d6:	2600      	movs	r6, #0
 80012d8:	430c      	orrs	r4, r1
 80012da:	0763      	lsls	r3, r4, #29
 80012dc:	d000      	beq.n	80012e0 <__aeabi_dadd+0x250>
 80012de:	e753      	b.n	8001188 <__aeabi_dadd+0xf8>
 80012e0:	46b4      	mov	ip, r6
 80012e2:	08e4      	lsrs	r4, r4, #3
 80012e4:	077b      	lsls	r3, r7, #29
 80012e6:	4323      	orrs	r3, r4
 80012e8:	08f8      	lsrs	r0, r7, #3
 80012ea:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <__aeabi_dadd+0x368>)
 80012ec:	4594      	cmp	ip, r2
 80012ee:	d01d      	beq.n	800132c <__aeabi_dadd+0x29c>
 80012f0:	4662      	mov	r2, ip
 80012f2:	0307      	lsls	r7, r0, #12
 80012f4:	0552      	lsls	r2, r2, #21
 80012f6:	0b3f      	lsrs	r7, r7, #12
 80012f8:	0d52      	lsrs	r2, r2, #21
 80012fa:	e760      	b.n	80011be <__aeabi_dadd+0x12e>
 80012fc:	4644      	mov	r4, r8
 80012fe:	430c      	orrs	r4, r1
 8001300:	1e62      	subs	r2, r4, #1
 8001302:	4194      	sbcs	r4, r2
 8001304:	18e4      	adds	r4, r4, r3
 8001306:	429c      	cmp	r4, r3
 8001308:	419b      	sbcs	r3, r3
 800130a:	425f      	negs	r7, r3
 800130c:	183f      	adds	r7, r7, r0
 800130e:	023b      	lsls	r3, r7, #8
 8001310:	d5e3      	bpl.n	80012da <__aeabi_dadd+0x24a>
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <__aeabi_dadd+0x368>)
 8001314:	3601      	adds	r6, #1
 8001316:	429e      	cmp	r6, r3
 8001318:	d000      	beq.n	800131c <__aeabi_dadd+0x28c>
 800131a:	e0b5      	b.n	8001488 <__aeabi_dadd+0x3f8>
 800131c:	0032      	movs	r2, r6
 800131e:	2700      	movs	r7, #0
 8001320:	2300      	movs	r3, #0
 8001322:	e74c      	b.n	80011be <__aeabi_dadd+0x12e>
 8001324:	0742      	lsls	r2, r0, #29
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	4313      	orrs	r3, r2
 800132a:	08c0      	lsrs	r0, r0, #3
 800132c:	001a      	movs	r2, r3
 800132e:	4302      	orrs	r2, r0
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x2a4>
 8001332:	e1e1      	b.n	80016f8 <__aeabi_dadd+0x668>
 8001334:	2780      	movs	r7, #128	; 0x80
 8001336:	033f      	lsls	r7, r7, #12
 8001338:	4307      	orrs	r7, r0
 800133a:	033f      	lsls	r7, r7, #12
 800133c:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <__aeabi_dadd+0x368>)
 800133e:	0b3f      	lsrs	r7, r7, #12
 8001340:	e73d      	b.n	80011be <__aeabi_dadd+0x12e>
 8001342:	0020      	movs	r0, r4
 8001344:	f001 fcb4 	bl	8002cb0 <__clzsi2>
 8001348:	0001      	movs	r1, r0
 800134a:	3118      	adds	r1, #24
 800134c:	291f      	cmp	r1, #31
 800134e:	dc00      	bgt.n	8001352 <__aeabi_dadd+0x2c2>
 8001350:	e6fc      	b.n	800114c <__aeabi_dadd+0xbc>
 8001352:	3808      	subs	r0, #8
 8001354:	4084      	lsls	r4, r0
 8001356:	0027      	movs	r7, r4
 8001358:	2400      	movs	r4, #0
 800135a:	42b1      	cmp	r1, r6
 800135c:	db00      	blt.n	8001360 <__aeabi_dadd+0x2d0>
 800135e:	e6ff      	b.n	8001160 <__aeabi_dadd+0xd0>
 8001360:	4a26      	ldr	r2, [pc, #152]	; (80013fc <__aeabi_dadd+0x36c>)
 8001362:	1a76      	subs	r6, r6, r1
 8001364:	4017      	ands	r7, r2
 8001366:	e70d      	b.n	8001184 <__aeabi_dadd+0xf4>
 8001368:	2a00      	cmp	r2, #0
 800136a:	d02f      	beq.n	80013cc <__aeabi_dadd+0x33c>
 800136c:	464a      	mov	r2, r9
 800136e:	1b92      	subs	r2, r2, r6
 8001370:	4694      	mov	ip, r2
 8001372:	2e00      	cmp	r6, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_dadd+0x2e8>
 8001376:	e0ad      	b.n	80014d4 <__aeabi_dadd+0x444>
 8001378:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <__aeabi_dadd+0x368>)
 800137a:	4591      	cmp	r9, r2
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x2f0>
 800137e:	e10f      	b.n	80015a0 <__aeabi_dadd+0x510>
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0412      	lsls	r2, r2, #16
 8001384:	4310      	orrs	r0, r2
 8001386:	4662      	mov	r2, ip
 8001388:	2a38      	cmp	r2, #56	; 0x38
 800138a:	dd00      	ble.n	800138e <__aeabi_dadd+0x2fe>
 800138c:	e10f      	b.n	80015ae <__aeabi_dadd+0x51e>
 800138e:	2a1f      	cmp	r2, #31
 8001390:	dd00      	ble.n	8001394 <__aeabi_dadd+0x304>
 8001392:	e180      	b.n	8001696 <__aeabi_dadd+0x606>
 8001394:	4664      	mov	r4, ip
 8001396:	2220      	movs	r2, #32
 8001398:	001e      	movs	r6, r3
 800139a:	1b12      	subs	r2, r2, r4
 800139c:	4667      	mov	r7, ip
 800139e:	0004      	movs	r4, r0
 80013a0:	4093      	lsls	r3, r2
 80013a2:	4094      	lsls	r4, r2
 80013a4:	40fe      	lsrs	r6, r7
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	4193      	sbcs	r3, r2
 80013aa:	40f8      	lsrs	r0, r7
 80013ac:	4334      	orrs	r4, r6
 80013ae:	431c      	orrs	r4, r3
 80013b0:	4480      	add	r8, r0
 80013b2:	1864      	adds	r4, r4, r1
 80013b4:	428c      	cmp	r4, r1
 80013b6:	41bf      	sbcs	r7, r7
 80013b8:	427f      	negs	r7, r7
 80013ba:	464e      	mov	r6, r9
 80013bc:	4447      	add	r7, r8
 80013be:	e7a6      	b.n	800130e <__aeabi_dadd+0x27e>
 80013c0:	4642      	mov	r2, r8
 80013c2:	430a      	orrs	r2, r1
 80013c4:	0011      	movs	r1, r2
 80013c6:	1e4a      	subs	r2, r1, #1
 80013c8:	4191      	sbcs	r1, r2
 80013ca:	e6ad      	b.n	8001128 <__aeabi_dadd+0x98>
 80013cc:	4c0c      	ldr	r4, [pc, #48]	; (8001400 <__aeabi_dadd+0x370>)
 80013ce:	1c72      	adds	r2, r6, #1
 80013d0:	4222      	tst	r2, r4
 80013d2:	d000      	beq.n	80013d6 <__aeabi_dadd+0x346>
 80013d4:	e0a1      	b.n	800151a <__aeabi_dadd+0x48a>
 80013d6:	0002      	movs	r2, r0
 80013d8:	431a      	orrs	r2, r3
 80013da:	2e00      	cmp	r6, #0
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dadd+0x350>
 80013de:	e0fa      	b.n	80015d6 <__aeabi_dadd+0x546>
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x356>
 80013e4:	e145      	b.n	8001672 <__aeabi_dadd+0x5e2>
 80013e6:	003a      	movs	r2, r7
 80013e8:	430a      	orrs	r2, r1
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x35e>
 80013ec:	e146      	b.n	800167c <__aeabi_dadd+0x5ec>
 80013ee:	0742      	lsls	r2, r0, #29
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	08c0      	lsrs	r0, r0, #3
 80013f6:	e77b      	b.n	80012f0 <__aeabi_dadd+0x260>
 80013f8:	000007ff 	.word	0x000007ff
 80013fc:	ff7fffff 	.word	0xff7fffff
 8001400:	000007fe 	.word	0x000007fe
 8001404:	4647      	mov	r7, r8
 8001406:	1a5c      	subs	r4, r3, r1
 8001408:	1bc2      	subs	r2, r0, r7
 800140a:	42a3      	cmp	r3, r4
 800140c:	41bf      	sbcs	r7, r7
 800140e:	427f      	negs	r7, r7
 8001410:	46b9      	mov	r9, r7
 8001412:	0017      	movs	r7, r2
 8001414:	464a      	mov	r2, r9
 8001416:	1abf      	subs	r7, r7, r2
 8001418:	023a      	lsls	r2, r7, #8
 800141a:	d500      	bpl.n	800141e <__aeabi_dadd+0x38e>
 800141c:	e08d      	b.n	800153a <__aeabi_dadd+0x4aa>
 800141e:	0023      	movs	r3, r4
 8001420:	433b      	orrs	r3, r7
 8001422:	d000      	beq.n	8001426 <__aeabi_dadd+0x396>
 8001424:	e68a      	b.n	800113c <__aeabi_dadd+0xac>
 8001426:	2000      	movs	r0, #0
 8001428:	2500      	movs	r5, #0
 800142a:	e761      	b.n	80012f0 <__aeabi_dadd+0x260>
 800142c:	4cb4      	ldr	r4, [pc, #720]	; (8001700 <__aeabi_dadd+0x670>)
 800142e:	45a1      	cmp	r9, r4
 8001430:	d100      	bne.n	8001434 <__aeabi_dadd+0x3a4>
 8001432:	e0ad      	b.n	8001590 <__aeabi_dadd+0x500>
 8001434:	2480      	movs	r4, #128	; 0x80
 8001436:	0424      	lsls	r4, r4, #16
 8001438:	4320      	orrs	r0, r4
 800143a:	4664      	mov	r4, ip
 800143c:	2c38      	cmp	r4, #56	; 0x38
 800143e:	dc3d      	bgt.n	80014bc <__aeabi_dadd+0x42c>
 8001440:	4662      	mov	r2, ip
 8001442:	2c1f      	cmp	r4, #31
 8001444:	dd00      	ble.n	8001448 <__aeabi_dadd+0x3b8>
 8001446:	e0b7      	b.n	80015b8 <__aeabi_dadd+0x528>
 8001448:	2520      	movs	r5, #32
 800144a:	001e      	movs	r6, r3
 800144c:	1b2d      	subs	r5, r5, r4
 800144e:	0004      	movs	r4, r0
 8001450:	40ab      	lsls	r3, r5
 8001452:	40ac      	lsls	r4, r5
 8001454:	40d6      	lsrs	r6, r2
 8001456:	40d0      	lsrs	r0, r2
 8001458:	4642      	mov	r2, r8
 800145a:	1e5d      	subs	r5, r3, #1
 800145c:	41ab      	sbcs	r3, r5
 800145e:	4334      	orrs	r4, r6
 8001460:	1a12      	subs	r2, r2, r0
 8001462:	4690      	mov	r8, r2
 8001464:	4323      	orrs	r3, r4
 8001466:	e02c      	b.n	80014c2 <__aeabi_dadd+0x432>
 8001468:	0742      	lsls	r2, r0, #29
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	4313      	orrs	r3, r2
 800146e:	08c0      	lsrs	r0, r0, #3
 8001470:	e73b      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001472:	185c      	adds	r4, r3, r1
 8001474:	429c      	cmp	r4, r3
 8001476:	419b      	sbcs	r3, r3
 8001478:	4440      	add	r0, r8
 800147a:	425b      	negs	r3, r3
 800147c:	18c7      	adds	r7, r0, r3
 800147e:	2601      	movs	r6, #1
 8001480:	023b      	lsls	r3, r7, #8
 8001482:	d400      	bmi.n	8001486 <__aeabi_dadd+0x3f6>
 8001484:	e729      	b.n	80012da <__aeabi_dadd+0x24a>
 8001486:	2602      	movs	r6, #2
 8001488:	4a9e      	ldr	r2, [pc, #632]	; (8001704 <__aeabi_dadd+0x674>)
 800148a:	0863      	lsrs	r3, r4, #1
 800148c:	4017      	ands	r7, r2
 800148e:	2201      	movs	r2, #1
 8001490:	4014      	ands	r4, r2
 8001492:	431c      	orrs	r4, r3
 8001494:	07fb      	lsls	r3, r7, #31
 8001496:	431c      	orrs	r4, r3
 8001498:	087f      	lsrs	r7, r7, #1
 800149a:	e673      	b.n	8001184 <__aeabi_dadd+0xf4>
 800149c:	4644      	mov	r4, r8
 800149e:	3a20      	subs	r2, #32
 80014a0:	40d4      	lsrs	r4, r2
 80014a2:	4662      	mov	r2, ip
 80014a4:	2a20      	cmp	r2, #32
 80014a6:	d005      	beq.n	80014b4 <__aeabi_dadd+0x424>
 80014a8:	4667      	mov	r7, ip
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	1bd2      	subs	r2, r2, r7
 80014ae:	4647      	mov	r7, r8
 80014b0:	4097      	lsls	r7, r2
 80014b2:	4339      	orrs	r1, r7
 80014b4:	1e4a      	subs	r2, r1, #1
 80014b6:	4191      	sbcs	r1, r2
 80014b8:	4321      	orrs	r1, r4
 80014ba:	e635      	b.n	8001128 <__aeabi_dadd+0x98>
 80014bc:	4303      	orrs	r3, r0
 80014be:	1e58      	subs	r0, r3, #1
 80014c0:	4183      	sbcs	r3, r0
 80014c2:	1acc      	subs	r4, r1, r3
 80014c4:	42a1      	cmp	r1, r4
 80014c6:	41bf      	sbcs	r7, r7
 80014c8:	4643      	mov	r3, r8
 80014ca:	427f      	negs	r7, r7
 80014cc:	4655      	mov	r5, sl
 80014ce:	464e      	mov	r6, r9
 80014d0:	1bdf      	subs	r7, r3, r7
 80014d2:	e62e      	b.n	8001132 <__aeabi_dadd+0xa2>
 80014d4:	0002      	movs	r2, r0
 80014d6:	431a      	orrs	r2, r3
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x44c>
 80014da:	e0bd      	b.n	8001658 <__aeabi_dadd+0x5c8>
 80014dc:	4662      	mov	r2, ip
 80014de:	4664      	mov	r4, ip
 80014e0:	3a01      	subs	r2, #1
 80014e2:	2c01      	cmp	r4, #1
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x458>
 80014e6:	e0e5      	b.n	80016b4 <__aeabi_dadd+0x624>
 80014e8:	4c85      	ldr	r4, [pc, #532]	; (8001700 <__aeabi_dadd+0x670>)
 80014ea:	45a4      	cmp	ip, r4
 80014ec:	d058      	beq.n	80015a0 <__aeabi_dadd+0x510>
 80014ee:	4694      	mov	ip, r2
 80014f0:	e749      	b.n	8001386 <__aeabi_dadd+0x2f6>
 80014f2:	4664      	mov	r4, ip
 80014f4:	2220      	movs	r2, #32
 80014f6:	1b12      	subs	r2, r2, r4
 80014f8:	4644      	mov	r4, r8
 80014fa:	4094      	lsls	r4, r2
 80014fc:	000f      	movs	r7, r1
 80014fe:	46a1      	mov	r9, r4
 8001500:	4664      	mov	r4, ip
 8001502:	4091      	lsls	r1, r2
 8001504:	40e7      	lsrs	r7, r4
 8001506:	464c      	mov	r4, r9
 8001508:	1e4a      	subs	r2, r1, #1
 800150a:	4191      	sbcs	r1, r2
 800150c:	433c      	orrs	r4, r7
 800150e:	4642      	mov	r2, r8
 8001510:	430c      	orrs	r4, r1
 8001512:	4661      	mov	r1, ip
 8001514:	40ca      	lsrs	r2, r1
 8001516:	1880      	adds	r0, r0, r2
 8001518:	e6f4      	b.n	8001304 <__aeabi_dadd+0x274>
 800151a:	4c79      	ldr	r4, [pc, #484]	; (8001700 <__aeabi_dadd+0x670>)
 800151c:	42a2      	cmp	r2, r4
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x492>
 8001520:	e6fd      	b.n	800131e <__aeabi_dadd+0x28e>
 8001522:	1859      	adds	r1, r3, r1
 8001524:	4299      	cmp	r1, r3
 8001526:	419b      	sbcs	r3, r3
 8001528:	4440      	add	r0, r8
 800152a:	425f      	negs	r7, r3
 800152c:	19c7      	adds	r7, r0, r7
 800152e:	07fc      	lsls	r4, r7, #31
 8001530:	0849      	lsrs	r1, r1, #1
 8001532:	0016      	movs	r6, r2
 8001534:	430c      	orrs	r4, r1
 8001536:	087f      	lsrs	r7, r7, #1
 8001538:	e6cf      	b.n	80012da <__aeabi_dadd+0x24a>
 800153a:	1acc      	subs	r4, r1, r3
 800153c:	42a1      	cmp	r1, r4
 800153e:	41bf      	sbcs	r7, r7
 8001540:	4643      	mov	r3, r8
 8001542:	427f      	negs	r7, r7
 8001544:	1a18      	subs	r0, r3, r0
 8001546:	4655      	mov	r5, sl
 8001548:	1bc7      	subs	r7, r0, r7
 800154a:	e5f7      	b.n	800113c <__aeabi_dadd+0xac>
 800154c:	08c9      	lsrs	r1, r1, #3
 800154e:	077b      	lsls	r3, r7, #29
 8001550:	4655      	mov	r5, sl
 8001552:	430b      	orrs	r3, r1
 8001554:	08f8      	lsrs	r0, r7, #3
 8001556:	e6c8      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001558:	2c00      	cmp	r4, #0
 800155a:	d000      	beq.n	800155e <__aeabi_dadd+0x4ce>
 800155c:	e081      	b.n	8001662 <__aeabi_dadd+0x5d2>
 800155e:	4643      	mov	r3, r8
 8001560:	430b      	orrs	r3, r1
 8001562:	d115      	bne.n	8001590 <__aeabi_dadd+0x500>
 8001564:	2080      	movs	r0, #128	; 0x80
 8001566:	2500      	movs	r5, #0
 8001568:	0300      	lsls	r0, r0, #12
 800156a:	e6e3      	b.n	8001334 <__aeabi_dadd+0x2a4>
 800156c:	1a5c      	subs	r4, r3, r1
 800156e:	42a3      	cmp	r3, r4
 8001570:	419b      	sbcs	r3, r3
 8001572:	1bc7      	subs	r7, r0, r7
 8001574:	425b      	negs	r3, r3
 8001576:	2601      	movs	r6, #1
 8001578:	1aff      	subs	r7, r7, r3
 800157a:	e5da      	b.n	8001132 <__aeabi_dadd+0xa2>
 800157c:	0742      	lsls	r2, r0, #29
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	4313      	orrs	r3, r2
 8001582:	08c0      	lsrs	r0, r0, #3
 8001584:	e6d2      	b.n	800132c <__aeabi_dadd+0x29c>
 8001586:	0742      	lsls	r2, r0, #29
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	08c0      	lsrs	r0, r0, #3
 800158e:	e6ac      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001590:	4643      	mov	r3, r8
 8001592:	4642      	mov	r2, r8
 8001594:	08c9      	lsrs	r1, r1, #3
 8001596:	075b      	lsls	r3, r3, #29
 8001598:	4655      	mov	r5, sl
 800159a:	430b      	orrs	r3, r1
 800159c:	08d0      	lsrs	r0, r2, #3
 800159e:	e6c5      	b.n	800132c <__aeabi_dadd+0x29c>
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	075b      	lsls	r3, r3, #29
 80015a6:	08c9      	lsrs	r1, r1, #3
 80015a8:	430b      	orrs	r3, r1
 80015aa:	08d0      	lsrs	r0, r2, #3
 80015ac:	e6be      	b.n	800132c <__aeabi_dadd+0x29c>
 80015ae:	4303      	orrs	r3, r0
 80015b0:	001c      	movs	r4, r3
 80015b2:	1e63      	subs	r3, r4, #1
 80015b4:	419c      	sbcs	r4, r3
 80015b6:	e6fc      	b.n	80013b2 <__aeabi_dadd+0x322>
 80015b8:	0002      	movs	r2, r0
 80015ba:	3c20      	subs	r4, #32
 80015bc:	40e2      	lsrs	r2, r4
 80015be:	0014      	movs	r4, r2
 80015c0:	4662      	mov	r2, ip
 80015c2:	2a20      	cmp	r2, #32
 80015c4:	d003      	beq.n	80015ce <__aeabi_dadd+0x53e>
 80015c6:	2540      	movs	r5, #64	; 0x40
 80015c8:	1aad      	subs	r5, r5, r2
 80015ca:	40a8      	lsls	r0, r5
 80015cc:	4303      	orrs	r3, r0
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	4183      	sbcs	r3, r0
 80015d2:	4323      	orrs	r3, r4
 80015d4:	e775      	b.n	80014c2 <__aeabi_dadd+0x432>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d0e2      	beq.n	80015a0 <__aeabi_dadd+0x510>
 80015da:	003a      	movs	r2, r7
 80015dc:	430a      	orrs	r2, r1
 80015de:	d0cd      	beq.n	800157c <__aeabi_dadd+0x4ec>
 80015e0:	0742      	lsls	r2, r0, #29
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	0312      	lsls	r2, r2, #12
 80015ec:	4210      	tst	r0, r2
 80015ee:	d006      	beq.n	80015fe <__aeabi_dadd+0x56e>
 80015f0:	08fc      	lsrs	r4, r7, #3
 80015f2:	4214      	tst	r4, r2
 80015f4:	d103      	bne.n	80015fe <__aeabi_dadd+0x56e>
 80015f6:	0020      	movs	r0, r4
 80015f8:	08cb      	lsrs	r3, r1, #3
 80015fa:	077a      	lsls	r2, r7, #29
 80015fc:	4313      	orrs	r3, r2
 80015fe:	0f5a      	lsrs	r2, r3, #29
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	0752      	lsls	r2, r2, #29
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	e690      	b.n	800132c <__aeabi_dadd+0x29c>
 800160a:	4643      	mov	r3, r8
 800160c:	430b      	orrs	r3, r1
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x582>
 8001610:	e709      	b.n	8001426 <__aeabi_dadd+0x396>
 8001612:	4643      	mov	r3, r8
 8001614:	4642      	mov	r2, r8
 8001616:	08c9      	lsrs	r1, r1, #3
 8001618:	075b      	lsls	r3, r3, #29
 800161a:	4655      	mov	r5, sl
 800161c:	430b      	orrs	r3, r1
 800161e:	08d0      	lsrs	r0, r2, #3
 8001620:	e666      	b.n	80012f0 <__aeabi_dadd+0x260>
 8001622:	1acc      	subs	r4, r1, r3
 8001624:	42a1      	cmp	r1, r4
 8001626:	4189      	sbcs	r1, r1
 8001628:	1a3f      	subs	r7, r7, r0
 800162a:	4249      	negs	r1, r1
 800162c:	4655      	mov	r5, sl
 800162e:	2601      	movs	r6, #1
 8001630:	1a7f      	subs	r7, r7, r1
 8001632:	e57e      	b.n	8001132 <__aeabi_dadd+0xa2>
 8001634:	4642      	mov	r2, r8
 8001636:	1a5c      	subs	r4, r3, r1
 8001638:	1a87      	subs	r7, r0, r2
 800163a:	42a3      	cmp	r3, r4
 800163c:	4192      	sbcs	r2, r2
 800163e:	4252      	negs	r2, r2
 8001640:	1abf      	subs	r7, r7, r2
 8001642:	023a      	lsls	r2, r7, #8
 8001644:	d53d      	bpl.n	80016c2 <__aeabi_dadd+0x632>
 8001646:	1acc      	subs	r4, r1, r3
 8001648:	42a1      	cmp	r1, r4
 800164a:	4189      	sbcs	r1, r1
 800164c:	4643      	mov	r3, r8
 800164e:	4249      	negs	r1, r1
 8001650:	1a1f      	subs	r7, r3, r0
 8001652:	4655      	mov	r5, sl
 8001654:	1a7f      	subs	r7, r7, r1
 8001656:	e595      	b.n	8001184 <__aeabi_dadd+0xf4>
 8001658:	077b      	lsls	r3, r7, #29
 800165a:	08c9      	lsrs	r1, r1, #3
 800165c:	430b      	orrs	r3, r1
 800165e:	08f8      	lsrs	r0, r7, #3
 8001660:	e643      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001662:	4644      	mov	r4, r8
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	430c      	orrs	r4, r1
 8001668:	d130      	bne.n	80016cc <__aeabi_dadd+0x63c>
 800166a:	0742      	lsls	r2, r0, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c0      	lsrs	r0, r0, #3
 8001670:	e65c      	b.n	800132c <__aeabi_dadd+0x29c>
 8001672:	077b      	lsls	r3, r7, #29
 8001674:	08c9      	lsrs	r1, r1, #3
 8001676:	430b      	orrs	r3, r1
 8001678:	08f8      	lsrs	r0, r7, #3
 800167a:	e639      	b.n	80012f0 <__aeabi_dadd+0x260>
 800167c:	185c      	adds	r4, r3, r1
 800167e:	429c      	cmp	r4, r3
 8001680:	419b      	sbcs	r3, r3
 8001682:	4440      	add	r0, r8
 8001684:	425b      	negs	r3, r3
 8001686:	18c7      	adds	r7, r0, r3
 8001688:	023b      	lsls	r3, r7, #8
 800168a:	d400      	bmi.n	800168e <__aeabi_dadd+0x5fe>
 800168c:	e625      	b.n	80012da <__aeabi_dadd+0x24a>
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <__aeabi_dadd+0x674>)
 8001690:	2601      	movs	r6, #1
 8001692:	401f      	ands	r7, r3
 8001694:	e621      	b.n	80012da <__aeabi_dadd+0x24a>
 8001696:	0004      	movs	r4, r0
 8001698:	3a20      	subs	r2, #32
 800169a:	40d4      	lsrs	r4, r2
 800169c:	4662      	mov	r2, ip
 800169e:	2a20      	cmp	r2, #32
 80016a0:	d004      	beq.n	80016ac <__aeabi_dadd+0x61c>
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	4666      	mov	r6, ip
 80016a6:	1b92      	subs	r2, r2, r6
 80016a8:	4090      	lsls	r0, r2
 80016aa:	4303      	orrs	r3, r0
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	4193      	sbcs	r3, r2
 80016b0:	431c      	orrs	r4, r3
 80016b2:	e67e      	b.n	80013b2 <__aeabi_dadd+0x322>
 80016b4:	185c      	adds	r4, r3, r1
 80016b6:	428c      	cmp	r4, r1
 80016b8:	4189      	sbcs	r1, r1
 80016ba:	4440      	add	r0, r8
 80016bc:	4249      	negs	r1, r1
 80016be:	1847      	adds	r7, r0, r1
 80016c0:	e6dd      	b.n	800147e <__aeabi_dadd+0x3ee>
 80016c2:	0023      	movs	r3, r4
 80016c4:	433b      	orrs	r3, r7
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x63a>
 80016c8:	e6ad      	b.n	8001426 <__aeabi_dadd+0x396>
 80016ca:	e606      	b.n	80012da <__aeabi_dadd+0x24a>
 80016cc:	0744      	lsls	r4, r0, #29
 80016ce:	4323      	orrs	r3, r4
 80016d0:	2480      	movs	r4, #128	; 0x80
 80016d2:	08c0      	lsrs	r0, r0, #3
 80016d4:	0324      	lsls	r4, r4, #12
 80016d6:	4220      	tst	r0, r4
 80016d8:	d008      	beq.n	80016ec <__aeabi_dadd+0x65c>
 80016da:	4642      	mov	r2, r8
 80016dc:	08d6      	lsrs	r6, r2, #3
 80016de:	4226      	tst	r6, r4
 80016e0:	d104      	bne.n	80016ec <__aeabi_dadd+0x65c>
 80016e2:	4655      	mov	r5, sl
 80016e4:	0030      	movs	r0, r6
 80016e6:	08cb      	lsrs	r3, r1, #3
 80016e8:	0751      	lsls	r1, r2, #29
 80016ea:	430b      	orrs	r3, r1
 80016ec:	0f5a      	lsrs	r2, r3, #29
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	0752      	lsls	r2, r2, #29
 80016f4:	4313      	orrs	r3, r2
 80016f6:	e619      	b.n	800132c <__aeabi_dadd+0x29c>
 80016f8:	2300      	movs	r3, #0
 80016fa:	4a01      	ldr	r2, [pc, #4]	; (8001700 <__aeabi_dadd+0x670>)
 80016fc:	001f      	movs	r7, r3
 80016fe:	e55e      	b.n	80011be <__aeabi_dadd+0x12e>
 8001700:	000007ff 	.word	0x000007ff
 8001704:	ff7fffff 	.word	0xff7fffff

08001708 <__aeabi_ddiv>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	4657      	mov	r7, sl
 800170c:	464e      	mov	r6, r9
 800170e:	4645      	mov	r5, r8
 8001710:	46de      	mov	lr, fp
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	4681      	mov	r9, r0
 8001716:	0005      	movs	r5, r0
 8001718:	030c      	lsls	r4, r1, #12
 800171a:	0048      	lsls	r0, r1, #1
 800171c:	4692      	mov	sl, r2
 800171e:	001f      	movs	r7, r3
 8001720:	b085      	sub	sp, #20
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	0d40      	lsrs	r0, r0, #21
 8001726:	0fce      	lsrs	r6, r1, #31
 8001728:	2800      	cmp	r0, #0
 800172a:	d100      	bne.n	800172e <__aeabi_ddiv+0x26>
 800172c:	e156      	b.n	80019dc <__aeabi_ddiv+0x2d4>
 800172e:	4bd4      	ldr	r3, [pc, #848]	; (8001a80 <__aeabi_ddiv+0x378>)
 8001730:	4298      	cmp	r0, r3
 8001732:	d100      	bne.n	8001736 <__aeabi_ddiv+0x2e>
 8001734:	e172      	b.n	8001a1c <__aeabi_ddiv+0x314>
 8001736:	0f6b      	lsrs	r3, r5, #29
 8001738:	00e4      	lsls	r4, r4, #3
 800173a:	431c      	orrs	r4, r3
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	4323      	orrs	r3, r4
 8001742:	4698      	mov	r8, r3
 8001744:	4bcf      	ldr	r3, [pc, #828]	; (8001a84 <__aeabi_ddiv+0x37c>)
 8001746:	00ed      	lsls	r5, r5, #3
 8001748:	469b      	mov	fp, r3
 800174a:	2300      	movs	r3, #0
 800174c:	4699      	mov	r9, r3
 800174e:	4483      	add	fp, r0
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	033c      	lsls	r4, r7, #12
 8001754:	007b      	lsls	r3, r7, #1
 8001756:	4650      	mov	r0, sl
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	0d5b      	lsrs	r3, r3, #21
 800175c:	0fff      	lsrs	r7, r7, #31
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <__aeabi_ddiv+0x5c>
 8001762:	e11f      	b.n	80019a4 <__aeabi_ddiv+0x29c>
 8001764:	4ac6      	ldr	r2, [pc, #792]	; (8001a80 <__aeabi_ddiv+0x378>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d100      	bne.n	800176c <__aeabi_ddiv+0x64>
 800176a:	e162      	b.n	8001a32 <__aeabi_ddiv+0x32a>
 800176c:	49c5      	ldr	r1, [pc, #788]	; (8001a84 <__aeabi_ddiv+0x37c>)
 800176e:	0f42      	lsrs	r2, r0, #29
 8001770:	468c      	mov	ip, r1
 8001772:	00e4      	lsls	r4, r4, #3
 8001774:	4659      	mov	r1, fp
 8001776:	4314      	orrs	r4, r2
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	4463      	add	r3, ip
 800177c:	0412      	lsls	r2, r2, #16
 800177e:	1acb      	subs	r3, r1, r3
 8001780:	4314      	orrs	r4, r2
 8001782:	469b      	mov	fp, r3
 8001784:	00c2      	lsls	r2, r0, #3
 8001786:	2000      	movs	r0, #0
 8001788:	0033      	movs	r3, r6
 800178a:	407b      	eors	r3, r7
 800178c:	469a      	mov	sl, r3
 800178e:	464b      	mov	r3, r9
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d827      	bhi.n	80017e4 <__aeabi_ddiv+0xdc>
 8001794:	49bc      	ldr	r1, [pc, #752]	; (8001a88 <__aeabi_ddiv+0x380>)
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	58cb      	ldr	r3, [r1, r3]
 800179a:	469f      	mov	pc, r3
 800179c:	46b2      	mov	sl, r6
 800179e:	9b00      	ldr	r3, [sp, #0]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d016      	beq.n	80017d2 <__aeabi_ddiv+0xca>
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d100      	bne.n	80017aa <__aeabi_ddiv+0xa2>
 80017a8:	e28e      	b.n	8001cc8 <__aeabi_ddiv+0x5c0>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d000      	beq.n	80017b0 <__aeabi_ddiv+0xa8>
 80017ae:	e0d9      	b.n	8001964 <__aeabi_ddiv+0x25c>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2400      	movs	r4, #0
 80017b4:	2500      	movs	r5, #0
 80017b6:	4652      	mov	r2, sl
 80017b8:	051b      	lsls	r3, r3, #20
 80017ba:	4323      	orrs	r3, r4
 80017bc:	07d2      	lsls	r2, r2, #31
 80017be:	4313      	orrs	r3, r2
 80017c0:	0028      	movs	r0, r5
 80017c2:	0019      	movs	r1, r3
 80017c4:	b005      	add	sp, #20
 80017c6:	bcf0      	pop	{r4, r5, r6, r7}
 80017c8:	46bb      	mov	fp, r7
 80017ca:	46b2      	mov	sl, r6
 80017cc:	46a9      	mov	r9, r5
 80017ce:	46a0      	mov	r8, r4
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	2400      	movs	r4, #0
 80017d4:	2500      	movs	r5, #0
 80017d6:	4baa      	ldr	r3, [pc, #680]	; (8001a80 <__aeabi_ddiv+0x378>)
 80017d8:	e7ed      	b.n	80017b6 <__aeabi_ddiv+0xae>
 80017da:	46ba      	mov	sl, r7
 80017dc:	46a0      	mov	r8, r4
 80017de:	0015      	movs	r5, r2
 80017e0:	9000      	str	r0, [sp, #0]
 80017e2:	e7dc      	b.n	800179e <__aeabi_ddiv+0x96>
 80017e4:	4544      	cmp	r4, r8
 80017e6:	d200      	bcs.n	80017ea <__aeabi_ddiv+0xe2>
 80017e8:	e1c7      	b.n	8001b7a <__aeabi_ddiv+0x472>
 80017ea:	d100      	bne.n	80017ee <__aeabi_ddiv+0xe6>
 80017ec:	e1c2      	b.n	8001b74 <__aeabi_ddiv+0x46c>
 80017ee:	2301      	movs	r3, #1
 80017f0:	425b      	negs	r3, r3
 80017f2:	469c      	mov	ip, r3
 80017f4:	002e      	movs	r6, r5
 80017f6:	4640      	mov	r0, r8
 80017f8:	2500      	movs	r5, #0
 80017fa:	44e3      	add	fp, ip
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	0e14      	lsrs	r4, r2, #24
 8001800:	431c      	orrs	r4, r3
 8001802:	0c1b      	lsrs	r3, r3, #16
 8001804:	4699      	mov	r9, r3
 8001806:	0423      	lsls	r3, r4, #16
 8001808:	0c1f      	lsrs	r7, r3, #16
 800180a:	0212      	lsls	r2, r2, #8
 800180c:	4649      	mov	r1, r9
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	9701      	str	r7, [sp, #4]
 8001812:	f7fe fd2f 	bl	8000274 <__aeabi_uidivmod>
 8001816:	0002      	movs	r2, r0
 8001818:	437a      	muls	r2, r7
 800181a:	040b      	lsls	r3, r1, #16
 800181c:	0c31      	lsrs	r1, r6, #16
 800181e:	4680      	mov	r8, r0
 8001820:	4319      	orrs	r1, r3
 8001822:	428a      	cmp	r2, r1
 8001824:	d907      	bls.n	8001836 <__aeabi_ddiv+0x12e>
 8001826:	2301      	movs	r3, #1
 8001828:	425b      	negs	r3, r3
 800182a:	469c      	mov	ip, r3
 800182c:	1909      	adds	r1, r1, r4
 800182e:	44e0      	add	r8, ip
 8001830:	428c      	cmp	r4, r1
 8001832:	d800      	bhi.n	8001836 <__aeabi_ddiv+0x12e>
 8001834:	e207      	b.n	8001c46 <__aeabi_ddiv+0x53e>
 8001836:	1a88      	subs	r0, r1, r2
 8001838:	4649      	mov	r1, r9
 800183a:	f7fe fd1b 	bl	8000274 <__aeabi_uidivmod>
 800183e:	0409      	lsls	r1, r1, #16
 8001840:	468c      	mov	ip, r1
 8001842:	0431      	lsls	r1, r6, #16
 8001844:	4666      	mov	r6, ip
 8001846:	9a01      	ldr	r2, [sp, #4]
 8001848:	0c09      	lsrs	r1, r1, #16
 800184a:	4342      	muls	r2, r0
 800184c:	0003      	movs	r3, r0
 800184e:	4331      	orrs	r1, r6
 8001850:	428a      	cmp	r2, r1
 8001852:	d904      	bls.n	800185e <__aeabi_ddiv+0x156>
 8001854:	1909      	adds	r1, r1, r4
 8001856:	3b01      	subs	r3, #1
 8001858:	428c      	cmp	r4, r1
 800185a:	d800      	bhi.n	800185e <__aeabi_ddiv+0x156>
 800185c:	e1ed      	b.n	8001c3a <__aeabi_ddiv+0x532>
 800185e:	1a88      	subs	r0, r1, r2
 8001860:	4642      	mov	r2, r8
 8001862:	0412      	lsls	r2, r2, #16
 8001864:	431a      	orrs	r2, r3
 8001866:	4690      	mov	r8, r2
 8001868:	4641      	mov	r1, r8
 800186a:	9b00      	ldr	r3, [sp, #0]
 800186c:	040e      	lsls	r6, r1, #16
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	001f      	movs	r7, r3
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	9b00      	ldr	r3, [sp, #0]
 8001876:	0c36      	lsrs	r6, r6, #16
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	0c19      	lsrs	r1, r3, #16
 800187c:	000b      	movs	r3, r1
 800187e:	4373      	muls	r3, r6
 8001880:	0c12      	lsrs	r2, r2, #16
 8001882:	437e      	muls	r6, r7
 8001884:	9103      	str	r1, [sp, #12]
 8001886:	4351      	muls	r1, r2
 8001888:	437a      	muls	r2, r7
 800188a:	0c1f      	lsrs	r7, r3, #16
 800188c:	46bc      	mov	ip, r7
 800188e:	1876      	adds	r6, r6, r1
 8001890:	4466      	add	r6, ip
 8001892:	42b1      	cmp	r1, r6
 8001894:	d903      	bls.n	800189e <__aeabi_ddiv+0x196>
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0249      	lsls	r1, r1, #9
 800189a:	468c      	mov	ip, r1
 800189c:	4462      	add	r2, ip
 800189e:	0c31      	lsrs	r1, r6, #16
 80018a0:	188a      	adds	r2, r1, r2
 80018a2:	0431      	lsls	r1, r6, #16
 80018a4:	041e      	lsls	r6, r3, #16
 80018a6:	0c36      	lsrs	r6, r6, #16
 80018a8:	198e      	adds	r6, r1, r6
 80018aa:	4290      	cmp	r0, r2
 80018ac:	d302      	bcc.n	80018b4 <__aeabi_ddiv+0x1ac>
 80018ae:	d112      	bne.n	80018d6 <__aeabi_ddiv+0x1ce>
 80018b0:	42b5      	cmp	r5, r6
 80018b2:	d210      	bcs.n	80018d6 <__aeabi_ddiv+0x1ce>
 80018b4:	4643      	mov	r3, r8
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	9b00      	ldr	r3, [sp, #0]
 80018ba:	469c      	mov	ip, r3
 80018bc:	4465      	add	r5, ip
 80018be:	001f      	movs	r7, r3
 80018c0:	429d      	cmp	r5, r3
 80018c2:	419b      	sbcs	r3, r3
 80018c4:	425b      	negs	r3, r3
 80018c6:	191b      	adds	r3, r3, r4
 80018c8:	18c0      	adds	r0, r0, r3
 80018ca:	4284      	cmp	r4, r0
 80018cc:	d200      	bcs.n	80018d0 <__aeabi_ddiv+0x1c8>
 80018ce:	e1a0      	b.n	8001c12 <__aeabi_ddiv+0x50a>
 80018d0:	d100      	bne.n	80018d4 <__aeabi_ddiv+0x1cc>
 80018d2:	e19b      	b.n	8001c0c <__aeabi_ddiv+0x504>
 80018d4:	4688      	mov	r8, r1
 80018d6:	1bae      	subs	r6, r5, r6
 80018d8:	42b5      	cmp	r5, r6
 80018da:	41ad      	sbcs	r5, r5
 80018dc:	1a80      	subs	r0, r0, r2
 80018de:	426d      	negs	r5, r5
 80018e0:	1b40      	subs	r0, r0, r5
 80018e2:	4284      	cmp	r4, r0
 80018e4:	d100      	bne.n	80018e8 <__aeabi_ddiv+0x1e0>
 80018e6:	e1d5      	b.n	8001c94 <__aeabi_ddiv+0x58c>
 80018e8:	4649      	mov	r1, r9
 80018ea:	f7fe fcc3 	bl	8000274 <__aeabi_uidivmod>
 80018ee:	9a01      	ldr	r2, [sp, #4]
 80018f0:	040b      	lsls	r3, r1, #16
 80018f2:	4342      	muls	r2, r0
 80018f4:	0c31      	lsrs	r1, r6, #16
 80018f6:	0005      	movs	r5, r0
 80018f8:	4319      	orrs	r1, r3
 80018fa:	428a      	cmp	r2, r1
 80018fc:	d900      	bls.n	8001900 <__aeabi_ddiv+0x1f8>
 80018fe:	e16c      	b.n	8001bda <__aeabi_ddiv+0x4d2>
 8001900:	1a88      	subs	r0, r1, r2
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fcb6 	bl	8000274 <__aeabi_uidivmod>
 8001908:	9a01      	ldr	r2, [sp, #4]
 800190a:	0436      	lsls	r6, r6, #16
 800190c:	4342      	muls	r2, r0
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	0c36      	lsrs	r6, r6, #16
 8001912:	0003      	movs	r3, r0
 8001914:	430e      	orrs	r6, r1
 8001916:	42b2      	cmp	r2, r6
 8001918:	d900      	bls.n	800191c <__aeabi_ddiv+0x214>
 800191a:	e153      	b.n	8001bc4 <__aeabi_ddiv+0x4bc>
 800191c:	9803      	ldr	r0, [sp, #12]
 800191e:	1ab6      	subs	r6, r6, r2
 8001920:	0002      	movs	r2, r0
 8001922:	042d      	lsls	r5, r5, #16
 8001924:	431d      	orrs	r5, r3
 8001926:	9f02      	ldr	r7, [sp, #8]
 8001928:	042b      	lsls	r3, r5, #16
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	435a      	muls	r2, r3
 800192e:	437b      	muls	r3, r7
 8001930:	469c      	mov	ip, r3
 8001932:	0c29      	lsrs	r1, r5, #16
 8001934:	4348      	muls	r0, r1
 8001936:	0c13      	lsrs	r3, r2, #16
 8001938:	4484      	add	ip, r0
 800193a:	4463      	add	r3, ip
 800193c:	4379      	muls	r1, r7
 800193e:	4298      	cmp	r0, r3
 8001940:	d903      	bls.n	800194a <__aeabi_ddiv+0x242>
 8001942:	2080      	movs	r0, #128	; 0x80
 8001944:	0240      	lsls	r0, r0, #9
 8001946:	4684      	mov	ip, r0
 8001948:	4461      	add	r1, ip
 800194a:	0c18      	lsrs	r0, r3, #16
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	0c12      	lsrs	r2, r2, #16
 8001952:	1841      	adds	r1, r0, r1
 8001954:	189b      	adds	r3, r3, r2
 8001956:	428e      	cmp	r6, r1
 8001958:	d200      	bcs.n	800195c <__aeabi_ddiv+0x254>
 800195a:	e0ff      	b.n	8001b5c <__aeabi_ddiv+0x454>
 800195c:	d100      	bne.n	8001960 <__aeabi_ddiv+0x258>
 800195e:	e0fa      	b.n	8001b56 <__aeabi_ddiv+0x44e>
 8001960:	2301      	movs	r3, #1
 8001962:	431d      	orrs	r5, r3
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <__aeabi_ddiv+0x384>)
 8001966:	445a      	add	r2, fp
 8001968:	2a00      	cmp	r2, #0
 800196a:	dc00      	bgt.n	800196e <__aeabi_ddiv+0x266>
 800196c:	e0aa      	b.n	8001ac4 <__aeabi_ddiv+0x3bc>
 800196e:	076b      	lsls	r3, r5, #29
 8001970:	d000      	beq.n	8001974 <__aeabi_ddiv+0x26c>
 8001972:	e13d      	b.n	8001bf0 <__aeabi_ddiv+0x4e8>
 8001974:	08ed      	lsrs	r5, r5, #3
 8001976:	4643      	mov	r3, r8
 8001978:	01db      	lsls	r3, r3, #7
 800197a:	d506      	bpl.n	800198a <__aeabi_ddiv+0x282>
 800197c:	4642      	mov	r2, r8
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <__aeabi_ddiv+0x388>)
 8001980:	401a      	ands	r2, r3
 8001982:	4690      	mov	r8, r2
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	00d2      	lsls	r2, r2, #3
 8001988:	445a      	add	r2, fp
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <__aeabi_ddiv+0x38c>)
 800198c:	429a      	cmp	r2, r3
 800198e:	dd00      	ble.n	8001992 <__aeabi_ddiv+0x28a>
 8001990:	e71f      	b.n	80017d2 <__aeabi_ddiv+0xca>
 8001992:	4643      	mov	r3, r8
 8001994:	075b      	lsls	r3, r3, #29
 8001996:	431d      	orrs	r5, r3
 8001998:	4643      	mov	r3, r8
 800199a:	0552      	lsls	r2, r2, #21
 800199c:	025c      	lsls	r4, r3, #9
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	0d53      	lsrs	r3, r2, #21
 80019a2:	e708      	b.n	80017b6 <__aeabi_ddiv+0xae>
 80019a4:	4652      	mov	r2, sl
 80019a6:	4322      	orrs	r2, r4
 80019a8:	d100      	bne.n	80019ac <__aeabi_ddiv+0x2a4>
 80019aa:	e07b      	b.n	8001aa4 <__aeabi_ddiv+0x39c>
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d100      	bne.n	80019b2 <__aeabi_ddiv+0x2aa>
 80019b0:	e0fa      	b.n	8001ba8 <__aeabi_ddiv+0x4a0>
 80019b2:	0020      	movs	r0, r4
 80019b4:	f001 f97c 	bl	8002cb0 <__clzsi2>
 80019b8:	0002      	movs	r2, r0
 80019ba:	3a0b      	subs	r2, #11
 80019bc:	231d      	movs	r3, #29
 80019be:	0001      	movs	r1, r0
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	4652      	mov	r2, sl
 80019c4:	3908      	subs	r1, #8
 80019c6:	40da      	lsrs	r2, r3
 80019c8:	408c      	lsls	r4, r1
 80019ca:	4314      	orrs	r4, r2
 80019cc:	4652      	mov	r2, sl
 80019ce:	408a      	lsls	r2, r1
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <__aeabi_ddiv+0x390>)
 80019d2:	4458      	add	r0, fp
 80019d4:	469b      	mov	fp, r3
 80019d6:	4483      	add	fp, r0
 80019d8:	2000      	movs	r0, #0
 80019da:	e6d5      	b.n	8001788 <__aeabi_ddiv+0x80>
 80019dc:	464b      	mov	r3, r9
 80019de:	4323      	orrs	r3, r4
 80019e0:	4698      	mov	r8, r3
 80019e2:	d044      	beq.n	8001a6e <__aeabi_ddiv+0x366>
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d100      	bne.n	80019ea <__aeabi_ddiv+0x2e2>
 80019e8:	e0ce      	b.n	8001b88 <__aeabi_ddiv+0x480>
 80019ea:	0020      	movs	r0, r4
 80019ec:	f001 f960 	bl	8002cb0 <__clzsi2>
 80019f0:	0001      	movs	r1, r0
 80019f2:	0002      	movs	r2, r0
 80019f4:	390b      	subs	r1, #11
 80019f6:	231d      	movs	r3, #29
 80019f8:	1a5b      	subs	r3, r3, r1
 80019fa:	4649      	mov	r1, r9
 80019fc:	0010      	movs	r0, r2
 80019fe:	40d9      	lsrs	r1, r3
 8001a00:	3808      	subs	r0, #8
 8001a02:	4084      	lsls	r4, r0
 8001a04:	000b      	movs	r3, r1
 8001a06:	464d      	mov	r5, r9
 8001a08:	4323      	orrs	r3, r4
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	4085      	lsls	r5, r0
 8001a0e:	4823      	ldr	r0, [pc, #140]	; (8001a9c <__aeabi_ddiv+0x394>)
 8001a10:	1a83      	subs	r3, r0, r2
 8001a12:	469b      	mov	fp, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	4699      	mov	r9, r3
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	e69a      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	4698      	mov	r8, r3
 8001a22:	d11d      	bne.n	8001a60 <__aeabi_ddiv+0x358>
 8001a24:	2308      	movs	r3, #8
 8001a26:	4699      	mov	r9, r3
 8001a28:	3b06      	subs	r3, #6
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	4683      	mov	fp, r0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	e68f      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a32:	4652      	mov	r2, sl
 8001a34:	4322      	orrs	r2, r4
 8001a36:	d109      	bne.n	8001a4c <__aeabi_ddiv+0x344>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	4319      	orrs	r1, r3
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <__aeabi_ddiv+0x398>)
 8001a40:	4689      	mov	r9, r1
 8001a42:	469c      	mov	ip, r3
 8001a44:	2400      	movs	r4, #0
 8001a46:	2002      	movs	r0, #2
 8001a48:	44e3      	add	fp, ip
 8001a4a:	e69d      	b.n	8001788 <__aeabi_ddiv+0x80>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	464a      	mov	r2, r9
 8001a50:	431a      	orrs	r2, r3
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <__aeabi_ddiv+0x398>)
 8001a54:	4691      	mov	r9, r2
 8001a56:	469c      	mov	ip, r3
 8001a58:	4652      	mov	r2, sl
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	44e3      	add	fp, ip
 8001a5e:	e693      	b.n	8001788 <__aeabi_ddiv+0x80>
 8001a60:	230c      	movs	r3, #12
 8001a62:	4699      	mov	r9, r3
 8001a64:	3b09      	subs	r3, #9
 8001a66:	46a0      	mov	r8, r4
 8001a68:	4683      	mov	fp, r0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e671      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	4699      	mov	r9, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	469b      	mov	fp, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	2500      	movs	r5, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	e669      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000007ff 	.word	0x000007ff
 8001a84:	fffffc01 	.word	0xfffffc01
 8001a88:	080188dc 	.word	0x080188dc
 8001a8c:	000003ff 	.word	0x000003ff
 8001a90:	feffffff 	.word	0xfeffffff
 8001a94:	000007fe 	.word	0x000007fe
 8001a98:	000003f3 	.word	0x000003f3
 8001a9c:	fffffc0d 	.word	0xfffffc0d
 8001aa0:	fffff801 	.word	0xfffff801
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4319      	orrs	r1, r3
 8001aaa:	4689      	mov	r9, r1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e66a      	b.n	8001788 <__aeabi_ddiv+0x80>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2480      	movs	r4, #128	; 0x80
 8001ab6:	469a      	mov	sl, r3
 8001ab8:	2500      	movs	r5, #0
 8001aba:	4b8a      	ldr	r3, [pc, #552]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001abc:	0324      	lsls	r4, r4, #12
 8001abe:	e67a      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001ac0:	2501      	movs	r5, #1
 8001ac2:	426d      	negs	r5, r5
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	2b38      	cmp	r3, #56	; 0x38
 8001aca:	dd00      	ble.n	8001ace <__aeabi_ddiv+0x3c6>
 8001acc:	e670      	b.n	80017b0 <__aeabi_ddiv+0xa8>
 8001ace:	2b1f      	cmp	r3, #31
 8001ad0:	dc00      	bgt.n	8001ad4 <__aeabi_ddiv+0x3cc>
 8001ad2:	e0bf      	b.n	8001c54 <__aeabi_ddiv+0x54c>
 8001ad4:	211f      	movs	r1, #31
 8001ad6:	4249      	negs	r1, r1
 8001ad8:	1a8a      	subs	r2, r1, r2
 8001ada:	4641      	mov	r1, r8
 8001adc:	40d1      	lsrs	r1, r2
 8001ade:	000a      	movs	r2, r1
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d004      	beq.n	8001aee <__aeabi_ddiv+0x3e6>
 8001ae4:	4641      	mov	r1, r8
 8001ae6:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <__aeabi_ddiv+0x5e0>)
 8001ae8:	445b      	add	r3, fp
 8001aea:	4099      	lsls	r1, r3
 8001aec:	430d      	orrs	r5, r1
 8001aee:	1e6b      	subs	r3, r5, #1
 8001af0:	419d      	sbcs	r5, r3
 8001af2:	2307      	movs	r3, #7
 8001af4:	432a      	orrs	r2, r5
 8001af6:	001d      	movs	r5, r3
 8001af8:	2400      	movs	r4, #0
 8001afa:	4015      	ands	r5, r2
 8001afc:	4213      	tst	r3, r2
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x3fa>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_ddiv+0x5a4>
 8001b02:	210f      	movs	r1, #15
 8001b04:	2300      	movs	r3, #0
 8001b06:	4011      	ands	r1, r2
 8001b08:	2904      	cmp	r1, #4
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x406>
 8001b0c:	e0cb      	b.n	8001ca6 <__aeabi_ddiv+0x59e>
 8001b0e:	1d11      	adds	r1, r2, #4
 8001b10:	4291      	cmp	r1, r2
 8001b12:	4192      	sbcs	r2, r2
 8001b14:	4252      	negs	r2, r2
 8001b16:	189b      	adds	r3, r3, r2
 8001b18:	000a      	movs	r2, r1
 8001b1a:	0219      	lsls	r1, r3, #8
 8001b1c:	d400      	bmi.n	8001b20 <__aeabi_ddiv+0x418>
 8001b1e:	e0c2      	b.n	8001ca6 <__aeabi_ddiv+0x59e>
 8001b20:	2301      	movs	r3, #1
 8001b22:	2400      	movs	r4, #0
 8001b24:	2500      	movs	r5, #0
 8001b26:	e646      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	4219      	tst	r1, r3
 8001b30:	d008      	beq.n	8001b44 <__aeabi_ddiv+0x43c>
 8001b32:	421c      	tst	r4, r3
 8001b34:	d106      	bne.n	8001b44 <__aeabi_ddiv+0x43c>
 8001b36:	431c      	orrs	r4, r3
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	46ba      	mov	sl, r7
 8001b3c:	0015      	movs	r5, r2
 8001b3e:	4b69      	ldr	r3, [pc, #420]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001b40:	0b24      	lsrs	r4, r4, #12
 8001b42:	e638      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b44:	2480      	movs	r4, #128	; 0x80
 8001b46:	4643      	mov	r3, r8
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	431c      	orrs	r4, r3
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	46b2      	mov	sl, r6
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001b52:	0b24      	lsrs	r4, r4, #12
 8001b54:	e62f      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_ddiv+0x454>
 8001b5a:	e703      	b.n	8001964 <__aeabi_ddiv+0x25c>
 8001b5c:	19a6      	adds	r6, r4, r6
 8001b5e:	1e68      	subs	r0, r5, #1
 8001b60:	42a6      	cmp	r6, r4
 8001b62:	d200      	bcs.n	8001b66 <__aeabi_ddiv+0x45e>
 8001b64:	e08d      	b.n	8001c82 <__aeabi_ddiv+0x57a>
 8001b66:	428e      	cmp	r6, r1
 8001b68:	d200      	bcs.n	8001b6c <__aeabi_ddiv+0x464>
 8001b6a:	e0a3      	b.n	8001cb4 <__aeabi_ddiv+0x5ac>
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0x468>
 8001b6e:	e0b3      	b.n	8001cd8 <__aeabi_ddiv+0x5d0>
 8001b70:	0005      	movs	r5, r0
 8001b72:	e6f5      	b.n	8001960 <__aeabi_ddiv+0x258>
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d900      	bls.n	8001b7a <__aeabi_ddiv+0x472>
 8001b78:	e639      	b.n	80017ee <__aeabi_ddiv+0xe6>
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	07de      	lsls	r6, r3, #31
 8001b7e:	0858      	lsrs	r0, r3, #1
 8001b80:	086b      	lsrs	r3, r5, #1
 8001b82:	431e      	orrs	r6, r3
 8001b84:	07ed      	lsls	r5, r5, #31
 8001b86:	e639      	b.n	80017fc <__aeabi_ddiv+0xf4>
 8001b88:	4648      	mov	r0, r9
 8001b8a:	f001 f891 	bl	8002cb0 <__clzsi2>
 8001b8e:	0001      	movs	r1, r0
 8001b90:	0002      	movs	r2, r0
 8001b92:	3115      	adds	r1, #21
 8001b94:	3220      	adds	r2, #32
 8001b96:	291c      	cmp	r1, #28
 8001b98:	dc00      	bgt.n	8001b9c <__aeabi_ddiv+0x494>
 8001b9a:	e72c      	b.n	80019f6 <__aeabi_ddiv+0x2ee>
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	3808      	subs	r0, #8
 8001ba0:	4083      	lsls	r3, r0
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	e732      	b.n	8001a0e <__aeabi_ddiv+0x306>
 8001ba8:	f001 f882 	bl	8002cb0 <__clzsi2>
 8001bac:	0003      	movs	r3, r0
 8001bae:	001a      	movs	r2, r3
 8001bb0:	3215      	adds	r2, #21
 8001bb2:	3020      	adds	r0, #32
 8001bb4:	2a1c      	cmp	r2, #28
 8001bb6:	dc00      	bgt.n	8001bba <__aeabi_ddiv+0x4b2>
 8001bb8:	e700      	b.n	80019bc <__aeabi_ddiv+0x2b4>
 8001bba:	4654      	mov	r4, sl
 8001bbc:	3b08      	subs	r3, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	409c      	lsls	r4, r3
 8001bc2:	e705      	b.n	80019d0 <__aeabi_ddiv+0x2c8>
 8001bc4:	1936      	adds	r6, r6, r4
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	42b4      	cmp	r4, r6
 8001bca:	d900      	bls.n	8001bce <__aeabi_ddiv+0x4c6>
 8001bcc:	e6a6      	b.n	800191c <__aeabi_ddiv+0x214>
 8001bce:	42b2      	cmp	r2, r6
 8001bd0:	d800      	bhi.n	8001bd4 <__aeabi_ddiv+0x4cc>
 8001bd2:	e6a3      	b.n	800191c <__aeabi_ddiv+0x214>
 8001bd4:	1e83      	subs	r3, r0, #2
 8001bd6:	1936      	adds	r6, r6, r4
 8001bd8:	e6a0      	b.n	800191c <__aeabi_ddiv+0x214>
 8001bda:	1909      	adds	r1, r1, r4
 8001bdc:	3d01      	subs	r5, #1
 8001bde:	428c      	cmp	r4, r1
 8001be0:	d900      	bls.n	8001be4 <__aeabi_ddiv+0x4dc>
 8001be2:	e68d      	b.n	8001900 <__aeabi_ddiv+0x1f8>
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d800      	bhi.n	8001bea <__aeabi_ddiv+0x4e2>
 8001be8:	e68a      	b.n	8001900 <__aeabi_ddiv+0x1f8>
 8001bea:	1e85      	subs	r5, r0, #2
 8001bec:	1909      	adds	r1, r1, r4
 8001bee:	e687      	b.n	8001900 <__aeabi_ddiv+0x1f8>
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	402b      	ands	r3, r5
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_ddiv+0x4f2>
 8001bf8:	e6bc      	b.n	8001974 <__aeabi_ddiv+0x26c>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	42ab      	cmp	r3, r5
 8001c00:	419b      	sbcs	r3, r3
 8001c02:	3504      	adds	r5, #4
 8001c04:	425b      	negs	r3, r3
 8001c06:	08ed      	lsrs	r5, r5, #3
 8001c08:	4498      	add	r8, r3
 8001c0a:	e6b4      	b.n	8001976 <__aeabi_ddiv+0x26e>
 8001c0c:	42af      	cmp	r7, r5
 8001c0e:	d900      	bls.n	8001c12 <__aeabi_ddiv+0x50a>
 8001c10:	e660      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 8001c12:	4282      	cmp	r2, r0
 8001c14:	d804      	bhi.n	8001c20 <__aeabi_ddiv+0x518>
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0x512>
 8001c18:	e65c      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 8001c1a:	42ae      	cmp	r6, r5
 8001c1c:	d800      	bhi.n	8001c20 <__aeabi_ddiv+0x518>
 8001c1e:	e659      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 8001c20:	2302      	movs	r3, #2
 8001c22:	425b      	negs	r3, r3
 8001c24:	469c      	mov	ip, r3
 8001c26:	9b00      	ldr	r3, [sp, #0]
 8001c28:	44e0      	add	r8, ip
 8001c2a:	469c      	mov	ip, r3
 8001c2c:	4465      	add	r5, ip
 8001c2e:	429d      	cmp	r5, r3
 8001c30:	419b      	sbcs	r3, r3
 8001c32:	425b      	negs	r3, r3
 8001c34:	191b      	adds	r3, r3, r4
 8001c36:	18c0      	adds	r0, r0, r3
 8001c38:	e64d      	b.n	80018d6 <__aeabi_ddiv+0x1ce>
 8001c3a:	428a      	cmp	r2, r1
 8001c3c:	d800      	bhi.n	8001c40 <__aeabi_ddiv+0x538>
 8001c3e:	e60e      	b.n	800185e <__aeabi_ddiv+0x156>
 8001c40:	1e83      	subs	r3, r0, #2
 8001c42:	1909      	adds	r1, r1, r4
 8001c44:	e60b      	b.n	800185e <__aeabi_ddiv+0x156>
 8001c46:	428a      	cmp	r2, r1
 8001c48:	d800      	bhi.n	8001c4c <__aeabi_ddiv+0x544>
 8001c4a:	e5f4      	b.n	8001836 <__aeabi_ddiv+0x12e>
 8001c4c:	1e83      	subs	r3, r0, #2
 8001c4e:	4698      	mov	r8, r3
 8001c50:	1909      	adds	r1, r1, r4
 8001c52:	e5f0      	b.n	8001836 <__aeabi_ddiv+0x12e>
 8001c54:	4925      	ldr	r1, [pc, #148]	; (8001cec <__aeabi_ddiv+0x5e4>)
 8001c56:	0028      	movs	r0, r5
 8001c58:	4459      	add	r1, fp
 8001c5a:	408d      	lsls	r5, r1
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	408a      	lsls	r2, r1
 8001c60:	1e69      	subs	r1, r5, #1
 8001c62:	418d      	sbcs	r5, r1
 8001c64:	4641      	mov	r1, r8
 8001c66:	40d8      	lsrs	r0, r3
 8001c68:	40d9      	lsrs	r1, r3
 8001c6a:	4302      	orrs	r2, r0
 8001c6c:	432a      	orrs	r2, r5
 8001c6e:	000b      	movs	r3, r1
 8001c70:	0751      	lsls	r1, r2, #29
 8001c72:	d100      	bne.n	8001c76 <__aeabi_ddiv+0x56e>
 8001c74:	e751      	b.n	8001b1a <__aeabi_ddiv+0x412>
 8001c76:	210f      	movs	r1, #15
 8001c78:	4011      	ands	r1, r2
 8001c7a:	2904      	cmp	r1, #4
 8001c7c:	d000      	beq.n	8001c80 <__aeabi_ddiv+0x578>
 8001c7e:	e746      	b.n	8001b0e <__aeabi_ddiv+0x406>
 8001c80:	e74b      	b.n	8001b1a <__aeabi_ddiv+0x412>
 8001c82:	0005      	movs	r5, r0
 8001c84:	428e      	cmp	r6, r1
 8001c86:	d000      	beq.n	8001c8a <__aeabi_ddiv+0x582>
 8001c88:	e66a      	b.n	8001960 <__aeabi_ddiv+0x258>
 8001c8a:	9a00      	ldr	r2, [sp, #0]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_ddiv+0x58a>
 8001c90:	e666      	b.n	8001960 <__aeabi_ddiv+0x258>
 8001c92:	e667      	b.n	8001964 <__aeabi_ddiv+0x25c>
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <__aeabi_ddiv+0x5e8>)
 8001c96:	445a      	add	r2, fp
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	dc00      	bgt.n	8001c9e <__aeabi_ddiv+0x596>
 8001c9c:	e710      	b.n	8001ac0 <__aeabi_ddiv+0x3b8>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	4498      	add	r8, r3
 8001ca4:	e667      	b.n	8001976 <__aeabi_ddiv+0x26e>
 8001ca6:	075d      	lsls	r5, r3, #29
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	0b1c      	lsrs	r4, r3, #12
 8001cac:	08d2      	lsrs	r2, r2, #3
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4315      	orrs	r5, r2
 8001cb2:	e580      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001cb4:	9800      	ldr	r0, [sp, #0]
 8001cb6:	3d02      	subs	r5, #2
 8001cb8:	0042      	lsls	r2, r0, #1
 8001cba:	4282      	cmp	r2, r0
 8001cbc:	41bf      	sbcs	r7, r7
 8001cbe:	427f      	negs	r7, r7
 8001cc0:	193c      	adds	r4, r7, r4
 8001cc2:	1936      	adds	r6, r6, r4
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	e7dd      	b.n	8001c84 <__aeabi_ddiv+0x57c>
 8001cc8:	2480      	movs	r4, #128	; 0x80
 8001cca:	4643      	mov	r3, r8
 8001ccc:	0324      	lsls	r4, r4, #12
 8001cce:	431c      	orrs	r4, r3
 8001cd0:	0324      	lsls	r4, r4, #12
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	e56e      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001cd8:	9a00      	ldr	r2, [sp, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d3ea      	bcc.n	8001cb4 <__aeabi_ddiv+0x5ac>
 8001cde:	0005      	movs	r5, r0
 8001ce0:	e7d3      	b.n	8001c8a <__aeabi_ddiv+0x582>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff
 8001ce8:	0000043e 	.word	0x0000043e
 8001cec:	0000041e 	.word	0x0000041e
 8001cf0:	000003ff 	.word	0x000003ff

08001cf4 <__eqdf2>:
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	464e      	mov	r6, r9
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	46de      	mov	lr, fp
 8001cfc:	4657      	mov	r7, sl
 8001cfe:	4690      	mov	r8, r2
 8001d00:	b5e0      	push	{r5, r6, r7, lr}
 8001d02:	0017      	movs	r7, r2
 8001d04:	031a      	lsls	r2, r3, #12
 8001d06:	0b12      	lsrs	r2, r2, #12
 8001d08:	0005      	movs	r5, r0
 8001d0a:	4684      	mov	ip, r0
 8001d0c:	4819      	ldr	r0, [pc, #100]	; (8001d74 <__eqdf2+0x80>)
 8001d0e:	030e      	lsls	r6, r1, #12
 8001d10:	004c      	lsls	r4, r1, #1
 8001d12:	4691      	mov	r9, r2
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	0fdb      	lsrs	r3, r3, #31
 8001d18:	469b      	mov	fp, r3
 8001d1a:	0b36      	lsrs	r6, r6, #12
 8001d1c:	0d64      	lsrs	r4, r4, #21
 8001d1e:	0fc9      	lsrs	r1, r1, #31
 8001d20:	0d52      	lsrs	r2, r2, #21
 8001d22:	4284      	cmp	r4, r0
 8001d24:	d019      	beq.n	8001d5a <__eqdf2+0x66>
 8001d26:	4282      	cmp	r2, r0
 8001d28:	d010      	beq.n	8001d4c <__eqdf2+0x58>
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	4294      	cmp	r4, r2
 8001d2e:	d10e      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d30:	454e      	cmp	r6, r9
 8001d32:	d10c      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d34:	2001      	movs	r0, #1
 8001d36:	45c4      	cmp	ip, r8
 8001d38:	d109      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d3a:	4559      	cmp	r1, fp
 8001d3c:	d017      	beq.n	8001d6e <__eqdf2+0x7a>
 8001d3e:	2c00      	cmp	r4, #0
 8001d40:	d105      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d42:	0030      	movs	r0, r6
 8001d44:	4328      	orrs	r0, r5
 8001d46:	1e43      	subs	r3, r0, #1
 8001d48:	4198      	sbcs	r0, r3
 8001d4a:	e000      	b.n	8001d4e <__eqdf2+0x5a>
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d50:	46bb      	mov	fp, r7
 8001d52:	46b2      	mov	sl, r6
 8001d54:	46a9      	mov	r9, r5
 8001d56:	46a0      	mov	r8, r4
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5a:	0033      	movs	r3, r6
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	432b      	orrs	r3, r5
 8001d60:	d1f5      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d62:	42a2      	cmp	r2, r4
 8001d64:	d1f3      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d66:	464b      	mov	r3, r9
 8001d68:	433b      	orrs	r3, r7
 8001d6a:	d1f0      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d6c:	e7e2      	b.n	8001d34 <__eqdf2+0x40>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	e7ed      	b.n	8001d4e <__eqdf2+0x5a>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__gedf2>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	4647      	mov	r7, r8
 8001d7c:	46ce      	mov	lr, r9
 8001d7e:	0004      	movs	r4, r0
 8001d80:	0018      	movs	r0, r3
 8001d82:	0016      	movs	r6, r2
 8001d84:	031b      	lsls	r3, r3, #12
 8001d86:	0b1b      	lsrs	r3, r3, #12
 8001d88:	4d2d      	ldr	r5, [pc, #180]	; (8001e40 <__gedf2+0xc8>)
 8001d8a:	004a      	lsls	r2, r1, #1
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	0043      	lsls	r3, r0, #1
 8001d92:	030f      	lsls	r7, r1, #12
 8001d94:	46a4      	mov	ip, r4
 8001d96:	46b0      	mov	r8, r6
 8001d98:	0b3f      	lsrs	r7, r7, #12
 8001d9a:	0d52      	lsrs	r2, r2, #21
 8001d9c:	0fc9      	lsrs	r1, r1, #31
 8001d9e:	0d5b      	lsrs	r3, r3, #21
 8001da0:	0fc0      	lsrs	r0, r0, #31
 8001da2:	42aa      	cmp	r2, r5
 8001da4:	d021      	beq.n	8001dea <__gedf2+0x72>
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d013      	beq.n	8001dd2 <__gedf2+0x5a>
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d122      	bne.n	8001df4 <__gedf2+0x7c>
 8001dae:	433c      	orrs	r4, r7
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <__gedf2+0x42>
 8001db4:	464d      	mov	r5, r9
 8001db6:	432e      	orrs	r6, r5
 8001db8:	d022      	beq.n	8001e00 <__gedf2+0x88>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d010      	beq.n	8001de0 <__gedf2+0x68>
 8001dbe:	4281      	cmp	r1, r0
 8001dc0:	d022      	beq.n	8001e08 <__gedf2+0x90>
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	3901      	subs	r1, #1
 8001dc6:	4008      	ands	r0, r1
 8001dc8:	3801      	subs	r0, #1
 8001dca:	bcc0      	pop	{r6, r7}
 8001dcc:	46b9      	mov	r9, r7
 8001dce:	46b0      	mov	r8, r6
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd2:	464d      	mov	r5, r9
 8001dd4:	432e      	orrs	r6, r5
 8001dd6:	d129      	bne.n	8001e2c <__gedf2+0xb4>
 8001dd8:	2a00      	cmp	r2, #0
 8001dda:	d1f0      	bne.n	8001dbe <__gedf2+0x46>
 8001ddc:	433c      	orrs	r4, r7
 8001dde:	d1ee      	bne.n	8001dbe <__gedf2+0x46>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d1f2      	bne.n	8001dca <__gedf2+0x52>
 8001de4:	2001      	movs	r0, #1
 8001de6:	4240      	negs	r0, r0
 8001de8:	e7ef      	b.n	8001dca <__gedf2+0x52>
 8001dea:	003d      	movs	r5, r7
 8001dec:	4325      	orrs	r5, r4
 8001dee:	d11d      	bne.n	8001e2c <__gedf2+0xb4>
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d0ee      	beq.n	8001dd2 <__gedf2+0x5a>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e2      	bne.n	8001dbe <__gedf2+0x46>
 8001df8:	464c      	mov	r4, r9
 8001dfa:	4326      	orrs	r6, r4
 8001dfc:	d1df      	bne.n	8001dbe <__gedf2+0x46>
 8001dfe:	e7e0      	b.n	8001dc2 <__gedf2+0x4a>
 8001e00:	2000      	movs	r0, #0
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d0e1      	beq.n	8001dca <__gedf2+0x52>
 8001e06:	e7dc      	b.n	8001dc2 <__gedf2+0x4a>
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dc0a      	bgt.n	8001e22 <__gedf2+0xaa>
 8001e0c:	dbe8      	blt.n	8001de0 <__gedf2+0x68>
 8001e0e:	454f      	cmp	r7, r9
 8001e10:	d8d7      	bhi.n	8001dc2 <__gedf2+0x4a>
 8001e12:	d00e      	beq.n	8001e32 <__gedf2+0xba>
 8001e14:	2000      	movs	r0, #0
 8001e16:	454f      	cmp	r7, r9
 8001e18:	d2d7      	bcs.n	8001dca <__gedf2+0x52>
 8001e1a:	2900      	cmp	r1, #0
 8001e1c:	d0e2      	beq.n	8001de4 <__gedf2+0x6c>
 8001e1e:	0008      	movs	r0, r1
 8001e20:	e7d3      	b.n	8001dca <__gedf2+0x52>
 8001e22:	4243      	negs	r3, r0
 8001e24:	4158      	adcs	r0, r3
 8001e26:	0040      	lsls	r0, r0, #1
 8001e28:	3801      	subs	r0, #1
 8001e2a:	e7ce      	b.n	8001dca <__gedf2+0x52>
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	4240      	negs	r0, r0
 8001e30:	e7cb      	b.n	8001dca <__gedf2+0x52>
 8001e32:	45c4      	cmp	ip, r8
 8001e34:	d8c5      	bhi.n	8001dc2 <__gedf2+0x4a>
 8001e36:	2000      	movs	r0, #0
 8001e38:	45c4      	cmp	ip, r8
 8001e3a:	d2c6      	bcs.n	8001dca <__gedf2+0x52>
 8001e3c:	e7ed      	b.n	8001e1a <__gedf2+0xa2>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	000007ff 	.word	0x000007ff

08001e44 <__ledf2>:
 8001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e46:	4647      	mov	r7, r8
 8001e48:	46ce      	mov	lr, r9
 8001e4a:	0004      	movs	r4, r0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	0016      	movs	r6, r2
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	0b1b      	lsrs	r3, r3, #12
 8001e54:	4d2c      	ldr	r5, [pc, #176]	; (8001f08 <__ledf2+0xc4>)
 8001e56:	004a      	lsls	r2, r1, #1
 8001e58:	4699      	mov	r9, r3
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	0043      	lsls	r3, r0, #1
 8001e5e:	030f      	lsls	r7, r1, #12
 8001e60:	46a4      	mov	ip, r4
 8001e62:	46b0      	mov	r8, r6
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d52      	lsrs	r2, r2, #21
 8001e68:	0fc9      	lsrs	r1, r1, #31
 8001e6a:	0d5b      	lsrs	r3, r3, #21
 8001e6c:	0fc0      	lsrs	r0, r0, #31
 8001e6e:	42aa      	cmp	r2, r5
 8001e70:	d00d      	beq.n	8001e8e <__ledf2+0x4a>
 8001e72:	42ab      	cmp	r3, r5
 8001e74:	d010      	beq.n	8001e98 <__ledf2+0x54>
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d127      	bne.n	8001eca <__ledf2+0x86>
 8001e7a:	433c      	orrs	r4, r7
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <__ledf2+0x60>
 8001e80:	464d      	mov	r5, r9
 8001e82:	432e      	orrs	r6, r5
 8001e84:	d10e      	bne.n	8001ea4 <__ledf2+0x60>
 8001e86:	2000      	movs	r0, #0
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	d015      	beq.n	8001eb8 <__ledf2+0x74>
 8001e8c:	e00e      	b.n	8001eac <__ledf2+0x68>
 8001e8e:	003d      	movs	r5, r7
 8001e90:	4325      	orrs	r5, r4
 8001e92:	d110      	bne.n	8001eb6 <__ledf2+0x72>
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d118      	bne.n	8001eca <__ledf2+0x86>
 8001e98:	464d      	mov	r5, r9
 8001e9a:	432e      	orrs	r6, r5
 8001e9c:	d10b      	bne.n	8001eb6 <__ledf2+0x72>
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d102      	bne.n	8001ea8 <__ledf2+0x64>
 8001ea2:	433c      	orrs	r4, r7
 8001ea4:	2c00      	cmp	r4, #0
 8001ea6:	d00b      	beq.n	8001ec0 <__ledf2+0x7c>
 8001ea8:	4281      	cmp	r1, r0
 8001eaa:	d014      	beq.n	8001ed6 <__ledf2+0x92>
 8001eac:	2002      	movs	r0, #2
 8001eae:	3901      	subs	r1, #1
 8001eb0:	4008      	ands	r0, r1
 8001eb2:	3801      	subs	r0, #1
 8001eb4:	e000      	b.n	8001eb8 <__ledf2+0x74>
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	bcc0      	pop	{r6, r7}
 8001eba:	46b9      	mov	r9, r7
 8001ebc:	46b0      	mov	r8, r6
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <__ledf2+0x74>
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	e7f6      	b.n	8001eb8 <__ledf2+0x74>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ec      	bne.n	8001ea8 <__ledf2+0x64>
 8001ece:	464c      	mov	r4, r9
 8001ed0:	4326      	orrs	r6, r4
 8001ed2:	d1e9      	bne.n	8001ea8 <__ledf2+0x64>
 8001ed4:	e7ea      	b.n	8001eac <__ledf2+0x68>
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dd04      	ble.n	8001ee4 <__ledf2+0xa0>
 8001eda:	4243      	negs	r3, r0
 8001edc:	4158      	adcs	r0, r3
 8001ede:	0040      	lsls	r0, r0, #1
 8001ee0:	3801      	subs	r0, #1
 8001ee2:	e7e9      	b.n	8001eb8 <__ledf2+0x74>
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbeb      	blt.n	8001ec0 <__ledf2+0x7c>
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	d8df      	bhi.n	8001eac <__ledf2+0x68>
 8001eec:	d006      	beq.n	8001efc <__ledf2+0xb8>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	454f      	cmp	r7, r9
 8001ef2:	d2e1      	bcs.n	8001eb8 <__ledf2+0x74>
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d0e5      	beq.n	8001ec4 <__ledf2+0x80>
 8001ef8:	0008      	movs	r0, r1
 8001efa:	e7dd      	b.n	8001eb8 <__ledf2+0x74>
 8001efc:	45c4      	cmp	ip, r8
 8001efe:	d8d5      	bhi.n	8001eac <__ledf2+0x68>
 8001f00:	2000      	movs	r0, #0
 8001f02:	45c4      	cmp	ip, r8
 8001f04:	d2d8      	bcs.n	8001eb8 <__ledf2+0x74>
 8001f06:	e7f5      	b.n	8001ef4 <__ledf2+0xb0>
 8001f08:	000007ff 	.word	0x000007ff

08001f0c <__aeabi_dmul>:
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0e:	4657      	mov	r7, sl
 8001f10:	464e      	mov	r6, r9
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	b5e0      	push	{r5, r6, r7, lr}
 8001f18:	4698      	mov	r8, r3
 8001f1a:	030c      	lsls	r4, r1, #12
 8001f1c:	004b      	lsls	r3, r1, #1
 8001f1e:	0006      	movs	r6, r0
 8001f20:	4692      	mov	sl, r2
 8001f22:	b087      	sub	sp, #28
 8001f24:	0b24      	lsrs	r4, r4, #12
 8001f26:	0d5b      	lsrs	r3, r3, #21
 8001f28:	0fcf      	lsrs	r7, r1, #31
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dmul+0x24>
 8001f2e:	e15c      	b.n	80021ea <__aeabi_dmul+0x2de>
 8001f30:	4ad9      	ldr	r2, [pc, #868]	; (8002298 <__aeabi_dmul+0x38c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dmul+0x2c>
 8001f36:	e175      	b.n	8002224 <__aeabi_dmul+0x318>
 8001f38:	0f42      	lsrs	r2, r0, #29
 8001f3a:	00e4      	lsls	r4, r4, #3
 8001f3c:	4314      	orrs	r4, r2
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0412      	lsls	r2, r2, #16
 8001f42:	4314      	orrs	r4, r2
 8001f44:	4ad5      	ldr	r2, [pc, #852]	; (800229c <__aeabi_dmul+0x390>)
 8001f46:	00c5      	lsls	r5, r0, #3
 8001f48:	4694      	mov	ip, r2
 8001f4a:	4463      	add	r3, ip
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	4699      	mov	r9, r3
 8001f52:	469b      	mov	fp, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	4642      	mov	r2, r8
 8001f58:	031e      	lsls	r6, r3, #12
 8001f5a:	0fd2      	lsrs	r2, r2, #31
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4650      	mov	r0, sl
 8001f60:	4690      	mov	r8, r2
 8001f62:	0b36      	lsrs	r6, r6, #12
 8001f64:	0d5b      	lsrs	r3, r3, #21
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dmul+0x5e>
 8001f68:	e120      	b.n	80021ac <__aeabi_dmul+0x2a0>
 8001f6a:	4acb      	ldr	r2, [pc, #812]	; (8002298 <__aeabi_dmul+0x38c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dmul+0x66>
 8001f70:	e162      	b.n	8002238 <__aeabi_dmul+0x32c>
 8001f72:	49ca      	ldr	r1, [pc, #808]	; (800229c <__aeabi_dmul+0x390>)
 8001f74:	0f42      	lsrs	r2, r0, #29
 8001f76:	468c      	mov	ip, r1
 8001f78:	9900      	ldr	r1, [sp, #0]
 8001f7a:	4463      	add	r3, ip
 8001f7c:	00f6      	lsls	r6, r6, #3
 8001f7e:	468c      	mov	ip, r1
 8001f80:	4316      	orrs	r6, r2
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	449c      	add	ip, r3
 8001f86:	0412      	lsls	r2, r2, #16
 8001f88:	4663      	mov	r3, ip
 8001f8a:	4316      	orrs	r6, r2
 8001f8c:	00c2      	lsls	r2, r0, #3
 8001f8e:	2000      	movs	r0, #0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	9900      	ldr	r1, [sp, #0]
 8001f94:	4643      	mov	r3, r8
 8001f96:	3101      	adds	r1, #1
 8001f98:	468c      	mov	ip, r1
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	407b      	eors	r3, r7
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	290f      	cmp	r1, #15
 8001fa2:	d826      	bhi.n	8001ff2 <__aeabi_dmul+0xe6>
 8001fa4:	4bbe      	ldr	r3, [pc, #760]	; (80022a0 <__aeabi_dmul+0x394>)
 8001fa6:	0089      	lsls	r1, r1, #2
 8001fa8:	5859      	ldr	r1, [r3, r1]
 8001faa:	468f      	mov	pc, r1
 8001fac:	4643      	mov	r3, r8
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	0034      	movs	r4, r6
 8001fb2:	0015      	movs	r5, r2
 8001fb4:	4683      	mov	fp, r0
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d016      	beq.n	8001fea <__aeabi_dmul+0xde>
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dmul+0xb6>
 8001fc0:	e203      	b.n	80023ca <__aeabi_dmul+0x4be>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_dmul+0xbc>
 8001fc6:	e0cd      	b.n	8002164 <__aeabi_dmul+0x258>
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2400      	movs	r4, #0
 8001fcc:	2500      	movs	r5, #0
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	0512      	lsls	r2, r2, #20
 8001fd2:	4322      	orrs	r2, r4
 8001fd4:	07db      	lsls	r3, r3, #31
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	0028      	movs	r0, r5
 8001fda:	0011      	movs	r1, r2
 8001fdc:	b007      	add	sp, #28
 8001fde:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe0:	46bb      	mov	fp, r7
 8001fe2:	46b2      	mov	sl, r6
 8001fe4:	46a9      	mov	r9, r5
 8001fe6:	46a0      	mov	r8, r4
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fea:	2400      	movs	r4, #0
 8001fec:	2500      	movs	r5, #0
 8001fee:	4aaa      	ldr	r2, [pc, #680]	; (8002298 <__aeabi_dmul+0x38c>)
 8001ff0:	e7ed      	b.n	8001fce <__aeabi_dmul+0xc2>
 8001ff2:	0c28      	lsrs	r0, r5, #16
 8001ff4:	042d      	lsls	r5, r5, #16
 8001ff6:	0c2d      	lsrs	r5, r5, #16
 8001ff8:	002b      	movs	r3, r5
 8001ffa:	0c11      	lsrs	r1, r2, #16
 8001ffc:	0412      	lsls	r2, r2, #16
 8001ffe:	0c12      	lsrs	r2, r2, #16
 8002000:	4353      	muls	r3, r2
 8002002:	4698      	mov	r8, r3
 8002004:	0013      	movs	r3, r2
 8002006:	002f      	movs	r7, r5
 8002008:	4343      	muls	r3, r0
 800200a:	4699      	mov	r9, r3
 800200c:	434f      	muls	r7, r1
 800200e:	444f      	add	r7, r9
 8002010:	46bb      	mov	fp, r7
 8002012:	4647      	mov	r7, r8
 8002014:	000b      	movs	r3, r1
 8002016:	0c3f      	lsrs	r7, r7, #16
 8002018:	46ba      	mov	sl, r7
 800201a:	4343      	muls	r3, r0
 800201c:	44da      	add	sl, fp
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	45d1      	cmp	r9, sl
 8002022:	d904      	bls.n	800202e <__aeabi_dmul+0x122>
 8002024:	2780      	movs	r7, #128	; 0x80
 8002026:	027f      	lsls	r7, r7, #9
 8002028:	46b9      	mov	r9, r7
 800202a:	444b      	add	r3, r9
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	4653      	mov	r3, sl
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	469b      	mov	fp, r3
 8002034:	4653      	mov	r3, sl
 8002036:	041f      	lsls	r7, r3, #16
 8002038:	4643      	mov	r3, r8
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	4698      	mov	r8, r3
 8002040:	003b      	movs	r3, r7
 8002042:	4443      	add	r3, r8
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	0c33      	lsrs	r3, r6, #16
 8002048:	0436      	lsls	r6, r6, #16
 800204a:	0c36      	lsrs	r6, r6, #16
 800204c:	4698      	mov	r8, r3
 800204e:	0033      	movs	r3, r6
 8002050:	4343      	muls	r3, r0
 8002052:	4699      	mov	r9, r3
 8002054:	4643      	mov	r3, r8
 8002056:	4343      	muls	r3, r0
 8002058:	002f      	movs	r7, r5
 800205a:	469a      	mov	sl, r3
 800205c:	4643      	mov	r3, r8
 800205e:	4377      	muls	r7, r6
 8002060:	435d      	muls	r5, r3
 8002062:	0c38      	lsrs	r0, r7, #16
 8002064:	444d      	add	r5, r9
 8002066:	1945      	adds	r5, r0, r5
 8002068:	45a9      	cmp	r9, r5
 800206a:	d903      	bls.n	8002074 <__aeabi_dmul+0x168>
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	025b      	lsls	r3, r3, #9
 8002070:	4699      	mov	r9, r3
 8002072:	44ca      	add	sl, r9
 8002074:	043f      	lsls	r7, r7, #16
 8002076:	0c28      	lsrs	r0, r5, #16
 8002078:	0c3f      	lsrs	r7, r7, #16
 800207a:	042d      	lsls	r5, r5, #16
 800207c:	19ed      	adds	r5, r5, r7
 800207e:	0c27      	lsrs	r7, r4, #16
 8002080:	0424      	lsls	r4, r4, #16
 8002082:	0c24      	lsrs	r4, r4, #16
 8002084:	0003      	movs	r3, r0
 8002086:	0020      	movs	r0, r4
 8002088:	4350      	muls	r0, r2
 800208a:	437a      	muls	r2, r7
 800208c:	4691      	mov	r9, r2
 800208e:	003a      	movs	r2, r7
 8002090:	4453      	add	r3, sl
 8002092:	9305      	str	r3, [sp, #20]
 8002094:	0c03      	lsrs	r3, r0, #16
 8002096:	469a      	mov	sl, r3
 8002098:	434a      	muls	r2, r1
 800209a:	4361      	muls	r1, r4
 800209c:	4449      	add	r1, r9
 800209e:	4451      	add	r1, sl
 80020a0:	44ab      	add	fp, r5
 80020a2:	4589      	cmp	r9, r1
 80020a4:	d903      	bls.n	80020ae <__aeabi_dmul+0x1a2>
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	4699      	mov	r9, r3
 80020ac:	444a      	add	r2, r9
 80020ae:	0400      	lsls	r0, r0, #16
 80020b0:	0c0b      	lsrs	r3, r1, #16
 80020b2:	0c00      	lsrs	r0, r0, #16
 80020b4:	0409      	lsls	r1, r1, #16
 80020b6:	1809      	adds	r1, r1, r0
 80020b8:	0020      	movs	r0, r4
 80020ba:	4699      	mov	r9, r3
 80020bc:	4643      	mov	r3, r8
 80020be:	4370      	muls	r0, r6
 80020c0:	435c      	muls	r4, r3
 80020c2:	437e      	muls	r6, r7
 80020c4:	435f      	muls	r7, r3
 80020c6:	0c03      	lsrs	r3, r0, #16
 80020c8:	4698      	mov	r8, r3
 80020ca:	19a4      	adds	r4, r4, r6
 80020cc:	4444      	add	r4, r8
 80020ce:	444a      	add	r2, r9
 80020d0:	9703      	str	r7, [sp, #12]
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d904      	bls.n	80020e0 <__aeabi_dmul+0x1d4>
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	4698      	mov	r8, r3
 80020dc:	4447      	add	r7, r8
 80020de:	9703      	str	r7, [sp, #12]
 80020e0:	0423      	lsls	r3, r4, #16
 80020e2:	9e02      	ldr	r6, [sp, #8]
 80020e4:	469a      	mov	sl, r3
 80020e6:	9b05      	ldr	r3, [sp, #20]
 80020e8:	445e      	add	r6, fp
 80020ea:	4698      	mov	r8, r3
 80020ec:	42ae      	cmp	r6, r5
 80020ee:	41ad      	sbcs	r5, r5
 80020f0:	1876      	adds	r6, r6, r1
 80020f2:	428e      	cmp	r6, r1
 80020f4:	4189      	sbcs	r1, r1
 80020f6:	0400      	lsls	r0, r0, #16
 80020f8:	0c00      	lsrs	r0, r0, #16
 80020fa:	4450      	add	r0, sl
 80020fc:	4440      	add	r0, r8
 80020fe:	426d      	negs	r5, r5
 8002100:	1947      	adds	r7, r0, r5
 8002102:	46b8      	mov	r8, r7
 8002104:	4693      	mov	fp, r2
 8002106:	4249      	negs	r1, r1
 8002108:	4689      	mov	r9, r1
 800210a:	44c3      	add	fp, r8
 800210c:	44d9      	add	r9, fp
 800210e:	4298      	cmp	r0, r3
 8002110:	4180      	sbcs	r0, r0
 8002112:	45a8      	cmp	r8, r5
 8002114:	41ad      	sbcs	r5, r5
 8002116:	4593      	cmp	fp, r2
 8002118:	4192      	sbcs	r2, r2
 800211a:	4589      	cmp	r9, r1
 800211c:	4189      	sbcs	r1, r1
 800211e:	426d      	negs	r5, r5
 8002120:	4240      	negs	r0, r0
 8002122:	4328      	orrs	r0, r5
 8002124:	0c24      	lsrs	r4, r4, #16
 8002126:	4252      	negs	r2, r2
 8002128:	4249      	negs	r1, r1
 800212a:	430a      	orrs	r2, r1
 800212c:	9b03      	ldr	r3, [sp, #12]
 800212e:	1900      	adds	r0, r0, r4
 8002130:	1880      	adds	r0, r0, r2
 8002132:	18c7      	adds	r7, r0, r3
 8002134:	464b      	mov	r3, r9
 8002136:	0ddc      	lsrs	r4, r3, #23
 8002138:	9b04      	ldr	r3, [sp, #16]
 800213a:	0275      	lsls	r5, r6, #9
 800213c:	431d      	orrs	r5, r3
 800213e:	1e6a      	subs	r2, r5, #1
 8002140:	4195      	sbcs	r5, r2
 8002142:	464b      	mov	r3, r9
 8002144:	0df6      	lsrs	r6, r6, #23
 8002146:	027f      	lsls	r7, r7, #9
 8002148:	4335      	orrs	r5, r6
 800214a:	025a      	lsls	r2, r3, #9
 800214c:	433c      	orrs	r4, r7
 800214e:	4315      	orrs	r5, r2
 8002150:	01fb      	lsls	r3, r7, #7
 8002152:	d400      	bmi.n	8002156 <__aeabi_dmul+0x24a>
 8002154:	e11c      	b.n	8002390 <__aeabi_dmul+0x484>
 8002156:	2101      	movs	r1, #1
 8002158:	086a      	lsrs	r2, r5, #1
 800215a:	400d      	ands	r5, r1
 800215c:	4315      	orrs	r5, r2
 800215e:	07e2      	lsls	r2, r4, #31
 8002160:	4315      	orrs	r5, r2
 8002162:	0864      	lsrs	r4, r4, #1
 8002164:	494f      	ldr	r1, [pc, #316]	; (80022a4 <__aeabi_dmul+0x398>)
 8002166:	4461      	add	r1, ip
 8002168:	2900      	cmp	r1, #0
 800216a:	dc00      	bgt.n	800216e <__aeabi_dmul+0x262>
 800216c:	e0b0      	b.n	80022d0 <__aeabi_dmul+0x3c4>
 800216e:	076b      	lsls	r3, r5, #29
 8002170:	d009      	beq.n	8002186 <__aeabi_dmul+0x27a>
 8002172:	220f      	movs	r2, #15
 8002174:	402a      	ands	r2, r5
 8002176:	2a04      	cmp	r2, #4
 8002178:	d005      	beq.n	8002186 <__aeabi_dmul+0x27a>
 800217a:	1d2a      	adds	r2, r5, #4
 800217c:	42aa      	cmp	r2, r5
 800217e:	41ad      	sbcs	r5, r5
 8002180:	426d      	negs	r5, r5
 8002182:	1964      	adds	r4, r4, r5
 8002184:	0015      	movs	r5, r2
 8002186:	01e3      	lsls	r3, r4, #7
 8002188:	d504      	bpl.n	8002194 <__aeabi_dmul+0x288>
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <__aeabi_dmul+0x39c>)
 800218e:	00c9      	lsls	r1, r1, #3
 8002190:	4014      	ands	r4, r2
 8002192:	4461      	add	r1, ip
 8002194:	4a45      	ldr	r2, [pc, #276]	; (80022ac <__aeabi_dmul+0x3a0>)
 8002196:	4291      	cmp	r1, r2
 8002198:	dd00      	ble.n	800219c <__aeabi_dmul+0x290>
 800219a:	e726      	b.n	8001fea <__aeabi_dmul+0xde>
 800219c:	0762      	lsls	r2, r4, #29
 800219e:	08ed      	lsrs	r5, r5, #3
 80021a0:	0264      	lsls	r4, r4, #9
 80021a2:	0549      	lsls	r1, r1, #21
 80021a4:	4315      	orrs	r5, r2
 80021a6:	0b24      	lsrs	r4, r4, #12
 80021a8:	0d4a      	lsrs	r2, r1, #21
 80021aa:	e710      	b.n	8001fce <__aeabi_dmul+0xc2>
 80021ac:	4652      	mov	r2, sl
 80021ae:	4332      	orrs	r2, r6
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0x2a8>
 80021b2:	e07f      	b.n	80022b4 <__aeabi_dmul+0x3a8>
 80021b4:	2e00      	cmp	r6, #0
 80021b6:	d100      	bne.n	80021ba <__aeabi_dmul+0x2ae>
 80021b8:	e0dc      	b.n	8002374 <__aeabi_dmul+0x468>
 80021ba:	0030      	movs	r0, r6
 80021bc:	f000 fd78 	bl	8002cb0 <__clzsi2>
 80021c0:	0002      	movs	r2, r0
 80021c2:	3a0b      	subs	r2, #11
 80021c4:	231d      	movs	r3, #29
 80021c6:	0001      	movs	r1, r0
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	4652      	mov	r2, sl
 80021cc:	3908      	subs	r1, #8
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	408e      	lsls	r6, r1
 80021d2:	4316      	orrs	r6, r2
 80021d4:	4652      	mov	r2, sl
 80021d6:	408a      	lsls	r2, r1
 80021d8:	9b00      	ldr	r3, [sp, #0]
 80021da:	4935      	ldr	r1, [pc, #212]	; (80022b0 <__aeabi_dmul+0x3a4>)
 80021dc:	1a18      	subs	r0, r3, r0
 80021de:	0003      	movs	r3, r0
 80021e0:	468c      	mov	ip, r1
 80021e2:	4463      	add	r3, ip
 80021e4:	2000      	movs	r0, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	e6d3      	b.n	8001f92 <__aeabi_dmul+0x86>
 80021ea:	0025      	movs	r5, r4
 80021ec:	4305      	orrs	r5, r0
 80021ee:	d04a      	beq.n	8002286 <__aeabi_dmul+0x37a>
 80021f0:	2c00      	cmp	r4, #0
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dmul+0x2ea>
 80021f4:	e0b0      	b.n	8002358 <__aeabi_dmul+0x44c>
 80021f6:	0020      	movs	r0, r4
 80021f8:	f000 fd5a 	bl	8002cb0 <__clzsi2>
 80021fc:	0001      	movs	r1, r0
 80021fe:	0002      	movs	r2, r0
 8002200:	390b      	subs	r1, #11
 8002202:	231d      	movs	r3, #29
 8002204:	0010      	movs	r0, r2
 8002206:	1a5b      	subs	r3, r3, r1
 8002208:	0031      	movs	r1, r6
 800220a:	0035      	movs	r5, r6
 800220c:	3808      	subs	r0, #8
 800220e:	4084      	lsls	r4, r0
 8002210:	40d9      	lsrs	r1, r3
 8002212:	4085      	lsls	r5, r0
 8002214:	430c      	orrs	r4, r1
 8002216:	4826      	ldr	r0, [pc, #152]	; (80022b0 <__aeabi_dmul+0x3a4>)
 8002218:	1a83      	subs	r3, r0, r2
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2300      	movs	r3, #0
 800221e:	4699      	mov	r9, r3
 8002220:	469b      	mov	fp, r3
 8002222:	e697      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002224:	0005      	movs	r5, r0
 8002226:	4325      	orrs	r5, r4
 8002228:	d126      	bne.n	8002278 <__aeabi_dmul+0x36c>
 800222a:	2208      	movs	r2, #8
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2302      	movs	r3, #2
 8002230:	2400      	movs	r4, #0
 8002232:	4691      	mov	r9, r2
 8002234:	469b      	mov	fp, r3
 8002236:	e68d      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002238:	4652      	mov	r2, sl
 800223a:	9b00      	ldr	r3, [sp, #0]
 800223c:	4332      	orrs	r2, r6
 800223e:	d110      	bne.n	8002262 <__aeabi_dmul+0x356>
 8002240:	4915      	ldr	r1, [pc, #84]	; (8002298 <__aeabi_dmul+0x38c>)
 8002242:	2600      	movs	r6, #0
 8002244:	468c      	mov	ip, r1
 8002246:	4463      	add	r3, ip
 8002248:	4649      	mov	r1, r9
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2302      	movs	r3, #2
 800224e:	4319      	orrs	r1, r3
 8002250:	4689      	mov	r9, r1
 8002252:	2002      	movs	r0, #2
 8002254:	e69d      	b.n	8001f92 <__aeabi_dmul+0x86>
 8002256:	465b      	mov	r3, fp
 8002258:	9701      	str	r7, [sp, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d000      	beq.n	8002260 <__aeabi_dmul+0x354>
 800225e:	e6ad      	b.n	8001fbc <__aeabi_dmul+0xb0>
 8002260:	e6c3      	b.n	8001fea <__aeabi_dmul+0xde>
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <__aeabi_dmul+0x38c>)
 8002264:	2003      	movs	r0, #3
 8002266:	4694      	mov	ip, r2
 8002268:	4463      	add	r3, ip
 800226a:	464a      	mov	r2, r9
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2303      	movs	r3, #3
 8002270:	431a      	orrs	r2, r3
 8002272:	4691      	mov	r9, r2
 8002274:	4652      	mov	r2, sl
 8002276:	e68c      	b.n	8001f92 <__aeabi_dmul+0x86>
 8002278:	220c      	movs	r2, #12
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2303      	movs	r3, #3
 800227e:	0005      	movs	r5, r0
 8002280:	4691      	mov	r9, r2
 8002282:	469b      	mov	fp, r3
 8002284:	e666      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002286:	2304      	movs	r3, #4
 8002288:	4699      	mov	r9, r3
 800228a:	2300      	movs	r3, #0
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	2400      	movs	r4, #0
 8002292:	469b      	mov	fp, r3
 8002294:	e65e      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff
 800229c:	fffffc01 	.word	0xfffffc01
 80022a0:	0801891c 	.word	0x0801891c
 80022a4:	000003ff 	.word	0x000003ff
 80022a8:	feffffff 	.word	0xfeffffff
 80022ac:	000007fe 	.word	0x000007fe
 80022b0:	fffffc0d 	.word	0xfffffc0d
 80022b4:	4649      	mov	r1, r9
 80022b6:	2301      	movs	r3, #1
 80022b8:	4319      	orrs	r1, r3
 80022ba:	4689      	mov	r9, r1
 80022bc:	2600      	movs	r6, #0
 80022be:	2001      	movs	r0, #1
 80022c0:	e667      	b.n	8001f92 <__aeabi_dmul+0x86>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2480      	movs	r4, #128	; 0x80
 80022c6:	2500      	movs	r5, #0
 80022c8:	4a43      	ldr	r2, [pc, #268]	; (80023d8 <__aeabi_dmul+0x4cc>)
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	e67e      	b.n	8001fce <__aeabi_dmul+0xc2>
 80022d0:	2001      	movs	r0, #1
 80022d2:	1a40      	subs	r0, r0, r1
 80022d4:	2838      	cmp	r0, #56	; 0x38
 80022d6:	dd00      	ble.n	80022da <__aeabi_dmul+0x3ce>
 80022d8:	e676      	b.n	8001fc8 <__aeabi_dmul+0xbc>
 80022da:	281f      	cmp	r0, #31
 80022dc:	dd5b      	ble.n	8002396 <__aeabi_dmul+0x48a>
 80022de:	221f      	movs	r2, #31
 80022e0:	0023      	movs	r3, r4
 80022e2:	4252      	negs	r2, r2
 80022e4:	1a51      	subs	r1, r2, r1
 80022e6:	40cb      	lsrs	r3, r1
 80022e8:	0019      	movs	r1, r3
 80022ea:	2820      	cmp	r0, #32
 80022ec:	d003      	beq.n	80022f6 <__aeabi_dmul+0x3ea>
 80022ee:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <__aeabi_dmul+0x4d0>)
 80022f0:	4462      	add	r2, ip
 80022f2:	4094      	lsls	r4, r2
 80022f4:	4325      	orrs	r5, r4
 80022f6:	1e6a      	subs	r2, r5, #1
 80022f8:	4195      	sbcs	r5, r2
 80022fa:	002a      	movs	r2, r5
 80022fc:	430a      	orrs	r2, r1
 80022fe:	2107      	movs	r1, #7
 8002300:	000d      	movs	r5, r1
 8002302:	2400      	movs	r4, #0
 8002304:	4015      	ands	r5, r2
 8002306:	4211      	tst	r1, r2
 8002308:	d05b      	beq.n	80023c2 <__aeabi_dmul+0x4b6>
 800230a:	210f      	movs	r1, #15
 800230c:	2400      	movs	r4, #0
 800230e:	4011      	ands	r1, r2
 8002310:	2904      	cmp	r1, #4
 8002312:	d053      	beq.n	80023bc <__aeabi_dmul+0x4b0>
 8002314:	1d11      	adds	r1, r2, #4
 8002316:	4291      	cmp	r1, r2
 8002318:	4192      	sbcs	r2, r2
 800231a:	4252      	negs	r2, r2
 800231c:	18a4      	adds	r4, r4, r2
 800231e:	000a      	movs	r2, r1
 8002320:	0223      	lsls	r3, r4, #8
 8002322:	d54b      	bpl.n	80023bc <__aeabi_dmul+0x4b0>
 8002324:	2201      	movs	r2, #1
 8002326:	2400      	movs	r4, #0
 8002328:	2500      	movs	r5, #0
 800232a:	e650      	b.n	8001fce <__aeabi_dmul+0xc2>
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	031b      	lsls	r3, r3, #12
 8002330:	421c      	tst	r4, r3
 8002332:	d009      	beq.n	8002348 <__aeabi_dmul+0x43c>
 8002334:	421e      	tst	r6, r3
 8002336:	d107      	bne.n	8002348 <__aeabi_dmul+0x43c>
 8002338:	4333      	orrs	r3, r6
 800233a:	031c      	lsls	r4, r3, #12
 800233c:	4643      	mov	r3, r8
 800233e:	0015      	movs	r5, r2
 8002340:	0b24      	lsrs	r4, r4, #12
 8002342:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <__aeabi_dmul+0x4cc>)
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	e642      	b.n	8001fce <__aeabi_dmul+0xc2>
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0312      	lsls	r2, r2, #12
 800234c:	4314      	orrs	r4, r2
 800234e:	0324      	lsls	r4, r4, #12
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <__aeabi_dmul+0x4cc>)
 8002352:	0b24      	lsrs	r4, r4, #12
 8002354:	9701      	str	r7, [sp, #4]
 8002356:	e63a      	b.n	8001fce <__aeabi_dmul+0xc2>
 8002358:	f000 fcaa 	bl	8002cb0 <__clzsi2>
 800235c:	0001      	movs	r1, r0
 800235e:	0002      	movs	r2, r0
 8002360:	3115      	adds	r1, #21
 8002362:	3220      	adds	r2, #32
 8002364:	291c      	cmp	r1, #28
 8002366:	dc00      	bgt.n	800236a <__aeabi_dmul+0x45e>
 8002368:	e74b      	b.n	8002202 <__aeabi_dmul+0x2f6>
 800236a:	0034      	movs	r4, r6
 800236c:	3808      	subs	r0, #8
 800236e:	2500      	movs	r5, #0
 8002370:	4084      	lsls	r4, r0
 8002372:	e750      	b.n	8002216 <__aeabi_dmul+0x30a>
 8002374:	f000 fc9c 	bl	8002cb0 <__clzsi2>
 8002378:	0003      	movs	r3, r0
 800237a:	001a      	movs	r2, r3
 800237c:	3215      	adds	r2, #21
 800237e:	3020      	adds	r0, #32
 8002380:	2a1c      	cmp	r2, #28
 8002382:	dc00      	bgt.n	8002386 <__aeabi_dmul+0x47a>
 8002384:	e71e      	b.n	80021c4 <__aeabi_dmul+0x2b8>
 8002386:	4656      	mov	r6, sl
 8002388:	3b08      	subs	r3, #8
 800238a:	2200      	movs	r2, #0
 800238c:	409e      	lsls	r6, r3
 800238e:	e723      	b.n	80021d8 <__aeabi_dmul+0x2cc>
 8002390:	9b00      	ldr	r3, [sp, #0]
 8002392:	469c      	mov	ip, r3
 8002394:	e6e6      	b.n	8002164 <__aeabi_dmul+0x258>
 8002396:	4912      	ldr	r1, [pc, #72]	; (80023e0 <__aeabi_dmul+0x4d4>)
 8002398:	0022      	movs	r2, r4
 800239a:	4461      	add	r1, ip
 800239c:	002e      	movs	r6, r5
 800239e:	408d      	lsls	r5, r1
 80023a0:	408a      	lsls	r2, r1
 80023a2:	40c6      	lsrs	r6, r0
 80023a4:	1e69      	subs	r1, r5, #1
 80023a6:	418d      	sbcs	r5, r1
 80023a8:	4332      	orrs	r2, r6
 80023aa:	432a      	orrs	r2, r5
 80023ac:	40c4      	lsrs	r4, r0
 80023ae:	0753      	lsls	r3, r2, #29
 80023b0:	d0b6      	beq.n	8002320 <__aeabi_dmul+0x414>
 80023b2:	210f      	movs	r1, #15
 80023b4:	4011      	ands	r1, r2
 80023b6:	2904      	cmp	r1, #4
 80023b8:	d1ac      	bne.n	8002314 <__aeabi_dmul+0x408>
 80023ba:	e7b1      	b.n	8002320 <__aeabi_dmul+0x414>
 80023bc:	0765      	lsls	r5, r4, #29
 80023be:	0264      	lsls	r4, r4, #9
 80023c0:	0b24      	lsrs	r4, r4, #12
 80023c2:	08d2      	lsrs	r2, r2, #3
 80023c4:	4315      	orrs	r5, r2
 80023c6:	2200      	movs	r2, #0
 80023c8:	e601      	b.n	8001fce <__aeabi_dmul+0xc2>
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0312      	lsls	r2, r2, #12
 80023ce:	4314      	orrs	r4, r2
 80023d0:	0324      	lsls	r4, r4, #12
 80023d2:	4a01      	ldr	r2, [pc, #4]	; (80023d8 <__aeabi_dmul+0x4cc>)
 80023d4:	0b24      	lsrs	r4, r4, #12
 80023d6:	e5fa      	b.n	8001fce <__aeabi_dmul+0xc2>
 80023d8:	000007ff 	.word	0x000007ff
 80023dc:	0000043e 	.word	0x0000043e
 80023e0:	0000041e 	.word	0x0000041e

080023e4 <__aeabi_dsub>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	4657      	mov	r7, sl
 80023e8:	464e      	mov	r6, r9
 80023ea:	4645      	mov	r5, r8
 80023ec:	46de      	mov	lr, fp
 80023ee:	b5e0      	push	{r5, r6, r7, lr}
 80023f0:	001e      	movs	r6, r3
 80023f2:	0017      	movs	r7, r2
 80023f4:	004a      	lsls	r2, r1, #1
 80023f6:	030b      	lsls	r3, r1, #12
 80023f8:	0d52      	lsrs	r2, r2, #21
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	4690      	mov	r8, r2
 80023fe:	0f42      	lsrs	r2, r0, #29
 8002400:	431a      	orrs	r2, r3
 8002402:	0fcd      	lsrs	r5, r1, #31
 8002404:	4ccd      	ldr	r4, [pc, #820]	; (800273c <__aeabi_dsub+0x358>)
 8002406:	0331      	lsls	r1, r6, #12
 8002408:	00c3      	lsls	r3, r0, #3
 800240a:	4694      	mov	ip, r2
 800240c:	0070      	lsls	r0, r6, #1
 800240e:	0f7a      	lsrs	r2, r7, #29
 8002410:	0a49      	lsrs	r1, r1, #9
 8002412:	00ff      	lsls	r7, r7, #3
 8002414:	469a      	mov	sl, r3
 8002416:	46b9      	mov	r9, r7
 8002418:	0d40      	lsrs	r0, r0, #21
 800241a:	0ff6      	lsrs	r6, r6, #31
 800241c:	4311      	orrs	r1, r2
 800241e:	42a0      	cmp	r0, r4
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x40>
 8002422:	e0b1      	b.n	8002588 <__aeabi_dsub+0x1a4>
 8002424:	2201      	movs	r2, #1
 8002426:	4056      	eors	r6, r2
 8002428:	46b3      	mov	fp, r6
 800242a:	42b5      	cmp	r5, r6
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x4c>
 800242e:	e088      	b.n	8002542 <__aeabi_dsub+0x15e>
 8002430:	4642      	mov	r2, r8
 8002432:	1a12      	subs	r2, r2, r0
 8002434:	2a00      	cmp	r2, #0
 8002436:	dc00      	bgt.n	800243a <__aeabi_dsub+0x56>
 8002438:	e0ae      	b.n	8002598 <__aeabi_dsub+0x1b4>
 800243a:	2800      	cmp	r0, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x5c>
 800243e:	e0c1      	b.n	80025c4 <__aeabi_dsub+0x1e0>
 8002440:	48be      	ldr	r0, [pc, #760]	; (800273c <__aeabi_dsub+0x358>)
 8002442:	4580      	cmp	r8, r0
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x64>
 8002446:	e151      	b.n	80026ec <__aeabi_dsub+0x308>
 8002448:	2080      	movs	r0, #128	; 0x80
 800244a:	0400      	lsls	r0, r0, #16
 800244c:	4301      	orrs	r1, r0
 800244e:	2a38      	cmp	r2, #56	; 0x38
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0x70>
 8002452:	e17b      	b.n	800274c <__aeabi_dsub+0x368>
 8002454:	2a1f      	cmp	r2, #31
 8002456:	dd00      	ble.n	800245a <__aeabi_dsub+0x76>
 8002458:	e1ee      	b.n	8002838 <__aeabi_dsub+0x454>
 800245a:	2020      	movs	r0, #32
 800245c:	003e      	movs	r6, r7
 800245e:	1a80      	subs	r0, r0, r2
 8002460:	000c      	movs	r4, r1
 8002462:	40d6      	lsrs	r6, r2
 8002464:	40d1      	lsrs	r1, r2
 8002466:	4087      	lsls	r7, r0
 8002468:	4662      	mov	r2, ip
 800246a:	4084      	lsls	r4, r0
 800246c:	1a52      	subs	r2, r2, r1
 800246e:	1e78      	subs	r0, r7, #1
 8002470:	4187      	sbcs	r7, r0
 8002472:	4694      	mov	ip, r2
 8002474:	4334      	orrs	r4, r6
 8002476:	4327      	orrs	r7, r4
 8002478:	1bdc      	subs	r4, r3, r7
 800247a:	42a3      	cmp	r3, r4
 800247c:	419b      	sbcs	r3, r3
 800247e:	4662      	mov	r2, ip
 8002480:	425b      	negs	r3, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4699      	mov	r9, r3
 8002486:	464b      	mov	r3, r9
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	d400      	bmi.n	800248e <__aeabi_dsub+0xaa>
 800248c:	e118      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 800248e:	464b      	mov	r3, r9
 8002490:	0258      	lsls	r0, r3, #9
 8002492:	0a43      	lsrs	r3, r0, #9
 8002494:	4699      	mov	r9, r3
 8002496:	464b      	mov	r3, r9
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0xba>
 800249c:	e137      	b.n	800270e <__aeabi_dsub+0x32a>
 800249e:	4648      	mov	r0, r9
 80024a0:	f000 fc06 	bl	8002cb0 <__clzsi2>
 80024a4:	0001      	movs	r1, r0
 80024a6:	3908      	subs	r1, #8
 80024a8:	2320      	movs	r3, #32
 80024aa:	0022      	movs	r2, r4
 80024ac:	4648      	mov	r0, r9
 80024ae:	1a5b      	subs	r3, r3, r1
 80024b0:	40da      	lsrs	r2, r3
 80024b2:	4088      	lsls	r0, r1
 80024b4:	408c      	lsls	r4, r1
 80024b6:	4643      	mov	r3, r8
 80024b8:	4310      	orrs	r0, r2
 80024ba:	4588      	cmp	r8, r1
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dsub+0xdc>
 80024be:	e136      	b.n	800272e <__aeabi_dsub+0x34a>
 80024c0:	1ac9      	subs	r1, r1, r3
 80024c2:	1c4b      	adds	r3, r1, #1
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	dd00      	ble.n	80024ca <__aeabi_dsub+0xe6>
 80024c8:	e0ea      	b.n	80026a0 <__aeabi_dsub+0x2bc>
 80024ca:	2220      	movs	r2, #32
 80024cc:	0026      	movs	r6, r4
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	0001      	movs	r1, r0
 80024d2:	4094      	lsls	r4, r2
 80024d4:	40de      	lsrs	r6, r3
 80024d6:	40d8      	lsrs	r0, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	4091      	lsls	r1, r2
 80024dc:	1e62      	subs	r2, r4, #1
 80024de:	4194      	sbcs	r4, r2
 80024e0:	4681      	mov	r9, r0
 80024e2:	4698      	mov	r8, r3
 80024e4:	4331      	orrs	r1, r6
 80024e6:	430c      	orrs	r4, r1
 80024e8:	0763      	lsls	r3, r4, #29
 80024ea:	d009      	beq.n	8002500 <__aeabi_dsub+0x11c>
 80024ec:	230f      	movs	r3, #15
 80024ee:	4023      	ands	r3, r4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d005      	beq.n	8002500 <__aeabi_dsub+0x11c>
 80024f4:	1d23      	adds	r3, r4, #4
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	41a4      	sbcs	r4, r4
 80024fa:	4264      	negs	r4, r4
 80024fc:	44a1      	add	r9, r4
 80024fe:	001c      	movs	r4, r3
 8002500:	464b      	mov	r3, r9
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	d400      	bmi.n	8002508 <__aeabi_dsub+0x124>
 8002506:	e0de      	b.n	80026c6 <__aeabi_dsub+0x2e2>
 8002508:	4641      	mov	r1, r8
 800250a:	4b8c      	ldr	r3, [pc, #560]	; (800273c <__aeabi_dsub+0x358>)
 800250c:	3101      	adds	r1, #1
 800250e:	4299      	cmp	r1, r3
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x130>
 8002512:	e0e7      	b.n	80026e4 <__aeabi_dsub+0x300>
 8002514:	464b      	mov	r3, r9
 8002516:	488a      	ldr	r0, [pc, #552]	; (8002740 <__aeabi_dsub+0x35c>)
 8002518:	08e4      	lsrs	r4, r4, #3
 800251a:	4003      	ands	r3, r0
 800251c:	0018      	movs	r0, r3
 800251e:	0549      	lsls	r1, r1, #21
 8002520:	075b      	lsls	r3, r3, #29
 8002522:	0240      	lsls	r0, r0, #9
 8002524:	4323      	orrs	r3, r4
 8002526:	0d4a      	lsrs	r2, r1, #21
 8002528:	0b04      	lsrs	r4, r0, #12
 800252a:	0512      	lsls	r2, r2, #20
 800252c:	07ed      	lsls	r5, r5, #31
 800252e:	4322      	orrs	r2, r4
 8002530:	432a      	orrs	r2, r5
 8002532:	0018      	movs	r0, r3
 8002534:	0011      	movs	r1, r2
 8002536:	bcf0      	pop	{r4, r5, r6, r7}
 8002538:	46bb      	mov	fp, r7
 800253a:	46b2      	mov	sl, r6
 800253c:	46a9      	mov	r9, r5
 800253e:	46a0      	mov	r8, r4
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002542:	4642      	mov	r2, r8
 8002544:	1a12      	subs	r2, r2, r0
 8002546:	2a00      	cmp	r2, #0
 8002548:	dd52      	ble.n	80025f0 <__aeabi_dsub+0x20c>
 800254a:	2800      	cmp	r0, #0
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x16c>
 800254e:	e09c      	b.n	800268a <__aeabi_dsub+0x2a6>
 8002550:	45a0      	cmp	r8, r4
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x172>
 8002554:	e0ca      	b.n	80026ec <__aeabi_dsub+0x308>
 8002556:	2080      	movs	r0, #128	; 0x80
 8002558:	0400      	lsls	r0, r0, #16
 800255a:	4301      	orrs	r1, r0
 800255c:	2a38      	cmp	r2, #56	; 0x38
 800255e:	dd00      	ble.n	8002562 <__aeabi_dsub+0x17e>
 8002560:	e149      	b.n	80027f6 <__aeabi_dsub+0x412>
 8002562:	2a1f      	cmp	r2, #31
 8002564:	dc00      	bgt.n	8002568 <__aeabi_dsub+0x184>
 8002566:	e197      	b.n	8002898 <__aeabi_dsub+0x4b4>
 8002568:	0010      	movs	r0, r2
 800256a:	000e      	movs	r6, r1
 800256c:	3820      	subs	r0, #32
 800256e:	40c6      	lsrs	r6, r0
 8002570:	2a20      	cmp	r2, #32
 8002572:	d004      	beq.n	800257e <__aeabi_dsub+0x19a>
 8002574:	2040      	movs	r0, #64	; 0x40
 8002576:	1a82      	subs	r2, r0, r2
 8002578:	4091      	lsls	r1, r2
 800257a:	430f      	orrs	r7, r1
 800257c:	46b9      	mov	r9, r7
 800257e:	464c      	mov	r4, r9
 8002580:	1e62      	subs	r2, r4, #1
 8002582:	4194      	sbcs	r4, r2
 8002584:	4334      	orrs	r4, r6
 8002586:	e13a      	b.n	80027fe <__aeabi_dsub+0x41a>
 8002588:	000a      	movs	r2, r1
 800258a:	433a      	orrs	r2, r7
 800258c:	d028      	beq.n	80025e0 <__aeabi_dsub+0x1fc>
 800258e:	46b3      	mov	fp, r6
 8002590:	42b5      	cmp	r5, r6
 8002592:	d02b      	beq.n	80025ec <__aeabi_dsub+0x208>
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <__aeabi_dsub+0x360>)
 8002596:	4442      	add	r2, r8
 8002598:	2a00      	cmp	r2, #0
 800259a:	d05d      	beq.n	8002658 <__aeabi_dsub+0x274>
 800259c:	4642      	mov	r2, r8
 800259e:	4644      	mov	r4, r8
 80025a0:	1a82      	subs	r2, r0, r2
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	d000      	beq.n	80025a8 <__aeabi_dsub+0x1c4>
 80025a6:	e0f5      	b.n	8002794 <__aeabi_dsub+0x3b0>
 80025a8:	4665      	mov	r5, ip
 80025aa:	431d      	orrs	r5, r3
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0x1cc>
 80025ae:	e19c      	b.n	80028ea <__aeabi_dsub+0x506>
 80025b0:	1e55      	subs	r5, r2, #1
 80025b2:	2a01      	cmp	r2, #1
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x1d4>
 80025b6:	e1fb      	b.n	80029b0 <__aeabi_dsub+0x5cc>
 80025b8:	4c60      	ldr	r4, [pc, #384]	; (800273c <__aeabi_dsub+0x358>)
 80025ba:	42a2      	cmp	r2, r4
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x1dc>
 80025be:	e1bd      	b.n	800293c <__aeabi_dsub+0x558>
 80025c0:	002a      	movs	r2, r5
 80025c2:	e0f0      	b.n	80027a6 <__aeabi_dsub+0x3c2>
 80025c4:	0008      	movs	r0, r1
 80025c6:	4338      	orrs	r0, r7
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x1e8>
 80025ca:	e0c3      	b.n	8002754 <__aeabi_dsub+0x370>
 80025cc:	1e50      	subs	r0, r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x1f0>
 80025d2:	e1a8      	b.n	8002926 <__aeabi_dsub+0x542>
 80025d4:	4c59      	ldr	r4, [pc, #356]	; (800273c <__aeabi_dsub+0x358>)
 80025d6:	42a2      	cmp	r2, r4
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x1f8>
 80025da:	e087      	b.n	80026ec <__aeabi_dsub+0x308>
 80025dc:	0002      	movs	r2, r0
 80025de:	e736      	b.n	800244e <__aeabi_dsub+0x6a>
 80025e0:	2201      	movs	r2, #1
 80025e2:	4056      	eors	r6, r2
 80025e4:	46b3      	mov	fp, r6
 80025e6:	42b5      	cmp	r5, r6
 80025e8:	d000      	beq.n	80025ec <__aeabi_dsub+0x208>
 80025ea:	e721      	b.n	8002430 <__aeabi_dsub+0x4c>
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <__aeabi_dsub+0x360>)
 80025ee:	4442      	add	r2, r8
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x212>
 80025f4:	e0b5      	b.n	8002762 <__aeabi_dsub+0x37e>
 80025f6:	4642      	mov	r2, r8
 80025f8:	4644      	mov	r4, r8
 80025fa:	1a82      	subs	r2, r0, r2
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d100      	bne.n	8002602 <__aeabi_dsub+0x21e>
 8002600:	e138      	b.n	8002874 <__aeabi_dsub+0x490>
 8002602:	4e4e      	ldr	r6, [pc, #312]	; (800273c <__aeabi_dsub+0x358>)
 8002604:	42b0      	cmp	r0, r6
 8002606:	d100      	bne.n	800260a <__aeabi_dsub+0x226>
 8002608:	e1de      	b.n	80029c8 <__aeabi_dsub+0x5e4>
 800260a:	2680      	movs	r6, #128	; 0x80
 800260c:	4664      	mov	r4, ip
 800260e:	0436      	lsls	r6, r6, #16
 8002610:	4334      	orrs	r4, r6
 8002612:	46a4      	mov	ip, r4
 8002614:	2a38      	cmp	r2, #56	; 0x38
 8002616:	dd00      	ble.n	800261a <__aeabi_dsub+0x236>
 8002618:	e196      	b.n	8002948 <__aeabi_dsub+0x564>
 800261a:	2a1f      	cmp	r2, #31
 800261c:	dd00      	ble.n	8002620 <__aeabi_dsub+0x23c>
 800261e:	e224      	b.n	8002a6a <__aeabi_dsub+0x686>
 8002620:	2620      	movs	r6, #32
 8002622:	1ab4      	subs	r4, r6, r2
 8002624:	46a2      	mov	sl, r4
 8002626:	4664      	mov	r4, ip
 8002628:	4656      	mov	r6, sl
 800262a:	40b4      	lsls	r4, r6
 800262c:	46a1      	mov	r9, r4
 800262e:	001c      	movs	r4, r3
 8002630:	464e      	mov	r6, r9
 8002632:	40d4      	lsrs	r4, r2
 8002634:	4326      	orrs	r6, r4
 8002636:	0034      	movs	r4, r6
 8002638:	4656      	mov	r6, sl
 800263a:	40b3      	lsls	r3, r6
 800263c:	1e5e      	subs	r6, r3, #1
 800263e:	41b3      	sbcs	r3, r6
 8002640:	431c      	orrs	r4, r3
 8002642:	4663      	mov	r3, ip
 8002644:	40d3      	lsrs	r3, r2
 8002646:	18c9      	adds	r1, r1, r3
 8002648:	19e4      	adds	r4, r4, r7
 800264a:	42bc      	cmp	r4, r7
 800264c:	41bf      	sbcs	r7, r7
 800264e:	427f      	negs	r7, r7
 8002650:	46b9      	mov	r9, r7
 8002652:	4680      	mov	r8, r0
 8002654:	4489      	add	r9, r1
 8002656:	e0d8      	b.n	800280a <__aeabi_dsub+0x426>
 8002658:	4640      	mov	r0, r8
 800265a:	4c3b      	ldr	r4, [pc, #236]	; (8002748 <__aeabi_dsub+0x364>)
 800265c:	3001      	adds	r0, #1
 800265e:	4220      	tst	r0, r4
 8002660:	d000      	beq.n	8002664 <__aeabi_dsub+0x280>
 8002662:	e0b4      	b.n	80027ce <__aeabi_dsub+0x3ea>
 8002664:	4640      	mov	r0, r8
 8002666:	2800      	cmp	r0, #0
 8002668:	d000      	beq.n	800266c <__aeabi_dsub+0x288>
 800266a:	e144      	b.n	80028f6 <__aeabi_dsub+0x512>
 800266c:	4660      	mov	r0, ip
 800266e:	4318      	orrs	r0, r3
 8002670:	d100      	bne.n	8002674 <__aeabi_dsub+0x290>
 8002672:	e190      	b.n	8002996 <__aeabi_dsub+0x5b2>
 8002674:	0008      	movs	r0, r1
 8002676:	4338      	orrs	r0, r7
 8002678:	d000      	beq.n	800267c <__aeabi_dsub+0x298>
 800267a:	e1aa      	b.n	80029d2 <__aeabi_dsub+0x5ee>
 800267c:	4661      	mov	r1, ip
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	0749      	lsls	r1, r1, #29
 8002682:	430b      	orrs	r3, r1
 8002684:	4661      	mov	r1, ip
 8002686:	08cc      	lsrs	r4, r1, #3
 8002688:	e027      	b.n	80026da <__aeabi_dsub+0x2f6>
 800268a:	0008      	movs	r0, r1
 800268c:	4338      	orrs	r0, r7
 800268e:	d061      	beq.n	8002754 <__aeabi_dsub+0x370>
 8002690:	1e50      	subs	r0, r2, #1
 8002692:	2a01      	cmp	r2, #1
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x2b4>
 8002696:	e139      	b.n	800290c <__aeabi_dsub+0x528>
 8002698:	42a2      	cmp	r2, r4
 800269a:	d027      	beq.n	80026ec <__aeabi_dsub+0x308>
 800269c:	0002      	movs	r2, r0
 800269e:	e75d      	b.n	800255c <__aeabi_dsub+0x178>
 80026a0:	0002      	movs	r2, r0
 80026a2:	391f      	subs	r1, #31
 80026a4:	40ca      	lsrs	r2, r1
 80026a6:	0011      	movs	r1, r2
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d003      	beq.n	80026b4 <__aeabi_dsub+0x2d0>
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4098      	lsls	r0, r3
 80026b2:	4304      	orrs	r4, r0
 80026b4:	1e63      	subs	r3, r4, #1
 80026b6:	419c      	sbcs	r4, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	4699      	mov	r9, r3
 80026bc:	4698      	mov	r8, r3
 80026be:	430c      	orrs	r4, r1
 80026c0:	0763      	lsls	r3, r4, #29
 80026c2:	d000      	beq.n	80026c6 <__aeabi_dsub+0x2e2>
 80026c4:	e712      	b.n	80024ec <__aeabi_dsub+0x108>
 80026c6:	464b      	mov	r3, r9
 80026c8:	464a      	mov	r2, r9
 80026ca:	08e4      	lsrs	r4, r4, #3
 80026cc:	075b      	lsls	r3, r3, #29
 80026ce:	4323      	orrs	r3, r4
 80026d0:	08d4      	lsrs	r4, r2, #3
 80026d2:	4642      	mov	r2, r8
 80026d4:	4919      	ldr	r1, [pc, #100]	; (800273c <__aeabi_dsub+0x358>)
 80026d6:	428a      	cmp	r2, r1
 80026d8:	d00e      	beq.n	80026f8 <__aeabi_dsub+0x314>
 80026da:	0324      	lsls	r4, r4, #12
 80026dc:	0552      	lsls	r2, r2, #21
 80026de:	0b24      	lsrs	r4, r4, #12
 80026e0:	0d52      	lsrs	r2, r2, #21
 80026e2:	e722      	b.n	800252a <__aeabi_dsub+0x146>
 80026e4:	000a      	movs	r2, r1
 80026e6:	2400      	movs	r4, #0
 80026e8:	2300      	movs	r3, #0
 80026ea:	e71e      	b.n	800252a <__aeabi_dsub+0x146>
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	4662      	mov	r2, ip
 80026f0:	0752      	lsls	r2, r2, #29
 80026f2:	4313      	orrs	r3, r2
 80026f4:	4662      	mov	r2, ip
 80026f6:	08d4      	lsrs	r4, r2, #3
 80026f8:	001a      	movs	r2, r3
 80026fa:	4322      	orrs	r2, r4
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x31c>
 80026fe:	e1fc      	b.n	8002afa <__aeabi_dsub+0x716>
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	0312      	lsls	r2, r2, #12
 8002704:	4314      	orrs	r4, r2
 8002706:	0324      	lsls	r4, r4, #12
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <__aeabi_dsub+0x358>)
 800270a:	0b24      	lsrs	r4, r4, #12
 800270c:	e70d      	b.n	800252a <__aeabi_dsub+0x146>
 800270e:	0020      	movs	r0, r4
 8002710:	f000 face 	bl	8002cb0 <__clzsi2>
 8002714:	0001      	movs	r1, r0
 8002716:	3118      	adds	r1, #24
 8002718:	291f      	cmp	r1, #31
 800271a:	dc00      	bgt.n	800271e <__aeabi_dsub+0x33a>
 800271c:	e6c4      	b.n	80024a8 <__aeabi_dsub+0xc4>
 800271e:	3808      	subs	r0, #8
 8002720:	4084      	lsls	r4, r0
 8002722:	4643      	mov	r3, r8
 8002724:	0020      	movs	r0, r4
 8002726:	2400      	movs	r4, #0
 8002728:	4588      	cmp	r8, r1
 800272a:	dc00      	bgt.n	800272e <__aeabi_dsub+0x34a>
 800272c:	e6c8      	b.n	80024c0 <__aeabi_dsub+0xdc>
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__aeabi_dsub+0x35c>)
 8002730:	1a5b      	subs	r3, r3, r1
 8002732:	4010      	ands	r0, r2
 8002734:	4698      	mov	r8, r3
 8002736:	4681      	mov	r9, r0
 8002738:	e6d6      	b.n	80024e8 <__aeabi_dsub+0x104>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	000007ff 	.word	0x000007ff
 8002740:	ff7fffff 	.word	0xff7fffff
 8002744:	fffff801 	.word	0xfffff801
 8002748:	000007fe 	.word	0x000007fe
 800274c:	430f      	orrs	r7, r1
 800274e:	1e7a      	subs	r2, r7, #1
 8002750:	4197      	sbcs	r7, r2
 8002752:	e691      	b.n	8002478 <__aeabi_dsub+0x94>
 8002754:	4661      	mov	r1, ip
 8002756:	08db      	lsrs	r3, r3, #3
 8002758:	0749      	lsls	r1, r1, #29
 800275a:	430b      	orrs	r3, r1
 800275c:	4661      	mov	r1, ip
 800275e:	08cc      	lsrs	r4, r1, #3
 8002760:	e7b8      	b.n	80026d4 <__aeabi_dsub+0x2f0>
 8002762:	4640      	mov	r0, r8
 8002764:	4cd3      	ldr	r4, [pc, #844]	; (8002ab4 <__aeabi_dsub+0x6d0>)
 8002766:	3001      	adds	r0, #1
 8002768:	4220      	tst	r0, r4
 800276a:	d000      	beq.n	800276e <__aeabi_dsub+0x38a>
 800276c:	e0a2      	b.n	80028b4 <__aeabi_dsub+0x4d0>
 800276e:	4640      	mov	r0, r8
 8002770:	2800      	cmp	r0, #0
 8002772:	d000      	beq.n	8002776 <__aeabi_dsub+0x392>
 8002774:	e101      	b.n	800297a <__aeabi_dsub+0x596>
 8002776:	4660      	mov	r0, ip
 8002778:	4318      	orrs	r0, r3
 800277a:	d100      	bne.n	800277e <__aeabi_dsub+0x39a>
 800277c:	e15e      	b.n	8002a3c <__aeabi_dsub+0x658>
 800277e:	0008      	movs	r0, r1
 8002780:	4338      	orrs	r0, r7
 8002782:	d000      	beq.n	8002786 <__aeabi_dsub+0x3a2>
 8002784:	e15f      	b.n	8002a46 <__aeabi_dsub+0x662>
 8002786:	4661      	mov	r1, ip
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	0749      	lsls	r1, r1, #29
 800278c:	430b      	orrs	r3, r1
 800278e:	4661      	mov	r1, ip
 8002790:	08cc      	lsrs	r4, r1, #3
 8002792:	e7a2      	b.n	80026da <__aeabi_dsub+0x2f6>
 8002794:	4dc8      	ldr	r5, [pc, #800]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 8002796:	42a8      	cmp	r0, r5
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x3b8>
 800279a:	e0cf      	b.n	800293c <__aeabi_dsub+0x558>
 800279c:	2580      	movs	r5, #128	; 0x80
 800279e:	4664      	mov	r4, ip
 80027a0:	042d      	lsls	r5, r5, #16
 80027a2:	432c      	orrs	r4, r5
 80027a4:	46a4      	mov	ip, r4
 80027a6:	2a38      	cmp	r2, #56	; 0x38
 80027a8:	dc56      	bgt.n	8002858 <__aeabi_dsub+0x474>
 80027aa:	2a1f      	cmp	r2, #31
 80027ac:	dd00      	ble.n	80027b0 <__aeabi_dsub+0x3cc>
 80027ae:	e0d1      	b.n	8002954 <__aeabi_dsub+0x570>
 80027b0:	2520      	movs	r5, #32
 80027b2:	001e      	movs	r6, r3
 80027b4:	1aad      	subs	r5, r5, r2
 80027b6:	4664      	mov	r4, ip
 80027b8:	40ab      	lsls	r3, r5
 80027ba:	40ac      	lsls	r4, r5
 80027bc:	40d6      	lsrs	r6, r2
 80027be:	1e5d      	subs	r5, r3, #1
 80027c0:	41ab      	sbcs	r3, r5
 80027c2:	4334      	orrs	r4, r6
 80027c4:	4323      	orrs	r3, r4
 80027c6:	4664      	mov	r4, ip
 80027c8:	40d4      	lsrs	r4, r2
 80027ca:	1b09      	subs	r1, r1, r4
 80027cc:	e049      	b.n	8002862 <__aeabi_dsub+0x47e>
 80027ce:	4660      	mov	r0, ip
 80027d0:	1bdc      	subs	r4, r3, r7
 80027d2:	1a46      	subs	r6, r0, r1
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	4180      	sbcs	r0, r0
 80027d8:	4240      	negs	r0, r0
 80027da:	4681      	mov	r9, r0
 80027dc:	0030      	movs	r0, r6
 80027de:	464e      	mov	r6, r9
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	4681      	mov	r9, r0
 80027e4:	0200      	lsls	r0, r0, #8
 80027e6:	d476      	bmi.n	80028d6 <__aeabi_dsub+0x4f2>
 80027e8:	464b      	mov	r3, r9
 80027ea:	4323      	orrs	r3, r4
 80027ec:	d000      	beq.n	80027f0 <__aeabi_dsub+0x40c>
 80027ee:	e652      	b.n	8002496 <__aeabi_dsub+0xb2>
 80027f0:	2400      	movs	r4, #0
 80027f2:	2500      	movs	r5, #0
 80027f4:	e771      	b.n	80026da <__aeabi_dsub+0x2f6>
 80027f6:	4339      	orrs	r1, r7
 80027f8:	000c      	movs	r4, r1
 80027fa:	1e62      	subs	r2, r4, #1
 80027fc:	4194      	sbcs	r4, r2
 80027fe:	18e4      	adds	r4, r4, r3
 8002800:	429c      	cmp	r4, r3
 8002802:	419b      	sbcs	r3, r3
 8002804:	425b      	negs	r3, r3
 8002806:	4463      	add	r3, ip
 8002808:	4699      	mov	r9, r3
 800280a:	464b      	mov	r3, r9
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	d400      	bmi.n	8002812 <__aeabi_dsub+0x42e>
 8002810:	e756      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002812:	2301      	movs	r3, #1
 8002814:	469c      	mov	ip, r3
 8002816:	4ba8      	ldr	r3, [pc, #672]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 8002818:	44e0      	add	r8, ip
 800281a:	4598      	cmp	r8, r3
 800281c:	d038      	beq.n	8002890 <__aeabi_dsub+0x4ac>
 800281e:	464b      	mov	r3, r9
 8002820:	48a6      	ldr	r0, [pc, #664]	; (8002abc <__aeabi_dsub+0x6d8>)
 8002822:	2201      	movs	r2, #1
 8002824:	4003      	ands	r3, r0
 8002826:	0018      	movs	r0, r3
 8002828:	0863      	lsrs	r3, r4, #1
 800282a:	4014      	ands	r4, r2
 800282c:	431c      	orrs	r4, r3
 800282e:	07c3      	lsls	r3, r0, #31
 8002830:	431c      	orrs	r4, r3
 8002832:	0843      	lsrs	r3, r0, #1
 8002834:	4699      	mov	r9, r3
 8002836:	e657      	b.n	80024e8 <__aeabi_dsub+0x104>
 8002838:	0010      	movs	r0, r2
 800283a:	000e      	movs	r6, r1
 800283c:	3820      	subs	r0, #32
 800283e:	40c6      	lsrs	r6, r0
 8002840:	2a20      	cmp	r2, #32
 8002842:	d004      	beq.n	800284e <__aeabi_dsub+0x46a>
 8002844:	2040      	movs	r0, #64	; 0x40
 8002846:	1a82      	subs	r2, r0, r2
 8002848:	4091      	lsls	r1, r2
 800284a:	430f      	orrs	r7, r1
 800284c:	46b9      	mov	r9, r7
 800284e:	464f      	mov	r7, r9
 8002850:	1e7a      	subs	r2, r7, #1
 8002852:	4197      	sbcs	r7, r2
 8002854:	4337      	orrs	r7, r6
 8002856:	e60f      	b.n	8002478 <__aeabi_dsub+0x94>
 8002858:	4662      	mov	r2, ip
 800285a:	431a      	orrs	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	4193      	sbcs	r3, r2
 8002862:	1afc      	subs	r4, r7, r3
 8002864:	42a7      	cmp	r7, r4
 8002866:	41bf      	sbcs	r7, r7
 8002868:	427f      	negs	r7, r7
 800286a:	1bcb      	subs	r3, r1, r7
 800286c:	4699      	mov	r9, r3
 800286e:	465d      	mov	r5, fp
 8002870:	4680      	mov	r8, r0
 8002872:	e608      	b.n	8002486 <__aeabi_dsub+0xa2>
 8002874:	4666      	mov	r6, ip
 8002876:	431e      	orrs	r6, r3
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0x498>
 800287a:	e0be      	b.n	80029fa <__aeabi_dsub+0x616>
 800287c:	1e56      	subs	r6, r2, #1
 800287e:	2a01      	cmp	r2, #1
 8002880:	d100      	bne.n	8002884 <__aeabi_dsub+0x4a0>
 8002882:	e109      	b.n	8002a98 <__aeabi_dsub+0x6b4>
 8002884:	4c8c      	ldr	r4, [pc, #560]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 8002886:	42a2      	cmp	r2, r4
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x4a8>
 800288a:	e119      	b.n	8002ac0 <__aeabi_dsub+0x6dc>
 800288c:	0032      	movs	r2, r6
 800288e:	e6c1      	b.n	8002614 <__aeabi_dsub+0x230>
 8002890:	4642      	mov	r2, r8
 8002892:	2400      	movs	r4, #0
 8002894:	2300      	movs	r3, #0
 8002896:	e648      	b.n	800252a <__aeabi_dsub+0x146>
 8002898:	2020      	movs	r0, #32
 800289a:	000c      	movs	r4, r1
 800289c:	1a80      	subs	r0, r0, r2
 800289e:	003e      	movs	r6, r7
 80028a0:	4087      	lsls	r7, r0
 80028a2:	4084      	lsls	r4, r0
 80028a4:	40d6      	lsrs	r6, r2
 80028a6:	1e78      	subs	r0, r7, #1
 80028a8:	4187      	sbcs	r7, r0
 80028aa:	40d1      	lsrs	r1, r2
 80028ac:	4334      	orrs	r4, r6
 80028ae:	433c      	orrs	r4, r7
 80028b0:	448c      	add	ip, r1
 80028b2:	e7a4      	b.n	80027fe <__aeabi_dsub+0x41a>
 80028b4:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 80028b6:	4290      	cmp	r0, r2
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x4d8>
 80028ba:	e0e9      	b.n	8002a90 <__aeabi_dsub+0x6ac>
 80028bc:	19df      	adds	r7, r3, r7
 80028be:	429f      	cmp	r7, r3
 80028c0:	419b      	sbcs	r3, r3
 80028c2:	4461      	add	r1, ip
 80028c4:	425b      	negs	r3, r3
 80028c6:	18c9      	adds	r1, r1, r3
 80028c8:	07cc      	lsls	r4, r1, #31
 80028ca:	087f      	lsrs	r7, r7, #1
 80028cc:	084b      	lsrs	r3, r1, #1
 80028ce:	4699      	mov	r9, r3
 80028d0:	4680      	mov	r8, r0
 80028d2:	433c      	orrs	r4, r7
 80028d4:	e6f4      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 80028d6:	1afc      	subs	r4, r7, r3
 80028d8:	42a7      	cmp	r7, r4
 80028da:	41bf      	sbcs	r7, r7
 80028dc:	4663      	mov	r3, ip
 80028de:	427f      	negs	r7, r7
 80028e0:	1ac9      	subs	r1, r1, r3
 80028e2:	1bcb      	subs	r3, r1, r7
 80028e4:	4699      	mov	r9, r3
 80028e6:	465d      	mov	r5, fp
 80028e8:	e5d5      	b.n	8002496 <__aeabi_dsub+0xb2>
 80028ea:	08ff      	lsrs	r7, r7, #3
 80028ec:	074b      	lsls	r3, r1, #29
 80028ee:	465d      	mov	r5, fp
 80028f0:	433b      	orrs	r3, r7
 80028f2:	08cc      	lsrs	r4, r1, #3
 80028f4:	e6ee      	b.n	80026d4 <__aeabi_dsub+0x2f0>
 80028f6:	4662      	mov	r2, ip
 80028f8:	431a      	orrs	r2, r3
 80028fa:	d000      	beq.n	80028fe <__aeabi_dsub+0x51a>
 80028fc:	e082      	b.n	8002a04 <__aeabi_dsub+0x620>
 80028fe:	000b      	movs	r3, r1
 8002900:	433b      	orrs	r3, r7
 8002902:	d11b      	bne.n	800293c <__aeabi_dsub+0x558>
 8002904:	2480      	movs	r4, #128	; 0x80
 8002906:	2500      	movs	r5, #0
 8002908:	0324      	lsls	r4, r4, #12
 800290a:	e6f9      	b.n	8002700 <__aeabi_dsub+0x31c>
 800290c:	19dc      	adds	r4, r3, r7
 800290e:	429c      	cmp	r4, r3
 8002910:	419b      	sbcs	r3, r3
 8002912:	4461      	add	r1, ip
 8002914:	4689      	mov	r9, r1
 8002916:	425b      	negs	r3, r3
 8002918:	4499      	add	r9, r3
 800291a:	464b      	mov	r3, r9
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	d444      	bmi.n	80029aa <__aeabi_dsub+0x5c6>
 8002920:	2301      	movs	r3, #1
 8002922:	4698      	mov	r8, r3
 8002924:	e6cc      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002926:	1bdc      	subs	r4, r3, r7
 8002928:	4662      	mov	r2, ip
 800292a:	42a3      	cmp	r3, r4
 800292c:	419b      	sbcs	r3, r3
 800292e:	1a51      	subs	r1, r2, r1
 8002930:	425b      	negs	r3, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	4699      	mov	r9, r3
 8002936:	2301      	movs	r3, #1
 8002938:	4698      	mov	r8, r3
 800293a:	e5a4      	b.n	8002486 <__aeabi_dsub+0xa2>
 800293c:	08ff      	lsrs	r7, r7, #3
 800293e:	074b      	lsls	r3, r1, #29
 8002940:	465d      	mov	r5, fp
 8002942:	433b      	orrs	r3, r7
 8002944:	08cc      	lsrs	r4, r1, #3
 8002946:	e6d7      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002948:	4662      	mov	r2, ip
 800294a:	431a      	orrs	r2, r3
 800294c:	0014      	movs	r4, r2
 800294e:	1e63      	subs	r3, r4, #1
 8002950:	419c      	sbcs	r4, r3
 8002952:	e679      	b.n	8002648 <__aeabi_dsub+0x264>
 8002954:	0015      	movs	r5, r2
 8002956:	4664      	mov	r4, ip
 8002958:	3d20      	subs	r5, #32
 800295a:	40ec      	lsrs	r4, r5
 800295c:	46a0      	mov	r8, r4
 800295e:	2a20      	cmp	r2, #32
 8002960:	d005      	beq.n	800296e <__aeabi_dsub+0x58a>
 8002962:	2540      	movs	r5, #64	; 0x40
 8002964:	4664      	mov	r4, ip
 8002966:	1aaa      	subs	r2, r5, r2
 8002968:	4094      	lsls	r4, r2
 800296a:	4323      	orrs	r3, r4
 800296c:	469a      	mov	sl, r3
 800296e:	4654      	mov	r4, sl
 8002970:	1e63      	subs	r3, r4, #1
 8002972:	419c      	sbcs	r4, r3
 8002974:	4643      	mov	r3, r8
 8002976:	4323      	orrs	r3, r4
 8002978:	e773      	b.n	8002862 <__aeabi_dsub+0x47e>
 800297a:	4662      	mov	r2, ip
 800297c:	431a      	orrs	r2, r3
 800297e:	d023      	beq.n	80029c8 <__aeabi_dsub+0x5e4>
 8002980:	000a      	movs	r2, r1
 8002982:	433a      	orrs	r2, r7
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x5a4>
 8002986:	e0a0      	b.n	8002aca <__aeabi_dsub+0x6e6>
 8002988:	4662      	mov	r2, ip
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	0752      	lsls	r2, r2, #29
 800298e:	4313      	orrs	r3, r2
 8002990:	4662      	mov	r2, ip
 8002992:	08d4      	lsrs	r4, r2, #3
 8002994:	e6b0      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002996:	000b      	movs	r3, r1
 8002998:	433b      	orrs	r3, r7
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x5ba>
 800299c:	e728      	b.n	80027f0 <__aeabi_dsub+0x40c>
 800299e:	08ff      	lsrs	r7, r7, #3
 80029a0:	074b      	lsls	r3, r1, #29
 80029a2:	465d      	mov	r5, fp
 80029a4:	433b      	orrs	r3, r7
 80029a6:	08cc      	lsrs	r4, r1, #3
 80029a8:	e697      	b.n	80026da <__aeabi_dsub+0x2f6>
 80029aa:	2302      	movs	r3, #2
 80029ac:	4698      	mov	r8, r3
 80029ae:	e736      	b.n	800281e <__aeabi_dsub+0x43a>
 80029b0:	1afc      	subs	r4, r7, r3
 80029b2:	42a7      	cmp	r7, r4
 80029b4:	41bf      	sbcs	r7, r7
 80029b6:	4663      	mov	r3, ip
 80029b8:	427f      	negs	r7, r7
 80029ba:	1ac9      	subs	r1, r1, r3
 80029bc:	1bcb      	subs	r3, r1, r7
 80029be:	4699      	mov	r9, r3
 80029c0:	2301      	movs	r3, #1
 80029c2:	465d      	mov	r5, fp
 80029c4:	4698      	mov	r8, r3
 80029c6:	e55e      	b.n	8002486 <__aeabi_dsub+0xa2>
 80029c8:	074b      	lsls	r3, r1, #29
 80029ca:	08ff      	lsrs	r7, r7, #3
 80029cc:	433b      	orrs	r3, r7
 80029ce:	08cc      	lsrs	r4, r1, #3
 80029d0:	e692      	b.n	80026f8 <__aeabi_dsub+0x314>
 80029d2:	1bdc      	subs	r4, r3, r7
 80029d4:	4660      	mov	r0, ip
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	41b6      	sbcs	r6, r6
 80029da:	1a40      	subs	r0, r0, r1
 80029dc:	4276      	negs	r6, r6
 80029de:	1b80      	subs	r0, r0, r6
 80029e0:	4681      	mov	r9, r0
 80029e2:	0200      	lsls	r0, r0, #8
 80029e4:	d560      	bpl.n	8002aa8 <__aeabi_dsub+0x6c4>
 80029e6:	1afc      	subs	r4, r7, r3
 80029e8:	42a7      	cmp	r7, r4
 80029ea:	41bf      	sbcs	r7, r7
 80029ec:	4663      	mov	r3, ip
 80029ee:	427f      	negs	r7, r7
 80029f0:	1ac9      	subs	r1, r1, r3
 80029f2:	1bcb      	subs	r3, r1, r7
 80029f4:	4699      	mov	r9, r3
 80029f6:	465d      	mov	r5, fp
 80029f8:	e576      	b.n	80024e8 <__aeabi_dsub+0x104>
 80029fa:	08ff      	lsrs	r7, r7, #3
 80029fc:	074b      	lsls	r3, r1, #29
 80029fe:	433b      	orrs	r3, r7
 8002a00:	08cc      	lsrs	r4, r1, #3
 8002a02:	e667      	b.n	80026d4 <__aeabi_dsub+0x2f0>
 8002a04:	000a      	movs	r2, r1
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	433a      	orrs	r2, r7
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x62a>
 8002a0c:	e66f      	b.n	80026ee <__aeabi_dsub+0x30a>
 8002a0e:	4662      	mov	r2, ip
 8002a10:	0752      	lsls	r2, r2, #29
 8002a12:	4313      	orrs	r3, r2
 8002a14:	4662      	mov	r2, ip
 8002a16:	08d4      	lsrs	r4, r2, #3
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0312      	lsls	r2, r2, #12
 8002a1c:	4214      	tst	r4, r2
 8002a1e:	d007      	beq.n	8002a30 <__aeabi_dsub+0x64c>
 8002a20:	08c8      	lsrs	r0, r1, #3
 8002a22:	4210      	tst	r0, r2
 8002a24:	d104      	bne.n	8002a30 <__aeabi_dsub+0x64c>
 8002a26:	465d      	mov	r5, fp
 8002a28:	0004      	movs	r4, r0
 8002a2a:	08fb      	lsrs	r3, r7, #3
 8002a2c:	0749      	lsls	r1, r1, #29
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	0f5a      	lsrs	r2, r3, #29
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	0752      	lsls	r2, r2, #29
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	e65d      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002a3c:	074b      	lsls	r3, r1, #29
 8002a3e:	08ff      	lsrs	r7, r7, #3
 8002a40:	433b      	orrs	r3, r7
 8002a42:	08cc      	lsrs	r4, r1, #3
 8002a44:	e649      	b.n	80026da <__aeabi_dsub+0x2f6>
 8002a46:	19dc      	adds	r4, r3, r7
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	419b      	sbcs	r3, r3
 8002a4c:	4461      	add	r1, ip
 8002a4e:	4689      	mov	r9, r1
 8002a50:	425b      	negs	r3, r3
 8002a52:	4499      	add	r9, r3
 8002a54:	464b      	mov	r3, r9
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	d400      	bmi.n	8002a5c <__aeabi_dsub+0x678>
 8002a5a:	e631      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002a5c:	464a      	mov	r2, r9
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <__aeabi_dsub+0x6d8>)
 8002a60:	401a      	ands	r2, r3
 8002a62:	2301      	movs	r3, #1
 8002a64:	4691      	mov	r9, r2
 8002a66:	4698      	mov	r8, r3
 8002a68:	e62a      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002a6a:	0016      	movs	r6, r2
 8002a6c:	4664      	mov	r4, ip
 8002a6e:	3e20      	subs	r6, #32
 8002a70:	40f4      	lsrs	r4, r6
 8002a72:	46a0      	mov	r8, r4
 8002a74:	2a20      	cmp	r2, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x6a0>
 8002a78:	2640      	movs	r6, #64	; 0x40
 8002a7a:	4664      	mov	r4, ip
 8002a7c:	1ab2      	subs	r2, r6, r2
 8002a7e:	4094      	lsls	r4, r2
 8002a80:	4323      	orrs	r3, r4
 8002a82:	469a      	mov	sl, r3
 8002a84:	4654      	mov	r4, sl
 8002a86:	1e63      	subs	r3, r4, #1
 8002a88:	419c      	sbcs	r4, r3
 8002a8a:	4643      	mov	r3, r8
 8002a8c:	431c      	orrs	r4, r3
 8002a8e:	e5db      	b.n	8002648 <__aeabi_dsub+0x264>
 8002a90:	0002      	movs	r2, r0
 8002a92:	2400      	movs	r4, #0
 8002a94:	2300      	movs	r3, #0
 8002a96:	e548      	b.n	800252a <__aeabi_dsub+0x146>
 8002a98:	19dc      	adds	r4, r3, r7
 8002a9a:	42bc      	cmp	r4, r7
 8002a9c:	41bf      	sbcs	r7, r7
 8002a9e:	4461      	add	r1, ip
 8002aa0:	4689      	mov	r9, r1
 8002aa2:	427f      	negs	r7, r7
 8002aa4:	44b9      	add	r9, r7
 8002aa6:	e738      	b.n	800291a <__aeabi_dsub+0x536>
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	4323      	orrs	r3, r4
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x6cc>
 8002aae:	e69f      	b.n	80027f0 <__aeabi_dsub+0x40c>
 8002ab0:	e606      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	000007fe 	.word	0x000007fe
 8002ab8:	000007ff 	.word	0x000007ff
 8002abc:	ff7fffff 	.word	0xff7fffff
 8002ac0:	08ff      	lsrs	r7, r7, #3
 8002ac2:	074b      	lsls	r3, r1, #29
 8002ac4:	433b      	orrs	r3, r7
 8002ac6:	08cc      	lsrs	r4, r1, #3
 8002ac8:	e616      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002aca:	4662      	mov	r2, ip
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	0752      	lsls	r2, r2, #29
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	4662      	mov	r2, ip
 8002ad4:	08d4      	lsrs	r4, r2, #3
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	0312      	lsls	r2, r2, #12
 8002ada:	4214      	tst	r4, r2
 8002adc:	d007      	beq.n	8002aee <__aeabi_dsub+0x70a>
 8002ade:	08c8      	lsrs	r0, r1, #3
 8002ae0:	4210      	tst	r0, r2
 8002ae2:	d104      	bne.n	8002aee <__aeabi_dsub+0x70a>
 8002ae4:	465d      	mov	r5, fp
 8002ae6:	0004      	movs	r4, r0
 8002ae8:	08fb      	lsrs	r3, r7, #3
 8002aea:	0749      	lsls	r1, r1, #29
 8002aec:	430b      	orrs	r3, r1
 8002aee:	0f5a      	lsrs	r2, r3, #29
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	0752      	lsls	r2, r2, #29
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	e5fe      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002afa:	2300      	movs	r3, #0
 8002afc:	4a01      	ldr	r2, [pc, #4]	; (8002b04 <__aeabi_dsub+0x720>)
 8002afe:	001c      	movs	r4, r3
 8002b00:	e513      	b.n	800252a <__aeabi_dsub+0x146>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	000007ff 	.word	0x000007ff

08002b08 <__aeabi_d2iz>:
 8002b08:	000a      	movs	r2, r1
 8002b0a:	b530      	push	{r4, r5, lr}
 8002b0c:	4c13      	ldr	r4, [pc, #76]	; (8002b5c <__aeabi_d2iz+0x54>)
 8002b0e:	0053      	lsls	r3, r2, #1
 8002b10:	0309      	lsls	r1, r1, #12
 8002b12:	0005      	movs	r5, r0
 8002b14:	0b09      	lsrs	r1, r1, #12
 8002b16:	2000      	movs	r0, #0
 8002b18:	0d5b      	lsrs	r3, r3, #21
 8002b1a:	0fd2      	lsrs	r2, r2, #31
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	dd04      	ble.n	8002b2a <__aeabi_d2iz+0x22>
 8002b20:	480f      	ldr	r0, [pc, #60]	; (8002b60 <__aeabi_d2iz+0x58>)
 8002b22:	4283      	cmp	r3, r0
 8002b24:	dd02      	ble.n	8002b2c <__aeabi_d2iz+0x24>
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <__aeabi_d2iz+0x5c>)
 8002b28:	18d0      	adds	r0, r2, r3
 8002b2a:	bd30      	pop	{r4, r5, pc}
 8002b2c:	2080      	movs	r0, #128	; 0x80
 8002b2e:	0340      	lsls	r0, r0, #13
 8002b30:	4301      	orrs	r1, r0
 8002b32:	480d      	ldr	r0, [pc, #52]	; (8002b68 <__aeabi_d2iz+0x60>)
 8002b34:	1ac0      	subs	r0, r0, r3
 8002b36:	281f      	cmp	r0, #31
 8002b38:	dd08      	ble.n	8002b4c <__aeabi_d2iz+0x44>
 8002b3a:	480c      	ldr	r0, [pc, #48]	; (8002b6c <__aeabi_d2iz+0x64>)
 8002b3c:	1ac3      	subs	r3, r0, r3
 8002b3e:	40d9      	lsrs	r1, r3
 8002b40:	000b      	movs	r3, r1
 8002b42:	4258      	negs	r0, r3
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d1f0      	bne.n	8002b2a <__aeabi_d2iz+0x22>
 8002b48:	0018      	movs	r0, r3
 8002b4a:	e7ee      	b.n	8002b2a <__aeabi_d2iz+0x22>
 8002b4c:	4c08      	ldr	r4, [pc, #32]	; (8002b70 <__aeabi_d2iz+0x68>)
 8002b4e:	40c5      	lsrs	r5, r0
 8002b50:	46a4      	mov	ip, r4
 8002b52:	4463      	add	r3, ip
 8002b54:	4099      	lsls	r1, r3
 8002b56:	000b      	movs	r3, r1
 8002b58:	432b      	orrs	r3, r5
 8002b5a:	e7f2      	b.n	8002b42 <__aeabi_d2iz+0x3a>
 8002b5c:	000003fe 	.word	0x000003fe
 8002b60:	0000041d 	.word	0x0000041d
 8002b64:	7fffffff 	.word	0x7fffffff
 8002b68:	00000433 	.word	0x00000433
 8002b6c:	00000413 	.word	0x00000413
 8002b70:	fffffbed 	.word	0xfffffbed

08002b74 <__aeabi_i2d>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d016      	beq.n	8002ba8 <__aeabi_i2d+0x34>
 8002b7a:	17c3      	asrs	r3, r0, #31
 8002b7c:	18c5      	adds	r5, r0, r3
 8002b7e:	405d      	eors	r5, r3
 8002b80:	0fc4      	lsrs	r4, r0, #31
 8002b82:	0028      	movs	r0, r5
 8002b84:	f000 f894 	bl	8002cb0 <__clzsi2>
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <__aeabi_i2d+0x5c>)
 8002b8a:	1a12      	subs	r2, r2, r0
 8002b8c:	280a      	cmp	r0, #10
 8002b8e:	dc16      	bgt.n	8002bbe <__aeabi_i2d+0x4a>
 8002b90:	0003      	movs	r3, r0
 8002b92:	002e      	movs	r6, r5
 8002b94:	3315      	adds	r3, #21
 8002b96:	409e      	lsls	r6, r3
 8002b98:	230b      	movs	r3, #11
 8002b9a:	1a18      	subs	r0, r3, r0
 8002b9c:	40c5      	lsrs	r5, r0
 8002b9e:	0552      	lsls	r2, r2, #21
 8002ba0:	032d      	lsls	r5, r5, #12
 8002ba2:	0b2d      	lsrs	r5, r5, #12
 8002ba4:	0d53      	lsrs	r3, r2, #21
 8002ba6:	e003      	b.n	8002bb0 <__aeabi_i2d+0x3c>
 8002ba8:	2400      	movs	r4, #0
 8002baa:	2300      	movs	r3, #0
 8002bac:	2500      	movs	r5, #0
 8002bae:	2600      	movs	r6, #0
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	432b      	orrs	r3, r5
 8002bb4:	07e4      	lsls	r4, r4, #31
 8002bb6:	4323      	orrs	r3, r4
 8002bb8:	0030      	movs	r0, r6
 8002bba:	0019      	movs	r1, r3
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	380b      	subs	r0, #11
 8002bc0:	4085      	lsls	r5, r0
 8002bc2:	0552      	lsls	r2, r2, #21
 8002bc4:	032d      	lsls	r5, r5, #12
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	0b2d      	lsrs	r5, r5, #12
 8002bca:	0d53      	lsrs	r3, r2, #21
 8002bcc:	e7f0      	b.n	8002bb0 <__aeabi_i2d+0x3c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	0000041e 	.word	0x0000041e

08002bd4 <__aeabi_ui2d>:
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	1e04      	subs	r4, r0, #0
 8002bd8:	d010      	beq.n	8002bfc <__aeabi_ui2d+0x28>
 8002bda:	f000 f869 	bl	8002cb0 <__clzsi2>
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <__aeabi_ui2d+0x48>)
 8002be0:	1a1b      	subs	r3, r3, r0
 8002be2:	280a      	cmp	r0, #10
 8002be4:	dc11      	bgt.n	8002c0a <__aeabi_ui2d+0x36>
 8002be6:	220b      	movs	r2, #11
 8002be8:	0021      	movs	r1, r4
 8002bea:	1a12      	subs	r2, r2, r0
 8002bec:	40d1      	lsrs	r1, r2
 8002bee:	3015      	adds	r0, #21
 8002bf0:	030a      	lsls	r2, r1, #12
 8002bf2:	055b      	lsls	r3, r3, #21
 8002bf4:	4084      	lsls	r4, r0
 8002bf6:	0b12      	lsrs	r2, r2, #12
 8002bf8:	0d5b      	lsrs	r3, r3, #21
 8002bfa:	e001      	b.n	8002c00 <__aeabi_ui2d+0x2c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	4313      	orrs	r3, r2
 8002c04:	0020      	movs	r0, r4
 8002c06:	0019      	movs	r1, r3
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	0022      	movs	r2, r4
 8002c0c:	380b      	subs	r0, #11
 8002c0e:	4082      	lsls	r2, r0
 8002c10:	055b      	lsls	r3, r3, #21
 8002c12:	0312      	lsls	r2, r2, #12
 8002c14:	2400      	movs	r4, #0
 8002c16:	0b12      	lsrs	r2, r2, #12
 8002c18:	0d5b      	lsrs	r3, r3, #21
 8002c1a:	e7f1      	b.n	8002c00 <__aeabi_ui2d+0x2c>
 8002c1c:	0000041e 	.word	0x0000041e

08002c20 <__aeabi_f2d>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	0043      	lsls	r3, r0, #1
 8002c24:	0246      	lsls	r6, r0, #9
 8002c26:	0fc4      	lsrs	r4, r0, #31
 8002c28:	20fe      	movs	r0, #254	; 0xfe
 8002c2a:	0e1b      	lsrs	r3, r3, #24
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	0a75      	lsrs	r5, r6, #9
 8002c30:	4208      	tst	r0, r1
 8002c32:	d00c      	beq.n	8002c4e <__aeabi_f2d+0x2e>
 8002c34:	22e0      	movs	r2, #224	; 0xe0
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4694      	mov	ip, r2
 8002c3a:	076d      	lsls	r5, r5, #29
 8002c3c:	0b36      	lsrs	r6, r6, #12
 8002c3e:	4463      	add	r3, ip
 8002c40:	051b      	lsls	r3, r3, #20
 8002c42:	4333      	orrs	r3, r6
 8002c44:	07e4      	lsls	r4, r4, #31
 8002c46:	4323      	orrs	r3, r4
 8002c48:	0028      	movs	r0, r5
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <__aeabi_f2d+0x5c>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d01b      	beq.n	8002c8e <__aeabi_f2d+0x6e>
 8002c56:	0028      	movs	r0, r5
 8002c58:	f000 f82a 	bl	8002cb0 <__clzsi2>
 8002c5c:	280a      	cmp	r0, #10
 8002c5e:	dc1c      	bgt.n	8002c9a <__aeabi_f2d+0x7a>
 8002c60:	230b      	movs	r3, #11
 8002c62:	002e      	movs	r6, r5
 8002c64:	1a1b      	subs	r3, r3, r0
 8002c66:	40de      	lsrs	r6, r3
 8002c68:	0003      	movs	r3, r0
 8002c6a:	3315      	adds	r3, #21
 8002c6c:	409d      	lsls	r5, r3
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <__aeabi_f2d+0x88>)
 8002c70:	0336      	lsls	r6, r6, #12
 8002c72:	1a12      	subs	r2, r2, r0
 8002c74:	0552      	lsls	r2, r2, #21
 8002c76:	0b36      	lsrs	r6, r6, #12
 8002c78:	0d53      	lsrs	r3, r2, #21
 8002c7a:	e7e1      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c7c:	2d00      	cmp	r5, #0
 8002c7e:	d009      	beq.n	8002c94 <__aeabi_f2d+0x74>
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0b36      	lsrs	r6, r6, #12
 8002c84:	0312      	lsls	r2, r2, #12
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <__aeabi_f2d+0x8c>)
 8002c88:	076d      	lsls	r5, r5, #29
 8002c8a:	4316      	orrs	r6, r2
 8002c8c:	e7d8      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2600      	movs	r6, #0
 8002c92:	e7d5      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c94:	2600      	movs	r6, #0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <__aeabi_f2d+0x8c>)
 8002c98:	e7d2      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	3b0b      	subs	r3, #11
 8002c9e:	409d      	lsls	r5, r3
 8002ca0:	002e      	movs	r6, r5
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	e7e3      	b.n	8002c6e <__aeabi_f2d+0x4e>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	00000389 	.word	0x00000389
 8002cac:	000007ff 	.word	0x000007ff

08002cb0 <__clzsi2>:
 8002cb0:	211c      	movs	r1, #28
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	4298      	cmp	r0, r3
 8002cb8:	d301      	bcc.n	8002cbe <__clzsi2+0xe>
 8002cba:	0c00      	lsrs	r0, r0, #16
 8002cbc:	3910      	subs	r1, #16
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	d301      	bcc.n	8002cc8 <__clzsi2+0x18>
 8002cc4:	0a00      	lsrs	r0, r0, #8
 8002cc6:	3908      	subs	r1, #8
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	4298      	cmp	r0, r3
 8002ccc:	d301      	bcc.n	8002cd2 <__clzsi2+0x22>
 8002cce:	0900      	lsrs	r0, r0, #4
 8002cd0:	3904      	subs	r1, #4
 8002cd2:	a202      	add	r2, pc, #8	; (adr r2, 8002cdc <__clzsi2+0x2c>)
 8002cd4:	5c10      	ldrb	r0, [r2, r0]
 8002cd6:	1840      	adds	r0, r0, r1
 8002cd8:	4770      	bx	lr
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	02020304 	.word	0x02020304
 8002ce0:	01010101 	.word	0x01010101
	...

08002cec <__clzdi2>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	2900      	cmp	r1, #0
 8002cf0:	d103      	bne.n	8002cfa <__clzdi2+0xe>
 8002cf2:	f7ff ffdd 	bl	8002cb0 <__clzsi2>
 8002cf6:	3020      	adds	r0, #32
 8002cf8:	e002      	b.n	8002d00 <__clzdi2+0x14>
 8002cfa:	0008      	movs	r0, r1
 8002cfc:	f7ff ffd8 	bl	8002cb0 <__clzsi2>
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)

08002d04 <null_ptr_check>:
/*****************************INTERNAL APIs***********************************************/
static int8_t null_ptr_check(const struct bma400_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d00a      	beq.n	8002d1e <null_ptr_check+0x1a>
 8002d08:	68c3      	ldr	r3, [r0, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <null_ptr_check+0x1a>
 8002d0e:	6903      	ldr	r3, [r0, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <null_ptr_check+0x1a>
 8002d14:	6940      	ldr	r0, [r0, #20]
 8002d16:	4243      	negs	r3, r0
 8002d18:	4158      	adcs	r0, r3
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8002d1a:	4240      	negs	r0, r0
        /* Device structure is fine */
        rslt = BMA400_OK;
    }

    return rslt;
}
 8002d1c:	4770      	bx	lr
        rslt = BMA400_E_NULL_PTR;
 8002d1e:	2001      	movs	r0, #1
 8002d20:	e7fb      	b.n	8002d1a <null_ptr_check+0x16>

08002d22 <check_mapped_interrupts>:
    }
}

static void check_mapped_interrupts(uint8_t int_1_map, uint8_t int_2_map, enum bma400_int_chan *int_map)
{
    if ((int_1_map == BMA400_ENABLE) && (int_2_map == BMA400_DISABLE))
 8002d22:	2801      	cmp	r0, #1
 8002d24:	d103      	bne.n	8002d2e <check_mapped_interrupts+0xc>
 8002d26:	2900      	cmp	r1, #0
 8002d28:	d107      	bne.n	8002d3a <check_mapped_interrupts+0x18>
    {
        /* INT 1 mapped INT 2 not mapped */
        *int_map = BMA400_INT_CHANNEL_1;
 8002d2a:	7010      	strb	r0, [r2, #0]
    if ((int_1_map == BMA400_DISABLE) && (int_2_map == BMA400_DISABLE))
    {
        /* INT 1 ,INT 2 not mapped */
        *int_map = BMA400_UNMAP_INT_PIN;
    }
}
 8002d2c:	4770      	bx	lr
        *int_map = BMA400_UNMAP_INT_PIN;
 8002d2e:	2300      	movs	r3, #0
    if ((int_1_map == BMA400_DISABLE) && (int_2_map == BMA400_ENABLE))
 8002d30:	2901      	cmp	r1, #1
 8002d32:	d100      	bne.n	8002d36 <check_mapped_interrupts+0x14>
        *int_map = BMA400_INT_CHANNEL_2;
 8002d34:	2302      	movs	r3, #2
        *int_map = BMA400_UNMAP_INT_PIN;
 8002d36:	7013      	strb	r3, [r2, #0]
 8002d38:	e7f8      	b.n	8002d2c <check_mapped_interrupts+0xa>
        *int_map = BMA400_MAP_BOTH_INT_PINS;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e7fb      	b.n	8002d36 <check_mapped_interrupts+0x14>

08002d3e <bma400_set_regs>:
{
 8002d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d40:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 8002d42:	0018      	movs	r0, r3
{
 8002d44:	0016      	movs	r6, r2
 8002d46:	001f      	movs	r7, r3
 8002d48:	9101      	str	r1, [sp, #4]
    rslt = null_ptr_check(dev);
 8002d4a:	f7ff ffdb 	bl	8002d04 <null_ptr_check>
 8002d4e:	1e04      	subs	r4, r0, #0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8002d50:	d121      	bne.n	8002d96 <bma400_set_regs+0x58>
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01e      	beq.n	8002d96 <bma400_set_regs+0x58>
        if (len == 1)
 8002d58:	2e01      	cmp	r6, #1
 8002d5a:	d109      	bne.n	8002d70 <bma400_set_regs+0x32>
            rslt = dev->write(dev->dev_id, reg_addr, reg_data, len);
 8002d5c:	7878      	ldrb	r0, [r7, #1]
 8002d5e:	0033      	movs	r3, r6
 8002d60:	0029      	movs	r1, r5
 8002d62:	693f      	ldr	r7, [r7, #16]
 8002d64:	9a01      	ldr	r2, [sp, #4]
 8002d66:	47b8      	blx	r7
            if (rslt != BMA400_OK)
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d117      	bne.n	8002d9c <bma400_set_regs+0x5e>
}
 8002d6c:	0020      	movs	r0, r4
 8002d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (len > 1)
 8002d70:	2e01      	cmp	r6, #1
 8002d72:	d9fb      	bls.n	8002d6c <bma400_set_regs+0x2e>
 8002d74:	1976      	adds	r6, r6, r5
 8002d76:	b2f6      	uxtb	r6, r6
                rslt = dev->write(dev->dev_id, reg_addr, &reg_data[count], 1);
 8002d78:	2301      	movs	r3, #1
 8002d7a:	0029      	movs	r1, r5
 8002d7c:	693c      	ldr	r4, [r7, #16]
 8002d7e:	7878      	ldrb	r0, [r7, #1]
 8002d80:	9a01      	ldr	r2, [sp, #4]
 8002d82:	47a0      	blx	r4
            for (count = 0; count < len; count++)
 8002d84:	9b01      	ldr	r3, [sp, #4]
                reg_addr++;
 8002d86:	3501      	adds	r5, #1
            for (count = 0; count < len; count++)
 8002d88:	3301      	adds	r3, #1
                reg_addr++;
 8002d8a:	b2ed      	uxtb	r5, r5
                rslt = dev->write(dev->dev_id, reg_addr, &reg_data[count], 1);
 8002d8c:	0004      	movs	r4, r0
            for (count = 0; count < len; count++)
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	42b5      	cmp	r5, r6
 8002d92:	d1f1      	bne.n	8002d78 <bma400_set_regs+0x3a>
 8002d94:	e7ea      	b.n	8002d6c <bma400_set_regs+0x2e>
        rslt = BMA400_E_NULL_PTR;
 8002d96:	2401      	movs	r4, #1
                rslt = BMA400_E_COM_FAIL;
 8002d98:	4264      	negs	r4, r4
 8002d9a:	e7e7      	b.n	8002d6c <bma400_set_regs+0x2e>
 8002d9c:	2402      	movs	r4, #2
 8002d9e:	e7fb      	b.n	8002d98 <bma400_set_regs+0x5a>

08002da0 <bma400_get_regs>:
{
 8002da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
    uint16_t temp_len = len + dev->dummy_byte;
 8002da6:	60fa      	str	r2, [r7, #12]
{
 8002da8:	6079      	str	r1, [r7, #4]
 8002daa:	001c      	movs	r4, r3
    uint16_t temp_len = len + dev->dummy_byte;
 8002dac:	7a1b      	ldrb	r3, [r3, #8]
{
 8002dae:	0005      	movs	r5, r0
    uint16_t temp_len = len + dev->dummy_byte;
 8002db0:	18d3      	adds	r3, r2, r3
    uint8_t temp_buff[temp_len];
 8002db2:	466a      	mov	r2, sp
    uint16_t temp_len = len + dev->dummy_byte;
 8002db4:	60bb      	str	r3, [r7, #8]
    uint8_t temp_buff[temp_len];
 8002db6:	3307      	adds	r3, #7
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	469d      	mov	sp, r3
    rslt = null_ptr_check(dev);
 8002dc0:	0020      	movs	r0, r4
    uint8_t temp_buff[temp_len];
 8002dc2:	466e      	mov	r6, sp
    rslt = null_ptr_check(dev);
 8002dc4:	f7ff ff9e 	bl	8002d04 <null_ptr_check>
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d121      	bne.n	8002e10 <bma400_get_regs+0x70>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01e      	beq.n	8002e10 <bma400_get_regs+0x70>
        if (dev->intf != BMA400_I2C_INTF)
 8002dd2:	78a3      	ldrb	r3, [r4, #2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d001      	beq.n	8002ddc <bma400_get_regs+0x3c>
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	431d      	orrs	r5, r3
        rslt = dev->read(dev->dev_id, reg_addr, temp_buff, temp_len);
 8002ddc:	0029      	movs	r1, r5
 8002dde:	0032      	movs	r2, r6
 8002de0:	7860      	ldrb	r0, [r4, #1]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68e5      	ldr	r5, [r4, #12]
 8002de6:	47a8      	blx	r5
        if (rslt == BMA400_OK)
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d00f      	beq.n	8002e0c <bma400_get_regs+0x6c>
            rslt = BMA400_E_COM_FAIL;
 8002dec:	2002      	movs	r0, #2
        rslt = BMA400_E_NULL_PTR;
 8002dee:	4240      	negs	r0, r0
 8002df0:	e009      	b.n	8002e06 <bma400_get_regs+0x66>
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8002df2:	7a22      	ldrb	r2, [r4, #8]
 8002df4:	18f1      	adds	r1, r6, r3
 8002df6:	5c8a      	ldrb	r2, [r1, r2]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	54ca      	strb	r2, [r1, r3]
            for (index = 0; index < len; index++)
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4291      	cmp	r1, r2
 8002e04:	d8f5      	bhi.n	8002df2 <bma400_get_regs+0x52>
}
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b005      	add	sp, #20
 8002e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	e7f6      	b.n	8002dfe <bma400_get_regs+0x5e>
        rslt = BMA400_E_NULL_PTR;
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7ec      	b.n	8002dee <bma400_get_regs+0x4e>

08002e14 <bma400_init>:
{
 8002e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t chip_id = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	466a      	mov	r2, sp
{
 8002e1a:	0005      	movs	r5, r0
    uint8_t chip_id = 0;
 8002e1c:	71d3      	strb	r3, [r2, #7]
    rslt = null_ptr_check(dev);
 8002e1e:	f7ff ff71 	bl	8002d04 <null_ptr_check>
 8002e22:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002e24:	d11d      	bne.n	8002e62 <bma400_init+0x4e>
        dev->delay_ms(5);
 8002e26:	696b      	ldr	r3, [r5, #20]
 8002e28:	2005      	movs	r0, #5
 8002e2a:	4798      	blx	r3
        if (dev->intf == BMA400_SPI_INTF)
 8002e2c:	78ab      	ldrb	r3, [r5, #2]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <bma400_init+0x52>
            dev->dummy_byte = 1;
 8002e32:	2201      	movs	r2, #1
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002e34:	4669      	mov	r1, sp
 8002e36:	0020      	movs	r0, r4
 8002e38:	002b      	movs	r3, r5
            dev->dummy_byte = 1;
 8002e3a:	722a      	strb	r2, [r5, #8]
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002e3c:	3107      	adds	r1, #7
 8002e3e:	f7ff ffaf 	bl	8002da0 <bma400_get_regs>
 8002e42:	1e04      	subs	r4, r0, #0
        if (rslt == BMA400_OK)
 8002e44:	d10d      	bne.n	8002e62 <bma400_init+0x4e>
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002e46:	4669      	mov	r1, sp
 8002e48:	002b      	movs	r3, r5
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	3107      	adds	r1, #7
 8002e50:	f7ff ffa6 	bl	8002da0 <bma400_get_regs>
 8002e54:	1e04      	subs	r4, r0, #0
            if (rslt == BMA400_OK)
 8002e56:	d104      	bne.n	8002e62 <bma400_init+0x4e>
                if (chip_id == BMA400_CHIP_ID)
 8002e58:	466b      	mov	r3, sp
 8002e5a:	79db      	ldrb	r3, [r3, #7]
 8002e5c:	2b90      	cmp	r3, #144	; 0x90
 8002e5e:	d104      	bne.n	8002e6a <bma400_init+0x56>
                    dev->chip_id = chip_id;
 8002e60:	702b      	strb	r3, [r5, #0]
}
 8002e62:	0020      	movs	r0, r4
 8002e64:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            dev->dummy_byte = 0;
 8002e66:	722c      	strb	r4, [r5, #8]
        if (rslt == BMA400_OK)
 8002e68:	e7ed      	b.n	8002e46 <bma400_init+0x32>
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8002e6a:	2403      	movs	r4, #3
 8002e6c:	4264      	negs	r4, r4
 8002e6e:	e7f8      	b.n	8002e62 <bma400_init+0x4e>

08002e70 <set_accel_conf>:
{
 8002e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e72:	000e      	movs	r6, r1
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8002e74:	ac01      	add	r4, sp, #4
 8002e76:	2203      	movs	r2, #3
 8002e78:	491d      	ldr	r1, [pc, #116]	; (8002ef0 <set_accel_conf+0x80>)
{
 8002e7a:	0005      	movs	r5, r0
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	f013 f867 	bl	8015f50 <memcpy>
    rslt = bma400_get_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8002e82:	0033      	movs	r3, r6
 8002e84:	2203      	movs	r2, #3
 8002e86:	0021      	movs	r1, r4
 8002e88:	2019      	movs	r0, #25
 8002e8a:	f7ff ff89 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d12c      	bne.n	8002eec <set_accel_conf+0x7c>
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002e92:	227f      	movs	r2, #127	; 0x7f
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8002e94:	2160      	movs	r1, #96	; 0x60
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002e96:	7823      	ldrb	r3, [r4, #0]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8002e98:	3019      	adds	r0, #25
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	796a      	ldrb	r2, [r5, #5]
 8002e9e:	01d2      	lsls	r2, r2, #7
 8002ea0:	4313      	orrs	r3, r2
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8002ea2:	792a      	ldrb	r2, [r5, #4]
 8002ea4:	438b      	bics	r3, r1
 8002ea6:	0152      	lsls	r2, r2, #5
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	7023      	strb	r3, [r4, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8002eae:	233f      	movs	r3, #63	; 0x3f
 8002eb0:	7862      	ldrb	r2, [r4, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8002eb2:	3930      	subs	r1, #48	; 0x30
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	786b      	ldrb	r3, [r5, #1]
 8002eb8:	019b      	lsls	r3, r3, #6
 8002eba:	431a      	orrs	r2, r3
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8002ebc:	78eb      	ldrb	r3, [r5, #3]
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	431a      	orrs	r2, r3
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8002ec6:	782b      	ldrb	r3, [r5, #0]
 8002ec8:	3921      	subs	r1, #33	; 0x21
 8002eca:	400b      	ands	r3, r1
 8002ecc:	438a      	bics	r2, r1
 8002ece:	431a      	orrs	r2, r3
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8002ed0:	78ab      	ldrb	r3, [r5, #2]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8002ed2:	7062      	strb	r2, [r4, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8002ed4:	78a2      	ldrb	r2, [r4, #2]
 8002ed6:	3903      	subs	r1, #3
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	438a      	bics	r2, r1
 8002edc:	400b      	ands	r3, r1
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	70a3      	strb	r3, [r4, #2]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	0033      	movs	r3, r6
 8002ee6:	0021      	movs	r1, r4
 8002ee8:	f7ff ff29 	bl	8002d3e <bma400_set_regs>
}
 8002eec:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	080187a4 	.word	0x080187a4

08002ef4 <bma400_soft_reset>:
{
 8002ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t data = BMA400_SOFT_RESET_CMD;
 8002ef6:	466b      	mov	r3, sp
 8002ef8:	1dde      	adds	r6, r3, #7
 8002efa:	23b6      	movs	r3, #182	; 0xb6
{
 8002efc:	0005      	movs	r5, r0
    uint8_t data = BMA400_SOFT_RESET_CMD;
 8002efe:	7033      	strb	r3, [r6, #0]
    rslt = null_ptr_check(dev);
 8002f00:	f7ff ff00 	bl	8002d04 <null_ptr_check>
 8002f04:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002f06:	d115      	bne.n	8002f34 <bma400_soft_reset+0x40>
        rslt = bma400_set_regs(BMA400_COMMAND_REG_ADDR, &data, 1, dev);
 8002f08:	002b      	movs	r3, r5
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	0031      	movs	r1, r6
 8002f0e:	207e      	movs	r0, #126	; 0x7e
 8002f10:	f7ff ff15 	bl	8002d3e <bma400_set_regs>
        dev->delay_ms(BMA400_SOFT_RESET_DELAY_MS);
 8002f14:	696b      	ldr	r3, [r5, #20]
        rslt = bma400_set_regs(BMA400_COMMAND_REG_ADDR, &data, 1, dev);
 8002f16:	0004      	movs	r4, r0
        dev->delay_ms(BMA400_SOFT_RESET_DELAY_MS);
 8002f18:	2005      	movs	r0, #5
 8002f1a:	4798      	blx	r3
        if ((rslt == BMA400_OK) && (dev->intf == BMA400_SPI_INTF))
 8002f1c:	2c00      	cmp	r4, #0
 8002f1e:	d109      	bne.n	8002f34 <bma400_soft_reset+0x40>
 8002f20:	78ab      	ldrb	r3, [r5, #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <bma400_soft_reset+0x40>
            rslt = bma400_get_regs(0x7F, &data, 1, dev);
 8002f26:	002b      	movs	r3, r5
 8002f28:	2201      	movs	r2, #1
 8002f2a:	0031      	movs	r1, r6
 8002f2c:	207f      	movs	r0, #127	; 0x7f
 8002f2e:	f7ff ff37 	bl	8002da0 <bma400_get_regs>
 8002f32:	0004      	movs	r4, r0
}
 8002f34:	0020      	movs	r0, r4
 8002f36:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08002f38 <bma400_set_power_mode>:
{
 8002f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t reg_data = 0;
 8002f3a:	466b      	mov	r3, sp
 8002f3c:	1dde      	adds	r6, r3, #7
 8002f3e:	2300      	movs	r3, #0
{
 8002f40:	0007      	movs	r7, r0
    rslt = null_ptr_check(dev);
 8002f42:	0008      	movs	r0, r1
{
 8002f44:	000d      	movs	r5, r1
    uint8_t reg_data = 0;
 8002f46:	7033      	strb	r3, [r6, #0]
    rslt = null_ptr_check(dev);
 8002f48:	f7ff fedc 	bl	8002d04 <null_ptr_check>
 8002f4c:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002f4e:	d11a      	bne.n	8002f86 <bma400_set_power_mode+0x4e>
        rslt = bma400_get_regs(BMA400_ACCEL_CONFIG_0_ADDR, &reg_data, 1, dev);
 8002f50:	002b      	movs	r3, r5
 8002f52:	2201      	movs	r2, #1
 8002f54:	0031      	movs	r1, r6
 8002f56:	2019      	movs	r0, #25
 8002f58:	f7ff ff22 	bl	8002da0 <bma400_get_regs>
 8002f5c:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002f5e:	d112      	bne.n	8002f86 <bma400_set_power_mode+0x4e>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8002f60:	2203      	movs	r2, #3
 8002f62:	7833      	ldrb	r3, [r6, #0]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, &reg_data, 1, dev);
 8002f64:	0031      	movs	r1, r6
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8002f66:	4393      	bics	r3, r2
 8002f68:	403a      	ands	r2, r7
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	7033      	strb	r3, [r6, #0]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, &reg_data, 1, dev);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	002b      	movs	r3, r5
 8002f72:	2019      	movs	r0, #25
 8002f74:	f7ff fee3 	bl	8002d3e <bma400_set_regs>
 8002f78:	696b      	ldr	r3, [r5, #20]
 8002f7a:	0004      	movs	r4, r0
            dev->delay_ms(40);
 8002f7c:	2028      	movs	r0, #40	; 0x28
        if (power_mode == BMA400_LOW_POWER_MODE)
 8002f7e:	2f01      	cmp	r7, #1
 8002f80:	d000      	beq.n	8002f84 <bma400_set_power_mode+0x4c>
            dev->delay_ms(10); /* TBC */
 8002f82:	200a      	movs	r0, #10
 8002f84:	4798      	blx	r3
}
 8002f86:	0020      	movs	r0, r4
 8002f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08002f8c <bma400_get_accel_data>:
{
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	0006      	movs	r6, r0
 8002f90:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 8002f92:	0010      	movs	r0, r2
{
 8002f94:	000c      	movs	r4, r1
 8002f96:	0017      	movs	r7, r2
    rslt = null_ptr_check(dev);
 8002f98:	f7ff feb4 	bl	8002d04 <null_ptr_check>
    if ((rslt == BMA400_OK) || (accel != NULL))
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d001      	beq.n	8002fa4 <bma400_get_accel_data+0x18>
 8002fa0:	2c00      	cmp	r4, #0
 8002fa2:	d051      	beq.n	8003048 <bma400_get_accel_data+0xbc>
    uint8_t data_array[9] = { 0 };
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	a802      	add	r0, sp, #8
 8002faa:	ad01      	add	r5, sp, #4
 8002fac:	9101      	str	r1, [sp, #4]
 8002fae:	f012 ffd8 	bl	8015f62 <memset>
    if (data_sel == BMA400_DATA_ONLY)
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	d12b      	bne.n	800300e <bma400_get_accel_data+0x82>
        rslt = bma400_get_regs(BMA400_ACCEL_DATA_ADDR, data_array, 6, dev);
 8002fb6:	003b      	movs	r3, r7
 8002fb8:	2206      	movs	r2, #6
        rslt = bma400_get_regs(BMA400_ACCEL_DATA_ADDR, data_array, 9, dev);
 8002fba:	0029      	movs	r1, r5
 8002fbc:	2004      	movs	r0, #4
 8002fbe:	f7ff feef 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d121      	bne.n	800300a <bma400_get_accel_data+0x7e>
        if (accel->x > 2047)
 8002fc6:	2180      	movs	r1, #128	; 0x80
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002fc8:	786a      	ldrb	r2, [r5, #1]
        lsb = data_array[0];
 8002fca:	782b      	ldrb	r3, [r5, #0]
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002fcc:	0212      	lsls	r2, r2, #8
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	b21b      	sxth	r3, r3
        if (accel->x > 2047)
 8002fd4:	0109      	lsls	r1, r1, #4
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	da1e      	bge.n	8003018 <bma400_get_accel_data+0x8c>
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002fda:	8023      	strh	r3, [r4, #0]
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002fdc:	78ea      	ldrb	r2, [r5, #3]
 8002fde:	78ab      	ldrb	r3, [r5, #2]
 8002fe0:	0212      	lsls	r2, r2, #8
 8002fe2:	4313      	orrs	r3, r2
        if (accel->y > 2047)
 8002fe4:	2280      	movs	r2, #128	; 0x80
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002fe6:	b21b      	sxth	r3, r3
        if (accel->y > 2047)
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	4293      	cmp	r3, r2
 8002fec:	da18      	bge.n	8003020 <bma400_get_accel_data+0x94>
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002fee:	796a      	ldrb	r2, [r5, #5]
            accel->y = accel->y - 4096;
 8002ff0:	8063      	strh	r3, [r4, #2]
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002ff2:	792b      	ldrb	r3, [r5, #4]
 8002ff4:	0212      	lsls	r2, r2, #8
 8002ff6:	4313      	orrs	r3, r2
        if (accel->z > 2047)
 8002ff8:	2280      	movs	r2, #128	; 0x80
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002ffa:	b21b      	sxth	r3, r3
        if (accel->z > 2047)
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	4293      	cmp	r3, r2
 8003000:	da11      	bge.n	8003026 <bma400_get_accel_data+0x9a>
            accel->z = accel->z - 4096;
 8003002:	80a3      	strh	r3, [r4, #4]
        if (data_sel == BMA400_DATA_ONLY)
 8003004:	2e00      	cmp	r6, #0
 8003006:	d111      	bne.n	800302c <bma400_get_accel_data+0xa0>
            accel->sensortime = 0;
 8003008:	60a6      	str	r6, [r4, #8]
}
 800300a:	b005      	add	sp, #20
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 800300e:	2e01      	cmp	r6, #1
 8003010:	d117      	bne.n	8003042 <bma400_get_accel_data+0xb6>
        rslt = bma400_get_regs(BMA400_ACCEL_DATA_ADDR, data_array, 9, dev);
 8003012:	003b      	movs	r3, r7
 8003014:	2209      	movs	r2, #9
 8003016:	e7d0      	b.n	8002fba <bma400_get_accel_data+0x2e>
            accel->x = accel->x - 4096;
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <bma400_get_accel_data+0xc0>)
 800301a:	18d2      	adds	r2, r2, r3
 800301c:	8022      	strh	r2, [r4, #0]
 800301e:	e7dd      	b.n	8002fdc <bma400_get_accel_data+0x50>
            accel->y = accel->y - 4096;
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <bma400_get_accel_data+0xc0>)
 8003022:	189b      	adds	r3, r3, r2
 8003024:	e7e3      	b.n	8002fee <bma400_get_accel_data+0x62>
            accel->z = accel->z - 4096;
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <bma400_get_accel_data+0xc0>)
 8003028:	189b      	adds	r3, r3, r2
 800302a:	e7ea      	b.n	8003002 <bma400_get_accel_data+0x76>
        if (data_sel == BMA400_DATA_SENSOR_TIME)
 800302c:	2e01      	cmp	r6, #1
 800302e:	d1ec      	bne.n	800300a <bma400_get_accel_data+0x7e>
            time_2 = ((uint32_t)data_array[8] << 16);
 8003030:	7a2b      	ldrb	r3, [r5, #8]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8003032:	79aa      	ldrb	r2, [r5, #6]
            time_2 = ((uint32_t)data_array[8] << 16);
 8003034:	041b      	lsls	r3, r3, #16
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8003036:	189b      	adds	r3, r3, r2
            time_1 = ((uint16_t)data_array[7] << 8);
 8003038:	79ea      	ldrb	r2, [r5, #7]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 800303a:	0212      	lsls	r2, r2, #8
 800303c:	189b      	adds	r3, r3, r2
 800303e:	60a3      	str	r3, [r4, #8]
 8003040:	e7e3      	b.n	800300a <bma400_get_accel_data+0x7e>
        rslt = BMA400_E_INVALID_CONFIG;
 8003042:	2004      	movs	r0, #4
        rslt = BMA400_E_NULL_PTR;
 8003044:	4240      	negs	r0, r0
 8003046:	e7e0      	b.n	800300a <bma400_get_accel_data+0x7e>
 8003048:	2001      	movs	r0, #1
 800304a:	e7fb      	b.n	8003044 <bma400_get_accel_data+0xb8>
 800304c:	fffff000 	.word	0xfffff000

08003050 <bma400_set_sensor_conf>:
{
 8003050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003052:	000f      	movs	r7, r1
    uint8_t data_array[3] = { 0 };
 8003054:	49b0      	ldr	r1, [pc, #704]	; (8003318 <bma400_set_sensor_conf+0x2c8>)
{
 8003056:	b087      	sub	sp, #28
 8003058:	0016      	movs	r6, r2
    uint8_t data_array[3] = { 0 };
 800305a:	3103      	adds	r1, #3
 800305c:	2202      	movs	r2, #2
{
 800305e:	0004      	movs	r4, r0
    uint8_t data_array[3] = { 0 };
 8003060:	a802      	add	r0, sp, #8
 8003062:	f012 ff75 	bl	8015f50 <memcpy>
 8003066:	2200      	movs	r2, #0
 8003068:	ab02      	add	r3, sp, #8
    rslt = null_ptr_check(dev);
 800306a:	0030      	movs	r0, r6
    uint8_t data_array[3] = { 0 };
 800306c:	709a      	strb	r2, [r3, #2]
    rslt = null_ptr_check(dev);
 800306e:	f7ff fe49 	bl	8002d04 <null_ptr_check>
 8003072:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003074:	d117      	bne.n	80030a6 <bma400_set_sensor_conf+0x56>
        rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003076:	0033      	movs	r3, r6
 8003078:	2203      	movs	r2, #3
 800307a:	2021      	movs	r0, #33	; 0x21
 800307c:	a902      	add	r1, sp, #8
 800307e:	f7ff fe8f 	bl	8002da0 <bma400_get_regs>
        if (rslt == BMA400_OK)
 8003082:	2800      	cmp	r0, #0
 8003084:	d10e      	bne.n	80030a4 <bma400_set_sensor_conf+0x54>
 8003086:	2114      	movs	r1, #20
 8003088:	434f      	muls	r7, r1
 800308a:	19e3      	adds	r3, r4, r7
 800308c:	9301      	str	r3, [sp, #4]
            for (idx = 0; idx < n_sett; idx++)
 800308e:	9b01      	ldr	r3, [sp, #4]
 8003090:	42a3      	cmp	r3, r4
 8003092:	d10b      	bne.n	80030ac <bma400_set_sensor_conf+0x5c>
            if (rslt == BMA400_OK)
 8003094:	2d00      	cmp	r5, #0
 8003096:	d106      	bne.n	80030a6 <bma400_set_sensor_conf+0x56>
                rslt = bma400_set_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003098:	0033      	movs	r3, r6
 800309a:	2203      	movs	r2, #3
 800309c:	2021      	movs	r0, #33	; 0x21
 800309e:	a902      	add	r1, sp, #8
 80030a0:	f7ff fe4d 	bl	8002d3e <bma400_set_regs>
 80030a4:	0005      	movs	r5, r0
}
 80030a6:	0028      	movs	r0, r5
 80030a8:	b007      	add	sp, #28
 80030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (conf[idx].type)
 80030ac:	7820      	ldrb	r0, [r4, #0]
 80030ae:	2806      	cmp	r0, #6
 80030b0:	d900      	bls.n	80030b4 <bma400_set_sensor_conf+0x64>
 80030b2:	e114      	b.n	80032de <bma400_set_sensor_conf+0x28e>
 80030b4:	f7fd f84e 	bl	8000154 <__gnu_thumb1_case_uhi>
 80030b8:	000700d6 	.word	0x000700d6
 80030bc:	0091005b 	.word	0x0091005b
 80030c0:	01920132 	.word	0x01920132
 80030c4:	01e4      	.short	0x01e4
    uint8_t reg_data[2] = { 0, 0 };
 80030c6:	2300      	movs	r3, #0
 80030c8:	af03      	add	r7, sp, #12
 80030ca:	803b      	strh	r3, [r7, #0]
    rslt = bma400_get_regs(BMA400_TAP_CONFIG_ADDR, reg_data, 2, dev);
 80030cc:	2202      	movs	r2, #2
 80030ce:	0033      	movs	r3, r6
 80030d0:	0039      	movs	r1, r7
 80030d2:	2057      	movs	r0, #87	; 0x57
 80030d4:	f7ff fe64 	bl	8002da0 <bma400_get_regs>
 80030d8:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80030da:	d000      	beq.n	80030de <bma400_set_sensor_conf+0x8e>
 80030dc:	e0ff      	b.n	80032de <bma400_set_sensor_conf+0x28e>
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 80030de:	2118      	movs	r1, #24
 80030e0:	78a3      	ldrb	r3, [r4, #2]
 80030e2:	783a      	ldrb	r2, [r7, #0]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	438a      	bics	r2, r1
 80030e8:	400b      	ands	r3, r1
 80030ea:	4313      	orrs	r3, r2
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 80030ec:	78e2      	ldrb	r2, [r4, #3]
 80030ee:	3911      	subs	r1, #17
 80030f0:	400a      	ands	r2, r1
 80030f2:	438b      	bics	r3, r1
 80030f4:	4313      	orrs	r3, r2
 80030f6:	703b      	strb	r3, [r7, #0]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 80030f8:	79a3      	ldrb	r3, [r4, #6]
 80030fa:	787a      	ldrb	r2, [r7, #1]
 80030fc:	3129      	adds	r1, #41	; 0x29
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	438a      	bics	r2, r1
 8003102:	400b      	ands	r3, r1
 8003104:	4313      	orrs	r3, r2
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8003106:	7962      	ldrb	r2, [r4, #5]
 8003108:	3924      	subs	r1, #36	; 0x24
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	400a      	ands	r2, r1
 800310e:	438b      	bics	r3, r1
 8003110:	4313      	orrs	r3, r2
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8003112:	7922      	ldrb	r2, [r4, #4]
 8003114:	3909      	subs	r1, #9
 8003116:	400a      	ands	r2, r1
 8003118:	438b      	bics	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	707b      	strb	r3, [r7, #1]
        rslt = bma400_set_regs(BMA400_TAP_CONFIG_ADDR, reg_data, 2, dev);
 800311e:	2202      	movs	r2, #2
 8003120:	0033      	movs	r3, r6
 8003122:	0039      	movs	r1, r7
 8003124:	2057      	movs	r0, #87	; 0x57
 8003126:	f7ff fe0a 	bl	8002d3e <bma400_set_regs>
 800312a:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 800312c:	d000      	beq.n	8003130 <bma400_set_sensor_conf+0xe0>
 800312e:	e0d6      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_TAP_INT_MAP, conf[idx].param.tap.int_chan);
 8003130:	79e3      	ldrb	r3, [r4, #7]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <bma400_set_sensor_conf+0xf4>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8003136:	ab02      	add	r3, sp, #8
 8003138:	789a      	ldrb	r2, [r3, #2]
 800313a:	2304      	movs	r3, #4
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 800313c:	4313      	orrs	r3, r2
 800313e:	aa02      	add	r2, sp, #8
 8003140:	7093      	strb	r3, [r2, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003142:	e0cb      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003144:	2b02      	cmp	r3, #2
 8003146:	d008      	beq.n	800315a <bma400_set_sensor_conf+0x10a>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <bma400_set_sensor_conf+0x114>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800314c:	2b03      	cmp	r3, #3
 800314e:	d000      	beq.n	8003152 <bma400_set_sensor_conf+0x102>
 8003150:	e0c4      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8003152:	ab02      	add	r3, sp, #8
 8003154:	789a      	ldrb	r2, [r3, #2]
 8003156:	2344      	movs	r3, #68	; 0x44
 8003158:	e002      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 800315a:	ab02      	add	r3, sp, #8
 800315c:	789a      	ldrb	r2, [r3, #2]
 800315e:	2340      	movs	r3, #64	; 0x40
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8003160:	4313      	orrs	r3, r2
 8003162:	e037      	b.n	80031d4 <bma400_set_sensor_conf+0x184>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8003164:	2244      	movs	r2, #68	; 0x44
 8003166:	ab02      	add	r3, sp, #8
 8003168:	789b      	ldrb	r3, [r3, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 800316a:	4393      	bics	r3, r2
 800316c:	e032      	b.n	80031d4 <bma400_set_sensor_conf+0x184>
                        rslt = set_activity_change_conf(&conf[idx].param.act_ch, dev);
 800316e:	78e2      	ldrb	r2, [r4, #3]
    data_array[0] = act_ch_set->act_ch_thres;
 8003170:	78a3      	ldrb	r3, [r4, #2]
 8003172:	ad02      	add	r5, sp, #8
 8003174:	712b      	strb	r3, [r5, #4]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8003176:	0153      	lsls	r3, r2, #5
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8003178:	220f      	movs	r2, #15
 800317a:	7960      	ldrb	r0, [r4, #5]
 800317c:	7921      	ldrb	r1, [r4, #4]
 800317e:	4002      	ands	r2, r0
 8003180:	4313      	orrs	r3, r2
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 8003182:	010a      	lsls	r2, r1, #4
 8003184:	2110      	movs	r1, #16
 8003186:	400a      	ands	r2, r1
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8003188:	4313      	orrs	r3, r2
 800318a:	716b      	strb	r3, [r5, #5]
    rslt = bma400_set_regs(BMA400_ACT_CH_CONFIG_0_ADDR, data_array, 2, dev);
 800318c:	2202      	movs	r2, #2
 800318e:	0033      	movs	r3, r6
 8003190:	2055      	movs	r0, #85	; 0x55
 8003192:	a903      	add	r1, sp, #12
 8003194:	f7ff fdd3 	bl	8002d3e <bma400_set_regs>
 8003198:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 800319a:	d000      	beq.n	800319e <bma400_set_sensor_conf+0x14e>
 800319c:	e09f      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_ACT_CH_INT_MAP, conf[idx].param.act_ch.int_chan);
 800319e:	79a3      	ldrb	r3, [r4, #6]
            if (int_map == BMA400_INT_CHANNEL_1)
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d103      	bne.n	80031ac <bma400_set_sensor_conf+0x15c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 80031a4:	ab02      	add	r3, sp, #8
 80031a6:	789a      	ldrb	r2, [r3, #2]
 80031a8:	2308      	movs	r3, #8
 80031aa:	e7c7      	b.n	800313c <bma400_set_sensor_conf+0xec>
            if (int_map == BMA400_INT_CHANNEL_2)
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d008      	beq.n	80031c2 <bma400_set_sensor_conf+0x172>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <bma400_set_sensor_conf+0x17c>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d000      	beq.n	80031ba <bma400_set_sensor_conf+0x16a>
 80031b8:	e090      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80031ba:	ab02      	add	r3, sp, #8
 80031bc:	789a      	ldrb	r2, [r3, #2]
 80031be:	2378      	movs	r3, #120	; 0x78
 80031c0:	e002      	b.n	80031c8 <bma400_set_sensor_conf+0x178>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80031c2:	ab02      	add	r3, sp, #8
 80031c4:	789a      	ldrb	r2, [r3, #2]
 80031c6:	2380      	movs	r3, #128	; 0x80
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80031c8:	425b      	negs	r3, r3
 80031ca:	e7c9      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 80031cc:	2277      	movs	r2, #119	; 0x77
 80031ce:	ab02      	add	r3, sp, #8
 80031d0:	789b      	ldrb	r3, [r3, #2]
 80031d2:	4013      	ands	r3, r2
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80031d4:	aa02      	add	r2, sp, #8
 80031d6:	7093      	strb	r3, [r2, #2]
 80031d8:	e081      	b.n	80032de <bma400_set_sensor_conf+0x28e>
    uint8_t data_array[11] = { 0 };
 80031da:	2207      	movs	r2, #7
 80031dc:	2100      	movs	r1, #0
 80031de:	a804      	add	r0, sp, #16
 80031e0:	f012 febf 	bl	8015f62 <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031e4:	2003      	movs	r0, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80031e6:	79a3      	ldrb	r3, [r4, #6]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031e8:	7ae1      	ldrb	r1, [r4, #11]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80031ea:	015b      	lsls	r3, r3, #5
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031ec:	4001      	ands	r1, r0
 80031ee:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80031f0:	79e1      	ldrb	r1, [r4, #7]
 80031f2:	300d      	adds	r0, #13
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80031f4:	7aa2      	ldrb	r2, [r4, #10]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80031f6:	0109      	lsls	r1, r1, #4
 80031f8:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031fa:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80031fc:	3804      	subs	r0, #4
 80031fe:	0091      	lsls	r1, r2, #2
 8003200:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003202:	430b      	orrs	r3, r1
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8003204:	2102      	movs	r1, #2
    uint8_t data_array[11] = { 0 };
 8003206:	ad03      	add	r5, sp, #12
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003208:	702b      	strb	r3, [r5, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800320a:	7a23      	ldrb	r3, [r4, #8]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 800320c:	380b      	subs	r0, #11
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	400b      	ands	r3, r1
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8003212:	7a61      	ldrb	r1, [r4, #9]
 8003214:	4001      	ands	r1, r0
 8003216:	430b      	orrs	r3, r1
 8003218:	706b      	strb	r3, [r5, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 800321a:	78a3      	ldrb	r3, [r4, #2]
 800321c:	70ab      	strb	r3, [r5, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 800321e:	88a3      	ldrh	r3, [r4, #4]
 8003220:	0a19      	lsrs	r1, r3, #8
 8003222:	70e9      	strb	r1, [r5, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8003224:	712b      	strb	r3, [r5, #4]
    if (gen_int_set->ref_update == BMA400_MANUAL_UPDATE)
 8003226:	2a00      	cmp	r2, #0
 8003228:	d12d      	bne.n	8003286 <bma400_set_sensor_conf+0x236>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 800322a:	89a3      	ldrh	r3, [r4, #12]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 800322c:	0029      	movs	r1, r5
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 800322e:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	71ab      	strb	r3, [r5, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8003234:	89e3      	ldrh	r3, [r4, #14]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 8003236:	320b      	adds	r2, #11
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8003238:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	722b      	strb	r3, [r5, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 800323e:	8a23      	ldrh	r3, [r4, #16]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 8003240:	303e      	adds	r0, #62	; 0x3e
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003242:	726b      	strb	r3, [r5, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	72ab      	strb	r3, [r5, #10]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 8003248:	0033      	movs	r3, r6
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 5, dev);
 800324a:	f7ff fd78 	bl	8002d3e <bma400_set_regs>
                        if (rslt == BMA400_OK)
 800324e:	2800      	cmp	r0, #0
 8003250:	d108      	bne.n	8003264 <bma400_set_sensor_conf+0x214>
                            map_int_pin(data_array, BMA400_GEN1_INT_MAP, conf[idx].param.gen_int.int_chan);
 8003252:	7ca3      	ldrb	r3, [r4, #18]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003254:	2b01      	cmp	r3, #1
 8003256:	d11b      	bne.n	8003290 <bma400_set_sensor_conf+0x240>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8003258:	ab02      	add	r3, sp, #8
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	2304      	movs	r3, #4
 800325e:	4313      	orrs	r3, r2
 8003260:	aa02      	add	r2, sp, #8
 8003262:	7013      	strb	r3, [r2, #0]
					   rslt = set_accel_conf(&conf[idx].param.accel, dev);
 8003264:	0031      	movs	r1, r6
 8003266:	1ca0      	adds	r0, r4, #2
 8003268:	f7ff fe02 	bl	8002e70 <set_accel_conf>
 800326c:	1e05      	subs	r5, r0, #0
					   if (rslt == BMA400_OK)
 800326e:	d136      	bne.n	80032de <bma400_set_sensor_conf+0x28e>
						   map_int_pin(data_array, BMA400_DATA_READY_INT_MAP, conf[idx].param.accel.int_chan);
 8003270:	7a23      	ldrb	r3, [r4, #8]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003272:	2b01      	cmp	r3, #1
 8003274:	d12c      	bne.n	80032d0 <bma400_set_sensor_conf+0x280>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8003276:	ab02      	add	r3, sp, #8
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	425b      	negs	r3, r3
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800327e:	4313      	orrs	r3, r2
 8003280:	aa02      	add	r2, sp, #8
 8003282:	7013      	strb	r3, [r2, #0]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003284:	e02a      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 5, dev);
 8003286:	0033      	movs	r3, r6
 8003288:	2205      	movs	r2, #5
 800328a:	0029      	movs	r1, r5
 800328c:	203f      	movs	r0, #63	; 0x3f
 800328e:	e7dc      	b.n	800324a <bma400_set_sensor_conf+0x1fa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003290:	2b02      	cmp	r3, #2
 8003292:	d00c      	beq.n	80032ae <bma400_set_sensor_conf+0x25e>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003294:	2b00      	cmp	r3, #0
 8003296:	d011      	beq.n	80032bc <bma400_set_sensor_conf+0x26c>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003298:	2b03      	cmp	r3, #3
 800329a:	d1e3      	bne.n	8003264 <bma400_set_sensor_conf+0x214>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 800329c:	ab02      	add	r3, sp, #8
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	2304      	movs	r3, #4
 80032a2:	a902      	add	r1, sp, #8
 80032a4:	431a      	orrs	r2, r3
 80032a6:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032a8:	784a      	ldrb	r2, [r1, #1]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	e00e      	b.n	80032cc <bma400_set_sensor_conf+0x27c>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032ae:	ab02      	add	r3, sp, #8
 80032b0:	785a      	ldrb	r2, [r3, #1]
 80032b2:	2304      	movs	r3, #4
 80032b4:	4313      	orrs	r3, r2
 80032b6:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032b8:	7053      	strb	r3, [r2, #1]
 80032ba:	e7d3      	b.n	8003264 <bma400_set_sensor_conf+0x214>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 80032bc:	2204      	movs	r2, #4
 80032be:	ab02      	add	r3, sp, #8
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	4393      	bics	r3, r2
 80032c6:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 80032c8:	784b      	ldrb	r3, [r1, #1]
 80032ca:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032cc:	000a      	movs	r2, r1
 80032ce:	e7f3      	b.n	80032b8 <bma400_set_sensor_conf+0x268>
            if (int_map == BMA400_INT_CHANNEL_2)
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d006      	beq.n	80032e2 <bma400_set_sensor_conf+0x292>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <bma400_set_sensor_conf+0x29e>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d012      	beq.n	8003302 <bma400_set_sensor_conf+0x2b2>
                        rslt = set_accel_conf(&conf[idx].param.accel, dev);
 80032dc:	2500      	movs	r5, #0
            for (idx = 0; idx < n_sett; idx++)
 80032de:	3414      	adds	r4, #20
 80032e0:	e6d5      	b.n	800308e <bma400_set_sensor_conf+0x3e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80032e2:	ab02      	add	r3, sp, #8
 80032e4:	785a      	ldrb	r2, [r3, #1]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	425b      	negs	r3, r3
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80032ea:	4313      	orrs	r3, r2
 80032ec:	e006      	b.n	80032fc <bma400_set_sensor_conf+0x2ac>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80032ee:	217f      	movs	r1, #127	; 0x7f
 80032f0:	ab02      	add	r3, sp, #8
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	400b      	ands	r3, r1
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80032fc:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80032fe:	7053      	strb	r3, [r2, #1]
 8003300:	e7ed      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8003302:	ab02      	add	r3, sp, #8
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	425b      	negs	r3, r3
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800330a:	431a      	orrs	r2, r3
 800330c:	a902      	add	r1, sp, #8
 800330e:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003310:	784a      	ldrb	r2, [r1, #1]
 8003312:	4313      	orrs	r3, r2
 8003314:	e060      	b.n	80033d8 <bma400_set_sensor_conf+0x388>
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	080187a4 	.word	0x080187a4
    uint8_t data_array[11] = { 0 };
 800331c:	2207      	movs	r2, #7
 800331e:	2100      	movs	r1, #0
 8003320:	a804      	add	r0, sp, #16
 8003322:	f012 fe1e 	bl	8015f62 <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003326:	2003      	movs	r0, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8003328:	79a3      	ldrb	r3, [r4, #6]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800332a:	7ae1      	ldrb	r1, [r4, #11]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 800332c:	015b      	lsls	r3, r3, #5
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800332e:	4001      	ands	r1, r0
 8003330:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8003332:	79e1      	ldrb	r1, [r4, #7]
 8003334:	300d      	adds	r0, #13
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8003336:	7aa2      	ldrb	r2, [r4, #10]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8003338:	0109      	lsls	r1, r1, #4
 800333a:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800333c:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 800333e:	3804      	subs	r0, #4
 8003340:	0091      	lsls	r1, r2, #2
 8003342:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003344:	430b      	orrs	r3, r1
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8003346:	2102      	movs	r1, #2
    uint8_t data_array[11] = { 0 };
 8003348:	ad03      	add	r5, sp, #12
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800334a:	702b      	strb	r3, [r5, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800334c:	7a23      	ldrb	r3, [r4, #8]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 800334e:	380b      	subs	r0, #11
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	400b      	ands	r3, r1
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8003354:	7a61      	ldrb	r1, [r4, #9]
 8003356:	4001      	ands	r1, r0
 8003358:	430b      	orrs	r3, r1
 800335a:	706b      	strb	r3, [r5, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 800335c:	78a3      	ldrb	r3, [r4, #2]
 800335e:	70ab      	strb	r3, [r5, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8003360:	88a3      	ldrh	r3, [r4, #4]
 8003362:	0a19      	lsrs	r1, r3, #8
 8003364:	70e9      	strb	r1, [r5, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8003366:	712b      	strb	r3, [r5, #4]
    if (gen_int_set->ref_update == BMA400_MANUAL_UPDATE)
 8003368:	2a00      	cmp	r2, #0
 800336a:	d11a      	bne.n	80033a2 <bma400_set_sensor_conf+0x352>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 800336c:	89a3      	ldrh	r3, [r4, #12]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 800336e:	0029      	movs	r1, r5
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8003370:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	71ab      	strb	r3, [r5, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8003376:	89e3      	ldrh	r3, [r4, #14]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 8003378:	320b      	adds	r2, #11
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800337a:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	722b      	strb	r3, [r5, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003380:	8a23      	ldrh	r3, [r4, #16]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 8003382:	3049      	adds	r0, #73	; 0x49
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003384:	726b      	strb	r3, [r5, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	72ab      	strb	r3, [r5, #10]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 800338a:	0033      	movs	r3, r6
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 5, dev);
 800338c:	f7ff fcd7 	bl	8002d3e <bma400_set_regs>
 8003390:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 8003392:	d1a4      	bne.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_GEN2_INT_MAP, conf[idx].param.gen_int.int_chan);
 8003394:	7ca3      	ldrb	r3, [r4, #18]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <bma400_set_sensor_conf+0x35c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 800339a:	ab02      	add	r3, sp, #8
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	2308      	movs	r3, #8
 80033a0:	e76d      	b.n	800327e <bma400_set_sensor_conf+0x22e>
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 5, dev);
 80033a2:	0033      	movs	r3, r6
 80033a4:	2205      	movs	r2, #5
 80033a6:	0029      	movs	r1, r5
 80033a8:	204a      	movs	r0, #74	; 0x4a
 80033aa:	e7ef      	b.n	800338c <bma400_set_sensor_conf+0x33c>
            if (int_map == BMA400_INT_CHANNEL_2)
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d007      	beq.n	80033c0 <bma400_set_sensor_conf+0x370>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <bma400_set_sensor_conf+0x378>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d191      	bne.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 80033b8:	ab02      	add	r3, sp, #8
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	2308      	movs	r3, #8
 80033be:	e7a4      	b.n	800330a <bma400_set_sensor_conf+0x2ba>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 80033c0:	ab02      	add	r3, sp, #8
 80033c2:	785a      	ldrb	r2, [r3, #1]
 80033c4:	2308      	movs	r3, #8
 80033c6:	e790      	b.n	80032ea <bma400_set_sensor_conf+0x29a>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 80033c8:	2208      	movs	r2, #8
 80033ca:	ab02      	add	r3, sp, #8
 80033cc:	781b      	ldrb	r3, [r3, #0]
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 80033ce:	4393      	bics	r3, r2
 80033d0:	a902      	add	r1, sp, #8
 80033d2:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 80033d4:	784b      	ldrb	r3, [r1, #1]
 80033d6:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80033d8:	000a      	movs	r2, r1
 80033da:	e790      	b.n	80032fe <bma400_set_sensor_conf+0x2ae>
    uint8_t data_array[10] = { 0 };
 80033dc:	2206      	movs	r2, #6
 80033de:	2100      	movs	r1, #0
 80033e0:	a804      	add	r0, sp, #16
 80033e2:	f012 fdbe 	bl	8015f62 <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033e6:	2003      	movs	r0, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80033e8:	78a3      	ldrb	r3, [r4, #2]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033ea:	7a21      	ldrb	r1, [r4, #8]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80033ec:	015b      	lsls	r3, r3, #5
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033ee:	4001      	ands	r1, r0
 80033f0:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80033f2:	78e1      	ldrb	r1, [r4, #3]
 80033f4:	300d      	adds	r0, #13
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 80033f6:	7922      	ldrb	r2, [r4, #4]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80033f8:	0109      	lsls	r1, r1, #4
 80033fa:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033fc:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 80033fe:	3804      	subs	r0, #4
 8003400:	0091      	lsls	r1, r2, #2
 8003402:	4001      	ands	r1, r0
    uint8_t data_array[10] = { 0 };
 8003404:	ad03      	add	r5, sp, #12
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 8003406:	430b      	orrs	r3, r1
 8003408:	702b      	strb	r3, [r5, #0]
    data_array[1] = orient_conf->orient_thres;
 800340a:	7963      	ldrb	r3, [r4, #5]
 800340c:	706b      	strb	r3, [r5, #1]
    data_array[2] = orient_conf->stability_thres;
 800340e:	79a3      	ldrb	r3, [r4, #6]
 8003410:	70ab      	strb	r3, [r5, #2]
    data_array[3] = orient_conf->orient_int_dur;
 8003412:	79e3      	ldrb	r3, [r4, #7]
 8003414:	70eb      	strb	r3, [r5, #3]
    if (orient_conf->ref_update == BMA400_MANUAL_UPDATE)
 8003416:	2a00      	cmp	r2, #0
 8003418:	d11b      	bne.n	8003452 <bma400_set_sensor_conf+0x402>
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 800341a:	8963      	ldrh	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 800341c:	0029      	movs	r1, r5
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 800341e:	712b      	strb	r3, [r5, #4]
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 8003424:	89a3      	ldrh	r3, [r4, #12]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 8003426:	320a      	adds	r2, #10
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 8003428:	71ab      	strb	r3, [r5, #6]
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 800342e:	89e3      	ldrh	r3, [r4, #14]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 8003430:	3029      	adds	r0, #41	; 0x29
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8003432:	722b      	strb	r3, [r5, #8]
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	726b      	strb	r3, [r5, #9]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 8003438:	0033      	movs	r3, r6
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 4, dev);
 800343a:	f7ff fc80 	bl	8002d3e <bma400_set_regs>
 800343e:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 8003440:	d000      	beq.n	8003444 <bma400_set_sensor_conf+0x3f4>
 8003442:	e74c      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_ORIENT_CH_INT_MAP, conf[idx].param.orient.int_chan);
 8003444:	7c23      	ldrb	r3, [r4, #16]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <bma400_set_sensor_conf+0x40c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800344a:	ab02      	add	r3, sp, #8
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	2302      	movs	r3, #2
 8003450:	e715      	b.n	800327e <bma400_set_sensor_conf+0x22e>
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 4, dev);
 8003452:	0033      	movs	r3, r6
 8003454:	2204      	movs	r2, #4
 8003456:	0029      	movs	r1, r5
 8003458:	2035      	movs	r0, #53	; 0x35
 800345a:	e7ee      	b.n	800343a <bma400_set_sensor_conf+0x3ea>
            if (int_map == BMA400_INT_CHANNEL_2)
 800345c:	2b02      	cmp	r3, #2
 800345e:	d008      	beq.n	8003472 <bma400_set_sensor_conf+0x422>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <bma400_set_sensor_conf+0x428>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003464:	2b03      	cmp	r3, #3
 8003466:	d000      	beq.n	800346a <bma400_set_sensor_conf+0x41a>
 8003468:	e738      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800346a:	ab02      	add	r3, sp, #8
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	2302      	movs	r3, #2
 8003470:	e74b      	b.n	800330a <bma400_set_sensor_conf+0x2ba>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003472:	aa02      	add	r2, sp, #8
 8003474:	7852      	ldrb	r2, [r2, #1]
 8003476:	e738      	b.n	80032ea <bma400_set_sensor_conf+0x29a>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8003478:	ab02      	add	r3, sp, #8
 800347a:	2202      	movs	r2, #2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	e7a6      	b.n	80033ce <bma400_set_sensor_conf+0x37e>
                        map_int_pin(data_array, BMA400_STEP_INT_MAP, conf[idx].param.step_cnt.int_chan);
 8003480:	78a3      	ldrb	r3, [r4, #2]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <bma400_set_sensor_conf+0x43c>
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8003486:	aa02      	add	r2, sp, #8
 8003488:	7892      	ldrb	r2, [r2, #2]
 800348a:	e669      	b.n	8003160 <bma400_set_sensor_conf+0x110>
            if (int_map == BMA400_INT_CHANNEL_2)
 800348c:	2b02      	cmp	r3, #2
 800348e:	d008      	beq.n	80034a2 <bma400_set_sensor_conf+0x452>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <bma400_set_sensor_conf+0x45a>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003494:	2b03      	cmp	r3, #3
 8003496:	d000      	beq.n	800349a <bma400_set_sensor_conf+0x44a>
 8003498:	e721      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 800349a:	ab02      	add	r3, sp, #8
 800349c:	2211      	movs	r2, #17
 800349e:	789b      	ldrb	r3, [r3, #2]
 80034a0:	e65e      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80034a2:	ab02      	add	r3, sp, #8
 80034a4:	2210      	movs	r2, #16
 80034a6:	789b      	ldrb	r3, [r3, #2]
 80034a8:	e65a      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 80034aa:	ab02      	add	r3, sp, #8
 80034ac:	2211      	movs	r2, #17
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	e65b      	b.n	800316a <bma400_set_sensor_conf+0x11a>
 80034b2:	46c0      	nop			; (mov r8, r8)

080034b4 <bma400_get_sensor_conf>:
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	000e      	movs	r6, r1
    uint8_t data_array[3] = { 0 };
 80034b8:	49aa      	ldr	r1, [pc, #680]	; (8003764 <bma400_get_sensor_conf+0x2b0>)
{
 80034ba:	b087      	sub	sp, #28
 80034bc:	9200      	str	r2, [sp, #0]
 80034be:	0004      	movs	r4, r0
    uint8_t data_array[3] = { 0 };
 80034c0:	2202      	movs	r2, #2
 80034c2:	3103      	adds	r1, #3
 80034c4:	a802      	add	r0, sp, #8
 80034c6:	f012 fd43 	bl	8015f50 <memcpy>
 80034ca:	2200      	movs	r2, #0
 80034cc:	ab02      	add	r3, sp, #8
 80034ce:	709a      	strb	r2, [r3, #2]
    if (conf == NULL)
 80034d0:	4294      	cmp	r4, r2
 80034d2:	d100      	bne.n	80034d6 <bma400_get_sensor_conf+0x22>
 80034d4:	e142      	b.n	800375c <bma400_get_sensor_conf+0x2a8>
    rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 80034d6:	9b00      	ldr	r3, [sp, #0]
 80034d8:	a902      	add	r1, sp, #8
 80034da:	2021      	movs	r0, #33	; 0x21
 80034dc:	3203      	adds	r2, #3
 80034de:	f7ff fc5f 	bl	8002da0 <bma400_get_regs>
 80034e2:	2114      	movs	r1, #20
 80034e4:	434e      	muls	r6, r1
 80034e6:	0005      	movs	r5, r0
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80034e8:	19a3      	adds	r3, r4, r6

            /* Interrupt 1 pin mapping status */
            int_1_map = BMA400_GET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT);

            /* Interrupt 2 pin mapping status */
            int_2_map = BMA400_GET_BITS(data_array[2], BMA400_STEP_MAP_INT2);
 80034ea:	2601      	movs	r6, #1
 80034ec:	9301      	str	r3, [sp, #4]
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80034ee:	9b01      	ldr	r3, [sp, #4]
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	d001      	beq.n	80034f8 <bma400_get_sensor_conf+0x44>
 80034f4:	2d00      	cmp	r5, #0
 80034f6:	d002      	beq.n	80034fe <bma400_get_sensor_conf+0x4a>
}
 80034f8:	0028      	movs	r0, r5
 80034fa:	b007      	add	sp, #28
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (conf[idx].type)
 80034fe:	7820      	ldrb	r0, [r4, #0]
 8003500:	2806      	cmp	r0, #6
 8003502:	d900      	bls.n	8003506 <bma400_get_sensor_conf+0x52>
 8003504:	e127      	b.n	8003756 <bma400_get_sensor_conf+0x2a2>
 8003506:	f7fc fe25 	bl	8000154 <__gnu_thumb1_case_uhi>
 800350a:	0007      	.short	0x0007
 800350c:	0052002f 	.word	0x0052002f
 8003510:	00af006d 	.word	0x00af006d
 8003514:	012000ef 	.word	0x012000ef
    rslt = bma400_get_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8003518:	af03      	add	r7, sp, #12
 800351a:	2203      	movs	r2, #3
 800351c:	0039      	movs	r1, r7
 800351e:	2019      	movs	r0, #25
 8003520:	9b00      	ldr	r3, [sp, #0]
 8003522:	f7ff fc3d 	bl	8002da0 <bma400_get_regs>
 8003526:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003528:	d11c      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        accel_conf->filt1_bw = BMA400_GET_BITS(data_array[0], BMA400_FILT_1_BW);
 800352a:	783b      	ldrb	r3, [r7, #0]
 800352c:	09da      	lsrs	r2, r3, #7
 800352e:	71e2      	strb	r2, [r4, #7]
        accel_conf->osr_lp = BMA400_GET_BITS(data_array[0], BMA400_OSR_LP);
 8003530:	2203      	movs	r2, #3
 8003532:	115b      	asrs	r3, r3, #5
 8003534:	4013      	ands	r3, r2
 8003536:	71a3      	strb	r3, [r4, #6]
        accel_conf->range = BMA400_GET_BITS(data_array[1], BMA400_ACCEL_RANGE);
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	0999      	lsrs	r1, r3, #6
 800353c:	70e1      	strb	r1, [r4, #3]
        accel_conf->osr = BMA400_GET_BITS(data_array[1], BMA400_OSR);
 800353e:	1119      	asrs	r1, r3, #4
 8003540:	4011      	ands	r1, r2
 8003542:	7161      	strb	r1, [r4, #5]
        accel_conf->odr = BMA400_GET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR);
 8003544:	210f      	movs	r1, #15
 8003546:	400b      	ands	r3, r1
 8003548:	70a3      	strb	r3, [r4, #2]
        accel_conf->data_src = BMA400_GET_BITS(data_array[2], BMA400_DATA_FILTER);
 800354a:	78bb      	ldrb	r3, [r7, #2]
 800354c:	109b      	asrs	r3, r3, #2
 800354e:	4013      	ands	r3, r2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003550:	0022      	movs	r2, r4
        accel_conf->data_src = BMA400_GET_BITS(data_array[2], BMA400_DATA_FILTER);
 8003552:	7123      	strb	r3, [r4, #4]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_DRDY);
 8003554:	ab02      	add	r3, sp, #8
 8003556:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_DRDY);
 8003558:	7818      	ldrb	r0, [r3, #0]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800355a:	09c9      	lsrs	r1, r1, #7
 800355c:	09c0      	lsrs	r0, r0, #7
 800355e:	3208      	adds	r2, #8

            /* Check the mapped interrupt pins */
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003560:	f7ff fbdf 	bl	8002d22 <check_mapped_interrupts>
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8003564:	3414      	adds	r4, #20
 8003566:	e7c2      	b.n	80034ee <bma400_get_sensor_conf+0x3a>
    rslt = bma400_get_regs(BMA400_TAP_CONFIG_ADDR, reg_data, 2, dev);
 8003568:	2202      	movs	r2, #2
 800356a:	2057      	movs	r0, #87	; 0x57
 800356c:	9b00      	ldr	r3, [sp, #0]
 800356e:	a903      	add	r1, sp, #12
 8003570:	f7ff fc16 	bl	8002da0 <bma400_get_regs>
 8003574:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003576:	d1f5      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        tap_set->axes_sel = BMA400_GET_BITS(reg_data[0], BMA400_TAP_AXES_EN);
 8003578:	2203      	movs	r2, #3
 800357a:	ab02      	add	r3, sp, #8
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	10d9      	asrs	r1, r3, #3
 8003580:	4011      	ands	r1, r2
 8003582:	70a1      	strb	r1, [r4, #2]
        tap_set->sensitivity = BMA400_GET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY);
 8003584:	2107      	movs	r1, #7
 8003586:	400b      	ands	r3, r1
 8003588:	70e3      	strb	r3, [r4, #3]
        tap_set->quiet_dt = BMA400_GET_BITS(reg_data[1], BMA400_TAP_QUIET_DT);
 800358a:	ab02      	add	r3, sp, #8
 800358c:	795b      	ldrb	r3, [r3, #5]
 800358e:	1119      	asrs	r1, r3, #4
 8003590:	4011      	ands	r1, r2
 8003592:	71a1      	strb	r1, [r4, #6]
        tap_set->quiet = BMA400_GET_BITS(reg_data[1], BMA400_TAP_QUIET);
 8003594:	1099      	asrs	r1, r3, #2
        tap_set->tics_th = BMA400_GET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH);
 8003596:	4013      	ands	r3, r2
 8003598:	7123      	strb	r3, [r4, #4]
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_TAP_MAP_INT1);
 800359a:	ab02      	add	r3, sp, #8
 800359c:	7898      	ldrb	r0, [r3, #2]
        tap_set->quiet = BMA400_GET_BITS(reg_data[1], BMA400_TAP_QUIET);
 800359e:	4011      	ands	r1, r2
 80035a0:	7161      	strb	r1, [r4, #5]
            int_2_map = BMA400_GET_BITS(data_array[2], BMA400_TAP_MAP_INT2);
 80035a2:	1181      	asrs	r1, r0, #6
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80035a4:	1de2      	adds	r2, r4, #7
 80035a6:	4031      	ands	r1, r6
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_TAP_MAP_INT1);
 80035a8:	1080      	asrs	r0, r0, #2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80035aa:	4030      	ands	r0, r6
 80035ac:	e7d8      	b.n	8003560 <bma400_get_sensor_conf+0xac>
    rslt = bma400_get_regs(BMA400_ACT_CH_CONFIG_0_ADDR, data_array, 2, dev);
 80035ae:	2202      	movs	r2, #2
 80035b0:	2055      	movs	r0, #85	; 0x55
 80035b2:	9b00      	ldr	r3, [sp, #0]
 80035b4:	a903      	add	r1, sp, #12
 80035b6:	f7ff fbf3 	bl	8002da0 <bma400_get_regs>
 80035ba:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80035bc:	d1d2      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        act_ch_set->act_ch_thres = data_array[0];
 80035be:	ab02      	add	r3, sp, #8
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	70a3      	strb	r3, [r4, #2]
        act_ch_set->axes_sel = BMA400_GET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN);
 80035c4:	ab02      	add	r3, sp, #8
 80035c6:	795b      	ldrb	r3, [r3, #5]
 80035c8:	095a      	lsrs	r2, r3, #5
 80035ca:	70e2      	strb	r2, [r4, #3]
        act_ch_set->data_source = BMA400_GET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC);
 80035cc:	111a      	asrs	r2, r3, #4
 80035ce:	4032      	ands	r2, r6
 80035d0:	7122      	strb	r2, [r4, #4]
        act_ch_set->act_ch_ntps = BMA400_GET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS);
 80035d2:	220f      	movs	r2, #15
 80035d4:	4013      	ands	r3, r2
 80035d6:	7163      	strb	r3, [r4, #5]
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1);
 80035d8:	ab02      	add	r3, sp, #8
 80035da:	7898      	ldrb	r0, [r3, #2]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80035dc:	1da2      	adds	r2, r4, #6
 80035de:	09c1      	lsrs	r1, r0, #7
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1);
 80035e0:	10c0      	asrs	r0, r0, #3
 80035e2:	e7e2      	b.n	80035aa <bma400_get_sensor_conf+0xf6>
    rslt = bma400_get_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 80035e4:	af03      	add	r7, sp, #12
 80035e6:	220b      	movs	r2, #11
 80035e8:	0039      	movs	r1, r7
 80035ea:	203f      	movs	r0, #63	; 0x3f
 80035ec:	9b00      	ldr	r3, [sp, #0]
 80035ee:	f7ff fbd7 	bl	8002da0 <bma400_get_regs>
 80035f2:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80035f4:	d1b6      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 80035f6:	2103      	movs	r1, #3
        gen_int_set->axes_sel = BMA400_GET_BITS(data_array[0], BMA400_INT_AXES_EN);
 80035f8:	783b      	ldrb	r3, [r7, #0]
 80035fa:	095a      	lsrs	r2, r3, #5
 80035fc:	71a2      	strb	r2, [r4, #6]
        gen_int_set->data_src = BMA400_GET_BITS(data_array[0], BMA400_INT_DATA_SRC);
 80035fe:	111a      	asrs	r2, r3, #4
 8003600:	4032      	ands	r2, r6
 8003602:	71e2      	strb	r2, [r4, #7]
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 8003604:	109a      	asrs	r2, r3, #2
 8003606:	400a      	ands	r2, r1
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 8003608:	400b      	ands	r3, r1
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800360a:	72a2      	strb	r2, [r4, #10]
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 800360c:	72e3      	strb	r3, [r4, #11]
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 800360e:	787b      	ldrb	r3, [r7, #1]
 8003610:	001a      	movs	r2, r3
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 8003612:	105b      	asrs	r3, r3, #1
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 8003614:	4032      	ands	r2, r6
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 8003616:	4033      	ands	r3, r6
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 8003618:	7262      	strb	r2, [r4, #9]
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 800361a:	7223      	strb	r3, [r4, #8]
        gen_int_set->gen_int_thres = data_array[2];
 800361c:	78bb      	ldrb	r3, [r7, #2]
 800361e:	70a3      	strb	r3, [r4, #2]
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 8003620:	ab02      	add	r3, sp, #8
 8003622:	79d9      	ldrb	r1, [r3, #7]
 8003624:	7a1b      	ldrb	r3, [r3, #8]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	430b      	orrs	r3, r1
        data_array[6] = data_array[6] & 0x0F;
 800362a:	210f      	movs	r1, #15
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 800362c:	ba5b      	rev16	r3, r3
 800362e:	80a3      	strh	r3, [r4, #4]
        data_array[6] = data_array[6] & 0x0F;
 8003630:	79bb      	ldrb	r3, [r7, #6]
        gen_int_set->int_thres_ref_x = ((uint16_t)data_array[6] << 8) | data_array[5];
 8003632:	797a      	ldrb	r2, [r7, #5]
 8003634:	400b      	ands	r3, r1
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	4313      	orrs	r3, r2
 800363a:	81a3      	strh	r3, [r4, #12]
        data_array[8] = data_array[8] & 0x0F;
 800363c:	7a3a      	ldrb	r2, [r7, #8]
        gen_int_set->int_thres_ref_y = ((uint16_t)data_array[8] << 8) | data_array[7];
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	400a      	ands	r2, r1
 8003642:	0212      	lsls	r2, r2, #8
 8003644:	431a      	orrs	r2, r3
 8003646:	81e2      	strh	r2, [r4, #14]
        data_array[10] = data_array[10] & 0x0F;
 8003648:	7abb      	ldrb	r3, [r7, #10]
        gen_int_set->int_thres_ref_z = ((uint16_t)data_array[10] << 8) | data_array[9];
 800364a:	7a7a      	ldrb	r2, [r7, #9]
 800364c:	400b      	ands	r3, r1
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4313      	orrs	r3, r2
 8003652:	8223      	strh	r3, [r4, #16]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN1);
 8003654:	ab02      	add	r3, sp, #8
 8003656:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN1);
 8003658:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN1);
 800365a:	1089      	asrs	r1, r1, #2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800365c:	4031      	ands	r1, r6
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN1);
 800365e:	1080      	asrs	r0, r0, #2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003660:	0022      	movs	r2, r4
 8003662:	4030      	ands	r0, r6
 8003664:	3212      	adds	r2, #18
 8003666:	e77b      	b.n	8003560 <bma400_get_sensor_conf+0xac>
    rslt = bma400_get_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 8003668:	af03      	add	r7, sp, #12
 800366a:	220b      	movs	r2, #11
 800366c:	0039      	movs	r1, r7
 800366e:	204a      	movs	r0, #74	; 0x4a
 8003670:	9b00      	ldr	r3, [sp, #0]
 8003672:	f7ff fb95 	bl	8002da0 <bma400_get_regs>
 8003676:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003678:	d000      	beq.n	800367c <bma400_get_sensor_conf+0x1c8>
 800367a:	e773      	b.n	8003564 <bma400_get_sensor_conf+0xb0>
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800367c:	2103      	movs	r1, #3
        gen_int_set->axes_sel = BMA400_GET_BITS(data_array[0], BMA400_INT_AXES_EN);
 800367e:	783b      	ldrb	r3, [r7, #0]
 8003680:	095a      	lsrs	r2, r3, #5
 8003682:	71a2      	strb	r2, [r4, #6]
        gen_int_set->data_src = BMA400_GET_BITS(data_array[0], BMA400_INT_DATA_SRC);
 8003684:	111a      	asrs	r2, r3, #4
 8003686:	4032      	ands	r2, r6
 8003688:	71e2      	strb	r2, [r4, #7]
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800368a:	109a      	asrs	r2, r3, #2
 800368c:	400a      	ands	r2, r1
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 800368e:	400b      	ands	r3, r1
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 8003690:	72a2      	strb	r2, [r4, #10]
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 8003692:	72e3      	strb	r3, [r4, #11]
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	001a      	movs	r2, r3
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 8003698:	105b      	asrs	r3, r3, #1
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 800369a:	4032      	ands	r2, r6
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 800369c:	4033      	ands	r3, r6
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 800369e:	7262      	strb	r2, [r4, #9]
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 80036a0:	7223      	strb	r3, [r4, #8]
        gen_int_set->gen_int_thres = data_array[2];
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	70a3      	strb	r3, [r4, #2]
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 80036a6:	ab02      	add	r3, sp, #8
 80036a8:	79d9      	ldrb	r1, [r3, #7]
 80036aa:	7a1b      	ldrb	r3, [r3, #8]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	430b      	orrs	r3, r1
        data_array[6] = data_array[6] & 0x0F;
 80036b0:	210f      	movs	r1, #15
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 80036b2:	ba5b      	rev16	r3, r3
 80036b4:	80a3      	strh	r3, [r4, #4]
        data_array[6] = data_array[6] & 0x0F;
 80036b6:	79bb      	ldrb	r3, [r7, #6]
        gen_int_set->int_thres_ref_x = ((uint16_t)data_array[6] << 8) | data_array[5];
 80036b8:	797a      	ldrb	r2, [r7, #5]
 80036ba:	400b      	ands	r3, r1
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	4313      	orrs	r3, r2
 80036c0:	81a3      	strh	r3, [r4, #12]
        data_array[8] = data_array[8] & 0x0F;
 80036c2:	7a3a      	ldrb	r2, [r7, #8]
        gen_int_set->int_thres_ref_y = ((uint16_t)data_array[8] << 8) | data_array[7];
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	400a      	ands	r2, r1
 80036c8:	0212      	lsls	r2, r2, #8
 80036ca:	431a      	orrs	r2, r3
 80036cc:	81e2      	strh	r2, [r4, #14]
        data_array[10] = data_array[10] & 0x0F;
 80036ce:	7abb      	ldrb	r3, [r7, #10]
        gen_int_set->int_thres_ref_z = ((uint16_t)data_array[10] << 8) | data_array[9];
 80036d0:	7a7a      	ldrb	r2, [r7, #9]
 80036d2:	400b      	ands	r3, r1
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	4313      	orrs	r3, r2
 80036d8:	8223      	strh	r3, [r4, #16]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN2);
 80036da:	ab02      	add	r3, sp, #8
 80036dc:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN2);
 80036de:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN2);
 80036e0:	10c9      	asrs	r1, r1, #3
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80036e2:	4031      	ands	r1, r6
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN2);
 80036e4:	10c0      	asrs	r0, r0, #3
 80036e6:	e7bb      	b.n	8003660 <bma400_get_sensor_conf+0x1ac>
    rslt = bma400_get_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 80036e8:	af03      	add	r7, sp, #12
 80036ea:	220a      	movs	r2, #10
 80036ec:	0039      	movs	r1, r7
 80036ee:	2035      	movs	r0, #53	; 0x35
 80036f0:	9b00      	ldr	r3, [sp, #0]
 80036f2:	f7ff fb55 	bl	8002da0 <bma400_get_regs>
 80036f6:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80036f8:	d000      	beq.n	80036fc <bma400_get_sensor_conf+0x248>
 80036fa:	e733      	b.n	8003564 <bma400_get_sensor_conf+0xb0>
        orient_conf->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 80036fc:	2103      	movs	r1, #3
        orient_conf->axes_sel = BMA400_GET_BITS(data_array[0], BMA400_INT_AXES_EN);
 80036fe:	783b      	ldrb	r3, [r7, #0]
 8003700:	095a      	lsrs	r2, r3, #5
 8003702:	70a2      	strb	r2, [r4, #2]
        orient_conf->data_src = BMA400_GET_BITS(data_array[0], BMA400_INT_DATA_SRC);
 8003704:	111a      	asrs	r2, r3, #4
 8003706:	4032      	ands	r2, r6
 8003708:	70e2      	strb	r2, [r4, #3]
        orient_conf->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800370a:	109a      	asrs	r2, r3, #2
 800370c:	400a      	ands	r2, r1
 800370e:	7122      	strb	r2, [r4, #4]
        orient_conf->orient_ref_x = ((uint16_t)data_array[5] << 8) | data_array[4];
 8003710:	220f      	movs	r2, #15
        orient_conf->stability_mode = BMA400_GET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE);
 8003712:	400b      	ands	r3, r1
 8003714:	7223      	strb	r3, [r4, #8]
        orient_conf->orient_thres = data_array[1];
 8003716:	787b      	ldrb	r3, [r7, #1]
 8003718:	7163      	strb	r3, [r4, #5]
        orient_conf->stability_thres = data_array[2];
 800371a:	78bb      	ldrb	r3, [r7, #2]
 800371c:	71a3      	strb	r3, [r4, #6]
        orient_conf->orient_int_dur = data_array[3];
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	71e3      	strb	r3, [r4, #7]
        data_array[5] = data_array[5] & 0x0F;
 8003722:	797b      	ldrb	r3, [r7, #5]
        orient_conf->orient_ref_x = ((uint16_t)data_array[5] << 8) | data_array[4];
 8003724:	4013      	ands	r3, r2
 8003726:	793a      	ldrb	r2, [r7, #4]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	4313      	orrs	r3, r2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800372c:	0022      	movs	r2, r4
        orient_conf->orient_ref_x = ((uint16_t)data_array[5] << 8) | data_array[4];
 800372e:	8163      	strh	r3, [r4, #10]
        orient_conf->orient_ref_y = ((uint16_t)data_array[7] << 8) | data_array[6];
 8003730:	88fb      	ldrh	r3, [r7, #6]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003732:	3210      	adds	r2, #16
        orient_conf->orient_ref_y = ((uint16_t)data_array[7] << 8) | data_array[6];
 8003734:	81a3      	strh	r3, [r4, #12]
        orient_conf->orient_ref_z = ((uint16_t)data_array[9] << 8) | data_array[8];
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	81e3      	strh	r3, [r4, #14]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_ORIENT_CH);
 800373a:	ab02      	add	r3, sp, #8
 800373c:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_ORIENT_CH);
 800373e:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_ORIENT_CH);
 8003740:	1049      	asrs	r1, r1, #1
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_ORIENT_CH);
 8003742:	1040      	asrs	r0, r0, #1
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003744:	4031      	ands	r1, r6
 8003746:	4030      	ands	r0, r6
 8003748:	e70a      	b.n	8003560 <bma400_get_sensor_conf+0xac>
            int_1_map = BMA400_GET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT);
 800374a:	ab02      	add	r3, sp, #8
 800374c:	7898      	ldrb	r0, [r3, #2]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800374e:	1ca2      	adds	r2, r4, #2
            int_2_map = BMA400_GET_BITS(data_array[2], BMA400_STEP_MAP_INT2);
 8003750:	1101      	asrs	r1, r0, #4
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003752:	4031      	ands	r1, r6
 8003754:	e729      	b.n	80035aa <bma400_get_sensor_conf+0xf6>
        switch (conf[idx].type)
 8003756:	2504      	movs	r5, #4
 8003758:	426d      	negs	r5, r5
 800375a:	e703      	b.n	8003564 <bma400_get_sensor_conf+0xb0>
        return rslt;
 800375c:	2501      	movs	r5, #1
 800375e:	426d      	negs	r5, r5
 8003760:	e6ca      	b.n	80034f8 <bma400_get_sensor_conf+0x44>
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	080187a4 	.word	0x080187a4

08003768 <bma400_set_device_conf>:
{
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	000e      	movs	r6, r1
    uint8_t data_array[3] = { 0 };
 800376c:	49c2      	ldr	r1, [pc, #776]	; (8003a78 <bma400_set_device_conf+0x310>)
{
 800376e:	b087      	sub	sp, #28
 8003770:	0004      	movs	r4, r0
 8003772:	0015      	movs	r5, r2
    uint8_t data_array[3] = { 0 };
 8003774:	3103      	adds	r1, #3
 8003776:	2202      	movs	r2, #2
 8003778:	a802      	add	r0, sp, #8
 800377a:	f012 fbe9 	bl	8015f50 <memcpy>
 800377e:	2200      	movs	r2, #0
 8003780:	ab02      	add	r3, sp, #8
 8003782:	709a      	strb	r2, [r3, #2]
    if (conf == NULL)
 8003784:	4294      	cmp	r4, r2
 8003786:	d100      	bne.n	800378a <bma400_set_device_conf+0x22>
 8003788:	e186      	b.n	8003a98 <bma400_set_device_conf+0x330>
    rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 800378a:	002b      	movs	r3, r5
 800378c:	a902      	add	r1, sp, #8
 800378e:	2021      	movs	r0, #33	; 0x21
 8003790:	3203      	adds	r2, #3
 8003792:	f7ff fb05 	bl	8002da0 <bma400_get_regs>
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8003796:	210a      	movs	r1, #10
 8003798:	434e      	muls	r6, r1
 800379a:	19a3      	adds	r3, r4, r6
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	429c      	cmp	r4, r3
 80037a2:	d100      	bne.n	80037a6 <bma400_set_device_conf+0x3e>
 80037a4:	e16e      	b.n	8003a84 <bma400_set_device_conf+0x31c>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d001      	beq.n	80037ae <bma400_set_device_conf+0x46>
}
 80037aa:	b007      	add	sp, #28
 80037ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (conf[idx].type)
 80037ae:	2004      	movs	r0, #4
 80037b0:	7823      	ldrb	r3, [r4, #0]
 80037b2:	4240      	negs	r0, r0
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d827      	bhi.n	8003808 <bma400_set_device_conf+0xa0>
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fc fcb7 	bl	800012c <__gnu_thumb1_case_uqi>
 80037be:	2703      	.short	0x2703
 80037c0:	eac7a26e 	.word	0xeac7a26e
    rslt = bma400_get_regs(BMA400_AUTOWAKEUP_1_ADDR, &data_array[1], 1, dev);
 80037c4:	2109      	movs	r1, #9
 80037c6:	a802      	add	r0, sp, #8
 80037c8:	1809      	adds	r1, r1, r0
 80037ca:	002b      	movs	r3, r5
 80037cc:	2201      	movs	r2, #1
 80037ce:	202d      	movs	r0, #45	; 0x2d
 80037d0:	ae04      	add	r6, sp, #16
 80037d2:	f7ff fae5 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d116      	bne.n	8003808 <bma400_set_device_conf+0xa0>
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 80037da:	2104      	movs	r1, #4
 80037dc:	78a3      	ldrb	r3, [r4, #2]
 80037de:	7872      	ldrb	r2, [r6, #1]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	400b      	ands	r3, r1
 80037e4:	438a      	bics	r2, r1
 80037e6:	431a      	orrs	r2, r3
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 80037e8:	88a3      	ldrh	r3, [r4, #4]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 80037ea:	b252      	sxtb	r2, r2
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 80037ec:	1119      	asrs	r1, r3, #4
        data_array[0] = msb;
 80037ee:	7031      	strb	r1, [r6, #0]
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 80037f0:	210f      	movs	r1, #15
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 80037f2:	400b      	ands	r3, r1
 80037f4:	400a      	ands	r2, r1
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4313      	orrs	r3, r2
 80037fa:	7073      	strb	r3, [r6, #1]
        rslt = bma400_set_regs(BMA400_AUTOWAKEUP_0_ADDR, data_array, 2, dev);
 80037fc:	2202      	movs	r2, #2
 80037fe:	002b      	movs	r3, r5
 8003800:	0031      	movs	r1, r6
 8003802:	302c      	adds	r0, #44	; 0x2c
            rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_1_ADDR, &reg_data, 1, dev);
 8003804:	f7ff fa9b 	bl	8002d3e <bma400_set_regs>
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8003808:	340a      	adds	r4, #10
 800380a:	e7c8      	b.n	800379e <bma400_set_device_conf+0x36>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800380c:	2203      	movs	r2, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 800380e:	201c      	movs	r0, #28
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8003810:	78a3      	ldrb	r3, [r4, #2]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8003812:	a904      	add	r1, sp, #16
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8003814:	4013      	ands	r3, r2
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8003816:	7922      	ldrb	r2, [r4, #4]
 8003818:	0152      	lsls	r2, r2, #5
 800381a:	431a      	orrs	r2, r3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 800381c:	78e3      	ldrb	r3, [r4, #3]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4003      	ands	r3, r0
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8003822:	4313      	orrs	r3, r2
 8003824:	700b      	strb	r3, [r1, #0]
    data_array[1] = wakeup_conf->int_wkup_threshold;
 8003826:	7963      	ldrb	r3, [r4, #5]
    rslt = bma400_set_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 8003828:	2205      	movs	r2, #5
    data_array[1] = wakeup_conf->int_wkup_threshold;
 800382a:	704b      	strb	r3, [r1, #1]
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 800382c:	79a3      	ldrb	r3, [r4, #6]
    rslt = bma400_set_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 800382e:	3013      	adds	r0, #19
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8003830:	708b      	strb	r3, [r1, #2]
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 8003832:	79e3      	ldrb	r3, [r4, #7]
 8003834:	70cb      	strb	r3, [r1, #3]
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8003836:	7a23      	ldrb	r3, [r4, #8]
 8003838:	710b      	strb	r3, [r1, #4]
    rslt = bma400_set_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 800383a:	002b      	movs	r3, r5
 800383c:	f7ff fa7f 	bl	8002d3e <bma400_set_regs>
                if (rslt == BMA400_OK)
 8003840:	2800      	cmp	r0, #0
 8003842:	d1e1      	bne.n	8003808 <bma400_set_device_conf+0xa0>
                    map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 8003844:	7a63      	ldrb	r3, [r4, #9]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <bma400_set_device_conf+0xee>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 800384a:	aa02      	add	r2, sp, #8
 800384c:	7812      	ldrb	r2, [r2, #0]
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800384e:	4313      	orrs	r3, r2
 8003850:	aa02      	add	r2, sp, #8
 8003852:	7013      	strb	r3, [r2, #0]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003854:	e005      	b.n	8003862 <bma400_set_device_conf+0xfa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003856:	2b02      	cmp	r3, #2
 8003858:	d005      	beq.n	8003866 <bma400_set_device_conf+0xfe>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <bma400_set_device_conf+0x10c>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800385e:	2b03      	cmp	r3, #3
 8003860:	d012      	beq.n	8003888 <bma400_set_device_conf+0x120>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003862:	2000      	movs	r0, #0
 8003864:	e7d0      	b.n	8003808 <bma400_set_device_conf+0xa0>
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8003866:	ab02      	add	r3, sp, #8
 8003868:	785a      	ldrb	r2, [r3, #1]
 800386a:	2301      	movs	r3, #1
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800386c:	4313      	orrs	r3, r2
 800386e:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003870:	7053      	strb	r3, [r2, #1]
 8003872:	e7c9      	b.n	8003808 <bma400_set_device_conf+0xa0>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8003874:	2201      	movs	r2, #1
 8003876:	ab02      	add	r3, sp, #8
 8003878:	781b      	ldrb	r3, [r3, #0]
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800387a:	4393      	bics	r3, r2
 800387c:	a902      	add	r1, sp, #8
 800387e:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8003880:	784b      	ldrb	r3, [r1, #1]
 8003882:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003884:	000a      	movs	r2, r1
 8003886:	e7f3      	b.n	8003870 <bma400_set_device_conf+0x108>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8003888:	ab02      	add	r3, sp, #8
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	2301      	movs	r3, #1
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800388e:	431a      	orrs	r2, r3
 8003890:	a902      	add	r1, sp, #8
 8003892:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003894:	784a      	ldrb	r2, [r1, #1]
 8003896:	4313      	orrs	r3, r2
 8003898:	e7f4      	b.n	8003884 <bma400_set_device_conf+0x11c>
    rslt = bma400_get_regs(BMA400_AUTO_LOW_POW_1_ADDR, &reg_data, 1, dev);
 800389a:	ae03      	add	r6, sp, #12
 800389c:	002b      	movs	r3, r5
 800389e:	2201      	movs	r2, #1
 80038a0:	0031      	movs	r1, r6
 80038a2:	202b      	movs	r0, #43	; 0x2b
 80038a4:	f7ff fa7c 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d1ad      	bne.n	8003808 <bma400_set_device_conf+0xa0>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 80038ac:	210f      	movs	r1, #15
 80038ae:	7833      	ldrb	r3, [r6, #0]
 80038b0:	78a2      	ldrb	r2, [r4, #2]
 80038b2:	438b      	bics	r3, r1
 80038b4:	4011      	ands	r1, r2
 80038b6:	430b      	orrs	r3, r1
 80038b8:	7033      	strb	r3, [r6, #0]
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 80038ba:	230c      	movs	r3, #12
 80038bc:	421a      	tst	r2, r3
 80038be:	d104      	bne.n	80038ca <bma400_set_device_conf+0x162>
            rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_1_ADDR, &reg_data, 1, dev);
 80038c0:	002b      	movs	r3, r5
 80038c2:	2201      	movs	r2, #1
 80038c4:	202b      	movs	r0, #43	; 0x2b
 80038c6:	a903      	add	r1, sp, #12
 80038c8:	e79c      	b.n	8003804 <bma400_set_device_conf+0x9c>
            rslt = bma400_get_regs(BMA400_AUTO_LOW_POW_0_ADDR, &timeout_msb, 1, dev);
 80038ca:	af04      	add	r7, sp, #16
 80038cc:	002b      	movs	r3, r5
 80038ce:	2201      	movs	r2, #1
 80038d0:	0039      	movs	r1, r7
 80038d2:	202a      	movs	r0, #42	; 0x2a
 80038d4:	f7ff fa64 	bl	8002da0 <bma400_get_regs>
            if (rslt == BMA400_OK)
 80038d8:	2800      	cmp	r0, #0
 80038da:	d195      	bne.n	8003808 <bma400_set_device_conf+0xa0>
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80038dc:	210f      	movs	r1, #15
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80038de:	88a3      	ldrh	r3, [r4, #4]
                rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_0_ADDR, &timeout_msb, 1, dev);
 80038e0:	302a      	adds	r0, #42	; 0x2a
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80038e2:	111a      	asrs	r2, r3, #4
 80038e4:	703a      	strb	r2, [r7, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80038e6:	7832      	ldrb	r2, [r6, #0]
 80038e8:	400b      	ands	r3, r1
 80038ea:	400a      	ands	r2, r1
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4313      	orrs	r3, r2
 80038f0:	7033      	strb	r3, [r6, #0]
                rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_0_ADDR, &timeout_msb, 1, dev);
 80038f2:	2201      	movs	r2, #1
 80038f4:	002b      	movs	r3, r5
 80038f6:	0039      	movs	r1, r7
 80038f8:	f7ff fa21 	bl	8002d3e <bma400_set_regs>
        if (rslt == BMA400_OK)
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d183      	bne.n	8003808 <bma400_set_device_conf+0xa0>
 8003900:	e7de      	b.n	80038c0 <bma400_set_device_conf+0x158>
                rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8003902:	78e3      	ldrb	r3, [r4, #3]
static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, const struct bma400_dev *dev)
{
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_INT_12_IO_CTRL_ADDR, &reg_data, 1, dev);
 8003904:	ae04      	add	r6, sp, #16
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	002b      	movs	r3, r5
 800390c:	0031      	movs	r1, r6
 800390e:	2024      	movs	r0, #36	; 0x24
 8003910:	78a7      	ldrb	r7, [r4, #2]
 8003912:	f7ff fa45 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8003916:	2800      	cmp	r0, #0
 8003918:	d000      	beq.n	800391c <bma400_set_device_conf+0x1b4>
 800391a:	e775      	b.n	8003808 <bma400_set_device_conf+0xa0>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 800391c:	2f01      	cmp	r7, #1
 800391e:	d10c      	bne.n	800393a <bma400_set_device_conf+0x1d2>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8003920:	2106      	movs	r1, #6
 8003922:	9a00      	ldr	r2, [sp, #0]
 8003924:	7833      	ldrb	r3, [r6, #0]
 8003926:	0052      	lsls	r2, r2, #1
 8003928:	438b      	bics	r3, r1
 800392a:	400a      	ands	r2, r1
        }
        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 800392c:	4313      	orrs	r3, r2
 800392e:	7033      	strb	r3, [r6, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_INT_12_IO_CTRL_ADDR, &reg_data, 1, dev);
 8003930:	002b      	movs	r3, r5
 8003932:	2201      	movs	r2, #1
 8003934:	0031      	movs	r1, r6
 8003936:	2024      	movs	r0, #36	; 0x24
 8003938:	e764      	b.n	8003804 <bma400_set_device_conf+0x9c>
        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 800393a:	2f02      	cmp	r7, #2
 800393c:	d1f8      	bne.n	8003930 <bma400_set_device_conf+0x1c8>
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 800393e:	2160      	movs	r1, #96	; 0x60
 8003940:	9b00      	ldr	r3, [sp, #0]
 8003942:	7832      	ldrb	r2, [r6, #0]
 8003944:	015b      	lsls	r3, r3, #5
 8003946:	438a      	bics	r2, r1
 8003948:	400b      	ands	r3, r1
 800394a:	e7ef      	b.n	800392c <bma400_set_device_conf+0x1c4>
                map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 800394c:	78a0      	ldrb	r0, [r4, #2]
            if (int_map == BMA400_INT_CHANNEL_1)
 800394e:	2801      	cmp	r0, #1
 8003950:	d103      	bne.n	800395a <bma400_set_device_conf+0x1f2>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003952:	ab02      	add	r3, sp, #8
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	2310      	movs	r3, #16
 8003958:	e779      	b.n	800384e <bma400_set_device_conf+0xe6>
            if (int_map == BMA400_INT_CHANNEL_2)
 800395a:	2802      	cmp	r0, #2
 800395c:	d00e      	beq.n	800397c <bma400_set_device_conf+0x214>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800395e:	2800      	cmp	r0, #0
 8003960:	d013      	beq.n	800398a <bma400_set_device_conf+0x222>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003962:	2803      	cmp	r0, #3
 8003964:	d000      	beq.n	8003968 <bma400_set_device_conf+0x200>
 8003966:	e77c      	b.n	8003862 <bma400_set_device_conf+0xfa>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003968:	ab02      	add	r3, sp, #8
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	2310      	movs	r3, #16
 800396e:	a902      	add	r1, sp, #8
 8003970:	431a      	orrs	r2, r3
 8003972:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003974:	784a      	ldrb	r2, [r1, #1]
 8003976:	4313      	orrs	r3, r2
 8003978:	000a      	movs	r2, r1
 800397a:	e004      	b.n	8003986 <bma400_set_device_conf+0x21e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800397c:	ab02      	add	r3, sp, #8
 800397e:	785a      	ldrb	r2, [r3, #1]
 8003980:	2310      	movs	r3, #16
 8003982:	4313      	orrs	r3, r2
 8003984:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003986:	7053      	strb	r3, [r2, #1]
 8003988:	e76b      	b.n	8003862 <bma400_set_device_conf+0xfa>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 800398a:	ab02      	add	r3, sp, #8
 800398c:	2210      	movs	r2, #16
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	e773      	b.n	800387a <bma400_set_device_conf+0x112>
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003992:	0028      	movs	r0, r5
 8003994:	f7ff f9b6 	bl	8002d04 <null_ptr_check>

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8003998:	2800      	cmp	r0, #0
 800399a:	d000      	beq.n	800399e <bma400_set_device_conf+0x236>
 800399c:	e734      	b.n	8003808 <bma400_set_device_conf+0xa0>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_FIFO_CONFIG_0_ADDR, sens_data, 3, dev);
 800399e:	ae04      	add	r6, sp, #16
 80039a0:	002b      	movs	r3, r5
 80039a2:	2203      	movs	r2, #3
 80039a4:	0031      	movs	r1, r6
 80039a6:	3026      	adds	r0, #38	; 0x26
 80039a8:	f7ff f9fa 	bl	8002da0 <bma400_get_regs>
        if (rslt == BMA400_OK)
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d000      	beq.n	80039b2 <bma400_set_device_conf+0x24a>
 80039b0:	e72a      	b.n	8003808 <bma400_set_device_conf+0xa0>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 80039b2:	78a2      	ldrb	r2, [r4, #2]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 80039b4:	78e3      	ldrb	r3, [r4, #3]
            data_array[0] = fifo_conf->conf_regs;
 80039b6:	a903      	add	r1, sp, #12
 80039b8:	700a      	strb	r2, [r1, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <bma400_set_device_conf+0x25c>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 80039be:	7833      	ldrb	r3, [r6, #0]
 80039c0:	4393      	bics	r3, r2
 80039c2:	700b      	strb	r3, [r1, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80039c4:	2007      	movs	r0, #7
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80039c6:	88a3      	ldrh	r3, [r4, #4]
 80039c8:	b2da      	uxtb	r2, r3
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80039ca:	0a1b      	lsrs	r3, r3, #8
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80039cc:	4003      	ands	r3, r0
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80039ce:	704a      	strb	r2, [r1, #1]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80039d0:	708b      	strb	r3, [r1, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80039d2:	a804      	add	r0, sp, #16
 80039d4:	7846      	ldrb	r6, [r0, #1]
 80039d6:	4296      	cmp	r6, r2
 80039d8:	d11a      	bne.n	8003a10 <bma400_set_device_conf+0x2a8>
 80039da:	7882      	ldrb	r2, [r0, #2]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d117      	bne.n	8003a10 <bma400_set_device_conf+0x2a8>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 1, dev);
 80039e0:	002b      	movs	r3, r5
 80039e2:	2201      	movs	r2, #1
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 3, dev);
 80039e4:	2026      	movs	r0, #38	; 0x26
 80039e6:	f7ff f9aa 	bl	8002d3e <bma400_set_regs>
                if (rslt == BMA400_OK)
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d000      	beq.n	80039f0 <bma400_set_device_conf+0x288>
 80039ee:	e70b      	b.n	8003808 <bma400_set_device_conf+0xa0>
                    map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 80039f0:	79e3      	ldrb	r3, [r4, #7]
            if (int_map == BMA400_INT_CHANNEL_1)
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d110      	bne.n	8003a18 <bma400_set_device_conf+0x2b0>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80039f6:	ab02      	add	r3, sp, #8
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	4313      	orrs	r3, r2
 80039fe:	aa02      	add	r2, sp, #8
 8003a00:	7013      	strb	r3, [r2, #0]
                    map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8003a02:	79a3      	ldrb	r3, [r4, #6]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d127      	bne.n	8003a58 <bma400_set_device_conf+0x2f0>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003a08:	ab02      	add	r3, sp, #8
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e71e      	b.n	800384e <bma400_set_device_conf+0xe6>
                rslt = bma400_set_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 3, dev);
 8003a10:	002b      	movs	r3, r5
 8003a12:	2203      	movs	r2, #3
 8003a14:	a903      	add	r1, sp, #12
 8003a16:	e7e5      	b.n	80039e4 <bma400_set_device_conf+0x27c>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d00c      	beq.n	8003a36 <bma400_set_device_conf+0x2ce>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <bma400_set_device_conf+0x2dc>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d1ee      	bne.n	8003a02 <bma400_set_device_conf+0x29a>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a24:	ab02      	add	r3, sp, #8
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	2340      	movs	r3, #64	; 0x40
 8003a2a:	a902      	add	r1, sp, #8
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a30:	784a      	ldrb	r2, [r1, #1]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	e00e      	b.n	8003a54 <bma400_set_device_conf+0x2ec>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a36:	ab02      	add	r3, sp, #8
 8003a38:	785a      	ldrb	r2, [r3, #1]
 8003a3a:	2340      	movs	r3, #64	; 0x40
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a40:	7053      	strb	r3, [r2, #1]
 8003a42:	e7de      	b.n	8003a02 <bma400_set_device_conf+0x29a>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8003a44:	2240      	movs	r2, #64	; 0x40
 8003a46:	ab02      	add	r3, sp, #8
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	a902      	add	r1, sp, #8
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8003a50:	784b      	ldrb	r3, [r1, #1]
 8003a52:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a54:	000a      	movs	r2, r1
 8003a56:	e7f3      	b.n	8003a40 <bma400_set_device_conf+0x2d8>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d008      	beq.n	8003a6e <bma400_set_device_conf+0x306>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <bma400_set_device_conf+0x314>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d000      	beq.n	8003a66 <bma400_set_device_conf+0x2fe>
 8003a64:	e6fd      	b.n	8003862 <bma400_set_device_conf+0xfa>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003a66:	ab02      	add	r3, sp, #8
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e70f      	b.n	800388e <bma400_set_device_conf+0x126>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003a6e:	ab02      	add	r3, sp, #8
 8003a70:	785a      	ldrb	r2, [r3, #1]
 8003a72:	2320      	movs	r3, #32
 8003a74:	e6fa      	b.n	800386c <bma400_set_device_conf+0x104>
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	080187a4 	.word	0x080187a4
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 8003a7c:	ab02      	add	r3, sp, #8
 8003a7e:	2220      	movs	r2, #32
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	e6fa      	b.n	800387a <bma400_set_device_conf+0x112>
    if (rslt == BMA400_OK)
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d000      	beq.n	8003a8a <bma400_set_device_conf+0x322>
 8003a88:	e68f      	b.n	80037aa <bma400_set_device_conf+0x42>
        rslt = bma400_set_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003a8a:	002b      	movs	r3, r5
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	a902      	add	r1, sp, #8
 8003a90:	3021      	adds	r0, #33	; 0x21
 8003a92:	f7ff f954 	bl	8002d3e <bma400_set_regs>
 8003a96:	e688      	b.n	80037aa <bma400_set_device_conf+0x42>
        return rslt;
 8003a98:	2001      	movs	r0, #1
 8003a9a:	4240      	negs	r0, r0
 8003a9c:	e685      	b.n	80037aa <bma400_set_device_conf+0x42>
 8003a9e:	46c0      	nop			; (mov r8, r8)

08003aa0 <bma400_get_device_conf>:
{
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	000f      	movs	r7, r1
    uint8_t data_array[3] = { 0 };
 8003aa4:	495f      	ldr	r1, [pc, #380]	; (8003c24 <bma400_get_device_conf+0x184>)
{
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	0016      	movs	r6, r2
    uint8_t data_array[3] = { 0 };
 8003aaa:	3103      	adds	r1, #3
 8003aac:	2202      	movs	r2, #2
{
 8003aae:	0005      	movs	r5, r0
    uint8_t data_array[3] = { 0 };
 8003ab0:	a803      	add	r0, sp, #12
 8003ab2:	f012 fa4d 	bl	8015f50 <memcpy>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	ab02      	add	r3, sp, #8
    rslt = null_ptr_check(dev);
 8003aba:	0030      	movs	r0, r6
    uint8_t data_array[3] = { 0 };
 8003abc:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
 8003abe:	f7ff f921 	bl	8002d04 <null_ptr_check>
 8003ac2:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003ac4:	d10e      	bne.n	8003ae4 <bma400_get_device_conf+0x44>
        rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003ac6:	0033      	movs	r3, r6
 8003ac8:	2203      	movs	r2, #3
 8003aca:	2021      	movs	r0, #33	; 0x21
 8003acc:	a903      	add	r1, sp, #12
 8003ace:	f7ff f967 	bl	8002da0 <bma400_get_regs>
 8003ad2:	1e04      	subs	r4, r0, #0
        if (rslt == BMA400_OK)
 8003ad4:	d106      	bne.n	8003ae4 <bma400_get_device_conf+0x44>
 8003ad6:	210a      	movs	r1, #10
 8003ad8:	4379      	muls	r1, r7
 8003ada:	186b      	adds	r3, r5, r1
 8003adc:	9301      	str	r3, [sp, #4]
            for (idx = 0; idx < n_sett; idx++)
 8003ade:	9b01      	ldr	r3, [sp, #4]
 8003ae0:	429d      	cmp	r5, r3
 8003ae2:	d102      	bne.n	8003aea <bma400_get_device_conf+0x4a>
}
 8003ae4:	0020      	movs	r0, r4
 8003ae6:	b007      	add	sp, #28
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (conf[idx].type)
 8003aea:	7828      	ldrb	r0, [r5, #0]
 8003aec:	2805      	cmp	r0, #5
 8003aee:	d818      	bhi.n	8003b22 <bma400_get_device_conf+0x82>
 8003af0:	f7fc fb1c 	bl	800012c <__gnu_thumb1_case_uqi>
 8003af4:	4c3f1903 	.word	0x4c3f1903
 8003af8:	6d63      	.short	0x6d63
    rslt = bma400_get_regs(BMA400_AUTOWAKEUP_0_ADDR, data_array, 2, dev);
 8003afa:	0033      	movs	r3, r6
 8003afc:	2202      	movs	r2, #2
 8003afe:	202c      	movs	r0, #44	; 0x2c
 8003b00:	a904      	add	r1, sp, #16
 8003b02:	f7ff f94d 	bl	8002da0 <bma400_get_regs>
 8003b06:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b08:	d10b      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        wakeup_conf->wakeup_timeout = BMA400_GET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	ab02      	add	r3, sp, #8
 8003b0e:	7a5b      	ldrb	r3, [r3, #9]
 8003b10:	109a      	asrs	r2, r3, #2
 8003b12:	400a      	ands	r2, r1
        auto_lp_conf->auto_low_power_trigger = BMA400_GET_BITS_POS_0(data_array[1], BMA400_AUTO_LOW_POW);
 8003b14:	70aa      	strb	r2, [r5, #2]
        auto_lp_conf->auto_lp_timeout_threshold = timeout_msb << 4 | timeout_lsb;
 8003b16:	aa02      	add	r2, sp, #8
 8003b18:	7a12      	ldrb	r2, [r2, #8]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	80ab      	strh	r3, [r5, #4]
            for (idx = 0; idx < n_sett; idx++)
 8003b22:	350a      	adds	r5, #10
 8003b24:	e7db      	b.n	8003ade <bma400_get_device_conf+0x3e>
    rslt = bma400_get_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 8003b26:	af04      	add	r7, sp, #16
 8003b28:	0033      	movs	r3, r6
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	0039      	movs	r1, r7
 8003b2e:	202f      	movs	r0, #47	; 0x2f
 8003b30:	f7ff f936 	bl	8002da0 <bma400_get_regs>
 8003b34:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b36:	d1f4      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        wakeup_conf->wakeup_ref_update = BMA400_GET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE);
 8003b38:	2203      	movs	r2, #3
        wakeup_conf->sample_count = BMA400_GET_BITS(data_array[0], BMA400_SAMPLE_COUNT);
 8003b3a:	2107      	movs	r1, #7
        wakeup_conf->wakeup_ref_update = BMA400_GET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE);
 8003b3c:	783b      	ldrb	r3, [r7, #0]
 8003b3e:	401a      	ands	r2, r3
 8003b40:	70aa      	strb	r2, [r5, #2]
        wakeup_conf->sample_count = BMA400_GET_BITS(data_array[0], BMA400_SAMPLE_COUNT);
 8003b42:	109a      	asrs	r2, r3, #2
 8003b44:	400a      	ands	r2, r1
 8003b46:	70ea      	strb	r2, [r5, #3]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003b48:	2201      	movs	r2, #1
        wakeup_conf->wakeup_axes_en = BMA400_GET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES);
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	712b      	strb	r3, [r5, #4]
        wakeup_conf->int_wkup_threshold = data_array[1];
 8003b4e:	787b      	ldrb	r3, [r7, #1]
 8003b50:	716b      	strb	r3, [r5, #5]
        wakeup_conf->int_wkup_ref_x = data_array[2];
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	71ab      	strb	r3, [r5, #6]
        wakeup_conf->int_wkup_ref_y = data_array[3];
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	71eb      	strb	r3, [r5, #7]
        wakeup_conf->int_wkup_ref_z = data_array[4];
 8003b5a:	793b      	ldrb	r3, [r7, #4]
 8003b5c:	722b      	strb	r3, [r5, #8]
            int_2_map = BMA400_GET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8003b62:	7818      	ldrb	r0, [r3, #0]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003b64:	4011      	ands	r1, r2
 8003b66:	4010      	ands	r0, r2
 8003b68:	002a      	movs	r2, r5
 8003b6a:	3209      	adds	r2, #9
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003b6c:	f7ff f8d9 	bl	8002d22 <check_mapped_interrupts>
            break;
 8003b70:	e7d7      	b.n	8003b22 <bma400_get_device_conf+0x82>
    rslt = bma400_get_regs(BMA400_AUTO_LOW_POW_0_ADDR, data_array, 2, dev);
 8003b72:	0033      	movs	r3, r6
 8003b74:	2202      	movs	r2, #2
 8003b76:	202a      	movs	r0, #42	; 0x2a
 8003b78:	a904      	add	r1, sp, #16
 8003b7a:	f7ff f911 	bl	8002da0 <bma400_get_regs>
 8003b7e:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b80:	d1cf      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        auto_lp_conf->auto_low_power_trigger = BMA400_GET_BITS_POS_0(data_array[1], BMA400_AUTO_LOW_POW);
 8003b82:	220f      	movs	r2, #15
 8003b84:	ab02      	add	r3, sp, #8
 8003b86:	7a5b      	ldrb	r3, [r3, #9]
 8003b88:	401a      	ands	r2, r3
 8003b8a:	e7c3      	b.n	8003b14 <bma400_get_device_conf+0x74>
    rslt = bma400_get_regs(BMA400_INT_12_IO_CTRL_ADDR, &reg_data, 1, dev);
 8003b8c:	0033      	movs	r3, r6
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2024      	movs	r0, #36	; 0x24
 8003b92:	a904      	add	r1, sp, #16
 8003b94:	f7ff f904 	bl	8002da0 <bma400_get_regs>
 8003b98:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b9a:	d1c2      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        if (int_conf->int_chan == BMA400_INT_CHANNEL_1)
 8003b9c:	78ab      	ldrb	r3, [r5, #2]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <bma400_get_device_conf+0x10e>
            int_conf->pin_conf = BMA400_GET_BITS(reg_data, BMA400_INT_PIN1_CONF);
 8003ba2:	ab02      	add	r3, sp, #8
 8003ba4:	7a1b      	ldrb	r3, [r3, #8]
 8003ba6:	075b      	lsls	r3, r3, #29
            int_conf->pin_conf = BMA400_GET_BITS(reg_data, BMA400_INT_PIN2_CONF);
 8003ba8:	0f9b      	lsrs	r3, r3, #30
 8003baa:	70eb      	strb	r3, [r5, #3]
                        break;
 8003bac:	e7b9      	b.n	8003b22 <bma400_get_device_conf+0x82>
        if (int_conf->int_chan == BMA400_INT_CHANNEL_2)
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d1b7      	bne.n	8003b22 <bma400_get_device_conf+0x82>
            int_conf->pin_conf = BMA400_GET_BITS(reg_data, BMA400_INT_PIN2_CONF);
 8003bb2:	ab02      	add	r3, sp, #8
 8003bb4:	7a1b      	ldrb	r3, [r3, #8]
 8003bb6:	065b      	lsls	r3, r3, #25
 8003bb8:	e7f6      	b.n	8003ba8 <bma400_get_device_conf+0x108>
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003bba:	2701      	movs	r7, #1
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_INT_OVERRUN);
 8003bbc:	ab03      	add	r3, sp, #12
 8003bbe:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_INT_OVERRUN);
 8003bc0:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_INT_OVERRUN);
 8003bc2:	1109      	asrs	r1, r1, #4
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_INT_OVERRUN);
 8003bc4:	1100      	asrs	r0, r0, #4
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003bc6:	1caa      	adds	r2, r5, #2
 8003bc8:	4039      	ands	r1, r7
 8003bca:	4038      	ands	r0, r7
 8003bcc:	e7ce      	b.n	8003b6c <bma400_get_device_conf+0xcc>
    rslt = null_ptr_check(dev);
 8003bce:	0030      	movs	r0, r6
 8003bd0:	f7ff f898 	bl	8002d04 <null_ptr_check>
 8003bd4:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003bd6:	d1a4      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        rslt = bma400_get_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 3, dev);
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	0033      	movs	r3, r6
 8003bdc:	2203      	movs	r2, #3
 8003bde:	0039      	movs	r1, r7
 8003be0:	2026      	movs	r0, #38	; 0x26
 8003be2:	f7ff f8dd 	bl	8002da0 <bma400_get_regs>
 8003be6:	1e04      	subs	r4, r0, #0
        if (rslt == BMA400_OK)
 8003be8:	d19b      	bne.n	8003b22 <bma400_get_device_conf+0x82>
            fifo_conf->fifo_watermark = ((uint16_t)data_array[2] << 8) | ((uint16_t)data_array[1]);
 8003bea:	2207      	movs	r2, #7
            fifo_conf->conf_regs = data_array[0];
 8003bec:	783b      	ldrb	r3, [r7, #0]
 8003bee:	70ab      	strb	r3, [r5, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8003bf0:	78bb      	ldrb	r3, [r7, #2]
            fifo_conf->fifo_watermark = ((uint16_t)data_array[2] << 8) | ((uint16_t)data_array[1]);
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	787a      	ldrb	r2, [r7, #1]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	80ab      	strh	r3, [r5, #4]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003bfc:	2301      	movs	r3, #1
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_FULL);
 8003bfe:	af03      	add	r7, sp, #12
 8003c00:	7879      	ldrb	r1, [r7, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_FULL);
 8003c02:	7838      	ldrb	r0, [r7, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_FULL);
 8003c04:	1149      	asrs	r1, r1, #5
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_FULL);
 8003c06:	1140      	asrs	r0, r0, #5
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003c08:	4019      	ands	r1, r3
 8003c0a:	4018      	ands	r0, r3
 8003c0c:	1daa      	adds	r2, r5, #6
 8003c0e:	f7ff f888 	bl	8002d22 <check_mapped_interrupts>
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003c12:	2301      	movs	r3, #1
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_WM);
 8003c14:	7879      	ldrb	r1, [r7, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_WM);
 8003c16:	7838      	ldrb	r0, [r7, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_WM);
 8003c18:	1189      	asrs	r1, r1, #6
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_WM);
 8003c1a:	1180      	asrs	r0, r0, #6
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003c1c:	1dea      	adds	r2, r5, #7
 8003c1e:	4019      	ands	r1, r3
 8003c20:	4018      	ands	r0, r3
 8003c22:	e7a3      	b.n	8003b6c <bma400_get_device_conf+0xcc>
 8003c24:	080187a4 	.word	0x080187a4

08003c28 <bma400_get_interrupt_status>:
{
 8003c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c2a:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 8003c2c:	0008      	movs	r0, r1
{
 8003c2e:	000e      	movs	r6, r1
    rslt = null_ptr_check(dev);
 8003c30:	f7ff f868 	bl	8002d04 <null_ptr_check>
    if (rslt == BMA400_OK)
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d111      	bne.n	8003c5c <bma400_get_interrupt_status+0x34>
        rslt = bma400_get_regs(BMA400_INT_STAT0_ADDR, reg_data, 3, dev);
 8003c38:	ac01      	add	r4, sp, #4
 8003c3a:	0033      	movs	r3, r6
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	0021      	movs	r1, r4
 8003c40:	300e      	adds	r0, #14
 8003c42:	f7ff f8ad 	bl	8002da0 <bma400_get_regs>
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_INT_STATUS, reg_data[2]);
 8003c46:	221f      	movs	r2, #31
 8003c48:	7863      	ldrb	r3, [r4, #1]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	78a2      	ldrb	r2, [r4, #2]
 8003c4e:	0152      	lsls	r2, r2, #5
 8003c50:	4313      	orrs	r3, r2
        *int_status = ((uint16_t)reg_data[1] << 8) | reg_data[0];
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	7822      	ldrb	r2, [r4, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	802b      	strh	r3, [r5, #0]
}
 8003c5c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08003c5e <bma400_enable_interrupt>:
{
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c60:	0006      	movs	r6, r0
 8003c62:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 8003c64:	0010      	movs	r0, r2
{
 8003c66:	000c      	movs	r4, r1
 8003c68:	0017      	movs	r7, r2
    rslt = null_ptr_check(dev);
 8003c6a:	f7ff f84b 	bl	8002d04 <null_ptr_check>
 8003c6e:	1e03      	subs	r3, r0, #0
    if (rslt == BMA400_OK)
 8003c70:	d117      	bne.n	8003ca2 <bma400_enable_interrupt+0x44>
        rslt = bma400_get_regs(BMA400_INT_CONF_0_ADDR, reg_data, 2, dev);
 8003c72:	ad03      	add	r5, sp, #12
 8003c74:	003b      	movs	r3, r7
 8003c76:	2202      	movs	r2, #2
 8003c78:	0029      	movs	r1, r5
 8003c7a:	201f      	movs	r0, #31
 8003c7c:	f7ff f890 	bl	8002da0 <bma400_get_regs>
 8003c80:	1e03      	subs	r3, r0, #0
        if (rslt == BMA400_OK)
 8003c82:	d10e      	bne.n	8003ca2 <bma400_enable_interrupt+0x44>
 8003c84:	0064      	lsls	r4, r4, #1
 8003c86:	1932      	adds	r2, r6, r4
 8003c88:	9201      	str	r2, [sp, #4]
            for (idx = 0; idx < n_sett; idx++)
 8003c8a:	9a01      	ldr	r2, [sp, #4]
 8003c8c:	4296      	cmp	r6, r2
 8003c8e:	d10b      	bne.n	8003ca8 <bma400_enable_interrupt+0x4a>
            if (rslt == BMA400_OK)
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <bma400_enable_interrupt+0x44>
                rslt = bma400_set_regs(BMA400_INT_CONF_0_ADDR, reg_data, 2, dev);
 8003c94:	003b      	movs	r3, r7
 8003c96:	2202      	movs	r2, #2
 8003c98:	0029      	movs	r1, r5
 8003c9a:	201f      	movs	r0, #31
 8003c9c:	f7ff f84f 	bl	8002d3e <bma400_set_regs>
 8003ca0:	0003      	movs	r3, r0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	b005      	add	sp, #20
 8003ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (int_select[idx].type)
 8003ca8:	7830      	ldrb	r0, [r6, #0]
                conf = int_select[idx].conf;
 8003caa:	7874      	ldrb	r4, [r6, #1]
                switch (int_select[idx].type)
 8003cac:	280b      	cmp	r0, #11
 8003cae:	d85f      	bhi.n	8003d70 <bma400_enable_interrupt+0x112>
 8003cb0:	f7fc fa3c 	bl	800012c <__gnu_thumb1_case_uqi>
 8003cb4:	19140e06 	.word	0x19140e06
 8003cb8:	2f28231e 	.word	0x2f28231e
 8003cbc:	433f3a35 	.word	0x433f3a35
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_DRDY, conf);
 8003cc0:	217f      	movs	r1, #127	; 0x7f
 8003cc2:	782a      	ldrb	r2, [r5, #0]
 8003cc4:	01e4      	lsls	r4, r4, #7
 8003cc6:	400a      	ands	r2, r1
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_FIFO_WM, conf);
 8003cc8:	4314      	orrs	r4, r2
 8003cca:	702c      	strb	r4, [r5, #0]
            for (idx = 0; idx < n_sett; idx++)
 8003ccc:	3602      	adds	r6, #2
 8003cce:	e7dc      	b.n	8003c8a <bma400_enable_interrupt+0x2c>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_FIFO_WM, conf);
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	782a      	ldrb	r2, [r5, #0]
 8003cd4:	01a4      	lsls	r4, r4, #6
 8003cd6:	438a      	bics	r2, r1
 8003cd8:	400c      	ands	r4, r1
 8003cda:	e7f5      	b.n	8003cc8 <bma400_enable_interrupt+0x6a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_FIFO_FULL, conf);
 8003cdc:	2120      	movs	r1, #32
 8003cde:	782a      	ldrb	r2, [r5, #0]
 8003ce0:	0164      	lsls	r4, r4, #5
 8003ce2:	438a      	bics	r2, r1
 8003ce4:	e7f8      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_GEN2, conf);
 8003ce6:	2108      	movs	r1, #8
 8003ce8:	782a      	ldrb	r2, [r5, #0]
 8003cea:	00e4      	lsls	r4, r4, #3
 8003cec:	438a      	bics	r2, r1
 8003cee:	e7f3      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_GEN1, conf);
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	782a      	ldrb	r2, [r5, #0]
 8003cf4:	00a4      	lsls	r4, r4, #2
 8003cf6:	438a      	bics	r2, r1
 8003cf8:	e7ee      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_ORIENT_CH, conf);
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	782a      	ldrb	r2, [r5, #0]
 8003cfe:	0064      	lsls	r4, r4, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	e7e9      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_LATCH, conf);
 8003d04:	217f      	movs	r1, #127	; 0x7f
 8003d06:	786a      	ldrb	r2, [r5, #1]
 8003d08:	01e4      	lsls	r4, r4, #7
 8003d0a:	400a      	ands	r2, r1
                        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_EN_STEP_INT, conf);
 8003d0c:	4314      	orrs	r4, r2
 8003d0e:	706c      	strb	r4, [r5, #1]
                        break;
 8003d10:	e7dc      	b.n	8003ccc <bma400_enable_interrupt+0x6e>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_ACTCH, conf);
 8003d12:	2110      	movs	r1, #16
 8003d14:	786a      	ldrb	r2, [r5, #1]
 8003d16:	0124      	lsls	r4, r4, #4
 8003d18:	438a      	bics	r2, r1
                        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_EN_STEP_INT, conf);
 8003d1a:	400c      	ands	r4, r1
 8003d1c:	e7f6      	b.n	8003d0c <bma400_enable_interrupt+0xae>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_D_TAP, conf);
 8003d1e:	2108      	movs	r1, #8
 8003d20:	786a      	ldrb	r2, [r5, #1]
 8003d22:	00e4      	lsls	r4, r4, #3
 8003d24:	438a      	bics	r2, r1
 8003d26:	e7f8      	b.n	8003d1a <bma400_enable_interrupt+0xbc>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_S_TAP, conf);
 8003d28:	2104      	movs	r1, #4
 8003d2a:	786a      	ldrb	r2, [r5, #1]
 8003d2c:	00a4      	lsls	r4, r4, #2
 8003d2e:	438a      	bics	r2, r1
 8003d30:	e7f3      	b.n	8003d1a <bma400_enable_interrupt+0xbc>
                        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_EN_STEP_INT, conf);
 8003d32:	2101      	movs	r1, #1
 8003d34:	786a      	ldrb	r2, [r5, #1]
 8003d36:	438a      	bics	r2, r1
 8003d38:	e7ef      	b.n	8003d1a <bma400_enable_interrupt+0xbc>
    rslt = bma400_get_regs(BMA400_AUTOWAKEUP_1_ADDR, &reg_data, 1, dev);
 8003d3a:	a902      	add	r1, sp, #8
 8003d3c:	003b      	movs	r3, r7
 8003d3e:	2201      	movs	r2, #1
 8003d40:	202d      	movs	r0, #45	; 0x2d
 8003d42:	3103      	adds	r1, #3
 8003d44:	f7ff f82c 	bl	8002da0 <bma400_get_regs>
 8003d48:	1e03      	subs	r3, r0, #0
    if (rslt == BMA400_OK)
 8003d4a:	d1bf      	bne.n	8003ccc <bma400_enable_interrupt+0x6e>
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	ab02      	add	r3, sp, #8
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	0064      	lsls	r4, r4, #1
 8003d54:	4393      	bics	r3, r2
 8003d56:	4014      	ands	r4, r2
 8003d58:	431c      	orrs	r4, r3
        rslt = bma400_set_regs(BMA400_AUTOWAKEUP_1_ADDR, &reg_data, 1, dev);
 8003d5a:	a902      	add	r1, sp, #8
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8003d5c:	ab02      	add	r3, sp, #8
 8003d5e:	70dc      	strb	r4, [r3, #3]
        rslt = bma400_set_regs(BMA400_AUTOWAKEUP_1_ADDR, &reg_data, 1, dev);
 8003d60:	202d      	movs	r0, #45	; 0x2d
 8003d62:	003b      	movs	r3, r7
 8003d64:	3a01      	subs	r2, #1
 8003d66:	3103      	adds	r1, #3
 8003d68:	f7fe ffe9 	bl	8002d3e <bma400_set_regs>
 8003d6c:	0003      	movs	r3, r0
                        break;
 8003d6e:	e7ad      	b.n	8003ccc <bma400_enable_interrupt+0x6e>
                switch (int_select[idx].type)
 8003d70:	2304      	movs	r3, #4
 8003d72:	425b      	negs	r3, r3
 8003d74:	e7aa      	b.n	8003ccc <bma400_enable_interrupt+0x6e>

08003d76 <delay_ms>:

    return rslt;
}

void delay_ms(uint32_t period)
{
 8003d76:	b510      	push	{r4, lr}
    /* Wait for a period amount of ms*/
	HAL_Delay(period);
 8003d78:	f008 fc3a 	bl	800c5f0 <HAL_Delay>
}
 8003d7c:	bd10      	pop	{r4, pc}
	...

08003d80 <i2c_reg_write>:

int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8003d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d82:	0014      	movs	r4, r2

    /* Write to registers using I2C. Return 0 for a successful execution. */
	 HAL_StatusTypeDef writeStatus;
	    writeStatus = HAL_I2C_Mem_Write(&hi2c1, (i2c_addr<<1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, length, 1000);
 8003d84:	000a      	movs	r2, r1
 8003d86:	0041      	lsls	r1, r0, #1
 8003d88:	20fa      	movs	r0, #250	; 0xfa
 8003d8a:	0080      	lsls	r0, r0, #2
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	9400      	str	r4, [sp, #0]
 8003d92:	2301      	movs	r3, #1
 8003d94:	4803      	ldr	r0, [pc, #12]	; (8003da4 <i2c_reg_write+0x24>)
 8003d96:	f009 fdb9 	bl	800d90c <HAL_I2C_Mem_Write>
	    if (writeStatus != HAL_OK)
 8003d9a:	1e43      	subs	r3, r0, #1
 8003d9c:	4198      	sbcs	r0, r3
	    {
	        return -1;
	    }
    return 0;
}
 8003d9e:	4240      	negs	r0, r0
 8003da0:	b004      	add	sp, #16
 8003da2:	bd10      	pop	{r4, pc}
 8003da4:	20001898 	.word	0x20001898

08003da8 <i2c_reg_read>:

int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8003da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003daa:	0014      	movs	r4, r2

    /* Read from registers using I2C. Return 0 for a successful execution. */
	HAL_StatusTypeDef readStatus;
		readStatus = HAL_I2C_Mem_Read(&hi2c1, (i2c_addr<<1), reg_addr,I2C_MEMADD_SIZE_8BIT, reg_data, length,1000);
 8003dac:	000a      	movs	r2, r1
 8003dae:	0041      	lsls	r1, r0, #1
 8003db0:	20fa      	movs	r0, #250	; 0xfa
 8003db2:	0080      	lsls	r0, r0, #2
 8003db4:	9002      	str	r0, [sp, #8]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	9400      	str	r4, [sp, #0]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <i2c_reg_read+0x24>)
 8003dbe:	f009 fe5f 	bl	800da80 <HAL_I2C_Mem_Read>
		if(readStatus != HAL_OK)
 8003dc2:	1e43      	subs	r3, r0, #1
 8003dc4:	4198      	sbcs	r0, r3
		{
			return -1;
		}
    return 0;
}
 8003dc6:	4240      	negs	r0, r0
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	20001898 	.word	0x20001898

08003dd0 <lsb_to_ms2>:
            break;
    }
}

float lsb_to_ms2(int16_t val, float g_range, uint8_t bit_width)
{
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0015      	movs	r5, r2
 8003dd4:	1c0c      	adds	r4, r1, #0
    float half_scale = (float)(1 << bit_width) / 2.0f;

    return GRAVITY_EARTH * val * g_range * 100 / half_scale;
 8003dd6:	f7fd f8cb 	bl	8000f70 <__aeabi_i2f>
 8003dda:	490b      	ldr	r1, [pc, #44]	; (8003e08 <lsb_to_ms2+0x38>)
 8003ddc:	f7fc fdd4 	bl	8000988 <__aeabi_fmul>
 8003de0:	1c21      	adds	r1, r4, #0
 8003de2:	f7fc fdd1 	bl	8000988 <__aeabi_fmul>
 8003de6:	4909      	ldr	r1, [pc, #36]	; (8003e0c <lsb_to_ms2+0x3c>)
 8003de8:	f7fc fdce 	bl	8000988 <__aeabi_fmul>
 8003dec:	1c04      	adds	r4, r0, #0
    float half_scale = (float)(1 << bit_width) / 2.0f;
 8003dee:	2001      	movs	r0, #1
 8003df0:	40a8      	lsls	r0, r5
 8003df2:	f7fd f8bd 	bl	8000f70 <__aeabi_i2f>
 8003df6:	21fc      	movs	r1, #252	; 0xfc
 8003df8:	0589      	lsls	r1, r1, #22
 8003dfa:	f7fc fdc5 	bl	8000988 <__aeabi_fmul>
 8003dfe:	1c01      	adds	r1, r0, #0
    return GRAVITY_EARTH * val * g_range * 100 / half_scale;
 8003e00:	1c20      	adds	r0, r4, #0
 8003e02:	f7fc fca9 	bl	8000758 <__aeabi_fdiv>
}
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	411ce80a 	.word	0x411ce80a
 8003e0c:	42c80000 	.word	0x42c80000

08003e10 <BoardCriticalSectionBegin>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
#define         ID2                                 ( 0x1FF80054 )
#define         ID3                                 ( 0x1FF80064 )

void BoardCriticalSectionBegin( uint32_t *mask )
{
    *mask = __get_PRIMASK( );
 8003e14:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e16:	b672      	cpsid	i
    __disable_irq( );
}
 8003e18:	4770      	bx	lr

08003e1a <BoardCriticalSectionEnd>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	6803      	ldr	r3, [r0, #0]
 8003e1c:	f383 8810 	msr	PRIMASK, r3

void BoardCriticalSectionEnd( uint32_t *mask )
{
    __set_PRIMASK( *mask );
}
 8003e20:	4770      	bx	lr

08003e22 <BoardGetUniqueId>:
 * NOTES
 *        STM32L0x1 has 12 byte Unique Device ID (rm0377/28.2#page=827)
 *        in Factory Option Bytes (rm0377/Table3#page=54).
 *        But since the ID must be 8 bytes, we discard last 4 bytes.
 */
void BoardGetUniqueId(uint8_t *DevEui) {
 8003e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t w;
  w = HAL_GetUIDw1(), memcpy(DevEui + 0, &w, 4);
 8003e24:	2504      	movs	r5, #4
void BoardGetUniqueId(uint8_t *DevEui) {
 8003e26:	0004      	movs	r4, r0
  w = HAL_GetUIDw1(), memcpy(DevEui + 0, &w, 4);
 8003e28:	f008 fbf4 	bl	800c614 <HAL_GetUIDw1>
 8003e2c:	002a      	movs	r2, r5
 8003e2e:	a901      	add	r1, sp, #4
 8003e30:	9001      	str	r0, [sp, #4]
 8003e32:	0020      	movs	r0, r4
 8003e34:	f012 f88c 	bl	8015f50 <memcpy>
  w = HAL_GetUIDw2(), memcpy(DevEui + 4, &w, 4);
 8003e38:	f008 fbf2 	bl	800c620 <HAL_GetUIDw2>
 8003e3c:	002a      	movs	r2, r5
 8003e3e:	9001      	str	r0, [sp, #4]
 8003e40:	a901      	add	r1, sp, #4
 8003e42:	1960      	adds	r0, r4, r5
 8003e44:	f012 f884 	bl	8015f50 <memcpy>
}
 8003e48:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08003e4a <DelayMsMcu>:
 */
#include "stm32l0xx.h"
#include "delay-board.h"

void DelayMsMcu( uint32_t ms )
{
 8003e4a:	b510      	push	{r4, lr}
    HAL_Delay( ms );
 8003e4c:	f008 fbd0 	bl	800c5f0 <HAL_Delay>
}
 8003e50:	bd10      	pop	{r4, pc}
	...

08003e54 <EepromMcuWriteBuffer>:
#include "boards/utilities.h"
#include "eeprom-board.h"
#include "hardware.h"

LmnStatus_t EepromMcuWriteBuffer( uint16_t addr, uint8_t *buffer, uint16_t size )
{
 8003e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e56:	0005      	movs	r5, r0
 8003e58:	000c      	movs	r4, r1
 8003e5a:	0016      	movs	r6, r2
    LmnStatus_t status = LMN_STATUS_ERROR;
 8003e5c:	2700      	movs	r7, #0

    assert_param( ( EEPROM_LORA + addr ) >= EEPROM_LORA );
    assert_param( buffer != NULL );
    assert_param( size < ( EEPROM_LORA_END - EEPROM_LORA ) );

    if( HAL_FLASHEx_DATAEEPROM_Unlock( ) == HAL_OK )
 8003e5e:	f009 f8fb 	bl	800d058 <HAL_FLASHEx_DATAEEPROM_Unlock>
 8003e62:	42b8      	cmp	r0, r7
 8003e64:	d114      	bne.n	8003e90 <EepromMcuWriteBuffer+0x3c>
    {
        CRITICAL_SECTION_BEGIN( );
 8003e66:	a801      	add	r0, sp, #4
 8003e68:	f7ff ffd2 	bl	8003e10 <BoardCriticalSectionBegin>
        for( uint16_t i = 0; i < size; i++ )
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <EepromMcuWriteBuffer+0x44>)
 8003e6e:	19a6      	adds	r6, r4, r6
 8003e70:	18ed      	adds	r5, r5, r3
 8003e72:	42b4      	cmp	r4, r6
 8003e74:	d008      	beq.n	8003e88 <EepromMcuWriteBuffer+0x34>
        {
            if( HAL_FLASHEx_DATAEEPROM_Program( FLASH_TYPEPROGRAMDATA_BYTE,
 8003e76:	0029      	movs	r1, r5
 8003e78:	7822      	ldrb	r2, [r4, #0]
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f009 f920 	bl	800d0c0 <HAL_FLASHEx_DATAEEPROM_Program>
 8003e80:	3401      	adds	r4, #1
 8003e82:	3501      	adds	r5, #1
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d0f4      	beq.n	8003e72 <EepromMcuWriteBuffer+0x1e>
            {
                // Failed to write EEPROM
                break;
            }
        }
        CRITICAL_SECTION_END( );
 8003e88:	a801      	add	r0, sp, #4
 8003e8a:	f7ff ffc6 	bl	8003e1a <BoardCriticalSectionEnd>
        status = LMN_STATUS_OK;
 8003e8e:	2701      	movs	r7, #1
    }

    HAL_FLASHEx_DATAEEPROM_Lock( );
 8003e90:	f009 f8fa 	bl	800d088 <HAL_FLASHEx_DATAEEPROM_Lock>
    return status;
}
 8003e94:	0038      	movs	r0, r7
 8003e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e98:	08080010 	.word	0x08080010

08003e9c <EepromMcuReadBuffer>:

LmnStatus_t EepromMcuReadBuffer( uint16_t addr, uint8_t *buffer, uint16_t size )
{
 8003e9c:	000b      	movs	r3, r1
 8003e9e:	b510      	push	{r4, lr}
    assert_param( ( EEPROM_LORA + addr ) >= EEPROM_LORA );
    assert_param( buffer != NULL );
    assert_param( size < ( EEPROM_LORA_END - EEPROM_LORA ) );

    memcpy1( buffer, ( uint8_t* )( EEPROM_LORA + addr ), size );
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <EepromMcuReadBuffer+0x14>)
 8003ea2:	1841      	adds	r1, r0, r1
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 fcf8 	bl	800489a <memcpy1>
    return LMN_STATUS_OK;
}
 8003eaa:	2001      	movs	r0, #1
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	08080010 	.word	0x08080010

08003eb4 <GpioMcuSetInterrupt>:
{
    obj->Context = context;
}

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8003eb4:	b530      	push	{r4, r5, lr}
 8003eb6:	0014      	movs	r4, r2
    if( obj->pin < IOE_0 )
 8003eb8:	2200      	movs	r2, #0
 8003eba:	5682      	ldrsb	r2, [r0, r2]
{
 8003ebc:	0005      	movs	r5, r0
 8003ebe:	b087      	sub	sp, #28
    if( obj->pin < IOE_0 )
 8003ec0:	2a6f      	cmp	r2, #111	; 0x6f
 8003ec2:	dc2b      	bgt.n	8003f1c <GpioMcuSetInterrupt+0x68>
        uint32_t priority = 0;

        IRQn_Type IRQnb = EXTI0_1_IRQn;
        GPIO_InitTypeDef   GPIO_InitStructure;

        if( irqHandler == NULL )
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d029      	beq.n	8003f1c <GpioMcuSetInterrupt+0x68>
        {
            return;
        }

        obj->IrqHandler = irqHandler;
 8003ec8:	6103      	str	r3, [r0, #16]

        GPIO_InitStructure.Pin =  obj->pinIndex;
 8003eca:	8843      	ldrh	r3, [r0, #2]
 8003ecc:	9301      	str	r3, [sp, #4]

        if( irqMode == IRQ_RISING_EDGE )
 8003ece:	2901      	cmp	r1, #1
 8003ed0:	d126      	bne.n	8003f20 <GpioMcuSetInterrupt+0x6c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <GpioMcuSetInterrupt+0xcc>)
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003ed4:	9302      	str	r3, [sp, #8]
        }

        GPIO_InitStructure.Pull = obj->pull;
 8003ed6:	7aab      	ldrb	r3, [r5, #10]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8003ed8:	a901      	add	r1, sp, #4
        GPIO_InitStructure.Pull = obj->pull;
 8003eda:	9303      	str	r3, [sp, #12]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003edc:	2302      	movs	r3, #2
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8003ede:	6868      	ldr	r0, [r5, #4]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee0:	9304      	str	r3, [sp, #16]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8003ee2:	f009 f917 	bl	800d114 <HAL_GPIO_Init>
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2c03      	cmp	r4, #3
 8003eea:	d801      	bhi.n	8003ef0 <GpioMcuSetInterrupt+0x3c>
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <GpioMcuSetInterrupt+0xd0>)
 8003eee:	5d19      	ldrb	r1, [r3, r4]
        default:
            priority = 0;
            break;
        }

        switch( obj->pinIndex )
 8003ef0:	886b      	ldrh	r3, [r5, #2]
 8003ef2:	2406      	movs	r4, #6
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d004      	beq.n	8003f02 <GpioMcuSetInterrupt+0x4e>
 8003ef8:	d818      	bhi.n	8003f2c <GpioMcuSetInterrupt+0x78>
 8003efa:	1f1c      	subs	r4, r3, #4
 8003efc:	4263      	negs	r3, r4
 8003efe:	415c      	adcs	r4, r3
 8003f00:	3405      	adds	r4, #5
            break;
        default:
            break;
        }

        GpioIrq[( obj->pin ) & 0x0F] = obj;
 8003f02:	220f      	movs	r2, #15
 8003f04:	782b      	ldrb	r3, [r5, #0]

        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8003f06:	0020      	movs	r0, r4
        GpioIrq[( obj->pin ) & 0x0F] = obj;
 8003f08:	4013      	ands	r3, r2
 8003f0a:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <GpioMcuSetInterrupt+0xd4>)
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	509d      	str	r5, [r3, r2]
        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8003f10:	2200      	movs	r2, #0
 8003f12:	f008 fe87 	bl	800cc24 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( IRQnb );
 8003f16:	0020      	movs	r0, r4
 8003f18:	f008 feae 	bl	800cc78 <HAL_NVIC_EnableIRQ>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 8003f1c:	b007      	add	sp, #28
 8003f1e:	bd30      	pop	{r4, r5, pc}
        else if( irqMode == IRQ_FALLING_EDGE )
 8003f20:	2902      	cmp	r1, #2
 8003f22:	d101      	bne.n	8003f28 <GpioMcuSetInterrupt+0x74>
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <GpioMcuSetInterrupt+0xd8>)
 8003f26:	e7d5      	b.n	8003ed4 <GpioMcuSetInterrupt+0x20>
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <GpioMcuSetInterrupt+0xdc>)
 8003f2a:	e7d3      	b.n	8003ed4 <GpioMcuSetInterrupt+0x20>
        switch( obj->pinIndex )
 8003f2c:	2280      	movs	r2, #128	; 0x80
            IRQnb = EXTI4_15_IRQn;
 8003f2e:	2407      	movs	r4, #7
        switch( obj->pinIndex )
 8003f30:	00d2      	lsls	r2, r2, #3
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d0e5      	beq.n	8003f02 <GpioMcuSetInterrupt+0x4e>
 8003f36:	d811      	bhi.n	8003f5c <GpioMcuSetInterrupt+0xa8>
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d0e2      	beq.n	8003f02 <GpioMcuSetInterrupt+0x4e>
 8003f3c:	d809      	bhi.n	8003f52 <GpioMcuSetInterrupt+0x9e>
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d0df      	beq.n	8003f02 <GpioMcuSetInterrupt+0x4e>
 8003f42:	2210      	movs	r2, #16
 8003f44:	3b10      	subs	r3, #16
 8003f46:	4393      	bics	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0d9      	beq.n	8003f02 <GpioMcuSetInterrupt+0x4e>
        IRQn_Type IRQnb = EXTI0_1_IRQn;
 8003f4e:	2405      	movs	r4, #5
 8003f50:	e7d7      	b.n	8003f02 <GpioMcuSetInterrupt+0x4e>
        switch( obj->pinIndex )
 8003f52:	3b01      	subs	r3, #1
 8003f54:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <GpioMcuSetInterrupt+0xe0>)
 8003f56:	3bff      	subs	r3, #255	; 0xff
        IRQn_Type IRQnb = EXTI0_1_IRQn;
 8003f58:	2405      	movs	r4, #5
 8003f5a:	e009      	b.n	8003f70 <GpioMcuSetInterrupt+0xbc>
        switch( obj->pinIndex )
 8003f5c:	2280      	movs	r2, #128	; 0x80
            IRQnb = EXTI4_15_IRQn;
 8003f5e:	2407      	movs	r4, #7
        switch( obj->pinIndex )
 8003f60:	0192      	lsls	r2, r2, #6
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d0cd      	beq.n	8003f02 <GpioMcuSetInterrupt+0x4e>
 8003f66:	d807      	bhi.n	8003f78 <GpioMcuSetInterrupt+0xc4>
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <GpioMcuSetInterrupt+0xe4>)
        IRQn_Type IRQnb = EXTI0_1_IRQn;
 8003f6a:	3c02      	subs	r4, #2
        switch( obj->pinIndex )
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <GpioMcuSetInterrupt+0xe8>)
 8003f70:	4213      	tst	r3, r2
 8003f72:	d1c6      	bne.n	8003f02 <GpioMcuSetInterrupt+0x4e>
            IRQnb = EXTI4_15_IRQn;
 8003f74:	3402      	adds	r4, #2
 8003f76:	e7c4      	b.n	8003f02 <GpioMcuSetInterrupt+0x4e>
        switch( obj->pinIndex )
 8003f78:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <GpioMcuSetInterrupt+0xec>)
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <GpioMcuSetInterrupt+0xf0>)
 8003f7e:	e7eb      	b.n	8003f58 <GpioMcuSetInterrupt+0xa4>
 8003f80:	10110000 	.word	0x10110000
 8003f84:	0801895c 	.word	0x0801895c
 8003f88:	20000328 	.word	0x20000328
 8003f8c:	10210000 	.word	0x10210000
 8003f90:	10310000 	.word	0x10310000
 8003f94:	0000feff 	.word	0x0000feff
 8003f98:	fffff800 	.word	0xfffff800
 8003f9c:	0000f7ff 	.word	0x0000f7ff
 8003fa0:	ffffc000 	.word	0xffffc000
 8003fa4:	0000bfff 	.word	0x0000bfff

08003fa8 <GpioMcuWrite>:
    }
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
    if( obj->pin < IOE_0 )
 8003fa8:	2300      	movs	r3, #0
 8003faa:	56c3      	ldrsb	r3, [r0, r3]
{
 8003fac:	b510      	push	{r4, lr}
    if( obj->pin < IOE_0 )
 8003fae:	2b6f      	cmp	r3, #111	; 0x6f
 8003fb0:	dc06      	bgt.n	8003fc0 <GpioMcuWrite+0x18>
        if( obj == NULL )
        {
            assert_param( LMN_STATUS_ERROR );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	d004      	beq.n	8003fc0 <GpioMcuWrite+0x18>
        {
            return;
        }
        HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 8003fb6:	b2ca      	uxtb	r2, r1
 8003fb8:	8841      	ldrh	r1, [r0, #2]
 8003fba:	6840      	ldr	r0, [r0, #4]
 8003fbc:	f009 f976 	bl	800d2ac <HAL_GPIO_WritePin>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 8003fc0:	bd10      	pop	{r4, pc}
	...

08003fc4 <GpioMcuInit>:
{
 8003fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc6:	b08d      	sub	sp, #52	; 0x34
 8003fc8:	0004      	movs	r4, r0
 8003fca:	a812      	add	r0, sp, #72	; 0x48
 8003fcc:	7805      	ldrb	r5, [r0, #0]
 8003fce:	9301      	str	r3, [sp, #4]
    if( pin < IOE_0 )
 8003fd0:	296f      	cmp	r1, #111	; 0x6f
 8003fd2:	dc25      	bgt.n	8004020 <GpioMcuInit+0x5c>
        obj->pin = pin;
 8003fd4:	7021      	strb	r1, [r4, #0]
        if( pin == NC )
 8003fd6:	1c4b      	adds	r3, r1, #1
 8003fd8:	d022      	beq.n	8004020 <GpioMcuInit+0x5c>
        obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8003fda:	2701      	movs	r7, #1
 8003fdc:	200f      	movs	r0, #15
 8003fde:	003e      	movs	r6, r7
 8003fe0:	4008      	ands	r0, r1
 8003fe2:	4086      	lsls	r6, r0
        if( ( obj->pin & 0xF0 ) == 0x00 )
 8003fe4:	20f0      	movs	r0, #240	; 0xf0
 8003fe6:	4684      	mov	ip, r0
 8003fe8:	4663      	mov	r3, ip
        obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8003fea:	8066      	strh	r6, [r4, #2]
        if( ( obj->pin & 0xF0 ) == 0x00 )
 8003fec:	4008      	ands	r0, r1
 8003fee:	4219      	tst	r1, r3
 8003ff0:	d118      	bne.n	8004024 <GpioMcuInit+0x60>
            obj->port = GPIOA;
 8003ff2:	21a0      	movs	r1, #160	; 0xa0
 8003ff4:	05c9      	lsls	r1, r1, #23
 8003ff6:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOA_CLK_ENABLE( );
 8003ff8:	492d      	ldr	r1, [pc, #180]	; (80040b0 <GpioMcuInit+0xec>)
 8003ffa:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8003ffc:	4338      	orrs	r0, r7
 8003ffe:	62c8      	str	r0, [r1, #44]	; 0x2c
 8004000:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004002:	4039      	ands	r1, r7
 8004004:	9103      	str	r1, [sp, #12]
 8004006:	9903      	ldr	r1, [sp, #12]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004008:	2102      	movs	r1, #2
        GPIO_InitStructure.Pin =  obj->pinIndex ;
 800400a:	9607      	str	r6, [sp, #28]
        GPIO_InitStructure.Pull = obj->pull = type;
 800400c:	72a5      	strb	r5, [r4, #10]
 800400e:	9509      	str	r5, [sp, #36]	; 0x24
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004010:	910a      	str	r1, [sp, #40]	; 0x28
        if( mode == PIN_INPUT )
 8004012:	2a00      	cmp	r2, #0
 8004014:	d130      	bne.n	8004078 <GpioMcuInit+0xb4>
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8004016:	9208      	str	r2, [sp, #32]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8004018:	6860      	ldr	r0, [r4, #4]
 800401a:	a907      	add	r1, sp, #28
 800401c:	f009 f87a 	bl	800d114 <HAL_GPIO_Init>
}
 8004020:	b00d      	add	sp, #52	; 0x34
 8004022:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( ( obj->pin & 0xF0 ) == 0x10 )
 8004024:	2810      	cmp	r0, #16
 8004026:	d10b      	bne.n	8004040 <GpioMcuInit+0x7c>
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 8004028:	2302      	movs	r3, #2
 800402a:	4821      	ldr	r0, [pc, #132]	; (80040b0 <GpioMcuInit+0xec>)
            obj->port = GPIOB;
 800402c:	4921      	ldr	r1, [pc, #132]	; (80040b4 <GpioMcuInit+0xf0>)
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 800402e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
            obj->port = GPIOB;
 8004030:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 8004032:	431f      	orrs	r7, r3
 8004034:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004036:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004038:	4019      	ands	r1, r3
 800403a:	9104      	str	r1, [sp, #16]
 800403c:	9904      	ldr	r1, [sp, #16]
 800403e:	e7e3      	b.n	8004008 <GpioMcuInit+0x44>
        else if( ( obj->pin & 0xF0 ) == 0x20 )
 8004040:	2820      	cmp	r0, #32
 8004042:	d10b      	bne.n	800405c <GpioMcuInit+0x98>
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 8004044:	2304      	movs	r3, #4
 8004046:	481a      	ldr	r0, [pc, #104]	; (80040b0 <GpioMcuInit+0xec>)
            obj->port = GPIOC;
 8004048:	491b      	ldr	r1, [pc, #108]	; (80040b8 <GpioMcuInit+0xf4>)
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 800404a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
            obj->port = GPIOC;
 800404c:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 800404e:	431f      	orrs	r7, r3
 8004050:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004052:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004054:	4019      	ands	r1, r3
 8004056:	9105      	str	r1, [sp, #20]
 8004058:	9905      	ldr	r1, [sp, #20]
 800405a:	e7d5      	b.n	8004008 <GpioMcuInit+0x44>
        else if( ( obj->pin & 0xF0 ) == 0x30 )
 800405c:	2830      	cmp	r0, #48	; 0x30
 800405e:	d1d3      	bne.n	8004008 <GpioMcuInit+0x44>
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 8004060:	2308      	movs	r3, #8
 8004062:	4813      	ldr	r0, [pc, #76]	; (80040b0 <GpioMcuInit+0xec>)
            obj->port = GPIOD;
 8004064:	4915      	ldr	r1, [pc, #84]	; (80040bc <GpioMcuInit+0xf8>)
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 8004066:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
            obj->port = GPIOD;
 8004068:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 800406a:	431f      	orrs	r7, r3
 800406c:	62c7      	str	r7, [r0, #44]	; 0x2c
 800406e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004070:	4019      	ands	r1, r3
 8004072:	9106      	str	r1, [sp, #24]
 8004074:	9906      	ldr	r1, [sp, #24]
 8004076:	e7c7      	b.n	8004008 <GpioMcuInit+0x44>
        else if( mode == PIN_ANALOGIC )
 8004078:	2a03      	cmp	r2, #3
 800407a:	d0cc      	beq.n	8004016 <GpioMcuInit+0x52>
        else if( mode == PIN_ALTERNATE_FCT )
 800407c:	2a02      	cmp	r2, #2
 800407e:	d108      	bne.n	8004092 <GpioMcuInit+0xce>
            if( config == PIN_OPEN_DRAIN )
 8004080:	9b01      	ldr	r3, [sp, #4]
                GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8004082:	2112      	movs	r1, #18
            if( config == PIN_OPEN_DRAIN )
 8004084:	2b01      	cmp	r3, #1
 8004086:	d000      	beq.n	800408a <GpioMcuInit+0xc6>
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004088:	0011      	movs	r1, r2
            GPIO_InitStructure.Alternate = value;
 800408a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800408c:	9108      	str	r1, [sp, #32]
 800408e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004090:	e7c2      	b.n	8004018 <GpioMcuInit+0x54>
            if( config == PIN_OPEN_DRAIN )
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d108      	bne.n	80040aa <GpioMcuInit+0xe6>
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8004098:	3310      	adds	r3, #16
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800409a:	9308      	str	r3, [sp, #32]
        if( mode == PIN_OUTPUT )
 800409c:	2a01      	cmp	r2, #1
 800409e:	d1bb      	bne.n	8004018 <GpioMcuInit+0x54>
            GpioMcuWrite( obj, value );
 80040a0:	0020      	movs	r0, r4
 80040a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80040a4:	f7ff ff80 	bl	8003fa8 <GpioMcuWrite>
 80040a8:	e7b6      	b.n	8004018 <GpioMcuInit+0x54>
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e7f5      	b.n	800409a <GpioMcuInit+0xd6>
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	50000400 	.word	0x50000400
 80040b8:	50000800 	.word	0x50000800
 80040bc:	50000c00 	.word	0x50000c00

080040c0 <GpioMcuRead>:
    }
}

uint32_t GpioMcuRead( Gpio_t *obj )
{
    if( obj->pin < IOE_0 )
 80040c0:	2200      	movs	r2, #0
 80040c2:	5682      	ldrsb	r2, [r0, r2]
{
 80040c4:	0003      	movs	r3, r0
 80040c6:	b510      	push	{r4, lr}
    {
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        return GpioIoeRead( obj );
#else
        return 0;
 80040c8:	2000      	movs	r0, #0
    if( obj->pin < IOE_0 )
 80040ca:	2a6f      	cmp	r2, #111	; 0x6f
 80040cc:	dc05      	bgt.n	80040da <GpioMcuRead+0x1a>
        if( obj->pin == NC )
 80040ce:	3201      	adds	r2, #1
 80040d0:	d003      	beq.n	80040da <GpioMcuRead+0x1a>
        return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
 80040d2:	8859      	ldrh	r1, [r3, #2]
 80040d4:	6858      	ldr	r0, [r3, #4]
 80040d6:	f009 f8e3 	bl	800d2a0 <HAL_GPIO_ReadPin>
#endif
    }
}
 80040da:	bd10      	pop	{r4, pc}

080040dc <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 80040dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040de:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80040e0:	a801      	add	r0, sp, #4
{
 80040e2:	000d      	movs	r5, r1
    CRITICAL_SECTION_BEGIN( );
 80040e4:	f7ff fe94 	bl	8003e10 <BoardCriticalSectionBegin>

    switch( mode )
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	d009      	beq.n	8004100 <LpmSetStopMode+0x24>
 80040ec:	2d01      	cmp	r5, #1
 80040ee:	d103      	bne.n	80040f8 <LpmSetStopMode+0x1c>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <LpmSetStopMode+0x30>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4314      	orrs	r4, r2
 80040f6:	601c      	str	r4, [r3, #0]
        {
            break;
        }
    }

    CRITICAL_SECTION_END( );
 80040f8:	a801      	add	r0, sp, #4
 80040fa:	f7ff fe8e 	bl	8003e1a <BoardCriticalSectionEnd>
    return;
}
 80040fe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            StopModeDisable &= ~( uint32_t )id;
 8004100:	4a02      	ldr	r2, [pc, #8]	; (800410c <LpmSetStopMode+0x30>)
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	43a3      	bics	r3, r4
 8004106:	6013      	str	r3, [r2, #0]
            break;
 8004108:	e7f6      	b.n	80040f8 <LpmSetStopMode+0x1c>
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	20000368 	.word	0x20000368

08004110 <RtcGetCalendarValue>:

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8004110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004112:	0005      	movs	r5, r0
 8004114:	000c      	movs	r4, r1
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8004116:	4e23      	ldr	r6, [pc, #140]	; (80041a4 <RtcGetCalendarValue+0x94>)
        HAL_RTC_GetDate( &hrtc, date, RTC_FORMAT_BIN );
 8004118:	4f23      	ldr	r7, [pc, #140]	; (80041a8 <RtcGetCalendarValue+0x98>)
        firstRead = RTC->SSR;
 800411a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        HAL_RTC_GetDate( &hrtc, date, RTC_FORMAT_BIN );
 800411c:	2200      	movs	r2, #0
 800411e:	0029      	movs	r1, r5
 8004120:	0038      	movs	r0, r7
        firstRead = RTC->SSR;
 8004122:	9301      	str	r3, [sp, #4]
        HAL_RTC_GetDate( &hrtc, date, RTC_FORMAT_BIN );
 8004124:	f00b f9f8 	bl	800f518 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &hrtc, time, RTC_FORMAT_BIN );
 8004128:	2200      	movs	r2, #0
 800412a:	0021      	movs	r1, r4
 800412c:	0038      	movs	r0, r7
 800412e:	f00b f9c9 	bl	800f4c4 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8004132:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004134:	9a01      	ldr	r2, [sp, #4]
 8004136:	4293      	cmp	r3, r2
 8004138:	d1ed      	bne.n	8004116 <RtcGetCalendarValue+0x6>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 800413a:	2103      	movs	r1, #3
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 800413c:	78ea      	ldrb	r2, [r5, #3]
 800413e:	481b      	ldr	r0, [pc, #108]	; (80041ac <RtcGetCalendarValue+0x9c>)

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8004140:	786e      	ldrb	r6, [r5, #1]
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 8004142:	4350      	muls	r0, r2
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8004144:	400a      	ands	r2, r1
 8004146:	4253      	negs	r3, r2
 8004148:	415a      	adcs	r2, r3
 800414a:	4253      	negs	r3, r2
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <RtcGetCalendarValue+0xa0>)
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 800414e:	3e01      	subs	r6, #1
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8004150:	4013      	ands	r3, r2
 8004152:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <RtcGetCalendarValue+0xa4>)

    seconds += ( date->Date -1 );
 8004154:	78ad      	ldrb	r5, [r5, #2]
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8004156:	189b      	adds	r3, r3, r2
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8004158:	223d      	movs	r2, #61	; 0x3d
 800415a:	4372      	muls	r2, r6
 800415c:	0076      	lsls	r6, r6, #1
 800415e:	40f3      	lsrs	r3, r6
 8004160:	3201      	adds	r2, #1
 8004162:	0fd7      	lsrs	r7, r2, #31
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 8004164:	3003      	adds	r0, #3
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8004166:	18ba      	adds	r2, r7, r2
 8004168:	3d01      	subs	r5, #1
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 800416a:	0880      	lsrs	r0, r0, #2
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 800416c:	1052      	asrs	r2, r2, #1
 800416e:	1828      	adds	r0, r5, r0
 8004170:	1810      	adds	r0, r2, r0
 8004172:	400b      	ands	r3, r1
    seconds += ( date->Date -1 );
 8004174:	1ac3      	subs	r3, r0, r3

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 8004176:	4810      	ldr	r0, [pc, #64]	; (80041b8 <RtcGetCalendarValue+0xa8>)

    seconds += ( ( uint32_t )time->Seconds + 
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8004178:	7822      	ldrb	r2, [r4, #0]
    seconds *= SECONDS_IN_1DAY;
 800417a:	4358      	muls	r0, r3
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 800417c:	23e1      	movs	r3, #225	; 0xe1
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	4353      	muls	r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8004182:	223c      	movs	r2, #60	; 0x3c
 8004184:	7861      	ldrb	r1, [r4, #1]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8004186:	25ff      	movs	r5, #255	; 0xff
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8004188:	434a      	muls	r2, r1
 800418a:	189b      	adds	r3, r3, r2
    seconds += ( ( uint32_t )time->Seconds + 
 800418c:	78a2      	ldrb	r2, [r4, #2]
    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 800418e:	6864      	ldr	r4, [r4, #4]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8004190:	189b      	adds	r3, r3, r2
    seconds += ( ( uint32_t )time->Seconds + 
 8004192:	181b      	adds	r3, r3, r0
    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8004194:	0e19      	lsrs	r1, r3, #24
 8004196:	0218      	lsls	r0, r3, #8
 8004198:	2300      	movs	r3, #0
 800419a:	1b2a      	subs	r2, r5, r4
 800419c:	1880      	adds	r0, r0, r2
 800419e:	4159      	adcs	r1, r3

    return( calendarValue );
}
 80041a0:	b003      	add	sp, #12
 80041a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a4:	40002800 	.word	0x40002800
 80041a8:	20001994 	.word	0x20001994
 80041ac:	000005b5 	.word	0x000005b5
 80041b0:	ffaaaab0 	.word	0xffaaaab0
 80041b4:	0099aaa0 	.word	0x0099aaa0
 80041b8:	00015180 	.word	0x00015180

080041bc <RtcSetTimerContext>:
{
 80041bc:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 80041be:	4c04      	ldr	r4, [pc, #16]	; (80041d0 <RtcSetTimerContext+0x14>)
 80041c0:	0020      	movs	r0, r4
 80041c2:	1d21      	adds	r1, r4, #4
 80041c4:	3018      	adds	r0, #24
 80041c6:	f7ff ffa3 	bl	8004110 <RtcGetCalendarValue>
 80041ca:	6020      	str	r0, [r4, #0]
}
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000398 	.word	0x20000398

080041d4 <RtcInit>:
{
 80041d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( RtcInitialized == false )
 80041d6:	4f21      	ldr	r7, [pc, #132]	; (800425c <RtcInit+0x88>)
{
 80041d8:	b087      	sub	sp, #28
    if( RtcInitialized == false )
 80041da:	783c      	ldrb	r4, [r7, #0]
 80041dc:	2c00      	cmp	r4, #0
 80041de:	d13a      	bne.n	8004256 <RtcInit+0x82>
        __HAL_RCC_RTC_ENABLE( );
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <RtcInit+0x8c>)
 80041e4:	02db      	lsls	r3, r3, #11
 80041e6:	6d11      	ldr	r1, [r2, #80]	; 0x50
        hrtc.Instance            = RTC;
 80041e8:	4d1e      	ldr	r5, [pc, #120]	; (8004264 <RtcInit+0x90>)
        __HAL_RCC_RTC_ENABLE( );
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6513      	str	r3, [r2, #80]	; 0x50
        hrtc.Instance            = RTC;
 80041ee:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <RtcInit+0x94>)
        HAL_RTC_Init( &hrtc );
 80041f0:	0028      	movs	r0, r5
        hrtc.Instance            = RTC;
 80041f2:	602b      	str	r3, [r5, #0]
        hrtc.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 80041f4:	237f      	movs	r3, #127	; 0x7f
 80041f6:	60ab      	str	r3, [r5, #8]
        hrtc.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 80041f8:	3380      	adds	r3, #128	; 0x80
        date.Month                    = RTC_MONTH_JANUARY;
 80041fa:	2601      	movs	r6, #1
        hrtc.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 80041fc:	60eb      	str	r3, [r5, #12]
        hrtc.Init.HourFormat     = RTC_HOURFORMAT_24;
 80041fe:	606c      	str	r4, [r5, #4]
        hrtc.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8004200:	612c      	str	r4, [r5, #16]
        hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004202:	61ac      	str	r4, [r5, #24]
        hrtc.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004204:	61ec      	str	r4, [r5, #28]
        HAL_RTC_Init( &hrtc );
 8004206:	f00a ff25 	bl	800f054 <HAL_RTC_Init>
        date.Year                     = 0;
 800420a:	466b      	mov	r3, sp
        HAL_RTC_SetDate( &hrtc, &date, RTC_FORMAT_BIN );
 800420c:	0022      	movs	r2, r4
 800420e:	4669      	mov	r1, sp
 8004210:	0028      	movs	r0, r5
        date.Year                     = 0;
 8004212:	70dc      	strb	r4, [r3, #3]
        date.Month                    = RTC_MONTH_JANUARY;
 8004214:	705e      	strb	r6, [r3, #1]
        date.Date                     = 1;
 8004216:	709e      	strb	r6, [r3, #2]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8004218:	701e      	strb	r6, [r3, #0]
        HAL_RTC_SetDate( &hrtc, &date, RTC_FORMAT_BIN );
 800421a:	f00b f807 	bl	800f22c <HAL_RTC_SetDate>
        HAL_RTC_SetTime( &hrtc, &time, RTC_FORMAT_BIN );
 800421e:	0022      	movs	r2, r4
 8004220:	a901      	add	r1, sp, #4
 8004222:	0028      	movs	r0, r5
        time.Hours                    = 0;
 8004224:	9401      	str	r4, [sp, #4]
        time.SubSeconds               = 0;
 8004226:	9402      	str	r4, [sp, #8]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8004228:	9405      	str	r4, [sp, #20]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 800422a:	9404      	str	r4, [sp, #16]
        HAL_RTC_SetTime( &hrtc, &time, RTC_FORMAT_BIN );
 800422c:	f00a ff7a 	bl	800f124 <HAL_RTC_SetTime>
        HAL_RTCEx_EnableBypassShadow( &hrtc );
 8004230:	0028      	movs	r0, r5
 8004232:	f00b fa77 	bl	800f724 <HAL_RTCEx_EnableBypassShadow>
        HAL_NVIC_SetPriority( RTC_IRQn, 1, 0 );
 8004236:	0022      	movs	r2, r4
 8004238:	0031      	movs	r1, r6
 800423a:	2002      	movs	r0, #2
 800423c:	f008 fcf2 	bl	800cc24 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 8004240:	2002      	movs	r0, #2
 8004242:	f008 fd19 	bl	800cc78 <HAL_NVIC_EnableIRQ>
        HAL_RTC_DeactivateAlarm( &hrtc, RTC_ALARM_A );
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0028      	movs	r0, r5
 800424a:	0049      	lsls	r1, r1, #1
 800424c:	f00a fe6a 	bl	800ef24 <HAL_RTC_DeactivateAlarm>
        RtcSetTimerContext( );
 8004250:	f7ff ffb4 	bl	80041bc <RtcSetTimerContext>
        RtcInitialized = true;
 8004254:	703e      	strb	r6, [r7, #0]
}
 8004256:	b007      	add	sp, #28
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	20000394 	.word	0x20000394
 8004260:	40021000 	.word	0x40021000
 8004264:	20001994 	.word	0x20001994
 8004268:	40002800 	.word	0x40002800

0800426c <RtcGetTimerContext>:
    return RtcTimerContext.Time;
 800426c:	4b01      	ldr	r3, [pc, #4]	; (8004274 <RtcGetTimerContext+0x8>)
 800426e:	6818      	ldr	r0, [r3, #0]
}
 8004270:	4770      	bx	lr
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	20000398 	.word	0x20000398

08004278 <RtcGetMinimumTimeout>:
}
 8004278:	2003      	movs	r0, #3
 800427a:	4770      	bx	lr

0800427c <RtcMs2Tick>:
{
 800427c:	b510      	push	{r4, lr}
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 800427e:	0ec1      	lsrs	r1, r0, #27
 8004280:	227d      	movs	r2, #125	; 0x7d
 8004282:	2300      	movs	r3, #0
 8004284:	0140      	lsls	r0, r0, #5
 8004286:	f7fc f92f 	bl	80004e8 <__aeabi_uldivmod>
}
 800428a:	bd10      	pop	{r4, pc}

0800428c <RtcTick2Ms>:
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 800428c:	21fa      	movs	r1, #250	; 0xfa
{
 800428e:	0002      	movs	r2, r0
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8004290:	0089      	lsls	r1, r1, #2
    tick = tick & PREDIV_S;
 8004292:	b2c0      	uxtb	r0, r0
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8004294:	4348      	muls	r0, r1
    uint32_t seconds = tick >> N_PREDIV_S;
 8004296:	0a12      	lsrs	r2, r2, #8
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8004298:	434a      	muls	r2, r1
 800429a:	0a00      	lsrs	r0, r0, #8
 800429c:	1880      	adds	r0, r0, r2
}
 800429e:	4770      	bx	lr

080042a0 <RtcStopAlarm>:
    HAL_RTC_DeactivateAlarm( &hrtc, RTC_ALARM_A );
 80042a0:	2180      	movs	r1, #128	; 0x80
{
 80042a2:	b510      	push	{r4, lr}
    HAL_RTC_DeactivateAlarm( &hrtc, RTC_ALARM_A );
 80042a4:	4c07      	ldr	r4, [pc, #28]	; (80042c4 <RtcStopAlarm+0x24>)
 80042a6:	0049      	lsls	r1, r1, #1
 80042a8:	0020      	movs	r0, r4
 80042aa:	f00a fe3b 	bl	800ef24 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG( &hrtc, RTC_FLAG_ALRAF );
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <RtcStopAlarm+0x28>)
 80042b2:	68ca      	ldr	r2, [r1, #12]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	4313      	orrs	r3, r2
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 80042b8:	2280      	movs	r2, #128	; 0x80
    __HAL_RTC_ALARM_CLEAR_FLAG( &hrtc, RTC_FLAG_ALRAF );
 80042ba:	60cb      	str	r3, [r1, #12]
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <RtcStopAlarm+0x2c>)
 80042be:	0292      	lsls	r2, r2, #10
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bd10      	pop	{r4, pc}
 80042c4:	20001994 	.word	0x20001994
 80042c8:	fffffe7f 	.word	0xfffffe7f
 80042cc:	40010400 	.word	0x40010400

080042d0 <RtcStartAlarm>:
{
 80042d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 80042d2:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <RtcStartAlarm+0xf0>)
{
 80042d4:	b087      	sub	sp, #28
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 80042d6:	795a      	ldrb	r2, [r3, #5]
 80042d8:	791d      	ldrb	r5, [r3, #4]
 80042da:	9204      	str	r2, [sp, #16]
 80042dc:	799a      	ldrb	r2, [r3, #6]
 80042de:	689f      	ldr	r7, [r3, #8]
 80042e0:	9203      	str	r2, [sp, #12]
 80042e2:	79da      	ldrb	r2, [r3, #7]
{
 80042e4:	0006      	movs	r6, r0
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 80042e6:	9202      	str	r2, [sp, #8]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 80042e8:	7e5a      	ldrb	r2, [r3, #25]
 80042ea:	9201      	str	r2, [sp, #4]
 80042ec:	7e9c      	ldrb	r4, [r3, #26]
 80042ee:	7edb      	ldrb	r3, [r3, #27]
 80042f0:	9305      	str	r3, [sp, #20]
    RtcStopAlarm( );
 80042f2:	f7ff ffd5 	bl	80042a0 <RtcStopAlarm>
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 80042f6:	22ff      	movs	r2, #255	; 0xff
 80042f8:	1bd7      	subs	r7, r2, r7
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 80042fa:	4032      	ands	r2, r6
 80042fc:	18ba      	adds	r2, r7, r2
    timeout >>= N_PREDIV_S;
 80042fe:	0a33      	lsrs	r3, r6, #8
    while( timeout >= TM_SECONDS_IN_1DAY )
 8004300:	4e30      	ldr	r6, [pc, #192]	; (80043c4 <RtcStartAlarm+0xf4>)
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8004302:	b292      	uxth	r2, r2
    rtcAlarmDays =  date.Date;
 8004304:	b2a0      	uxth	r0, r4
    while( timeout >= TM_SECONDS_IN_1DAY )
 8004306:	42b3      	cmp	r3, r6
 8004308:	d83b      	bhi.n	8004382 <RtcStartAlarm+0xb2>
    while( timeout >= TM_SECONDS_IN_1HOUR )
 800430a:	21e1      	movs	r1, #225	; 0xe1
    rtcAlarmHours = time.Hours;
 800430c:	b2ad      	uxth	r5, r5
    while( timeout >= TM_SECONDS_IN_1HOUR )
 800430e:	0109      	lsls	r1, r1, #4
 8004310:	428b      	cmp	r3, r1
 8004312:	d23b      	bcs.n	800438c <RtcStartAlarm+0xbc>
    rtcAlarmMinutes = time.Minutes;
 8004314:	4669      	mov	r1, sp
 8004316:	8a0f      	ldrh	r7, [r1, #16]
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8004318:	2b3b      	cmp	r3, #59	; 0x3b
 800431a:	d83c      	bhi.n	8004396 <RtcStartAlarm+0xc6>
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 800431c:	0a14      	lsrs	r4, r2, #8
 800431e:	b2d6      	uxtb	r6, r2
 8004320:	9a03      	ldr	r2, [sp, #12]
 8004322:	18a4      	adds	r4, r4, r2
 8004324:	18e4      	adds	r4, r4, r3
 8004326:	b2a4      	uxth	r4, r4
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8004328:	2c3b      	cmp	r4, #59	; 0x3b
 800432a:	d838      	bhi.n	800439e <RtcStartAlarm+0xce>
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 800432c:	2f3b      	cmp	r7, #59	; 0x3b
 800432e:	d83b      	bhi.n	80043a8 <RtcStartAlarm+0xd8>
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8004330:	2d17      	cmp	r5, #23
 8004332:	d83e      	bhi.n	80043b2 <RtcStartAlarm+0xe2>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8004334:	9b01      	ldr	r3, [sp, #4]
    if( date.Year % 4 == 0 ) 
 8004336:	9a05      	ldr	r2, [sp, #20]
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8004338:	3b01      	subs	r3, #1
    if( date.Year % 4 == 0 ) 
 800433a:	0792      	lsls	r2, r2, #30
 800433c:	d13e      	bne.n	80043bc <RtcStartAlarm+0xec>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 800433e:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <RtcStartAlarm+0xf8>)
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8004340:	5cd1      	ldrb	r1, [r2, r3]
 8004342:	4281      	cmp	r1, r0
 8004344:	d202      	bcs.n	800434c <RtcStartAlarm+0x7c>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8004346:	f7fc f87f 	bl	8000448 <__aeabi_idivmod>
 800434a:	b288      	uxth	r0, r1
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 800434c:	23ff      	movs	r3, #255	; 0xff
 800434e:	1b9e      	subs	r6, r3, r6
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8004350:	2380      	movs	r3, #128	; 0x80
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8004352:	491e      	ldr	r1, [pc, #120]	; (80043cc <RtcStartAlarm+0xfc>)
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8004354:	051b      	lsls	r3, r3, #20
 8004356:	618b      	str	r3, [r1, #24]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8004358:	1c4b      	adds	r3, r1, #1
 800435a:	77d8      	strb	r0, [r3, #31]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 800435c:	9b02      	ldr	r3, [sp, #8]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800435e:	2200      	movs	r2, #0
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8004360:	70cb      	strb	r3, [r1, #3]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8004362:	2380      	movs	r3, #128	; 0x80
    HAL_RTC_SetAlarm_IT( &hrtc, &RtcAlarm, RTC_FORMAT_BIN );
 8004364:	481a      	ldr	r0, [pc, #104]	; (80043d0 <RtcStartAlarm+0x100>)
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8004366:	005b      	lsls	r3, r3, #1
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8004368:	604e      	str	r6, [r1, #4]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 800436a:	708c      	strb	r4, [r1, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 800436c:	704f      	strb	r7, [r1, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 800436e:	700d      	strb	r5, [r1, #0]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8004370:	61ca      	str	r2, [r1, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8004372:	614a      	str	r2, [r1, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8004374:	624b      	str	r3, [r1, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004376:	60ca      	str	r2, [r1, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004378:	610a      	str	r2, [r1, #16]
    HAL_RTC_SetAlarm_IT( &hrtc, &RtcAlarm, RTC_FORMAT_BIN );
 800437a:	f00a ffc3 	bl	800f304 <HAL_RTC_SetAlarm_IT>
}
 800437e:	b007      	add	sp, #28
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeout -= TM_SECONDS_IN_1DAY;
 8004382:	4914      	ldr	r1, [pc, #80]	; (80043d4 <RtcStartAlarm+0x104>)
        rtcAlarmDays++;
 8004384:	3001      	adds	r0, #1
        timeout -= TM_SECONDS_IN_1DAY;
 8004386:	185b      	adds	r3, r3, r1
        rtcAlarmDays++;
 8004388:	b280      	uxth	r0, r0
 800438a:	e7bc      	b.n	8004306 <RtcStartAlarm+0x36>
        timeout -= TM_SECONDS_IN_1HOUR;
 800438c:	4c12      	ldr	r4, [pc, #72]	; (80043d8 <RtcStartAlarm+0x108>)
        rtcAlarmHours++;
 800438e:	3501      	adds	r5, #1
        timeout -= TM_SECONDS_IN_1HOUR;
 8004390:	191b      	adds	r3, r3, r4
        rtcAlarmHours++;
 8004392:	b2ad      	uxth	r5, r5
 8004394:	e7bc      	b.n	8004310 <RtcStartAlarm+0x40>
        rtcAlarmMinutes++;
 8004396:	3701      	adds	r7, #1
        timeout -= TM_SECONDS_IN_1MINUTE;
 8004398:	3b3c      	subs	r3, #60	; 0x3c
        rtcAlarmMinutes++;
 800439a:	b2bf      	uxth	r7, r7
 800439c:	e7bc      	b.n	8004318 <RtcStartAlarm+0x48>
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 800439e:	3c3c      	subs	r4, #60	; 0x3c
        rtcAlarmMinutes++;
 80043a0:	3701      	adds	r7, #1
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 80043a2:	b2a4      	uxth	r4, r4
        rtcAlarmMinutes++;
 80043a4:	b2bf      	uxth	r7, r7
 80043a6:	e7bf      	b.n	8004328 <RtcStartAlarm+0x58>
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 80043a8:	3f3c      	subs	r7, #60	; 0x3c
        rtcAlarmHours++;
 80043aa:	3501      	adds	r5, #1
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 80043ac:	b2bf      	uxth	r7, r7
        rtcAlarmHours++;
 80043ae:	b2ad      	uxth	r5, r5
 80043b0:	e7bc      	b.n	800432c <RtcStartAlarm+0x5c>
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 80043b2:	3d18      	subs	r5, #24
        rtcAlarmDays++;
 80043b4:	3001      	adds	r0, #1
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 80043b6:	b2ad      	uxth	r5, r5
        rtcAlarmDays++;
 80043b8:	b280      	uxth	r0, r0
 80043ba:	e7b9      	b.n	8004330 <RtcStartAlarm+0x60>
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 80043bc:	4a07      	ldr	r2, [pc, #28]	; (80043dc <RtcStartAlarm+0x10c>)
 80043be:	e7bf      	b.n	8004340 <RtcStartAlarm+0x70>
 80043c0:	20000398 	.word	0x20000398
 80043c4:	0001517f 	.word	0x0001517f
 80043c8:	0801896c 	.word	0x0801896c
 80043cc:	2000036c 	.word	0x2000036c
 80043d0:	20001994 	.word	0x20001994
 80043d4:	fffeae80 	.word	0xfffeae80
 80043d8:	fffff1f0 	.word	0xfffff1f0
 80043dc:	08018960 	.word	0x08018960

080043e0 <RtcGetTimerValue>:
{
 80043e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 80043e2:	4668      	mov	r0, sp
 80043e4:	a901      	add	r1, sp, #4
 80043e6:	f7ff fe93 	bl	8004110 <RtcGetCalendarValue>
}
 80043ea:	b007      	add	sp, #28
 80043ec:	bd00      	pop	{pc}
	...

080043f0 <RtcGetTimerElapsedTime>:
{
 80043f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 80043f2:	4668      	mov	r0, sp
 80043f4:	a901      	add	r1, sp, #4
 80043f6:	f7ff fe8b 	bl	8004110 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 80043fa:	4b02      	ldr	r3, [pc, #8]	; (8004404 <RtcGetTimerElapsedTime+0x14>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1ac0      	subs	r0, r0, r3
}
 8004400:	b007      	add	sp, #28
 8004402:	bd00      	pop	{pc}
 8004404:	20000398 	.word	0x20000398

08004408 <RtcSetAlarm>:
{
 8004408:	b510      	push	{r4, lr}
 800440a:	0004      	movs	r4, r0
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 800440c:	f7ff fff0 	bl	80043f0 <RtcGetTimerElapsedTime>
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 8004410:	2100      	movs	r1, #0
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8004412:	1a20      	subs	r0, r4, r0
 8004414:	2803      	cmp	r0, #3
 8004416:	d800      	bhi.n	800441a <RtcSetAlarm+0x12>
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 8004418:	2101      	movs	r1, #1
 800441a:	2004      	movs	r0, #4
 800441c:	f7ff fe5e 	bl	80040dc <LpmSetStopMode>
    RtcStartAlarm( timeout );
 8004420:	0020      	movs	r0, r4
 8004422:	f7ff ff55 	bl	80042d0 <RtcStartAlarm>
}
 8004426:	bd10      	pop	{r4, pc}

08004428 <RtcGetCalendarTime>:

uint32_t RtcGetCalendarTime( uint16_t *milliseconds )
{
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	0006      	movs	r6, r0
    RTC_TimeTypeDef time ;
    RTC_DateTypeDef date;
    uint32_t ticks;

    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 800442e:	a901      	add	r1, sp, #4
 8004430:	4668      	mov	r0, sp
 8004432:	f7ff fe6d 	bl	8004110 <RtcGetCalendarValue>
 8004436:	0004      	movs	r4, r0

    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );

    ticks =  ( uint32_t )calendarValue & PREDIV_S;
 8004438:	b2c0      	uxtb	r0, r0
    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 800443a:	000d      	movs	r5, r1

    *milliseconds = RtcTick2Ms( ticks );
 800443c:	f7ff ff26 	bl	800428c <RtcTick2Ms>
    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );
 8004440:	062d      	lsls	r5, r5, #24
    *milliseconds = RtcTick2Ms( ticks );
 8004442:	8030      	strh	r0, [r6, #0]
    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );
 8004444:	0a20      	lsrs	r0, r4, #8
 8004446:	4328      	orrs	r0, r5

    return seconds;
}
 8004448:	b006      	add	sp, #24
 800444a:	bd70      	pop	{r4, r5, r6, pc}

0800444c <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */

void RTC_IRQHandler( void )
{
 800444c:	b510      	push	{r4, lr}
    // Enable low power at irq
    LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 800444e:	2100      	movs	r1, #0
 8004450:	2004      	movs	r0, #4
 8004452:	f7ff fe43 	bl	80040dc <LpmSetStopMode>

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <RTC_IRQHandler+0x38>)

    // Gets the AlarmA interrupt source enable status
    if( __HAL_RTC_ALARM_GET_IT_SOURCE( &hrtc, RTC_IT_ALRA ) != RESET )
 800445a:	4c0b      	ldr	r4, [pc, #44]	; (8004488 <RTC_IRQHandler+0x3c>)
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 800445c:	0292      	lsls	r2, r2, #10
 800445e:	615a      	str	r2, [r3, #20]
    if( __HAL_RTC_ALARM_GET_IT_SOURCE( &hrtc, RTC_IT_ALRA ) != RESET )
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	04d2      	lsls	r2, r2, #19
 8004466:	d509      	bpl.n	800447c <RTC_IRQHandler+0x30>
    {
        // Gets the pending status of the AlarmA interrupt
        if( __HAL_RTC_ALARM_GET_FLAG( &hrtc, RTC_FLAG_ALRAF ) != RESET )
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	05d2      	lsls	r2, r2, #23
 800446c:	d506      	bpl.n	800447c <RTC_IRQHandler+0x30>
        {
            // Clear the AlarmA interrupt pending bit
            __HAL_RTC_ALARM_CLEAR_FLAG( &hrtc, RTC_FLAG_ALRAF );
 800446e:	68d9      	ldr	r1, [r3, #12]
 8004470:	4a06      	ldr	r2, [pc, #24]	; (800448c <RTC_IRQHandler+0x40>)
 8004472:	b2c9      	uxtb	r1, r1
 8004474:	430a      	orrs	r2, r1
 8004476:	60da      	str	r2, [r3, #12]
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
    TimerIrqHandler( );
 8004478:	f007 f9fc 	bl	800b874 <TimerIrqHandler>
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800447c:	0020      	movs	r0, r4
 800447e:	f00b f92b 	bl	800f6d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8004482:	bd10      	pop	{r4, pc}
 8004484:	40010400 	.word	0x40010400
 8004488:	20001994 	.word	0x20001994
 800448c:	fffffe7f 	.word	0xfffffe7f

08004490 <RtcBkupWrite>:
}

void RtcBkupWrite( uint32_t data0, uint32_t data1 )
{
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	000c      	movs	r4, r1
    HAL_RTCEx_BKUPWrite( &hrtc, RTC_BKP_DR0, data0 );
 8004494:	4d05      	ldr	r5, [pc, #20]	; (80044ac <RtcBkupWrite+0x1c>)
{
 8004496:	0002      	movs	r2, r0
    HAL_RTCEx_BKUPWrite( &hrtc, RTC_BKP_DR0, data0 );
 8004498:	2100      	movs	r1, #0
 800449a:	0028      	movs	r0, r5
 800449c:	f00b f936 	bl	800f70c <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite( &hrtc, RTC_BKP_DR1, data1 );
 80044a0:	0028      	movs	r0, r5
 80044a2:	0022      	movs	r2, r4
 80044a4:	2101      	movs	r1, #1
 80044a6:	f00b f931 	bl	800f70c <HAL_RTCEx_BKUPWrite>
}
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	20001994 	.word	0x20001994

080044b0 <RtcBkupRead>:

void RtcBkupRead( uint32_t *data0, uint32_t *data1 )
{
 80044b0:	b570      	push	{r4, r5, r6, lr}
  *data0 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR0 );
 80044b2:	4e07      	ldr	r6, [pc, #28]	; (80044d0 <RtcBkupRead+0x20>)
{
 80044b4:	0005      	movs	r5, r0
 80044b6:	000c      	movs	r4, r1
  *data0 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR0 );
 80044b8:	0030      	movs	r0, r6
 80044ba:	2100      	movs	r1, #0
 80044bc:	f00b f92c 	bl	800f718 <HAL_RTCEx_BKUPRead>
  *data1 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR1 );
 80044c0:	2101      	movs	r1, #1
  *data0 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR0 );
 80044c2:	6028      	str	r0, [r5, #0]
  *data1 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR1 );
 80044c4:	0030      	movs	r0, r6
 80044c6:	f00b f927 	bl	800f718 <HAL_RTCEx_BKUPRead>
 80044ca:	6020      	str	r0, [r4, #0]
}
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	20001994 	.word	0x20001994

080044d4 <SpiInOut>:

    if(obj == NULL || hspi1.Instance == NULL) {
        assert_param(LMN_STATUS_ERROR);
    }

    __HAL_SPI_ENABLE(&hspi1);
 80044d4:	2340      	movs	r3, #64	; 0x40
uint16_t SpiInOut(Spi_t *obj, uint16_t outData) {
 80044d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_SPI_ENABLE(&hspi1);
 80044d8:	4d0c      	ldr	r5, [pc, #48]	; (800450c <SpiInOut+0x38>)
uint16_t SpiInOut(Spi_t *obj, uint16_t outData) {
 80044da:	000c      	movs	r4, r1
    __HAL_SPI_ENABLE(&hspi1);
 80044dc:	682a      	ldr	r2, [r5, #0]

    CRITICAL_SECTION_BEGIN();
 80044de:	a801      	add	r0, sp, #4
    __HAL_SPI_ENABLE(&hspi1);
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6013      	str	r3, [r2, #0]
    CRITICAL_SECTION_BEGIN();
 80044e6:	f7ff fc93 	bl	8003e10 <BoardCriticalSectionBegin>

    while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 80044ea:	2202      	movs	r2, #2
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	4211      	tst	r1, r2
 80044f2:	d0fc      	beq.n	80044ee <SpiInOut+0x1a>
    hspi1.Instance->DR = (uint16_t)(outData & 0xFF);

    while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET);
 80044f4:	2201      	movs	r2, #1
    hspi1.Instance->DR = (uint16_t)(outData & 0xFF);
 80044f6:	b2e4      	uxtb	r4, r4
 80044f8:	60dc      	str	r4, [r3, #12]
    while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET);
 80044fa:	6899      	ldr	r1, [r3, #8]
 80044fc:	4211      	tst	r1, r2
 80044fe:	d0fc      	beq.n	80044fa <SpiInOut+0x26>
    rxData = (uint16_t)hspi1.Instance->DR;
 8004500:	68dc      	ldr	r4, [r3, #12]

    CRITICAL_SECTION_END();
 8004502:	a801      	add	r0, sp, #4
 8004504:	f7ff fc89 	bl	8003e1a <BoardCriticalSectionEnd>

    return rxData;
 8004508:	b2e0      	uxtb	r0, r4
}
 800450a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800450c:	20001a00 	.word	0x20001a00

08004510 <SX126xIoIrqInit>:
    //GpioInit( &SX126x.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    //GpioInit( &SX126x.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}

void SX126xIoIrqInit( DioIrqHandler dioIrq )
{
 8004510:	b510      	push	{r4, lr}
 8004512:	0003      	movs	r3, r0
    GpioSetInterrupt( &SX126x.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dioIrq );
 8004514:	2203      	movs	r2, #3
 8004516:	2101      	movs	r1, #1
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <SX126xIoIrqInit+0x10>)
 800451a:	f007 f81c 	bl	800b556 <GpioSetInterrupt>
}
 800451e:	bd10      	pop	{r4, pc}
 8004520:	20001cb8 	.word	0x20001cb8

08004524 <SX126xIoTcxoInit>:
 8004524:	4770      	bx	lr

08004526 <SX126xGetBoardTcxoWakeupTime>:
}

uint32_t SX126xGetBoardTcxoWakeupTime( void )
{
    return BOARD_TCXO_WAKEUP_TIME;
}
 8004526:	2000      	movs	r0, #0
 8004528:	4770      	bx	lr

0800452a <SX126xIoRfSwitchInit>:

void SX126xIoRfSwitchInit( void )
{
 800452a:	b510      	push	{r4, lr}
    SX126xSetDio2AsRfSwitchCtrl( true );
 800452c:	2001      	movs	r0, #1
 800452e:	f011 f9e8 	bl	8015902 <SX126xSetDio2AsRfSwitchCtrl>
}
 8004532:	bd10      	pop	{r4, pc}

08004534 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 8004534:	4b01      	ldr	r3, [pc, #4]	; (800453c <SX126xGetOperatingMode+0x8>)
 8004536:	7818      	ldrb	r0, [r3, #0]
}
 8004538:	4770      	bx	lr
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	200003b4 	.word	0x200003b4

08004540 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 8004540:	4b01      	ldr	r3, [pc, #4]	; (8004548 <SX126xSetOperatingMode+0x8>)
 8004542:	7018      	strb	r0, [r3, #0]
            SX126xDbgPinTxWrite( 0 );
            SX126xDbgPinRxWrite( 0 );
            break;
    }
#endif
}
 8004544:	4770      	bx	lr
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	200003b4 	.word	0x200003b4

0800454c <SX126xReset>:

void SX126xReset( void )
{
 800454c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    DelayMs( 10 );
    GpioInit( &SX126x.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800454e:	2400      	movs	r4, #0
    DelayMs( 10 );
 8004550:	200a      	movs	r0, #10
 8004552:	f006 fff3 	bl	800b53c <DelayMs>
    GpioInit( &SX126x.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8004556:	4d0c      	ldr	r5, [pc, #48]	; (8004588 <SX126xReset+0x3c>)
 8004558:	0023      	movs	r3, r4
 800455a:	0028      	movs	r0, r5
 800455c:	2201      	movs	r2, #1
 800455e:	2114      	movs	r1, #20
 8004560:	9401      	str	r4, [sp, #4]
 8004562:	9400      	str	r4, [sp, #0]
 8004564:	f006 ffee 	bl	800b544 <GpioInit>
    DelayMs( 20 );
 8004568:	2014      	movs	r0, #20
 800456a:	f006 ffe7 	bl	800b53c <DelayMs>
    GpioInit( &SX126x.Reset, RADIO_RESET, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // internal pull-up
 800456e:	0028      	movs	r0, r5
 8004570:	0023      	movs	r3, r4
 8004572:	2203      	movs	r2, #3
 8004574:	2114      	movs	r1, #20
 8004576:	9401      	str	r4, [sp, #4]
 8004578:	9400      	str	r4, [sp, #0]
 800457a:	f006 ffe3 	bl	800b544 <GpioInit>
    DelayMs( 10 );
 800457e:	200a      	movs	r0, #10
 8004580:	f006 ffdc 	bl	800b53c <DelayMs>
}
 8004584:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	20001c90 	.word	0x20001c90

0800458c <SX126xWaitOnBusy>:

void SX126xWaitOnBusy( void )
{
 800458c:	b510      	push	{r4, lr}
    while( GpioRead( &SX126x.BUSY ) == 1 );
 800458e:	4803      	ldr	r0, [pc, #12]	; (800459c <SX126xWaitOnBusy+0x10>)
 8004590:	f006 ffe9 	bl	800b566 <GpioRead>
 8004594:	2801      	cmp	r0, #1
 8004596:	d0fa      	beq.n	800458e <SX126xWaitOnBusy+0x2>
}
 8004598:	bd10      	pop	{r4, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	20001ca4 	.word	0x20001ca4

080045a0 <SX126xWakeup>:

void SX126xWakeup( void )
{
 80045a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    CRITICAL_SECTION_BEGIN( );
 80045a2:	a801      	add	r0, sp, #4
 80045a4:	f7ff fc34 	bl	8003e10 <BoardCriticalSectionBegin>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 80045a8:	4c0d      	ldr	r4, [pc, #52]	; (80045e0 <SX126xWakeup+0x40>)
 80045aa:	2100      	movs	r1, #0
 80045ac:	0020      	movs	r0, r4
 80045ae:	f006 ffd6 	bl	800b55e <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_GET_STATUS );
 80045b2:	4d0c      	ldr	r5, [pc, #48]	; (80045e4 <SX126xWakeup+0x44>)
 80045b4:	21c0      	movs	r1, #192	; 0xc0
 80045b6:	0028      	movs	r0, r5
 80045b8:	f7ff ff8c 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, 0x00 );
 80045bc:	0028      	movs	r0, r5
 80045be:	2100      	movs	r1, #0
 80045c0:	f7ff ff88 	bl	80044d4 <SpiInOut>

    GpioWrite( &SX126x.Spi.Nss, 1 );
 80045c4:	2101      	movs	r1, #1
 80045c6:	0020      	movs	r0, r4
 80045c8:	f006 ffc9 	bl	800b55e <GpioWrite>

    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
 80045cc:	f7ff ffde 	bl	800458c <SX126xWaitOnBusy>
    OperatingMode = mode;
 80045d0:	2201      	movs	r2, #1
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SX126xWakeup+0x48>)

    // Update operating mode context variable
    SX126xSetOperatingMode( MODE_STDBY_RC );

    CRITICAL_SECTION_END( );
 80045d4:	a801      	add	r0, sp, #4
    OperatingMode = mode;
 80045d6:	701a      	strb	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 80045d8:	f7ff fc1f 	bl	8003e1a <BoardCriticalSectionEnd>
}
 80045dc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20001d30 	.word	0x20001d30
 80045e4:	20001cf4 	.word	0x20001cf4
 80045e8:	200003b4 	.word	0x200003b4

080045ec <SX126xWriteCommand>:

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80045ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ee:	0015      	movs	r5, r2
 80045f0:	000c      	movs	r4, r1
 80045f2:	9001      	str	r0, [sp, #4]
    SX126xCheckDeviceReady( );
 80045f4:	f010 ff98 	bl	8015528 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 80045f8:	4e0e      	ldr	r6, [pc, #56]	; (8004634 <SX126xWriteCommand+0x48>)
 80045fa:	2100      	movs	r1, #0
 80045fc:	0030      	movs	r0, r6
 80045fe:	f006 ffae 	bl	800b55e <GpioWrite>

    SpiInOut( &SX126x.Spi, ( uint8_t )command );
 8004602:	466b      	mov	r3, sp
 8004604:	4f0c      	ldr	r7, [pc, #48]	; (8004638 <SX126xWriteCommand+0x4c>)
 8004606:	8899      	ldrh	r1, [r3, #4]
 8004608:	0038      	movs	r0, r7
 800460a:	f7ff ff63 	bl	80044d4 <SpiInOut>

    for( uint16_t i = 0; i < size; i++ )
 800460e:	1965      	adds	r5, r4, r5
 8004610:	42ac      	cmp	r4, r5
 8004612:	d109      	bne.n	8004628 <SX126xWriteCommand+0x3c>
    {
        SpiInOut( &SX126x.Spi, buffer[i] );
    }

    GpioWrite( &SX126x.Spi.Nss, 1 );
 8004614:	2101      	movs	r1, #1
 8004616:	0030      	movs	r0, r6
 8004618:	f006 ffa1 	bl	800b55e <GpioWrite>

    if( command != RADIO_SET_SLEEP )
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	2b84      	cmp	r3, #132	; 0x84
 8004620:	d001      	beq.n	8004626 <SX126xWriteCommand+0x3a>
    {
        SX126xWaitOnBusy( );
 8004622:	f7ff ffb3 	bl	800458c <SX126xWaitOnBusy>
    }
}
 8004626:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SpiInOut( &SX126x.Spi, buffer[i] );
 8004628:	7821      	ldrb	r1, [r4, #0]
 800462a:	0038      	movs	r0, r7
 800462c:	f7ff ff52 	bl	80044d4 <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 8004630:	3401      	adds	r4, #1
 8004632:	e7ed      	b.n	8004610 <SX126xWriteCommand+0x24>
 8004634:	20001d30 	.word	0x20001d30
 8004638:	20001cf4 	.word	0x20001cf4

0800463c <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800463c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463e:	0006      	movs	r6, r0
 8004640:	0015      	movs	r5, r2
 8004642:	000c      	movs	r4, r1
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 8004644:	f010 ff70 	bl	8015528 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004648:	4f10      	ldr	r7, [pc, #64]	; (800468c <SX126xReadCommand+0x50>)
 800464a:	2100      	movs	r1, #0
 800464c:	0038      	movs	r0, r7
 800464e:	f006 ff86 	bl	800b55e <GpioWrite>

    SpiInOut( &SX126x.Spi, ( uint8_t )command );
 8004652:	b2b1      	uxth	r1, r6
 8004654:	4e0e      	ldr	r6, [pc, #56]	; (8004690 <SX126xReadCommand+0x54>)
 8004656:	1965      	adds	r5, r4, r5
 8004658:	0030      	movs	r0, r6
 800465a:	f7ff ff3b 	bl	80044d4 <SpiInOut>
    status = SpiInOut( &SX126x.Spi, 0x00 );
 800465e:	2100      	movs	r1, #0
 8004660:	0030      	movs	r0, r6
 8004662:	f7ff ff37 	bl	80044d4 <SpiInOut>
 8004666:	b2c3      	uxtb	r3, r0
 8004668:	9301      	str	r3, [sp, #4]
    for( uint16_t i = 0; i < size; i++ )
 800466a:	42ac      	cmp	r4, r5
 800466c:	d107      	bne.n	800467e <SX126xReadCommand+0x42>
    {
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
    }

    GpioWrite( &SX126x.Spi.Nss, 1 );
 800466e:	0038      	movs	r0, r7
 8004670:	2101      	movs	r1, #1
 8004672:	f006 ff74 	bl	800b55e <GpioWrite>

    SX126xWaitOnBusy( );
 8004676:	f7ff ff89 	bl	800458c <SX126xWaitOnBusy>

    return status;
}
 800467a:	9801      	ldr	r0, [sp, #4]
 800467c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
 800467e:	2100      	movs	r1, #0
 8004680:	0030      	movs	r0, r6
 8004682:	f7ff ff27 	bl	80044d4 <SpiInOut>
 8004686:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 8004688:	3401      	adds	r4, #1
 800468a:	e7ee      	b.n	800466a <SX126xReadCommand+0x2e>
 800468c:	20001d30 	.word	0x20001d30
 8004690:	20001cf4 	.word	0x20001cf4

08004694 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8004694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004696:	0005      	movs	r5, r0
 8004698:	000c      	movs	r4, r1
 800469a:	9201      	str	r2, [sp, #4]
    SX126xCheckDeviceReady( );
 800469c:	f010 ff44 	bl	8015528 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 80046a0:	4f11      	ldr	r7, [pc, #68]	; (80046e8 <SX126xWriteRegisters+0x54>)
 80046a2:	2100      	movs	r1, #0
 80046a4:	0038      	movs	r0, r7
 80046a6:	f006 ff5a 	bl	800b55e <GpioWrite>
    
    SpiInOut( &SX126x.Spi, RADIO_WRITE_REGISTER );
 80046aa:	4e10      	ldr	r6, [pc, #64]	; (80046ec <SX126xWriteRegisters+0x58>)
 80046ac:	210d      	movs	r1, #13
 80046ae:	0030      	movs	r0, r6
 80046b0:	f7ff ff10 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, ( address & 0xFF00 ) >> 8 );
 80046b4:	0a29      	lsrs	r1, r5, #8
 80046b6:	0030      	movs	r0, r6
 80046b8:	f7ff ff0c 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, address & 0x00FF );
 80046bc:	b2e9      	uxtb	r1, r5
 80046be:	0030      	movs	r0, r6
 80046c0:	f7ff ff08 	bl	80044d4 <SpiInOut>
    
    for( uint16_t i = 0; i < size; i++ )
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	18e5      	adds	r5, r4, r3
 80046c8:	42ac      	cmp	r4, r5
 80046ca:	d106      	bne.n	80046da <SX126xWriteRegisters+0x46>
    {
        SpiInOut( &SX126x.Spi, buffer[i] );
    }

    GpioWrite( &SX126x.Spi.Nss, 1 );
 80046cc:	0038      	movs	r0, r7
 80046ce:	2101      	movs	r1, #1
 80046d0:	f006 ff45 	bl	800b55e <GpioWrite>

    SX126xWaitOnBusy( );
 80046d4:	f7ff ff5a 	bl	800458c <SX126xWaitOnBusy>
}
 80046d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SpiInOut( &SX126x.Spi, buffer[i] );
 80046da:	7821      	ldrb	r1, [r4, #0]
 80046dc:	0030      	movs	r0, r6
 80046de:	f7ff fef9 	bl	80044d4 <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 80046e2:	3401      	adds	r4, #1
 80046e4:	e7f0      	b.n	80046c8 <SX126xWriteRegisters+0x34>
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	20001d30 	.word	0x20001d30
 80046ec:	20001cf4 	.word	0x20001cf4

080046f0 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 80046f0:	b507      	push	{r0, r1, r2, lr}
 80046f2:	466b      	mov	r3, sp
 80046f4:	71d9      	strb	r1, [r3, #7]
 80046f6:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 80046f8:	2201      	movs	r2, #1
 80046fa:	0019      	movs	r1, r3
 80046fc:	f7ff ffca 	bl	8004694 <SX126xWriteRegisters>
}
 8004700:	bd07      	pop	{r0, r1, r2, pc}
	...

08004704 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8004704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004706:	0005      	movs	r5, r0
 8004708:	000c      	movs	r4, r1
 800470a:	9201      	str	r2, [sp, #4]
    SX126xCheckDeviceReady( );
 800470c:	f010 ff0c 	bl	8015528 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004710:	4f13      	ldr	r7, [pc, #76]	; (8004760 <SX126xReadRegisters+0x5c>)
 8004712:	2100      	movs	r1, #0
 8004714:	0038      	movs	r0, r7
 8004716:	f006 ff22 	bl	800b55e <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_READ_REGISTER );
 800471a:	4e12      	ldr	r6, [pc, #72]	; (8004764 <SX126xReadRegisters+0x60>)
 800471c:	211d      	movs	r1, #29
 800471e:	0030      	movs	r0, r6
 8004720:	f7ff fed8 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, ( address & 0xFF00 ) >> 8 );
 8004724:	0a29      	lsrs	r1, r5, #8
 8004726:	0030      	movs	r0, r6
 8004728:	f7ff fed4 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, address & 0x00FF );
 800472c:	b2e9      	uxtb	r1, r5
 800472e:	0030      	movs	r0, r6
 8004730:	f7ff fed0 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, 0 );
 8004734:	2100      	movs	r1, #0
 8004736:	0030      	movs	r0, r6
 8004738:	f7ff fecc 	bl	80044d4 <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 800473c:	9b01      	ldr	r3, [sp, #4]
 800473e:	18e5      	adds	r5, r4, r3
 8004740:	42ac      	cmp	r4, r5
 8004742:	d106      	bne.n	8004752 <SX126xReadRegisters+0x4e>
    {
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
    }
    GpioWrite( &SX126x.Spi.Nss, 1 );
 8004744:	0038      	movs	r0, r7
 8004746:	2101      	movs	r1, #1
 8004748:	f006 ff09 	bl	800b55e <GpioWrite>

    SX126xWaitOnBusy( );
 800474c:	f7ff ff1e 	bl	800458c <SX126xWaitOnBusy>
}
 8004750:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
 8004752:	2100      	movs	r1, #0
 8004754:	0030      	movs	r0, r6
 8004756:	f7ff febd 	bl	80044d4 <SpiInOut>
 800475a:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800475c:	3401      	adds	r4, #1
 800475e:	e7ef      	b.n	8004740 <SX126xReadRegisters+0x3c>
 8004760:	20001d30 	.word	0x20001d30
 8004764:	20001cf4 	.word	0x20001cf4

08004768 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 8004768:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800476a:	466b      	mov	r3, sp
 800476c:	1ddc      	adds	r4, r3, #7
 800476e:	2201      	movs	r2, #1
 8004770:	0021      	movs	r1, r4
 8004772:	f7ff ffc7 	bl	8004704 <SX126xReadRegisters>
    return data;
 8004776:	7820      	ldrb	r0, [r4, #0]
}
 8004778:	bd16      	pop	{r1, r2, r4, pc}
	...

0800477c <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800477c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800477e:	0015      	movs	r5, r2
 8004780:	000c      	movs	r4, r1
 8004782:	9001      	str	r0, [sp, #4]
    SX126xCheckDeviceReady( );
 8004784:	f010 fed0 	bl	8015528 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004788:	4f0f      	ldr	r7, [pc, #60]	; (80047c8 <SX126xWriteBuffer+0x4c>)
 800478a:	2100      	movs	r1, #0
 800478c:	0038      	movs	r0, r7
 800478e:	f006 fee6 	bl	800b55e <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_WRITE_BUFFER );
 8004792:	4e0e      	ldr	r6, [pc, #56]	; (80047cc <SX126xWriteBuffer+0x50>)
 8004794:	210e      	movs	r1, #14
 8004796:	0030      	movs	r0, r6
 8004798:	f7ff fe9c 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, offset );
 800479c:	466b      	mov	r3, sp
 800479e:	0030      	movs	r0, r6
 80047a0:	8899      	ldrh	r1, [r3, #4]
 80047a2:	f7ff fe97 	bl	80044d4 <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 80047a6:	1965      	adds	r5, r4, r5
 80047a8:	42ac      	cmp	r4, r5
 80047aa:	d106      	bne.n	80047ba <SX126xWriteBuffer+0x3e>
    {
        SpiInOut( &SX126x.Spi, buffer[i] );
    }
    GpioWrite( &SX126x.Spi.Nss, 1 );
 80047ac:	0038      	movs	r0, r7
 80047ae:	2101      	movs	r1, #1
 80047b0:	f006 fed5 	bl	800b55e <GpioWrite>

    SX126xWaitOnBusy( );
 80047b4:	f7ff feea 	bl	800458c <SX126xWaitOnBusy>
}
 80047b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SpiInOut( &SX126x.Spi, buffer[i] );
 80047ba:	7821      	ldrb	r1, [r4, #0]
 80047bc:	0030      	movs	r0, r6
 80047be:	f7ff fe89 	bl	80044d4 <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 80047c2:	3401      	adds	r4, #1
 80047c4:	e7f0      	b.n	80047a8 <SX126xWriteBuffer+0x2c>
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20001d30 	.word	0x20001d30
 80047cc:	20001cf4 	.word	0x20001cf4

080047d0 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80047d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d2:	0015      	movs	r5, r2
 80047d4:	000c      	movs	r4, r1
 80047d6:	9001      	str	r0, [sp, #4]
    SX126xCheckDeviceReady( );
 80047d8:	f010 fea6 	bl	8015528 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 80047dc:	4f11      	ldr	r7, [pc, #68]	; (8004824 <SX126xReadBuffer+0x54>)
 80047de:	2100      	movs	r1, #0
 80047e0:	0038      	movs	r0, r7
 80047e2:	f006 febc 	bl	800b55e <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_READ_BUFFER );
 80047e6:	4e10      	ldr	r6, [pc, #64]	; (8004828 <SX126xReadBuffer+0x58>)
 80047e8:	211e      	movs	r1, #30
 80047ea:	0030      	movs	r0, r6
 80047ec:	f7ff fe72 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, offset );
 80047f0:	466b      	mov	r3, sp
 80047f2:	0030      	movs	r0, r6
 80047f4:	8899      	ldrh	r1, [r3, #4]
 80047f6:	f7ff fe6d 	bl	80044d4 <SpiInOut>
    SpiInOut( &SX126x.Spi, 0 );
 80047fa:	2100      	movs	r1, #0
 80047fc:	0030      	movs	r0, r6
 80047fe:	f7ff fe69 	bl	80044d4 <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 8004802:	1965      	adds	r5, r4, r5
 8004804:	42ac      	cmp	r4, r5
 8004806:	d106      	bne.n	8004816 <SX126xReadBuffer+0x46>
    {
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
    }
    GpioWrite( &SX126x.Spi.Nss, 1 );
 8004808:	0038      	movs	r0, r7
 800480a:	2101      	movs	r1, #1
 800480c:	f006 fea7 	bl	800b55e <GpioWrite>

    SX126xWaitOnBusy( );
 8004810:	f7ff febc 	bl	800458c <SX126xWaitOnBusy>
}
 8004814:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
 8004816:	2100      	movs	r1, #0
 8004818:	0030      	movs	r0, r6
 800481a:	f7ff fe5b 	bl	80044d4 <SpiInOut>
 800481e:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 8004820:	3401      	adds	r4, #1
 8004822:	e7ef      	b.n	8004804 <SX126xReadBuffer+0x34>
 8004824:	20001d30 	.word	0x20001d30
 8004828:	20001cf4 	.word	0x20001cf4

0800482c <SX126xSetRfTxPower>:

void SX126xSetRfTxPower( int8_t power )
{
 800482c:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800482e:	2102      	movs	r1, #2
 8004830:	f011 f8b2 	bl	8015998 <SX126xSetTxParams>
}
 8004834:	bd10      	pop	{r4, pc}

08004836 <SX126xGetDeviceId>:

uint8_t SX126xGetDeviceId( void ) {
        return SX1261;
}
 8004836:	2001      	movs	r0, #1
 8004838:	4770      	bx	lr
	...

0800483c <SX126xGetDio1PinState>:
    // Implement check. Currently all frequencies are supported
    return true;
}

uint32_t SX126xGetDio1PinState( void )
{
 800483c:	b510      	push	{r4, lr}
    return GpioRead( &SX126x.DIO1 );
 800483e:	4802      	ldr	r0, [pc, #8]	; (8004848 <SX126xGetDio1PinState+0xc>)
 8004840:	f006 fe91 	bl	800b566 <GpioRead>
}
 8004844:	bd10      	pop	{r4, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	20001cb8 	.word	0x20001cb8

0800484c <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <rand1+0x1c>)
 800484e:	4807      	ldr	r0, [pc, #28]	; (800486c <rand1+0x20>)
 8004850:	681a      	ldr	r2, [r3, #0]
{
 8004852:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8004854:	4350      	muls	r0, r2
 8004856:	4a06      	ldr	r2, [pc, #24]	; (8004870 <rand1+0x24>)
 8004858:	4906      	ldr	r1, [pc, #24]	; (8004874 <rand1+0x28>)
 800485a:	1880      	adds	r0, r0, r2
 800485c:	6018      	str	r0, [r3, #0]
 800485e:	f7fb fd09 	bl	8000274 <__aeabi_uidivmod>
 8004862:	0008      	movs	r0, r1
}
 8004864:	bd10      	pop	{r4, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	20000000 	.word	0x20000000
 800486c:	41c64e6d 	.word	0x41c64e6d
 8004870:	00003039 	.word	0x00003039
 8004874:	7fffffff 	.word	0x7fffffff

08004878 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8004878:	4b01      	ldr	r3, [pc, #4]	; (8004880 <srand1+0x8>)
 800487a:	6018      	str	r0, [r3, #0]
}
 800487c:	4770      	bx	lr
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20000000 	.word	0x20000000

08004884 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	0005      	movs	r5, r0
 8004888:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800488a:	f7ff ffdf 	bl	800484c <rand1>
 800488e:	1b61      	subs	r1, r4, r5
 8004890:	3101      	adds	r1, #1
 8004892:	f7fb fdd9 	bl	8000448 <__aeabi_idivmod>
 8004896:	1948      	adds	r0, r1, r5
}
 8004898:	bd70      	pop	{r4, r5, r6, pc}

0800489a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800489a:	2300      	movs	r3, #0
{
 800489c:	b510      	push	{r4, lr}
    while( size-- )
 800489e:	4293      	cmp	r3, r2
 80048a0:	d100      	bne.n	80048a4 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 80048a2:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 80048a4:	5ccc      	ldrb	r4, [r1, r3]
 80048a6:	54c4      	strb	r4, [r0, r3]
 80048a8:	3301      	adds	r3, #1
 80048aa:	e7f8      	b.n	800489e <memcpy1+0x4>

080048ac <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80048ac:	1e53      	subs	r3, r2, #1
 80048ae:	18c0      	adds	r0, r0, r3
    while( size-- )
 80048b0:	2300      	movs	r3, #0
{
 80048b2:	b530      	push	{r4, r5, lr}
    while( size-- )
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d100      	bne.n	80048ba <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 80048b8:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 80048ba:	5ccd      	ldrb	r5, [r1, r3]
 80048bc:	425c      	negs	r4, r3
 80048be:	5505      	strb	r5, [r0, r4]
 80048c0:	3301      	adds	r3, #1
 80048c2:	e7f7      	b.n	80048b4 <memcpyr+0x8>

080048c4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80048c4:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 80048c6:	f011 fb4c 	bl	8015f62 <memset>
    }
}
 80048ca:	bd10      	pop	{r4, pc}

080048cc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80048cc:	0002      	movs	r2, r0
 80048ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d008      	beq.n	80048e6 <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 80048d4:	2301      	movs	r3, #1
 80048d6:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 80048d8:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80048da:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 80048dc:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 80048de:	b2ac      	uxth	r4, r5
 80048e0:	428c      	cmp	r4, r1
 80048e2:	d301      	bcc.n	80048e8 <Crc32+0x1c>
        }
    }

    return ~crc;
 80048e4:	43d8      	mvns	r0, r3
}
 80048e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 80048e8:	5d54      	ldrb	r4, [r2, r5]
 80048ea:	4063      	eors	r3, r4
 80048ec:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80048ee:	0858      	lsrs	r0, r3, #1
 80048f0:	4684      	mov	ip, r0
 80048f2:	403b      	ands	r3, r7
 80048f4:	4805      	ldr	r0, [pc, #20]	; (800490c <Crc32+0x40>)
 80048f6:	425b      	negs	r3, r3
 80048f8:	4003      	ands	r3, r0
 80048fa:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 80048fc:	3c01      	subs	r4, #1
 80048fe:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8004900:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 8004902:	2c00      	cmp	r4, #0
 8004904:	d1f3      	bne.n	80048ee <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 8004906:	3501      	adds	r5, #1
 8004908:	e7e9      	b.n	80048de <Crc32+0x12>
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	edb88320 	.word	0xedb88320

08004910 <Crc32Init>:

uint32_t Crc32Init( void )
{
    return 0xFFFFFFFF;
 8004910:	2001      	movs	r0, #1
}
 8004912:	4240      	negs	r0, r0
 8004914:	4770      	bx	lr
	...

08004918 <Crc32Update>:

uint32_t Crc32Update( uint32_t crcInit, uint8_t *buffer, uint16_t length )
{
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = crcInit;

    if( buffer == NULL )
 800491a:	2900      	cmp	r1, #0
 800491c:	d014      	beq.n	8004948 <Crc32Update+0x30>
 800491e:	2400      	movs	r4, #0
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8004920:	2601      	movs	r6, #1
 8004922:	4f0a      	ldr	r7, [pc, #40]	; (800494c <Crc32Update+0x34>)
    for( uint16_t i = 0; i < length; ++i )
 8004924:	b2a3      	uxth	r3, r4
 8004926:	4293      	cmp	r3, r2
 8004928:	d300      	bcc.n	800492c <Crc32Update+0x14>
        }
    }
    return crc;
}
 800492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 800492c:	5d0b      	ldrb	r3, [r1, r4]
 800492e:	4058      	eors	r0, r3
 8004930:	2308      	movs	r3, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8004932:	0845      	lsrs	r5, r0, #1
 8004934:	4030      	ands	r0, r6
 8004936:	4240      	negs	r0, r0
        for( uint16_t i = 0; i < 8; i++ )
 8004938:	3b01      	subs	r3, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800493a:	4038      	ands	r0, r7
        for( uint16_t i = 0; i < 8; i++ )
 800493c:	b29b      	uxth	r3, r3
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800493e:	4068      	eors	r0, r5
        for( uint16_t i = 0; i < 8; i++ )
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f6      	bne.n	8004932 <Crc32Update+0x1a>
    for( uint16_t i = 0; i < length; ++i )
 8004944:	3401      	adds	r4, #1
 8004946:	e7ed      	b.n	8004924 <Crc32Update+0xc>
        return 0;
 8004948:	0008      	movs	r0, r1
 800494a:	e7ee      	b.n	800492a <Crc32Update+0x12>
 800494c:	edb88320 	.word	0xedb88320

08004950 <Crc32Finalize>:

uint32_t Crc32Finalize( uint32_t crc )
{
    return ~crc;
 8004950:	43c0      	mvns	r0, r0
}
 8004952:	4770      	bx	lr

08004954 <PrintHexBuffer>:
 * 
 * \param buffer Buffer to be printed
 * \param size   Buffer size to be printed
 */
void PrintHexBuffer( uint8_t *buffer, uint8_t size )
{
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t newline = 0;

    for( uint8_t i = 0; i < size; i++ )
 8004956:	2400      	movs	r4, #0
{
 8004958:	0006      	movs	r6, r0
 800495a:	000d      	movs	r5, r1
    uint8_t newline = 0;
 800495c:	0023      	movs	r3, r4
            newline = 0;
        }

        printf( "%02X ", buffer[i] );

        if( ( ( i + 1 ) % 16 ) == 0 )
 800495e:	270f      	movs	r7, #15
    for( uint8_t i = 0; i < size; i++ )
 8004960:	42a5      	cmp	r5, r4
 8004962:	d103      	bne.n	800496c <PrintHexBuffer+0x18>
        {
            newline = 1;
        }
    }
    printf( "\n" );
 8004964:	200a      	movs	r0, #10
 8004966:	f012 f97d 	bl	8016c64 <putchar>
}
 800496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( newline != 0 )
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <PrintHexBuffer+0x22>
            printf( "\n" );
 8004970:	200a      	movs	r0, #10
 8004972:	f012 f977 	bl	8016c64 <putchar>
        printf( "%02X ", buffer[i] );
 8004976:	5d31      	ldrb	r1, [r6, r4]
 8004978:	4804      	ldr	r0, [pc, #16]	; (800498c <PrintHexBuffer+0x38>)
 800497a:	3401      	adds	r4, #1
 800497c:	f012 f958 	bl	8016c30 <iprintf>
        if( ( ( i + 1 ) % 16 ) == 0 )
 8004980:	0023      	movs	r3, r4
 8004982:	403b      	ands	r3, r7
 8004984:	425a      	negs	r2, r3
 8004986:	4153      	adcs	r3, r2
            newline = 1;
 8004988:	b2db      	uxtb	r3, r3
    for( uint8_t i = 0; i < size; i++ )
 800498a:	e7e9      	b.n	8004960 <PrintHexBuffer+0xc>
 800498c:	08018c23 	.word	0x08018c23

08004990 <DisplayNvmDataChange>:

void DisplayNvmDataChange( LmHandlerNvmContextStates_t state, uint16_t size )
{
 8004990:	b510      	push	{r4, lr}
 8004992:	000c      	movs	r4, r1
    if( state == LORAMAC_HANDLER_NVM_STORE )
 8004994:	2801      	cmp	r0, #1
 8004996:	d107      	bne.n	80049a8 <DisplayNvmDataChange+0x18>
    {
        printf( "\n###### ============ CTXS STORED ============ ######\n" );
 8004998:	4804      	ldr	r0, [pc, #16]	; (80049ac <DisplayNvmDataChange+0x1c>)

    }
    else
    {
        printf( "\n###### =========== CTXS RESTORED =========== ######\n" );
 800499a:	f012 f9e9 	bl	8016d70 <puts>
    }
    printf( "Size        : %i\n\n", size );
 800499e:	0021      	movs	r1, r4
 80049a0:	4803      	ldr	r0, [pc, #12]	; (80049b0 <DisplayNvmDataChange+0x20>)
 80049a2:	f012 f945 	bl	8016c30 <iprintf>
}
 80049a6:	bd10      	pop	{r4, pc}
        printf( "\n###### =========== CTXS RESTORED =========== ######\n" );
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <DisplayNvmDataChange+0x24>)
 80049aa:	e7f6      	b.n	800499a <DisplayNvmDataChange+0xa>
 80049ac:	08018c29 	.word	0x08018c29
 80049b0:	08018c93 	.word	0x08018c93
 80049b4:	08018c5e 	.word	0x08018c5e

080049b8 <DisplayMacMcpsRequestUpdate>:
    printf( "\n\n" );
}

void DisplayMacMcpsRequestUpdate( LoRaMacStatus_t status, McpsReq_t *mcpsReq, TimerTime_t nextTxIn )
{
    switch( mcpsReq->Type )
 80049b8:	780b      	ldrb	r3, [r1, #0]
{
 80049ba:	b570      	push	{r4, r5, r6, lr}
 80049bc:	0004      	movs	r4, r0
 80049be:	0016      	movs	r6, r2
 80049c0:	4814      	ldr	r0, [pc, #80]	; (8004a14 <DisplayMacMcpsRequestUpdate+0x5c>)
 80049c2:	4d15      	ldr	r5, [pc, #84]	; (8004a18 <DisplayMacMcpsRequestUpdate+0x60>)
    switch( mcpsReq->Type )
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d007      	beq.n	80049d8 <DisplayMacMcpsRequestUpdate+0x20>
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d01a      	beq.n	8004a02 <DisplayMacMcpsRequestUpdate+0x4a>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11c      	bne.n	8004a0a <DisplayMacMcpsRequestUpdate+0x52>
            printf( "###### ===================================== ######\n");
            break;
        }
        case MCPS_UNCONFIRMED:
        {
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 80049d0:	f012 f9ce 	bl	8016d70 <puts>
            printf( "######           MCPS_UNCONFIRMED            ######\n");
 80049d4:	4811      	ldr	r0, [pc, #68]	; (8004a1c <DisplayMacMcpsRequestUpdate+0x64>)
 80049d6:	e002      	b.n	80049de <DisplayMacMcpsRequestUpdate+0x26>
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 80049d8:	f012 f9ca 	bl	8016d70 <puts>
            printf( "######            MCPS_CONFIRMED             ######\n");
 80049dc:	4810      	ldr	r0, [pc, #64]	; (8004a20 <DisplayMacMcpsRequestUpdate+0x68>)
            break;
        }
        default:
        {
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
            printf( "######                MCPS_ERROR             ######\n");
 80049de:	f012 f9c7 	bl	8016d70 <puts>
            printf( "###### ===================================== ######\n");
 80049e2:	0028      	movs	r0, r5
 80049e4:	f012 f9c4 	bl	8016d70 <puts>
            break;
        }
    }
    printf( "STATUS      : %s\n", MacStatusStrings[status] );
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <DisplayMacMcpsRequestUpdate+0x6c>)
 80049ea:	00a2      	lsls	r2, r4, #2
 80049ec:	58d1      	ldr	r1, [r2, r3]
 80049ee:	480e      	ldr	r0, [pc, #56]	; (8004a28 <DisplayMacMcpsRequestUpdate+0x70>)
 80049f0:	f012 f91e 	bl	8016c30 <iprintf>
    if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80049f4:	2c0b      	cmp	r4, #11
 80049f6:	d103      	bne.n	8004a00 <DisplayMacMcpsRequestUpdate+0x48>
    {
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
 80049f8:	0031      	movs	r1, r6
 80049fa:	480c      	ldr	r0, [pc, #48]	; (8004a2c <DisplayMacMcpsRequestUpdate+0x74>)
 80049fc:	f012 f918 	bl	8016c30 <iprintf>
    }
}
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 8004a02:	f012 f9b5 	bl	8016d70 <puts>
            printf( "######           MCPS_PROPRIETARY            ######\n");
 8004a06:	480a      	ldr	r0, [pc, #40]	; (8004a30 <DisplayMacMcpsRequestUpdate+0x78>)
 8004a08:	e7e9      	b.n	80049de <DisplayMacMcpsRequestUpdate+0x26>
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 8004a0a:	f012 f9b1 	bl	8016d70 <puts>
            printf( "######                MCPS_ERROR             ######\n");
 8004a0e:	4809      	ldr	r0, [pc, #36]	; (8004a34 <DisplayMacMcpsRequestUpdate+0x7c>)
 8004a10:	e7e5      	b.n	80049de <DisplayMacMcpsRequestUpdate+0x26>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	08018ce5 	.word	0x08018ce5
 8004a18:	08018d4e 	.word	0x08018d4e
 8004a1c:	08018d82 	.word	0x08018d82
 8004a20:	08018d1a 	.word	0x08018d1a
 8004a24:	20000044 	.word	0x20000044
 8004a28:	08018e1e 	.word	0x08018e1e
 8004a2c:	08018e30 	.word	0x08018e30
 8004a30:	08018db6 	.word	0x08018db6
 8004a34:	08018dea 	.word	0x08018dea

08004a38 <DisplayMacMlmeRequestUpdate>:

void DisplayMacMlmeRequestUpdate( LoRaMacStatus_t status, MlmeReq_t *mlmeReq, TimerTime_t nextTxIn )
{
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	0005      	movs	r5, r0
    switch( mlmeReq->Type )
 8004a3c:	7808      	ldrb	r0, [r1, #0]
{
 8004a3e:	0016      	movs	r6, r2
    switch( mlmeReq->Type )
 8004a40:	3801      	subs	r0, #1
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <DisplayMacMlmeRequestUpdate+0x74>)
 8004a44:	4c1a      	ldr	r4, [pc, #104]	; (8004ab0 <DisplayMacMlmeRequestUpdate+0x78>)
 8004a46:	2808      	cmp	r0, #8
 8004a48:	d82b      	bhi.n	8004aa2 <DisplayMacMlmeRequestUpdate+0x6a>
 8004a4a:	f7fb fb6f 	bl	800012c <__gnu_thumb1_case_uqi>
 8004a4e:	2a05      	.short	0x2a05
 8004a50:	2a251b2a 	.word	0x2a251b2a
 8004a54:	2a2a      	.short	0x2a2a
 8004a56:	20          	.byte	0x20
 8004a57:	00          	.byte	0x00
    {
        case MLME_JOIN:
        {
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f012 f989 	bl	8016d70 <puts>
            printf( "######               MLME_JOIN               ######\n");
 8004a5e:	4815      	ldr	r0, [pc, #84]	; (8004ab4 <DisplayMacMlmeRequestUpdate+0x7c>)
            break;
        }
        default:
        {
            printf( "\n###### =========== MLME-Request ============ ######\n" );
            printf( "######              MLME_UNKNOWN             ######\n");
 8004a60:	f012 f986 	bl	8016d70 <puts>
            printf( "###### ===================================== ######\n");
 8004a64:	0020      	movs	r0, r4
 8004a66:	f012 f983 	bl	8016d70 <puts>
            break;
        }
    }
    printf( "STATUS      : %s\n", MacStatusStrings[status] );
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <DisplayMacMlmeRequestUpdate+0x80>)
 8004a6c:	00aa      	lsls	r2, r5, #2
 8004a6e:	58d1      	ldr	r1, [r2, r3]
 8004a70:	4812      	ldr	r0, [pc, #72]	; (8004abc <DisplayMacMlmeRequestUpdate+0x84>)
 8004a72:	f012 f8dd 	bl	8016c30 <iprintf>
    if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8004a76:	2d0b      	cmp	r5, #11
 8004a78:	d103      	bne.n	8004a82 <DisplayMacMlmeRequestUpdate+0x4a>
    {
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
 8004a7a:	0031      	movs	r1, r6
 8004a7c:	4810      	ldr	r0, [pc, #64]	; (8004ac0 <DisplayMacMlmeRequestUpdate+0x88>)
 8004a7e:	f012 f8d7 	bl	8016c30 <iprintf>
    }
}
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004a84:	0018      	movs	r0, r3
 8004a86:	f012 f973 	bl	8016d70 <puts>
            printf( "######            MLME_LINK_CHECK            ######\n");
 8004a8a:	480e      	ldr	r0, [pc, #56]	; (8004ac4 <DisplayMacMlmeRequestUpdate+0x8c>)
 8004a8c:	e7e8      	b.n	8004a60 <DisplayMacMlmeRequestUpdate+0x28>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f012 f96e 	bl	8016d70 <puts>
            printf( "######            MLME_DEVICE_TIME           ######\n");
 8004a94:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <DisplayMacMlmeRequestUpdate+0x90>)
 8004a96:	e7e3      	b.n	8004a60 <DisplayMacMlmeRequestUpdate+0x28>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f012 f969 	bl	8016d70 <puts>
            printf( "######               MLME_TXCW               ######\n");
 8004a9e:	480b      	ldr	r0, [pc, #44]	; (8004acc <DisplayMacMlmeRequestUpdate+0x94>)
 8004aa0:	e7de      	b.n	8004a60 <DisplayMacMlmeRequestUpdate+0x28>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f012 f964 	bl	8016d70 <puts>
            printf( "######              MLME_UNKNOWN             ######\n");
 8004aa8:	4809      	ldr	r0, [pc, #36]	; (8004ad0 <DisplayMacMlmeRequestUpdate+0x98>)
 8004aaa:	e7d9      	b.n	8004a60 <DisplayMacMlmeRequestUpdate+0x28>
 8004aac:	08018e48 	.word	0x08018e48
 8004ab0:	08018d4e 	.word	0x08018d4e
 8004ab4:	08018e7d 	.word	0x08018e7d
 8004ab8:	20000044 	.word	0x20000044
 8004abc:	08018e1e 	.word	0x08018e1e
 8004ac0:	08018e30 	.word	0x08018e30
 8004ac4:	08018eb1 	.word	0x08018eb1
 8004ac8:	08018ee5 	.word	0x08018ee5
 8004acc:	08018f19 	.word	0x08018f19
 8004ad0:	08018f4d 	.word	0x08018f4d

08004ad4 <DisplayJoinRequestUpdate>:

void DisplayJoinRequestUpdate( LmHandlerJoinParams_t *params )
{
    if( params->CommissioningParams->IsOtaaActivation == true )
 8004ad4:	6803      	ldr	r3, [r0, #0]
{
 8004ad6:	b510      	push	{r4, lr}
    if( params->CommissioningParams->IsOtaaActivation == true )
 8004ad8:	781b      	ldrb	r3, [r3, #0]
{
 8004ada:	0004      	movs	r4, r0
    if( params->CommissioningParams->IsOtaaActivation == true )
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d017      	beq.n	8004b10 <DisplayJoinRequestUpdate+0x3c>
    {
        if( params->Status == LORAMAC_HANDLER_SUCCESS )
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	56c3      	ldrsb	r3, [r0, r3]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d112      	bne.n	8004b0e <DisplayJoinRequestUpdate+0x3a>
        {
            printf( "###### ===========   JOINED     ============ ######\n" );
 8004ae8:	4811      	ldr	r0, [pc, #68]	; (8004b30 <DisplayJoinRequestUpdate+0x5c>)
 8004aea:	f012 f941 	bl	8016d70 <puts>
            printf( "\nOTAA\n\n" );
 8004aee:	4811      	ldr	r0, [pc, #68]	; (8004b34 <DisplayJoinRequestUpdate+0x60>)
 8004af0:	f012 f93e 	bl	8016d70 <puts>
            printf( "DevAddr     :  %08lX\n", params->CommissioningParams->DevAddr );
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	4810      	ldr	r0, [pc, #64]	; (8004b38 <DisplayJoinRequestUpdate+0x64>)
 8004af8:	69d9      	ldr	r1, [r3, #28]
 8004afa:	f012 f899 	bl	8016c30 <iprintf>
            printf( "\n\n" );
 8004afe:	480f      	ldr	r0, [pc, #60]	; (8004b3c <DisplayJoinRequestUpdate+0x68>)
 8004b00:	f012 f936 	bl	8016d70 <puts>
            printf( "DATA RATE   : DR_%d\n\n", params->Datarate );
 8004b04:	2104      	movs	r1, #4
 8004b06:	480e      	ldr	r0, [pc, #56]	; (8004b40 <DisplayJoinRequestUpdate+0x6c>)
 8004b08:	5661      	ldrsb	r1, [r4, r1]
 8004b0a:	f012 f891 	bl	8016c30 <iprintf>
        printf( "\nABP\n\n" );
        printf( "DevAddr     : %08lX\n", params->CommissioningParams->DevAddr );
        printf( "\n\n" );
    }
#endif
}
 8004b0e:	bd10      	pop	{r4, pc}
        printf( "###### ===========   JOINED     ============ ######\n" );
 8004b10:	4807      	ldr	r0, [pc, #28]	; (8004b30 <DisplayJoinRequestUpdate+0x5c>)
 8004b12:	f012 f92d 	bl	8016d70 <puts>
        printf( "\nABP\n\n" );
 8004b16:	480b      	ldr	r0, [pc, #44]	; (8004b44 <DisplayJoinRequestUpdate+0x70>)
 8004b18:	f012 f92a 	bl	8016d70 <puts>
        printf( "DevAddr     : %08lX\n", params->CommissioningParams->DevAddr );
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	480a      	ldr	r0, [pc, #40]	; (8004b48 <DisplayJoinRequestUpdate+0x74>)
 8004b20:	69d9      	ldr	r1, [r3, #28]
 8004b22:	f012 f885 	bl	8016c30 <iprintf>
        printf( "\n\n" );
 8004b26:	4805      	ldr	r0, [pc, #20]	; (8004b3c <DisplayJoinRequestUpdate+0x68>)
 8004b28:	f012 f922 	bl	8016d70 <puts>
}
 8004b2c:	e7ef      	b.n	8004b0e <DisplayJoinRequestUpdate+0x3a>
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	08018f81 	.word	0x08018f81
 8004b34:	08018fb5 	.word	0x08018fb5
 8004b38:	08018fbc 	.word	0x08018fbc
 8004b3c:	08018fe6 	.word	0x08018fe6
 8004b40:	08018fd2 	.word	0x08018fd2
 8004b44:	08018fe8 	.word	0x08018fe8
 8004b48:	08018fee 	.word	0x08018fee

08004b4c <DisplayTxUpdate>:

void DisplayTxUpdate( LmHandlerTxParams_t *params )
{
 8004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MibRequestConfirm_t mibGet;
    LoRaMacNvmData_t *nvm;

    mibGet.Type = MIB_NVM_CTXS;
 8004b4e:	2334      	movs	r3, #52	; 0x34
{
 8004b50:	0004      	movs	r4, r0
 8004b52:	b08d      	sub	sp, #52	; 0x34
    mibGet.Type = MIB_NVM_CTXS;
 8004b54:	ad03      	add	r5, sp, #12
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004b56:	0028      	movs	r0, r5
    mibGet.Type = MIB_NVM_CTXS;
 8004b58:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004b5a:	f002 fbe9 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    nvm = mibGet.Param.Contexts;

    if( params->IsMcpsConfirm == 0 )
 8004b5e:	7823      	ldrb	r3, [r4, #0]
 8004b60:	4f4c      	ldr	r7, [pc, #304]	; (8004c94 <DisplayTxUpdate+0x148>)
 8004b62:	4e4d      	ldr	r6, [pc, #308]	; (8004c98 <DisplayTxUpdate+0x14c>)
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <DisplayTxUpdate+0x32>
    {
        printf( "\n###### =========== MLME-Confirm ============ ######\n" );
 8004b68:	484c      	ldr	r0, [pc, #304]	; (8004c9c <DisplayTxUpdate+0x150>)
 8004b6a:	f012 f901 	bl	8016d70 <puts>
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004b6e:	7863      	ldrb	r3, [r4, #1]
 8004b70:	0030      	movs	r0, r6
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	58f9      	ldr	r1, [r7, r3]
 8004b76:	f012 f85b 	bl	8016c30 <iprintf>
        }
        printf("\n");
    }

    printf( "\n" );
}
 8004b7a:	b00d      	add	sp, #52	; 0x34
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    nvm = mibGet.Param.Contexts;
 8004b7e:	686b      	ldr	r3, [r5, #4]
    printf( "\n###### =========== MCPS-Confirm ============ ######\n" );
 8004b80:	4847      	ldr	r0, [pc, #284]	; (8004ca0 <DisplayTxUpdate+0x154>)
    nvm = mibGet.Param.Contexts;
 8004b82:	9301      	str	r3, [sp, #4]
    printf( "\n###### =========== MCPS-Confirm ============ ######\n" );
 8004b84:	f012 f8f4 	bl	8016d70 <puts>
    printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004b88:	7863      	ldrb	r3, [r4, #1]
 8004b8a:	0030      	movs	r0, r6
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	58f9      	ldr	r1, [r7, r3]
 8004b90:	f012 f84e 	bl	8016c30 <iprintf>
    printf( "\n###### =====   UPLINK FRAME %8lu   ===== ######\n", params->UplinkCounter );
 8004b94:	68e1      	ldr	r1, [r4, #12]
 8004b96:	4843      	ldr	r0, [pc, #268]	; (8004ca4 <DisplayTxUpdate+0x158>)
 8004b98:	f012 f84a 	bl	8016c30 <iprintf>
    printf( "\n" );
 8004b9c:	200a      	movs	r0, #10
 8004b9e:	f012 f861 	bl	8016c64 <putchar>
    mibGet.Type = MIB_DEVICE_CLASS;
 8004ba2:	2300      	movs	r3, #0
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004ba4:	0028      	movs	r0, r5
    mibGet.Type = MIB_DEVICE_CLASS;
 8004ba6:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004ba8:	f002 fbc2 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    printf( "CLASS       : %c\n", "ABC"[mibGet.Param.Class] );
 8004bac:	792b      	ldrb	r3, [r5, #4]
 8004bae:	4a3e      	ldr	r2, [pc, #248]	; (8004ca8 <DisplayTxUpdate+0x15c>)
 8004bb0:	483e      	ldr	r0, [pc, #248]	; (8004cac <DisplayTxUpdate+0x160>)
 8004bb2:	5cd1      	ldrb	r1, [r2, r3]
 8004bb4:	f012 f83c 	bl	8016c30 <iprintf>
    printf( "\n" );
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f012 f853 	bl	8016c64 <putchar>
    printf( "TX PORT     : %d\n", params->AppData.Port );
 8004bbe:	7c21      	ldrb	r1, [r4, #16]
 8004bc0:	483b      	ldr	r0, [pc, #236]	; (8004cb0 <DisplayTxUpdate+0x164>)
 8004bc2:	f012 f835 	bl	8016c30 <iprintf>
    if( params->AppData.BufferSize != 0 )
 8004bc6:	7c63      	ldrb	r3, [r4, #17]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <DisplayTxUpdate+0xa4>
        printf( "TX DATA     : " );
 8004bcc:	4839      	ldr	r0, [pc, #228]	; (8004cb4 <DisplayTxUpdate+0x168>)
 8004bce:	f012 f82f 	bl	8016c30 <iprintf>
        if( params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
 8004bd2:	7a23      	ldrb	r3, [r4, #8]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d13e      	bne.n	8004c56 <DisplayTxUpdate+0x10a>
            printf( "CONFIRMED - %s\n", ( params->AckReceived != 0 ) ? "ACK" : "NACK" );
 8004bd8:	7a63      	ldrb	r3, [r4, #9]
 8004bda:	4937      	ldr	r1, [pc, #220]	; (8004cb8 <DisplayTxUpdate+0x16c>)
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d100      	bne.n	8004be2 <DisplayTxUpdate+0x96>
 8004be0:	4936      	ldr	r1, [pc, #216]	; (8004cbc <DisplayTxUpdate+0x170>)
 8004be2:	4837      	ldr	r0, [pc, #220]	; (8004cc0 <DisplayTxUpdate+0x174>)
 8004be4:	f012 f824 	bl	8016c30 <iprintf>
        PrintHexBuffer( params->AppData.Buffer, params->AppData.BufferSize );
 8004be8:	7c61      	ldrb	r1, [r4, #17]
 8004bea:	6960      	ldr	r0, [r4, #20]
 8004bec:	f7ff feb2 	bl	8004954 <PrintHexBuffer>
    printf( "\n" );
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f012 f837 	bl	8016c64 <putchar>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
 8004bf6:	210a      	movs	r1, #10
 8004bf8:	4832      	ldr	r0, [pc, #200]	; (8004cc4 <DisplayTxUpdate+0x178>)
 8004bfa:	5661      	ldrsb	r1, [r4, r1]
 8004bfc:	f012 f818 	bl	8016c30 <iprintf>
    mibGet.Type  = MIB_CHANNELS;
 8004c00:	231e      	movs	r3, #30
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004c02:	0028      	movs	r0, r5
    mibGet.Type  = MIB_CHANNELS;
 8004c04:	702b      	strb	r3, [r5, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004c06:	f002 fb93 	bl	8007330 <LoRaMacMibGetRequestConfirm>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d107      	bne.n	8004c1e <DisplayTxUpdate+0xd2>
        printf( "U/L FREQ    : %lu\n", mibGet.Param.ChannelList[params->Channel].Frequency );
 8004c0e:	230c      	movs	r3, #12
 8004c10:	7e62      	ldrb	r2, [r4, #25]
 8004c12:	482d      	ldr	r0, [pc, #180]	; (8004cc8 <DisplayTxUpdate+0x17c>)
 8004c14:	4353      	muls	r3, r2
 8004c16:	686a      	ldr	r2, [r5, #4]
 8004c18:	5899      	ldr	r1, [r3, r2]
 8004c1a:	f012 f809 	bl	8016c30 <iprintf>
    printf( "TX POWER    : %d\n", params->TxPower );
 8004c1e:	2118      	movs	r1, #24
 8004c20:	482a      	ldr	r0, [pc, #168]	; (8004ccc <DisplayTxUpdate+0x180>)
 8004c22:	5661      	ldrsb	r1, [r4, r1]
 8004c24:	f012 f804 	bl	8016c30 <iprintf>
    mibGet.Type  = MIB_CHANNELS_MASK;
 8004c28:	2323      	movs	r3, #35	; 0x23
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004c2a:	0028      	movs	r0, r5
    mibGet.Type  = MIB_CHANNELS_MASK;
 8004c2c:	702b      	strb	r3, [r5, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004c2e:	f002 fb7f 	bl	8007330 <LoRaMacMibGetRequestConfirm>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d11b      	bne.n	8004c6e <DisplayTxUpdate+0x122>
        printf("CHANNEL MASK: ");
 8004c36:	4826      	ldr	r0, [pc, #152]	; (8004cd0 <DisplayTxUpdate+0x184>)
 8004c38:	f011 fffa 	bl	8016c30 <iprintf>
        switch( nvm->MacGroup2.Region )
 8004c3c:	9b01      	ldr	r3, [sp, #4]
 8004c3e:	334c      	adds	r3, #76	; 0x4c
 8004c40:	7818      	ldrb	r0, [r3, #0]
 8004c42:	2809      	cmp	r0, #9
 8004c44:	d821      	bhi.n	8004c8a <DisplayTxUpdate+0x13e>
 8004c46:	4e23      	ldr	r6, [pc, #140]	; (8004cd4 <DisplayTxUpdate+0x188>)
 8004c48:	f7fb fa70 	bl	800012c <__gnu_thumb1_case_uqi>
 8004c4c:	09151509 	.word	0x09151509
 8004c50:	09090909 	.word	0x09090909
 8004c54:	0915      	.short	0x0915
            printf( "UNCONFIRMED\n" );
 8004c56:	4820      	ldr	r0, [pc, #128]	; (8004cd8 <DisplayTxUpdate+0x18c>)
 8004c58:	f012 f88a 	bl	8016d70 <puts>
 8004c5c:	e7c4      	b.n	8004be8 <DisplayTxUpdate+0x9c>
                printf( "%04X ", mibGet.Param.ChannelsMask[0] );
 8004c5e:	686b      	ldr	r3, [r5, #4]
 8004c60:	0030      	movs	r0, r6
 8004c62:	8819      	ldrh	r1, [r3, #0]
 8004c64:	f011 ffe4 	bl	8016c30 <iprintf>
        printf("\n");
 8004c68:	200a      	movs	r0, #10
 8004c6a:	f011 fffb 	bl	8016c64 <putchar>
    printf( "\n" );
 8004c6e:	200a      	movs	r0, #10
 8004c70:	f011 fff8 	bl	8016c64 <putchar>
 8004c74:	e781      	b.n	8004b7a <DisplayTxUpdate+0x2e>
        switch( nvm->MacGroup2.Region )
 8004c76:	2400      	movs	r4, #0
                    printf( "%04X ", mibGet.Param.ChannelsMask[i] );
 8004c78:	686b      	ldr	r3, [r5, #4]
 8004c7a:	0030      	movs	r0, r6
 8004c7c:	5b19      	ldrh	r1, [r3, r4]
                for( uint8_t i = 0; i < 5; i++)
 8004c7e:	3402      	adds	r4, #2
                    printf( "%04X ", mibGet.Param.ChannelsMask[i] );
 8004c80:	f011 ffd6 	bl	8016c30 <iprintf>
                for( uint8_t i = 0; i < 5; i++)
 8004c84:	2c0a      	cmp	r4, #10
 8004c86:	d1f7      	bne.n	8004c78 <DisplayTxUpdate+0x12c>
 8004c88:	e7ee      	b.n	8004c68 <DisplayTxUpdate+0x11c>
                printf( "\n###### ========= Unknown Region ============ ######" );
 8004c8a:	4814      	ldr	r0, [pc, #80]	; (8004cdc <DisplayTxUpdate+0x190>)
 8004c8c:	f011 ffd0 	bl	8016c30 <iprintf>
                break;
 8004c90:	e7ea      	b.n	8004c68 <DisplayTxUpdate+0x11c>
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	20000004 	.word	0x20000004
 8004c98:	08018e1e 	.word	0x08018e1e
 8004c9c:	08019008 	.word	0x08019008
 8004ca0:	0801903d 	.word	0x0801903d
 8004ca4:	08019072 	.word	0x08019072
 8004ca8:	08019177 	.word	0x08019177
 8004cac:	080190a4 	.word	0x080190a4
 8004cb0:	080190b6 	.word	0x080190b6
 8004cb4:	080190c8 	.word	0x080190c8
 8004cb8:	08019004 	.word	0x08019004
 8004cbc:	08019003 	.word	0x08019003
 8004cc0:	080190d7 	.word	0x080190d7
 8004cc4:	080190f3 	.word	0x080190f3
 8004cc8:	08019108 	.word	0x08019108
 8004ccc:	0801911b 	.word	0x0801911b
 8004cd0:	0801912d 	.word	0x0801912d
 8004cd4:	0801913c 	.word	0x0801913c
 8004cd8:	080190e7 	.word	0x080190e7
 8004cdc:	08019142 	.word	0x08019142

08004ce0 <DisplayRxUpdate>:

void DisplayRxUpdate( LmHandlerAppData_t *appData, LmHandlerRxParams_t *params )
{
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	b087      	sub	sp, #28
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8004ce4:	466a      	mov	r2, sp
{
 8004ce6:	000c      	movs	r4, r1
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <DisplayRxUpdate+0xa8>)
{
 8004cea:	0005      	movs	r5, r0
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8004cec:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004cee:	c243      	stmia	r2!, {r0, r1, r6}
 8004cf0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004cf2:	c243      	stmia	r2!, {r0, r1, r6}

    if( params->IsMcpsIndication == 0 )
 8004cf4:	7823      	ldrb	r3, [r4, #0]
 8004cf6:	4f25      	ldr	r7, [pc, #148]	; (8004d8c <DisplayRxUpdate+0xac>)
 8004cf8:	4e25      	ldr	r6, [pc, #148]	; (8004d90 <DisplayRxUpdate+0xb0>)
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <DisplayRxUpdate+0x34>
    {
        printf( "\n###### ========== MLME-Indication ========== ######\n" );
 8004cfe:	4825      	ldr	r0, [pc, #148]	; (8004d94 <DisplayRxUpdate+0xb4>)
 8004d00:	f012 f836 	bl	8016d70 <puts>
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004d04:	7863      	ldrb	r3, [r4, #1]
 8004d06:	0030      	movs	r0, r6
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	58f9      	ldr	r1, [r7, r3]
 8004d0c:	f011 ff90 	bl	8016c30 <iprintf>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
    printf( "RX RSSI     : %d\n", params->Rssi );
    printf( "RX SNR      : %d\n", params->Snr );

    printf( "\n" );
}
 8004d10:	b007      	add	sp, #28
 8004d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf( "\n###### ========== MCPS-Indication ========== ######\n" );
 8004d14:	4820      	ldr	r0, [pc, #128]	; (8004d98 <DisplayRxUpdate+0xb8>)
 8004d16:	f012 f82b 	bl	8016d70 <puts>
    printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004d1a:	7863      	ldrb	r3, [r4, #1]
 8004d1c:	0030      	movs	r0, r6
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	58f9      	ldr	r1, [r7, r3]
 8004d22:	f011 ff85 	bl	8016c30 <iprintf>
    printf( "\n###### =====  DOWNLINK FRAME %8lu  ===== ######\n", params->DownlinkCounter );
 8004d26:	68e1      	ldr	r1, [r4, #12]
 8004d28:	481c      	ldr	r0, [pc, #112]	; (8004d9c <DisplayRxUpdate+0xbc>)
 8004d2a:	f011 ff81 	bl	8016c30 <iprintf>
    printf( "RX WINDOW   : %s\n", slotStrings[params->RxSlot] );
 8004d2e:	2310      	movs	r3, #16
 8004d30:	466a      	mov	r2, sp
 8004d32:	56e3      	ldrsb	r3, [r4, r3]
 8004d34:	481a      	ldr	r0, [pc, #104]	; (8004da0 <DisplayRxUpdate+0xc0>)
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	5899      	ldr	r1, [r3, r2]
 8004d3a:	f011 ff79 	bl	8016c30 <iprintf>
    printf( "RX PORT     : %d\n", appData->Port );
 8004d3e:	7829      	ldrb	r1, [r5, #0]
 8004d40:	4818      	ldr	r0, [pc, #96]	; (8004da4 <DisplayRxUpdate+0xc4>)
 8004d42:	f011 ff75 	bl	8016c30 <iprintf>
    if( appData->BufferSize != 0 )
 8004d46:	786b      	ldrb	r3, [r5, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d006      	beq.n	8004d5a <DisplayRxUpdate+0x7a>
        printf( "RX DATA     : \n" );
 8004d4c:	4816      	ldr	r0, [pc, #88]	; (8004da8 <DisplayRxUpdate+0xc8>)
 8004d4e:	f012 f80f 	bl	8016d70 <puts>
        PrintHexBuffer( appData->Buffer, appData->BufferSize );
 8004d52:	7869      	ldrb	r1, [r5, #1]
 8004d54:	6868      	ldr	r0, [r5, #4]
 8004d56:	f7ff fdfd 	bl	8004954 <PrintHexBuffer>
    printf( "\n" );
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	f011 ff82 	bl	8016c64 <putchar>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
 8004d60:	2108      	movs	r1, #8
 8004d62:	4812      	ldr	r0, [pc, #72]	; (8004dac <DisplayRxUpdate+0xcc>)
 8004d64:	5661      	ldrsb	r1, [r4, r1]
 8004d66:	f011 ff63 	bl	8016c30 <iprintf>
    printf( "RX RSSI     : %d\n", params->Rssi );
 8004d6a:	2109      	movs	r1, #9
 8004d6c:	4810      	ldr	r0, [pc, #64]	; (8004db0 <DisplayRxUpdate+0xd0>)
 8004d6e:	5661      	ldrsb	r1, [r4, r1]
 8004d70:	f011 ff5e 	bl	8016c30 <iprintf>
    printf( "RX SNR      : %d\n", params->Snr );
 8004d74:	210a      	movs	r1, #10
 8004d76:	480f      	ldr	r0, [pc, #60]	; (8004db4 <DisplayRxUpdate+0xd4>)
 8004d78:	5661      	ldrsb	r1, [r4, r1]
 8004d7a:	f011 ff59 	bl	8016c30 <iprintf>
    printf( "\n" );
 8004d7e:	200a      	movs	r0, #10
 8004d80:	f011 ff70 	bl	8016c64 <putchar>
 8004d84:	e7c4      	b.n	8004d10 <DisplayRxUpdate+0x30>
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	080187ac 	.word	0x080187ac
 8004d8c:	20000004 	.word	0x20000004
 8004d90:	08018e1e 	.word	0x08018e1e
 8004d94:	0801917b 	.word	0x0801917b
 8004d98:	080191b0 	.word	0x080191b0
 8004d9c:	080191e5 	.word	0x080191e5
 8004da0:	08019217 	.word	0x08019217
 8004da4:	08019229 	.word	0x08019229
 8004da8:	0801923b 	.word	0x0801923b
 8004dac:	080190f3 	.word	0x080190f3
 8004db0:	0801924a 	.word	0x0801924a
 8004db4:	0801925c 	.word	0x0801925c

08004db8 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
    NvmNotifyFlags = notifyFlags;
 8004db8:	4b01      	ldr	r3, [pc, #4]	; (8004dc0 <NvmDataMgmtEvent+0x8>)
 8004dba:	8018      	strh	r0, [r3, #0]
}
 8004dbc:	4770      	bx	lr
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	200003b6 	.word	0x200003b6

08004dc4 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 8004dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    uint16_t offset = 0;
    uint16_t dataSize = 0;
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_NVM_CTXS;
 8004dc6:	2734      	movs	r7, #52	; 0x34
{
 8004dc8:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NVM_CTXS;
 8004dca:	ac01      	add	r4, sp, #4
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004dcc:	0020      	movs	r0, r4
    mibReq.Type = MIB_NVM_CTXS;
 8004dce:	7027      	strb	r7, [r4, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004dd0:	f002 faae 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;

    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 8004dd4:	4d2f      	ldr	r5, [pc, #188]	; (8004e94 <NvmDataMgmtStore+0xd0>)
 8004dd6:	882b      	ldrh	r3, [r5, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <NvmDataMgmtStore+0x20>
    {
        // There was no update.
        return 0;
 8004ddc:	2400      	movs	r4, #0
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 8004dde:	0020      	movs	r0, r4
 8004de0:	b00b      	add	sp, #44	; 0x2c
 8004de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;
 8004de4:	6866      	ldr	r6, [r4, #4]
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 8004de6:	f002 fa2b 	bl	8007240 <LoRaMacStop>
 8004dea:	1e02      	subs	r2, r0, #0
 8004dec:	d1f6      	bne.n	8004ddc <NvmDataMgmtStore+0x18>
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_CRYPTO ) ==
 8004dee:	8829      	ldrh	r1, [r5, #0]
 8004df0:	2301      	movs	r3, #1
 8004df2:	000c      	movs	r4, r1
 8004df4:	401c      	ands	r4, r3
 8004df6:	4219      	tst	r1, r3
 8004df8:	d004      	beq.n	8004e04 <NvmDataMgmtStore+0x40>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ),
 8004dfa:	0039      	movs	r1, r7
 8004dfc:	0030      	movs	r0, r6
 8004dfe:	f006 fbb6 	bl	800b56e <NvmmWrite>
 8004e02:	0004      	movs	r4, r0
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1 ) ==
 8004e04:	882b      	ldrh	r3, [r5, #0]
 8004e06:	079b      	lsls	r3, r3, #30
 8004e08:	d506      	bpl.n	8004e18 <NvmDataMgmtStore+0x54>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->MacGroup1,
 8004e0a:	2234      	movs	r2, #52	; 0x34
 8004e0c:	2118      	movs	r1, #24
 8004e0e:	18b0      	adds	r0, r6, r2
 8004e10:	f006 fbad 	bl	800b56e <NvmmWrite>
 8004e14:	1824      	adds	r4, r4, r0
 8004e16:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2 ) ==
 8004e18:	882b      	ldrh	r3, [r5, #0]
 8004e1a:	075b      	lsls	r3, r3, #29
 8004e1c:	d507      	bpl.n	8004e2e <NvmDataMgmtStore+0x6a>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->MacGroup2,
 8004e1e:	224c      	movs	r2, #76	; 0x4c
 8004e20:	21ac      	movs	r1, #172	; 0xac
 8004e22:	18b0      	adds	r0, r6, r2
 8004e24:	0049      	lsls	r1, r1, #1
 8004e26:	f006 fba2 	bl	800b56e <NvmmWrite>
 8004e2a:	1824      	adds	r4, r4, r0
 8004e2c:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT ) ==
 8004e2e:	882b      	ldrh	r3, [r5, #0]
 8004e30:	071b      	lsls	r3, r3, #28
 8004e32:	d508      	bpl.n	8004e46 <NvmDataMgmtStore+0x82>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ),
 8004e34:	22d2      	movs	r2, #210	; 0xd2
 8004e36:	21d0      	movs	r1, #208	; 0xd0
 8004e38:	0052      	lsls	r2, r2, #1
 8004e3a:	0049      	lsls	r1, r1, #1
 8004e3c:	18b0      	adds	r0, r6, r2
 8004e3e:	f006 fb96 	bl	800b56e <NvmmWrite>
 8004e42:	1824      	adds	r4, r4, r0
 8004e44:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1 ) ==
 8004e46:	882b      	ldrh	r3, [r5, #0]
 8004e48:	06db      	lsls	r3, r3, #27
 8004e4a:	d507      	bpl.n	8004e5c <NvmDataMgmtStore+0x98>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->RegionGroup1,
 8004e4c:	22d1      	movs	r2, #209	; 0xd1
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	2114      	movs	r1, #20
 8004e52:	18b0      	adds	r0, r6, r2
 8004e54:	f006 fb8b 	bl	800b56e <NvmmWrite>
 8004e58:	1824      	adds	r4, r4, r0
 8004e5a:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2 ) ==
 8004e5c:	882b      	ldrh	r3, [r5, #0]
 8004e5e:	069b      	lsls	r3, r3, #26
 8004e60:	d508      	bpl.n	8004e74 <NvmDataMgmtStore+0xb0>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->RegionGroup2,
 8004e62:	22d6      	movs	r2, #214	; 0xd6
 8004e64:	21df      	movs	r1, #223	; 0xdf
 8004e66:	0092      	lsls	r2, r2, #2
 8004e68:	0089      	lsls	r1, r1, #2
 8004e6a:	18b0      	adds	r0, r6, r2
 8004e6c:	f006 fb7f 	bl	800b56e <NvmmWrite>
 8004e70:	1824      	adds	r4, r4, r0
 8004e72:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_CLASS_B ) ==
 8004e74:	882b      	ldrh	r3, [r5, #0]
 8004e76:	065b      	lsls	r3, r3, #25
 8004e78:	d507      	bpl.n	8004e8a <NvmDataMgmtStore+0xc6>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ),
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <NvmDataMgmtStore+0xd4>)
 8004e7c:	2118      	movs	r1, #24
 8004e7e:	001a      	movs	r2, r3
 8004e80:	18f0      	adds	r0, r6, r3
 8004e82:	f006 fb74 	bl	800b56e <NvmmWrite>
 8004e86:	1824      	adds	r4, r4, r0
 8004e88:	b2a4      	uxth	r4, r4
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	802b      	strh	r3, [r5, #0]
    LoRaMacStart( );
 8004e8e:	f002 f9cf 	bl	8007230 <LoRaMacStart>
    return dataSize;
 8004e92:	e7a4      	b.n	8004dde <NvmDataMgmtStore+0x1a>
 8004e94:	200003b6 	.word	0x200003b6
 8004e98:	000006d4 	.word	0x000006d4

08004e9c <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 8004e9c:	b530      	push	{r4, r5, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_NVM_CTXS;
 8004e9e:	2434      	movs	r4, #52	; 0x34
{
 8004ea0:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NVM_CTXS;
 8004ea2:	ad01      	add	r5, sp, #4
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004ea4:	0028      	movs	r0, r5
    mibReq.Type = MIB_NVM_CTXS;
 8004ea6:	702c      	strb	r4, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004ea8:	f002 fa42 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;
    uint16_t offset = 0;

    // Crypto
    if( NvmmCrc32Check( sizeof( LoRaMacCryptoNvmData_t ), offset ) == false )
 8004eac:	2100      	movs	r1, #0
 8004eae:	0020      	movs	r0, r4
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;
 8004eb0:	9d02      	ldr	r5, [sp, #8]
    if( NvmmCrc32Check( sizeof( LoRaMacCryptoNvmData_t ), offset ) == false )
 8004eb2:	f006 fb76 	bl	800b5a2 <NvmmCrc32Check>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d102      	bne.n	8004ec0 <NvmDataMgmtRestore+0x24>
    {
        return 0;
 8004eba:	2000      	movs	r0, #0
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 8004ebc:	b00b      	add	sp, #44	; 0x2c
 8004ebe:	bd30      	pop	{r4, r5, pc}
    if( NvmmCrc32Check( sizeof( LoRaMacNvmDataGroup1_t ), offset ) == false )
 8004ec0:	0021      	movs	r1, r4
 8004ec2:	2018      	movs	r0, #24
 8004ec4:	f006 fb6d 	bl	800b5a2 <NvmmCrc32Check>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d0f6      	beq.n	8004eba <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( LoRaMacNvmDataGroup2_t ), offset ) == false )
 8004ecc:	20ac      	movs	r0, #172	; 0xac
 8004ece:	214c      	movs	r1, #76	; 0x4c
 8004ed0:	0040      	lsls	r0, r0, #1
 8004ed2:	f006 fb66 	bl	800b5a2 <NvmmCrc32Check>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d0ef      	beq.n	8004eba <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( SecureElementNvmData_t ), offset ) == false )
 8004eda:	21d2      	movs	r1, #210	; 0xd2
 8004edc:	20d0      	movs	r0, #208	; 0xd0
 8004ede:	0049      	lsls	r1, r1, #1
 8004ee0:	0040      	lsls	r0, r0, #1
 8004ee2:	f006 fb5e 	bl	800b5a2 <NvmmCrc32Check>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0e7      	beq.n	8004eba <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( RegionNvmDataGroup1_t ), offset ) == false )
 8004eea:	21d1      	movs	r1, #209	; 0xd1
 8004eec:	2014      	movs	r0, #20
 8004eee:	0089      	lsls	r1, r1, #2
 8004ef0:	f006 fb57 	bl	800b5a2 <NvmmCrc32Check>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d0e0      	beq.n	8004eba <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( RegionNvmDataGroup2_t ), offset ) == false )
 8004ef8:	21d6      	movs	r1, #214	; 0xd6
 8004efa:	20df      	movs	r0, #223	; 0xdf
 8004efc:	0089      	lsls	r1, r1, #2
 8004efe:	0080      	lsls	r0, r0, #2
 8004f00:	f006 fb4f 	bl	800b5a2 <NvmmCrc32Check>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d0d8      	beq.n	8004eba <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( LoRaMacClassBNvmData_t ), offset ) == false )
 8004f08:	2018      	movs	r0, #24
 8004f0a:	4907      	ldr	r1, [pc, #28]	; (8004f28 <NvmDataMgmtRestore+0x8c>)
 8004f0c:	f006 fb49 	bl	800b5a2 <NvmmCrc32Check>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d0d2      	beq.n	8004eba <NvmDataMgmtRestore+0x1e>
    if( NvmmRead( ( uint8_t* ) nvm, sizeof( LoRaMacNvmData_t ), 0 ) ==
 8004f14:	4c05      	ldr	r4, [pc, #20]	; (8004f2c <NvmDataMgmtRestore+0x90>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	0021      	movs	r1, r4
 8004f1a:	0028      	movs	r0, r5
 8004f1c:	f006 fb34 	bl	800b588 <NvmmRead>
 8004f20:	42a0      	cmp	r0, r4
 8004f22:	d1ca      	bne.n	8004eba <NvmDataMgmtRestore+0x1e>
 8004f24:	e7ca      	b.n	8004ebc <NvmDataMgmtRestore+0x20>
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	000006d4 	.word	0x000006d4
 8004f2c:	000006ec 	.word	0x000006ec

08004f30 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8004f30:	2308      	movs	r3, #8
 8004f32:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <OnRadioTxTimeout+0x24>)
{
 8004f34:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8004f36:	7811      	ldrb	r1, [r2, #0]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004f3c:	23d2      	movs	r3, #210	; 0xd2
 8004f3e:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <OnRadioTxTimeout+0x28>)
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	58d3      	ldr	r3, [r2, r3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <OnRadioTxTimeout+0x20>
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d000      	beq.n	8004f50 <OnRadioTxTimeout+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8004f4e:	4798      	blx	r3
    }
}
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	200003b8 	.word	0x200003b8
 8004f58:	200003bc 	.word	0x200003bc

08004f5c <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <OnRadioRxError+0x24>)
{
 8004f60:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8004f62:	7811      	ldrb	r1, [r2, #0]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004f68:	23d2      	movs	r3, #210	; 0xd2
 8004f6a:	4a06      	ldr	r2, [pc, #24]	; (8004f84 <OnRadioRxError+0x28>)
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	58d3      	ldr	r3, [r2, r3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <OnRadioRxError+0x20>
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d000      	beq.n	8004f7c <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8004f7a:	4798      	blx	r3
    }
}
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	200003b8 	.word	0x200003b8
 8004f84:	200003bc 	.word	0x200003bc

08004f88 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	4a08      	ldr	r2, [pc, #32]	; (8004fac <OnRadioRxTimeout+0x24>)
{
 8004f8c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8004f8e:	7811      	ldrb	r1, [r2, #0]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004f94:	23d2      	movs	r3, #210	; 0xd2
 8004f96:	4a06      	ldr	r2, [pc, #24]	; (8004fb0 <OnRadioRxTimeout+0x28>)
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	58d3      	ldr	r3, [r2, r3]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <OnRadioRxTimeout+0x20>
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d000      	beq.n	8004fa8 <OnRadioRxTimeout+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8004fa6:	4798      	blx	r3
    }
}
 8004fa8:	bd10      	pop	{r4, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	200003b8 	.word	0x200003b8
 8004fb0:	200003bc 	.word	0x200003bc

08004fb4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8004fb4:	23c2      	movs	r3, #194	; 0xc2
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <UpdateRxSlotIdleState+0x18>)
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d000      	beq.n	8004fc2 <UpdateRxSlotIdleState+0xe>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8004fc0:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8004fc2:	4903      	ldr	r1, [pc, #12]	; (8004fd0 <UpdateRxSlotIdleState+0x1c>)
 8004fc4:	4a03      	ldr	r2, [pc, #12]	; (8004fd4 <UpdateRxSlotIdleState+0x20>)
 8004fc6:	548b      	strb	r3, [r1, r2]
 8004fc8:	4770      	bx	lr
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	200008d4 	.word	0x200008d4
 8004fd0:	200003bc 	.word	0x200003bc
 8004fd4:	0000048c 	.word	0x0000048c

08004fd8 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8004fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <GetMaxAppPayloadWithoutFOptsLength+0x24>)
 8004fdc:	a902      	add	r1, sp, #8
 8004fde:	001a      	movs	r2, r3
 8004fe0:	3280      	adds	r2, #128	; 0x80
 8004fe2:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004fe4:	334c      	adds	r3, #76	; 0x4c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004fe6:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8004fe8:	220d      	movs	r2, #13
    getPhy.Datarate = datarate;
 8004fea:	7048      	strb	r0, [r1, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8004fec:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004fee:	7818      	ldrb	r0, [r3, #0]
 8004ff0:	f003 fe1c 	bl	8008c2c <RegionGetPhyParam>

    return phyParam.Value;
 8004ff4:	b2c0      	uxtb	r0, r0
}
 8004ff6:	b005      	add	sp, #20
 8004ff8:	bd00      	pop	{pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	200008d4 	.word	0x200008d4

08005000 <OnRetransmitTimeoutTimerEvent>:
{
 8005000:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8005002:	480a      	ldr	r0, [pc, #40]	; (800502c <OnRetransmitTimeoutTimerEvent+0x2c>)
 8005004:	f006 fc74 	bl	800b8f0 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <OnRetransmitTimeoutTimerEvent+0x30>)
 800500a:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <OnRetransmitTimeoutTimerEvent+0x34>)
 800500c:	5c9a      	ldrb	r2, [r3, r2]
 800500e:	2a00      	cmp	r2, #0
 8005010:	d002      	beq.n	8005018 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8005012:	2101      	movs	r1, #1
 8005014:	4a08      	ldr	r2, [pc, #32]	; (8005038 <OnRetransmitTimeoutTimerEvent+0x38>)
 8005016:	5499      	strb	r1, [r3, r2]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8005018:	22d2      	movs	r2, #210	; 0xd2
 800501a:	0092      	lsls	r2, r2, #2
 800501c:	589b      	ldr	r3, [r3, r2]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <OnRetransmitTimeoutTimerEvent+0x2a>
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d000      	beq.n	800502a <OnRetransmitTimeoutTimerEvent+0x2a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005028:	4798      	blx	r3
}
 800502a:	bd10      	pop	{r4, pc}
 800502c:	200007bc 	.word	0x200007bc
 8005030:	200003bc 	.word	0x200003bc
 8005034:	0000041a 	.word	0x0000041a
 8005038:	00000419 	.word	0x00000419

0800503c <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800503c:	22d0      	movs	r2, #208	; 0xd0
 800503e:	2380      	movs	r3, #128	; 0x80
{
 8005040:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8005042:	4c0a      	ldr	r4, [pc, #40]	; (800506c <PrepareRxDoneAbort+0x30>)
 8005044:	0092      	lsls	r2, r2, #2
 8005046:	58a1      	ldr	r1, [r4, r2]
 8005048:	430b      	orrs	r3, r1
 800504a:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <PrepareRxDoneAbort+0x34>)
 800504e:	5ce3      	ldrb	r3, [r4, r3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <PrepareRxDoneAbort+0x1e>
        OnRetransmitTimeoutTimerEvent( NULL );
 8005054:	2000      	movs	r0, #0
 8005056:	f7ff ffd3 	bl	8005000 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800505a:	2322      	movs	r3, #34	; 0x22
 800505c:	4905      	ldr	r1, [pc, #20]	; (8005074 <PrepareRxDoneAbort+0x38>)
 800505e:	5c62      	ldrb	r2, [r4, r1]
 8005060:	439a      	bics	r2, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8005066:	f7ff ffa5 	bl	8004fb4 <UpdateRxSlotIdleState>
}
 800506a:	bd10      	pop	{r4, pc}
 800506c:	200003bc 	.word	0x200003bc
 8005070:	0000041a 	.word	0x0000041a
 8005074:	0000048d 	.word	0x0000048d

08005078 <HandleRadioRxErrorTimeout>:
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005078:	23c2      	movs	r3, #194	; 0xc2
{
 800507a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800507c:	4f2d      	ldr	r7, [pc, #180]	; (8005134 <HandleRadioRxErrorTimeout+0xbc>)
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	5cfb      	ldrb	r3, [r7, r3]
{
 8005082:	0005      	movs	r5, r0
 8005084:	000c      	movs	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 800508a:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HandleRadioRxErrorTimeout+0xc0>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8005092:	f002 ff17 	bl	8007ec4 <LoRaMacClassBIsBeaconExpected>
 8005096:	1e06      	subs	r6, r0, #0
 8005098:	d005      	beq.n	80050a6 <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800509a:	2002      	movs	r0, #2
 800509c:	f002 ff08 	bl	8007eb0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80050a0:	2000      	movs	r0, #0
 80050a2:	f002 ff0a 	bl	8007eba <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80050a6:	23c2      	movs	r3, #194	; 0xc2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	5cfb      	ldrb	r3, [r7, r3]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d118      	bne.n	80050e2 <HandleRadioRxErrorTimeout+0x6a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80050b0:	f002 ff0a 	bl	8007ec8 <LoRaMacClassBIsPingExpected>
 80050b4:	9001      	str	r0, [sp, #4]
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d006      	beq.n	80050c8 <HandleRadioRxErrorTimeout+0x50>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80050ba:	2000      	movs	r0, #0
 80050bc:	f002 fef9 	bl	8007eb2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80050c0:	2000      	movs	r0, #0
 80050c2:	f002 fefb 	bl	8007ebc <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80050c6:	9e01      	ldr	r6, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80050c8:	f002 ff00 	bl	8007ecc <LoRaMacClassBIsMulticastExpected>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d008      	beq.n	80050e2 <HandleRadioRxErrorTimeout+0x6a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80050d0:	2000      	movs	r0, #0
 80050d2:	f002 feef 	bl	8007eb4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80050d6:	2000      	movs	r0, #0
 80050d8:	f002 fef1 	bl	8007ebe <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 80050dc:	f7ff ff6a 	bl	8004fb4 <UpdateRxSlotIdleState>
}
 80050e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 80050e2:	2e00      	cmp	r6, #0
 80050e4:	d1fa      	bne.n	80050dc <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 80050e6:	4e15      	ldr	r6, [pc, #84]	; (800513c <HandleRadioRxErrorTimeout+0xc4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HandleRadioRxErrorTimeout+0xc8>)
            if( MacCtx.NodeAckRequested == true )
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <HandleRadioRxErrorTimeout+0xcc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80050ec:	5cb2      	ldrb	r2, [r6, r2]
            if( MacCtx.NodeAckRequested == true )
 80050ee:	5cf3      	ldrb	r3, [r6, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	d117      	bne.n	8005124 <HandleRadioRxErrorTimeout+0xac>
            if( MacCtx.NodeAckRequested == true )
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HandleRadioRxErrorTimeout+0x84>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HandleRadioRxErrorTimeout+0xd0>)
 80050fa:	54f5      	strb	r5, [r6, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80050fc:	0028      	movs	r0, r5
 80050fe:	f003 f89d 	bl	800823c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8005102:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005104:	f006 fc39 	bl	800b97a <TimerGetElapsedTime>
 8005108:	23ef      	movs	r3, #239	; 0xef
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	58f3      	ldr	r3, [r6, r3]
 800510e:	4298      	cmp	r0, r3
 8005110:	d3e4      	bcc.n	80050dc <HandleRadioRxErrorTimeout+0x64>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8005112:	480e      	ldr	r0, [pc, #56]	; (800514c <HandleRadioRxErrorTimeout+0xd4>)
 8005114:	f006 fbec 	bl	800b8f0 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8005118:	2320      	movs	r3, #32
 800511a:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <HandleRadioRxErrorTimeout+0xd8>)
 800511c:	5cb1      	ldrb	r1, [r6, r2]
 800511e:	430b      	orrs	r3, r1
 8005120:	54b3      	strb	r3, [r6, r2]
 8005122:	e7db      	b.n	80050dc <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HandleRadioRxErrorTimeout+0xb4>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <HandleRadioRxErrorTimeout+0xd0>)
 800512a:	54f4      	strb	r4, [r6, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800512c:	0020      	movs	r0, r4
 800512e:	f003 f885 	bl	800823c <LoRaMacConfirmQueueSetStatusCmn>
 8005132:	e7f1      	b.n	8005118 <HandleRadioRxErrorTimeout+0xa0>
 8005134:	200008d4 	.word	0x200008d4
 8005138:	0801a9e0 	.word	0x0801a9e0
 800513c:	200003bc 	.word	0x200003bc
 8005140:	0000048c 	.word	0x0000048c
 8005144:	0000041a 	.word	0x0000041a
 8005148:	00000445 	.word	0x00000445
 800514c:	2000075c 	.word	0x2000075c
 8005150:	0000048d 	.word	0x0000048d

08005154 <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 8005154:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8005156:	4d16      	ldr	r5, [pc, #88]	; (80051b0 <OpenContinuousRxCWindow+0x5c>)
 8005158:	217c      	movs	r1, #124	; 0x7c
 800515a:	002b      	movs	r3, r5
 800515c:	002f      	movs	r7, r5
 800515e:	4e15      	ldr	r6, [pc, #84]	; (80051b4 <OpenContinuousRxCWindow+0x60>)
{
 8005160:	b085      	sub	sp, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8005162:	3354      	adds	r3, #84	; 0x54
 8005164:	374c      	adds	r7, #76	; 0x4c
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	5669      	ldrsb	r1, [r5, r1]
 800516a:	7838      	ldrb	r0, [r7, #0]
 800516c:	9600      	str	r6, [sp, #0]
 800516e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005170:	f003 fdb7 	bl	8008ce2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005174:	2302      	movs	r3, #2
 8005176:	4c10      	ldr	r4, [pc, #64]	; (80051b8 <OpenContinuousRxCWindow+0x64>)
 8005178:	4a10      	ldr	r2, [pc, #64]	; (80051bc <OpenContinuousRxCWindow+0x68>)
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800517a:	0031      	movs	r1, r6
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800517c:	54a3      	strb	r3, [r4, r2]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800517e:	339b      	adds	r3, #155	; 0x9b
 8005180:	33ff      	adds	r3, #255	; 0xff
 8005182:	5cea      	ldrb	r2, [r5, r3]
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <OpenContinuousRxCWindow+0x6c>)
 8005186:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8005188:	2201      	movs	r2, #1
 800518a:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <OpenContinuousRxCWindow+0x70>)
 800518c:	54e2      	strb	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800518e:	7838      	ldrb	r0, [r7, #0]
 8005190:	4a0d      	ldr	r2, [pc, #52]	; (80051c8 <OpenContinuousRxCWindow+0x74>)
 8005192:	f003 fdb8 	bl	8008d06 <RegionRxConfig>
 8005196:	2800      	cmp	r0, #0
 8005198:	d008      	beq.n	80051ac <OpenContinuousRxCWindow+0x58>
    {
        Radio.Rx( 0 ); // Continuous mode
 800519a:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <OpenContinuousRxCWindow+0x78>)
 800519c:	2000      	movs	r0, #0
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80051a4:	4a05      	ldr	r2, [pc, #20]	; (80051bc <OpenContinuousRxCWindow+0x68>)
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <OpenContinuousRxCWindow+0x7c>)
 80051a8:	5ca2      	ldrb	r2, [r4, r2]
 80051aa:	54e2      	strb	r2, [r4, r3]
    }
}
 80051ac:	b005      	add	sp, #20
 80051ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b0:	200008d4 	.word	0x200008d4
 80051b4:	200007a4 	.word	0x200007a4
 80051b8:	200003bc 	.word	0x200003bc
 80051bc:	000003fa 	.word	0x000003fa
 80051c0:	000003fb 	.word	0x000003fb
 80051c4:	000003f9 	.word	0x000003f9
 80051c8:	200007e0 	.word	0x200007e0
 80051cc:	0801a9e0 	.word	0x0801a9e0
 80051d0:	0000048c 	.word	0x0000048c

080051d4 <SwitchClass>:
{
 80051d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 80051d6:	27c2      	movs	r7, #194	; 0xc2
 80051d8:	4d35      	ldr	r5, [pc, #212]	; (80052b0 <SwitchClass+0xdc>)
 80051da:	007f      	lsls	r7, r7, #1
 80051dc:	5dec      	ldrb	r4, [r5, r7]
{
 80051de:	0006      	movs	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80051e0:	2c01      	cmp	r4, #1
 80051e2:	d053      	beq.n	800528c <SwitchClass+0xb8>
 80051e4:	2c02      	cmp	r4, #2
 80051e6:	d058      	beq.n	800529a <SwitchClass+0xc6>
 80051e8:	2c00      	cmp	r4, #0
 80051ea:	d10d      	bne.n	8005208 <SwitchClass+0x34>
            if( deviceClass == CLASS_A )
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d107      	bne.n	8005200 <SwitchClass+0x2c>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80051f0:	002b      	movs	r3, r5
 80051f2:	3570      	adds	r5, #112	; 0x70
 80051f4:	3378      	adds	r3, #120	; 0x78
 80051f6:	cd06      	ldmia	r5!, {r1, r2}
 80051f8:	c306      	stmia	r3!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80051fa:	3403      	adds	r4, #3
}
 80051fc:	0020      	movs	r0, r4
 80051fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 8005200:	2801      	cmp	r0, #1
 8005202:	d043      	beq.n	800528c <SwitchClass+0xb8>
            if( deviceClass == CLASS_C )
 8005204:	2802      	cmp	r0, #2
 8005206:	d001      	beq.n	800520c <SwitchClass+0x38>
    switch( Nvm.MacGroup2.DeviceClass )
 8005208:	2403      	movs	r4, #3
 800520a:	e7f7      	b.n	80051fc <SwitchClass+0x28>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800520c:	22fa      	movs	r2, #250	; 0xfa
 800520e:	21f5      	movs	r1, #245	; 0xf5
 8005210:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <SwitchClass+0xe0>)
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8005216:	55e8      	strb	r0, [r5, r7]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8005218:	189a      	adds	r2, r3, r2
 800521a:	1859      	adds	r1, r3, r1
 800521c:	c989      	ldmia	r1!, {r0, r3, r7}
 800521e:	c289      	stmia	r2!, {r0, r3, r7}
 8005220:	c909      	ldmia	r1!, {r0, r3}
 8005222:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005224:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <SwitchClass+0xe0>)
 8005226:	4824      	ldr	r0, [pc, #144]	; (80052b8 <SwitchClass+0xe4>)
 8005228:	0021      	movs	r1, r4
 800522a:	541e      	strb	r6, [r3, r0]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800522c:	232c      	movs	r3, #44	; 0x2c
 800522e:	4f23      	ldr	r7, [pc, #140]	; (80052bc <SwitchClass+0xe8>)
 8005230:	001a      	movs	r2, r3
 8005232:	434a      	muls	r2, r1
 8005234:	5cbe      	ldrb	r6, [r7, r2]
 8005236:	2e00      	cmp	r6, #0
 8005238:	d024      	beq.n	8005284 <SwitchClass+0xb0>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800523a:	18aa      	adds	r2, r5, r2
 800523c:	0011      	movs	r1, r2
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800523e:	002e      	movs	r6, r5
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8005240:	31ec      	adds	r1, #236	; 0xec
 8005242:	6809      	ldr	r1, [r1, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8005244:	32f0      	adds	r2, #240	; 0xf0
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8005246:	67a9      	str	r1, [r5, #120]	; 0x78
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	367c      	adds	r6, #124	; 0x7c
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <SwitchClass+0xe0>)
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800524e:	7032      	strb	r2, [r6, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <SwitchClass+0xec>)
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005252:	3581      	adds	r5, #129	; 0x81
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8005254:	5c9e      	ldrb	r6, [r3, r2]
 8005256:	3a33      	subs	r2, #51	; 0x33
 8005258:	549e      	strb	r6, [r3, r2]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800525a:	3204      	adds	r2, #4
 800525c:	5099      	str	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800525e:	7829      	ldrb	r1, [r5, #0]
 8005260:	320c      	adds	r2, #12
 8005262:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8005264:	2203      	movs	r2, #3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8005266:	2101      	movs	r1, #1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8005268:	541a      	strb	r2, [r3, r0]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <SwitchClass+0xf0>)
 800526c:	5499      	strb	r1, [r3, r2]
                MacCtx.NodeAckRequested = false;
 800526e:	2100      	movs	r1, #0
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <SwitchClass+0xf4>)
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <SwitchClass+0xe0>)
 8005274:	5499      	strb	r1, [r3, r2]
                Radio.Sleep( );
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <SwitchClass+0xf8>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800527e:	f7ff ff69 	bl	8005154 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8005282:	e7bb      	b.n	80051fc <SwitchClass+0x28>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8005284:	3101      	adds	r1, #1
 8005286:	2904      	cmp	r1, #4
 8005288:	d1d2      	bne.n	8005230 <SwitchClass+0x5c>
 800528a:	e7f0      	b.n	800526e <SwitchClass+0x9a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800528c:	0030      	movs	r0, r6
 800528e:	f002 fe24 	bl	8007eda <LoRaMacClassBSwitchClass>
 8005292:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8005294:	d1b2      	bne.n	80051fc <SwitchClass+0x28>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8005296:	55ee      	strb	r6, [r5, r7]
 8005298:	e7b0      	b.n	80051fc <SwitchClass+0x28>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800529a:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 800529c:	2800      	cmp	r0, #0
 800529e:	d1ad      	bne.n	80051fc <SwitchClass+0x28>
                Radio.Sleep( );
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <SwitchClass+0xf8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80052a2:	55e8      	strb	r0, [r5, r7]
                Radio.Sleep( );
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 80052a6:	0034      	movs	r4, r6
                Radio.Sleep( );
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80052ac:	e7a6      	b.n	80051fc <SwitchClass+0x28>
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	200008d4 	.word	0x200008d4
 80052b4:	200003bc 	.word	0x200003bc
 80052b8:	000003fa 	.word	0x000003fa
 80052bc:	200009aa 	.word	0x200009aa
 80052c0:	0000041b 	.word	0x0000041b
 80052c4:	000003f9 	.word	0x000003f9
 80052c8:	0000041a 	.word	0x0000041a
 80052cc:	0801a9e0 	.word	0x0801a9e0

080052d0 <OnRadioRxDone>:
{
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	000e      	movs	r6, r1
 80052d4:	0015      	movs	r5, r2
 80052d6:	001c      	movs	r4, r3
 80052d8:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80052da:	f006 fb48 	bl	800b96e <TimerGetCurrentTime>
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <OnRadioRxDone+0x3c>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80052e0:	490b      	ldr	r1, [pc, #44]	; (8005310 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80052e2:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 80052e4:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 80052e6:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 80052e8:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 80052ea:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80052ec:	2311      	movs	r3, #17
 80052ee:	780a      	ldrb	r2, [r1, #0]
 80052f0:	439a      	bics	r2, r3
 80052f2:	4313      	orrs	r3, r2
 80052f4:	700b      	strb	r3, [r1, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80052f6:	23d2      	movs	r3, #210	; 0xd2
 80052f8:	4a06      	ldr	r2, [pc, #24]	; (8005314 <OnRadioRxDone+0x44>)
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	58d3      	ldr	r3, [r2, r3]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <OnRadioRxDone+0x3a>
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d000      	beq.n	800530a <OnRadioRxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005308:	4798      	blx	r3
}
 800530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530c:	20001050 	.word	0x20001050
 8005310:	200003b8 	.word	0x200003b8
 8005314:	200003bc 	.word	0x200003bc

08005318 <OnRadioTxDone>:
{
 8005318:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800531a:	f006 fb28 	bl	800b96e <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 800531e:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <OnRadioTxDone+0x3c>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8005322:	4d0d      	ldr	r5, [pc, #52]	; (8005358 <OnRadioTxDone+0x40>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8005324:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8005326:	0020      	movs	r0, r4
 8005328:	f006 f9c2 	bl	800b6b0 <SysTimeGet>
 800532c:	23ce      	movs	r3, #206	; 0xce
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	18eb      	adds	r3, r5, r3
 8005332:	cc06      	ldmia	r4!, {r1, r2}
 8005334:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8005336:	2320      	movs	r3, #32
 8005338:	4a08      	ldr	r2, [pc, #32]	; (800535c <OnRadioTxDone+0x44>)
 800533a:	7811      	ldrb	r1, [r2, #0]
 800533c:	430b      	orrs	r3, r1
 800533e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8005340:	23d2      	movs	r3, #210	; 0xd2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	58eb      	ldr	r3, [r5, r3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <OnRadioTxDone+0x3a>
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d000      	beq.n	8005352 <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005350:	4798      	blx	r3
}
 8005352:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8005354:	20001060 	.word	0x20001060
 8005358:	200003bc 	.word	0x200003bc
 800535c:	200003b8 	.word	0x200003b8

08005360 <ResetMacParameters>:
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8005360:	23ce      	movs	r3, #206	; 0xce
{
 8005362:	b5f0      	push	{r4, r5, r6, r7, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8005364:	2600      	movs	r6, #0
 8005366:	4c4e      	ldr	r4, [pc, #312]	; (80054a0 <ResetMacParameters+0x140>)
 8005368:	005b      	lsls	r3, r3, #1
    MacCtx.ResponseTimeoutStartTime = 0;
 800536a:	4d4e      	ldr	r5, [pc, #312]	; (80054a4 <ResetMacParameters+0x144>)
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800536c:	54e6      	strb	r6, [r4, r3]
    MacCtx.ResponseTimeoutStartTime = 0;
 800536e:	4b4e      	ldr	r3, [pc, #312]	; (80054a8 <ResetMacParameters+0x148>)
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005370:	0022      	movs	r2, r4
    MacCtx.ResponseTimeoutStartTime = 0;
 8005372:	50ee      	str	r6, [r5, r3]
    Nvm.MacGroup2.MaxDCycle = 0;
 8005374:	2388      	movs	r3, #136	; 0x88
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8005376:	2701      	movs	r7, #1
    Nvm.MacGroup2.MaxDCycle = 0;
 8005378:	33ff      	adds	r3, #255	; 0xff
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800537a:	32c8      	adds	r2, #200	; 0xc8
    Nvm.MacGroup2.MaxDCycle = 0;
 800537c:	54e6      	strb	r6, [r4, r3]
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800537e:	8812      	ldrh	r2, [r2, #0]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8005380:	3305      	adds	r3, #5
 8005382:	52e7      	strh	r7, [r4, r3]
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005384:	1da3      	adds	r3, r4, #6
 8005386:	87da      	strh	r2, [r3, #62]	; 0x3e
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8005388:	0022      	movs	r2, r4
 800538a:	0020      	movs	r0, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 800538c:	6366      	str	r6, [r4, #52]	; 0x34
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800538e:	32a9      	adds	r2, #169	; 0xa9
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	306d      	adds	r0, #109	; 0x6d
 8005394:	7002      	strb	r2, [r0, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8005396:	0020      	movs	r0, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005398:	0021      	movs	r1, r4
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800539a:	3070      	adds	r0, #112	; 0x70
 800539c:	0022      	movs	r2, r4
 800539e:	0003      	movs	r3, r0
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80053a0:	3108      	adds	r1, #8
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80053a2:	32ac      	adds	r2, #172	; 0xac
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80053a4:	468c      	mov	ip, r1
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80053a6:	ca03      	ldmia	r2!, {r0, r1}
 80053a8:	c303      	stmia	r3!, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80053aa:	0020      	movs	r0, r4
 80053ac:	0022      	movs	r2, r4
 80053ae:	3078      	adds	r0, #120	; 0x78
 80053b0:	0003      	movs	r3, r0
 80053b2:	32b4      	adds	r2, #180	; 0xb4
 80053b4:	ca03      	ldmia	r2!, {r0, r1}
 80053b6:	c303      	stmia	r3!, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80053b8:	0022      	movs	r2, r4
 80053ba:	3280      	adds	r2, #128	; 0x80
 80053bc:	0013      	movs	r3, r2
 80053be:	0022      	movs	r2, r4
 80053c0:	32bc      	adds	r2, #188	; 0xbc
 80053c2:	8812      	ldrh	r2, [r2, #0]
{
 80053c4:	b093      	sub	sp, #76	; 0x4c
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80053c6:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80053c8:	0022      	movs	r2, r4
 80053ca:	4663      	mov	r3, ip
 80053cc:	32c0      	adds	r2, #192	; 0xc0
 80053ce:	6812      	ldr	r2, [r2, #0]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80053d0:	a905      	add	r1, sp, #20
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80053d2:	67da      	str	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80053d4:	0022      	movs	r2, r4
 80053d6:	3288      	adds	r2, #136	; 0x88
 80053d8:	0013      	movs	r3, r2
 80053da:	0022      	movs	r2, r4
 80053dc:	32c4      	adds	r2, #196	; 0xc4
 80053de:	6812      	ldr	r2, [r2, #0]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80053e0:	730f      	strb	r7, [r1, #12]
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80053e2:	601a      	str	r2, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 80053e4:	2383      	movs	r3, #131	; 0x83
    Nvm.MacGroup1.SrvAckRequested = false;
 80053e6:	0022      	movs	r2, r4
    MacCtx.ChannelsNbTransCounter = 0;
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	52ee      	strh	r6, [r5, r3]
    MacCtx.NodeAckRequested = false;
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <ResetMacParameters+0x14c>)
    Nvm.MacGroup1.SrvAckRequested = false;
 80053ee:	3246      	adds	r2, #70	; 0x46
    MacCtx.NodeAckRequested = false;
 80053f0:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80053f2:	238a      	movs	r3, #138	; 0x8a
    Nvm.MacGroup1.SrvAckRequested = false;
 80053f4:	7016      	strb	r6, [r2, #0]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80053f6:	0022      	movs	r2, r4
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80053f8:	33ff      	adds	r3, #255	; 0xff
 80053fa:	54e6      	strb	r6, [r4, r3]
    Nvm.MacGroup2.DownlinkReceived = false;
 80053fc:	19db      	adds	r3, r3, r7
 80053fe:	54e6      	strb	r6, [r4, r3]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <ResetMacParameters+0x150>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8005402:	324c      	adds	r2, #76	; 0x4c
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8005404:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <ResetMacParameters+0x154>)
 8005408:	604b      	str	r3, [r1, #4]
    params.Bands = &RegionBands;
 800540a:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <ResetMacParameters+0x158>)
 800540c:	608b      	str	r3, [r1, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800540e:	7810      	ldrb	r0, [r2, #0]
 8005410:	f003 fc2c 	bl	8008c6c <RegionInitDefaults>
    MacCtx.Channel = 0;
 8005414:	4b29      	ldr	r3, [pc, #164]	; (80054bc <ResetMacParameters+0x15c>)
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8005416:	6f22      	ldr	r2, [r4, #112]	; 0x70
    MacCtx.Channel = 0;
 8005418:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800541a:	3b47      	subs	r3, #71	; 0x47
 800541c:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800541e:	3304      	adds	r3, #4
 8005420:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005422:	0022      	movs	r2, r4
 8005424:	23f9      	movs	r3, #249	; 0xf9
 8005426:	3281      	adds	r2, #129	; 0x81
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <ResetMacParameters+0x160>)
 8005430:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <ResetMacParameters+0x164>)
 8005434:	54ef      	strb	r7, [r5, r3]
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8005436:	23ce      	movs	r3, #206	; 0xce
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	5ce2      	ldrb	r2, [r4, r3]
 800543c:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <ResetMacParameters+0x168>)
 800543e:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8005440:	22f5      	movs	r2, #245	; 0xf5
 8005442:	19db      	adds	r3, r3, r7
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	18eb      	adds	r3, r5, r3
 8005448:	18aa      	adds	r2, r5, r2
 800544a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800544c:	c313      	stmia	r3!, {r0, r1, r4}
 800544e:	ca03      	ldmia	r2!, {r0, r1}
 8005450:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005452:	2202      	movs	r2, #2
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <ResetMacParameters+0x16c>)
    classBCallbacks.GetTemperatureLevel = NULL;
 8005456:	9603      	str	r6, [sp, #12]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8005458:	54ef      	strb	r7, [r5, r3]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <ResetMacParameters+0x170>)
    classBCallbacks.MacProcessNotify = NULL;
 800545c:	9604      	str	r6, [sp, #16]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800545e:	54ea      	strb	r2, [r5, r3]
    if( MacCtx.MacCallbacks != NULL )
 8005460:	3bb2      	subs	r3, #178	; 0xb2
 8005462:	58eb      	ldr	r3, [r5, r3]
 8005464:	42b3      	cmp	r3, r6
 8005466:	d004      	beq.n	8005472 <ResetMacParameters+0x112>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8005468:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800546a:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800546c:	9203      	str	r2, [sp, #12]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	9304      	str	r3, [sp, #16]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <ResetMacParameters+0x174>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8005474:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <ResetMacParameters+0x178>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8005476:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8005478:	4b18      	ldr	r3, [pc, #96]	; (80054dc <ResetMacParameters+0x17c>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800547a:	a903      	add	r1, sp, #12
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800547c:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <ResetMacParameters+0x180>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8005480:	a809      	add	r0, sp, #36	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8005482:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8005484:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <ResetMacParameters+0x184>)
 8005486:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8005488:	4b17      	ldr	r3, [pc, #92]	; (80054e8 <ResetMacParameters+0x188>)
 800548a:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800548c:	4b17      	ldr	r3, [pc, #92]	; (80054ec <ResetMacParameters+0x18c>)
 800548e:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <ResetMacParameters+0x190>)
 8005492:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8005494:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <ResetMacParameters+0x194>)
 8005496:	9310      	str	r3, [sp, #64]	; 0x40
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8005498:	f002 fd09 	bl	8007eae <LoRaMacClassBInit>
}
 800549c:	b013      	add	sp, #76	; 0x4c
 800549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a0:	200008d4 	.word	0x200008d4
 80054a4:	200003bc 	.word	0x200003bc
 80054a8:	00000494 	.word	0x00000494
 80054ac:	0000041a 	.word	0x0000041a
 80054b0:	20000c18 	.word	0x20000c18
 80054b4:	20000c2c 	.word	0x20000c2c
 80054b8:	20000fc0 	.word	0x20000fc0
 80054bc:	0000041b 	.word	0x0000041b
 80054c0:	000003e5 	.word	0x000003e5
 80054c4:	000003e6 	.word	0x000003e6
 80054c8:	000003e7 	.word	0x000003e7
 80054cc:	000003f9 	.word	0x000003f9
 80054d0:	000003fa 	.word	0x000003fa
 80054d4:	20000828 	.word	0x20000828
 80054d8:	20000fa8 	.word	0x20000fa8
 80054dc:	200007dc 	.word	0x200007dc
 80054e0:	20000814 	.word	0x20000814
 80054e4:	20000849 	.word	0x20000849
 80054e8:	200009a4 	.word	0x200009a4
 80054ec:	20000920 	.word	0x20000920
 80054f0:	20000924 	.word	0x20000924
 80054f4:	200009a8 	.word	0x200009a8

080054f8 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80054f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054fa:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 80054fc:	f006 f9f8 	bl	800b8f0 <TimerStop>
    Radio.Standby( );
 8005500:	4e0b      	ldr	r6, [pc, #44]	; (8005530 <RxWindowSetup.constprop.0+0x38>)
 8005502:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8005508:	4d0a      	ldr	r5, [pc, #40]	; (8005534 <RxWindowSetup.constprop.0+0x3c>)
 800550a:	0021      	movs	r1, r4
 800550c:	002b      	movs	r3, r5
 800550e:	334c      	adds	r3, #76	; 0x4c
 8005510:	7818      	ldrb	r0, [r3, #0]
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <RxWindowSetup.constprop.0+0x40>)
 8005514:	f003 fbf7 	bl	8008d06 <RegionRxConfig>
 8005518:	2800      	cmp	r0, #0
 800551a:	d007      	beq.n	800552c <RxWindowSetup.constprop.0+0x34>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800551c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800551e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8005524:	7ca1      	ldrb	r1, [r4, #18]
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <RxWindowSetup.constprop.0+0x44>)
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <RxWindowSetup.constprop.0+0x48>)
 800552a:	54d1      	strb	r1, [r2, r3]
}
 800552c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	0801a9e0 	.word	0x0801a9e0
 8005534:	200008d4 	.word	0x200008d4
 8005538:	200007e0 	.word	0x200007e0
 800553c:	200003bc 	.word	0x200003bc
 8005540:	0000048c 	.word	0x0000048c

08005544 <OnRxWindow1TimerEvent>:
{
 8005544:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <OnRxWindow1TimerEvent+0x44>)
 8005548:	4a10      	ldr	r2, [pc, #64]	; (800558c <OnRxWindow1TimerEvent+0x48>)
 800554a:	5c99      	ldrb	r1, [r3, r2]
 800554c:	3a5b      	subs	r2, #91	; 0x5b
 800554e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8005550:	4a0f      	ldr	r2, [pc, #60]	; (8005590 <OnRxWindow1TimerEvent+0x4c>)
 8005552:	0011      	movs	r1, r2
 8005554:	316d      	adds	r1, #109	; 0x6d
 8005556:	7808      	ldrb	r0, [r1, #0]
 8005558:	490e      	ldr	r1, [pc, #56]	; (8005594 <OnRxWindow1TimerEvent+0x50>)
 800555a:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800555c:	0011      	movs	r1, r2
 800555e:	3181      	adds	r1, #129	; 0x81
 8005560:	7808      	ldrb	r0, [r1, #0]
 8005562:	21f4      	movs	r1, #244	; 0xf4
 8005564:	0089      	lsls	r1, r1, #2
 8005566:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8005568:	2100      	movs	r1, #0
 800556a:	480b      	ldr	r0, [pc, #44]	; (8005598 <OnRxWindow1TimerEvent+0x54>)
 800556c:	5419      	strb	r1, [r3, r0]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800556e:	480b      	ldr	r0, [pc, #44]	; (800559c <OnRxWindow1TimerEvent+0x58>)
 8005570:	5419      	strb	r1, [r3, r0]
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8005572:	319d      	adds	r1, #157	; 0x9d
 8005574:	31ff      	adds	r1, #255	; 0xff
 8005576:	5c51      	ldrb	r1, [r2, r1]
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <OnRxWindow1TimerEvent+0x5c>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800557a:	480a      	ldr	r0, [pc, #40]	; (80055a4 <OnRxWindow1TimerEvent+0x60>)
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800557c:	5499      	strb	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800557e:	490a      	ldr	r1, [pc, #40]	; (80055a8 <OnRxWindow1TimerEvent+0x64>)
 8005580:	f7ff ffba 	bl	80054f8 <RxWindowSetup.constprop.0>
}
 8005584:	bd10      	pop	{r4, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	200003bc 	.word	0x200003bc
 800558c:	0000041b 	.word	0x0000041b
 8005590:	200008d4 	.word	0x200008d4
 8005594:	000003c3 	.word	0x000003c3
 8005598:	000003d1 	.word	0x000003d1
 800559c:	000003d2 	.word	0x000003d2
 80055a0:	000003d3 	.word	0x000003d3
 80055a4:	20000744 	.word	0x20000744
 80055a8:	2000077c 	.word	0x2000077c

080055ac <OnRxWindow2TimerEvent>:
{
 80055ac:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <OnRxWindow2TimerEvent+0x4c>)
 80055b0:	4a12      	ldr	r2, [pc, #72]	; (80055fc <OnRxWindow2TimerEvent+0x50>)
 80055b2:	5c9a      	ldrb	r2, [r3, r2]
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	d01d      	beq.n	80055f4 <OnRxWindow2TimerEvent+0x48>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80055b8:	4a11      	ldr	r2, [pc, #68]	; (8005600 <OnRxWindow2TimerEvent+0x54>)
 80055ba:	5c99      	ldrb	r1, [r3, r2]
 80055bc:	3a47      	subs	r2, #71	; 0x47
 80055be:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80055c0:	21f6      	movs	r1, #246	; 0xf6
 80055c2:	4a10      	ldr	r2, [pc, #64]	; (8005604 <OnRxWindow2TimerEvent+0x58>)
 80055c4:	0089      	lsls	r1, r1, #2
 80055c6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80055c8:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80055ca:	0011      	movs	r1, r2
 80055cc:	3181      	adds	r1, #129	; 0x81
 80055ce:	7808      	ldrb	r0, [r1, #0]
 80055d0:	21f9      	movs	r1, #249	; 0xf9
 80055d2:	0089      	lsls	r1, r1, #2
 80055d4:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80055d6:	2000      	movs	r0, #0
 80055d8:	490b      	ldr	r1, [pc, #44]	; (8005608 <OnRxWindow2TimerEvent+0x5c>)
 80055da:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <OnRxWindow2TimerEvent+0x60>)
 80055de:	3001      	adds	r0, #1
 80055e0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80055e2:	21ce      	movs	r1, #206	; 0xce
 80055e4:	0049      	lsls	r1, r1, #1
 80055e6:	5c51      	ldrb	r1, [r2, r1]
 80055e8:	4a09      	ldr	r2, [pc, #36]	; (8005610 <OnRxWindow2TimerEvent+0x64>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80055ea:	480a      	ldr	r0, [pc, #40]	; (8005614 <OnRxWindow2TimerEvent+0x68>)
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80055ec:	5499      	strb	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80055ee:	490a      	ldr	r1, [pc, #40]	; (8005618 <OnRxWindow2TimerEvent+0x6c>)
 80055f0:	f7ff ff82 	bl	80054f8 <RxWindowSetup.constprop.0>
}
 80055f4:	bd10      	pop	{r4, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	200003bc 	.word	0x200003bc
 80055fc:	0000048c 	.word	0x0000048c
 8005600:	0000041b 	.word	0x0000041b
 8005604:	200008d4 	.word	0x200008d4
 8005608:	000003e5 	.word	0x000003e5
 800560c:	000003e6 	.word	0x000003e6
 8005610:	000003e7 	.word	0x000003e7
 8005614:	2000075c 	.word	0x2000075c
 8005618:	20000790 	.word	0x20000790

0800561c <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800561c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561e:	b093      	sub	sp, #76	; 0x4c
 8005620:	9102      	str	r1, [sp, #8]
    uint8_t status = 0;
 8005622:	210d      	movs	r1, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8005624:	9205      	str	r2, [sp, #20]
    uint8_t status = 0;
 8005626:	2200      	movs	r2, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8005628:	0007      	movs	r7, r0
    uint8_t status = 0;
 800562a:	a804      	add	r0, sp, #16
 800562c:	1809      	adds	r1, r1, r0
 800562e:	700a      	strb	r2, [r1, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8005630:	a908      	add	r1, sp, #32
 8005632:	800a      	strh	r2, [r1, #0]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8005634:	2b01      	cmp	r3, #1
 8005636:	d804      	bhi.n	8005642 <ProcessMacCommands.constprop.0+0x26>
 8005638:	0014      	movs	r4, r2
    bool adrBlockFound = false;
 800563a:	9203      	str	r2, [sp, #12]
    while( macIndex < commandsSize )
 800563c:	9b02      	ldr	r3, [sp, #8]
 800563e:	429c      	cmp	r4, r3
 8005640:	d301      	bcc.n	8005646 <ProcessMacCommands.constprop.0+0x2a>
}
 8005642:	b013      	add	sp, #76	; 0x4c
 8005644:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8005646:	5d38      	ldrb	r0, [r7, r4]
 8005648:	f002 fd62 	bl	8008110 <LoRaMacCommandsGetCmdSize>
 800564c:	9b02      	ldr	r3, [sp, #8]
 800564e:	1900      	adds	r0, r0, r4
 8005650:	193e      	adds	r6, r7, r4
 8005652:	4298      	cmp	r0, r3
 8005654:	dcf5      	bgt.n	8005642 <ProcessMacCommands.constprop.0+0x26>
        switch( payload[macIndex++] )
 8005656:	7830      	ldrb	r0, [r6, #0]
 8005658:	1c65      	adds	r5, r4, #1
 800565a:	3802      	subs	r0, #2
 800565c:	b2ed      	uxtb	r5, r5
 800565e:	2811      	cmp	r0, #17
 8005660:	d8ef      	bhi.n	8005642 <ProcessMacCommands.constprop.0+0x26>
 8005662:	f7fa fd6d 	bl	8000140 <__gnu_thumb1_case_shi>
 8005666:	0012      	.short	0x0012
 8005668:	00b70029 	.word	0x00b70029
 800566c:	011200ce 	.word	0x011200ce
 8005670:	015b012a 	.word	0x015b012a
 8005674:	01d7017a 	.word	0x01d7017a
 8005678:	ffeeffee 	.word	0xffeeffee
 800567c:	ffee0200 	.word	0xffee0200
 8005680:	0252ffee 	.word	0x0252ffee
 8005684:	02810266 	.word	0x02810266
 8005688:	029b      	.short	0x029b
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800568a:	2004      	movs	r0, #4
 800568c:	f002 fdf4 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8005690:	2800      	cmp	r0, #0
 8005692:	d00f      	beq.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8005694:	2104      	movs	r1, #4
 8005696:	2000      	movs	r0, #0
 8005698:	f002 fdaa 	bl	80081f0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800569c:	228c      	movs	r2, #140	; 0x8c
 800569e:	5d79      	ldrb	r1, [r7, r5]
 80056a0:	4bd5      	ldr	r3, [pc, #852]	; (80059f8 <ProcessMacCommands.constprop.0+0x3dc>)
 80056a2:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80056a4:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80056a6:	3402      	adds	r4, #2
 80056a8:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80056aa:	b2e4      	uxtb	r4, r4
 80056ac:	5d39      	ldrb	r1, [r7, r4]
 80056ae:	4ad3      	ldr	r2, [pc, #844]	; (80059fc <ProcessMacCommands.constprop.0+0x3e0>)
 80056b0:	b2ed      	uxtb	r5, r5
 80056b2:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 80056b4:	002c      	movs	r4, r5
 80056b6:	e7c1      	b.n	800563c <ProcessMacCommands.constprop.0+0x20>
                int8_t linkAdrDatarate = DR_0;
 80056b8:	220e      	movs	r2, #14
 80056ba:	2300      	movs	r3, #0
 80056bc:	a904      	add	r1, sp, #16
 80056be:	1852      	adds	r2, r2, r1
 80056c0:	7013      	strb	r3, [r2, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80056c2:	220f      	movs	r2, #15
 80056c4:	1852      	adds	r2, r2, r1
 80056c6:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbRep = 0;
 80056c8:	aa09      	add	r2, sp, #36	; 0x24
 80056ca:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80056cc:	aa0a      	add	r2, sp, #40	; 0x28
 80056ce:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 80056d0:	9b03      	ldr	r3, [sp, #12]
                    macIndex += 4;
 80056d2:	3405      	adds	r4, #5
 80056d4:	b2e4      	uxtb	r4, r4
                if( adrBlockFound == false )
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d178      	bne.n	80057cc <ProcessMacCommands.constprop.0+0x1b0>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80056da:	1e6b      	subs	r3, r5, #1
 80056dc:	a90e      	add	r1, sp, #56	; 0x38
 80056de:	18fb      	adds	r3, r7, r3
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80056e0:	22c3      	movs	r2, #195	; 0xc3
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80056e2:	604b      	str	r3, [r1, #4]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80056e4:	4bc6      	ldr	r3, [pc, #792]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
 80056e6:	0052      	lsls	r2, r2, #1
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80056e8:	0018      	movs	r0, r3
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80056ea:	5c9a      	ldrb	r2, [r3, r2]
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80056ec:	3080      	adds	r0, #128	; 0x80
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80056ee:	728a      	strb	r2, [r1, #10]
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80056f0:	7800      	ldrb	r0, [r0, #0]
 80056f2:	7248      	strb	r0, [r1, #9]
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80056f4:	0018      	movs	r0, r3
 80056f6:	3045      	adds	r0, #69	; 0x45
 80056f8:	7800      	ldrb	r0, [r0, #0]
 80056fa:	72c8      	strb	r0, [r1, #11]
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80056fc:	0018      	movs	r0, r3
 80056fe:	3044      	adds	r0, #68	; 0x44
 8005700:	7800      	ldrb	r0, [r0, #0]
 8005702:	7308      	strb	r0, [r1, #12]
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8005704:	0018      	movs	r0, r3
 8005706:	306c      	adds	r0, #108	; 0x6c
 8005708:	7800      	ldrb	r0, [r0, #0]
 800570a:	7348      	strb	r0, [r1, #13]
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800570c:	20cc      	movs	r0, #204	; 0xcc
 800570e:	0040      	lsls	r0, r0, #1
 8005710:	581b      	ldr	r3, [r3, r0]
 8005712:	930e      	str	r3, [sp, #56]	; 0x38
                            linkAdrReq.PayloadSize = 5;
 8005714:	2305      	movs	r3, #5
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8005716:	2a00      	cmp	r2, #0
 8005718:	d003      	beq.n	8005722 <ProcessMacCommands.constprop.0+0x106>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800571a:	9b02      	ldr	r3, [sp, #8]
 800571c:	3301      	adds	r3, #1
 800571e:	1b5b      	subs	r3, r3, r5
 8005720:	b2db      	uxtb	r3, r3
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8005722:	260f      	movs	r6, #15
 8005724:	4cb6      	ldr	r4, [pc, #728]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
 8005726:	720b      	strb	r3, [r1, #8]
 8005728:	ab04      	add	r3, sp, #16
 800572a:	18f6      	adds	r6, r6, r3
 800572c:	0023      	movs	r3, r4
 800572e:	334c      	adds	r3, #76	; 0x4c
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	220e      	movs	r2, #14
 8005734:	469c      	mov	ip, r3
 8005736:	ab0a      	add	r3, sp, #40	; 0x28
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	a804      	add	r0, sp, #16
 800573c:	ab09      	add	r3, sp, #36	; 0x24
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	1812      	adds	r2, r2, r0
 8005742:	0033      	movs	r3, r6
 8005744:	4660      	mov	r0, ip
 8005746:	f003 faff 	bl	8008d48 <RegionLinkAdrReq>
 800574a:	ab04      	add	r3, sp, #16
 800574c:	7358      	strb	r0, [r3, #13]
                        if( ( status & 0x07 ) == 0x07 )
 800574e:	43c0      	mvns	r0, r0
 8005750:	0743      	lsls	r3, r0, #29
 8005752:	d118      	bne.n	8005786 <ProcessMacCommands.constprop.0+0x16a>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8005754:	220e      	movs	r2, #14
 8005756:	ab04      	add	r3, sp, #16
 8005758:	569a      	ldrsb	r2, [r3, r2]
 800575a:	0023      	movs	r3, r4
 800575c:	3345      	adds	r3, #69	; 0x45
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b25b      	sxtb	r3, r3
 8005762:	4293      	cmp	r3, r2
 8005764:	da03      	bge.n	800576e <ProcessMacCommands.constprop.0+0x152>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8005766:	238a      	movs	r3, #138	; 0x8a
 8005768:	2101      	movs	r1, #1
 800576a:	33ff      	adds	r3, #255	; 0xff
 800576c:	54e1      	strb	r1, [r4, r3]
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800576e:	4ba4      	ldr	r3, [pc, #656]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
 8005770:	0019      	movs	r1, r3
 8005772:	3145      	adds	r1, #69	; 0x45
 8005774:	700a      	strb	r2, [r1, #0]
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8005776:	001a      	movs	r2, r3
 8005778:	7831      	ldrb	r1, [r6, #0]
 800577a:	3244      	adds	r2, #68	; 0x44
 800577c:	7011      	strb	r1, [r2, #0]
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800577e:	aa09      	add	r2, sp, #36	; 0x24
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	336c      	adds	r3, #108	; 0x6c
 8005784:	701a      	strb	r2, [r3, #0]
                            linkAdrReq.PayloadSize = 5;
 8005786:	2400      	movs	r4, #0
 8005788:	e009      	b.n	800579e <ProcessMacCommands.constprop.0+0x182>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800578a:	230d      	movs	r3, #13
 800578c:	a904      	add	r1, sp, #16
 800578e:	185b      	adds	r3, r3, r1
 8005790:	2201      	movs	r2, #1
 8005792:	0019      	movs	r1, r3
 8005794:	2003      	movs	r0, #3
 8005796:	f002 fbc1 	bl	8007f1c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800579a:	3401      	adds	r4, #1
 800579c:	b2e4      	uxtb	r4, r4
 800579e:	ab0a      	add	r3, sp, #40	; 0x28
 80057a0:	781e      	ldrb	r6, [r3, #0]
 80057a2:	2105      	movs	r1, #5
 80057a4:	0030      	movs	r0, r6
 80057a6:	f7fa fcdf 	bl	8000168 <__udivsi3>
 80057aa:	b2c0      	uxtb	r0, r0
 80057ac:	4284      	cmp	r4, r0
 80057ae:	d3ec      	bcc.n	800578a <ProcessMacCommands.constprop.0+0x16e>
                        macIndex += linkAdrNbBytesParsed - 1;
 80057b0:	19ad      	adds	r5, r5, r6
 80057b2:	b2ed      	uxtb	r5, r5
 80057b4:	1e6c      	subs	r4, r5, #1
                        if( macIndex >= commandsSize )
 80057b6:	9b02      	ldr	r3, [sp, #8]
                        macIndex += linkAdrNbBytesParsed - 1;
 80057b8:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	d906      	bls.n	80057cc <ProcessMacCommands.constprop.0+0x1b0>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80057be:	5d3b      	ldrb	r3, [r7, r4]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d08a      	beq.n	80056da <ProcessMacCommands.constprop.0+0xbe>
                    if( macIndex < commandsSize )
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	42ab      	cmp	r3, r5
 80057c8:	d800      	bhi.n	80057cc <ProcessMacCommands.constprop.0+0x1b0>
 80057ca:	002c      	movs	r4, r5
                break;
 80057cc:	2301      	movs	r3, #1
 80057ce:	0025      	movs	r5, r4
 80057d0:	9303      	str	r3, [sp, #12]
 80057d2:	e76f      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80057d4:	220f      	movs	r2, #15
 80057d6:	5d7b      	ldrb	r3, [r7, r5]
 80057d8:	4989      	ldr	r1, [pc, #548]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
 80057da:	4013      	ands	r3, r2
 80057dc:	2288      	movs	r2, #136	; 0x88
 80057de:	32ff      	adds	r2, #255	; 0xff
 80057e0:	548b      	strb	r3, [r1, r2]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80057e2:	3a87      	subs	r2, #135	; 0x87
 80057e4:	3aff      	subs	r2, #255	; 0xff
 80057e6:	409a      	lsls	r2, r3
 80057e8:	0013      	movs	r3, r2
 80057ea:	22c6      	movs	r2, #198	; 0xc6
 80057ec:	0052      	lsls	r2, r2, #1
 80057ee:	528b      	strh	r3, [r1, r2]
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80057f0:	3402      	adds	r4, #2
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80057f2:	2200      	movs	r2, #0
 80057f4:	2004      	movs	r0, #4
 80057f6:	a908      	add	r1, sp, #32
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80057f8:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80057fa:	f002 fb8f 	bl	8007f1c <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80057fe:	0025      	movs	r5, r4
}
 8005800:	e758      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                status = 0x07;
 8005802:	2107      	movs	r1, #7
 8005804:	ab04      	add	r3, sp, #16
 8005806:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8005808:	5d7b      	ldrb	r3, [r7, r5]
 800580a:	ae0e      	add	r6, sp, #56	; 0x38
 800580c:	091a      	lsrs	r2, r3, #4
 800580e:	400a      	ands	r2, r1
 8005810:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8005812:	220f      	movs	r2, #15
 8005814:	4013      	ands	r3, r2
 8005816:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005818:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800581a:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800581c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800581e:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005820:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005822:	5cba      	ldrb	r2, [r7, r2]
 8005824:	1d65      	adds	r5, r4, #5
                macIndex++;
 8005826:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005828:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800582a:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800582c:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800582e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8005830:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8005832:	4c73      	ldr	r4, [pc, #460]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005834:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8005836:	2264      	movs	r2, #100	; 0x64
 8005838:	4353      	muls	r3, r2
 800583a:	930f      	str	r3, [sp, #60]	; 0x3c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800583c:	0023      	movs	r3, r4
 800583e:	334c      	adds	r3, #76	; 0x4c
 8005840:	7818      	ldrb	r0, [r3, #0]
 8005842:	0031      	movs	r1, r6
 8005844:	f003 fa96 	bl	8008d74 <RegionRxParamSetupReq>
 8005848:	ab04      	add	r3, sp, #16
 800584a:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 800584c:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800584e:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 8005850:	4003      	ands	r3, r0
 8005852:	2b07      	cmp	r3, #7
 8005854:	d10c      	bne.n	8005870 <ProcessMacCommands.constprop.0+0x254>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8005856:	0022      	movs	r2, r4
 8005858:	7833      	ldrb	r3, [r6, #0]
 800585a:	3274      	adds	r2, #116	; 0x74
 800585c:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800585e:	0022      	movs	r2, r4
 8005860:	327c      	adds	r2, #124	; 0x7c
 8005862:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8005864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005866:	6723      	str	r3, [r4, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8005868:	67a3      	str	r3, [r4, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800586a:	7873      	ldrb	r3, [r6, #1]
 800586c:	346d      	adds	r4, #109	; 0x6d
 800586e:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8005870:	a908      	add	r1, sp, #32
 8005872:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8005874:	2201      	movs	r2, #1
 8005876:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005878:	f002 fb50 	bl	8007f1c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800587c:	2310      	movs	r3, #16
 800587e:	495e      	ldr	r1, [pc, #376]	; (80059f8 <ProcessMacCommands.constprop.0+0x3dc>)
 8005880:	4a60      	ldr	r2, [pc, #384]	; (8005a04 <ProcessMacCommands.constprop.0+0x3e8>)
 8005882:	5c88      	ldrb	r0, [r1, r2]
 8005884:	4303      	orrs	r3, r0
 8005886:	548b      	strb	r3, [r1, r2]
}
 8005888:	e714      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800588a:	23d2      	movs	r3, #210	; 0xd2
 800588c:	4a5a      	ldr	r2, [pc, #360]	; (80059f8 <ProcessMacCommands.constprop.0+0x3dc>)
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8005892:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <ProcessMacCommands.constprop.0+0x284>
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d000      	beq.n	80058a0 <ProcessMacCommands.constprop.0+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800589e:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80058a0:	ab04      	add	r3, sp, #16
 80058a2:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80058a4:	233f      	movs	r3, #63	; 0x3f
 80058a6:	9a05      	ldr	r2, [sp, #20]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80058a8:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80058aa:	4013      	ands	r3, r2
 80058ac:	aa04      	add	r2, sp, #16
 80058ae:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80058b0:	2202      	movs	r2, #2
 80058b2:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80058b4:	f002 fb32 	bl	8007f1c <LoRaMacCommandsAddCmd>
                break;
 80058b8:	e6fc      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                status = 0x03;
 80058ba:	260d      	movs	r6, #13
 80058bc:	ab04      	add	r3, sp, #16
 80058be:	18f6      	adds	r6, r6, r3
 80058c0:	2303      	movs	r3, #3
 80058c2:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 80058c4:	5d7b      	ldrb	r3, [r7, r5]
 80058c6:	a90a      	add	r1, sp, #40	; 0x28
 80058c8:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80058ca:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	5cfd      	ldrb	r5, [r7, r3]
 80058d0:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	5cfb      	ldrb	r3, [r7, r3]
                newChannelReq.ChannelId = payload[macIndex++];
 80058d6:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80058d8:	b2c0      	uxtb	r0, r0
 80058da:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80058dc:	022d      	lsls	r5, r5, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	432b      	orrs	r3, r5
 80058e2:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	4343      	muls	r3, r0
 80058e8:	930e      	str	r3, [sp, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80058ea:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
 80058ec:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058ee:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 80058f0:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 80058f2:	930f      	str	r3, [sp, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80058f4:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 80058f6:	aa0e      	add	r2, sp, #56	; 0x38
                chParam.DrRange.Value = payload[macIndex++];
 80058f8:	7213      	strb	r3, [r2, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80058fa:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
                newChannelReq.NewChannel = &chParam;
 80058fc:	920a      	str	r2, [sp, #40]	; 0x28
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80058fe:	334c      	adds	r3, #76	; 0x4c
 8005900:	7818      	ldrb	r0, [r3, #0]
 8005902:	f003 fa46 	bl	8008d92 <RegionNewChannelReq>
 8005906:	b2c3      	uxtb	r3, r0
                chParam.DrRange.Value = payload[macIndex++];
 8005908:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800590a:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 800590c:	2800      	cmp	r0, #0
 800590e:	da00      	bge.n	8005912 <ProcessMacCommands.constprop.0+0x2f6>
 8005910:	e6d0      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    macCmdPayload[0] = status;
 8005912:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8005914:	2201      	movs	r2, #1
 8005916:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 8005918:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800591a:	e7cb      	b.n	80058b4 <ProcessMacCommands.constprop.0+0x298>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800591c:	230f      	movs	r3, #15
 800591e:	5d7a      	ldrb	r2, [r7, r5]
 8005920:	3402      	adds	r4, #2
 8005922:	401a      	ands	r2, r3
 8005924:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8005926:	1c13      	adds	r3, r2, #0
 8005928:	2a00      	cmp	r2, #0
 800592a:	d100      	bne.n	800592e <ProcessMacCommands.constprop.0+0x312>
 800592c:	2301      	movs	r3, #1
 800592e:	b2da      	uxtb	r2, r3
 8005930:	23fa      	movs	r3, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8005932:	21fa      	movs	r1, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4353      	muls	r3, r2
 8005938:	4a31      	ldr	r2, [pc, #196]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800593a:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800593c:	65d3      	str	r3, [r2, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800593e:	185b      	adds	r3, r3, r1
 8005940:	6613      	str	r3, [r2, #96]	; 0x60
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8005942:	a908      	add	r1, sp, #32
 8005944:	2200      	movs	r2, #0
 8005946:	2008      	movs	r0, #8
 8005948:	f002 fae8 	bl	8007f1c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800594c:	2310      	movs	r3, #16
 800594e:	492a      	ldr	r1, [pc, #168]	; (80059f8 <ProcessMacCommands.constprop.0+0x3dc>)
 8005950:	4a2c      	ldr	r2, [pc, #176]	; (8005a04 <ProcessMacCommands.constprop.0+0x3e8>)
 8005952:	5c88      	ldrb	r0, [r1, r2]
 8005954:	4303      	orrs	r3, r0
 8005956:	548b      	strb	r3, [r1, r2]
 8005958:	e751      	b.n	80057fe <ProcessMacCommands.constprop.0+0x1e2>
                uint8_t eirpDwellTime = payload[macIndex++];
 800595a:	3402      	adds	r4, #2
 800595c:	b2e3      	uxtb	r3, r4
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8005962:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8005964:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8005966:	ad09      	add	r5, sp, #36	; 0x24
 8005968:	702a      	strb	r2, [r5, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800596a:	3220      	adds	r2, #32
 800596c:	4011      	ands	r1, r2
 800596e:	4213      	tst	r3, r2
 8005970:	d13e      	bne.n	80059f0 <ProcessMacCommands.constprop.0+0x3d4>
                txParamSetupReq.DownlinkDwellTime = 0;
 8005972:	7069      	strb	r1, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8005974:	06da      	lsls	r2, r3, #27
 8005976:	d501      	bpl.n	800597c <ProcessMacCommands.constprop.0+0x360>
                    txParamSetupReq.UplinkDwellTime = 1;
 8005978:	2201      	movs	r2, #1
 800597a:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800597c:	220f      	movs	r2, #15
 800597e:	4013      	ands	r3, r2
 8005980:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <ProcessMacCommands.constprop.0+0x3ec>)
 8005984:	0029      	movs	r1, r5
 8005986:	7818      	ldrb	r0, [r3, #0]
 8005988:	4c1d      	ldr	r4, [pc, #116]	; (8005a00 <ProcessMacCommands.constprop.0+0x3e4>)
 800598a:	f003 fa11 	bl	8008db0 <RegionTxParamSetupReq>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d02c      	beq.n	80059ec <ProcessMacCommands.constprop.0+0x3d0>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8005992:	0023      	movs	r3, r4
 8005994:	782e      	ldrb	r6, [r5, #0]
 8005996:	3380      	adds	r3, #128	; 0x80
 8005998:	701e      	strb	r6, [r3, #0]
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800599a:	0023      	movs	r3, r4
 800599c:	786a      	ldrb	r2, [r5, #1]
 800599e:	3381      	adds	r3, #129	; 0x81
 80059a0:	701a      	strb	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80059a2:	78ab      	ldrb	r3, [r5, #2]
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <ProcessMacCommands.constprop.0+0x3f0>)
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80059a6:	3445      	adds	r4, #69	; 0x45
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80059a8:	5cd0      	ldrb	r0, [r2, r3]
 80059aa:	f7fb fb2f 	bl	800100c <__aeabi_ui2f>
 80059ae:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <ProcessMacCommands.constprop.0+0x3f4>)
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80059b0:	2128      	movs	r1, #40	; 0x28
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80059b2:	67d8      	str	r0, [r3, #124]	; 0x7c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80059b4:	2302      	movs	r3, #2
 80059b6:	aa04      	add	r2, sp, #16
 80059b8:	1852      	adds	r2, r2, r1
 80059ba:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80059bc:	222a      	movs	r2, #42	; 0x2a
 80059be:	ab04      	add	r3, sp, #16
 80059c0:	189b      	adds	r3, r3, r2
 80059c2:	701e      	strb	r6, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80059c4:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <ProcessMacCommands.constprop.0+0x3ec>)
 80059c6:	a90e      	add	r1, sp, #56	; 0x38
 80059c8:	7818      	ldrb	r0, [r3, #0]
 80059ca:	f003 f92f 	bl	8008c2c <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80059ce:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80059d0:	900a      	str	r0, [sp, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80059d2:	5661      	ldrsb	r1, [r4, r1]
 80059d4:	1c03      	adds	r3, r0, #0
 80059d6:	b240      	sxtb	r0, r0
 80059d8:	7822      	ldrb	r2, [r4, #0]
 80059da:	4288      	cmp	r0, r1
 80059dc:	da00      	bge.n	80059e0 <ProcessMacCommands.constprop.0+0x3c4>
 80059de:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80059e0:	2200      	movs	r2, #0
 80059e2:	2009      	movs	r0, #9
 80059e4:	a908      	add	r1, sp, #32
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80059e6:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80059e8:	f002 fa98 	bl	8007f1c <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 80059ec:	9d04      	ldr	r5, [sp, #16]
 80059ee:	e661      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80059f0:	2201      	movs	r2, #1
 80059f2:	706a      	strb	r2, [r5, #1]
 80059f4:	e7be      	b.n	8005974 <ProcessMacCommands.constprop.0+0x358>
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	200003bc 	.word	0x200003bc
 80059fc:	00000461 	.word	0x00000461
 8005a00:	200008d4 	.word	0x200008d4
 8005a04:	0000048d 	.word	0x0000048d
 8005a08:	20000920 	.word	0x20000920
 8005a0c:	0801926e 	.word	0x0801926e
 8005a10:	200008dc 	.word	0x200008dc
                status = 0x03;
 8005a14:	260d      	movs	r6, #13
 8005a16:	ab04      	add	r3, sp, #16
 8005a18:	18f6      	adds	r6, r6, r3
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8005a1e:	5d7b      	ldrb	r3, [r7, r5]
 8005a20:	a90e      	add	r1, sp, #56	; 0x38
 8005a22:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005a24:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8005a26:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005a28:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005a2a:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005a2c:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005a2e:	5cba      	ldrb	r2, [r7, r2]
 8005a30:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8005a32:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005a34:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005a36:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8005a38:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005a3a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8005a3c:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005a3e:	b2ed      	uxtb	r5, r5
 8005a40:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8005a42:	2264      	movs	r2, #100	; 0x64
 8005a44:	4353      	muls	r3, r2
 8005a46:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8005a48:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <ProcessMacCommands.constprop.0+0x5ac>)
 8005a4a:	334c      	adds	r3, #76	; 0x4c
 8005a4c:	7818      	ldrb	r0, [r3, #0]
 8005a4e:	f003 f9be 	bl	8008dce <RegionDlChannelReq>
 8005a52:	b2c3      	uxtb	r3, r0
 8005a54:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8005a56:	2800      	cmp	r0, #0
 8005a58:	da00      	bge.n	8005a5c <ProcessMacCommands.constprop.0+0x440>
 8005a5a:	e62b      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    macCmdPayload[0] = status;
 8005a5c:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005a5e:	2201      	movs	r2, #1
 8005a60:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8005a62:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005a64:	e708      	b.n	8005878 <ProcessMacCommands.constprop.0+0x25c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8005a66:	2009      	movs	r0, #9
 8005a68:	f002 fc06 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d048      	beq.n	8005b02 <ProcessMacCommands.constprop.0+0x4e6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8005a70:	2109      	movs	r1, #9
 8005a72:	2000      	movs	r0, #0
 8005a74:	f002 fbbc 	bl	80081f0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8005a78:	231e      	movs	r3, #30
 8005a7a:	aa04      	add	r2, sp, #16
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8005a82:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	5cfe      	ldrb	r6, [r7, r3]
 8005a88:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8005a8e:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005a90:	0409      	lsls	r1, r1, #16
 8005a92:	430e      	orrs	r6, r1
 8005a94:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8005a96:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005a98:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005a9a:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005a9c:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005a9e:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005aa0:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005aa2:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005aa4:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005aa6:	5d3a      	ldrb	r2, [r7, r4]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 8005aac:	aa04      	add	r2, sp, #16
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005aae:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005ab0:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 8005ab2:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8005ab4:	a80e      	add	r0, sp, #56	; 0x38
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005ab6:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 8005ab8:	f005 fdfa 	bl	800b6b0 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8005abc:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <ProcessMacCommands.constprop.0+0x5b0>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8005abe:	4c44      	ldr	r4, [pc, #272]	; (8005bd0 <ProcessMacCommands.constprop.0+0x5b4>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8005ac0:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8005ac2:	23cf      	movs	r3, #207	; 0xcf
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	18e3      	adds	r3, r4, r3
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	23ce      	movs	r3, #206	; 0xce
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	58e3      	ldr	r3, [r4, r3]
 8005ad4:	a80c      	add	r0, sp, #48	; 0x30
 8005ad6:	910a      	str	r1, [sp, #40]	; 0x28
 8005ad8:	f005 fdb6 	bl	800b648 <SysTimeSub>
 8005adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ae0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	a80a      	add	r0, sp, #40	; 0x28
 8005ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ae8:	f005 fd94 	bl	800b614 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8005aec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005af0:	f005 fdc0 	bl	800b674 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8005af4:	f002 f9fb 	bl	8007eee <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8005af8:	2301      	movs	r3, #1
 8005afa:	4a36      	ldr	r2, [pc, #216]	; (8005bd4 <ProcessMacCommands.constprop.0+0x5b8>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005afc:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8005afe:	54a3      	strb	r3, [r4, r2]
 8005b00:	e5d8      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8005b02:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <ProcessMacCommands.constprop.0+0x5b4>)
 8005b04:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <ProcessMacCommands.constprop.0+0x5b8>)
 8005b06:	5498      	strb	r0, [r3, r2]
 8005b08:	e5d4      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8005b0a:	200c      	movs	r0, #12
 8005b0c:	f002 fbb4 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d100      	bne.n	8005b16 <ProcessMacCommands.constprop.0+0x4fa>
 8005b14:	e5ce      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8005b16:	210c      	movs	r1, #12
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f002 fb69 	bl	80081f0 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8005b1e:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <ProcessMacCommands.constprop.0+0x5b4>)
 8005b20:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <ProcessMacCommands.constprop.0+0x5bc>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	3b04      	subs	r3, #4
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d800      	bhi.n	8005b2c <ProcessMacCommands.constprop.0+0x510>
 8005b2a:	e5c3      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                        LoRaMacClassBPingSlotInfoAns( );
 8005b2c:	f002 f9db 	bl	8007ee6 <LoRaMacClassBPingSlotInfoAns>
 8005b30:	e5c0      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                frequency = ( uint32_t )payload[macIndex++];
 8005b32:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	5cf9      	ldrb	r1, [r7, r3]
 8005b38:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005b3e:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	4319      	orrs	r1, r3
                frequency *= 100;
 8005b44:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8005b46:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 8005b48:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005b4a:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8005b4c:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005b4e:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8005b50:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8005b52:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8005b54:	3b55      	subs	r3, #85	; 0x55
 8005b56:	4018      	ands	r0, r3
 8005b58:	f002 f9c6 	bl	8007ee8 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8005b5c:	a908      	add	r1, sp, #32
 8005b5e:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8005b60:	2201      	movs	r2, #1
 8005b62:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 8005b64:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8005b66:	e687      	b.n	8005878 <ProcessMacCommands.constprop.0+0x25c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8005b68:	200d      	movs	r0, #13
 8005b6a:	f002 fb85 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d100      	bne.n	8005b74 <ProcessMacCommands.constprop.0+0x558>
 8005b72:	e59f      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8005b74:	210d      	movs	r1, #13
 8005b76:	2000      	movs	r0, #0
 8005b78:	f002 fb3a 	bl	80081f0 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8005b7c:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	5cf8      	ldrb	r0, [r7, r3]
 8005b82:	5d7b      	ldrb	r3, [r7, r5]
 8005b84:	0200      	lsls	r0, r0, #8
 8005b86:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 8005b88:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8005b8a:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <ProcessMacCommands.constprop.0+0x5c0>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8005b8c:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8005b8e:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8005b90:	5d39      	ldrb	r1, [r7, r4]
 8005b92:	681a      	ldr	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8005b94:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8005b96:	f002 f9a9 	bl	8007eec <LoRaMacClassBBeaconTimingAns>
 8005b9a:	e58b      	b.n	80056b4 <ProcessMacCommands.constprop.0+0x98>
                    frequency = ( uint32_t )payload[macIndex++];
 8005b9c:	5d7a      	ldrb	r2, [r7, r5]
 8005b9e:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005ba0:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005ba2:	3403      	adds	r4, #3
 8005ba4:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005ba6:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005ba8:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005baa:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005bac:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	4318      	orrs	r0, r3
                    frequency *= 100;
 8005bb2:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005bb4:	4310      	orrs	r0, r2
                    frequency *= 100;
 8005bb6:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8005bb8:	f002 f99a 	bl	8007ef0 <LoRaMacClassBBeaconFreqReq>
 8005bbc:	a908      	add	r1, sp, #32
 8005bbe:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005bc4:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8005bc6:	e675      	b.n	80058b4 <ProcessMacCommands.constprop.0+0x298>
 8005bc8:	200008d4 	.word	0x200008d4
 8005bcc:	12d53d80 	.word	0x12d53d80
 8005bd0:	200003bc 	.word	0x200003bc
 8005bd4:	0000043c 	.word	0x0000043c
 8005bd8:	0000048c 	.word	0x0000048c
 8005bdc:	20001050 	.word	0x20001050

08005be0 <StopRetransmission.isra.0>:
        counter++;
    }
    return counter;
}

static bool StopRetransmission( void )
 8005be0:	b510      	push	{r4, lr}
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <StopRetransmission.isra.0+0x44>)
 8005be4:	4a10      	ldr	r2, [pc, #64]	; (8005c28 <StopRetransmission.isra.0+0x48>)
 8005be6:	5c9a      	ldrb	r2, [r3, r2]
 8005be8:	0792      	lsls	r2, r2, #30
 8005bea:	d503      	bpl.n	8005bf4 <StopRetransmission.isra.0+0x14>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8005bec:	4a0f      	ldr	r2, [pc, #60]	; (8005c2c <StopRetransmission.isra.0+0x4c>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8005bee:	5c9a      	ldrb	r2, [r3, r2]
 8005bf0:	2a01      	cmp	r2, #1
 8005bf2:	d90b      	bls.n	8005c0c <StopRetransmission.isra.0+0x2c>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8005bf4:	22c3      	movs	r2, #195	; 0xc3
 8005bf6:	490e      	ldr	r1, [pc, #56]	; (8005c30 <StopRetransmission.isra.0+0x50>)
 8005bf8:	0052      	lsls	r2, r2, #1
 8005bfa:	5c8a      	ldrb	r2, [r1, r2]
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d005      	beq.n	8005c0c <StopRetransmission.isra.0+0x2c>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8005c00:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        counter++;
 8005c02:	1c50      	adds	r0, r2, #1
 8005c04:	1e44      	subs	r4, r0, #1
 8005c06:	41a0      	sbcs	r0, r4
 8005c08:	1812      	adds	r2, r2, r0
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8005c0a:	634a      	str	r2, [r1, #52]	; 0x34
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8005c0c:	2183      	movs	r1, #131	; 0x83
 8005c0e:	2200      	movs	r2, #0
 8005c10:	00c9      	lsls	r1, r1, #3
 8005c12:	525a      	strh	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8005c14:	4907      	ldr	r1, [pc, #28]	; (8005c34 <StopRetransmission.isra.0+0x54>)
 8005c16:	545a      	strb	r2, [r3, r1]
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8005c18:	39da      	subs	r1, #218	; 0xda
 8005c1a:	5858      	ldr	r0, [r3, r1]
 8005c1c:	3202      	adds	r2, #2
 8005c1e:	4390      	bics	r0, r2
 8005c20:	5058      	str	r0, [r3, r1]

    return true;
}
 8005c22:	bd10      	pop	{r4, pc}
 8005c24:	200003bc 	.word	0x200003bc
 8005c28:	0000048d 	.word	0x0000048d
 8005c2c:	00000431 	.word	0x00000431
 8005c30:	200008d4 	.word	0x200008d4
 8005c34:	0000041a 	.word	0x0000041a

08005c38 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <LoRaMacIsBusy+0x28>)
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	2301      	movs	r3, #1
        return true;
 8005c3e:	0018      	movs	r0, r3
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8005c40:	421a      	tst	r2, r3
 8005c42:	d10b      	bne.n	8005c5c <LoRaMacIsBusy+0x24>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8005c44:	21d0      	movs	r1, #208	; 0xd0
 8005c46:	4a07      	ldr	r2, [pc, #28]	; (8005c64 <LoRaMacIsBusy+0x2c>)
 8005c48:	0089      	lsls	r1, r1, #2
 8005c4a:	5851      	ldr	r1, [r2, r1]
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	d105      	bne.n	8005c5c <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <LoRaMacIsBusy+0x30>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8005c52:	5cd0      	ldrb	r0, [r2, r3]
 8005c54:	3801      	subs	r0, #1
 8005c56:	1e43      	subs	r3, r0, #1
 8005c58:	4198      	sbcs	r0, r3
 8005c5a:	b2c0      	uxtb	r0, r0
}
 8005c5c:	4770      	bx	lr
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	200003b8 	.word	0x200003b8
 8005c64:	200003bc 	.word	0x200003bc
 8005c68:	0000048e 	.word	0x0000048e

08005c6c <PrepareFrame>:
{
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MacCtx.PktBufferLen = 0;
 8005c6e:	2400      	movs	r4, #0
{
 8005c70:	001f      	movs	r7, r3
 8005c72:	b087      	sub	sp, #28
 8005c74:	ab0c      	add	r3, sp, #48	; 0x30
    MacCtx.PktBufferLen = 0;
 8005c76:	4d54      	ldr	r5, [pc, #336]	; (8005dc8 <PrepareFrame+0x15c>)
{
 8005c78:	881e      	ldrh	r6, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8005c7a:	4b54      	ldr	r3, [pc, #336]	; (8005dcc <PrepareFrame+0x160>)
{
 8005c7c:	9203      	str	r2, [sp, #12]
    MacCtx.NodeAckRequested = false;
 8005c7e:	54ec      	strb	r4, [r5, r3]
        fBufferSize = 0;
 8005c80:	003b      	movs	r3, r7
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	4193      	sbcs	r3, r2
 8005c86:	425b      	negs	r3, r3
 8005c88:	401e      	ands	r6, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8005c8a:	0032      	movs	r2, r6
{
 8005c8c:	9001      	str	r0, [sp, #4]
 8005c8e:	9102      	str	r1, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8005c90:	484f      	ldr	r0, [pc, #316]	; (8005dd0 <PrepareFrame+0x164>)
 8005c92:	0039      	movs	r1, r7
    MacCtx.PktBufferLen = 0;
 8005c94:	802c      	strh	r4, [r5, #0]
    uint32_t fCntUp = 0;
 8005c96:	9404      	str	r4, [sp, #16]
    size_t macCmdsSize = 0;
 8005c98:	9405      	str	r4, [sp, #20]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8005c9a:	f7fe fdfe 	bl	800489a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8005c9e:	4b4d      	ldr	r3, [pc, #308]	; (8005dd4 <PrepareFrame+0x168>)
 8005ca0:	b2f2      	uxtb	r2, r6
 8005ca2:	54ea      	strb	r2, [r5, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	70ab      	strb	r3, [r5, #2]
    switch( macHdr->Bits.MType )
 8005caa:	9b01      	ldr	r3, [sp, #4]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d03c      	beq.n	8005d2e <PrepareFrame+0xc2>
 8005cb4:	2b07      	cmp	r3, #7
 8005cb6:	d100      	bne.n	8005cba <PrepareFrame+0x4e>
 8005cb8:	e077      	b.n	8005daa <PrepareFrame+0x13e>
 8005cba:	2002      	movs	r0, #2
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d134      	bne.n	8005d2a <PrepareFrame+0xbe>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8005cc0:	002e      	movs	r6, r5
 8005cc2:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8005cc4:	002f      	movs	r7, r5
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8005cc6:	36ff      	adds	r6, #255	; 0xff
 8005cc8:	7173      	strb	r3, [r6, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8005cca:	4b43      	ldr	r3, [pc, #268]	; (8005dd8 <PrepareFrame+0x16c>)
 8005ccc:	37fc      	adds	r7, #252	; 0xfc
 8005cce:	60fb      	str	r3, [r7, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8005cd0:	23ff      	movs	r3, #255	; 0xff
 8005cd2:	7373      	strb	r3, [r6, #13]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8005cd4:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8005cd6:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8005cd8:	781b      	ldrb	r3, [r3, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8005cda:	4c40      	ldr	r4, [pc, #256]	; (8005ddc <PrepareFrame+0x170>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8005cdc:	73b3      	strb	r3, [r6, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8005cde:	2394      	movs	r3, #148	; 0x94
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	54e9      	strb	r1, [r5, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8005ce4:	0023      	movs	r3, r4
 8005ce6:	33d0      	adds	r3, #208	; 0xd0
 8005ce8:	681b      	ldr	r3, [r3, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005cea:	a804      	add	r0, sp, #16
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8005cec:	617b      	str	r3, [r7, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	7573      	strb	r3, [r6, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8005cf4:	2398      	movs	r3, #152	; 0x98
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	54ea      	strb	r2, [r5, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <PrepareFrame+0x164>)
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005cfe:	f002 fc41 	bl	8008584 <LoRaMacCryptoGetFCntUp>
 8005d02:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8005d04:	2012      	movs	r0, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10f      	bne.n	8005d2a <PrepareFrame+0xbe>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8005d0a:	0029      	movs	r1, r5
 8005d0c:	9a04      	ldr	r2, [sp, #16]
 8005d0e:	31fe      	adds	r1, #254	; 0xfe
 8005d10:	830a      	strh	r2, [r1, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 8005d12:	2189      	movs	r1, #137	; 0x89
 8005d14:	00c9      	lsls	r1, r1, #3
 8005d16:	526b      	strh	r3, [r5, r1]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8005d18:	238a      	movs	r3, #138	; 0x8a
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8005d1a:	a805      	add	r0, sp, #20
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	50ea      	str	r2, [r5, r3]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8005d20:	f002 f9a0 	bl	8008064 <LoRaMacCommandsGetSizeSerializedCmds>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d006      	beq.n	8005d36 <PrepareFrame+0xca>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8005d28:	2013      	movs	r0, #19
}
 8005d2a:	b007      	add	sp, #28
 8005d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.NodeAckRequested = true;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4926      	ldr	r1, [pc, #152]	; (8005dcc <PrepareFrame+0x160>)
 8005d32:	546b      	strb	r3, [r5, r1]
 8005d34:	e7c4      	b.n	8005cc0 <PrepareFrame+0x54>
            if( macCmdsSize > 0 )
 8005d36:	9b05      	ldr	r3, [sp, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <PrepareFrame+0xd4>
    return LORAMAC_STATUS_OK;
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e7f4      	b.n	8005d2a <PrepareFrame+0xbe>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8005d40:	2045      	movs	r0, #69	; 0x45
 8005d42:	5620      	ldrsb	r0, [r4, r0]
 8005d44:	f7ff f948 	bl	8004fd8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8005d48:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <PrepareFrame+0x168>)
 8005d4a:	5ceb      	ldrb	r3, [r5, r3]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01c      	beq.n	8005d8a <PrepareFrame+0x11e>
 8005d50:	9b05      	ldr	r3, [sp, #20]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	d811      	bhi.n	8005d7a <PrepareFrame+0x10e>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8005d56:	200f      	movs	r0, #15
 8005d58:	4a21      	ldr	r2, [pc, #132]	; (8005de0 <PrepareFrame+0x174>)
 8005d5a:	a905      	add	r1, sp, #20
 8005d5c:	f002 f990 	bl	8008080 <LoRaMacCommandsSerializeCmds>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d1e1      	bne.n	8005d28 <PrepareFrame+0xbc>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8005d64:	210f      	movs	r1, #15
 8005d66:	9b02      	ldr	r3, [sp, #8]
 8005d68:	9a05      	ldr	r2, [sp, #20]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	438b      	bics	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	9a02      	ldr	r2, [sp, #8]
 8005d74:	7013      	strb	r3, [r2, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8005d76:	7573      	strb	r3, [r6, #21]
 8005d78:	e7d7      	b.n	8005d2a <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <PrepareFrame+0x178>)
 8005d7c:	a905      	add	r1, sp, #20
 8005d7e:	f002 f97f 	bl	8008080 <LoRaMacCommandsSerializeCmds>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d1d0      	bne.n	8005d28 <PrepareFrame+0xbc>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8005d86:	300a      	adds	r0, #10
 8005d88:	e7cf      	b.n	8005d2a <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8005d8a:	4e16      	ldr	r6, [pc, #88]	; (8005de4 <PrepareFrame+0x178>)
 8005d8c:	a905      	add	r1, sp, #20
 8005d8e:	0032      	movs	r2, r6
 8005d90:	f002 f976 	bl	8008080 <LoRaMacCommandsSerializeCmds>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d1c7      	bne.n	8005d28 <PrepareFrame+0xbc>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8005d98:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8005d9a:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	54e8      	strb	r0, [r5, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8005da0:	9b05      	ldr	r3, [sp, #20]
 8005da2:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8005da4:	633e      	str	r6, [r7, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8005da6:	54ab      	strb	r3, [r5, r2]
 8005da8:	e7bf      	b.n	8005d2a <PrepareFrame+0xbe>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	d0c6      	beq.n	8005d3c <PrepareFrame+0xd0>
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d0c4      	beq.n	8005d3c <PrepareFrame+0xd0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8005db2:	480d      	ldr	r0, [pc, #52]	; (8005de8 <PrepareFrame+0x17c>)
 8005db4:	0039      	movs	r1, r7
 8005db6:	b2f2      	uxtb	r2, r6
 8005db8:	f7fe fd6f 	bl	800489a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <PrepareFrame+0x168>)
    return LORAMAC_STATUS_OK;
 8005dbe:	0020      	movs	r0, r4
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8005dc0:	5ceb      	ldrb	r3, [r5, r3]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	802b      	strh	r3, [r5, #0]
 8005dc6:	e7b0      	b.n	8005d2a <PrepareFrame+0xbe>
 8005dc8:	200003bc 	.word	0x200003bc
 8005dcc:	0000041a 	.word	0x0000041a
 8005dd0:	200004f4 	.word	0x200004f4
 8005dd4:	00000237 	.word	0x00000237
 8005dd8:	200003be 	.word	0x200003be
 8005ddc:	200008d4 	.word	0x200008d4
 8005de0:	200004d4 	.word	0x200004d4
 8005de4:	20000854 	.word	0x20000854
 8005de8:	200003bf 	.word	0x200003bf

08005dec <SendFrameOnChannel>:
{
 8005dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005dee:	4d4a      	ldr	r5, [pc, #296]	; (8005f18 <SendFrameOnChannel+0x12c>)
    int8_t txPower = 0;
 8005df0:	2300      	movs	r3, #0
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005df2:	002f      	movs	r7, r5
{
 8005df4:	b089      	sub	sp, #36	; 0x24
    txConfig.Channel = channel;
 8005df6:	a904      	add	r1, sp, #16
    int8_t txPower = 0;
 8005df8:	aa02      	add	r2, sp, #8
 8005dfa:	70d3      	strb	r3, [r2, #3]
    txConfig.Channel = channel;
 8005dfc:	7008      	strb	r0, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005dfe:	3745      	adds	r7, #69	; 0x45
 8005e00:	783b      	ldrb	r3, [r7, #0]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8005e02:	4c46      	ldr	r4, [pc, #280]	; (8005f1c <SendFrameOnChannel+0x130>)
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005e04:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8005e06:	002b      	movs	r3, r5
 8005e08:	3344      	adds	r3, #68	; 0x44
 8005e0a:	781b      	ldrb	r3, [r3, #0]
{
 8005e0c:	0006      	movs	r6, r0
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8005e0e:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8005e10:	002b      	movs	r3, r5
 8005e12:	3308      	adds	r3, #8
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8005e16:	3203      	adds	r2, #3
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8005e18:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8005e1a:	002b      	movs	r3, r5
 8005e1c:	3388      	adds	r3, #136	; 0x88
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8005e22:	8823      	ldrh	r3, [r4, #0]
 8005e24:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8005e26:	002b      	movs	r3, r5
 8005e28:	334c      	adds	r3, #76	; 0x4c
 8005e2a:	7818      	ldrb	r0, [r3, #0]
 8005e2c:	4b3c      	ldr	r3, [pc, #240]	; (8005f20 <SendFrameOnChannel+0x134>)
 8005e2e:	f002 ff7a 	bl	8008d26 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8005e32:	2201      	movs	r2, #1
 8005e34:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <SendFrameOnChannel+0x138>)
 8005e36:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005e38:	783a      	ldrb	r2, [r7, #0]
 8005e3a:	4b3b      	ldr	r3, [pc, #236]	; (8005f28 <SendFrameOnChannel+0x13c>)
 8005e3c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8005e3e:	ab02      	add	r3, sp, #8
 8005e40:	78da      	ldrb	r2, [r3, #3]
 8005e42:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <SendFrameOnChannel+0x140>)
 8005e44:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8005e46:	4b3a      	ldr	r3, [pc, #232]	; (8005f30 <SendFrameOnChannel+0x144>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8005e48:	4a3a      	ldr	r2, [pc, #232]	; (8005f34 <SendFrameOnChannel+0x148>)
    MacCtx.McpsConfirm.Channel = channel;
 8005e4a:	50e6      	str	r6, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8005e4c:	4e3a      	ldr	r6, [pc, #232]	; (8005f38 <SendFrameOnChannel+0x14c>)
 8005e4e:	59a3      	ldr	r3, [r4, r6]
 8005e50:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8005e52:	4a3a      	ldr	r2, [pc, #232]	; (8005f3c <SendFrameOnChannel+0x150>)
 8005e54:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8005e56:	f002 f83b 	bl	8007ed0 <LoRaMacClassBIsBeaconModeActive>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d118      	bne.n	8005e90 <SendFrameOnChannel+0xa4>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8005e5e:	23c2      	movs	r3, #194	; 0xc2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	5ceb      	ldrb	r3, [r5, r3]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
 8005e68:	f002 f846 	bl	8007ef8 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8005e6c:	f002 f833 	bl	8007ed6 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005e70:	4b33      	ldr	r3, [pc, #204]	; (8005f40 <SendFrameOnChannel+0x154>)
    switch( MacCtx.TxMsg.Type )
 8005e72:	0027      	movs	r7, r4
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005e74:	5ce6      	ldrb	r6, [r4, r3]
    uint32_t fCntUp = 0;
 8005e76:	2300      	movs	r3, #0
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005e78:	3545      	adds	r5, #69	; 0x45
 8005e7a:	782d      	ldrb	r5, [r5, #0]
    switch( MacCtx.TxMsg.Type )
 8005e7c:	37ff      	adds	r7, #255	; 0xff
    uint32_t fCntUp = 0;
 8005e7e:	9303      	str	r3, [sp, #12]
    switch( MacCtx.TxMsg.Type )
 8005e80:	797b      	ldrb	r3, [r7, #5]
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005e82:	b26d      	sxtb	r5, r5
    switch( MacCtx.TxMsg.Type )
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <SendFrameOnChannel+0xb6>
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d029      	beq.n	8005ee0 <SendFrameOnChannel+0xf4>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e005      	b.n	8005e9c <SendFrameOnChannel+0xb0>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8005e90:	59a0      	ldr	r0, [r4, r6]
 8005e92:	f002 f82f 	bl	8007ef4 <LoRaMacClassBIsUplinkCollision>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8005e96:	2310      	movs	r3, #16
        if( collisionTime > 0 )
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d0e0      	beq.n	8005e5e <SendFrameOnChannel+0x72>
}
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	b009      	add	sp, #36	; 0x24
 8005ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8005ea2:	4828      	ldr	r0, [pc, #160]	; (8005f44 <SendFrameOnChannel+0x158>)
 8005ea4:	f002 fbb8 	bl	8008618 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d133      	bne.n	8005f14 <SendFrameOnChannel+0x128>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8005eac:	7b7b      	ldrb	r3, [r7, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005eae:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8005eb0:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005eb2:	2302      	movs	r3, #2
    MacCtx.ResponseTimeoutStartTime = 0;
 8005eb4:	2500      	movs	r5, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005eb6:	0092      	lsls	r2, r2, #2
 8005eb8:	58a1      	ldr	r1, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8005eba:	4823      	ldr	r0, [pc, #140]	; (8005f48 <SendFrameOnChannel+0x15c>)
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	50a3      	str	r3, [r4, r2]
    MacCtx.ChannelsNbTransCounter++;
 8005ec0:	32d8      	adds	r2, #216	; 0xd8
 8005ec2:	5ca3      	ldrb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8005ec4:	7821      	ldrb	r1, [r4, #0]
    MacCtx.ChannelsNbTransCounter++;
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <SendFrameOnChannel+0x160>)
 8005ece:	54a3      	strb	r3, [r4, r2]
    MacCtx.ResponseTimeoutStartTime = 0;
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <SendFrameOnChannel+0x164>)
 8005ed2:	50e5      	str	r5, [r4, r3]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <SendFrameOnChannel+0x168>)
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8005edc:	002b      	movs	r3, r5
 8005ede:	e7dd      	b.n	8005e9c <SendFrameOnChannel+0xb0>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005ee0:	a803      	add	r0, sp, #12
 8005ee2:	f002 fb4f 	bl	8008584 <LoRaMacCryptoGetFCntUp>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8005ee6:	2312      	movs	r3, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d1d7      	bne.n	8005e9c <SendFrameOnChannel+0xb0>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8005eec:	2383      	movs	r3, #131	; 0x83
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	5ce3      	ldrb	r3, [r4, r3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <SendFrameOnChannel+0x110>
                fCntUp -= 1;
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	9303      	str	r3, [sp, #12]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8005efc:	0032      	movs	r2, r6
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <SendFrameOnChannel+0x158>)
 8005f00:	9803      	ldr	r0, [sp, #12]
 8005f02:	b2e9      	uxtb	r1, r5
 8005f04:	f002 fbae 	bl	8008664 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d103      	bne.n	8005f14 <SendFrameOnChannel+0x128>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8005f0c:	0023      	movs	r3, r4
 8005f0e:	33ff      	adds	r3, #255	; 0xff
 8005f10:	7b5b      	ldrb	r3, [r3, #13]
 8005f12:	e7cc      	b.n	8005eae <SendFrameOnChannel+0xc2>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8005f14:	2311      	movs	r3, #17
 8005f16:	e7c1      	b.n	8005e9c <SendFrameOnChannel+0xb0>
 8005f18:	200008d4 	.word	0x200008d4
 8005f1c:	200003bc 	.word	0x200003bc
 8005f20:	200007d8 	.word	0x200007d8
 8005f24:	00000445 	.word	0x00000445
 8005f28:	00000446 	.word	0x00000446
 8005f2c:	00000447 	.word	0x00000447
 8005f30:	00000454 	.word	0x00000454
 8005f34:	0000044c 	.word	0x0000044c
 8005f38:	0000041c 	.word	0x0000041c
 8005f3c:	0000045c 	.word	0x0000045c
 8005f40:	0000041b 	.word	0x0000041b
 8005f44:	200004c4 	.word	0x200004c4
 8005f48:	200003be 	.word	0x200003be
 8005f4c:	00000449 	.word	0x00000449
 8005f50:	00000494 	.word	0x00000494
 8005f54:	0801a9e0 	.word	0x0801a9e0

08005f58 <ScheduleTx>:
{
 8005f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5a:	b091      	sub	sp, #68	; 0x44
 8005f5c:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8005f5e:	f001 ffb1 	bl	8007ec4 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8005f62:	270e      	movs	r7, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d11a      	bne.n	8005f9e <ScheduleTx+0x46>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8005f68:	23c2      	movs	r3, #194	; 0xc2
 8005f6a:	4c73      	ldr	r4, [pc, #460]	; (8006138 <ScheduleTx+0x1e0>)
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	5ce3      	ldrb	r3, [r4, r3]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d00f      	beq.n	8005f94 <ScheduleTx+0x3c>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8005f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f76:	4d71      	ldr	r5, [pc, #452]	; (800613c <ScheduleTx+0x1e4>)
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d018      	beq.n	8005fae <ScheduleTx+0x56>
    switch( MacCtx.TxMsg.Type )
 8005f7c:	002e      	movs	r6, r5
 8005f7e:	36ff      	adds	r6, #255	; 0xff
 8005f80:	7973      	ldrb	r3, [r6, #5]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01c      	beq.n	8005fc0 <ScheduleTx+0x68>
 8005f86:	2703      	movs	r7, #3
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d108      	bne.n	8005f9e <ScheduleTx+0x46>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8005f8c:	486c      	ldr	r0, [pc, #432]	; (8006140 <ScheduleTx+0x1e8>)
 8005f8e:	f002 fdd5 	bl	8008b3c <LoRaMacSerializerData>
 8005f92:	e018      	b.n	8005fc6 <ScheduleTx+0x6e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8005f94:	f001 ff98 	bl	8007ec8 <LoRaMacClassBIsPingExpected>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d003      	beq.n	8005fa4 <ScheduleTx+0x4c>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8005f9c:	270f      	movs	r7, #15
}
 8005f9e:	0038      	movs	r0, r7
 8005fa0:	b011      	add	sp, #68	; 0x44
 8005fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8005fa4:	f001 ff92 	bl	8007ecc <LoRaMacClassBIsMulticastExpected>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d0e3      	beq.n	8005f74 <ScheduleTx+0x1c>
 8005fac:	e7f6      	b.n	8005f9c <ScheduleTx+0x44>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8005fae:	23c6      	movs	r3, #198	; 0xc6
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	5ae2      	ldrh	r2, [r4, r3]
 8005fb4:	4b63      	ldr	r3, [pc, #396]	; (8006144 <ScheduleTx+0x1ec>)
 8005fb6:	3a01      	subs	r2, #1
 8005fb8:	58eb      	ldr	r3, [r5, r3]
 8005fba:	4353      	muls	r3, r2
 8005fbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005fbe:	e7dd      	b.n	8005f7c <ScheduleTx+0x24>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8005fc0:	485f      	ldr	r0, [pc, #380]	; (8006140 <ScheduleTx+0x1e8>)
 8005fc2:	f002 fd86 	bl	8008ad2 <LoRaMacSerializerJoinRequest>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8005fc6:	2711      	movs	r7, #17
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1e8      	bne.n	8005f9e <ScheduleTx+0x46>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8005fcc:	7b73      	ldrb	r3, [r6, #13]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8005fce:	af0a      	add	r7, sp, #40	; 0x28
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8005fd0:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8005fd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8005fd4:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8005fd6:	930a      	str	r3, [sp, #40]	; 0x28
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005fd8:	0023      	movs	r3, r4
 8005fda:	3345      	adds	r3, #69	; 0x45
 8005fdc:	781b      	ldrb	r3, [r3, #0]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8005fde:	ad04      	add	r5, sp, #16
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005fe0:	723b      	strb	r3, [r7, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8005fe2:	23c4      	movs	r3, #196	; 0xc4
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	5ce3      	ldrb	r3, [r4, r3]
 8005fe8:	72bb      	strb	r3, [r7, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8005fea:	f005 fb87 	bl	800b6fc <SysTimeGetMcuTime>
 8005fee:	0023      	movs	r3, r4
 8005ff0:	3395      	adds	r3, #149	; 0x95
 8005ff2:	33ff      	adds	r3, #255	; 0xff
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	23c8      	movs	r3, #200	; 0xc8
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	0028      	movs	r0, r5
 8006000:	58e3      	ldr	r3, [r4, r3]
 8006002:	9908      	ldr	r1, [sp, #32]
 8006004:	f005 fb20 	bl	800b648 <SysTimeSub>
 8006008:	ab0d      	add	r3, sp, #52	; 0x34
 800600a:	cd06      	ldmia	r5!, {r1, r2}
 800600c:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800600e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    nextChan.PktLen = MacCtx.PktBufferLen;
 8006010:	4d4a      	ldr	r5, [pc, #296]	; (800613c <ScheduleTx+0x1e4>)
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8006012:	607b      	str	r3, [r7, #4]
    nextChan.LastTxIsJoinRequest = false;
 8006014:	2300      	movs	r3, #0
 8006016:	753b      	strb	r3, [r7, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8006018:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
 800601a:	2201      	movs	r2, #1
    nextChan.PktLen = MacCtx.PktBufferLen;
 800601c:	82fb      	strh	r3, [r7, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800601e:	23ce      	movs	r3, #206	; 0xce
    nextChan.Joined = true;
 8006020:	727a      	strb	r2, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	5ce3      	ldrb	r3, [r4, r3]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <ScheduleTx+0xd6>
        nextChan.LastTxIsJoinRequest = true;
 800602a:	753a      	strb	r2, [r7, #20]
        nextChan.Joined = false;
 800602c:	727b      	strb	r3, [r7, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800602e:	0026      	movs	r6, r4
 8006030:	4b45      	ldr	r3, [pc, #276]	; (8006148 <ScheduleTx+0x1f0>)
 8006032:	364c      	adds	r6, #76	; 0x4c
 8006034:	0039      	movs	r1, r7
 8006036:	7830      	ldrb	r0, [r6, #0]
 8006038:	4a44      	ldr	r2, [pc, #272]	; (800614c <ScheduleTx+0x1f4>)
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	4b44      	ldr	r3, [pc, #272]	; (8006150 <ScheduleTx+0x1f8>)
 800603e:	f002 fee5 	bl	8008e0c <RegionNextChannel>
 8006042:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8006044:	d019      	beq.n	800607a <ScheduleTx+0x122>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8006046:	280b      	cmp	r0, #11
 8006048:	d1a9      	bne.n	8005f9e <ScheduleTx+0x46>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0a6      	beq.n	8005f9e <ScheduleTx+0x46>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8006050:	2292      	movs	r2, #146	; 0x92
            return LORAMAC_STATUS_OK;
 8006052:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8006054:	4b39      	ldr	r3, [pc, #228]	; (800613c <ScheduleTx+0x1e4>)
 8006056:	00d2      	lsls	r2, r2, #3
 8006058:	5899      	ldr	r1, [r3, r2]
 800605a:	42b9      	cmp	r1, r7
 800605c:	d09f      	beq.n	8005f9e <ScheduleTx+0x46>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800605e:	20d0      	movs	r0, #208	; 0xd0
 8006060:	2220      	movs	r2, #32
 8006062:	0080      	lsls	r0, r0, #2
 8006064:	581c      	ldr	r4, [r3, r0]
 8006066:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8006068:	4c3a      	ldr	r4, [pc, #232]	; (8006154 <ScheduleTx+0x1fc>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800606a:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800606c:	0020      	movs	r0, r4
 800606e:	f005 fc6d 	bl	800b94c <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8006072:	0020      	movs	r0, r4
 8006074:	f005 fbc4 	bl	800b800 <TimerStart>
 8006078:	e791      	b.n	8005f9e <ScheduleTx+0x46>
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800607a:	0023      	movs	r3, r4
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800607c:	0022      	movs	r2, r4
 800607e:	0021      	movs	r1, r4
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8006080:	336d      	adds	r3, #109	; 0x6d
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006082:	3245      	adds	r2, #69	; 0x45
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006084:	7837      	ldrb	r7, [r6, #0]
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	3181      	adds	r1, #129	; 0x81
 800608c:	7809      	ldrb	r1, [r1, #0]
 800608e:	b25b      	sxtb	r3, r3
 8006090:	b252      	sxtb	r2, r2
 8006092:	0038      	movs	r0, r7
 8006094:	f002 fecd 	bl	8008e32 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006098:	4b2f      	ldr	r3, [pc, #188]	; (8006158 <ScheduleTx+0x200>)
 800609a:	b241      	sxtb	r1, r0
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	4b2f      	ldr	r3, [pc, #188]	; (800615c <ScheduleTx+0x204>)
 80060a0:	0038      	movs	r0, r7
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80060a6:	f002 fe1c 	bl	8008ce2 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80060aa:	2174      	movs	r1, #116	; 0x74
 80060ac:	4b2a      	ldr	r3, [pc, #168]	; (8006158 <ScheduleTx+0x200>)
 80060ae:	7830      	ldrb	r0, [r6, #0]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	4b2b      	ldr	r3, [pc, #172]	; (8006160 <ScheduleTx+0x208>)
 80060b4:	5661      	ldrsb	r1, [r4, r1]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80060ba:	f002 fe12 	bl	8008ce2 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80060be:	23f3      	movs	r3, #243	; 0xf3
 80060c0:	26ee      	movs	r6, #238	; 0xee
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	58ea      	ldr	r2, [r5, r3]
 80060c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80060c8:	00b6      	lsls	r6, r6, #2
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	51ab      	str	r3, [r5, r6]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80060ce:	23f8      	movs	r3, #248	; 0xf8
 80060d0:	20ef      	movs	r0, #239	; 0xef
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	58eb      	ldr	r3, [r5, r3]
 80060d6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80060d8:	0080      	lsls	r0, r0, #2
 80060da:	18c9      	adds	r1, r1, r3
 80060dc:	5029      	str	r1, [r5, r0]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80060de:	21ce      	movs	r1, #206	; 0xce
 80060e0:	0049      	lsls	r1, r1, #1
 80060e2:	5c61      	ldrb	r1, [r4, r1]
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d105      	bne.n	80060f4 <ScheduleTx+0x19c>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80060e8:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80060ea:	18ba      	adds	r2, r7, r2
 80060ec:	51aa      	str	r2, [r5, r6]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80060ee:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	502b      	str	r3, [r5, r0]
    size_t macCmdsSize = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	9307      	str	r3, [sp, #28]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d015      	beq.n	8006128 <ScheduleTx+0x1d0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80060fc:	a807      	add	r0, sp, #28
 80060fe:	f001 ffb1 	bl	8008064 <LoRaMacCommandsGetSizeSerializedCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006102:	2713      	movs	r7, #19
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8006104:	2800      	cmp	r0, #0
 8006106:	d000      	beq.n	800610a <ScheduleTx+0x1b2>
 8006108:	e749      	b.n	8005f9e <ScheduleTx+0x46>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800610a:	2045      	movs	r0, #69	; 0x45
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800610c:	4a0b      	ldr	r2, [pc, #44]	; (800613c <ScheduleTx+0x1e4>)
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <ScheduleTx+0x20c>)
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8006110:	5620      	ldrsb	r0, [r4, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8006112:	5cd5      	ldrb	r5, [r2, r3]
 8006114:	9b07      	ldr	r3, [sp, #28]
            return LORAMAC_STATUS_LENGTH_ERROR;
 8006116:	3f0b      	subs	r7, #11
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8006118:	b2de      	uxtb	r6, r3
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800611a:	f7fe ff5d 	bl	8004fd8 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800611e:	19ad      	adds	r5, r5, r6
 8006120:	b280      	uxth	r0, r0
 8006122:	42a8      	cmp	r0, r5
 8006124:	d200      	bcs.n	8006128 <ScheduleTx+0x1d0>
 8006126:	e73a      	b.n	8005f9e <ScheduleTx+0x46>
    return SendFrameOnChannel( MacCtx.Channel );
 8006128:	4a04      	ldr	r2, [pc, #16]	; (800613c <ScheduleTx+0x1e4>)
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <ScheduleTx+0x210>)
 800612c:	5cd0      	ldrb	r0, [r2, r3]
 800612e:	f7ff fe5d 	bl	8005dec <SendFrameOnChannel>
 8006132:	0007      	movs	r7, r0
 8006134:	e733      	b.n	8005f9e <ScheduleTx+0x46>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	200008d4 	.word	0x200008d4
 800613c:	200003bc 	.word	0x200003bc
 8006140:	200004c4 	.word	0x200004c4
 8006144:	0000041c 	.word	0x0000041c
 8006148:	20000910 	.word	0x20000910
 800614c:	200007d7 	.word	0x200007d7
 8006150:	2000084c 	.word	0x2000084c
 8006154:	2000072c 	.word	0x2000072c
 8006158:	20000928 	.word	0x20000928
 800615c:	2000077c 	.word	0x2000077c
 8006160:	20000790 	.word	0x20000790
 8006164:	00000237 	.word	0x00000237
 8006168:	0000041b 	.word	0x0000041b

0800616c <OnTxDelayedTimerEvent>:
{
 800616c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800616e:	4818      	ldr	r0, [pc, #96]	; (80061d0 <OnTxDelayedTimerEvent+0x64>)
 8006170:	f005 fbbe 	bl	800b8f0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8006174:	22d0      	movs	r2, #208	; 0xd0
 8006176:	2320      	movs	r3, #32
 8006178:	4c16      	ldr	r4, [pc, #88]	; (80061d4 <OnTxDelayedTimerEvent+0x68>)
 800617a:	0092      	lsls	r2, r2, #2
 800617c:	58a1      	ldr	r1, [r4, r2]
 800617e:	4399      	bics	r1, r3
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <OnTxDelayedTimerEvent+0x6c>)
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8006182:	50a1      	str	r1, [r4, r2]
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8006184:	58e0      	ldr	r0, [r4, r3]
    if( startTimeInMs != 0 )
 8006186:	2800      	cmp	r0, #0
 8006188:	d00a      	beq.n	80061a0 <OnTxDelayedTimerEvent+0x34>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800618a:	f005 fbf6 	bl	800b97a <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800618e:	23fa      	movs	r3, #250	; 0xfa
 8006190:	015b      	lsls	r3, r3, #5
 8006192:	4298      	cmp	r0, r3
 8006194:	d904      	bls.n	80061a0 <OnTxDelayedTimerEvent+0x34>
            Nvm.MacGroup1.SrvAckRequested = false;
 8006196:	2200      	movs	r2, #0
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <OnTxDelayedTimerEvent+0x70>)
 800619a:	3346      	adds	r3, #70	; 0x46
 800619c:	701a      	strb	r2, [r3, #0]
}
 800619e:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 80061a0:	2001      	movs	r0, #1
 80061a2:	f7ff fed9 	bl	8005f58 <ScheduleTx>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d0f9      	beq.n	800619e <OnTxDelayedTimerEvent+0x32>
 80061aa:	280b      	cmp	r0, #11
 80061ac:	d0f7      	beq.n	800619e <OnTxDelayedTimerEvent+0x32>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80061ae:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <OnTxDelayedTimerEvent+0x70>)
 80061b2:	3345      	adds	r3, #69	; 0x45
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <OnTxDelayedTimerEvent+0x74>)
 80061b8:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80061ba:	3b2e      	subs	r3, #46	; 0x2e
 80061bc:	5ce2      	ldrb	r2, [r4, r3]
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <OnTxDelayedTimerEvent+0x78>)
 80061c0:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <OnTxDelayedTimerEvent+0x7c>)
 80061c4:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80061c6:	f002 f839 	bl	800823c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80061ca:	f7ff fd09 	bl	8005be0 <StopRetransmission.isra.0>
            break;
 80061ce:	e7e6      	b.n	800619e <OnTxDelayedTimerEvent+0x32>
 80061d0:	2000072c 	.word	0x2000072c
 80061d4:	200003bc 	.word	0x200003bc
 80061d8:	00000494 	.word	0x00000494
 80061dc:	200008d4 	.word	0x200008d4
 80061e0:	00000446 	.word	0x00000446
 80061e4:	00000449 	.word	0x00000449
 80061e8:	00000445 	.word	0x00000445

080061ec <Send>:
{
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b08f      	sub	sp, #60	; 0x3c
 80061f0:	9104      	str	r1, [sp, #16]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80061f2:	21ce      	movs	r1, #206	; 0xce
{
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	4b3a      	ldr	r3, [pc, #232]	; (80062e0 <Send+0xf4>)
 80061f8:	0016      	movs	r6, r2
 80061fa:	1d9a      	adds	r2, r3, #6
 80061fc:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80061fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
 8006200:	9003      	str	r0, [sp, #12]
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006202:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006204:	0049      	lsls	r1, r1, #1
 8006206:	5c59      	ldrb	r1, [r3, r1]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8006208:	2007      	movs	r0, #7
 800620a:	ba6c      	rev16	r4, r5
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800620c:	2900      	cmp	r1, #0
 800620e:	d059      	beq.n	80062c4 <Send+0xd8>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8006210:	2188      	movs	r1, #136	; 0x88
 8006212:	31ff      	adds	r1, #255	; 0xff
 8006214:	5c59      	ldrb	r1, [r3, r1]
 8006216:	2900      	cmp	r1, #0
 8006218:	d100      	bne.n	800621c <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800621a:	63d9      	str	r1, [r3, #60]	; 0x3c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800621c:	21c3      	movs	r1, #195	; 0xc3
 800621e:	4830      	ldr	r0, [pc, #192]	; (80062e0 <Send+0xf4>)
 8006220:	0049      	lsls	r1, r1, #1
 8006222:	5c41      	ldrb	r1, [r0, r1]
    fCtrl.Value = 0;
 8006224:	ab07      	add	r3, sp, #28
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8006226:	01cf      	lsls	r7, r1, #7
 8006228:	701f      	strb	r7, [r3, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800622a:	27c2      	movs	r7, #194	; 0xc2
 800622c:	007f      	lsls	r7, r7, #1
 800622e:	5dc0      	ldrb	r0, [r0, r7]
 8006230:	2801      	cmp	r0, #1
 8006232:	d103      	bne.n	800623c <Send+0x50>
        fCtrl.Bits.FPending      = 1;
 8006234:	781f      	ldrb	r7, [r3, #0]
 8006236:	300f      	adds	r0, #15
 8006238:	4338      	orrs	r0, r7
 800623a:	7018      	strb	r0, [r3, #0]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800623c:	4b28      	ldr	r3, [pc, #160]	; (80062e0 <Send+0xf4>)
 800623e:	3346      	adds	r3, #70	; 0x46
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <Send+0x64>
        fCtrl.Bits.Ack = 1;
 8006246:	2320      	movs	r3, #32
 8006248:	a807      	add	r0, sp, #28
 800624a:	7807      	ldrb	r7, [r0, #0]
 800624c:	433b      	orrs	r3, r7
 800624e:	7003      	strb	r3, [r0, #0]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006250:	23ff      	movs	r3, #255	; 0xff
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006252:	920a      	str	r2, [sp, #40]	; 0x28
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006254:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <Send+0xf8>)
    adrNext.UpdateChanMask = true;
 8006256:	a809      	add	r0, sp, #36	; 0x24
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006258:	009b      	lsls	r3, r3, #2
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800625a:	8184      	strh	r4, [r0, #12]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800625c:	58d3      	ldr	r3, [r2, r3]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800625e:	4c20      	ldr	r4, [pc, #128]	; (80062e0 <Send+0xf4>)
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006260:	930b      	str	r3, [sp, #44]	; 0x2c
    adrNext.UpdateChanMask = true;
 8006262:	2701      	movs	r7, #1
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006264:	0023      	movs	r3, r4
    adrNext.UpdateChanMask = true;
 8006266:	7007      	strb	r7, [r0, #0]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8006268:	7041      	strb	r1, [r0, #1]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800626a:	336c      	adds	r3, #108	; 0x6c
 800626c:	781a      	ldrb	r2, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800626e:	491e      	ldr	r1, [pc, #120]	; (80062e8 <Send+0xfc>)
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006270:	7382      	strb	r2, [r0, #14]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006272:	0022      	movs	r2, r4
 8006274:	3280      	adds	r2, #128	; 0x80
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	73c2      	strb	r2, [r0, #15]
    adrNext.Region = Nvm.MacGroup2.Region;
 800627a:	0022      	movs	r2, r4
 800627c:	324c      	adds	r2, #76	; 0x4c
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	7402      	strb	r2, [r0, #16]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8006282:	aa08      	add	r2, sp, #32
 8006284:	9200      	str	r2, [sp, #0]
 8006286:	4a19      	ldr	r2, [pc, #100]	; (80062ec <Send+0x100>)
 8006288:	f001 fdac 	bl	8007de4 <LoRaMacAdrCalcNext>
 800628c:	ab04      	add	r3, sp, #16
 800628e:	4038      	ands	r0, r7
 8006290:	7b1f      	ldrb	r7, [r3, #12]
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	0180      	lsls	r0, r0, #6
 8006296:	439f      	bics	r7, r3
 8006298:	4307      	orrs	r7, r0
 800629a:	ab04      	add	r3, sp, #16
 800629c:	731f      	strb	r7, [r3, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800629e:	9b05      	ldr	r3, [sp, #20]
 80062a0:	9a04      	ldr	r2, [sp, #16]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	9803      	ldr	r0, [sp, #12]
 80062a6:	0033      	movs	r3, r6
 80062a8:	a907      	add	r1, sp, #28
 80062aa:	f7ff fcdf 	bl	8005c6c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d001      	beq.n	80062b6 <Send+0xca>
 80062b2:	280a      	cmp	r0, #10
 80062b4:	d104      	bne.n	80062c0 <Send+0xd4>
        status = ScheduleTx( false );
 80062b6:	2000      	movs	r0, #0
 80062b8:	f7ff fe4e 	bl	8005f58 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 80062bc:	2800      	cmp	r0, #0
 80062be:	d003      	beq.n	80062c8 <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80062c0:	3406      	adds	r4, #6
 80062c2:	87e5      	strh	r5, [r4, #62]	; 0x3e
}
 80062c4:	b00f      	add	sp, #60	; 0x3c
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Nvm.MacGroup1.SrvAckRequested = false;
 80062c8:	0023      	movs	r3, r4
 80062ca:	3346      	adds	r3, #70	; 0x46
 80062cc:	7018      	strb	r0, [r3, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80062ce:	9b08      	ldr	r3, [sp, #32]
 80062d0:	6363      	str	r3, [r4, #52]	; 0x34
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80062d2:	f001 fe9f 	bl	8008014 <LoRaMacCommandsRemoveNoneStickyCmds>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d0f4      	beq.n	80062c4 <Send+0xd8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80062da:	2013      	movs	r0, #19
 80062dc:	e7f2      	b.n	80062c4 <Send+0xd8>
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	200008d4 	.word	0x200008d4
 80062e4:	200003bc 	.word	0x200003bc
 80062e8:	20000919 	.word	0x20000919
 80062ec:	20000918 	.word	0x20000918

080062f0 <SendReJoinReq>:
{
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	0005      	movs	r5, r0
    bool allowDelayedTx = true;
 80062f4:	2001      	movs	r0, #1
    switch( joinReqType )
 80062f6:	2dff      	cmp	r5, #255	; 0xff
 80062f8:	d11c      	bne.n	8006334 <SendReJoinReq+0x44>
            SwitchClass( CLASS_A );
 80062fa:	2000      	movs	r0, #0
 80062fc:	f7fe ff6a 	bl	80051d4 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <SendReJoinReq+0x4c>)
 8006302:	2400      	movs	r4, #0
 8006304:	001a      	movs	r2, r3
 8006306:	32ff      	adds	r2, #255	; 0xff
 8006308:	7154      	strb	r4, [r2, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800630a:	001a      	movs	r2, r3
 800630c:	490c      	ldr	r1, [pc, #48]	; (8006340 <SendReJoinReq+0x50>)
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800630e:	33fe      	adds	r3, #254	; 0xfe
 8006310:	81dd      	strh	r5, [r3, #14]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8006312:	32fc      	adds	r2, #252	; 0xfc
 8006314:	60d1      	str	r1, [r2, #12]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8006316:	f005 f8f5 	bl	800b504 <SecureElementGetJoinEui>
 800631a:	2208      	movs	r2, #8
 800631c:	0001      	movs	r1, r0
 800631e:	4809      	ldr	r0, [pc, #36]	; (8006344 <SendReJoinReq+0x54>)
 8006320:	f7fe fabb 	bl	800489a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8006324:	f005 f8d8 	bl	800b4d8 <SecureElementGetDevEui>
 8006328:	2208      	movs	r2, #8
 800632a:	0001      	movs	r1, r0
 800632c:	4806      	ldr	r0, [pc, #24]	; (8006348 <SendReJoinReq+0x58>)
 800632e:	f7fe fab4 	bl	800489a <memcpy1>
            allowDelayedTx = false;
 8006332:	0020      	movs	r0, r4
    status = ScheduleTx( allowDelayedTx );
 8006334:	f7ff fe10 	bl	8005f58 <ScheduleTx>
}
 8006338:	bd70      	pop	{r4, r5, r6, pc}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	200003bc 	.word	0x200003bc
 8006340:	200003be 	.word	0x200003be
 8006344:	200004ca 	.word	0x200004ca
 8006348:	200004d2 	.word	0x200004d2

0800634c <SetTxContinuousWave>:
{
 800634c:	0003      	movs	r3, r0
 800634e:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8006350:	b251      	sxtb	r1, r2
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <SetTxContinuousWave+0x24>)
{
 8006354:	b510      	push	{r4, lr}
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8006356:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8006358:	001a      	movs	r2, r3
 800635a:	47a0      	blx	r4
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800635c:	22d0      	movs	r2, #208	; 0xd0
 800635e:	2302      	movs	r3, #2
 8006360:	4904      	ldr	r1, [pc, #16]	; (8006374 <SetTxContinuousWave+0x28>)
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	5888      	ldr	r0, [r1, r2]
 8006366:	4303      	orrs	r3, r0
 8006368:	508b      	str	r3, [r1, r2]
}
 800636a:	2000      	movs	r0, #0
 800636c:	bd10      	pop	{r4, pc}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	0801a9e0 	.word	0x0801a9e0
 8006374:	200003bc 	.word	0x200003bc

08006378 <DetermineFrameType>:
{
 8006378:	0003      	movs	r3, r0
 800637a:	b510      	push	{r4, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800637c:	2003      	movs	r0, #3
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <DetermineFrameType+0x26>
 8006382:	2900      	cmp	r1, #0
 8006384:	d00b      	beq.n	800639e <DetermineFrameType+0x26>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8006386:	7b1c      	ldrb	r4, [r3, #12]
 8006388:	300c      	adds	r0, #12
 800638a:	0022      	movs	r2, r4
 800638c:	4002      	ands	r2, r0
 800638e:	4204      	tst	r4, r0
 8006390:	d006      	beq.n	80063a0 <DetermineFrameType+0x28>
 8006392:	1c58      	adds	r0, r3, #1
 8006394:	7fc0      	ldrb	r0, [r0, #31]
 8006396:	2800      	cmp	r0, #0
 8006398:	d002      	beq.n	80063a0 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_A;
 800639a:	2000      	movs	r0, #0
 800639c:	7008      	strb	r0, [r1, #0]
}
 800639e:	bd10      	pop	{r4, pc}
    else if( macMsg->FRMPayloadSize == 0 )
 80063a0:	0018      	movs	r0, r3
 80063a2:	3028      	adds	r0, #40	; 0x28
 80063a4:	7800      	ldrb	r0, [r0, #0]
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d102      	bne.n	80063b0 <DetermineFrameType+0x38>
        *fType = FRAME_TYPE_B;
 80063aa:	2301      	movs	r3, #1
        *fType = FRAME_TYPE_C;
 80063ac:	700b      	strb	r3, [r1, #0]
 80063ae:	e7f6      	b.n	800639e <DetermineFrameType+0x26>
        return LORAMAC_STATUS_ERROR;
 80063b0:	2017      	movs	r0, #23
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d1f3      	bne.n	800639e <DetermineFrameType+0x26>
 80063b6:	3301      	adds	r3, #1
 80063b8:	7fd8      	ldrb	r0, [r3, #31]
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d101      	bne.n	80063c2 <DetermineFrameType+0x4a>
        *fType = FRAME_TYPE_C;
 80063be:	2302      	movs	r3, #2
 80063c0:	e7f4      	b.n	80063ac <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_D;
 80063c2:	2303      	movs	r3, #3
    return LORAMAC_STATUS_OK;
 80063c4:	0010      	movs	r0, r2
        *fType = FRAME_TYPE_D;
 80063c6:	700b      	strb	r3, [r1, #0]
 80063c8:	e7e9      	b.n	800639e <DetermineFrameType+0x26>
	...

080063cc <LoRaMacProcess>:
{
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	b0ab      	sub	sp, #172	; 0xac
    CRITICAL_SECTION_BEGIN( );
 80063d0:	a80a      	add	r0, sp, #40	; 0x28
 80063d2:	f7fd fd1d 	bl	8003e10 <BoardCriticalSectionBegin>
    LoRaMacRadioEvents.Value = 0;
 80063d6:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 80063d8:	4bdf      	ldr	r3, [pc, #892]	; (8006758 <LoRaMacProcess+0x38c>)
    CRITICAL_SECTION_END( );
 80063da:	a80a      	add	r0, sp, #40	; 0x28
    events = LoRaMacRadioEvents;
 80063dc:	681c      	ldr	r4, [r3, #0]
    LoRaMacRadioEvents.Value = 0;
 80063de:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 80063e0:	f7fd fd1b 	bl	8003e1a <BoardCriticalSectionEnd>
    if( events.Value != 0 )
 80063e4:	2c00      	cmp	r4, #0
 80063e6:	d100      	bne.n	80063ea <LoRaMacProcess+0x1e>
 80063e8:	e0e7      	b.n	80065ba <LoRaMacProcess+0x1ee>
        if( events.Events.TxDone == 1 )
 80063ea:	b2e3      	uxtb	r3, r4
 80063ec:	9305      	str	r3, [sp, #20]
 80063ee:	06a3      	lsls	r3, r4, #26
 80063f0:	d563      	bpl.n	80064ba <LoRaMacProcess+0xee>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80063f2:	23c2      	movs	r3, #194	; 0xc2
 80063f4:	4dd9      	ldr	r5, [pc, #868]	; (800675c <LoRaMacProcess+0x390>)
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	5ceb      	ldrb	r3, [r5, r3]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d003      	beq.n	8006406 <LoRaMacProcess+0x3a>
        Radio.Sleep( );
 80063fe:	4bd8      	ldr	r3, [pc, #864]	; (8006760 <LoRaMacProcess+0x394>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	9303      	str	r3, [sp, #12]
 8006404:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8006406:	23ee      	movs	r3, #238	; 0xee
 8006408:	4cd6      	ldr	r4, [pc, #856]	; (8006764 <LoRaMacProcess+0x398>)
 800640a:	4ed7      	ldr	r6, [pc, #860]	; (8006768 <LoRaMacProcess+0x39c>)
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	58e1      	ldr	r1, [r4, r3]
 8006410:	0030      	movs	r0, r6
 8006412:	f005 fa9b 	bl	800b94c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8006416:	0030      	movs	r0, r6
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8006418:	26ef      	movs	r6, #239	; 0xef
    TimerStart( &MacCtx.RxWindowTimer1 );
 800641a:	f005 f9f1 	bl	800b800 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800641e:	4fd3      	ldr	r7, [pc, #844]	; (800676c <LoRaMacProcess+0x3a0>)
 8006420:	00b6      	lsls	r6, r6, #2
 8006422:	0038      	movs	r0, r7
 8006424:	59a1      	ldr	r1, [r4, r6]
 8006426:	f005 fa91 	bl	800b94c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800642a:	0038      	movs	r0, r7
 800642c:	f005 f9e8 	bl	800b800 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 8006430:	4bcf      	ldr	r3, [pc, #828]	; (8006770 <LoRaMacProcess+0x3a4>)
 8006432:	5ce3      	ldrb	r3, [r4, r3]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d100      	bne.n	800643a <LoRaMacProcess+0x6e>
 8006438:	e212      	b.n	8006860 <LoRaMacProcess+0x494>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800643a:	2314      	movs	r3, #20
 800643c:	a914      	add	r1, sp, #80	; 0x50
 800643e:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006440:	002b      	movs	r3, r5
 8006442:	334c      	adds	r3, #76	; 0x4c
 8006444:	7818      	ldrb	r0, [r3, #0]
 8006446:	f002 fbf1 	bl	8008c2c <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800644a:	59a1      	ldr	r1, [r4, r6]
 800644c:	4cc9      	ldr	r4, [pc, #804]	; (8006774 <LoRaMacProcess+0x3a8>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800644e:	9011      	str	r0, [sp, #68]	; 0x44
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8006450:	1809      	adds	r1, r1, r0
 8006452:	0020      	movs	r0, r4
 8006454:	f005 fa7a 	bl	800b94c <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8006458:	0020      	movs	r0, r4
 800645a:	f005 f9d1 	bl	800b800 <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800645e:	4bc6      	ldr	r3, [pc, #792]	; (8006778 <LoRaMacProcess+0x3ac>)
    txDone.Channel = MacCtx.Channel;
 8006460:	4fc0      	ldr	r7, [pc, #768]	; (8006764 <LoRaMacProcess+0x398>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8006462:	681b      	ldr	r3, [r3, #0]
    txDone.Channel = MacCtx.Channel;
 8006464:	4ac5      	ldr	r2, [pc, #788]	; (800677c <LoRaMacProcess+0x3b0>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8006466:	63ab      	str	r3, [r5, #56]	; 0x38
    txDone.Channel = MacCtx.Channel;
 8006468:	5cba      	ldrb	r2, [r7, r2]
 800646a:	ac1e      	add	r4, sp, #120	; 0x78
 800646c:	7022      	strb	r2, [r4, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800646e:	a80f      	add	r0, sp, #60	; 0x3c
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8006470:	6063      	str	r3, [r4, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006472:	f005 f943 	bl	800b6fc <SysTimeGetMcuTime>
 8006476:	002b      	movs	r3, r5
 8006478:	3395      	adds	r3, #149	; 0x95
 800647a:	33ff      	adds	r3, #255	; 0xff
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	ae08      	add	r6, sp, #32
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	23c8      	movs	r3, #200	; 0xc8
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	0030      	movs	r0, r6
 8006488:	58eb      	ldr	r3, [r5, r3]
 800648a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800648c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800648e:	f005 f8db 	bl	800b648 <SysTimeSub>
 8006492:	ab21      	add	r3, sp, #132	; 0x84
 8006494:	ce06      	ldmia	r6!, {r1, r2}
 8006496:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8006498:	4bb9      	ldr	r3, [pc, #740]	; (8006780 <LoRaMacProcess+0x3b4>)
 800649a:	58fb      	ldr	r3, [r7, r3]
 800649c:	60a3      	str	r3, [r4, #8]
    txDone.Joined  = true;
 800649e:	2301      	movs	r3, #1
 80064a0:	7063      	strb	r3, [r4, #1]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80064a2:	339c      	adds	r3, #156	; 0x9c
 80064a4:	33ff      	adds	r3, #255	; 0xff
 80064a6:	5ceb      	ldrb	r3, [r5, r3]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d100      	bne.n	80064ae <LoRaMacProcess+0xe2>
        txDone.Joined  = false;
 80064ac:	7063      	strb	r3, [r4, #1]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80064ae:	4bab      	ldr	r3, [pc, #684]	; (800675c <LoRaMacProcess+0x390>)
 80064b0:	0021      	movs	r1, r4
 80064b2:	334c      	adds	r3, #76	; 0x4c
 80064b4:	7818      	ldrb	r0, [r3, #0]
 80064b6:	f002 fbcb 	bl	8008c50 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	06db      	lsls	r3, r3, #27
 80064be:	d54d      	bpl.n	800655c <LoRaMacProcess+0x190>
    uint8_t *payload = RxDoneParams.Payload;
 80064c0:	4bb0      	ldr	r3, [pc, #704]	; (8006784 <LoRaMacProcess+0x3b8>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80064c2:	4da6      	ldr	r5, [pc, #664]	; (800675c <LoRaMacProcess+0x390>)
    uint8_t *payload = RxDoneParams.Payload;
 80064c4:	685a      	ldr	r2, [r3, #4]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80064c6:	2001      	movs	r0, #1
    uint8_t *payload = RxDoneParams.Payload;
 80064c8:	9203      	str	r2, [sp, #12]
    int16_t rssi = RxDoneParams.Rssi;
 80064ca:	220a      	movs	r2, #10
 80064cc:	5e9e      	ldrsh	r6, [r3, r2]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80064ce:	002a      	movs	r2, r5
 80064d0:	32d0      	adds	r2, #208	; 0xd0
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80064d2:	49a1      	ldr	r1, [pc, #644]	; (8006758 <LoRaMacProcess+0x38c>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80064d4:	6812      	ldr	r2, [r2, #0]
    uint16_t size = RxDoneParams.Size;
 80064d6:	891f      	ldrh	r7, [r3, #8]
    int8_t snr = RxDoneParams.Snr;
 80064d8:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80064da:	9207      	str	r2, [sp, #28]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80064dc:	780a      	ldrb	r2, [r1, #0]
    int8_t snr = RxDoneParams.Snr;
 80064de:	b25b      	sxtb	r3, r3
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80064e0:	4382      	bics	r2, r0
 80064e2:	700a      	strb	r2, [r1, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80064e4:	2289      	movs	r2, #137	; 0x89
    int8_t snr = RxDoneParams.Snr;
 80064e6:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 80064e8:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 80064ea:	4c9e      	ldr	r4, [pc, #632]	; (8006764 <LoRaMacProcess+0x398>)
 80064ec:	00d2      	lsls	r2, r2, #3
 80064ee:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 80064f0:	4aa5      	ldr	r2, [pc, #660]	; (8006788 <LoRaMacProcess+0x3bc>)
    MacCtx.McpsIndication.Snr = snr;
 80064f2:	9904      	ldr	r1, [sp, #16]
    MacCtx.McpsIndication.Rssi = rssi;
 80064f4:	52a6      	strh	r6, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 80064f6:	3202      	adds	r2, #2
 80064f8:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80064fa:	4aa4      	ldr	r2, [pc, #656]	; (800678c <LoRaMacProcess+0x3c0>)
    uint32_t downLinkCounter = 0;
 80064fc:	930c      	str	r3, [sp, #48]	; 0x30
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80064fe:	5ca2      	ldrb	r2, [r4, r2]
 8006500:	49a3      	ldr	r1, [pc, #652]	; (8006790 <LoRaMacProcess+0x3c4>)
 8006502:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8006504:	4aa3      	ldr	r2, [pc, #652]	; (8006794 <LoRaMacProcess+0x3c8>)
 8006506:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8006508:	4aa3      	ldr	r2, [pc, #652]	; (8006798 <LoRaMacProcess+0x3cc>)
 800650a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800650c:	3203      	adds	r2, #3
 800650e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8006510:	4aa2      	ldr	r2, [pc, #648]	; (800679c <LoRaMacProcess+0x3d0>)
 8006512:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8006514:	4aa2      	ldr	r2, [pc, #648]	; (80067a0 <LoRaMacProcess+0x3d4>)
 8006516:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8006518:	4aa2      	ldr	r2, [pc, #648]	; (80067a4 <LoRaMacProcess+0x3d8>)
 800651a:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800651c:	3a14      	subs	r2, #20
 800651e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8006520:	3218      	adds	r2, #24
 8006522:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8006524:	4aa0      	ldr	r2, [pc, #640]	; (80067a8 <LoRaMacProcess+0x3dc>)
 8006526:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8006528:	3204      	adds	r2, #4
 800652a:	50a3      	str	r3, [r4, r2]
    Radio.Sleep( );
 800652c:	4b8c      	ldr	r3, [pc, #560]	; (8006760 <LoRaMacProcess+0x394>)
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	9306      	str	r3, [sp, #24]
 8006532:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8006534:	4996      	ldr	r1, [pc, #600]	; (8006790 <LoRaMacProcess+0x3c4>)
 8006536:	5c63      	ldrb	r3, [r4, r1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <LoRaMacProcess+0x176>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800653c:	488b      	ldr	r0, [pc, #556]	; (800676c <LoRaMacProcess+0x3a0>)
 800653e:	f005 f9d7 	bl	800b8f0 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8006542:	0039      	movs	r1, r7
 8006544:	9803      	ldr	r0, [sp, #12]
 8006546:	f001 fcbb 	bl	8007ec0 <LoRaMacClassBRxBeacon>
 800654a:	9006      	str	r0, [sp, #24]
 800654c:	2800      	cmp	r0, #0
 800654e:	d100      	bne.n	8006552 <LoRaMacProcess+0x186>
 8006550:	e189      	b.n	8006866 <LoRaMacProcess+0x49a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8006552:	4b96      	ldr	r3, [pc, #600]	; (80067ac <LoRaMacProcess+0x3e0>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8006554:	9a04      	ldr	r2, [sp, #16]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8006556:	52e6      	strh	r6, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8006558:	3302      	adds	r3, #2
 800655a:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 800655c:	9b05      	ldr	r3, [sp, #20]
 800655e:	071b      	lsls	r3, r3, #28
 8006560:	d51d      	bpl.n	800659e <LoRaMacProcess+0x1d2>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006562:	23c2      	movs	r3, #194	; 0xc2
 8006564:	4a7d      	ldr	r2, [pc, #500]	; (800675c <LoRaMacProcess+0x390>)
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	5cd3      	ldrb	r3, [r2, r3]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d003      	beq.n	8006576 <LoRaMacProcess+0x1aa>
        Radio.Sleep( );
 800656e:	4b7c      	ldr	r3, [pc, #496]	; (8006760 <LoRaMacProcess+0x394>)
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8006576:	f7fe fd1d 	bl	8004fb4 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800657a:	2002      	movs	r0, #2
 800657c:	4c79      	ldr	r4, [pc, #484]	; (8006764 <LoRaMacProcess+0x398>)
 800657e:	4b8c      	ldr	r3, [pc, #560]	; (80067b0 <LoRaMacProcess+0x3e4>)
 8006580:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8006582:	f001 fe5b 	bl	800823c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8006586:	4b7a      	ldr	r3, [pc, #488]	; (8006770 <LoRaMacProcess+0x3a4>)
 8006588:	5ce3      	ldrb	r3, [r4, r3]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <LoRaMacProcess+0x1c8>
        MacCtx.RetransmitTimeoutRetry = true;
 800658e:	2201      	movs	r2, #1
 8006590:	4b88      	ldr	r3, [pc, #544]	; (80067b4 <LoRaMacProcess+0x3e8>)
 8006592:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8006594:	2320      	movs	r3, #32
 8006596:	4a88      	ldr	r2, [pc, #544]	; (80067b8 <LoRaMacProcess+0x3ec>)
 8006598:	5ca1      	ldrb	r1, [r4, r2]
 800659a:	430b      	orrs	r3, r1
 800659c:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxError == 1 )
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	075b      	lsls	r3, r3, #29
 80065a2:	d503      	bpl.n	80065ac <LoRaMacProcess+0x1e0>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80065a4:	2106      	movs	r1, #6
 80065a6:	2005      	movs	r0, #5
 80065a8:	f7fe fd66 	bl	8005078 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 80065ac:	9b05      	ldr	r3, [sp, #20]
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	d503      	bpl.n	80065ba <LoRaMacProcess+0x1ee>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80065b2:	2104      	movs	r1, #4
 80065b4:	2003      	movs	r0, #3
 80065b6:	f7fe fd5f 	bl	8005078 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 80065ba:	f001 fc9f 	bl	8007efc <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80065be:	4d7e      	ldr	r5, [pc, #504]	; (80067b8 <LoRaMacProcess+0x3ec>)
 80065c0:	4c68      	ldr	r4, [pc, #416]	; (8006764 <LoRaMacProcess+0x398>)
 80065c2:	5d62      	ldrb	r2, [r4, r5]
 80065c4:	0693      	lsls	r3, r2, #26
 80065c6:	d56f      	bpl.n	80066a8 <LoRaMacProcess+0x2dc>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80065c8:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 80065ca:	2300      	movs	r3, #0
 80065cc:	4f7b      	ldr	r7, [pc, #492]	; (80067bc <LoRaMacProcess+0x3f0>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80065ce:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 80065d0:	55e3      	strb	r3, [r4, r7]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80065d2:	5863      	ldr	r3, [r4, r1]
 80065d4:	0618      	lsls	r0, r3, #24
 80065d6:	d502      	bpl.n	80065de <LoRaMacProcess+0x212>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80065d8:	2082      	movs	r0, #130	; 0x82
 80065da:	4383      	bics	r3, r0
 80065dc:	5063      	str	r3, [r4, r1]
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
    }
}
static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80065de:	2305      	movs	r3, #5
 80065e0:	421a      	tst	r2, r3
 80065e2:	d100      	bne.n	80065e6 <LoRaMacProcess+0x21a>
 80065e4:	e3db      	b.n	8006d9e <LoRaMacProcess+0x9d2>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80065e6:	200b      	movs	r0, #11
 80065e8:	f001 fe46 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d100      	bne.n	80065f2 <LoRaMacProcess+0x226>
 80065f0:	e3d5      	b.n	8006d9e <LoRaMacProcess+0x9d2>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80065f2:	5d63      	ldrb	r3, [r4, r5]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80065f4:	07da      	lsls	r2, r3, #31
 80065f6:	d500      	bpl.n	80065fa <LoRaMacProcess+0x22e>
 80065f8:	e3d1      	b.n	8006d9e <LoRaMacProcess+0x9d2>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80065fa:	075b      	lsls	r3, r3, #29
 80065fc:	d401      	bmi.n	8006602 <LoRaMacProcess+0x236>
 80065fe:	f000 fbea 	bl	8006dd6 <LoRaMacProcess+0xa0a>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006602:	22d0      	movs	r2, #208	; 0xd0
 8006604:	2302      	movs	r3, #2
 8006606:	0092      	lsls	r2, r2, #2
 8006608:	58a1      	ldr	r1, [r4, r2]
 800660a:	4399      	bics	r1, r3
 800660c:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800660e:	23d0      	movs	r3, #208	; 0xd0
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	58e3      	ldr	r3, [r4, r3]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d141      	bne.n	800669c <LoRaMacProcess+0x2d0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8006618:	5d66      	ldrb	r6, [r4, r5]
 800661a:	3301      	adds	r3, #1
 800661c:	0031      	movs	r1, r6
 800661e:	4019      	ands	r1, r3
 8006620:	421e      	tst	r6, r3
 8006622:	d002      	beq.n	800662a <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8006624:	0032      	movs	r2, r6
 8006626:	439a      	bics	r2, r3
 8006628:	5562      	strb	r2, [r4, r5]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800662a:	2204      	movs	r2, #4
 800662c:	5d63      	ldrb	r3, [r4, r5]
 800662e:	4213      	tst	r3, r2
 8006630:	d001      	beq.n	8006636 <LoRaMacProcess+0x26a>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8006632:	4393      	bics	r3, r2
 8006634:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 8006636:	2301      	movs	r3, #1
 8006638:	55e3      	strb	r3, [r4, r7]
        if( reqEvents.Bits.McpsReq == 1 )
 800663a:	2900      	cmp	r1, #0
 800663c:	d005      	beq.n	800664a <LoRaMacProcess+0x27e>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800663e:	23d1      	movs	r3, #209	; 0xd1
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	58e3      	ldr	r3, [r4, r3]
 8006644:	485e      	ldr	r0, [pc, #376]	; (80067c0 <LoRaMacProcess+0x3f4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800664a:	2304      	movs	r3, #4
 800664c:	421e      	tst	r6, r3
 800664e:	d00a      	beq.n	8006666 <LoRaMacProcess+0x29a>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8006650:	485c      	ldr	r0, [pc, #368]	; (80067c4 <LoRaMacProcess+0x3f8>)
 8006652:	f001 fe1d 	bl	8008290 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8006656:	f001 fe47 	bl	80082e8 <LoRaMacConfirmQueueGetCnt>
 800665a:	2800      	cmp	r0, #0
 800665c:	d003      	beq.n	8006666 <LoRaMacProcess+0x29a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800665e:	2204      	movs	r2, #4
 8006660:	5d63      	ldrb	r3, [r4, r5]
 8006662:	4313      	orrs	r3, r2
 8006664:	5563      	strb	r3, [r4, r5]
        LoRaMacClassBResumeBeaconing( );
 8006666:	f001 fc37 	bl	8007ed8 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800666a:	2220      	movs	r2, #32
 800666c:	5d63      	ldrb	r3, [r4, r5]
 800666e:	4393      	bics	r3, r2
 8006670:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8006672:	23d0      	movs	r3, #208	; 0xd0
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	58e3      	ldr	r3, [r4, r3]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <LoRaMacProcess+0x2d0>
        bool isStickyMacCommandPending = false;
 800667c:	2660      	movs	r6, #96	; 0x60
 800667e:	aa06      	add	r2, sp, #24
 8006680:	1992      	adds	r2, r2, r6
 8006682:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8006684:	a81e      	add	r0, sp, #120	; 0x78
 8006686:	f001 fd2d 	bl	80080e4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800668a:	ab06      	add	r3, sp, #24
 800668c:	199b      	adds	r3, r3, r6
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <LoRaMacProcess+0x2d0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006694:	2310      	movs	r3, #16
 8006696:	5d62      	ldrb	r2, [r4, r5]
 8006698:	4313      	orrs	r3, r2
 800669a:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 800669c:	2301      	movs	r3, #1
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800669e:	5d62      	ldrb	r2, [r4, r5]
    MacCtx.AllowRequests = requestState;
 80066a0:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80066a2:	333f      	adds	r3, #63	; 0x3f
 80066a4:	4313      	orrs	r3, r2
 80066a6:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80066a8:	2208      	movs	r2, #8
 80066aa:	5d63      	ldrb	r3, [r4, r5]
 80066ac:	4213      	tst	r3, r2
 80066ae:	d007      	beq.n	80066c0 <LoRaMacProcess+0x2f4>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80066b0:	4393      	bics	r3, r2
 80066b2:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80066b4:	23d1      	movs	r3, #209	; 0xd1
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	58e3      	ldr	r3, [r4, r3]
 80066ba:	4843      	ldr	r0, [pc, #268]	; (80067c8 <LoRaMacProcess+0x3fc>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80066c0:	2610      	movs	r6, #16
 80066c2:	5d63      	ldrb	r3, [r4, r5]
 80066c4:	4233      	tst	r3, r6
 80066c6:	d00a      	beq.n	80066de <LoRaMacProcess+0x312>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80066c8:	2306      	movs	r3, #6
 80066ca:	a81e      	add	r0, sp, #120	; 0x78
 80066cc:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 80066ce:	23d1      	movs	r3, #209	; 0xd1
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	58e3      	ldr	r3, [r4, r3]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80066d8:	5d63      	ldrb	r3, [r4, r5]
 80066da:	43b3      	bics	r3, r6
 80066dc:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80066de:	2202      	movs	r2, #2
 80066e0:	5d63      	ldrb	r3, [r4, r5]
 80066e2:	4213      	tst	r3, r2
 80066e4:	d007      	beq.n	80066f6 <LoRaMacProcess+0x32a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80066e6:	4393      	bics	r3, r2
 80066e8:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80066ea:	23d1      	movs	r3, #209	; 0xd1
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	58e3      	ldr	r3, [r4, r3]
 80066f0:	4836      	ldr	r0, [pc, #216]	; (80067cc <LoRaMacProcess+0x400>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80066f6:	4b25      	ldr	r3, [pc, #148]	; (800678c <LoRaMacProcess+0x3c0>)
 80066f8:	5ce3      	ldrb	r3, [r4, r3]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d101      	bne.n	8006702 <LoRaMacProcess+0x336>
        OpenContinuousRxCWindow( );
 80066fe:	f7fe fd29 	bl	8005154 <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8006702:	2240      	movs	r2, #64	; 0x40
 8006704:	5d63      	ldrb	r3, [r4, r5]
 8006706:	4213      	tst	r3, r2
 8006708:	d100      	bne.n	800670c <LoRaMacProcess+0x340>
 800670a:	e0a7      	b.n	800685c <LoRaMacProcess+0x490>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800670c:	4393      	bics	r3, r2
 800670e:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState != LORAMAC_IDLE )
 8006710:	23d0      	movs	r3, #208	; 0xd0
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	58e5      	ldr	r5, [r4, r3]
 8006716:	2d00      	cmp	r5, #0
 8006718:	d000      	beq.n	800671c <LoRaMacProcess+0x350>
 800671a:	e09f      	b.n	800685c <LoRaMacProcess+0x490>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800671c:	4e0f      	ldr	r6, [pc, #60]	; (800675c <LoRaMacProcess+0x390>)
 800671e:	2130      	movs	r1, #48	; 0x30
 8006720:	0030      	movs	r0, r6
 8006722:	f7fe f8d3 	bl	80048cc <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8006726:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006728:	4298      	cmp	r0, r3
 800672a:	d001      	beq.n	8006730 <LoRaMacProcess+0x364>
        nvmData->Crypto.Crc32 = crc;
 800672c:	6330      	str	r0, [r6, #48]	; 0x30
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800672e:	3501      	adds	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8006730:	2114      	movs	r1, #20
 8006732:	4827      	ldr	r0, [pc, #156]	; (80067d0 <LoRaMacProcess+0x404>)
 8006734:	f7fe f8ca 	bl	80048cc <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8006738:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800673a:	4298      	cmp	r0, r3
 800673c:	d002      	beq.n	8006744 <LoRaMacProcess+0x378>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800673e:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 8006740:	64b0      	str	r0, [r6, #72]	; 0x48
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8006742:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8006744:	21aa      	movs	r1, #170	; 0xaa
 8006746:	4823      	ldr	r0, [pc, #140]	; (80067d4 <LoRaMacProcess+0x408>)
 8006748:	0049      	lsls	r1, r1, #1
 800674a:	f7fe f8bf 	bl	80048cc <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800674e:	23d0      	movs	r3, #208	; 0xd0
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	58f2      	ldr	r2, [r6, r3]
 8006754:	e040      	b.n	80067d8 <LoRaMacProcess+0x40c>
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	200003b8 	.word	0x200003b8
 800675c:	200008d4 	.word	0x200008d4
 8006760:	0801a9e0 	.word	0x0801a9e0
 8006764:	200003bc 	.word	0x200003bc
 8006768:	20000744 	.word	0x20000744
 800676c:	2000075c 	.word	0x2000075c
 8006770:	0000041a 	.word	0x0000041a
 8006774:	200007bc 	.word	0x200007bc
 8006778:	20001060 	.word	0x20001060
 800677c:	0000041b 	.word	0x0000041b
 8006780:	0000041c 	.word	0x0000041c
 8006784:	20001050 	.word	0x20001050
 8006788:	0000042e 	.word	0x0000042e
 800678c:	0000048c 	.word	0x0000048c
 8006790:	00000431 	.word	0x00000431
 8006794:	00000422 	.word	0x00000422
 8006798:	00000425 	.word	0x00000425
 800679c:	0000042c 	.word	0x0000042c
 80067a0:	00000432 	.word	0x00000432
 80067a4:	00000434 	.word	0x00000434
 80067a8:	0000043c 	.word	0x0000043c
 80067ac:	0000047e 	.word	0x0000047e
 80067b0:	00000445 	.word	0x00000445
 80067b4:	00000419 	.word	0x00000419
 80067b8:	0000048d 	.word	0x0000048d
 80067bc:	0000048e 	.word	0x0000048e
 80067c0:	20000800 	.word	0x20000800
 80067c4:	20000814 	.word	0x20000814
 80067c8:	20000828 	.word	0x20000828
 80067cc:	200007dc 	.word	0x200007dc
 80067d0:	20000908 	.word	0x20000908
 80067d4:	20000920 	.word	0x20000920
 80067d8:	4290      	cmp	r0, r2
 80067da:	d003      	beq.n	80067e4 <LoRaMacProcess+0x418>
        nvmData->MacGroup2.Crc32 = crc;
 80067dc:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80067de:	3b9d      	subs	r3, #157	; 0x9d
 80067e0:	3bff      	subs	r3, #255	; 0xff
 80067e2:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80067e4:	21ce      	movs	r1, #206	; 0xce
 80067e6:	48c6      	ldr	r0, [pc, #792]	; (8006b00 <LoRaMacProcess+0x734>)
 80067e8:	0049      	lsls	r1, r1, #1
 80067ea:	f7fe f86f 	bl	80048cc <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80067ee:	23d0      	movs	r3, #208	; 0xd0
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	58f2      	ldr	r2, [r6, r3]
 80067f4:	4290      	cmp	r0, r2
 80067f6:	d002      	beq.n	80067fe <LoRaMacProcess+0x432>
        nvmData->SecureElement.Crc32 = crc;
 80067f8:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80067fa:	2308      	movs	r3, #8
 80067fc:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80067fe:	2110      	movs	r1, #16
 8006800:	48c0      	ldr	r0, [pc, #768]	; (8006b04 <LoRaMacProcess+0x738>)
 8006802:	f7fe f863 	bl	80048cc <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8006806:	23d5      	movs	r3, #213	; 0xd5
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	58f2      	ldr	r2, [r6, r3]
 800680c:	4290      	cmp	r0, r2
 800680e:	d002      	beq.n	8006816 <LoRaMacProcess+0x44a>
        nvmData->RegionGroup1.Crc32 = crc;
 8006810:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8006812:	2310      	movs	r3, #16
 8006814:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8006816:	21de      	movs	r1, #222	; 0xde
 8006818:	48bb      	ldr	r0, [pc, #748]	; (8006b08 <LoRaMacProcess+0x73c>)
 800681a:	0089      	lsls	r1, r1, #2
 800681c:	f7fe f856 	bl	80048cc <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8006820:	23da      	movs	r3, #218	; 0xda
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	58f2      	ldr	r2, [r6, r3]
 8006826:	4290      	cmp	r0, r2
 8006828:	d002      	beq.n	8006830 <LoRaMacProcess+0x464>
        nvmData->RegionGroup2.Crc32 = crc;
 800682a:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800682c:	2320      	movs	r3, #32
 800682e:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8006830:	2114      	movs	r1, #20
 8006832:	48b6      	ldr	r0, [pc, #728]	; (8006b0c <LoRaMacProcess+0x740>)
 8006834:	f7fe f84a 	bl	80048cc <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8006838:	23dd      	movs	r3, #221	; 0xdd
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	58f2      	ldr	r2, [r6, r3]
 800683e:	4290      	cmp	r0, r2
 8006840:	d002      	beq.n	8006848 <LoRaMacProcess+0x47c>
        nvmData->ClassB.Crc32 = crc;
 8006842:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8006844:	2340      	movs	r3, #64	; 0x40
 8006846:	431d      	orrs	r5, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8006848:	23d2      	movs	r3, #210	; 0xd2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	58e3      	ldr	r3, [r4, r3]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <LoRaMacProcess+0x490>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8006852:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <LoRaMacProcess+0x490>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8006858:	0028      	movs	r0, r5
 800685a:	4798      	blx	r3
}
 800685c:	b02b      	add	sp, #172	; 0xac
 800685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006860:	4aab      	ldr	r2, [pc, #684]	; (8006b10 <LoRaMacProcess+0x744>)
 8006862:	54a3      	strb	r3, [r4, r2]
 8006864:	e5fb      	b.n	800645e <LoRaMacProcess+0x92>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006866:	23c2      	movs	r3, #194	; 0xc2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	5ceb      	ldrb	r3, [r5, r3]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d10d      	bne.n	800688c <LoRaMacProcess+0x4c0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8006870:	f001 fb2a 	bl	8007ec8 <LoRaMacClassBIsPingExpected>
 8006874:	1e06      	subs	r6, r0, #0
 8006876:	d01b      	beq.n	80068b0 <LoRaMacProcess+0x4e4>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006878:	9806      	ldr	r0, [sp, #24]
 800687a:	f001 fb1a 	bl	8007eb2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800687e:	9806      	ldr	r0, [sp, #24]
 8006880:	f001 fb1c 	bl	8007ebc <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8006884:	2204      	movs	r2, #4
 8006886:	4ba3      	ldr	r3, [pc, #652]	; (8006b14 <LoRaMacProcess+0x748>)
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006888:	49a3      	ldr	r1, [pc, #652]	; (8006b18 <LoRaMacProcess+0x74c>)
 800688a:	545a      	strb	r2, [r3, r1]
    macHdr.Value = payload[pktHeaderLen++];
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	781b      	ldrb	r3, [r3, #0]
    switch( macHdr.Bits.MType )
 8006890:	0958      	lsrs	r0, r3, #5
 8006892:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8006894:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8006896:	4b9f      	ldr	r3, [pc, #636]	; (8006b14 <LoRaMacProcess+0x748>)
 8006898:	2806      	cmp	r0, #6
 800689a:	d900      	bls.n	800689e <LoRaMacProcess+0x4d2>
 800689c:	e26a      	b.n	8006d74 <LoRaMacProcess+0x9a8>
 800689e:	f7f9 fc59 	bl	8000154 <__gnu_thumb1_case_uhi>
 80068a2:	0014      	.short	0x0014
 80068a4:	00a10269 	.word	0x00a10269
 80068a8:	009d0269 	.word	0x009d0269
 80068ac:	02580269 	.word	0x02580269
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80068b0:	f001 fb0c 	bl	8007ecc <LoRaMacClassBIsMulticastExpected>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d0e9      	beq.n	800688c <LoRaMacProcess+0x4c0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80068b8:	0030      	movs	r0, r6
 80068ba:	f001 fafb 	bl	8007eb4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80068be:	0030      	movs	r0, r6
 80068c0:	f001 fafd 	bl	8007ebe <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80068c4:	2205      	movs	r2, #5
 80068c6:	4b93      	ldr	r3, [pc, #588]	; (8006b14 <LoRaMacProcess+0x748>)
 80068c8:	e7de      	b.n	8006888 <LoRaMacProcess+0x4bc>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80068ca:	2f10      	cmp	r7, #16
 80068cc:	d806      	bhi.n	80068dc <LoRaMacProcess+0x510>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80068ce:	2101      	movs	r1, #1
 80068d0:	4a90      	ldr	r2, [pc, #576]	; (8006b14 <LoRaMacProcess+0x748>)
 80068d2:	4b92      	ldr	r3, [pc, #584]	; (8006b1c <LoRaMacProcess+0x750>)
 80068d4:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 80068d6:	f7fe fbb1 	bl	800503c <PrepareRxDoneAbort>
                return;
 80068da:	e63f      	b.n	800655c <LoRaMacProcess+0x190>
            macMsgJoinAccept.Buffer = payload;
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	ae14      	add	r6, sp, #80	; 0x50
 80068e0:	9314      	str	r3, [sp, #80]	; 0x50
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80068e2:	23ce      	movs	r3, #206	; 0xce
            macMsgJoinAccept.BufSize = size;
 80068e4:	b2ff      	uxtb	r7, r7
 80068e6:	7137      	strb	r7, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	5ceb      	ldrb	r3, [r5, r3]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1ee      	bne.n	80068ce <LoRaMacProcess+0x502>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80068f0:	f004 fe08 	bl	800b504 <SecureElementGetJoinEui>
 80068f4:	0032      	movs	r2, r6
 80068f6:	0001      	movs	r1, r0
 80068f8:	20ff      	movs	r0, #255	; 0xff
 80068fa:	f001 ffc3 	bl	8008884 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80068fe:	2800      	cmp	r0, #0
 8006900:	d164      	bne.n	80069cc <LoRaMacProcess+0x600>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8006902:	002a      	movs	r2, r5
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8006904:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8006906:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8006908:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800690a:	0409      	lsls	r1, r1, #16
 800690c:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800690e:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8006910:	32cc      	adds	r2, #204	; 0xcc
 8006912:	430b      	orrs	r3, r1
 8006914:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8006916:	002b      	movs	r3, r5
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8006918:	0029      	movs	r1, r5
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800691a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800691c:	33d0      	adds	r3, #208	; 0xd0
 800691e:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8006920:	7c33      	ldrb	r3, [r6, #16]
 8006922:	316d      	adds	r1, #109	; 0x6d
 8006924:	065a      	lsls	r2, r3, #25
 8006926:	0f52      	lsrs	r2, r2, #29
 8006928:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800692a:	002a      	movs	r2, r5
 800692c:	071b      	lsls	r3, r3, #28
 800692e:	0f1b      	lsrs	r3, r3, #28
 8006930:	3274      	adds	r2, #116	; 0x74
 8006932:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8006934:	002a      	movs	r2, r5
 8006936:	327c      	adds	r2, #124	; 0x7c
 8006938:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800693a:	7c73      	ldrb	r3, [r6, #17]
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800693c:	2b00      	cmp	r3, #0
 800693e:	d043      	beq.n	80069c8 <LoRaMacProcess+0x5fc>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8006940:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8006942:	23fa      	movs	r3, #250	; 0xfa
 8006944:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800694a:	22fa      	movs	r2, #250	; 0xfa
 800694c:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800694e:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006950:	189b      	adds	r3, r3, r2
 8006952:	662b      	str	r3, [r5, #96]	; 0x60
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8006954:	23cd      	movs	r3, #205	; 0xcd
 8006956:	2600      	movs	r6, #0
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	54ee      	strb	r6, [r5, r3]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800695c:	3b51      	subs	r3, #81	; 0x51
 800695e:	aa06      	add	r2, sp, #24
 8006960:	3bff      	subs	r3, #255	; 0xff
 8006962:	189b      	adds	r3, r3, r2
 8006964:	9312      	str	r3, [sp, #72]	; 0x48
                applyCFList.Size = size - 17;
 8006966:	0013      	movs	r3, r2
 8006968:	2234      	movs	r2, #52	; 0x34
                applyCFList.JoinChannel = MacCtx.Channel;
 800696a:	212c      	movs	r1, #44	; 0x2c
                applyCFList.Size = size - 17;
 800696c:	189b      	adds	r3, r3, r2
 800696e:	3f11      	subs	r7, #17
 8006970:	701f      	strb	r7, [r3, #0]
                applyCFList.JoinChannel = MacCtx.Channel;
 8006972:	4b6b      	ldr	r3, [pc, #428]	; (8006b20 <LoRaMacProcess+0x754>)
 8006974:	aa06      	add	r2, sp, #24
 8006976:	5ce3      	ldrb	r3, [r4, r3]
 8006978:	1852      	adds	r2, r2, r1
 800697a:	7013      	strb	r3, [r2, #0]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800697c:	002b      	movs	r3, r5
 800697e:	334c      	adds	r3, #76	; 0x4c
 8006980:	7818      	ldrb	r0, [r3, #0]
 8006982:	a911      	add	r1, sp, #68	; 0x44
 8006984:	f002 f990 	bl	8008ca8 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006988:	23ce      	movs	r3, #206	; 0xce
 800698a:	2202      	movs	r2, #2
 800698c:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800698e:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006990:	54ea      	strb	r2, [r5, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8006992:	f001 fc71 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8006996:	42b0      	cmp	r0, r6
 8006998:	d003      	beq.n	80069a2 <LoRaMacProcess+0x5d6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800699a:	2101      	movs	r1, #1
 800699c:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800699e:	f001 fc27 	bl	80081f0 <LoRaMacConfirmQueueSetStatus>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80069a2:	4c5c      	ldr	r4, [pc, #368]	; (8006b14 <LoRaMacProcess+0x748>)
 80069a4:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <LoRaMacProcess+0x74c>)
 80069a6:	5ce3      	ldrb	r3, [r4, r3]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d900      	bls.n	80069ae <LoRaMacProcess+0x5e2>
 80069ac:	e1f1      	b.n	8006d92 <LoRaMacProcess+0x9c6>
        if( MacCtx.NodeAckRequested == true )
 80069ae:	4b5d      	ldr	r3, [pc, #372]	; (8006b24 <LoRaMacProcess+0x758>)
 80069b0:	5ce3      	ldrb	r3, [r4, r3]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d000      	beq.n	80069b8 <LoRaMacProcess+0x5ec>
 80069b6:	e1e3      	b.n	8006d80 <LoRaMacProcess+0x9b4>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80069b8:	2320      	movs	r3, #32
 80069ba:	4a5b      	ldr	r2, [pc, #364]	; (8006b28 <LoRaMacProcess+0x75c>)
 80069bc:	5ca1      	ldrb	r1, [r4, r2]
 80069be:	430b      	orrs	r3, r1
 80069c0:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 80069c2:	f7fe faf7 	bl	8004fb4 <UpdateRxSlotIdleState>
 80069c6:	e5c9      	b.n	800655c <LoRaMacProcess+0x190>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e7b9      	b.n	8006940 <LoRaMacProcess+0x574>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80069cc:	2001      	movs	r0, #1
 80069ce:	f001 fc53 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d0e5      	beq.n	80069a2 <LoRaMacProcess+0x5d6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80069d6:	2101      	movs	r1, #1
 80069d8:	2007      	movs	r0, #7
 80069da:	e7e0      	b.n	800699e <LoRaMacProcess+0x5d2>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80069dc:	2284      	movs	r2, #132	; 0x84
 80069de:	2101      	movs	r1, #1
 80069e0:	00d2      	lsls	r2, r2, #3
 80069e2:	5499      	strb	r1, [r3, r2]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80069e4:	4c51      	ldr	r4, [pc, #324]	; (8006b2c <LoRaMacProcess+0x760>)
 80069e6:	a90d      	add	r1, sp, #52	; 0x34
 80069e8:	0023      	movs	r3, r4
 80069ea:	3381      	adds	r3, #129	; 0x81
 80069ec:	781b      	ldrb	r3, [r3, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80069ee:	4a49      	ldr	r2, [pc, #292]	; (8006b14 <LoRaMacProcess+0x748>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80069f0:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80069f2:	4b4f      	ldr	r3, [pc, #316]	; (8006b30 <LoRaMacProcess+0x764>)
 80069f4:	5cd3      	ldrb	r3, [r2, r3]
 80069f6:	704b      	strb	r3, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80069f8:	230d      	movs	r3, #13
 80069fa:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80069fc:	0023      	movs	r3, r4
 80069fe:	334c      	adds	r3, #76	; 0x4c
 8006a00:	7818      	ldrb	r0, [r3, #0]
 8006a02:	f002 f913 	bl	8008c2c <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8006a06:	003a      	movs	r2, r7
 8006a08:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006a0a:	900b      	str	r0, [sp, #44]	; 0x2c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8006a0c:	1c13      	adds	r3, r2, #0
 8006a0e:	0412      	lsls	r2, r2, #16
 8006a10:	d500      	bpl.n	8006a14 <LoRaMacProcess+0x648>
 8006a12:	2300      	movs	r3, #0
 8006a14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	b212      	sxth	r2, r2
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	dd00      	ble.n	8006a20 <LoRaMacProcess+0x654>
 8006a1e:	e756      	b.n	80068ce <LoRaMacProcess+0x502>
 8006a20:	2f0b      	cmp	r7, #11
 8006a22:	d800      	bhi.n	8006a26 <LoRaMacProcess+0x65a>
 8006a24:	e753      	b.n	80068ce <LoRaMacProcess+0x502>
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8006a26:	22ff      	movs	r2, #255	; 0xff
            macMsgData.Buffer = payload;
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	ad1e      	add	r5, sp, #120	; 0x78
 8006a2c:	931e      	str	r3, [sp, #120]	; 0x78
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8006a2e:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <LoRaMacProcess+0x768>)
            macMsgData.BufSize = size;
 8006a30:	712f      	strb	r7, [r5, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8006a32:	626b      	str	r3, [r5, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8006a34:	ab28      	add	r3, sp, #160	; 0xa0
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8006a36:	0028      	movs	r0, r5
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8006a38:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8006a3a:	f001 ffef 	bl	8008a1c <LoRaMacParserData>
 8006a3e:	1e07      	subs	r7, r0, #0
 8006a40:	d000      	beq.n	8006a44 <LoRaMacProcess+0x678>
 8006a42:	e744      	b.n	80068ce <LoRaMacProcess+0x502>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006a44:	23c2      	movs	r3, #194	; 0xc2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	5ce3      	ldrb	r3, [r4, r3]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d113      	bne.n	8006a76 <LoRaMacProcess+0x6aa>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8006a4e:	f001 fa3b 	bl	8007ec8 <LoRaMacClassBIsPingExpected>
 8006a52:	1e06      	subs	r6, r0, #0
 8006a54:	d047      	beq.n	8006ae6 <LoRaMacProcess+0x71a>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006a56:	0038      	movs	r0, r7
 8006a58:	f001 fa2b 	bl	8007eb2 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8006a5c:	0038      	movs	r0, r7
 8006a5e:	f001 fa2d 	bl	8007ebc <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8006a62:	2204      	movs	r2, #4
 8006a64:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <LoRaMacProcess+0x748>)
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006a66:	492c      	ldr	r1, [pc, #176]	; (8006b18 <LoRaMacProcess+0x74c>)
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006a68:	68a8      	ldr	r0, [r5, #8]
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006a6a:	545a      	strb	r2, [r3, r1]
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006a6c:	7b29      	ldrb	r1, [r5, #12]
 8006a6e:	06c9      	lsls	r1, r1, #27
 8006a70:	0fc9      	lsrs	r1, r1, #31
 8006a72:	f001 fa42 	bl	8007efa <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8006a76:	2387      	movs	r3, #135	; 0x87
 8006a78:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006a7a:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <LoRaMacProcess+0x748>)
 8006a7c:	af1e      	add	r7, sp, #120	; 0x78
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	50d1      	str	r1, [r2, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8006a82:	0038      	movs	r0, r7
 8006a84:	a911      	add	r1, sp, #68	; 0x44
 8006a86:	f7ff fc77 	bl	8006378 <DetermineFrameType>
 8006a8a:	1e06      	subs	r6, r0, #0
 8006a8c:	d000      	beq.n	8006a90 <LoRaMacProcess+0x6c4>
 8006a8e:	e71e      	b.n	80068ce <LoRaMacProcess+0x502>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8006a90:	0005      	movs	r5, r0
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4b28      	ldr	r3, [pc, #160]	; (8006b38 <LoRaMacProcess+0x76c>)
            downLinkCounter = 0;
 8006a96:	900c      	str	r0, [sp, #48]	; 0x30
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	6812      	ldr	r2, [r2, #0]
 8006a9c:	428a      	cmp	r2, r1
 8006a9e:	d14d      	bne.n	8006b3c <LoRaMacProcess+0x770>
 8006aa0:	7818      	ldrb	r0, [r3, #0]
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d04a      	beq.n	8006b3c <LoRaMacProcess+0x770>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8006aa6:	232c      	movs	r3, #44	; 0x2c
 8006aa8:	436b      	muls	r3, r5
 8006aaa:	18e3      	adds	r3, r4, r3
 8006aac:	0019      	movs	r1, r3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8006aae:	33f4      	adds	r3, #244	; 0xf4
 8006ab0:	681b      	ldr	r3, [r3, #0]
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8006ab2:	31d7      	adds	r1, #215	; 0xd7
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8006ab4:	681b      	ldr	r3, [r3, #0]
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8006ab6:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8006ab8:	930c      	str	r3, [sp, #48]	; 0x30
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8006aba:	23c2      	movs	r3, #194	; 0xc2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	5ce3      	ldrb	r3, [r4, r3]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d103      	bne.n	8006acc <LoRaMacProcess+0x700>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8006ac4:	2103      	movs	r1, #3
 8006ac6:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <LoRaMacProcess+0x748>)
 8006ac8:	4813      	ldr	r0, [pc, #76]	; (8006b18 <LoRaMacProcess+0x74c>)
 8006aca:	5419      	strb	r1, [r3, r0]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8006acc:	ab11      	add	r3, sp, #68	; 0x44
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d000      	beq.n	8006ad6 <LoRaMacProcess+0x70a>
 8006ad4:	e6fb      	b.n	80068ce <LoRaMacProcess+0x502>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8006ad6:	2360      	movs	r3, #96	; 0x60
 8006ad8:	7b39      	ldrb	r1, [r7, #12]
 8006ada:	4219      	tst	r1, r3
 8006adc:	d000      	beq.n	8006ae0 <LoRaMacProcess+0x714>
 8006ade:	e6f6      	b.n	80068ce <LoRaMacProcess+0x502>
 8006ae0:	2601      	movs	r6, #1
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8006ae2:	9207      	str	r2, [sp, #28]
 8006ae4:	e02e      	b.n	8006b44 <LoRaMacProcess+0x778>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8006ae6:	f001 f9f1 	bl	8007ecc <LoRaMacClassBIsMulticastExpected>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d0c3      	beq.n	8006a76 <LoRaMacProcess+0x6aa>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006aee:	0030      	movs	r0, r6
 8006af0:	f001 f9e0 	bl	8007eb4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8006af4:	0030      	movs	r0, r6
 8006af6:	f001 f9e2 	bl	8007ebe <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006afa:	2205      	movs	r2, #5
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <LoRaMacProcess+0x748>)
 8006afe:	e7b2      	b.n	8006a66 <LoRaMacProcess+0x69a>
 8006b00:	20000a78 	.word	0x20000a78
 8006b04:	20000c18 	.word	0x20000c18
 8006b08:	20000c2c 	.word	0x20000c2c
 8006b0c:	20000fa8 	.word	0x20000fa8
 8006b10:	00000445 	.word	0x00000445
 8006b14:	200003bc 	.word	0x200003bc
 8006b18:	00000431 	.word	0x00000431
 8006b1c:	00000421 	.word	0x00000421
 8006b20:	0000041b 	.word	0x0000041b
 8006b24:	0000041a 	.word	0x0000041a
 8006b28:	0000048d 	.word	0x0000048d
 8006b2c:	200008d4 	.word	0x200008d4
 8006b30:	00000424 	.word	0x00000424
 8006b34:	200005f4 	.word	0x200005f4
 8006b38:	200009aa 	.word	0x200009aa
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	332c      	adds	r3, #44	; 0x2c
 8006b40:	2d04      	cmp	r5, #4
 8006b42:	d1a9      	bne.n	8006a98 <LoRaMacProcess+0x6cc>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8006b44:	22cd      	movs	r2, #205	; 0xcd
 8006b46:	49c8      	ldr	r1, [pc, #800]	; (8006e68 <LoRaMacProcess+0xa9c>)
 8006b48:	ab11      	add	r3, sp, #68	; 0x44
 8006b4a:	0052      	lsls	r2, r2, #1
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	5c8f      	ldrb	r7, [r1, r2]
    switch( addrID )
 8006b50:	2d04      	cmp	r5, #4
 8006b52:	d811      	bhi.n	8006b78 <LoRaMacProcess+0x7ac>
 8006b54:	0028      	movs	r0, r5
 8006b56:	f7f9 fae9 	bl	800012c <__gnu_thumb1_case_uqi>
 8006b5a:	0323      	.short	0x0323
 8006b5c:	211f      	.short	0x211f
 8006b5e:	17          	.byte	0x17
 8006b5f:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
 8006b60:	2705      	movs	r7, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8006b62:	ac1e      	add	r4, sp, #120	; 0x78
 8006b64:	0038      	movs	r0, r7
 8006b66:	89e1      	ldrh	r1, [r4, #14]
 8006b68:	aa0c      	add	r2, sp, #48	; 0x30
 8006b6a:	f001 fd19 	bl	80085a0 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d01a      	beq.n	8006ba8 <LoRaMacProcess+0x7dc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8006b72:	2308      	movs	r3, #8
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8006b74:	2807      	cmp	r0, #7
 8006b76:	d000      	beq.n	8006b7a <LoRaMacProcess+0x7ae>
    switch( addrID )
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4abc      	ldr	r2, [pc, #752]	; (8006e6c <LoRaMacProcess+0xaa0>)
 8006b7c:	49bc      	ldr	r1, [pc, #752]	; (8006e70 <LoRaMacProcess+0xaa4>)
 8006b7e:	5453      	strb	r3, [r2, r1]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006b80:	4bbc      	ldr	r3, [pc, #752]	; (8006e74 <LoRaMacProcess+0xaa8>)
 8006b82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b84:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8006b86:	e6a6      	b.n	80068d6 <LoRaMacProcess+0x50a>
            if( lrWanVersion.Fields.Minor == 1 )
 8006b88:	2f01      	cmp	r7, #1
 8006b8a:	d10b      	bne.n	8006ba4 <LoRaMacProcess+0x7d8>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <LoRaMacProcess+0x7c8>
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d1e6      	bne.n	8006b62 <LoRaMacProcess+0x796>
                    *fCntID = A_FCNT_DOWN;
 8006b94:	2702      	movs	r7, #2
 8006b96:	e7e4      	b.n	8006b62 <LoRaMacProcess+0x796>
            *fCntID = MC_FCNT_DOWN_2;
 8006b98:	2706      	movs	r7, #6
            break;
 8006b9a:	e7e2      	b.n	8006b62 <LoRaMacProcess+0x796>
            *fCntID = MC_FCNT_DOWN_3;
 8006b9c:	2707      	movs	r7, #7
            break;
 8006b9e:	e7e0      	b.n	8006b62 <LoRaMacProcess+0x796>
    switch( addrID )
 8006ba0:	2704      	movs	r7, #4
 8006ba2:	e7de      	b.n	8006b62 <LoRaMacProcess+0x796>
                *fCntID = FCNT_DOWN;
 8006ba4:	2703      	movs	r7, #3
 8006ba6:	e7dc      	b.n	8006b62 <LoRaMacProcess+0x796>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8006ba8:	003a      	movs	r2, r7
 8006baa:	0028      	movs	r0, r5
 8006bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bae:	9907      	ldr	r1, [sp, #28]
 8006bb0:	9400      	str	r4, [sp, #0]
 8006bb2:	f001 fdbd 	bl	8008730 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8006bb6:	4fad      	ldr	r7, [pc, #692]	; (8006e6c <LoRaMacProcess+0xaa0>)
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d006      	beq.n	8006bca <LoRaMacProcess+0x7fe>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8006bbc:	3802      	subs	r0, #2
 8006bbe:	1e43      	subs	r3, r0, #1
 8006bc0:	4198      	sbcs	r0, r3
 8006bc2:	4bab      	ldr	r3, [pc, #684]	; (8006e70 <LoRaMacProcess+0xaa4>)
 8006bc4:	300a      	adds	r0, #10
 8006bc6:	54f8      	strb	r0, [r7, r3]
 8006bc8:	e685      	b.n	80068d6 <LoRaMacProcess+0x50a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006bca:	4ba9      	ldr	r3, [pc, #676]	; (8006e70 <LoRaMacProcess+0xaa4>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8006bcc:	49aa      	ldr	r1, [pc, #680]	; (8006e78 <LoRaMacProcess+0xaac>)
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006bce:	54f8      	strb	r0, [r7, r3]
            MacCtx.McpsIndication.Multicast = multicast;
 8006bd0:	4baa      	ldr	r3, [pc, #680]	; (8006e7c <LoRaMacProcess+0xab0>)
 8006bd2:	54fe      	strb	r6, [r7, r3]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8006bd4:	7b23      	ldrb	r3, [r4, #12]
 8006bd6:	06da      	lsls	r2, r3, #27
 8006bd8:	0fd2      	lsrs	r2, r2, #31
 8006bda:	547a      	strb	r2, [r7, r1]
            MacCtx.McpsIndication.Buffer = NULL;
 8006bdc:	2285      	movs	r2, #133	; 0x85
 8006bde:	00d2      	lsls	r2, r2, #3
 8006be0:	50b8      	str	r0, [r7, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 8006be2:	4aa7      	ldr	r2, [pc, #668]	; (8006e80 <LoRaMacProcess+0xab4>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006be4:	990c      	ldr	r1, [sp, #48]	; 0x30
            MacCtx.McpsIndication.BufferSize = 0;
 8006be6:	54b8      	strb	r0, [r7, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006be8:	4aa2      	ldr	r2, [pc, #648]	; (8006e74 <LoRaMacProcess+0xaa8>)
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006bea:	069b      	lsls	r3, r3, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006bec:	50b9      	str	r1, [r7, r2]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006bee:	4aa5      	ldr	r2, [pc, #660]	; (8006e84 <LoRaMacProcess+0xab8>)
 8006bf0:	0fdb      	lsrs	r3, r3, #31
 8006bf2:	54bb      	strb	r3, [r7, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006bf4:	4aa4      	ldr	r2, [pc, #656]	; (8006e88 <LoRaMacProcess+0xabc>)
 8006bf6:	54b8      	strb	r0, [r7, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006bf8:	3203      	adds	r2, #3
 8006bfa:	54bb      	strb	r3, [r7, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006bfc:	4ba3      	ldr	r3, [pc, #652]	; (8006e8c <LoRaMacProcess+0xac0>)
 8006bfe:	5cfa      	ldrb	r2, [r7, r3]
 8006c00:	2a01      	cmp	r2, #1
 8006c02:	d805      	bhi.n	8006c10 <LoRaMacProcess+0x844>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8006c04:	4b98      	ldr	r3, [pc, #608]	; (8006e68 <LoRaMacProcess+0xa9c>)
                Nvm.MacGroup2.DownlinkReceived = true;
 8006c06:	21c5      	movs	r1, #197	; 0xc5
                Nvm.MacGroup1.AdrAckCounter = 0;
 8006c08:	6358      	str	r0, [r3, #52]	; 0x34
                Nvm.MacGroup2.DownlinkReceived = true;
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	0049      	lsls	r1, r1, #1
 8006c0e:	5458      	strb	r0, [r3, r1]
            if( multicast == 1 )
 8006c10:	4c96      	ldr	r4, [pc, #600]	; (8006e6c <LoRaMacProcess+0xaa0>)
 8006c12:	ad1e      	add	r5, sp, #120	; 0x78
 8006c14:	2e01      	cmp	r6, #1
 8006c16:	d104      	bne.n	8006c22 <LoRaMacProcess+0x856>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8006c18:	2384      	movs	r3, #132	; 0x84
 8006c1a:	2102      	movs	r1, #2
 8006c1c:	00db      	lsls	r3, r3, #3
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006c1e:	54e1      	strb	r1, [r4, r3]
 8006c20:	e01e      	b.n	8006c60 <LoRaMacProcess+0x894>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8006c22:	231f      	movs	r3, #31
 8006c24:	9906      	ldr	r1, [sp, #24]
 8006c26:	4399      	bics	r1, r3
 8006c28:	4b8f      	ldr	r3, [pc, #572]	; (8006e68 <LoRaMacProcess+0xa9c>)
 8006c2a:	29a0      	cmp	r1, #160	; 0xa0
 8006c2c:	d12c      	bne.n	8006c88 <LoRaMacProcess+0x8bc>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8006c2e:	0019      	movs	r1, r3
 8006c30:	2001      	movs	r0, #1
 8006c32:	3146      	adds	r1, #70	; 0x46
 8006c34:	7008      	strb	r0, [r1, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8006c36:	21cd      	movs	r1, #205	; 0xcd
 8006c38:	0049      	lsls	r1, r1, #1
 8006c3a:	5c59      	ldrb	r1, [r3, r1]
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d101      	bne.n	8006c44 <LoRaMacProcess+0x878>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8006c40:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006c42:	6419      	str	r1, [r3, #64]	; 0x40
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8006c44:	2384      	movs	r3, #132	; 0x84
 8006c46:	2101      	movs	r1, #1
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	54e1      	strb	r1, [r4, r3]
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8006c4c:	428a      	cmp	r2, r1
 8006c4e:	d907      	bls.n	8006c60 <LoRaMacProcess+0x894>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 8006c50:	21fa      	movs	r1, #250	; 0xfa
 8006c52:	3320      	adds	r3, #32
 8006c54:	0149      	lsls	r1, r1, #5
 8006c56:	50e1      	str	r1, [r4, r3]
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8006c58:	4b8d      	ldr	r3, [pc, #564]	; (8006e90 <LoRaMacProcess+0xac4>)
 8006c5a:	6819      	ldr	r1, [r3, #0]
 8006c5c:	4b8d      	ldr	r3, [pc, #564]	; (8006e94 <LoRaMacProcess+0xac8>)
 8006c5e:	50e1      	str	r1, [r4, r3]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8006c60:	4b8d      	ldr	r3, [pc, #564]	; (8006e98 <LoRaMacProcess+0xacc>)
 8006c62:	5ce1      	ldrb	r1, [r4, r3]
 8006c64:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8006c66:	2a01      	cmp	r2, #1
 8006c68:	d805      	bhi.n	8006c76 <LoRaMacProcess+0x8aa>
        if( request == MCPS_CONFIRMED )
 8006c6a:	2901      	cmp	r1, #1
 8006c6c:	d101      	bne.n	8006c72 <LoRaMacProcess+0x8a6>
            if( fCtrl.Bits.Ack == 1 )
 8006c6e:	069b      	lsls	r3, r3, #26
 8006c70:	d501      	bpl.n	8006c76 <LoRaMacProcess+0x8aa>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8006c72:	f001 f9df 	bl	8008034 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8006c76:	ab11      	add	r3, sp, #68	; 0x44
 8006c78:	7818      	ldrb	r0, [r3, #0]
 8006c7a:	2803      	cmp	r0, #3
 8006c7c:	d863      	bhi.n	8006d46 <LoRaMacProcess+0x97a>
 8006c7e:	4e87      	ldr	r6, [pc, #540]	; (8006e9c <LoRaMacProcess+0xad0>)
 8006c80:	f7f9 fa54 	bl	800012c <__gnu_thumb1_case_uqi>
 8006c84:	50493a08 	.word	0x50493a08
                    Nvm.MacGroup1.SrvAckRequested = false;
 8006c88:	2100      	movs	r1, #0
 8006c8a:	3346      	adds	r3, #70	; 0x46
 8006c8c:	7019      	strb	r1, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006c8e:	2384      	movs	r3, #132	; 0x84
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	e7c4      	b.n	8006c1e <LoRaMacProcess+0x852>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8006c94:	7b29      	ldrb	r1, [r5, #12]
 8006c96:	4b7d      	ldr	r3, [pc, #500]	; (8006e8c <LoRaMacProcess+0xac0>)
 8006c98:	0709      	lsls	r1, r1, #28
 8006c9a:	5cfb      	ldrb	r3, [r7, r3]
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	0f09      	lsrs	r1, r1, #28
 8006ca0:	a822      	add	r0, sp, #136	; 0x88
 8006ca2:	f7fe fcbb 	bl	800561c <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006ca6:	2361      	movs	r3, #97	; 0x61
 8006ca8:	aa06      	add	r2, sp, #24
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	7fdb      	ldrb	r3, [r3, #31]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006cae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006cb0:	55bb      	strb	r3, [r7, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006cb2:	2385      	movs	r3, #133	; 0x85
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	50fa      	str	r2, [r7, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8006cb8:	ab28      	add	r3, sp, #160	; 0xa0
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4a70      	ldr	r2, [pc, #448]	; (8006e80 <LoRaMacProcess+0xab4>)
 8006cbe:	54bb      	strb	r3, [r7, r2]
                    MacCtx.McpsIndication.RxData = true;
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4b77      	ldr	r3, [pc, #476]	; (8006ea0 <LoRaMacProcess+0xad4>)
 8006cc4:	54fa      	strb	r2, [r7, r3]
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8006cc6:	2361      	movs	r3, #97	; 0x61
 8006cc8:	aa06      	add	r2, sp, #24
 8006cca:	189b      	adds	r3, r3, r2
 8006ccc:	7fda      	ldrb	r2, [r3, #31]
 8006cce:	2ae0      	cmp	r2, #224	; 0xe0
 8006cd0:	d10c      	bne.n	8006cec <LoRaMacProcess+0x920>
 8006cd2:	238c      	movs	r3, #140	; 0x8c
 8006cd4:	4964      	ldr	r1, [pc, #400]	; (8006e68 <LoRaMacProcess+0xa9c>)
 8006cd6:	33ff      	adds	r3, #255	; 0xff
 8006cd8:	5ccb      	ldrb	r3, [r1, r3]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <LoRaMacProcess+0x920>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006cde:	496f      	ldr	r1, [pc, #444]	; (8006e9c <LoRaMacProcess+0xad0>)
 8006ce0:	5462      	strb	r2, [r4, r1]
                MacCtx.McpsIndication.Buffer = NULL;
 8006ce2:	2285      	movs	r2, #133	; 0x85
 8006ce4:	00d2      	lsls	r2, r2, #3
 8006ce6:	50a3      	str	r3, [r4, r2]
                MacCtx.McpsIndication.BufferSize = 0;
 8006ce8:	4a65      	ldr	r2, [pc, #404]	; (8006e80 <LoRaMacProcess+0xab4>)
 8006cea:	52a3      	strh	r3, [r4, r2]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8006cec:	2302      	movs	r3, #2
 8006cee:	4a6d      	ldr	r2, [pc, #436]	; (8006ea4 <LoRaMacProcess+0xad8>)
 8006cf0:	5ca1      	ldrb	r1, [r4, r2]
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	54a3      	strb	r3, [r4, r2]
            break;
 8006cf6:	e654      	b.n	80069a2 <LoRaMacProcess+0x5d6>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8006cf8:	4b64      	ldr	r3, [pc, #400]	; (8006e8c <LoRaMacProcess+0xac0>)
 8006cfa:	7b29      	ldrb	r1, [r5, #12]
 8006cfc:	5ce3      	ldrb	r3, [r4, r3]
 8006cfe:	0709      	lsls	r1, r1, #28
 8006d00:	9a04      	ldr	r2, [sp, #16]
 8006d02:	0f09      	lsrs	r1, r1, #28
 8006d04:	a822      	add	r0, sp, #136	; 0x88
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8006d06:	f7fe fc89 	bl	800561c <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	ab06      	add	r3, sp, #24
 8006d0e:	189b      	adds	r3, r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	55a3      	strb	r3, [r4, r6]
                    break;
 8006d14:	e7d7      	b.n	8006cc6 <LoRaMacProcess+0x8fa>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8006d16:	4b5d      	ldr	r3, [pc, #372]	; (8006e8c <LoRaMacProcess+0xac0>)
 8006d18:	aa28      	add	r2, sp, #160	; 0xa0
 8006d1a:	7811      	ldrb	r1, [r2, #0]
 8006d1c:	5ce3      	ldrb	r3, [r4, r3]
 8006d1e:	9a04      	ldr	r2, [sp, #16]
 8006d20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006d22:	e7f0      	b.n	8006d06 <LoRaMacProcess+0x93a>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006d24:	2280      	movs	r2, #128	; 0x80
 8006d26:	ab06      	add	r3, sp, #24
 8006d28:	189b      	adds	r3, r3, r2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006d2c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006d2e:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006d30:	2385      	movs	r3, #133	; 0x85
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8006d36:	ab28      	add	r3, sp, #160	; 0xa0
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	4a51      	ldr	r2, [pc, #324]	; (8006e80 <LoRaMacProcess+0xab4>)
 8006d3c:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.RxData = true;
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4b57      	ldr	r3, [pc, #348]	; (8006ea0 <LoRaMacProcess+0xad4>)
 8006d42:	54e2      	strb	r2, [r4, r3]
                    break;
 8006d44:	e7bf      	b.n	8006cc6 <LoRaMacProcess+0x8fa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	4a49      	ldr	r2, [pc, #292]	; (8006e70 <LoRaMacProcess+0xaa4>)
 8006d4a:	54a3      	strb	r3, [r4, r2]
                    PrepareRxDoneAbort( );
 8006d4c:	f7fe f976 	bl	800503c <PrepareRxDoneAbort>
                    break;
 8006d50:	e7b9      	b.n	8006cc6 <LoRaMacProcess+0x8fa>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8006d52:	4e55      	ldr	r6, [pc, #340]	; (8006ea8 <LoRaMacProcess+0xadc>)
 8006d54:	9903      	ldr	r1, [sp, #12]
 8006d56:	1e7d      	subs	r5, r7, #1
 8006d58:	b2aa      	uxth	r2, r5
 8006d5a:	0030      	movs	r0, r6
 8006d5c:	3101      	adds	r1, #1
 8006d5e:	f7fd fd9c 	bl	800489a <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8006d62:	2384      	movs	r3, #132	; 0x84
 8006d64:	2203      	movs	r2, #3
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	52e2      	strh	r2, [r4, r3]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8006d6e:	4b44      	ldr	r3, [pc, #272]	; (8006e80 <LoRaMacProcess+0xab4>)
 8006d70:	54e5      	strb	r5, [r4, r3]
 8006d72:	e7bb      	b.n	8006cec <LoRaMacProcess+0x920>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006d74:	2101      	movs	r1, #1
 8006d76:	4a3e      	ldr	r2, [pc, #248]	; (8006e70 <LoRaMacProcess+0xaa4>)
 8006d78:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 8006d7a:	f7fe f95f 	bl	800503c <PrepareRxDoneAbort>
            break;
 8006d7e:	e610      	b.n	80069a2 <LoRaMacProcess+0x5d6>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8006d80:	2389      	movs	r3, #137	; 0x89
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	5ce3      	ldrb	r3, [r4, r3]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d100      	bne.n	8006d8c <LoRaMacProcess+0x9c0>
 8006d8a:	e615      	b.n	80069b8 <LoRaMacProcess+0x5ec>
                OnRetransmitTimeoutTimerEvent( NULL );
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f7fe f937 	bl	8005000 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 8006d92:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <LoRaMacProcess+0xac0>)
 8006d94:	5ce3      	ldrb	r3, [r4, r3]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d100      	bne.n	8006d9c <LoRaMacProcess+0x9d0>
 8006d9a:	e612      	b.n	80069c2 <LoRaMacProcess+0x5f6>
 8006d9c:	e60c      	b.n	80069b8 <LoRaMacProcess+0x5ec>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8006d9e:	5d63      	ldrb	r3, [r4, r5]
 8006da0:	075b      	lsls	r3, r3, #29
 8006da2:	d518      	bpl.n	8006dd6 <LoRaMacProcess+0xa0a>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8006da4:	2001      	movs	r0, #1
 8006da6:	26d0      	movs	r6, #208	; 0xd0
 8006da8:	f001 fa66 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8006dac:	00b6      	lsls	r6, r6, #2
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d00c      	beq.n	8006dcc <LoRaMacProcess+0xa00>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8006db2:	2001      	movs	r0, #1
 8006db4:	f001 fa30 	bl	8008218 <LoRaMacConfirmQueueGetStatus>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d102      	bne.n	8006dc2 <LoRaMacProcess+0x9f6>
                MacCtx.ChannelsNbTransCounter = 0;
 8006dbc:	2383      	movs	r3, #131	; 0x83
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	59a2      	ldr	r2, [r4, r6]
 8006dc6:	439a      	bics	r2, r3
 8006dc8:	51a2      	str	r2, [r4, r6]
 8006dca:	e004      	b.n	8006dd6 <LoRaMacProcess+0xa0a>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8006dcc:	2005      	movs	r0, #5
 8006dce:	f001 fa53 	bl	8008278 <LoRaMacConfirmQueueIsCmdActive>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d1f5      	bne.n	8006dc2 <LoRaMacProcess+0x9f6>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8006dd6:	5d63      	ldrb	r3, [r4, r5]
 8006dd8:	07da      	lsls	r2, r3, #31
 8006dda:	d401      	bmi.n	8006de0 <LoRaMacProcess+0xa14>
 8006ddc:	f7ff fc17 	bl	800660e <LoRaMacProcess+0x242>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8006de0:	4a2d      	ldr	r2, [pc, #180]	; (8006e98 <LoRaMacProcess+0xacc>)
 8006de2:	5ca2      	ldrb	r2, [r4, r2]
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	d001      	beq.n	8006dec <LoRaMacProcess+0xa20>
 8006de8:	2a03      	cmp	r2, #3
 8006dea:	d11a      	bne.n	8006e22 <LoRaMacProcess+0xa56>
    if( counter >= limit )
 8006dec:	2183      	movs	r1, #131	; 0x83
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8006dee:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <LoRaMacProcess+0xa9c>)
    if( counter >= limit )
 8006df0:	00c9      	lsls	r1, r1, #3
 8006df2:	326c      	adds	r2, #108	; 0x6c
 8006df4:	5c61      	ldrb	r1, [r4, r1]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	4291      	cmp	r1, r2
 8006dfa:	d205      	bcs.n	8006e08 <LoRaMacProcess+0xa3c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006dfc:	079b      	lsls	r3, r3, #30
 8006dfe:	d527      	bpl.n	8006e50 <LoRaMacProcess+0xa84>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006e00:	4b22      	ldr	r3, [pc, #136]	; (8006e8c <LoRaMacProcess+0xac0>)
 8006e02:	5ce3      	ldrb	r3, [r4, r3]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d823      	bhi.n	8006e50 <LoRaMacProcess+0xa84>
            TimerStop( &MacCtx.TxDelayedTimer );
 8006e08:	4828      	ldr	r0, [pc, #160]	; (8006eac <LoRaMacProcess+0xae0>)
 8006e0a:	f004 fd71 	bl	800b8f0 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8006e0e:	22d0      	movs	r2, #208	; 0xd0
 8006e10:	2320      	movs	r3, #32
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	58a1      	ldr	r1, [r4, r2]
 8006e16:	4399      	bics	r1, r3
 8006e18:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8006e1a:	f7fe fee1 	bl	8005be0 <StopRetransmission.isra.0>
 8006e1e:	f7ff fbf6 	bl	800660e <LoRaMacProcess+0x242>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8006e22:	2a01      	cmp	r2, #1
 8006e24:	d114      	bne.n	8006e50 <LoRaMacProcess+0xa84>
            if( MacCtx.RetransmitTimeoutRetry == true )
 8006e26:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <LoRaMacProcess+0xae4>)
 8006e28:	5ca2      	ldrb	r2, [r4, r2]
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d101      	bne.n	8006e32 <LoRaMacProcess+0xa66>
 8006e2e:	f7ff fbee 	bl	800660e <LoRaMacProcess+0x242>
    if( counter >= limit )
 8006e32:	2183      	movs	r1, #131	; 0x83
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8006e34:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <LoRaMacProcess+0xa9c>)
    if( counter >= limit )
 8006e36:	00c9      	lsls	r1, r1, #3
 8006e38:	326c      	adds	r2, #108	; 0x6c
 8006e3a:	5c61      	ldrb	r1, [r4, r1]
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	4291      	cmp	r1, r2
 8006e40:	d2e2      	bcs.n	8006e08 <LoRaMacProcess+0xa3c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	d504      	bpl.n	8006e50 <LoRaMacProcess+0xa84>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8006e46:	2389      	movs	r3, #137	; 0x89
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	5ce3      	ldrb	r3, [r4, r3]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1db      	bne.n	8006e08 <LoRaMacProcess+0xa3c>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8006e50:	2220      	movs	r2, #32
            MacCtx.RetransmitTimeoutRetry = false;
 8006e52:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8006e54:	5d63      	ldrb	r3, [r4, r5]
 8006e56:	4393      	bics	r3, r2
 8006e58:	5563      	strb	r3, [r4, r5]
            MacCtx.RetransmitTimeoutRetry = false;
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <LoRaMacProcess+0xae4>)
 8006e5c:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8006e5e:	f7ff f985 	bl	800616c <OnTxDelayedTimerEvent>
 8006e62:	f7ff fbd4 	bl	800660e <LoRaMacProcess+0x242>
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	200008d4 	.word	0x200008d4
 8006e6c:	200003bc 	.word	0x200003bc
 8006e70:	00000421 	.word	0x00000421
 8006e74:	00000434 	.word	0x00000434
 8006e78:	00000425 	.word	0x00000425
 8006e7c:	00000422 	.word	0x00000422
 8006e80:	0000042c 	.word	0x0000042c
 8006e84:	00000432 	.word	0x00000432
 8006e88:	00000445 	.word	0x00000445
 8006e8c:	00000431 	.word	0x00000431
 8006e90:	20001050 	.word	0x20001050
 8006e94:	00000494 	.word	0x00000494
 8006e98:	00000444 	.word	0x00000444
 8006e9c:	00000423 	.word	0x00000423
 8006ea0:	0000042d 	.word	0x0000042d
 8006ea4:	0000048d 	.word	0x0000048d
 8006ea8:	200005f4 	.word	0x200005f4
 8006eac:	2000072c 	.word	0x2000072c
 8006eb0:	00000419 	.word	0x00000419

08006eb4 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8006eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb6:	b08d      	sub	sp, #52	; 0x34
 8006eb8:	0007      	movs	r7, r0
 8006eba:	0015      	movs	r5, r2
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006ebc:	2603      	movs	r6, #3
{
 8006ebe:	9101      	str	r1, [sp, #4]
    if( ( primitives == NULL ) ||
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d100      	bne.n	8006ec6 <LoRaMacInitialization+0x12>
 8006ec4:	e14e      	b.n	8007164 <LoRaMacInitialization+0x2b0>
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d100      	bne.n	8006ecc <LoRaMacInitialization+0x18>
 8006eca:	e14b      	b.n	8007164 <LoRaMacInitialization+0x2b0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8006ecc:	6803      	ldr	r3, [r0, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d100      	bne.n	8006ed4 <LoRaMacInitialization+0x20>
 8006ed2:	e147      	b.n	8007164 <LoRaMacInitialization+0x2b0>
 8006ed4:	6843      	ldr	r3, [r0, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d100      	bne.n	8006edc <LoRaMacInitialization+0x28>
 8006eda:	e143      	b.n	8007164 <LoRaMacInitialization+0x2b0>
        ( primitives->MacMcpsIndication == NULL ) ||
 8006edc:	6883      	ldr	r3, [r0, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d100      	bne.n	8006ee4 <LoRaMacInitialization+0x30>
 8006ee2:	e13f      	b.n	8007164 <LoRaMacInitialization+0x2b0>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8006ee4:	68c3      	ldr	r3, [r0, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d100      	bne.n	8006eec <LoRaMacInitialization+0x38>
 8006eea:	e13b      	b.n	8007164 <LoRaMacInitialization+0x2b0>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8006eec:	0010      	movs	r0, r2
 8006eee:	f001 fe94 	bl	8008c1a <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8006ef2:	3606      	adds	r6, #6
    if( RegionIsActive( region ) == false )
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d100      	bne.n	8006efa <LoRaMacInitialization+0x46>
 8006ef8:	e134      	b.n	8007164 <LoRaMacInitialization+0x2b0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8006efa:	0038      	movs	r0, r7
 8006efc:	f001 f930 	bl	8008160 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8006f00:	4caa      	ldr	r4, [pc, #680]	; (80071ac <LoRaMacInitialization+0x2f8>)
 8006f02:	2100      	movs	r1, #0
 8006f04:	0020      	movs	r0, r4
 8006f06:	4aaa      	ldr	r2, [pc, #680]	; (80071b0 <LoRaMacInitialization+0x2fc>)
 8006f08:	f7fd fcdc 	bl	80048c4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8006f0c:	22a3      	movs	r2, #163	; 0xa3
 8006f0e:	2100      	movs	r1, #0
 8006f10:	48a8      	ldr	r0, [pc, #672]	; (80071b4 <LoRaMacInitialization+0x300>)
 8006f12:	00d2      	lsls	r2, r2, #3
 8006f14:	f7fd fcd6 	bl	80048c4 <memset1>

    // Set non zero variables to its default value
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8006f18:	23c2      	movs	r3, #194	; 0xc2
 8006f1a:	2000      	movs	r0, #0
    Nvm.MacGroup2.Region = region;
 8006f1c:	0026      	movs	r6, r4

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8006f1e:	4aa6      	ldr	r2, [pc, #664]	; (80071b8 <LoRaMacInitialization+0x304>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	54e0      	strb	r0, [r4, r3]
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8006f24:	3314      	adds	r3, #20
 8006f26:	50e2      	str	r2, [r4, r3]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8006f28:	4ba4      	ldr	r3, [pc, #656]	; (80071bc <LoRaMacInitialization+0x308>)
    params.Type = INIT_TYPE_DEFAULTS;
 8006f2a:	a908      	add	r1, sp, #32
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8006f2c:	9308      	str	r3, [sp, #32]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8006f2e:	4ba4      	ldr	r3, [pc, #656]	; (80071c0 <LoRaMacInitialization+0x30c>)
    Nvm.MacGroup2.Region = region;
 8006f30:	364c      	adds	r6, #76	; 0x4c
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8006f32:	604b      	str	r3, [r1, #4]
    params.Bands = &RegionBands;
 8006f34:	4ba3      	ldr	r3, [pc, #652]	; (80071c4 <LoRaMacInitialization+0x310>)
    params.Type = INIT_TYPE_DEFAULTS;
 8006f36:	7308      	strb	r0, [r1, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006f38:	0028      	movs	r0, r5
    Nvm.MacGroup2.Region = region;
 8006f3a:	7035      	strb	r5, [r6, #0]
    params.Bands = &RegionBands;
 8006f3c:	608b      	str	r3, [r1, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006f3e:	f001 fe95 	bl	8008c6c <RegionInitDefaults>

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006f42:	230e      	movs	r3, #14
 8006f44:	ad06      	add	r5, sp, #24
 8006f46:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f48:	0029      	movs	r1, r5
 8006f4a:	7830      	ldrb	r0, [r6, #0]
 8006f4c:	f001 fe6e 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8006f50:	1e43      	subs	r3, r0, #1
 8006f52:	4198      	sbcs	r0, r3
 8006f54:	23c4      	movs	r3, #196	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8006f56:	220a      	movs	r2, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8006f58:	005b      	lsls	r3, r3, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8006f5a:	702a      	strb	r2, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8006f5c:	54e0      	strb	r0, [r4, r3]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f5e:	0029      	movs	r1, r5
 8006f60:	7830      	ldrb	r0, [r6, #0]
 8006f62:	f001 fe63 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8006f66:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8006f68:	2106      	movs	r1, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8006f6a:	33c8      	adds	r3, #200	; 0xc8
    getPhy.Attribute = PHY_DEF_TX_DR;
 8006f6c:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8006f6e:	7018      	strb	r0, [r3, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f70:	0029      	movs	r1, r5
 8006f72:	7830      	ldrb	r0, [r6, #0]
 8006f74:	f001 fe5a 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8006f78:	0023      	movs	r3, r4
 8006f7a:	33c9      	adds	r3, #201	; 0xc9
 8006f7c:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8006f7e:	230f      	movs	r3, #15
 8006f80:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f82:	0029      	movs	r1, r5
 8006f84:	7830      	ldrb	r0, [r6, #0]
 8006f86:	f001 fe51 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8006f8a:	4b8f      	ldr	r3, [pc, #572]	; (80071c8 <LoRaMacInitialization+0x314>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f8c:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8006f8e:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8006f90:	2310      	movs	r3, #16
 8006f92:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f94:	7830      	ldrb	r0, [r6, #0]
 8006f96:	f001 fe49 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8006f9a:	4b8c      	ldr	r3, [pc, #560]	; (80071cc <LoRaMacInitialization+0x318>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f9c:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8006f9e:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8006fa0:	2311      	movs	r3, #17
 8006fa2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fa4:	7830      	ldrb	r0, [r6, #0]
 8006fa6:	f001 fe41 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8006faa:	4b89      	ldr	r3, [pc, #548]	; (80071d0 <LoRaMacInitialization+0x31c>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fac:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8006fae:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8006fb0:	2312      	movs	r3, #18
 8006fb2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fb4:	7830      	ldrb	r0, [r6, #0]
 8006fb6:	f001 fe39 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8006fba:	4b86      	ldr	r3, [pc, #536]	; (80071d4 <LoRaMacInitialization+0x320>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fbc:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8006fbe:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8006fc0:	2313      	movs	r3, #19
 8006fc2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fc4:	7830      	ldrb	r0, [r6, #0]
 8006fc6:	f001 fe31 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8006fca:	4b83      	ldr	r3, [pc, #524]	; (80071d8 <LoRaMacInitialization+0x324>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fcc:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8006fce:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8006fd0:	2315      	movs	r3, #21
 8006fd2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fd4:	7830      	ldrb	r0, [r6, #0]
 8006fd6:	f001 fe29 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8006fda:	0023      	movs	r3, r4
 8006fdc:	33a9      	adds	r3, #169	; 0xa9
 8006fde:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8006fe0:	2316      	movs	r3, #22
 8006fe2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006fe4:	0029      	movs	r1, r5
 8006fe6:	7830      	ldrb	r0, [r6, #0]
 8006fe8:	f001 fe20 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8006fec:	0023      	movs	r3, r4
 8006fee:	33ac      	adds	r3, #172	; 0xac
 8006ff0:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8006ff2:	0023      	movs	r3, r4
 8006ff4:	33b4      	adds	r3, #180	; 0xb4
 8006ff6:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8006ff8:	2317      	movs	r3, #23
 8006ffa:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006ffc:	0029      	movs	r1, r5
 8006ffe:	7830      	ldrb	r0, [r6, #0]
 8007000:	f001 fe14 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8007004:	0023      	movs	r3, r4
 8007006:	b2c0      	uxtb	r0, r0
 8007008:	33b0      	adds	r3, #176	; 0xb0
 800700a:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800700c:	0023      	movs	r3, r4
 800700e:	33b8      	adds	r3, #184	; 0xb8
 8007010:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8007012:	231c      	movs	r3, #28
 8007014:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007016:	0029      	movs	r1, r5
 8007018:	7830      	ldrb	r0, [r6, #0]
 800701a:	f001 fe07 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800701e:	0023      	movs	r3, r4
 8007020:	33bc      	adds	r3, #188	; 0xbc
 8007022:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8007024:	231d      	movs	r3, #29
 8007026:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007028:	0029      	movs	r1, r5
 800702a:	7830      	ldrb	r0, [r6, #0]
 800702c:	f001 fdfe 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8007030:	0023      	movs	r3, r4
 8007032:	33bd      	adds	r3, #189	; 0xbd
 8007034:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8007036:	231e      	movs	r3, #30
 8007038:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800703a:	0029      	movs	r1, r5
 800703c:	7830      	ldrb	r0, [r6, #0]
 800703e:	f001 fdf5 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8007042:	0023      	movs	r3, r4
 8007044:	33c0      	adds	r3, #192	; 0xc0
 8007046:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8007048:	231f      	movs	r3, #31
 800704a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800704c:	0029      	movs	r1, r5
 800704e:	7830      	ldrb	r0, [r6, #0]
 8007050:	f001 fdec 	bl	8008c2c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8007054:	0023      	movs	r3, r4
 8007056:	33c4      	adds	r3, #196	; 0xc4
 8007058:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800705a:	230b      	movs	r3, #11
 800705c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800705e:	0029      	movs	r1, r5
 8007060:	7830      	ldrb	r0, [r6, #0]
 8007062:	f001 fde3 	bl	8008c2c <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8007066:	23ff      	movs	r3, #255	; 0xff
 8007068:	4a52      	ldr	r2, [pc, #328]	; (80071b4 <LoRaMacInitialization+0x300>)
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	52d0      	strh	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800706e:	230c      	movs	r3, #12
 8007070:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007072:	0029      	movs	r1, r5
 8007074:	7830      	ldrb	r0, [r6, #0]
 8007076:	f001 fdd9 	bl	8008c2c <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800707a:	4d4e      	ldr	r5, [pc, #312]	; (80071b4 <LoRaMacInitialization+0x300>)
 800707c:	4b57      	ldr	r3, [pc, #348]	; (80071dc <LoRaMacInitialization+0x328>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800707e:	2601      	movs	r6, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 8007080:	52e8      	strh	r0, [r5, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8007082:	0023      	movs	r3, r4
 8007084:	33a8      	adds	r3, #168	; 0xa8
 8007086:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8007088:	0023      	movs	r3, r4
 800708a:	220a      	movs	r2, #10
 800708c:	338c      	adds	r3, #140	; 0x8c
 800708e:	601a      	str	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8007090:	0023      	movs	r3, r4
 8007092:	2106      	movs	r1, #6
 8007094:	3390      	adds	r3, #144	; 0x90
 8007096:	7019      	strb	r1, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8007098:	0023      	movs	r3, r4
 800709a:	3354      	adds	r3, #84	; 0x54
 800709c:	7019      	strb	r1, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800709e:	4b4a      	ldr	r3, [pc, #296]	; (80071c8 <LoRaMacInitialization+0x314>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070a0:	9005      	str	r0, [sp, #20]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80070a2:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80070a4:	6522      	str	r2, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80070a6:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80070a8:	4b48      	ldr	r3, [pc, #288]	; (80071cc <LoRaMacInitialization+0x318>)
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;

    ResetMacParameters( );

    Nvm.MacGroup2.PublicNetwork = true;
 80070aa:	2586      	movs	r5, #134	; 0x86
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80070ac:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.PublicNetwork = true;
 80070ae:	35ff      	adds	r5, #255	; 0xff
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80070b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80070b2:	4b47      	ldr	r3, [pc, #284]	; (80071d0 <LoRaMacInitialization+0x31c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80070b8:	4b46      	ldr	r3, [pc, #280]	; (80071d4 <LoRaMacInitialization+0x320>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80070be:	4b46      	ldr	r3, [pc, #280]	; (80071d8 <LoRaMacInitialization+0x324>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	66a3      	str	r3, [r4, #104]	; 0x68
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80070c4:	0023      	movs	r3, r4
 80070c6:	336c      	adds	r3, #108	; 0x6c
 80070c8:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.IsCertPortOn = true;
 80070ca:	238c      	movs	r3, #140	; 0x8c
 80070cc:	33ff      	adds	r3, #255	; 0xff
 80070ce:	54e6      	strb	r6, [r4, r3]
    ResetMacParameters( );
 80070d0:	f7fe f946 	bl	8005360 <ResetMacParameters>

    MacCtx.MacPrimitives = primitives;
 80070d4:	23d1      	movs	r3, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
    MacCtx.MacFlags.Value = 0;
 80070d6:	2000      	movs	r0, #0
    MacCtx.MacPrimitives = primitives;
 80070d8:	4a36      	ldr	r2, [pc, #216]	; (80071b4 <LoRaMacInitialization+0x300>)
    MacCtx.MacCallbacks = callbacks;
 80070da:	9901      	ldr	r1, [sp, #4]
    MacCtx.MacPrimitives = primitives;
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	50d7      	str	r7, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 80070e0:	3304      	adds	r3, #4
 80070e2:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 80070e4:	4b3e      	ldr	r3, [pc, #248]	; (80071e0 <LoRaMacInitialization+0x32c>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80070e6:	0007      	movs	r7, r0
    MacCtx.MacFlags.Value = 0;
 80070e8:	54d0      	strb	r0, [r2, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 80070ea:	3b4e      	subs	r3, #78	; 0x4e
 80070ec:	3bff      	subs	r3, #255	; 0xff

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80070ee:	493d      	ldr	r1, [pc, #244]	; (80071e4 <LoRaMacInitialization+0x330>)
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80070f0:	63a0      	str	r0, [r4, #56]	; 0x38
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80070f2:	63e0      	str	r0, [r4, #60]	; 0x3c
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80070f4:	483c      	ldr	r0, [pc, #240]	; (80071e8 <LoRaMacInitialization+0x334>)
    MacCtx.MacState = LORAMAC_STOPPED;
 80070f6:	50d6      	str	r6, [r2, r3]
    Nvm.MacGroup2.PublicNetwork = true;
 80070f8:	5566      	strb	r6, [r4, r5]
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80070fa:	f004 fb79 	bl	800b7f0 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80070fe:	493b      	ldr	r1, [pc, #236]	; (80071ec <LoRaMacInitialization+0x338>)
 8007100:	483b      	ldr	r0, [pc, #236]	; (80071f0 <LoRaMacInitialization+0x33c>)
 8007102:	f004 fb75 	bl	800b7f0 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8007106:	493b      	ldr	r1, [pc, #236]	; (80071f4 <LoRaMacInitialization+0x340>)
 8007108:	483b      	ldr	r0, [pc, #236]	; (80071f8 <LoRaMacInitialization+0x344>)
 800710a:	f004 fb71 	bl	800b7f0 <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800710e:	ae02      	add	r6, sp, #8
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8007110:	493a      	ldr	r1, [pc, #232]	; (80071fc <LoRaMacInitialization+0x348>)
 8007112:	483b      	ldr	r0, [pc, #236]	; (8007200 <LoRaMacInitialization+0x34c>)
 8007114:	f004 fb6c 	bl	800b7f0 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8007118:	0030      	movs	r0, r6
 800711a:	f004 faef 	bl	800b6fc <SysTimeGetMcuTime>
 800711e:	0023      	movs	r3, r4
 8007120:	3391      	adds	r3, #145	; 0x91
 8007122:	33ff      	adds	r3, #255	; 0xff
 8007124:	ce06      	ldmia	r6!, {r1, r2}
 8007126:	c306      	stmia	r3!, {r1, r2}

    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8007128:	4b36      	ldr	r3, [pc, #216]	; (8007204 <LoRaMacInitialization+0x350>)

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800712a:	4922      	ldr	r1, [pc, #136]	; (80071b4 <LoRaMacInitialization+0x300>)
    LoRaMacRadioEvents.Value = 0;
 800712c:	601f      	str	r7, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800712e:	23d3      	movs	r3, #211	; 0xd3
 8007130:	4a35      	ldr	r2, [pc, #212]	; (8007208 <LoRaMacInitialization+0x354>)
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8007136:	4a35      	ldr	r2, [pc, #212]	; (800720c <LoRaMacInitialization+0x358>)
 8007138:	3308      	adds	r3, #8
 800713a:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800713c:	4a34      	ldr	r2, [pc, #208]	; (8007210 <LoRaMacInitialization+0x35c>)
 800713e:	3308      	adds	r3, #8
 8007140:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8007142:	4a34      	ldr	r2, [pc, #208]	; (8007214 <LoRaMacInitialization+0x360>)
 8007144:	3b0c      	subs	r3, #12
 8007146:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8007148:	4f33      	ldr	r7, [pc, #204]	; (8007218 <LoRaMacInitialization+0x364>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800714a:	4a34      	ldr	r2, [pc, #208]	; (800721c <LoRaMacInitialization+0x368>)
 800714c:	3308      	adds	r3, #8
 800714e:	50ca      	str	r2, [r1, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	4833      	ldr	r0, [pc, #204]	; (8007220 <LoRaMacInitialization+0x36c>)
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8007158:	4832      	ldr	r0, [pc, #200]	; (8007224 <LoRaMacInitialization+0x370>)
 800715a:	f004 f80b 	bl	800b174 <SecureElementInit>
 800715e:	2800      	cmp	r0, #0
 8007160:	d003      	beq.n	800716a <LoRaMacInitialization+0x2b6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8007162:	2611      	movs	r6, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8007164:	0030      	movs	r0, r6
 8007166:	b00d      	add	sp, #52	; 0x34
 8007168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800716a:	0020      	movs	r0, r4
 800716c:	f001 f9e2 	bl	8008534 <LoRaMacCryptoInit>
 8007170:	2800      	cmp	r0, #0
 8007172:	d1f6      	bne.n	8007162 <LoRaMacInitialization+0x2ae>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8007174:	f000 fec4 	bl	8007f00 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007178:	2613      	movs	r6, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800717a:	2800      	cmp	r0, #0
 800717c:	d1f2      	bne.n	8007164 <LoRaMacInitialization+0x2b0>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800717e:	482a      	ldr	r0, [pc, #168]	; (8007228 <LoRaMacInitialization+0x374>)
 8007180:	f001 fa36 	bl	80085f0 <LoRaMacCryptoSetMulticastReference>
 8007184:	1e06      	subs	r6, r0, #0
 8007186:	d1ec      	bne.n	8007162 <LoRaMacInitialization+0x2ae>
    srand1( Radio.Random( ) );
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	4798      	blx	r3
 800718e:	f7fd fb73 	bl	8004878 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8007192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007194:	5d60      	ldrb	r0, [r4, r5]
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	4798      	blx	r3
    Radio.Sleep( );
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 80071a0:	2201      	movs	r2, #1
 80071a2:	4b22      	ldr	r3, [pc, #136]	; (800722c <LoRaMacInitialization+0x378>)
 80071a4:	4903      	ldr	r1, [pc, #12]	; (80071b4 <LoRaMacInitialization+0x300>)
 80071a6:	54ca      	strb	r2, [r1, r3]
    return LORAMAC_STATUS_OK;
 80071a8:	e7dc      	b.n	8007164 <LoRaMacInitialization+0x2b0>
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	200008d4 	.word	0x200008d4
 80071b0:	000006ec 	.word	0x000006ec
 80071b4:	200003bc 	.word	0x200003bc
 80071b8:	01000400 	.word	0x01000400
 80071bc:	20000c18 	.word	0x20000c18
 80071c0:	20000c2c 	.word	0x20000c2c
 80071c4:	20000fc0 	.word	0x20000fc0
 80071c8:	20000968 	.word	0x20000968
 80071cc:	2000096c 	.word	0x2000096c
 80071d0:	20000970 	.word	0x20000970
 80071d4:	20000974 	.word	0x20000974
 80071d8:	20000978 	.word	0x20000978
 80071dc:	000003fe 	.word	0x000003fe
 80071e0:	0000048d 	.word	0x0000048d
 80071e4:	0800616d 	.word	0x0800616d
 80071e8:	2000072c 	.word	0x2000072c
 80071ec:	08005545 	.word	0x08005545
 80071f0:	20000744 	.word	0x20000744
 80071f4:	080055ad 	.word	0x080055ad
 80071f8:	2000075c 	.word	0x2000075c
 80071fc:	08005001 	.word	0x08005001
 8007200:	200007bc 	.word	0x200007bc
 8007204:	200003b8 	.word	0x200003b8
 8007208:	08005319 	.word	0x08005319
 800720c:	080052d1 	.word	0x080052d1
 8007210:	08004f5d 	.word	0x08004f5d
 8007214:	08004f31 	.word	0x08004f31
 8007218:	0801a9e0 	.word	0x0801a9e0
 800721c:	08004f89 	.word	0x08004f89
 8007220:	20000708 	.word	0x20000708
 8007224:	20000a78 	.word	0x20000a78
 8007228:	200009a8 	.word	0x200009a8
 800722c:	0000048e 	.word	0x0000048e

08007230 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8007230:	23d0      	movs	r3, #208	; 0xd0
 8007232:	2000      	movs	r0, #0
 8007234:	4a01      	ldr	r2, [pc, #4]	; (800723c <LoRaMacStart+0xc>)
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800723a:	4770      	bx	lr
 800723c:	200003bc 	.word	0x200003bc

08007240 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8007240:	b510      	push	{r4, lr}
    if( LoRaMacIsBusy( ) == false )
 8007242:	f7fe fcf9 	bl	8005c38 <LoRaMacIsBusy>
 8007246:	23d0      	movs	r3, #208	; 0xd0
 8007248:	4a06      	ldr	r2, [pc, #24]	; (8007264 <LoRaMacStop+0x24>)
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	2800      	cmp	r0, #0
 800724e:	d102      	bne.n	8007256 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8007250:	2101      	movs	r1, #1
 8007252:	50d1      	str	r1, [r2, r3]
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
}
 8007254:	bd10      	pop	{r4, pc}
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8007256:	58d0      	ldr	r0, [r2, r3]
 8007258:	3801      	subs	r0, #1
 800725a:	1e43      	subs	r3, r0, #1
 800725c:	4198      	sbcs	r0, r3
        return LORAMAC_STATUS_OK;
 800725e:	b2c0      	uxtb	r0, r0
 8007260:	e7f8      	b.n	8007254 <LoRaMacStop+0x14>
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	200003bc 	.word	0x200003bc

08007268 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8007268:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800726a:	4c2f      	ldr	r4, [pc, #188]	; (8007328 <LoRaMacQueryTxPossible+0xc0>)
{
 800726c:	b08d      	sub	sp, #52	; 0x34
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800726e:	0023      	movs	r3, r4
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007270:	6b67      	ldr	r7, [r4, #52]	; 0x34
{
 8007272:	9003      	str	r0, [sp, #12]
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007274:	9705      	str	r7, [sp, #20]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007276:	33c9      	adds	r3, #201	; 0xc9
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	aa02      	add	r2, sp, #8
 800727c:	7253      	strb	r3, [r2, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800727e:	220a      	movs	r2, #10
 8007280:	ab02      	add	r3, sp, #8
 8007282:	18d2      	adds	r2, r2, r3
 8007284:	0023      	movs	r3, r4
 8007286:	33c8      	adds	r3, #200	; 0xc8
 8007288:	781b      	ldrb	r3, [r3, #0]
{
 800728a:	000d      	movs	r5, r1
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800728c:	7013      	strb	r3, [r2, #0]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800728e:	2383      	movs	r3, #131	; 0x83
 8007290:	4926      	ldr	r1, [pc, #152]	; (800732c <LoRaMacQueryTxPossible+0xc4>)
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	5cc9      	ldrb	r1, [r1, r3]
 8007296:	230b      	movs	r3, #11
 8007298:	a802      	add	r0, sp, #8
 800729a:	181b      	adds	r3, r3, r0
    size_t macCmdsSize = 0;
 800729c:	2000      	movs	r0, #0
 800729e:	4684      	mov	ip, r0
 80072a0:	9006      	str	r0, [sp, #24]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80072a2:	7019      	strb	r1, [r3, #0]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80072a4:	3003      	adds	r0, #3
    if( txInfo == NULL )
 80072a6:	4565      	cmp	r5, ip
 80072a8:	d036      	beq.n	8007318 <LoRaMacQueryTxPossible+0xb0>
    }

    // Setup ADR request
    adrNext.UpdateChanMask = false;
 80072aa:	4666      	mov	r6, ip
 80072ac:	a807      	add	r0, sp, #28
 80072ae:	7006      	strb	r6, [r0, #0]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80072b0:	3687      	adds	r6, #135	; 0x87
 80072b2:	36ff      	adds	r6, #255	; 0xff
 80072b4:	5da6      	ldrb	r6, [r4, r6]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80072b6:	6047      	str	r7, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80072b8:	27ff      	movs	r7, #255	; 0xff
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80072ba:	7381      	strb	r1, [r0, #14]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80072bc:	0021      	movs	r1, r4
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80072be:	7046      	strb	r6, [r0, #1]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80072c0:	4e1a      	ldr	r6, [pc, #104]	; (800732c <LoRaMacQueryTxPossible+0xc4>)
 80072c2:	00bf      	lsls	r7, r7, #2
 80072c4:	59f6      	ldr	r6, [r6, r7]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80072c6:	3180      	adds	r1, #128	; 0x80
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80072c8:	9609      	str	r6, [sp, #36]	; 0x24
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80072ca:	1da6      	adds	r6, r4, #6
 80072cc:	8ff6      	ldrh	r6, [r6, #62]	; 0x3e
    adrNext.Region = Nvm.MacGroup2.Region;
 80072ce:	344c      	adds	r4, #76	; 0x4c
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80072d0:	ba76      	rev16	r6, r6
 80072d2:	8186      	strh	r6, [r0, #12]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80072d4:	7809      	ldrb	r1, [r1, #0]
 80072d6:	73c1      	strb	r1, [r0, #15]
    adrNext.Region = Nvm.MacGroup2.Region;
 80072d8:	7821      	ldrb	r1, [r4, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80072da:	ac02      	add	r4, sp, #8
    adrNext.Region = Nvm.MacGroup2.Region;
 80072dc:	7401      	strb	r1, [r0, #16]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80072de:	a905      	add	r1, sp, #20
 80072e0:	9100      	str	r1, [sp, #0]
 80072e2:	2109      	movs	r1, #9
 80072e4:	1909      	adds	r1, r1, r4
 80072e6:	f000 fd7d 	bl	8007de4 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80072ea:	2009      	movs	r0, #9
 80072ec:	5620      	ldrsb	r0, [r4, r0]
 80072ee:	f7fd fe73 	bl	8004fd8 <GetMaxAppPayloadWithoutFOptsLength>
 80072f2:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80072f4:	a806      	add	r0, sp, #24
 80072f6:	f000 feb5 	bl	8008064 <LoRaMacCommandsGetSizeSerializedCmds>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d112      	bne.n	8007324 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	2b0f      	cmp	r3, #15
 8007302:	d80b      	bhi.n	800731c <LoRaMacQueryTxPossible+0xb4>
 8007304:	786a      	ldrb	r2, [r5, #1]
 8007306:	4293      	cmp	r3, r2
 8007308:	d808      	bhi.n	800731c <LoRaMacQueryTxPossible+0xb4>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800730a:	1ad1      	subs	r1, r2, r3
 800730c:	7029      	strb	r1, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800730e:	9903      	ldr	r1, [sp, #12]
 8007310:	18cb      	adds	r3, r1, r3
 8007312:	429a      	cmp	r2, r3
 8007314:	d200      	bcs.n	8007318 <LoRaMacQueryTxPossible+0xb0>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8007316:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8007318:	b00d      	add	sp, #52	; 0x34
 800731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800731c:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800731e:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 8007320:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8007322:	e7f9      	b.n	8007318 <LoRaMacQueryTxPossible+0xb0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007324:	2013      	movs	r0, #19
 8007326:	e7f7      	b.n	8007318 <LoRaMacQueryTxPossible+0xb0>
 8007328:	200008d4 	.word	0x200008d4
 800732c:	200003bc 	.word	0x200003bc

08007330 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8007330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007332:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007334:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8007336:	2c00      	cmp	r4, #0
 8007338:	d02d      	beq.n	8007396 <LoRaMacMibGetRequestConfirm+0x66>
    }

    switch( mibGet->Type )
 800733a:	7820      	ldrb	r0, [r4, #0]
 800733c:	2844      	cmp	r0, #68	; 0x44
 800733e:	d900      	bls.n	8007342 <LoRaMacMibGetRequestConfirm+0x12>
 8007340:	e0b6      	b.n	80074b0 <LoRaMacMibGetRequestConfirm+0x180>
 8007342:	f7f8 fef3 	bl	800012c <__gnu_thumb1_case_uqi>
 8007346:	2a23      	.short	0x2a23
 8007348:	3a37342f 	.word	0x3a37342f
 800734c:	b5b5423d 	.word	0xb5b5423d
 8007350:	b5b5b5b5 	.word	0xb5b5b5b5
 8007354:	b5b5b5b5 	.word	0xb5b5b5b5
 8007358:	b5b5b5b5 	.word	0xb5b5b5b5
 800735c:	b5b5b5b5 	.word	0xb5b5b5b5
 8007360:	45b5b5b5 	.word	0x45b5b5b5
 8007364:	5c585249 	.word	0x5c585249
 8007368:	69636660 	.word	0x69636660
 800736c:	7774716e 	.word	0x7774716e
 8007370:	908d7d7a 	.word	0x908d7d7a
 8007374:	9c999396 	.word	0x9c999396
 8007378:	b5a4a69f 	.word	0xb5a4a69f
 800737c:	b5b5b5a9 	.word	0xb5b5b5a9
 8007380:	b5b5b5b5 	.word	0xb5b5b5b5
 8007384:	b5b5b5b5 	.word	0xb5b5b5b5
 8007388:	b5b5      	.short	0xb5b5
 800738a:	b2          	.byte	0xb2
 800738b:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800738c:	23c2      	movs	r3, #194	; 0xc2
 800738e:	4a4a      	ldr	r2, [pc, #296]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	5cd3      	ldrb	r3, [r2, r3]
 8007394:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8007396:	b004      	add	sp, #16
 8007398:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800739a:	23ce      	movs	r3, #206	; 0xce
 800739c:	4a46      	ldr	r2, [pc, #280]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800739e:	005b      	lsls	r3, r3, #1
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80073a0:	5cd3      	ldrb	r3, [r2, r3]
 80073a2:	e03c      	b.n	800741e <LoRaMacMibGetRequestConfirm+0xee>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80073a4:	f004 f898 	bl	800b4d8 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80073a8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80073aa:	2000      	movs	r0, #0
            break;
 80073ac:	e7f3      	b.n	8007396 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80073ae:	f004 f8a9 	bl	800b504 <SecureElementGetJoinEui>
 80073b2:	e7f9      	b.n	80073a8 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.SePin = SecureElementGetPin( );
 80073b4:	f004 f8bc 	bl	800b530 <SecureElementGetPin>
 80073b8:	e7f6      	b.n	80073a8 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80073ba:	23c3      	movs	r3, #195	; 0xc3
 80073bc:	4a3e      	ldr	r2, [pc, #248]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80073be:	e7ee      	b.n	800739e <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80073c0:	4b3d      	ldr	r3, [pc, #244]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80073c2:	33cc      	adds	r3, #204	; 0xcc
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80073c4:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 80073c6:	6063      	str	r3, [r4, #4]
            break;
 80073c8:	e7ef      	b.n	80073aa <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80073ca:	4b3b      	ldr	r3, [pc, #236]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80073cc:	33d0      	adds	r3, #208	; 0xd0
 80073ce:	e7f9      	b.n	80073c4 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80073d0:	2386      	movs	r3, #134	; 0x86
 80073d2:	4a39      	ldr	r2, [pc, #228]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80073d4:	33ff      	adds	r3, #255	; 0xff
 80073d6:	e7e3      	b.n	80073a0 <LoRaMacMibGetRequestConfirm+0x70>
            getPhy.Attribute = PHY_CHANNELS;
 80073d8:	231b      	movs	r3, #27
 80073da:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80073dc:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073de:	4b36      	ldr	r3, [pc, #216]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80073e0:	334c      	adds	r3, #76	; 0x4c
 80073e2:	7818      	ldrb	r0, [r3, #0]
 80073e4:	f001 fc22 	bl	8008c2c <RegionGetPhyParam>
 80073e8:	e7de      	b.n	80073a8 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80073ea:	4b33      	ldr	r3, [pc, #204]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80073ec:	3404      	adds	r4, #4
 80073ee:	3370      	adds	r3, #112	; 0x70
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80073f0:	cb06      	ldmia	r3!, {r1, r2}
 80073f2:	c406      	stmia	r4!, {r1, r2}
            break;
 80073f4:	e7d9      	b.n	80073aa <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80073f6:	4b30      	ldr	r3, [pc, #192]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80073f8:	33ac      	adds	r3, #172	; 0xac
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80073fa:	3404      	adds	r4, #4
 80073fc:	e7f8      	b.n	80073f0 <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80073fe:	4b2e      	ldr	r3, [pc, #184]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007400:	3404      	adds	r4, #4
 8007402:	3378      	adds	r3, #120	; 0x78
 8007404:	e7f4      	b.n	80073f0 <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007406:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007408:	33b4      	adds	r3, #180	; 0xb4
 800740a:	e7f6      	b.n	80073fa <LoRaMacMibGetRequestConfirm+0xca>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800740c:	2319      	movs	r3, #25
 800740e:	a902      	add	r1, sp, #8
 8007410:	e7e4      	b.n	80073dc <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8007412:	2318      	movs	r3, #24
 8007414:	a902      	add	r1, sp, #8
 8007416:	e7e1      	b.n	80073dc <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007418:	4b27      	ldr	r3, [pc, #156]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 800741a:	336c      	adds	r3, #108	; 0x6c
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800741c:	781b      	ldrb	r3, [r3, #0]
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800741e:	7123      	strb	r3, [r4, #4]
            break;
 8007420:	e7c3      	b.n	80073aa <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8007422:	4b25      	ldr	r3, [pc, #148]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007426:	e7ce      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8007428:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 800742a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742c:	e7cb      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800742e:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007432:	e7c8      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8007434:	4b20      	ldr	r3, [pc, #128]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007438:	e7c5      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800743a:	4b1f      	ldr	r3, [pc, #124]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 800743c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743e:	e7c2      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
 8007440:	2302      	movs	r3, #2
 8007442:	466a      	mov	r2, sp
 8007444:	7213      	strb	r3, [r2, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007446:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007448:	4669      	mov	r1, sp
 800744a:	001a      	movs	r2, r3
 800744c:	3280      	adds	r2, #128	; 0x80
 800744e:	7812      	ldrb	r2, [r2, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007450:	334c      	adds	r3, #76	; 0x4c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007452:	728a      	strb	r2, [r1, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007454:	7818      	ldrb	r0, [r3, #0]
 8007456:	a902      	add	r1, sp, #8
 8007458:	f001 fbe8 	bl	8008c2c <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800745c:	7120      	strb	r0, [r4, #4]
            break;
 800745e:	e7a4      	b.n	80073aa <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007460:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007462:	33c9      	adds	r3, #201	; 0xc9
 8007464:	e7da      	b.n	800741c <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007468:	3345      	adds	r3, #69	; 0x45
 800746a:	e7d7      	b.n	800741c <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800746c:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 800746e:	33c8      	adds	r3, #200	; 0xc8
 8007470:	e7d4      	b.n	800741c <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007472:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007474:	3344      	adds	r3, #68	; 0x44
 8007476:	e7d1      	b.n	800741c <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	e7a3      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800747e:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007480:	3354      	adds	r3, #84	; 0x54
 8007482:	e7cb      	b.n	800741c <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007486:	3388      	adds	r3, #136	; 0x88
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6063      	str	r3, [r4, #4]
 800748c:	e78d      	b.n	80073aa <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.Contexts = GetNvmData( );
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007490:	e799      	b.n	80073c6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007492:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 8007494:	33c4      	adds	r3, #196	; 0xc4
 8007496:	e7f7      	b.n	8007488 <LoRaMacMibGetRequestConfirm+0x158>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8007498:	23cc      	movs	r3, #204	; 0xcc
 800749a:	4a07      	ldr	r2, [pc, #28]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	58d3      	ldr	r3, [r2, r3]
 80074a0:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80074a2:	f001 fcd7 	bl	8008e54 <RegionGetVersion>
 80074a6:	60a0      	str	r0, [r4, #8]
 80074a8:	e77f      	b.n	80073aa <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80074aa:	238c      	movs	r3, #140	; 0x8c
 80074ac:	4a02      	ldr	r2, [pc, #8]	; (80074b8 <LoRaMacMibGetRequestConfirm+0x188>)
 80074ae:	e791      	b.n	80073d4 <LoRaMacMibGetRequestConfirm+0xa4>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80074b0:	0020      	movs	r0, r4
 80074b2:	f000 fd14 	bl	8007ede <LoRaMacClassBMibGetRequestConfirm>
            break;
 80074b6:	e76e      	b.n	8007396 <LoRaMacMibGetRequestConfirm+0x66>
 80074b8:	200008d4 	.word	0x200008d4

080074bc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	0004      	movs	r4, r0
 80074c0:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d102      	bne.n	80074cc <LoRaMacMibSetRequestConfirm+0x10>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80074c6:	2003      	movs	r0, #3
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
    return status;
}
 80074c8:	b006      	add	sp, #24
 80074ca:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80074cc:	23d0      	movs	r3, #208	; 0xd0
 80074ce:	4da7      	ldr	r5, [pc, #668]	; (800776c <LoRaMacMibSetRequestConfirm+0x2b0>)
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	58eb      	ldr	r3, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 80074d4:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80074d6:	079a      	lsls	r2, r3, #30
 80074d8:	d4f6      	bmi.n	80074c8 <LoRaMacMibSetRequestConfirm+0xc>
    switch( mibSet->Type )
 80074da:	7820      	ldrb	r0, [r4, #0]
 80074dc:	2844      	cmp	r0, #68	; 0x44
 80074de:	d900      	bls.n	80074e2 <LoRaMacMibSetRequestConfirm+0x26>
 80074e0:	e283      	b.n	80079ea <LoRaMacMibSetRequestConfirm+0x52e>
 80074e2:	f7f8 fe37 	bl	8000154 <__gnu_thumb1_case_uhi>
 80074e6:	0045      	.short	0x0045
 80074e8:	0059004b 	.word	0x0059004b
 80074ec:	0063005f 	.word	0x0063005f
 80074f0:	006d0067 	.word	0x006d0067
 80074f4:	00760072 	.word	0x00760072
 80074f8:	00860081 	.word	0x00860081
 80074fc:	0090008b 	.word	0x0090008b
 8007500:	009a0095 	.word	0x009a0095
 8007504:	00a4009f 	.word	0x00a4009f
 8007508:	00ae00a9 	.word	0x00ae00a9
 800750c:	00b800b3 	.word	0x00b800b3
 8007510:	00c200bd 	.word	0x00c200bd
 8007514:	00cc00c7 	.word	0x00cc00c7
 8007518:	00d600d1 	.word	0x00d600d1
 800751c:	00e000db 	.word	0x00e000db
 8007520:	028200e5 	.word	0x028200e5
 8007524:	010600ef 	.word	0x010600ef
 8007528:	014b0119 	.word	0x014b0119
 800752c:	015f016d 	.word	0x015f016d
 8007530:	017b0172 	.word	0x017b0172
 8007534:	0183017f 	.word	0x0183017f
 8007538:	018b0187 	.word	0x018b0187
 800753c:	018f0282 	.word	0x018f0282
 8007540:	01c601a1 	.word	0x01c601a1
 8007544:	01d601b7 	.word	0x01d601b7
 8007548:	01e401dd 	.word	0x01e401dd
 800754c:	01ed01e9 	.word	0x01ed01e9
 8007550:	0282026b 	.word	0x0282026b
 8007554:	02820282 	.word	0x02820282
 8007558:	02820282 	.word	0x02820282
 800755c:	02820282 	.word	0x02820282
 8007560:	02820282 	.word	0x02820282
 8007564:	02820282 	.word	0x02820282
 8007568:	02820282 	.word	0x02820282
 800756c:	027d0282 	.word	0x027d0282
            status = SwitchClass( mibSet->Param.Class );
 8007570:	7920      	ldrb	r0, [r4, #4]
 8007572:	f7fd fe2f 	bl	80051d4 <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
 8007576:	2800      	cmp	r0, #0
 8007578:	d1a6      	bne.n	80074c8 <LoRaMacMibSetRequestConfirm+0xc>
 800757a:	e006      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800757c:	7923      	ldrb	r3, [r4, #4]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d0a1      	beq.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8007582:	22ce      	movs	r2, #206	; 0xce
 8007584:	497a      	ldr	r1, [pc, #488]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8007586:	0052      	lsls	r2, r2, #1
 8007588:	548b      	strb	r3, [r1, r2]
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	4a79      	ldr	r2, [pc, #484]	; (8007774 <LoRaMacMibSetRequestConfirm+0x2b8>)
 800758e:	2000      	movs	r0, #0
 8007590:	5ca9      	ldrb	r1, [r5, r2]
 8007592:	430b      	orrs	r3, r1
 8007594:	54ab      	strb	r3, [r5, r2]
 8007596:	e797      	b.n	80074c8 <LoRaMacMibSetRequestConfirm+0xc>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8007598:	6860      	ldr	r0, [r4, #4]
 800759a:	f003 ff8f 	bl	800b4bc <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0f3      	beq.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
 80075a2:	e790      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80075a4:	6860      	ldr	r0, [r4, #4]
 80075a6:	f003 ff9d 	bl	800b4e4 <SecureElementSetJoinEui>
 80075aa:	e7f8      	b.n	800759e <LoRaMacMibSetRequestConfirm+0xe2>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 80075ac:	6860      	ldr	r0, [r4, #4]
 80075ae:	f003 ffaf 	bl	800b510 <SecureElementSetPin>
 80075b2:	e7f4      	b.n	800759e <LoRaMacMibSetRequestConfirm+0xe2>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80075b4:	23c3      	movs	r3, #195	; 0xc3
 80075b6:	7921      	ldrb	r1, [r4, #4]
 80075b8:	4a6d      	ldr	r2, [pc, #436]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
 80075ba:	005b      	lsls	r3, r3, #1
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80075bc:	54d1      	strb	r1, [r2, r3]
    if( status == LORAMAC_STATUS_OK )
 80075be:	e7e4      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80075c0:	4b6b      	ldr	r3, [pc, #428]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
 80075c2:	6862      	ldr	r2, [r4, #4]
 80075c4:	33cc      	adds	r3, #204	; 0xcc
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80075c6:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80075c8:	e7df      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80075ca:	4b69      	ldr	r3, [pc, #420]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
 80075cc:	6862      	ldr	r2, [r4, #4]
 80075ce:	33d0      	adds	r3, #208	; 0xd0
 80075d0:	e7f9      	b.n	80075c6 <LoRaMacMibSetRequestConfirm+0x10a>
            if( mibSet->Param.AppKey != NULL )
 80075d2:	6861      	ldr	r1, [r4, #4]
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d100      	bne.n	80075da <LoRaMacMibSetRequestConfirm+0x11e>
 80075d8:	e775      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80075da:	2000      	movs	r0, #0
 80075dc:	f001 f938 	bl	8008850 <LoRaMacCryptoSetKey>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0d2      	beq.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80075e4:	2011      	movs	r0, #17
 80075e6:	e76f      	b.n	80074c8 <LoRaMacMibSetRequestConfirm+0xc>
            if( mibSet->Param.NwkKey != NULL )
 80075e8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80075ea:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 80075ec:	2900      	cmp	r1, #0
 80075ee:	d1f5      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 80075f0:	e769      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.JSIntKey != NULL )
 80075f2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 80075f4:	2002      	movs	r0, #2
            if( mibSet->Param.JSIntKey != NULL )
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d1f0      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 80075fa:	e764      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.JSEncKey != NULL )
 80075fc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 80075fe:	2003      	movs	r0, #3
            if( mibSet->Param.JSEncKey != NULL )
 8007600:	2900      	cmp	r1, #0
 8007602:	d1eb      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007604:	e75f      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8007606:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8007608:	2004      	movs	r0, #4
            if( mibSet->Param.FNwkSIntKey != NULL )
 800760a:	2900      	cmp	r1, #0
 800760c:	d1e6      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 800760e:	e75a      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8007610:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8007612:	2005      	movs	r0, #5
            if( mibSet->Param.SNwkSIntKey != NULL )
 8007614:	2900      	cmp	r1, #0
 8007616:	d1e1      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007618:	e755      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.NwkSEncKey != NULL )
 800761a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800761c:	2006      	movs	r0, #6
            if( mibSet->Param.NwkSEncKey != NULL )
 800761e:	2900      	cmp	r1, #0
 8007620:	d1dc      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007622:	e750      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.AppSKey != NULL )
 8007624:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8007626:	2007      	movs	r0, #7
            if( mibSet->Param.AppSKey != NULL )
 8007628:	2900      	cmp	r1, #0
 800762a:	d1d7      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 800762c:	e74b      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKEKey != NULL )
 800762e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8007630:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 8007632:	2900      	cmp	r1, #0
 8007634:	d1d2      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007636:	e746      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey0 != NULL )
 8007638:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800763a:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800763c:	2900      	cmp	r1, #0
 800763e:	d1cd      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007640:	e741      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey0 != NULL )
 8007642:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8007644:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 8007646:	2900      	cmp	r1, #0
 8007648:	d1c8      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 800764a:	e73c      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800764c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800764e:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8007650:	2900      	cmp	r1, #0
 8007652:	d1c3      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007654:	e737      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey1 != NULL )
 8007656:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8007658:	2083      	movs	r0, #131	; 0x83
            if( mibSet->Param.McKey1 != NULL )
 800765a:	2900      	cmp	r1, #0
 800765c:	d1be      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 800765e:	e732      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey1 != NULL )
 8007660:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8007662:	2084      	movs	r0, #132	; 0x84
            if( mibSet->Param.McAppSKey1 != NULL )
 8007664:	2900      	cmp	r1, #0
 8007666:	d1b9      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007668:	e72d      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey1 != NULL )
 800766a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800766c:	2085      	movs	r0, #133	; 0x85
            if( mibSet->Param.McNwkSKey1 != NULL )
 800766e:	2900      	cmp	r1, #0
 8007670:	d1b4      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007672:	e728      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey2 != NULL )
 8007674:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8007676:	2086      	movs	r0, #134	; 0x86
            if( mibSet->Param.McKey2 != NULL )
 8007678:	2900      	cmp	r1, #0
 800767a:	d1af      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 800767c:	e723      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey2 != NULL )
 800767e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8007680:	2087      	movs	r0, #135	; 0x87
            if( mibSet->Param.McAppSKey2 != NULL )
 8007682:	2900      	cmp	r1, #0
 8007684:	d1aa      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007686:	e71e      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8007688:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800768a:	2088      	movs	r0, #136	; 0x88
            if( mibSet->Param.McNwkSKey2 != NULL )
 800768c:	2900      	cmp	r1, #0
 800768e:	d1a5      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 8007690:	e719      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey3 != NULL )
 8007692:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8007694:	2089      	movs	r0, #137	; 0x89
            if( mibSet->Param.McKey3 != NULL )
 8007696:	2900      	cmp	r1, #0
 8007698:	d1a0      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 800769a:	e714      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey3 != NULL )
 800769c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800769e:	208a      	movs	r0, #138	; 0x8a
            if( mibSet->Param.McAppSKey3 != NULL )
 80076a0:	2900      	cmp	r1, #0
 80076a2:	d19b      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 80076a4:	e70f      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey3 != NULL )
 80076a6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 80076a8:	208b      	movs	r0, #139	; 0x8b
            if( mibSet->Param.McNwkSKey3 != NULL )
 80076aa:	2900      	cmp	r1, #0
 80076ac:	d196      	bne.n	80075dc <LoRaMacMibSetRequestConfirm+0x120>
 80076ae:	e70a      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80076b0:	2386      	movs	r3, #134	; 0x86
 80076b2:	7920      	ldrb	r0, [r4, #4]
 80076b4:	4a2e      	ldr	r2, [pc, #184]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
 80076b6:	33ff      	adds	r3, #255	; 0xff
 80076b8:	54d0      	strb	r0, [r2, r3]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80076ba:	4b2f      	ldr	r3, [pc, #188]	; (8007778 <LoRaMacMibSetRequestConfirm+0x2bc>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
 80076c2:	e762      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80076c4:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076c6:	4e2a      	ldr	r6, [pc, #168]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80076c8:	aa02      	add	r2, sp, #8
 80076ca:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076cc:	0033      	movs	r3, r6
 80076ce:	3381      	adds	r3, #129	; 0x81
 80076d0:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80076d2:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076d4:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80076d6:	0033      	movs	r3, r6
 80076d8:	334c      	adds	r3, #76	; 0x4c
 80076da:	2207      	movs	r2, #7
 80076dc:	7818      	ldrb	r0, [r3, #0]
 80076de:	f001 fad3 	bl	8008c88 <RegionVerify>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80076e2:	3670      	adds	r6, #112	; 0x70
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d100      	bne.n	80076ea <LoRaMacMibSetRequestConfirm+0x22e>
 80076e8:	e6ed      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80076ea:	3404      	adds	r4, #4
 80076ec:	cc0c      	ldmia	r4!, {r2, r3}
 80076ee:	c60c      	stmia	r6!, {r2, r3}
    if( status == LORAMAC_STATUS_OK )
 80076f0:	e74b      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80076f2:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076f4:	4e1e      	ldr	r6, [pc, #120]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80076f6:	aa02      	add	r2, sp, #8
 80076f8:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076fa:	0033      	movs	r3, r6
 80076fc:	3381      	adds	r3, #129	; 0x81
 80076fe:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007700:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007702:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007704:	0033      	movs	r3, r6
 8007706:	334c      	adds	r3, #76	; 0x4c
 8007708:	2207      	movs	r2, #7
 800770a:	7818      	ldrb	r0, [r3, #0]
 800770c:	f001 fabc 	bl	8008c88 <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8007710:	36ac      	adds	r6, #172	; 0xac
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007712:	2800      	cmp	r0, #0
 8007714:	d1e9      	bne.n	80076ea <LoRaMacMibSetRequestConfirm+0x22e>
 8007716:	e6d6      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007718:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800771a:	4e15      	ldr	r6, [pc, #84]	; (8007770 <LoRaMacMibSetRequestConfirm+0x2b4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800771c:	aa02      	add	r2, sp, #8
 800771e:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007720:	0033      	movs	r3, r6
 8007722:	3381      	adds	r3, #129	; 0x81
 8007724:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007726:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007728:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800772a:	0033      	movs	r3, r6
 800772c:	334c      	adds	r3, #76	; 0x4c
 800772e:	2207      	movs	r2, #7
 8007730:	7818      	ldrb	r0, [r3, #0]
 8007732:	f001 faa9 	bl	8008c88 <RegionVerify>
 8007736:	2800      	cmp	r0, #0
 8007738:	d100      	bne.n	800773c <LoRaMacMibSetRequestConfirm+0x280>
 800773a:	e6c4      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800773c:	0033      	movs	r3, r6
 800773e:	3404      	adds	r4, #4
 8007740:	3378      	adds	r3, #120	; 0x78
 8007742:	cc06      	ldmia	r4!, {r1, r2}
 8007744:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8007746:	23c2      	movs	r3, #194	; 0xc2
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	5cf3      	ldrb	r3, [r6, r3]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d000      	beq.n	8007752 <LoRaMacMibSetRequestConfirm+0x296>
 8007750:	e71b      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
 8007752:	339b      	adds	r3, #155	; 0x9b
 8007754:	33ff      	adds	r3, #255	; 0xff
 8007756:	5cf3      	ldrb	r3, [r6, r3]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d100      	bne.n	800775e <LoRaMacMibSetRequestConfirm+0x2a2>
 800775c:	e715      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
                    Radio.Sleep( );
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <LoRaMacMibSetRequestConfirm+0x2bc>)
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8007766:	f7fd fcf5 	bl	8005154 <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
 800776a:	e70e      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
 800776c:	200003bc 	.word	0x200003bc
 8007770:	200008d4 	.word	0x200008d4
 8007774:	0000048d 	.word	0x0000048d
 8007778:	0801a9e0 	.word	0x0801a9e0
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800777c:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800777e:	4e9d      	ldr	r6, [pc, #628]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007780:	aa02      	add	r2, sp, #8
 8007782:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007784:	0033      	movs	r3, r6
 8007786:	3381      	adds	r3, #129	; 0x81
 8007788:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800778a:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800778c:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800778e:	0033      	movs	r3, r6
 8007790:	334c      	adds	r3, #76	; 0x4c
 8007792:	2207      	movs	r2, #7
 8007794:	7818      	ldrb	r0, [r3, #0]
 8007796:	f001 fa77 	bl	8008c88 <RegionVerify>
 800779a:	2800      	cmp	r0, #0
 800779c:	d100      	bne.n	80077a0 <LoRaMacMibSetRequestConfirm+0x2e4>
 800779e:	e692      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80077a0:	36b4      	adds	r6, #180	; 0xb4
 80077a2:	e7a2      	b.n	80076ea <LoRaMacMibSetRequestConfirm+0x22e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	a904      	add	r1, sp, #16
 80077a8:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80077aa:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80077ac:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80077ae:	4b91      	ldr	r3, [pc, #580]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80077b0:	334c      	adds	r3, #76	; 0x4c
 80077b2:	7818      	ldrb	r0, [r3, #0]
 80077b4:	f001 fa86 	bl	8008cc4 <RegionChanMaskSet>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d000      	beq.n	80077be <LoRaMacMibSetRequestConfirm+0x302>
 80077bc:	e6e5      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
 80077be:	e682      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	a904      	add	r1, sp, #16
 80077c4:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e7f0      	b.n	80077ac <LoRaMacMibSetRequestConfirm+0x2f0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80077ca:	7922      	ldrb	r2, [r4, #4]
 80077cc:	1e53      	subs	r3, r2, #1
 80077ce:	2b0e      	cmp	r3, #14
 80077d0:	d900      	bls.n	80077d4 <LoRaMacMibSetRequestConfirm+0x318>
 80077d2:	e678      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80077d4:	4b87      	ldr	r3, [pc, #540]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80077d6:	336c      	adds	r3, #108	; 0x6c
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80077d8:	701a      	strb	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80077da:	e6d6      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80077dc:	6862      	ldr	r2, [r4, #4]
 80077de:	4b85      	ldr	r3, [pc, #532]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80077e0:	659a      	str	r2, [r3, #88]	; 0x58
    if( status == LORAMAC_STATUS_OK )
 80077e2:	e6d2      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80077e4:	6862      	ldr	r2, [r4, #4]
 80077e6:	4b83      	ldr	r3, [pc, #524]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80077e8:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
 80077ea:	e6ce      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80077ec:	6862      	ldr	r2, [r4, #4]
 80077ee:	4b81      	ldr	r3, [pc, #516]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80077f0:	661a      	str	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
 80077f2:	e6ca      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80077f4:	6862      	ldr	r2, [r4, #4]
 80077f6:	4b7f      	ldr	r3, [pc, #508]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80077f8:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
 80077fa:	e6c6      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	4b7d      	ldr	r3, [pc, #500]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 8007800:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
 8007802:	e6c2      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8007804:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8007806:	4c7b      	ldr	r4, [pc, #492]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8007808:	aa02      	add	r2, sp, #8
 800780a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800780c:	0023      	movs	r3, r4
 800780e:	334c      	adds	r3, #76	; 0x4c
 8007810:	2206      	movs	r2, #6
 8007812:	7818      	ldrb	r0, [r3, #0]
 8007814:	a903      	add	r1, sp, #12
 8007816:	f001 fa37 	bl	8008c88 <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800781a:	34c9      	adds	r4, #201	; 0xc9
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800781c:	2800      	cmp	r0, #0
 800781e:	d100      	bne.n	8007822 <LoRaMacMibSetRequestConfirm+0x366>
 8007820:	e651      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8007822:	ab02      	add	r3, sp, #8
 8007824:	791b      	ldrb	r3, [r3, #4]
 8007826:	e013      	b.n	8007850 <LoRaMacMibSetRequestConfirm+0x394>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8007828:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800782a:	4c72      	ldr	r4, [pc, #456]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800782c:	ae03      	add	r6, sp, #12
 800782e:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007830:	0023      	movs	r3, r4
 8007832:	3380      	adds	r3, #128	; 0x80
 8007834:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007836:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007838:	70b3      	strb	r3, [r6, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800783a:	0023      	movs	r3, r4
 800783c:	334c      	adds	r3, #76	; 0x4c
 800783e:	0031      	movs	r1, r6
 8007840:	7818      	ldrb	r0, [r3, #0]
 8007842:	f001 fa21 	bl	8008c88 <RegionVerify>
 8007846:	2800      	cmp	r0, #0
 8007848:	d100      	bne.n	800784c <LoRaMacMibSetRequestConfirm+0x390>
 800784a:	e63c      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800784c:	7833      	ldrb	r3, [r6, #0]
 800784e:	3445      	adds	r4, #69	; 0x45
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8007850:	7023      	strb	r3, [r4, #0]
    if( status == LORAMAC_STATUS_OK )
 8007852:	e69a      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8007854:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8007856:	4c67      	ldr	r4, [pc, #412]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8007858:	aa02      	add	r2, sp, #8
 800785a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800785c:	0023      	movs	r3, r4
 800785e:	334c      	adds	r3, #76	; 0x4c
 8007860:	220a      	movs	r2, #10
 8007862:	7818      	ldrb	r0, [r3, #0]
 8007864:	a903      	add	r1, sp, #12
 8007866:	f001 fa0f 	bl	8008c88 <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800786a:	34c8      	adds	r4, #200	; 0xc8
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800786c:	2800      	cmp	r0, #0
 800786e:	d1d8      	bne.n	8007822 <LoRaMacMibSetRequestConfirm+0x366>
 8007870:	e629      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8007872:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8007874:	4c5f      	ldr	r4, [pc, #380]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8007876:	aa02      	add	r2, sp, #8
 8007878:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800787a:	0023      	movs	r3, r4
 800787c:	334c      	adds	r3, #76	; 0x4c
 800787e:	2209      	movs	r2, #9
 8007880:	7818      	ldrb	r0, [r3, #0]
 8007882:	a903      	add	r1, sp, #12
 8007884:	f001 fa00 	bl	8008c88 <RegionVerify>
 8007888:	2800      	cmp	r0, #0
 800788a:	d100      	bne.n	800788e <LoRaMacMibSetRequestConfirm+0x3d2>
 800788c:	e61b      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800788e:	3444      	adds	r4, #68	; 0x44
 8007890:	e7c7      	b.n	8007822 <LoRaMacMibSetRequestConfirm+0x366>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8007892:	4b58      	ldr	r3, [pc, #352]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	0019      	movs	r1, r3
 8007898:	318c      	adds	r1, #140	; 0x8c
 800789a:	600a      	str	r2, [r1, #0]
 800789c:	651a      	str	r2, [r3, #80]	; 0x50
    if( status == LORAMAC_STATUS_OK )
 800789e:	e674      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80078a0:	4b54      	ldr	r3, [pc, #336]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80078a2:	7922      	ldrb	r2, [r4, #4]
 80078a4:	0019      	movs	r1, r3
 80078a6:	3190      	adds	r1, #144	; 0x90
 80078a8:	700a      	strb	r2, [r1, #0]
 80078aa:	3354      	adds	r3, #84	; 0x54
 80078ac:	e794      	b.n	80077d8 <LoRaMacMibSetRequestConfirm+0x31c>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80078ae:	4b51      	ldr	r3, [pc, #324]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80078b0:	6862      	ldr	r2, [r4, #4]
 80078b2:	3388      	adds	r3, #136	; 0x88
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80078b4:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80078b6:	e668      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80078b8:	4b4e      	ldr	r3, [pc, #312]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	33c4      	adds	r3, #196	; 0xc4
 80078be:	e7f9      	b.n	80078b4 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.Contexts != 0 )
 80078c0:	6864      	ldr	r4, [r4, #4]
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d100      	bne.n	80078c8 <LoRaMacMibSetRequestConfirm+0x40c>
 80078c6:	e5fe      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
        return LORAMAC_STATUS_BUSY;
 80078c8:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80078ca:	4283      	cmp	r3, r0
 80078cc:	d000      	beq.n	80078d0 <LoRaMacMibSetRequestConfirm+0x414>
 80078ce:	e5fb      	b.n	80074c8 <LoRaMacMibSetRequestConfirm+0xc>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80078d0:	2130      	movs	r1, #48	; 0x30
 80078d2:	0020      	movs	r0, r4
 80078d4:	f7fc fffa 	bl	80048cc <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 80078d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078da:	4298      	cmp	r0, r3
 80078dc:	d104      	bne.n	80078e8 <LoRaMacMibSetRequestConfirm+0x42c>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80078de:	2234      	movs	r2, #52	; 0x34
 80078e0:	0021      	movs	r1, r4
 80078e2:	4844      	ldr	r0, [pc, #272]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80078e4:	f7fc ffd9 	bl	800489a <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80078e8:	0026      	movs	r6, r4
 80078ea:	3634      	adds	r6, #52	; 0x34
 80078ec:	2114      	movs	r1, #20
 80078ee:	0030      	movs	r0, r6
 80078f0:	f7fc ffec 	bl	80048cc <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 80078f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80078f6:	4298      	cmp	r0, r3
 80078f8:	d104      	bne.n	8007904 <LoRaMacMibSetRequestConfirm+0x448>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80078fa:	2218      	movs	r2, #24
 80078fc:	0031      	movs	r1, r6
 80078fe:	483e      	ldr	r0, [pc, #248]	; (80079f8 <LoRaMacMibSetRequestConfirm+0x53c>)
 8007900:	f7fc ffcb 	bl	800489a <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8007904:	0026      	movs	r6, r4
 8007906:	21aa      	movs	r1, #170	; 0xaa
 8007908:	364c      	adds	r6, #76	; 0x4c
 800790a:	0030      	movs	r0, r6
 800790c:	0049      	lsls	r1, r1, #1
 800790e:	f7fc ffdd 	bl	80048cc <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8007912:	23d0      	movs	r3, #208	; 0xd0
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	58e3      	ldr	r3, [r4, r3]
 8007918:	4298      	cmp	r0, r3
 800791a:	d119      	bne.n	8007950 <LoRaMacMibSetRequestConfirm+0x494>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800791c:	22ac      	movs	r2, #172	; 0xac
 800791e:	0031      	movs	r1, r6
 8007920:	0052      	lsls	r2, r2, #1
 8007922:	4836      	ldr	r0, [pc, #216]	; (80079fc <LoRaMacMibSetRequestConfirm+0x540>)
 8007924:	f7fc ffb9 	bl	800489a <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007928:	4b35      	ldr	r3, [pc, #212]	; (8007a00 <LoRaMacMibSetRequestConfirm+0x544>)
 800792a:	5cea      	ldrb	r2, [r5, r3]
 800792c:	3b33      	subs	r3, #51	; 0x33
 800792e:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007930:	22fb      	movs	r2, #251	; 0xfb
 8007932:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 8007934:	0092      	lsls	r2, r2, #2
 8007936:	6f99      	ldr	r1, [r3, #120]	; 0x78
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007938:	3381      	adds	r3, #129	; 0x81
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800793a:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	23fe      	movs	r3, #254	; 0xfe
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007944:	2201      	movs	r2, #1
 8007946:	4b2f      	ldr	r3, [pc, #188]	; (8007a04 <LoRaMacMibSetRequestConfirm+0x548>)
 8007948:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800794a:	4b2f      	ldr	r3, [pc, #188]	; (8007a08 <LoRaMacMibSetRequestConfirm+0x54c>)
 800794c:	1892      	adds	r2, r2, r2
 800794e:	54ea      	strb	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8007950:	0026      	movs	r6, r4
 8007952:	21ce      	movs	r1, #206	; 0xce
 8007954:	36a5      	adds	r6, #165	; 0xa5
 8007956:	36ff      	adds	r6, #255	; 0xff
 8007958:	0030      	movs	r0, r6
 800795a:	0049      	lsls	r1, r1, #1
 800795c:	f7fc ffb6 	bl	80048cc <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8007960:	23d0      	movs	r3, #208	; 0xd0
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	58e3      	ldr	r3, [r4, r3]
 8007966:	4298      	cmp	r0, r3
 8007968:	d105      	bne.n	8007976 <LoRaMacMibSetRequestConfirm+0x4ba>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800796a:	22d0      	movs	r2, #208	; 0xd0
 800796c:	0031      	movs	r1, r6
 800796e:	4827      	ldr	r0, [pc, #156]	; (8007a0c <LoRaMacMibSetRequestConfirm+0x550>)
 8007970:	0052      	lsls	r2, r2, #1
 8007972:	f7fc ff92 	bl	800489a <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8007976:	23d1      	movs	r3, #209	; 0xd1
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	18e6      	adds	r6, r4, r3
 800797c:	2110      	movs	r1, #16
 800797e:	0030      	movs	r0, r6
 8007980:	f7fc ffa4 	bl	80048cc <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8007984:	23d5      	movs	r3, #213	; 0xd5
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	58e3      	ldr	r3, [r4, r3]
 800798a:	4298      	cmp	r0, r3
 800798c:	d104      	bne.n	8007998 <LoRaMacMibSetRequestConfirm+0x4dc>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800798e:	2214      	movs	r2, #20
 8007990:	0031      	movs	r1, r6
 8007992:	481f      	ldr	r0, [pc, #124]	; (8007a10 <LoRaMacMibSetRequestConfirm+0x554>)
 8007994:	f7fc ff81 	bl	800489a <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <LoRaMacMibSetRequestConfirm+0x558>)
 800799a:	2114      	movs	r1, #20
 800799c:	18e6      	adds	r6, r4, r3
 800799e:	0030      	movs	r0, r6
 80079a0:	f7fc ff94 	bl	80048cc <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 80079a4:	23dd      	movs	r3, #221	; 0xdd
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	58e3      	ldr	r3, [r4, r3]
 80079aa:	4298      	cmp	r0, r3
 80079ac:	d000      	beq.n	80079b0 <LoRaMacMibSetRequestConfirm+0x4f4>
 80079ae:	e5ec      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80079b0:	2218      	movs	r2, #24
 80079b2:	0031      	movs	r1, r6
 80079b4:	4818      	ldr	r0, [pc, #96]	; (8007a18 <LoRaMacMibSetRequestConfirm+0x55c>)
 80079b6:	f7fc ff70 	bl	800489a <memcpy1>
    if( status == LORAMAC_STATUS_OK )
 80079ba:	e5e6      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80079bc:	79a3      	ldrb	r3, [r4, #6]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d900      	bls.n	80079c4 <LoRaMacMibSetRequestConfirm+0x508>
 80079c2:	e580      	b.n	80074c6 <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80079c4:	23cc      	movs	r3, #204	; 0xcc
 80079c6:	4a0b      	ldr	r2, [pc, #44]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80079c8:	6861      	ldr	r1, [r4, #4]
 80079ca:	005b      	lsls	r3, r3, #1
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80079cc:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80079ce:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80079d0:	f000 fdd0 	bl	8008574 <LoRaMacCryptoSetLrWanVersion>
 80079d4:	0003      	movs	r3, r0
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80079d6:	2011      	movs	r0, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d100      	bne.n	80079de <LoRaMacMibSetRequestConfirm+0x522>
 80079dc:	e5d5      	b.n	800758a <LoRaMacMibSetRequestConfirm+0xce>
 80079de:	e573      	b.n	80074c8 <LoRaMacMibSetRequestConfirm+0xc>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80079e0:	238c      	movs	r3, #140	; 0x8c
 80079e2:	7921      	ldrb	r1, [r4, #4]
 80079e4:	4a03      	ldr	r2, [pc, #12]	; (80079f4 <LoRaMacMibSetRequestConfirm+0x538>)
 80079e6:	33ff      	adds	r3, #255	; 0xff
 80079e8:	e5e8      	b.n	80075bc <LoRaMacMibSetRequestConfirm+0x100>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80079ea:	0020      	movs	r0, r4
 80079ec:	f000 fa79 	bl	8007ee2 <LoRaMacMibClassBSetRequestConfirm>
            break;
 80079f0:	e5c1      	b.n	8007576 <LoRaMacMibSetRequestConfirm+0xba>
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	200008d4 	.word	0x200008d4
 80079f8:	20000908 	.word	0x20000908
 80079fc:	20000920 	.word	0x20000920
 8007a00:	0000041b 	.word	0x0000041b
 8007a04:	000003f9 	.word	0x000003f9
 8007a08:	000003fa 	.word	0x000003fa
 8007a0c:	20000a78 	.word	0x20000a78
 8007a10:	20000c18 	.word	0x20000c18
 8007a14:	000006d4 	.word	0x000006d4
 8007a18:	20000fa8 	.word	0x20000fa8

08007a1c <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007a1c:	2300      	movs	r3, #0
{
 8007a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a20:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007a22:	aa02      	add	r2, sp, #8
{
 8007a24:	0005      	movs	r5, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007a26:	2403      	movs	r4, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007a28:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 8007a2a:	4298      	cmp	r0, r3
 8007a2c:	d005      	beq.n	8007a3a <LoRaMacMlmeRequest+0x1e>
    }
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007a2e:	6103      	str	r3, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 8007a30:	f7fe f902 	bl	8005c38 <LoRaMacIsBusy>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d003      	beq.n	8007a40 <LoRaMacMlmeRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8007a38:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8007a3a:	0020      	movs	r0, r4
 8007a3c:	b009      	add	sp, #36	; 0x24
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8007a40:	f000 fc58 	bl	80082f4 <LoRaMacConfirmQueueIsFull>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d1f7      	bne.n	8007a38 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8007a48:	f000 fc4e 	bl	80082e8 <LoRaMacConfirmQueueGetCnt>
 8007a4c:	1e01      	subs	r1, r0, #0
 8007a4e:	d103      	bne.n	8007a58 <LoRaMacMlmeRequest+0x3c>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8007a50:	2214      	movs	r2, #20
 8007a52:	485c      	ldr	r0, [pc, #368]	; (8007bc4 <LoRaMacMlmeRequest+0x1a8>)
 8007a54:	f7fc ff36 	bl	80048c4 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4e5b      	ldr	r6, [pc, #364]	; (8007bc8 <LoRaMacMlmeRequest+0x1ac>)
 8007a5c:	4a5b      	ldr	r2, [pc, #364]	; (8007bcc <LoRaMacMlmeRequest+0x1b0>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007a5e:	485c      	ldr	r0, [pc, #368]	; (8007bd0 <LoRaMacMlmeRequest+0x1b4>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a60:	54b3      	strb	r3, [r6, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007a62:	2204      	movs	r2, #4
 8007a64:	5c31      	ldrb	r1, [r6, r0]
    queueElement.Request = mlmeRequest->Type;
 8007a66:	ac03      	add	r4, sp, #12
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	5432      	strb	r2, [r6, r0]
    queueElement.RestrictCommonReadyToHandle = false;
 8007a6c:	2200      	movs	r2, #0
    queueElement.Request = mlmeRequest->Type;
 8007a6e:	7828      	ldrb	r0, [r5, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a70:	7063      	strb	r3, [r4, #1]
    queueElement.Request = mlmeRequest->Type;
 8007a72:	7020      	strb	r0, [r4, #0]
    switch( mlmeRequest->Type )
 8007a74:	3801      	subs	r0, #1
    queueElement.RestrictCommonReadyToHandle = false;
 8007a76:	70e2      	strb	r2, [r4, #3]
    queueElement.ReadyToHandle = false;
 8007a78:	70a2      	strb	r2, [r4, #2]
    switch( mlmeRequest->Type )
 8007a7a:	280c      	cmp	r0, #12
 8007a7c:	d900      	bls.n	8007a80 <LoRaMacMlmeRequest+0x64>
 8007a7e:	e09b      	b.n	8007bb8 <LoRaMacMlmeRequest+0x19c>
 8007a80:	f7f8 fb54 	bl	800012c <__gnu_thumb1_case_uqi>
 8007a84:	649a9a07 	.word	0x649a9a07
 8007a88:	9a9a9a6d 	.word	0x9a9a9a6d
 8007a8c:	788e9a74 	.word	0x788e9a74
 8007a90:	8a          	.byte	0x8a
 8007a91:	00          	.byte	0x00
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8007a92:	23d0      	movs	r3, #208	; 0xd0
 8007a94:	2720      	movs	r7, #32
 8007a96:	2220      	movs	r2, #32
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	58f3      	ldr	r3, [r6, r3]
 8007a9c:	401f      	ands	r7, r3
 8007a9e:	4213      	tst	r3, r2
 8007aa0:	d1ca      	bne.n	8007a38 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8007aa2:	792b      	ldrb	r3, [r5, #4]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d12c      	bne.n	8007b04 <LoRaMacMlmeRequest+0xe8>
                ResetMacParameters( );
 8007aaa:	f7fd fc59 	bl	8005360 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8007aae:	2105      	movs	r1, #5
 8007ab0:	4b48      	ldr	r3, [pc, #288]	; (8007bd4 <LoRaMacMlmeRequest+0x1b8>)
 8007ab2:	003a      	movs	r2, r7
 8007ab4:	5669      	ldrsb	r1, [r5, r1]
 8007ab6:	7818      	ldrb	r0, [r3, #0]
 8007ab8:	f001 f998 	bl	8008dec <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8007abc:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8007abe:	4f46      	ldr	r7, [pc, #280]	; (8007bd8 <LoRaMacMlmeRequest+0x1bc>)
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8007ac0:	7063      	strb	r3, [r4, #1]
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8007ac2:	3745      	adds	r7, #69	; 0x45
 8007ac4:	7038      	strb	r0, [r7, #0]
                status = SendReJoinReq( JOIN_REQ );
 8007ac6:	20ff      	movs	r0, #255	; 0xff
 8007ac8:	f7fe fc12 	bl	80062f0 <SendReJoinReq>
 8007acc:	1e04      	subs	r4, r0, #0
                if( status != LORAMAC_STATUS_OK )
 8007ace:	d007      	beq.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8007ad0:	2105      	movs	r1, #5
 8007ad2:	4b40      	ldr	r3, [pc, #256]	; (8007bd4 <LoRaMacMlmeRequest+0x1b8>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	5669      	ldrsb	r1, [r5, r1]
 8007ad8:	7818      	ldrb	r0, [r3, #0]
 8007ada:	f001 f987 	bl	8008dec <RegionAlternateDr>
 8007ade:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007ae0:	2392      	movs	r3, #146	; 0x92
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	58f3      	ldr	r3, [r6, r3]
 8007ae6:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8007ae8:	2c00      	cmp	r4, #0
 8007aea:	d067      	beq.n	8007bbc <LoRaMacMlmeRequest+0x1a0>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8007aec:	f000 fbfc 	bl	80082e8 <LoRaMacConfirmQueueGetCnt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1a2      	bne.n	8007a3a <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007af4:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8007af6:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <LoRaMacMlmeRequest+0x1c0>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007af8:	4935      	ldr	r1, [pc, #212]	; (8007bd0 <LoRaMacMlmeRequest+0x1b4>)
            MacCtx.NodeAckRequested = false;
 8007afa:	54f0      	strb	r0, [r6, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007afc:	5c73      	ldrb	r3, [r6, r1]
 8007afe:	4393      	bics	r3, r2
 8007b00:	5473      	strb	r3, [r6, r1]
 8007b02:	e79a      	b.n	8007a3a <LoRaMacMlmeRequest+0x1e>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8007b04:	9b01      	ldr	r3, [sp, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007b06:	2402      	movs	r4, #2
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d1e9      	bne.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8007b0c:	238a      	movs	r3, #138	; 0x8a
 8007b0e:	4a32      	ldr	r2, [pc, #200]	; (8007bd8 <LoRaMacMlmeRequest+0x1bc>)
 8007b10:	33ff      	adds	r3, #255	; 0xff
 8007b12:	54d7      	strb	r7, [r2, r3]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007b14:	0013      	movs	r3, r2
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007b16:	a904      	add	r1, sp, #16
 8007b18:	730c      	strb	r4, [r1, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007b1a:	334c      	adds	r3, #76	; 0x4c
 8007b1c:	7818      	ldrb	r0, [r3, #0]
 8007b1e:	f001 f8a5 	bl	8008c6c <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8007b22:	23ce      	movs	r3, #206	; 0xce
 8007b24:	792a      	ldrb	r2, [r5, #4]
 8007b26:	492c      	ldr	r1, [pc, #176]	; (8007bd8 <LoRaMacMlmeRequest+0x1bc>)
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	54ca      	strb	r2, [r1, r3]
                queueElement.ReadyToHandle = true;
 8007b2c:	9a01      	ldr	r2, [sp, #4]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007b2e:	ab03      	add	r3, sp, #12
                queueElement.ReadyToHandle = true;
 8007b30:	709a      	strb	r2, [r3, #2]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007b32:	705f      	strb	r7, [r3, #1]
                MacCtx.MacCallbacks->MacProcessNotify( );
 8007b34:	23d2      	movs	r3, #210	; 0xd2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	58f3      	ldr	r3, [r6, r3]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007b3e:	2120      	movs	r1, #32
 8007b40:	4a23      	ldr	r2, [pc, #140]	; (8007bd0 <LoRaMacMlmeRequest+0x1b4>)
 8007b42:	5cb3      	ldrb	r3, [r6, r2]
 8007b44:	430b      	orrs	r3, r1
 8007b46:	54b3      	strb	r3, [r6, r2]
            status = LORAMAC_STATUS_OK;
 8007b48:	2400      	movs	r4, #0
 8007b4a:	e7c9      	b.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2002      	movs	r0, #2
 8007b50:	a902      	add	r1, sp, #8
 8007b52:	f000 f9e3 	bl	8007f1c <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007b56:	2413      	movs	r4, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1c1      	bne.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
 8007b5c:	e7f4      	b.n	8007b48 <LoRaMacMlmeRequest+0x12c>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8007b5e:	7b2a      	ldrb	r2, [r5, #12]
 8007b60:	88a8      	ldrh	r0, [r5, #4]
 8007b62:	68a9      	ldr	r1, [r5, #8]
 8007b64:	f7fe fbf2 	bl	800634c <SetTxContinuousWave>
 8007b68:	0004      	movs	r4, r0
            break;
 8007b6a:	e7b9      	b.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	200d      	movs	r0, #13
 8007b70:	a902      	add	r1, sp, #8
 8007b72:	e7ee      	b.n	8007b52 <LoRaMacMlmeRequest+0x136>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007b74:	23c2      	movs	r3, #194	; 0xc2
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <LoRaMacMlmeRequest+0x1bc>)
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	5cd3      	ldrb	r3, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007b7c:	2402      	movs	r4, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1ae      	bne.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8007b82:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8007b84:	0760      	lsls	r0, r4, #29
 8007b86:	0f40      	lsrs	r0, r0, #29
 8007b88:	f000 f9a4 	bl	8007ed4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8007b8c:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8007b8e:	2201      	movs	r2, #1
 8007b90:	0019      	movs	r1, r3
 8007b92:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8007b94:	701c      	strb	r4, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8007b96:	e7dc      	b.n	8007b52 <LoRaMacMlmeRequest+0x136>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2012      	movs	r0, #18
 8007b9c:	a902      	add	r1, sp, #8
 8007b9e:	e7d8      	b.n	8007b52 <LoRaMacMlmeRequest+0x136>
            queueElement.RestrictCommonReadyToHandle = true;
 8007ba0:	70e3      	strb	r3, [r4, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8007ba2:	f000 f988 	bl	8007eb6 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8007ba6:	2401      	movs	r4, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8007ba8:	1e07      	subs	r7, r0, #0
 8007baa:	d199      	bne.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8007bac:	f000 f980 	bl	8007eb0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8007bb0:	0038      	movs	r0, r7
 8007bb2:	f000 f982 	bl	8007eba <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8007bb6:	e7c7      	b.n	8007b48 <LoRaMacMlmeRequest+0x12c>
    switch( mlmeRequest->Type )
 8007bb8:	2402      	movs	r4, #2
 8007bba:	e791      	b.n	8007ae0 <LoRaMacMlmeRequest+0xc4>
        LoRaMacConfirmQueueAdd( &queueElement );
 8007bbc:	a803      	add	r0, sp, #12
 8007bbe:	f000 fae3 	bl	8008188 <LoRaMacConfirmQueueAdd>
 8007bc2:	e73a      	b.n	8007a3a <LoRaMacMlmeRequest+0x1e>
 8007bc4:	20000814 	.word	0x20000814
 8007bc8:	200003bc 	.word	0x200003bc
 8007bcc:	00000459 	.word	0x00000459
 8007bd0:	0000048d 	.word	0x0000048d
 8007bd4:	20000920 	.word	0x20000920
 8007bd8:	200008d4 	.word	0x200008d4
 8007bdc:	0000041a 	.word	0x0000041a

08007be0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	b091      	sub	sp, #68	; 0x44
 8007be4:	9001      	str	r0, [sp, #4]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d103      	bne.n	8007bf2 <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007bea:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8007bec:	0020      	movs	r0, r4
 8007bee:	b011      	add	sp, #68	; 0x44
 8007bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9a01      	ldr	r2, [sp, #4]
        return LORAMAC_STATUS_BUSY;
 8007bf6:	2401      	movs	r4, #1
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007bf8:	6113      	str	r3, [r2, #16]
    if( LoRaMacIsBusy( ) == true )
 8007bfa:	f7fe f81d 	bl	8005c38 <LoRaMacIsBusy>
 8007bfe:	1e06      	subs	r6, r0, #0
 8007c00:	d1f4      	bne.n	8007bec <LoRaMacMcpsRequest+0xc>
    McpsReq_t request = *mcpsRequest;
 8007c02:	af0b      	add	r7, sp, #44	; 0x2c
 8007c04:	003b      	movs	r3, r7
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	ca23      	ldmia	r2!, {r0, r1, r5}
 8007c0a:	c323      	stmia	r3!, {r0, r1, r5}
 8007c0c:	ca03      	ldmia	r2!, {r0, r1}
 8007c0e:	c303      	stmia	r3!, {r0, r1}
 8007c10:	9b01      	ldr	r3, [sp, #4]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007c12:	2214      	movs	r2, #20
    McpsReq_t request = *mcpsRequest;
 8007c14:	781b      	ldrb	r3, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007c16:	0031      	movs	r1, r6
    McpsReq_t request = *mcpsRequest;
 8007c18:	001d      	movs	r5, r3
 8007c1a:	9b01      	ldr	r3, [sp, #4]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007c1c:	485f      	ldr	r0, [pc, #380]	; (8007d9c <LoRaMacMcpsRequest+0x1bc>)
    McpsReq_t request = *mcpsRequest;
 8007c1e:	899b      	ldrh	r3, [r3, #12]
 8007c20:	9305      	str	r3, [sp, #20]
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	7b9b      	ldrb	r3, [r3, #14]
 8007c26:	b25b      	sxtb	r3, r3
 8007c28:	9303      	str	r3, [sp, #12]
    macHdr.Value = 0;
 8007c2a:	ab06      	add	r3, sp, #24
 8007c2c:	701e      	strb	r6, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007c2e:	f7fc fe49 	bl	80048c4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c32:	4a5b      	ldr	r2, [pc, #364]	; (8007da0 <LoRaMacMcpsRequest+0x1c0>)
 8007c34:	4b5b      	ldr	r3, [pc, #364]	; (8007da4 <LoRaMacMcpsRequest+0x1c4>)
 8007c36:	54d4      	strb	r4, [r2, r3]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8007c38:	22ce      	movs	r2, #206	; 0xce
 8007c3a:	4b5b      	ldr	r3, [pc, #364]	; (8007da8 <LoRaMacMcpsRequest+0x1c8>)
 8007c3c:	0052      	lsls	r2, r2, #1
 8007c3e:	5c9a      	ldrb	r2, [r3, r2]
 8007c40:	2a02      	cmp	r2, #2
 8007c42:	d10f      	bne.n	8007c64 <LoRaMacMcpsRequest+0x84>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8007c44:	3283      	adds	r2, #131	; 0x83
 8007c46:	32ff      	adds	r2, #255	; 0xff
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8007c48:	5c9a      	ldrb	r2, [r3, r2]
 8007c4a:	2a02      	cmp	r2, #2
 8007c4c:	d10a      	bne.n	8007c64 <LoRaMacMcpsRequest+0x84>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8007c4e:	3289      	adds	r2, #137	; 0x89
 8007c50:	32ff      	adds	r2, #255	; 0xff
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8007c52:	5c9b      	ldrb	r3, [r3, r2]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <LoRaMacMcpsRequest+0x84>
 8007c58:	1c2b      	adds	r3, r5, #0
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	d100      	bne.n	8007c60 <LoRaMacMcpsRequest+0x80>
 8007c5e:	1c23      	adds	r3, r4, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	001d      	movs	r5, r3
    switch( request.Type )
 8007c64:	2d01      	cmp	r5, #1
 8007c66:	d033      	beq.n	8007cd0 <LoRaMacMcpsRequest+0xf0>
 8007c68:	2d03      	cmp	r5, #3
 8007c6a:	d038      	beq.n	8007cde <LoRaMacMcpsRequest+0xfe>
 8007c6c:	2d00      	cmp	r5, #0
 8007c6e:	d148      	bne.n	8007d02 <LoRaMacMcpsRequest+0x122>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8007c70:	221f      	movs	r2, #31
 8007c72:	ab06      	add	r3, sp, #24
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	401a      	ands	r2, r3
 8007c78:	2340      	movs	r3, #64	; 0x40
            readyToSend = true;
 8007c7a:	2601      	movs	r6, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	aa06      	add	r2, sp, #24
 8007c80:	7013      	strb	r3, [r2, #0]
            fPort = request.Req.Unconfirmed.fPort;
 8007c82:	793b      	ldrb	r3, [r7, #4]
 8007c84:	9302      	str	r3, [sp, #8]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	9304      	str	r3, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8007c8a:	2702      	movs	r7, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007c8c:	4c46      	ldr	r4, [pc, #280]	; (8007da8 <LoRaMacMcpsRequest+0x1c8>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 8007c8e:	ab06      	add	r3, sp, #24
 8007c90:	731f      	strb	r7, [r3, #12]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007c92:	0023      	movs	r3, r4
 8007c94:	3380      	adds	r3, #128	; 0x80
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	aa06      	add	r2, sp, #24
 8007c9a:	7393      	strb	r3, [r2, #14]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c9c:	0023      	movs	r3, r4
 8007c9e:	334c      	adds	r3, #76	; 0x4c
 8007ca0:	7818      	ldrb	r0, [r3, #0]
 8007ca2:	a909      	add	r1, sp, #36	; 0x24
 8007ca4:	f000 ffc2 	bl	8008c2c <RegionGetPhyParam>
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007ca8:	23c3      	movs	r3, #195	; 0xc3
 8007caa:	005b      	lsls	r3, r3, #1
    if( ( adr == true ) &&
 8007cac:	5ce3      	ldrb	r3, [r4, r3]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8007cae:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d030      	beq.n	8007d16 <LoRaMacMcpsRequest+0x136>
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007cb4:	22ce      	movs	r2, #206	; 0xce
 8007cb6:	238a      	movs	r3, #138	; 0x8a
 8007cb8:	0052      	lsls	r2, r2, #1
    if( ( adr == true ) &&
 8007cba:	5ca2      	ldrb	r2, [r4, r2]
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007cbc:	33ff      	adds	r3, #255	; 0xff
 8007cbe:	5ce3      	ldrb	r3, [r4, r3]
    if( ( adr == true ) &&
 8007cc0:	2a01      	cmp	r2, #1
 8007cc2:	d125      	bne.n	8007d10 <LoRaMacMcpsRequest+0x130>
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d123      	bne.n	8007d10 <LoRaMacMcpsRequest+0x130>
    if( readyToSend == true )
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	d12e      	bne.n	8007d2a <LoRaMacMcpsRequest+0x14a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007ccc:	2402      	movs	r4, #2
 8007cce:	e05e      	b.n	8007d8e <LoRaMacMcpsRequest+0x1ae>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8007cd0:	221f      	movs	r2, #31
 8007cd2:	ab06      	add	r3, sp, #24
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	401a      	ands	r2, r3
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	425b      	negs	r3, r3
 8007cdc:	e7cd      	b.n	8007c7a <LoRaMacMcpsRequest+0x9a>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8007cde:	ab06      	add	r3, sp, #24
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	2320      	movs	r3, #32
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	aa06      	add	r2, sp, #24
 8007cea:	7013      	strb	r3, [r2, #0]
            fBuffer = request.Req.Proprietary.fBuffer;
 8007cec:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 8007cee:	2601      	movs	r6, #1
            fBuffer = request.Req.Proprietary.fBuffer;
 8007cf0:	9304      	str	r3, [sp, #16]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8007cf2:	893b      	ldrh	r3, [r7, #8]
 8007cf4:	9305      	str	r3, [sp, #20]
            datarate = request.Req.Proprietary.Datarate;
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	56fb      	ldrsb	r3, [r7, r3]
 8007cfa:	9303      	str	r3, [sp, #12]
    uint8_t fPort = 0;
 8007cfc:	2300      	movs	r3, #0
    switch( request.Type )
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	e7c3      	b.n	8007c8a <LoRaMacMcpsRequest+0xaa>
 8007d02:	2300      	movs	r3, #0
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	e7fa      	b.n	8007cfe <LoRaMacMcpsRequest+0x11e>
            MacCtx.NodeAckRequested = false;
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4b28      	ldr	r3, [pc, #160]	; (8007dac <LoRaMacMcpsRequest+0x1cc>)
 8007d0c:	54f2      	strb	r2, [r6, r3]
 8007d0e:	e03e      	b.n	8007d8e <LoRaMacMcpsRequest+0x1ae>
    if( readyToSend == true )
 8007d10:	2e00      	cmp	r6, #0
 8007d12:	d0db      	beq.n	8007ccc <LoRaMacMcpsRequest+0xec>
 8007d14:	e01d      	b.n	8007d52 <LoRaMacMcpsRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007d16:	003c      	movs	r4, r7
    if( readyToSend == true )
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	d038      	beq.n	8007d8e <LoRaMacMcpsRequest+0x1ae>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8007d1c:	9a03      	ldr	r2, [sp, #12]
 8007d1e:	1c03      	adds	r3, r0, #0
 8007d20:	4290      	cmp	r0, r2
 8007d22:	da01      	bge.n	8007d28 <LoRaMacMcpsRequest+0x148>
 8007d24:	466b      	mov	r3, sp
 8007d26:	7b1b      	ldrb	r3, [r3, #12]
 8007d28:	b258      	sxtb	r0, r3
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d2a:	4c1f      	ldr	r4, [pc, #124]	; (8007da8 <LoRaMacMcpsRequest+0x1c8>)
            verify.DatarateParams.Datarate = datarate;
 8007d2c:	ae08      	add	r6, sp, #32
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d2e:	0023      	movs	r3, r4
            verify.DatarateParams.Datarate = datarate;
 8007d30:	7030      	strb	r0, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d32:	3380      	adds	r3, #128	; 0x80
 8007d34:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007d36:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d38:	70b3      	strb	r3, [r6, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007d3a:	0023      	movs	r3, r4
 8007d3c:	334c      	adds	r3, #76	; 0x4c
 8007d3e:	0031      	movs	r1, r6
 8007d40:	7818      	ldrb	r0, [r3, #0]
 8007d42:	f000 ffa1 	bl	8008c88 <RegionVerify>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d100      	bne.n	8007d4c <LoRaMacMcpsRequest+0x16c>
 8007d4a:	e74e      	b.n	8007bea <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8007d4c:	7833      	ldrb	r3, [r6, #0]
 8007d4e:	3445      	adds	r4, #69	; 0x45
 8007d50:	7023      	strb	r3, [r4, #0]
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8007d52:	4e13      	ldr	r6, [pc, #76]	; (8007da0 <LoRaMacMcpsRequest+0x1c0>)
 8007d54:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <LoRaMacMcpsRequest+0x1d0>)
 8007d56:	58f0      	ldr	r0, [r6, r3]
    if( startTimeInMs != 0 )
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d009      	beq.n	8007d70 <LoRaMacMcpsRequest+0x190>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8007d5c:	f003 fe0d 	bl	800b97a <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8007d60:	23fa      	movs	r3, #250	; 0xfa
 8007d62:	015b      	lsls	r3, r3, #5
 8007d64:	4298      	cmp	r0, r3
 8007d66:	d903      	bls.n	8007d70 <LoRaMacMcpsRequest+0x190>
            Nvm.MacGroup1.SrvAckRequested = false;
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <LoRaMacMcpsRequest+0x1c8>)
 8007d6c:	3346      	adds	r3, #70	; 0x46
 8007d6e:	701a      	strb	r2, [r3, #0]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	9902      	ldr	r1, [sp, #8]
 8007d76:	a806      	add	r0, sp, #24
 8007d78:	f7fe fa38 	bl	80061ec <Send>
 8007d7c:	1e04      	subs	r4, r0, #0
        if( status == LORAMAC_STATUS_OK )
 8007d7e:	d1c3      	bne.n	8007d08 <LoRaMacMcpsRequest+0x128>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8007d80:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <LoRaMacMcpsRequest+0x1d4>)
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8007d82:	4a0d      	ldr	r2, [pc, #52]	; (8007db8 <LoRaMacMcpsRequest+0x1d8>)
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8007d84:	54f5      	strb	r5, [r6, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8007d86:	2301      	movs	r3, #1
 8007d88:	5cb1      	ldrb	r1, [r6, r2]
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	54b3      	strb	r3, [r6, r2]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007d8e:	2392      	movs	r3, #146	; 0x92
 8007d90:	4a03      	ldr	r2, [pc, #12]	; (8007da0 <LoRaMacMcpsRequest+0x1c0>)
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	58d3      	ldr	r3, [r2, r3]
 8007d96:	9a01      	ldr	r2, [sp, #4]
 8007d98:	6113      	str	r3, [r2, #16]
    return status;
 8007d9a:	e727      	b.n	8007bec <LoRaMacMcpsRequest+0xc>
 8007d9c:	20000800 	.word	0x20000800
 8007da0:	200003bc 	.word	0x200003bc
 8007da4:	00000445 	.word	0x00000445
 8007da8:	200008d4 	.word	0x200008d4
 8007dac:	0000041a 	.word	0x0000041a
 8007db0:	00000494 	.word	0x00000494
 8007db4:	00000444 	.word	0x00000444
 8007db8:	0000048d 	.word	0x0000048d

08007dbc <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8007dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007dbe:	4d08      	ldr	r5, [pc, #32]	; (8007de0 <LoRaMacTestSetDutyCycleOn+0x24>)
    verify.DutyCycle = enable;
 8007dc0:	a901      	add	r1, sp, #4
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007dc2:	002b      	movs	r3, r5
    verify.DutyCycle = enable;
 8007dc4:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007dc6:	334c      	adds	r3, #76	; 0x4c
{
 8007dc8:	0004      	movs	r4, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007dca:	220e      	movs	r2, #14
 8007dcc:	7818      	ldrb	r0, [r3, #0]
 8007dce:	f000 ff5b 	bl	8008c88 <RegionVerify>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d002      	beq.n	8007ddc <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8007dd6:	23c4      	movs	r3, #196	; 0xc4
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	54ec      	strb	r4, [r5, r3]
    }
}
 8007ddc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	200008d4 	.word	0x200008d4

08007de4 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8007de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de6:	b08f      	sub	sp, #60	; 0x3c
 8007de8:	9305      	str	r3, [sp, #20]
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
    int8_t txPower = adrNext->TxPower;
 8007dea:	230d      	movs	r3, #13
    int8_t datarate = adrNext->Datarate;
 8007dec:	270c      	movs	r7, #12
{
 8007dee:	9204      	str	r2, [sp, #16]
 8007df0:	9103      	str	r1, [sp, #12]
    int8_t txPower = adrNext->TxPower;
 8007df2:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 8007df4:	57c7      	ldrsb	r7, [r0, r7]
    int8_t txPower = adrNext->TxPower;
 8007df6:	9301      	str	r3, [sp, #4]
    uint8_t nbTrans = adrNext->NbTrans;
 8007df8:	7b83      	ldrb	r3, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8007dfa:	6842      	ldr	r2, [r0, #4]
    uint8_t nbTrans = adrNext->NbTrans;
 8007dfc:	9302      	str	r3, [sp, #8]
    *adrAckCounter = adrNext->AdrAckCounter;
 8007dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
{
 8007e00:	0004      	movs	r4, r0
    *adrAckCounter = adrNext->AdrAckCounter;
 8007e02:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8007e04:	7846      	ldrb	r6, [r0, #1]
    int8_t datarate = adrNext->Datarate;
 8007e06:	003d      	movs	r5, r7
    if( adrNext->AdrEnabled == true )
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	d045      	beq.n	8007e98 <LoRaMacAdrCalcNext+0xb4>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	aa06      	add	r2, sp, #24
 8007e10:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007e12:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007e14:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007e16:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007e18:	7c00      	ldrb	r0, [r0, #16]
 8007e1a:	f000 ff07 	bl	8008c2c <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8007e1e:	b243      	sxtb	r3, r0
 8007e20:	9300      	str	r3, [sp, #0]
        datarate = MAX( datarate, minTxDatarate );
 8007e22:	429f      	cmp	r7, r3
 8007e24:	da01      	bge.n	8007e2a <LoRaMacAdrCalcNext+0x46>
 8007e26:	466b      	mov	r3, sp
 8007e28:	781d      	ldrb	r5, [r3, #0]

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	8921      	ldrh	r1, [r4, #8]
 8007e2e:	6862      	ldr	r2, [r4, #4]
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007e30:	8963      	ldrh	r3, [r4, #10]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007e32:	428a      	cmp	r2, r1
 8007e34:	4176      	adcs	r6, r6
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007e36:	185b      	adds	r3, r3, r1
        datarate = MAX( datarate, minTxDatarate );
 8007e38:	b26d      	sxtb	r5, r5
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007e3a:	b2f6      	uxtb	r6, r6
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d307      	bcc.n	8007e50 <LoRaMacAdrCalcNext+0x6c>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8007e40:	230a      	movs	r3, #10
 8007e42:	a908      	add	r1, sp, #32
 8007e44:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007e46:	7c20      	ldrb	r0, [r4, #16]
 8007e48:	f000 fef0 	bl	8008c2c <RegionGetPhyParam>
            txPower = phyParam.Value;
 8007e4c:	b243      	sxtb	r3, r0
 8007e4e:	9301      	str	r3, [sp, #4]
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8007e50:	8961      	ldrh	r1, [r4, #10]
 8007e52:	8922      	ldrh	r2, [r4, #8]
 8007e54:	004b      	lsls	r3, r1, #1
 8007e56:	6860      	ldr	r0, [r4, #4]
 8007e58:	189b      	adds	r3, r3, r2
 8007e5a:	4298      	cmp	r0, r3
 8007e5c:	d31c      	bcc.n	8007e98 <LoRaMacAdrCalcNext+0xb4>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8007e5e:	1a80      	subs	r0, r0, r2
 8007e60:	f7f8 fa08 	bl	8000274 <__aeabi_uidivmod>
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d117      	bne.n	8007e98 <LoRaMacAdrCalcNext+0xb4>
            {
                if( datarate == minTxDatarate )
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	429f      	cmp	r7, r3
 8007e6c:	dc0a      	bgt.n	8007e84 <LoRaMacAdrCalcNext+0xa0>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
                        RegionInitDefaults( adrNext->Region, &params );
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8007e6e:	2201      	movs	r2, #1
                    if( adrNext->UpdateChanMask == true )
 8007e70:	7823      	ldrb	r3, [r4, #0]
                    nbTrans = 1;
 8007e72:	9202      	str	r2, [sp, #8]
                    if( adrNext->UpdateChanMask == true )
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <LoRaMacAdrCalcNext+0xa0>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007e78:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
 8007e7a:	7c20      	ldrb	r0, [r4, #16]
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007e7c:	a90a      	add	r1, sp, #40	; 0x28
 8007e7e:	730b      	strb	r3, [r1, #12]
                        RegionInitDefaults( adrNext->Region, &params );
 8007e80:	f000 fef4 	bl	8008c6c <RegionInitDefaults>
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007e84:	2320      	movs	r3, #32
 8007e86:	a908      	add	r1, sp, #32
                getPhy.Datarate = datarate;
 8007e88:	704d      	strb	r5, [r1, #1]
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007e8a:	700b      	strb	r3, [r1, #0]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007e8c:	7be3      	ldrb	r3, [r4, #15]
 8007e8e:	708b      	strb	r3, [r1, #2]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007e90:	7c20      	ldrb	r0, [r4, #16]
 8007e92:	f000 fecb 	bl	8008c2c <RegionGetPhyParam>
                datarate = phyParam.Value;
 8007e96:	b245      	sxtb	r5, r0

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
    return adrAckReq;
}
 8007e98:	0030      	movs	r0, r6
    *drOut = datarate;
 8007e9a:	9b03      	ldr	r3, [sp, #12]
    *txPowOut = txPower;
 8007e9c:	9a01      	ldr	r2, [sp, #4]
    *drOut = datarate;
 8007e9e:	701d      	strb	r5, [r3, #0]
    *txPowOut = txPower;
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8007ea4:	9b05      	ldr	r3, [sp, #20]
 8007ea6:	9a02      	ldr	r2, [sp, #8]
 8007ea8:	701a      	strb	r2, [r3, #0]
}
 8007eaa:	b00f      	add	sp, #60	; 0x3c
 8007eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eae <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8007eae:	4770      	bx	lr

08007eb0 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007eb0:	4770      	bx	lr

08007eb2 <LoRaMacClassBSetPingSlotState>:
 8007eb2:	4770      	bx	lr

08007eb4 <LoRaMacClassBSetMulticastSlotState>:
 8007eb4:	4770      	bx	lr

08007eb6 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4770      	bx	lr

08007eba <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007eba:	4770      	bx	lr

08007ebc <LoRaMacClassBPingSlotTimerEvent>:
 8007ebc:	4770      	bx	lr

08007ebe <LoRaMacClassBMulticastSlotTimerEvent>:
 8007ebe:	4770      	bx	lr

08007ec0 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4770      	bx	lr

08007ec4 <LoRaMacClassBIsBeaconExpected>:
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	4770      	bx	lr

08007ec8 <LoRaMacClassBIsPingExpected>:
 8007ec8:	2000      	movs	r0, #0
 8007eca:	4770      	bx	lr

08007ecc <LoRaMacClassBIsMulticastExpected>:
 8007ecc:	2000      	movs	r0, #0
 8007ece:	4770      	bx	lr

08007ed0 <LoRaMacClassBIsBeaconModeActive>:
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	4770      	bx	lr

08007ed4 <LoRaMacClassBSetPingSlotInfo>:
 8007ed4:	4770      	bx	lr

08007ed6 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007ed6:	4770      	bx	lr

08007ed8 <LoRaMacClassBResumeBeaconing>:
 8007ed8:	4770      	bx	lr

08007eda <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007eda:	2002      	movs	r0, #2
 8007edc:	4770      	bx	lr

08007ede <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007ede:	2002      	movs	r0, #2
 8007ee0:	4770      	bx	lr

08007ee2 <LoRaMacMibClassBSetRequestConfirm>:
 8007ee2:	2002      	movs	r0, #2
 8007ee4:	4770      	bx	lr

08007ee6 <LoRaMacClassBPingSlotInfoAns>:
 8007ee6:	4770      	bx	lr

08007ee8 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007ee8:	2000      	movs	r0, #0
 8007eea:	4770      	bx	lr

08007eec <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007eec:	4770      	bx	lr

08007eee <LoRaMacClassBDeviceTimeAns>:
 8007eee:	4770      	bx	lr

08007ef0 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	4770      	bx	lr

08007ef4 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4770      	bx	lr

08007ef8 <LoRaMacClassBStopRxSlots>:
 8007ef8:	4770      	bx	lr

08007efa <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 8007efa:	4770      	bx	lr

08007efc <LoRaMacClassBProcess>:
 8007efc:	4770      	bx	lr
	...

08007f00 <LoRaMacCommandsInit>:
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8007f00:	2283      	movs	r2, #131	; 0x83
{
 8007f02:	b510      	push	{r4, lr}
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8007f04:	4c04      	ldr	r4, [pc, #16]	; (8007f18 <LoRaMacCommandsInit+0x18>)
 8007f06:	2100      	movs	r1, #0
 8007f08:	0020      	movs	r0, r4
 8007f0a:	0092      	lsls	r2, r2, #2
 8007f0c:	f7fc fcda 	bl	80048c4 <memset1>
    list->First = NULL;
 8007f10:	2000      	movs	r0, #0
 8007f12:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 8007f14:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 8007f16:	bd10      	pop	{r4, pc}
 8007f18:	20001064 	.word	0x20001064

08007f1c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8007f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f1e:	0005      	movs	r5, r0
 8007f20:	0016      	movs	r6, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8007f22:	2701      	movs	r7, #1
{
 8007f24:	9101      	str	r1, [sp, #4]
    if( payload == NULL )
 8007f26:	2900      	cmp	r1, #0
 8007f28:	d039      	beq.n	8007f9e <LoRaMacCommandsAddCmd+0x82>
 8007f2a:	2400      	movs	r4, #0
 8007f2c:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8007f2e:	0122      	lsls	r2, r4, #4
 8007f30:	0018      	movs	r0, r3
 8007f32:	4694      	mov	ip, r2
 8007f34:	001a      	movs	r2, r3
 8007f36:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 8007f38:	7817      	ldrb	r7, [r2, #0]
 8007f3a:	2f00      	cmp	r7, #0
 8007f3c:	d131      	bne.n	8007fa2 <LoRaMacCommandsAddCmd+0x86>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8007f3e:	3201      	adds	r2, #1
 8007f40:	4282      	cmp	r2, r0
 8007f42:	d1f9      	bne.n	8007f38 <LoRaMacCommandsAddCmd+0x1c>
    if( list->First == NULL )
 8007f44:	481b      	ldr	r0, [pc, #108]	; (8007fb4 <LoRaMacCommandsAddCmd+0x98>)
 8007f46:	6802      	ldr	r2, [r0, #0]
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d100      	bne.n	8007f4e <LoRaMacCommandsAddCmd+0x32>
        list->First = element;
 8007f4c:	6003      	str	r3, [r0, #0]
    if( list->Last )
 8007f4e:	6842      	ldr	r2, [r0, #4]
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	d000      	beq.n	8007f56 <LoRaMacCommandsAddCmd+0x3a>
        list->Last->Next = element;
 8007f54:	6013      	str	r3, [r2, #0]
    element->Next = NULL;
 8007f56:	0122      	lsls	r2, r4, #4
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 8007f58:	3401      	adds	r4, #1
    list->Last = element;
 8007f5a:	6043      	str	r3, [r0, #4]
    newCmd->PayloadSize = payloadSize;
 8007f5c:	0123      	lsls	r3, r4, #4
 8007f5e:	50c6      	str	r6, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8007f60:	4663      	mov	r3, ip
    element->Next = NULL;
 8007f62:	2100      	movs	r1, #0
 8007f64:	1882      	adds	r2, r0, r2
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8007f66:	330d      	adds	r3, #13
    element->Next = NULL;
 8007f68:	6091      	str	r1, [r2, #8]
    newCmd->CID = cid;
 8007f6a:	7315      	strb	r5, [r2, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8007f6c:	18c0      	adds	r0, r0, r3
 8007f6e:	9901      	ldr	r1, [sp, #4]
 8007f70:	b2b2      	uxth	r2, r6
 8007f72:	f7fc fc92 	bl	800489a <memcpy1>
 8007f76:	2300      	movs	r3, #0
 8007f78:	2d11      	cmp	r5, #17
 8007f7a:	d806      	bhi.n	8007f8a <LoRaMacCommandsAddCmd+0x6e>
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	40ab      	lsls	r3, r5
 8007f80:	4a0d      	ldr	r2, [pc, #52]	; (8007fb8 <LoRaMacCommandsAddCmd+0x9c>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	4193      	sbcs	r3, r2
 8007f88:	b2db      	uxtb	r3, r3
    newCmd->IsSticky = IsSticky( cid );
 8007f8a:	490a      	ldr	r1, [pc, #40]	; (8007fb4 <LoRaMacCommandsAddCmd+0x98>)
 8007f8c:	0124      	lsls	r4, r4, #4
 8007f8e:	190c      	adds	r4, r1, r4
 8007f90:	7123      	strb	r3, [r4, #4]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8007f92:	2382      	movs	r3, #130	; 0x82
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	58ca      	ldr	r2, [r1, r3]
 8007f98:	3201      	adds	r2, #1
 8007f9a:	1996      	adds	r6, r2, r6
 8007f9c:	50ce      	str	r6, [r1, r3]

    return LORAMAC_COMMANDS_SUCCESS;
}
 8007f9e:	0038      	movs	r0, r7
 8007fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 8007fa2:	3401      	adds	r4, #1
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	2c20      	cmp	r4, #32
 8007fa8:	d1c1      	bne.n	8007f2e <LoRaMacCommandsAddCmd+0x12>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8007faa:	2702      	movs	r7, #2
 8007fac:	e7f7      	b.n	8007f9e <LoRaMacCommandsAddCmd+0x82>
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	2000106c 	.word	0x2000106c
 8007fb4:	20001064 	.word	0x20001064
 8007fb8:	00020720 	.word	0x00020720

08007fbc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8007fbc:	b570      	push	{r4, r5, r6, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8007fbe:	2401      	movs	r4, #1
    if( macCmd == NULL )
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d022      	beq.n	800800a <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 8007fc4:	4a12      	ldr	r2, [pc, #72]	; (8008010 <LoRaMacCommandsRemoveCmd+0x54>)
 8007fc6:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 8007fc8:	4298      	cmp	r0, r3
 8007fca:	d104      	bne.n	8007fd6 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 8007fcc:	6803      	ldr	r3, [r0, #0]
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e005      	b.n	8007fe0 <LoRaMacCommandsRemoveCmd+0x24>
 8007fd4:	000b      	movs	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <LoRaMacCommandsRemoveCmd+0x24>
 8007fda:	6819      	ldr	r1, [r3, #0]
 8007fdc:	4288      	cmp	r0, r1
 8007fde:	d1f9      	bne.n	8007fd4 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 8007fe0:	6851      	ldr	r1, [r2, #4]
 8007fe2:	4288      	cmp	r0, r1
 8007fe4:	d100      	bne.n	8007fe8 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 8007fe6:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 8007fec:	6801      	ldr	r1, [r0, #0]
 8007fee:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8007ff0:	2182      	movs	r1, #130	; 0x82
    element->Next = NULL;
 8007ff2:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8007ff4:	0089      	lsls	r1, r1, #2
 8007ff6:	5853      	ldr	r3, [r2, r1]
 8007ff8:	6885      	ldr	r5, [r0, #8]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	1b5b      	subs	r3, r3, r5
    element->Next = NULL;
 8007ffe:	6004      	str	r4, [r0, #0]
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8008000:	5053      	str	r3, [r2, r1]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8008002:	2210      	movs	r2, #16
 8008004:	0021      	movs	r1, r4
 8008006:	f7fc fc5d 	bl	80048c4 <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800800a:	0020      	movs	r0, r4
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	20001064 	.word	0x20001064

08008014 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8008014:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 8008018:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800801a:	2800      	cmp	r0, #0
 800801c:	d100      	bne.n	8008020 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800801e:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 8008020:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 8008022:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 8008028:	f7ff ffc8 	bl	8007fbc <LoRaMacCommandsRemoveCmd>
{
 800802c:	0020      	movs	r0, r4
 800802e:	e7f4      	b.n	800801a <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 8008030:	20001064 	.word	0x20001064

08008034 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	2401      	movs	r4, #1
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008038:	4b08      	ldr	r3, [pc, #32]	; (800805c <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
 800803a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800803c:	2800      	cmp	r0, #0
 800803e:	d100      	bne.n	8008042 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008040:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 8008042:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 8008044:	6805      	ldr	r5, [r0, #0]
    switch( cid )
 8008046:	2b11      	cmp	r3, #17
 8008048:	d806      	bhi.n	8008058 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>
 800804a:	0022      	movs	r2, r4
 800804c:	409a      	lsls	r2, r3
 800804e:	4b04      	ldr	r3, [pc, #16]	; (8008060 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
 8008050:	421a      	tst	r2, r3
 8008052:	d001      	beq.n	8008058 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>
            LoRaMacCommandsRemoveCmd( curElement );
 8008054:	f7ff ffb2 	bl	8007fbc <LoRaMacCommandsRemoveCmd>
{
 8008058:	0028      	movs	r0, r5
 800805a:	e7ef      	b.n	800803c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 800805c:	20001064 	.word	0x20001064
 8008060:	00020720 	.word	0x00020720

08008064 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8008064:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008066:	2001      	movs	r0, #1
    if( size == NULL )
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <LoRaMacCommandsGetSizeSerializedCmds+0x14>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800806c:	2282      	movs	r2, #130	; 0x82
    return LORAMAC_COMMANDS_SUCCESS;
 800806e:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 8008070:	4902      	ldr	r1, [pc, #8]	; (800807c <LoRaMacCommandsGetSizeSerializedCmds+0x18>)
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	588a      	ldr	r2, [r1, r2]
 8008076:	601a      	str	r2, [r3, #0]
}
 8008078:	4770      	bx	lr
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	20001064 	.word	0x20001064

08008080 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8008080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008082:	000f      	movs	r7, r1
 8008084:	9001      	str	r0, [sp, #4]
 8008086:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008088:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800808a:	2a00      	cmp	r2, #0
 800808c:	d00a      	beq.n	80080a4 <LoRaMacCommandsSerializeCmds+0x24>
 800808e:	2900      	cmp	r1, #0
 8008090:	d008      	beq.n	80080a4 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <LoRaMacCommandsSerializeCmds+0x60>)
 8008094:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 8008096:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8008098:	2c00      	cmp	r4, #0
 800809a:	d104      	bne.n	80080a6 <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800809c:	0038      	movs	r0, r7
 800809e:	f7ff ffe1 	bl	8008064 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80080a2:	2000      	movs	r0, #0
}
 80080a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80080a6:	9a01      	ldr	r2, [sp, #4]
 80080a8:	1ad1      	subs	r1, r2, r3
 80080aa:	68a2      	ldr	r2, [r4, #8]
 80080ac:	3201      	adds	r2, #1
 80080ae:	4291      	cmp	r1, r2
 80080b0:	d30e      	bcc.n	80080d0 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 80080b2:	7922      	ldrb	r2, [r4, #4]
 80080b4:	1c5d      	adds	r5, r3, #1
 80080b6:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80080b8:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 80080ba:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80080bc:	b29a      	uxth	r2, r3
 80080be:	1d61      	adds	r1, r4, #5
 80080c0:	1970      	adds	r0, r6, r5
 80080c2:	f7fc fbea 	bl	800489a <memcpy1>
            itr += curElement->PayloadSize;
 80080c6:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 80080c8:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 80080ca:	18ed      	adds	r5, r5, r3
 80080cc:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 80080ce:	e7e3      	b.n	8008098 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 80080d0:	0020      	movs	r0, r4
 80080d2:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 80080d4:	f7ff ff72 	bl	8007fbc <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 80080d8:	2c00      	cmp	r4, #0
 80080da:	d1f9      	bne.n	80080d0 <LoRaMacCommandsSerializeCmds+0x50>
 80080dc:	e7de      	b.n	800809c <LoRaMacCommandsSerializeCmds+0x1c>
 80080de:	46c0      	nop			; (mov r8, r8)
 80080e0:	20001064 	.word	0x20001064

080080e4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80080e4:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80080e6:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80080ec:	4a07      	ldr	r2, [pc, #28]	; (800810c <LoRaMacCommandsStickyCmdsPending+0x28>)
 80080ee:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d005      	beq.n	8008104 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 80080f8:	7b02      	ldrb	r2, [r0, #12]
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	d003      	beq.n	8008106 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80080fe:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 8008100:	2000      	movs	r0, #0
            *cmdsPending = true;
 8008102:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008104:	4770      	bx	lr
        curElement = curElement->Next;
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	e7f4      	b.n	80080f4 <LoRaMacCommandsStickyCmdsPending+0x10>
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	20001064 	.word	0x20001064

08008110 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 8008110:	3802      	subs	r0, #2
 8008112:	b2c3      	uxtb	r3, r0
{
 8008114:	2000      	movs	r0, #0
 8008116:	2b11      	cmp	r3, #17
 8008118:	d801      	bhi.n	800811e <LoRaMacCommandsGetCmdSize+0xe>
 800811a:	4a01      	ldr	r2, [pc, #4]	; (8008120 <LoRaMacCommandsGetCmdSize+0x10>)
 800811c:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800811e:	4770      	bx	lr
 8008120:	0801927e 	.word	0x0801927e

08008124 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	0004      	movs	r4, r0
 8008128:	0008      	movs	r0, r1
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800812a:	490c      	ldr	r1, [pc, #48]	; (800815c <GetElement.constprop.0+0x38>)
 800812c:	1c4b      	adds	r3, r1, #1
 800812e:	7fda      	ldrb	r2, [r3, #31]
    if( count == 0 )
 8008130:	2a00      	cmp	r2, #0
 8008132:	d011      	beq.n	8008158 <GetElement.constprop.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008134:	000d      	movs	r5, r1
 8008136:	2300      	movs	r3, #0
 8008138:	351c      	adds	r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800813a:	7806      	ldrb	r6, [r0, #0]
 800813c:	42a6      	cmp	r6, r4
 800813e:	d007      	beq.n	8008150 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008140:	42a8      	cmp	r0, r5
 8008142:	d006      	beq.n	8008152 <GetElement.constprop.0+0x2e>
        bufferPointer++;
 8008144:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8008146:	3301      	adds	r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	429a      	cmp	r2, r3
 800814c:	d1f5      	bne.n	800813a <GetElement.constprop.0+0x16>
        return NULL;
 800814e:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 8008150:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008152:	0008      	movs	r0, r1
 8008154:	300c      	adds	r0, #12
 8008156:	e7f6      	b.n	8008146 <GetElement.constprop.0+0x22>
        return NULL;
 8008158:	0010      	movs	r0, r2
 800815a:	e7f9      	b.n	8008150 <GetElement.constprop.0+0x2c>
 800815c:	20001270 	.word	0x20001270

08008160 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8008160:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 8008162:	4c08      	ldr	r4, [pc, #32]	; (8008184 <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8008164:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 8008166:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008168:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800816a:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800816c:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800816e:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008170:	21ff      	movs	r1, #255	; 0xff
 8008172:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008174:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008176:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008178:	f7fc fba4 	bl	80048c4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	3402      	adds	r4, #2
 8008180:	77e3      	strb	r3, [r4, #31]
}
 8008182:	bd10      	pop	{r4, pc}
 8008184:	20001270 	.word	0x20001270

08008188 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8008188:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800818a:	490e      	ldr	r1, [pc, #56]	; (80081c4 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800818c:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800818e:	1c4d      	adds	r5, r1, #1
 8008190:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 8008192:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8008194:	2c04      	cmp	r4, #4
 8008196:	d813      	bhi.n	80081c0 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8008198:	7810      	ldrb	r0, [r2, #0]
 800819a:	688b      	ldr	r3, [r1, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800819c:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800819e:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80081a0:	7850      	ldrb	r0, [r2, #1]
 80081a2:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80081a4:	78d0      	ldrb	r0, [r2, #3]
 80081a6:	70d8      	strb	r0, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80081a8:	7892      	ldrb	r2, [r2, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081aa:	0008      	movs	r0, r1
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80081ac:	709a      	strb	r2, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80081ae:	000a      	movs	r2, r1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081b0:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80081b2:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80081b4:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081b6:	4283      	cmp	r3, r0
 80081b8:	d000      	beq.n	80081bc <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 80081ba:	1d1a      	adds	r2, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 80081bc:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80081be:	608a      	str	r2, [r1, #8]
}
 80081c0:	bd30      	pop	{r4, r5, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	20001270 	.word	0x20001270

080081c8 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <LoRaMacConfirmQueueRemoveFirst+0x24>)
 80081ca:	1c59      	adds	r1, r3, #1
 80081cc:	7fca      	ldrb	r2, [r1, #31]
    {
        return false;
 80081ce:	1e10      	subs	r0, r2, #0
    if( count == 0 )
 80081d0:	d00b      	beq.n	80081ea <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80081d2:	3a01      	subs	r2, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081d4:	0018      	movs	r0, r3
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80081d6:	77ca      	strb	r2, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80081d8:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80081da:	6859      	ldr	r1, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081dc:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80081de:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081e0:	4281      	cmp	r1, r0
 80081e2:	d000      	beq.n	80081e6 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 80081e4:	1d0a      	adds	r2, r1, #4

    return true;
 80081e6:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80081e8:	605a      	str	r2, [r3, #4]
}
 80081ea:	4770      	bx	lr
 80081ec:	20001270 	.word	0x20001270

080081f0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80081f0:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80081f2:	4b08      	ldr	r3, [pc, #32]	; (8008214 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 80081f4:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80081f6:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 80081f8:	7fd2      	ldrb	r2, [r2, #31]
{
 80081fa:	0008      	movs	r0, r1
    if( count == 0 )
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	d007      	beq.n	8008210 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8008200:	6859      	ldr	r1, [r3, #4]
 8008202:	f7ff ff8f 	bl	8008124 <GetElement.constprop.0>
        if( element != NULL )
 8008206:	2800      	cmp	r0, #0
 8008208:	d002      	beq.n	8008210 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800820a:	2301      	movs	r3, #1
            element->Status = status;
 800820c:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800820e:	7083      	strb	r3, [r0, #2]
        }
    }
}
 8008210:	bd10      	pop	{r4, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	20001270 	.word	0x20001270

08008218 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8008218:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <LoRaMacConfirmQueueGetStatus+0x20>)
 800821c:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800821e:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008220:	2201      	movs	r2, #1
    if( count == 0 )
 8008222:	2900      	cmp	r1, #0
 8008224:	d006      	beq.n	8008234 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8008226:	6859      	ldr	r1, [r3, #4]
 8008228:	f7ff ff7c 	bl	8008124 <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800822c:	2201      	movs	r2, #1
        if( element != NULL )
 800822e:	2800      	cmp	r0, #0
 8008230:	d000      	beq.n	8008234 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 8008232:	7842      	ldrb	r2, [r0, #1]
}
 8008234:	0010      	movs	r0, r2
 8008236:	bd10      	pop	{r4, pc}
 8008238:	20001270 	.word	0x20001270

0800823c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800823c:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800823e:	4a0d      	ldr	r2, [pc, #52]	; (8008274 <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8008240:	1c91      	adds	r1, r2, #2
 8008242:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8008244:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 8008246:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8008248:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 800824a:	2900      	cmp	r1, #0
 800824c:	d00d      	beq.n	800826a <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800824e:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 8008250:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 8008252:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008254:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 8008256:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 8008258:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800825a:	2e00      	cmp	r6, #0
 800825c:	d100      	bne.n	8008260 <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 800825e:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008260:	42a3      	cmp	r3, r4
 8008262:	d003      	beq.n	800826c <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 8008264:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 8008266:	4299      	cmp	r1, r3
 8008268:	d1f5      	bne.n	8008256 <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 800826a:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800826c:	0013      	movs	r3, r2
 800826e:	330c      	adds	r3, #12
 8008270:	e7f9      	b.n	8008266 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	20001270 	.word	0x20001270

08008278 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800827a:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800827c:	6859      	ldr	r1, [r3, #4]
 800827e:	f7ff ff51 	bl	8008124 <GetElement.constprop.0>
 8008282:	1e43      	subs	r3, r0, #1
 8008284:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 8008286:	b2c0      	uxtb	r0, r0
 8008288:	bd10      	pop	{r4, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	20001270 	.word	0x20001270

08008290 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8008290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008292:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8008294:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8008296:	4e13      	ldr	r6, [pc, #76]	; (80082e4 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 8008298:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800829a:	1c73      	adds	r3, r6, #1
 800829c:	7fdb      	ldrb	r3, [r3, #31]
 800829e:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d101      	bne.n	80082aa <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 80082a6:	b005      	add	sp, #20
 80082a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80082aa:	6873      	ldr	r3, [r6, #4]
 80082ac:	7818      	ldrb	r0, [r3, #0]
 80082ae:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80082b0:	7859      	ldrb	r1, [r3, #1]
 80082b2:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80082b4:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 80082b6:	2f00      	cmp	r7, #0
 80082b8:	d00d      	beq.n	80082d6 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80082ba:	6833      	ldr	r3, [r6, #0]
 80082bc:	0028      	movs	r0, r5
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 80082c2:	f7ff ff81 	bl	80081c8 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 80082c6:	2f00      	cmp	r7, #0
 80082c8:	d102      	bne.n	80082d0 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80082ca:	a803      	add	r0, sp, #12
 80082cc:	f7ff ff5c 	bl	8008188 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80082d0:	3401      	adds	r4, #1
 80082d2:	b2e4      	uxtb	r4, r4
 80082d4:	e7e4      	b.n	80082a0 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80082d6:	aa03      	add	r2, sp, #12
 80082d8:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80082da:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80082dc:	78db      	ldrb	r3, [r3, #3]
 80082de:	70d3      	strb	r3, [r2, #3]
 80082e0:	e7ef      	b.n	80082c2 <LoRaMacConfirmQueueHandleCb+0x32>
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	20001270 	.word	0x20001270

080082e8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80082e8:	4b01      	ldr	r3, [pc, #4]	; (80082f0 <LoRaMacConfirmQueueGetCnt+0x8>)
 80082ea:	3301      	adds	r3, #1
 80082ec:	7fd8      	ldrb	r0, [r3, #31]
}
 80082ee:	4770      	bx	lr
 80082f0:	20001270 	.word	0x20001270

080082f4 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 80082f4:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80082f6:	4b03      	ldr	r3, [pc, #12]	; (8008304 <LoRaMacConfirmQueueIsFull+0x10>)
 80082f8:	3301      	adds	r3, #1
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80082fa:	7fdb      	ldrb	r3, [r3, #31]
}
 80082fc:	4298      	cmp	r0, r3
 80082fe:	4180      	sbcs	r0, r0
 8008300:	4240      	negs	r0, r0
 8008302:	4770      	bx	lr
 8008304:	20001270 	.word	0x20001270

08008308 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800830a:	0007      	movs	r7, r0
 800830c:	b085      	sub	sp, #20
 800830e:	000d      	movs	r5, r1
 8008310:	0014      	movs	r4, r2
    uint8_t compBase[16] = { 0 };
 8008312:	2100      	movs	r1, #0
 8008314:	220c      	movs	r2, #12
 8008316:	a801      	add	r0, sp, #4
{
 8008318:	001e      	movs	r6, r3
    uint8_t compBase[16] = { 0 };
 800831a:	f00d fe22 	bl	8015f62 <memset>
    switch( keyID )
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 800831e:	1ffb      	subs	r3, r7, #7
 8008320:	425a      	negs	r2, r3
 8008322:	4153      	adcs	r3, r2
 8008324:	466a      	mov	r2, sp
 8008326:	3301      	adds	r3, #1
 8008328:	7013      	strb	r3, [r2, #0]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800832a:	0a2b      	lsrs	r3, r5, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800832c:	7055      	strb	r5, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800832e:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8008330:	7114      	strb	r4, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8008332:	0a23      	lsrs	r3, r4, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8008334:	71d6      	strb	r6, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8008336:	0c2d      	lsrs	r5, r5, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8008338:	0c24      	lsrs	r4, r4, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800833a:	0a36      	lsrs	r6, r6, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800833c:	70d5      	strb	r5, [r2, #3]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800833e:	7153      	strb	r3, [r2, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8008340:	7194      	strb	r4, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8008342:	7216      	strb	r6, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8008344:	2101      	movs	r1, #1
 8008346:	003a      	movs	r2, r7
 8008348:	4668      	mov	r0, sp
 800834a:	f003 f850 	bl	800b3ee <SecureElementDeriveAndStoreKey>
 800834e:	2800      	cmp	r0, #0
 8008350:	d000      	beq.n	8008354 <DeriveSessionKey10x+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008352:	200e      	movs	r0, #14
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8008354:	b005      	add	sp, #20
 8008356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008358 <PayloadEncrypt>:
{
 8008358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800835a:	b08d      	sub	sp, #52	; 0x34
 800835c:	001d      	movs	r5, r3
 800835e:	ab12      	add	r3, sp, #72	; 0x48
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	9001      	str	r0, [sp, #4]
 8008364:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 8008366:	9b01      	ldr	r3, [sp, #4]
{
 8008368:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800836a:	2009      	movs	r0, #9
{
 800836c:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800836e:	2b00      	cmp	r3, #0
 8008370:	d02b      	beq.n	80083ca <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 8008372:	2600      	movs	r6, #0
 8008374:	220c      	movs	r2, #12
 8008376:	0031      	movs	r1, r6
 8008378:	a805      	add	r0, sp, #20
 800837a:	9604      	str	r6, [sp, #16]
 800837c:	f00d fdf1 	bl	8015f62 <memset>
    uint8_t aBlock[16] = { 0 };
 8008380:	220c      	movs	r2, #12
 8008382:	0031      	movs	r1, r6
 8008384:	a809      	add	r0, sp, #36	; 0x24
 8008386:	9608      	str	r6, [sp, #32]
 8008388:	f00d fdeb 	bl	8015f62 <memset>
    aBlock[0] = 0x01;
 800838c:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800838e:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 8008390:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 8008392:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8008394:	0a2b      	lsrs	r3, r5, #8
 8008396:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8008398:	0c2b      	lsrs	r3, r5, #16
 800839a:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800839c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800839e:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 80083a0:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80083a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80083a8:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80083aa:	0c1b      	lsrs	r3, r3, #16
 80083ac:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80083ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 80083b0:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80083b2:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80083b4:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80083b6:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 80083b8:	0014      	movs	r4, r2
 80083ba:	b2e2      	uxtb	r2, r4
 80083bc:	0113      	lsls	r3, r2, #4
 80083be:	3b10      	subs	r3, #16
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	dc02      	bgt.n	80083ce <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 80083c8:	2000      	movs	r0, #0
}
 80083ca:	b00d      	add	sp, #52	; 0x34
 80083cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 80083ce:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80083d0:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 80083d2:	73c2      	strb	r2, [r0, #15]
        ctr++;
 80083d4:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80083d6:	002b      	movs	r3, r5
 80083d8:	2110      	movs	r1, #16
 80083da:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 80083dc:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80083de:	f002 ff7f 	bl	800b2e0 <SecureElementAesEncrypt>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d115      	bne.n	8008412 <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80083e6:	1c39      	adds	r1, r7, #0
 80083e8:	1c0b      	adds	r3, r1, #0
 80083ea:	2f10      	cmp	r7, #16
 80083ec:	dd00      	ble.n	80083f0 <PayloadEncrypt+0x98>
 80083ee:	2310      	movs	r3, #16
 80083f0:	b21b      	sxth	r3, r3
 80083f2:	4298      	cmp	r0, r3
 80083f4:	db02      	blt.n	80083fc <PayloadEncrypt+0xa4>
        size -= 16;
 80083f6:	3f10      	subs	r7, #16
 80083f8:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 80083fa:	e7de      	b.n	80083ba <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	5c2e      	ldrb	r6, [r5, r0]
 8008400:	181a      	adds	r2, r3, r0
 8008402:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008404:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8008406:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008408:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800840a:	4073      	eors	r3, r6
 800840c:	9e01      	ldr	r6, [sp, #4]
 800840e:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008410:	e7ea      	b.n	80083e8 <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008412:	200e      	movs	r0, #14
 8008414:	e7d9      	b.n	80083ca <PayloadEncrypt+0x72>

08008416 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8008416:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8008418:	2100      	movs	r1, #0
 800841a:	220c      	movs	r2, #12
 800841c:	a801      	add	r0, sp, #4
 800841e:	9100      	str	r1, [sp, #0]
 8008420:	f00d fd9f 	bl	8015f62 <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8008424:	227f      	movs	r2, #127	; 0x7f
 8008426:	2108      	movs	r1, #8
 8008428:	4668      	mov	r0, sp
 800842a:	f002 ffe0 	bl	800b3ee <SecureElementDeriveAndStoreKey>
 800842e:	2800      	cmp	r0, #0
 8008430:	d000      	beq.n	8008434 <LoRaMacCryptoDeriveMcKEKey.part.0+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008432:	200e      	movs	r0, #14
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8008434:	b005      	add	sp, #20
 8008436:	bd00      	pop	{pc}

08008438 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 8008438:	3801      	subs	r0, #1
 800843a:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800843c:	b500      	push	{lr}
    switch( fCntID )
 800843e:	2806      	cmp	r0, #6
 8008440:	d80c      	bhi.n	800845c <GetLastFcntDown.constprop.0+0x24>
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <GetLastFcntDown.constprop.0+0x4c>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 8008444:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 8008446:	f7f7 fe71 	bl	800012c <__gnu_thumb1_case_uqi>
 800844a:	0b04      	.short	0x0b04
 800844c:	1816130f 	.word	0x1816130f
 8008450:	1a          	.byte	0x1a
 8008451:	00          	.byte	0x00
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8008456:	691a      	ldr	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c
    return LORAMAC_CRYPTO_SUCCESS;
 800845a:	2300      	movs	r3, #0
}
 800845c:	0018      	movs	r0, r3
 800845e:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8008464:	695a      	ldr	r2, [r3, #20]
 8008466:	e7f7      	b.n	8008458 <GetLastFcntDown.constprop.0+0x20>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	e7f3      	b.n	8008458 <GetLastFcntDown.constprop.0+0x20>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8008470:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 8008472:	600b      	str	r3, [r1, #0]
 8008474:	e7f1      	b.n	800845a <GetLastFcntDown.constprop.0+0x22>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	e7fb      	b.n	8008472 <GetLastFcntDown.constprop.0+0x3a>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	e7f9      	b.n	8008472 <GetLastFcntDown.constprop.0+0x3a>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	e7f7      	b.n	8008472 <GetLastFcntDown.constprop.0+0x3a>
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	20001294 	.word	0x20001294

08008488 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8008488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848a:	b0c7      	sub	sp, #284	; 0x11c
 800848c:	0007      	movs	r7, r0
 800848e:	000c      	movs	r4, r1
 8008490:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008492:	2009      	movs	r0, #9
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8008494:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 8008496:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 8008498:	2f00      	cmp	r7, #0
 800849a:	d042      	beq.n	8008522 <VerifyCmacB0.constprop.0+0x9a>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800849c:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800849e:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4299      	cmp	r1, r3
 80084a4:	d83d      	bhi.n	8008522 <VerifyCmacB0.constprop.0+0x9a>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80084a6:	2288      	movs	r2, #136	; 0x88
 80084a8:	2100      	movs	r1, #0
 80084aa:	0052      	lsls	r2, r2, #1
 80084ac:	a802      	add	r0, sp, #8
 80084ae:	f7fc fa09 	bl	80048c4 <memset1>
    b0[0] = 0x49;
 80084b2:	2349      	movs	r3, #73	; 0x49
 80084b4:	aa02      	add	r2, sp, #8
 80084b6:	7013      	strb	r3, [r2, #0]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	d034      	beq.n	8008526 <VerifyCmacB0.constprop.0+0x9e>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 80084bc:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <VerifyCmacB0.constprop.0+0xa8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 80084c2:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 80084ca:	2300      	movs	r3, #0
 80084cc:	aa02      	add	r2, sp, #8
 80084ce:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 80084d0:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 80084d2:	2201      	movs	r2, #1
 80084d4:	a902      	add	r1, sp, #8
 80084d6:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80084d8:	0a32      	lsrs	r2, r6, #8
 80084da:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80084dc:	0c32      	lsrs	r2, r6, #16
 80084de:	720a      	strb	r2, [r1, #8]
    b0[10] = fCnt & 0xFF;
 80084e0:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[6] = devAddr & 0xFF;
 80084e2:	718e      	strb	r6, [r1, #6]
    b0[10] = fCnt & 0xFF;
 80084e4:	728a      	strb	r2, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80084e6:	0a12      	lsrs	r2, r2, #8
 80084e8:	72ca      	strb	r2, [r1, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80084ea:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80084ec:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80084ee:	0c12      	lsrs	r2, r2, #16
 80084f0:	730a      	strb	r2, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80084f2:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[14] = 0x00;
 80084f4:	738b      	strb	r3, [r1, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80084f6:	0e15      	lsrs	r5, r2, #24
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80084f8:	724e      	strb	r6, [r1, #9]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80084fa:	0022      	movs	r2, r4
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80084fc:	734d      	strb	r5, [r1, #13]
    b0[15] = msgLen & 0xFF;
 80084fe:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8008500:	a806      	add	r0, sp, #24
 8008502:	0039      	movs	r1, r7
 8008504:	f7fc f9c9 	bl	800489a <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8008508:	0021      	movs	r1, r4
 800850a:	3110      	adds	r1, #16
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8008510:	b289      	uxth	r1, r1
 8008512:	a802      	add	r0, sp, #8
 8008514:	f002 fecb 	bl	800b2ae <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8008518:	2800      	cmp	r0, #0
 800851a:	d002      	beq.n	8008522 <VerifyCmacB0.constprop.0+0x9a>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800851c:	2801      	cmp	r0, #1
 800851e:	d000      	beq.n	8008522 <VerifyCmacB0.constprop.0+0x9a>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008520:	200e      	movs	r0, #14
}
 8008522:	b047      	add	sp, #284	; 0x11c
 8008524:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 8008526:	ab02      	add	r3, sp, #8
 8008528:	705d      	strb	r5, [r3, #1]
        b0[2] = 0x00;
 800852a:	709d      	strb	r5, [r3, #2]
 800852c:	e7cd      	b.n	80084ca <VerifyCmacB0.constprop.0+0x42>
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	20001294 	.word	0x20001294

08008534 <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8008534:	2308      	movs	r3, #8
{
 8008536:	b510      	push	{r4, lr}
    if( nvm == NULL )
 8008538:	2800      	cmp	r0, #0
 800853a:	d015      	beq.n	8008568 <LoRaMacCryptoInit+0x34>
    CryptoNvm = nvm;
 800853c:	4c0b      	ldr	r4, [pc, #44]	; (800856c <LoRaMacCryptoInit+0x38>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800853e:	2234      	movs	r2, #52	; 0x34
 8008540:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 8008542:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8008544:	f7fc f9be 	bl	80048c4 <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8008548:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800854a:	4a09      	ldr	r2, [pc, #36]	; (8008570 <LoRaMacCryptoInit+0x3c>)
    CryptoNvm->FCntList.FCntUp = 0;
 800854c:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800854e:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008550:	2201      	movs	r2, #1
 8008552:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 8008554:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008556:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008558:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800855a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800855c:	62da      	str	r2, [r3, #44]	; 0x2c
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800855e:	61da      	str	r2, [r3, #28]
 8008560:	621a      	str	r2, [r3, #32]
 8008562:	625a      	str	r2, [r3, #36]	; 0x24
 8008564:	629a      	str	r2, [r3, #40]	; 0x28
    return LORAMAC_CRYPTO_SUCCESS;
 8008566:	0003      	movs	r3, r0
}
 8008568:	0018      	movs	r0, r3
 800856a:	bd10      	pop	{r4, pc}
 800856c:	20001294 	.word	0x20001294
 8008570:	01010100 	.word	0x01010100

08008574 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <LoRaMacCryptoSetLrWanVersion+0xc>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6018      	str	r0, [r3, #0]
}
 800857a:	2000      	movs	r0, #0
 800857c:	4770      	bx	lr
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	20001294 	.word	0x20001294

08008584 <LoRaMacCryptoGetFCntUp>:
{
 8008584:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008586:	2009      	movs	r0, #9
    if( currentUp == NULL )
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800858c:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800858e:	4a03      	ldr	r2, [pc, #12]	; (800859c <LoRaMacCryptoGetFCntUp+0x18>)
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	68d2      	ldr	r2, [r2, #12]
 8008594:	3201      	adds	r2, #1
 8008596:	601a      	str	r2, [r3, #0]
}
 8008598:	4770      	bx	lr
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	20001294 	.word	0x20001294

080085a0 <LoRaMacCryptoGetFCntDown>:
    uint32_t lastDown = 0;
 80085a0:	2300      	movs	r3, #0
{
 80085a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085a4:	0006      	movs	r6, r0
 80085a6:	000d      	movs	r5, r1
 80085a8:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 80085aa:	2009      	movs	r0, #9
    uint32_t lastDown = 0;
 80085ac:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d009      	beq.n	80085c6 <LoRaMacCryptoGetFCntDown+0x26>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80085b2:	0030      	movs	r0, r6
 80085b4:	a901      	add	r1, sp, #4
 80085b6:	f7ff ff3f 	bl	8008438 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d103      	bne.n	80085c6 <LoRaMacCryptoGetFCntDown+0x26>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	d101      	bne.n	80085c8 <LoRaMacCryptoGetFCntDown+0x28>
        *currentDown = frameFcnt;
 80085c4:	6025      	str	r5, [r4, #0]
}
 80085c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	1aaa      	subs	r2, r5, r2
        if( fCntDiff > 0 )
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	dd02      	ble.n	80085d6 <LoRaMacCryptoGetFCntDown+0x36>
            *currentDown = lastDown + fCntDiff;
 80085d0:	189b      	adds	r3, r3, r2
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	e7f7      	b.n	80085c6 <LoRaMacCryptoGetFCntDown+0x26>
        else if( fCntDiff == 0 )
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	d102      	bne.n	80085e0 <LoRaMacCryptoGetFCntDown+0x40>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80085da:	2007      	movs	r0, #7
            *currentDown = lastDown;
 80085dc:	6023      	str	r3, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80085de:	e7f2      	b.n	80085c6 <LoRaMacCryptoGetFCntDown+0x26>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80085e0:	0c19      	lsrs	r1, r3, #16
 80085e2:	2380      	movs	r3, #128	; 0x80
 80085e4:	0409      	lsls	r1, r1, #16
 80085e6:	025b      	lsls	r3, r3, #9
 80085e8:	18c9      	adds	r1, r1, r3
 80085ea:	1949      	adds	r1, r1, r5
 80085ec:	6021      	str	r1, [r4, #0]
 80085ee:	e7ea      	b.n	80085c6 <LoRaMacCryptoGetFCntDown+0x26>

080085f0 <LoRaMacCryptoSetMulticastReference>:
{
 80085f0:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 80085f2:	2009      	movs	r0, #9
    if( multicastList == NULL )
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <LoRaMacCryptoSetMulticastReference+0x22>
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <LoRaMacCryptoSetMulticastReference+0x24>)
    return LORAMAC_CRYPTO_SUCCESS;
 80085fa:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	0011      	movs	r1, r2
 8008600:	311c      	adds	r1, #28
 8008602:	6219      	str	r1, [r3, #32]
 8008604:	3104      	adds	r1, #4
 8008606:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008608:	3104      	adds	r1, #4
 800860a:	6799      	str	r1, [r3, #120]	; 0x78
 800860c:	3228      	adds	r2, #40	; 0x28
 800860e:	3384      	adds	r3, #132	; 0x84
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	4770      	bx	lr
 8008614:	20001294 	.word	0x20001294

08008618 <LoRaMacCryptoPrepareJoinRequest>:
{
 8008618:	b513      	push	{r0, r1, r4, lr}
 800861a:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800861c:	2009      	movs	r0, #9
    if( macMsg == 0 )
 800861e:	2c00      	cmp	r4, #0
 8008620:	d01d      	beq.n	800865e <LoRaMacCryptoPrepareJoinRequest+0x46>
    CryptoNvm->DevNonce++;
 8008622:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <LoRaMacCryptoPrepareJoinRequest+0x48>)
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008624:	0020      	movs	r0, r4
    CryptoNvm->DevNonce++;
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	8893      	ldrh	r3, [r2, #4]
 800862a:	3301      	adds	r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8008630:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008632:	f000 fa4e 	bl	8008ad2 <LoRaMacSerializerJoinRequest>
 8008636:	2800      	cmp	r0, #0
 8008638:	d110      	bne.n	800865c <LoRaMacCryptoPrepareJoinRequest+0x44>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800863a:	0023      	movs	r3, r4
 800863c:	3318      	adds	r3, #24
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	2213      	movs	r2, #19
 8008642:	2301      	movs	r3, #1
 8008644:	6821      	ldr	r1, [r4, #0]
 8008646:	f002 fe27 	bl	800b298 <SecureElementComputeAesCmac>
 800864a:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800864c:	200e      	movs	r0, #14
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800864e:	2b00      	cmp	r3, #0
 8008650:	d105      	bne.n	800865e <LoRaMacCryptoPrepareJoinRequest+0x46>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008652:	0020      	movs	r0, r4
 8008654:	f000 fa3d 	bl	8008ad2 <LoRaMacSerializerJoinRequest>
 8008658:	2800      	cmp	r0, #0
 800865a:	d000      	beq.n	800865e <LoRaMacCryptoPrepareJoinRequest+0x46>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800865c:	2010      	movs	r0, #16
}
 800865e:	bd16      	pop	{r1, r2, r4, pc}
 8008660:	20001294 	.word	0x20001294

08008664 <LoRaMacCryptoSecureMessage>:
{
 8008664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008666:	0005      	movs	r5, r0
 8008668:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800866a:	2009      	movs	r0, #9
{
 800866c:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01f      	beq.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8008672:	4b2e      	ldr	r3, [pc, #184]	; (800872c <LoRaMacCryptoSecureMessage+0xc8>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8008674:	3803      	subs	r0, #3
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	42ab      	cmp	r3, r5
 800867c:	d819      	bhi.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800867e:	1c62      	adds	r2, r4, #1
 8008680:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8008682:	1e51      	subs	r1, r2, #1
 8008684:	418a      	sbcs	r2, r1
 8008686:	1812      	adds	r2, r2, r0
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8008688:	42ab      	cmp	r3, r5
 800868a:	d306      	bcc.n	800869a <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800868c:	0020      	movs	r0, r4
 800868e:	f000 fa55 	bl	8008b3c <LoRaMacSerializerData>
 8008692:	1e03      	subs	r3, r0, #0
 8008694:	d00f      	beq.n	80086b6 <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008696:	2010      	movs	r0, #16
 8008698:	e00b      	b.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800869a:	0023      	movs	r3, r4
 800869c:	3328      	adds	r3, #40	; 0x28
 800869e:	7819      	ldrb	r1, [r3, #0]
 80086a0:	2300      	movs	r3, #0
 80086a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	9501      	str	r5, [sp, #4]
 80086a8:	68a3      	ldr	r3, [r4, #8]
 80086aa:	f7ff fe55 	bl	8008358 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0ec      	beq.n	800868c <LoRaMacCryptoSecureMessage+0x28>
}
 80086b2:	b009      	add	sp, #36	; 0x24
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80086b6:	7927      	ldrb	r7, [r4, #4]
 80086b8:	6821      	ldr	r1, [r4, #0]
 80086ba:	3f04      	subs	r7, #4
 80086bc:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_NPE;
 80086be:	2009      	movs	r0, #9
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80086c0:	9203      	str	r2, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80086c2:	2900      	cmp	r1, #0
 80086c4:	d0f5      	beq.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80086c6:	2680      	movs	r6, #128	; 0x80
 80086c8:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80086ca:	200d      	movs	r0, #13
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80086cc:	0076      	lsls	r6, r6, #1
 80086ce:	42b2      	cmp	r2, r6
 80086d0:	d8ef      	bhi.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 80086d2:	2249      	movs	r2, #73	; 0x49
 80086d4:	a804      	add	r0, sp, #16
        b0[1] = 0x00;
 80086d6:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 80086d8:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 80086da:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 80086dc:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 80086de:	7143      	strb	r3, [r0, #5]
    b0[14] = 0x00;
 80086e0:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80086e2:	0023      	movs	r3, r4
 80086e4:	68a6      	ldr	r6, [r4, #8]
    b0[0] = 0x49;
 80086e6:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80086e8:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 80086ea:	7186      	strb	r6, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80086ec:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80086ee:	0c32      	lsrs	r2, r6, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80086f0:	0e36      	lsrs	r6, r6, #24
 80086f2:	7246      	strb	r6, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80086f4:	0a2e      	lsrs	r6, r5, #8
 80086f6:	72c6      	strb	r6, [r0, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80086f8:	0c2e      	lsrs	r6, r5, #16
 80086fa:	7306      	strb	r6, [r0, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80086fc:	332c      	adds	r3, #44	; 0x2c
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80086fe:	0e2e      	lsrs	r6, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008700:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 8008702:	7285      	strb	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8008704:	7346      	strb	r6, [r0, #13]
    b0[15] = msgLen & 0xFF;
 8008706:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008708:	9a03      	ldr	r2, [sp, #12]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2306      	movs	r3, #6
 800870e:	f002 fdc3 	bl	800b298 <SecureElementComputeAesCmac>
 8008712:	2800      	cmp	r0, #0
 8008714:	d001      	beq.n	800871a <LoRaMacCryptoSecureMessage+0xb6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008716:	200e      	movs	r0, #14
 8008718:	e7cb      	b.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800871a:	0020      	movs	r0, r4
 800871c:	f000 fa0e 	bl	8008b3c <LoRaMacSerializerData>
 8008720:	2800      	cmp	r0, #0
 8008722:	d1b8      	bne.n	8008696 <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 8008724:	4b01      	ldr	r3, [pc, #4]	; (800872c <LoRaMacCryptoSecureMessage+0xc8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800872a:	e7c2      	b.n	80086b2 <LoRaMacCryptoSecureMessage+0x4e>
 800872c:	20001294 	.word	0x20001294

08008730 <LoRaMacCryptoUnsecureMessage>:
{
 8008730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008732:	b089      	sub	sp, #36	; 0x24
 8008734:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008736:	001c      	movs	r4, r3
 8008738:	0007      	movs	r7, r0
 800873a:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800873c:	2309      	movs	r3, #9
{
 800873e:	9205      	str	r2, [sp, #20]
    if( macMsg == 0 )
 8008740:	2d00      	cmp	r5, #0
 8008742:	d008      	beq.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 8008744:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8008746:	0010      	movs	r0, r2
 8008748:	a907      	add	r1, sp, #28
    uint32_t lastDown = 0;
 800874a:	9307      	str	r3, [sp, #28]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800874c:	f7ff fe74 	bl	8008438 <GetLastFcntDown.constprop.0>
 8008750:	2800      	cmp	r0, #0
 8008752:	d003      	beq.n	800875c <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8008754:	2306      	movs	r3, #6
}
 8008756:	0018      	movs	r0, r3
 8008758:	b009      	add	sp, #36	; 0x24
 800875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800875c:	9b07      	ldr	r3, [sp, #28]
 800875e:	429c      	cmp	r4, r3
 8008760:	d801      	bhi.n	8008766 <LoRaMacCryptoUnsecureMessage+0x36>
 8008762:	3301      	adds	r3, #1
 8008764:	d1f6      	bne.n	8008754 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8008766:	0028      	movs	r0, r5
 8008768:	f000 f958 	bl	8008a1c <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800876c:	230f      	movs	r3, #15
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800876e:	2800      	cmp	r0, #0
 8008770:	d1f1      	bne.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 8008772:	4a28      	ldr	r2, [pc, #160]	; (8008814 <LoRaMacCryptoUnsecureMessage+0xe4>)
 8008774:	0081      	lsls	r1, r0, #2
 8008776:	5c8b      	ldrb	r3, [r1, r2]
 8008778:	42bb      	cmp	r3, r7
 800877a:	d138      	bne.n	80087ee <LoRaMacCryptoUnsecureMessage+0xbe>
    if( address != macMsg->FHDR.DevAddr )
 800877c:	68a8      	ldr	r0, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800877e:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 8008780:	42b0      	cmp	r0, r6
 8008782:	d1e8      	bne.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <LoRaMacCryptoUnsecureMessage+0xe8>)
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8008786:	7b28      	ldrb	r0, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008788:	681b      	ldr	r3, [r3, #0]
        isAck = false;
 800878a:	0940      	lsrs	r0, r0, #5
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800878c:	789b      	ldrb	r3, [r3, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800878e:	1852      	adds	r2, r2, r1
        isAck = false;
 8008790:	1e5f      	subs	r7, r3, #1
 8008792:	41bb      	sbcs	r3, r7
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008794:	7929      	ldrb	r1, [r5, #4]
        isAck = false;
 8008796:	4003      	ands	r3, r0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008798:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800879a:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800879c:	3904      	subs	r1, #4
 800879e:	7892      	ldrb	r2, [r2, #2]
 80087a0:	9002      	str	r0, [sp, #8]
 80087a2:	9401      	str	r4, [sp, #4]
 80087a4:	9600      	str	r6, [sp, #0]
 80087a6:	6828      	ldr	r0, [r5, #0]
 80087a8:	b289      	uxth	r1, r1
 80087aa:	f7ff fe6d 	bl	8008488 <VerifyCmacB0.constprop.0>
 80087ae:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80087b0:	d1d1      	bne.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 80087b2:	1c6b      	adds	r3, r5, #1
 80087b4:	7fdb      	ldrb	r3, [r3, #31]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d100      	bne.n	80087bc <LoRaMacCryptoUnsecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 80087ba:	2706      	movs	r7, #6
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80087bc:	002b      	movs	r3, r5
 80087be:	3328      	adds	r3, #40	; 0x28
 80087c0:	7819      	ldrb	r1, [r3, #0]
 80087c2:	2301      	movs	r3, #1
 80087c4:	9401      	str	r4, [sp, #4]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	003a      	movs	r2, r7
 80087ca:	0033      	movs	r3, r6
 80087cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80087ce:	f7ff fdc3 	bl	8008358 <PayloadEncrypt>
 80087d2:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80087d4:	d1bf      	bne.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 80087d6:	9805      	ldr	r0, [sp, #20]
 80087d8:	3801      	subs	r0, #1
 80087da:	2806      	cmp	r0, #6
 80087dc:	d8bb      	bhi.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
 80087de:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <LoRaMacCryptoUnsecureMessage+0xe8>)
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 80087e0:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 80087e2:	f7f7 fca3 	bl	800012c <__gnu_thumb1_case_uqi>
 80087e6:	0b09      	.short	0x0b09
 80087e8:	13110f0d 	.word	0x13110f0d
 80087ec:	15          	.byte	0x15
 80087ed:	00          	.byte	0x00
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80087ee:	3001      	adds	r0, #1
 80087f0:	2805      	cmp	r0, #5
 80087f2:	d1bf      	bne.n	8008774 <LoRaMacCryptoUnsecureMessage+0x44>
 80087f4:	230b      	movs	r3, #11
 80087f6:	e7ae      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80087f8:	6114      	str	r4, [r2, #16]
            break;
 80087fa:	e7ac      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80087fc:	6154      	str	r4, [r2, #20]
            break;
 80087fe:	e7aa      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 8008800:	6194      	str	r4, [r2, #24]
            break;
 8008802:	e7a8      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8008804:	61d4      	str	r4, [r2, #28]
            break;
 8008806:	e7a6      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 8008808:	6214      	str	r4, [r2, #32]
            break;
 800880a:	e7a4      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 800880c:	6254      	str	r4, [r2, #36]	; 0x24
            break;
 800880e:	e7a2      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 8008810:	6294      	str	r4, [r2, #40]	; 0x28
            break;
 8008812:	e7a0      	b.n	8008756 <LoRaMacCryptoUnsecureMessage+0x26>
 8008814:	200000a4 	.word	0x200000a4
 8008818:	20001294 	.word	0x20001294

0800881c <LoRaMacCryptoDeriveMcRootKey>:
{
 800881c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881e:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8008820:	200a      	movs	r0, #10
    if( keyID != APP_KEY )
 8008822:	2900      	cmp	r1, #0
 8008824:	d111      	bne.n	800884a <LoRaMacCryptoDeriveMcRootKey+0x2e>
    uint8_t compBase[16] = { 0 };
 8008826:	220c      	movs	r2, #12
 8008828:	a801      	add	r0, sp, #4
 800882a:	9100      	str	r1, [sp, #0]
 800882c:	f00d fb99 	bl	8015f62 <memset>
    if( versionMinor == 1 )
 8008830:	2c01      	cmp	r4, #1
 8008832:	d102      	bne.n	800883a <LoRaMacCryptoDeriveMcRootKey+0x1e>
        compBase[0] = 0x20;
 8008834:	2320      	movs	r3, #32
 8008836:	466a      	mov	r2, sp
 8008838:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800883a:	2208      	movs	r2, #8
 800883c:	2100      	movs	r1, #0
 800883e:	4668      	mov	r0, sp
 8008840:	f002 fdd5 	bl	800b3ee <SecureElementDeriveAndStoreKey>
 8008844:	2800      	cmp	r0, #0
 8008846:	d000      	beq.n	800884a <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008848:	200e      	movs	r0, #14
}
 800884a:	b004      	add	sp, #16
 800884c:	bd10      	pop	{r4, pc}
	...

08008850 <LoRaMacCryptoSetKey>:
{
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8008854:	f002 fdc2 	bl	800b3dc <SecureElementSetKey>
 8008858:	1e04      	subs	r4, r0, #0
 800885a:	d10d      	bne.n	8008878 <LoRaMacCryptoSetKey+0x28>
    if( keyID == APP_KEY )
 800885c:	2d00      	cmp	r5, #0
 800885e:	d10c      	bne.n	800887a <LoRaMacCryptoSetKey+0x2a>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <LoRaMacCryptoSetKey+0x30>)
 8008862:	0021      	movs	r1, r4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	7898      	ldrb	r0, [r3, #2]
 8008868:	f7ff ffd8 	bl	800881c <LoRaMacCryptoDeriveMcRootKey>
 800886c:	2800      	cmp	r0, #0
 800886e:	d103      	bne.n	8008878 <LoRaMacCryptoSetKey+0x28>
    if( keyID != MC_ROOT_KEY )
 8008870:	f7ff fdd1 	bl	8008416 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8008874:	2800      	cmp	r0, #0
 8008876:	d000      	beq.n	800887a <LoRaMacCryptoSetKey+0x2a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008878:	240e      	movs	r4, #14
}
 800887a:	0020      	movs	r0, r4
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	20001294 	.word	0x20001294

08008884 <LoRaMacCryptoHandleJoinAccept>:
{
 8008884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008886:	b091      	sub	sp, #68	; 0x44
 8008888:	9005      	str	r0, [sp, #20]
 800888a:	000e      	movs	r6, r1
 800888c:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800888e:	2009      	movs	r0, #9
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8008890:	2a00      	cmp	r2, #0
 8008892:	d073      	beq.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
 8008894:	2900      	cmp	r1, #0
 8008896:	d071      	beq.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8008898:	2700      	movs	r7, #0
 800889a:	221d      	movs	r2, #29
 800889c:	0039      	movs	r1, r7
 800889e:	a808      	add	r0, sp, #32
 80088a0:	9707      	str	r7, [sp, #28]
 80088a2:	f00d fb5e 	bl	8015f62 <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
 80088a6:	4d36      	ldr	r5, [pc, #216]	; (8008980 <LoRaMacCryptoHandleJoinAccept+0xfc>)
    uint8_t versionMinor         = 0;
 80088a8:	ab02      	add	r3, sp, #8
 80088aa:	74df      	strb	r7, [r3, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80088ac:	682b      	ldr	r3, [r5, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80088ae:	aa02      	add	r2, sp, #8
    uint16_t nonce               = CryptoNvm->DevNonce;
 80088b0:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80088b2:	2313      	movs	r3, #19
 80088b4:	189b      	adds	r3, r3, r2
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	ab07      	add	r3, sp, #28
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	7923      	ldrb	r3, [r4, #4]
 80088be:	003a      	movs	r2, r7
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	0031      	movs	r1, r6
 80088c6:	9805      	ldr	r0, [sp, #20]
 80088c8:	f002 fdb1 	bl	800b42e <SecureElementProcessJoinAccept>
 80088cc:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80088ce:	200e      	movs	r0, #14
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d153      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80088d4:	a907      	add	r1, sp, #28
 80088d6:	7922      	ldrb	r2, [r4, #4]
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	f7fb ffde 	bl	800489a <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80088de:	0020      	movs	r0, r4
 80088e0:	f000 f850 	bl	8008984 <LoRaMacParserJoinAccept>
 80088e4:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80088e6:	200f      	movs	r0, #15
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80088e8:	2900      	cmp	r1, #0
 80088ea:	d147      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80088ec:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80088ee:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80088f0:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80088f2:	0412      	lsls	r2, r2, #16
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80088f4:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80088f6:	4316      	orrs	r6, r2
 80088f8:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80088fa:	682b      	ldr	r3, [r5, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80088fc:	380c      	subs	r0, #12
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	42b2      	cmp	r2, r6
 8008902:	d03b      	beq.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
        CryptoNvm->JoinNonce = currentJoinNonce;
 8008904:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8008906:	ab02      	add	r3, sp, #8
 8008908:	7cd8      	ldrb	r0, [r3, #19]
 800890a:	f7ff ff87 	bl	800881c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800890e:	2800      	cmp	r0, #0
 8008910:	d134      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
    if( keyID != MC_ROOT_KEY )
 8008912:	f7ff fd80 	bl	8008416 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008916:	2800      	cmp	r0, #0
 8008918:	d130      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
        netID = ( uint32_t )macMsg->NetID[0];
 800891a:	7a62      	ldrb	r2, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800891c:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800891e:	7ae4      	ldrb	r4, [r4, #11]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8008920:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8008922:	0424      	lsls	r4, r4, #16
 8008924:	431c      	orrs	r4, r3
 8008926:	4314      	orrs	r4, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8008928:	003b      	movs	r3, r7
 800892a:	0022      	movs	r2, r4
 800892c:	0031      	movs	r1, r6
 800892e:	3007      	adds	r0, #7
 8008930:	f7ff fcea 	bl	8008308 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008934:	2800      	cmp	r0, #0
 8008936:	d121      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 8008938:	003b      	movs	r3, r7
 800893a:	0022      	movs	r2, r4
 800893c:	0031      	movs	r1, r6
 800893e:	3006      	adds	r0, #6
 8008940:	f7ff fce2 	bl	8008308 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008944:	2800      	cmp	r0, #0
 8008946:	d119      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 8008948:	003b      	movs	r3, r7
 800894a:	0022      	movs	r2, r4
 800894c:	0031      	movs	r1, r6
 800894e:	3004      	adds	r0, #4
 8008950:	f7ff fcda 	bl	8008308 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008954:	2800      	cmp	r0, #0
 8008956:	d111      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 8008958:	003b      	movs	r3, r7
 800895a:	0022      	movs	r2, r4
 800895c:	0031      	movs	r1, r6
 800895e:	3005      	adds	r0, #5
 8008960:	f7ff fcd2 	bl	8008308 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008964:	2800      	cmp	r0, #0
 8008966:	d109      	bne.n	800897c <LoRaMacCryptoHandleJoinAccept+0xf8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8008968:	aa02      	add	r2, sp, #8
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	7cd2      	ldrb	r2, [r2, #19]
    CryptoNvm->FCntList.FCntUp = 0;
 800896e:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8008970:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8008972:	2201      	movs	r2, #1
 8008974:	4252      	negs	r2, r2
 8008976:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008978:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800897a:	615a      	str	r2, [r3, #20]
}
 800897c:	b011      	add	sp, #68	; 0x44
 800897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008980:	20001294 	.word	0x20001294

08008984 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8008988:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800898a:	2c00      	cmp	r4, #0
 800898c:	d040      	beq.n	8008a10 <LoRaMacParserJoinAccept+0x8c>
 800898e:	6821      	ldr	r1, [r4, #0]
 8008990:	2900      	cmp	r1, #0
 8008992:	d03d      	beq.n	8008a10 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008994:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8008996:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008998:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800899a:	3101      	adds	r1, #1
 800899c:	1da0      	adds	r0, r4, #6
 800899e:	f7fb ff7c 	bl	800489a <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80089a2:	0020      	movs	r0, r4
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	2203      	movs	r2, #3
 80089a8:	1d19      	adds	r1, r3, #4
 80089aa:	3009      	adds	r0, #9
 80089ac:	f7fb ff75 	bl	800489a <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80089b0:	6821      	ldr	r1, [r4, #0]
 80089b2:	79c8      	ldrb	r0, [r1, #7]
 80089b4:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80089b6:	7a0a      	ldrb	r2, [r1, #8]
 80089b8:	0212      	lsls	r2, r2, #8
 80089ba:	4310      	orrs	r0, r2
 80089bc:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80089be:	7a4b      	ldrb	r3, [r1, #9]
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	4303      	orrs	r3, r0
 80089c4:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80089c6:	7a8a      	ldrb	r2, [r1, #10]
 80089c8:	0612      	lsls	r2, r2, #24
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80089ce:	7acb      	ldrb	r3, [r1, #11]
 80089d0:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80089d2:	7b0b      	ldrb	r3, [r1, #12]
 80089d4:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80089d6:	7923      	ldrb	r3, [r4, #4]
 80089d8:	2b21      	cmp	r3, #33	; 0x21
 80089da:	d11a      	bne.n	8008a12 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80089dc:	0020      	movs	r0, r4
 80089de:	2210      	movs	r2, #16
 80089e0:	310d      	adds	r1, #13
 80089e2:	3012      	adds	r0, #18
 80089e4:	f7fb ff59 	bl	800489a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80089e8:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80089ea:	6825      	ldr	r5, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80089ec:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80089ee:	5ce8      	ldrb	r0, [r5, r3]
 80089f0:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80089f2:	5ca9      	ldrb	r1, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80089f4:	1c9a      	adds	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80089f6:	0209      	lsls	r1, r1, #8
 80089f8:	4308      	orrs	r0, r1
 80089fa:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80089fc:	5caa      	ldrb	r2, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80089fe:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008a00:	0412      	lsls	r2, r2, #16
 8008a02:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 8008a04:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008a06:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008a08:	5ceb      	ldrb	r3, [r5, r3]
 8008a0a:	061b      	lsls	r3, r3, #24
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	6262      	str	r2, [r4, #36]	; 0x24
}
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_PARSER_FAIL;
 8008a12:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8008a14:	2b11      	cmp	r3, #17
 8008a16:	dcfb      	bgt.n	8008a10 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8008a18:	230d      	movs	r3, #13
 8008a1a:	e7e6      	b.n	80089ea <LoRaMacParserJoinAccept+0x66>

08008a1c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8008a20:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	d054      	beq.n	8008ad0 <LoRaMacParserData+0xb4>
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	d051      	beq.n	8008ad0 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008a2c:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8008a2e:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008a30:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8008a32:	7848      	ldrb	r0, [r1, #1]
 8008a34:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008a36:	788a      	ldrb	r2, [r1, #2]
 8008a38:	0212      	lsls	r2, r2, #8
 8008a3a:	4310      	orrs	r0, r2
 8008a3c:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008a3e:	78cb      	ldrb	r3, [r1, #3]
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a44:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008a46:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008a48:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a4a:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008a4c:	0612      	lsls	r2, r2, #24
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8008a52:	794b      	ldrb	r3, [r1, #5]
 8008a54:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8008a56:	798b      	ldrb	r3, [r1, #6]
 8008a58:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008a5a:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a5c:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008a5e:	0212      	lsls	r2, r2, #8
 8008a60:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a62:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008a64:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a66:	0712      	lsls	r2, r2, #28
 8008a68:	0f12      	lsrs	r2, r2, #28
 8008a6a:	f7fb ff16 	bl	800489a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a6e:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 8008a70:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 8008a72:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a74:	0709      	lsls	r1, r1, #28
 8008a76:	0f09      	lsrs	r1, r1, #28
 8008a78:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 8008a7a:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 8008a7c:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 8008a7e:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008a80:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a82:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008a84:	1b93      	subs	r3, r2, r6
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	dd0c      	ble.n	8008aa4 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008a8e:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008a90:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008a92:	1a52      	subs	r2, r2, r1
 8008a94:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008a96:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008a98:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8008a9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a9c:	b292      	uxth	r2, r2
 8008a9e:	1859      	adds	r1, r3, r1
 8008aa0:	f7fb fefb 	bl	800489a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	7923      	ldrb	r3, [r4, #4]
 8008aa8:	18d3      	adds	r3, r2, r3
 8008aaa:	1f1a      	subs	r2, r3, #4
 8008aac:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8008aae:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8008ab0:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8008ab2:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008ab4:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8008ab6:	0209      	lsls	r1, r1, #8
 8008ab8:	4308      	orrs	r0, r1
 8008aba:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008abc:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8008abe:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008ac0:	0412      	lsls	r2, r2, #16
 8008ac2:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 8008ac4:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008ac6:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	431a      	orrs	r2, r3
 8008ace:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8008ad0:	bd70      	pop	{r4, r5, r6, pc}

08008ad2 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008ad6:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008ad8:	2c00      	cmp	r4, #0
 8008ada:	d02e      	beq.n	8008b3a <LoRaMacSerializerJoinRequest+0x68>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d02b      	beq.n	8008b3a <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8008ae2:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8008ae4:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8008ae6:	2a16      	cmp	r2, #22
 8008ae8:	d927      	bls.n	8008b3a <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008aea:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008aec:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008aee:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	2208      	movs	r2, #8
 8008af4:	1c58      	adds	r0, r3, #1
 8008af6:	f7fb fed9 	bl	80048ac <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8008afa:	0021      	movs	r1, r4
 8008afc:	6820      	ldr	r0, [r4, #0]
 8008afe:	2208      	movs	r2, #8
 8008b00:	3009      	adds	r0, #9
 8008b02:	310e      	adds	r1, #14
 8008b04:	f7fb fed2 	bl	80048ac <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8008b08:	8ae3      	ldrh	r3, [r4, #22]
 8008b0a:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 8008b0c:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8008b0e:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8008b10:	8ae3      	ldrh	r3, [r4, #22]
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	0a1b      	lsrs	r3, r3, #8
 8008b16:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008b18:	69a3      	ldr	r3, [r4, #24]
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008b1e:	69a3      	ldr	r3, [r4, #24]
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	0a1b      	lsrs	r3, r3, #8
 8008b24:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008b26:	69a3      	ldr	r3, [r4, #24]
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	0c1b      	lsrs	r3, r3, #16
 8008b2c:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008b2e:	69a3      	ldr	r3, [r4, #24]
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	0e1b      	lsrs	r3, r3, #24
 8008b34:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 8008b36:	2317      	movs	r3, #23
 8008b38:	7123      	strb	r3, [r4, #4]
}
 8008b3a:	bd10      	pop	{r4, pc}

08008b3c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008b40:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008b42:	2c00      	cmp	r4, #0
 8008b44:	d068      	beq.n	8008c18 <LoRaMacSerializerData+0xdc>
 8008b46:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008b48:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008b4a:	2900      	cmp	r1, #0
 8008b4c:	d064      	beq.n	8008c18 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 8008b4e:	0025      	movs	r5, r4
 8008b50:	3528      	adds	r5, #40	; 0x28
 8008b52:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008b54:	7b22      	ldrb	r2, [r4, #12]
 8008b56:	0003      	movs	r3, r0
 8008b58:	1e5e      	subs	r6, r3, #1
 8008b5a:	41b3      	sbcs	r3, r6
 8008b5c:	0712      	lsls	r2, r2, #28
 8008b5e:	0f12      	lsrs	r2, r2, #28
 8008b60:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8008b62:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008b64:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8008b66:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 8008b68:	7922      	ldrb	r2, [r4, #4]
 8008b6a:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8008b6c:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d352      	bcc.n	8008c18 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008b72:	7963      	ldrb	r3, [r4, #5]
 8008b74:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008b76:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8008b78:	68a3      	ldr	r3, [r4, #8]
 8008b7a:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008b7c:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8008b7e:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	6822      	ldr	r2, [r4, #0]
 8008b84:	0a1b      	lsrs	r3, r3, #8
 8008b86:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8008b88:	68a3      	ldr	r3, [r4, #8]
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	0e1b      	lsrs	r3, r3, #24
 8008b96:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8008b98:	7b23      	ldrb	r3, [r4, #12]
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8008b9e:	89e3      	ldrh	r3, [r4, #14]
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8008ba4:	89e3      	ldrh	r3, [r4, #14]
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	0a1b      	lsrs	r3, r3, #8
 8008baa:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008bac:	7b22      	ldrb	r2, [r4, #12]
 8008bae:	6820      	ldr	r0, [r4, #0]
 8008bb0:	0712      	lsls	r2, r2, #28
 8008bb2:	0f12      	lsrs	r2, r2, #28
 8008bb4:	3008      	adds	r0, #8
 8008bb6:	f7fb fe70 	bl	800489a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008bba:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8008bbc:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008bbe:	071b      	lsls	r3, r3, #28
 8008bc0:	0f1b      	lsrs	r3, r3, #28
 8008bc2:	001e      	movs	r6, r3
 8008bc4:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	d005      	beq.n	8008bd6 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8008bca:	1c62      	adds	r2, r4, #1
 8008bcc:	7fd2      	ldrb	r2, [r2, #31]
 8008bce:	6821      	ldr	r1, [r4, #0]
 8008bd0:	3309      	adds	r3, #9
 8008bd2:	558a      	strb	r2, [r1, r6]
 8008bd4:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	782a      	ldrb	r2, [r5, #0]
 8008bda:	1998      	adds	r0, r3, r6
 8008bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008bde:	f7fb fe5c 	bl	800489a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8008be2:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008be4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008be6:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8008be8:	18f3      	adds	r3, r6, r3
 8008bea:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008bec:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008bee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008bf0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008bf2:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	0a09      	lsrs	r1, r1, #8
 8008bf8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008bfa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008bfc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008bfe:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008c00:	b292      	uxth	r2, r2
 8008c02:	0c09      	lsrs	r1, r1, #16
 8008c04:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008c06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008c08:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008c0a:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008c0c:	b292      	uxth	r2, r2
 8008c0e:	0e09      	lsrs	r1, r1, #24
 8008c10:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 8008c12:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008c14:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 8008c16:	7123      	strb	r3, [r4, #4]
}
 8008c18:	bd70      	pop	{r4, r5, r6, pc}

08008c1a <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8008c1a:	0003      	movs	r3, r0
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8008c1c:	2001      	movs	r0, #1
    switch( region )
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d003      	beq.n	8008c2a <RegionIsActive+0x10>
 8008c22:	3b08      	subs	r3, #8
 8008c24:	425a      	negs	r2, r3
 8008c26:	4153      	adcs	r3, r2
 8008c28:	b2d8      	uxtb	r0, r3
        default:
        {
            return false;
        }
    }
}
 8008c2a:	4770      	bx	lr

08008c2c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8008c2c:	0003      	movs	r3, r0
 8008c2e:	b507      	push	{r0, r1, r2, lr}
 8008c30:	0008      	movs	r0, r1
    PhyParam_t phyParam = { 0 };
    switch( region )
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d004      	beq.n	8008c40 <RegionGetPhyParam+0x14>
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d007      	beq.n	8008c4a <RegionGetPhyParam+0x1e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	e002      	b.n	8008c46 <RegionGetPhyParam+0x1a>
        EU868_GET_PHY_PARAM( );
 8008c40:	f000 fd1e 	bl	8009680 <RegionEU868GetPhyParam>
        US915_GET_PHY_PARAM( );
 8008c44:	9001      	str	r0, [sp, #4]
        }
    }
}
 8008c46:	9801      	ldr	r0, [sp, #4]
 8008c48:	bd0e      	pop	{r1, r2, r3, pc}
        US915_GET_PHY_PARAM( );
 8008c4a:	f001 fa19 	bl	800a080 <RegionUS915GetPhyParam>
 8008c4e:	e7f9      	b.n	8008c44 <RegionGetPhyParam+0x18>

08008c50 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8008c50:	0003      	movs	r3, r0
 8008c52:	b510      	push	{r4, lr}
 8008c54:	0008      	movs	r0, r1
    switch( region )
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d002      	beq.n	8008c60 <RegionSetBandTxDone+0x10>
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d003      	beq.n	8008c66 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 8008c5e:	bd10      	pop	{r4, pc}
        EU868_SET_BAND_TX_DONE( );
 8008c60:	f000 fda0 	bl	80097a4 <RegionEU868SetBandTxDone>
 8008c64:	e7fb      	b.n	8008c5e <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 8008c66:	f001 faa9 	bl	800a1bc <RegionUS915SetBandTxDone>
 8008c6a:	e7f8      	b.n	8008c5e <RegionSetBandTxDone+0xe>

08008c6c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	0008      	movs	r0, r1
    switch( region )
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d002      	beq.n	8008c7c <RegionInitDefaults+0x10>
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d003      	beq.n	8008c82 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 8008c7a:	bd10      	pop	{r4, pc}
        EU868_INIT_DEFAULTS( );
 8008c7c:	f000 fdac 	bl	80097d8 <RegionEU868InitDefaults>
 8008c80:	e7fb      	b.n	8008c7a <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 8008c82:	f001 fab5 	bl	800a1f0 <RegionUS915InitDefaults>
}
 8008c86:	e7f8      	b.n	8008c7a <RegionInitDefaults+0xe>

08008c88 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8008c88:	0003      	movs	r3, r0
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	0008      	movs	r0, r1
 8008c8e:	0011      	movs	r1, r2
    switch( region )
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	d003      	beq.n	8008c9c <RegionVerify+0x14>
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d004      	beq.n	8008ca2 <RegionVerify+0x1a>
 8008c98:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008c9a:	bd10      	pop	{r4, pc}
        EU868_VERIFY( );
 8008c9c:	f000 fe00 	bl	80098a0 <RegionEU868Verify>
 8008ca0:	e7fb      	b.n	8008c9a <RegionVerify+0x12>
        US915_VERIFY( );
 8008ca2:	f001 fb2b 	bl	800a2fc <RegionUS915Verify>
 8008ca6:	e7f8      	b.n	8008c9a <RegionVerify+0x12>

08008ca8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8008ca8:	0003      	movs	r3, r0
 8008caa:	b510      	push	{r4, lr}
 8008cac:	0008      	movs	r0, r1
    switch( region )
 8008cae:	2b05      	cmp	r3, #5
 8008cb0:	d002      	beq.n	8008cb8 <RegionApplyCFList+0x10>
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d003      	beq.n	8008cbe <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 8008cb6:	bd10      	pop	{r4, pc}
        EU868_APPLY_CF_LIST( );
 8008cb8:	f001 f946 	bl	8009f48 <RegionEU868ApplyCFList>
 8008cbc:	e7fb      	b.n	8008cb6 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 8008cbe:	f001 fb47 	bl	800a350 <RegionUS915ApplyCFList>
}
 8008cc2:	e7f8      	b.n	8008cb6 <RegionApplyCFList+0xe>

08008cc4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8008cc4:	0003      	movs	r3, r0
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	0008      	movs	r0, r1
    switch( region )
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d003      	beq.n	8008cd6 <RegionChanMaskSet+0x12>
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	d004      	beq.n	8008cdc <RegionChanMaskSet+0x18>
 8008cd2:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008cd4:	bd10      	pop	{r4, pc}
        EU868_CHAN_MASK_SET( );
 8008cd6:	f000 fe0d 	bl	80098f4 <RegionEU868ChanMaskSet>
 8008cda:	e7fb      	b.n	8008cd4 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 8008cdc:	f001 fb68 	bl	800a3b0 <RegionUS915ChanMaskSet>
 8008ce0:	e7f8      	b.n	8008cd4 <RegionChanMaskSet+0x10>

08008ce2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	0004      	movs	r4, r0
 8008ce6:	0008      	movs	r0, r1
 8008ce8:	0011      	movs	r1, r2
 8008cea:	001a      	movs	r2, r3
    switch( region )
 8008cec:	2c05      	cmp	r4, #5
 8008cee:	d002      	beq.n	8008cf6 <RegionComputeRxWindowParameters+0x14>
 8008cf0:	2c08      	cmp	r4, #8
 8008cf2:	d004      	beq.n	8008cfe <RegionComputeRxWindowParameters+0x1c>
        default:
        {
            break;
        }
    }
}
 8008cf4:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8008cf6:	9b02      	ldr	r3, [sp, #8]
 8008cf8:	f000 fe1c 	bl	8009934 <RegionEU868ComputeRxWindowParameters>
 8008cfc:	e7fa      	b.n	8008cf4 <RegionComputeRxWindowParameters+0x12>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8008cfe:	9b02      	ldr	r3, [sp, #8]
 8008d00:	f001 fb96 	bl	800a430 <RegionUS915ComputeRxWindowParameters>
}
 8008d04:	e7f6      	b.n	8008cf4 <RegionComputeRxWindowParameters+0x12>

08008d06 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8008d06:	0003      	movs	r3, r0
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	0008      	movs	r0, r1
 8008d0c:	0011      	movs	r1, r2
    switch( region )
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d003      	beq.n	8008d1a <RegionRxConfig+0x14>
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d004      	beq.n	8008d20 <RegionRxConfig+0x1a>
 8008d16:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008d18:	bd10      	pop	{r4, pc}
        EU868_RX_CONFIG( );
 8008d1a:	f000 fe41 	bl	80099a0 <RegionEU868RxConfig>
 8008d1e:	e7fb      	b.n	8008d18 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 8008d20:	f001 fbb6 	bl	800a490 <RegionUS915RxConfig>
 8008d24:	e7f8      	b.n	8008d18 <RegionRxConfig+0x12>

08008d26 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8008d26:	b510      	push	{r4, lr}
 8008d28:	0004      	movs	r4, r0
 8008d2a:	0008      	movs	r0, r1
 8008d2c:	0011      	movs	r1, r2
 8008d2e:	001a      	movs	r2, r3
    switch( region )
 8008d30:	2c05      	cmp	r4, #5
 8008d32:	d003      	beq.n	8008d3c <RegionTxConfig+0x16>
 8008d34:	2c08      	cmp	r4, #8
 8008d36:	d004      	beq.n	8008d42 <RegionTxConfig+0x1c>
 8008d38:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008d3a:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
 8008d3c:	f000 fea2 	bl	8009a84 <RegionEU868TxConfig>
 8008d40:	e7fb      	b.n	8008d3a <RegionTxConfig+0x14>
        US915_TX_CONFIG( );
 8008d42:	f001 fbf5 	bl	800a530 <RegionUS915TxConfig>
 8008d46:	e7f8      	b.n	8008d3a <RegionTxConfig+0x14>

08008d48 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8008d48:	b513      	push	{r0, r1, r4, lr}
 8008d4a:	0004      	movs	r4, r0
 8008d4c:	0008      	movs	r0, r1
 8008d4e:	0011      	movs	r1, r2
 8008d50:	001a      	movs	r2, r3
 8008d52:	9b05      	ldr	r3, [sp, #20]
    switch( region )
 8008d54:	2c05      	cmp	r4, #5
 8008d56:	d003      	beq.n	8008d60 <RegionLinkAdrReq+0x18>
 8008d58:	2c08      	cmp	r4, #8
 8008d5a:	d006      	beq.n	8008d6a <RegionLinkAdrReq+0x22>
 8008d5c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008d5e:	bd16      	pop	{r1, r2, r4, pc}
        EU868_LINK_ADR_REQ( );
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	9b04      	ldr	r3, [sp, #16]
 8008d64:	f000 ff0c 	bl	8009b80 <RegionEU868LinkAdrReq>
 8008d68:	e7f9      	b.n	8008d5e <RegionLinkAdrReq+0x16>
        US915_LINK_ADR_REQ( );
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	f001 fc5d 	bl	800a62c <RegionUS915LinkAdrReq>
 8008d72:	e7f4      	b.n	8008d5e <RegionLinkAdrReq+0x16>

08008d74 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8008d74:	0003      	movs	r3, r0
 8008d76:	b510      	push	{r4, lr}
 8008d78:	0008      	movs	r0, r1
    switch( region )
 8008d7a:	2b05      	cmp	r3, #5
 8008d7c:	d003      	beq.n	8008d86 <RegionRxParamSetupReq+0x12>
 8008d7e:	2b08      	cmp	r3, #8
 8008d80:	d004      	beq.n	8008d8c <RegionRxParamSetupReq+0x18>
 8008d82:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008d84:	bd10      	pop	{r4, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 8008d86:	f000 ffa1 	bl	8009ccc <RegionEU868RxParamSetupReq>
 8008d8a:	e7fb      	b.n	8008d84 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 8008d8c:	f001 fd4a 	bl	800a824 <RegionUS915RxParamSetupReq>
 8008d90:	e7f8      	b.n	8008d84 <RegionRxParamSetupReq+0x10>

08008d92 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8008d92:	0003      	movs	r3, r0
 8008d94:	b510      	push	{r4, lr}
 8008d96:	0008      	movs	r0, r1
    switch( region )
 8008d98:	2b05      	cmp	r3, #5
 8008d9a:	d003      	beq.n	8008da4 <RegionNewChannelReq+0x12>
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d004      	beq.n	8008daa <RegionNewChannelReq+0x18>
 8008da0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008da2:	bd10      	pop	{r4, pc}
        EU868_NEW_CHANNEL_REQ( );
 8008da4:	f001 f90a 	bl	8009fbc <RegionEU868NewChannelReq>
 8008da8:	e7fb      	b.n	8008da2 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 8008daa:	f001 fd68 	bl	800a87e <RegionUS915NewChannelReq>
 8008dae:	e7f8      	b.n	8008da2 <RegionNewChannelReq+0x10>

08008db0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8008db0:	0003      	movs	r3, r0
 8008db2:	b510      	push	{r4, lr}
 8008db4:	0008      	movs	r0, r1
    switch( region )
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d003      	beq.n	8008dc2 <RegionTxParamSetupReq+0x12>
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	d004      	beq.n	8008dc8 <RegionTxParamSetupReq+0x18>
 8008dbe:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008dc0:	bd10      	pop	{r4, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 8008dc2:	f000 ffa6 	bl	8009d12 <RegionEU868TxParamSetupReq>
 8008dc6:	e7fb      	b.n	8008dc0 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 8008dc8:	f001 fd5c 	bl	800a884 <RegionUS915TxParamSetupReq>
 8008dcc:	e7f8      	b.n	8008dc0 <RegionTxParamSetupReq+0x10>

08008dce <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8008dce:	0003      	movs	r3, r0
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	0008      	movs	r0, r1
    switch( region )
 8008dd4:	2b05      	cmp	r3, #5
 8008dd6:	d003      	beq.n	8008de0 <RegionDlChannelReq+0x12>
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d004      	beq.n	8008de6 <RegionDlChannelReq+0x18>
 8008ddc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008dde:	bd10      	pop	{r4, pc}
        EU868_DL_CHANNEL_REQ( );
 8008de0:	f000 ff9a 	bl	8009d18 <RegionEU868DlChannelReq>
 8008de4:	e7fb      	b.n	8008dde <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 8008de6:	f001 fd50 	bl	800a88a <RegionUS915DlChannelReq>
 8008dea:	e7f8      	b.n	8008dde <RegionDlChannelReq+0x10>

08008dec <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8008dec:	0003      	movs	r3, r0
 8008dee:	b510      	push	{r4, lr}
 8008df0:	0008      	movs	r0, r1
 8008df2:	0011      	movs	r1, r2
    switch( region )
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	d003      	beq.n	8008e00 <RegionAlternateDr+0x14>
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d004      	beq.n	8008e06 <RegionAlternateDr+0x1a>
 8008dfc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008dfe:	bd10      	pop	{r4, pc}
        EU868_ALTERNATE_DR( );
 8008e00:	f000 ffae 	bl	8009d60 <RegionEU868AlternateDr>
 8008e04:	e7fb      	b.n	8008dfe <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 8008e06:	f001 fd43 	bl	800a890 <RegionUS915AlternateDr>
 8008e0a:	e7f8      	b.n	8008dfe <RegionAlternateDr+0x12>

08008e0c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	0004      	movs	r4, r0
 8008e10:	0008      	movs	r0, r1
 8008e12:	0011      	movs	r1, r2
 8008e14:	001a      	movs	r2, r3
    switch( region )
 8008e16:	2c05      	cmp	r4, #5
 8008e18:	d003      	beq.n	8008e22 <RegionNextChannel+0x16>
 8008e1a:	2c08      	cmp	r4, #8
 8008e1c:	d005      	beq.n	8008e2a <RegionNextChannel+0x1e>
 8008e1e:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8008e20:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
 8008e22:	9b02      	ldr	r3, [sp, #8]
 8008e24:	f000 ff9e 	bl	8009d64 <RegionEU868NextChannel>
 8008e28:	e7fa      	b.n	8008e20 <RegionNextChannel+0x14>
        US915_NEXT_CHANNEL( );
 8008e2a:	9b02      	ldr	r3, [sp, #8]
 8008e2c:	f001 fd44 	bl	800a8b8 <RegionUS915NextChannel>
 8008e30:	e7f6      	b.n	8008e20 <RegionNextChannel+0x14>

08008e32 <RegionApplyDrOffset>:
        }
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8008e32:	b510      	push	{r4, lr}
 8008e34:	0004      	movs	r4, r0
 8008e36:	0008      	movs	r0, r1
 8008e38:	0011      	movs	r1, r2
 8008e3a:	001a      	movs	r2, r3
    switch( region )
 8008e3c:	2c05      	cmp	r4, #5
 8008e3e:	d003      	beq.n	8008e48 <RegionApplyDrOffset+0x16>
 8008e40:	2c08      	cmp	r4, #8
 8008e42:	d004      	beq.n	8008e4e <RegionApplyDrOffset+0x1c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8008e44:	b2c8      	uxtb	r0, r1
 8008e46:	e001      	b.n	8008e4c <RegionApplyDrOffset+0x1a>
        EU868_APPLY_DR_OFFSET( );
 8008e48:	f001 f8d6 	bl	8009ff8 <RegionEU868ApplyDrOffset>
        }
    }
}
 8008e4c:	bd10      	pop	{r4, pc}
        US915_APPLY_DR_OFFSET( );
 8008e4e:	f001 fdd1 	bl	800a9f4 <RegionUS915ApplyDrOffset>
 8008e52:	e7fb      	b.n	8008e4c <RegionApplyDrOffset+0x1a>

08008e54 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8008e54:	4800      	ldr	r0, [pc, #0]	; (8008e58 <RegionGetVersion+0x4>)
 8008e56:	4770      	bx	lr
 8008e58:	02010001 	.word	0x02010001

08008e5c <RegionBaseUSComputeNext125kHzJoinChannel>:
LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8008e5c:	2300      	movs	r3, #0
{
 8008e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e60:	b085      	sub	sp, #20
 8008e62:	000e      	movs	r6, r1
 8008e64:	9000      	str	r0, [sp, #0]
 8008e66:	9201      	str	r2, [sp, #4]
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8008e68:	9302      	str	r3, [sp, #8]
 8008e6a:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d102      	bne.n	8008e76 <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008e70:	2003      	movs	r0, #3
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
}
 8008e72:	b005      	add	sp, #20
 8008e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d0fa      	beq.n	8008e70 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f7      	beq.n	8008e70 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>
        if( ( startIndex % 2 ) == 0 )
 8008e80:	2701      	movs	r7, #1
    startIndex = *groupsCurrentIndex;
 8008e82:	780c      	ldrb	r4, [r1, #0]
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8008e84:	9a00      	ldr	r2, [sp, #0]
 8008e86:	0863      	lsrs	r3, r4, #1
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	5a9b      	ldrh	r3, [r3, r2]
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8008e8c:	0a1a      	lsrs	r2, r3, #8
        if( ( startIndex % 2 ) == 0 )
 8008e8e:	423c      	tst	r4, r7
 8008e90:	d101      	bne.n	8008e96 <RegionBaseUSComputeNext125kHzJoinChannel+0x3a>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	401a      	ands	r2, r3
{
 8008e96:	2300      	movs	r3, #0
    *availableChannels = 0;
 8008e98:	001d      	movs	r5, r3
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8008e9a:	0010      	movs	r0, r2
 8008e9c:	4118      	asrs	r0, r3
 8008e9e:	b2d9      	uxtb	r1, r3
 8008ea0:	4238      	tst	r0, r7
 8008ea2:	d003      	beq.n	8008eac <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
            findAvailableChannelsIndex[*availableChannels] = i;
 8008ea4:	a802      	add	r0, sp, #8
 8008ea6:	5541      	strb	r1, [r0, r5]
            ( *availableChannels )++;
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < 8; i++ )
 8008eac:	3301      	adds	r3, #1
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d1f3      	bne.n	8008e9a <RegionBaseUSComputeNext125kHzJoinChannel+0x3e>
        if ( availableChannels > 0 )
 8008eb2:	2d00      	cmp	r5, #0
 8008eb4:	d009      	beq.n	8008eca <RegionBaseUSComputeNext125kHzJoinChannel+0x6e>
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	1e69      	subs	r1, r5, #1
 8008eba:	f7fb fce3 	bl	8004884 <randr>
 8008ebe:	aa02      	add	r2, sp, #8
 8008ec0:	5c12      	ldrb	r2, [r2, r0]
 8008ec2:	00e3      	lsls	r3, r4, #3
 8008ec4:	189b      	adds	r3, r3, r2
 8008ec6:	9a01      	ldr	r2, [sp, #4]
 8008ec8:	7013      	strb	r3, [r2, #0]
        startIndex++;
 8008eca:	3401      	adds	r4, #1
 8008ecc:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8008ece:	2c07      	cmp	r4, #7
 8008ed0:	d900      	bls.n	8008ed4 <RegionBaseUSComputeNext125kHzJoinChannel+0x78>
            startIndex = 0;
 8008ed2:	2400      	movs	r4, #0
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	d103      	bne.n	8008ee0 <RegionBaseUSComputeNext125kHzJoinChannel+0x84>
 8008ed8:	7833      	ldrb	r3, [r6, #0]
 8008eda:	42a3      	cmp	r3, r4
 8008edc:	d1d2      	bne.n	8008e84 <RegionBaseUSComputeNext125kHzJoinChannel+0x28>
 8008ede:	e7c7      	b.n	8008e70 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>
        return LORAMAC_STATUS_OK;
 8008ee0:	2000      	movs	r0, #0
        *groupsCurrentIndex = startIndex;
 8008ee2:	7034      	strb	r4, [r6, #0]
        return LORAMAC_STATUS_OK;
 8008ee4:	e7c5      	b.n	8008e72 <RegionBaseUSComputeNext125kHzJoinChannel+0x16>

08008ee6 <RegionBaseUSCalcDownlinkFrequency>:

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8008ee6:	4350      	muls	r0, r2
 8008ee8:	1840      	adds	r0, r0, r1
}
 8008eea:	4770      	bx	lr

08008eec <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8008eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eee:	9101      	str	r1, [sp, #4]
 8008ef0:	a908      	add	r1, sp, #32
 8008ef2:	7809      	ldrb	r1, [r1, #0]
 8008ef4:	9000      	str	r0, [sp, #0]
 8008ef6:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 8008ef8:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8008efa:	429a      	cmp	r2, r3
 8008efc:	db29      	blt.n	8008f52 <RegionCommonChanVerifyDr+0x66>
 8008efe:	428a      	cmp	r2, r1
 8008f00:	dc27      	bgt.n	8008f52 <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8008f02:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8008f04:	260f      	movs	r6, #15
 8008f06:	e01e      	b.n	8008f46 <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8008f08:	9c01      	ldr	r4, [sp, #4]
 8008f0a:	0041      	lsls	r1, r0, #1
 8008f0c:	5b09      	ldrh	r1, [r1, r4]
 8008f0e:	2500      	movs	r5, #0
 8008f10:	468c      	mov	ip, r1
 8008f12:	210c      	movs	r1, #12
 8008f14:	434b      	muls	r3, r1
 8008f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f18:	18cb      	adds	r3, r1, r3
 8008f1a:	4661      	mov	r1, ip
 8008f1c:	4129      	asrs	r1, r5
 8008f1e:	4239      	tst	r1, r7
 8008f20:	d00b      	beq.n	8008f3a <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8008f22:	2408      	movs	r4, #8
 8008f24:	7a19      	ldrb	r1, [r3, #8]
 8008f26:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8008f28:	0709      	lsls	r1, r1, #28
 8008f2a:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8008f2c:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 8008f2e:	4031      	ands	r1, r6
 8008f30:	428a      	cmp	r2, r1
 8008f32:	db02      	blt.n	8008f3a <RegionCommonChanVerifyDr+0x4e>
 8008f34:	4034      	ands	r4, r6
 8008f36:	42a2      	cmp	r2, r4
 8008f38:	dd0c      	ble.n	8008f54 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	2d10      	cmp	r5, #16
 8008f40:	d1eb      	bne.n	8008f1a <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8008f42:	3001      	adds	r0, #1
 8008f44:	b2c0      	uxtb	r0, r0
 8008f46:	0103      	lsls	r3, r0, #4
 8008f48:	9900      	ldr	r1, [sp, #0]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	d8db      	bhi.n	8008f08 <RegionCommonChanVerifyDr+0x1c>
        return false;
 8008f50:	2000      	movs	r0, #0
}
 8008f52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 8008f54:	2001      	movs	r0, #1
 8008f56:	e7fc      	b.n	8008f52 <RegionCommonChanVerifyDr+0x66>

08008f58 <RegionCommonValueInRange>:
{
 8008f58:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 8008f5a:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	db04      	blt.n	8008f6a <RegionCommonValueInRange+0x12>
 8008f60:	0fd8      	lsrs	r0, r3, #31
 8008f62:	17d1      	asrs	r1, r2, #31
 8008f64:	429a      	cmp	r2, r3
 8008f66:	4148      	adcs	r0, r1
        return 1;
 8008f68:	b2c0      	uxtb	r0, r0
}
 8008f6a:	4770      	bx	lr

08008f6c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8008f6c:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 8008f6e:	090b      	lsrs	r3, r1, #4
{
 8008f70:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8008f72:	0915      	lsrs	r5, r2, #4
    {
        return false;
 8008f74:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8008f76:	429d      	cmp	r5, r3
 8008f78:	d30b      	bcc.n	8008f92 <RegionCommonChanDisable+0x26>
 8008f7a:	4291      	cmp	r1, r2
 8008f7c:	d209      	bcs.n	8008f92 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8008f7e:	220f      	movs	r2, #15
 8008f80:	3001      	adds	r0, #1
 8008f82:	4011      	ands	r1, r2
 8008f84:	0002      	movs	r2, r0
 8008f86:	408a      	lsls	r2, r1
 8008f88:	0011      	movs	r1, r2
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	5ae2      	ldrh	r2, [r4, r3]
 8008f8e:	438a      	bics	r2, r1
 8008f90:	52e2      	strh	r2, [r4, r3]

    return true;
}
 8008f92:	bd30      	pop	{r4, r5, pc}

08008f94 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8008f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f96:	1e03      	subs	r3, r0, #0
 8008f98:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8008f9a:	d005      	beq.n	8008fa8 <RegionCommonCountChannels+0x14>
 8008f9c:	0048      	lsls	r0, r1, #1
 8008f9e:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 8008fa0:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8008fa2:	9a01      	ldr	r2, [sp, #4]
 8008fa4:	4291      	cmp	r1, r2
 8008fa6:	d300      	bcc.n	8008faa <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 8008fa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008faa:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 8008fac:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008fae:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8008fb0:	2501      	movs	r5, #1
 8008fb2:	40a5      	lsls	r5, r4
 8008fb4:	002e      	movs	r6, r5
 8008fb6:	403e      	ands	r6, r7
 8008fb8:	42b5      	cmp	r5, r6
 8008fba:	d101      	bne.n	8008fc0 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 8008fbc:	3201      	adds	r2, #1
 8008fbe:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 8008fc0:	3401      	adds	r4, #1
 8008fc2:	2c10      	cmp	r4, #16
 8008fc4:	d1f4      	bne.n	8008fb0 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008fc6:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8008fc8:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008fca:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8008fcc:	b2c9      	uxtb	r1, r1
 8008fce:	3302      	adds	r3, #2
 8008fd0:	e7e7      	b.n	8008fa2 <RegionCommonCountChannels+0xe>

08008fd2 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8008fd2:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d005      	beq.n	8008fe4 <RegionCommonChanMaskCopy+0x12>
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	d003      	beq.n	8008fe4 <RegionCommonChanMaskCopy+0x12>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d100      	bne.n	8008fe6 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 8008fe4:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 8008fe6:	5acc      	ldrh	r4, [r1, r3]
 8008fe8:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 8008fea:	3302      	adds	r3, #2
 8008fec:	e7f8      	b.n	8008fe0 <RegionCommonChanMaskCopy+0xe>
	...

08008ff0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	b570      	push	{r4, r5, r6, lr}
 8008ff4:	8805      	ldrh	r5, [r0, #0]
 8008ff6:	9305      	str	r3, [sp, #20]
    if( joined == false )
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d111      	bne.n	8009020 <RegionCommonSetBandTxDone+0x30>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8008ffc:	26e1      	movs	r6, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8008ffe:	2464      	movs	r4, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8009000:	0136      	lsls	r6, r6, #4
 8009002:	42b3      	cmp	r3, r6
 8009004:	d307      	bcc.n	8009016 <RegionCommonSetBandTxDone+0x26>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8009006:	4c0e      	ldr	r4, [pc, #56]	; (8009040 <RegionCommonSetBandTxDone+0x50>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8009008:	429c      	cmp	r4, r3
 800900a:	4152      	adcs	r2, r2
 800900c:	4254      	negs	r4, r2
 800900e:	4a0d      	ldr	r2, [pc, #52]	; (8009044 <RegionCommonSetBandTxDone+0x54>)
 8009010:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <RegionCommonSetBandTxDone+0x58>)
 8009012:	4014      	ands	r4, r2
 8009014:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8009016:	1c2b      	adds	r3, r5, #0
 8009018:	42a5      	cmp	r5, r4
 800901a:	d200      	bcs.n	800901e <RegionCommonSetBandTxDone+0x2e>
 800901c:	1c23      	adds	r3, r4, #0
 800901e:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8009020:	68c2      	ldr	r2, [r0, #12]
 8009022:	1c2b      	adds	r3, r5, #0
 8009024:	2d00      	cmp	r5, #0
 8009026:	d100      	bne.n	800902a <RegionCommonSetBandTxDone+0x3a>
 8009028:	2301      	movs	r3, #1
 800902a:	b29b      	uxth	r3, r3
 800902c:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800902e:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8009030:	428a      	cmp	r2, r1
 8009032:	d900      	bls.n	8009036 <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8009034:	1a53      	subs	r3, r2, r1
 8009036:	60c3      	str	r3, [r0, #12]
    }
}
 8009038:	bc70      	pop	{r4, r5, r6}
 800903a:	bc08      	pop	{r3}
 800903c:	b002      	add	sp, #8
 800903e:	4718      	bx	r3
 8009040:	00009aaf 	.word	0x00009aaf
 8009044:	ffffdcd8 	.word	0xffffdcd8
 8009048:	00002710 	.word	0x00002710

0800904c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800904c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904e:	b093      	sub	sp, #76	; 0x4c
 8009050:	9305      	str	r3, [sp, #20]
 8009052:	ab18      	add	r3, sp, #96	; 0x60
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	0015      	movs	r5, r2
 8009058:	000c      	movs	r4, r1
 800905a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800905c:	930b      	str	r3, [sp, #44]	; 0x2c
 800905e:	9002      	str	r0, [sp, #8]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8009060:	f002 fc85 	bl	800b96e <TimerGetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8009064:	4b70      	ldr	r3, [pc, #448]	; (8009228 <RegionCommonUpdateBandTimeOff+0x1dc>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8009066:	9008      	str	r0, [sp, #32]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8009068:	4970      	ldr	r1, [pc, #448]	; (800922c <RegionCommonUpdateBandTimeOff+0x1e0>)
 800906a:	18f0      	adds	r0, r6, r3
 800906c:	f7f7 f87c 	bl	8000168 <__udivsi3>
 8009070:	2218      	movs	r2, #24
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8009072:	4b6e      	ldr	r3, [pc, #440]	; (800922c <RegionCommonUpdateBandTimeOff+0x1e0>)
 8009074:	4355      	muls	r5, r2
 8009076:	4358      	muls	r0, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8009078:	4b6d      	ldr	r3, [pc, #436]	; (8009230 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800907a:	18c3      	adds	r3, r0, r3
 800907c:	9306      	str	r3, [sp, #24]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800907e:	4b6b      	ldr	r3, [pc, #428]	; (800922c <RegionCommonUpdateBandTimeOff+0x1e0>)
 8009080:	18c3      	adds	r3, r0, r3
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	1963      	adds	r3, r4, r5
 8009086:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t validBands = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	9303      	str	r3, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800908c:	3b01      	subs	r3, #1
 800908e:	9304      	str	r3, [sp, #16]
    for( uint8_t i = 0; i < nbBands; i++ )
 8009090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009092:	42a3      	cmp	r3, r4
 8009094:	d107      	bne.n	80090a6 <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800909c:	3b01      	subs	r3, #1
 800909e:	9304      	str	r3, [sp, #16]
    }
    return minTimeToWait;
}
 80090a0:	9804      	ldr	r0, [sp, #16]
 80090a2:	b013      	add	sp, #76	; 0x4c
 80090a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80090a6:	9619      	str	r6, [sp, #100]	; 0x64
 80090a8:	ab19      	add	r3, sp, #100	; 0x64
 80090aa:	2204      	movs	r2, #4
 80090ac:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80090ae:	ab0c      	add	r3, sp, #48	; 0x30
 80090b0:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80090b2:	0030      	movs	r0, r6
 80090b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090b6:	960c      	str	r6, [sp, #48]	; 0x30
 80090b8:	f002 fb2f 	bl	800b71a <SysTimeToMs>
    if( joined == false )
 80090bc:	9b02      	ldr	r3, [sp, #8]
 80090be:	8825      	ldrh	r5, [r4, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d112      	bne.n	80090ea <RegionCommonUpdateBandTimeOff+0x9e>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80090c4:	22e1      	movs	r2, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80090c6:	3364      	adds	r3, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80090c8:	0112      	lsls	r2, r2, #4
 80090ca:	4296      	cmp	r6, r2
 80090cc:	d308      	bcc.n	80090e0 <RegionCommonUpdateBandTimeOff+0x94>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80090ce:	4b59      	ldr	r3, [pc, #356]	; (8009234 <RegionCommonUpdateBandTimeOff+0x1e8>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80090d0:	9a02      	ldr	r2, [sp, #8]
 80090d2:	42b3      	cmp	r3, r6
 80090d4:	4152      	adcs	r2, r2
 80090d6:	4253      	negs	r3, r2
 80090d8:	4a57      	ldr	r2, [pc, #348]	; (8009238 <RegionCommonUpdateBandTimeOff+0x1ec>)
 80090da:	4013      	ands	r3, r2
 80090dc:	4a57      	ldr	r2, [pc, #348]	; (800923c <RegionCommonUpdateBandTimeOff+0x1f0>)
 80090de:	189b      	adds	r3, r3, r2
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80090e0:	1c2a      	adds	r2, r5, #0
 80090e2:	429d      	cmp	r5, r3
 80090e4:	d200      	bcs.n	80090e8 <RegionCommonUpdateBandTimeOff+0x9c>
 80090e6:	1c1a      	adds	r2, r3, #0
 80090e8:	b295      	uxth	r5, r2
    if( dutyCycle == 0 )
 80090ea:	1c2b      	adds	r3, r5, #0
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d100      	bne.n	80090f2 <RegionCommonUpdateBandTimeOff+0xa6>
 80090f0:	2301      	movs	r3, #1
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	9309      	str	r3, [sp, #36]	; 0x24
    if( joined == false )
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d15b      	bne.n	80091b4 <RegionCommonUpdateBandTimeOff+0x168>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80090fc:	2d64      	cmp	r5, #100	; 0x64
 80090fe:	d150      	bne.n	80091a2 <RegionCommonUpdateBandTimeOff+0x156>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8009100:	4f4f      	ldr	r7, [pc, #316]	; (8009240 <RegionCommonUpdateBandTimeOff+0x1f4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 8009102:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8009104:	68a1      	ldr	r1, [r4, #8]
 8009106:	a810      	add	r0, sp, #64	; 0x40
 8009108:	f002 fb24 	bl	800b754 <SysTimeFromMs>
 800910c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800910e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009116:	a80e      	add	r0, sp, #56	; 0x38
 8009118:	f002 fa96 	bl	800b648 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800911c:	9b05      	ldr	r3, [sp, #20]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d102      	bne.n	8009128 <RegionCommonUpdateBandTimeOff+0xdc>
 8009122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d006      	beq.n	8009136 <RegionCommonUpdateBandTimeOff+0xea>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	42bb      	cmp	r3, r7
 800912c:	d103      	bne.n	8009136 <RegionCommonUpdateBandTimeOff+0xea>
            ( band->MaxTimeCredits != maxCredits ) ||
 800912e:	4b45      	ldr	r3, [pc, #276]	; (8009244 <RegionCommonUpdateBandTimeOff+0x1f8>)
 8009130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009132:	429a      	cmp	r2, r3
 8009134:	d90d      	bls.n	8009152 <RegionCommonUpdateBandTimeOff+0x106>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8009136:	4b44      	ldr	r3, [pc, #272]	; (8009248 <RegionCommonUpdateBandTimeOff+0x1fc>)
            band->TimeCredits = maxCredits;
 8009138:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800913a:	429e      	cmp	r6, r3
 800913c:	d909      	bls.n	8009152 <RegionCommonUpdateBandTimeOff+0x106>
                timeDiff.SubSeconds = 0;
 800913e:	2200      	movs	r2, #0
 8009140:	ab0e      	add	r3, sp, #56	; 0x38
 8009142:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8009144:	9a06      	ldr	r2, [sp, #24]
 8009146:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009148:	0010      	movs	r0, r2
 800914a:	920e      	str	r2, [sp, #56]	; 0x38
 800914c:	f002 fae5 	bl	800b71a <SysTimeToMs>
 8009150:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 8009152:	6860      	ldr	r0, [r4, #4]
 8009154:	2800      	cmp	r0, #0
 8009156:	d100      	bne.n	800915a <RegionCommonUpdateBandTimeOff+0x10e>
        band->TimeCredits = maxCredits;
 8009158:	60e7      	str	r7, [r4, #12]
    if( joined == true )
 800915a:	9b02      	ldr	r3, [sp, #8]
    band->MaxTimeCredits = maxCredits;
 800915c:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <RegionCommonUpdateBandTimeOff+0x120>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8009162:	f002 fc0a 	bl	800b97a <TimerGetElapsedTime>
 8009166:	68e3      	ldr	r3, [r4, #12]
 8009168:	1818      	adds	r0, r3, r0
 800916a:	60e0      	str	r0, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	4293      	cmp	r3, r2
 8009172:	d900      	bls.n	8009176 <RegionCommonUpdateBandTimeOff+0x12a>
        band->TimeCredits = band->MaxTimeCredits;
 8009174:	60e2      	str	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 8009176:	9b08      	ldr	r3, [sp, #32]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8009178:	991b      	ldr	r1, [sp, #108]	; 0x6c
    band->LastBandUpdateTime = currentTime;
 800917a:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800917c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917e:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8009180:	68e1      	ldr	r1, [r4, #12]
 8009182:	4299      	cmp	r1, r3
 8009184:	d805      	bhi.n	8009192 <RegionCommonUpdateBandTimeOff+0x146>
 8009186:	9805      	ldr	r0, [sp, #20]
 8009188:	2800      	cmp	r0, #0
 800918a:	d11a      	bne.n	80091c2 <RegionCommonUpdateBandTimeOff+0x176>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800918c:	9802      	ldr	r0, [sp, #8]
 800918e:	2800      	cmp	r0, #0
 8009190:	d017      	beq.n	80091c2 <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
 8009192:	2301      	movs	r3, #1
 8009194:	7523      	strb	r3, [r4, #20]
            validBands++;
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	9303      	str	r3, [sp, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800919e:	3418      	adds	r4, #24
 80091a0:	e776      	b.n	8009090 <RegionCommonUpdateBandTimeOff+0x44>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80091a2:	23fa      	movs	r3, #250	; 0xfa
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	429d      	cmp	r5, r3
 80091a8:	d102      	bne.n	80091b0 <RegionCommonUpdateBandTimeOff+0x164>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80091aa:	4f28      	ldr	r7, [pc, #160]	; (800924c <RegionCommonUpdateBandTimeOff+0x200>)
            band->LastMaxCreditAssignTime = elapsedTime;
 80091ac:	60a0      	str	r0, [r4, #8]
 80091ae:	e7a9      	b.n	8009104 <RegionCommonUpdateBandTimeOff+0xb8>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80091b0:	4f27      	ldr	r7, [pc, #156]	; (8009250 <RegionCommonUpdateBandTimeOff+0x204>)
 80091b2:	e7a7      	b.n	8009104 <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 80091b4:	4b22      	ldr	r3, [pc, #136]	; (8009240 <RegionCommonUpdateBandTimeOff+0x1f4>)
 80091b6:	9a05      	ldr	r2, [sp, #20]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80091b8:	001f      	movs	r7, r3
        if( dutyCycleEnabled == false )
 80091ba:	2a00      	cmp	r2, #0
 80091bc:	d1c9      	bne.n	8009152 <RegionCommonUpdateBandTimeOff+0x106>
            band->TimeCredits = maxCredits;
 80091be:	60e3      	str	r3, [r4, #12]
 80091c0:	e7c7      	b.n	8009152 <RegionCommonUpdateBandTimeOff+0x106>
            bands[i].ReadyForTransmission = false;
 80091c2:	2000      	movs	r0, #0
 80091c4:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d208      	bcs.n	80091dc <RegionCommonUpdateBandTimeOff+0x190>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	1a5b      	subs	r3, r3, r1
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d900      	bls.n	80091d4 <RegionCommonUpdateBandTimeOff+0x188>
 80091d2:	9304      	str	r3, [sp, #16]
                validBands++;
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	9303      	str	r3, [sp, #12]
            if( joined == false )
 80091dc:	9b02      	ldr	r3, [sp, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1dd      	bne.n	800919e <RegionCommonUpdateBandTimeOff+0x152>
                SysTime_t backoffTimeRange = {
 80091e2:	9a02      	ldr	r2, [sp, #8]
 80091e4:	ab0e      	add	r3, sp, #56	; 0x38
 80091e6:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80091e8:	4b11      	ldr	r3, [pc, #68]	; (8009230 <RegionCommonUpdateBandTimeOff+0x1e4>)
 80091ea:	2d64      	cmp	r5, #100	; 0x64
 80091ec:	d019      	beq.n	8009222 <RegionCommonUpdateBandTimeOff+0x1d6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80091ee:	4a19      	ldr	r2, [pc, #100]	; (8009254 <RegionCommonUpdateBandTimeOff+0x208>)
 80091f0:	18a9      	adds	r1, r5, r2
 80091f2:	424a      	negs	r2, r1
 80091f4:	4151      	adcs	r1, r2
 80091f6:	4d18      	ldr	r5, [pc, #96]	; (8009258 <RegionCommonUpdateBandTimeOff+0x20c>)
 80091f8:	4249      	negs	r1, r1
 80091fa:	4029      	ands	r1, r5
 80091fc:	18c9      	adds	r1, r1, r3
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80091fe:	429e      	cmp	r6, r3
 8009200:	d901      	bls.n	8009206 <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8009206:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	a80e      	add	r0, sp, #56	; 0x38
 800920e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009210:	910e      	str	r1, [sp, #56]	; 0x38
 8009212:	f002 fa19 	bl	800b648 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8009216:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009218:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800921a:	f002 fa7e 	bl	800b71a <SysTimeToMs>
 800921e:	9004      	str	r0, [sp, #16]
 8009220:	e7bd      	b.n	800919e <RegionCommonUpdateBandTimeOff+0x152>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8009222:	21e1      	movs	r1, #225	; 0xe1
 8009224:	0109      	lsls	r1, r1, #4
 8009226:	e7ea      	b.n	80091fe <RegionCommonUpdateBandTimeOff+0x1b2>
 8009228:	fffe13d0 	.word	0xfffe13d0
 800922c:	00015180 	.word	0x00015180
 8009230:	0001ec30 	.word	0x0001ec30
 8009234:	00009aaf 	.word	0x00009aaf
 8009238:	ffffdcd8 	.word	0xffffdcd8
 800923c:	00002710 	.word	0x00002710
 8009240:	001b7740 	.word	0x001b7740
 8009244:	0001517f 	.word	0x0001517f
 8009248:	0001ec2f 	.word	0x0001ec2f
 800924c:	0112a880 	.word	0x0112a880
 8009250:	02932e00 	.word	0x02932e00
 8009254:	fffffc18 	.word	0xfffffc18
 8009258:	fffeae80 	.word	0xfffeae80

0800925c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800925c:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800925e:	7802      	ldrb	r2, [r0, #0]
{
 8009260:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 8009262:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8009264:	2a03      	cmp	r2, #3
 8009266:	d113      	bne.n	8009290 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8009268:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800926a:	300f      	adds	r0, #15
 800926c:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800926e:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8009270:	4004      	ands	r4, r0
 8009272:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8009274:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8009276:	789a      	ldrb	r2, [r3, #2]
 8009278:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800927a:	78dc      	ldrb	r4, [r3, #3]
 800927c:	0224      	lsls	r4, r4, #8
 800927e:	4322      	orrs	r2, r4
 8009280:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8009282:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8009284:	065a      	lsls	r2, r3, #25
 8009286:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 8009288:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800928a:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800928c:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800928e:	380a      	subs	r0, #10
    }
    return retIndex;
}
 8009290:	bd10      	pop	{r4, pc}

08009292 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8009292:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 8009294:	2706      	movs	r7, #6
    int8_t txPower = verifyParams->TxPower;
 8009296:	2607      	movs	r6, #7
{
 8009298:	b087      	sub	sp, #28
 800929a:	9103      	str	r1, [sp, #12]
 800929c:	9204      	str	r2, [sp, #16]
 800929e:	9305      	str	r3, [sp, #20]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80092a0:	7942      	ldrb	r2, [r0, #5]
{
 80092a2:	0004      	movs	r4, r0
    uint8_t status = verifyParams->Status;
 80092a4:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 80092a6:	57c7      	ldrsb	r7, [r0, r7]
    int8_t txPower = verifyParams->TxPower;
 80092a8:	5786      	ldrsb	r6, [r0, r6]
    int8_t nbRepetitions = verifyParams->NbRep;
 80092aa:	7a03      	ldrb	r3, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d013      	beq.n	80092d8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    int8_t nbRepetitions = verifyParams->NbRep;
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	9302      	str	r3, [sp, #8]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 80092b4:	2d00      	cmp	r5, #0
 80092b6:	d032      	beq.n	800931e <RegionCommonLinkAdrReqVerifyParams+0x8c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80092b8:	2f0f      	cmp	r7, #15
 80092ba:	d115      	bne.n	80092e8 <RegionCommonLinkAdrReqVerifyParams+0x56>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80092bc:	2709      	movs	r7, #9
 80092be:	57e7      	ldrsb	r7, [r4, r7]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 80092c0:	2e0f      	cmp	r6, #15
 80092c2:	d122      	bne.n	800930a <RegionCommonLinkAdrReqVerifyParams+0x78>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80092c4:	260a      	movs	r6, #10
 80092c6:	57a6      	ldrsb	r6, [r4, r6]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80092c8:	2d07      	cmp	r5, #7
 80092ca:	d128      	bne.n	800931e <RegionCommonLinkAdrReqVerifyParams+0x8c>
    {
        if( nbRepetitions == 0 )
 80092cc:	9b02      	ldr	r3, [sp, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d125      	bne.n	800931e <RegionCommonLinkAdrReqVerifyParams+0x8c>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80092d2:	3301      	adds	r3, #1
 80092d4:	9302      	str	r3, [sp, #8]
 80092d6:	e022      	b.n	800931e <RegionCommonLinkAdrReqVerifyParams+0x8c>
        nbRepetitions = verifyParams->CurrentNbRep;
 80092d8:	230b      	movs	r3, #11
        datarate =  verifyParams->CurrentDatarate;
 80092da:	2709      	movs	r7, #9
        txPower =  verifyParams->CurrentTxPower;
 80092dc:	260a      	movs	r6, #10
        nbRepetitions = verifyParams->CurrentNbRep;
 80092de:	56c3      	ldrsb	r3, [r0, r3]
 80092e0:	9302      	str	r3, [sp, #8]
        datarate =  verifyParams->CurrentDatarate;
 80092e2:	57c7      	ldrsb	r7, [r0, r7]
        txPower =  verifyParams->CurrentTxPower;
 80092e4:	5786      	ldrsb	r6, [r0, r6]
 80092e6:	e7e5      	b.n	80092b4 <RegionCommonLinkAdrReqVerifyParams+0x22>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80092e8:	69a2      	ldr	r2, [r4, #24]
 80092ea:	2314      	movs	r3, #20
 80092ec:	9201      	str	r2, [sp, #4]
 80092ee:	2215      	movs	r2, #21
 80092f0:	56a2      	ldrsb	r2, [r4, r2]
 80092f2:	56e3      	ldrsb	r3, [r4, r3]
 80092f4:	9200      	str	r2, [sp, #0]
 80092f6:	7b20      	ldrb	r0, [r4, #12]
 80092f8:	003a      	movs	r2, r7
 80092fa:	6921      	ldr	r1, [r4, #16]
 80092fc:	f7ff fdf6 	bl	8008eec <RegionCommonChanVerifyDr>
 8009300:	2800      	cmp	r0, #0
 8009302:	d1dd      	bne.n	80092c0 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            status &= 0xFD; // Datarate KO
 8009304:	2302      	movs	r3, #2
 8009306:	439d      	bics	r5, r3
 8009308:	e7da      	b.n	80092c0 <RegionCommonLinkAdrReqVerifyParams+0x2e>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800930a:	231d      	movs	r3, #29
 800930c:	221c      	movs	r2, #28
 800930e:	56e3      	ldrsb	r3, [r4, r3]
 8009310:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 8009312:	42b3      	cmp	r3, r6
 8009314:	dc0d      	bgt.n	8009332 <RegionCommonLinkAdrReqVerifyParams+0xa0>
 8009316:	42b2      	cmp	r2, r6
 8009318:	dad6      	bge.n	80092c8 <RegionCommonLinkAdrReqVerifyParams+0x36>
                status &= 0xFB; // TxPower KO
 800931a:	2304      	movs	r3, #4
 800931c:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800931e:	0028      	movs	r0, r5
    *dr = datarate;
 8009320:	9b03      	ldr	r3, [sp, #12]
    *nbRep = nbRepetitions;
 8009322:	9a02      	ldr	r2, [sp, #8]
    *dr = datarate;
 8009324:	701f      	strb	r7, [r3, #0]
    *txPow = txPower;
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	701e      	strb	r6, [r3, #0]
    *nbRep = nbRepetitions;
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	701a      	strb	r2, [r3, #0]
}
 800932e:	b007      	add	sp, #28
 8009330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009332:	001e      	movs	r6, r3
 8009334:	e7c8      	b.n	80092c8 <RegionCommonLinkAdrReqVerifyParams+0x36>
	...

08009338 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8009338:	4b03      	ldr	r3, [pc, #12]	; (8009348 <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 800933a:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800933c:	4083      	lsls	r3, r0
 800933e:	0018      	movs	r0, r3
 8009340:	f7f6 ff12 	bl	8000168 <__udivsi3>
}
 8009344:	bd10      	pop	{r4, pc}
 8009346:	46c0      	nop			; (mov r8, r8)
 8009348:	000f4240 	.word	0x000f4240

0800934c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800934c:	0001      	movs	r1, r0
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800934e:	20fa      	movs	r0, #250	; 0xfa
{
 8009350:	b510      	push	{r4, lr}
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8009352:	0140      	lsls	r0, r0, #5
 8009354:	f7f6 ff08 	bl	8000168 <__udivsi3>
}
 8009358:	bd10      	pop	{r4, pc}
	...

0800935c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009360:	23fa      	movs	r3, #250	; 0xfa
{
 8009362:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	1f08      	subs	r0, r1, #4
 8009368:	4360      	muls	r0, r4
 800936a:	4353      	muls	r3, r2
 800936c:	18c0      	adds	r0, r0, r3
{
 800936e:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009370:	0040      	lsls	r0, r0, #1
 8009372:	d004      	beq.n	800937e <RegionCommonComputeRxWindowParameters+0x22>
 8009374:	1e62      	subs	r2, r4, #1
 8009376:	0021      	movs	r1, r4
 8009378:	1810      	adds	r0, r2, r0
 800937a:	f7f6 fef5 	bl	8000168 <__udivsi3>
 800937e:	4285      	cmp	r5, r0
 8009380:	d200      	bcs.n	8009384 <RegionCommonComputeRxWindowParameters+0x28>
 8009382:	0005      	movs	r5, r0
 8009384:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8009386:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009388:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800938a:	436c      	muls	r4, r5
 800938c:	2500      	movs	r5, #0
 800938e:	42ac      	cmp	r4, r5
 8009390:	d001      	beq.n	8009396 <RegionCommonComputeRxWindowParameters+0x3a>
 8009392:	3401      	adds	r4, #1
 8009394:	0865      	lsrs	r5, r4, #1
 8009396:	21fa      	movs	r1, #250	; 0xfa
 8009398:	0089      	lsls	r1, r1, #2
 800939a:	434e      	muls	r6, r1
 800939c:	1b40      	subs	r0, r0, r5
 800939e:	1b80      	subs	r0, r0, r6
 80093a0:	2800      	cmp	r0, #0
 80093a2:	dd01      	ble.n	80093a8 <RegionCommonComputeRxWindowParameters+0x4c>
 80093a4:	4b03      	ldr	r3, [pc, #12]	; (80093b4 <RegionCommonComputeRxWindowParameters+0x58>)
 80093a6:	18c0      	adds	r0, r0, r3
 80093a8:	f7f6 ff68 	bl	800027c <__divsi3>
 80093ac:	9b05      	ldr	r3, [sp, #20]
 80093ae:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	000003e7 	.word	0x000003e7

080093b8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80093b8:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80093ba:	0040      	lsls	r0, r0, #1
{
 80093bc:	1c14      	adds	r4, r2, #0
 80093be:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80093c0:	f7f7 fe24 	bl	800100c <__aeabi_ui2f>
 80093c4:	1c01      	adds	r1, r0, #0
 80093c6:	1c28      	adds	r0, r5, #0
 80093c8:	f7f7 fc04 	bl	8000bd4 <__aeabi_fsub>
 80093cc:	1c21      	adds	r1, r4, #0
 80093ce:	f7f7 fc01 	bl	8000bd4 <__aeabi_fsub>
 80093d2:	f7f9 fc25 	bl	8002c20 <__aeabi_f2d>
 80093d6:	f00c fc6f 	bl	8015cb8 <floor>
 80093da:	f7f9 fb95 	bl	8002b08 <__aeabi_d2iz>

    return phyTxPower;
 80093de:	b240      	sxtb	r0, r0
}
 80093e0:	bd70      	pop	{r4, r5, r6, pc}

080093e2 <RegionCommonCountNbOfEnabledChannels>:
    Radio.Rx( rxBeaconSetupParams->RxTime );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80093e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e4:	b087      	sub	sp, #28
 80093e6:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80093e8:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 80093ea:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 80093ec:	001d      	movs	r5, r3
{
 80093ee:	9103      	str	r1, [sp, #12]
 80093f0:	9204      	str	r2, [sp, #16]
 80093f2:	011a      	lsls	r2, r3, #4
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80093f8:	9901      	ldr	r1, [sp, #4]
 80093fa:	8a02      	ldrh	r2, [r0, #16]
 80093fc:	428a      	cmp	r2, r1
 80093fe:	d806      	bhi.n	800940e <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8009400:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	701a      	strb	r2, [r3, #0]
}
 800940a:	b007      	add	sp, #28
 800940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940e:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8009410:	005a      	lsls	r2, r3, #1
 8009412:	9202      	str	r2, [sp, #8]
 8009414:	9a01      	ldr	r2, [sp, #4]
 8009416:	4356      	muls	r6, r2
 8009418:	2200      	movs	r2, #0
 800941a:	9600      	str	r6, [sp, #0]
 800941c:	6841      	ldr	r1, [r0, #4]
 800941e:	9c02      	ldr	r4, [sp, #8]
 8009420:	2701      	movs	r7, #1
 8009422:	5b09      	ldrh	r1, [r1, r4]
 8009424:	4111      	asrs	r1, r2
 8009426:	4239      	tst	r1, r7
 8009428:	d028      	beq.n	800947c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800942a:	6881      	ldr	r1, [r0, #8]
 800942c:	9c00      	ldr	r4, [sp, #0]
 800942e:	190c      	adds	r4, r1, r4
 8009430:	6821      	ldr	r1, [r4, #0]
 8009432:	2900      	cmp	r1, #0
 8009434:	d022      	beq.n	800947c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8009436:	7801      	ldrb	r1, [r0, #0]
 8009438:	2900      	cmp	r1, #0
 800943a:	d107      	bne.n	800944c <RegionCommonCountNbOfEnabledChannels+0x6a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800943c:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800943e:	2900      	cmp	r1, #0
 8009440:	d004      	beq.n	800944c <RegionCommonCountNbOfEnabledChannels+0x6a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8009442:	9e02      	ldr	r6, [sp, #8]
 8009444:	5b89      	ldrh	r1, [r1, r6]
 8009446:	4111      	asrs	r1, r2
 8009448:	4239      	tst	r1, r7
 800944a:	d017      	beq.n	800947c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800944c:	2101      	movs	r1, #1
 800944e:	5641      	ldrsb	r1, [r0, r1]
 8009450:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8009452:	7a21      	ldrb	r1, [r4, #8]
 8009454:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 8009456:	173f      	asrs	r7, r7, #28
 8009458:	42be      	cmp	r6, r7
 800945a:	db0f      	blt.n	800947c <RegionCommonCountNbOfEnabledChannels+0x9a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800945c:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800945e:	1109      	asrs	r1, r1, #4
 8009460:	428e      	cmp	r6, r1
 8009462:	dc0b      	bgt.n	800947c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8009464:	7a61      	ldrb	r1, [r4, #9]
 8009466:	2418      	movs	r4, #24
 8009468:	4361      	muls	r1, r4
 800946a:	68c4      	ldr	r4, [r0, #12]
 800946c:	1861      	adds	r1, r4, r1
 800946e:	7d09      	ldrb	r1, [r1, #20]
 8009470:	2900      	cmp	r1, #0
 8009472:	d10c      	bne.n	800948e <RegionCommonCountNbOfEnabledChannels+0xac>
                    nbRestrictedChannelsCount++;
 8009474:	4661      	mov	r1, ip
 8009476:	3101      	adds	r1, #1
 8009478:	b2c9      	uxtb	r1, r1
 800947a:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800947c:	9900      	ldr	r1, [sp, #0]
 800947e:	3201      	adds	r2, #1
 8009480:	310c      	adds	r1, #12
 8009482:	9100      	str	r1, [sp, #0]
 8009484:	2a10      	cmp	r2, #16
 8009486:	d1c9      	bne.n	800941c <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8009488:	3301      	adds	r3, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	e7b1      	b.n	80093f2 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800948e:	9c01      	ldr	r4, [sp, #4]
 8009490:	9e03      	ldr	r6, [sp, #12]
 8009492:	1c69      	adds	r1, r5, #1
 8009494:	18a4      	adds	r4, r4, r2
 8009496:	5574      	strb	r4, [r6, r5]
 8009498:	b2cd      	uxtb	r5, r1
 800949a:	e7ef      	b.n	800947c <RegionCommonCountNbOfEnabledChannels+0x9a>

0800949c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949e:	0004      	movs	r4, r0
 80094a0:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80094a2:	6840      	ldr	r0, [r0, #4]
{
 80094a4:	001d      	movs	r5, r3
 80094a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80094a8:	9204      	str	r2, [sp, #16]
 80094aa:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80094ac:	f002 fa65 	bl	800b97a <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80094b0:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 80094b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80094b4:	1a1b      	subs	r3, r3, r0
 80094b6:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 80094b8:	2301      	movs	r3, #1
 80094ba:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80094c0:	6863      	ldr	r3, [r4, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <RegionCommonIdentifyChannels+0x30>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	4283      	cmp	r3, r0
 80094ca:	d825      	bhi.n	8009518 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80094d0:	7a62      	ldrb	r2, [r4, #9]
 80094d2:	69e1      	ldr	r1, [r4, #28]
 80094d4:	4694      	mov	ip, r2
 80094d6:	780a      	ldrb	r2, [r1, #0]
 80094d8:	69a1      	ldr	r1, [r4, #24]
 80094da:	9205      	str	r2, [sp, #20]
 80094dc:	9103      	str	r1, [sp, #12]
 80094de:	0021      	movs	r1, r4
 80094e0:	ae01      	add	r6, sp, #4
 80094e2:	310c      	adds	r1, #12
 80094e4:	7a23      	ldrb	r3, [r4, #8]
 80094e6:	c905      	ldmia	r1!, {r0, r2}
 80094e8:	c605      	stmia	r6!, {r0, r2}
 80094ea:	7d21      	ldrb	r1, [r4, #20]
 80094ec:	4662      	mov	r2, ip
 80094ee:	9100      	str	r1, [sp, #0]
 80094f0:	69e1      	ldr	r1, [r4, #28]
 80094f2:	9805      	ldr	r0, [sp, #20]
 80094f4:	68c9      	ldr	r1, [r1, #12]
 80094f6:	f7ff fda9 	bl	800904c <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80094fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80094fc:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80094fe:	002a      	movs	r2, r5
 8009500:	9904      	ldr	r1, [sp, #16]
 8009502:	69e0      	ldr	r0, [r4, #28]
 8009504:	f7ff ff6d 	bl	80093e2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8009508:	782b      	ldrb	r3, [r5, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 800950e:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 8009510:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 8009512:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8009514:	b007      	add	sp, #28
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 8009518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800951a:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800951c:	4243      	negs	r3, r0
 800951e:	4158      	adcs	r0, r3
 8009520:	300b      	adds	r0, #11
 8009522:	e7f7      	b.n	8009514 <RegionCommonIdentifyChannels+0x78>

08009524 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8009524:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 8009526:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 8009528:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 800952a:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 800952c:	5786      	ldrsb	r6, [r0, r6]
{
 800952e:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 8009530:	42a6      	cmp	r6, r4
 8009532:	d010      	beq.n	8009556 <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8009534:	3c01      	subs	r4, #1
 8009536:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8009538:	42a6      	cmp	r6, r4
 800953a:	d00c      	beq.n	8009556 <RegionCommonGetNextLowerTxDr+0x32>
 800953c:	68ab      	ldr	r3, [r5, #8]
 800953e:	0022      	movs	r2, r4
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	2301      	movs	r3, #1
 8009544:	56eb      	ldrsb	r3, [r5, r3]
 8009546:	78e8      	ldrb	r0, [r5, #3]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	6869      	ldr	r1, [r5, #4]
 800954c:	0033      	movs	r3, r6
 800954e:	f7ff fccd 	bl	8008eec <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8009552:	2800      	cmp	r0, #0
 8009554:	d0ee      	beq.n	8009534 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 8009556:	0020      	movs	r0, r4
 8009558:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800955a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800955a:	1c0b      	adds	r3, r1, #0
 800955c:	4281      	cmp	r1, r0
 800955e:	da00      	bge.n	8009562 <RegionCommonLimitTxPower+0x8>
 8009560:	1c03      	adds	r3, r0, #0
 8009562:	b258      	sxtb	r0, r3
}
 8009564:	4770      	bx	lr
	...

08009568 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8009568:	0080      	lsls	r0, r0, #2
 800956a:	5843      	ldr	r3, [r0, r1]
 800956c:	4a04      	ldr	r2, [pc, #16]	; (8009580 <RegionCommonGetBandwidth+0x18>)
 800956e:	2001      	movs	r0, #1
 8009570:	4293      	cmp	r3, r2
 8009572:	d004      	beq.n	800957e <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8009574:	4a03      	ldr	r2, [pc, #12]	; (8009584 <RegionCommonGetBandwidth+0x1c>)
 8009576:	189b      	adds	r3, r3, r2
 8009578:	425a      	negs	r2, r3
 800957a:	4153      	adcs	r3, r2
 800957c:	0058      	lsls	r0, r3, #1
    }
}
 800957e:	4770      	bx	lr
 8009580:	0003d090 	.word	0x0003d090
 8009584:	fff85ee0 	.word	0xfff85ee0

08009588 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8009588:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
 800958a:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <GetTimeOnAir+0x4c>)
{
 800958c:	000c      	movs	r4, r1
 800958e:	b085      	sub	sp, #20
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009590:	4911      	ldr	r1, [pc, #68]	; (80095d8 <GetTimeOnAir+0x50>)
    int8_t phyDr = DataratesEU868[datarate];
 8009592:	561f      	ldrsb	r7, [r3, r0]
{
 8009594:	0005      	movs	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009596:	f7ff ffe7 	bl	8009568 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <GetTimeOnAir+0x54>)
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800959c:	0001      	movs	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800959e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80095a0:	2001      	movs	r0, #1
 80095a2:	b2e4      	uxtb	r4, r4
    if( datarate == DR_7 )
 80095a4:	2d07      	cmp	r5, #7
 80095a6:	d10c      	bne.n	80095c2 <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80095a8:	2305      	movs	r3, #5
 80095aa:	9003      	str	r0, [sp, #12]
 80095ac:	2000      	movs	r0, #0
 80095ae:	22fa      	movs	r2, #250	; 0xfa
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	0003      	movs	r3, r0
 80095b4:	0092      	lsls	r2, r2, #2
 80095b6:	437a      	muls	r2, r7
 80095b8:	9402      	str	r4, [sp, #8]
 80095ba:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80095bc:	47b0      	blx	r6
    }
    return timeOnAir;
}
 80095be:	b005      	add	sp, #20
 80095c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80095c2:	2300      	movs	r3, #0
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	3308      	adds	r3, #8
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	003a      	movs	r2, r7
 80095cc:	0003      	movs	r3, r0
 80095ce:	9003      	str	r0, [sp, #12]
 80095d0:	9402      	str	r4, [sp, #8]
 80095d2:	e7f3      	b.n	80095bc <GetTimeOnAir+0x34>
 80095d4:	080192b7 	.word	0x080192b7
 80095d8:	08019290 	.word	0x08019290
 80095dc:	0801a9e0 	.word	0x0801a9e0

080095e0 <VerifyRfFreq>:
{
 80095e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 80095e2:	4b1a      	ldr	r3, [pc, #104]	; (800964c <VerifyRfFreq+0x6c>)
{
 80095e4:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 80095e6:	6a1b      	ldr	r3, [r3, #32]
{
 80095e8:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	4798      	blx	r3
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d006      	beq.n	8009600 <VerifyRfFreq+0x20>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80095f2:	4b17      	ldr	r3, [pc, #92]	; (8009650 <VerifyRfFreq+0x70>)
 80095f4:	4a17      	ldr	r2, [pc, #92]	; (8009654 <VerifyRfFreq+0x74>)
 80095f6:	18e3      	adds	r3, r4, r3
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d802      	bhi.n	8009602 <VerifyRfFreq+0x22>
        *band = 2;
 80095fc:	2302      	movs	r3, #2
        *band = 3;
 80095fe:	702b      	strb	r3, [r5, #0]
}
 8009600:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <VerifyRfFreq+0x78>)
 8009604:	4a15      	ldr	r2, [pc, #84]	; (800965c <VerifyRfFreq+0x7c>)
 8009606:	18e3      	adds	r3, r4, r3
 8009608:	4293      	cmp	r3, r2
 800960a:	d801      	bhi.n	8009610 <VerifyRfFreq+0x30>
        *band = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	e7f6      	b.n	80095fe <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8009610:	4b13      	ldr	r3, [pc, #76]	; (8009660 <VerifyRfFreq+0x80>)
 8009612:	4a14      	ldr	r2, [pc, #80]	; (8009664 <VerifyRfFreq+0x84>)
 8009614:	18e3      	adds	r3, r4, r3
 8009616:	4293      	cmp	r3, r2
 8009618:	d801      	bhi.n	800961e <VerifyRfFreq+0x3e>
        *band = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	e7ef      	b.n	80095fe <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <VerifyRfFreq+0x88>)
 8009620:	4a12      	ldr	r2, [pc, #72]	; (800966c <VerifyRfFreq+0x8c>)
 8009622:	18e3      	adds	r3, r4, r3
 8009624:	4293      	cmp	r3, r2
 8009626:	d801      	bhi.n	800962c <VerifyRfFreq+0x4c>
        *band = 5;
 8009628:	2305      	movs	r3, #5
 800962a:	e7e8      	b.n	80095fe <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800962c:	4b10      	ldr	r3, [pc, #64]	; (8009670 <VerifyRfFreq+0x90>)
 800962e:	4a11      	ldr	r2, [pc, #68]	; (8009674 <VerifyRfFreq+0x94>)
 8009630:	18e3      	adds	r3, r4, r3
 8009632:	4293      	cmp	r3, r2
 8009634:	d801      	bhi.n	800963a <VerifyRfFreq+0x5a>
        *band = 3;
 8009636:	2303      	movs	r3, #3
 8009638:	e7e1      	b.n	80095fe <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <VerifyRfFreq+0x98>)
 800963c:	18e4      	adds	r4, r4, r3
 800963e:	4b0f      	ldr	r3, [pc, #60]	; (800967c <VerifyRfFreq+0x9c>)
 8009640:	429c      	cmp	r4, r3
 8009642:	d801      	bhi.n	8009648 <VerifyRfFreq+0x68>
        *band = 4;
 8009644:	2304      	movs	r3, #4
 8009646:	e7da      	b.n	80095fe <VerifyRfFreq+0x1e>
        return false;
 8009648:	2000      	movs	r0, #0
 800964a:	e7d9      	b.n	8009600 <VerifyRfFreq+0x20>
 800964c:	0801a9e0 	.word	0x0801a9e0
 8009650:	cc8faa40 	.word	0xcc8faa40
 8009654:	001e847f 	.word	0x001e847f
 8009658:	cc7125c0 	.word	0xcc7125c0
 800965c:	002dc6c0 	.word	0x002dc6c0
 8009660:	cc435eff 	.word	0xcc435eff
 8009664:	000927bf 	.word	0x000927bf
 8009668:	cc38b0a0 	.word	0xcc38b0a0
 800966c:	0007a120 	.word	0x0007a120
 8009670:	cc2e0240 	.word	0xcc2e0240
 8009674:	0003d090 	.word	0x0003d090
 8009678:	cc296e60 	.word	0xcc296e60
 800967c:	000493e0 	.word	0x000493e0

08009680 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8009680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 8009682:	2200      	movs	r2, #0
{
 8009684:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 8009686:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 8009688:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800968a:	380b      	subs	r0, #11
 800968c:	282c      	cmp	r0, #44	; 0x2c
 800968e:	d860      	bhi.n	8009752 <RegionEU868GetPhyParam+0xd2>
 8009690:	f7f6 fd4c 	bl	800012c <__gnu_thumb1_case_uqi>
 8009694:	342f2d2a 	.word	0x342f2d2a
 8009698:	3e3b3836 	.word	0x3e3b3836
 800969c:	4b5f4240 	.word	0x4b5f4240
 80096a0:	57534d5f 	.word	0x57534d5f
 80096a4:	5c5f5f59 	.word	0x5c5f5f59
 80096a8:	5f5f1762 	.word	0x5f5f1762
 80096ac:	5f5f5f5f 	.word	0x5f5f5f5f
 80096b0:	5f5f5f5f 	.word	0x5f5f5f5f
 80096b4:	4b5f5f5f 	.word	0x4b5f5f5f
 80096b8:	5f5f6964 	.word	0x5f5f6964
 80096bc:	6b5f694b 	.word	0x6b5f694b
 80096c0:	6f          	.byte	0x6f
 80096c1:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80096c2:	785b      	ldrb	r3, [r3, #1]
 80096c4:	a801      	add	r0, sp, #4
 80096c6:	7003      	strb	r3, [r0, #0]
 80096c8:	2307      	movs	r3, #7
 80096ca:	7043      	strb	r3, [r0, #1]
 80096cc:	2380      	movs	r3, #128	; 0x80
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80096ce:	22d8      	movs	r2, #216	; 0xd8
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80096d0:	015b      	lsls	r3, r3, #5
 80096d2:	8043      	strh	r3, [r0, #2]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80096d4:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <RegionEU868GetPhyParam+0x100>)
 80096d6:	0092      	lsls	r2, r2, #2
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	189a      	adds	r2, r3, r2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80096dc:	6042      	str	r2, [r0, #4]
 80096de:	6083      	str	r3, [r0, #8]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80096e0:	f7ff ff20 	bl	8009524 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80096e4:	9000      	str	r0, [sp, #0]
            break;
 80096e6:	e034      	b.n	8009752 <RegionEU868GetPhyParam+0xd2>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80096e8:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80096ea:	9300      	str	r3, [sp, #0]
            break;
 80096ec:	e031      	b.n	8009752 <RegionEU868GetPhyParam+0xd2>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80096ee:	2320      	movs	r3, #32
 80096f0:	e7fb      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	4a23      	ldr	r2, [pc, #140]	; (8009784 <RegionEU868GetPhyParam+0x104>)
 80096f6:	b25b      	sxtb	r3, r3
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80096f8:	5cd3      	ldrb	r3, [r2, r3]
 80096fa:	e7f6      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e7f4      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8009700:	4b21      	ldr	r3, [pc, #132]	; (8009788 <RegionEU868GetPhyParam+0x108>)
 8009702:	e7f2      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8009704:	23fa      	movs	r3, #250	; 0xfa
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	e7ef      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800970a:	23fa      	movs	r3, #250	; 0xfa
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	e7ec      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8009710:	4b1e      	ldr	r3, [pc, #120]	; (800978c <RegionEU868GetPhyParam+0x10c>)
 8009712:	e7ea      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8009714:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <RegionEU868GetPhyParam+0x110>)
 8009716:	e7e8      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8009718:	21fa      	movs	r1, #250	; 0xfa
 800971a:	481e      	ldr	r0, [pc, #120]	; (8009794 <RegionEU868GetPhyParam+0x114>)
 800971c:	0089      	lsls	r1, r1, #2
 800971e:	f7fb f8b1 	bl	8004884 <randr>
 8009722:	23fa      	movs	r3, #250	; 0xfa
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	18c0      	adds	r0, r0, r3
 8009728:	e7dc      	b.n	80096e4 <RegionEU868GetPhyParam+0x64>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800972a:	4b1b      	ldr	r3, [pc, #108]	; (8009798 <RegionEU868GetPhyParam+0x118>)
 800972c:	e7dd      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800972e:	22d8      	movs	r2, #216	; 0xd8
 8009730:	4b13      	ldr	r3, [pc, #76]	; (8009780 <RegionEU868GetPhyParam+0x100>)
 8009732:	681b      	ldr	r3, [r3, #0]
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8009734:	0092      	lsls	r2, r2, #2
 8009736:	189b      	adds	r3, r3, r2
 8009738:	e7d7      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
 800973a:	4b11      	ldr	r3, [pc, #68]	; (8009780 <RegionEU868GetPhyParam+0x100>)
 800973c:	22db      	movs	r2, #219	; 0xdb
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	e7f8      	b.n	8009734 <RegionEU868GetPhyParam+0xb4>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8009742:	2310      	movs	r3, #16
 8009744:	e7d1      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8009746:	4b0e      	ldr	r3, [pc, #56]	; (8009780 <RegionEU868GetPhyParam+0x100>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	e7ce      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800974c:	2383      	movs	r3, #131	; 0x83
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800974e:	05db      	lsls	r3, r3, #23
 8009750:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 8009752:	9800      	ldr	r0, [sp, #0]
 8009754:	b005      	add	sp, #20
 8009756:	bd00      	pop	{pc}
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8009758:	2380      	movs	r3, #128	; 0x80
 800975a:	e7f8      	b.n	800974e <RegionEU868GetPhyParam+0xce>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800975c:	2312      	movs	r3, #18
 800975e:	466a      	mov	r2, sp
 8009760:	33ff      	adds	r3, #255	; 0xff
 8009762:	8013      	strh	r3, [r2, #0]
            break;
 8009764:	e7f5      	b.n	8009752 <RegionEU868GetPhyParam+0xd2>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8009766:	2303      	movs	r3, #3
 8009768:	e7bf      	b.n	80096ea <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	4a0b      	ldr	r2, [pc, #44]	; (800979c <RegionEU868GetPhyParam+0x11c>)
 800976e:	b25b      	sxtb	r3, r3
 8009770:	e7c2      	b.n	80096f8 <RegionEU868GetPhyParam+0x78>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8009772:	2001      	movs	r0, #1
 8009774:	490a      	ldr	r1, [pc, #40]	; (80097a0 <RegionEU868GetPhyParam+0x120>)
 8009776:	5618      	ldrsb	r0, [r3, r0]
 8009778:	f7ff fef6 	bl	8009568 <RegionCommonGetBandwidth>
 800977c:	e7b2      	b.n	80096e4 <RegionEU868GetPhyParam+0x64>
 800977e:	46c0      	nop			; (mov r8, r8)
 8009780:	2000129c 	.word	0x2000129c
 8009784:	080192bf 	.word	0x080192bf
 8009788:	00000bb8 	.word	0x00000bb8
 800978c:	00001388 	.word	0x00001388
 8009790:	00001770 	.word	0x00001770
 8009794:	fffffc18 	.word	0xfffffc18
 8009798:	33d3e608 	.word	0x33d3e608
 800979c:	080192b7 	.word	0x080192b7
 80097a0:	08019290 	.word	0x08019290

080097a4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80097a4:	b513      	push	{r0, r1, r4, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80097a6:	7804      	ldrb	r4, [r0, #0]
{
 80097a8:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80097aa:	7842      	ldrb	r2, [r0, #1]
 80097ac:	200c      	movs	r0, #12
 80097ae:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <RegionEU868SetBandTxDone+0x2c>)
 80097b0:	4360      	muls	r0, r4
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	181b      	adds	r3, r3, r0
 80097b6:	2018      	movs	r0, #24
 80097b8:	7a5b      	ldrb	r3, [r3, #9]
 80097ba:	4343      	muls	r3, r0
 80097bc:	4805      	ldr	r0, [pc, #20]	; (80097d4 <RegionEU868SetBandTxDone+0x30>)
 80097be:	6800      	ldr	r0, [r0, #0]
 80097c0:	18c0      	adds	r0, r0, r3
 80097c2:	690b      	ldr	r3, [r1, #16]
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	68cb      	ldr	r3, [r1, #12]
 80097c8:	6889      	ldr	r1, [r1, #8]
 80097ca:	f7ff fc11 	bl	8008ff0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 80097ce:	bd13      	pop	{r0, r1, r4, pc}
 80097d0:	2000129c 	.word	0x2000129c
 80097d4:	20001298 	.word	0x20001298

080097d8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	b0a4      	sub	sp, #144	; 0x90
 80097dc:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 80097de:	2290      	movs	r2, #144	; 0x90
 80097e0:	2100      	movs	r1, #0
 80097e2:	4668      	mov	r0, sp
 80097e4:	f00c fbbd 	bl	8015f62 <memset>
 80097e8:	2364      	movs	r3, #100	; 0x64
 80097ea:	466a      	mov	r2, sp
 80097ec:	8013      	strh	r3, [r2, #0]
 80097ee:	8313      	strh	r3, [r2, #24]
 80097f0:	22fa      	movs	r2, #250	; 0xfa
 80097f2:	4669      	mov	r1, sp
 80097f4:	200a      	movs	r0, #10
 80097f6:	0092      	lsls	r2, r2, #2
 80097f8:	860a      	strh	r2, [r1, #48]	; 0x30
 80097fa:	a912      	add	r1, sp, #72	; 0x48
 80097fc:	8008      	strh	r0, [r1, #0]
 80097fe:	a918      	add	r1, sp, #96	; 0x60
 8009800:	800b      	strh	r3, [r1, #0]
 8009802:	ab1e      	add	r3, sp, #120	; 0x78
 8009804:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8009806:	7b22      	ldrb	r2, [r4, #12]
 8009808:	2a01      	cmp	r2, #1
 800980a:	d02b      	beq.n	8009864 <RegionEU868InitDefaults+0x8c>
 800980c:	2a02      	cmp	r2, #2
 800980e:	d035      	beq.n	800987c <RegionEU868InitDefaults+0xa4>
 8009810:	2a00      	cmp	r2, #0
 8009812:	d125      	bne.n	8009860 <RegionEU868InitDefaults+0x88>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d022      	beq.n	8009860 <RegionEU868InitDefaults+0x88>
 800981a:	6863      	ldr	r3, [r4, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01f      	beq.n	8009860 <RegionEU868InitDefaults+0x88>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8009820:	4d1c      	ldr	r5, [pc, #112]	; (8009894 <RegionEU868InitDefaults+0xbc>)
            RegionBands = (Band_t*) params->Bands;
 8009822:	68a0      	ldr	r0, [r4, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8009824:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 8009826:	4b1c      	ldr	r3, [pc, #112]	; (8009898 <RegionEU868InitDefaults+0xc0>)

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8009828:	4669      	mov	r1, sp
 800982a:	3290      	adds	r2, #144	; 0x90
            RegionBands = (Band_t*) params->Bands;
 800982c:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800982e:	f7fb f834 	bl	800489a <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8009832:	6828      	ldr	r0, [r5, #0]
 8009834:	4b19      	ldr	r3, [pc, #100]	; (800989c <RegionEU868InitDefaults+0xc4>)
 8009836:	0001      	movs	r1, r0
 8009838:	001a      	movs	r2, r3
 800983a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800983c:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800983e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8009840:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8009842:	0002      	movs	r2, r0
 8009844:	3318      	adds	r3, #24
 8009846:	3218      	adds	r2, #24
 8009848:	cb32      	ldmia	r3!, {r1, r4, r5}
 800984a:	c232      	stmia	r2!, {r1, r4, r5}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800984c:	23db      	movs	r3, #219	; 0xdb
 800984e:	2207      	movs	r2, #7
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	52c2      	strh	r2, [r0, r3]

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009854:	18c1      	adds	r1, r0, r3
 8009856:	3b0c      	subs	r3, #12
 8009858:	18c0      	adds	r0, r0, r3
 800985a:	3a06      	subs	r2, #6
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800985c:	f7ff fbb9 	bl	8008fd2 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 8009860:	b024      	add	sp, #144	; 0x90
 8009862:	bd70      	pop	{r4, r5, r6, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8009864:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <RegionEU868InitDefaults+0xbc>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	2300      	movs	r3, #0
 800986a:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800986c:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800986e:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009870:	23db      	movs	r3, #219	; 0xdb
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	18c1      	adds	r1, r0, r3
 8009876:	3b0c      	subs	r3, #12
 8009878:	18c0      	adds	r0, r0, r3
 800987a:	e7ef      	b.n	800985c <RegionEU868InitDefaults+0x84>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800987c:	21d8      	movs	r1, #216	; 0xd8
 800987e:	20db      	movs	r0, #219	; 0xdb
 8009880:	4b04      	ldr	r3, [pc, #16]	; (8009894 <RegionEU868InitDefaults+0xbc>)
 8009882:	0089      	lsls	r1, r1, #2
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	0080      	lsls	r0, r0, #2
 8009888:	5a5a      	ldrh	r2, [r3, r1]
 800988a:	5a18      	ldrh	r0, [r3, r0]
 800988c:	4302      	orrs	r2, r0
 800988e:	525a      	strh	r2, [r3, r1]
            break;
 8009890:	e7e6      	b.n	8009860 <RegionEU868InitDefaults+0x88>
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	2000129c 	.word	0x2000129c
 8009898:	20001298 	.word	0x20001298
 800989c:	080187c4 	.word	0x080187c4

080098a0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80098a0:	0003      	movs	r3, r0
 80098a2:	b507      	push	{r0, r1, r2, lr}
 80098a4:	0008      	movs	r0, r1
    switch( phyAttribute )
 80098a6:	290e      	cmp	r1, #14
 80098a8:	d809      	bhi.n	80098be <RegionEU868Verify+0x1e>
 80098aa:	f7f6 fc3f 	bl	800012c <__gnu_thumb1_case_uqi>
 80098ae:	080a      	.short	0x080a
 80098b0:	1c080808 	.word	0x1c080808
 80098b4:	1c081c12 	.word	0x1c081c12
 80098b8:	0808081c 	.word	0x0808081c
 80098bc:	20          	.byte	0x20
 80098bd:	00          	.byte	0x00
 80098be:	2000      	movs	r0, #0
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 80098c0:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 80098c2:	466a      	mov	r2, sp
 80098c4:	1dd1      	adds	r1, r2, #7
 80098c6:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 80098c8:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 80098ca:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 80098cc:	f7ff fe88 	bl	80095e0 <VerifyRfFreq>
 80098d0:	e7f6      	b.n	80098c0 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80098d2:	2000      	movs	r0, #0
 80098d4:	2205      	movs	r2, #5
 80098d6:	5618      	ldrsb	r0, [r3, r0]
 80098d8:	2100      	movs	r1, #0
 80098da:	f7ff fb3d 	bl	8008f58 <RegionCommonValueInRange>
 80098de:	1e43      	subs	r3, r0, #1
 80098e0:	4198      	sbcs	r0, r3
 80098e2:	b2c0      	uxtb	r0, r0
 80098e4:	e7ec      	b.n	80098c0 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80098e6:	2000      	movs	r0, #0
 80098e8:	2207      	movs	r2, #7
 80098ea:	5618      	ldrsb	r0, [r3, r0]
 80098ec:	e7f4      	b.n	80098d8 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7e6      	b.n	80098c0 <RegionEU868Verify+0x20>
	...

080098f4 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80098f4:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 80098f6:	7904      	ldrb	r4, [r0, #4]
{
 80098f8:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 80098fa:	2c00      	cmp	r4, #0
 80098fc:	d00d      	beq.n	800991a <RegionEU868ChanMaskSet+0x26>
 80098fe:	2000      	movs	r0, #0
 8009900:	2c01      	cmp	r4, #1
 8009902:	d114      	bne.n	800992e <RegionEU868ChanMaskSet+0x3a>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8009904:	4a0a      	ldr	r2, [pc, #40]	; (8009930 <RegionEU868ChanMaskSet+0x3c>)
 8009906:	6819      	ldr	r1, [r3, #0]
 8009908:	6810      	ldr	r0, [r2, #0]
 800990a:	22db      	movs	r2, #219	; 0xdb
 800990c:	0092      	lsls	r2, r2, #2
 800990e:	1880      	adds	r0, r0, r2
 8009910:	0022      	movs	r2, r4
 8009912:	f7ff fb5e 	bl	8008fd2 <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 8009916:	0020      	movs	r0, r4
            break;
 8009918:	e009      	b.n	800992e <RegionEU868ChanMaskSet+0x3a>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800991a:	4a05      	ldr	r2, [pc, #20]	; (8009930 <RegionEU868ChanMaskSet+0x3c>)
 800991c:	6819      	ldr	r1, [r3, #0]
 800991e:	6810      	ldr	r0, [r2, #0]
 8009920:	22d8      	movs	r2, #216	; 0xd8
 8009922:	0092      	lsls	r2, r2, #2
 8009924:	1880      	adds	r0, r0, r2
 8009926:	2201      	movs	r2, #1
 8009928:	f7ff fb53 	bl	8008fd2 <RegionCommonChanMaskCopy>
    return true;
 800992c:	2001      	movs	r0, #1
}
 800992e:	bd10      	pop	{r4, pc}
 8009930:	2000129c 	.word	0x2000129c

08009934 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009936:	001c      	movs	r4, r3
 8009938:	000e      	movs	r6, r1
 800993a:	0017      	movs	r7, r2
 800993c:	b085      	sub	sp, #20
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800993e:	1c03      	adds	r3, r0, #0
 8009940:	2807      	cmp	r0, #7
 8009942:	dd00      	ble.n	8009946 <RegionEU868ComputeRxWindowParameters+0x12>
 8009944:	2307      	movs	r3, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8009946:	4d13      	ldr	r5, [pc, #76]	; (8009994 <RegionEU868ComputeRxWindowParameters+0x60>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8009948:	b258      	sxtb	r0, r3
 800994a:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800994c:	0029      	movs	r1, r5
 800994e:	f7ff fe0b 	bl	8009568 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 8009952:	2301      	movs	r3, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8009954:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 8009956:	56e3      	ldrsb	r3, [r4, r3]
 8009958:	2b07      	cmp	r3, #7
 800995a:	d114      	bne.n	8009986 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800995c:	2032      	movs	r0, #50	; 0x32
 800995e:	f7ff fcf5 	bl	800934c <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8009962:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <RegionEU868ComputeRxWindowParameters+0x64>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8009964:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8009966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009968:	9303      	str	r3, [sp, #12]
 800996a:	4798      	blx	r3
 800996c:	0022      	movs	r2, r4
 800996e:	3408      	adds	r4, #8
 8009970:	320c      	adds	r2, #12
 8009972:	0003      	movs	r3, r0
 8009974:	9201      	str	r2, [sp, #4]
 8009976:	0031      	movs	r1, r6
 8009978:	003a      	movs	r2, r7
 800997a:	0028      	movs	r0, r5
 800997c:	9400      	str	r4, [sp, #0]
 800997e:	f7ff fced 	bl	800935c <RegionCommonComputeRxWindowParameters>
}
 8009982:	b005      	add	sp, #20
 8009984:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8009986:	4905      	ldr	r1, [pc, #20]	; (800999c <RegionEU868ComputeRxWindowParameters+0x68>)
 8009988:	009a      	lsls	r2, r3, #2
 800998a:	5cc8      	ldrb	r0, [r1, r3]
 800998c:	5951      	ldr	r1, [r2, r5]
 800998e:	f7ff fcd3 	bl	8009338 <RegionCommonComputeSymbolTimeLoRa>
 8009992:	e7e6      	b.n	8009962 <RegionEU868ComputeRxWindowParameters+0x2e>
 8009994:	08019290 	.word	0x08019290
 8009998:	0801a9e0 	.word	0x0801a9e0
 800999c:	080192b7 	.word	0x080192b7

080099a0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80099a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80099a2:	2701      	movs	r7, #1
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 80099a4:	4d31      	ldr	r5, [pc, #196]	; (8009a6c <RegionEU868RxConfig+0xcc>)
{
 80099a6:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 80099a8:	686b      	ldr	r3, [r5, #4]
{
 80099aa:	910d      	str	r1, [sp, #52]	; 0x34
    int8_t dr = rxConfig->Datarate;
 80099ac:	57c7      	ldrsb	r7, [r0, r7]
{
 80099ae:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 80099b0:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t frequency = rxConfig->Frequency;
 80099b2:	6846      	ldr	r6, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 80099b4:	4798      	blx	r3
 80099b6:	900a      	str	r0, [sp, #40]	; 0x28
    {
        return false;
 80099b8:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 80099ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099bc:	4283      	cmp	r3, r0
 80099be:	d13c      	bne.n	8009a3a <RegionEU868RxConfig+0x9a>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80099c0:	7ca3      	ldrb	r3, [r4, #18]
 80099c2:	4283      	cmp	r3, r0
 80099c4:	d10a      	bne.n	80099dc <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80099c6:	230c      	movs	r3, #12
 80099c8:	7822      	ldrb	r2, [r4, #0]
 80099ca:	435a      	muls	r2, r3
 80099cc:	4b28      	ldr	r3, [pc, #160]	; (8009a70 <RegionEU868RxConfig+0xd0>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	189b      	adds	r3, r3, r2
 80099d2:	681e      	ldr	r6, [r3, #0]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4283      	cmp	r3, r0
 80099d8:	d000      	beq.n	80099dc <RegionEU868RxConfig+0x3c>
 80099da:	001e      	movs	r6, r3
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80099dc:	4b25      	ldr	r3, [pc, #148]	; (8009a74 <RegionEU868RxConfig+0xd4>)

    Radio.SetChannel( frequency );
 80099de:	0030      	movs	r0, r6
    phyDr = DataratesEU868[dr];
 80099e0:	57db      	ldrsb	r3, [r3, r7]
 80099e2:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 80099e4:	68eb      	ldr	r3, [r5, #12]
 80099e6:	930c      	str	r3, [sp, #48]	; 0x30
 80099e8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80099ea:	69ab      	ldr	r3, [r5, #24]
 80099ec:	930c      	str	r3, [sp, #48]	; 0x30
 80099ee:	7c63      	ldrb	r3, [r4, #17]
    if( dr == DR_7 )
 80099f0:	2f07      	cmp	r7, #7
 80099f2:	d124      	bne.n	8009a3e <RegionEU868RxConfig+0x9e>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80099f4:	2000      	movs	r0, #0
 80099f6:	9309      	str	r3, [sp, #36]	; 0x24
 80099f8:	2301      	movs	r3, #1
 80099fa:	9008      	str	r0, [sp, #32]
 80099fc:	9007      	str	r0, [sp, #28]
 80099fe:	9006      	str	r0, [sp, #24]
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	9004      	str	r0, [sp, #16]
 8009a04:	9003      	str	r0, [sp, #12]
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	22fa      	movs	r2, #250	; 0xfa
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	9302      	str	r3, [sp, #8]
 8009a0e:	2305      	movs	r3, #5
 8009a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	4b18      	ldr	r3, [pc, #96]	; (8009a78 <RegionEU868RxConfig+0xd8>)
 8009a16:	0092      	lsls	r2, r2, #2
 8009a18:	434a      	muls	r2, r1
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4917      	ldr	r1, [pc, #92]	; (8009a7c <RegionEU868RxConfig+0xdc>)
 8009a1e:	0003      	movs	r3, r0
 8009a20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009a22:	47a0      	blx	r4
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateEU868[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8009a24:	4b16      	ldr	r3, [pc, #88]	; (8009a80 <RegionEU868RxConfig+0xe0>)
 8009a26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a28:	5dd9      	ldrb	r1, [r3, r7]
 8009a2a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009a2c:	310d      	adds	r1, #13
 8009a2e:	b2c9      	uxtb	r1, r1
 8009a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a32:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
 8009a34:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 8009a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a38:	701f      	strb	r7, [r3, #0]
}
 8009a3a:	b00f      	add	sp, #60	; 0x3c
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8009a3e:	78a1      	ldrb	r1, [r4, #2]
 8009a40:	2601      	movs	r6, #1
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	2300      	movs	r3, #0
 8009a46:	9608      	str	r6, [sp, #32]
 8009a48:	9307      	str	r3, [sp, #28]
 8009a4a:	9306      	str	r3, [sp, #24]
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	68a2      	ldr	r2, [r4, #8]
 8009a54:	0030      	movs	r0, r6
 8009a56:	b292      	uxth	r2, r2
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	9201      	str	r2, [sp, #4]
 8009a60:	0033      	movs	r3, r6
 8009a62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009a66:	47a0      	blx	r4
        modem = MODEM_LORA;
 8009a68:	960a      	str	r6, [sp, #40]	; 0x28
 8009a6a:	e7db      	b.n	8009a24 <RegionEU868RxConfig+0x84>
 8009a6c:	0801a9e0 	.word	0x0801a9e0
 8009a70:	2000129c 	.word	0x2000129c
 8009a74:	080192b7 	.word	0x080192b7
 8009a78:	00014585 	.word	0x00014585
 8009a7c:	0000c350 	.word	0x0000c350
 8009a80:	080192bf 	.word	0x080192bf

08009a84 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009a84:	2301      	movs	r3, #1
{
 8009a86:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009a88:	250c      	movs	r5, #12
{
 8009a8a:	b091      	sub	sp, #68	; 0x44
 8009a8c:	910e      	str	r1, [sp, #56]	; 0x38
 8009a8e:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009a90:	56c3      	ldrsb	r3, [r0, r3]
 8009a92:	4a35      	ldr	r2, [pc, #212]	; (8009b68 <RegionEU868TxConfig+0xe4>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009a94:	4e35      	ldr	r6, [pc, #212]	; (8009b6c <RegionEU868TxConfig+0xe8>)
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009a96:	56d3      	ldrsb	r3, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009a98:	6832      	ldr	r2, [r6, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009a9a:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009a9c:	7803      	ldrb	r3, [r0, #0]
{
 8009a9e:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009aa0:	436b      	muls	r3, r5
 8009aa2:	18d3      	adds	r3, r2, r3
 8009aa4:	2218      	movs	r2, #24
 8009aa6:	7a59      	ldrb	r1, [r3, #9]
 8009aa8:	2002      	movs	r0, #2
 8009aaa:	434a      	muls	r2, r1
 8009aac:	2102      	movs	r1, #2
 8009aae:	4b30      	ldr	r3, [pc, #192]	; (8009b70 <RegionEU868TxConfig+0xec>)
 8009ab0:	5620      	ldrsb	r0, [r4, r0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	189b      	adds	r3, r3, r2
 8009ab6:	5659      	ldrsb	r1, [r3, r1]
 8009ab8:	f7ff fd4f 	bl	800955a <RegionCommonLimitTxPower>
 8009abc:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8009abe:	2001      	movs	r0, #1
 8009ac0:	492c      	ldr	r1, [pc, #176]	; (8009b74 <RegionEU868TxConfig+0xf0>)
 8009ac2:	5620      	ldrsb	r0, [r4, r0]
 8009ac4:	f7ff fd50 	bl	8009568 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8009ac8:	68a2      	ldr	r2, [r4, #8]
 8009aca:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8009acc:	900b      	str	r0, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8009ace:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ad0:	f7ff fc72 	bl	80093b8 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8009ad4:	7822      	ldrb	r2, [r4, #0]
 8009ad6:	6833      	ldr	r3, [r6, #0]
 8009ad8:	4355      	muls	r5, r2
 8009ada:	4e27      	ldr	r6, [pc, #156]	; (8009b78 <RegionEU868TxConfig+0xf4>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8009adc:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8009ade:	68f2      	ldr	r2, [r6, #12]
 8009ae0:	58e8      	ldr	r0, [r5, r3]
 8009ae2:	920c      	str	r2, [sp, #48]	; 0x30
 8009ae4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009ae6:	69f3      	ldr	r3, [r6, #28]
    if( txConfig->Datarate == DR_7 )
 8009ae8:	2201      	movs	r2, #1
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009aea:	930c      	str	r3, [sp, #48]	; 0x30
 8009aec:	23fa      	movs	r3, #250	; 0xfa
 8009aee:	2500      	movs	r5, #0
    if( txConfig->Datarate == DR_7 )
 8009af0:	56a2      	ldrsb	r2, [r4, r2]
 8009af2:	011b      	lsls	r3, r3, #4
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009af4:	9308      	str	r3, [sp, #32]
 8009af6:	9507      	str	r5, [sp, #28]
 8009af8:	9506      	str	r5, [sp, #24]
 8009afa:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 8009afc:	2a07      	cmp	r2, #7
 8009afe:	d123      	bne.n	8009b48 <RegionEU868TxConfig+0xc4>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009b00:	2301      	movs	r3, #1
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	3304      	adds	r3, #4
 8009b06:	9302      	str	r3, [sp, #8]
 8009b08:	23fa      	movs	r3, #250	; 0xfa
 8009b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4353      	muls	r3, r2
 8009b10:	0039      	movs	r1, r7
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	0028      	movs	r0, r5
 8009b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b18:	4a18      	ldr	r2, [pc, #96]	; (8009b7c <RegionEU868TxConfig+0xf8>)
 8009b1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009b1c:	9503      	str	r5, [sp, #12]
 8009b1e:	9501      	str	r5, [sp, #4]
 8009b20:	47b0      	blx	r6
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8009b22:	2001      	movs	r0, #1
 8009b24:	89a1      	ldrh	r1, [r4, #12]
 8009b26:	5620      	ldrsb	r0, [r4, r0]
 8009b28:	f7ff fd2e 	bl	8009588 <GetTimeOnAir>
 8009b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b2e:	6018      	str	r0, [r3, #0]

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8009b30:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <RegionEU868TxConfig+0xf4>)
 8009b32:	0028      	movs	r0, r5
 8009b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b36:	7b21      	ldrb	r1, [r4, #12]
 8009b38:	930a      	str	r3, [sp, #40]	; 0x28
 8009b3a:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
 8009b3c:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 8009b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b42:	701a      	strb	r2, [r3, #0]
}
 8009b44:	b011      	add	sp, #68	; 0x44
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8009b48:	2308      	movs	r3, #8
 8009b4a:	2601      	movs	r6, #1
 8009b4c:	9302      	str	r3, [sp, #8]
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	002a      	movs	r2, r5
 8009b52:	9503      	str	r5, [sp, #12]
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b58:	0039      	movs	r1, r7
 8009b5a:	0030      	movs	r0, r6
 8009b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5e:	9604      	str	r6, [sp, #16]
 8009b60:	9601      	str	r6, [sp, #4]
 8009b62:	47a8      	blx	r5
        modem = MODEM_LORA;
 8009b64:	0035      	movs	r5, r6
 8009b66:	e7dc      	b.n	8009b22 <RegionEU868TxConfig+0x9e>
 8009b68:	080192b7 	.word	0x080192b7
 8009b6c:	2000129c 	.word	0x2000129c
 8009b70:	20001298 	.word	0x20001298
 8009b74:	08019290 	.word	0x08019290
 8009b78:	0801a9e0 	.word	0x0801a9e0
 8009b7c:	000061a8 	.word	0x000061a8

08009b80 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8009b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8009b82:	2700      	movs	r7, #0
    uint8_t status = 0x07;
 8009b84:	2507      	movs	r5, #7
{
 8009b86:	b093      	sub	sp, #76	; 0x4c
 8009b88:	9103      	str	r1, [sp, #12]
 8009b8a:	9204      	str	r2, [sp, #16]
 8009b8c:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8009b8e:	2206      	movs	r2, #6
 8009b90:	2100      	movs	r1, #0
 8009b92:	a808      	add	r0, sp, #32
{
 8009b94:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8009b96:	f00c f9e4 	bl	8015f62 <memset>
    uint16_t chMask = 0;
 8009b9a:	ab06      	add	r3, sp, #24
 8009b9c:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8009b9e:	7a23      	ldrb	r3, [r4, #8]
 8009ba0:	42bb      	cmp	r3, r7
 8009ba2:	d906      	bls.n	8009bb2 <RegionEU868LinkAdrReq+0x32>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8009ba4:	6863      	ldr	r3, [r4, #4]
 8009ba6:	a908      	add	r1, sp, #32
 8009ba8:	19d8      	adds	r0, r3, r7
 8009baa:	f7ff fb57 	bl	800925c <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d147      	bne.n	8009c42 <RegionEU868LinkAdrReq+0xc2>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 8009bb2:	a80a      	add	r0, sp, #40	; 0x28
 8009bb4:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009bb6:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009bb8:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009bba:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009bbc:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009bbe:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009bc0:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8009bc2:	78ab      	ldrb	r3, [r5, #2]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009bc4:	4e40      	ldr	r6, [pc, #256]	; (8009cc8 <RegionEU868LinkAdrReq+0x148>)
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8009bc6:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8009bc8:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009bca:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8009bcc:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009bce:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009bd0:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009bd2:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8009bd4:	7b23      	ldrb	r3, [r4, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009bd6:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8009bd8:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8009bda:	7b63      	ldrb	r3, [r4, #13]
 8009bdc:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8009bde:	2310      	movs	r3, #16
 8009be0:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8009be2:	ab06      	add	r3, sp, #24
 8009be4:	3306      	adds	r3, #6
 8009be6:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8009be8:	23e0      	movs	r3, #224	; 0xe0
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009bee:	6833      	ldr	r3, [r6, #0]
 8009bf0:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8009bf2:	2307      	movs	r3, #7
 8009bf4:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8009bf6:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009bf8:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8009bfa:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009bfc:	1909      	adds	r1, r1, r4
 8009bfe:	002b      	movs	r3, r5
 8009c00:	f7ff fb47 	bl	8009292 <RegionCommonLinkAdrReqVerifyParams>
 8009c04:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8009c06:	2807      	cmp	r0, #7
 8009c08:	d10d      	bne.n	8009c26 <RegionEU868LinkAdrReq+0xa6>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8009c0a:	22d8      	movs	r2, #216	; 0xd8
 8009c0c:	6833      	ldr	r3, [r6, #0]
 8009c0e:	0092      	lsls	r2, r2, #2
 8009c10:	1898      	adds	r0, r3, r2
 8009c12:	2100      	movs	r1, #0
 8009c14:	220c      	movs	r2, #12
 8009c16:	f7fa fe55 	bl	80048c4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8009c1a:	ab06      	add	r3, sp, #24
 8009c1c:	88d9      	ldrh	r1, [r3, #6]
 8009c1e:	23d8      	movs	r3, #216	; 0xd8
 8009c20:	6832      	ldr	r2, [r6, #0]
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	52d1      	strh	r1, [r2, r3]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 8009c26:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 8009c28:	786b      	ldrb	r3, [r5, #1]
 8009c2a:	9a03      	ldr	r2, [sp, #12]
 8009c2c:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 8009c2e:	78ab      	ldrb	r3, [r5, #2]
 8009c30:	9a04      	ldr	r2, [sp, #16]
 8009c32:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8009c34:	782b      	ldrb	r3, [r5, #0]
 8009c36:	9a05      	ldr	r2, [sp, #20]
 8009c38:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 8009c3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009c3c:	701f      	strb	r7, [r3, #0]
}
 8009c3e:	b013      	add	sp, #76	; 0x4c
 8009c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 8009c42:	ab06      	add	r3, sp, #24
 8009c44:	899b      	ldrh	r3, [r3, #12]
 8009c46:	aa06      	add	r2, sp, #24
 8009c48:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009c4a:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 8009c4c:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009c4e:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 8009c50:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d123      	bne.n	8009c9e <RegionEU868LinkAdrReq+0x11e>
            status &= 0xFE; // Channel mask KO
 8009c56:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0a0      	beq.n	8009b9e <RegionEU868LinkAdrReq+0x1e>
                        status &= 0xFE; // Channel mask KO
 8009c5c:	2606      	movs	r6, #6
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8009c5e:	4a1a      	ldr	r2, [pc, #104]	; (8009cc8 <RegionEU868LinkAdrReq+0x148>)
 8009c60:	2507      	movs	r5, #7
 8009c62:	6812      	ldr	r2, [r2, #0]
                        status &= 0xFE; // Channel mask KO
 8009c64:	46b4      	mov	ip, r6
 8009c66:	9201      	str	r2, [sp, #4]
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8009c68:	2200      	movs	r2, #0
 8009c6a:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 8009c6c:	2806      	cmp	r0, #6
 8009c6e:	d11f      	bne.n	8009cb0 <RegionEU868LinkAdrReq+0x130>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8009c70:	9901      	ldr	r1, [sp, #4]
 8009c72:	680e      	ldr	r6, [r1, #0]
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	d005      	beq.n	8009c84 <RegionEU868LinkAdrReq+0x104>
                        chMask |= 1 << i;
 8009c78:	2601      	movs	r6, #1
 8009c7a:	4096      	lsls	r6, r2
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	4333      	orrs	r3, r6
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8009c84:	9901      	ldr	r1, [sp, #4]
 8009c86:	3201      	adds	r2, #1
 8009c88:	310c      	adds	r1, #12
 8009c8a:	9101      	str	r1, [sp, #4]
 8009c8c:	2a10      	cmp	r2, #16
 8009c8e:	d1ed      	bne.n	8009c6c <RegionEU868LinkAdrReq+0xec>
 8009c90:	9a02      	ldr	r2, [sp, #8]
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	d100      	bne.n	8009c98 <RegionEU868LinkAdrReq+0x118>
 8009c96:	e782      	b.n	8009b9e <RegionEU868LinkAdrReq+0x1e>
 8009c98:	aa06      	add	r2, sp, #24
 8009c9a:	80d3      	strh	r3, [r2, #6]
 8009c9c:	e77f      	b.n	8009b9e <RegionEU868LinkAdrReq+0x1e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8009c9e:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 8009ca0:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8009ca2:	2a04      	cmp	r2, #4
 8009ca4:	d800      	bhi.n	8009ca8 <RegionEU868LinkAdrReq+0x128>
 8009ca6:	e77a      	b.n	8009b9e <RegionEU868LinkAdrReq+0x1e>
 8009ca8:	42a8      	cmp	r0, r5
 8009caa:	d000      	beq.n	8009cae <RegionEU868LinkAdrReq+0x12e>
 8009cac:	e777      	b.n	8009b9e <RegionEU868LinkAdrReq+0x1e>
 8009cae:	e7d5      	b.n	8009c5c <RegionEU868LinkAdrReq+0xdc>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8009cb0:	001e      	movs	r6, r3
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	4116      	asrs	r6, r2
 8009cb6:	420e      	tst	r6, r1
 8009cb8:	d0e4      	beq.n	8009c84 <RegionEU868LinkAdrReq+0x104>
 8009cba:	9901      	ldr	r1, [sp, #4]
 8009cbc:	6809      	ldr	r1, [r1, #0]
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d1e0      	bne.n	8009c84 <RegionEU868LinkAdrReq+0x104>
                        status &= 0xFE; // Channel mask KO
 8009cc2:	4665      	mov	r5, ip
 8009cc4:	e7de      	b.n	8009c84 <RegionEU868LinkAdrReq+0x104>
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	2000129c 	.word	0x2000129c

08009ccc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8009ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint8_t band = 0;
 8009cce:	466b      	mov	r3, sp
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	1dd9      	adds	r1, r3, #7
{
 8009cd4:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8009cd6:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 8009cd8:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8009cda:	f7ff fc81 	bl	80095e0 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 8009cde:	1e43      	subs	r3, r0, #1
 8009ce0:	4198      	sbcs	r0, r3
 8009ce2:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	2207      	movs	r2, #7
 8009ce8:	0031      	movs	r1, r6
 8009cea:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 8009cec:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8009cee:	f7ff f933 	bl	8008f58 <RegionCommonValueInRange>
 8009cf2:	42b0      	cmp	r0, r6
 8009cf4:	d101      	bne.n	8009cfa <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	2205      	movs	r2, #5
 8009cfe:	2100      	movs	r1, #0
 8009d00:	5628      	ldrsb	r0, [r5, r0]
 8009d02:	f7ff f929 	bl	8008f58 <RegionCommonValueInRange>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d101      	bne.n	8009d0e <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	439c      	bics	r4, r3
    }

    return status;
}
 8009d0e:	0020      	movs	r0, r4
 8009d10:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08009d12 <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
 8009d12:	2001      	movs	r0, #1
}
 8009d14:	4240      	negs	r0, r0
 8009d16:	4770      	bx	lr

08009d18 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8009d18:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
    uint8_t band = 0;
 8009d1a:	466b      	mov	r3, sp
 8009d1c:	1dd9      	adds	r1, r3, #7
 8009d1e:	2300      	movs	r3, #0
{
 8009d20:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8009d22:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 8009d24:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8009d26:	f7ff fc5b 	bl	80095e0 <VerifyRfFreq>
    {
        status &= 0xFE;
 8009d2a:	0003      	movs	r3, r0
 8009d2c:	1e5a      	subs	r2, r3, #1
 8009d2e:	4193      	sbcs	r3, r2
 8009d30:	220c      	movs	r2, #12
 8009d32:	7821      	ldrb	r1, [r4, #0]
 8009d34:	3302      	adds	r3, #2
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8009d36:	4351      	muls	r1, r2
 8009d38:	4a08      	ldr	r2, [pc, #32]	; (8009d5c <RegionEU868DlChannelReq+0x44>)
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	1852      	adds	r2, r2, r1
 8009d3e:	6811      	ldr	r1, [r2, #0]
 8009d40:	2900      	cmp	r1, #0
 8009d42:	d103      	bne.n	8009d4c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFD;
 8009d44:	2202      	movs	r2, #2
 8009d46:	4393      	bics	r3, r2
    if( status == 0x03 )
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
 8009d48:	b258      	sxtb	r0, r3
}
 8009d4a:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	d102      	bne.n	8009d56 <RegionEU868DlChannelReq+0x3e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8009d50:	6861      	ldr	r1, [r4, #4]
 8009d52:	6051      	str	r1, [r2, #4]
 8009d54:	e7f8      	b.n	8009d48 <RegionEU868DlChannelReq+0x30>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e7f6      	b.n	8009d48 <RegionEU868DlChannelReq+0x30>
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	2000129c 	.word	0x2000129c

08009d60 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 8009d60:	4770      	bx	lr
	...

08009d64 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbEnabledChannels = 0;
 8009d66:	2500      	movs	r5, #0
{
 8009d68:	b09b      	sub	sp, #108	; 0x6c
 8009d6a:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 8009d6c:	ab07      	add	r3, sp, #28
 8009d6e:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8009d70:	230d      	movs	r3, #13
{
 8009d72:	9204      	str	r2, [sp, #16]
    uint8_t nbRestrictedChannels = 0;
 8009d74:	aa04      	add	r2, sp, #16
 8009d76:	189b      	adds	r3, r3, r2
{
 8009d78:	9103      	str	r1, [sp, #12]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8009d7a:	220c      	movs	r2, #12
 8009d7c:	0029      	movs	r1, r5
{
 8009d7e:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8009d80:	a809      	add	r0, sp, #36	; 0x24
    uint8_t nbRestrictedChannels = 0;
 8009d82:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8009d84:	9508      	str	r5, [sp, #32]
 8009d86:	f00c f8ec 	bl	8015f62 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8009d8a:	230e      	movs	r3, #14
 8009d8c:	aa04      	add	r2, sp, #16
 8009d8e:	2607      	movs	r6, #7
 8009d90:	189b      	adds	r3, r3, r2

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009d92:	22d8      	movs	r2, #216	; 0xd8
 8009d94:	4f30      	ldr	r7, [pc, #192]	; (8009e58 <RegionEU868NextChannel+0xf4>)
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8009d96:	801e      	strh	r6, [r3, #0]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	0092      	lsls	r2, r2, #2
 8009d9c:	1898      	adds	r0, r3, r2
 8009d9e:	0029      	movs	r1, r5
 8009da0:	2201      	movs	r2, #1
 8009da2:	f7ff f8f7 	bl	8008f94 <RegionCommonCountChannels>
 8009da6:	42a8      	cmp	r0, r5
 8009da8:	d105      	bne.n	8009db6 <RegionEU868NextChannel+0x52>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009daa:	23d8      	movs	r3, #216	; 0xd8
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	5ad1      	ldrh	r1, [r2, r3]
 8009db2:	430e      	orrs	r6, r1
 8009db4:	52d6      	strh	r6, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009db6:	22d8      	movs	r2, #216	; 0xd8
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009db8:	2008      	movs	r0, #8
    countChannelsParams.Joined = nextChanParams->Joined;
 8009dba:	7a63      	ldrb	r3, [r4, #9]
 8009dbc:	ad0c      	add	r5, sp, #48	; 0x30
 8009dbe:	702b      	strb	r3, [r5, #0]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009dc0:	4b25      	ldr	r3, [pc, #148]	; (8009e58 <RegionEU868NextChannel+0xf4>)
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	681b      	ldr	r3, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009dc6:	5620      	ldrsb	r0, [r4, r0]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009dc8:	189a      	adds	r2, r3, r2
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8009dca:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.Bands = RegionBands;
 8009dcc:	4b23      	ldr	r3, [pc, #140]	; (8009e5c <RegionEU868NextChannel+0xf8>)
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009dce:	920d      	str	r2, [sp, #52]	; 0x34
    countChannelsParams.Bands = RegionBands;
 8009dd0:	681b      	ldr	r3, [r3, #0]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = &joinChannels;
 8009dd2:	aa04      	add	r2, sp, #16
    countChannelsParams.Bands = RegionBands;
 8009dd4:	930f      	str	r3, [sp, #60]	; 0x3c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8009dd6:	2310      	movs	r3, #16
 8009dd8:	822b      	strh	r3, [r5, #16]
    countChannelsParams.JoinChannels = &joinChannels;
 8009dda:	3b02      	subs	r3, #2
 8009ddc:	189b      	adds	r3, r3, r2
 8009dde:	9311      	str	r3, [sp, #68]	; 0x44

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009de0:	6823      	ldr	r3, [r4, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009de2:	7068      	strb	r0, [r5, #1]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009de4:	9312      	str	r3, [sp, #72]	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8009de6:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009de8:	ae12      	add	r6, sp, #72	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8009dea:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009dec:	7aa3      	ldrb	r3, [r4, #10]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009dee:	0022      	movs	r2, r4
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009df0:	7233      	strb	r3, [r6, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8009df2:	2306      	movs	r3, #6
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009df4:	320c      	adds	r2, #12
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8009df6:	7273      	strb	r3, [r6, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009df8:	ab15      	add	r3, sp, #84	; 0x54
 8009dfa:	ca82      	ldmia	r2!, {r1, r7}
 8009dfc:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8009dfe:	7d23      	ldrb	r3, [r4, #20]
 8009e00:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009e02:	8ae1      	ldrh	r1, [r4, #22]
 8009e04:	f7ff fbc0 	bl	8009588 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	aa04      	add	r2, sp, #16
 8009e0c:	9301      	str	r3, [sp, #4]
 8009e0e:	230d      	movs	r3, #13
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8009e10:	9519      	str	r5, [sp, #100]	; 0x64
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009e12:	189b      	adds	r3, r3, r2
 8009e14:	ad07      	add	r5, sp, #28
 8009e16:	ac08      	add	r4, sp, #32
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009e18:	9018      	str	r0, [sp, #96]	; 0x60
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	0030      	movs	r0, r6
 8009e1e:	002b      	movs	r3, r5
 8009e20:	0022      	movs	r2, r4
 8009e22:	9905      	ldr	r1, [sp, #20]
 8009e24:	f7ff fb3a 	bl	800949c <RegionCommonIdentifyChannels>
 8009e28:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8009e2a:	d109      	bne.n	8009e40 <RegionEU868NextChannel+0xdc>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8009e2c:	7829      	ldrb	r1, [r5, #0]
 8009e2e:	3901      	subs	r1, #1
 8009e30:	f7fa fd28 	bl	8004884 <randr>
 8009e34:	9a03      	ldr	r2, [sp, #12]
 8009e36:	5c23      	ldrb	r3, [r4, r0]
 8009e38:	7013      	strb	r3, [r2, #0]
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
 8009e3a:	0030      	movs	r0, r6
 8009e3c:	b01b      	add	sp, #108	; 0x6c
 8009e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8009e40:	280c      	cmp	r0, #12
 8009e42:	d1fa      	bne.n	8009e3a <RegionEU868NextChannel+0xd6>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009e44:	22d8      	movs	r2, #216	; 0xd8
 8009e46:	4b04      	ldr	r3, [pc, #16]	; (8009e58 <RegionEU868NextChannel+0xf4>)
 8009e48:	0092      	lsls	r2, r2, #2
 8009e4a:	6819      	ldr	r1, [r3, #0]
 8009e4c:	2307      	movs	r3, #7
 8009e4e:	5a88      	ldrh	r0, [r1, r2]
 8009e50:	4303      	orrs	r3, r0
 8009e52:	528b      	strh	r3, [r1, r2]
 8009e54:	e7f1      	b.n	8009e3a <RegionEU868NextChannel+0xd6>
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	2000129c 	.word	0x2000129c
 8009e5c:	20001298 	.word	0x20001298

08009e60 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8009e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t band = 0;
 8009e62:	2500      	movs	r5, #0
{
 8009e64:	b085      	sub	sp, #20
    uint8_t band = 0;
 8009e66:	ab02      	add	r3, sp, #8
 8009e68:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8009e6a:	7906      	ldrb	r6, [r0, #4]
{
 8009e6c:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8009e6e:	2e02      	cmp	r6, #2
 8009e70:	d802      	bhi.n	8009e78 <RegionEU868ChannelAdd+0x18>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8009e72:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
    RegionNvmGroup2->Channels[id].Band = band;
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 8009e74:	b005      	add	sp, #20
 8009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009e78:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 8009e7a:	2e0f      	cmp	r6, #15
 8009e7c:	d8fa      	bhi.n	8009e74 <RegionEU868ChannelAdd+0x14>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	0029      	movs	r1, r5
 8009e82:	7a18      	ldrb	r0, [r3, #8]
 8009e84:	2207      	movs	r2, #7
 8009e86:	0700      	lsls	r0, r0, #28
 8009e88:	1700      	asrs	r0, r0, #28
 8009e8a:	f7ff f865 	bl	8008f58 <RegionCommonValueInRange>
 8009e8e:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009e90:	2008      	movs	r0, #8
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	0029      	movs	r1, r5
 8009e96:	5618      	ldrsb	r0, [r3, r0]
 8009e98:	2207      	movs	r2, #7
 8009e9a:	1100      	asrs	r0, r0, #4
 8009e9c:	f7ff f85c 	bl	8008f58 <RegionCommonValueInRange>
        drInvalid = true;
 8009ea0:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d002      	beq.n	8009eac <RegionEU868ChannelAdd+0x4c>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009ea6:	427b      	negs	r3, r7
 8009ea8:	415f      	adcs	r7, r3
 8009eaa:	b2fd      	uxtb	r5, r7
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	7a03      	ldrb	r3, [r0, #8]
 8009eb0:	071a      	lsls	r2, r3, #28
 8009eb2:	b25b      	sxtb	r3, r3
 8009eb4:	1712      	asrs	r2, r2, #28
 8009eb6:	111b      	asrs	r3, r3, #4
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	dd00      	ble.n	8009ebe <RegionEU868ChannelAdd+0x5e>
        drInvalid = true;
 8009ebc:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8009ebe:	ab02      	add	r3, sp, #8
 8009ec0:	6800      	ldr	r0, [r0, #0]
 8009ec2:	1dd9      	adds	r1, r3, #7
 8009ec4:	f7ff fb8c 	bl	80095e0 <VerifyRfFreq>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d103      	bne.n	8009ed4 <RegionEU868ChannelAdd+0x74>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8009ecc:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8009ece:	2d00      	cmp	r5, #0
 8009ed0:	d0d0      	beq.n	8009e74 <RegionEU868ChannelAdd+0x14>
 8009ed2:	e7ce      	b.n	8009e72 <RegionEU868ChannelAdd+0x12>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8009ed4:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	d1cc      	bne.n	8009e74 <RegionEU868ChannelAdd+0x14>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8009eda:	220c      	movs	r2, #12
 8009edc:	0013      	movs	r3, r2
 8009ede:	4373      	muls	r3, r6
 8009ee0:	4f0b      	ldr	r7, [pc, #44]	; (8009f10 <RegionEU868ChannelAdd+0xb0>)
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	9901      	ldr	r1, [sp, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	1858      	adds	r0, r3, r1
 8009eea:	6821      	ldr	r1, [r4, #0]
 8009eec:	f7fa fcd5 	bl	800489a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	a902      	add	r1, sp, #8
 8009ef6:	79c9      	ldrb	r1, [r1, #7]
 8009ef8:	18d3      	adds	r3, r2, r3
 8009efa:	7259      	strb	r1, [r3, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8009efc:	2101      	movs	r1, #1
 8009efe:	20d8      	movs	r0, #216	; 0xd8
 8009f00:	40b1      	lsls	r1, r6
 8009f02:	0080      	lsls	r0, r0, #2
 8009f04:	5a13      	ldrh	r3, [r2, r0]
 8009f06:	430b      	orrs	r3, r1
 8009f08:	5213      	strh	r3, [r2, r0]
    return LORAMAC_STATUS_OK;
 8009f0a:	0028      	movs	r0, r5
 8009f0c:	e7b2      	b.n	8009e74 <RegionEU868ChannelAdd+0x14>
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	2000129c 	.word	0x2000129c

08009f14 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8009f14:	b570      	push	{r4, r5, r6, lr}
    uint8_t id = channelRemove->ChannelId;
 8009f16:	7805      	ldrb	r5, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 8009f18:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8009f1a:	2d02      	cmp	r5, #2
 8009f1c:	d90f      	bls.n	8009f3e <RegionEU868ChannelsRemove+0x2a>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8009f1e:	220c      	movs	r2, #12
 8009f20:	0010      	movs	r0, r2
 8009f22:	4b08      	ldr	r3, [pc, #32]	; (8009f44 <RegionEU868ChannelsRemove+0x30>)
 8009f24:	4368      	muls	r0, r5
 8009f26:	681c      	ldr	r4, [r3, #0]
 8009f28:	1820      	adds	r0, r4, r0
 8009f2a:	f00c f81a 	bl	8015f62 <memset>

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8009f2e:	23d8      	movs	r3, #216	; 0xd8
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	0029      	movs	r1, r5
 8009f34:	2210      	movs	r2, #16
 8009f36:	18e0      	adds	r0, r4, r3
 8009f38:	f7ff f818 	bl	8008f6c <RegionCommonChanDisable>
 8009f3c:	0001      	movs	r1, r0
}
 8009f3e:	0008      	movs	r0, r1
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	2000129c 	.word	0x2000129c

08009f48 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8009f48:	2350      	movs	r3, #80	; 0x50
{
 8009f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4c:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8009f4e:	ac03      	add	r4, sp, #12
 8009f50:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 8009f52:	7a03      	ldrb	r3, [r0, #8]
{
 8009f54:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 8009f56:	2b10      	cmp	r3, #16
 8009f58:	d12d      	bne.n	8009fb6 <RegionEU868ApplyCFList+0x6e>
    if( applyCFList->Payload[15] != 0 )
 8009f5a:	6843      	ldr	r3, [r0, #4]
 8009f5c:	7bde      	ldrb	r6, [r3, #15]
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d129      	bne.n	8009fb6 <RegionEU868ApplyCFList+0x6e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009f62:	2503      	movs	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8009f64:	2d07      	cmp	r5, #7
 8009f66:	d817      	bhi.n	8009f98 <RegionEU868ApplyCFList+0x50>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	5d91      	ldrb	r1, [r2, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8009f6c:	1990      	adds	r0, r2, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8009f6e:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8009f70:	7842      	ldrb	r2, [r0, #1]
 8009f72:	0212      	lsls	r2, r2, #8
 8009f74:	4311      	orrs	r1, r2
            newChannel.Frequency *= 100;
 8009f76:	2264      	movs	r2, #100	; 0x64
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8009f78:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8009f7a:	7883      	ldrb	r3, [r0, #2]
 8009f7c:	041b      	lsls	r3, r3, #16
 8009f7e:	430b      	orrs	r3, r1
            newChannel.Frequency *= 100;
 8009f80:	4353      	muls	r3, r2
            newChannel.Rx1Frequency = 0;
 8009f82:	2200      	movs	r2, #0
            newChannel.Frequency *= 100;
 8009f84:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 8009f86:	6062      	str	r2, [r4, #4]
        if( newChannel.Frequency != 0 )
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d10a      	bne.n	8009fa2 <RegionEU868ApplyCFList+0x5a>
            channelRemove.ChannelId = chanIdx;
 8009f8c:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 8009f8e:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 8009f90:	701d      	strb	r5, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 8009f92:	f7ff ffbf 	bl	8009f14 <RegionEU868ChannelsRemove>
 8009f96:	e009      	b.n	8009fac <RegionEU868ApplyCFList+0x64>
            newChannel.Frequency = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 8009f9c:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 8009f9e:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 8009fa0:	e7f4      	b.n	8009f8c <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8009fa2:	a801      	add	r0, sp, #4
 8009fa4:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8009fa6:	7105      	strb	r5, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 8009fa8:	f7ff ff5a 	bl	8009e60 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009fac:	3501      	adds	r5, #1
 8009fae:	b2ed      	uxtb	r5, r5
 8009fb0:	3603      	adds	r6, #3
 8009fb2:	2d10      	cmp	r5, #16
 8009fb4:	d1d6      	bne.n	8009f64 <RegionEU868ApplyCFList+0x1c>
}
 8009fb6:	b007      	add	sp, #28
 8009fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009fbc <RegionEU868NewChannelReq>:
{
 8009fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 8009fbe:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8009fc0:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 8009fc2:	6811      	ldr	r1, [r2, #0]
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d10a      	bne.n	8009fde <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8009fc8:	a801      	add	r0, sp, #4
 8009fca:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8009fcc:	f7ff ffa2 	bl	8009f14 <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 8009fd0:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d100      	bne.n	8009fd8 <RegionEU868NewChannelReq+0x1c>
            status &= 0xFC;
 8009fd6:	2300      	movs	r3, #0
    return status;
 8009fd8:	b258      	sxtb	r0, r3
}
 8009fda:	b005      	add	sp, #20
 8009fdc:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8009fde:	a802      	add	r0, sp, #8
 8009fe0:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8009fe2:	7103      	strb	r3, [r0, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8009fe4:	f7ff ff3c 	bl	8009e60 <RegionEU868ChannelAdd>
 8009fe8:	2806      	cmp	r0, #6
 8009fea:	d8f4      	bhi.n	8009fd6 <RegionEU868NewChannelReq+0x1a>
 8009fec:	4b01      	ldr	r3, [pc, #4]	; (8009ff4 <RegionEU868NewChannelReq+0x38>)
 8009fee:	5c1b      	ldrb	r3, [r3, r0]
 8009ff0:	e7f2      	b.n	8009fd8 <RegionEU868NewChannelReq+0x1c>
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	080192b0 	.word	0x080192b0

08009ff8 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 8009ff8:	1a8a      	subs	r2, r1, r2
 8009ffa:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 8009ffc:	1c10      	adds	r0, r2, #0
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	da00      	bge.n	800a004 <RegionEU868ApplyDrOffset+0xc>
 800a002:	2000      	movs	r0, #0
 800a004:	b2c0      	uxtb	r0, r0
}
 800a006:	4770      	bx	lr

0800a008 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800a008:	b530      	push	{r4, r5, lr}
    int8_t phyDr = DataratesUS915[datarate];
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <GetTimeOnAir+0x30>)
{
 800a00c:	b085      	sub	sp, #20
 800a00e:	000c      	movs	r4, r1
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800a010:	490a      	ldr	r1, [pc, #40]	; (800a03c <GetTimeOnAir+0x34>)
    int8_t phyDr = DataratesUS915[datarate];
 800a012:	561d      	ldrsb	r5, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800a014:	f7ff faa8 	bl	8009568 <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800a018:	2300      	movs	r3, #0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800a01a:	0001      	movs	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800a01c:	2001      	movs	r0, #1
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	3308      	adds	r3, #8
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	4b06      	ldr	r3, [pc, #24]	; (800a040 <GetTimeOnAir+0x38>)
 800a026:	b2e4      	uxtb	r4, r4
 800a028:	9402      	str	r4, [sp, #8]
 800a02a:	002a      	movs	r2, r5
 800a02c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a02e:	9003      	str	r0, [sp, #12]
 800a030:	0003      	movs	r3, r0
 800a032:	47a0      	blx	r4
}
 800a034:	b005      	add	sp, #20
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	0801931c 	.word	0x0801931c
 800a03c:	080192c8 	.word	0x080192c8
 800a040:	0801a9e0 	.word	0x0801a9e0

0800a044 <VerifyRfFreq>:
{
 800a044:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <VerifyRfFreq+0x2c>)
{
 800a048:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	4798      	blx	r3
 800a050:	1e01      	subs	r1, r0, #0
 800a052:	d00b      	beq.n	800a06c <VerifyRfFreq+0x28>
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <VerifyRfFreq+0x30>)
        return false;
 800a056:	2100      	movs	r1, #0
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800a058:	18e0      	adds	r0, r4, r3
 800a05a:	4b07      	ldr	r3, [pc, #28]	; (800a078 <VerifyRfFreq+0x34>)
 800a05c:	4298      	cmp	r0, r3
 800a05e:	d805      	bhi.n	800a06c <VerifyRfFreq+0x28>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800a060:	4906      	ldr	r1, [pc, #24]	; (800a07c <VerifyRfFreq+0x38>)
 800a062:	f7f6 f907 	bl	8000274 <__aeabi_uidivmod>
 800a066:	424b      	negs	r3, r1
 800a068:	4159      	adcs	r1, r3
 800a06a:	b2c9      	uxtb	r1, r1
}
 800a06c:	0008      	movs	r0, r1
 800a06e:	bd16      	pop	{r1, r2, r4, pc}
 800a070:	0801a9e0 	.word	0x0801a9e0
 800a074:	c8f78f60 	.word	0xc8f78f60
 800a078:	00401640 	.word	0x00401640
 800a07c:	000927c0 	.word	0x000927c0

0800a080 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800a080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800a082:	2200      	movs	r2, #0
{
 800a084:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800a086:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800a088:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800a08a:	3801      	subs	r0, #1
 800a08c:	2836      	cmp	r0, #54	; 0x36
 800a08e:	d81f      	bhi.n	800a0d0 <RegionUS915GetPhyParam+0x50>
 800a090:	f7f6 f84c 	bl	800012c <__gnu_thumb1_case_uqi>
 800a094:	1e1e1e1c 	.word	0x1e1e1e1c
 800a098:	1e1e1e1e 	.word	0x1e1e1e1e
 800a09c:	36341e1e 	.word	0x36341e1e
 800a0a0:	3f3d1e38 	.word	0x3f3d1e38
 800a0a4:	49474542 	.word	0x49474542
 800a0a8:	541c521e 	.word	0x541c521e
 800a0ac:	1e605e5a 	.word	0x1e605e5a
 800a0b0:	211e631e 	.word	0x211e631e
 800a0b4:	1e1e1e1e 	.word	0x1e1e1e1e
 800a0b8:	1e1e1e1e 	.word	0x1e1e1e1e
 800a0bc:	1e1e1e1e 	.word	0x1e1e1e1e
 800a0c0:	1c6c661e 	.word	0x1c6c661e
 800a0c4:	1c661e1c 	.word	0x1c661e1c
 800a0c8:	721c      	.short	0x721c
 800a0ca:	76          	.byte	0x76
 800a0cb:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800a0cc:	2308      	movs	r3, #8
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
            break;
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800a0ce:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800a0d0:	9800      	ldr	r0, [sp, #0]
 800a0d2:	b005      	add	sp, #20
 800a0d4:	bd00      	pop	{pc}
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	a801      	add	r0, sp, #4
 800a0da:	7003      	strb	r3, [r0, #0]
 800a0dc:	2304      	movs	r3, #4
 800a0de:	7043      	strb	r3, [r0, #1]
 800a0e0:	2390      	movs	r3, #144	; 0x90
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800a0e2:	22d8      	movs	r2, #216	; 0xd8
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800a0e4:	01db      	lsls	r3, r3, #7
 800a0e6:	8043      	strh	r3, [r0, #2]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800a0e8:	4b28      	ldr	r3, [pc, #160]	; (800a18c <RegionUS915GetPhyParam+0x10c>)
 800a0ea:	0092      	lsls	r2, r2, #2
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	189a      	adds	r2, r3, r2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800a0f0:	6042      	str	r2, [r0, #4]
 800a0f2:	6083      	str	r3, [r0, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800a0f4:	f7ff fa16 	bl	8009524 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800a0f8:	9000      	str	r0, [sp, #0]
            break;
 800a0fa:	e7e9      	b.n	800a0d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800a0fc:	2340      	movs	r3, #64	; 0x40
 800a0fe:	e7e6      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800a100:	2320      	movs	r3, #32
 800a102:	e7e4      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	4a22      	ldr	r2, [pc, #136]	; (800a190 <RegionUS915GetPhyParam+0x110>)
 800a108:	b25b      	sxtb	r3, r3
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800a10a:	5cd3      	ldrb	r3, [r2, r3]
 800a10c:	e7df      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800a10e:	4b21      	ldr	r3, [pc, #132]	; (800a194 <RegionUS915GetPhyParam+0x114>)
 800a110:	e7dd      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800a112:	23fa      	movs	r3, #250	; 0xfa
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	e7da      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800a118:	23fa      	movs	r3, #250	; 0xfa
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	e7d7      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800a11e:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <RegionUS915GetPhyParam+0x118>)
 800a120:	e7d5      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800a122:	4b1e      	ldr	r3, [pc, #120]	; (800a19c <RegionUS915GetPhyParam+0x11c>)
 800a124:	e7d3      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800a126:	21fa      	movs	r1, #250	; 0xfa
 800a128:	481d      	ldr	r0, [pc, #116]	; (800a1a0 <RegionUS915GetPhyParam+0x120>)
 800a12a:	0089      	lsls	r1, r1, #2
 800a12c:	f7fa fbaa 	bl	8004884 <randr>
 800a130:	23fa      	movs	r3, #250	; 0xfa
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	18c0      	adds	r0, r0, r3
 800a136:	e7df      	b.n	800a0f8 <RegionUS915GetPhyParam+0x78>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800a138:	4b1a      	ldr	r3, [pc, #104]	; (800a1a4 <RegionUS915GetPhyParam+0x124>)
 800a13a:	e7c8      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a13c:	22d8      	movs	r2, #216	; 0xd8
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <RegionUS915GetPhyParam+0x10c>)
 800a140:	681b      	ldr	r3, [r3, #0]
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800a142:	0092      	lsls	r2, r2, #2
 800a144:	189b      	adds	r3, r3, r2
 800a146:	e7c2      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
 800a148:	4b10      	ldr	r3, [pc, #64]	; (800a18c <RegionUS915GetPhyParam+0x10c>)
 800a14a:	22db      	movs	r2, #219	; 0xdb
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	e7f8      	b.n	800a142 <RegionUS915GetPhyParam+0xc2>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800a150:	2348      	movs	r3, #72	; 0x48
 800a152:	e7bc      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800a154:	4b0d      	ldr	r3, [pc, #52]	; (800a18c <RegionUS915GetPhyParam+0x10c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	e7b9      	b.n	800a0ce <RegionUS915GetPhyParam+0x4e>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <RegionUS915GetPhyParam+0x128>)
 800a15c:	9300      	str	r3, [sp, #0]
            break;
 800a15e:	e7b7      	b.n	800a0d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800a160:	7918      	ldrb	r0, [r3, #4]
 800a162:	4a12      	ldr	r2, [pc, #72]	; (800a1ac <RegionUS915GetPhyParam+0x12c>)
 800a164:	490f      	ldr	r1, [pc, #60]	; (800a1a4 <RegionUS915GetPhyParam+0x124>)
 800a166:	f7fe febe 	bl	8008ee6 <RegionBaseUSCalcDownlinkFrequency>
 800a16a:	e7c5      	b.n	800a0f8 <RegionUS915GetPhyParam+0x78>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800a16c:	466a      	mov	r2, sp
 800a16e:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <RegionUS915GetPhyParam+0x130>)
 800a170:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800a172:	2303      	movs	r3, #3
 800a174:	7093      	strb	r3, [r2, #2]
            break;
 800a176:	e7ab      	b.n	800a0d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800a178:	785b      	ldrb	r3, [r3, #1]
 800a17a:	4a0e      	ldr	r2, [pc, #56]	; (800a1b4 <RegionUS915GetPhyParam+0x134>)
 800a17c:	b25b      	sxtb	r3, r3
 800a17e:	e7c4      	b.n	800a10a <RegionUS915GetPhyParam+0x8a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800a180:	2001      	movs	r0, #1
 800a182:	490d      	ldr	r1, [pc, #52]	; (800a1b8 <RegionUS915GetPhyParam+0x138>)
 800a184:	5618      	ldrsb	r0, [r3, r0]
 800a186:	f7ff f9ef 	bl	8009568 <RegionCommonGetBandwidth>
 800a18a:	e7b5      	b.n	800a0f8 <RegionUS915GetPhyParam+0x78>
 800a18c:	200012a8 	.word	0x200012a8
 800a190:	0801932c 	.word	0x0801932c
 800a194:	00000bb8 	.word	0x00000bb8
 800a198:	00001388 	.word	0x00001388
 800a19c:	00001770 	.word	0x00001770
 800a1a0:	fffffc18 	.word	0xfffffc18
 800a1a4:	370870a0 	.word	0x370870a0
 800a1a8:	4200999a 	.word	0x4200999a
 800a1ac:	000927c0 	.word	0x000927c0
 800a1b0:	00000417 	.word	0x00000417
 800a1b4:	0801931c 	.word	0x0801931c
 800a1b8:	080192c8 	.word	0x080192c8

0800a1bc <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800a1bc:	b513      	push	{r0, r1, r4, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800a1be:	7804      	ldrb	r4, [r0, #0]
{
 800a1c0:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800a1c2:	7842      	ldrb	r2, [r0, #1]
 800a1c4:	200c      	movs	r0, #12
 800a1c6:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <RegionUS915SetBandTxDone+0x2c>)
 800a1c8:	4360      	muls	r0, r4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	181b      	adds	r3, r3, r0
 800a1ce:	2018      	movs	r0, #24
 800a1d0:	7a5b      	ldrb	r3, [r3, #9]
 800a1d2:	4343      	muls	r3, r0
 800a1d4:	4805      	ldr	r0, [pc, #20]	; (800a1ec <RegionUS915SetBandTxDone+0x30>)
 800a1d6:	6800      	ldr	r0, [r0, #0]
 800a1d8:	18c0      	adds	r0, r0, r3
 800a1da:	690b      	ldr	r3, [r1, #16]
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	68cb      	ldr	r3, [r1, #12]
 800a1e0:	6889      	ldr	r1, [r1, #8]
 800a1e2:	f7fe ff05 	bl	8008ff0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800a1e6:	bd13      	pop	{r0, r1, r4, pc}
 800a1e8:	200012a8 	.word	0x200012a8
 800a1ec:	200012a0 	.word	0x200012a0

0800a1f0 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800a1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f2:	b087      	sub	sp, #28
    Band_t bands[US915_MAX_NB_BANDS] =
 800a1f4:	2400      	movs	r4, #0
 800a1f6:	466a      	mov	r2, sp
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	7094      	strb	r4, [r2, #2]
 800a1fc:	8013      	strh	r3, [r2, #0]
 800a1fe:	9401      	str	r4, [sp, #4]
 800a200:	9402      	str	r4, [sp, #8]
 800a202:	9403      	str	r4, [sp, #12]
 800a204:	9404      	str	r4, [sp, #16]
 800a206:	7514      	strb	r4, [r2, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800a208:	7b05      	ldrb	r5, [r0, #12]
 800a20a:	42a5      	cmp	r5, r4
 800a20c:	d004      	beq.n	800a218 <RegionUS915InitDefaults+0x28>
 800a20e:	3d01      	subs	r5, #1
 800a210:	2d01      	cmp	r5, #1
 800a212:	d94a      	bls.n	800a2aa <RegionUS915InitDefaults+0xba>
        default:
        {
            break;
        }
    }
}
 800a214:	b007      	add	sp, #28
 800a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800a218:	6803      	ldr	r3, [r0, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0fa      	beq.n	800a214 <RegionUS915InitDefaults+0x24>
 800a21e:	6842      	ldr	r2, [r0, #4]
 800a220:	2a00      	cmp	r2, #0
 800a222:	d0f7      	beq.n	800a214 <RegionUS915InitDefaults+0x24>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800a224:	4c2c      	ldr	r4, [pc, #176]	; (800a2d8 <RegionUS915InitDefaults+0xe8>)
            RegionBands = (Band_t*) params->Bands;
 800a226:	6880      	ldr	r0, [r0, #8]
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800a228:	492c      	ldr	r1, [pc, #176]	; (800a2dc <RegionUS915InitDefaults+0xec>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800a22a:	6022      	str	r2, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800a22c:	4a2c      	ldr	r2, [pc, #176]	; (800a2e0 <RegionUS915InitDefaults+0xf0>)
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800a22e:	600b      	str	r3, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800a230:	6010      	str	r0, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800a232:	4669      	mov	r1, sp
 800a234:	2218      	movs	r2, #24
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800a236:	819d      	strh	r5, [r3, #12]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800a238:	f7fa fb2f 	bl	800489a <memcpy1>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800a23c:	6820      	ldr	r0, [r4, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800a23e:	2730      	movs	r7, #48	; 0x30
 800a240:	0003      	movs	r3, r0
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800a242:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <RegionUS915InitDefaults+0xf4>)
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a244:	4928      	ldr	r1, [pc, #160]	; (800a2e8 <RegionUS915InitDefaults+0xf8>)
 800a246:	4e29      	ldr	r6, [pc, #164]	; (800a2ec <RegionUS915InitDefaults+0xfc>)
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800a248:	601a      	str	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a24a:	1992      	adds	r2, r2, r6
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800a24c:	721f      	strb	r7, [r3, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800a24e:	725d      	strb	r5, [r3, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a250:	330c      	adds	r3, #12
 800a252:	428a      	cmp	r2, r1
 800a254:	d1f7      	bne.n	800a246 <RegionUS915InitDefaults+0x56>
 800a256:	23c0      	movs	r3, #192	; 0xc0
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800a258:	2744      	movs	r7, #68	; 0x44
                RegionNvmGroup2->Channels[i].Band = 0;
 800a25a:	2500      	movs	r5, #0
 800a25c:	009b      	lsls	r3, r3, #2
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a25e:	4a24      	ldr	r2, [pc, #144]	; (800a2f0 <RegionUS915InitDefaults+0x100>)
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800a260:	4924      	ldr	r1, [pc, #144]	; (800a2f4 <RegionUS915InitDefaults+0x104>)
 800a262:	18c3      	adds	r3, r0, r3
 800a264:	4e24      	ldr	r6, [pc, #144]	; (800a2f8 <RegionUS915InitDefaults+0x108>)
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800a266:	601a      	str	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800a268:	1992      	adds	r2, r2, r6
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800a26a:	721f      	strb	r7, [r3, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800a26c:	725d      	strb	r5, [r3, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800a26e:	330c      	adds	r3, #12
 800a270:	428a      	cmp	r2, r1
 800a272:	d1f7      	bne.n	800a264 <RegionUS915InitDefaults+0x74>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800a274:	2301      	movs	r3, #1
 800a276:	22db      	movs	r2, #219	; 0xdb
 800a278:	425b      	negs	r3, r3
 800a27a:	0092      	lsls	r2, r2, #2
 800a27c:	5083      	str	r3, [r0, r2]
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800a27e:	3204      	adds	r2, #4
 800a280:	5083      	str	r3, [r0, r2]
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800a282:	23dd      	movs	r3, #221	; 0xdd
 800a284:	22ff      	movs	r2, #255	; 0xff
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a286:	25d8      	movs	r5, #216	; 0xd8
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	50c2      	str	r2, [r0, r3]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a28c:	00ad      	lsls	r5, r5, #2
 800a28e:	3b08      	subs	r3, #8
 800a290:	18c1      	adds	r1, r0, r3
 800a292:	3af9      	subs	r2, #249	; 0xf9
 800a294:	1940      	adds	r0, r0, r5
 800a296:	f7fe fe9c 	bl	8008fd2 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800a29a:	6821      	ldr	r1, [r4, #0]
 800a29c:	4b0f      	ldr	r3, [pc, #60]	; (800a2dc <RegionUS915InitDefaults+0xec>)
 800a29e:	2206      	movs	r2, #6
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	1949      	adds	r1, r1, r5
 800a2a4:	f7fe fe95 	bl	8008fd2 <RegionCommonChanMaskCopy>
            break;
 800a2a8:	e7b4      	b.n	800a214 <RegionUS915InitDefaults+0x24>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a2aa:	23db      	movs	r3, #219	; 0xdb
 800a2ac:	26d8      	movs	r6, #216	; 0xd8
 800a2ae:	4d0a      	ldr	r5, [pc, #40]	; (800a2d8 <RegionUS915InitDefaults+0xe8>)
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	6828      	ldr	r0, [r5, #0]
 800a2b4:	00b6      	lsls	r6, r6, #2
 800a2b6:	18c1      	adds	r1, r0, r3
 800a2b8:	2206      	movs	r2, #6
 800a2ba:	1980      	adds	r0, r0, r6
 800a2bc:	f7fe fe89 	bl	8008fd2 <RegionCommonChanMaskCopy>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800a2c0:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <RegionUS915InitDefaults+0xec>)
 800a2c2:	682a      	ldr	r2, [r5, #0]
 800a2c4:	6819      	ldr	r1, [r3, #0]
 800a2c6:	1992      	adds	r2, r2, r6
 800a2c8:	5b10      	ldrh	r0, [r2, r4]
 800a2ca:	5b0b      	ldrh	r3, [r1, r4]
 800a2cc:	4003      	ands	r3, r0
 800a2ce:	530b      	strh	r3, [r1, r4]
            for( uint8_t i = 0; i < 6; i++ )
 800a2d0:	3402      	adds	r4, #2
 800a2d2:	2c0c      	cmp	r4, #12
 800a2d4:	d1f8      	bne.n	800a2c8 <RegionUS915InitDefaults+0xd8>
 800a2d6:	e79d      	b.n	800a214 <RegionUS915InitDefaults+0x24>
 800a2d8:	200012a8 	.word	0x200012a8
 800a2dc:	200012a4 	.word	0x200012a4
 800a2e0:	200012a0 	.word	0x200012a0
 800a2e4:	35c80160 	.word	0x35c80160
 800a2e8:	368b5160 	.word	0x368b5160
 800a2ec:	00030d40 	.word	0x00030d40
 800a2f0:	35d2afc0 	.word	0x35d2afc0
 800a2f4:	3695ffc0 	.word	0x3695ffc0
 800a2f8:	00186a00 	.word	0x00186a00

0800a2fc <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a2fc:	0003      	movs	r3, r0
 800a2fe:	b510      	push	{r4, lr}
 800a300:	0008      	movs	r0, r1
    switch( phyAttribute )
 800a302:	290a      	cmp	r1, #10
 800a304:	d822      	bhi.n	800a34c <RegionUS915Verify+0x50>
 800a306:	f7f5 ff11 	bl	800012c <__gnu_thumb1_case_uqi>
 800a30a:	2106      	.short	0x2106
 800a30c:	0a212121 	.word	0x0a212121
 800a310:	1d21130f 	.word	0x1d21130f
 800a314:	1d          	.byte	0x1d
 800a315:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	f7ff fe94 	bl	800a044 <VerifyRfFreq>
            return US915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800a31c:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800a31e:	2000      	movs	r0, #0
 800a320:	2204      	movs	r2, #4
 800a322:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800a324:	2100      	movs	r1, #0
 800a326:	e007      	b.n	800a338 <RegionUS915Verify+0x3c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800a328:	2000      	movs	r0, #0
 800a32a:	2205      	movs	r2, #5
 800a32c:	5618      	ldrsb	r0, [r3, r0]
 800a32e:	e7f9      	b.n	800a324 <RegionUS915Verify+0x28>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800a330:	2000      	movs	r0, #0
 800a332:	220d      	movs	r2, #13
 800a334:	2108      	movs	r1, #8
 800a336:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800a338:	f7fe fe0e 	bl	8008f58 <RegionCommonValueInRange>
 800a33c:	1e43      	subs	r3, r0, #1
 800a33e:	4198      	sbcs	r0, r3
 800a340:	b2c0      	uxtb	r0, r0
 800a342:	e7eb      	b.n	800a31c <RegionUS915Verify+0x20>
 800a344:	2000      	movs	r0, #0
 800a346:	220e      	movs	r2, #14
 800a348:	5618      	ldrsb	r0, [r3, r0]
 800a34a:	e7eb      	b.n	800a324 <RegionUS915Verify+0x28>
    switch( phyAttribute )
 800a34c:	2000      	movs	r0, #0
 800a34e:	e7e5      	b.n	800a31c <RegionUS915Verify+0x20>

0800a350 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800a350:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800a352:	7a03      	ldrb	r3, [r0, #8]
 800a354:	2b10      	cmp	r3, #16
 800a356:	d125      	bne.n	800a3a4 <RegionUS915ApplyCFList+0x54>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800a358:	6843      	ldr	r3, [r0, #4]
 800a35a:	7bda      	ldrb	r2, [r3, #15]
 800a35c:	2a01      	cmp	r2, #1
 800a35e:	d121      	bne.n	800a3a4 <RegionUS915ApplyCFList+0x54>
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800a360:	4a11      	ldr	r2, [pc, #68]	; (800a3a8 <RegionUS915ApplyCFList+0x58>)
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800a362:	27da      	movs	r7, #218	; 0xda
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800a364:	6815      	ldr	r5, [r2, #0]
 800a366:	22d8      	movs	r2, #216	; 0xd8
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a368:	2100      	movs	r1, #0
 800a36a:	0092      	lsls	r2, r2, #2
 800a36c:	18a8      	adds	r0, r5, r2
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a36e:	4a0f      	ldr	r2, [pc, #60]	; (800a3ac <RegionUS915ApplyCFList+0x5c>)
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800a370:	00bf      	lsls	r7, r7, #2
 800a372:	6814      	ldr	r4, [r2, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	8002      	strh	r2, [r0, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800a378:	785e      	ldrb	r6, [r3, #1]
 800a37a:	0236      	lsls	r6, r6, #8
 800a37c:	4332      	orrs	r2, r6
 800a37e:	8002      	strh	r2, [r0, #0]
        if( chMaskItr == 4 )
 800a380:	2904      	cmp	r1, #4
 800a382:	d102      	bne.n	800a38a <RegionUS915ApplyCFList+0x3a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800a384:	26ff      	movs	r6, #255	; 0xff
 800a386:	4032      	ands	r2, r6
 800a388:	53ea      	strh	r2, [r5, r7]
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a38a:	8822      	ldrh	r2, [r4, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a38c:	3101      	adds	r1, #1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a38e:	4694      	mov	ip, r2
 800a390:	4666      	mov	r6, ip
 800a392:	8802      	ldrh	r2, [r0, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a394:	b2c9      	uxtb	r1, r1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a396:	4032      	ands	r2, r6
 800a398:	8022      	strh	r2, [r4, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a39a:	3302      	adds	r3, #2
 800a39c:	3002      	adds	r0, #2
 800a39e:	3402      	adds	r4, #2
 800a3a0:	2905      	cmp	r1, #5
 800a3a2:	d1e7      	bne.n	800a374 <RegionUS915ApplyCFList+0x24>
    }
}
 800a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	200012a8 	.word	0x200012a8
 800a3ac:	200012a4 	.word	0x200012a4

0800a3b0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800a3b2:	2204      	movs	r2, #4
{
 800a3b4:	0005      	movs	r5, r0
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	6800      	ldr	r0, [r0, #0]
 800a3ba:	f7fe fdeb 	bl	8008f94 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
        ( nbChannels > 0 ) )
    {
        return false;
 800a3be:	2400      	movs	r4, #0
    if( ( nbChannels < 2 ) &&
 800a3c0:	2801      	cmp	r0, #1
 800a3c2:	d005      	beq.n	800a3d0 <RegionUS915ChanMaskSet+0x20>
    }

    switch( chanMaskSet->ChannelsMaskType )
 800a3c4:	792c      	ldrb	r4, [r5, #4]
 800a3c6:	2c00      	cmp	r4, #0
 800a3c8:	d004      	beq.n	800a3d4 <RegionUS915ChanMaskSet+0x24>
 800a3ca:	2c01      	cmp	r4, #1
 800a3cc:	d01f      	beq.n	800a40e <RegionUS915ChanMaskSet+0x5e>
 800a3ce:	2400      	movs	r4, #0
        }
        default:
            return false;
    }
    return true;
}
 800a3d0:	0020      	movs	r0, r4
 800a3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800a3d4:	27d8      	movs	r7, #216	; 0xd8
 800a3d6:	4e13      	ldr	r6, [pc, #76]	; (800a424 <RegionUS915ChanMaskSet+0x74>)
 800a3d8:	00bf      	lsls	r7, r7, #2
 800a3da:	6833      	ldr	r3, [r6, #0]
 800a3dc:	2206      	movs	r2, #6
 800a3de:	19d8      	adds	r0, r3, r7
 800a3e0:	6829      	ldr	r1, [r5, #0]
 800a3e2:	f7fe fdf6 	bl	8008fd2 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800a3e6:	23dd      	movs	r3, #221	; 0xdd
 800a3e8:	6832      	ldr	r2, [r6, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	5cd1      	ldrb	r1, [r2, r3]
 800a3ee:	52d1      	strh	r1, [r2, r3]
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800a3f0:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <RegionUS915ChanMaskSet+0x78>)
 800a3f2:	52d4      	strh	r4, [r2, r3]
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800a3f4:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <RegionUS915ChanMaskSet+0x7c>)
 800a3f6:	19d2      	adds	r2, r2, r7
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	0023      	movs	r3, r4
 800a3fc:	5ad4      	ldrh	r4, [r2, r3]
 800a3fe:	5ac1      	ldrh	r1, [r0, r3]
 800a400:	4021      	ands	r1, r4
 800a402:	52c1      	strh	r1, [r0, r3]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800a404:	3302      	adds	r3, #2
 800a406:	2b0c      	cmp	r3, #12
 800a408:	d1f8      	bne.n	800a3fc <RegionUS915ChanMaskSet+0x4c>
    return true;
 800a40a:	2401      	movs	r4, #1
 800a40c:	e7e0      	b.n	800a3d0 <RegionUS915ChanMaskSet+0x20>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <RegionUS915ChanMaskSet+0x74>)
 800a410:	2206      	movs	r2, #6
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	23db      	movs	r3, #219	; 0xdb
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	6829      	ldr	r1, [r5, #0]
 800a41a:	18c0      	adds	r0, r0, r3
 800a41c:	f7fe fdd9 	bl	8008fd2 <RegionCommonChanMaskCopy>
            break;
 800a420:	e7d6      	b.n	800a3d0 <RegionUS915ChanMaskSet+0x20>
 800a422:	46c0      	nop			; (mov r8, r8)
 800a424:	200012a8 	.word	0x200012a8
 800a428:	00000376 	.word	0x00000376
 800a42c:	200012a4 	.word	0x200012a4

0800a430 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a432:	001c      	movs	r4, r3
 800a434:	000e      	movs	r6, r1
 800a436:	0017      	movs	r7, r2
 800a438:	b085      	sub	sp, #20
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800a43a:	1c03      	adds	r3, r0, #0
 800a43c:	280d      	cmp	r0, #13
 800a43e:	dd00      	ble.n	800a442 <RegionUS915ComputeRxWindowParameters+0x12>
 800a440:	230d      	movs	r3, #13
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a442:	4d10      	ldr	r5, [pc, #64]	; (800a484 <RegionUS915ComputeRxWindowParameters+0x54>)
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800a444:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a446:	0029      	movs	r1, r5
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800a448:	b258      	sxtb	r0, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a44a:	f7ff f88d 	bl	8009568 <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800a44e:	2301      	movs	r3, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a450:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800a452:	56e3      	ldrsb	r3, [r4, r3]
 800a454:	490c      	ldr	r1, [pc, #48]	; (800a488 <RegionUS915ComputeRxWindowParameters+0x58>)
 800a456:	009a      	lsls	r2, r3, #2
 800a458:	5cc8      	ldrb	r0, [r1, r3]
 800a45a:	5951      	ldr	r1, [r2, r5]
 800a45c:	f7fe ff6c 	bl	8009338 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a460:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <RegionUS915ComputeRxWindowParameters+0x5c>)
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800a462:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	4798      	blx	r3
 800a46a:	0022      	movs	r2, r4
 800a46c:	3408      	adds	r4, #8
 800a46e:	320c      	adds	r2, #12
 800a470:	0003      	movs	r3, r0
 800a472:	9201      	str	r2, [sp, #4]
 800a474:	0031      	movs	r1, r6
 800a476:	003a      	movs	r2, r7
 800a478:	0028      	movs	r0, r5
 800a47a:	9400      	str	r4, [sp, #0]
 800a47c:	f7fe ff6e 	bl	800935c <RegionCommonComputeRxWindowParameters>
}
 800a480:	b005      	add	sp, #20
 800a482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a484:	080192c8 	.word	0x080192c8
 800a488:	0801931c 	.word	0x0801931c
 800a48c:	0801a9e0 	.word	0x0801a9e0

0800a490 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a490:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 800a492:	2701      	movs	r7, #1
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800a494:	4e21      	ldr	r6, [pc, #132]	; (800a51c <RegionUS915RxConfig+0x8c>)
{
 800a496:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 800a498:	6873      	ldr	r3, [r6, #4]
{
 800a49a:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800a49c:	57c7      	ldrsb	r7, [r0, r7]
{
 800a49e:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800a4a0:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 800a4a2:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800a4a4:	4798      	blx	r3
 800a4a6:	0003      	movs	r3, r0
    {
        return false;
 800a4a8:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800a4aa:	4283      	cmp	r3, r0
 800a4ac:	d133      	bne.n	800a516 <RegionUS915RxConfig+0x86>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800a4ae:	7ca3      	ldrb	r3, [r4, #18]
 800a4b0:	4283      	cmp	r3, r0
 800a4b2:	d106      	bne.n	800a4c2 <RegionUS915RxConfig+0x32>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800a4b4:	2307      	movs	r3, #7
 800a4b6:	7825      	ldrb	r5, [r4, #0]
 800a4b8:	402b      	ands	r3, r5
 800a4ba:	4d19      	ldr	r5, [pc, #100]	; (800a520 <RegionUS915RxConfig+0x90>)
 800a4bc:	435d      	muls	r5, r3
 800a4be:	4b19      	ldr	r3, [pc, #100]	; (800a524 <RegionUS915RxConfig+0x94>)
 800a4c0:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800a4c2:	4b19      	ldr	r3, [pc, #100]	; (800a528 <RegionUS915RxConfig+0x98>)

    Radio.SetChannel( frequency );
 800a4c4:	0028      	movs	r0, r5
    phyDr = DataratesUS915[dr];
 800a4c6:	57db      	ldrsb	r3, [r3, r7]

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a4c8:	2501      	movs	r5, #1
    phyDr = DataratesUS915[dr];
 800a4ca:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800a4cc:	68f3      	ldr	r3, [r6, #12]
 800a4ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a4d0:	4798      	blx	r3
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a4d2:	7c63      	ldrb	r3, [r4, #17]
 800a4d4:	78a1      	ldrb	r1, [r4, #2]
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9508      	str	r5, [sp, #32]
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	9306      	str	r3, [sp, #24]
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	9304      	str	r3, [sp, #16]
 800a4e4:	9303      	str	r3, [sp, #12]
 800a4e6:	68a2      	ldr	r2, [r4, #8]
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	b292      	uxth	r2, r2
 800a4ec:	9202      	str	r2, [sp, #8]
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	69b3      	ldr	r3, [r6, #24]
 800a4f2:	0028      	movs	r0, r5
 800a4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800a4f6:	9201      	str	r2, [sp, #4]
 800a4f8:	002b      	movs	r3, r5
 800a4fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a4fe:	47a0      	blx	r4

    Radio.SetMaxPayloadLength( MODEM_LORA, MaxPayloadOfDatarateUS915[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <RegionUS915RxConfig+0x9c>)
 800a502:	0028      	movs	r0, r5
 800a504:	5dd9      	ldrb	r1, [r3, r7]
 800a506:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a508:	310d      	adds	r1, #13
 800a50a:	b2c9      	uxtb	r1, r1
 800a50c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a50e:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
 800a510:	0028      	movs	r0, r5
    *datarate = (uint8_t) dr;
 800a512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a514:	701f      	strb	r7, [r3, #0]
}
 800a516:	b00f      	add	sp, #60	; 0x3c
 800a518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	0801a9e0 	.word	0x0801a9e0
 800a520:	000927c0 	.word	0x000927c0
 800a524:	370870a0 	.word	0x370870a0
 800a528:	0801931c 	.word	0x0801931c
 800a52c:	0801932c 	.word	0x0801932c

0800a530 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a530:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a532:	2701      	movs	r7, #1
{
 800a534:	b091      	sub	sp, #68	; 0x44
 800a536:	910d      	str	r1, [sp, #52]	; 0x34
 800a538:	920e      	str	r2, [sp, #56]	; 0x38
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a53a:	57c7      	ldrsb	r7, [r0, r7]
 800a53c:	4b35      	ldr	r3, [pc, #212]	; (800a614 <RegionUS915TxConfig+0xe4>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a53e:	7802      	ldrb	r2, [r0, #0]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a540:	57db      	ldrsb	r3, [r3, r7]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a542:	2502      	movs	r5, #2
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a544:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a546:	4b34      	ldr	r3, [pc, #208]	; (800a618 <RegionUS915TxConfig+0xe8>)
 800a548:	5745      	ldrsb	r5, [r0, r5]
 800a54a:	681e      	ldr	r6, [r3, #0]
 800a54c:	230c      	movs	r3, #12
 800a54e:	4353      	muls	r3, r2
 800a550:	2218      	movs	r2, #24
 800a552:	18f3      	adds	r3, r6, r3
 800a554:	7a59      	ldrb	r1, [r3, #9]
 800a556:	4b31      	ldr	r3, [pc, #196]	; (800a61c <RegionUS915TxConfig+0xec>)
 800a558:	434a      	muls	r2, r1
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800a55a:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a55c:	681b      	ldr	r3, [r3, #0]
{
 800a55e:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a560:	189b      	adds	r3, r3, r2
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800a562:	0028      	movs	r0, r5
 800a564:	5659      	ldrsb	r1, [r3, r1]
 800a566:	f7fe fff8 	bl	800955a <RegionCommonLimitTxPower>
 800a56a:	900a      	str	r0, [sp, #40]	; 0x28
    if( datarate == DR_4 )
 800a56c:	2f04      	cmp	r7, #4
 800a56e:	d143      	bne.n	800a5f8 <RegionUS915TxConfig+0xc8>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800a570:	1c28      	adds	r0, r5, #0
 800a572:	2d02      	cmp	r5, #2
 800a574:	da00      	bge.n	800a578 <RegionUS915TxConfig+0x48>
 800a576:	2002      	movs	r0, #2
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800a578:	b243      	sxtb	r3, r0
 800a57a:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800a57c:	2001      	movs	r0, #1
 800a57e:	4928      	ldr	r1, [pc, #160]	; (800a620 <RegionUS915TxConfig+0xf0>)
 800a580:	5620      	ldrsb	r0, [r4, r0]
 800a582:	f7fe fff1 	bl	8009568 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800a586:	2200      	movs	r2, #0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800a588:	900c      	str	r0, [sp, #48]	; 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800a58a:	4926      	ldr	r1, [pc, #152]	; (800a624 <RegionUS915TxConfig+0xf4>)
 800a58c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a58e:	f7fe ff13 	bl	80093b8 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a592:	4b21      	ldr	r3, [pc, #132]	; (800a618 <RegionUS915TxConfig+0xe8>)
 800a594:	7821      	ldrb	r1, [r4, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	230c      	movs	r3, #12
 800a59a:	434b      	muls	r3, r1
 800a59c:	4e22      	ldr	r6, [pc, #136]	; (800a628 <RegionUS915TxConfig+0xf8>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800a59e:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a5a0:	68f1      	ldr	r1, [r6, #12]
 800a5a2:	5898      	ldr	r0, [r3, r2]
 800a5a4:	910f      	str	r1, [sp, #60]	; 0x3c
 800a5a6:	4788      	blx	r1

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800a5a8:	23fa      	movs	r3, #250	; 0xfa
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	9308      	str	r3, [sp, #32]
 800a5ae:	2308      	movs	r3, #8
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2501      	movs	r5, #1
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b8:	9207      	str	r2, [sp, #28]
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	69f3      	ldr	r3, [r6, #28]
 800a5be:	9206      	str	r2, [sp, #24]
 800a5c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5c2:	9205      	str	r2, [sp, #20]
 800a5c4:	9203      	str	r2, [sp, #12]
 800a5c6:	0039      	movs	r1, r7
 800a5c8:	0028      	movs	r0, r5
 800a5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a5ce:	9504      	str	r5, [sp, #16]
 800a5d0:	9501      	str	r5, [sp, #4]
 800a5d2:	47b8      	blx	r7

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800a5d4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a5d6:	0028      	movs	r0, r5
 800a5d8:	7b21      	ldrb	r1, [r4, #12]
 800a5da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5dc:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a5de:	2001      	movs	r0, #1
 800a5e0:	89a1      	ldrh	r1, [r4, #12]
 800a5e2:	5620      	ldrsb	r0, [r4, r0]
 800a5e4:	f7ff fd10 	bl	800a008 <GetTimeOnAir>
 800a5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38

    *txPower = txPowerLimited;
 800a5ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a5ec:	6018      	str	r0, [r3, #0]
    return true;
}
 800a5ee:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 800a5f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5f2:	701a      	strb	r2, [r3, #0]
}
 800a5f4:	b011      	add	sp, #68	; 0x44
 800a5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a5f8:	23d8      	movs	r3, #216	; 0xd8
 800a5fa:	009b      	lsls	r3, r3, #2
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800a5fc:	2204      	movs	r2, #4
 800a5fe:	2100      	movs	r1, #0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a600:	18f0      	adds	r0, r6, r3
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800a602:	f7fe fcc7 	bl	8008f94 <RegionCommonCountChannels>
 800a606:	2831      	cmp	r0, #49	; 0x31
 800a608:	d8b8      	bhi.n	800a57c <RegionUS915TxConfig+0x4c>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800a60a:	1c28      	adds	r0, r5, #0
 800a60c:	2d05      	cmp	r5, #5
 800a60e:	dab3      	bge.n	800a578 <RegionUS915TxConfig+0x48>
 800a610:	2005      	movs	r0, #5
 800a612:	e7b1      	b.n	800a578 <RegionUS915TxConfig+0x48>
 800a614:	0801931c 	.word	0x0801931c
 800a618:	200012a8 	.word	0x200012a8
 800a61c:	200012a0 	.word	0x200012a0
 800a620:	080192c8 	.word	0x080192c8
 800a624:	41f00000 	.word	0x41f00000
 800a628:	0801a9e0 	.word	0x0801a9e0

0800a62c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800a62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a62e:	b097      	sub	sp, #92	; 0x5c
 800a630:	9105      	str	r1, [sp, #20]
 800a632:	9206      	str	r2, [sp, #24]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a634:	2100      	movs	r1, #0
 800a636:	2206      	movs	r2, #6
{
 800a638:	0005      	movs	r5, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a63a:	a809      	add	r0, sp, #36	; 0x24
{
 800a63c:	9307      	str	r3, [sp, #28]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a63e:	f00b fc90 	bl	8015f62 <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800a642:	220c      	movs	r2, #12
 800a644:	2100      	movs	r1, #0
 800a646:	a80b      	add	r0, sp, #44	; 0x2c
 800a648:	f00b fc8b 	bl	8015f62 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800a64c:	4b6f      	ldr	r3, [pc, #444]	; (800a80c <RegionUS915LinkAdrReq+0x1e0>)
 800a64e:	2206      	movs	r2, #6
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	23d8      	movs	r3, #216	; 0xd8
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	18c9      	adds	r1, r1, r3
 800a658:	a80b      	add	r0, sp, #44	; 0x2c
 800a65a:	f7fe fcba 	bl	8008fd2 <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 800a65e:	2300      	movs	r3, #0
            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a660:	27ff      	movs	r7, #255	; 0xff
    uint8_t bytesProcessed = 0;
 800a662:	9301      	str	r3, [sp, #4]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800a664:	7a2b      	ldrb	r3, [r5, #8]
 800a666:	9a01      	ldr	r2, [sp, #4]
 800a668:	ae09      	add	r6, sp, #36	; 0x24
 800a66a:	ac0b      	add	r4, sp, #44	; 0x2c
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d908      	bls.n	800a682 <RegionUS915LinkAdrReq+0x56>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800a670:	686b      	ldr	r3, [r5, #4]
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	0031      	movs	r1, r6
 800a676:	1898      	adds	r0, r3, r2
 800a678:	f7fe fdf0 	bl	800925c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d000      	beq.n	800a682 <RegionUS915LinkAdrReq+0x56>
 800a680:	e06c      	b.n	800a75c <RegionUS915LinkAdrReq+0x130>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800a682:	2301      	movs	r3, #1
 800a684:	56f3      	ldrsb	r3, [r6, r3]
 800a686:	2b03      	cmp	r3, #3
 800a688:	dc07      	bgt.n	800a69a <RegionUS915LinkAdrReq+0x6e>
 800a68a:	2204      	movs	r2, #4
 800a68c:	2100      	movs	r1, #0
 800a68e:	0020      	movs	r0, r4
 800a690:	f7fe fc80 	bl	8008f94 <RegionCommonCountChannels>
    {
        status &= 0xFE; // Channel mask KO
 800a694:	2306      	movs	r3, #6
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800a696:	2801      	cmp	r0, #1
 800a698:	d900      	bls.n	800a69c <RegionUS915LinkAdrReq+0x70>
    uint8_t bytesProcessed = 0;
 800a69a:	2307      	movs	r3, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionUS915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800a69c:	a80e      	add	r0, sp, #56	; 0x38
 800a69e:	7103      	strb	r3, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800a6a0:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800a6a2:	4c5a      	ldr	r4, [pc, #360]	; (800a80c <RegionUS915LinkAdrReq+0x1e0>)
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800a6a4:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800a6a6:	ab09      	add	r3, sp, #36	; 0x24
 800a6a8:	785a      	ldrb	r2, [r3, #1]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a6aa:	a908      	add	r1, sp, #32
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800a6ac:	7182      	strb	r2, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800a6ae:	789a      	ldrb	r2, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800a6b0:	ae0b      	add	r6, sp, #44	; 0x2c
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800a6b2:	71c2      	strb	r2, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800a6b4:	781a      	ldrb	r2, [r3, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a6b6:	3105      	adds	r1, #5
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800a6b8:	7202      	strb	r2, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800a6ba:	7aea      	ldrb	r2, [r5, #11]
 800a6bc:	7242      	strb	r2, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800a6be:	7b2a      	ldrb	r2, [r5, #12]
 800a6c0:	7282      	strb	r2, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800a6c2:	7b6a      	ldrb	r2, [r5, #13]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800a6c4:	6106      	str	r6, [r0, #16]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800a6c6:	72c2      	strb	r2, [r0, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800a6c8:	2248      	movs	r2, #72	; 0x48
 800a6ca:	7302      	strb	r2, [r0, #12]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800a6cc:	2280      	movs	r2, #128	; 0x80
 800a6ce:	00d2      	lsls	r2, r2, #3
 800a6d0:	8282      	strh	r2, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	6182      	str	r2, [r0, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800a6d6:	220e      	movs	r2, #14
 800a6d8:	8382      	strh	r2, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800a6da:	682a      	ldr	r2, [r5, #0]
 800a6dc:	920e      	str	r2, [sp, #56]	; 0x38
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a6de:	aa08      	add	r2, sp, #32
 800a6e0:	3206      	adds	r2, #6
 800a6e2:	f7fe fdd6 	bl	8009292 <RegionCommonLinkAdrReqVerifyParams>
 800a6e6:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800a6e8:	2807      	cmp	r0, #7
 800a6ea:	d127      	bne.n	800a73c <RegionUS915LinkAdrReq+0x110>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800a6ec:	22d8      	movs	r2, #216	; 0xd8
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	0092      	lsls	r2, r2, #2
 800a6f2:	1898      	adds	r0, r3, r2
 800a6f4:	0031      	movs	r1, r6
 800a6f6:	2206      	movs	r2, #6
 800a6f8:	f7fe fc6b 	bl	8008fd2 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800a6fc:	21d8      	movs	r1, #216	; 0xd8
 800a6fe:	4b44      	ldr	r3, [pc, #272]	; (800a810 <RegionUS915LinkAdrReq+0x1e4>)
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	0089      	lsls	r1, r1, #2
 800a706:	5a51      	ldrh	r1, [r2, r1]
 800a708:	8818      	ldrh	r0, [r3, #0]
 800a70a:	4001      	ands	r1, r0
 800a70c:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800a70e:	4941      	ldr	r1, [pc, #260]	; (800a814 <RegionUS915LinkAdrReq+0x1e8>)
 800a710:	8858      	ldrh	r0, [r3, #2]
 800a712:	5a51      	ldrh	r1, [r2, r1]
 800a714:	4001      	ands	r1, r0
 800a716:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800a718:	21d9      	movs	r1, #217	; 0xd9
 800a71a:	0089      	lsls	r1, r1, #2
 800a71c:	5a51      	ldrh	r1, [r2, r1]
 800a71e:	8898      	ldrh	r0, [r3, #4]
 800a720:	4001      	ands	r1, r0
 800a722:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800a724:	493c      	ldr	r1, [pc, #240]	; (800a818 <RegionUS915LinkAdrReq+0x1ec>)
 800a726:	88d8      	ldrh	r0, [r3, #6]
 800a728:	5a51      	ldrh	r1, [r2, r1]
 800a72a:	4001      	ands	r1, r0
 800a72c:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800a72e:	21da      	movs	r1, #218	; 0xda
 800a730:	0089      	lsls	r1, r1, #2
 800a732:	5a51      	ldrh	r1, [r2, r1]
 800a734:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800a736:	4939      	ldr	r1, [pc, #228]	; (800a81c <RegionUS915LinkAdrReq+0x1f0>)
 800a738:	5a52      	ldrh	r2, [r2, r1]
 800a73a:	815a      	strh	r2, [r3, #10]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800a73c:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800a73e:	ab09      	add	r3, sp, #36	; 0x24
 800a740:	785a      	ldrb	r2, [r3, #1]
 800a742:	9905      	ldr	r1, [sp, #20]
 800a744:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800a746:	789a      	ldrb	r2, [r3, #2]
 800a748:	9906      	ldr	r1, [sp, #24]
    *nbRepOut = linkAdrParams.NbRep;
 800a74a:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 800a74c:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800a74e:	9a07      	ldr	r2, [sp, #28]
 800a750:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800a752:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a754:	9a01      	ldr	r2, [sp, #4]
 800a756:	701a      	strb	r2, [r3, #0]
}
 800a758:	b017      	add	sp, #92	; 0x5c
 800a75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	1818      	adds	r0, r3, r0
 800a760:	b2c3      	uxtb	r3, r0
 800a762:	9301      	str	r3, [sp, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800a764:	78f2      	ldrb	r2, [r6, #3]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800a766:	88b3      	ldrh	r3, [r6, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800a768:	2a06      	cmp	r2, #6
 800a76a:	d107      	bne.n	800a77c <RegionUS915LinkAdrReq+0x150>
            channelsMask[0] = 0xFFFF;
 800a76c:	3a07      	subs	r2, #7
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800a76e:	403b      	ands	r3, r7
            channelsMask[0] = 0x0000;
 800a770:	8022      	strh	r2, [r4, #0]
            channelsMask[1] = 0x0000;
 800a772:	8062      	strh	r2, [r4, #2]
            channelsMask[2] = 0x0000;
 800a774:	80a2      	strh	r2, [r4, #4]
            channelsMask[3] = 0x0000;
 800a776:	80e2      	strh	r2, [r4, #6]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800a778:	8123      	strh	r3, [r4, #8]
 800a77a:	e773      	b.n	800a664 <RegionUS915LinkAdrReq+0x38>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800a77c:	2a07      	cmp	r2, #7
 800a77e:	d101      	bne.n	800a784 <RegionUS915LinkAdrReq+0x158>
            channelsMask[0] = 0x0000;
 800a780:	2200      	movs	r2, #0
 800a782:	e7f4      	b.n	800a76e <RegionUS915LinkAdrReq+0x142>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800a784:	2a05      	cmp	r2, #5
 800a786:	d13d      	bne.n	800a804 <RegionUS915LinkAdrReq+0x1d8>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a788:	2100      	movs	r1, #0
            uint8_t cntChannelMask = 0;
 800a78a:	000a      	movs	r2, r1
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a78c:	403b      	ands	r3, r7
 800a78e:	9304      	str	r3, [sp, #16]
                        channelsMask[4] |= ( bitMask << i );
 800a790:	2001      	movs	r0, #1
                    if( ( i % 2 ) == 0 )
 800a792:	2301      	movs	r3, #1
                        channelsMask[4] |= ( bitMask << i );
 800a794:	4088      	lsls	r0, r1
                    if( ( i % 2 ) == 0 )
 800a796:	400b      	ands	r3, r1
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a798:	0056      	lsls	r6, r2, #1
                    if( ( i % 2 ) == 0 )
 800a79a:	469c      	mov	ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a79c:	5b33      	ldrh	r3, [r6, r4]
 800a79e:	9302      	str	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800a7a0:	b203      	sxth	r3, r0
 800a7a2:	9303      	str	r3, [sp, #12]
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a7a4:	0003      	movs	r3, r0
 800a7a6:	9804      	ldr	r0, [sp, #16]
 800a7a8:	4203      	tst	r3, r0
 800a7aa:	d018      	beq.n	800a7de <RegionUS915LinkAdrReq+0x1b2>
                    if( ( i % 2 ) == 0 )
 800a7ac:	4663      	mov	r3, ip
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <RegionUS915LinkAdrReq+0x19c>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a7b2:	9b02      	ldr	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800a7b4:	9803      	ldr	r0, [sp, #12]
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a7b6:	433b      	orrs	r3, r7
 800a7b8:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800a7ba:	8923      	ldrh	r3, [r4, #8]
 800a7bc:	4303      	orrs	r3, r0
 800a7be:	8123      	strh	r3, [r4, #8]
            for( uint8_t i = 0; i <= 7; i++ )
 800a7c0:	3101      	adds	r1, #1
 800a7c2:	2908      	cmp	r1, #8
 800a7c4:	d1e4      	bne.n	800a790 <RegionUS915LinkAdrReq+0x164>
 800a7c6:	e74d      	b.n	800a664 <RegionUS915LinkAdrReq+0x38>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800a7c8:	4b15      	ldr	r3, [pc, #84]	; (800a820 <RegionUS915LinkAdrReq+0x1f4>)
 800a7ca:	9802      	ldr	r0, [sp, #8]
 800a7cc:	4318      	orrs	r0, r3
 800a7ce:	5330      	strh	r0, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800a7d0:	8923      	ldrh	r3, [r4, #8]
 800a7d2:	9803      	ldr	r0, [sp, #12]
 800a7d4:	4303      	orrs	r3, r0
 800a7d6:	8123      	strh	r3, [r4, #8]
                        cntChannelMask++;
 800a7d8:	3201      	adds	r2, #1
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	e7f0      	b.n	800a7c0 <RegionUS915LinkAdrReq+0x194>
                        channelsMask[4] &= ~( bitMask << i );
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	43d8      	mvns	r0, r3
                    if( ( i % 2 ) == 0 )
 800a7e2:	4663      	mov	r3, ip
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <RegionUS915LinkAdrReq+0x1ca>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800a7e8:	9b02      	ldr	r3, [sp, #8]
 800a7ea:	43bb      	bics	r3, r7
 800a7ec:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800a7ee:	8923      	ldrh	r3, [r4, #8]
 800a7f0:	4018      	ands	r0, r3
 800a7f2:	8120      	strh	r0, [r4, #8]
 800a7f4:	e7e4      	b.n	800a7c0 <RegionUS915LinkAdrReq+0x194>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800a7f6:	9b02      	ldr	r3, [sp, #8]
 800a7f8:	403b      	ands	r3, r7
 800a7fa:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800a7fc:	8923      	ldrh	r3, [r4, #8]
 800a7fe:	4018      	ands	r0, r3
 800a800:	8120      	strh	r0, [r4, #8]
 800a802:	e7e9      	b.n	800a7d8 <RegionUS915LinkAdrReq+0x1ac>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800a804:	0052      	lsls	r2, r2, #1
 800a806:	5313      	strh	r3, [r2, r4]
 800a808:	e72c      	b.n	800a664 <RegionUS915LinkAdrReq+0x38>
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	200012a8 	.word	0x200012a8
 800a810:	200012a4 	.word	0x200012a4
 800a814:	00000362 	.word	0x00000362
 800a818:	00000366 	.word	0x00000366
 800a81c:	0000036a 	.word	0x0000036a
 800a820:	ffffff00 	.word	0xffffff00

0800a824 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800a828:	6840      	ldr	r0, [r0, #4]
 800a82a:	f7ff fc0b 	bl	800a044 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800a82e:	1e43      	subs	r3, r0, #1
 800a830:	4198      	sbcs	r0, r3
 800a832:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800a834:	2000      	movs	r0, #0
 800a836:	220d      	movs	r2, #13
 800a838:	2108      	movs	r1, #8
 800a83a:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800a83c:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800a83e:	f7fe fb8b 	bl	8008f58 <RegionCommonValueInRange>
 800a842:	2800      	cmp	r0, #0
 800a844:	d101      	bne.n	800a84a <RegionUS915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800a846:	2302      	movs	r3, #2
 800a848:	439c      	bics	r4, r3
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800a84a:	2000      	movs	r0, #0
 800a84c:	2207      	movs	r2, #7
 800a84e:	2105      	movs	r1, #5
 800a850:	5628      	ldrsb	r0, [r5, r0]
 800a852:	f7fe fb81 	bl	8008f58 <RegionCommonValueInRange>
 800a856:	2801      	cmp	r0, #1
 800a858:	d003      	beq.n	800a862 <RegionUS915RxParamSetupReq+0x3e>
 800a85a:	2300      	movs	r3, #0
 800a85c:	56eb      	ldrsb	r3, [r5, r3]
 800a85e:	2b0d      	cmp	r3, #13
 800a860:	dd01      	ble.n	800a866 <RegionUS915RxParamSetupReq+0x42>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800a862:	2302      	movs	r3, #2
 800a864:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800a866:	2001      	movs	r0, #1
 800a868:	2203      	movs	r2, #3
 800a86a:	2100      	movs	r1, #0
 800a86c:	5628      	ldrsb	r0, [r5, r0]
 800a86e:	f7fe fb73 	bl	8008f58 <RegionCommonValueInRange>
 800a872:	2800      	cmp	r0, #0
 800a874:	d101      	bne.n	800a87a <RegionUS915RxParamSetupReq+0x56>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800a876:	2304      	movs	r3, #4
 800a878:	439c      	bics	r4, r3
    }

    return status;
}
 800a87a:	0020      	movs	r0, r4
 800a87c:	bd70      	pop	{r4, r5, r6, pc}

0800a87e <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
 800a87e:	2001      	movs	r0, #1
}
 800a880:	4240      	negs	r0, r0
 800a882:	4770      	bx	lr

0800a884 <RegionUS915TxParamSetupReq>:
 800a884:	2001      	movs	r0, #1
 800a886:	4240      	negs	r0, r0
 800a888:	4770      	bx	lr

0800a88a <RegionUS915DlChannelReq>:
 800a88a:	2001      	movs	r0, #1
 800a88c:	4240      	negs	r0, r0
 800a88e:	4770      	bx	lr

0800a890 <RegionUS915AlternateDr>:
{
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800a890:	4b08      	ldr	r3, [pc, #32]	; (800a8b4 <RegionUS915AlternateDr+0x24>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	7b53      	ldrb	r3, [r2, #13]
    if( type == ALTERNATE_DR )
 800a896:	2900      	cmp	r1, #0
 800a898:	d10a      	bne.n	800a8b0 <RegionUS915AlternateDr+0x20>
        RegionNvmGroup1->JoinTrialsCounter++;
 800a89a:	3301      	adds	r3, #1
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 800a89c:	7353      	strb	r3, [r2, #13]
 800a89e:	2339      	movs	r3, #57	; 0x39
 800a8a0:	7b52      	ldrb	r2, [r2, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 800a8a2:	2004      	movs	r0, #4
        RegionNvmGroup1->JoinTrialsCounter--;
 800a8a4:	4353      	muls	r3, r2
    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b1c      	cmp	r3, #28
 800a8aa:	d900      	bls.n	800a8ae <RegionUS915AlternateDr+0x1e>
    }
    else
    {
        currentDr = DR_0;
 800a8ac:	2000      	movs	r0, #0
    }
    return currentDr;
}
 800a8ae:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	e7f3      	b.n	800a89c <RegionUS915AlternateDr+0xc>
 800a8b4:	200012a4 	.word	0x200012a4

0800a8b8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ba:	b0a7      	sub	sp, #156	; 0x9c
 800a8bc:	9303      	str	r3, [sp, #12]
    uint8_t nbEnabledChannels = 0;
 800a8be:	230e      	movs	r3, #14
 800a8c0:	2600      	movs	r6, #0
{
 800a8c2:	9202      	str	r2, [sp, #8]
    uint8_t nbEnabledChannels = 0;
 800a8c4:	aa02      	add	r2, sp, #8
 800a8c6:	189b      	adds	r3, r3, r2
 800a8c8:	701e      	strb	r6, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800a8ca:	230f      	movs	r3, #15
{
 800a8cc:	0004      	movs	r4, r0
    uint8_t nbRestrictedChannels = 0;
 800a8ce:	189b      	adds	r3, r3, r2
{
 800a8d0:	000d      	movs	r5, r1
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800a8d2:	2244      	movs	r2, #68	; 0x44
 800a8d4:	0031      	movs	r1, r6
 800a8d6:	a815      	add	r0, sp, #84	; 0x54
    uint8_t nbRestrictedChannels = 0;
 800a8d8:	701e      	strb	r6, [r3, #0]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800a8da:	9614      	str	r6, [sp, #80]	; 0x50
 800a8dc:	f00b fb41 	bl	8015f62 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800a8e0:	4f41      	ldr	r7, [pc, #260]	; (800a9e8 <RegionUS915NextChannel+0x130>)
 800a8e2:	0031      	movs	r1, r6
 800a8e4:	2204      	movs	r2, #4
 800a8e6:	6838      	ldr	r0, [r7, #0]
 800a8e8:	f7fe fb54 	bl	8008f94 <RegionCommonCountChannels>
 800a8ec:	1e06      	subs	r6, r0, #0
 800a8ee:	d10a      	bne.n	800a906 <RegionUS915NextChannel+0x4e>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800a8f0:	4b3e      	ldr	r3, [pc, #248]	; (800a9ec <RegionUS915NextChannel+0x134>)
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	6819      	ldr	r1, [r3, #0]
 800a8f6:	23d8      	movs	r3, #216	; 0xd8
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	18c9      	adds	r1, r1, r3
 800a8fc:	6838      	ldr	r0, [r7, #0]
 800a8fe:	f7fe fb68 	bl	8008fd2 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	731e      	strb	r6, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800a906:	2008      	movs	r0, #8
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800a908:	4b37      	ldr	r3, [pc, #220]	; (800a9e8 <RegionUS915NextChannel+0x130>)
    if( nextChanParams->Datarate >= DR_4 )
 800a90a:	5620      	ldrsb	r0, [r4, r0]
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800a90c:	681a      	ldr	r2, [r3, #0]
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800a90e:	4b37      	ldr	r3, [pc, #220]	; (800a9ec <RegionUS915NextChannel+0x134>)
 800a910:	6819      	ldr	r1, [r3, #0]
    if( nextChanParams->Datarate >= DR_4 )
 800a912:	2803      	cmp	r0, #3
 800a914:	dd06      	ble.n	800a924 <RegionUS915NextChannel+0x6c>
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800a916:	7a13      	ldrb	r3, [r2, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <RegionUS915NextChannel+0x6c>
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800a91c:	23da      	movs	r3, #218	; 0xda
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	5acb      	ldrh	r3, [r1, r3]
 800a922:	8113      	strh	r3, [r2, #8]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800a924:	9207      	str	r2, [sp, #28]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionBands;
 800a926:	4a32      	ldr	r2, [pc, #200]	; (800a9f0 <RegionUS915NextChannel+0x138>)
    countChannelsParams.Joined = nextChanParams->Joined;
 800a928:	ab06      	add	r3, sp, #24
    countChannelsParams.Bands = RegionBands;
 800a92a:	6812      	ldr	r2, [r2, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
 800a92c:	7a66      	ldrb	r6, [r4, #9]
    countChannelsParams.Bands = RegionBands;
 800a92e:	9209      	str	r2, [sp, #36]	; 0x24
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800a930:	2248      	movs	r2, #72	; 0x48
 800a932:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = NULL;
 800a934:	2200      	movs	r2, #0
 800a936:	920b      	str	r2, [sp, #44]	; 0x2c

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a938:	6822      	ldr	r2, [r4, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
 800a93a:	701e      	strb	r6, [r3, #0]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a93c:	920c      	str	r2, [sp, #48]	; 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a93e:	6862      	ldr	r2, [r4, #4]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800a940:	7058      	strb	r0, [r3, #1]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a942:	920d      	str	r2, [sp, #52]	; 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800a944:	7aa2      	ldrb	r2, [r4, #10]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a946:	ae0c      	add	r6, sp, #48	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800a948:	7232      	strb	r2, [r6, #8]
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800a94a:	2201      	movs	r2, #1
 800a94c:	7272      	strb	r2, [r6, #9]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800a94e:	0022      	movs	r2, r4
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800a950:	9108      	str	r1, [sp, #32]
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800a952:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800a954:	320c      	adds	r2, #12
 800a956:	ab0f      	add	r3, sp, #60	; 0x3c
 800a958:	ca82      	ldmia	r2!, {r1, r7}
 800a95a:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800a95c:	7d23      	ldrb	r3, [r4, #20]
 800a95e:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a960:	8ae1      	ldrh	r1, [r4, #22]
 800a962:	f7ff fb51 	bl	800a008 <GetTimeOnAir>

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	aa02      	add	r2, sp, #8
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	230f      	movs	r3, #15
 800a96e:	189b      	adds	r3, r3, r2
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	230e      	movs	r3, #14
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a974:	9012      	str	r0, [sp, #72]	; 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800a976:	189b      	adds	r3, r3, r2
 800a978:	0030      	movs	r0, r6
 800a97a:	9903      	ldr	r1, [sp, #12]
 800a97c:	aa14      	add	r2, sp, #80	; 0x50
 800a97e:	f7fe fd8d 	bl	800949c <RegionCommonIdentifyChannels>
 800a982:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800a984:	d112      	bne.n	800a9ac <RegionUS915NextChannel+0xf4>
    {
        if( nextChanParams->Joined == true )
 800a986:	7a63      	ldrb	r3, [r4, #9]
 800a988:	4f17      	ldr	r7, [pc, #92]	; (800a9e8 <RegionUS915NextChannel+0x130>)
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d011      	beq.n	800a9b2 <RegionUS915NextChannel+0xfa>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800a98e:	ab02      	add	r3, sp, #8
 800a990:	7b99      	ldrb	r1, [r3, #14]
 800a992:	3901      	subs	r1, #1
 800a994:	f7f9 ff76 	bl	8004884 <randr>
 800a998:	2248      	movs	r2, #72	; 0x48
 800a99a:	ab02      	add	r3, sp, #8
 800a99c:	189b      	adds	r3, r3, r2
 800a99e:	5c1b      	ldrb	r3, [r3, r0]
                uint8_t i = 0;
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 800a9a0:	702b      	strb	r3, [r5, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800a9a2:	2248      	movs	r2, #72	; 0x48
 800a9a4:	7829      	ldrb	r1, [r5, #0]
 800a9a6:	6838      	ldr	r0, [r7, #0]
 800a9a8:	f7fe fae0 	bl	8008f6c <RegionCommonChanDisable>
    }
    return status;
}
 800a9ac:	0030      	movs	r0, r6
 800a9ae:	b027      	add	sp, #156	; 0x9c
 800a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( nextChanParams->Datarate == DR_0 )
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	56e3      	ldrsb	r3, [r4, r3]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800a9b6:	6838      	ldr	r0, [r7, #0]
            if( nextChanParams->Datarate == DR_0 )
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d008      	beq.n	800a9ce <RegionUS915NextChannel+0x116>
                uint8_t i = 0;
 800a9bc:	0033      	movs	r3, r6
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800a9be:	7a01      	ldrb	r1, [r0, #8]
 800a9c0:	000a      	movs	r2, r1
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	411a      	asrs	r2, r3
 800a9c6:	4202      	tst	r2, r0
 800a9c8:	d00a      	beq.n	800a9e0 <RegionUS915NextChannel+0x128>
                *channel = 64 + i;
 800a9ca:	3340      	adds	r3, #64	; 0x40
 800a9cc:	e7e8      	b.n	800a9a0 <RegionUS915NextChannel+0xe8>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800a9ce:	0001      	movs	r1, r0
 800a9d0:	002a      	movs	r2, r5
 800a9d2:	310c      	adds	r1, #12
 800a9d4:	f7fe fa42 	bl	8008e5c <RegionBaseUSComputeNext125kHzJoinChannel>
 800a9d8:	2803      	cmp	r0, #3
 800a9da:	d1e2      	bne.n	800a9a2 <RegionUS915NextChannel+0xea>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800a9dc:	0006      	movs	r6, r0
 800a9de:	e7e5      	b.n	800a9ac <RegionUS915NextChannel+0xf4>
                    i++;
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	e7ec      	b.n	800a9c0 <RegionUS915NextChannel+0x108>
 800a9e6:	46c0      	nop			; (mov r8, r8)
 800a9e8:	200012a4 	.word	0x200012a4
 800a9ec:	200012a8 	.word	0x200012a8
 800a9f0:	200012a0 	.word	0x200012a0

0800a9f4 <RegionUS915ApplyDrOffset>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800a9f4:	008b      	lsls	r3, r1, #2
 800a9f6:	4904      	ldr	r1, [pc, #16]	; (800aa08 <RegionUS915ApplyDrOffset+0x14>)
 800a9f8:	18c9      	adds	r1, r1, r3
 800a9fa:	568b      	ldrsb	r3, [r1, r2]

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800a9fc:	1c18      	adds	r0, r3, #0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da00      	bge.n	800aa04 <RegionUS915ApplyDrOffset+0x10>
 800aa02:	2000      	movs	r0, #0
 800aa04:	b2c0      	uxtb	r0, r0
}
 800aa06:	4770      	bx	lr
 800aa08:	08019308 	.word	0x08019308

0800aa0c <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aa0c:	780a      	ldrb	r2, [r1, #0]
 800aa0e:	7803      	ldrb	r3, [r0, #0]
 800aa10:	4053      	eors	r3, r2
 800aa12:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800aa14:	784a      	ldrb	r2, [r1, #1]
 800aa16:	7843      	ldrb	r3, [r0, #1]
 800aa18:	4053      	eors	r3, r2
 800aa1a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800aa1c:	788a      	ldrb	r2, [r1, #2]
 800aa1e:	7883      	ldrb	r3, [r0, #2]
 800aa20:	4053      	eors	r3, r2
 800aa22:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800aa24:	78ca      	ldrb	r2, [r1, #3]
 800aa26:	78c3      	ldrb	r3, [r0, #3]
 800aa28:	4053      	eors	r3, r2
 800aa2a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aa2c:	790a      	ldrb	r2, [r1, #4]
 800aa2e:	7903      	ldrb	r3, [r0, #4]
 800aa30:	4053      	eors	r3, r2
 800aa32:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800aa34:	794a      	ldrb	r2, [r1, #5]
 800aa36:	7943      	ldrb	r3, [r0, #5]
 800aa38:	4053      	eors	r3, r2
 800aa3a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800aa3c:	798a      	ldrb	r2, [r1, #6]
 800aa3e:	7983      	ldrb	r3, [r0, #6]
 800aa40:	4053      	eors	r3, r2
 800aa42:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800aa44:	79ca      	ldrb	r2, [r1, #7]
 800aa46:	79c3      	ldrb	r3, [r0, #7]
 800aa48:	4053      	eors	r3, r2
 800aa4a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800aa4c:	7a0a      	ldrb	r2, [r1, #8]
 800aa4e:	7a03      	ldrb	r3, [r0, #8]
 800aa50:	4053      	eors	r3, r2
 800aa52:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800aa54:	7a4a      	ldrb	r2, [r1, #9]
 800aa56:	7a43      	ldrb	r3, [r0, #9]
 800aa58:	4053      	eors	r3, r2
 800aa5a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800aa5c:	7a8a      	ldrb	r2, [r1, #10]
 800aa5e:	7a83      	ldrb	r3, [r0, #10]
 800aa60:	4053      	eors	r3, r2
 800aa62:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800aa64:	7aca      	ldrb	r2, [r1, #11]
 800aa66:	7ac3      	ldrb	r3, [r0, #11]
 800aa68:	4053      	eors	r3, r2
 800aa6a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800aa6c:	7b0a      	ldrb	r2, [r1, #12]
 800aa6e:	7b03      	ldrb	r3, [r0, #12]
 800aa70:	4053      	eors	r3, r2
 800aa72:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800aa74:	7b4a      	ldrb	r2, [r1, #13]
 800aa76:	7b43      	ldrb	r3, [r0, #13]
 800aa78:	4053      	eors	r3, r2
 800aa7a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800aa7c:	7b8a      	ldrb	r2, [r1, #14]
 800aa7e:	7b83      	ldrb	r3, [r0, #14]
 800aa80:	4053      	eors	r3, r2
 800aa82:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800aa84:	7bca      	ldrb	r2, [r1, #15]
 800aa86:	7bc3      	ldrb	r3, [r0, #15]
 800aa88:	4053      	eors	r3, r2
 800aa8a:	73c3      	strb	r3, [r0, #15]
#endif
}
 800aa8c:	4770      	bx	lr

0800aa8e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800aa8e:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800aa90:	780b      	ldrb	r3, [r1, #0]
 800aa92:	7814      	ldrb	r4, [r2, #0]
 800aa94:	4063      	eors	r3, r4
 800aa96:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800aa98:	7854      	ldrb	r4, [r2, #1]
 800aa9a:	784b      	ldrb	r3, [r1, #1]
 800aa9c:	4063      	eors	r3, r4
 800aa9e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800aaa0:	7894      	ldrb	r4, [r2, #2]
 800aaa2:	788b      	ldrb	r3, [r1, #2]
 800aaa4:	4063      	eors	r3, r4
 800aaa6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800aaa8:	78d4      	ldrb	r4, [r2, #3]
 800aaaa:	78cb      	ldrb	r3, [r1, #3]
 800aaac:	4063      	eors	r3, r4
 800aaae:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800aab0:	7914      	ldrb	r4, [r2, #4]
 800aab2:	790b      	ldrb	r3, [r1, #4]
 800aab4:	4063      	eors	r3, r4
 800aab6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800aab8:	7954      	ldrb	r4, [r2, #5]
 800aaba:	794b      	ldrb	r3, [r1, #5]
 800aabc:	4063      	eors	r3, r4
 800aabe:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800aac0:	7994      	ldrb	r4, [r2, #6]
 800aac2:	798b      	ldrb	r3, [r1, #6]
 800aac4:	4063      	eors	r3, r4
 800aac6:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800aac8:	79d4      	ldrb	r4, [r2, #7]
 800aaca:	79cb      	ldrb	r3, [r1, #7]
 800aacc:	4063      	eors	r3, r4
 800aace:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800aad0:	7a14      	ldrb	r4, [r2, #8]
 800aad2:	7a0b      	ldrb	r3, [r1, #8]
 800aad4:	4063      	eors	r3, r4
 800aad6:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800aad8:	7a4b      	ldrb	r3, [r1, #9]
 800aada:	7a54      	ldrb	r4, [r2, #9]
 800aadc:	4063      	eors	r3, r4
 800aade:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800aae0:	7a8b      	ldrb	r3, [r1, #10]
 800aae2:	7a94      	ldrb	r4, [r2, #10]
 800aae4:	4063      	eors	r3, r4
 800aae6:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800aae8:	7ad4      	ldrb	r4, [r2, #11]
 800aaea:	7acb      	ldrb	r3, [r1, #11]
 800aaec:	4063      	eors	r3, r4
 800aaee:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800aaf0:	7b14      	ldrb	r4, [r2, #12]
 800aaf2:	7b0b      	ldrb	r3, [r1, #12]
 800aaf4:	4063      	eors	r3, r4
 800aaf6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800aaf8:	7b54      	ldrb	r4, [r2, #13]
 800aafa:	7b4b      	ldrb	r3, [r1, #13]
 800aafc:	4063      	eors	r3, r4
 800aafe:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ab00:	7b94      	ldrb	r4, [r2, #14]
 800ab02:	7b8b      	ldrb	r3, [r1, #14]
 800ab04:	4063      	eors	r3, r4
 800ab06:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ab08:	7bcb      	ldrb	r3, [r1, #15]
 800ab0a:	7bd2      	ldrb	r2, [r2, #15]
 800ab0c:	4053      	eors	r3, r2
 800ab0e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ab10:	bd10      	pop	{r4, pc}
	...

0800ab14 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 800ab14:	000b      	movs	r3, r1
{
 800ab16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab18:	3b10      	subs	r3, #16
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	000f      	movs	r7, r1
 800ab1e:	0014      	movs	r4, r2
 800ab20:	b087      	sub	sp, #28
 800ab22:	2b10      	cmp	r3, #16
 800ab24:	d805      	bhi.n	800ab32 <aes_set_key+0x1e>
 800ab26:	2201      	movs	r2, #1
 800ab28:	409a      	lsls	r2, r3
 800ab2a:	0013      	movs	r3, r2
 800ab2c:	4a3b      	ldr	r2, [pc, #236]	; (800ac1c <aes_set_key+0x108>)
 800ab2e:	4213      	tst	r3, r2
 800ab30:	d105      	bne.n	800ab3e <aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ab32:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 800ab34:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 800ab36:	34f0      	adds	r4, #240	; 0xf0
 800ab38:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800ab3a:	b007      	add	sp, #28
 800ab3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 800ab3e:	2300      	movs	r3, #0
 800ab40:	429f      	cmp	r7, r3
 800ab42:	d155      	bne.n	800abf0 <aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 800ab44:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 800ab46:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 800ab48:	331c      	adds	r3, #28
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 800ab50:	091b      	lsrs	r3, r3, #4
 800ab52:	3b01      	subs	r3, #1
 800ab54:	32f0      	adds	r2, #240	; 0xf0
 800ab56:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ab58:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 800ab5a:	003d      	movs	r5, r7
            t0 = s_box(t0);
 800ab5c:	4e30      	ldr	r6, [pc, #192]	; (800ac20 <aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ab5e:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800ab60:	1963      	adds	r3, r4, r5
 800ab62:	1f1a      	subs	r2, r3, #4
 800ab64:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800ab66:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 800ab68:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 800ab6a:	1eda      	subs	r2, r3, #3
 800ab6c:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800ab6e:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 800ab70:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 800ab72:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800ab74:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800ab76:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 800ab78:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800ab7a:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 800ab7c:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 800ab7e:	f7f5 fb79 	bl	8000274 <__aeabi_uidivmod>
 800ab82:	b2c9      	uxtb	r1, r1
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d137      	bne.n	800abf8 <aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 800ab88:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 800ab8a:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 800ab8c:	5cf2      	ldrb	r2, [r6, r3]
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	405a      	eors	r2, r3
            t1 = s_box(t2);
 800ab92:	9b02      	ldr	r3, [sp, #8]
 800ab94:	5cf3      	ldrb	r3, [r6, r3]
 800ab96:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 800ab98:	9b03      	ldr	r3, [sp, #12]
 800ab9a:	5cf3      	ldrb	r3, [r6, r3]
 800ab9c:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 800ab9e:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 800aba0:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 800aba2:	5cf3      	ldrb	r3, [r6, r3]
 800aba4:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	09db      	lsrs	r3, r3, #7
 800abaa:	434b      	muls	r3, r1
 800abac:	9904      	ldr	r1, [sp, #16]
 800abae:	0049      	lsls	r1, r1, #1
 800abb0:	404b      	eors	r3, r1
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800abb6:	1beb      	subs	r3, r5, r7
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	5ce2      	ldrb	r2, [r4, r3]
 800abbc:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800abbe:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800abc0:	4051      	eors	r1, r2
 800abc2:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800abc4:	785a      	ldrb	r2, [r3, #1]
 800abc6:	9801      	ldr	r0, [sp, #4]
 800abc8:	1c69      	adds	r1, r5, #1
 800abca:	4050      	eors	r0, r2
 800abcc:	b2c9      	uxtb	r1, r1
 800abce:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800abd0:	789a      	ldrb	r2, [r3, #2]
 800abd2:	9802      	ldr	r0, [sp, #8]
 800abd4:	1961      	adds	r1, r4, r5
 800abd6:	4050      	eors	r0, r2
 800abd8:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800abda:	78db      	ldrb	r3, [r3, #3]
 800abdc:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800abde:	3504      	adds	r5, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800abe0:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800abe2:	9b05      	ldr	r3, [sp, #20]
 800abe4:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800abe6:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800abe8:	42ab      	cmp	r3, r5
 800abea:	d8b9      	bhi.n	800ab60 <aes_set_key+0x4c>
    return 0;
 800abec:	2000      	movs	r0, #0
 800abee:	e7a4      	b.n	800ab3a <aes_set_key+0x26>
        *d++ = *s++;
 800abf0:	5cc2      	ldrb	r2, [r0, r3]
 800abf2:	54e2      	strb	r2, [r4, r3]
 800abf4:	3301      	adds	r3, #1
 800abf6:	e7a3      	b.n	800ab40 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 800abf8:	2f18      	cmp	r7, #24
 800abfa:	d9dc      	bls.n	800abb6 <aes_set_key+0xa2>
 800abfc:	2910      	cmp	r1, #16
 800abfe:	d1da      	bne.n	800abb6 <aes_set_key+0xa2>
            t0 = s_box(t0);
 800ac00:	9b00      	ldr	r3, [sp, #0]
 800ac02:	5cf3      	ldrb	r3, [r6, r3]
 800ac04:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 800ac06:	9b01      	ldr	r3, [sp, #4]
 800ac08:	5cf3      	ldrb	r3, [r6, r3]
 800ac0a:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	5cf3      	ldrb	r3, [r6, r3]
 800ac10:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 800ac12:	9b03      	ldr	r3, [sp, #12]
 800ac14:	5cf3      	ldrb	r3, [r6, r3]
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	e7cd      	b.n	800abb6 <aes_set_key+0xa2>
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	00010101 	.word	0x00010101
 800ac20:	0801953c 	.word	0x0801953c

0800ac24 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800ac24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac26:	b099      	sub	sp, #100	; 0x64
 800ac28:	9210      	str	r2, [sp, #64]	; 0x40
 800ac2a:	9113      	str	r1, [sp, #76]	; 0x4c
    if( ctx->rnd )
 800ac2c:	32f0      	adds	r2, #240	; 0xf0
 800ac2e:	7812      	ldrb	r2, [r2, #0]
{
 800ac30:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 800ac32:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	d072      	beq.n	800ad1e <aes_encrypt+0xfa>
        copy_and_key( s1, in, ctx->ksch );
 800ac38:	0019      	movs	r1, r3
 800ac3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac3c:	a814      	add	r0, sp, #80	; 0x50
 800ac3e:	f7ff ff26 	bl	800aa8e <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ac42:	2301      	movs	r3, #1
 800ac44:	9301      	str	r3, [sp, #4]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	011a      	lsls	r2, r3, #4
 800ac4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac4c:	189b      	adds	r3, r3, r2
 800ac4e:	9312      	str	r3, [sp, #72]	; 0x48
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ac50:	ab14      	add	r3, sp, #80	; 0x50
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ac56:	ab14      	add	r3, sp, #80	; 0x50
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ac5c:	ab14      	add	r3, sp, #80	; 0x50
 800ac5e:	789b      	ldrb	r3, [r3, #2]
 800ac60:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ac62:	ab14      	add	r3, sp, #80	; 0x50
 800ac64:	78db      	ldrb	r3, [r3, #3]
 800ac66:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ac68:	ab14      	add	r3, sp, #80	; 0x50
 800ac6a:	791b      	ldrb	r3, [r3, #4]
 800ac6c:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ac6e:	ab14      	add	r3, sp, #80	; 0x50
 800ac70:	795c      	ldrb	r4, [r3, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ac72:	799b      	ldrb	r3, [r3, #6]
 800ac74:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ac76:	ab14      	add	r3, sp, #80	; 0x50
 800ac78:	79db      	ldrb	r3, [r3, #7]
 800ac7a:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ac7c:	ab14      	add	r3, sp, #80	; 0x50
 800ac7e:	7a1b      	ldrb	r3, [r3, #8]
 800ac80:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ac82:	ab14      	add	r3, sp, #80	; 0x50
 800ac84:	7a5b      	ldrb	r3, [r3, #9]
 800ac86:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ac88:	ab14      	add	r3, sp, #80	; 0x50
 800ac8a:	7a9f      	ldrb	r7, [r3, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ac8c:	7adb      	ldrb	r3, [r3, #11]
 800ac8e:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ac90:	ab14      	add	r3, sp, #80	; 0x50
 800ac92:	7b1b      	ldrb	r3, [r3, #12]
 800ac94:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ac96:	ab14      	add	r3, sp, #80	; 0x50
 800ac98:	7b5b      	ldrb	r3, [r3, #13]
 800ac9a:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ac9c:	ab14      	add	r3, sp, #80	; 0x50
 800ac9e:	7b9b      	ldrb	r3, [r3, #14]
 800aca0:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aca2:	ab14      	add	r3, sp, #80	; 0x50
 800aca4:	7bdb      	ldrb	r3, [r3, #15]
        for( r = 1 ; r < ctx->rnd ; ++r )
 800aca6:	9901      	ldr	r1, [sp, #4]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aca8:	930f      	str	r3, [sp, #60]	; 0x3c
        for( r = 1 ; r < ctx->rnd ; ++r )
 800acaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acac:	33f0      	adds	r3, #240	; 0xf0
 800acae:	781a      	ldrb	r2, [r3, #0]
 800acb0:	4b74      	ldr	r3, [pc, #464]	; (800ae84 <aes_encrypt+0x260>)
 800acb2:	428a      	cmp	r2, r1
 800acb4:	d835      	bhi.n	800ad22 <aes_encrypt+0xfe>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800acb6:	9a02      	ldr	r2, [sp, #8]
 800acb8:	a914      	add	r1, sp, #80	; 0x50
 800acba:	5c9a      	ldrb	r2, [r3, r2]
 800acbc:	700a      	strb	r2, [r1, #0]
 800acbe:	9a06      	ldr	r2, [sp, #24]
 800acc0:	5c9a      	ldrb	r2, [r3, r2]
 800acc2:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800acc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc6:	5c9a      	ldrb	r2, [r3, r2]
 800acc8:	720a      	strb	r2, [r1, #8]
 800acca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800accc:	5c9a      	ldrb	r2, [r3, r2]
 800acce:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800acd0:	5d1a      	ldrb	r2, [r3, r4]
 800acd2:	704a      	strb	r2, [r1, #1]
 800acd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acd6:	5c9a      	ldrb	r2, [r3, r2]
 800acd8:	714a      	strb	r2, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800acda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acdc:	5c9a      	ldrb	r2, [r3, r2]
 800acde:	724a      	strb	r2, [r1, #9]
 800ace0:	9a03      	ldr	r2, [sp, #12]
 800ace2:	5c9a      	ldrb	r2, [r3, r2]
 800ace4:	734a      	strb	r2, [r1, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ace6:	5dda      	ldrb	r2, [r3, r7]
 800ace8:	708a      	strb	r2, [r1, #2]
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	5c9a      	ldrb	r2, [r3, r2]
 800acee:	728a      	strb	r2, [r1, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800acf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acf2:	5c9a      	ldrb	r2, [r3, r2]
 800acf4:	718a      	strb	r2, [r1, #6]
 800acf6:	9a07      	ldr	r2, [sp, #28]
 800acf8:	5c9a      	ldrb	r2, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800acfa:	9813      	ldr	r0, [sp, #76]	; 0x4c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800acfc:	738a      	strb	r2, [r1, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800acfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad00:	5c9a      	ldrb	r2, [r3, r2]
 800ad02:	73ca      	strb	r2, [r1, #15]
 800ad04:	9a08      	ldr	r2, [sp, #32]
 800ad06:	5c9a      	ldrb	r2, [r3, r2]
 800ad08:	72ca      	strb	r2, [r1, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ad0a:	9a05      	ldr	r2, [sp, #20]
 800ad0c:	5c9a      	ldrb	r2, [r3, r2]
 800ad0e:	71ca      	strb	r2, [r1, #7]
 800ad10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad12:	5c9b      	ldrb	r3, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ad14:	9a12      	ldr	r2, [sp, #72]	; 0x48
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ad16:	70cb      	strb	r3, [r1, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ad18:	f7ff feb9 	bl	800aa8e <copy_and_key>
    return 0;
 800ad1c:	2000      	movs	r0, #0
}
 800ad1e:	b019      	add	sp, #100	; 0x64
 800ad20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ad22:	5dda      	ldrb	r2, [r3, r7]
 800ad24:	4958      	ldr	r1, [pc, #352]	; (800ae88 <aes_encrypt+0x264>)
 800ad26:	9211      	str	r2, [sp, #68]	; 0x44
 800ad28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad2a:	9d02      	ldr	r5, [sp, #8]
 800ad2c:	5c98      	ldrb	r0, [r3, r2]
 800ad2e:	4a57      	ldr	r2, [pc, #348]	; (800ae8c <aes_encrypt+0x268>)
 800ad30:	5d56      	ldrb	r6, [r2, r5]
 800ad32:	5d0d      	ldrb	r5, [r1, r4]
 800ad34:	406e      	eors	r6, r5
 800ad36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ad38:	406e      	eors	r6, r5
 800ad3a:	4046      	eors	r6, r0
 800ad3c:	ad14      	add	r5, sp, #80	; 0x50
 800ad3e:	702e      	strb	r6, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ad40:	9d02      	ldr	r5, [sp, #8]
 800ad42:	5d5e      	ldrb	r6, [r3, r5]
 800ad44:	5d15      	ldrb	r5, [r2, r4]
 800ad46:	4070      	eors	r0, r6
 800ad48:	4068      	eors	r0, r5
 800ad4a:	5dcd      	ldrb	r5, [r1, r7]
 800ad4c:	4068      	eors	r0, r5
 800ad4e:	ad14      	add	r5, sp, #80	; 0x50
 800ad50:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ad52:	5d18      	ldrb	r0, [r3, r4]
 800ad54:	5dd4      	ldrb	r4, [r2, r7]
 800ad56:	4046      	eors	r6, r0
 800ad58:	4066      	eors	r6, r4
 800ad5a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ad5c:	5d0c      	ldrb	r4, [r1, r4]
 800ad5e:	4066      	eors	r6, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ad60:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ad62:	70ae      	strb	r6, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ad64:	4060      	eors	r0, r4
 800ad66:	9c02      	ldr	r4, [sp, #8]
 800ad68:	5d0f      	ldrb	r7, [r1, r4]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ad6a:	9c06      	ldr	r4, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ad6c:	4047      	eors	r7, r0
 800ad6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ad70:	5c10      	ldrb	r0, [r2, r0]
 800ad72:	4078      	eors	r0, r7
 800ad74:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ad76:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad78:	5c1d      	ldrb	r5, [r3, r0]
 800ad7a:	9805      	ldr	r0, [sp, #20]
 800ad7c:	5c18      	ldrb	r0, [r3, r0]
 800ad7e:	5d14      	ldrb	r4, [r2, r4]
 800ad80:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ad82:	5d8e      	ldrb	r6, [r1, r6]
 800ad84:	4074      	eors	r4, r6
 800ad86:	406c      	eors	r4, r5
 800ad88:	4044      	eors	r4, r0
 800ad8a:	ae14      	add	r6, sp, #80	; 0x50
 800ad8c:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ad8e:	9c06      	ldr	r4, [sp, #24]
 800ad90:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ad92:	5d1c      	ldrb	r4, [r3, r4]
 800ad94:	5d96      	ldrb	r6, [r2, r6]
 800ad96:	4060      	eors	r0, r4
 800ad98:	4070      	eors	r0, r6
 800ad9a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ad9c:	5d8e      	ldrb	r6, [r1, r6]
 800ad9e:	4070      	eors	r0, r6
 800ada0:	ae14      	add	r6, sp, #80	; 0x50
 800ada2:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ada4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ada6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ada8:	5c18      	ldrb	r0, [r3, r0]
 800adaa:	5d96      	ldrb	r6, [r2, r6]
 800adac:	4044      	eors	r4, r0
 800adae:	4074      	eors	r4, r6
 800adb0:	9e05      	ldr	r6, [sp, #20]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800adb2:	4068      	eors	r0, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800adb4:	5d8e      	ldrb	r6, [r1, r6]
 800adb6:	4074      	eors	r4, r6
 800adb8:	ae14      	add	r6, sp, #80	; 0x50
 800adba:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800adbc:	9c06      	ldr	r4, [sp, #24]
 800adbe:	5d0d      	ldrb	r5, [r1, r4]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800adc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800adc2:	4045      	eors	r5, r0
 800adc4:	9805      	ldr	r0, [sp, #20]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800adc6:	5d14      	ldrb	r4, [r2, r4]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800adc8:	5c10      	ldrb	r0, [r2, r0]
 800adca:	4068      	eors	r0, r5
 800adcc:	71f0      	strb	r0, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800adce:	9804      	ldr	r0, [sp, #16]
 800add0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800add2:	5c1d      	ldrb	r5, [r3, r0]
 800add4:	5d8e      	ldrb	r6, [r1, r6]
 800add6:	9808      	ldr	r0, [sp, #32]
 800add8:	4074      	eors	r4, r6
 800adda:	5c18      	ldrb	r0, [r3, r0]
 800addc:	406c      	eors	r4, r5
 800adde:	4044      	eors	r4, r0
 800ade0:	ae14      	add	r6, sp, #80	; 0x50
 800ade2:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ade4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ade6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ade8:	5d1c      	ldrb	r4, [r3, r4]
 800adea:	5d96      	ldrb	r6, [r2, r6]
 800adec:	4060      	eors	r0, r4
 800adee:	4070      	eors	r0, r6
 800adf0:	9e04      	ldr	r6, [sp, #16]
 800adf2:	5d8e      	ldrb	r6, [r1, r6]
 800adf4:	4070      	eors	r0, r6
 800adf6:	ae14      	add	r6, sp, #80	; 0x50
 800adf8:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800adfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adfc:	9e04      	ldr	r6, [sp, #16]
 800adfe:	5c18      	ldrb	r0, [r3, r0]
 800ae00:	5d96      	ldrb	r6, [r2, r6]
 800ae02:	4044      	eors	r4, r0
 800ae04:	4074      	eors	r4, r6
 800ae06:	9e08      	ldr	r6, [sp, #32]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ae08:	4068      	eors	r0, r5
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ae0a:	5d8e      	ldrb	r6, [r1, r6]
 800ae0c:	4074      	eors	r4, r6
 800ae0e:	ae14      	add	r6, sp, #80	; 0x50
 800ae10:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ae12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ae14:	5d0d      	ldrb	r5, [r1, r4]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ae16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ae18:	4045      	eors	r5, r0
 800ae1a:	9808      	ldr	r0, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ae1c:	5d14      	ldrb	r4, [r2, r4]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ae1e:	5c10      	ldrb	r0, [r2, r0]
 800ae20:	4068      	eors	r0, r5
 800ae22:	72f0      	strb	r0, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ae24:	9807      	ldr	r0, [sp, #28]
 800ae26:	9e03      	ldr	r6, [sp, #12]
 800ae28:	5c1d      	ldrb	r5, [r3, r0]
 800ae2a:	5d8e      	ldrb	r6, [r1, r6]
 800ae2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae2e:	4074      	eors	r4, r6
 800ae30:	5c18      	ldrb	r0, [r3, r0]
 800ae32:	406c      	eors	r4, r5
 800ae34:	4044      	eors	r4, r0
 800ae36:	ae14      	add	r6, sp, #80	; 0x50
 800ae38:	7334      	strb	r4, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ae3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae3c:	9e03      	ldr	r6, [sp, #12]
 800ae3e:	5d1c      	ldrb	r4, [r3, r4]
 800ae40:	5d96      	ldrb	r6, [r2, r6]
 800ae42:	4060      	eors	r0, r4
 800ae44:	4070      	eors	r0, r6
 800ae46:	9e07      	ldr	r6, [sp, #28]
 800ae48:	5d8e      	ldrb	r6, [r1, r6]
 800ae4a:	4070      	eors	r0, r6
 800ae4c:	ae14      	add	r6, sp, #80	; 0x50
 800ae4e:	7370      	strb	r0, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ae50:	9803      	ldr	r0, [sp, #12]
 800ae52:	5c1b      	ldrb	r3, [r3, r0]
 800ae54:	9807      	ldr	r0, [sp, #28]
 800ae56:	405c      	eors	r4, r3
 800ae58:	5c10      	ldrb	r0, [r2, r0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ae5a:	406b      	eors	r3, r5
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ae5c:	4044      	eors	r4, r0
 800ae5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae60:	5c08      	ldrb	r0, [r1, r0]
 800ae62:	4044      	eors	r4, r0
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ae64:	980c      	ldr	r0, [sp, #48]	; 0x30
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ae66:	73b4      	strb	r4, [r6, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ae68:	5c0d      	ldrb	r5, [r1, r0]
 800ae6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae6c:	406b      	eors	r3, r5
 800ae6e:	5c55      	ldrb	r5, [r2, r1]
    xor_block(d, k);
 800ae70:	0030      	movs	r0, r6
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ae72:	406b      	eors	r3, r5
 800ae74:	73f3      	strb	r3, [r6, #15]
    xor_block(d, k);
 800ae76:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ae78:	f7ff fdc8 	bl	800aa0c <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	e6df      	b.n	800ac44 <aes_encrypt+0x20>
 800ae84:	0801953c 	.word	0x0801953c
 800ae88:	0801943c 	.word	0x0801943c
 800ae8c:	0801933c 	.word	0x0801933c

0800ae90 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ae90:	b510      	push	{r4, lr}
 800ae92:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800ae94:	2210      	movs	r2, #16
 800ae96:	2100      	movs	r1, #0
 800ae98:	30f1      	adds	r0, #241	; 0xf1
 800ae9a:	f7f9 fd13 	bl	80048c4 <memset1>
    ctx->M_n = 0;
 800ae9e:	0023      	movs	r3, r4
 800aea0:	2100      	movs	r1, #0
 800aea2:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aea4:	22f0      	movs	r2, #240	; 0xf0
 800aea6:	0020      	movs	r0, r4
    ctx->M_n = 0;
 800aea8:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aeaa:	f7f9 fd0b 	bl	80048c4 <memset1>
}
 800aeae:	bd10      	pop	{r4, pc}

0800aeb0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	0002      	movs	r2, r0
 800aeb4:	0008      	movs	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aeb6:	2110      	movs	r1, #16
 800aeb8:	f7ff fe2c 	bl	800ab14 <aes_set_key>
}
 800aebc:	bd10      	pop	{r4, pc}

0800aebe <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aebe:	0003      	movs	r3, r0
{
 800aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec2:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 800aec4:	33fc      	adds	r3, #252	; 0xfc
 800aec6:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aec8:	1ca3      	adds	r3, r4, #2
{
 800aeca:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aecc:	33ff      	adds	r3, #255	; 0xff
{
 800aece:	000e      	movs	r6, r1
 800aed0:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aed2:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d036      	beq.n	800af46 <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 800aed8:	2710      	movs	r7, #16
 800aeda:	1a3f      	subs	r7, r7, r0
 800aedc:	9700      	str	r7, [sp, #0]
 800aede:	4297      	cmp	r7, r2
 800aee0:	d900      	bls.n	800aee4 <AES_CMAC_Update+0x26>
 800aee2:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aee4:	466b      	mov	r3, sp
 800aee6:	881a      	ldrh	r2, [r3, #0]
 800aee8:	1ca3      	adds	r3, r4, #2
 800aeea:	33ff      	adds	r3, #255	; 0xff
 800aeec:	0031      	movs	r1, r6
 800aeee:	1818      	adds	r0, r3, r0
 800aef0:	f7f9 fcd3 	bl	800489a <memcpy1>
        ctx->M_n += mlen;
 800aef4:	0022      	movs	r2, r4
 800aef6:	32fc      	adds	r2, #252	; 0xfc
 800aef8:	6991      	ldr	r1, [r2, #24]
 800aefa:	9b00      	ldr	r3, [sp, #0]
 800aefc:	185b      	adds	r3, r3, r1
 800aefe:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 800af00:	2b0f      	cmp	r3, #15
 800af02:	d929      	bls.n	800af58 <AES_CMAC_Update+0x9a>
 800af04:	42af      	cmp	r7, r5
 800af06:	d227      	bcs.n	800af58 <AES_CMAC_Update+0x9a>
 800af08:	0023      	movs	r3, r4
 800af0a:	1ca1      	adds	r1, r4, #2
 800af0c:	33f1      	adds	r3, #241	; 0xf1
 800af0e:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	7c18      	ldrb	r0, [r3, #16]
 800af14:	4042      	eors	r2, r0
 800af16:	701a      	strb	r2, [r3, #0]
 800af18:	3301      	adds	r3, #1
 800af1a:	428b      	cmp	r3, r1
 800af1c:	d1f8      	bne.n	800af10 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af1e:	0027      	movs	r7, r4
 800af20:	37f1      	adds	r7, #241	; 0xf1
 800af22:	2210      	movs	r2, #16
 800af24:	0039      	movs	r1, r7
 800af26:	a802      	add	r0, sp, #8
 800af28:	f7f9 fcb7 	bl	800489a <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 800af2c:	a902      	add	r1, sp, #8
 800af2e:	0022      	movs	r2, r4
 800af30:	0008      	movs	r0, r1
 800af32:	f7ff fe77 	bl	800ac24 <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800af36:	2210      	movs	r2, #16
 800af38:	0038      	movs	r0, r7
 800af3a:	a902      	add	r1, sp, #8
 800af3c:	f7f9 fcad 	bl	800489a <memcpy1>

        data += mlen;
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	18f6      	adds	r6, r6, r3
        len -= mlen;
 800af44:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 800af46:	2d10      	cmp	r5, #16
 800af48:	d808      	bhi.n	800af5c <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800af4a:	0031      	movs	r1, r6
 800af4c:	9801      	ldr	r0, [sp, #4]
 800af4e:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 800af50:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 800af52:	f7f9 fca2 	bl	800489a <memcpy1>
    ctx->M_n = len;
 800af56:	61a5      	str	r5, [r4, #24]
}
 800af58:	b007      	add	sp, #28
 800af5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5c:	0023      	movs	r3, r4
 800af5e:	0032      	movs	r2, r6
 800af60:	1ca0      	adds	r0, r4, #2
 800af62:	33f1      	adds	r3, #241	; 0xf1
 800af64:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 800af66:	7819      	ldrb	r1, [r3, #0]
 800af68:	7817      	ldrb	r7, [r2, #0]
 800af6a:	3201      	adds	r2, #1
 800af6c:	4079      	eors	r1, r7
 800af6e:	7019      	strb	r1, [r3, #0]
 800af70:	3301      	adds	r3, #1
 800af72:	4283      	cmp	r3, r0
 800af74:	d1f7      	bne.n	800af66 <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af76:	0027      	movs	r7, r4
 800af78:	37f1      	adds	r7, #241	; 0xf1
 800af7a:	2210      	movs	r2, #16
 800af7c:	0039      	movs	r1, r7
 800af7e:	a802      	add	r0, sp, #8
 800af80:	f7f9 fc8b 	bl	800489a <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 800af84:	a902      	add	r1, sp, #8
 800af86:	0022      	movs	r2, r4
 800af88:	0008      	movs	r0, r1
 800af8a:	f7ff fe4b 	bl	800ac24 <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800af8e:	2210      	movs	r2, #16
 800af90:	0038      	movs	r0, r7
 800af92:	a902      	add	r1, sp, #8
 800af94:	f7f9 fc81 	bl	800489a <memcpy1>
        data += 16;
 800af98:	3610      	adds	r6, #16
        len -= 16;
 800af9a:	3d10      	subs	r5, #16
 800af9c:	e7d3      	b.n	800af46 <AES_CMAC_Update+0x88>

0800af9e <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800af9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa0:	000c      	movs	r4, r1
 800afa2:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800afa4:	2210      	movs	r2, #16
 800afa6:	2100      	movs	r1, #0
{
 800afa8:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 800afaa:	a802      	add	r0, sp, #8
 800afac:	f7f9 fc8a 	bl	80048c4 <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
 800afb0:	a902      	add	r1, sp, #8
 800afb2:	0022      	movs	r2, r4
 800afb4:	0008      	movs	r0, r1
 800afb6:	f7ff fe35 	bl	800ac24 <aes_encrypt>

    if( K[0] & 0x80 )
 800afba:	ab02      	add	r3, sp, #8
 800afbc:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800afbe:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 800afc0:	2a7f      	cmp	r2, #127	; 0x7f
 800afc2:	d940      	bls.n	800b046 <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 800afc4:	781a      	ldrb	r2, [r3, #0]
 800afc6:	7858      	ldrb	r0, [r3, #1]
 800afc8:	0052      	lsls	r2, r2, #1
 800afca:	09c0      	lsrs	r0, r0, #7
 800afcc:	4302      	orrs	r2, r0
 800afce:	3101      	adds	r1, #1
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	290f      	cmp	r1, #15
 800afd6:	d1f5      	bne.n	800afc4 <AES_CMAC_Final+0x26>
 800afd8:	ab02      	add	r3, sp, #8
 800afda:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 800afdc:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 800afde:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 800afe0:	425b      	negs	r3, r3
 800afe2:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 800afe4:	0027      	movs	r7, r4
 800afe6:	37fc      	adds	r7, #252	; 0xfc
 800afe8:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 800afea:	aa02      	add	r2, sp, #8
 800afec:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 800afee:	2810      	cmp	r0, #16
 800aff0:	d137      	bne.n	800b062 <AES_CMAC_Final+0xc4>
 800aff2:	0020      	movs	r0, r4
 800aff4:	1ca3      	adds	r3, r4, #2
 800aff6:	3012      	adds	r0, #18
 800aff8:	33ff      	adds	r3, #255	; 0xff
 800affa:	aa02      	add	r2, sp, #8
 800affc:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800affe:	7819      	ldrb	r1, [r3, #0]
 800b000:	7815      	ldrb	r5, [r2, #0]
 800b002:	3201      	adds	r2, #1
 800b004:	4069      	eors	r1, r5
 800b006:	7019      	strb	r1, [r3, #0]
 800b008:	3301      	adds	r3, #1
 800b00a:	4298      	cmp	r0, r3
 800b00c:	d1f7      	bne.n	800affe <AES_CMAC_Final+0x60>
 800b00e:	0023      	movs	r3, r4
 800b010:	33f1      	adds	r3, #241	; 0xf1
 800b012:	0019      	movs	r1, r3
 800b014:	1ca0      	adds	r0, r4, #2
 800b016:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	7c1d      	ldrb	r5, [r3, #16]
 800b01c:	406a      	eors	r2, r5
 800b01e:	701a      	strb	r2, [r3, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	4283      	cmp	r3, r0
 800b024:	d1f8      	bne.n	800b018 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b026:	a806      	add	r0, sp, #24
 800b028:	2210      	movs	r2, #16
 800b02a:	f7f9 fc36 	bl	800489a <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
 800b02e:	0022      	movs	r2, r4
 800b030:	9901      	ldr	r1, [sp, #4]
 800b032:	a806      	add	r0, sp, #24
 800b034:	f7ff fdf6 	bl	800ac24 <aes_encrypt>
    memset1( K, 0, sizeof K );
 800b038:	2210      	movs	r2, #16
 800b03a:	2100      	movs	r1, #0
 800b03c:	a802      	add	r0, sp, #8
 800b03e:	f7f9 fc41 	bl	80048c4 <memset1>
}
 800b042:	b00b      	add	sp, #44	; 0x2c
 800b044:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 800b046:	781a      	ldrb	r2, [r3, #0]
 800b048:	7858      	ldrb	r0, [r3, #1]
 800b04a:	0052      	lsls	r2, r2, #1
 800b04c:	09c0      	lsrs	r0, r0, #7
 800b04e:	4302      	orrs	r2, r0
 800b050:	3101      	adds	r1, #1
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	3301      	adds	r3, #1
 800b056:	290f      	cmp	r1, #15
 800b058:	d1f5      	bne.n	800b046 <AES_CMAC_Final+0xa8>
 800b05a:	ab02      	add	r3, sp, #8
 800b05c:	7bdb      	ldrb	r3, [r3, #15]
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	e7c0      	b.n	800afe4 <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 800b062:	ab02      	add	r3, sp, #8
 800b064:	781a      	ldrb	r2, [r3, #0]
            LSHIFT( K, K );
 800b066:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 800b068:	2a7f      	cmp	r2, #127	; 0x7f
 800b06a:	d933      	bls.n	800b0d4 <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	785d      	ldrb	r5, [r3, #1]
 800b070:	0052      	lsls	r2, r2, #1
 800b072:	09ed      	lsrs	r5, r5, #7
 800b074:	432a      	orrs	r2, r5
 800b076:	3101      	adds	r1, #1
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	290f      	cmp	r1, #15
 800b07e:	d1f5      	bne.n	800b06c <AES_CMAC_Final+0xce>
 800b080:	ab02      	add	r3, sp, #8
 800b082:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 800b084:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 800b086:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 800b088:	425b      	negs	r3, r3
 800b08a:	4053      	eors	r3, r2
            LSHIFT( K, K );
 800b08c:	aa02      	add	r2, sp, #8
 800b08e:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 800b090:	2280      	movs	r2, #128	; 0x80
 800b092:	1823      	adds	r3, r4, r0
 800b094:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 800b096:	1c46      	adds	r6, r0, #1
 800b098:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 800b09a:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 800b09c:	2e10      	cmp	r6, #16
 800b09e:	d801      	bhi.n	800b0a4 <AES_CMAC_Final+0x106>
 800b0a0:	350f      	adds	r5, #15
 800b0a2:	1a2d      	subs	r5, r5, r0
 800b0a4:	3003      	adds	r0, #3
 800b0a6:	30ff      	adds	r0, #255	; 0xff
 800b0a8:	002a      	movs	r2, r5
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	1820      	adds	r0, r4, r0
 800b0ae:	f00a ff58 	bl	8015f62 <memset>
 800b0b2:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 800b0b4:	19ad      	adds	r5, r5, r6
 800b0b6:	1ca3      	adds	r3, r4, #2
 800b0b8:	3012      	adds	r0, #18
 800b0ba:	61bd      	str	r5, [r7, #24]
 800b0bc:	33ff      	adds	r3, #255	; 0xff
 800b0be:	aa02      	add	r2, sp, #8
 800b0c0:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 800b0c2:	7819      	ldrb	r1, [r3, #0]
 800b0c4:	7815      	ldrb	r5, [r2, #0]
 800b0c6:	3201      	adds	r2, #1
 800b0c8:	4069      	eors	r1, r5
 800b0ca:	7019      	strb	r1, [r3, #0]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	4298      	cmp	r0, r3
 800b0d0:	d1f7      	bne.n	800b0c2 <AES_CMAC_Final+0x124>
 800b0d2:	e79c      	b.n	800b00e <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 800b0d4:	781a      	ldrb	r2, [r3, #0]
 800b0d6:	785d      	ldrb	r5, [r3, #1]
 800b0d8:	0052      	lsls	r2, r2, #1
 800b0da:	09ed      	lsrs	r5, r5, #7
 800b0dc:	432a      	orrs	r2, r5
 800b0de:	3101      	adds	r1, #1
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	290f      	cmp	r1, #15
 800b0e6:	d1f5      	bne.n	800b0d4 <AES_CMAC_Final+0x136>
 800b0e8:	ab02      	add	r3, sp, #8
 800b0ea:	7bdb      	ldrb	r3, [r3, #15]
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	e7cd      	b.n	800b08c <AES_CMAC_Final+0xee>

0800b0f0 <SoftSeHalGetUniqueId>:
#include "board.h"

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
 800b0f0:	b510      	push	{r4, lr}
    BoardGetUniqueId( id );
 800b0f2:	f7f8 fe96 	bl	8003e22 <BoardGetUniqueId>
}
 800b0f6:	bd10      	pop	{r4, pc}

0800b0f8 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0fa:	b0cd      	sub	sp, #308	; 0x134
 800b0fc:	0005      	movs	r5, r0
 800b0fe:	000c      	movs	r4, r1
 800b100:	0016      	movs	r6, r2
    if( ( buffer == NULL ) || ( cmac == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b102:	2002      	movs	r0, #2
{
 800b104:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b106:	2900      	cmp	r1, #0
 800b108:	d02a      	beq.n	800b160 <ComputeCmac+0x68>
 800b10a:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d027      	beq.n	800b160 <ComputeCmac+0x68>
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b110:	a806      	add	r0, sp, #24
 800b112:	f7ff febd 	bl	800ae90 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b116:	4b16      	ldr	r3, [pc, #88]	; (800b170 <ComputeCmac+0x78>)
 800b118:	681f      	ldr	r7, [r3, #0]
 800b11a:	2300      	movs	r3, #0
 800b11c:	0038      	movs	r0, r7
 800b11e:	3014      	adds	r0, #20
 800b120:	2111      	movs	r1, #17
 800b122:	4359      	muls	r1, r3
 800b124:	5c42      	ldrb	r2, [r0, r1]
 800b126:	4694      	mov	ip, r2
 800b128:	9a01      	ldr	r2, [sp, #4]
 800b12a:	4594      	cmp	ip, r2
 800b12c:	d114      	bne.n	800b158 <ComputeCmac+0x60>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b12e:	3115      	adds	r1, #21
 800b130:	1879      	adds	r1, r7, r1
 800b132:	a806      	add	r0, sp, #24
 800b134:	f7ff febc 	bl	800aeb0 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b138:	2d00      	cmp	r5, #0
 800b13a:	d113      	bne.n	800b164 <ComputeCmac+0x6c>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b13c:	0032      	movs	r2, r6
 800b13e:	0021      	movs	r1, r4
 800b140:	a806      	add	r0, sp, #24
 800b142:	f7ff febc 	bl	800aebe <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b146:	a802      	add	r0, sp, #8
 800b148:	a906      	add	r1, sp, #24
 800b14a:	f7ff ff28 	bl	800af9e <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b14e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800b150:	9a02      	ldr	r2, [sp, #8]
 800b152:	2000      	movs	r0, #0
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	e003      	b.n	800b160 <ComputeCmac+0x68>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b158:	3301      	adds	r3, #1
 800b15a:	2b17      	cmp	r3, #23
 800b15c:	d1e0      	bne.n	800b120 <ComputeCmac+0x28>
 800b15e:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
 800b160:	b04d      	add	sp, #308	; 0x134
 800b162:	bdf0      	pop	{r4, r5, r6, r7, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b164:	2210      	movs	r2, #16
 800b166:	0029      	movs	r1, r5
 800b168:	a806      	add	r0, sp, #24
 800b16a:	f7ff fea8 	bl	800aebe <AES_CMAC_Update>
 800b16e:	e7e5      	b.n	800b13c <ComputeCmac+0x44>
 800b170:	200012ac 	.word	0x200012ac

0800b174 <SecureElementInit>:
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
    SecureElementNvmData_t seNvmInit =
 800b174:	22d0      	movs	r2, #208	; 0xd0
{
 800b176:	b570      	push	{r4, r5, r6, lr}
 800b178:	b0e8      	sub	sp, #416	; 0x1a0
    SecureElementNvmData_t seNvmInit =
 800b17a:	2100      	movs	r1, #0
 800b17c:	0052      	lsls	r2, r2, #1
{
 800b17e:	0006      	movs	r6, r0
    SecureElementNvmData_t seNvmInit =
 800b180:	4668      	mov	r0, sp
 800b182:	f00a feee 	bl	8015f62 <memset>
 800b186:	2015      	movs	r0, #21
 800b188:	4c41      	ldr	r4, [pc, #260]	; (800b290 <SecureElementInit+0x11c>)
 800b18a:	2210      	movs	r2, #16
 800b18c:	0021      	movs	r1, r4
 800b18e:	4468      	add	r0, sp
 800b190:	f00a fede 	bl	8015f50 <memcpy>
 800b194:	466b      	mov	r3, sp
 800b196:	2201      	movs	r2, #1
 800b198:	2026      	movs	r0, #38	; 0x26
 800b19a:	3306      	adds	r3, #6
 800b19c:	77da      	strb	r2, [r3, #31]
 800b19e:	0021      	movs	r1, r4
 800b1a0:	320f      	adds	r2, #15
 800b1a2:	4468      	add	r0, sp
 800b1a4:	f00a fed4 	bl	8015f50 <memcpy>
 800b1a8:	2336      	movs	r3, #54	; 0x36
 800b1aa:	2502      	movs	r5, #2
 800b1ac:	446b      	add	r3, sp
 800b1ae:	701d      	strb	r5, [r3, #0]
 800b1b0:	2347      	movs	r3, #71	; 0x47
 800b1b2:	2203      	movs	r2, #3
 800b1b4:	2059      	movs	r0, #89	; 0x59
 800b1b6:	446b      	add	r3, sp
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	ab16      	add	r3, sp, #88	; 0x58
 800b1bc:	3201      	adds	r2, #1
 800b1be:	701a      	strb	r2, [r3, #0]
 800b1c0:	0021      	movs	r1, r4
 800b1c2:	320c      	adds	r2, #12
 800b1c4:	4468      	add	r0, sp
 800b1c6:	f00a fec3 	bl	8015f50 <memcpy>
 800b1ca:	2369      	movs	r3, #105	; 0x69
 800b1cc:	2205      	movs	r2, #5
 800b1ce:	206a      	movs	r0, #106	; 0x6a
 800b1d0:	446b      	add	r3, sp
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	0021      	movs	r1, r4
 800b1d6:	320b      	adds	r2, #11
 800b1d8:	4468      	add	r0, sp
 800b1da:	f00a feb9 	bl	8015f50 <memcpy>
 800b1de:	237a      	movs	r3, #122	; 0x7a
 800b1e0:	2206      	movs	r2, #6
 800b1e2:	207b      	movs	r0, #123	; 0x7b
 800b1e4:	446b      	add	r3, sp
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	0021      	movs	r1, r4
 800b1ea:	320a      	adds	r2, #10
 800b1ec:	4468      	add	r0, sp
 800b1ee:	f00a feaf 	bl	8015f50 <memcpy>
 800b1f2:	238b      	movs	r3, #139	; 0x8b
 800b1f4:	2207      	movs	r2, #7
 800b1f6:	446b      	add	r3, sp
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	0021      	movs	r1, r4
 800b1fc:	3209      	adds	r2, #9
 800b1fe:	a823      	add	r0, sp, #140	; 0x8c
 800b200:	f00a fea6 	bl	8015f50 <memcpy>
 800b204:	2208      	movs	r2, #8
 800b206:	ab27      	add	r3, sp, #156	; 0x9c
 800b208:	701a      	strb	r2, [r3, #0]
 800b20a:	23ad      	movs	r3, #173	; 0xad
 800b20c:	3277      	adds	r2, #119	; 0x77
 800b20e:	446b      	add	r3, sp
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	23be      	movs	r3, #190	; 0xbe
 800b214:	3201      	adds	r2, #1
 800b216:	446b      	add	r3, sp
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	23cf      	movs	r3, #207	; 0xcf
 800b21c:	3201      	adds	r2, #1
 800b21e:	446b      	add	r3, sp
 800b220:	701a      	strb	r2, [r3, #0]
 800b222:	ab38      	add	r3, sp, #224	; 0xe0
 800b224:	3201      	adds	r2, #1
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	23f1      	movs	r3, #241	; 0xf1
 800b22a:	3201      	adds	r2, #1
 800b22c:	446b      	add	r3, sp
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	23ff      	movs	r3, #255	; 0xff
 800b232:	3201      	adds	r2, #1
 800b234:	446b      	add	r3, sp
 800b236:	70da      	strb	r2, [r3, #3]
 800b238:	3201      	adds	r2, #1
 800b23a:	751a      	strb	r2, [r3, #20]
 800b23c:	2392      	movs	r3, #146	; 0x92
 800b23e:	4669      	mov	r1, sp
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	3201      	adds	r2, #1
 800b244:	54ca      	strb	r2, [r1, r3]
 800b246:	2336      	movs	r3, #54	; 0x36
 800b248:	3201      	adds	r2, #1
 800b24a:	33ff      	adds	r3, #255	; 0xff
 800b24c:	54ca      	strb	r2, [r1, r3]
 800b24e:	3311      	adds	r3, #17
 800b250:	3201      	adds	r2, #1
 800b252:	54ca      	strb	r2, [r1, r3]
 800b254:	2358      	movs	r3, #88	; 0x58
 800b256:	3201      	adds	r2, #1
 800b258:	33ff      	adds	r3, #255	; 0xff
 800b25a:	54ca      	strb	r2, [r1, r3]
 800b25c:	3311      	adds	r3, #17
 800b25e:	3201      	adds	r2, #1
 800b260:	54ca      	strb	r2, [r1, r3]
 800b262:	237a      	movs	r3, #122	; 0x7a
 800b264:	3201      	adds	r2, #1
 800b266:	33ff      	adds	r3, #255	; 0xff
 800b268:	54ca      	strb	r2, [r1, r3]
 800b26a:	3311      	adds	r3, #17
 800b26c:	3201      	adds	r2, #1
    };


    if( nvm == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b26e:	0028      	movs	r0, r5
    SecureElementNvmData_t seNvmInit =
 800b270:	54ca      	strb	r2, [r1, r3]
    if( nvm == NULL )
 800b272:	2e00      	cmp	r6, #0
 800b274:	d00a      	beq.n	800b28c <SecureElementInit+0x118>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b276:	4c07      	ldr	r4, [pc, #28]	; (800b294 <SecureElementInit+0x120>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b278:	3215      	adds	r2, #21
 800b27a:	0030      	movs	r0, r6
 800b27c:	32ff      	adds	r2, #255	; 0xff
    SeNvm = nvm;
 800b27e:	6026      	str	r6, [r4, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b280:	f7f9 fb0b 	bl	800489a <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	f7ff ff33 	bl	800b0f0 <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
 800b28a:	2000      	movs	r0, #0
}
 800b28c:	b068      	add	sp, #416	; 0x1a0
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	0801963c 	.word	0x0801963c
 800b294:	200012ac 	.word	0x200012ac

0800b298 <SecureElementComputeAesCmac>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800b298:	b513      	push	{r0, r1, r4, lr}
 800b29a:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b29c:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b29e:	2b7e      	cmp	r3, #126	; 0x7e
 800b2a0:	d804      	bhi.n	800b2ac <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b2a2:	9804      	ldr	r0, [sp, #16]
 800b2a4:	9000      	str	r0, [sp, #0]
 800b2a6:	0020      	movs	r0, r4
 800b2a8:	f7ff ff26 	bl	800b0f8 <ComputeCmac>
}
 800b2ac:	bd16      	pop	{r1, r2, r4, pc}

0800b2ae <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b2ae:	b530      	push	{r4, r5, lr}
 800b2b0:	0004      	movs	r4, r0
 800b2b2:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2b4:	2002      	movs	r0, #2
{
 800b2b6:	b085      	sub	sp, #20
    if( buffer == NULL )
 800b2b8:	2c00      	cmp	r4, #0
 800b2ba:	d00e      	beq.n	800b2da <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
    uint32_t              compCmac = 0;
 800b2bc:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b2be:	aa03      	add	r2, sp, #12
 800b2c0:	9200      	str	r2, [sp, #0]
 800b2c2:	000a      	movs	r2, r1
 800b2c4:	0021      	movs	r1, r4
    uint32_t              compCmac = 0;
 800b2c6:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b2c8:	f7ff ff16 	bl	800b0f8 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d104      	bne.n	800b2da <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	1b58      	subs	r0, r3, r5
 800b2d4:	1e43      	subs	r3, r0, #1
 800b2d6:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 800b2d8:	b2c0      	uxtb	r0, r0
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 800b2da:	b005      	add	sp, #20
 800b2dc:	bd30      	pop	{r4, r5, pc}
	...

0800b2e0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	b0c1      	sub	sp, #260	; 0x104
 800b2e4:	0005      	movs	r5, r0
 800b2e6:	000c      	movs	r4, r1
 800b2e8:	001e      	movs	r6, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2ea:	2002      	movs	r0, #2
{
 800b2ec:	9201      	str	r2, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	d029      	beq.n	800b346 <SecureElementAesEncrypt+0x66>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d027      	beq.n	800b346 <SecureElementAesEncrypt+0x66>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b2f6:	230f      	movs	r3, #15
 800b2f8:	000f      	movs	r7, r1
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b2fa:	3003      	adds	r0, #3
    if( ( size % 16 ) != 0 )
 800b2fc:	401f      	ands	r7, r3
 800b2fe:	4219      	tst	r1, r3
 800b300:	d121      	bne.n	800b346 <SecureElementAesEncrypt+0x66>
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b302:	22f0      	movs	r2, #240	; 0xf0
 800b304:	0039      	movs	r1, r7
 800b306:	a803      	add	r0, sp, #12
 800b308:	f7f9 fadc 	bl	80048c4 <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b30c:	4b13      	ldr	r3, [pc, #76]	; (800b35c <SecureElementAesEncrypt+0x7c>)
 800b30e:	003a      	movs	r2, r7
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	0007      	movs	r7, r0
 800b314:	3714      	adds	r7, #20
 800b316:	2311      	movs	r3, #17
 800b318:	4353      	muls	r3, r2
 800b31a:	5cf9      	ldrb	r1, [r7, r3]
 800b31c:	468c      	mov	ip, r1
 800b31e:	9901      	ldr	r1, [sp, #4]
 800b320:	458c      	cmp	ip, r1
 800b322:	d10c      	bne.n	800b33e <SecureElementAesEncrypt+0x5e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
 800b324:	3315      	adds	r3, #21
 800b326:	2110      	movs	r1, #16
 800b328:	18c0      	adds	r0, r0, r3
 800b32a:	aa03      	add	r2, sp, #12
 800b32c:	f7ff fbf2 	bl	800ab14 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 800b330:	0027      	movs	r7, r4
 800b332:	1be0      	subs	r0, r4, r7
 800b334:	b2c0      	uxtb	r0, r0
 800b336:	2f00      	cmp	r7, #0
 800b338:	d107      	bne.n	800b34a <SecureElementAesEncrypt+0x6a>
 800b33a:	0038      	movs	r0, r7
 800b33c:	e003      	b.n	800b346 <SecureElementAesEncrypt+0x66>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b33e:	3201      	adds	r2, #1
 800b340:	2a17      	cmp	r2, #23
 800b342:	d1e8      	bne.n	800b316 <SecureElementAesEncrypt+0x36>
 800b344:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
 800b346:	b041      	add	sp, #260	; 0x104
 800b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b34a:	1831      	adds	r1, r6, r0
 800b34c:	aa03      	add	r2, sp, #12
 800b34e:	1828      	adds	r0, r5, r0
            size  = size - 16;
 800b350:	3f10      	subs	r7, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b352:	f7ff fc67 	bl	800ac24 <aes_encrypt>
            size  = size - 16;
 800b356:	b2bf      	uxth	r7, r7
 800b358:	e7eb      	b.n	800b332 <SecureElementAesEncrypt+0x52>
 800b35a:	46c0      	nop			; (mov r8, r8)
 800b35c:	200012ac 	.word	0x200012ac

0800b360 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b362:	4e1c      	ldr	r6, [pc, #112]	; (800b3d4 <SecureElementSetKey.part.0+0x74>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800b364:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b366:	6832      	ldr	r2, [r6, #0]
 800b368:	2300      	movs	r3, #0
 800b36a:	0017      	movs	r7, r2
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800b36c:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b36e:	3714      	adds	r7, #20
 800b370:	2411      	movs	r4, #17
 800b372:	435c      	muls	r4, r3
 800b374:	5d39      	ldrb	r1, [r7, r4]
 800b376:	4281      	cmp	r1, r0
 800b378:	d127      	bne.n	800b3ca <SecureElementSetKey.part.0+0x6a>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800b37a:	0003      	movs	r3, r0
 800b37c:	3b80      	subs	r3, #128	; 0x80
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	3415      	adds	r4, #21
 800b382:	2b09      	cmp	r3, #9
 800b384:	d81a      	bhi.n	800b3bc <SecureElementSetKey.part.0+0x5c>
 800b386:	4914      	ldr	r1, [pc, #80]	; (800b3d8 <SecureElementSetKey.part.0+0x78>)
 800b388:	40d9      	lsrs	r1, r3
 800b38a:	000b      	movs	r3, r1
 800b38c:	2101      	movs	r1, #1
 800b38e:	4399      	bics	r1, r3
 800b390:	d114      	bne.n	800b3bc <SecureElementSetKey.part.0+0x5c>
                uint8_t               decryptedKey[16] = { 0 };
 800b392:	220c      	movs	r2, #12
 800b394:	a801      	add	r0, sp, #4
 800b396:	9100      	str	r1, [sp, #0]
 800b398:	f00a fde3 	bl	8015f62 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b39c:	227f      	movs	r2, #127	; 0x7f
 800b39e:	2110      	movs	r1, #16
 800b3a0:	0028      	movs	r0, r5
 800b3a2:	466b      	mov	r3, sp
 800b3a4:	f7ff ff9c 	bl	800b2e0 <SecureElementAesEncrypt>
 800b3a8:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b3aa:	6830      	ldr	r0, [r6, #0]
 800b3ac:	2210      	movs	r2, #16
 800b3ae:	4669      	mov	r1, sp
 800b3b0:	1900      	adds	r0, r0, r4
 800b3b2:	f7f9 fa72 	bl	800489a <memcpy1>
}
 800b3b6:	0028      	movs	r0, r5
 800b3b8:	b005      	add	sp, #20
 800b3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b3bc:	0029      	movs	r1, r5
 800b3be:	1910      	adds	r0, r2, r4
 800b3c0:	2210      	movs	r2, #16
 800b3c2:	f7f9 fa6a 	bl	800489a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b3c6:	2500      	movs	r5, #0
 800b3c8:	e7f5      	b.n	800b3b6 <SecureElementSetKey.part.0+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	2b17      	cmp	r3, #23
 800b3ce:	d1cf      	bne.n	800b370 <SecureElementSetKey.part.0+0x10>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b3d0:	2503      	movs	r5, #3
 800b3d2:	e7f0      	b.n	800b3b6 <SecureElementSetKey.part.0+0x56>
 800b3d4:	200012ac 	.word	0x200012ac
 800b3d8:	00000249 	.word	0x00000249

0800b3dc <SecureElementSetKey>:
{
 800b3dc:	0003      	movs	r3, r0
 800b3de:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 800b3e0:	2002      	movs	r0, #2
    if( key == NULL )
 800b3e2:	2900      	cmp	r1, #0
 800b3e4:	d002      	beq.n	800b3ec <SecureElementSetKey+0x10>
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	f7ff ffba 	bl	800b360 <SecureElementSetKey.part.0>
}
 800b3ec:	bd10      	pop	{r4, pc}

0800b3ee <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b3ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b3f0:	0005      	movs	r5, r0
 800b3f2:	000e      	movs	r6, r1
 800b3f4:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b3f6:	2002      	movs	r0, #2
    if( input == NULL )
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	d016      	beq.n	800b42a <SecureElementDeriveAndStoreKey+0x3c>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
    uint8_t               key[16] = { 0 };
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	220c      	movs	r2, #12
 800b400:	a801      	add	r0, sp, #4
 800b402:	9100      	str	r1, [sp, #0]
 800b404:	f00a fdad 	bl	8015f62 <memset>

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b408:	2c7f      	cmp	r4, #127	; 0x7f
 800b40a:	d102      	bne.n	800b412 <SecureElementDeriveAndStoreKey+0x24>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b40c:	2003      	movs	r0, #3
        if( rootKeyID != MC_ROOT_KEY )
 800b40e:	2e08      	cmp	r6, #8
 800b410:	d10b      	bne.n	800b42a <SecureElementDeriveAndStoreKey+0x3c>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b412:	466b      	mov	r3, sp
 800b414:	0032      	movs	r2, r6
 800b416:	2110      	movs	r1, #16
 800b418:	0028      	movs	r0, r5
 800b41a:	f7ff ff61 	bl	800b2e0 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b41e:	2800      	cmp	r0, #0
 800b420:	d103      	bne.n	800b42a <SecureElementDeriveAndStoreKey+0x3c>
    if( key == NULL )
 800b422:	4669      	mov	r1, sp
 800b424:	0020      	movs	r0, r4
 800b426:	f7ff ff9b 	bl	800b360 <SecureElementSetKey.part.0>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800b42a:	b004      	add	sp, #16
 800b42c:	bd70      	pop	{r4, r5, r6, pc}

0800b42e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b42e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b430:	001c      	movs	r4, r3
 800b432:	ab08      	add	r3, sp, #32
 800b434:	781f      	ldrb	r7, [r3, #0]
 800b436:	9d09      	ldr	r5, [sp, #36]	; 0x24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b438:	2302      	movs	r3, #2
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d03c      	beq.n	800b4b8 <SecureElementProcessJoinAccept+0x8a>
 800b43e:	2d00      	cmp	r5, #0
 800b440:	d03a      	beq.n	800b4b8 <SecureElementProcessJoinAccept+0x8a>
 800b442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b444:	2a00      	cmp	r2, #0
 800b446:	d037      	beq.n	800b4b8 <SecureElementProcessJoinAccept+0x8a>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b448:	3303      	adds	r3, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b44a:	2f21      	cmp	r7, #33	; 0x21
 800b44c:	d834      	bhi.n	800b4b8 <SecureElementProcessJoinAccept+0x8a>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b44e:	3b04      	subs	r3, #4
 800b450:	9301      	str	r3, [sp, #4]

    if( joinReqType != JOIN_REQ )
 800b452:	28ff      	cmp	r0, #255	; 0xff
 800b454:	d001      	beq.n	800b45a <SecureElementProcessJoinAccept+0x2c>
    {
        encKeyID = J_S_ENC_KEY;
 800b456:	3302      	adds	r3, #2
 800b458:	9301      	str	r3, [sp, #4]
    }

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b45a:	b2be      	uxth	r6, r7
 800b45c:	0032      	movs	r2, r6
 800b45e:	0021      	movs	r1, r4
 800b460:	0028      	movs	r0, r5
 800b462:	f7f9 fa1a 	bl	800489a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b466:	1e71      	subs	r1, r6, #1
 800b468:	1c6b      	adds	r3, r5, #1
 800b46a:	9a01      	ldr	r2, [sp, #4]
 800b46c:	b289      	uxth	r1, r1
 800b46e:	1c60      	adds	r0, r4, #1
 800b470:	f7ff ff36 	bl	800b2e0 <SecureElementAesEncrypt>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b474:	2307      	movs	r3, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b476:	2800      	cmp	r0, #0
 800b478:	d11e      	bne.n	800b4b8 <SecureElementProcessJoinAccept+0x8a>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b47a:	7aea      	ldrb	r2, [r5, #11]
 800b47c:	40da      	lsrs	r2, r3
 800b47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b480:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b482:	2304      	movs	r3, #4
    if( *versionMinor == 0 )
 800b484:	2a00      	cmp	r2, #0
 800b486:	d117      	bne.n	800b4b8 <SecureElementProcessJoinAccept+0x8a>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b488:	19eb      	adds	r3, r5, r7
 800b48a:	1e9a      	subs	r2, r3, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b48c:	1e59      	subs	r1, r3, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b48e:	7812      	ldrb	r2, [r2, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b490:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b492:	0412      	lsls	r2, r2, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b494:	0609      	lsls	r1, r1, #24
 800b496:	430a      	orrs	r2, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b498:	1f19      	subs	r1, r3, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b49a:	3b03      	subs	r3, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b49c:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	021b      	lsls	r3, r3, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b4a4:	1f31      	subs	r1, r6, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b4a6:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b4a8:	0028      	movs	r0, r5
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	b289      	uxth	r1, r1
 800b4ae:	f7ff fefe 	bl	800b2ae <SecureElementVerifyAesCmac>
 800b4b2:	1e43      	subs	r3, r0, #1
 800b4b4:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 800b4b6:	b2c3      	uxtb	r3, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b4bc <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800b4bc:	0001      	movs	r1, r0
 800b4be:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b4c0:	2002      	movs	r0, #2
    if( devEui == NULL )
 800b4c2:	2900      	cmp	r1, #0
 800b4c4:	d005      	beq.n	800b4d2 <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800b4c6:	4b03      	ldr	r3, [pc, #12]	; (800b4d4 <SecureElementSetDevEui+0x18>)
 800b4c8:	2208      	movs	r2, #8
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	f7f9 f9e5 	bl	800489a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b4d0:	2000      	movs	r0, #0
}
 800b4d2:	bd10      	pop	{r4, pc}
 800b4d4:	200012ac 	.word	0x200012ac

0800b4d8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 800b4d8:	4b01      	ldr	r3, [pc, #4]	; (800b4e0 <SecureElementGetDevEui+0x8>)
 800b4da:	6818      	ldr	r0, [r3, #0]
}
 800b4dc:	4770      	bx	lr
 800b4de:	46c0      	nop			; (mov r8, r8)
 800b4e0:	200012ac 	.word	0x200012ac

0800b4e4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800b4e4:	0001      	movs	r1, r0
 800b4e6:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b4e8:	2002      	movs	r0, #2
    if( joinEui == NULL )
 800b4ea:	2900      	cmp	r1, #0
 800b4ec:	d006      	beq.n	800b4fc <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800b4ee:	4b04      	ldr	r3, [pc, #16]	; (800b500 <SecureElementSetJoinEui+0x1c>)
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	3008      	adds	r0, #8
 800b4f6:	f7f9 f9d0 	bl	800489a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b4fa:	2000      	movs	r0, #0
}
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	46c0      	nop			; (mov r8, r8)
 800b500:	200012ac 	.word	0x200012ac

0800b504 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800b504:	4b01      	ldr	r3, [pc, #4]	; (800b50c <SecureElementGetJoinEui+0x8>)
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	3008      	adds	r0, #8
}
 800b50a:	4770      	bx	lr
 800b50c:	200012ac 	.word	0x200012ac

0800b510 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
 800b510:	0001      	movs	r1, r0
 800b512:	b510      	push	{r4, lr}
    if( pin == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b514:	2002      	movs	r0, #2
    if( pin == NULL )
 800b516:	2900      	cmp	r1, #0
 800b518:	d006      	beq.n	800b528 <SecureElementSetPin+0x18>
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <SecureElementSetPin+0x1c>)
 800b51c:	2204      	movs	r2, #4
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	3010      	adds	r0, #16
 800b522:	f7f9 f9ba 	bl	800489a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b526:	2000      	movs	r0, #0
}
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	46c0      	nop			; (mov r8, r8)
 800b52c:	200012ac 	.word	0x200012ac

0800b530 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
 800b530:	4b01      	ldr	r3, [pc, #4]	; (800b538 <SecureElementGetPin+0x8>)
 800b532:	6818      	ldr	r0, [r3, #0]
 800b534:	3010      	adds	r0, #16
}
 800b536:	4770      	bx	lr
 800b538:	200012ac 	.word	0x200012ac

0800b53c <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800b53c:	b510      	push	{r4, lr}
    DelayMsMcu( ms );
 800b53e:	f7f8 fc84 	bl	8003e4a <DelayMsMcu>
}
 800b542:	bd10      	pop	{r4, pc}

0800b544 <GpioInit>:
 * \author    Gregory Cristian ( Semtech )
 */
#include "gpio-board.h"

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800b544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b546:	ac06      	add	r4, sp, #24
 800b548:	7824      	ldrb	r4, [r4, #0]
    GpioMcuInit( obj, pin, mode, config, type, value );
 800b54a:	9d07      	ldr	r5, [sp, #28]
 800b54c:	9400      	str	r4, [sp, #0]
 800b54e:	9501      	str	r5, [sp, #4]
 800b550:	f7f8 fd38 	bl	8003fc4 <GpioMcuInit>
}
 800b554:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800b556 <GpioSetInterrupt>:
{
    GpioMcuSetContext( obj, context );
}

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800b556:	b510      	push	{r4, lr}
    GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800b558:	f7f8 fcac 	bl	8003eb4 <GpioMcuSetInterrupt>
}
 800b55c:	bd10      	pop	{r4, pc}

0800b55e <GpioWrite>:
{
    GpioMcuRemoveInterrupt( obj );
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800b55e:	b510      	push	{r4, lr}
    GpioMcuWrite( obj, value );
 800b560:	f7f8 fd22 	bl	8003fa8 <GpioMcuWrite>
}
 800b564:	bd10      	pop	{r4, pc}

0800b566 <GpioRead>:
{
    GpioMcuToggle( obj );
}

uint32_t GpioRead( Gpio_t *obj )
{
 800b566:	b510      	push	{r4, lr}
    return GpioMcuRead( obj );
 800b568:	f7f8 fdaa 	bl	80040c0 <GpioMcuRead>
}
 800b56c:	bd10      	pop	{r4, pc}

0800b56e <NvmmWrite>:
#include "utilities.h"
#include "eeprom-board.h"
#include "nvmm.h"

uint16_t NvmmWrite( uint8_t* src, uint16_t size, uint16_t offset )
{
 800b56e:	0003      	movs	r3, r0
 800b570:	b510      	push	{r4, lr}
 800b572:	0010      	movs	r0, r2
 800b574:	000c      	movs	r4, r1
    if( EepromMcuWriteBuffer( offset, src, size ) == LMN_STATUS_OK )
 800b576:	000a      	movs	r2, r1
 800b578:	0019      	movs	r1, r3
 800b57a:	f7f8 fc6b 	bl	8003e54 <EepromMcuWriteBuffer>
 800b57e:	2801      	cmp	r0, #1
 800b580:	d000      	beq.n	800b584 <NvmmWrite+0x16>
    {
        return size;
    }
    return 0;
 800b582:	2400      	movs	r4, #0
}
 800b584:	0020      	movs	r0, r4
 800b586:	bd10      	pop	{r4, pc}

0800b588 <NvmmRead>:

uint16_t NvmmRead( uint8_t* dest, uint16_t size, uint16_t offset )
{
 800b588:	0003      	movs	r3, r0
 800b58a:	b510      	push	{r4, lr}
 800b58c:	0010      	movs	r0, r2
 800b58e:	000c      	movs	r4, r1
    if( EepromMcuReadBuffer( offset, dest, size ) == LMN_STATUS_OK )
 800b590:	000a      	movs	r2, r1
 800b592:	0019      	movs	r1, r3
 800b594:	f7f8 fc82 	bl	8003e9c <EepromMcuReadBuffer>
 800b598:	2801      	cmp	r0, #1
 800b59a:	d000      	beq.n	800b59e <NvmmRead+0x16>
    {
        return size;
    }
    return 0;
 800b59c:	2400      	movs	r4, #0
}
 800b59e:	0020      	movs	r0, r4
 800b5a0:	bd10      	pop	{r4, pc}

0800b5a2 <NvmmCrc32Check>:

bool NvmmCrc32Check( uint16_t size, uint16_t offset )
{
 800b5a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t data = 0;
 800b5a4:	2400      	movs	r4, #0
{
 800b5a6:	b085      	sub	sp, #20
    uint32_t calculatedCrc32 = 0;
    uint32_t readCrc32 = 0;

    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b5a8:	1f02      	subs	r2, r0, #4
    uint8_t data = 0;
 800b5aa:	ab02      	add	r3, sp, #8
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b5ac:	188a      	adds	r2, r1, r2
{
 800b5ae:	9001      	str	r0, [sp, #4]
 800b5b0:	000e      	movs	r6, r1
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b5b2:	b292      	uxth	r2, r2
 800b5b4:	2104      	movs	r1, #4
 800b5b6:	a803      	add	r0, sp, #12
    uint8_t data = 0;
 800b5b8:	1cdf      	adds	r7, r3, #3
    uint32_t readCrc32 = 0;
 800b5ba:	9403      	str	r4, [sp, #12]
    uint8_t data = 0;
 800b5bc:	703c      	strb	r4, [r7, #0]
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b5be:	f7ff ffe3 	bl	800b588 <NvmmRead>
 800b5c2:	0003      	movs	r3, r0
        if( calculatedCrc32 != readCrc32 )
        {
            return false;
        }
    }
    return true;
 800b5c4:	2001      	movs	r0, #1
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d10e      	bne.n	800b5e8 <NvmmCrc32Check+0x46>
        calculatedCrc32 = Crc32Init( );
 800b5ca:	f7f9 f9a1 	bl	8004910 <Crc32Init>
 800b5ce:	0005      	movs	r5, r0
        for( uint16_t i = 0; i < ( size - sizeof( readCrc32 ) ); i++ )
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	3b04      	subs	r3, #4
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	d309      	bcc.n	800b5ec <NvmmCrc32Check+0x4a>
        calculatedCrc32 = Crc32Finalize( calculatedCrc32 );
 800b5d8:	0028      	movs	r0, r5
 800b5da:	f7f9 f9b9 	bl	8004950 <Crc32Finalize>
        if( calculatedCrc32 != readCrc32 )
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	1a18      	subs	r0, r3, r0
 800b5e2:	4243      	negs	r3, r0
 800b5e4:	4158      	adcs	r0, r3
 800b5e6:	b2c0      	uxtb	r0, r0
}
 800b5e8:	b005      	add	sp, #20
 800b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( NvmmRead( &data, 1, offset + i ) != 1 )
 800b5ec:	19a2      	adds	r2, r4, r6
 800b5ee:	b292      	uxth	r2, r2
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	0038      	movs	r0, r7
 800b5f4:	f7ff ffc8 	bl	800b588 <NvmmRead>
 800b5f8:	0002      	movs	r2, r0
 800b5fa:	2801      	cmp	r0, #1
 800b5fc:	d107      	bne.n	800b60e <NvmmCrc32Check+0x6c>
            calculatedCrc32 = Crc32Update( calculatedCrc32, &data, 1 );
 800b5fe:	0028      	movs	r0, r5
 800b600:	0039      	movs	r1, r7
 800b602:	f7f9 f989 	bl	8004918 <Crc32Update>
        for( uint16_t i = 0; i < ( size - sizeof( readCrc32 ) ); i++ )
 800b606:	3401      	adds	r4, #1
            calculatedCrc32 = Crc32Update( calculatedCrc32, &data, 1 );
 800b608:	0005      	movs	r5, r0
        for( uint16_t i = 0; i < ( size - sizeof( readCrc32 ) ); i++ )
 800b60a:	b2a4      	uxth	r4, r4
 800b60c:	e7e0      	b.n	800b5d0 <NvmmCrc32Check+0x2e>
                return false;
 800b60e:	2000      	movs	r0, #0
 800b610:	e7ea      	b.n	800b5e8 <NvmmCrc32Check+0x46>
	...

0800b614 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b614:	b082      	sub	sp, #8
 800b616:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 800b618:	18c9      	adds	r1, r1, r3
{
 800b61a:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b61c:	ab05      	add	r3, sp, #20
 800b61e:	889c      	ldrh	r4, [r3, #4]
 800b620:	18a2      	adds	r2, r4, r2
    if( c.SubSeconds >= 1000 )
 800b622:	24fa      	movs	r4, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b624:	b293      	uxth	r3, r2
 800b626:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 800b628:	00a4      	lsls	r4, r4, #2
 800b62a:	42a2      	cmp	r2, r4
 800b62c:	db03      	blt.n	800b636 <SysTimeAdd+0x22>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 800b62e:	4a05      	ldr	r2, [pc, #20]	; (800b644 <SysTimeAdd+0x30>)
        c.Seconds++;
 800b630:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 800b632:	189b      	adds	r3, r3, r2
 800b634:	b21a      	sxth	r2, r3
    }
    return c;
 800b636:	6001      	str	r1, [r0, #0]
 800b638:	8082      	strh	r2, [r0, #4]
}
 800b63a:	bc16      	pop	{r1, r2, r4}
 800b63c:	bc08      	pop	{r3}
 800b63e:	b002      	add	sp, #8
 800b640:	4718      	bx	r3
 800b642:	46c0      	nop			; (mov r8, r8)
 800b644:	fffffc18 	.word	0xfffffc18

0800b648 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800b648:	b082      	sub	sp, #8
 800b64a:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 800b64c:	1ac9      	subs	r1, r1, r3
{
 800b64e:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b650:	ab05      	add	r3, sp, #20
 800b652:	889b      	ldrh	r3, [r3, #4]
 800b654:	1ad2      	subs	r2, r2, r3
 800b656:	b293      	uxth	r3, r2
 800b658:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800b65a:	0412      	lsls	r2, r2, #16
 800b65c:	d504      	bpl.n	800b668 <SysTimeSub+0x20>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 800b65e:	22fa      	movs	r2, #250	; 0xfa
 800b660:	0092      	lsls	r2, r2, #2
 800b662:	189b      	adds	r3, r3, r2
        c.Seconds--;
 800b664:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 800b666:	b21c      	sxth	r4, r3
    }
    return c;
 800b668:	6001      	str	r1, [r0, #0]
 800b66a:	8084      	strh	r4, [r0, #4]
}
 800b66c:	bc16      	pop	{r1, r2, r4}
 800b66e:	bc08      	pop	{r3}
 800b670:	b002      	add	sp, #8
 800b672:	4718      	bx	r3

0800b674 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800b674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b676:	2300      	movs	r3, #0
{
 800b678:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b67a:	ac02      	add	r4, sp, #8

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b67c:	a803      	add	r0, sp, #12
{
 800b67e:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b680:	9302      	str	r3, [sp, #8]
 800b682:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b684:	f7f8 fed0 	bl	8004428 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 800b688:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b68a:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 800b68c:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b68e:	466b      	mov	r3, sp
 800b690:	88a2      	ldrh	r2, [r4, #4]
 800b692:	889b      	ldrh	r3, [r3, #4]
 800b694:	1a9b      	subs	r3, r3, r2
 800b696:	b29a      	uxth	r2, r3
 800b698:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	d504      	bpl.n	800b6a8 <SysTimeSet+0x34>
        c.SubSeconds += 1000;
 800b69e:	23fa      	movs	r3, #250	; 0xfa
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	18d2      	adds	r2, r2, r3
        c.Seconds--;
 800b6a4:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 800b6a6:	b211      	sxth	r1, r2

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 800b6a8:	f7f8 fef2 	bl	8004490 <RtcBkupWrite>
}
 800b6ac:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

0800b6b0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b6b0:	2300      	movs	r3, #0
{
 800b6b2:	b530      	push	{r4, r5, lr}
 800b6b4:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b6b6:	ad02      	add	r5, sp, #8
{
 800b6b8:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b6ba:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b6bc:	9302      	str	r3, [sp, #8]
 800b6be:	80ab      	strh	r3, [r5, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b6c0:	f7f8 feb2 	bl	8004428 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
 800b6c4:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b6c6:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
 800b6c8:	4668      	mov	r0, sp
 800b6ca:	f7f8 fef1 	bl	80044b0 <RtcBkupRead>
    if( c.SubSeconds >= 1000 )
 800b6ce:	20fa      	movs	r0, #250	; 0xfa
    c.Seconds = a.Seconds + b.Seconds;
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b6d4:	9901      	ldr	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 800b6d6:	189a      	adds	r2, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b6d8:	88ab      	ldrh	r3, [r5, #4]
    if( c.SubSeconds >= 1000 )
 800b6da:	0080      	lsls	r0, r0, #2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b6dc:	18cb      	adds	r3, r1, r3
 800b6de:	b299      	uxth	r1, r3
 800b6e0:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 800b6e2:	4283      	cmp	r3, r0
 800b6e4:	db03      	blt.n	800b6ee <SysTimeGet+0x3e>
        c.SubSeconds -= 1000;
 800b6e6:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <SysTimeGet+0x48>)
        c.Seconds++;
 800b6e8:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 800b6ea:	18c9      	adds	r1, r1, r3
 800b6ec:	b20b      	sxth	r3, r1
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 800b6ee:	0020      	movs	r0, r4
    return sysTime;
 800b6f0:	6022      	str	r2, [r4, #0]
 800b6f2:	80a3      	strh	r3, [r4, #4]
}
 800b6f4:	b005      	add	sp, #20
 800b6f6:	bd30      	pop	{r4, r5, pc}
 800b6f8:	fffffc18 	.word	0xfffffc18

0800b6fc <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 800b6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b6fe:	2300      	movs	r3, #0
 800b700:	466d      	mov	r5, sp
{
 800b702:	0004      	movs	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b704:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	80ab      	strh	r3, [r5, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b70a:	f7f8 fe8d 	bl	8004428 <RtcGetCalendarTime>

    return calendarTime;
 800b70e:	0023      	movs	r3, r4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b710:	9000      	str	r0, [sp, #0]
    return calendarTime;
 800b712:	cd06      	ldmia	r5!, {r1, r2}
 800b714:	c306      	stmia	r3!, {r1, r2}
}
 800b716:	0020      	movs	r0, r4
 800b718:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b71a <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800b71a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b71c:	9000      	str	r0, [sp, #0]
 800b71e:	9101      	str	r1, [sp, #4]
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 800b720:	a802      	add	r0, sp, #8
 800b722:	a903      	add	r1, sp, #12
 800b724:	f7f8 fec4 	bl	80044b0 <RtcBkupRead>
    c.Seconds = a.Seconds - b.Seconds;
 800b728:	9a02      	ldr	r2, [sp, #8]
 800b72a:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b72c:	9903      	ldr	r1, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 800b72e:	1a9b      	subs	r3, r3, r2
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b730:	466a      	mov	r2, sp
 800b732:	8892      	ldrh	r2, [r2, #4]
 800b734:	1a52      	subs	r2, r2, r1
 800b736:	b291      	uxth	r1, r2
 800b738:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800b73a:	0412      	lsls	r2, r2, #16
 800b73c:	d504      	bpl.n	800b748 <SysTimeToMs+0x2e>
        c.SubSeconds += 1000;
 800b73e:	22fa      	movs	r2, #250	; 0xfa
 800b740:	0092      	lsls	r2, r2, #2
 800b742:	1889      	adds	r1, r1, r2
        c.Seconds--;
 800b744:	3b01      	subs	r3, #1
        c.SubSeconds += 1000;
 800b746:	b20c      	sxth	r4, r1

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800b748:	20fa      	movs	r0, #250	; 0xfa
 800b74a:	0080      	lsls	r0, r0, #2
 800b74c:	4358      	muls	r0, r3
 800b74e:	1900      	adds	r0, r0, r4
}
 800b750:	b004      	add	sp, #16
 800b752:	bd10      	pop	{r4, pc}

0800b754 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800b754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b756:	000e      	movs	r6, r1
    uint32_t seconds = timeMs / 1000;
 800b758:	21fa      	movs	r1, #250	; 0xfa
{
 800b75a:	0004      	movs	r4, r0
    uint32_t seconds = timeMs / 1000;
 800b75c:	0089      	lsls	r1, r1, #2
 800b75e:	0030      	movs	r0, r6
 800b760:	f7f4 fd02 	bl	8000168 <__udivsi3>
 800b764:	21fa      	movs	r1, #250	; 0xfa
 800b766:	0005      	movs	r5, r0
 800b768:	9000      	str	r0, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
 800b76a:	0089      	lsls	r1, r1, #2
 800b76c:	0030      	movs	r0, r6
 800b76e:	f7f4 fd81 	bl	8000274 <__aeabi_uidivmod>
 800b772:	000e      	movs	r6, r1
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
 800b774:	4668      	mov	r0, sp
    uint32_t subSeconds = timeMs - seconds * 1000;
 800b776:	9101      	str	r1, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
 800b778:	a901      	add	r1, sp, #4
 800b77a:	f7f8 fe99 	bl	80044b0 <RtcBkupRead>
    if( c.SubSeconds >= 1000 )
 800b77e:	20fa      	movs	r0, #250	; 0xfa
    c.Seconds = a.Seconds + b.Seconds;
 800b780:	9b00      	ldr	r3, [sp, #0]
    if( c.SubSeconds >= 1000 )
 800b782:	0080      	lsls	r0, r0, #2
    c.Seconds = a.Seconds + b.Seconds;
 800b784:	18ed      	adds	r5, r5, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b786:	9b01      	ldr	r3, [sp, #4]
 800b788:	199e      	adds	r6, r3, r6
 800b78a:	b231      	sxth	r1, r6
 800b78c:	b2b2      	uxth	r2, r6
    if( c.SubSeconds >= 1000 )
 800b78e:	4281      	cmp	r1, r0
 800b790:	db03      	blt.n	800b79a <SysTimeFromMs+0x46>
        c.SubSeconds -= 1000;
 800b792:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <SysTimeFromMs+0x50>)
        c.Seconds++;
 800b794:	3501      	adds	r5, #1
        c.SubSeconds -= 1000;
 800b796:	18d2      	adds	r2, r2, r3
 800b798:	b211      	sxth	r1, r2

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
 800b79a:	0020      	movs	r0, r4
    return c;
 800b79c:	6025      	str	r5, [r4, #0]
 800b79e:	80a1      	strh	r1, [r4, #4]
}
 800b7a0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	fffffc18 	.word	0xfffffc18

0800b7a8 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	0004      	movs	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800b7ac:	f7f8 fd64 	bl	8004278 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	7263      	strb	r3, [r4, #9]
    int32_t minTicks= RtcGetMinimumTimeout( );
 800b7b4:	0005      	movs	r5, r0

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800b7b6:	6826      	ldr	r6, [r4, #0]
 800b7b8:	f7f8 fe1a 	bl	80043f0 <RtcGetTimerElapsedTime>
 800b7bc:	1828      	adds	r0, r5, r0
 800b7be:	4286      	cmp	r6, r0
 800b7c0:	d203      	bcs.n	800b7ca <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800b7c2:	f7f8 fe15 	bl	80043f0 <RtcGetTimerElapsedTime>
 800b7c6:	182d      	adds	r5, r5, r0
 800b7c8:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 800b7ca:	6820      	ldr	r0, [r4, #0]
 800b7cc:	f7f8 fe1c 	bl	8004408 <RtcSetAlarm>
}
 800b7d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7d4 <TimerInsertNewHeadTimer>:
    TimerEvent_t* cur = TimerListHead;
 800b7d4:	4a05      	ldr	r2, [pc, #20]	; (800b7ec <TimerInsertNewHeadTimer+0x18>)
{
 800b7d6:	b510      	push	{r4, lr}
    TimerEvent_t* cur = TimerListHead;
 800b7d8:	6813      	ldr	r3, [r2, #0]
    if( cur != NULL )
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <TimerInsertNewHeadTimer+0xe>
        cur->IsNext2Expire = false;
 800b7de:	2100      	movs	r1, #0
 800b7e0:	7259      	strb	r1, [r3, #9]
    obj->Next = cur;
 800b7e2:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 800b7e4:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
 800b7e6:	f7ff ffdf 	bl	800b7a8 <TimerSetTimeout>
}
 800b7ea:	bd10      	pop	{r4, pc}
 800b7ec:	200012b0 	.word	0x200012b0

0800b7f0 <TimerInit>:
    obj->Timestamp = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800b7f4:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800b7f6:	8103      	strh	r3, [r0, #8]
    obj->Callback = callback;
 800b7f8:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800b7fa:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800b7fc:	6143      	str	r3, [r0, #20]
}
 800b7fe:	4770      	bx	lr

0800b800 <TimerStart>:
{
 800b800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b802:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800b804:	a801      	add	r0, sp, #4
 800b806:	f7f8 fb03 	bl	8003e10 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800b80a:	2c00      	cmp	r4, #0
 800b80c:	d00f      	beq.n	800b82e <TimerStart+0x2e>
    TimerEvent_t* cur = TimerListHead;
 800b80e:	4d18      	ldr	r5, [pc, #96]	; (800b870 <TimerStart+0x70>)
 800b810:	682a      	ldr	r2, [r5, #0]
 800b812:	0013      	movs	r3, r2
    while( cur != NULL )
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10e      	bne.n	800b836 <TimerStart+0x36>
    obj->Timestamp = obj->ReloadValue;
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 800b81c:	2301      	movs	r3, #1
 800b81e:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 800b820:	2a00      	cmp	r2, #0
 800b822:	d10c      	bne.n	800b83e <TimerStart+0x3e>
        RtcSetTimerContext( );
 800b824:	f7f8 fcca 	bl	80041bc <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
 800b828:	0020      	movs	r0, r4
 800b82a:	f7ff ffd3 	bl	800b7d4 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
 800b82e:	a801      	add	r0, sp, #4
 800b830:	f7f8 faf3 	bl	8003e1a <BoardCriticalSectionEnd>
}
 800b834:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        if( cur == obj )
 800b836:	429c      	cmp	r4, r3
 800b838:	d0f9      	beq.n	800b82e <TimerStart+0x2e>
        cur = cur->Next;
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	e7ea      	b.n	800b814 <TimerStart+0x14>
        elapsedTime = RtcGetTimerElapsedTime( );
 800b83e:	f7f8 fdd7 	bl	80043f0 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	18c0      	adds	r0, r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
 800b846:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
 800b848:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	4290      	cmp	r0, r2
 800b84e:	d3eb      	bcc.n	800b828 <TimerStart+0x28>
    TimerEvent_t* next = TimerListHead->Next;
 800b850:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 800b852:	6959      	ldr	r1, [r3, #20]
 800b854:	2900      	cmp	r1, #0
 800b856:	d102      	bne.n	800b85e <TimerStart+0x5e>
    cur->Next = obj;
 800b858:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
 800b85a:	6161      	str	r1, [r4, #20]
 800b85c:	e7e7      	b.n	800b82e <TimerStart+0x2e>
        if( obj->Timestamp > next->Timestamp )
 800b85e:	6811      	ldr	r1, [r2, #0]
 800b860:	4288      	cmp	r0, r1
 800b862:	d902      	bls.n	800b86a <TimerStart+0x6a>
            next = next->Next;
 800b864:	0013      	movs	r3, r2
 800b866:	6952      	ldr	r2, [r2, #20]
 800b868:	e7f3      	b.n	800b852 <TimerStart+0x52>
            cur->Next = obj;
 800b86a:	615c      	str	r4, [r3, #20]
            obj->Next = next;
 800b86c:	6162      	str	r2, [r4, #20]
            return;
 800b86e:	e7de      	b.n	800b82e <TimerStart+0x2e>
 800b870:	200012b0 	.word	0x200012b0

0800b874 <TimerIrqHandler>:
{
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 800b876:	f7f8 fcf9 	bl	800426c <RtcGetTimerContext>
 800b87a:	0005      	movs	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 800b87c:	f7f8 fc9e 	bl	80041bc <RtcSetTimerContext>
    if( TimerListHead != NULL )
 800b880:	4c1a      	ldr	r4, [pc, #104]	; (800b8ec <TimerIrqHandler+0x78>)
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d015      	beq.n	800b8b4 <TimerIrqHandler+0x40>
    uint32_t deltaContext = now - old; // intentional wrap around
 800b888:	001a      	movs	r2, r3
 800b88a:	1b47      	subs	r7, r0, r5
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800b88c:	6952      	ldr	r2, [r2, #20]
 800b88e:	2a00      	cmp	r2, #0
 800b890:	d106      	bne.n	800b8a0 <TimerIrqHandler+0x2c>
        TimerListHead = TimerListHead->Next;
 800b892:	6959      	ldr	r1, [r3, #20]
        cur->IsStarted = false;
 800b894:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800b896:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 800b898:	6021      	str	r1, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 800b89a:	2a00      	cmp	r2, #0
 800b89c:	d108      	bne.n	800b8b0 <TimerIrqHandler+0x3c>
 800b89e:	e7fe      	b.n	800b89e <TimerIrqHandler+0x2a>
            if( next->Timestamp > deltaContext )
 800b8a0:	6811      	ldr	r1, [r2, #0]
                next->Timestamp = 0;
 800b8a2:	2600      	movs	r6, #0
            if( next->Timestamp > deltaContext )
 800b8a4:	42b9      	cmp	r1, r7
 800b8a6:	d901      	bls.n	800b8ac <TimerIrqHandler+0x38>
                next->Timestamp -= deltaContext;
 800b8a8:	1949      	adds	r1, r1, r5
 800b8aa:	1a0e      	subs	r6, r1, r0
 800b8ac:	6016      	str	r6, [r2, #0]
 800b8ae:	e7ed      	b.n	800b88c <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
 800b8b0:	6918      	ldr	r0, [r3, #16]
 800b8b2:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d103      	bne.n	800b8c2 <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800b8ba:	6820      	ldr	r0, [r4, #0]
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d10e      	bne.n	800b8de <TimerIrqHandler+0x6a>
}
 800b8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800b8c2:	681d      	ldr	r5, [r3, #0]
 800b8c4:	f7f8 fd94 	bl	80043f0 <RtcGetTimerElapsedTime>
 800b8c8:	4285      	cmp	r5, r0
 800b8ca:	d2f6      	bcs.n	800b8ba <TimerIrqHandler+0x46>
        cur = TimerListHead;
 800b8cc:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 800b8ce:	695a      	ldr	r2, [r3, #20]
 800b8d0:	6022      	str	r2, [r4, #0]
        cur->IsStarted = false;
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800b8d6:	68da      	ldr	r2, [r3, #12]
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	d1e9      	bne.n	800b8b0 <TimerIrqHandler+0x3c>
 800b8dc:	e7fe      	b.n	800b8dc <TimerIrqHandler+0x68>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800b8de:	7a43      	ldrb	r3, [r0, #9]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1ed      	bne.n	800b8c0 <TimerIrqHandler+0x4c>
        TimerSetTimeout( TimerListHead );
 800b8e4:	f7ff ff60 	bl	800b7a8 <TimerSetTimeout>
}
 800b8e8:	e7ea      	b.n	800b8c0 <TimerIrqHandler+0x4c>
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	200012b0 	.word	0x200012b0

0800b8f0 <TimerStop>:
{
 800b8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8f2:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800b8f4:	a801      	add	r0, sp, #4
 800b8f6:	f7f8 fa8b 	bl	8003e10 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800b8fa:	4d13      	ldr	r5, [pc, #76]	; (800b948 <TimerStop+0x58>)
 800b8fc:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <TimerStop+0x16>
 800b902:	2c00      	cmp	r4, #0
 800b904:	d103      	bne.n	800b90e <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800b906:	a801      	add	r0, sp, #4
 800b908:	f7f8 fa87 	bl	8003e1a <BoardCriticalSectionEnd>
}
 800b90c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    obj->IsStarted = false;
 800b90e:	2200      	movs	r2, #0
 800b910:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 800b912:	42a3      	cmp	r3, r4
 800b914:	d10f      	bne.n	800b936 <TimerStop+0x46>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800b916:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 800b918:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800b91a:	4291      	cmp	r1, r2
 800b91c:	d009      	beq.n	800b932 <TimerStop+0x42>
            TimerListHead->IsNext2Expire = false;
 800b91e:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 800b920:	4294      	cmp	r4, r2
 800b922:	d004      	beq.n	800b92e <TimerStop+0x3e>
                TimerSetTimeout( TimerListHead );
 800b924:	0020      	movs	r0, r4
                TimerListHead = TimerListHead->Next;
 800b926:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
 800b928:	f7ff ff3e 	bl	800b7a8 <TimerSetTimeout>
 800b92c:	e7eb      	b.n	800b906 <TimerStop+0x16>
                RtcStopAlarm( );
 800b92e:	f7f8 fcb7 	bl	80042a0 <RtcStopAlarm>
                TimerListHead = NULL;
 800b932:	602c      	str	r4, [r5, #0]
 800b934:	e7e7      	b.n	800b906 <TimerStop+0x16>
                cur = cur->Next;
 800b936:	001a      	movs	r2, r3
 800b938:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0e3      	beq.n	800b906 <TimerStop+0x16>
            if( cur == obj )
 800b93e:	429c      	cmp	r4, r3
 800b940:	d1f9      	bne.n	800b936 <TimerStop+0x46>
                if( cur->Next != NULL )
 800b942:	6963      	ldr	r3, [r4, #20]
 800b944:	6153      	str	r3, [r2, #20]
 800b946:	e7de      	b.n	800b906 <TimerStop+0x16>
 800b948:	200012b0 	.word	0x200012b0

0800b94c <TimerSetValue>:
{
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	0005      	movs	r5, r0
 800b950:	0008      	movs	r0, r1
    uint32_t ticks = RtcMs2Tick( value );
 800b952:	f7f8 fc93 	bl	800427c <RtcMs2Tick>
 800b956:	0004      	movs	r4, r0
    TimerStop( obj );
 800b958:	0028      	movs	r0, r5
 800b95a:	f7ff ffc9 	bl	800b8f0 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800b95e:	f7f8 fc8b 	bl	8004278 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800b962:	4284      	cmp	r4, r0
 800b964:	d200      	bcs.n	800b968 <TimerSetValue+0x1c>
 800b966:	0004      	movs	r4, r0
    obj->Timestamp = ticks;
 800b968:	602c      	str	r4, [r5, #0]
    obj->ReloadValue = ticks;
 800b96a:	606c      	str	r4, [r5, #4]
}
 800b96c:	bd70      	pop	{r4, r5, r6, pc}

0800b96e <TimerGetCurrentTime>:
{
 800b96e:	b510      	push	{r4, lr}
    uint32_t now = RtcGetTimerValue( );
 800b970:	f7f8 fd36 	bl	80043e0 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800b974:	f7f8 fc8a 	bl	800428c <RtcTick2Ms>
}
 800b978:	bd10      	pop	{r4, pc}

0800b97a <TimerGetElapsedTime>:
{
 800b97a:	b570      	push	{r4, r5, r6, lr}
 800b97c:	1e04      	subs	r4, r0, #0
    if ( past == 0 )
 800b97e:	d009      	beq.n	800b994 <TimerGetElapsedTime+0x1a>
    uint32_t nowInTicks = RtcGetTimerValue( );
 800b980:	f7f8 fd2e 	bl	80043e0 <RtcGetTimerValue>
 800b984:	0005      	movs	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800b986:	0020      	movs	r0, r4
 800b988:	f7f8 fc78 	bl	800427c <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800b98c:	1a28      	subs	r0, r5, r0
 800b98e:	f7f8 fc7d 	bl	800428c <RtcTick2Ms>
 800b992:	0004      	movs	r4, r0
}
 800b994:	0020      	movs	r0, r4
 800b996:	bd70      	pop	{r4, r5, r6, pc}

0800b998 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800b998:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 800b99a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d801      	bhi.n	800b9a4 <_GetAvailWriteSpace+0xc>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800b9a0:	6880      	ldr	r0, [r0, #8]
 800b9a2:	181b      	adds	r3, r3, r0
  } else {
    r = RdOff - WrOff - 1u;
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	1a98      	subs	r0, r3, r2
  }
  return r;
}
 800b9a8:	4770      	bx	lr

0800b9aa <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b9aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
 800b9ac:	6883      	ldr	r3, [r0, #8]
  WrOff = pRing->WrOff;
 800b9ae:	68c4      	ldr	r4, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	1b1f      	subs	r7, r3, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800b9b4:	6843      	ldr	r3, [r0, #4]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b9b6:	0005      	movs	r5, r0
 800b9b8:	000e      	movs	r6, r1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800b9ba:	1918      	adds	r0, r3, r4
    pRing->WrOff = WrOff + NumBytes;
 800b9bc:	18a4      	adds	r4, r4, r2
  if (Rem > NumBytes) {
 800b9be:	4297      	cmp	r7, r2
 800b9c0:	d807      	bhi.n	800b9d2 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800b9c2:	003a      	movs	r2, r7
 800b9c4:	f00a fac4 	bl	8015f50 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800b9c8:	9b01      	ldr	r3, [sp, #4]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800b9ca:	6868      	ldr	r0, [r5, #4]
    NumBytesAtOnce = NumBytes - Rem;
 800b9cc:	1ae4      	subs	r4, r4, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800b9ce:	0022      	movs	r2, r4
 800b9d0:	19f1      	adds	r1, r6, r7
 800b9d2:	f00a fabd 	bl	8015f50 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800b9d6:	60ec      	str	r4, [r5, #12]
}
 800b9d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800b9da <_WriteBlocking>:
  NumBytesWritten = 0u;
 800b9da:	2300      	movs	r3, #0
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9de:	0006      	movs	r6, r0
 800b9e0:	0017      	movs	r7, r2
  WrOff = pRing->WrOff;
 800b9e2:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b9e4:	9101      	str	r1, [sp, #4]
  NumBytesWritten = 0u;
 800b9e6:	9300      	str	r3, [sp, #0]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800b9e8:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b9ea:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 800b9ec:	429d      	cmp	r5, r3
 800b9ee:	d21f      	bcs.n	800ba30 <_WriteBlocking+0x56>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800b9f4:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800b9f6:	42bc      	cmp	r4, r7
 800b9f8:	d900      	bls.n	800b9fc <_WriteBlocking+0x22>
 800b9fa:	003c      	movs	r4, r7
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	d900      	bls.n	800ba02 <_WriteBlocking+0x28>
 800ba00:	001c      	movs	r4, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800ba02:	6873      	ldr	r3, [r6, #4]
 800ba04:	0022      	movs	r2, r4
 800ba06:	1958      	adds	r0, r3, r5
 800ba08:	9901      	ldr	r1, [sp, #4]
 800ba0a:	f00a faa1 	bl	8015f50 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800ba0e:	9b00      	ldr	r3, [sp, #0]
    WrOff           += NumBytesToWrite;
 800ba10:	192d      	adds	r5, r5, r4
    NumBytesWritten += NumBytesToWrite;
 800ba12:	191b      	adds	r3, r3, r4
 800ba14:	9300      	str	r3, [sp, #0]
    pBuffer         += NumBytesToWrite;
 800ba16:	9b01      	ldr	r3, [sp, #4]
    NumBytes        -= NumBytesToWrite;
 800ba18:	1b3f      	subs	r7, r7, r4
    pBuffer         += NumBytesToWrite;
 800ba1a:	191b      	adds	r3, r3, r4
 800ba1c:	9301      	str	r3, [sp, #4]
    if (WrOff == pRing->SizeOfBuffer) {
 800ba1e:	68b3      	ldr	r3, [r6, #8]
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	d100      	bne.n	800ba26 <_WriteBlocking+0x4c>
      WrOff = 0u;
 800ba24:	2500      	movs	r5, #0
    pRing->WrOff = WrOff;
 800ba26:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	d1dd      	bne.n	800b9e8 <_WriteBlocking+0xe>
}
 800ba2c:	9800      	ldr	r0, [sp, #0]
 800ba2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800ba30:	191b      	adds	r3, r3, r4
 800ba32:	e7dd      	b.n	800b9f0 <_WriteBlocking+0x16>

0800ba34 <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800ba34:	2303      	movs	r3, #3
static void _DoInit(void) {
 800ba36:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800ba38:	4c10      	ldr	r4, [pc, #64]	; (800ba7c <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
 800ba3a:	4a11      	ldr	r2, [pc, #68]	; (800ba80 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800ba3c:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800ba3e:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800ba40:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
 800ba42:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800ba44:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800ba46:	2380      	movs	r3, #128	; 0x80
  p->aDown[0].sName         = "Terminal";
 800ba48:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800ba4a:	4a0f      	ldr	r2, [pc, #60]	; (800ba88 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800ba4c:	00db      	lsls	r3, r3, #3
 800ba4e:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
 800ba50:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
 800ba52:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800ba54:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 800ba56:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800ba58:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800ba5a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
 800ba5c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800ba5e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800ba60:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800ba62:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
 800ba64:	4909      	ldr	r1, [pc, #36]	; (800ba8c <_DoInit+0x58>)
 800ba66:	480a      	ldr	r0, [pc, #40]	; (800ba90 <_DoInit+0x5c>)
 800ba68:	f00b f99e 	bl	8016da8 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
 800ba6c:	0020      	movs	r0, r4
 800ba6e:	4909      	ldr	r1, [pc, #36]	; (800ba94 <_DoInit+0x60>)
 800ba70:	f00b f99a 	bl	8016da8 <strcpy>
  p->acID[6] = ' ';
 800ba74:	2320      	movs	r3, #32
 800ba76:	71a3      	strb	r3, [r4, #6]
}
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	46c0      	nop			; (mov r8, r8)
 800ba7c:	200012b4 	.word	0x200012b4
 800ba80:	0801964d 	.word	0x0801964d
 800ba84:	2000136c 	.word	0x2000136c
 800ba88:	2000135c 	.word	0x2000135c
 800ba8c:	08019656 	.word	0x08019656
 800ba90:	200012bb 	.word	0x200012bb
 800ba94:	0801965a 	.word	0x0801965a

0800ba98 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9a:	0016      	movs	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800ba9c:	2218      	movs	r2, #24
 800ba9e:	1c45      	adds	r5, r0, #1
 800baa0:	4355      	muls	r5, r2
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800baa2:	4342      	muls	r2, r0
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800baa4:	4b16      	ldr	r3, [pc, #88]	; (800bb00 <SEGGER_RTT_WriteNoLock+0x68>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800baa6:	000f      	movs	r7, r1
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800baa8:	18ed      	adds	r5, r5, r3
  switch (pRing->Flags) {
 800baaa:	189b      	adds	r3, r3, r2
 800baac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800baae:	2c01      	cmp	r4, #1
 800bab0:	d010      	beq.n	800bad4 <SEGGER_RTT_WriteNoLock+0x3c>
 800bab2:	2c02      	cmp	r4, #2
 800bab4:	d01b      	beq.n	800baee <SEGGER_RTT_WriteNoLock+0x56>
 800bab6:	2c00      	cmp	r4, #0
 800bab8:	d11f      	bne.n	800bafa <SEGGER_RTT_WriteNoLock+0x62>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800baba:	0028      	movs	r0, r5
 800babc:	f7ff ff6c 	bl	800b998 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 800bac0:	4286      	cmp	r6, r0
 800bac2:	d805      	bhi.n	800bad0 <SEGGER_RTT_WriteNoLock+0x38>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
 800bac4:	0032      	movs	r2, r6
 800bac6:	0039      	movs	r1, r7
 800bac8:	0028      	movs	r0, r5
 800baca:	f7ff ff6e 	bl	800b9aa <_WriteNoCheck>
 800bace:	0034      	movs	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
 800bad0:	0020      	movs	r0, r4
 800bad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 800bad4:	0028      	movs	r0, r5
 800bad6:	f7ff ff5f 	bl	800b998 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 800bada:	0034      	movs	r4, r6
 800badc:	4286      	cmp	r6, r0
 800bade:	d900      	bls.n	800bae2 <SEGGER_RTT_WriteNoLock+0x4a>
 800bae0:	0004      	movs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 800bae2:	0022      	movs	r2, r4
 800bae4:	0039      	movs	r1, r7
 800bae6:	0028      	movs	r0, r5
 800bae8:	f7ff ff5f 	bl	800b9aa <_WriteNoCheck>
    break;
 800baec:	e7f0      	b.n	800bad0 <SEGGER_RTT_WriteNoLock+0x38>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800baee:	0032      	movs	r2, r6
 800baf0:	0028      	movs	r0, r5
 800baf2:	f7ff ff72 	bl	800b9da <_WriteBlocking>
 800baf6:	0004      	movs	r4, r0
    break;
 800baf8:	e7ea      	b.n	800bad0 <SEGGER_RTT_WriteNoLock+0x38>
  switch (pRing->Flags) {
 800bafa:	2400      	movs	r4, #0
  return Status;
 800bafc:	e7e8      	b.n	800bad0 <SEGGER_RTT_WriteNoLock+0x38>
 800bafe:	46c0      	nop			; (mov r8, r8)
 800bb00:	200012b4 	.word	0x200012b4

0800bb04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;
  //
  INIT();
 800bb06:	4b0b      	ldr	r3, [pc, #44]	; (800bb34 <SEGGER_RTT_Write+0x30>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bb08:	0004      	movs	r4, r0
  INIT();
 800bb0a:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bb0c:	000e      	movs	r6, r1
 800bb0e:	0017      	movs	r7, r2
  INIT();
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d101      	bne.n	800bb18 <SEGGER_RTT_Write+0x14>
 800bb14:	f7ff ff8e 	bl	800ba34 <_DoInit>
  SEGGER_RTT_LOCK();
 800bb18:	f3ef 8510 	mrs	r5, PRIMASK
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	f381 8810 	msr	PRIMASK, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800bb22:	003a      	movs	r2, r7
 800bb24:	0031      	movs	r1, r6
 800bb26:	0020      	movs	r0, r4
 800bb28:	f7ff ffb6 	bl	800ba98 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800bb2c:	f385 8810 	msr	PRIMASK, r5
  //
  return Status;
}
 800bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb32:	46c0      	nop			; (mov r8, r8)
 800bb34:	200012b4 	.word	0x200012b4

0800bb38 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	0005      	movs	r5, r0
  unsigned Len;

  Len = STRLEN(s);
 800bb3c:	0008      	movs	r0, r1
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 800bb3e:	000c      	movs	r4, r1
  Len = STRLEN(s);
 800bb40:	f7f4 fae2 	bl	8000108 <strlen>
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800bb44:	0021      	movs	r1, r4
  Len = STRLEN(s);
 800bb46:	0002      	movs	r2, r0
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800bb48:	0028      	movs	r0, r5
 800bb4a:	f7ff ffdb 	bl	800bb04 <SEGGER_RTT_Write>
}
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}

0800bb50 <_write>:
*   Low-level write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write(int file, char *ptr, int len) {
 800bb50:	b510      	push	{r4, lr}
 800bb52:	0014      	movs	r4, r2
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800bb54:	2000      	movs	r0, #0
 800bb56:	f7ff ffd5 	bl	800bb04 <SEGGER_RTT_Write>
  return len;
}
 800bb5a:	0020      	movs	r0, r4
 800bb5c:	bd10      	pop	{r4, pc}

0800bb5e <_StoreChar>:
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
  unsigned Cnt;

  Cnt = p->Cnt;
 800bb5e:	6882      	ldr	r2, [r0, #8]
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800bb60:	b510      	push	{r4, lr}
 800bb62:	0004      	movs	r4, r0
  if ((Cnt + 1u) <= p->BufferSize) {
 800bb64:	6840      	ldr	r0, [r0, #4]
 800bb66:	1c53      	adds	r3, r2, #1
 800bb68:	4283      	cmp	r3, r0
 800bb6a:	d805      	bhi.n	800bb78 <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
 800bb70:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
 800bb72:	68e3      	ldr	r3, [r4, #12]
 800bb74:	3301      	adds	r3, #1
 800bb76:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800bb78:	68a2      	ldr	r2, [r4, #8]
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d109      	bne.n	800bb94 <_StoreChar+0x36>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800bb80:	6821      	ldr	r1, [r4, #0]
 800bb82:	6920      	ldr	r0, [r4, #16]
 800bb84:	f7ff ffbe 	bl	800bb04 <SEGGER_RTT_Write>
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	4298      	cmp	r0, r3
 800bb8c:	d003      	beq.n	800bb96 <_StoreChar+0x38>
      p->ReturnValue = -1;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	425b      	negs	r3, r3
 800bb92:	60e3      	str	r3, [r4, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800bb94:	bd10      	pop	{r4, pc}
      p->Cnt = 0u;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60a3      	str	r3, [r4, #8]
}
 800bb9a:	e7fb      	b.n	800bb94 <_StoreChar+0x36>

0800bb9c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800bb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb9e:	0005      	movs	r5, r0
 800bba0:	0017      	movs	r7, r2
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800bba2:	0008      	movs	r0, r1
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
 800bba4:	2601      	movs	r6, #1
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800bba6:	b085      	sub	sp, #20
 800bba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bbaa:	9102      	str	r1, [sp, #8]
 800bbac:	9300      	str	r3, [sp, #0]
  while (Number >= Base) {
 800bbae:	42b8      	cmp	r0, r7
 800bbb0:	d219      	bcs.n	800bbe6 <_PrintUnsigned+0x4a>
    Number = (Number / Base);
    Width++;
  }
  if (NumDigits > Width) {
 800bbb2:	9a00      	ldr	r2, [sp, #0]
 800bbb4:	9601      	str	r6, [sp, #4]
 800bbb6:	4296      	cmp	r6, r2
 800bbb8:	d200      	bcs.n	800bbbc <_PrintUnsigned+0x20>
 800bbba:	9201      	str	r2, [sp, #4]
    Width = NumDigits;
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbc0:	401a      	ands	r2, r3
 800bbc2:	9203      	str	r2, [sp, #12]
 800bbc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbc6:	421a      	tst	r2, r3
 800bbc8:	d102      	bne.n	800bbd0 <_PrintUnsigned+0x34>
    if (FieldWidth != 0u) {
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	d110      	bne.n	800bbf0 <_PrintUnsigned+0x54>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
        c = '0';
      } else {
        c = ' ';
 800bbce:	2400      	movs	r4, #0
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800bbd0:	68eb      	ldr	r3, [r5, #12]
  Digit = 1u;
 800bbd2:	2601      	movs	r6, #1
  if (pBufferDesc->ReturnValue >= 0) {
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	db4b      	blt.n	800bc70 <_PrintUnsigned+0xd4>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800bbd8:	9b00      	ldr	r3, [sp, #0]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d91f      	bls.n	800bc1e <_PrintUnsigned+0x82>
        NumDigits--;
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	9300      	str	r3, [sp, #0]
        Div = v / Digit;
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
          break;
        }
      }
      Digit *= Base;
 800bbe2:	437e      	muls	r6, r7
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800bbe4:	e7f8      	b.n	800bbd8 <_PrintUnsigned+0x3c>
    Number = (Number / Base);
 800bbe6:	0039      	movs	r1, r7
 800bbe8:	f7f4 fabe 	bl	8000168 <__udivsi3>
    Width++;
 800bbec:	3601      	adds	r6, #1
 800bbee:	e7de      	b.n	800bbae <_PrintUnsigned+0x12>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800bbf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        c = ' ';
 800bbf2:	2620      	movs	r6, #32
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800bbf4:	079b      	lsls	r3, r3, #30
 800bbf6:	d504      	bpl.n	800bc02 <_PrintUnsigned+0x66>
 800bbf8:	9b00      	ldr	r3, [sp, #0]
        c = '0';
 800bbfa:	3610      	adds	r6, #16
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d000      	beq.n	800bc02 <_PrintUnsigned+0x66>
        c = ' ';
 800bc00:	3e10      	subs	r6, #16
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bc02:	9b01      	ldr	r3, [sp, #4]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d2e3      	bcs.n	800bbd0 <_PrintUnsigned+0x34>
        _StoreChar(pBufferDesc, c);
 800bc08:	0031      	movs	r1, r6
 800bc0a:	0028      	movs	r0, r5
 800bc0c:	f7ff ffa7 	bl	800bb5e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800bc10:	68eb      	ldr	r3, [r5, #12]
        FieldWidth--;
 800bc12:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dbdb      	blt.n	800bbd0 <_PrintUnsigned+0x34>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bc18:	2c00      	cmp	r4, #0
 800bc1a:	d1f2      	bne.n	800bc02 <_PrintUnsigned+0x66>
 800bc1c:	e7d7      	b.n	800bbce <_PrintUnsigned+0x32>
        Div = v / Digit;
 800bc1e:	0031      	movs	r1, r6
 800bc20:	9802      	ldr	r0, [sp, #8]
 800bc22:	f7f4 faa1 	bl	8000168 <__udivsi3>
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800bc26:	4287      	cmp	r7, r0
 800bc28:	d9db      	bls.n	800bbe2 <_PrintUnsigned+0x46>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 800bc2a:	9802      	ldr	r0, [sp, #8]
 800bc2c:	0031      	movs	r1, r6
 800bc2e:	f7f4 fb21 	bl	8000274 <__aeabi_uidivmod>
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800bc32:	4b11      	ldr	r3, [pc, #68]	; (800bc78 <_PrintUnsigned+0xdc>)
 800bc34:	9102      	str	r1, [sp, #8]
 800bc36:	5c19      	ldrb	r1, [r3, r0]
 800bc38:	0028      	movs	r0, r5
 800bc3a:	f7ff ff90 	bl	800bb5e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800bc3e:	68eb      	ldr	r3, [r5, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	db05      	blt.n	800bc50 <_PrintUnsigned+0xb4>
        break;
      }
      Digit /= Base;
 800bc44:	0039      	movs	r1, r7
 800bc46:	0030      	movs	r0, r6
 800bc48:	f7f4 fa8e 	bl	8000168 <__udivsi3>
    } while (Digit);
 800bc4c:	42be      	cmp	r6, r7
 800bc4e:	d211      	bcs.n	800bc74 <_PrintUnsigned+0xd8>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00c      	beq.n	800bc70 <_PrintUnsigned+0xd4>
      if (FieldWidth != 0u) {
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	d00a      	beq.n	800bc70 <_PrintUnsigned+0xd4>
 800bc5a:	9b01      	ldr	r3, [sp, #4]
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	d207      	bcs.n	800bc70 <_PrintUnsigned+0xd4>
          FieldWidth--;
          _StoreChar(pBufferDesc, ' ');
 800bc60:	2120      	movs	r1, #32
 800bc62:	0028      	movs	r0, r5
 800bc64:	f7ff ff7b 	bl	800bb5e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800bc68:	68eb      	ldr	r3, [r5, #12]
          FieldWidth--;
 800bc6a:	3c01      	subs	r4, #1
          if (pBufferDesc->ReturnValue < 0) {
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	daf2      	bge.n	800bc56 <_PrintUnsigned+0xba>
          }
        }
      }
    }
  }
}
 800bc70:	b005      	add	sp, #20
 800bc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Digit /= Base;
 800bc74:	0006      	movs	r6, r0
 800bc76:	e7d8      	b.n	800bc2a <_PrintUnsigned+0x8e>
 800bc78:	08019661 	.word	0x08019661

0800bc7c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7e:	b09f      	sub	sp, #124	; 0x7c
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800bc80:	ab0e      	add	r3, sp, #56	; 0x38
 800bc82:	9309      	str	r3, [sp, #36]	; 0x24
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800bc84:	2340      	movs	r3, #64	; 0x40
 800bc86:	930a      	str	r3, [sp, #40]	; 0x28
  BufferDesc.Cnt            = 0u;
 800bc88:	2300      	movs	r3, #0
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800bc8a:	000e      	movs	r6, r1
 800bc8c:	0015      	movs	r5, r2
 800bc8e:	9007      	str	r0, [sp, #28]
  BufferDesc.Cnt            = 0u;
 800bc90:	930b      	str	r3, [sp, #44]	; 0x2c
  BufferDesc.RTTBufferIndex = BufferIndex;
 800bc92:	900d      	str	r0, [sp, #52]	; 0x34
  BufferDesc.ReturnValue    = 0;
 800bc94:	930c      	str	r3, [sp, #48]	; 0x30

  do {
    c = *sFormat;
 800bc96:	7831      	ldrb	r1, [r6, #0]
    sFormat++;
 800bc98:	3601      	adds	r6, #1
    if (c == 0u) {
 800bc9a:	2900      	cmp	r1, #0
 800bc9c:	d107      	bne.n	800bcae <SEGGER_RTT_vprintf+0x32>
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);

  if (BufferDesc.ReturnValue > 0) {
 800bc9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bca0:	9303      	str	r3, [sp, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dd00      	ble.n	800bca8 <SEGGER_RTT_vprintf+0x2c>
 800bca6:	e109      	b.n	800bebc <SEGGER_RTT_vprintf+0x240>
    if (BufferDesc.Cnt != 0u) {
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
  }
  return BufferDesc.ReturnValue;
 800bca8:	980c      	ldr	r0, [sp, #48]	; 0x30
}
 800bcaa:	b01f      	add	sp, #124	; 0x7c
 800bcac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '%') {
 800bcae:	2925      	cmp	r1, #37	; 0x25
 800bcb0:	d000      	beq.n	800bcb4 <SEGGER_RTT_vprintf+0x38>
 800bcb2:	e0b3      	b.n	800be1c <SEGGER_RTT_vprintf+0x1a0>
      FormatFlags = 0u;
 800bcb4:	2700      	movs	r7, #0
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800bcb6:	2208      	movs	r2, #8
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800bcb8:	2004      	movs	r0, #4
 800bcba:	e006      	b.n	800bcca <SEGGER_RTT_vprintf+0x4e>
        switch (c) {
 800bcbc:	2b30      	cmp	r3, #48	; 0x30
 800bcbe:	d10d      	bne.n	800bcdc <SEGGER_RTT_vprintf+0x60>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800bcc0:	2302      	movs	r3, #2
 800bcc2:	e000      	b.n	800bcc6 <SEGGER_RTT_vprintf+0x4a>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800bcc4:	2301      	movs	r3, #1
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800bcc6:	431f      	orrs	r7, r3
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800bcc8:	000e      	movs	r6, r1
        c = *sFormat;
 800bcca:	7833      	ldrb	r3, [r6, #0]
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800bccc:	1c71      	adds	r1, r6, #1
        switch (c) {
 800bcce:	2b2d      	cmp	r3, #45	; 0x2d
 800bcd0:	d0f8      	beq.n	800bcc4 <SEGGER_RTT_vprintf+0x48>
 800bcd2:	d8f3      	bhi.n	800bcbc <SEGGER_RTT_vprintf+0x40>
 800bcd4:	2b23      	cmp	r3, #35	; 0x23
 800bcd6:	d010      	beq.n	800bcfa <SEGGER_RTT_vprintf+0x7e>
 800bcd8:	2b2b      	cmp	r3, #43	; 0x2b
 800bcda:	d00c      	beq.n	800bcf6 <SEGGER_RTT_vprintf+0x7a>
 800bcdc:	2400      	movs	r4, #0
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800bcde:	210a      	movs	r1, #10
        c = *sFormat;
 800bce0:	7833      	ldrb	r3, [r6, #0]
        sFormat++;
 800bce2:	1c72      	adds	r2, r6, #1
        if ((c < '0') || (c > '9')) {
 800bce4:	0018      	movs	r0, r3
 800bce6:	3830      	subs	r0, #48	; 0x30
 800bce8:	2809      	cmp	r0, #9
 800bcea:	d808      	bhi.n	800bcfe <SEGGER_RTT_vprintf+0x82>
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800bcec:	434c      	muls	r4, r1
 800bcee:	3c30      	subs	r4, #48	; 0x30
        sFormat++;
 800bcf0:	0016      	movs	r6, r2
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800bcf2:	191c      	adds	r4, r3, r4
        c = *sFormat;
 800bcf4:	e7f4      	b.n	800bce0 <SEGGER_RTT_vprintf+0x64>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800bcf6:	4307      	orrs	r7, r0
 800bcf8:	e7e6      	b.n	800bcc8 <SEGGER_RTT_vprintf+0x4c>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800bcfa:	4317      	orrs	r7, r2
 800bcfc:	e7e4      	b.n	800bcc8 <SEGGER_RTT_vprintf+0x4c>
      NumDigits = 0u;
 800bcfe:	2100      	movs	r1, #0
 800bd00:	9103      	str	r1, [sp, #12]
      if (c == '.') {
 800bd02:	2b2e      	cmp	r3, #46	; 0x2e
 800bd04:	d10e      	bne.n	800bd24 <SEGGER_RTT_vprintf+0xa8>
        sFormat++;
 800bd06:	0016      	movs	r6, r2
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800bd08:	200a      	movs	r0, #10
          c = *sFormat;
 800bd0a:	7832      	ldrb	r2, [r6, #0]
          sFormat++;
 800bd0c:	1c71      	adds	r1, r6, #1
          if ((c < '0') || (c > '9')) {
 800bd0e:	0013      	movs	r3, r2
 800bd10:	3b30      	subs	r3, #48	; 0x30
 800bd12:	2b09      	cmp	r3, #9
 800bd14:	d806      	bhi.n	800bd24 <SEGGER_RTT_vprintf+0xa8>
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800bd16:	9b03      	ldr	r3, [sp, #12]
          sFormat++;
 800bd18:	000e      	movs	r6, r1
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800bd1a:	4343      	muls	r3, r0
 800bd1c:	3b30      	subs	r3, #48	; 0x30
 800bd1e:	18d3      	adds	r3, r2, r3
 800bd20:	9303      	str	r3, [sp, #12]
          c = *sFormat;
 800bd22:	e7f2      	b.n	800bd0a <SEGGER_RTT_vprintf+0x8e>
        if ((c == 'l') || (c == 'h')) {
 800bd24:	2304      	movs	r3, #4
      c = *sFormat;
 800bd26:	7831      	ldrb	r1, [r6, #0]
        if ((c == 'l') || (c == 'h')) {
 800bd28:	000a      	movs	r2, r1
          sFormat++;
 800bd2a:	3601      	adds	r6, #1
        if ((c == 'l') || (c == 'h')) {
 800bd2c:	439a      	bics	r2, r3
 800bd2e:	2a68      	cmp	r2, #104	; 0x68
 800bd30:	d101      	bne.n	800bd36 <SEGGER_RTT_vprintf+0xba>
          c = *sFormat;
 800bd32:	7831      	ldrb	r1, [r6, #0]
        if ((c == 'l') || (c == 'h')) {
 800bd34:	e7f8      	b.n	800bd28 <SEGGER_RTT_vprintf+0xac>
      switch (c) {
 800bd36:	2978      	cmp	r1, #120	; 0x78
 800bd38:	d809      	bhi.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
 800bd3a:	296f      	cmp	r1, #111	; 0x6f
 800bd3c:	d80b      	bhi.n	800bd56 <SEGGER_RTT_vprintf+0xda>
 800bd3e:	2963      	cmp	r1, #99	; 0x63
 800bd40:	d067      	beq.n	800be12 <SEGGER_RTT_vprintf+0x196>
 800bd42:	d817      	bhi.n	800bd74 <SEGGER_RTT_vprintf+0xf8>
 800bd44:	2925      	cmp	r1, #37	; 0x25
 800bd46:	d069      	beq.n	800be1c <SEGGER_RTT_vprintf+0x1a0>
 800bd48:	2958      	cmp	r1, #88	; 0x58
 800bd4a:	d100      	bne.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
 800bd4c:	e095      	b.n	800be7a <SEGGER_RTT_vprintf+0x1fe>
  } while (BufferDesc.ReturnValue >= 0);
 800bd4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	daa0      	bge.n	800bc96 <SEGGER_RTT_vprintf+0x1a>
 800bd54:	e7a3      	b.n	800bc9e <SEGGER_RTT_vprintf+0x22>
      switch (c) {
 800bd56:	3970      	subs	r1, #112	; 0x70
 800bd58:	0008      	movs	r0, r1
 800bd5a:	2908      	cmp	r1, #8
 800bd5c:	d8f7      	bhi.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
 800bd5e:	f7f4 f9ef 	bl	8000140 <__gnu_thumb1_case_shi>
 800bd62:	00a5      	.short	0x00a5
 800bd64:	fff6fff6 	.word	0xfff6fff6
 800bd68:	fff60094 	.word	0xfff60094
 800bd6c:	fff60083 	.word	0xfff60083
 800bd70:	008cfff6 	.word	0x008cfff6
 800bd74:	2964      	cmp	r1, #100	; 0x64
 800bd76:	d1ea      	bne.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
        v = va_arg(*pParamList, int);
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	1d1a      	adds	r2, r3, #4
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	602a      	str	r2, [r5, #0]
  Number = (v < 0) ? -v : v;
 800bd80:	17da      	asrs	r2, r3, #31
 800bd82:	1898      	adds	r0, r3, r2
        v = va_arg(*pParamList, int);
 800bd84:	9304      	str	r3, [sp, #16]
  Width = 1u;
 800bd86:	2301      	movs	r3, #1
  Number = (v < 0) ? -v : v;
 800bd88:	4050      	eors	r0, r2
    Width++;
 800bd8a:	9305      	str	r3, [sp, #20]
  while (Number >= (int)Base) {
 800bd8c:	2809      	cmp	r0, #9
 800bd8e:	dc49      	bgt.n	800be24 <SEGGER_RTT_vprintf+0x1a8>
  if (NumDigits > Width) {
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	9a05      	ldr	r2, [sp, #20]
 800bd94:	9306      	str	r3, [sp, #24]
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d200      	bcs.n	800bd9c <SEGGER_RTT_vprintf+0x120>
 800bd9a:	9206      	str	r2, [sp, #24]
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800bd9c:	2c00      	cmp	r4, #0
 800bd9e:	d005      	beq.n	800bdac <SEGGER_RTT_vprintf+0x130>
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	db01      	blt.n	800bdaa <SEGGER_RTT_vprintf+0x12e>
 800bda6:	077b      	lsls	r3, r7, #29
 800bda8:	d500      	bpl.n	800bdac <SEGGER_RTT_vprintf+0x130>
    FieldWidth--;
 800bdaa:	3c01      	subs	r4, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800bdac:	2302      	movs	r3, #2
 800bdae:	421f      	tst	r7, r3
 800bdb0:	d002      	beq.n	800bdb8 <SEGGER_RTT_vprintf+0x13c>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <SEGGER_RTT_vprintf+0x148>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	421f      	tst	r7, r3
 800bdbc:	d102      	bne.n	800bdc4 <SEGGER_RTT_vprintf+0x148>
    if (FieldWidth != 0u) {
 800bdbe:	2c00      	cmp	r4, #0
 800bdc0:	d136      	bne.n	800be30 <SEGGER_RTT_vprintf+0x1b4>
  Width = 1u;
 800bdc2:	2400      	movs	r4, #0
  if (pBufferDesc->ReturnValue >= 0) {
 800bdc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdc6:	9305      	str	r3, [sp, #20]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dbc0      	blt.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
    if (v < 0) {
 800bdcc:	9b04      	ldr	r3, [sp, #16]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	da3a      	bge.n	800be48 <SEGGER_RTT_vprintf+0x1cc>
      _StoreChar(pBufferDesc, '-');
 800bdd2:	212d      	movs	r1, #45	; 0x2d
      v = -v;
 800bdd4:	425b      	negs	r3, r3
 800bdd6:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '+');
 800bdd8:	a809      	add	r0, sp, #36	; 0x24
 800bdda:	f7ff fec0 	bl	800bb5e <_StoreChar>
    if (pBufferDesc->ReturnValue >= 0) {
 800bdde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	dbb4      	blt.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800bde4:	2303      	movs	r3, #3
 800bde6:	403b      	ands	r3, r7
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d105      	bne.n	800bdf8 <SEGGER_RTT_vprintf+0x17c>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d102      	bne.n	800bdf8 <SEGGER_RTT_vprintf+0x17c>
        if (FieldWidth != 0u) {
 800bdf2:	2c00      	cmp	r4, #0
 800bdf4:	d12c      	bne.n	800be50 <SEGGER_RTT_vprintf+0x1d4>
  Width = 1u;
 800bdf6:	2400      	movs	r4, #0
      if (pBufferDesc->ReturnValue >= 0) {
 800bdf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdfa:	9305      	str	r3, [sp, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	dba6      	blt.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800be00:	220a      	movs	r2, #10
 800be02:	9b03      	ldr	r3, [sp, #12]
 800be04:	9904      	ldr	r1, [sp, #16]
 800be06:	9701      	str	r7, [sp, #4]
 800be08:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800be0a:	a809      	add	r0, sp, #36	; 0x24
 800be0c:	f7ff fec6 	bl	800bb9c <_PrintUnsigned>
        break;
 800be10:	e79d      	b.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
        v = va_arg(*pParamList, int);
 800be12:	682b      	ldr	r3, [r5, #0]
        c0 = (char)v;
 800be14:	6819      	ldr	r1, [r3, #0]
        v = va_arg(*pParamList, int);
 800be16:	1d1a      	adds	r2, r3, #4
 800be18:	602a      	str	r2, [r5, #0]
        _StoreChar(&BufferDesc, c0);
 800be1a:	b2c9      	uxtb	r1, r1
      _StoreChar(&BufferDesc, c);
 800be1c:	a809      	add	r0, sp, #36	; 0x24
 800be1e:	f7ff fe9e 	bl	800bb5e <_StoreChar>
 800be22:	e794      	b.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
    Number = (Number / (int)Base);
 800be24:	210a      	movs	r1, #10
 800be26:	f7f4 fa29 	bl	800027c <__divsi3>
    Width++;
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	3301      	adds	r3, #1
 800be2e:	e7ac      	b.n	800bd8a <SEGGER_RTT_vprintf+0x10e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800be30:	9b06      	ldr	r3, [sp, #24]
 800be32:	42a3      	cmp	r3, r4
 800be34:	d2c6      	bcs.n	800bdc4 <SEGGER_RTT_vprintf+0x148>
        _StoreChar(pBufferDesc, ' ');
 800be36:	2120      	movs	r1, #32
 800be38:	a809      	add	r0, sp, #36	; 0x24
 800be3a:	f7ff fe90 	bl	800bb5e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800be3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        FieldWidth--;
 800be40:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800be42:	2b00      	cmp	r3, #0
 800be44:	dabb      	bge.n	800bdbe <SEGGER_RTT_vprintf+0x142>
 800be46:	e7bd      	b.n	800bdc4 <SEGGER_RTT_vprintf+0x148>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800be48:	077b      	lsls	r3, r7, #29
 800be4a:	d5c8      	bpl.n	800bdde <SEGGER_RTT_vprintf+0x162>
      _StoreChar(pBufferDesc, '+');
 800be4c:	212b      	movs	r1, #43	; 0x2b
 800be4e:	e7c3      	b.n	800bdd8 <SEGGER_RTT_vprintf+0x15c>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	42a3      	cmp	r3, r4
 800be54:	d2d0      	bcs.n	800bdf8 <SEGGER_RTT_vprintf+0x17c>
            _StoreChar(pBufferDesc, '0');
 800be56:	2130      	movs	r1, #48	; 0x30
 800be58:	a809      	add	r0, sp, #36	; 0x24
 800be5a:	f7ff fe80 	bl	800bb5e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800be5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            FieldWidth--;
 800be60:	3c01      	subs	r4, #1
            if (pBufferDesc->ReturnValue < 0) {
 800be62:	2b00      	cmp	r3, #0
 800be64:	dac5      	bge.n	800bdf2 <SEGGER_RTT_vprintf+0x176>
 800be66:	e7c7      	b.n	800bdf8 <SEGGER_RTT_vprintf+0x17c>
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800be68:	220a      	movs	r2, #10
        v = va_arg(*pParamList, int);
 800be6a:	6829      	ldr	r1, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800be6c:	9701      	str	r7, [sp, #4]
        v = va_arg(*pParamList, int);
 800be6e:	1d0b      	adds	r3, r1, #4
 800be70:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800be72:	9b03      	ldr	r3, [sp, #12]
 800be74:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800be76:	6809      	ldr	r1, [r1, #0]
 800be78:	e7c7      	b.n	800be0a <SEGGER_RTT_vprintf+0x18e>
        v = va_arg(*pParamList, int);
 800be7a:	6829      	ldr	r1, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800be7c:	9701      	str	r7, [sp, #4]
        v = va_arg(*pParamList, int);
 800be7e:	1d0b      	adds	r3, r1, #4
 800be80:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800be86:	2210      	movs	r2, #16
 800be88:	e7f5      	b.n	800be76 <SEGGER_RTT_vprintf+0x1fa>
          const char * s = va_arg(*pParamList, const char *);
 800be8a:	682b      	ldr	r3, [r5, #0]
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	602a      	str	r2, [r5, #0]
 800be90:	681c      	ldr	r4, [r3, #0]
            c = *s;
 800be92:	7821      	ldrb	r1, [r4, #0]
            s++;
 800be94:	3401      	adds	r4, #1
            if (c == '\0') {
 800be96:	2900      	cmp	r1, #0
 800be98:	d100      	bne.n	800be9c <SEGGER_RTT_vprintf+0x220>
 800be9a:	e758      	b.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
           _StoreChar(&BufferDesc, c);
 800be9c:	a809      	add	r0, sp, #36	; 0x24
 800be9e:	f7ff fe5e 	bl	800bb5e <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800bea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	daf3      	bge.n	800be92 <SEGGER_RTT_vprintf+0x216>
 800beaa:	e750      	b.n	800bd4e <SEGGER_RTT_vprintf+0xd2>
        v = va_arg(*pParamList, int);
 800beac:	6829      	ldr	r1, [r5, #0]
 800beae:	1d0b      	adds	r3, r1, #4
 800beb0:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800beb2:	2300      	movs	r3, #0
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	3308      	adds	r3, #8
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	e7e4      	b.n	800be86 <SEGGER_RTT_vprintf+0x20a>
    if (BufferDesc.Cnt != 0u) {
 800bebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	d003      	beq.n	800beca <SEGGER_RTT_vprintf+0x24e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800bec2:	9807      	ldr	r0, [sp, #28]
 800bec4:	a90e      	add	r1, sp, #56	; 0x38
 800bec6:	f7ff fe1d 	bl	800bb04 <SEGGER_RTT_Write>
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800beca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800becc:	9303      	str	r3, [sp, #12]
 800bece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	9a04      	ldr	r2, [sp, #16]
 800bed4:	9b03      	ldr	r3, [sp, #12]
 800bed6:	4694      	mov	ip, r2
 800bed8:	4463      	add	r3, ip
 800beda:	930c      	str	r3, [sp, #48]	; 0x30
 800bedc:	e6e4      	b.n	800bca8 <SEGGER_RTT_vprintf+0x2c>

0800bede <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800bede:	b40e      	push	{r1, r2, r3}
 800bee0:	b503      	push	{r0, r1, lr}
 800bee2:	ab03      	add	r3, sp, #12
 800bee4:	cb02      	ldmia	r3!, {r1}
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800bee6:	aa01      	add	r2, sp, #4
  va_start(ParamList, sFormat);
 800bee8:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800beea:	f7ff fec7 	bl	800bc7c <SEGGER_RTT_vprintf>
  va_end(ParamList);
  return r;
}
 800beee:	b002      	add	sp, #8
 800bef0:	bc08      	pop	{r3}
 800bef2:	b003      	add	sp, #12
 800bef4:	4718      	bx	r3

0800bef6 <ST25DV_IsDeviceReady>:
  *           This function determines if the ST25DV is ready to answer an I2C request. 
  * @param    Trials Max number of tentative.
  * @retval   int32_t enum status.
  */
int32_t ST25DV_IsDeviceReady(ST25DV_Object_t* pObj,  const uint32_t Trials )
{
 800bef6:	b510      	push	{r4, lr}
  /* Test communication with device */
  return pObj->IO.IsReady(ST25DV_ADDR_DATA_I2C, Trials );
 800bef8:	6883      	ldr	r3, [r0, #8]
 800befa:	20a6      	movs	r0, #166	; 0xa6
 800befc:	4798      	blx	r3
}
 800befe:	bd10      	pop	{r4, pc}

0800bf00 <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	000c      	movs	r4, r1
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 800bf04:	6905      	ldr	r5, [r0, #16]
{
 800bf06:	0011      	movs	r1, r2
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 800bf08:	20a6      	movs	r0, #166	; 0xa6
 800bf0a:	0022      	movs	r2, r4
 800bf0c:	47a8      	blx	r5
}
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}

0800bf10 <ST25DV_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteData(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 800bf10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf12:	0007      	movs	r7, r0
 800bf14:	001e      	movs	r6, r3
 800bf16:	b085      	sub	sp, #20
 800bf18:	9101      	str	r1, [sp, #4]
 800bf1a:	9202      	str	r2, [sp, #8]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800bf1c:	2380      	movs	r3, #128	; 0x80
 800bf1e:	1c35      	adds	r5, r6, #0
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	429e      	cmp	r6, r3
 800bf24:	d900      	bls.n	800bf28 <ST25DV_WriteData+0x18>
 800bf26:	1c1d      	adds	r5, r3, #0
 800bf28:	b2ad      	uxth	r5, r5
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
    }
    /* Write split_data_nb bytes in memory */
    ret = pObj->IO.Write( ST25DV_ADDR_DATA_I2C, mem_addr, pdata_index, split_data_nb);
 800bf2a:	68fc      	ldr	r4, [r7, #12]
 800bf2c:	002b      	movs	r3, r5
 800bf2e:	20a6      	movs	r0, #166	; 0xa6
 800bf30:	9a01      	ldr	r2, [sp, #4]
 800bf32:	9902      	ldr	r1, [sp, #8]
 800bf34:	47a0      	blx	r4
 800bf36:	1e04      	subs	r4, r0, #0

    if( ret == NFCTAG_OK )
 800bf38:	d111      	bne.n	800bf5e <ST25DV_WriteData+0x4e>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	4798      	blx	r3
 800bf3e:	9003      	str	r0, [sp, #12]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800bf40:	2101      	movs	r1, #1
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	20a6      	movs	r0, #166	; 0xa6
 800bf46:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800bf48:	697b      	ldr	r3, [r7, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800bf4a:	0004      	movs	r4, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800bf4c:	4798      	blx	r3
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	23a0      	movs	r3, #160	; 0xa0
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	4298      	cmp	r0, r3
 800bf58:	d211      	bcs.n	800bf7e <ST25DV_WriteData+0x6e>
 800bf5a:	2c00      	cmp	r4, #0
 800bf5c:	d1f0      	bne.n	800bf40 <ST25DV_WriteData+0x30>
        ret = NFCTAG_TIMEOUT;
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 800bf5e:	9b01      	ldr	r3, [sp, #4]
    mem_addr += split_data_nb;
    bytes_to_write -= split_data_nb;
 800bf60:	1b76      	subs	r6, r6, r5
    pdata_index += split_data_nb;
 800bf62:	195b      	adds	r3, r3, r5
 800bf64:	9301      	str	r3, [sp, #4]
    mem_addr += split_data_nb;
 800bf66:	9b02      	ldr	r3, [sp, #8]
    bytes_to_write -= split_data_nb;
 800bf68:	b2b6      	uxth	r6, r6
    mem_addr += split_data_nb;
 800bf6a:	195a      	adds	r2, r3, r5
 800bf6c:	b293      	uxth	r3, r2
 800bf6e:	9302      	str	r3, [sp, #8]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800bf70:	2e00      	cmp	r6, #0
 800bf72:	d001      	beq.n	800bf78 <ST25DV_WriteData+0x68>
 800bf74:	2c00      	cmp	r4, #0
 800bf76:	d0d1      	beq.n	800bf1c <ST25DV_WriteData+0xc>
  
  return ret;
}
 800bf78:	0020      	movs	r0, r4
 800bf7a:	b005      	add	sp, #20
 800bf7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( pollstatus != NFCTAG_OK )
 800bf7e:	2c00      	cmp	r4, #0
 800bf80:	d0ed      	beq.n	800bf5e <ST25DV_WriteData+0x4e>
        ret = NFCTAG_TIMEOUT;
 800bf82:	2403      	movs	r4, #3
 800bf84:	4264      	negs	r4, r4
 800bf86:	e7ea      	b.n	800bf5e <ST25DV_WriteData+0x4e>

0800bf88 <ST25DV_ReadID>:
{
 800bf88:	b510      	push	{r4, lr}
  return ST25DV_GetICREF(&(pObj->Ctx), pICRef);
 800bf8a:	3018      	adds	r0, #24
 800bf8c:	f000 f98b 	bl	800c2a6 <ST25DV_GetICREF>
}
 800bf90:	bd10      	pop	{r4, pc}

0800bf92 <ST25DV_Init>:
  if (pObj->IsInitialized == 0U)
 800bf92:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800bf94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf96:	0004      	movs	r4, r0
  if (pObj->IsInitialized == 0U)
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10c      	bne.n	800bfb6 <ST25DV_Init+0x24>
    ST25DV_ReadID(pObj,&nfctag_id);
 800bf9c:	466b      	mov	r3, sp
 800bf9e:	1ddd      	adds	r5, r3, #7
 800bfa0:	0029      	movs	r1, r5
 800bfa2:	f7ff fff1 	bl	800bf88 <ST25DV_ReadID>
    if( (nfctag_id != I_AM_ST25DV04) && (nfctag_id != I_AM_ST25DV64) )
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	782b      	ldrb	r3, [r5, #0]
 800bfaa:	4393      	bics	r3, r2
 800bfac:	2b24      	cmp	r3, #36	; 0x24
 800bfae:	d002      	beq.n	800bfb6 <ST25DV_Init+0x24>
      return NFCTAG_ERROR;
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	4240      	negs	r0, r0
}
 800bfb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  pObj->IsInitialized = 1U;
 800bfb6:	2301      	movs	r3, #1
  return NFCTAG_OK;
 800bfb8:	2000      	movs	r0, #0
  pObj->IsInitialized = 1U;
 800bfba:	6263      	str	r3, [r4, #36]	; 0x24
  return NFCTAG_OK;
 800bfbc:	e7fa      	b.n	800bfb4 <ST25DV_Init+0x22>

0800bfbe <ST25DV_GetGPOStatus>:
{
 800bfbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800bfc0:	466b      	mov	r3, sp
 800bfc2:	1ddd      	adds	r5, r3, #7
{
 800bfc4:	000c      	movs	r4, r1
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800bfc6:	3018      	adds	r0, #24
 800bfc8:	0029      	movs	r1, r5
 800bfca:	f000 f9fa 	bl	800c3c2 <ST25DV_GetGPO_ALL>
  if( status != NFCTAG_OK )
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d101      	bne.n	800bfd6 <ST25DV_GetGPOStatus+0x18>
  *pGPOStatus = (uint16_t)reg_value;
 800bfd2:	782b      	ldrb	r3, [r5, #0]
 800bfd4:	8023      	strh	r3, [r4, #0]
}
 800bfd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800bfd8 <ST25DV_ConfigureGPO>:
{
 800bfd8:	b507      	push	{r0, r1, r2, lr}
 800bfda:	466b      	mov	r3, sp
 800bfdc:	80d9      	strh	r1, [r3, #6]
 800bfde:	3306      	adds	r3, #6
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 800bfe0:	0019      	movs	r1, r3
 800bfe2:	3018      	adds	r0, #24
 800bfe4:	f000 f9f7 	bl	800c3d6 <ST25DV_SetGPO_ALL>
}
 800bfe8:	bd0e      	pop	{r1, r2, r3, pc}

0800bfea <ReadRegWrap>:
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
}

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 800bfea:	b510      	push	{r4, lr}
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800bfec:	6904      	ldr	r4, [r0, #16]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800bfee:	0488      	lsls	r0, r1, #18
 800bff0:	d502      	bpl.n	800bff8 <ReadRegWrap+0xe>
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800bff2:	20a6      	movs	r0, #166	; 0xa6
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800bff4:	47a0      	blx	r4
  }
}
 800bff6:	bd10      	pop	{r4, pc}
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800bff8:	20ae      	movs	r0, #174	; 0xae
 800bffa:	e7fb      	b.n	800bff4 <ReadRegWrap+0xa>

0800bffc <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	0005      	movs	r5, r0
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800c000:	68c4      	ldr	r4, [r0, #12]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800c002:	0488      	lsls	r0, r1, #18
 800c004:	d504      	bpl.n	800c010 <WriteRegWrap+0x14>
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800c006:	20a6      	movs	r0, #166	; 0xa6
 800c008:	47a0      	blx	r4
 800c00a:	0004      	movs	r4, r0
      ret = NFCTAG_TIMEOUT;
    }
  }

  return ret;
}
 800c00c:	0020      	movs	r0, r4
 800c00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800c010:	20ae      	movs	r0, #174	; 0xae
 800c012:	47a0      	blx	r4
 800c014:	1e04      	subs	r4, r0, #0
  if( ret == NFCTAG_OK )
 800c016:	d1f9      	bne.n	800c00c <WriteRegWrap+0x10>
    int32_t tickstart = pObj->IO.GetTick();
 800c018:	696b      	ldr	r3, [r5, #20]
 800c01a:	4798      	blx	r3
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c01c:	27a0      	movs	r7, #160	; 0xa0
    int32_t tickstart = pObj->IO.GetTick();
 800c01e:	0006      	movs	r6, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c020:	007f      	lsls	r7, r7, #1
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 800c022:	2101      	movs	r1, #1
 800c024:	68ab      	ldr	r3, [r5, #8]
 800c026:	20ae      	movs	r0, #174	; 0xae
 800c028:	4798      	blx	r3
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c02a:	696b      	ldr	r3, [r5, #20]
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 800c02c:	0004      	movs	r4, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c02e:	4798      	blx	r3
 800c030:	1b80      	subs	r0, r0, r6
 800c032:	42b8      	cmp	r0, r7
 800c034:	d202      	bcs.n	800c03c <WriteRegWrap+0x40>
 800c036:	2c00      	cmp	r4, #0
 800c038:	d1f3      	bne.n	800c022 <WriteRegWrap+0x26>
 800c03a:	e7e7      	b.n	800c00c <WriteRegWrap+0x10>
    if( pollstatus != NFCTAG_OK )
 800c03c:	2c00      	cmp	r4, #0
 800c03e:	d0e5      	beq.n	800c00c <WriteRegWrap+0x10>
      ret = NFCTAG_TIMEOUT;
 800c040:	2403      	movs	r4, #3
 800c042:	4264      	negs	r4, r4
 800c044:	e7e2      	b.n	800c00c <WriteRegWrap+0x10>
	...

0800c048 <ST25DV_RegisterBusIO>:
{
 800c048:	b510      	push	{r4, lr}
  if (pObj == NULL)
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d102      	bne.n	800c054 <ST25DV_RegisterBusIO+0xc>
    ret = NFCTAG_ERROR;
 800c04e:	2001      	movs	r0, #1
    } else if (pObj->IO.Init() != 0) {
 800c050:	4240      	negs	r0, r0
}
 800c052:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit      = pIO->DeInit;
 800c054:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init        = pIO->Init;
 800c056:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 800c058:	6042      	str	r2, [r0, #4]
    pObj->IO.Write       = pIO->Write;
 800c05a:	68ca      	ldr	r2, [r1, #12]
    pObj->IO.Init        = pIO->Init;
 800c05c:	6003      	str	r3, [r0, #0]
    pObj->IO.Write       = pIO->Write;
 800c05e:	60c2      	str	r2, [r0, #12]
    pObj->IO.Read        = pIO->Read;
 800c060:	690a      	ldr	r2, [r1, #16]
 800c062:	6102      	str	r2, [r0, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 800c064:	688a      	ldr	r2, [r1, #8]
 800c066:	6082      	str	r2, [r0, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 800c068:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800c06a:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick     = pIO->GetTick;
 800c06c:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800c06e:	4a05      	ldr	r2, [pc, #20]	; (800c084 <ST25DV_RegisterBusIO+0x3c>)
 800c070:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800c072:	4a05      	ldr	r2, [pc, #20]	; (800c088 <ST25DV_RegisterBusIO+0x40>)
 800c074:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init == NULL)
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0e9      	beq.n	800c04e <ST25DV_RegisterBusIO+0x6>
    } else if (pObj->IO.Init() != 0) {
 800c07a:	4798      	blx	r3
 800c07c:	1e43      	subs	r3, r0, #1
 800c07e:	4198      	sbcs	r0, r3
 800c080:	e7e6      	b.n	800c050 <ST25DV_RegisterBusIO+0x8>
 800c082:	46c0      	nop			; (mov r8, r8)
 800c084:	0800bfeb 	.word	0x0800bfeb
 800c088:	0800bffd 	.word	0x0800bffd

0800c08c <ST25DV_WriteRegister>:
{ 
 800c08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c08e:	0007      	movs	r7, r0
 800c090:	001e      	movs	r6, r3
 800c092:	b085      	sub	sp, #20
 800c094:	9100      	str	r1, [sp, #0]
 800c096:	9201      	str	r2, [sp, #4]
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800c098:	2380      	movs	r3, #128	; 0x80
 800c09a:	2500      	movs	r5, #0
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	429e      	cmp	r6, r3
 800c0a0:	d800      	bhi.n	800c0a4 <ST25DV_WriteRegister+0x18>
 800c0a2:	0035      	movs	r5, r6
 800c0a4:	b2eb      	uxtb	r3, r5
 800c0a6:	9303      	str	r3, [sp, #12]
    ret = pObj->IO.Write( ST25DV_ADDR_SYST_I2C, mem_addr, pdata_index,  split_data_nb);
 800c0a8:	23ff      	movs	r3, #255	; 0xff
 800c0aa:	401d      	ands	r5, r3
 800c0ac:	68fc      	ldr	r4, [r7, #12]
 800c0ae:	002b      	movs	r3, r5
 800c0b0:	20ae      	movs	r0, #174	; 0xae
 800c0b2:	9a00      	ldr	r2, [sp, #0]
 800c0b4:	9901      	ldr	r1, [sp, #4]
 800c0b6:	47a0      	blx	r4
 800c0b8:	1e04      	subs	r4, r0, #0
    if( ret == NFCTAG_OK )
 800c0ba:	d111      	bne.n	800c0e0 <ST25DV_WriteRegister+0x54>
      uint32_t tickstart = pObj->IO.GetTick();
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	4798      	blx	r3
 800c0c0:	9002      	str	r0, [sp, #8]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	20a6      	movs	r0, #166	; 0xa6
 800c0c8:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c0ca:	697b      	ldr	r3, [r7, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800c0cc:	0004      	movs	r4, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c0ce:	4798      	blx	r3
 800c0d0:	9b02      	ldr	r3, [sp, #8]
 800c0d2:	1ac0      	subs	r0, r0, r3
 800c0d4:	23a0      	movs	r3, #160	; 0xa0
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4298      	cmp	r0, r3
 800c0da:	d213      	bcs.n	800c104 <ST25DV_WriteRegister+0x78>
 800c0dc:	2c00      	cmp	r4, #0
 800c0de:	d1f0      	bne.n	800c0c2 <ST25DV_WriteRegister+0x36>
    pdata_index += split_data_nb;
 800c0e0:	9a03      	ldr	r2, [sp, #12]
 800c0e2:	9b00      	ldr	r3, [sp, #0]
 800c0e4:	4694      	mov	ip, r2
 800c0e6:	4463      	add	r3, ip
 800c0e8:	9300      	str	r3, [sp, #0]
    mem_addr += split_data_nb;
 800c0ea:	9b01      	ldr	r3, [sp, #4]
    bytes_to_write -= split_data_nb;
 800c0ec:	1b76      	subs	r6, r6, r5
    mem_addr += split_data_nb;
 800c0ee:	18ea      	adds	r2, r5, r3
 800c0f0:	b293      	uxth	r3, r2
    bytes_to_write -= split_data_nb;
 800c0f2:	b2b6      	uxth	r6, r6
    mem_addr += split_data_nb;
 800c0f4:	9301      	str	r3, [sp, #4]
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800c0f6:	2e00      	cmp	r6, #0
 800c0f8:	d001      	beq.n	800c0fe <ST25DV_WriteRegister+0x72>
 800c0fa:	2c00      	cmp	r4, #0
 800c0fc:	d0cc      	beq.n	800c098 <ST25DV_WriteRegister+0xc>
}
 800c0fe:	0020      	movs	r0, r4
 800c100:	b005      	add	sp, #20
 800c102:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( pollstatus != NFCTAG_OK )
 800c104:	2c00      	cmp	r4, #0
 800c106:	d0eb      	beq.n	800c0e0 <ST25DV_WriteRegister+0x54>
        ret = NFCTAG_TIMEOUT;
 800c108:	2403      	movs	r4, #3
 800c10a:	4264      	negs	r4, r4
 800c10c:	e7e8      	b.n	800c0e0 <ST25DV_WriteRegister+0x54>

0800c10e <ST25DV_PresentI2CPassword>:
{
 800c10e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c110:	000f      	movs	r7, r1
  uint8_t ai2c_message[17] = {0};
 800c112:	2100      	movs	r1, #0
{
 800c114:	b089      	sub	sp, #36	; 0x24
 800c116:	0004      	movs	r4, r0
 800c118:	0016      	movs	r6, r2
  uint8_t ai2c_message[17] = {0};
 800c11a:	a804      	add	r0, sp, #16
 800c11c:	220d      	movs	r2, #13
 800c11e:	9103      	str	r1, [sp, #12]
 800c120:	f009 ff1f 	bl	8015f62 <memset>
  ai2c_message[8] = 0x09;
 800c124:	2309      	movs	r3, #9
  uint8_t ai2c_message[17] = {0};
 800c126:	ad03      	add	r5, sp, #12
  ai2c_message[8] = 0x09;
 800c128:	722b      	strb	r3, [r5, #8]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c12a:	2218      	movs	r2, #24
 800c12c:	002b      	movs	r3, r5
 800c12e:	0031      	movs	r1, r6
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c130:	0038      	movs	r0, r7
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c132:	40d1      	lsrs	r1, r2
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c134:	40d0      	lsrs	r0, r2
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c136:	b2c9      	uxtb	r1, r1
  for( i = 0; i < 4; i++ )
 800c138:	3a08      	subs	r2, #8
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c13a:	7119      	strb	r1, [r3, #4]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 800c13c:	7359      	strb	r1, [r3, #13]
  for( i = 0; i < 4; i++ )
 800c13e:	0011      	movs	r1, r2
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c140:	b2c0      	uxtb	r0, r0
 800c142:	7018      	strb	r0, [r3, #0]
    ai2c_message[i + 9] = ai2c_message[i];
 800c144:	7258      	strb	r0, [r3, #9]
  for( i = 0; i < 4; i++ )
 800c146:	3301      	adds	r3, #1
 800c148:	3108      	adds	r1, #8
 800c14a:	d1f0      	bne.n	800c12e <ST25DV_PresentI2CPassword+0x20>
  return ST25DV_WriteRegister(pObj, ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 800c14c:	2290      	movs	r2, #144	; 0x90
 800c14e:	2311      	movs	r3, #17
 800c150:	0029      	movs	r1, r5
 800c152:	0020      	movs	r0, r4
 800c154:	0112      	lsls	r2, r2, #4
 800c156:	f7ff ff99 	bl	800c08c <ST25DV_WriteRegister>
}
 800c15a:	b009      	add	sp, #36	; 0x24
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c15e <ST25DV_ReadEHMode>:
{
 800c15e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetEH_MODE( &(pObj->Ctx), &reg_value);
 800c160:	466b      	mov	r3, sp
 800c162:	1ddd      	adds	r5, r3, #7
{
 800c164:	000c      	movs	r4, r1
  status = ST25DV_GetEH_MODE( &(pObj->Ctx), &reg_value);
 800c166:	3018      	adds	r0, #24
 800c168:	0029      	movs	r1, r5
 800c16a:	f000 f93e 	bl	800c3ea <ST25DV_GetEH_MODE>
  if( status != NFCTAG_OK )
 800c16e:	2800      	cmp	r0, #0
 800c170:	d104      	bne.n	800c17c <ST25DV_ReadEHMode+0x1e>
  if( reg_value )
 800c172:	782b      	ldrb	r3, [r5, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <ST25DV_ReadEHMode+0x20>
    *pEH_mode = ST25DV_EH_ON_DEMAND;
 800c178:	2301      	movs	r3, #1
 800c17a:	7023      	strb	r3, [r4, #0]
}
 800c17c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pEH_mode = ST25DV_EH_ACTIVE_AFTER_BOOT;
 800c17e:	7020      	strb	r0, [r4, #0]
 800c180:	e7fc      	b.n	800c17c <ST25DV_ReadEHMode+0x1e>

0800c182 <ST25DV_WriteEHMode>:
{
 800c182:	b507      	push	{r0, r1, r2, lr}
  reg_value = (uint8_t)EH_mode;
 800c184:	466b      	mov	r3, sp
 800c186:	71d9      	strb	r1, [r3, #7]
 800c188:	3307      	adds	r3, #7
  return ST25DV_SetEH_MODE(&(pObj->Ctx), &reg_value);
 800c18a:	0019      	movs	r1, r3
 800c18c:	3018      	adds	r0, #24
 800c18e:	f000 f93d 	bl	800c40c <ST25DV_SetEH_MODE>
}
 800c192:	bd0e      	pop	{r1, r2, r3, pc}

0800c194 <ST25DV_ReadRFMngt>:
{
 800c194:	b513      	push	{r0, r1, r4, lr}
  uint8_t reg_value = 0;
 800c196:	466a      	mov	r2, sp
 800c198:	2300      	movs	r3, #0
{
 800c19a:	000c      	movs	r4, r1
  status = ST25DV_GetRF_MNGT_ALL(&(pObj->Ctx), &reg_value);
 800c19c:	3018      	adds	r0, #24
 800c19e:	1dd1      	adds	r1, r2, #7
  uint8_t reg_value = 0;
 800c1a0:	71d3      	strb	r3, [r2, #7]
  status = ST25DV_GetRF_MNGT_ALL(&(pObj->Ctx), &reg_value);
 800c1a2:	f000 f975 	bl	800c490 <ST25DV_GetRF_MNGT_ALL>
  if( status == NFCTAG_OK )
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d108      	bne.n	800c1bc <ST25DV_ReadRFMngt+0x28>
    if( (reg_value & ST25DV_RF_MNGT_RFDIS_MASK) == ST25DV_RF_MNGT_RFDIS_MASK )
 800c1aa:	466b      	mov	r3, sp
 800c1ac:	79da      	ldrb	r2, [r3, #7]
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	0011      	movs	r1, r2
 800c1b2:	4019      	ands	r1, r3
 800c1b4:	7021      	strb	r1, [r4, #0]
    if( (reg_value & ST25DV_RF_MNGT_RFSLEEP_MASK) == ST25DV_RF_MNGT_RFSLEEP_MASK )
 800c1b6:	0792      	lsls	r2, r2, #30
 800c1b8:	d501      	bpl.n	800c1be <ST25DV_ReadRFMngt+0x2a>
      pRF_Mngt->RfSleep = ST25DV_ENABLE;
 800c1ba:	7063      	strb	r3, [r4, #1]
}
 800c1bc:	bd16      	pop	{r1, r2, r4, pc}
      pRF_Mngt->RfSleep = ST25DV_DISABLE;
 800c1be:	7060      	strb	r0, [r4, #1]
  return status;
 800c1c0:	e7fc      	b.n	800c1bc <ST25DV_ReadRFMngt+0x28>

0800c1c2 <ST25DV_WriteRFMngt>:
{
 800c1c2:	b507      	push	{r0, r1, r2, lr}
 800c1c4:	466b      	mov	r3, sp
 800c1c6:	71d9      	strb	r1, [r3, #7]
 800c1c8:	3307      	adds	r3, #7
  return ST25DV_SetRF_MNGT_ALL(&(pObj->Ctx), &Rfmngt);
 800c1ca:	0019      	movs	r1, r3
 800c1cc:	3018      	adds	r0, #24
 800c1ce:	f000 f970 	bl	800c4b2 <ST25DV_SetRF_MNGT_ALL>
}
 800c1d2:	bd0e      	pop	{r1, r2, r3, pc}

0800c1d4 <ST25DV_ReadMBMode>:
{
 800c1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800c1d6:	466b      	mov	r3, sp
 800c1d8:	1ddd      	adds	r5, r3, #7
{
 800c1da:	000c      	movs	r4, r1
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800c1dc:	3018      	adds	r0, #24
 800c1de:	0029      	movs	r1, r5
 800c1e0:	f000 f86b 	bl	800c2ba <ST25DV_GetMB_MODE_RW>
  if( status != NFCTAG_OK )
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d104      	bne.n	800c1f2 <ST25DV_ReadMBMode+0x1e>
  if( reg_value  )
 800c1e8:	782b      	ldrb	r3, [r5, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d002      	beq.n	800c1f4 <ST25DV_ReadMBMode+0x20>
    *pMB_mode = ST25DV_ENABLE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	7023      	strb	r3, [r4, #0]
}
 800c1f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pMB_mode = ST25DV_DISABLE;
 800c1f4:	7020      	strb	r0, [r4, #0]
 800c1f6:	e7fc      	b.n	800c1f2 <ST25DV_ReadMBMode+0x1e>

0800c1f8 <ST25DV_WriteMBMode>:
{
 800c1f8:	b507      	push	{r0, r1, r2, lr}
  reg_value = (uint8_t)MB_mode;
 800c1fa:	466b      	mov	r3, sp
 800c1fc:	71d9      	strb	r1, [r3, #7]
 800c1fe:	3307      	adds	r3, #7
  status = ST25DV_SetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800c200:	0019      	movs	r1, r3
 800c202:	3018      	adds	r0, #24
 800c204:	f000 f86a 	bl	800c2dc <ST25DV_SetMB_MODE_RW>
}
 800c208:	bd0e      	pop	{r1, r2, r3, pc}

0800c20a <ST25DV_ReadMBWDG>:
{
 800c20a:	b510      	push	{r4, lr}
  status = ST25DV_GetMB_WDG_DELAY(&(pObj->Ctx), pWdgDelay);
 800c20c:	3018      	adds	r0, #24
 800c20e:	f000 f8a7 	bl	800c360 <ST25DV_GetMB_WDG_DELAY>
}
 800c212:	bd10      	pop	{r4, pc}

0800c214 <ST25DV_WriteMBWDG>:
{
 800c214:	b507      	push	{r0, r1, r2, lr}
 800c216:	466b      	mov	r3, sp
 800c218:	71d9      	strb	r1, [r3, #7]
 800c21a:	3307      	adds	r3, #7
  return ST25DV_SetMB_WDG_DELAY(&(pObj->Ctx), &WdgDelay);
 800c21c:	0019      	movs	r1, r3
 800c21e:	3018      	adds	r0, #24
 800c220:	f000 f8af 	bl	800c382 <ST25DV_SetMB_WDG_DELAY>
}
 800c224:	bd0e      	pop	{r1, r2, r3, pc}

0800c226 <ST25DV_ReadI2CSecuritySession_Dyn>:
{
 800c226:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetI2C_SSO_DYN_I2CSSO(&(pObj->Ctx), &reg_value);
 800c228:	466b      	mov	r3, sp
 800c22a:	1ddd      	adds	r5, r3, #7
{
 800c22c:	000c      	movs	r4, r1
  status = ST25DV_GetI2C_SSO_DYN_I2CSSO(&(pObj->Ctx), &reg_value);
 800c22e:	3018      	adds	r0, #24
 800c230:	0029      	movs	r1, r5
 800c232:	f000 f97f 	bl	800c534 <ST25DV_GetI2C_SSO_DYN_I2CSSO>
  if( status != NFCTAG_OK )
 800c236:	2800      	cmp	r0, #0
 800c238:	d104      	bne.n	800c244 <ST25DV_ReadI2CSecuritySession_Dyn+0x1e>
  if( reg_value )
 800c23a:	782b      	ldrb	r3, [r5, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d002      	beq.n	800c246 <ST25DV_ReadI2CSecuritySession_Dyn+0x20>
    *pSession = ST25DV_SESSION_OPEN;
 800c240:	2301      	movs	r3, #1
 800c242:	7023      	strb	r3, [r4, #0]
}
 800c244:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pSession = ST25DV_SESSION_CLOSED;
 800c246:	7020      	strb	r0, [r4, #0]
 800c248:	e7fc      	b.n	800c244 <ST25DV_ReadI2CSecuritySession_Dyn+0x1e>

0800c24a <ST25DV_ResetEHENMode_Dyn>:
{
 800c24a:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 800c24c:	466b      	mov	r3, sp
 800c24e:	1dd9      	adds	r1, r3, #7
 800c250:	2300      	movs	r3, #0
  return ST25DV_SetEH_CTRL_DYN_EH_EN(&(pObj->Ctx), &reg_value);
 800c252:	3018      	adds	r0, #24
  uint8_t reg_value = 0;
 800c254:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetEH_CTRL_DYN_EH_EN(&(pObj->Ctx), &reg_value);
 800c256:	f000 f8f9 	bl	800c44c <ST25DV_SetEH_CTRL_DYN_EH_EN>
}
 800c25a:	bd0e      	pop	{r1, r2, r3, pc}

0800c25c <ST25DV_WriteRFMngt_Dyn>:
{
 800c25c:	b507      	push	{r0, r1, r2, lr}
 800c25e:	466b      	mov	r3, sp
 800c260:	71d9      	strb	r1, [r3, #7]
 800c262:	3307      	adds	r3, #7
  return ST25DV_SetRF_MNGT_DYN_ALL(&(pObj->Ctx), &RF_Mngt);
 800c264:	0019      	movs	r1, r3
 800c266:	3018      	adds	r0, #24
 800c268:	f000 f942 	bl	800c4f0 <ST25DV_SetRF_MNGT_DYN_ALL>
}
 800c26c:	bd0e      	pop	{r1, r2, r3, pc}

0800c26e <ST25DV_SetMBEN_Dyn>:
{
 800c26e:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 1;
 800c270:	466b      	mov	r3, sp
 800c272:	1dd9      	adds	r1, r3, #7
 800c274:	2301      	movs	r3, #1
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c276:	3018      	adds	r0, #24
  uint8_t reg_value = 1;
 800c278:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c27a:	f000 f84f 	bl	800c31c <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800c27e:	bd0e      	pop	{r1, r2, r3, pc}

0800c280 <ST25DV_ResetMBEN_Dyn>:
{
 800c280:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 800c282:	466b      	mov	r3, sp
 800c284:	1dd9      	adds	r1, r3, #7
 800c286:	2300      	movs	r3, #0
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c288:	3018      	adds	r0, #24
  uint8_t reg_value = 0;
 800c28a:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c28c:	f000 f846 	bl	800c31c <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800c290:	bd0e      	pop	{r1, r2, r3, pc}

0800c292 <ST25DV_ReadReg>:
#include "st25dv_reg.h"

int32_t ST25DV_ReadReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t* Data, uint16_t len)
{
 800c292:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800c294:	6844      	ldr	r4, [r0, #4]
 800c296:	6880      	ldr	r0, [r0, #8]
 800c298:	47a0      	blx	r4
}
 800c29a:	bd10      	pop	{r4, pc}

0800c29c <ST25DV_WriteReg>:

int32_t ST25DV_WriteReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t const *Data, uint16_t len)
{
 800c29c:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800c29e:	6804      	ldr	r4, [r0, #0]
 800c2a0:	6880      	ldr	r0, [r0, #8]
 800c2a2:	47a0      	blx	r4
}
 800c2a4:	bd10      	pop	{r4, pc}

0800c2a6 <ST25DV_GetICREF>:


/**** Copy generated code hereafter ****/
int32_t ST25DV_GetICREF (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c2a6:	000a      	movs	r2, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 800c2a8:	2301      	movs	r3, #1
{
 800c2aa:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 800c2ac:	2117      	movs	r1, #23
 800c2ae:	f7ff fff0 	bl	800c292 <ST25DV_ReadReg>
 800c2b2:	1e43      	subs	r3, r0, #1
 800c2b4:	4198      	sbcs	r0, r3
 800c2b6:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c2b8:	bd10      	pop	{r4, pc}

0800c2ba <ST25DV_GetMB_MODE_RW>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_MODE_RW (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c2ba:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 800c2bc:	000a      	movs	r2, r1
{
 800c2be:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	210d      	movs	r1, #13
 800c2c4:	f7ff ffe5 	bl	800c292 <ST25DV_ReadReg>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d104      	bne.n	800c2d6 <ST25DV_GetMB_MODE_RW+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_MB_MODE_RW_MASK);
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	7823      	ldrb	r3, [r4, #0]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_MB_MODE_RW_SHIFT);
  return NFCTAG_OK;
}
 800c2d4:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	4240      	negs	r0, r0
 800c2da:	e7fb      	b.n	800c2d4 <ST25DV_GetMB_MODE_RW+0x1a>

0800c2dc <ST25DV_SetMB_MODE_RW>:

int32_t ST25DV_SetMB_MODE_RW (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c2de:	466a      	mov	r2, sp
{
 800c2e0:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	210d      	movs	r1, #13
 800c2e6:	3207      	adds	r2, #7
{
 800c2e8:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c2ea:	f7ff ffd2 	bl	800c292 <ST25DV_ReadReg>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d112      	bne.n	800c318 <ST25DV_SetMB_MODE_RW+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800c2f2:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800c2f4:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800c2f6:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800c2f8:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800c2fa:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800c2fc:	401a      	ands	r2, r3
 800c2fe:	430a      	orrs	r2, r1
 800c300:	4669      	mov	r1, sp
 800c302:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c304:	466a      	mov	r2, sp
 800c306:	210d      	movs	r1, #13
 800c308:	0020      	movs	r0, r4
 800c30a:	3207      	adds	r2, #7
 800c30c:	f7ff ffc6 	bl	800c29c <ST25DV_WriteReg>
 800c310:	1e43      	subs	r3, r0, #1
 800c312:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c314:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c316:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c318:	2001      	movs	r0, #1
 800c31a:	e7fb      	b.n	800c314 <ST25DV_SetMB_MODE_RW+0x38>

0800c31c <ST25DV_SetMB_CTRL_DYN_MBEN>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_MBEN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_CTRL_DYN_MBEN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c31e:	466a      	mov	r2, sp
{
 800c320:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c322:	2301      	movs	r3, #1
 800c324:	490d      	ldr	r1, [pc, #52]	; (800c35c <ST25DV_SetMB_CTRL_DYN_MBEN+0x40>)
 800c326:	3207      	adds	r2, #7
{
 800c328:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c32a:	f7ff ffb2 	bl	800c292 <ST25DV_ReadReg>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d112      	bne.n	800c358 <ST25DV_SetMB_CTRL_DYN_MBEN+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800c332:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800c334:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800c336:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800c338:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800c33a:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800c33c:	401a      	ands	r2, r3
 800c33e:	430a      	orrs	r2, r1
 800c340:	4669      	mov	r1, sp
 800c342:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c344:	466a      	mov	r2, sp
 800c346:	0020      	movs	r0, r4
 800c348:	4904      	ldr	r1, [pc, #16]	; (800c35c <ST25DV_SetMB_CTRL_DYN_MBEN+0x40>)
 800c34a:	3207      	adds	r2, #7
 800c34c:	f7ff ffa6 	bl	800c29c <ST25DV_WriteReg>
 800c350:	1e43      	subs	r3, r0, #1
 800c352:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c354:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c356:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c358:	2001      	movs	r0, #1
 800c35a:	e7fb      	b.n	800c354 <ST25DV_SetMB_CTRL_DYN_MBEN+0x38>
 800c35c:	00002006 	.word	0x00002006

0800c360 <ST25DV_GetMB_WDG_DELAY>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c360:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), (uint8_t *)value, 1))
 800c362:	000a      	movs	r2, r1
{
 800c364:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), (uint8_t *)value, 1))
 800c366:	2301      	movs	r3, #1
 800c368:	210e      	movs	r1, #14
 800c36a:	f7ff ff92 	bl	800c292 <ST25DV_ReadReg>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d104      	bne.n	800c37c <ST25DV_GetMB_WDG_DELAY+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_MB_WDG_DELAY_MASK);
 800c372:	2207      	movs	r2, #7
 800c374:	7823      	ldrb	r3, [r4, #0]
 800c376:	4013      	ands	r3, r2
 800c378:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_MB_WDG_DELAY_SHIFT);
  return NFCTAG_OK;
}
 800c37a:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c37c:	2001      	movs	r0, #1
 800c37e:	4240      	negs	r0, r0
 800c380:	e7fb      	b.n	800c37a <ST25DV_GetMB_WDG_DELAY+0x1a>

0800c382 <ST25DV_SetMB_WDG_DELAY>:

int32_t ST25DV_SetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c382:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c384:	466a      	mov	r2, sp
{
 800c386:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c388:	2301      	movs	r3, #1
 800c38a:	210e      	movs	r1, #14
 800c38c:	3207      	adds	r2, #7
{
 800c38e:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c390:	f7ff ff7f 	bl	800c292 <ST25DV_ReadReg>
 800c394:	2800      	cmp	r0, #0
 800c396:	d112      	bne.n	800c3be <ST25DV_SetMB_WDG_DELAY+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800c398:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c39a:	2107      	movs	r1, #7
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800c39c:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c39e:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800c3a0:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c3a2:	400b      	ands	r3, r1
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	466a      	mov	r2, sp

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c3a8:	0020      	movs	r0, r4
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c3aa:	71d3      	strb	r3, [r2, #7]
  if( ST25DV_WriteReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	1852      	adds	r2, r2, r1
 800c3b0:	1849      	adds	r1, r1, r1
 800c3b2:	f7ff ff73 	bl	800c29c <ST25DV_WriteReg>
 800c3b6:	1e43      	subs	r3, r0, #1
 800c3b8:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c3ba:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c3bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c3be:	2001      	movs	r0, #1
 800c3c0:	e7fb      	b.n	800c3ba <ST25DV_SetMB_WDG_DELAY+0x38>

0800c3c2 <ST25DV_GetGPO_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c3c2:	000a      	movs	r2, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 800c3c4:	2301      	movs	r3, #1
{
 800c3c6:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	f7ff ff62 	bl	800c292 <ST25DV_ReadReg>
 800c3ce:	1e43      	subs	r3, r0, #1
 800c3d0:	4198      	sbcs	r0, r3
 800c3d2:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c3d4:	bd10      	pop	{r4, pc}

0800c3d6 <ST25DV_SetGPO_ALL>:

int32_t ST25DV_SetGPO_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c3d6:	000a      	movs	r2, r1
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 800c3d8:	2301      	movs	r3, #1
{
 800c3da:	b510      	push	{r4, lr}
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 800c3dc:	2100      	movs	r1, #0
 800c3de:	f7ff ff5d 	bl	800c29c <ST25DV_WriteReg>
 800c3e2:	1e43      	subs	r3, r0, #1
 800c3e4:	4198      	sbcs	r0, r3
 800c3e6:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c3e8:	bd10      	pop	{r4, pc}

0800c3ea <ST25DV_GetEH_MODE>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetEH_MODE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c3ea:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800c3ec:	000a      	movs	r2, r1
{
 800c3ee:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	2102      	movs	r1, #2
 800c3f4:	f7ff ff4d 	bl	800c292 <ST25DV_ReadReg>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d104      	bne.n	800c406 <ST25DV_GetEH_MODE+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_EH_MODE_MASK);
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	7823      	ldrb	r3, [r4, #0]
 800c400:	4013      	ands	r3, r2
 800c402:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_EH_MODE_SHIFT);
  return NFCTAG_OK;
}
 800c404:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c406:	2001      	movs	r0, #1
 800c408:	4240      	negs	r0, r0
 800c40a:	e7fb      	b.n	800c404 <ST25DV_GetEH_MODE+0x1a>

0800c40c <ST25DV_SetEH_MODE>:

int32_t ST25DV_SetEH_MODE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c40e:	466a      	mov	r2, sp
{
 800c410:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c412:	2301      	movs	r3, #1
 800c414:	2102      	movs	r1, #2
 800c416:	3207      	adds	r2, #7
{
 800c418:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c41a:	f7ff ff3a 	bl	800c292 <ST25DV_ReadReg>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d112      	bne.n	800c448 <ST25DV_SetEH_MODE+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800c422:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800c424:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800c426:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800c428:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800c42a:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800c42c:	401a      	ands	r2, r3
 800c42e:	430a      	orrs	r2, r1
 800c430:	4669      	mov	r1, sp
 800c432:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c434:	466a      	mov	r2, sp
 800c436:	2102      	movs	r1, #2
 800c438:	0020      	movs	r0, r4
 800c43a:	3207      	adds	r2, #7
 800c43c:	f7ff ff2e 	bl	800c29c <ST25DV_WriteReg>
 800c440:	1e43      	subs	r3, r0, #1
 800c442:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c444:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c446:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c448:	2001      	movs	r0, #1
 800c44a:	e7fb      	b.n	800c444 <ST25DV_SetEH_MODE+0x38>

0800c44c <ST25DV_SetEH_CTRL_DYN_EH_EN>:
  *value = *value >> (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetEH_CTRL_DYN_EH_EN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c44e:	466a      	mov	r2, sp
{
 800c450:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c452:	2301      	movs	r3, #1
 800c454:	490d      	ldr	r1, [pc, #52]	; (800c48c <ST25DV_SetEH_CTRL_DYN_EH_EN+0x40>)
 800c456:	3207      	adds	r2, #7
{
 800c458:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c45a:	f7ff ff1a 	bl	800c292 <ST25DV_ReadReg>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d112      	bne.n	800c488 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800c462:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800c464:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800c466:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800c468:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800c46a:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800c46c:	401a      	ands	r2, r3
 800c46e:	430a      	orrs	r2, r1
 800c470:	4669      	mov	r1, sp
 800c472:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c474:	466a      	mov	r2, sp
 800c476:	0020      	movs	r0, r4
 800c478:	4904      	ldr	r1, [pc, #16]	; (800c48c <ST25DV_SetEH_CTRL_DYN_EH_EN+0x40>)
 800c47a:	3207      	adds	r2, #7
 800c47c:	f7ff ff0e 	bl	800c29c <ST25DV_WriteReg>
 800c480:	1e43      	subs	r3, r0, #1
 800c482:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c484:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c486:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c488:	2001      	movs	r0, #1
 800c48a:	e7fb      	b.n	800c484 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x38>
 800c48c:	00002002 	.word	0x00002002

0800c490 <ST25DV_GetRF_MNGT_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetRF_MNGT_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c490:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), (uint8_t *)value, 1))
 800c492:	000a      	movs	r2, r1
{
 800c494:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), (uint8_t *)value, 1))
 800c496:	2301      	movs	r3, #1
 800c498:	2103      	movs	r1, #3
 800c49a:	f7ff fefa 	bl	800c292 <ST25DV_ReadReg>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d104      	bne.n	800c4ac <ST25DV_GetRF_MNGT_ALL+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_RF_MNGT_ALL_MASK);
 800c4a2:	2203      	movs	r2, #3
 800c4a4:	7823      	ldrb	r3, [r4, #0]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_RF_MNGT_ALL_SHIFT);
  return NFCTAG_OK;
}
 800c4aa:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	4240      	negs	r0, r0
 800c4b0:	e7fb      	b.n	800c4aa <ST25DV_GetRF_MNGT_ALL+0x1a>

0800c4b2 <ST25DV_SetRF_MNGT_ALL>:

int32_t ST25DV_SetRF_MNGT_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c4b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c4b4:	466a      	mov	r2, sp
{
 800c4b6:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	2103      	movs	r1, #3
 800c4bc:	3207      	adds	r2, #7
{
 800c4be:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c4c0:	f7ff fee7 	bl	800c292 <ST25DV_ReadReg>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d111      	bne.n	800c4ec <ST25DV_SetRF_MNGT_ALL+0x3a>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800c4c8:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c4ca:	2103      	movs	r1, #3
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800c4cc:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c4ce:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800c4d0:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c4d2:	400b      	ands	r3, r1
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	466a      	mov	r2, sp

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c4d8:	0020      	movs	r0, r4
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c4da:	71d3      	strb	r3, [r2, #7]
  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c4dc:	2301      	movs	r3, #1
 800c4de:	3207      	adds	r2, #7
 800c4e0:	f7ff fedc 	bl	800c29c <ST25DV_WriteReg>
 800c4e4:	1e43      	subs	r3, r0, #1
 800c4e6:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c4e8:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c4ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	e7fb      	b.n	800c4e8 <ST25DV_SetRF_MNGT_ALL+0x36>

0800c4f0 <ST25DV_SetRF_MNGT_DYN_ALL>:
  *value = *value >> (ST25DV_RF_MNGT_DYN_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRF_MNGT_DYN_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c4f2:	466a      	mov	r2, sp
{
 800c4f4:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	490d      	ldr	r1, [pc, #52]	; (800c530 <ST25DV_SetRF_MNGT_DYN_ALL+0x40>)
 800c4fa:	3207      	adds	r2, #7
{
 800c4fc:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c4fe:	f7ff fec8 	bl	800c292 <ST25DV_ReadReg>
 800c502:	2800      	cmp	r0, #0
 800c504:	d112      	bne.n	800c52c <ST25DV_SetRF_MNGT_DYN_ALL+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800c506:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c508:	2103      	movs	r1, #3
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800c50a:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c50c:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800c50e:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c510:	400b      	ands	r3, r1
 800c512:	4313      	orrs	r3, r2
 800c514:	466a      	mov	r2, sp

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c516:	0020      	movs	r0, r4
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c518:	71d3      	strb	r3, [r2, #7]
  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c51a:	4905      	ldr	r1, [pc, #20]	; (800c530 <ST25DV_SetRF_MNGT_DYN_ALL+0x40>)
 800c51c:	2301      	movs	r3, #1
 800c51e:	3207      	adds	r2, #7
 800c520:	f7ff febc 	bl	800c29c <ST25DV_WriteReg>
 800c524:	1e43      	subs	r3, r0, #1
 800c526:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c528:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c52a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c52c:	2001      	movs	r0, #1
 800c52e:	e7fb      	b.n	800c528 <ST25DV_SetRF_MNGT_DYN_ALL+0x38>
 800c530:	00002003 	.word	0x00002003

0800c534 <ST25DV_GetI2C_SSO_DYN_I2CSSO>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetI2C_SSO_DYN_I2CSSO (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c534:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_I2C_SSO_DYN_REG), (uint8_t *)value, 1))
 800c536:	000a      	movs	r2, r1
{
 800c538:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_I2C_SSO_DYN_REG), (uint8_t *)value, 1))
 800c53a:	2301      	movs	r3, #1
 800c53c:	4906      	ldr	r1, [pc, #24]	; (800c558 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x24>)
 800c53e:	f7ff fea8 	bl	800c292 <ST25DV_ReadReg>
 800c542:	2800      	cmp	r0, #0
 800c544:	d104      	bne.n	800c550 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_I2C_SSO_DYN_I2CSSO_MASK);
 800c546:	2201      	movs	r2, #1
 800c548:	7823      	ldrb	r3, [r4, #0]
 800c54a:	4013      	ands	r3, r2
 800c54c:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_I2C_SSO_DYN_I2CSSO_SHIFT);
  return NFCTAG_OK;
}
 800c54e:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c550:	2001      	movs	r0, #1
 800c552:	4240      	negs	r0, r0
 800c554:	e7fb      	b.n	800c54e <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x1a>
 800c556:	46c0      	nop			; (mov r8, r8)
 800c558:	00002004 	.word	0x00002004

0800c55c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c55c:	b570      	push	{r4, r5, r6, lr}
 800c55e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c560:	20fa      	movs	r0, #250	; 0xfa
 800c562:	4b0d      	ldr	r3, [pc, #52]	; (800c598 <HAL_InitTick+0x3c>)
 800c564:	0080      	lsls	r0, r0, #2
 800c566:	7819      	ldrb	r1, [r3, #0]
 800c568:	f7f3 fdfe 	bl	8000168 <__udivsi3>
 800c56c:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <HAL_InitTick+0x40>)
 800c56e:	0001      	movs	r1, r0
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f7f3 fdf9 	bl	8000168 <__udivsi3>
 800c576:	f000 fb99 	bl	800ccac <HAL_SYSTICK_Config>
 800c57a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800c57c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c57e:	2c00      	cmp	r4, #0
 800c580:	d109      	bne.n	800c596 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c582:	2d03      	cmp	r5, #3
 800c584:	d807      	bhi.n	800c596 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c586:	3802      	subs	r0, #2
 800c588:	0022      	movs	r2, r4
 800c58a:	0029      	movs	r1, r5
 800c58c:	f000 fb4a 	bl	800cc24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c590:	0020      	movs	r0, r4
 800c592:	4b03      	ldr	r3, [pc, #12]	; (800c5a0 <HAL_InitTick+0x44>)
 800c594:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	200000d4 	.word	0x200000d4
 800c59c:	200001cc 	.word	0x200001cc
 800c5a0:	200000d8 	.word	0x200000d8

0800c5a4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800c5a4:	2340      	movs	r3, #64	; 0x40
 800c5a6:	4a08      	ldr	r2, [pc, #32]	; (800c5c8 <HAL_Init+0x24>)
{
 800c5a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800c5aa:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c5ac:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800c5ae:	430b      	orrs	r3, r1
 800c5b0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c5b2:	f7ff ffd3 	bl	800c55c <HAL_InitTick>
 800c5b6:	1e04      	subs	r4, r0, #0
 800c5b8:	d103      	bne.n	800c5c2 <HAL_Init+0x1e>
    HAL_MspInit();
 800c5ba:	f007 fdf7 	bl	80141ac <HAL_MspInit>
}
 800c5be:	0020      	movs	r0, r4
 800c5c0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800c5c2:	2401      	movs	r4, #1
 800c5c4:	e7fb      	b.n	800c5be <HAL_Init+0x1a>
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	40022000 	.word	0x40022000

0800c5cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800c5cc:	4a03      	ldr	r2, [pc, #12]	; (800c5dc <HAL_IncTick+0x10>)
 800c5ce:	4b04      	ldr	r3, [pc, #16]	; (800c5e0 <HAL_IncTick+0x14>)
 800c5d0:	6811      	ldr	r1, [r2, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	185b      	adds	r3, r3, r1
 800c5d6:	6013      	str	r3, [r2, #0]
}
 800c5d8:	4770      	bx	lr
 800c5da:	46c0      	nop			; (mov r8, r8)
 800c5dc:	2000176c 	.word	0x2000176c
 800c5e0:	200000d4 	.word	0x200000d4

0800c5e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800c5e4:	4b01      	ldr	r3, [pc, #4]	; (800c5ec <HAL_GetTick+0x8>)
 800c5e6:	6818      	ldr	r0, [r3, #0]
}
 800c5e8:	4770      	bx	lr
 800c5ea:	46c0      	nop			; (mov r8, r8)
 800c5ec:	2000176c 	.word	0x2000176c

0800c5f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c5f4:	f7ff fff6 	bl	800c5e4 <HAL_GetTick>
 800c5f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c5fa:	1c63      	adds	r3, r4, #1
 800c5fc:	d002      	beq.n	800c604 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800c5fe:	4b04      	ldr	r3, [pc, #16]	; (800c610 <HAL_Delay+0x20>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c604:	f7ff ffee 	bl	800c5e4 <HAL_GetTick>
 800c608:	1b40      	subs	r0, r0, r5
 800c60a:	42a0      	cmp	r0, r4
 800c60c:	d3fa      	bcc.n	800c604 <HAL_Delay+0x14>
  {
  }
}
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	200000d4 	.word	0x200000d4

0800c614 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800c614:	4b01      	ldr	r3, [pc, #4]	; (800c61c <HAL_GetUIDw1+0x8>)
 800c616:	6818      	ldr	r0, [r3, #0]
}
 800c618:	4770      	bx	lr
 800c61a:	46c0      	nop			; (mov r8, r8)
 800c61c:	1ff80054 	.word	0x1ff80054

0800c620 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800c620:	4b01      	ldr	r3, [pc, #4]	; (800c628 <HAL_GetUIDw2+0x8>)
 800c622:	6818      	ldr	r0, [r3, #0]
}
 800c624:	4770      	bx	lr
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	1ff80064 	.word	0x1ff80064

0800c62c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c62c:	4b08      	ldr	r3, [pc, #32]	; (800c650 <ADC_DelayMicroSecond+0x24>)
{
 800c62e:	b513      	push	{r0, r1, r4, lr}
 800c630:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c632:	4908      	ldr	r1, [pc, #32]	; (800c654 <ADC_DelayMicroSecond+0x28>)
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f7f3 fd97 	bl	8000168 <__udivsi3>
 800c63a:	4344      	muls	r4, r0
 800c63c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d100      	bne.n	800c646 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800c644:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	3b01      	subs	r3, #1
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	e7f7      	b.n	800c63e <ADC_DelayMicroSecond+0x12>
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	200001cc 	.word	0x200001cc
 800c654:	000f4240 	.word	0x000f4240

0800c658 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c658:	2103      	movs	r1, #3
 800c65a:	6803      	ldr	r3, [r0, #0]
{
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c660:	6898      	ldr	r0, [r3, #8]
 800c662:	4008      	ands	r0, r1
 800c664:	2801      	cmp	r0, #1
 800c666:	d001      	beq.n	800c66c <ADC_Disable+0x14>
  return HAL_OK;
 800c668:	2000      	movs	r0, #0
}
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	4202      	tst	r2, r0
 800c670:	d0fa      	beq.n	800c668 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800c672:	2205      	movs	r2, #5
 800c674:	689d      	ldr	r5, [r3, #8]
 800c676:	4015      	ands	r5, r2
 800c678:	2d01      	cmp	r5, #1
 800c67a:	d119      	bne.n	800c6b0 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 800c67c:	6898      	ldr	r0, [r3, #8]
 800c67e:	3a03      	subs	r2, #3
 800c680:	4302      	orrs	r2, r0
 800c682:	609a      	str	r2, [r3, #8]
 800c684:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800c686:	f7ff ffad 	bl	800c5e4 <HAL_GetTick>
 800c68a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	422b      	tst	r3, r5
 800c692:	d0e9      	beq.n	800c668 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c694:	f7ff ffa6 	bl	800c5e4 <HAL_GetTick>
 800c698:	1b80      	subs	r0, r0, r6
 800c69a:	280a      	cmp	r0, #10
 800c69c:	d9f6      	bls.n	800c68c <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c69e:	2310      	movs	r3, #16
 800c6a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800c6a2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6aa:	431d      	orrs	r5, r3
 800c6ac:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800c6ae:	e7dc      	b.n	800c66a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6b0:	2310      	movs	r3, #16
 800c6b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6ba:	4303      	orrs	r3, r0
 800c6bc:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800c6be:	e7d4      	b.n	800c66a <ADC_Disable+0x12>

0800c6c0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c6c0:	2103      	movs	r1, #3
 800c6c2:	6803      	ldr	r3, [r0, #0]
{
 800c6c4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c6c6:	689a      	ldr	r2, [r3, #8]
{
 800c6c8:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c6ca:	400a      	ands	r2, r1
 800c6cc:	2a01      	cmp	r2, #1
 800c6ce:	d104      	bne.n	800c6da <ADC_Enable+0x1a>
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	4211      	tst	r1, r2
 800c6d4:	d001      	beq.n	800c6da <ADC_Enable+0x1a>
  return HAL_OK;
 800c6d6:	2000      	movs	r0, #0
}
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c6da:	6899      	ldr	r1, [r3, #8]
 800c6dc:	4a13      	ldr	r2, [pc, #76]	; (800c72c <ADC_Enable+0x6c>)
 800c6de:	4211      	tst	r1, r2
 800c6e0:	d008      	beq.n	800c6f4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6e2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6e4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6ee:	4303      	orrs	r3, r0
 800c6f0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800c6f2:	e7f1      	b.n	800c6d8 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800c6f4:	2501      	movs	r5, #1
 800c6f6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c6f8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800c6fa:	432a      	orrs	r2, r5
 800c6fc:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c6fe:	f7ff ff95 	bl	800c62c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800c702:	f7ff ff6f 	bl	800c5e4 <HAL_GetTick>
 800c706:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	422b      	tst	r3, r5
 800c70e:	d1e2      	bne.n	800c6d6 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c710:	f7ff ff68 	bl	800c5e4 <HAL_GetTick>
 800c714:	1b80      	subs	r0, r0, r6
 800c716:	280a      	cmp	r0, #10
 800c718:	d9f6      	bls.n	800c708 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c71a:	2310      	movs	r3, #16
 800c71c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800c71e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c720:	4313      	orrs	r3, r2
 800c722:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c724:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c726:	431d      	orrs	r5, r3
 800c728:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800c72a:	e7d5      	b.n	800c6d8 <ADC_Enable+0x18>
 800c72c:	80000017 	.word	0x80000017

0800c730 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800c730:	2204      	movs	r2, #4
 800c732:	6803      	ldr	r3, [r0, #0]
{
 800c734:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800c736:	6899      	ldr	r1, [r3, #8]
{
 800c738:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800c73a:	4211      	tst	r1, r2
 800c73c:	d101      	bne.n	800c742 <ADC_ConversionStop+0x12>
  return HAL_OK;
 800c73e:	2000      	movs	r0, #0
}
 800c740:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800c742:	6899      	ldr	r1, [r3, #8]
 800c744:	4211      	tst	r1, r2
 800c746:	d006      	beq.n	800c756 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800c748:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800c74a:	0792      	lsls	r2, r2, #30
 800c74c:	d403      	bmi.n	800c756 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800c74e:	2210      	movs	r2, #16
 800c750:	6899      	ldr	r1, [r3, #8]
 800c752:	430a      	orrs	r2, r1
 800c754:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800c756:	f7ff ff45 	bl	800c5e4 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800c75a:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800c75c:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	4233      	tst	r3, r6
 800c764:	d0eb      	beq.n	800c73e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c766:	f7ff ff3d 	bl	800c5e4 <HAL_GetTick>
 800c76a:	1b40      	subs	r0, r0, r5
 800c76c:	280a      	cmp	r0, #10
 800c76e:	d9f6      	bls.n	800c75e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c770:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c772:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c774:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c776:	4313      	orrs	r3, r2
 800c778:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c77a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c77c:	4303      	orrs	r3, r0
 800c77e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800c780:	e7de      	b.n	800c740 <ADC_ConversionStop+0x10>
	...

0800c784 <HAL_ADC_Init>:
{
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	0004      	movs	r4, r0
    return HAL_ERROR;
 800c788:	2001      	movs	r0, #1
  if(hadc == NULL)
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	d01b      	beq.n	800c7c6 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c78e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c790:	2b00      	cmp	r3, #0
 800c792:	d106      	bne.n	800c7a2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800c794:	0022      	movs	r2, r4
 800c796:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800c798:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800c79a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800c79c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800c79e:	f003 f915 	bl	800f9cc <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800c7a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c7a4:	06db      	lsls	r3, r3, #27
 800c7a6:	d406      	bmi.n	800c7b6 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	2204      	movs	r2, #4
 800c7ac:	6899      	ldr	r1, [r3, #8]
 800c7ae:	0008      	movs	r0, r1
 800c7b0:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800c7b2:	4211      	tst	r1, r2
 800c7b4:	d008      	beq.n	800c7c8 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7b6:	2310      	movs	r3, #16
 800c7b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800c7ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	3450      	adds	r4, #80	; 0x50
 800c7c4:	7023      	strb	r3, [r4, #0]
}
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800c7c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c7ca:	4955      	ldr	r1, [pc, #340]	; (800c920 <HAL_ADC_Init+0x19c>)
 800c7cc:	4011      	ands	r1, r2
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	430a      	orrs	r2, r1
 800c7d2:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	6899      	ldr	r1, [r3, #8]
 800c7d8:	4011      	ands	r1, r2
 800c7da:	4a52      	ldr	r2, [pc, #328]	; (800c924 <HAL_ADC_Init+0x1a0>)
 800c7dc:	2901      	cmp	r1, #1
 800c7de:	d102      	bne.n	800c7e6 <HAL_ADC_Init+0x62>
 800c7e0:	681d      	ldr	r5, [r3, #0]
 800c7e2:	420d      	tst	r5, r1
 800c7e4:	d119      	bne.n	800c81a <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800c7e6:	2680      	movs	r6, #128	; 0x80
 800c7e8:	6861      	ldr	r1, [r4, #4]
 800c7ea:	05f6      	lsls	r6, r6, #23
 800c7ec:	004d      	lsls	r5, r1, #1
 800c7ee:	086d      	lsrs	r5, r5, #1
 800c7f0:	42b5      	cmp	r5, r6
 800c7f2:	d003      	beq.n	800c7fc <HAL_ADC_Init+0x78>
 800c7f4:	2580      	movs	r5, #128	; 0x80
 800c7f6:	062d      	lsls	r5, r5, #24
 800c7f8:	42a9      	cmp	r1, r5
 800c7fa:	d176      	bne.n	800c8ea <HAL_ADC_Init+0x166>
 800c7fc:	691d      	ldr	r5, [r3, #16]
 800c7fe:	00ad      	lsls	r5, r5, #2
 800c800:	08ad      	lsrs	r5, r5, #2
 800c802:	611d      	str	r5, [r3, #16]
 800c804:	691d      	ldr	r5, [r3, #16]
 800c806:	4329      	orrs	r1, r5
 800c808:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800c80a:	2518      	movs	r5, #24
 800c80c:	68d9      	ldr	r1, [r3, #12]
 800c80e:	43a9      	bics	r1, r5
 800c810:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800c812:	68d9      	ldr	r1, [r3, #12]
 800c814:	68a5      	ldr	r5, [r4, #8]
 800c816:	4329      	orrs	r1, r5
 800c818:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800c81a:	6811      	ldr	r1, [r2, #0]
 800c81c:	4d42      	ldr	r5, [pc, #264]	; (800c928 <HAL_ADC_Init+0x1a4>)
 800c81e:	4029      	ands	r1, r5
 800c820:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800c822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c824:	6815      	ldr	r5, [r2, #0]
 800c826:	0649      	lsls	r1, r1, #25
 800c828:	4329      	orrs	r1, r5
 800c82a:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800c82c:	2280      	movs	r2, #128	; 0x80
 800c82e:	6899      	ldr	r1, [r3, #8]
 800c830:	0552      	lsls	r2, r2, #21
 800c832:	4211      	tst	r1, r2
 800c834:	d102      	bne.n	800c83c <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800c836:	6899      	ldr	r1, [r3, #8]
 800c838:	430a      	orrs	r2, r1
 800c83a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c83c:	68da      	ldr	r2, [r3, #12]
 800c83e:	493b      	ldr	r1, [pc, #236]	; (800c92c <HAL_ADC_Init+0x1a8>)
 800c840:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c842:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c844:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c846:	68dd      	ldr	r5, [r3, #12]
 800c848:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c84a:	2902      	cmp	r1, #2
 800c84c:	d100      	bne.n	800c850 <HAL_ADC_Init+0xcc>
 800c84e:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c850:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c852:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c854:	4332      	orrs	r2, r6
 800c856:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c858:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c85a:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c85c:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c85e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800c860:	69e5      	ldr	r5, [r4, #28]
 800c862:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c864:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c866:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c868:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c86a:	0025      	movs	r5, r4
 800c86c:	352c      	adds	r5, #44	; 0x2c
 800c86e:	782d      	ldrb	r5, [r5, #0]
 800c870:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c872:	432a      	orrs	r2, r5
 800c874:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c876:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c878:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c87a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c87c:	30ff      	adds	r0, #255	; 0xff
 800c87e:	4282      	cmp	r2, r0
 800c880:	d004      	beq.n	800c88c <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c882:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c884:	68d8      	ldr	r0, [r3, #12]
 800c886:	432a      	orrs	r2, r5
 800c888:	4302      	orrs	r2, r0
 800c88a:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c88c:	1ca2      	adds	r2, r4, #2
 800c88e:	7fd2      	ldrb	r2, [r2, #31]
 800c890:	2a01      	cmp	r2, #1
 800c892:	d106      	bne.n	800c8a2 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800c894:	2900      	cmp	r1, #0
 800c896:	d134      	bne.n	800c902 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800c898:	2280      	movs	r2, #128	; 0x80
 800c89a:	68d9      	ldr	r1, [r3, #12]
 800c89c:	0252      	lsls	r2, r2, #9
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800c8a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800c8a4:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800c8a6:	2901      	cmp	r1, #1
 800c8a8:	d133      	bne.n	800c912 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800c8aa:	4821      	ldr	r0, [pc, #132]	; (800c930 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800c8ac:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800c8ae:	4002      	ands	r2, r0
 800c8b0:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800c8b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c8b4:	6918      	ldr	r0, [r3, #16]
 800c8b6:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800c8b8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800c8ba:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800c8bc:	4302      	orrs	r2, r0
 800c8be:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800c8c0:	691a      	ldr	r2, [r3, #16]
 800c8c2:	4311      	orrs	r1, r2
 800c8c4:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c8c6:	2107      	movs	r1, #7
 800c8c8:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800c8ca:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c8cc:	438a      	bics	r2, r1
 800c8ce:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800c8d0:	695a      	ldr	r2, [r3, #20]
 800c8d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800c8d8:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800c8da:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800c8dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c8de:	4393      	bics	r3, r2
 800c8e0:	001a      	movs	r2, r3
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800c8e8:	e76d      	b.n	800c7c6 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800c8ea:	691d      	ldr	r5, [r3, #16]
 800c8ec:	4e11      	ldr	r6, [pc, #68]	; (800c934 <HAL_ADC_Init+0x1b0>)
 800c8ee:	00ad      	lsls	r5, r5, #2
 800c8f0:	08ad      	lsrs	r5, r5, #2
 800c8f2:	611d      	str	r5, [r3, #16]
 800c8f4:	6815      	ldr	r5, [r2, #0]
 800c8f6:	4035      	ands	r5, r6
 800c8f8:	6015      	str	r5, [r2, #0]
 800c8fa:	6815      	ldr	r5, [r2, #0]
 800c8fc:	4329      	orrs	r1, r5
 800c8fe:	6011      	str	r1, [r2, #0]
 800c900:	e783      	b.n	800c80a <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c902:	2120      	movs	r1, #32
 800c904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c906:	4301      	orrs	r1, r0
 800c908:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c90a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c90c:	430a      	orrs	r2, r1
 800c90e:	65a2      	str	r2, [r4, #88]	; 0x58
 800c910:	e7c7      	b.n	800c8a2 <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800c912:	2101      	movs	r1, #1
 800c914:	420a      	tst	r2, r1
 800c916:	d0d6      	beq.n	800c8c6 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800c918:	691a      	ldr	r2, [r3, #16]
 800c91a:	438a      	bics	r2, r1
 800c91c:	611a      	str	r2, [r3, #16]
 800c91e:	e7d2      	b.n	800c8c6 <HAL_ADC_Init+0x142>
 800c920:	fffffefd 	.word	0xfffffefd
 800c924:	40012708 	.word	0x40012708
 800c928:	fdffffff 	.word	0xfdffffff
 800c92c:	fffe0219 	.word	0xfffe0219
 800c930:	fffffc03 	.word	0xfffffc03
 800c934:	ffc3ffff 	.word	0xffc3ffff

0800c938 <HAL_ADC_Start_DMA>:
{
 800c938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c93a:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c93c:	6802      	ldr	r2, [r0, #0]
{
 800c93e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c940:	6893      	ldr	r3, [r2, #8]
{
 800c942:	000e      	movs	r6, r1
    tmp_hal_status = HAL_BUSY;
 800c944:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c946:	075b      	lsls	r3, r3, #29
 800c948:	d42f      	bmi.n	800c9aa <HAL_ADC_Start_DMA+0x72>
    __HAL_LOCK(hadc);
 800c94a:	0027      	movs	r7, r4
 800c94c:	3750      	adds	r7, #80	; 0x50
 800c94e:	783b      	ldrb	r3, [r7, #0]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d02a      	beq.n	800c9aa <HAL_ADC_Start_DMA+0x72>
 800c954:	2301      	movs	r3, #1
 800c956:	703b      	strb	r3, [r7, #0]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800c958:	68d1      	ldr	r1, [r2, #12]
 800c95a:	430b      	orrs	r3, r1
 800c95c:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800c95e:	69e3      	ldr	r3, [r4, #28]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d123      	bne.n	800c9ac <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State,
 800c964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c966:	4a14      	ldr	r2, [pc, #80]	; (800c9b8 <HAL_ADC_Start_DMA+0x80>)
      ADC_CLEAR_ERRORCODE(hadc);
 800c968:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 800c96a:	401a      	ands	r2, r3
 800c96c:	2380      	movs	r3, #128	; 0x80
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	4313      	orrs	r3, r2
 800c972:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800c974:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800c976:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c978:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c97a:	4b10      	ldr	r3, [pc, #64]	; (800c9bc <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c97c:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c97e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c980:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <HAL_ADC_Start_DMA+0x88>)
 800c982:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c984:	4b0f      	ldr	r3, [pc, #60]	; (800c9c4 <HAL_ADC_Start_DMA+0x8c>)
 800c986:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c988:	231c      	movs	r3, #28
 800c98a:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c98c:	684a      	ldr	r2, [r1, #4]
 800c98e:	3b0c      	subs	r3, #12
 800c990:	4313      	orrs	r3, r2
 800c992:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c994:	0032      	movs	r2, r6
 800c996:	9b01      	ldr	r3, [sp, #4]
 800c998:	3140      	adds	r1, #64	; 0x40
 800c99a:	f000 f9f3 	bl	800cd84 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800c99e:	2304      	movs	r3, #4
 800c9a0:	0028      	movs	r0, r5
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	6891      	ldr	r1, [r2, #8]
 800c9a6:	430b      	orrs	r3, r1
 800c9a8:	6093      	str	r3, [r2, #8]
}
 800c9aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800c9ac:	0020      	movs	r0, r4
 800c9ae:	f7ff fe87 	bl	800c6c0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0d6      	beq.n	800c964 <HAL_ADC_Start_DMA+0x2c>
 800c9b6:	e7f8      	b.n	800c9aa <HAL_ADC_Start_DMA+0x72>
 800c9b8:	fffff0fe 	.word	0xfffff0fe
 800c9bc:	0800ca45 	.word	0x0800ca45
 800c9c0:	0800cab7 	.word	0x0800cab7
 800c9c4:	0800cac3 	.word	0x0800cac3

0800c9c8 <HAL_ADC_Stop_DMA>:
{
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800c9ca:	0006      	movs	r6, r0
 800c9cc:	3650      	adds	r6, #80	; 0x50
 800c9ce:	7833      	ldrb	r3, [r6, #0]
{
 800c9d0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800c9d2:	2402      	movs	r4, #2
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d024      	beq.n	800ca22 <HAL_ADC_Stop_DMA+0x5a>
 800c9d8:	2701      	movs	r7, #1
 800c9da:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800c9dc:	f7ff fea8 	bl	800c730 <ADC_ConversionStop>
 800c9e0:	1e04      	subs	r4, r0, #0
  if (tmp_hal_status == HAL_OK)
 800c9e2:	d11c      	bne.n	800ca1e <HAL_ADC_Stop_DMA+0x56>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800c9e4:	682a      	ldr	r2, [r5, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800c9e6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800c9e8:	68d3      	ldr	r3, [r2, #12]
 800c9ea:	43bb      	bics	r3, r7
 800c9ec:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800c9ee:	1d83      	adds	r3, r0, #6
 800c9f0:	7fdb      	ldrb	r3, [r3, #31]
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d107      	bne.n	800ca06 <HAL_ADC_Stop_DMA+0x3e>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800c9f6:	f000 fa05 	bl	800ce04 <HAL_DMA_Abort>
 800c9fa:	1e04      	subs	r4, r0, #0
      if (tmp_hal_status != HAL_OK)
 800c9fc:	d003      	beq.n	800ca06 <HAL_ADC_Stop_DMA+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c9fe:	2340      	movs	r3, #64	; 0x40
 800ca00:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800ca02:	4313      	orrs	r3, r2
 800ca04:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ca06:	2110      	movs	r1, #16
 800ca08:	682a      	ldr	r2, [r5, #0]
      tmp_hal_status = ADC_Disable(hadc);
 800ca0a:	0028      	movs	r0, r5
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ca0c:	6853      	ldr	r3, [r2, #4]
 800ca0e:	438b      	bics	r3, r1
 800ca10:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	d107      	bne.n	800ca26 <HAL_ADC_Stop_DMA+0x5e>
      tmp_hal_status = ADC_Disable(hadc);
 800ca16:	f7ff fe1f 	bl	800c658 <ADC_Disable>
 800ca1a:	1e04      	subs	r4, r0, #0
    if (tmp_hal_status == HAL_OK)
 800ca1c:	d006      	beq.n	800ca2c <HAL_ADC_Stop_DMA+0x64>
  __HAL_UNLOCK(hadc);
 800ca1e:	2300      	movs	r3, #0
 800ca20:	7033      	strb	r3, [r6, #0]
}
 800ca22:	0020      	movs	r0, r4
 800ca24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 800ca26:	f7ff fe17 	bl	800c658 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800ca2a:	e7f8      	b.n	800ca1e <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 800ca2c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ca2e:	4a03      	ldr	r2, [pc, #12]	; (800ca3c <HAL_ADC_Stop_DMA+0x74>)
 800ca30:	401a      	ands	r2, r3
 800ca32:	2301      	movs	r3, #1
 800ca34:	4313      	orrs	r3, r2
 800ca36:	656b      	str	r3, [r5, #84]	; 0x54
 800ca38:	e7f1      	b.n	800ca1e <HAL_ADC_Stop_DMA+0x56>
 800ca3a:	46c0      	nop			; (mov r8, r8)
 800ca3c:	fffffefe 	.word	0xfffffefe

0800ca40 <HAL_ADC_ConvCpltCallback>:
 800ca40:	4770      	bx	lr
	...

0800ca44 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ca44:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ca46:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800ca48:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ca4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca4c:	4211      	tst	r1, r2
 800ca4e:	d12b      	bne.n	800caa8 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ca50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca52:	32b1      	adds	r2, #177	; 0xb1
 800ca54:	32ff      	adds	r2, #255	; 0xff
 800ca56:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ca58:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ca5a:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	0109      	lsls	r1, r1, #4
 800ca60:	68d0      	ldr	r0, [r2, #12]
 800ca62:	4208      	tst	r0, r1
 800ca64:	d113      	bne.n	800ca8e <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800ca66:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ca68:	7fc9      	ldrb	r1, [r1, #31]
 800ca6a:	2900      	cmp	r1, #0
 800ca6c:	d10f      	bne.n	800ca8e <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800ca6e:	6811      	ldr	r1, [r2, #0]
 800ca70:	0709      	lsls	r1, r1, #28
 800ca72:	d50c      	bpl.n	800ca8e <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ca74:	6891      	ldr	r1, [r2, #8]
 800ca76:	0749      	lsls	r1, r1, #29
 800ca78:	d40d      	bmi.n	800ca96 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800ca7a:	200c      	movs	r0, #12
 800ca7c:	6851      	ldr	r1, [r2, #4]
 800ca7e:	4381      	bics	r1, r0
 800ca80:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800ca82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca84:	490a      	ldr	r1, [pc, #40]	; (800cab0 <ADC_DMAConvCplt+0x6c>)
 800ca86:	4011      	ands	r1, r2
 800ca88:	2201      	movs	r2, #1
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800ca8e:	0018      	movs	r0, r3
 800ca90:	f7ff ffd6 	bl	800ca40 <HAL_ADC_ConvCpltCallback>
}
 800ca94:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca96:	2220      	movs	r2, #32
 800ca98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca9e:	2201      	movs	r2, #1
 800caa0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800caa2:	430a      	orrs	r2, r1
 800caa4:	659a      	str	r2, [r3, #88]	; 0x58
 800caa6:	e7f2      	b.n	800ca8e <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800caa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caac:	4798      	blx	r3
}
 800caae:	e7f1      	b.n	800ca94 <ADC_DMAConvCplt+0x50>
 800cab0:	fffffefe 	.word	0xfffffefe

0800cab4 <HAL_ADC_ConvHalfCpltCallback>:
 800cab4:	4770      	bx	lr

0800cab6 <ADC_DMAHalfConvCplt>:
{
 800cab6:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800cab8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800caba:	f7ff fffb 	bl	800cab4 <HAL_ADC_ConvHalfCpltCallback>
}
 800cabe:	bd10      	pop	{r4, pc}

0800cac0 <HAL_ADC_ErrorCallback>:
 800cac0:	4770      	bx	lr

0800cac2 <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800cac2:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cac4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800cac6:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800cac8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800caca:	4313      	orrs	r3, r2
 800cacc:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800cace:	2304      	movs	r3, #4
 800cad0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cad2:	4313      	orrs	r3, r2
 800cad4:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 800cad6:	f7ff fff3 	bl	800cac0 <HAL_ADC_ErrorCallback>
}
 800cada:	bd10      	pop	{r4, pc}

0800cadc <HAL_ADC_ConfigChannel>:
{
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800cade:	0004      	movs	r4, r0
 800cae0:	3450      	adds	r4, #80	; 0x50
 800cae2:	7822      	ldrb	r2, [r4, #0]
{
 800cae4:	0003      	movs	r3, r0
 800cae6:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800cae8:	2002      	movs	r0, #2
 800caea:	2a01      	cmp	r2, #1
 800caec:	d00b      	beq.n	800cb06 <HAL_ADC_ConfigChannel+0x2a>
 800caee:	3801      	subs	r0, #1
 800caf0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	6891      	ldr	r1, [r2, #8]
 800caf6:	0749      	lsls	r1, r1, #29
 800caf8:	d506      	bpl.n	800cb08 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cafa:	2220      	movs	r2, #32
 800cafc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cafe:	430a      	orrs	r2, r1
 800cb00:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800cb02:	2300      	movs	r3, #0
 800cb04:	7023      	strb	r3, [r4, #0]
}
 800cb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cb08:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cb0a:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800cb0c:	4e19      	ldr	r6, [pc, #100]	; (800cb74 <HAL_ADC_ConfigChannel+0x98>)
 800cb0e:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cb10:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cb12:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cb14:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cb16:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 800cb18:	42b7      	cmp	r7, r6
 800cb1a:	d019      	beq.n	800cb50 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cb1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800cb1e:	4301      	orrs	r1, r0
 800cb20:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d008      	beq.n	800cb38 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800cb26:	2380      	movs	r3, #128	; 0x80
 800cb28:	4a13      	ldr	r2, [pc, #76]	; (800cb78 <HAL_ADC_ConfigChannel+0x9c>)
 800cb2a:	041b      	lsls	r3, r3, #16
 800cb2c:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800cb2e:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800cb30:	430b      	orrs	r3, r1
 800cb32:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800cb34:	f7ff fd7a 	bl	800c62c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	039b      	lsls	r3, r3, #14
 800cb3c:	d505      	bpl.n	800cb4a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800cb3e:	2380      	movs	r3, #128	; 0x80
 800cb40:	4a0d      	ldr	r2, [pc, #52]	; (800cb78 <HAL_ADC_ConfigChannel+0x9c>)
 800cb42:	03db      	lsls	r3, r3, #15
 800cb44:	6811      	ldr	r1, [r2, #0]
 800cb46:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800cb48:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800cb4e:	e7da      	b.n	800cb06 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800cb50:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800cb52:	438d      	bics	r5, r1
 800cb54:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d004      	beq.n	800cb64 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800cb5a:	4a07      	ldr	r2, [pc, #28]	; (800cb78 <HAL_ADC_ConfigChannel+0x9c>)
 800cb5c:	4907      	ldr	r1, [pc, #28]	; (800cb7c <HAL_ADC_ConfigChannel+0xa0>)
 800cb5e:	6813      	ldr	r3, [r2, #0]
 800cb60:	400b      	ands	r3, r1
 800cb62:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800cb64:	0383      	lsls	r3, r0, #14
 800cb66:	d5f0      	bpl.n	800cb4a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800cb68:	4a03      	ldr	r2, [pc, #12]	; (800cb78 <HAL_ADC_ConfigChannel+0x9c>)
 800cb6a:	4905      	ldr	r1, [pc, #20]	; (800cb80 <HAL_ADC_ConfigChannel+0xa4>)
 800cb6c:	6813      	ldr	r3, [r2, #0]
 800cb6e:	400b      	ands	r3, r1
 800cb70:	e7ea      	b.n	800cb48 <HAL_ADC_ConfigChannel+0x6c>
 800cb72:	46c0      	nop			; (mov r8, r8)
 800cb74:	00001001 	.word	0x00001001
 800cb78:	40012708 	.word	0x40012708
 800cb7c:	ff7fffff 	.word	0xff7fffff
 800cb80:	ffbfffff 	.word	0xffbfffff

0800cb84 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cb86:	0005      	movs	r5, r0
 800cb88:	3550      	adds	r5, #80	; 0x50
 800cb8a:	782b      	ldrb	r3, [r5, #0]
{
 800cb8c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800cb8e:	2002      	movs	r0, #2
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d044      	beq.n	800cc1e <HAL_ADCEx_Calibration_Start+0x9a>
 800cb94:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cb96:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 800cb98:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	6898      	ldr	r0, [r3, #8]
 800cb9e:	4010      	ands	r0, r2
 800cba0:	2801      	cmp	r0, #1
 800cba2:	d109      	bne.n	800cbb8 <HAL_ADCEx_Calibration_Start+0x34>
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	4202      	tst	r2, r0
 800cba8:	d006      	beq.n	800cbb8 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cbaa:	2320      	movs	r3, #32
 800cbac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800cbb6:	e032      	b.n	800cc1e <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 800cbb8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cbba:	4919      	ldr	r1, [pc, #100]	; (800cc20 <HAL_ADCEx_Calibration_Start+0x9c>)
 800cbbc:	4011      	ands	r1, r2
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cbc2:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800cbc4:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cbc6:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cbc8:	68da      	ldr	r2, [r3, #12]
 800cbca:	438a      	bics	r2, r1
 800cbcc:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800cbce:	2280      	movs	r2, #128	; 0x80
 800cbd0:	6899      	ldr	r1, [r3, #8]
 800cbd2:	0612      	lsls	r2, r2, #24
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800cbd8:	f7ff fd04 	bl	800c5e4 <HAL_GetTick>
 800cbdc:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	689a      	ldr	r2, [r3, #8]
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	db0c      	blt.n	800cc00 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cbe6:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800cbe8:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cbea:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800cbec:	430e      	orrs	r6, r1
 800cbee:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800cbf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cbf2:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800cbf4:	4393      	bics	r3, r2
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	6563      	str	r3, [r4, #84]	; 0x54
 800cbfe:	e7d8      	b.n	800cbb2 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800cc00:	f7ff fcf0 	bl	800c5e4 <HAL_GetTick>
 800cc04:	1bc0      	subs	r0, r0, r7
 800cc06:	280a      	cmp	r0, #10
 800cc08:	d9e9      	bls.n	800cbde <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800cc0a:	2212      	movs	r2, #18
 800cc0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800cc0e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800cc10:	4393      	bics	r3, r2
 800cc12:	001a      	movs	r2, r3
 800cc14:	2310      	movs	r3, #16
 800cc16:	4313      	orrs	r3, r2
 800cc18:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	702b      	strb	r3, [r5, #0]
}
 800cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc20:	fffffefd 	.word	0xfffffefd

0800cc24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cc24:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cc26:	25ff      	movs	r5, #255	; 0xff
 800cc28:	2403      	movs	r4, #3
 800cc2a:	002a      	movs	r2, r5
 800cc2c:	4004      	ands	r4, r0
 800cc2e:	00e4      	lsls	r4, r4, #3
 800cc30:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800cc32:	0189      	lsls	r1, r1, #6
 800cc34:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cc36:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800cc38:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cc3a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	db0a      	blt.n	800cc56 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cc40:	24c0      	movs	r4, #192	; 0xc0
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <HAL_NVIC_SetPriority+0x4c>)
 800cc44:	0880      	lsrs	r0, r0, #2
 800cc46:	0080      	lsls	r0, r0, #2
 800cc48:	18c0      	adds	r0, r0, r3
 800cc4a:	00a4      	lsls	r4, r4, #2
 800cc4c:	5903      	ldr	r3, [r0, r4]
 800cc4e:	401a      	ands	r2, r3
 800cc50:	4311      	orrs	r1, r2
 800cc52:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800cc54:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cc56:	200f      	movs	r0, #15
 800cc58:	4003      	ands	r3, r0
 800cc5a:	3b08      	subs	r3, #8
 800cc5c:	4805      	ldr	r0, [pc, #20]	; (800cc74 <HAL_NVIC_SetPriority+0x50>)
 800cc5e:	089b      	lsrs	r3, r3, #2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	181b      	adds	r3, r3, r0
 800cc64:	69d8      	ldr	r0, [r3, #28]
 800cc66:	4002      	ands	r2, r0
 800cc68:	4311      	orrs	r1, r2
 800cc6a:	61d9      	str	r1, [r3, #28]
 800cc6c:	e7f2      	b.n	800cc54 <HAL_NVIC_SetPriority+0x30>
 800cc6e:	46c0      	nop			; (mov r8, r8)
 800cc70:	e000e100 	.word	0xe000e100
 800cc74:	e000ed00 	.word	0xe000ed00

0800cc78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	db05      	blt.n	800cc88 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc7c:	231f      	movs	r3, #31
 800cc7e:	4018      	ands	r0, r3
 800cc80:	3b1e      	subs	r3, #30
 800cc82:	4083      	lsls	r3, r0
 800cc84:	4a01      	ldr	r2, [pc, #4]	; (800cc8c <HAL_NVIC_EnableIRQ+0x14>)
 800cc86:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800cc88:	4770      	bx	lr
 800cc8a:	46c0      	nop			; (mov r8, r8)
 800cc8c:	e000e100 	.word	0xe000e100

0800cc90 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cc90:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cc94:	4b03      	ldr	r3, [pc, #12]	; (800cca4 <HAL_NVIC_SystemReset+0x14>)
 800cc96:	4a04      	ldr	r2, [pc, #16]	; (800cca8 <HAL_NVIC_SystemReset+0x18>)
 800cc98:	60da      	str	r2, [r3, #12]
 800cc9a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cc9e:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800cca0:	e7fd      	b.n	800cc9e <HAL_NVIC_SystemReset+0xe>
 800cca2:	46c0      	nop			; (mov r8, r8)
 800cca4:	e000ed00 	.word	0xe000ed00
 800cca8:	05fa0004 	.word	0x05fa0004

0800ccac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ccac:	2280      	movs	r2, #128	; 0x80
 800ccae:	1e43      	subs	r3, r0, #1
 800ccb0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800ccb2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d20d      	bcs.n	800ccd4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ccb8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ccba:	4a07      	ldr	r2, [pc, #28]	; (800ccd8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ccbc:	4807      	ldr	r0, [pc, #28]	; (800ccdc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ccbe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ccc0:	6a03      	ldr	r3, [r0, #32]
 800ccc2:	0609      	lsls	r1, r1, #24
 800ccc4:	021b      	lsls	r3, r3, #8
 800ccc6:	0a1b      	lsrs	r3, r3, #8
 800ccc8:	430b      	orrs	r3, r1
 800ccca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cccc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ccce:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ccd0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ccd2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ccd4:	4770      	bx	lr
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	e000e010 	.word	0xe000e010
 800ccdc:	e000ed00 	.word	0xe000ed00

0800cce0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800cce0:	2800      	cmp	r0, #0
 800cce2:	db07      	blt.n	800ccf4 <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cce4:	231f      	movs	r3, #31
 800cce6:	22c0      	movs	r2, #192	; 0xc0
 800cce8:	4018      	ands	r0, r3
 800ccea:	3b1e      	subs	r3, #30
 800ccec:	4083      	lsls	r3, r0
 800ccee:	4902      	ldr	r1, [pc, #8]	; (800ccf8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 800ccf0:	0052      	lsls	r2, r2, #1
 800ccf2:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800ccf4:	4770      	bx	lr
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	e000e100 	.word	0xe000e100

0800ccfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800cd00:	2001      	movs	r0, #1
  if(hdma == NULL)
 800cd02:	2c00      	cmp	r4, #0
 800cd04:	d035      	beq.n	800cd72 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cd06:	6825      	ldr	r5, [r4, #0]
 800cd08:	4b1a      	ldr	r3, [pc, #104]	; (800cd74 <HAL_DMA_Init+0x78>)
 800cd0a:	2114      	movs	r1, #20
 800cd0c:	18e8      	adds	r0, r5, r3
 800cd0e:	f7f3 fa2b 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800cd12:	4b19      	ldr	r3, [pc, #100]	; (800cd78 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cd14:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800cd16:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cd18:	2302      	movs	r3, #2
 800cd1a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cd1c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800cd1e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cd20:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cd22:	4b16      	ldr	r3, [pc, #88]	; (800cd7c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cd24:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cd26:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 800cd28:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cd2a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800cd2c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cd2e:	433b      	orrs	r3, r7
 800cd30:	6967      	ldr	r7, [r4, #20]
 800cd32:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cd34:	69a7      	ldr	r7, [r4, #24]
 800cd36:	433b      	orrs	r3, r7
 800cd38:	69e7      	ldr	r7, [r4, #28]
 800cd3a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800cd3c:	6a27      	ldr	r7, [r4, #32]
 800cd3e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800cd40:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cd42:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cd44:	2380      	movs	r3, #128	; 0x80
 800cd46:	01db      	lsls	r3, r3, #7
 800cd48:	4299      	cmp	r1, r3
 800cd4a:	d00c      	beq.n	800cd66 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cd4c:	251c      	movs	r5, #28
 800cd4e:	4028      	ands	r0, r5
 800cd50:	3d0d      	subs	r5, #13
 800cd52:	4085      	lsls	r5, r0
 800cd54:	490a      	ldr	r1, [pc, #40]	; (800cd80 <HAL_DMA_Init+0x84>)
 800cd56:	680b      	ldr	r3, [r1, #0]
 800cd58:	43ab      	bics	r3, r5
 800cd5a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cd5c:	6863      	ldr	r3, [r4, #4]
 800cd5e:	680d      	ldr	r5, [r1, #0]
 800cd60:	4083      	lsls	r3, r0
 800cd62:	432b      	orrs	r3, r5
 800cd64:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd66:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800cd68:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd6a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cd6c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800cd6e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800cd70:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800cd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd74:	bffdfff8 	.word	0xbffdfff8
 800cd78:	40020000 	.word	0x40020000
 800cd7c:	ffff800f 	.word	0xffff800f
 800cd80:	400200a8 	.word	0x400200a8

0800cd84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cd86:	1d45      	adds	r5, r0, #5
{
 800cd88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800cd8a:	7feb      	ldrb	r3, [r5, #31]
{
 800cd8c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800cd8e:	2002      	movs	r0, #2
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d029      	beq.n	800cde8 <HAL_DMA_Start_IT+0x64>
 800cd94:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800cd96:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 800cd98:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800cd9a:	7ffb      	ldrb	r3, [r7, #31]
 800cd9c:	2600      	movs	r6, #0
 800cd9e:	469c      	mov	ip, r3
 800cda0:	4660      	mov	r0, ip
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2801      	cmp	r0, #1
 800cda6:	d12a      	bne.n	800cdfe <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cda8:	3001      	adds	r0, #1
 800cdaa:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cdac:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cdae:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cdb0:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800cdb2:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cdb4:	361c      	adds	r6, #28
 800cdb6:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 800cdb8:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cdba:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800cdbc:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cdbe:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800cdc0:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cdc2:	9b01      	ldr	r3, [sp, #4]
 800cdc4:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	2b10      	cmp	r3, #16
 800cdca:	d10e      	bne.n	800cdea <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cdcc:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cdce:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800cdd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdd6:	230e      	movs	r3, #14
 800cdd8:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cdda:	4313      	orrs	r3, r2
 800cddc:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800cdde:	2301      	movs	r3, #1
 800cde0:	6802      	ldr	r2, [r0, #0]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cde6:	2000      	movs	r0, #0
}
 800cde8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800cdea:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800cdec:	60c2      	str	r2, [r0, #12]
 800cdee:	e7ef      	b.n	800cdd0 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cdf0:	2204      	movs	r2, #4
 800cdf2:	6803      	ldr	r3, [r0, #0]
 800cdf4:	4393      	bics	r3, r2
 800cdf6:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cdf8:	6802      	ldr	r2, [r0, #0]
 800cdfa:	230a      	movs	r3, #10
 800cdfc:	e7ed      	b.n	800cdda <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800cdfe:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 800ce00:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800ce02:	e7f1      	b.n	800cde8 <HAL_DMA_Start_IT+0x64>

0800ce04 <HAL_DMA_Abort>:
{
 800ce04:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ce06:	1d85      	adds	r5, r0, #6
 800ce08:	7feb      	ldrb	r3, [r5, #31]
 800ce0a:	1d44      	adds	r4, r0, #5
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d005      	beq.n	800ce1c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ce10:	2304      	movs	r3, #4
 800ce12:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800ce14:	2300      	movs	r3, #0
    return HAL_ERROR;
 800ce16:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800ce18:	77e3      	strb	r3, [r4, #31]
}
 800ce1a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce1c:	210e      	movs	r1, #14
 800ce1e:	6803      	ldr	r3, [r0, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	438a      	bics	r2, r1
 800ce24:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800ce26:	2201      	movs	r2, #1
 800ce28:	6819      	ldr	r1, [r3, #0]
 800ce2a:	4391      	bics	r1, r2
 800ce2c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ce30:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ce32:	201c      	movs	r0, #28
 800ce34:	4003      	ands	r3, r0
 800ce36:	0010      	movs	r0, r2
 800ce38:	4098      	lsls	r0, r3
 800ce3a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800ce3c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800ce3e:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 800ce40:	77e0      	strb	r0, [r4, #31]
    return status;
 800ce42:	e7ea      	b.n	800ce1a <HAL_DMA_Abort+0x16>

0800ce44 <HAL_DMA_Abort_IT>:
{
 800ce44:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ce46:	1d84      	adds	r4, r0, #6
 800ce48:	7fe3      	ldrb	r3, [r4, #31]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d004      	beq.n	800ce58 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ce4e:	2304      	movs	r3, #4
 800ce50:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800ce52:	3b03      	subs	r3, #3
}
 800ce54:	0018      	movs	r0, r3
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce58:	210e      	movs	r1, #14
 800ce5a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce5c:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	438a      	bics	r2, r1
 800ce62:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800ce64:	2201      	movs	r2, #1
 800ce66:	6819      	ldr	r1, [r3, #0]
 800ce68:	4391      	bics	r1, r2
 800ce6a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce6c:	231c      	movs	r3, #28
 800ce6e:	402b      	ands	r3, r5
 800ce70:	0015      	movs	r5, r2
 800ce72:	409d      	lsls	r5, r3
 800ce74:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800ce76:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce78:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800ce7a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800ce7c:	2400      	movs	r4, #0
 800ce7e:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 800ce80:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800ce82:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800ce84:	42a2      	cmp	r2, r4
 800ce86:	d0e5      	beq.n	800ce54 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800ce88:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800ce8a:	0023      	movs	r3, r4
 800ce8c:	e7e2      	b.n	800ce54 <HAL_DMA_Abort_IT+0x10>

0800ce8e <HAL_DMA_IRQHandler>:
{
 800ce8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ce90:	221c      	movs	r2, #28
 800ce92:	2704      	movs	r7, #4
 800ce94:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ce96:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ce98:	4032      	ands	r2, r6
 800ce9a:	003e      	movs	r6, r7
 800ce9c:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ce9e:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800cea0:	6803      	ldr	r3, [r0, #0]
 800cea2:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800cea4:	4235      	tst	r5, r6
 800cea6:	d00d      	beq.n	800cec4 <HAL_DMA_IRQHandler+0x36>
 800cea8:	423c      	tst	r4, r7
 800ceaa:	d00b      	beq.n	800cec4 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	0692      	lsls	r2, r2, #26
 800ceb0:	d402      	bmi.n	800ceb8 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	43ba      	bics	r2, r7
 800ceb6:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800ceb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800ceba:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d019      	beq.n	800cef4 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800cec0:	4798      	blx	r3
  return;
 800cec2:	e017      	b.n	800cef4 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800cec4:	2702      	movs	r7, #2
 800cec6:	003e      	movs	r6, r7
 800cec8:	4096      	lsls	r6, r2
 800ceca:	4235      	tst	r5, r6
 800cecc:	d013      	beq.n	800cef6 <HAL_DMA_IRQHandler+0x68>
 800cece:	423c      	tst	r4, r7
 800ced0:	d011      	beq.n	800cef6 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	0692      	lsls	r2, r2, #26
 800ced6:	d406      	bmi.n	800cee6 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ced8:	240a      	movs	r4, #10
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	43a2      	bics	r2, r4
 800cede:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800cee0:	2201      	movs	r2, #1
 800cee2:	1d83      	adds	r3, r0, #6
 800cee4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800cee6:	2200      	movs	r2, #0
 800cee8:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ceea:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800ceec:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800ceee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d1e5      	bne.n	800cec0 <HAL_DMA_IRQHandler+0x32>
}
 800cef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800cef6:	2608      	movs	r6, #8
 800cef8:	0037      	movs	r7, r6
 800cefa:	4097      	lsls	r7, r2
 800cefc:	423d      	tst	r5, r7
 800cefe:	d0f9      	beq.n	800cef4 <HAL_DMA_IRQHandler+0x66>
 800cf00:	4234      	tst	r4, r6
 800cf02:	d0f7      	beq.n	800cef4 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf04:	250e      	movs	r5, #14
 800cf06:	681c      	ldr	r4, [r3, #0]
 800cf08:	43ac      	bics	r4, r5
 800cf0a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	001c      	movs	r4, r3
 800cf10:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800cf12:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cf14:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cf16:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800cf18:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	1d43      	adds	r3, r0, #5
 800cf1e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800cf20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf22:	e7e5      	b.n	800cef0 <HAL_DMA_IRQHandler+0x62>

0800cf24 <HAL_DMA_GetState>:
  return hdma->State;
 800cf24:	3006      	adds	r0, #6
 800cf26:	7fc0      	ldrb	r0, [r0, #31]
 800cf28:	b2c0      	uxtb	r0, r0
}
 800cf2a:	4770      	bx	lr

0800cf2c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cf2c:	4a28      	ldr	r2, [pc, #160]	; (800cfd0 <FLASH_SetErrorCode+0xa4>)
 800cf2e:	2180      	movs	r1, #128	; 0x80
 800cf30:	6990      	ldr	r0, [r2, #24]
 800cf32:	0049      	lsls	r1, r1, #1
 800cf34:	0003      	movs	r3, r0
{
 800cf36:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cf38:	400b      	ands	r3, r1
 800cf3a:	4208      	tst	r0, r1
 800cf3c:	d005      	beq.n	800cf4a <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	4824      	ldr	r0, [pc, #144]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
 800cf42:	6944      	ldr	r4, [r0, #20]
 800cf44:	4323      	orrs	r3, r4
 800cf46:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800cf48:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800cf4a:	2080      	movs	r0, #128	; 0x80
 800cf4c:	6991      	ldr	r1, [r2, #24]
 800cf4e:	0080      	lsls	r0, r0, #2
 800cf50:	4201      	tst	r1, r0
 800cf52:	d005      	beq.n	800cf60 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cf54:	2101      	movs	r1, #1
 800cf56:	4c1f      	ldr	r4, [pc, #124]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800cf58:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cf5a:	6965      	ldr	r5, [r4, #20]
 800cf5c:	4329      	orrs	r1, r5
 800cf5e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800cf60:	2080      	movs	r0, #128	; 0x80
 800cf62:	6991      	ldr	r1, [r2, #24]
 800cf64:	00c0      	lsls	r0, r0, #3
 800cf66:	4201      	tst	r1, r0
 800cf68:	d005      	beq.n	800cf76 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800cf6a:	2108      	movs	r1, #8
 800cf6c:	4c19      	ldr	r4, [pc, #100]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 800cf6e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800cf70:	6965      	ldr	r5, [r4, #20]
 800cf72:	4329      	orrs	r1, r5
 800cf74:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cf76:	2080      	movs	r0, #128	; 0x80
 800cf78:	6991      	ldr	r1, [r2, #24]
 800cf7a:	0100      	lsls	r0, r0, #4
 800cf7c:	4201      	tst	r1, r0
 800cf7e:	d005      	beq.n	800cf8c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cf80:	2104      	movs	r1, #4
 800cf82:	4c14      	ldr	r4, [pc, #80]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 800cf84:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cf86:	6965      	ldr	r5, [r4, #20]
 800cf88:	4329      	orrs	r1, r5
 800cf8a:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800cf8c:	2080      	movs	r0, #128	; 0x80
 800cf8e:	6991      	ldr	r1, [r2, #24]
 800cf90:	0180      	lsls	r0, r0, #6
 800cf92:	4201      	tst	r1, r0
 800cf94:	d005      	beq.n	800cfa2 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800cf96:	2110      	movs	r1, #16
 800cf98:	4c0e      	ldr	r4, [pc, #56]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800cf9a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800cf9c:	6965      	ldr	r5, [r4, #20]
 800cf9e:	4329      	orrs	r1, r5
 800cfa0:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800cfa2:	6991      	ldr	r1, [r2, #24]
 800cfa4:	0389      	lsls	r1, r1, #14
 800cfa6:	d505      	bpl.n	800cfb4 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800cfa8:	2020      	movs	r0, #32
 800cfaa:	4c0a      	ldr	r4, [pc, #40]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 800cfac:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800cfae:	6961      	ldr	r1, [r4, #20]
 800cfb0:	4301      	orrs	r1, r0
 800cfb2:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800cfb4:	2080      	movs	r0, #128	; 0x80
 800cfb6:	6991      	ldr	r1, [r2, #24]
 800cfb8:	0240      	lsls	r0, r0, #9
 800cfba:	4201      	tst	r1, r0
 800cfbc:	d005      	beq.n	800cfca <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800cfbe:	2140      	movs	r1, #64	; 0x40
 800cfc0:	4c04      	ldr	r4, [pc, #16]	; (800cfd4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 800cfc2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800cfc4:	6965      	ldr	r5, [r4, #20]
 800cfc6:	4329      	orrs	r1, r5
 800cfc8:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cfca:	6193      	str	r3, [r2, #24]
}  
 800cfcc:	bd30      	pop	{r4, r5, pc}
 800cfce:	46c0      	nop			; (mov r8, r8)
 800cfd0:	40022000 	.word	0x40022000
 800cfd4:	20001770 	.word	0x20001770

0800cfd8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800cfd8:	4b01      	ldr	r3, [pc, #4]	; (800cfe0 <HAL_FLASH_GetError+0x8>)
 800cfda:	6958      	ldr	r0, [r3, #20]
}
 800cfdc:	4770      	bx	lr
 800cfde:	46c0      	nop			; (mov r8, r8)
 800cfe0:	20001770 	.word	0x20001770

0800cfe4 <FLASH_WaitForLastOperation>:
{
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800cfe8:	f7ff fafc 	bl	800c5e4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cfec:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800cfee:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cff0:	4b18      	ldr	r3, [pc, #96]	; (800d054 <FLASH_WaitForLastOperation+0x70>)
 800cff2:	699a      	ldr	r2, [r3, #24]
 800cff4:	4232      	tst	r2, r6
 800cff6:	d121      	bne.n	800d03c <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cff8:	2202      	movs	r2, #2
 800cffa:	6999      	ldr	r1, [r3, #24]
 800cffc:	4211      	tst	r1, r2
 800cffe:	d000      	beq.n	800d002 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d000:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800d002:	699a      	ldr	r2, [r3, #24]
 800d004:	05d2      	lsls	r2, r2, #23
 800d006:	d415      	bmi.n	800d034 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800d008:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800d00a:	0592      	lsls	r2, r2, #22
 800d00c:	d412      	bmi.n	800d034 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800d00e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800d010:	0552      	lsls	r2, r2, #21
 800d012:	d40f      	bmi.n	800d034 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800d014:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800d016:	0512      	lsls	r2, r2, #20
 800d018:	d40c      	bmi.n	800d034 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800d01a:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800d01c:	0492      	lsls	r2, r2, #18
 800d01e:	d409      	bmi.n	800d034 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800d020:	6999      	ldr	r1, [r3, #24]
 800d022:	2280      	movs	r2, #128	; 0x80
 800d024:	0008      	movs	r0, r1
 800d026:	0292      	lsls	r2, r2, #10
 800d028:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800d02a:	4211      	tst	r1, r2
 800d02c:	d102      	bne.n	800d034 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800d02e:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800d030:	03db      	lsls	r3, r3, #15
 800d032:	d508      	bpl.n	800d046 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 800d034:	f7ff ff7a 	bl	800cf2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d038:	2001      	movs	r0, #1
 800d03a:	e004      	b.n	800d046 <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800d03c:	1c62      	adds	r2, r4, #1
 800d03e:	d0d8      	beq.n	800cff2 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d040:	2c00      	cmp	r4, #0
 800d042:	d101      	bne.n	800d048 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 800d044:	2003      	movs	r0, #3
}
 800d046:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d048:	f7ff facc 	bl	800c5e4 <HAL_GetTick>
 800d04c:	1b40      	subs	r0, r0, r5
 800d04e:	42a0      	cmp	r0, r4
 800d050:	d9ce      	bls.n	800cff0 <FLASH_WaitForLastOperation+0xc>
 800d052:	e7f7      	b.n	800d044 <FLASH_WaitForLastOperation+0x60>
 800d054:	40022000 	.word	0x40022000

0800d058 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d058:	2201      	movs	r2, #1
 800d05a:	4b08      	ldr	r3, [pc, #32]	; (800d07c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 800d05c:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d05e:	6859      	ldr	r1, [r3, #4]
 800d060:	4211      	tst	r1, r2
 800d062:	d00a      	beq.n	800d07a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d064:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d068:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800d06a:	4805      	ldr	r0, [pc, #20]	; (800d080 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 800d06c:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800d06e:	4805      	ldr	r0, [pc, #20]	; (800d084 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800d070:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d072:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d076:	6858      	ldr	r0, [r3, #4]
 800d078:	4010      	ands	r0, r2
}
 800d07a:	4770      	bx	lr
 800d07c:	40022000 	.word	0x40022000
 800d080:	89abcdef 	.word	0x89abcdef
 800d084:	02030405 	.word	0x02030405

0800d088 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800d088:	2301      	movs	r3, #1
 800d08a:	4a03      	ldr	r2, [pc, #12]	; (800d098 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 800d08c:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800d08e:	6851      	ldr	r1, [r2, #4]
 800d090:	430b      	orrs	r3, r1
 800d092:	6053      	str	r3, [r2, #4]
}
 800d094:	4770      	bx	lr
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	40022000 	.word	0x40022000

0800d09c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800d09c:	b510      	push	{r4, lr}
 800d09e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0a0:	4805      	ldr	r0, [pc, #20]	; (800d0b8 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800d0a2:	f7ff ff9f 	bl	800cfe4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d105      	bne.n	800d0b6 <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d0aa:	4b04      	ldr	r3, [pc, #16]	; (800d0bc <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 800d0ac:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800d0ae:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0b0:	4801      	ldr	r0, [pc, #4]	; (800d0b8 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800d0b2:	f7ff ff97 	bl	800cfe4 <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	0000c350 	.word	0x0000c350
 800d0bc:	20001770 	.word	0x20001770

0800d0c0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d0c2:	4f12      	ldr	r7, [pc, #72]	; (800d10c <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800d0c4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 800d0c6:	7c3b      	ldrb	r3, [r7, #16]
{
 800d0c8:	000d      	movs	r5, r1
 800d0ca:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 800d0cc:	2002      	movs	r0, #2
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d00c      	beq.n	800d0ec <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 800d0d2:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0d4:	480e      	ldr	r0, [pc, #56]	; (800d110 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800d0d6:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0d8:	f7ff ff84 	bl	800cfe4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d103      	bne.n	800d0e8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d0e0:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800d0e2:	2e02      	cmp	r6, #2
 800d0e4:	d103      	bne.n	800d0ee <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800d0e6:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	743b      	strb	r3, [r7, #16]

  return status;
}
 800d0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800d0ee:	2e01      	cmp	r6, #1
 800d0f0:	d102      	bne.n	800d0f8 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800d0f2:	b2a4      	uxth	r4, r4
 800d0f4:	802c      	strh	r4, [r5, #0]
 800d0f6:	e7f7      	b.n	800d0e8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800d0f8:	2e00      	cmp	r6, #0
 800d0fa:	d003      	beq.n	800d104 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0fc:	4804      	ldr	r0, [pc, #16]	; (800d110 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800d0fe:	f7ff ff71 	bl	800cfe4 <FLASH_WaitForLastOperation>
 800d102:	e7f1      	b.n	800d0e8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800d104:	b2e4      	uxtb	r4, r4
 800d106:	702c      	strb	r4, [r5, #0]
 800d108:	e7ee      	b.n	800d0e8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800d10a:	46c0      	nop			; (mov r8, r8)
 800d10c:	20001770 	.word	0x20001770
 800d110:	0000c350 	.word	0x0000c350

0800d114 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d114:	4a5a      	ldr	r2, [pc, #360]	; (800d280 <HAL_GPIO_Init+0x16c>)
{
 800d116:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d118:	1882      	adds	r2, r0, r2
 800d11a:	1e54      	subs	r4, r2, #1
 800d11c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800d11e:	2300      	movs	r3, #0
{
 800d120:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d122:	3205      	adds	r2, #5
{
 800d124:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d126:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d128:	9a02      	ldr	r2, [sp, #8]
 800d12a:	6812      	ldr	r2, [r2, #0]
 800d12c:	0014      	movs	r4, r2
 800d12e:	40dc      	lsrs	r4, r3
 800d130:	d101      	bne.n	800d136 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800d132:	b007      	add	sp, #28
 800d134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800d136:	2101      	movs	r1, #1
 800d138:	000d      	movs	r5, r1
 800d13a:	0014      	movs	r4, r2
 800d13c:	409d      	lsls	r5, r3
 800d13e:	402c      	ands	r4, r5
 800d140:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 800d142:	422a      	tst	r2, r5
 800d144:	d100      	bne.n	800d148 <HAL_GPIO_Init+0x34>
 800d146:	e099      	b.n	800d27c <HAL_GPIO_Init+0x168>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d148:	9a02      	ldr	r2, [sp, #8]
 800d14a:	005f      	lsls	r7, r3, #1
 800d14c:	6854      	ldr	r4, [r2, #4]
 800d14e:	2210      	movs	r2, #16
 800d150:	0026      	movs	r6, r4
 800d152:	4396      	bics	r6, r2
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d154:	3a0d      	subs	r2, #13
 800d156:	40ba      	lsls	r2, r7
 800d158:	43d2      	mvns	r2, r2
 800d15a:	9203      	str	r2, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d15c:	0032      	movs	r2, r6
 800d15e:	3a01      	subs	r2, #1
 800d160:	9604      	str	r6, [sp, #16]
 800d162:	428a      	cmp	r2, r1
 800d164:	d80f      	bhi.n	800d186 <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 800d166:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d168:	9a03      	ldr	r2, [sp, #12]
 800d16a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d16c:	9a02      	ldr	r2, [sp, #8]
 800d16e:	68d2      	ldr	r2, [r2, #12]
 800d170:	40ba      	lsls	r2, r7
 800d172:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 800d174:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800d176:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d178:	43aa      	bics	r2, r5
 800d17a:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d17c:	0922      	lsrs	r2, r4, #4
 800d17e:	400a      	ands	r2, r1
 800d180:	409a      	lsls	r2, r3
 800d182:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800d184:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800d186:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d188:	9a03      	ldr	r2, [sp, #12]
 800d18a:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d18c:	9a02      	ldr	r2, [sp, #8]
 800d18e:	6892      	ldr	r2, [r2, #8]
 800d190:	40ba      	lsls	r2, r7
 800d192:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 800d194:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d196:	9a04      	ldr	r2, [sp, #16]
 800d198:	2a02      	cmp	r2, #2
 800d19a:	d10e      	bne.n	800d1ba <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d19c:	2507      	movs	r5, #7
 800d19e:	210f      	movs	r1, #15
 800d1a0:	401d      	ands	r5, r3
 800d1a2:	00ad      	lsls	r5, r5, #2
 800d1a4:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800d1a6:	08da      	lsrs	r2, r3, #3
 800d1a8:	0092      	lsls	r2, r2, #2
 800d1aa:	1882      	adds	r2, r0, r2
 800d1ac:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d1ae:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800d1b0:	9902      	ldr	r1, [sp, #8]
 800d1b2:	6909      	ldr	r1, [r1, #16]
 800d1b4:	40a9      	lsls	r1, r5
 800d1b6:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 800d1b8:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800d1ba:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d1bc:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d1be:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d1c0:	402a      	ands	r2, r5
 800d1c2:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d1c4:	0022      	movs	r2, r4
 800d1c6:	4032      	ands	r2, r6
 800d1c8:	40ba      	lsls	r2, r7
 800d1ca:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 800d1cc:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d1ce:	00e2      	lsls	r2, r4, #3
 800d1d0:	d554      	bpl.n	800d27c <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1d2:	2701      	movs	r7, #1
 800d1d4:	4d2b      	ldr	r5, [pc, #172]	; (800d284 <HAL_GPIO_Init+0x170>)
 800d1d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800d1d8:	433a      	orrs	r2, r7
 800d1da:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800d1dc:	4a2a      	ldr	r2, [pc, #168]	; (800d288 <HAL_GPIO_Init+0x174>)
 800d1de:	089d      	lsrs	r5, r3, #2
 800d1e0:	00ad      	lsls	r5, r5, #2
 800d1e2:	18ad      	adds	r5, r5, r2
 800d1e4:	68aa      	ldr	r2, [r5, #8]
 800d1e6:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d1e8:	001a      	movs	r2, r3
 800d1ea:	4032      	ands	r2, r6
 800d1ec:	0092      	lsls	r2, r2, #2
 800d1ee:	9203      	str	r2, [sp, #12]
 800d1f0:	220f      	movs	r2, #15
 800d1f2:	9903      	ldr	r1, [sp, #12]
 800d1f4:	408a      	lsls	r2, r1
 800d1f6:	4661      	mov	r1, ip
 800d1f8:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d1fa:	22a0      	movs	r2, #160	; 0xa0
 800d1fc:	05d2      	lsls	r2, r2, #23
 800d1fe:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d200:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d202:	2200      	movs	r2, #0
 800d204:	4560      	cmp	r0, ip
 800d206:	d011      	beq.n	800d22c <HAL_GPIO_Init+0x118>
 800d208:	4a20      	ldr	r2, [pc, #128]	; (800d28c <HAL_GPIO_Init+0x178>)
 800d20a:	4694      	mov	ip, r2
 800d20c:	003a      	movs	r2, r7
 800d20e:	4560      	cmp	r0, ip
 800d210:	d00c      	beq.n	800d22c <HAL_GPIO_Init+0x118>
 800d212:	4f1f      	ldr	r7, [pc, #124]	; (800d290 <HAL_GPIO_Init+0x17c>)
 800d214:	1892      	adds	r2, r2, r2
 800d216:	42b8      	cmp	r0, r7
 800d218:	d008      	beq.n	800d22c <HAL_GPIO_Init+0x118>
 800d21a:	4f1e      	ldr	r7, [pc, #120]	; (800d294 <HAL_GPIO_Init+0x180>)
 800d21c:	0032      	movs	r2, r6
 800d21e:	42b8      	cmp	r0, r7
 800d220:	d004      	beq.n	800d22c <HAL_GPIO_Init+0x118>
 800d222:	4e1d      	ldr	r6, [pc, #116]	; (800d298 <HAL_GPIO_Init+0x184>)
 800d224:	3201      	adds	r2, #1
 800d226:	42b0      	cmp	r0, r6
 800d228:	d000      	beq.n	800d22c <HAL_GPIO_Init+0x118>
 800d22a:	9a05      	ldr	r2, [sp, #20]
 800d22c:	9903      	ldr	r1, [sp, #12]
 800d22e:	408a      	lsls	r2, r1
 800d230:	9904      	ldr	r1, [sp, #16]
 800d232:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 800d234:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d236:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 800d238:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 800d23a:	4a18      	ldr	r2, [pc, #96]	; (800d29c <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 800d23c:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800d23e:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 800d240:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d242:	03e1      	lsls	r1, r4, #15
 800d244:	d401      	bmi.n	800d24a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 800d246:	003e      	movs	r6, r7
 800d248:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800d24a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800d24c:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 800d24e:	9e01      	ldr	r6, [sp, #4]
 800d250:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d252:	03a1      	lsls	r1, r4, #14
 800d254:	d401      	bmi.n	800d25a <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 800d256:	003e      	movs	r6, r7
 800d258:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800d25a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800d25c:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 800d25e:	9e01      	ldr	r6, [sp, #4]
 800d260:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d262:	02e1      	lsls	r1, r4, #11
 800d264:	d401      	bmi.n	800d26a <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 800d266:	003e      	movs	r6, r7
 800d268:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800d26a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800d26c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800d26e:	9f01      	ldr	r7, [sp, #4]
 800d270:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d272:	02a1      	lsls	r1, r4, #10
 800d274:	d401      	bmi.n	800d27a <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 800d276:	402e      	ands	r6, r5
 800d278:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800d27a:	60d7      	str	r7, [r2, #12]
    position++;
 800d27c:	3301      	adds	r3, #1
 800d27e:	e753      	b.n	800d128 <HAL_GPIO_Init+0x14>
 800d280:	afffe400 	.word	0xafffe400
 800d284:	40021000 	.word	0x40021000
 800d288:	40010000 	.word	0x40010000
 800d28c:	50000400 	.word	0x50000400
 800d290:	50000800 	.word	0x50000800
 800d294:	50000c00 	.word	0x50000c00
 800d298:	50001000 	.word	0x50001000
 800d29c:	40010400 	.word	0x40010400

0800d2a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d2a0:	6900      	ldr	r0, [r0, #16]
 800d2a2:	4008      	ands	r0, r1
 800d2a4:	1e43      	subs	r3, r0, #1
 800d2a6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800d2a8:	b2c0      	uxtb	r0, r0
}
 800d2aa:	4770      	bx	lr

0800d2ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d2ac:	2a00      	cmp	r2, #0
 800d2ae:	d001      	beq.n	800d2b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d2b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d2b2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800d2b4:	6281      	str	r1, [r0, #40]	; 0x28
}
 800d2b6:	e7fc      	b.n	800d2b2 <HAL_GPIO_WritePin+0x6>

0800d2b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d2b8:	4b04      	ldr	r3, [pc, #16]	; (800d2cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800d2ba:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d2bc:	695a      	ldr	r2, [r3, #20]
 800d2be:	4210      	tst	r0, r2
 800d2c0:	d002      	beq.n	800d2c8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d2c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d2c4:	f004 fd92 	bl	8011dec <HAL_GPIO_EXTI_Callback>
  }
}
 800d2c8:	bd10      	pop	{r4, pc}
 800d2ca:	46c0      	nop			; (mov r8, r8)
 800d2cc:	40010400 	.word	0x40010400

0800d2d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d2d0:	6803      	ldr	r3, [r0, #0]
 800d2d2:	699a      	ldr	r2, [r3, #24]
 800d2d4:	0792      	lsls	r2, r2, #30
 800d2d6:	d501      	bpl.n	800d2dc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d2d8:	2200      	movs	r2, #0
 800d2da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d2dc:	2201      	movs	r2, #1
 800d2de:	6999      	ldr	r1, [r3, #24]
 800d2e0:	4211      	tst	r1, r2
 800d2e2:	d102      	bne.n	800d2ea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d2e4:	6999      	ldr	r1, [r3, #24]
 800d2e6:	430a      	orrs	r2, r1
 800d2e8:	619a      	str	r2, [r3, #24]
  }
}
 800d2ea:	4770      	bx	lr

0800d2ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d2ec:	b530      	push	{r4, r5, lr}
 800d2ee:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800d2f0:	0412      	lsls	r2, r2, #16
 800d2f2:	6800      	ldr	r0, [r0, #0]
 800d2f4:	4322      	orrs	r2, r4
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	4b05      	ldr	r3, [pc, #20]	; (800d310 <I2C_TransferConfig+0x24>)
 800d2fa:	6845      	ldr	r5, [r0, #4]
 800d2fc:	0589      	lsls	r1, r1, #22
 800d2fe:	0d64      	lsrs	r4, r4, #21
 800d300:	0d89      	lsrs	r1, r1, #22
 800d302:	431c      	orrs	r4, r3
 800d304:	43a5      	bics	r5, r4
 800d306:	430a      	orrs	r2, r1
 800d308:	432a      	orrs	r2, r5
 800d30a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d30c:	bd30      	pop	{r4, r5, pc}
 800d30e:	46c0      	nop			; (mov r8, r8)
 800d310:	03ff63ff 	.word	0x03ff63ff

0800d314 <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 800d314:	2300      	movs	r3, #0
{
 800d316:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d318:	07ca      	lsls	r2, r1, #31
 800d31a:	d508      	bpl.n	800d32e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d31c:	0003      	movs	r3, r0
 800d31e:	3341      	adds	r3, #65	; 0x41
 800d320:	781a      	ldrb	r2, [r3, #0]
 800d322:	2328      	movs	r3, #40	; 0x28
 800d324:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d326:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d328:	2a28      	cmp	r2, #40	; 0x28
 800d32a:	d000      	beq.n	800d32e <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d32c:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d32e:	078a      	lsls	r2, r1, #30
 800d330:	d508      	bpl.n	800d344 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d332:	0002      	movs	r2, r0
 800d334:	2428      	movs	r4, #40	; 0x28
 800d336:	3241      	adds	r2, #65	; 0x41
 800d338:	7812      	ldrb	r2, [r2, #0]
 800d33a:	4022      	ands	r2, r4
 800d33c:	42a2      	cmp	r2, r4
 800d33e:	d10b      	bne.n	800d358 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d340:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d342:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d344:	b209      	sxth	r1, r1
 800d346:	2900      	cmp	r1, #0
 800d348:	da01      	bge.n	800d34e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d34a:	22b8      	movs	r2, #184	; 0xb8
 800d34c:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d34e:	6801      	ldr	r1, [r0, #0]
 800d350:	680a      	ldr	r2, [r1, #0]
 800d352:	439a      	bics	r2, r3
 800d354:	600a      	str	r2, [r1, #0]
}
 800d356:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d358:	22f4      	movs	r2, #244	; 0xf4
 800d35a:	e7f2      	b.n	800d342 <I2C_Disable_IRQ+0x2e>

0800d35c <I2C_IsAcknowledgeFailed>:
{
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d35e:	6803      	ldr	r3, [r0, #0]
{
 800d360:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d362:	699a      	ldr	r2, [r3, #24]
{
 800d364:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d366:	2310      	movs	r3, #16
 800d368:	0010      	movs	r0, r2
{
 800d36a:	000d      	movs	r5, r1
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d36c:	2720      	movs	r7, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d36e:	4018      	ands	r0, r3
 800d370:	421a      	tst	r2, r3
 800d372:	d118      	bne.n	800d3a6 <I2C_IsAcknowledgeFailed+0x4a>
}
 800d374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 800d376:	1c6a      	adds	r2, r5, #1
 800d378:	d016      	beq.n	800d3a8 <I2C_IsAcknowledgeFailed+0x4c>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d37a:	f7ff f933 	bl	800c5e4 <HAL_GetTick>
 800d37e:	1b80      	subs	r0, r0, r6
 800d380:	4285      	cmp	r5, r0
 800d382:	d301      	bcc.n	800d388 <I2C_IsAcknowledgeFailed+0x2c>
 800d384:	2d00      	cmp	r5, #0
 800d386:	d10e      	bne.n	800d3a6 <I2C_IsAcknowledgeFailed+0x4a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d388:	2220      	movs	r2, #32
 800d38a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d38c:	4313      	orrs	r3, r2
 800d38e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d390:	0023      	movs	r3, r4
 800d392:	3341      	adds	r3, #65	; 0x41
 800d394:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d396:	0022      	movs	r2, r4
 800d398:	2300      	movs	r3, #0
 800d39a:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800d39c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d39e:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800d3a0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800d3a2:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800d3a4:	e7e6      	b.n	800d374 <I2C_IsAcknowledgeFailed+0x18>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	699a      	ldr	r2, [r3, #24]
 800d3aa:	423a      	tst	r2, r7
 800d3ac:	d0e3      	beq.n	800d376 <I2C_IsAcknowledgeFailed+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3ae:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800d3b0:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3b2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3b4:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800d3b6:	f7ff ff8b 	bl	800d2d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800d3ba:	6822      	ldr	r2, [r4, #0]
 800d3bc:	4905      	ldr	r1, [pc, #20]	; (800d3d4 <I2C_IsAcknowledgeFailed+0x78>)
 800d3be:	6853      	ldr	r3, [r2, #4]
 800d3c0:	400b      	ands	r3, r1
 800d3c2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3c4:	2304      	movs	r3, #4
 800d3c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d3cc:	0023      	movs	r3, r4
 800d3ce:	3341      	adds	r3, #65	; 0x41
 800d3d0:	701f      	strb	r7, [r3, #0]
 800d3d2:	e7e0      	b.n	800d396 <I2C_IsAcknowledgeFailed+0x3a>
 800d3d4:	fe00e800 	.word	0xfe00e800

0800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	0004      	movs	r4, r0
 800d3dc:	000d      	movs	r5, r1
 800d3de:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3e0:	2702      	movs	r7, #2
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	699b      	ldr	r3, [r3, #24]
 800d3e6:	423b      	tst	r3, r7
 800d3e8:	d001      	beq.n	800d3ee <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800d3ea:	2000      	movs	r0, #0
}
 800d3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3ee:	0032      	movs	r2, r6
 800d3f0:	0029      	movs	r1, r5
 800d3f2:	0020      	movs	r0, r4
 800d3f4:	f7ff ffb2 	bl	800d35c <I2C_IsAcknowledgeFailed>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d115      	bne.n	800d428 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800d3fc:	1c6b      	adds	r3, r5, #1
 800d3fe:	d0f0      	beq.n	800d3e2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d400:	f7ff f8f0 	bl	800c5e4 <HAL_GetTick>
 800d404:	1b80      	subs	r0, r0, r6
 800d406:	42a8      	cmp	r0, r5
 800d408:	d801      	bhi.n	800d40e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800d40a:	2d00      	cmp	r5, #0
 800d40c:	d1e9      	bne.n	800d3e2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d40e:	2220      	movs	r2, #32
 800d410:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d412:	4313      	orrs	r3, r2
 800d414:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d416:	0023      	movs	r3, r4
 800d418:	3341      	adds	r3, #65	; 0x41
 800d41a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d41c:	0022      	movs	r2, r4
 800d41e:	2300      	movs	r3, #0
 800d420:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800d422:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d424:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d426:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800d428:	2001      	movs	r0, #1
 800d42a:	e7df      	b.n	800d3ec <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800d42c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	0004      	movs	r4, r0
 800d430:	000d      	movs	r5, r1
 800d432:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d434:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d436:	2204      	movs	r2, #4
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	4213      	tst	r3, r2
 800d43e:	d111      	bne.n	800d464 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d440:	0032      	movs	r2, r6
 800d442:	0029      	movs	r1, r5
 800d444:	0020      	movs	r0, r4
 800d446:	f7ff ff89 	bl	800d35c <I2C_IsAcknowledgeFailed>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d119      	bne.n	800d482 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	699a      	ldr	r2, [r3, #24]
 800d452:	423a      	tst	r2, r7
 800d454:	d017      	beq.n	800d486 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d456:	2104      	movs	r1, #4
 800d458:	699a      	ldr	r2, [r3, #24]
 800d45a:	420a      	tst	r2, r1
 800d45c:	d004      	beq.n	800d468 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 800d45e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d460:	2a00      	cmp	r2, #0
 800d462:	d001      	beq.n	800d468 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 800d464:	2000      	movs	r0, #0
}
 800d466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d468:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	490e      	ldr	r1, [pc, #56]	; (800d4a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 800d46e:	400a      	ands	r2, r1
 800d470:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800d472:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d474:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800d476:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d478:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d47a:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d47c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d47e:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 800d480:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800d482:	2001      	movs	r0, #1
 800d484:	e7ef      	b.n	800d466 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d486:	f7ff f8ad 	bl	800c5e4 <HAL_GetTick>
 800d48a:	1b80      	subs	r0, r0, r6
 800d48c:	42a8      	cmp	r0, r5
 800d48e:	d801      	bhi.n	800d494 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 800d490:	2d00      	cmp	r5, #0
 800d492:	d1d0      	bne.n	800d436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d494:	2220      	movs	r2, #32
 800d496:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d498:	4313      	orrs	r3, r2
 800d49a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d49c:	0023      	movs	r3, r4
 800d49e:	3341      	adds	r3, #65	; 0x41
 800d4a0:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800d4a2:	3440      	adds	r4, #64	; 0x40
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e7eb      	b.n	800d480 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d4a8:	fe00e800 	.word	0xfe00e800

0800d4ac <I2C_WaitOnFlagUntilTimeout>:
{
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	0004      	movs	r4, r0
 800d4b0:	000e      	movs	r6, r1
 800d4b2:	0017      	movs	r7, r2
 800d4b4:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4b6:	6822      	ldr	r2, [r4, #0]
 800d4b8:	6993      	ldr	r3, [r2, #24]
 800d4ba:	4033      	ands	r3, r6
 800d4bc:	1b9b      	subs	r3, r3, r6
 800d4be:	4259      	negs	r1, r3
 800d4c0:	414b      	adcs	r3, r1
 800d4c2:	42bb      	cmp	r3, r7
 800d4c4:	d001      	beq.n	800d4ca <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	e017      	b.n	800d4fa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800d4ca:	1c6b      	adds	r3, r5, #1
 800d4cc:	d0f4      	beq.n	800d4b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ce:	f7ff f889 	bl	800c5e4 <HAL_GetTick>
 800d4d2:	9b06      	ldr	r3, [sp, #24]
 800d4d4:	1ac0      	subs	r0, r0, r3
 800d4d6:	42a8      	cmp	r0, r5
 800d4d8:	d801      	bhi.n	800d4de <I2C_WaitOnFlagUntilTimeout+0x32>
 800d4da:	2d00      	cmp	r5, #0
 800d4dc:	d1eb      	bne.n	800d4b6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4de:	2220      	movs	r2, #32
 800d4e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d4e2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d4e8:	0023      	movs	r3, r4
 800d4ea:	3341      	adds	r3, #65	; 0x41
 800d4ec:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4ee:	0022      	movs	r2, r4
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800d4f4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4f6:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d4f8:	7023      	strb	r3, [r4, #0]
}
 800d4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4fc <I2C_RequestMemoryWrite>:
{
 800d4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4fe:	0014      	movs	r4, r2
 800d500:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d502:	b2da      	uxtb	r2, r3
 800d504:	4b16      	ldr	r3, [pc, #88]	; (800d560 <I2C_RequestMemoryWrite+0x64>)
{
 800d506:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	2380      	movs	r3, #128	; 0x80
{
 800d50c:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d50e:	045b      	lsls	r3, r3, #17
 800d510:	f7ff feec 	bl	800d2ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d514:	0039      	movs	r1, r7
 800d516:	0028      	movs	r0, r5
 800d518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d51a:	f7ff ff5d 	bl	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d51e:	2800      	cmp	r0, #0
 800d520:	d001      	beq.n	800d526 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800d522:	2001      	movs	r0, #1
}
 800d524:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d526:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d528:	2e01      	cmp	r6, #1
 800d52a:	d10d      	bne.n	800d548 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d52c:	b2e4      	uxtb	r4, r4
 800d52e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d532:	2200      	movs	r2, #0
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	2180      	movs	r1, #128	; 0x80
 800d538:	003b      	movs	r3, r7
 800d53a:	0028      	movs	r0, r5
 800d53c:	f7ff ffb6 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d540:	1e43      	subs	r3, r0, #1
 800d542:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800d544:	b2c0      	uxtb	r0, r0
 800d546:	e7ed      	b.n	800d524 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d548:	0a22      	lsrs	r2, r4, #8
 800d54a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d54c:	0039      	movs	r1, r7
 800d54e:	0028      	movs	r0, r5
 800d550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d552:	f7ff ff41 	bl	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d556:	2800      	cmp	r0, #0
 800d558:	d1e3      	bne.n	800d522 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	e7e6      	b.n	800d52c <I2C_RequestMemoryWrite+0x30>
 800d55e:	46c0      	nop			; (mov r8, r8)
 800d560:	80002000 	.word	0x80002000

0800d564 <I2C_RequestMemoryRead>:
{
 800d564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d566:	0005      	movs	r5, r0
 800d568:	0014      	movs	r4, r2
 800d56a:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	4b15      	ldr	r3, [pc, #84]	; (800d5c4 <I2C_RequestMemoryRead+0x60>)
{
 800d570:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	2300      	movs	r3, #0
 800d576:	f7ff feb9 	bl	800d2ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d57a:	0039      	movs	r1, r7
 800d57c:	0028      	movs	r0, r5
 800d57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d580:	f7ff ff2a 	bl	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d584:	2800      	cmp	r0, #0
 800d586:	d001      	beq.n	800d58c <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 800d588:	2001      	movs	r0, #1
}
 800d58a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d58c:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d58e:	2e01      	cmp	r6, #1
 800d590:	d10d      	bne.n	800d5ae <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d592:	b2e4      	uxtb	r4, r4
 800d594:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d598:	2200      	movs	r2, #0
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	2140      	movs	r1, #64	; 0x40
 800d59e:	003b      	movs	r3, r7
 800d5a0:	0028      	movs	r0, r5
 800d5a2:	f7ff ff83 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d5a6:	1e43      	subs	r3, r0, #1
 800d5a8:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800d5aa:	b2c0      	uxtb	r0, r0
 800d5ac:	e7ed      	b.n	800d58a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d5ae:	0a22      	lsrs	r2, r4, #8
 800d5b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5b2:	0039      	movs	r1, r7
 800d5b4:	0028      	movs	r0, r5
 800d5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5b8:	f7ff ff0e 	bl	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d1e3      	bne.n	800d588 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	e7e6      	b.n	800d592 <I2C_RequestMemoryRead+0x2e>
 800d5c4:	80002000 	.word	0x80002000

0800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ca:	0004      	movs	r4, r0
 800d5cc:	000d      	movs	r5, r1
 800d5ce:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d5d0:	2720      	movs	r7, #32
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	423b      	tst	r3, r7
 800d5d8:	d001      	beq.n	800d5de <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800d5da:	2000      	movs	r0, #0
}
 800d5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5de:	0032      	movs	r2, r6
 800d5e0:	0029      	movs	r1, r5
 800d5e2:	0020      	movs	r0, r4
 800d5e4:	f7ff feba 	bl	800d35c <I2C_IsAcknowledgeFailed>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d113      	bne.n	800d614 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5ec:	f7fe fffa 	bl	800c5e4 <HAL_GetTick>
 800d5f0:	1b80      	subs	r0, r0, r6
 800d5f2:	42a8      	cmp	r0, r5
 800d5f4:	d801      	bhi.n	800d5fa <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	d1eb      	bne.n	800d5d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d5fa:	2220      	movs	r2, #32
 800d5fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d5fe:	4313      	orrs	r3, r2
 800d600:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d602:	0023      	movs	r3, r4
 800d604:	3341      	adds	r3, #65	; 0x41
 800d606:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d608:	0022      	movs	r2, r4
 800d60a:	2300      	movs	r3, #0
 800d60c:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800d60e:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d610:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d612:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800d614:	2001      	movs	r0, #1
 800d616:	e7e1      	b.n	800d5dc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800d618 <HAL_I2C_Init>:
{
 800d618:	b570      	push	{r4, r5, r6, lr}
 800d61a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800d61c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800d61e:	2c00      	cmp	r4, #0
 800d620:	d03f      	beq.n	800d6a2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d622:	0025      	movs	r5, r4
 800d624:	3541      	adds	r5, #65	; 0x41
 800d626:	782b      	ldrb	r3, [r5, #0]
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d105      	bne.n	800d63a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800d62e:	0023      	movs	r3, r4
 800d630:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d632:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800d634:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800d636:	f003 fb37 	bl	8010ca8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d63a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800d63c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d63e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800d640:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d642:	481d      	ldr	r0, [pc, #116]	; (800d6b8 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800d644:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d646:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800d648:	438a      	bics	r2, r1
 800d64a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d64c:	6861      	ldr	r1, [r4, #4]
 800d64e:	4a1b      	ldr	r2, [pc, #108]	; (800d6bc <HAL_I2C_Init+0xa4>)
 800d650:	400a      	ands	r2, r1
 800d652:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d654:	689a      	ldr	r2, [r3, #8]
 800d656:	4002      	ands	r2, r0
 800d658:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d65a:	68e2      	ldr	r2, [r4, #12]
 800d65c:	2a01      	cmp	r2, #1
 800d65e:	d121      	bne.n	800d6a4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d660:	2180      	movs	r1, #128	; 0x80
 800d662:	0209      	lsls	r1, r1, #8
 800d664:	4331      	orrs	r1, r6
 800d666:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	4915      	ldr	r1, [pc, #84]	; (800d6c0 <HAL_I2C_Init+0xa8>)
 800d66c:	4311      	orrs	r1, r2
 800d66e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d670:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d672:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d674:	4002      	ands	r2, r0
 800d676:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d678:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d67a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d67c:	430a      	orrs	r2, r1
 800d67e:	69a1      	ldr	r1, [r4, #24]
 800d680:	0209      	lsls	r1, r1, #8
 800d682:	430a      	orrs	r2, r1
 800d684:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d686:	6a21      	ldr	r1, [r4, #32]
 800d688:	69e2      	ldr	r2, [r4, #28]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d68e:	2201      	movs	r2, #1
 800d690:	6819      	ldr	r1, [r3, #0]
 800d692:	430a      	orrs	r2, r1
 800d694:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800d696:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d698:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d69a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d69c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d69e:	3442      	adds	r4, #66	; 0x42
 800d6a0:	7020      	strb	r0, [r4, #0]
}
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d6a4:	2184      	movs	r1, #132	; 0x84
 800d6a6:	0209      	lsls	r1, r1, #8
 800d6a8:	4331      	orrs	r1, r6
 800d6aa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d6ac:	2a02      	cmp	r2, #2
 800d6ae:	d1db      	bne.n	800d668 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d6b0:	2280      	movs	r2, #128	; 0x80
 800d6b2:	0112      	lsls	r2, r2, #4
 800d6b4:	605a      	str	r2, [r3, #4]
 800d6b6:	e7d7      	b.n	800d668 <HAL_I2C_Init+0x50>
 800d6b8:	ffff7fff 	.word	0xffff7fff
 800d6bc:	f0ffffff 	.word	0xf0ffffff
 800d6c0:	02008000 	.word	0x02008000

0800d6c4 <HAL_I2C_Master_Transmit>:
{
 800d6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c6:	b087      	sub	sp, #28
 800d6c8:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	3341      	adds	r3, #65	; 0x41
{
 800d6ce:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
{
 800d6d4:	0004      	movs	r4, r0
 800d6d6:	000f      	movs	r7, r1
    return HAL_BUSY;
 800d6d8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6da:	2b20      	cmp	r3, #32
 800d6dc:	d114      	bne.n	800d708 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800d6de:	0023      	movs	r3, r4
 800d6e0:	3340      	adds	r3, #64	; 0x40
 800d6e2:	781a      	ldrb	r2, [r3, #0]
 800d6e4:	2a01      	cmp	r2, #1
 800d6e6:	d00f      	beq.n	800d708 <HAL_I2C_Master_Transmit+0x44>
 800d6e8:	2601      	movs	r6, #1
 800d6ea:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800d6ec:	f7fe ff7a 	bl	800c5e4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d6f0:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800d6f2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d6f4:	9000      	str	r0, [sp, #0]
 800d6f6:	2319      	movs	r3, #25
 800d6f8:	0032      	movs	r2, r6
 800d6fa:	0020      	movs	r0, r4
 800d6fc:	0209      	lsls	r1, r1, #8
 800d6fe:	f7ff fed5 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d702:	2800      	cmp	r0, #0
 800d704:	d002      	beq.n	800d70c <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 800d706:	2001      	movs	r0, #1
}
 800d708:	b007      	add	sp, #28
 800d70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d70c:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d70e:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d710:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d712:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d714:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d716:	3b11      	subs	r3, #17
 800d718:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800d71a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d71c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800d71e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800d720:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800d722:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800d724:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d726:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d728:	4b2d      	ldr	r3, [pc, #180]	; (800d7e0 <HAL_I2C_Master_Transmit+0x11c>)
 800d72a:	2aff      	cmp	r2, #255	; 0xff
 800d72c:	d920      	bls.n	800d770 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d72e:	22ff      	movs	r2, #255	; 0xff
 800d730:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	2380      	movs	r3, #128	; 0x80
 800d736:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d738:	0039      	movs	r1, r7
 800d73a:	0020      	movs	r0, r4
 800d73c:	f7ff fdd6 	bl	800d2ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d740:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d742:	002a      	movs	r2, r5
 800d744:	0020      	movs	r0, r4
 800d746:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d119      	bne.n	800d780 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d74c:	f7ff ff3c 	bl	800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d750:	2800      	cmp	r0, #0
 800d752:	d1d8      	bne.n	800d706 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d754:	2120      	movs	r1, #32
 800d756:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800d758:	4d22      	ldr	r5, [pc, #136]	; (800d7e4 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d75a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	402a      	ands	r2, r5
 800d760:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d762:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800d764:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800d766:	3341      	adds	r3, #65	; 0x41
 800d768:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d76a:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 800d76c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800d76e:	e7cb      	b.n	800d708 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800d770:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d772:	b292      	uxth	r2, r2
 800d774:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800d776:	b2d2      	uxtb	r2, r2
 800d778:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d77a:	2380      	movs	r3, #128	; 0x80
 800d77c:	049b      	lsls	r3, r3, #18
 800d77e:	e7db      	b.n	800d738 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d780:	f7ff fe2a 	bl	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d784:	2800      	cmp	r0, #0
 800d786:	d1be      	bne.n	800d706 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d78a:	6822      	ldr	r2, [r4, #0]
 800d78c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800d78e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d790:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d792:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d794:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d796:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d798:	3b01      	subs	r3, #1
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d79e:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d7a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d7a2:	b292      	uxth	r2, r2
 800d7a4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d0ca      	beq.n	800d740 <HAL_I2C_Master_Transmit+0x7c>
 800d7aa:	2a00      	cmp	r2, #0
 800d7ac:	d1c8      	bne.n	800d740 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d7ae:	2180      	movs	r1, #128	; 0x80
 800d7b0:	0020      	movs	r0, r4
 800d7b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7b4:	9500      	str	r5, [sp, #0]
 800d7b6:	f7ff fe79 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d1a3      	bne.n	800d706 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d7c0:	2bff      	cmp	r3, #255	; 0xff
 800d7c2:	d906      	bls.n	800d7d2 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7c4:	23ff      	movs	r3, #255	; 0xff
 800d7c6:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d7c8:	2380      	movs	r3, #128	; 0x80
 800d7ca:	22ff      	movs	r2, #255	; 0xff
 800d7cc:	9000      	str	r0, [sp, #0]
 800d7ce:	045b      	lsls	r3, r3, #17
 800d7d0:	e7b2      	b.n	800d738 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800d7d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d7d4:	b292      	uxth	r2, r2
 800d7d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d7d8:	b2d2      	uxtb	r2, r2
 800d7da:	9000      	str	r0, [sp, #0]
 800d7dc:	e7cd      	b.n	800d77a <HAL_I2C_Master_Transmit+0xb6>
 800d7de:	46c0      	nop			; (mov r8, r8)
 800d7e0:	80002000 	.word	0x80002000
 800d7e4:	fe00e800 	.word	0xfe00e800

0800d7e8 <HAL_I2C_Master_Receive>:
{
 800d7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ea:	b087      	sub	sp, #28
 800d7ec:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7ee:	0003      	movs	r3, r0
 800d7f0:	3341      	adds	r3, #65	; 0x41
{
 800d7f2:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7f4:	9303      	str	r3, [sp, #12]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
{
 800d7f8:	0004      	movs	r4, r0
 800d7fa:	000f      	movs	r7, r1
    return HAL_BUSY;
 800d7fc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7fe:	2b20      	cmp	r3, #32
 800d800:	d114      	bne.n	800d82c <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800d802:	0023      	movs	r3, r4
 800d804:	3340      	adds	r3, #64	; 0x40
 800d806:	781a      	ldrb	r2, [r3, #0]
 800d808:	2a01      	cmp	r2, #1
 800d80a:	d00f      	beq.n	800d82c <HAL_I2C_Master_Receive+0x44>
 800d80c:	2601      	movs	r6, #1
 800d80e:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800d810:	f7fe fee8 	bl	800c5e4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d814:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800d816:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d818:	9000      	str	r0, [sp, #0]
 800d81a:	2319      	movs	r3, #25
 800d81c:	0032      	movs	r2, r6
 800d81e:	0020      	movs	r0, r4
 800d820:	0209      	lsls	r1, r1, #8
 800d822:	f7ff fe43 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d826:	2800      	cmp	r0, #0
 800d828:	d002      	beq.n	800d830 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 800d82a:	2001      	movs	r0, #1
}
 800d82c:	b007      	add	sp, #28
 800d82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d830:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d832:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d834:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d836:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d838:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d83a:	3b12      	subs	r3, #18
 800d83c:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800d83e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d840:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800d842:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800d844:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800d846:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800d848:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d84a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d84c:	4b2d      	ldr	r3, [pc, #180]	; (800d904 <HAL_I2C_Master_Receive+0x11c>)
 800d84e:	2aff      	cmp	r2, #255	; 0xff
 800d850:	d920      	bls.n	800d894 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d852:	22ff      	movs	r2, #255	; 0xff
 800d854:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	2380      	movs	r3, #128	; 0x80
 800d85a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d85c:	0039      	movs	r1, r7
 800d85e:	0020      	movs	r0, r4
 800d860:	f7ff fd44 	bl	800d2ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d864:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d866:	002a      	movs	r2, r5
 800d868:	0020      	movs	r0, r4
 800d86a:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d119      	bne.n	800d8a4 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d870:	f7ff feaa 	bl	800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d874:	2800      	cmp	r0, #0
 800d876:	d1d8      	bne.n	800d82a <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d878:	2120      	movs	r1, #32
 800d87a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800d87c:	4d22      	ldr	r5, [pc, #136]	; (800d908 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d87e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	402a      	ands	r2, r5
 800d884:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d886:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800d888:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800d88a:	3341      	adds	r3, #65	; 0x41
 800d88c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d88e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 800d890:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800d892:	e7cb      	b.n	800d82c <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800d894:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d896:	b292      	uxth	r2, r2
 800d898:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800d89a:	b2d2      	uxtb	r2, r2
 800d89c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d89e:	2380      	movs	r3, #128	; 0x80
 800d8a0:	049b      	lsls	r3, r3, #18
 800d8a2:	e7db      	b.n	800d85c <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8a4:	f7ff fdc2 	bl	800d42c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d1be      	bne.n	800d82a <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800d8b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d8b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d8bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d8be:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d8c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d8c8:	b292      	uxth	r2, r2
 800d8ca:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d0c9      	beq.n	800d864 <HAL_I2C_Master_Receive+0x7c>
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	d1c7      	bne.n	800d864 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d8d4:	2180      	movs	r1, #128	; 0x80
 800d8d6:	0020      	movs	r0, r4
 800d8d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8da:	9500      	str	r5, [sp, #0]
 800d8dc:	f7ff fde6 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d1a2      	bne.n	800d82a <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d8e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d8e6:	2bff      	cmp	r3, #255	; 0xff
 800d8e8:	d906      	bls.n	800d8f8 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d8ea:	23ff      	movs	r3, #255	; 0xff
 800d8ec:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d8ee:	2380      	movs	r3, #128	; 0x80
 800d8f0:	22ff      	movs	r2, #255	; 0xff
 800d8f2:	9000      	str	r0, [sp, #0]
 800d8f4:	045b      	lsls	r3, r3, #17
 800d8f6:	e7b1      	b.n	800d85c <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800d8f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d8fa:	b292      	uxth	r2, r2
 800d8fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d8fe:	b2d2      	uxtb	r2, r2
 800d900:	9000      	str	r0, [sp, #0]
 800d902:	e7cc      	b.n	800d89e <HAL_I2C_Master_Receive+0xb6>
 800d904:	80002400 	.word	0x80002400
 800d908:	fe00e800 	.word	0xfe00e800

0800d90c <HAL_I2C_Mem_Write>:
{
 800d90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d90e:	b089      	sub	sp, #36	; 0x24
 800d910:	9307      	str	r3, [sp, #28]
 800d912:	ab0e      	add	r3, sp, #56	; 0x38
 800d914:	9206      	str	r2, [sp, #24]
 800d916:	cb04      	ldmia	r3!, {r2}
 800d918:	0004      	movs	r4, r0
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	9203      	str	r2, [sp, #12]
 800d91e:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d920:	0003      	movs	r3, r0
 800d922:	3341      	adds	r3, #65	; 0x41
 800d924:	9305      	str	r3, [sp, #20]
 800d926:	781b      	ldrb	r3, [r3, #0]
{
 800d928:	000f      	movs	r7, r1
    return HAL_BUSY;
 800d92a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d92c:	2b20      	cmp	r3, #32
 800d92e:	d108      	bne.n	800d942 <HAL_I2C_Mem_Write+0x36>
    if ((pData == NULL) || (Size == 0U))
 800d930:	2a00      	cmp	r2, #0
 800d932:	d002      	beq.n	800d93a <HAL_I2C_Mem_Write+0x2e>
 800d934:	9b04      	ldr	r3, [sp, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d105      	bne.n	800d946 <HAL_I2C_Mem_Write+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d93a:	2380      	movs	r3, #128	; 0x80
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800d940:	2001      	movs	r0, #1
}
 800d942:	b009      	add	sp, #36	; 0x24
 800d944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800d946:	0023      	movs	r3, r4
 800d948:	3340      	adds	r3, #64	; 0x40
 800d94a:	9302      	str	r3, [sp, #8]
 800d94c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800d94e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800d950:	2b01      	cmp	r3, #1
 800d952:	d0f6      	beq.n	800d942 <HAL_I2C_Mem_Write+0x36>
 800d954:	2201      	movs	r2, #1
 800d956:	9b02      	ldr	r3, [sp, #8]
 800d958:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800d95a:	f7fe fe43 	bl	800c5e4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d95e:	2180      	movs	r1, #128	; 0x80
 800d960:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800d962:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d964:	2319      	movs	r3, #25
 800d966:	2201      	movs	r2, #1
 800d968:	0020      	movs	r0, r4
 800d96a:	0209      	lsls	r1, r1, #8
 800d96c:	f7ff fd9e 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800d970:	1e06      	subs	r6, r0, #0
 800d972:	d1e5      	bne.n	800d940 <HAL_I2C_Mem_Write+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d974:	2321      	movs	r3, #33	; 0x21
 800d976:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d978:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d97a:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d97c:	0023      	movs	r3, r4
 800d97e:	3342      	adds	r3, #66	; 0x42
 800d980:	9305      	str	r3, [sp, #20]
 800d982:	2340      	movs	r3, #64	; 0x40
 800d984:	9a05      	ldr	r2, [sp, #20]
 800d986:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800d988:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d98a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800d98c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800d98e:	9b04      	ldr	r3, [sp, #16]
    hi2c->XferISR   = NULL;
 800d990:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800d992:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d996:	0020      	movs	r0, r4
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	9a06      	ldr	r2, [sp, #24]
 800d99c:	9b07      	ldr	r3, [sp, #28]
 800d99e:	9501      	str	r5, [sp, #4]
 800d9a0:	f7ff fdac 	bl	800d4fc <I2C_RequestMemoryWrite>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d002      	beq.n	800d9ae <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800d9a8:	9b02      	ldr	r3, [sp, #8]
 800d9aa:	701e      	strb	r6, [r3, #0]
 800d9ac:	e7c8      	b.n	800d940 <HAL_I2C_Mem_Write+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d9b0:	2bff      	cmp	r3, #255	; 0xff
 800d9b2:	d954      	bls.n	800da5e <HAL_I2C_Mem_Write+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d9b4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d9b6:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d9b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d9ba:	045b      	lsls	r3, r3, #17
 800d9bc:	9000      	str	r0, [sp, #0]
 800d9be:	0039      	movs	r1, r7
 800d9c0:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d9c2:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d9c4:	f7ff fc92 	bl	800d2ec <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d9c8:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9ca:	002a      	movs	r2, r5
 800d9cc:	0020      	movs	r0, r4
 800d9ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d9d0:	f7ff fd02 	bl	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d1b3      	bne.n	800d940 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d9d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9da:	6822      	ldr	r2, [r4, #0]
 800d9dc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800d9de:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d9e0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d9e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d9e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d9e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d9ee:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d9f2:	b292      	uxth	r2, r2
 800d9f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d017      	beq.n	800da2a <HAL_I2C_Mem_Write+0x11e>
 800d9fa:	2a00      	cmp	r2, #0
 800d9fc:	d115      	bne.n	800da2a <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d9fe:	2180      	movs	r1, #128	; 0x80
 800da00:	0020      	movs	r0, r4
 800da02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da04:	9500      	str	r5, [sp, #0]
 800da06:	f7ff fd51 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d000      	beq.n	800da10 <HAL_I2C_Mem_Write+0x104>
 800da0e:	e797      	b.n	800d940 <HAL_I2C_Mem_Write+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800da12:	2bff      	cmp	r3, #255	; 0xff
 800da14:	d92b      	bls.n	800da6e <HAL_I2C_Mem_Write+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800da16:	23ff      	movs	r3, #255	; 0xff
 800da18:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800da1a:	2380      	movs	r3, #128	; 0x80
 800da1c:	22ff      	movs	r2, #255	; 0xff
 800da1e:	9000      	str	r0, [sp, #0]
 800da20:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da22:	0039      	movs	r1, r7
 800da24:	0020      	movs	r0, r4
 800da26:	f7ff fc61 	bl	800d2ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800da2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1cc      	bne.n	800d9ca <HAL_I2C_Mem_Write+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da30:	002a      	movs	r2, r5
 800da32:	0020      	movs	r0, r4
 800da34:	9910      	ldr	r1, [sp, #64]	; 0x40
 800da36:	f7ff fdc7 	bl	800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d000      	beq.n	800da40 <HAL_I2C_Mem_Write+0x134>
 800da3e:	e77f      	b.n	800d940 <HAL_I2C_Mem_Write+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da40:	2120      	movs	r1, #32
 800da42:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800da44:	4d0d      	ldr	r5, [pc, #52]	; (800da7c <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da46:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800da48:	685a      	ldr	r2, [r3, #4]
 800da4a:	402a      	ands	r2, r5
 800da4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800da4e:	0023      	movs	r3, r4
 800da50:	3341      	adds	r3, #65	; 0x41
 800da52:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800da54:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 800da56:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800da58:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800da5a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800da5c:	e771      	b.n	800d942 <HAL_I2C_Mem_Write+0x36>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da5e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800da60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da62:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800da64:	b292      	uxth	r2, r2
 800da66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da68:	b2d2      	uxtb	r2, r2
 800da6a:	9000      	str	r0, [sp, #0]
 800da6c:	e7a7      	b.n	800d9be <HAL_I2C_Mem_Write+0xb2>
          hi2c->XferSize = hi2c->XferCount;
 800da6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da70:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800da72:	b292      	uxth	r2, r2
 800da74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da76:	b2d2      	uxtb	r2, r2
 800da78:	9000      	str	r0, [sp, #0]
 800da7a:	e7d2      	b.n	800da22 <HAL_I2C_Mem_Write+0x116>
 800da7c:	fe00e800 	.word	0xfe00e800

0800da80 <HAL_I2C_Mem_Read>:
{
 800da80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da82:	b08b      	sub	sp, #44	; 0x2c
 800da84:	9309      	str	r3, [sp, #36]	; 0x24
 800da86:	ab10      	add	r3, sp, #64	; 0x40
 800da88:	9208      	str	r2, [sp, #32]
 800da8a:	cb04      	ldmia	r3!, {r2}
 800da8c:	0004      	movs	r4, r0
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	9205      	str	r2, [sp, #20]
 800da92:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800da94:	0003      	movs	r3, r0
 800da96:	3341      	adds	r3, #65	; 0x41
 800da98:	9307      	str	r3, [sp, #28]
 800da9a:	781b      	ldrb	r3, [r3, #0]
{
 800da9c:	000d      	movs	r5, r1
    return HAL_BUSY;
 800da9e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800daa0:	2b20      	cmp	r3, #32
 800daa2:	d108      	bne.n	800dab6 <HAL_I2C_Mem_Read+0x36>
    if ((pData == NULL) || (Size == 0U))
 800daa4:	2a00      	cmp	r2, #0
 800daa6:	d002      	beq.n	800daae <HAL_I2C_Mem_Read+0x2e>
 800daa8:	9b06      	ldr	r3, [sp, #24]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d105      	bne.n	800daba <HAL_I2C_Mem_Read+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800daae:	2380      	movs	r3, #128	; 0x80
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800dab4:	2001      	movs	r0, #1
}
 800dab6:	b00b      	add	sp, #44	; 0x2c
 800dab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800daba:	0023      	movs	r3, r4
 800dabc:	3340      	adds	r3, #64	; 0x40
 800dabe:	9304      	str	r3, [sp, #16]
 800dac0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800dac2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d0f6      	beq.n	800dab6 <HAL_I2C_Mem_Read+0x36>
 800dac8:	2701      	movs	r7, #1
 800daca:	9b04      	ldr	r3, [sp, #16]
 800dacc:	701f      	strb	r7, [r3, #0]
    tickstart = HAL_GetTick();
 800dace:	f7fe fd89 	bl	800c5e4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dad2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800dad4:	9003      	str	r0, [sp, #12]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dad6:	9000      	str	r0, [sp, #0]
 800dad8:	2319      	movs	r3, #25
 800dada:	003a      	movs	r2, r7
 800dadc:	0020      	movs	r0, r4
 800dade:	0209      	lsls	r1, r1, #8
 800dae0:	f7ff fce4 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800dae4:	1e06      	subs	r6, r0, #0
 800dae6:	d1e5      	bne.n	800dab4 <HAL_I2C_Mem_Read+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dae8:	2322      	movs	r3, #34	; 0x22
 800daea:	9a07      	ldr	r2, [sp, #28]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800daec:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800daee:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800daf0:	0023      	movs	r3, r4
 800daf2:	3342      	adds	r3, #66	; 0x42
 800daf4:	9307      	str	r3, [sp, #28]
 800daf6:	2340      	movs	r3, #64	; 0x40
 800daf8:	9a07      	ldr	r2, [sp, #28]
 800dafa:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800dafc:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dafe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800db00:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800db02:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 800db04:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800db06:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	0020      	movs	r0, r4
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db10:	9a08      	ldr	r2, [sp, #32]
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db16:	f7ff fd25 	bl	800d564 <I2C_RequestMemoryRead>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d002      	beq.n	800db24 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 800db1e:	9b04      	ldr	r3, [sp, #16]
 800db20:	701e      	strb	r6, [r3, #0]
      return HAL_ERROR;
 800db22:	e7c7      	b.n	800dab4 <HAL_I2C_Mem_Read+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800db26:	4b36      	ldr	r3, [pc, #216]	; (800dc00 <HAL_I2C_Mem_Read+0x180>)
 800db28:	2aff      	cmp	r2, #255	; 0xff
 800db2a:	d959      	bls.n	800dbe0 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db2c:	22ff      	movs	r2, #255	; 0xff
 800db2e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	2380      	movs	r3, #128	; 0x80
 800db34:	045b      	lsls	r3, r3, #17
 800db36:	0029      	movs	r1, r5
 800db38:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db3a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800db3c:	f7ff fbd6 	bl	800d2ec <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db40:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db42:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800db44:	9b03      	ldr	r3, [sp, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	2104      	movs	r1, #4
 800db4c:	0020      	movs	r0, r4
 800db4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db50:	f7ff fcac 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800db54:	2800      	cmp	r0, #0
 800db56:	d1ad      	bne.n	800dab4 <HAL_I2C_Mem_Read+0x34>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800db60:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800db62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800db64:	3301      	adds	r3, #1
 800db66:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800db68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800db6a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800db6c:	3b01      	subs	r3, #1
 800db6e:	b29b      	uxth	r3, r3
 800db70:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800db74:	b292      	uxth	r2, r2
 800db76:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d017      	beq.n	800dbac <HAL_I2C_Mem_Read+0x12c>
 800db7c:	2a00      	cmp	r2, #0
 800db7e:	d115      	bne.n	800dbac <HAL_I2C_Mem_Read+0x12c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800db80:	9b03      	ldr	r3, [sp, #12]
 800db82:	2180      	movs	r1, #128	; 0x80
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	0020      	movs	r0, r4
 800db88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db8a:	f7ff fc8f 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d000      	beq.n	800db94 <HAL_I2C_Mem_Read+0x114>
 800db92:	e78f      	b.n	800dab4 <HAL_I2C_Mem_Read+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800db96:	2bff      	cmp	r3, #255	; 0xff
 800db98:	d92a      	bls.n	800dbf0 <HAL_I2C_Mem_Read+0x170>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800db9a:	2380      	movs	r3, #128	; 0x80
 800db9c:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db9e:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dba0:	045b      	lsls	r3, r3, #17
 800dba2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dba4:	0029      	movs	r1, r5
 800dba6:	0020      	movs	r0, r4
 800dba8:	f7ff fba0 	bl	800d2ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800dbac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1c8      	bne.n	800db44 <HAL_I2C_Mem_Read+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbb2:	0020      	movs	r0, r4
 800dbb4:	9a03      	ldr	r2, [sp, #12]
 800dbb6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dbb8:	f7ff fd06 	bl	800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d000      	beq.n	800dbc2 <HAL_I2C_Mem_Read+0x142>
 800dbc0:	e778      	b.n	800dab4 <HAL_I2C_Mem_Read+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dbc2:	2120      	movs	r1, #32
 800dbc4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800dbc6:	4d0f      	ldr	r5, [pc, #60]	; (800dc04 <HAL_I2C_Mem_Read+0x184>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dbc8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800dbca:	685a      	ldr	r2, [r3, #4]
 800dbcc:	402a      	ands	r2, r5
 800dbce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dbd0:	0023      	movs	r3, r4
 800dbd2:	3341      	adds	r3, #65	; 0x41
 800dbd4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dbd6:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800dbd8:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dbda:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800dbdc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800dbde:	e76a      	b.n	800dab6 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = hi2c->XferCount;
 800dbe0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800dbe2:	b292      	uxth	r2, r2
 800dbe4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	2380      	movs	r3, #128	; 0x80
 800dbea:	b2d2      	uxtb	r2, r2
 800dbec:	049b      	lsls	r3, r3, #18
 800dbee:	e7a2      	b.n	800db36 <HAL_I2C_Mem_Read+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 800dbf0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dbf2:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800dbf4:	b292      	uxth	r2, r2
 800dbf6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dbf8:	b2d2      	uxtb	r2, r2
 800dbfa:	9000      	str	r0, [sp, #0]
 800dbfc:	e7d2      	b.n	800dba4 <HAL_I2C_Mem_Read+0x124>
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	80002400 	.word	0x80002400
 800dc04:	fe00e800 	.word	0xfe00e800

0800dc08 <HAL_I2C_IsDeviceReady>:
{
 800dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0a:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 800dc0c:	2300      	movs	r3, #0
{
 800dc0e:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 800dc10:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc12:	0003      	movs	r3, r0
{
 800dc14:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc16:	3341      	adds	r3, #65	; 0x41
 800dc18:	781a      	ldrb	r2, [r3, #0]
{
 800dc1a:	0004      	movs	r4, r0
    return HAL_BUSY;
 800dc1c:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc1e:	2a20      	cmp	r2, #32
 800dc20:	d15b      	bne.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800dc22:	6802      	ldr	r2, [r0, #0]
 800dc24:	6997      	ldr	r7, [r2, #24]
 800dc26:	2280      	movs	r2, #128	; 0x80
 800dc28:	0038      	movs	r0, r7
 800dc2a:	0212      	lsls	r2, r2, #8
 800dc2c:	4010      	ands	r0, r2
 800dc2e:	4217      	tst	r7, r2
 800dc30:	d153      	bne.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 800dc32:	0022      	movs	r2, r4
 800dc34:	3240      	adds	r2, #64	; 0x40
 800dc36:	7817      	ldrb	r7, [r2, #0]
 800dc38:	2f01      	cmp	r7, #1
 800dc3a:	d04e      	beq.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
 800dc3c:	3d01      	subs	r5, #1
 800dc3e:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc40:	2224      	movs	r2, #36	; 0x24
 800dc42:	0589      	lsls	r1, r1, #22
 800dc44:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc46:	0d8b      	lsrs	r3, r1, #22
 800dc48:	6460      	str	r0, [r4, #68]	; 0x44
 800dc4a:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800dc4c:	68e3      	ldr	r3, [r4, #12]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d12b      	bne.n	800dcaa <HAL_I2C_IsDeviceReady+0xa2>
 800dc52:	4b3e      	ldr	r3, [pc, #248]	; (800dd4c <HAL_I2C_IsDeviceReady+0x144>)
 800dc54:	9a04      	ldr	r2, [sp, #16]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	6822      	ldr	r2, [r4, #0]
 800dc5a:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800dc5c:	f7fe fcc2 	bl	800c5e4 <HAL_GetTick>
 800dc60:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc62:	2201      	movs	r2, #1
 800dc64:	6823      	ldr	r3, [r4, #0]
 800dc66:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dc68:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc6a:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dc6c:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc6e:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dc70:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800dc72:	431d      	orrs	r5, r3
 800dc74:	d01c      	beq.n	800dcb0 <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	2710      	movs	r7, #16
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	001a      	movs	r2, r3
 800dc7e:	403a      	ands	r2, r7
 800dc80:	423b      	tst	r3, r7
 800dc82:	d12d      	bne.n	800dce0 <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	2120      	movs	r1, #32
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	0020      	movs	r0, r4
 800dc8c:	0033      	movs	r3, r6
 800dc8e:	f7ff fc0d 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d121      	bne.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc96:	2320      	movs	r3, #32
 800dc98:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 800dc9a:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc9c:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800dc9e:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 800dca0:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800dca2:	3241      	adds	r2, #65	; 0x41
 800dca4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800dca6:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 800dca8:	e017      	b.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800dcaa:	23a0      	movs	r3, #160	; 0xa0
 800dcac:	019b      	lsls	r3, r3, #6
 800dcae:	e7d1      	b.n	800dc54 <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 800dcb0:	1c73      	adds	r3, r6, #1
 800dcb2:	d0d6      	beq.n	800dc62 <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dcb4:	f7fe fc96 	bl	800c5e4 <HAL_GetTick>
 800dcb8:	9b03      	ldr	r3, [sp, #12]
 800dcba:	1ac0      	subs	r0, r0, r3
 800dcbc:	42b0      	cmp	r0, r6
 800dcbe:	d801      	bhi.n	800dcc4 <HAL_I2C_IsDeviceReady+0xbc>
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	d1ce      	bne.n	800dc62 <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 800dcc4:	0022      	movs	r2, r4
 800dcc6:	2320      	movs	r3, #32
 800dcc8:	3241      	adds	r2, #65	; 0x41
 800dcca:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dccc:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 800dcce:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	3440      	adds	r4, #64	; 0x40
 800dcd8:	7023      	strb	r3, [r4, #0]
}
 800dcda:	0028      	movs	r0, r5
 800dcdc:	b009      	add	sp, #36	; 0x24
 800dcde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	2120      	movs	r1, #32
 800dce8:	0033      	movs	r3, r6
 800dcea:	0020      	movs	r0, r4
 800dcec:	f7ff fbde 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800dcf0:	1e02      	subs	r2, r0, #0
 800dcf2:	d1f2      	bne.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dcf4:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 800dcf6:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dcf8:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dcfa:	2720      	movs	r7, #32
 800dcfc:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 800dcfe:	9907      	ldr	r1, [sp, #28]
 800dd00:	4281      	cmp	r1, r0
 800dd02:	d10f      	bne.n	800dd24 <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dd04:	2180      	movs	r1, #128	; 0x80
 800dd06:	6858      	ldr	r0, [r3, #4]
 800dd08:	01c9      	lsls	r1, r1, #7
 800dd0a:	4301      	orrs	r1, r0
 800dd0c:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	0039      	movs	r1, r7
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	0020      	movs	r0, r4
 800dd16:	0033      	movs	r3, r6
 800dd18:	f7ff fbc8 	bl	800d4ac <I2C_WaitOnFlagUntilTimeout>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1dc      	bne.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 800dd24:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800dd26:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 800dd28:	3301      	adds	r3, #1
 800dd2a:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800dd2c:	9b07      	ldr	r3, [sp, #28]
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d200      	bcs.n	800dd34 <HAL_I2C_IsDeviceReady+0x12c>
 800dd32:	e78b      	b.n	800dc4c <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 800dd34:	0022      	movs	r2, r4
 800dd36:	2320      	movs	r3, #32
 800dd38:	3241      	adds	r2, #65	; 0x41
 800dd3a:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800dd3e:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd40:	4313      	orrs	r3, r2
 800dd42:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 800dd44:	2300      	movs	r3, #0
 800dd46:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800dd48:	e7c7      	b.n	800dcda <HAL_I2C_IsDeviceReady+0xd2>
 800dd4a:	46c0      	nop			; (mov r8, r8)
 800dd4c:	02002000 	.word	0x02002000

0800dd50 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800dd50:	6803      	ldr	r3, [r0, #0]
{
 800dd52:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800dd54:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800dd56:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800dd58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d000      	beq.n	800dd60 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800dd5e:	4798      	blx	r3
}
 800dd60:	bd10      	pop	{r4, pc}

0800dd62 <HAL_I2C_SlaveTxCpltCallback>:
 800dd62:	4770      	bx	lr

0800dd64 <HAL_I2C_SlaveRxCpltCallback>:
 800dd64:	4770      	bx	lr
	...

0800dd68 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd68:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dd6a:	6803      	ldr	r3, [r0, #0]
{
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd70:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dd72:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd74:	3142      	adds	r1, #66	; 0x42
 800dd76:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dd78:	2101      	movs	r1, #1
 800dd7a:	0450      	lsls	r0, r2, #17
 800dd7c:	d518      	bpl.n	800ddb0 <I2C_ITSlaveSeqCplt+0x48>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	4918      	ldr	r1, [pc, #96]	; (800dde4 <I2C_ITSlaveSeqCplt+0x7c>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dd82:	400a      	ands	r2, r1
 800dd84:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800dd86:	0023      	movs	r3, r4
 800dd88:	3341      	adds	r3, #65	; 0x41
 800dd8a:	781a      	ldrb	r2, [r3, #0]
 800dd8c:	2a29      	cmp	r2, #41	; 0x29
 800dd8e:	d115      	bne.n	800ddbc <I2C_ITSlaveSeqCplt+0x54>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dd90:	3a01      	subs	r2, #1
 800dd92:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dd94:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dd96:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dd98:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dd9a:	2101      	movs	r1, #1
 800dd9c:	f7ff faba 	bl	800d314 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dda0:	0023      	movs	r3, r4
 800dda2:	2200      	movs	r2, #0
 800dda4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dda6:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800dda8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ddaa:	f7ff ffda 	bl	800dd62 <HAL_I2C_SlaveTxCpltCallback>
}
 800ddae:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ddb0:	0bd2      	lsrs	r2, r2, #15
 800ddb2:	420a      	tst	r2, r1
 800ddb4:	d0e7      	beq.n	800dd86 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	490b      	ldr	r1, [pc, #44]	; (800dde8 <I2C_ITSlaveSeqCplt+0x80>)
 800ddba:	e7e2      	b.n	800dd82 <I2C_ITSlaveSeqCplt+0x1a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ddbc:	781a      	ldrb	r2, [r3, #0]
 800ddbe:	2a2a      	cmp	r2, #42	; 0x2a
 800ddc0:	d1f5      	bne.n	800ddae <I2C_ITSlaveSeqCplt+0x46>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ddc2:	3a02      	subs	r2, #2
 800ddc4:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ddc6:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ddc8:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ddca:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ddcc:	2102      	movs	r1, #2
 800ddce:	f7ff faa1 	bl	800d314 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ddd2:	0023      	movs	r3, r4
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ddd8:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800ddda:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dddc:	f7ff ffc2 	bl	800dd64 <HAL_I2C_SlaveRxCpltCallback>
}
 800dde0:	e7e5      	b.n	800ddae <I2C_ITSlaveSeqCplt+0x46>
 800dde2:	46c0      	nop			; (mov r8, r8)
 800dde4:	ffffbfff 	.word	0xffffbfff
 800dde8:	ffff7fff 	.word	0xffff7fff

0800ddec <HAL_I2C_AddrCallback>:
}
 800ddec:	4770      	bx	lr

0800ddee <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ddee:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800ddf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ddf2:	2228      	movs	r2, #40	; 0x28
 800ddf4:	3341      	adds	r3, #65	; 0x41
 800ddf6:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800ddf8:	0004      	movs	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 800ddfa:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d13c      	bne.n	800de7c <I2C_ITAddrCplt.constprop.0+0x8e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800de02:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 800de04:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800de06:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800de08:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800de0a:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800de0c:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800de0e:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800de10:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800de12:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 800de14:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800de16:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800de18:	2a02      	cmp	r2, #2
 800de1a:	d125      	bne.n	800de68 <I2C_ITAddrCplt.constprop.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800de1c:	059b      	lsls	r3, r3, #22
 800de1e:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800de20:	0f5b      	lsrs	r3, r3, #29
 800de22:	405e      	eors	r6, r3
 800de24:	0030      	movs	r0, r6
 800de26:	2306      	movs	r3, #6
 800de28:	4018      	ands	r0, r3
 800de2a:	421e      	tst	r6, r3
 800de2c:	d110      	bne.n	800de50 <I2C_ITAddrCplt.constprop.0+0x62>
        hi2c->AddrEventCount++;
 800de2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de30:	3301      	adds	r3, #1
 800de32:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800de34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de36:	2b02      	cmp	r3, #2
 800de38:	d109      	bne.n	800de4e <I2C_ITAddrCplt.constprop.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800de3a:	3306      	adds	r3, #6
          hi2c->AddrEventCount = 0U;
 800de3c:	64a0      	str	r0, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800de3e:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 800de40:	0023      	movs	r3, r4
 800de42:	3340      	adds	r3, #64	; 0x40
 800de44:	7018      	strb	r0, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800de46:	0029      	movs	r1, r5
 800de48:	0020      	movs	r0, r4
 800de4a:	f7ff ffcf 	bl	800ddec <HAL_I2C_AddrCallback>
}
 800de4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800de50:	2180      	movs	r1, #128	; 0x80
 800de52:	0020      	movs	r0, r4
 800de54:	0209      	lsls	r1, r1, #8
 800de56:	f7ff fa5d 	bl	800d314 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800de5a:	0023      	movs	r3, r4
 800de5c:	2200      	movs	r2, #0
 800de5e:	3340      	adds	r3, #64	; 0x40
 800de60:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800de62:	9a01      	ldr	r2, [sp, #4]
 800de64:	403a      	ands	r2, r7
 800de66:	e7ee      	b.n	800de46 <I2C_ITAddrCplt.constprop.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800de68:	2180      	movs	r1, #128	; 0x80
 800de6a:	0209      	lsls	r1, r1, #8
 800de6c:	f7ff fa52 	bl	800d314 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800de70:	0023      	movs	r3, r4
 800de72:	2200      	movs	r2, #0
 800de74:	3340      	adds	r3, #64	; 0x40
 800de76:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800de78:	0032      	movs	r2, r6
 800de7a:	e7e4      	b.n	800de46 <I2C_ITAddrCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800de7c:	2308      	movs	r3, #8
 800de7e:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 800de80:	2300      	movs	r3, #0
 800de82:	3440      	adds	r4, #64	; 0x40
 800de84:	7023      	strb	r3, [r4, #0]
}
 800de86:	e7e2      	b.n	800de4e <I2C_ITAddrCplt.constprop.0+0x60>

0800de88 <HAL_I2C_ListenCpltCallback>:
 800de88:	4770      	bx	lr
	...

0800de8c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de8c:	4b18      	ldr	r3, [pc, #96]	; (800def0 <I2C_ITListenCplt+0x64>)
{
 800de8e:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de90:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800de92:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800de94:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800de96:	6303      	str	r3, [r0, #48]	; 0x30
{
 800de98:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800de9a:	2020      	movs	r0, #32
 800de9c:	3241      	adds	r2, #65	; 0x41
 800de9e:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dea0:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 800dea2:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800dea4:	074b      	lsls	r3, r1, #29
 800dea6:	d513      	bpl.n	800ded0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800deb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deb2:	3301      	adds	r3, #1
 800deb4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800deb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d009      	beq.n	800ded0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800debc:	3b01      	subs	r3, #1
 800debe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800dec0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dec2:	3b01      	subs	r3, #1
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dec8:	2304      	movs	r3, #4
 800deca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800decc:	4313      	orrs	r3, r2
 800dece:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ded0:	0020      	movs	r0, r4
 800ded2:	4908      	ldr	r1, [pc, #32]	; (800def4 <I2C_ITListenCplt+0x68>)
 800ded4:	f7ff fa1e 	bl	800d314 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ded8:	2210      	movs	r2, #16
 800deda:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800dedc:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dede:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800dee0:	0023      	movs	r3, r4
 800dee2:	2200      	movs	r2, #0
 800dee4:	3340      	adds	r3, #64	; 0x40
 800dee6:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800dee8:	f7ff ffce 	bl	800de88 <HAL_I2C_ListenCpltCallback>
}
 800deec:	bd10      	pop	{r4, pc}
 800deee:	46c0      	nop			; (mov r8, r8)
 800def0:	ffff0000 	.word	0xffff0000
 800def4:	00008003 	.word	0x00008003

0800def8 <HAL_I2C_ErrorCallback>:
 800def8:	4770      	bx	lr

0800defa <HAL_I2C_AbortCpltCallback>:
 800defa:	4770      	bx	lr

0800defc <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800defc:	0001      	movs	r1, r0
 800defe:	0002      	movs	r2, r0
{
 800df00:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800df02:	3141      	adds	r1, #65	; 0x41
 800df04:	780c      	ldrb	r4, [r1, #0]
 800df06:	2300      	movs	r3, #0
 800df08:	3240      	adds	r2, #64	; 0x40
 800df0a:	2c60      	cmp	r4, #96	; 0x60
 800df0c:	d106      	bne.n	800df1c <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 800df0e:	3c40      	subs	r4, #64	; 0x40
 800df10:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800df12:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800df14:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800df16:	f7ff fff0 	bl	800defa <HAL_I2C_AbortCpltCallback>
}
 800df1a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 800df1c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800df1e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800df20:	f7ff ffea 	bl	800def8 <HAL_I2C_ErrorCallback>
}
 800df24:	e7f9      	b.n	800df1a <I2C_TreatErrorCallback+0x1e>
	...

0800df28 <I2C_ITError>:
{
 800df28:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800df2a:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800df2c:	0005      	movs	r5, r0
{
 800df2e:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800df30:	2000      	movs	r0, #0
 800df32:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800df34:	3541      	adds	r5, #65	; 0x41
 800df36:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800df38:	7010      	strb	r0, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800df3a:	4a32      	ldr	r2, [pc, #200]	; (800e004 <I2C_ITError+0xdc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800df3c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800df3e:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800df40:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800df42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800df44:	430a      	orrs	r2, r1
 800df46:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d82b      	bhi.n	800dfa4 <I2C_ITError+0x7c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800df4c:	2103      	movs	r1, #3
 800df4e:	0020      	movs	r0, r4
 800df50:	f7ff f9e0 	bl	800d314 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800df54:	2328      	movs	r3, #40	; 0x28
 800df56:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800df58:	4b2b      	ldr	r3, [pc, #172]	; (800e008 <I2C_ITError+0xe0>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800df5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 800df5c:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800df5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800df60:	2800      	cmp	r0, #0
 800df62:	d02e      	beq.n	800dfc2 <I2C_ITError+0x9a>
 800df64:	001a      	movs	r2, r3
 800df66:	2110      	movs	r1, #16
 800df68:	3a11      	subs	r2, #17
 800df6a:	438a      	bics	r2, r1
 800df6c:	d129      	bne.n	800dfc2 <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800df6e:	6823      	ldr	r3, [r4, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	0452      	lsls	r2, r2, #17
 800df74:	d503      	bpl.n	800df7e <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	4924      	ldr	r1, [pc, #144]	; (800e00c <I2C_ITError+0xe4>)
 800df7a:	400a      	ands	r2, r1
 800df7c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800df7e:	f7fe ffd1 	bl	800cf24 <HAL_DMA_GetState>
 800df82:	2801      	cmp	r0, #1
 800df84:	d019      	beq.n	800dfba <I2C_ITError+0x92>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800df86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800df88:	4b21      	ldr	r3, [pc, #132]	; (800e010 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 800df8a:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800df8c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800df8e:	0023      	movs	r3, r4
 800df90:	3340      	adds	r3, #64	; 0x40
 800df92:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800df94:	f7fe ff56 	bl	800ce44 <HAL_DMA_Abort_IT>
 800df98:	2800      	cmp	r0, #0
 800df9a:	d011      	beq.n	800dfc0 <I2C_ITError+0x98>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800df9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800df9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dfa0:	4798      	blx	r3
}
 800dfa2:	e00d      	b.n	800dfc0 <I2C_ITError+0x98>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dfa4:	0020      	movs	r0, r4
 800dfa6:	491b      	ldr	r1, [pc, #108]	; (800e014 <I2C_ITError+0xec>)
 800dfa8:	f7ff f9b4 	bl	800d314 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800dfac:	782b      	ldrb	r3, [r5, #0]
 800dfae:	2b60      	cmp	r3, #96	; 0x60
 800dfb0:	d001      	beq.n	800dfb6 <I2C_ITError+0x8e>
      hi2c->State         = HAL_I2C_STATE_READY;
 800dfb2:	2320      	movs	r3, #32
 800dfb4:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = NULL;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e7cf      	b.n	800df5a <I2C_ITError+0x32>
      I2C_TreatErrorCallback(hi2c);
 800dfba:	0020      	movs	r0, r4
 800dfbc:	f7ff ff9e 	bl	800defc <I2C_TreatErrorCallback>
}
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800dfc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0f8      	beq.n	800dfba <I2C_ITError+0x92>
 800dfc8:	2210      	movs	r2, #16
 800dfca:	3b12      	subs	r3, #18
 800dfcc:	4393      	bics	r3, r2
 800dfce:	d1f4      	bne.n	800dfba <I2C_ITError+0x92>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800dfd0:	6823      	ldr	r3, [r4, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	0412      	lsls	r2, r2, #16
 800dfd6:	d503      	bpl.n	800dfe0 <I2C_ITError+0xb8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	490f      	ldr	r1, [pc, #60]	; (800e018 <I2C_ITError+0xf0>)
 800dfdc:	400a      	ands	r2, r1
 800dfde:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dfe0:	f7fe ffa0 	bl	800cf24 <HAL_DMA_GetState>
 800dfe4:	2801      	cmp	r0, #1
 800dfe6:	d0e8      	beq.n	800dfba <I2C_ITError+0x92>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dfe8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dfea:	4b09      	ldr	r3, [pc, #36]	; (800e010 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 800dfec:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dfee:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800dff0:	0023      	movs	r3, r4
 800dff2:	3340      	adds	r3, #64	; 0x40
 800dff4:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dff6:	f7fe ff25 	bl	800ce44 <HAL_DMA_Abort_IT>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d0e0      	beq.n	800dfc0 <I2C_ITError+0x98>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dffe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e000:	e7cd      	b.n	800df9e <I2C_ITError+0x76>
 800e002:	46c0      	nop			; (mov r8, r8)
 800e004:	ffff0000 	.word	0xffff0000
 800e008:	0800e155 	.word	0x0800e155
 800e00c:	ffffbfff 	.word	0xffffbfff
 800e010:	0800e2e7 	.word	0x0800e2e7
 800e014:	00008003 	.word	0x00008003
 800e018:	ffff7fff 	.word	0xffff7fff

0800e01c <I2C_ITSlaveCplt>:
{
 800e01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e01e:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e020:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e022:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e024:	3641      	adds	r6, #65	; 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e026:	9201      	str	r2, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e028:	2220      	movs	r2, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e02a:	7835      	ldrb	r5, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e02c:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e02e:	2308      	movs	r3, #8
{
 800e030:	0004      	movs	r4, r0
 800e032:	000f      	movs	r7, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e034:	439d      	bics	r5, r3
 800e036:	2d21      	cmp	r5, #33	; 0x21
 800e038:	d150      	bne.n	800e0dc <I2C_ITSlaveCplt+0xc0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e03a:	4940      	ldr	r1, [pc, #256]	; (800e13c <I2C_ITSlaveCplt+0x120>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e03c:	0020      	movs	r0, r4
 800e03e:	f7ff f969 	bl	800d314 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e042:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e044:	2280      	movs	r2, #128	; 0x80
 800e046:	6823      	ldr	r3, [r4, #0]
 800e048:	0212      	lsls	r2, r2, #8
 800e04a:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800e04c:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e04e:	430a      	orrs	r2, r1
 800e050:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	493a      	ldr	r1, [pc, #232]	; (800e140 <I2C_ITSlaveCplt+0x124>)
 800e056:	400a      	ands	r2, r1
 800e058:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800e05a:	f7ff f939 	bl	800d2d0 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e05e:	9b01      	ldr	r3, [sp, #4]
 800e060:	2201      	movs	r2, #1
 800e062:	045b      	lsls	r3, r3, #17
 800e064:	d53e      	bpl.n	800e0e4 <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e066:	6822      	ldr	r2, [r4, #0]
 800e068:	4936      	ldr	r1, [pc, #216]	; (800e144 <I2C_ITSlaveCplt+0x128>)
 800e06a:	6813      	ldr	r3, [r2, #0]
 800e06c:	400b      	ands	r3, r1
 800e06e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800e070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800e072:	2b00      	cmp	r3, #0
 800e074:	d003      	beq.n	800e07e <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e07e:	077b      	lsls	r3, r7, #29
 800e080:	d511      	bpl.n	800e0a6 <I2C_ITSlaveCplt+0x8a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e082:	2304      	movs	r3, #4
 800e084:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e086:	6823      	ldr	r3, [r4, #0]
 800e088:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08c:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800e08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e090:	3301      	adds	r3, #1
 800e092:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800e094:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e096:	2b00      	cmp	r3, #0
 800e098:	d005      	beq.n	800e0a6 <I2C_ITSlaveCplt+0x8a>
      hi2c->XferSize--;
 800e09a:	3b01      	subs	r3, #1
 800e09c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800e09e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800e0a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d003      	beq.n	800e0b4 <I2C_ITSlaveCplt+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e0ac:	2304      	movs	r3, #4
 800e0ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0b4:	0023      	movs	r3, r4
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	3342      	adds	r3, #66	; 0x42
 800e0ba:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e0bc:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800e0be:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e0c0:	4295      	cmp	r5, r2
 800e0c2:	d01a      	beq.n	800e0fa <I2C_ITSlaveCplt+0xde>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e0c4:	0020      	movs	r0, r4
 800e0c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e0c8:	f7ff ff2e 	bl	800df28 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e0cc:	7833      	ldrb	r3, [r6, #0]
 800e0ce:	2b28      	cmp	r3, #40	; 0x28
 800e0d0:	d103      	bne.n	800e0da <I2C_ITSlaveCplt+0xbe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e0d2:	0039      	movs	r1, r7
 800e0d4:	0020      	movs	r0, r4
 800e0d6:	f7ff fed9 	bl	800de8c <I2C_ITListenCplt>
}
 800e0da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e0dc:	2d22      	cmp	r5, #34	; 0x22
 800e0de:	d1b1      	bne.n	800e044 <I2C_ITSlaveCplt+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e0e0:	4919      	ldr	r1, [pc, #100]	; (800e148 <I2C_ITSlaveCplt+0x12c>)
 800e0e2:	e7ab      	b.n	800e03c <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e0e4:	9b01      	ldr	r3, [sp, #4]
 800e0e6:	0bdb      	lsrs	r3, r3, #15
 800e0e8:	4213      	tst	r3, r2
 800e0ea:	d0c8      	beq.n	800e07e <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e0ec:	6822      	ldr	r2, [r4, #0]
 800e0ee:	4917      	ldr	r1, [pc, #92]	; (800e14c <I2C_ITSlaveCplt+0x130>)
 800e0f0:	6813      	ldr	r3, [r2, #0]
 800e0f2:	400b      	ands	r3, r1
 800e0f4:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800e0f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0f8:	e7bb      	b.n	800e072 <I2C_ITSlaveCplt+0x56>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e0fa:	0027      	movs	r7, r4
 800e0fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e0fe:	4a14      	ldr	r2, [pc, #80]	; (800e150 <I2C_ITSlaveCplt+0x134>)
 800e100:	3740      	adds	r7, #64	; 0x40
 800e102:	4293      	cmp	r3, r2
 800e104:	d00c      	beq.n	800e120 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 800e106:	0020      	movs	r0, r4
 800e108:	f7ff fe2e 	bl	800dd68 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800e10c:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e10e:	4a10      	ldr	r2, [pc, #64]	; (800e150 <I2C_ITSlaveCplt+0x134>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800e110:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e112:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e114:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e116:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e118:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 800e11a:	f7ff feb5 	bl	800de88 <HAL_I2C_ListenCpltCallback>
 800e11e:	e7dc      	b.n	800e0da <I2C_ITSlaveCplt+0xbe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e120:	2320      	movs	r3, #32
 800e122:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e124:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800e126:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e128:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e12a:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e12c:	2a22      	cmp	r2, #34	; 0x22
 800e12e:	d102      	bne.n	800e136 <I2C_ITSlaveCplt+0x11a>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e130:	f7ff fe18 	bl	800dd64 <HAL_I2C_SlaveRxCpltCallback>
 800e134:	e7d1      	b.n	800e0da <I2C_ITSlaveCplt+0xbe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e136:	f7ff fe14 	bl	800dd62 <HAL_I2C_SlaveTxCpltCallback>
}
 800e13a:	e7ce      	b.n	800e0da <I2C_ITSlaveCplt+0xbe>
 800e13c:	00008001 	.word	0x00008001
 800e140:	fe00e800 	.word	0xfe00e800
 800e144:	ffffbfff 	.word	0xffffbfff
 800e148:	00008002 	.word	0x00008002
 800e14c:	ffff7fff 	.word	0xffff7fff
 800e150:	ffff0000 	.word	0xffff0000

0800e154 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 800e154:	0003      	movs	r3, r0
{
 800e156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800e158:	3340      	adds	r3, #64	; 0x40
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	781b      	ldrb	r3, [r3, #0]
{
 800e15e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800e160:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 800e162:	000e      	movs	r6, r1
 800e164:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 800e166:	2002      	movs	r0, #2
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d024      	beq.n	800e1b6 <I2C_Slave_ISR_IT+0x62>
 800e16c:	2301      	movs	r3, #1
 800e16e:	9a01      	ldr	r2, [sp, #4]
 800e170:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e172:	094a      	lsrs	r2, r1, #5
 800e174:	421a      	tst	r2, r3
 800e176:	d005      	beq.n	800e184 <I2C_Slave_ISR_IT+0x30>
 800e178:	096a      	lsrs	r2, r5, #5
 800e17a:	421a      	tst	r2, r3
 800e17c:	d002      	beq.n	800e184 <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e17e:	0020      	movs	r0, r4
 800e180:	f7ff ff4c 	bl	800e01c <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e184:	2301      	movs	r3, #1
 800e186:	06f2      	lsls	r2, r6, #27
 800e188:	d535      	bpl.n	800e1f6 <I2C_Slave_ISR_IT+0xa2>
 800e18a:	092a      	lsrs	r2, r5, #4
 800e18c:	421a      	tst	r2, r3
 800e18e:	d032      	beq.n	800e1f6 <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 800e190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e192:	2b00      	cmp	r3, #0
 800e194:	d120      	bne.n	800e1d8 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e196:	0023      	movs	r3, r4
 800e198:	3341      	adds	r3, #65	; 0x41
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	2a28      	cmp	r2, #40	; 0x28
 800e19e:	d10b      	bne.n	800e1b8 <I2C_Slave_ISR_IT+0x64>
 800e1a0:	2280      	movs	r2, #128	; 0x80
 800e1a2:	0492      	lsls	r2, r2, #18
 800e1a4:	4297      	cmp	r7, r2
 800e1a6:	d107      	bne.n	800e1b8 <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e1a8:	0031      	movs	r1, r6
 800e1aa:	0020      	movs	r0, r4
 800e1ac:	f7ff fe6e 	bl	800de8c <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	9b01      	ldr	r3, [sp, #4]
 800e1b4:	7018      	strb	r0, [r3, #0]
}
 800e1b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e1b8:	2210      	movs	r2, #16
 800e1ba:	7819      	ldrb	r1, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e1c0:	2929      	cmp	r1, #41	; 0x29
 800e1c2:	d1f5      	bne.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
 800e1c4:	492d      	ldr	r1, [pc, #180]	; (800e27c <I2C_Slave_ISR_IT+0x128>)
 800e1c6:	428f      	cmp	r7, r1
 800e1c8:	d0f2      	beq.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 800e1ca:	0020      	movs	r0, r4
 800e1cc:	f7ff f880 	bl	800d2d0 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 800e1d0:	0020      	movs	r0, r4
 800e1d2:	f7ff fdc9 	bl	800dd68 <I2C_ITSlaveSeqCplt>
 800e1d6:	e7eb      	b.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1d8:	2210      	movs	r2, #16
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e1de:	2304      	movs	r3, #4
 800e1e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e1e6:	4b26      	ldr	r3, [pc, #152]	; (800e280 <I2C_Slave_ISR_IT+0x12c>)
 800e1e8:	421f      	tst	r7, r3
 800e1ea:	d1e1      	bne.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e1ec:	0020      	movs	r0, r4
 800e1ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e1f0:	f7ff fe9a 	bl	800df28 <I2C_ITError>
 800e1f4:	e7dc      	b.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	0772      	lsls	r2, r6, #29
 800e1fa:	d51a      	bpl.n	800e232 <I2C_Slave_ISR_IT+0xde>
 800e1fc:	08aa      	lsrs	r2, r5, #2
 800e1fe:	421a      	tst	r2, r3
 800e200:	d017      	beq.n	800e232 <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 800e202:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00d      	beq.n	800e224 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800e210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e212:	3301      	adds	r3, #1
 800e214:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800e216:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e218:	3b01      	subs	r3, #1
 800e21a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800e21c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e21e:	3b01      	subs	r3, #1
 800e220:	b29b      	uxth	r3, r3
 800e222:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800e224:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1c2      	bne.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
 800e22a:	4b14      	ldr	r3, [pc, #80]	; (800e27c <I2C_Slave_ISR_IT+0x128>)
 800e22c:	429f      	cmp	r7, r3
 800e22e:	d0bf      	beq.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
 800e230:	e7ce      	b.n	800e1d0 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e232:	2301      	movs	r3, #1
 800e234:	0732      	lsls	r2, r6, #28
 800e236:	d506      	bpl.n	800e246 <I2C_Slave_ISR_IT+0xf2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e238:	08ea      	lsrs	r2, r5, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e23a:	421a      	tst	r2, r3
 800e23c:	d003      	beq.n	800e246 <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e23e:	0020      	movs	r0, r4
 800e240:	f7ff fdd5 	bl	800ddee <I2C_ITAddrCplt.constprop.0>
 800e244:	e7b4      	b.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e246:	2301      	movs	r3, #1
 800e248:	07b2      	lsls	r2, r6, #30
 800e24a:	d5b1      	bpl.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
 800e24c:	40dd      	lsrs	r5, r3
 800e24e:	421d      	tst	r5, r3
 800e250:	d0ae      	beq.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 800e252:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00d      	beq.n	800e274 <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e25a:	6822      	ldr	r2, [r4, #0]
 800e25c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800e25e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e260:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800e262:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800e264:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e266:	3b01      	subs	r3, #1
 800e268:	b29b      	uxth	r3, r3
 800e26a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800e26c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e26e:	3b01      	subs	r3, #1
 800e270:	8523      	strh	r3, [r4, #40]	; 0x28
 800e272:	e79d      	b.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e274:	4b02      	ldr	r3, [pc, #8]	; (800e280 <I2C_Slave_ISR_IT+0x12c>)
 800e276:	421f      	tst	r7, r3
 800e278:	d0aa      	beq.n	800e1d0 <I2C_Slave_ISR_IT+0x7c>
 800e27a:	e799      	b.n	800e1b0 <I2C_Slave_ISR_IT+0x5c>
 800e27c:	ffff0000 	.word	0xffff0000
 800e280:	feffffff 	.word	0xfeffffff

0800e284 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e284:	6803      	ldr	r3, [r0, #0]
{
 800e286:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e288:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e28a:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800e28c:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e28e:	05e5      	lsls	r5, r4, #23
 800e290:	d508      	bpl.n	800e2a4 <HAL_I2C_ER_IRQHandler+0x20>
 800e292:	09d5      	lsrs	r5, r2, #7
 800e294:	420d      	tst	r5, r1
 800e296:	d005      	beq.n	800e2a4 <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800e298:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800e29a:	4329      	orrs	r1, r5
 800e29c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e29e:	2180      	movs	r1, #128	; 0x80
 800e2a0:	0049      	lsls	r1, r1, #1
 800e2a2:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	0565      	lsls	r5, r4, #21
 800e2a8:	d509      	bpl.n	800e2be <HAL_I2C_ER_IRQHandler+0x3a>
 800e2aa:	09d5      	lsrs	r5, r2, #7
 800e2ac:	420d      	tst	r5, r1
 800e2ae:	d006      	beq.n	800e2be <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800e2b0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800e2b2:	3107      	adds	r1, #7
 800e2b4:	4329      	orrs	r1, r5
 800e2b6:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e2b8:	2180      	movs	r1, #128	; 0x80
 800e2ba:	00c9      	lsls	r1, r1, #3
 800e2bc:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e2be:	2101      	movs	r1, #1
 800e2c0:	05a4      	lsls	r4, r4, #22
 800e2c2:	d509      	bpl.n	800e2d8 <HAL_I2C_ER_IRQHandler+0x54>
 800e2c4:	09d2      	lsrs	r2, r2, #7
 800e2c6:	420a      	tst	r2, r1
 800e2c8:	d006      	beq.n	800e2d8 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e2d2:	2280      	movs	r2, #128	; 0x80
 800e2d4:	0092      	lsls	r2, r2, #2
 800e2d6:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800e2d8:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800e2da:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800e2dc:	4219      	tst	r1, r3
 800e2de:	d001      	beq.n	800e2e4 <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 800e2e0:	f7ff fe22 	bl	800df28 <I2C_ITError>
}
 800e2e4:	bd70      	pop	{r4, r5, r6, pc}

0800e2e6 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e2e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800e2e8:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 800e2ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800e2f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800e2fe:	f7ff fdfd 	bl	800defc <I2C_TreatErrorCallback>
}
 800e302:	bd10      	pop	{r4, pc}

0800e304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e304:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e306:	0004      	movs	r4, r0
 800e308:	3441      	adds	r4, #65	; 0x41
 800e30a:	7822      	ldrb	r2, [r4, #0]
{
 800e30c:	0003      	movs	r3, r0
 800e30e:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800e310:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e312:	b2d6      	uxtb	r6, r2
 800e314:	2a20      	cmp	r2, #32
 800e316:	d118      	bne.n	800e34a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800e318:	001d      	movs	r5, r3
 800e31a:	3540      	adds	r5, #64	; 0x40
 800e31c:	782a      	ldrb	r2, [r5, #0]
 800e31e:	2a01      	cmp	r2, #1
 800e320:	d013      	beq.n	800e34a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e322:	2224      	movs	r2, #36	; 0x24
 800e324:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3a23      	subs	r2, #35	; 0x23
 800e32a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e32c:	4807      	ldr	r0, [pc, #28]	; (800e34c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800e32e:	4391      	bics	r1, r2
 800e330:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e332:	6819      	ldr	r1, [r3, #0]
 800e334:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800e336:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e338:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800e33a:	6819      	ldr	r1, [r3, #0]
 800e33c:	4339      	orrs	r1, r7
 800e33e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e340:	6819      	ldr	r1, [r3, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800e346:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800e348:	7028      	strb	r0, [r5, #0]
  }
}
 800e34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e34c:	ffffefff 	.word	0xffffefff

0800e350 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e350:	0002      	movs	r2, r0
{
 800e352:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e354:	3241      	adds	r2, #65	; 0x41
 800e356:	7814      	ldrb	r4, [r2, #0]
{
 800e358:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e35a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800e35c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e35e:	2c20      	cmp	r4, #32
 800e360:	d117      	bne.n	800e392 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800e362:	001c      	movs	r4, r3
 800e364:	3440      	adds	r4, #64	; 0x40
 800e366:	7826      	ldrb	r6, [r4, #0]
 800e368:	2e01      	cmp	r6, #1
 800e36a:	d012      	beq.n	800e392 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e36c:	3022      	adds	r0, #34	; 0x22
 800e36e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	3823      	subs	r0, #35	; 0x23
 800e374:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800e376:	4f07      	ldr	r7, [pc, #28]	; (800e394 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800e378:	4386      	bics	r6, r0
 800e37a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800e37c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800e37e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800e380:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800e382:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800e384:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e386:	6819      	ldr	r1, [r3, #0]
 800e388:	4308      	orrs	r0, r1
 800e38a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800e38c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800e38e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800e390:	7020      	strb	r0, [r4, #0]
  }
}
 800e392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e394:	fffff0ff 	.word	0xfffff0ff

0800e398 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e398:	2201      	movs	r2, #1
 800e39a:	4904      	ldr	r1, [pc, #16]	; (800e3ac <HAL_I2CEx_EnableFastModePlus+0x14>)
 800e39c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e39e:	431a      	orrs	r2, r3
 800e3a0:	634a      	str	r2, [r1, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 800e3a2:	4a03      	ldr	r2, [pc, #12]	; (800e3b0 <HAL_I2CEx_EnableFastModePlus+0x18>)
 800e3a4:	6853      	ldr	r3, [r2, #4]
 800e3a6:	4303      	orrs	r3, r0
 800e3a8:	6053      	str	r3, [r2, #4]
}
 800e3aa:	4770      	bx	lr
 800e3ac:	40021000 	.word	0x40021000
 800e3b0:	40010000 	.word	0x40010000

0800e3b4 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800e3b4:	4b0c      	ldr	r3, [pc, #48]	; (800e3e8 <LPTIM_WaitForFlag+0x34>)
{
 800e3b6:	b570      	push	{r4, r5, r6, lr}
 800e3b8:	0005      	movs	r5, r0
 800e3ba:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800e3bc:	6818      	ldr	r0, [r3, #0]
 800e3be:	490b      	ldr	r1, [pc, #44]	; (800e3ec <LPTIM_WaitForFlag+0x38>)
 800e3c0:	f7f1 fed2 	bl	8000168 <__udivsi3>
 800e3c4:	23fa      	movs	r3, #250	; 0xfa
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800e3ca:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800e3cc:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800e3ce:	2503      	movs	r5, #3
    count--;
 800e3d0:	3b01      	subs	r3, #1
    if (count == 0UL)
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d100      	bne.n	800e3d8 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800e3d6:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800e3d8:	680a      	ldr	r2, [r1, #0]
 800e3da:	4022      	ands	r2, r4
 800e3dc:	42a2      	cmp	r2, r4
 800e3de:	d001      	beq.n	800e3e4 <LPTIM_WaitForFlag+0x30>
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1f5      	bne.n	800e3d0 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800e3e4:	bd70      	pop	{r4, r5, r6, pc}
 800e3e6:	46c0      	nop			; (mov r8, r8)
 800e3e8:	200001cc 	.word	0x200001cc
 800e3ec:	00004e20 	.word	0x00004e20

0800e3f0 <HAL_LPTIM_Init>:
{
 800e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 800e3f4:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800e3f6:	2c00      	cmp	r4, #0
 800e3f8:	d039      	beq.n	800e46e <HAL_LPTIM_Init+0x7e>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800e3fa:	0025      	movs	r5, r4
 800e3fc:	352e      	adds	r5, #46	; 0x2e
 800e3fe:	782b      	ldrb	r3, [r5, #0]
 800e400:	b2da      	uxtb	r2, r3
 800e402:	2b00      	cmp	r3, #0
 800e404:	d105      	bne.n	800e412 <HAL_LPTIM_Init+0x22>
    hlptim->Lock = HAL_UNLOCKED;
 800e406:	0023      	movs	r3, r4
 800e408:	332d      	adds	r3, #45	; 0x2d
    HAL_LPTIM_MspInit(hlptim);
 800e40a:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 800e40c:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 800e40e:	f002 ff3f 	bl	8011290 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800e412:	2302      	movs	r3, #2
 800e414:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 800e416:	6820      	ldr	r0, [r4, #0]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800e418:	6861      	ldr	r1, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800e41a:	68c3      	ldr	r3, [r0, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800e41c:	2901      	cmp	r1, #1
 800e41e:	d101      	bne.n	800e424 <HAL_LPTIM_Init+0x34>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 800e420:	2206      	movs	r2, #6
 800e422:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800e424:	4e14      	ldr	r6, [pc, #80]	; (800e478 <HAL_LPTIM_Init+0x88>)
 800e426:	6962      	ldr	r2, [r4, #20]
 800e428:	46b4      	mov	ip, r6
 800e42a:	42b2      	cmp	r2, r6
 800e42c:	d001      	beq.n	800e432 <HAL_LPTIM_Init+0x42>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 800e42e:	4f13      	ldr	r7, [pc, #76]	; (800e47c <HAL_LPTIM_Init+0x8c>)
 800e430:	403b      	ands	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800e432:	2900      	cmp	r1, #0
 800e434:	d101      	bne.n	800e43a <HAL_LPTIM_Init+0x4a>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 800e436:	27d8      	movs	r7, #216	; 0xd8
 800e438:	43bb      	bics	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800e43a:	4f11      	ldr	r7, [pc, #68]	; (800e480 <HAL_LPTIM_Init+0x90>)
              hlptim->Init.Clock.Prescaler |
 800e43c:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800e43e:	401f      	ands	r7, r3
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800e440:	68a3      	ldr	r3, [r4, #8]
 800e442:	430b      	orrs	r3, r1
              hlptim->Init.Clock.Prescaler |
 800e444:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800e446:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e448:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 800e44a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e44c:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800e44e:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800e450:	2900      	cmp	r1, #0
 800e452:	d10d      	bne.n	800e470 <HAL_LPTIM_Init+0x80>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800e454:	69e1      	ldr	r1, [r4, #28]
 800e456:	6926      	ldr	r6, [r4, #16]
 800e458:	4331      	orrs	r1, r6
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800e45a:	430b      	orrs	r3, r1
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800e45c:	4562      	cmp	r2, ip
 800e45e:	d002      	beq.n	800e466 <HAL_LPTIM_Init+0x76>
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800e460:	69a1      	ldr	r1, [r4, #24]
 800e462:	430a      	orrs	r2, r1
 800e464:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800e466:	60c3      	str	r3, [r0, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800e468:	2301      	movs	r3, #1
  return HAL_OK;
 800e46a:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800e46c:	702b      	strb	r3, [r5, #0]
}
 800e46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800e470:	2901      	cmp	r1, #1
 800e472:	d1f3      	bne.n	800e45c <HAL_LPTIM_Init+0x6c>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800e474:	68e1      	ldr	r1, [r4, #12]
 800e476:	e7f0      	b.n	800e45a <HAL_LPTIM_Init+0x6a>
 800e478:	0000ffff 	.word	0x0000ffff
 800e47c:	ffff1fff 	.word	0xffff1fff
 800e480:	ff19f1f8 	.word	0xff19f1f8

0800e484 <HAL_LPTIM_CompareMatchCallback>:
 800e484:	4770      	bx	lr

0800e486 <HAL_LPTIM_TriggerCallback>:
 800e486:	4770      	bx	lr

0800e488 <HAL_LPTIM_CompareWriteCallback>:
 800e488:	4770      	bx	lr

0800e48a <HAL_LPTIM_AutoReloadWriteCallback>:
 800e48a:	4770      	bx	lr

0800e48c <HAL_LPTIM_DirectionUpCallback>:
 800e48c:	4770      	bx	lr

0800e48e <HAL_LPTIM_DirectionDownCallback>:
 800e48e:	4770      	bx	lr

0800e490 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800e490:	2201      	movs	r2, #1
 800e492:	6803      	ldr	r3, [r0, #0]
{
 800e494:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800e496:	6819      	ldr	r1, [r3, #0]
{
 800e498:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800e49a:	4211      	tst	r1, r2
 800e49c:	d005      	beq.n	800e4aa <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800e49e:	6899      	ldr	r1, [r3, #8]
 800e4a0:	4211      	tst	r1, r2
 800e4a2:	d002      	beq.n	800e4aa <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800e4a4:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800e4a6:	f7ff ffed 	bl	800e484 <HAL_LPTIM_CompareMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	6819      	ldr	r1, [r3, #0]
 800e4b0:	4211      	tst	r1, r2
 800e4b2:	d006      	beq.n	800e4c2 <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800e4b4:	6899      	ldr	r1, [r3, #8]
 800e4b6:	4211      	tst	r1, r2
 800e4b8:	d003      	beq.n	800e4c2 <HAL_LPTIM_IRQHandler+0x32>
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800e4ba:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800e4bc:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800e4be:	f005 ff4b 	bl	8014358 <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	6819      	ldr	r1, [r3, #0]
 800e4c8:	4211      	tst	r1, r2
 800e4ca:	d006      	beq.n	800e4da <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800e4cc:	6899      	ldr	r1, [r3, #8]
 800e4ce:	4211      	tst	r1, r2
 800e4d0:	d003      	beq.n	800e4da <HAL_LPTIM_IRQHandler+0x4a>
      HAL_LPTIM_TriggerCallback(hlptim);
 800e4d2:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800e4d4:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800e4d6:	f7ff ffd6 	bl	800e486 <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800e4da:	2208      	movs	r2, #8
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	6819      	ldr	r1, [r3, #0]
 800e4e0:	4211      	tst	r1, r2
 800e4e2:	d006      	beq.n	800e4f2 <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800e4e4:	6899      	ldr	r1, [r3, #8]
 800e4e6:	4211      	tst	r1, r2
 800e4e8:	d003      	beq.n	800e4f2 <HAL_LPTIM_IRQHandler+0x62>
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800e4ea:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800e4ec:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800e4ee:	f7ff ffcb 	bl	800e488 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800e4f2:	2210      	movs	r2, #16
 800e4f4:	6823      	ldr	r3, [r4, #0]
 800e4f6:	6819      	ldr	r1, [r3, #0]
 800e4f8:	4211      	tst	r1, r2
 800e4fa:	d006      	beq.n	800e50a <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800e4fc:	6899      	ldr	r1, [r3, #8]
 800e4fe:	4211      	tst	r1, r2
 800e500:	d003      	beq.n	800e50a <HAL_LPTIM_IRQHandler+0x7a>
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800e502:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e504:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800e506:	f7ff ffc0 	bl	800e48a <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800e50a:	2220      	movs	r2, #32
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	6819      	ldr	r1, [r3, #0]
 800e510:	4211      	tst	r1, r2
 800e512:	d006      	beq.n	800e522 <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800e514:	6899      	ldr	r1, [r3, #8]
 800e516:	4211      	tst	r1, r2
 800e518:	d003      	beq.n	800e522 <HAL_LPTIM_IRQHandler+0x92>
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800e51a:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800e51c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800e51e:	f7ff ffb5 	bl	800e48c <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800e522:	2240      	movs	r2, #64	; 0x40
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	6819      	ldr	r1, [r3, #0]
 800e528:	4211      	tst	r1, r2
 800e52a:	d006      	beq.n	800e53a <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800e52c:	6899      	ldr	r1, [r3, #8]
 800e52e:	4211      	tst	r1, r2
 800e530:	d003      	beq.n	800e53a <HAL_LPTIM_IRQHandler+0xaa>
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800e532:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800e534:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800e536:	f7ff ffaa 	bl	800e48e <HAL_LPTIM_DirectionDownCallback>
}
 800e53a:	bd10      	pop	{r4, pc}

0800e53c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800e53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e53e:	0004      	movs	r4, r0
 800e540:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 800e542:	b672      	cpsid	i
  uint32_t tmpclksource = 0;
 800e544:	2200      	movs	r2, #0

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800e546:	6803      	ldr	r3, [r0, #0]
 800e548:	4e32      	ldr	r6, [pc, #200]	; (800e614 <LPTIM_Disable+0xd8>)
  uint32_t tmpclksource = 0;
 800e54a:	9201      	str	r2, [sp, #4]
  switch ((uint32_t)hlptim->Instance)
 800e54c:	42b3      	cmp	r3, r6
 800e54e:	d105      	bne.n	800e55c <LPTIM_Disable+0x20>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e550:	4a31      	ldr	r2, [pc, #196]	; (800e618 <LPTIM_Disable+0xdc>)
 800e552:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800e554:	22c0      	movs	r2, #192	; 0xc0
 800e556:	0312      	lsls	r2, r2, #12
 800e558:	4015      	ands	r5, r2
 800e55a:	9501      	str	r5, [sp, #4]
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800e55c:	689a      	ldr	r2, [r3, #8]
 800e55e:	9202      	str	r2, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 800e560:	68da      	ldr	r2, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800e562:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 800e564:	9203      	str	r2, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 800e566:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800e568:	42b3      	cmp	r3, r6
 800e56a:	d10b      	bne.n	800e584 <LPTIM_Disable+0x48>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800e56c:	492a      	ldr	r1, [pc, #168]	; (800e618 <LPTIM_Disable+0xdc>)
 800e56e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800e570:	4694      	mov	ip, r2
 800e572:	2280      	movs	r2, #128	; 0x80
 800e574:	4665      	mov	r5, ip
 800e576:	0612      	lsls	r2, r2, #24
 800e578:	432a      	orrs	r2, r5
 800e57a:	628a      	str	r2, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800e57c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800e57e:	0052      	lsls	r2, r2, #1
 800e580:	0852      	lsrs	r2, r2, #1
 800e582:	628a      	str	r2, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800e584:	0002      	movs	r2, r0
 800e586:	433a      	orrs	r2, r7
 800e588:	d037      	beq.n	800e5fa <LPTIM_Disable+0xbe>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800e58a:	42b3      	cmp	r3, r6
 800e58c:	d104      	bne.n	800e598 <LPTIM_Disable+0x5c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800e58e:	4922      	ldr	r1, [pc, #136]	; (800e618 <LPTIM_Disable+0xdc>)
 800e590:	4d22      	ldr	r5, [pc, #136]	; (800e61c <LPTIM_Disable+0xe0>)
 800e592:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800e594:	402a      	ands	r2, r5
 800e596:	64ca      	str	r2, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 800e598:	2800      	cmp	r0, #0
 800e59a:	d010      	beq.n	800e5be <LPTIM_Disable+0x82>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800e59c:	2201      	movs	r2, #1
 800e59e:	6919      	ldr	r1, [r3, #16]
 800e5a0:	430a      	orrs	r2, r1
 800e5a2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800e5a4:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 800e5a6:	6158      	str	r0, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800e5a8:	0020      	movs	r0, r4
 800e5aa:	f7ff ff03 	bl	800e3b4 <LPTIM_WaitForFlag>
 800e5ae:	2803      	cmp	r0, #3
 800e5b0:	d102      	bne.n	800e5b8 <LPTIM_Disable+0x7c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800e5b2:	0023      	movs	r3, r4
 800e5b4:	332e      	adds	r3, #46	; 0x2e
 800e5b6:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800e5be:	2f00      	cmp	r7, #0
 800e5c0:	d011      	beq.n	800e5e6 <LPTIM_Disable+0xaa>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	6823      	ldr	r3, [r4, #0]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e5c6:	0020      	movs	r0, r4
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800e5c8:	6919      	ldr	r1, [r3, #16]
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	611a      	str	r2, [r3, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e5ce:	2110      	movs	r1, #16
      hlptim->Instance->ARR = tmpARR;
 800e5d0:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e5d2:	f7ff feef 	bl	800e3b4 <LPTIM_WaitForFlag>
 800e5d6:	2803      	cmp	r0, #3
 800e5d8:	d102      	bne.n	800e5e0 <LPTIM_Disable+0xa4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800e5da:	0023      	movs	r3, r4
 800e5dc:	332e      	adds	r3, #46	; 0x2e
 800e5de:	7018      	strb	r0, [r3, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e5e0:	2210      	movs	r2, #16
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	42b3      	cmp	r3, r6
 800e5ea:	d106      	bne.n	800e5fa <LPTIM_Disable+0xbe>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800e5ec:	4a0a      	ldr	r2, [pc, #40]	; (800e618 <LPTIM_Disable+0xdc>)
 800e5ee:	490b      	ldr	r1, [pc, #44]	; (800e61c <LPTIM_Disable+0xe0>)
 800e5f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e5f2:	9d01      	ldr	r5, [sp, #4]
 800e5f4:	400b      	ands	r3, r1
 800e5f6:	431d      	orrs	r5, r3
 800e5f8:	64d5      	str	r5, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	691a      	ldr	r2, [r3, #16]
 800e600:	438a      	bics	r2, r1
 800e602:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800e604:	9a02      	ldr	r2, [sp, #8]
 800e606:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800e608:	9a03      	ldr	r2, [sp, #12]
 800e60a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800e60c:	b662      	cpsie	i

  __enable_irq();
}
 800e60e:	b005      	add	sp, #20
 800e610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e612:	46c0      	nop			; (mov r8, r8)
 800e614:	40007c00 	.word	0x40007c00
 800e618:	40021000 	.word	0x40021000
 800e61c:	fff3ffff 	.word	0xfff3ffff

0800e620 <HAL_LPTIM_Counter_Start_IT>:
{
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800e622:	0006      	movs	r6, r0
 800e624:	2302      	movs	r3, #2
 800e626:	362e      	adds	r6, #46	; 0x2e
 800e628:	7033      	strb	r3, [r6, #0]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e62a:	2380      	movs	r3, #128	; 0x80
{
 800e62c:	0004      	movs	r4, r0
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e62e:	4a1c      	ldr	r2, [pc, #112]	; (800e6a0 <HAL_LPTIM_Counter_Start_IT+0x80>)
 800e630:	059b      	lsls	r3, r3, #22
 800e632:	6810      	ldr	r0, [r2, #0]
 800e634:	4303      	orrs	r3, r0
 800e636:	6013      	str	r3, [r2, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800e638:	6862      	ldr	r2, [r4, #4]
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800e63a:	6823      	ldr	r3, [r4, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800e63c:	2a01      	cmp	r2, #1
 800e63e:	d008      	beq.n	800e652 <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800e640:	2280      	movs	r2, #128	; 0x80
 800e642:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e644:	0412      	lsls	r2, r2, #16
 800e646:	4290      	cmp	r0, r2
 800e648:	d103      	bne.n	800e652 <HAL_LPTIM_Counter_Start_IT+0x32>
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800e64a:	68da      	ldr	r2, [r3, #12]
 800e64c:	4815      	ldr	r0, [pc, #84]	; (800e6a4 <HAL_LPTIM_Counter_Start_IT+0x84>)
 800e64e:	4002      	ands	r2, r0
 800e650:	60da      	str	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 800e652:	2701      	movs	r7, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e654:	2510      	movs	r5, #16
  __HAL_LPTIM_ENABLE(hlptim);
 800e656:	691a      	ldr	r2, [r3, #16]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e658:	0020      	movs	r0, r4
  __HAL_LPTIM_ENABLE(hlptim);
 800e65a:	433a      	orrs	r2, r7
 800e65c:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e65e:	605d      	str	r5, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800e660:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e662:	0029      	movs	r1, r5
 800e664:	f7ff fea6 	bl	800e3b4 <LPTIM_WaitForFlag>
 800e668:	2803      	cmp	r0, #3
 800e66a:	d101      	bne.n	800e670 <HAL_LPTIM_Counter_Start_IT+0x50>
    return HAL_TIMEOUT;
 800e66c:	2003      	movs	r0, #3
}
 800e66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_DISABLE(hlptim);
 800e670:	0020      	movs	r0, r4
 800e672:	f7ff ff63 	bl	800e53c <LPTIM_Disable>
  return hlptim->State;
 800e676:	7833      	ldrb	r3, [r6, #0]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800e678:	2b03      	cmp	r3, #3
 800e67a:	d0f7      	beq.n	800e66c <HAL_LPTIM_Counter_Start_IT+0x4c>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800e67c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800e67e:	2000      	movs	r0, #0
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800e680:	689a      	ldr	r2, [r3, #8]
 800e682:	4315      	orrs	r5, r2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800e684:	2202      	movs	r2, #2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800e686:	609d      	str	r5, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800e688:	6899      	ldr	r1, [r3, #8]
 800e68a:	430a      	orrs	r2, r1
 800e68c:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 800e68e:	691a      	ldr	r2, [r3, #16]
 800e690:	433a      	orrs	r2, r7
 800e692:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800e694:	2204      	movs	r2, #4
 800e696:	6919      	ldr	r1, [r3, #16]
 800e698:	430a      	orrs	r2, r1
 800e69a:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800e69c:	7037      	strb	r7, [r6, #0]
  return HAL_OK;
 800e69e:	e7e6      	b.n	800e66e <HAL_LPTIM_Counter_Start_IT+0x4e>
 800e6a0:	40010400 	.word	0x40010400
 800e6a4:	fffff1ff 	.word	0xfffff1ff

0800e6a8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800e6a8:	2380      	movs	r3, #128	; 0x80
 800e6aa:	4a03      	ldr	r2, [pc, #12]	; (800e6b8 <HAL_PWR_EnableBkUpAccess+0x10>)
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	6811      	ldr	r1, [r2, #0]
 800e6b0:	430b      	orrs	r3, r1
 800e6b2:	6013      	str	r3, [r2, #0]
}
 800e6b4:	4770      	bx	lr
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	40007000 	.word	0x40007000

0800e6bc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e6bc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800e6be:	4b1d      	ldr	r3, [pc, #116]	; (800e734 <HAL_RCC_GetSysClockFreq+0x78>)
{
 800e6c0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800e6c2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800e6c4:	4022      	ands	r2, r4
 800e6c6:	2a08      	cmp	r2, #8
 800e6c8:	d031      	beq.n	800e72e <HAL_RCC_GetSysClockFreq+0x72>
 800e6ca:	2a0c      	cmp	r2, #12
 800e6cc:	d009      	beq.n	800e6e2 <HAL_RCC_GetSysClockFreq+0x26>
 800e6ce:	2a04      	cmp	r2, #4
 800e6d0:	d125      	bne.n	800e71e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e6d2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800e6d4:	4b18      	ldr	r3, [pc, #96]	; (800e738 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e6d6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800e6d8:	17c0      	asrs	r0, r0, #31
 800e6da:	4018      	ands	r0, r3
 800e6dc:	4b17      	ldr	r3, [pc, #92]	; (800e73c <HAL_RCC_GetSysClockFreq+0x80>)
 800e6de:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800e6e0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e6e2:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e6e4:	4816      	ldr	r0, [pc, #88]	; (800e740 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e6e6:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e6e8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e6ea:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e6ec:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e6ee:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e6f0:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e6f2:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e6f4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e6f6:	4211      	tst	r1, r2
 800e6f8:	d009      	beq.n	800e70e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e6fa:	4a12      	ldr	r2, [pc, #72]	; (800e744 <HAL_RCC_GetSysClockFreq+0x88>)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	2100      	movs	r1, #0
 800e700:	f7f1 ff12 	bl	8000528 <__aeabi_lmul>
 800e704:	0022      	movs	r2, r4
 800e706:	2300      	movs	r3, #0
 800e708:	f7f1 feee 	bl	80004e8 <__aeabi_uldivmod>
 800e70c:	e7e8      	b.n	800e6e0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	2310      	movs	r3, #16
 800e712:	421a      	tst	r2, r3
 800e714:	d001      	beq.n	800e71a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800e716:	4a0c      	ldr	r2, [pc, #48]	; (800e748 <HAL_RCC_GetSysClockFreq+0x8c>)
 800e718:	e7f0      	b.n	800e6fc <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e71a:	4a08      	ldr	r2, [pc, #32]	; (800e73c <HAL_RCC_GetSysClockFreq+0x80>)
 800e71c:	e7ee      	b.n	800e6fc <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e71e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e720:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e722:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e724:	041b      	lsls	r3, r3, #16
 800e726:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e728:	3301      	adds	r3, #1
 800e72a:	4098      	lsls	r0, r3
      break;
 800e72c:	e7d8      	b.n	800e6e0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800e72e:	4805      	ldr	r0, [pc, #20]	; (800e744 <HAL_RCC_GetSysClockFreq+0x88>)
 800e730:	e7d6      	b.n	800e6e0 <HAL_RCC_GetSysClockFreq+0x24>
 800e732:	46c0      	nop			; (mov r8, r8)
 800e734:	40021000 	.word	0x40021000
 800e738:	ff48e500 	.word	0xff48e500
 800e73c:	00f42400 	.word	0x00f42400
 800e740:	0801a8a5 	.word	0x0801a8a5
 800e744:	007a1200 	.word	0x007a1200
 800e748:	003d0900 	.word	0x003d0900

0800e74c <HAL_RCC_OscConfig>:
{
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	0005      	movs	r5, r0
 800e750:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800e752:	2800      	cmp	r0, #0
 800e754:	d056      	beq.n	800e804 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e756:	230c      	movs	r3, #12
 800e758:	4cb6      	ldr	r4, [pc, #728]	; (800ea34 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e75a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e75c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e75e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e760:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e762:	2380      	movs	r3, #128	; 0x80
 800e764:	025b      	lsls	r3, r3, #9
 800e766:	0019      	movs	r1, r3
 800e768:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e76a:	07d2      	lsls	r2, r2, #31
 800e76c:	d43e      	bmi.n	800e7ec <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e76e:	682b      	ldr	r3, [r5, #0]
 800e770:	079b      	lsls	r3, r3, #30
 800e772:	d500      	bpl.n	800e776 <HAL_RCC_OscConfig+0x2a>
 800e774:	e087      	b.n	800e886 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e776:	682b      	ldr	r3, [r5, #0]
 800e778:	06db      	lsls	r3, r3, #27
 800e77a:	d529      	bpl.n	800e7d0 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e77c:	2e00      	cmp	r6, #0
 800e77e:	d000      	beq.n	800e782 <HAL_RCC_OscConfig+0x36>
 800e780:	e0e0      	b.n	800e944 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	059b      	lsls	r3, r3, #22
 800e786:	d502      	bpl.n	800e78e <HAL_RCC_OscConfig+0x42>
 800e788:	69ab      	ldr	r3, [r5, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d03a      	beq.n	800e804 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e78e:	6862      	ldr	r2, [r4, #4]
 800e790:	49a9      	ldr	r1, [pc, #676]	; (800ea38 <HAL_RCC_OscConfig+0x2ec>)
 800e792:	6a2b      	ldr	r3, [r5, #32]
 800e794:	400a      	ands	r2, r1
 800e796:	431a      	orrs	r2, r3
 800e798:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e79a:	6861      	ldr	r1, [r4, #4]
 800e79c:	69ea      	ldr	r2, [r5, #28]
 800e79e:	0209      	lsls	r1, r1, #8
 800e7a0:	0a09      	lsrs	r1, r1, #8
 800e7a2:	0612      	lsls	r2, r2, #24
 800e7a4:	430a      	orrs	r2, r1
 800e7a6:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e7a8:	2280      	movs	r2, #128	; 0x80
 800e7aa:	0b5b      	lsrs	r3, r3, #13
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	0212      	lsls	r2, r2, #8
 800e7b0:	409a      	lsls	r2, r3
 800e7b2:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e7b4:	68e1      	ldr	r1, [r4, #12]
 800e7b6:	060a      	lsls	r2, r1, #24
 800e7b8:	49a0      	ldr	r1, [pc, #640]	; (800ea3c <HAL_RCC_OscConfig+0x2f0>)
 800e7ba:	0f12      	lsrs	r2, r2, #28
 800e7bc:	5c8a      	ldrb	r2, [r1, r2]
 800e7be:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e7c0:	4a9f      	ldr	r2, [pc, #636]	; (800ea40 <HAL_RCC_OscConfig+0x2f4>)
 800e7c2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800e7c4:	4b9f      	ldr	r3, [pc, #636]	; (800ea44 <HAL_RCC_OscConfig+0x2f8>)
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	f7fd fec8 	bl	800c55c <HAL_InitTick>
        if(status != HAL_OK)
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d130      	bne.n	800e832 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7d0:	682b      	ldr	r3, [r5, #0]
 800e7d2:	071b      	lsls	r3, r3, #28
 800e7d4:	d500      	bpl.n	800e7d8 <HAL_RCC_OscConfig+0x8c>
 800e7d6:	e0ec      	b.n	800e9b2 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	075b      	lsls	r3, r3, #29
 800e7dc:	d500      	bpl.n	800e7e0 <HAL_RCC_OscConfig+0x94>
 800e7de:	e10e      	b.n	800e9fe <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e7e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d000      	beq.n	800e7e8 <HAL_RCC_OscConfig+0x9c>
 800e7e6:	e192      	b.n	800eb0e <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e022      	b.n	800e832 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e7ec:	2e08      	cmp	r6, #8
 800e7ee:	d003      	beq.n	800e7f8 <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e7f0:	2e0c      	cmp	r6, #12
 800e7f2:	d109      	bne.n	800e808 <HAL_RCC_OscConfig+0xbc>
 800e7f4:	2f00      	cmp	r7, #0
 800e7f6:	d007      	beq.n	800e808 <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	039b      	lsls	r3, r3, #14
 800e7fc:	d5b7      	bpl.n	800e76e <HAL_RCC_OscConfig+0x22>
 800e7fe:	686b      	ldr	r3, [r5, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1b4      	bne.n	800e76e <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 800e804:	2001      	movs	r0, #1
 800e806:	e014      	b.n	800e832 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e808:	686a      	ldr	r2, [r5, #4]
 800e80a:	428a      	cmp	r2, r1
 800e80c:	d113      	bne.n	800e836 <HAL_RCC_OscConfig+0xea>
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	4313      	orrs	r3, r2
 800e812:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800e814:	f7fd fee6 	bl	800c5e4 <HAL_GetTick>
 800e818:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e81a:	2280      	movs	r2, #128	; 0x80
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	0292      	lsls	r2, r2, #10
 800e820:	4213      	tst	r3, r2
 800e822:	d1a4      	bne.n	800e76e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e824:	f7fd fede 	bl	800c5e4 <HAL_GetTick>
 800e828:	9b00      	ldr	r3, [sp, #0]
 800e82a:	1ac0      	subs	r0, r0, r3
 800e82c:	2864      	cmp	r0, #100	; 0x64
 800e82e:	d9f4      	bls.n	800e81a <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 800e830:	2003      	movs	r0, #3
}
 800e832:	b005      	add	sp, #20
 800e834:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e836:	21a0      	movs	r1, #160	; 0xa0
 800e838:	02c9      	lsls	r1, r1, #11
 800e83a:	428a      	cmp	r2, r1
 800e83c:	d105      	bne.n	800e84a <HAL_RCC_OscConfig+0xfe>
 800e83e:	2280      	movs	r2, #128	; 0x80
 800e840:	6821      	ldr	r1, [r4, #0]
 800e842:	02d2      	lsls	r2, r2, #11
 800e844:	430a      	orrs	r2, r1
 800e846:	6022      	str	r2, [r4, #0]
 800e848:	e7e1      	b.n	800e80e <HAL_RCC_OscConfig+0xc2>
 800e84a:	6821      	ldr	r1, [r4, #0]
 800e84c:	487e      	ldr	r0, [pc, #504]	; (800ea48 <HAL_RCC_OscConfig+0x2fc>)
 800e84e:	4001      	ands	r1, r0
 800e850:	6021      	str	r1, [r4, #0]
 800e852:	6821      	ldr	r1, [r4, #0]
 800e854:	400b      	ands	r3, r1
 800e856:	9303      	str	r3, [sp, #12]
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	497c      	ldr	r1, [pc, #496]	; (800ea4c <HAL_RCC_OscConfig+0x300>)
 800e85c:	6823      	ldr	r3, [r4, #0]
 800e85e:	400b      	ands	r3, r1
 800e860:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e862:	2a00      	cmp	r2, #0
 800e864:	d1d6      	bne.n	800e814 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 800e866:	f7fd febd 	bl	800c5e4 <HAL_GetTick>
 800e86a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e86c:	2280      	movs	r2, #128	; 0x80
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	0292      	lsls	r2, r2, #10
 800e872:	4213      	tst	r3, r2
 800e874:	d100      	bne.n	800e878 <HAL_RCC_OscConfig+0x12c>
 800e876:	e77a      	b.n	800e76e <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e878:	f7fd feb4 	bl	800c5e4 <HAL_GetTick>
 800e87c:	9b00      	ldr	r3, [sp, #0]
 800e87e:	1ac0      	subs	r0, r0, r3
 800e880:	2864      	cmp	r0, #100	; 0x64
 800e882:	d9f3      	bls.n	800e86c <HAL_RCC_OscConfig+0x120>
 800e884:	e7d4      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e886:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800e888:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e88a:	4213      	tst	r3, r2
 800e88c:	d003      	beq.n	800e896 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e88e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800e890:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e892:	4311      	orrs	r1, r2
 800e894:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e896:	2e04      	cmp	r6, #4
 800e898:	d003      	beq.n	800e8a2 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e89a:	2e0c      	cmp	r6, #12
 800e89c:	d124      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x19c>
 800e89e:	2f00      	cmp	r7, #0
 800e8a0:	d122      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800e8a2:	6822      	ldr	r2, [r4, #0]
 800e8a4:	0752      	lsls	r2, r2, #29
 800e8a6:	d501      	bpl.n	800e8ac <HAL_RCC_OscConfig+0x160>
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d0ab      	beq.n	800e804 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8ac:	6861      	ldr	r1, [r4, #4]
 800e8ae:	692a      	ldr	r2, [r5, #16]
 800e8b0:	4867      	ldr	r0, [pc, #412]	; (800ea50 <HAL_RCC_OscConfig+0x304>)
 800e8b2:	0212      	lsls	r2, r2, #8
 800e8b4:	4001      	ands	r1, r0
 800e8b6:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e8b8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8ba:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e8bc:	6822      	ldr	r2, [r4, #0]
 800e8be:	438a      	bics	r2, r1
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e8c4:	f7ff fefa 	bl	800e6bc <HAL_RCC_GetSysClockFreq>
 800e8c8:	68e3      	ldr	r3, [r4, #12]
 800e8ca:	4a5c      	ldr	r2, [pc, #368]	; (800ea3c <HAL_RCC_OscConfig+0x2f0>)
 800e8cc:	061b      	lsls	r3, r3, #24
 800e8ce:	0f1b      	lsrs	r3, r3, #28
 800e8d0:	5cd3      	ldrb	r3, [r2, r3]
 800e8d2:	40d8      	lsrs	r0, r3
 800e8d4:	4b5a      	ldr	r3, [pc, #360]	; (800ea40 <HAL_RCC_OscConfig+0x2f4>)
 800e8d6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800e8d8:	4b5a      	ldr	r3, [pc, #360]	; (800ea44 <HAL_RCC_OscConfig+0x2f8>)
 800e8da:	6818      	ldr	r0, [r3, #0]
 800e8dc:	f7fd fe3e 	bl	800c55c <HAL_InitTick>
      if(status != HAL_OK)
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d100      	bne.n	800e8e6 <HAL_RCC_OscConfig+0x19a>
 800e8e4:	e747      	b.n	800e776 <HAL_RCC_OscConfig+0x2a>
 800e8e6:	e7a4      	b.n	800e832 <HAL_RCC_OscConfig+0xe6>
      if(hsi_state != RCC_HSI_OFF)
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d019      	beq.n	800e920 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e8ec:	2109      	movs	r1, #9
 800e8ee:	6822      	ldr	r2, [r4, #0]
 800e8f0:	438a      	bics	r2, r1
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800e8f6:	f7fd fe75 	bl	800c5e4 <HAL_GetTick>
 800e8fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	4213      	tst	r3, r2
 800e902:	d007      	beq.n	800e914 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e904:	6862      	ldr	r2, [r4, #4]
 800e906:	692b      	ldr	r3, [r5, #16]
 800e908:	4951      	ldr	r1, [pc, #324]	; (800ea50 <HAL_RCC_OscConfig+0x304>)
 800e90a:	021b      	lsls	r3, r3, #8
 800e90c:	400a      	ands	r2, r1
 800e90e:	4313      	orrs	r3, r2
 800e910:	6063      	str	r3, [r4, #4]
 800e912:	e730      	b.n	800e776 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e914:	f7fd fe66 	bl	800c5e4 <HAL_GetTick>
 800e918:	1bc0      	subs	r0, r0, r7
 800e91a:	2802      	cmp	r0, #2
 800e91c:	d9ee      	bls.n	800e8fc <HAL_RCC_OscConfig+0x1b0>
 800e91e:	e787      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 800e920:	2201      	movs	r2, #1
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	4393      	bics	r3, r2
 800e926:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800e928:	f7fd fe5c 	bl	800c5e4 <HAL_GetTick>
 800e92c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e92e:	2204      	movs	r2, #4
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	4213      	tst	r3, r2
 800e934:	d100      	bne.n	800e938 <HAL_RCC_OscConfig+0x1ec>
 800e936:	e71e      	b.n	800e776 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e938:	f7fd fe54 	bl	800c5e4 <HAL_GetTick>
 800e93c:	1bc0      	subs	r0, r0, r7
 800e93e:	2802      	cmp	r0, #2
 800e940:	d9f5      	bls.n	800e92e <HAL_RCC_OscConfig+0x1e2>
 800e942:	e775      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e944:	69ab      	ldr	r3, [r5, #24]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d020      	beq.n	800e98c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 800e94a:	2380      	movs	r3, #128	; 0x80
 800e94c:	6822      	ldr	r2, [r4, #0]
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4313      	orrs	r3, r2
 800e952:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800e954:	f7fd fe46 	bl	800c5e4 <HAL_GetTick>
 800e958:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e95a:	2280      	movs	r2, #128	; 0x80
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	0092      	lsls	r2, r2, #2
 800e960:	4213      	tst	r3, r2
 800e962:	d00d      	beq.n	800e980 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e964:	6863      	ldr	r3, [r4, #4]
 800e966:	4a34      	ldr	r2, [pc, #208]	; (800ea38 <HAL_RCC_OscConfig+0x2ec>)
 800e968:	4013      	ands	r3, r2
 800e96a:	6a2a      	ldr	r2, [r5, #32]
 800e96c:	4313      	orrs	r3, r2
 800e96e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e970:	6862      	ldr	r2, [r4, #4]
 800e972:	69eb      	ldr	r3, [r5, #28]
 800e974:	0212      	lsls	r2, r2, #8
 800e976:	061b      	lsls	r3, r3, #24
 800e978:	0a12      	lsrs	r2, r2, #8
 800e97a:	4313      	orrs	r3, r2
 800e97c:	6063      	str	r3, [r4, #4]
 800e97e:	e727      	b.n	800e7d0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e980:	f7fd fe30 	bl	800c5e4 <HAL_GetTick>
 800e984:	1bc0      	subs	r0, r0, r7
 800e986:	2802      	cmp	r0, #2
 800e988:	d9e7      	bls.n	800e95a <HAL_RCC_OscConfig+0x20e>
 800e98a:	e751      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	4a31      	ldr	r2, [pc, #196]	; (800ea54 <HAL_RCC_OscConfig+0x308>)
 800e990:	4013      	ands	r3, r2
 800e992:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800e994:	f7fd fe26 	bl	800c5e4 <HAL_GetTick>
 800e998:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800e99a:	2280      	movs	r2, #128	; 0x80
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	0092      	lsls	r2, r2, #2
 800e9a0:	4213      	tst	r3, r2
 800e9a2:	d100      	bne.n	800e9a6 <HAL_RCC_OscConfig+0x25a>
 800e9a4:	e714      	b.n	800e7d0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e9a6:	f7fd fe1d 	bl	800c5e4 <HAL_GetTick>
 800e9aa:	1bc0      	subs	r0, r0, r7
 800e9ac:	2802      	cmp	r0, #2
 800e9ae:	d9f4      	bls.n	800e99a <HAL_RCC_OscConfig+0x24e>
 800e9b0:	e73e      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e9b2:	696a      	ldr	r2, [r5, #20]
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	d010      	beq.n	800e9dc <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 800e9ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800e9c0:	f7fd fe10 	bl	800c5e4 <HAL_GetTick>
 800e9c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e9ca:	4213      	tst	r3, r2
 800e9cc:	d000      	beq.n	800e9d0 <HAL_RCC_OscConfig+0x284>
 800e9ce:	e703      	b.n	800e7d8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e9d0:	f7fd fe08 	bl	800c5e4 <HAL_GetTick>
 800e9d4:	1bc0      	subs	r0, r0, r7
 800e9d6:	2802      	cmp	r0, #2
 800e9d8:	d9f5      	bls.n	800e9c6 <HAL_RCC_OscConfig+0x27a>
 800e9da:	e729      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 800e9dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e9de:	439a      	bics	r2, r3
 800e9e0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800e9e2:	f7fd fdff 	bl	800c5e4 <HAL_GetTick>
 800e9e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e9e8:	2202      	movs	r2, #2
 800e9ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e9ec:	4213      	tst	r3, r2
 800e9ee:	d100      	bne.n	800e9f2 <HAL_RCC_OscConfig+0x2a6>
 800e9f0:	e6f2      	b.n	800e7d8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e9f2:	f7fd fdf7 	bl	800c5e4 <HAL_GetTick>
 800e9f6:	1bc0      	subs	r0, r0, r7
 800e9f8:	2802      	cmp	r0, #2
 800e9fa:	d9f5      	bls.n	800e9e8 <HAL_RCC_OscConfig+0x29c>
 800e9fc:	e718      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e9fe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800ea00:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ea04:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800ea06:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea08:	421a      	tst	r2, r3
 800ea0a:	d104      	bne.n	800ea16 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800ea12:	2301      	movs	r3, #1
 800ea14:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea16:	2280      	movs	r2, #128	; 0x80
 800ea18:	4f0f      	ldr	r7, [pc, #60]	; (800ea58 <HAL_RCC_OscConfig+0x30c>)
 800ea1a:	0052      	lsls	r2, r2, #1
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	4213      	tst	r3, r2
 800ea20:	d01c      	beq.n	800ea5c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea22:	2280      	movs	r2, #128	; 0x80
 800ea24:	68ab      	ldr	r3, [r5, #8]
 800ea26:	0052      	lsls	r2, r2, #1
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d12b      	bne.n	800ea84 <HAL_RCC_OscConfig+0x338>
 800ea2c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	6523      	str	r3, [r4, #80]	; 0x50
 800ea32:	e04c      	b.n	800eace <HAL_RCC_OscConfig+0x382>
 800ea34:	40021000 	.word	0x40021000
 800ea38:	ffff1fff 	.word	0xffff1fff
 800ea3c:	0801a895 	.word	0x0801a895
 800ea40:	200001cc 	.word	0x200001cc
 800ea44:	200000d8 	.word	0x200000d8
 800ea48:	fffeffff 	.word	0xfffeffff
 800ea4c:	fffbffff 	.word	0xfffbffff
 800ea50:	ffffe0ff 	.word	0xffffe0ff
 800ea54:	fffffeff 	.word	0xfffffeff
 800ea58:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea5c:	2280      	movs	r2, #128	; 0x80
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	0052      	lsls	r2, r2, #1
 800ea62:	4313      	orrs	r3, r2
 800ea64:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800ea66:	f7fd fdbd 	bl	800c5e4 <HAL_GetTick>
 800ea6a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea6c:	2280      	movs	r2, #128	; 0x80
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	0052      	lsls	r2, r2, #1
 800ea72:	4213      	tst	r3, r2
 800ea74:	d1d5      	bne.n	800ea22 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea76:	f7fd fdb5 	bl	800c5e4 <HAL_GetTick>
 800ea7a:	9b01      	ldr	r3, [sp, #4]
 800ea7c:	1ac0      	subs	r0, r0, r3
 800ea7e:	2864      	cmp	r0, #100	; 0x64
 800ea80:	d9f4      	bls.n	800ea6c <HAL_RCC_OscConfig+0x320>
 800ea82:	e6d5      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d116      	bne.n	800eab6 <HAL_RCC_OscConfig+0x36a>
 800ea88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ea8a:	4a51      	ldr	r2, [pc, #324]	; (800ebd0 <HAL_RCC_OscConfig+0x484>)
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	6523      	str	r3, [r4, #80]	; 0x50
 800ea90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ea92:	4a50      	ldr	r2, [pc, #320]	; (800ebd4 <HAL_RCC_OscConfig+0x488>)
 800ea94:	4013      	ands	r3, r2
 800ea96:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800ea98:	f7fd fda4 	bl	800c5e4 <HAL_GetTick>
 800ea9c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea9e:	2280      	movs	r2, #128	; 0x80
 800eaa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eaa2:	0092      	lsls	r2, r2, #2
 800eaa4:	4213      	tst	r3, r2
 800eaa6:	d01a      	beq.n	800eade <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eaa8:	f7fd fd9c 	bl	800c5e4 <HAL_GetTick>
 800eaac:	4b4a      	ldr	r3, [pc, #296]	; (800ebd8 <HAL_RCC_OscConfig+0x48c>)
 800eaae:	1bc0      	subs	r0, r0, r7
 800eab0:	4298      	cmp	r0, r3
 800eab2:	d9f4      	bls.n	800ea9e <HAL_RCC_OscConfig+0x352>
 800eab4:	e6bc      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eab6:	21a0      	movs	r1, #160	; 0xa0
 800eab8:	00c9      	lsls	r1, r1, #3
 800eaba:	428b      	cmp	r3, r1
 800eabc:	d118      	bne.n	800eaf0 <HAL_RCC_OscConfig+0x3a4>
 800eabe:	2380      	movs	r3, #128	; 0x80
 800eac0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800eac2:	00db      	lsls	r3, r3, #3
 800eac4:	430b      	orrs	r3, r1
 800eac6:	6523      	str	r3, [r4, #80]	; 0x50
 800eac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eaca:	431a      	orrs	r2, r3
 800eacc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800eace:	f7fd fd89 	bl	800c5e4 <HAL_GetTick>
 800ead2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ead4:	2280      	movs	r2, #128	; 0x80
 800ead6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ead8:	0092      	lsls	r2, r2, #2
 800eada:	4213      	tst	r3, r2
 800eadc:	d010      	beq.n	800eb00 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 800eade:	9b00      	ldr	r3, [sp, #0]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d000      	beq.n	800eae6 <HAL_RCC_OscConfig+0x39a>
 800eae4:	e67c      	b.n	800e7e0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800eae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eae8:	4a3c      	ldr	r2, [pc, #240]	; (800ebdc <HAL_RCC_OscConfig+0x490>)
 800eaea:	4013      	ands	r3, r2
 800eaec:	63a3      	str	r3, [r4, #56]	; 0x38
 800eaee:	e677      	b.n	800e7e0 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eaf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eaf2:	4a37      	ldr	r2, [pc, #220]	; (800ebd0 <HAL_RCC_OscConfig+0x484>)
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	6523      	str	r3, [r4, #80]	; 0x50
 800eaf8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eafa:	4a36      	ldr	r2, [pc, #216]	; (800ebd4 <HAL_RCC_OscConfig+0x488>)
 800eafc:	4013      	ands	r3, r2
 800eafe:	e797      	b.n	800ea30 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb00:	f7fd fd70 	bl	800c5e4 <HAL_GetTick>
 800eb04:	4b34      	ldr	r3, [pc, #208]	; (800ebd8 <HAL_RCC_OscConfig+0x48c>)
 800eb06:	1bc0      	subs	r0, r0, r7
 800eb08:	4298      	cmp	r0, r3
 800eb0a:	d9e3      	bls.n	800ead4 <HAL_RCC_OscConfig+0x388>
 800eb0c:	e690      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800eb0e:	2e0c      	cmp	r6, #12
 800eb10:	d043      	beq.n	800eb9a <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eb12:	4a33      	ldr	r2, [pc, #204]	; (800ebe0 <HAL_RCC_OscConfig+0x494>)
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d12e      	bne.n	800eb76 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 800eb18:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800eb1a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800eb1c:	4013      	ands	r3, r2
 800eb1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800eb20:	f7fd fd60 	bl	800c5e4 <HAL_GetTick>
 800eb24:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800eb26:	04bf      	lsls	r7, r7, #18
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	423b      	tst	r3, r7
 800eb2c:	d11d      	bne.n	800eb6a <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eb2e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800eb30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800eb32:	68e2      	ldr	r2, [r4, #12]
 800eb34:	430b      	orrs	r3, r1
 800eb36:	492b      	ldr	r1, [pc, #172]	; (800ebe4 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800eb38:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eb3a:	400a      	ands	r2, r1
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800eb40:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eb42:	4313      	orrs	r3, r2
 800eb44:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800eb46:	2380      	movs	r3, #128	; 0x80
 800eb48:	6822      	ldr	r2, [r4, #0]
 800eb4a:	045b      	lsls	r3, r3, #17
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800eb50:	f7fd fd48 	bl	800c5e4 <HAL_GetTick>
 800eb54:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	4233      	tst	r3, r6
 800eb5a:	d000      	beq.n	800eb5e <HAL_RCC_OscConfig+0x412>
 800eb5c:	e644      	b.n	800e7e8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eb5e:	f7fd fd41 	bl	800c5e4 <HAL_GetTick>
 800eb62:	1b40      	subs	r0, r0, r5
 800eb64:	2802      	cmp	r0, #2
 800eb66:	d9f6      	bls.n	800eb56 <HAL_RCC_OscConfig+0x40a>
 800eb68:	e662      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eb6a:	f7fd fd3b 	bl	800c5e4 <HAL_GetTick>
 800eb6e:	1b80      	subs	r0, r0, r6
 800eb70:	2802      	cmp	r0, #2
 800eb72:	d9d9      	bls.n	800eb28 <HAL_RCC_OscConfig+0x3dc>
 800eb74:	e65c      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 800eb76:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800eb78:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800eb7e:	f7fd fd31 	bl	800c5e4 <HAL_GetTick>
 800eb82:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800eb84:	04b6      	lsls	r6, r6, #18
 800eb86:	6823      	ldr	r3, [r4, #0]
 800eb88:	4233      	tst	r3, r6
 800eb8a:	d100      	bne.n	800eb8e <HAL_RCC_OscConfig+0x442>
 800eb8c:	e62c      	b.n	800e7e8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eb8e:	f7fd fd29 	bl	800c5e4 <HAL_GetTick>
 800eb92:	1b40      	subs	r0, r0, r5
 800eb94:	2802      	cmp	r0, #2
 800eb96:	d9f6      	bls.n	800eb86 <HAL_RCC_OscConfig+0x43a>
 800eb98:	e64a      	b.n	800e830 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 800eb9a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d100      	bne.n	800eba2 <HAL_RCC_OscConfig+0x456>
 800eba0:	e647      	b.n	800e832 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eba2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800eba4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eba6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800eba8:	0252      	lsls	r2, r2, #9
 800ebaa:	401a      	ands	r2, r3
 800ebac:	428a      	cmp	r2, r1
 800ebae:	d000      	beq.n	800ebb2 <HAL_RCC_OscConfig+0x466>
 800ebb0:	e628      	b.n	800e804 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ebb2:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebb4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ebb6:	0392      	lsls	r2, r2, #14
 800ebb8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebba:	428a      	cmp	r2, r1
 800ebbc:	d000      	beq.n	800ebc0 <HAL_RCC_OscConfig+0x474>
 800ebbe:	e621      	b.n	800e804 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ebc0:	22c0      	movs	r2, #192	; 0xc0
 800ebc2:	0412      	lsls	r2, r2, #16
 800ebc4:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ebc6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d100      	bne.n	800ebce <HAL_RCC_OscConfig+0x482>
 800ebcc:	e60c      	b.n	800e7e8 <HAL_RCC_OscConfig+0x9c>
 800ebce:	e619      	b.n	800e804 <HAL_RCC_OscConfig+0xb8>
 800ebd0:	fffffeff 	.word	0xfffffeff
 800ebd4:	fffffbff 	.word	0xfffffbff
 800ebd8:	00001388 	.word	0x00001388
 800ebdc:	efffffff 	.word	0xefffffff
 800ebe0:	feffffff 	.word	0xfeffffff
 800ebe4:	ff02ffff 	.word	0xff02ffff

0800ebe8 <HAL_RCC_ClockConfig>:
{
 800ebe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebea:	1e04      	subs	r4, r0, #0
 800ebec:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800ebee:	d101      	bne.n	800ebf4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800ebf0:	2001      	movs	r0, #1
}
 800ebf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ebf4:	2501      	movs	r5, #1
 800ebf6:	4e5b      	ldr	r6, [pc, #364]	; (800ed64 <HAL_RCC_ClockConfig+0x17c>)
 800ebf8:	9a01      	ldr	r2, [sp, #4]
 800ebfa:	6833      	ldr	r3, [r6, #0]
 800ebfc:	402b      	ands	r3, r5
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d331      	bcc.n	800ec66 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec02:	6822      	ldr	r2, [r4, #0]
 800ec04:	0793      	lsls	r3, r2, #30
 800ec06:	d443      	bmi.n	800ec90 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ec08:	07d3      	lsls	r3, r2, #31
 800ec0a:	d449      	bmi.n	800eca0 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec0c:	2501      	movs	r5, #1
 800ec0e:	6833      	ldr	r3, [r6, #0]
 800ec10:	9a01      	ldr	r2, [sp, #4]
 800ec12:	402b      	ands	r3, r5
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d909      	bls.n	800ec2c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec18:	6833      	ldr	r3, [r6, #0]
 800ec1a:	43ab      	bics	r3, r5
 800ec1c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800ec1e:	f7fd fce1 	bl	800c5e4 <HAL_GetTick>
 800ec22:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec24:	6833      	ldr	r3, [r6, #0]
 800ec26:	422b      	tst	r3, r5
 800ec28:	d000      	beq.n	800ec2c <HAL_RCC_ClockConfig+0x44>
 800ec2a:	e08c      	b.n	800ed46 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec2c:	6822      	ldr	r2, [r4, #0]
 800ec2e:	4d4e      	ldr	r5, [pc, #312]	; (800ed68 <HAL_RCC_ClockConfig+0x180>)
 800ec30:	0753      	lsls	r3, r2, #29
 800ec32:	d500      	bpl.n	800ec36 <HAL_RCC_ClockConfig+0x4e>
 800ec34:	e08f      	b.n	800ed56 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec36:	0713      	lsls	r3, r2, #28
 800ec38:	d506      	bpl.n	800ec48 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ec3a:	68e9      	ldr	r1, [r5, #12]
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	4a4b      	ldr	r2, [pc, #300]	; (800ed6c <HAL_RCC_ClockConfig+0x184>)
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	400a      	ands	r2, r1
 800ec44:	4313      	orrs	r3, r2
 800ec46:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ec48:	f7ff fd38 	bl	800e6bc <HAL_RCC_GetSysClockFreq>
 800ec4c:	68eb      	ldr	r3, [r5, #12]
 800ec4e:	4a48      	ldr	r2, [pc, #288]	; (800ed70 <HAL_RCC_ClockConfig+0x188>)
 800ec50:	061b      	lsls	r3, r3, #24
 800ec52:	0f1b      	lsrs	r3, r3, #28
 800ec54:	5cd3      	ldrb	r3, [r2, r3]
 800ec56:	40d8      	lsrs	r0, r3
 800ec58:	4b46      	ldr	r3, [pc, #280]	; (800ed74 <HAL_RCC_ClockConfig+0x18c>)
 800ec5a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800ec5c:	4b46      	ldr	r3, [pc, #280]	; (800ed78 <HAL_RCC_ClockConfig+0x190>)
 800ec5e:	6818      	ldr	r0, [r3, #0]
 800ec60:	f7fd fc7c 	bl	800c55c <HAL_InitTick>
  if(status != HAL_OK)
 800ec64:	e7c5      	b.n	800ebf2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec66:	6833      	ldr	r3, [r6, #0]
 800ec68:	9a01      	ldr	r2, [sp, #4]
 800ec6a:	43ab      	bics	r3, r5
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800ec70:	f7fd fcb8 	bl	800c5e4 <HAL_GetTick>
 800ec74:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec76:	6833      	ldr	r3, [r6, #0]
 800ec78:	9a01      	ldr	r2, [sp, #4]
 800ec7a:	402b      	ands	r3, r5
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d0c0      	beq.n	800ec02 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec80:	f7fd fcb0 	bl	800c5e4 <HAL_GetTick>
 800ec84:	4b3d      	ldr	r3, [pc, #244]	; (800ed7c <HAL_RCC_ClockConfig+0x194>)
 800ec86:	1bc0      	subs	r0, r0, r7
 800ec88:	4298      	cmp	r0, r3
 800ec8a:	d9f4      	bls.n	800ec76 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800ec8c:	2003      	movs	r0, #3
 800ec8e:	e7b0      	b.n	800ebf2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ec90:	20f0      	movs	r0, #240	; 0xf0
 800ec92:	4935      	ldr	r1, [pc, #212]	; (800ed68 <HAL_RCC_ClockConfig+0x180>)
 800ec94:	68cb      	ldr	r3, [r1, #12]
 800ec96:	4383      	bics	r3, r0
 800ec98:	68a0      	ldr	r0, [r4, #8]
 800ec9a:	4303      	orrs	r3, r0
 800ec9c:	60cb      	str	r3, [r1, #12]
 800ec9e:	e7b3      	b.n	800ec08 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eca0:	4d31      	ldr	r5, [pc, #196]	; (800ed68 <HAL_RCC_ClockConfig+0x180>)
 800eca2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eca4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eca6:	2a02      	cmp	r2, #2
 800eca8:	d118      	bne.n	800ecdc <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ecaa:	039b      	lsls	r3, r3, #14
 800ecac:	d5a0      	bpl.n	800ebf0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ecae:	2103      	movs	r1, #3
 800ecb0:	68eb      	ldr	r3, [r5, #12]
 800ecb2:	438b      	bics	r3, r1
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800ecb8:	f7fd fc94 	bl	800c5e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecbc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800ecbe:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d118      	bne.n	800ecf6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ecc4:	220c      	movs	r2, #12
 800ecc6:	68eb      	ldr	r3, [r5, #12]
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b08      	cmp	r3, #8
 800eccc:	d09e      	beq.n	800ec0c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ecce:	f7fd fc89 	bl	800c5e4 <HAL_GetTick>
 800ecd2:	4b2a      	ldr	r3, [pc, #168]	; (800ed7c <HAL_RCC_ClockConfig+0x194>)
 800ecd4:	1bc0      	subs	r0, r0, r7
 800ecd6:	4298      	cmp	r0, r3
 800ecd8:	d9f4      	bls.n	800ecc4 <HAL_RCC_ClockConfig+0xdc>
 800ecda:	e7d7      	b.n	800ec8c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ecdc:	2a03      	cmp	r2, #3
 800ecde:	d102      	bne.n	800ece6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ece0:	019b      	lsls	r3, r3, #6
 800ece2:	d4e4      	bmi.n	800ecae <HAL_RCC_ClockConfig+0xc6>
 800ece4:	e784      	b.n	800ebf0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ece6:	2a01      	cmp	r2, #1
 800ece8:	d102      	bne.n	800ecf0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ecea:	075b      	lsls	r3, r3, #29
 800ecec:	d4df      	bmi.n	800ecae <HAL_RCC_ClockConfig+0xc6>
 800ecee:	e77f      	b.n	800ebf0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ecf0:	059b      	lsls	r3, r3, #22
 800ecf2:	d4dc      	bmi.n	800ecae <HAL_RCC_ClockConfig+0xc6>
 800ecf4:	e77c      	b.n	800ebf0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ecf6:	2b03      	cmp	r3, #3
 800ecf8:	d10b      	bne.n	800ed12 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ecfa:	220c      	movs	r2, #12
 800ecfc:	68eb      	ldr	r3, [r5, #12]
 800ecfe:	4013      	ands	r3, r2
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d083      	beq.n	800ec0c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed04:	f7fd fc6e 	bl	800c5e4 <HAL_GetTick>
 800ed08:	4b1c      	ldr	r3, [pc, #112]	; (800ed7c <HAL_RCC_ClockConfig+0x194>)
 800ed0a:	1bc0      	subs	r0, r0, r7
 800ed0c:	4298      	cmp	r0, r3
 800ed0e:	d9f4      	bls.n	800ecfa <HAL_RCC_ClockConfig+0x112>
 800ed10:	e7bc      	b.n	800ec8c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d011      	beq.n	800ed3a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ed16:	220c      	movs	r2, #12
 800ed18:	68eb      	ldr	r3, [r5, #12]
 800ed1a:	4213      	tst	r3, r2
 800ed1c:	d100      	bne.n	800ed20 <HAL_RCC_ClockConfig+0x138>
 800ed1e:	e775      	b.n	800ec0c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed20:	f7fd fc60 	bl	800c5e4 <HAL_GetTick>
 800ed24:	4b15      	ldr	r3, [pc, #84]	; (800ed7c <HAL_RCC_ClockConfig+0x194>)
 800ed26:	1bc0      	subs	r0, r0, r7
 800ed28:	4298      	cmp	r0, r3
 800ed2a:	d9f4      	bls.n	800ed16 <HAL_RCC_ClockConfig+0x12e>
 800ed2c:	e7ae      	b.n	800ec8c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed2e:	f7fd fc59 	bl	800c5e4 <HAL_GetTick>
 800ed32:	4b12      	ldr	r3, [pc, #72]	; (800ed7c <HAL_RCC_ClockConfig+0x194>)
 800ed34:	1bc0      	subs	r0, r0, r7
 800ed36:	4298      	cmp	r0, r3
 800ed38:	d8a8      	bhi.n	800ec8c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ed3a:	220c      	movs	r2, #12
 800ed3c:	68eb      	ldr	r3, [r5, #12]
 800ed3e:	4013      	ands	r3, r2
 800ed40:	2b04      	cmp	r3, #4
 800ed42:	d1f4      	bne.n	800ed2e <HAL_RCC_ClockConfig+0x146>
 800ed44:	e762      	b.n	800ec0c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed46:	f7fd fc4d 	bl	800c5e4 <HAL_GetTick>
 800ed4a:	4b0c      	ldr	r3, [pc, #48]	; (800ed7c <HAL_RCC_ClockConfig+0x194>)
 800ed4c:	1bc0      	subs	r0, r0, r7
 800ed4e:	4298      	cmp	r0, r3
 800ed50:	d800      	bhi.n	800ed54 <HAL_RCC_ClockConfig+0x16c>
 800ed52:	e767      	b.n	800ec24 <HAL_RCC_ClockConfig+0x3c>
 800ed54:	e79a      	b.n	800ec8c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ed56:	68eb      	ldr	r3, [r5, #12]
 800ed58:	4909      	ldr	r1, [pc, #36]	; (800ed80 <HAL_RCC_ClockConfig+0x198>)
 800ed5a:	400b      	ands	r3, r1
 800ed5c:	68e1      	ldr	r1, [r4, #12]
 800ed5e:	430b      	orrs	r3, r1
 800ed60:	60eb      	str	r3, [r5, #12]
 800ed62:	e768      	b.n	800ec36 <HAL_RCC_ClockConfig+0x4e>
 800ed64:	40022000 	.word	0x40022000
 800ed68:	40021000 	.word	0x40021000
 800ed6c:	ffffc7ff 	.word	0xffffc7ff
 800ed70:	0801a895 	.word	0x0801a895
 800ed74:	200001cc 	.word	0x200001cc
 800ed78:	200000d8 	.word	0x200000d8
 800ed7c:	00001388 	.word	0x00001388
 800ed80:	fffff8ff 	.word	0xfffff8ff

0800ed84 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ed84:	6803      	ldr	r3, [r0, #0]
{
 800ed86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed88:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ed8a:	069b      	lsls	r3, r3, #26
 800ed8c:	d53c      	bpl.n	800ee08 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed8e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800ed90:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed92:	4c5a      	ldr	r4, [pc, #360]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ed94:	055b      	lsls	r3, r3, #21
 800ed96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800ed98:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed9a:	421a      	tst	r2, r3
 800ed9c:	d104      	bne.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eda0:	4313      	orrs	r3, r2
 800eda2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800eda4:	2301      	movs	r3, #1
 800eda6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eda8:	2780      	movs	r7, #128	; 0x80
 800edaa:	4e55      	ldr	r6, [pc, #340]	; (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800edac:	007f      	lsls	r7, r7, #1
 800edae:	6833      	ldr	r3, [r6, #0]
 800edb0:	423b      	tst	r3, r7
 800edb2:	d062      	beq.n	800ee7a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800edb4:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800edb6:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800edb8:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800edba:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800edbc:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800edbe:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800edc0:	029b      	lsls	r3, r3, #10
 800edc2:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800edc4:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800edc6:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800edc8:	428a      	cmp	r2, r1
 800edca:	d167      	bne.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800edcc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800edce:	0011      	movs	r1, r2
 800edd0:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800edd2:	421a      	tst	r2, r3
 800edd4:	d16a      	bne.n	800eeac <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800edd6:	6869      	ldr	r1, [r5, #4]
 800edd8:	23c0      	movs	r3, #192	; 0xc0
 800edda:	000a      	movs	r2, r1
 800eddc:	029b      	lsls	r3, r3, #10
 800edde:	401a      	ands	r2, r3
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d107      	bne.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	4847      	ldr	r0, [pc, #284]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800ede8:	4003      	ands	r3, r0
 800edea:	20c0      	movs	r0, #192	; 0xc0
 800edec:	0380      	lsls	r0, r0, #14
 800edee:	4001      	ands	r1, r0
 800edf0:	430b      	orrs	r3, r1
 800edf2:	6023      	str	r3, [r4, #0]
 800edf4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800edf6:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800edf8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800edfa:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d103      	bne.n	800ee08 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee02:	4a41      	ldr	r2, [pc, #260]	; (800ef08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800ee04:	4013      	ands	r3, r2
 800ee06:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	07da      	lsls	r2, r3, #31
 800ee0c:	d506      	bpl.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ee0e:	2003      	movs	r0, #3
 800ee10:	493a      	ldr	r1, [pc, #232]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ee12:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ee14:	4382      	bics	r2, r0
 800ee16:	68a8      	ldr	r0, [r5, #8]
 800ee18:	4302      	orrs	r2, r0
 800ee1a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ee1c:	079a      	lsls	r2, r3, #30
 800ee1e:	d506      	bpl.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ee20:	200c      	movs	r0, #12
 800ee22:	4936      	ldr	r1, [pc, #216]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ee24:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ee26:	4382      	bics	r2, r0
 800ee28:	68e8      	ldr	r0, [r5, #12]
 800ee2a:	4302      	orrs	r2, r0
 800ee2c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ee2e:	075a      	lsls	r2, r3, #29
 800ee30:	d506      	bpl.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ee32:	4932      	ldr	r1, [pc, #200]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ee34:	4835      	ldr	r0, [pc, #212]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800ee36:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ee38:	4002      	ands	r2, r0
 800ee3a:	6928      	ldr	r0, [r5, #16]
 800ee3c:	4302      	orrs	r2, r0
 800ee3e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ee40:	071a      	lsls	r2, r3, #28
 800ee42:	d506      	bpl.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ee44:	492d      	ldr	r1, [pc, #180]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ee46:	4832      	ldr	r0, [pc, #200]	; (800ef10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800ee48:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ee4a:	4002      	ands	r2, r0
 800ee4c:	6968      	ldr	r0, [r5, #20]
 800ee4e:	4302      	orrs	r2, r0
 800ee50:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ee52:	05da      	lsls	r2, r3, #23
 800ee54:	d506      	bpl.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ee56:	4929      	ldr	r1, [pc, #164]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ee58:	482e      	ldr	r0, [pc, #184]	; (800ef14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ee5a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ee5c:	4002      	ands	r2, r0
 800ee5e:	69a8      	ldr	r0, [r5, #24]
 800ee60:	4302      	orrs	r2, r0
 800ee62:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800ee64:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ee66:	061b      	lsls	r3, r3, #24
 800ee68:	d517      	bpl.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800ee6a:	4a24      	ldr	r2, [pc, #144]	; (800eefc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ee6c:	492a      	ldr	r1, [pc, #168]	; (800ef18 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800ee6e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ee70:	400b      	ands	r3, r1
 800ee72:	69e9      	ldr	r1, [r5, #28]
 800ee74:	430b      	orrs	r3, r1
 800ee76:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ee78:	e00f      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee7a:	6833      	ldr	r3, [r6, #0]
 800ee7c:	433b      	orrs	r3, r7
 800ee7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ee80:	f7fd fbb0 	bl	800c5e4 <HAL_GetTick>
 800ee84:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee86:	6833      	ldr	r3, [r6, #0]
 800ee88:	423b      	tst	r3, r7
 800ee8a:	d193      	bne.n	800edb4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee8c:	f7fd fbaa 	bl	800c5e4 <HAL_GetTick>
 800ee90:	9b01      	ldr	r3, [sp, #4]
 800ee92:	1ac0      	subs	r0, r0, r3
 800ee94:	2864      	cmp	r0, #100	; 0x64
 800ee96:	d9f6      	bls.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 800ee98:	2003      	movs	r0, #3
}
 800ee9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800ee9c:	429e      	cmp	r6, r3
 800ee9e:	d195      	bne.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eea0:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 800eea2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eea4:	0392      	lsls	r2, r2, #14
 800eea6:	d400      	bmi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x126>
 800eea8:	e790      	b.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x48>
 800eeaa:	e7f6      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800eeac:	42b1      	cmp	r1, r6
 800eeae:	d100      	bne.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800eeb0:	e791      	b.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800eeb2:	682b      	ldr	r3, [r5, #0]
 800eeb4:	069b      	lsls	r3, r3, #26
 800eeb6:	d400      	bmi.n	800eeba <HAL_RCCEx_PeriphCLKConfig+0x136>
 800eeb8:	e78d      	b.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 800eeba:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800eebc:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800eebe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800eec0:	0312      	lsls	r2, r2, #12
 800eec2:	4302      	orrs	r2, r0
 800eec4:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eec6:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800eec8:	4b12      	ldr	r3, [pc, #72]	; (800ef14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eeca:	4814      	ldr	r0, [pc, #80]	; (800ef1c <HAL_RCCEx_PeriphCLKConfig+0x198>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800eecc:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eece:	4002      	ands	r2, r0
 800eed0:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800eed2:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800eed4:	05cb      	lsls	r3, r1, #23
 800eed6:	d400      	bmi.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x156>
 800eed8:	e77d      	b.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 800eeda:	f7fd fb83 	bl	800c5e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eede:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800eee0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eee2:	00bf      	lsls	r7, r7, #2
 800eee4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eee6:	423b      	tst	r3, r7
 800eee8:	d000      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x168>
 800eeea:	e774      	b.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eeec:	f7fd fb7a 	bl	800c5e4 <HAL_GetTick>
 800eef0:	4b0b      	ldr	r3, [pc, #44]	; (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800eef2:	1b80      	subs	r0, r0, r6
 800eef4:	4298      	cmp	r0, r3
 800eef6:	d9f5      	bls.n	800eee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800eef8:	e7ce      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800eefa:	46c0      	nop			; (mov r8, r8)
 800eefc:	40021000 	.word	0x40021000
 800ef00:	40007000 	.word	0x40007000
 800ef04:	ffcfffff 	.word	0xffcfffff
 800ef08:	efffffff 	.word	0xefffffff
 800ef0c:	fffff3ff 	.word	0xfffff3ff
 800ef10:	ffffcfff 	.word	0xffffcfff
 800ef14:	fffcffff 	.word	0xfffcffff
 800ef18:	fff3ffff 	.word	0xfff3ffff
 800ef1c:	fff7ffff 	.word	0xfff7ffff
 800ef20:	00001388 	.word	0x00001388

0800ef24 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800ef24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef26:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ef28:	1c45      	adds	r5, r0, #1
 800ef2a:	7feb      	ldrb	r3, [r5, #31]
{
 800ef2c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800ef2e:	0038      	movs	r0, r7
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d027      	beq.n	800ef84 <HAL_RTC_DeactivateAlarm+0x60>
 800ef34:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ef36:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ef38:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 800ef3a:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ef3c:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	625a      	str	r2, [r3, #36]	; 0x24
 800ef42:	3a77      	subs	r2, #119	; 0x77
 800ef44:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800ef46:	32ad      	adds	r2, #173	; 0xad
 800ef48:	4291      	cmp	r1, r2
 800ef4a:	d12a      	bne.n	800efa2 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ef4c:	689a      	ldr	r2, [r3, #8]
 800ef4e:	4922      	ldr	r1, [pc, #136]	; (800efd8 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ef50:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ef52:	400a      	ands	r2, r1
 800ef54:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ef56:	689a      	ldr	r2, [r3, #8]
 800ef58:	4920      	ldr	r1, [pc, #128]	; (800efdc <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ef5a:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ef5c:	400a      	ands	r2, r1
 800ef5e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800ef60:	f7fd fb40 	bl	800c5e4 <HAL_GetTick>
 800ef64:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ef66:	2201      	movs	r2, #1
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	401a      	ands	r2, r3
 800ef6e:	9201      	str	r2, [sp, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	4213      	tst	r3, r2
 800ef74:	d007      	beq.n	800ef86 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef76:	22ff      	movs	r2, #255	; 0xff
 800ef78:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ef7a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef7c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800ef82:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 800ef84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ef86:	f7fd fb2d 	bl	800c5e4 <HAL_GetTick>
 800ef8a:	9b00      	ldr	r3, [sp, #0]
 800ef8c:	1ac0      	subs	r0, r0, r3
 800ef8e:	42b8      	cmp	r0, r7
 800ef90:	d9e9      	bls.n	800ef66 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef92:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ef94:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef96:	6823      	ldr	r3, [r4, #0]
 800ef98:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ef9a:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800ef9c:	9b01      	ldr	r3, [sp, #4]
 800ef9e:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 800efa0:	e7f0      	b.n	800ef84 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800efa2:	689a      	ldr	r2, [r3, #8]
 800efa4:	490e      	ldr	r1, [pc, #56]	; (800efe0 <HAL_RTC_DeactivateAlarm+0xbc>)
 800efa6:	400a      	ands	r2, r1
 800efa8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800efaa:	689a      	ldr	r2, [r3, #8]
 800efac:	490d      	ldr	r1, [pc, #52]	; (800efe4 <HAL_RTC_DeactivateAlarm+0xc0>)
 800efae:	400a      	ands	r2, r1
 800efb0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800efb2:	f7fd fb17 	bl	800c5e4 <HAL_GetTick>
 800efb6:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800efb8:	6823      	ldr	r3, [r4, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	001a      	movs	r2, r3
 800efbe:	403a      	ands	r2, r7
 800efc0:	9201      	str	r2, [sp, #4]
 800efc2:	423b      	tst	r3, r7
 800efc4:	d1d7      	bne.n	800ef76 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800efc6:	f7fd fb0d 	bl	800c5e4 <HAL_GetTick>
 800efca:	9b00      	ldr	r3, [sp, #0]
 800efcc:	1ac0      	subs	r0, r0, r3
 800efce:	23fa      	movs	r3, #250	; 0xfa
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4298      	cmp	r0, r3
 800efd4:	d9f0      	bls.n	800efb8 <HAL_RTC_DeactivateAlarm+0x94>
 800efd6:	e7dc      	b.n	800ef92 <HAL_RTC_DeactivateAlarm+0x6e>
 800efd8:	fffffeff 	.word	0xfffffeff
 800efdc:	ffffefff 	.word	0xffffefff
 800efe0:	fffffdff 	.word	0xfffffdff
 800efe4:	ffffdfff 	.word	0xffffdfff

0800efe8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800efe8:	21a0      	movs	r1, #160	; 0xa0
 800efea:	6802      	ldr	r2, [r0, #0]
{
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800efee:	68d3      	ldr	r3, [r2, #12]
{
 800eff0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800eff2:	438b      	bics	r3, r1
 800eff4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800eff6:	f7fd faf5 	bl	800c5e4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800effa:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 800effc:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800effe:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f000:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	4233      	tst	r3, r6
 800f008:	d001      	beq.n	800f00e <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800f00a:	2000      	movs	r0, #0
}
 800f00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f00e:	f7fd fae9 	bl	800c5e4 <HAL_GetTick>
 800f012:	1b40      	subs	r0, r0, r5
 800f014:	42b8      	cmp	r0, r7
 800f016:	d9f4      	bls.n	800f002 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800f018:	2003      	movs	r0, #3
 800f01a:	e7f7      	b.n	800f00c <HAL_RTC_WaitForSynchro+0x24>

0800f01c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f01e:	2640      	movs	r6, #64	; 0x40
 800f020:	6803      	ldr	r3, [r0, #0]
{
 800f022:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	4232      	tst	r2, r6
 800f028:	d001      	beq.n	800f02e <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800f02a:	2000      	movs	r0, #0
}
 800f02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f02e:	2201      	movs	r2, #1
 800f030:	4252      	negs	r2, r2
 800f032:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800f034:	f7fd fad6 	bl	800c5e4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f038:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800f03a:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f03c:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	4233      	tst	r3, r6
 800f044:	d1f1      	bne.n	800f02a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f046:	f7fd facd 	bl	800c5e4 <HAL_GetTick>
 800f04a:	1b40      	subs	r0, r0, r5
 800f04c:	42b8      	cmp	r0, r7
 800f04e:	d9f6      	bls.n	800f03e <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800f050:	2003      	movs	r0, #3
 800f052:	e7eb      	b.n	800f02c <RTC_EnterInitMode+0x10>

0800f054 <HAL_RTC_Init>:
{
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f058:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d01a      	beq.n	800f094 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f05e:	1c86      	adds	r6, r0, #2
 800f060:	7ff3      	ldrb	r3, [r6, #31]
 800f062:	b2da      	uxtb	r2, r3
 800f064:	2b00      	cmp	r3, #0
 800f066:	d103      	bne.n	800f070 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800f068:	1943      	adds	r3, r0, r5
 800f06a:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 800f06c:	f004 fd88 	bl	8013b80 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f070:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f072:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f074:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f076:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f078:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f07a:	625a      	str	r2, [r3, #36]	; 0x24
 800f07c:	3a77      	subs	r2, #119	; 0x77
 800f07e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f080:	f7ff ffcc 	bl	800f01c <RTC_EnterInitMode>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	1e05      	subs	r5, r0, #0
 800f088:	d006      	beq.n	800f098 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f08a:	22ff      	movs	r2, #255	; 0xff
 800f08c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f08e:	2304      	movs	r3, #4
 800f090:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800f092:	2501      	movs	r5, #1
}
 800f094:	0028      	movs	r0, r5
 800f096:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	491b      	ldr	r1, [pc, #108]	; (800f108 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f09c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f09e:	400a      	ands	r2, r1
 800f0a0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f0a2:	6862      	ldr	r2, [r4, #4]
 800f0a4:	6899      	ldr	r1, [r3, #8]
 800f0a6:	4302      	orrs	r2, r0
 800f0a8:	69a0      	ldr	r0, [r4, #24]
 800f0aa:	4302      	orrs	r2, r0
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f0b0:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f0b2:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f0b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f0b6:	68a2      	ldr	r2, [r4, #8]
 800f0b8:	6919      	ldr	r1, [r3, #16]
 800f0ba:	0412      	lsls	r2, r2, #16
 800f0bc:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f0be:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f0c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f0c2:	68da      	ldr	r2, [r3, #12]
 800f0c4:	438a      	bics	r2, r1
 800f0c6:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f0c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0ca:	397d      	subs	r1, #125	; 0x7d
 800f0cc:	438a      	bics	r2, r1
 800f0ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f0d0:	69e2      	ldr	r2, [r4, #28]
 800f0d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f0d4:	4302      	orrs	r2, r0
 800f0d6:	430a      	orrs	r2, r1
 800f0d8:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	069b      	lsls	r3, r3, #26
 800f0de:	d40c      	bmi.n	800f0fa <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f0e0:	0020      	movs	r0, r4
 800f0e2:	f7ff ff81 	bl	800efe8 <HAL_RTC_WaitForSynchro>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d007      	beq.n	800f0fa <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0ea:	22ff      	movs	r2, #255	; 0xff
 800f0ec:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800f0ee:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0f0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f0f2:	2304      	movs	r3, #4
 800f0f4:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800f0f6:	77e5      	strb	r5, [r4, #31]
 800f0f8:	e7cb      	b.n	800f092 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0fa:	22ff      	movs	r2, #255	; 0xff
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800f100:	2301      	movs	r3, #1
 800f102:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800f104:	e7c6      	b.n	800f094 <HAL_RTC_Init+0x40>
 800f106:	46c0      	nop			; (mov r8, r8)
 800f108:	ff8fffbf 	.word	0xff8fffbf

0800f10c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800f10c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 800f10e:	2809      	cmp	r0, #9
 800f110:	d803      	bhi.n	800f11a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800f112:	011b      	lsls	r3, r3, #4
 800f114:	4318      	orrs	r0, r3
 800f116:	b2c0      	uxtb	r0, r0
}
 800f118:	4770      	bx	lr
    Param -= 10U;
 800f11a:	380a      	subs	r0, #10
    bcdhigh++;
 800f11c:	3301      	adds	r3, #1
    Param -= 10U;
 800f11e:	b2c0      	uxtb	r0, r0
 800f120:	e7f5      	b.n	800f10e <RTC_ByteToBcd2+0x2>
	...

0800f124 <HAL_RTC_SetTime>:
{
 800f124:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800f126:	1c43      	adds	r3, r0, #1
{
 800f128:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800f12a:	9301      	str	r3, [sp, #4]
{
 800f12c:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 800f12e:	7fd9      	ldrb	r1, [r3, #31]
 800f130:	2302      	movs	r3, #2
{
 800f132:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800f134:	001f      	movs	r7, r3
 800f136:	2901      	cmp	r1, #1
 800f138:	d036      	beq.n	800f1a8 <HAL_RTC_SetTime+0x84>
 800f13a:	2101      	movs	r1, #1
 800f13c:	1840      	adds	r0, r0, r1
 800f13e:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f140:	18e9      	adds	r1, r5, r3
 800f142:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f144:	682f      	ldr	r7, [r5, #0]
 800f146:	7820      	ldrb	r0, [r4, #0]
 800f148:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f14a:	9102      	str	r1, [sp, #8]
 800f14c:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 800f14e:	2a00      	cmp	r2, #0
 800f150:	d12d      	bne.n	800f1ae <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	0011      	movs	r1, r2
 800f156:	4019      	ands	r1, r3
 800f158:	421a      	tst	r2, r3
 800f15a:	d100      	bne.n	800f15e <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 800f15c:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f15e:	f7ff ffd5 	bl	800f10c <RTC_ByteToBcd2>
 800f162:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f164:	0030      	movs	r0, r6
 800f166:	f7ff ffd1 	bl	800f10c <RTC_ByteToBcd2>
 800f16a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f16c:	78a0      	ldrb	r0, [r4, #2]
 800f16e:	f7ff ffcd 	bl	800f10c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f172:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f174:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f176:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f178:	4303      	orrs	r3, r0
 800f17a:	0412      	lsls	r2, r2, #16
 800f17c:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f17e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f180:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f182:	23ca      	movs	r3, #202	; 0xca
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
 800f186:	3b77      	subs	r3, #119	; 0x77
 800f188:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f18a:	0028      	movs	r0, r5
 800f18c:	f7ff ff46 	bl	800f01c <RTC_EnterInitMode>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	1e07      	subs	r7, r0, #0
 800f194:	d019      	beq.n	800f1ca <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f196:	22ff      	movs	r2, #255	; 0xff
 800f198:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f19a:	2304      	movs	r3, #4
 800f19c:	9a02      	ldr	r2, [sp, #8]
 800f19e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	9a01      	ldr	r2, [sp, #4]
 800f1a4:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 800f1a6:	2701      	movs	r7, #1
}
 800f1a8:	0038      	movs	r0, r7
 800f1aa:	b005      	add	sp, #20
 800f1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	0011      	movs	r1, r2
 800f1b2:	4019      	ands	r1, r3
 800f1b4:	421a      	tst	r2, r3
 800f1b6:	d100      	bne.n	800f1ba <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 800f1b8:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f1ba:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f1bc:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f1be:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f1c0:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 800f1c2:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f1c4:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f1c6:	4306      	orrs	r6, r0
 800f1c8:	e7da      	b.n	800f180 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f1ca:	4816      	ldr	r0, [pc, #88]	; (800f224 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f1cc:	4916      	ldr	r1, [pc, #88]	; (800f228 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f1ce:	4006      	ands	r6, r0
 800f1d0:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f1d2:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f1d4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f1d6:	400a      	ands	r2, r1
 800f1d8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f1da:	68e2      	ldr	r2, [r4, #12]
 800f1dc:	6899      	ldr	r1, [r3, #8]
 800f1de:	4302      	orrs	r2, r0
 800f1e0:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f1e2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f1e4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f1e6:	68da      	ldr	r2, [r3, #12]
 800f1e8:	438a      	bics	r2, r1
 800f1ea:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	069b      	lsls	r3, r3, #26
 800f1f0:	d40d      	bmi.n	800f20e <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f1f2:	0028      	movs	r0, r5
 800f1f4:	f7ff fef8 	bl	800efe8 <HAL_RTC_WaitForSynchro>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d008      	beq.n	800f20e <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1fc:	22ff      	movs	r2, #255	; 0xff
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f202:	2304      	movs	r3, #4
 800f204:	9a02      	ldr	r2, [sp, #8]
 800f206:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800f208:	9b01      	ldr	r3, [sp, #4]
 800f20a:	77df      	strb	r7, [r3, #31]
 800f20c:	e7cb      	b.n	800f1a6 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f20e:	22ff      	movs	r2, #255	; 0xff
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800f214:	2301      	movs	r3, #1
 800f216:	9a02      	ldr	r2, [sp, #8]
 800f218:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800f21a:	2300      	movs	r3, #0
 800f21c:	9a01      	ldr	r2, [sp, #4]
 800f21e:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800f220:	e7c2      	b.n	800f1a8 <HAL_RTC_SetTime+0x84>
 800f222:	46c0      	nop			; (mov r8, r8)
 800f224:	007f7f7f 	.word	0x007f7f7f
 800f228:	fffbffff 	.word	0xfffbffff

0800f22c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800f22c:	2302      	movs	r3, #2
{
 800f22e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800f230:	1c47      	adds	r7, r0, #1
{
 800f232:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 800f234:	7ff9      	ldrb	r1, [r7, #31]
{
 800f236:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800f238:	001d      	movs	r5, r3
{
 800f23a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800f23c:	2901      	cmp	r1, #1
 800f23e:	d036      	beq.n	800f2ae <HAL_RTC_SetDate+0x82>
 800f240:	2101      	movs	r1, #1
 800f242:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f244:	18c1      	adds	r1, r0, r3
 800f246:	77cb      	strb	r3, [r1, #31]
 800f248:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 800f24a:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f24c:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 800f24e:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f250:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f252:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 800f254:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f256:	2a00      	cmp	r2, #0
 800f258:	d14c      	bne.n	800f2f4 <HAL_RTC_SetDate+0xc8>
 800f25a:	3210      	adds	r2, #16
 800f25c:	4213      	tst	r3, r2
 800f25e:	d002      	beq.n	800f266 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f260:	4393      	bics	r3, r2
 800f262:	330a      	adds	r3, #10
 800f264:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f266:	f7ff ff51 	bl	800f10c <RTC_ByteToBcd2>
 800f26a:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f26c:	7870      	ldrb	r0, [r6, #1]
 800f26e:	f7ff ff4d 	bl	800f10c <RTC_ByteToBcd2>
 800f272:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f274:	0028      	movs	r0, r5
 800f276:	f7ff ff49 	bl	800f10c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f27a:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f27c:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f27e:	041d      	lsls	r5, r3, #16
 800f280:	9b02      	ldr	r3, [sp, #8]
 800f282:	4318      	orrs	r0, r3
 800f284:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f286:	22ca      	movs	r2, #202	; 0xca
 800f288:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f28a:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f28c:	625a      	str	r2, [r3, #36]	; 0x24
 800f28e:	3a77      	subs	r2, #119	; 0x77
 800f290:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f292:	f7ff fec3 	bl	800f01c <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f296:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	1e05      	subs	r5, r0, #0
 800f29c:	d00a      	beq.n	800f2b4 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f29e:	22ff      	movs	r2, #255	; 0xff
 800f2a0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f2a2:	2304      	movs	r3, #4
 800f2a4:	9a01      	ldr	r2, [sp, #4]
 800f2a6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800f2ac:	2501      	movs	r5, #1
}
 800f2ae:	0028      	movs	r0, r5
 800f2b0:	b005      	add	sp, #20
 800f2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f2b4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f2b6:	4812      	ldr	r0, [pc, #72]	; (800f300 <HAL_RTC_SetDate+0xd4>)
 800f2b8:	4006      	ands	r6, r0
 800f2ba:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f2bc:	68da      	ldr	r2, [r3, #12]
 800f2be:	438a      	bics	r2, r1
 800f2c0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	069b      	lsls	r3, r3, #26
 800f2c6:	d40c      	bmi.n	800f2e2 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f2c8:	0020      	movs	r0, r4
 800f2ca:	f7ff fe8d 	bl	800efe8 <HAL_RTC_WaitForSynchro>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d007      	beq.n	800f2e2 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2d2:	22ff      	movs	r2, #255	; 0xff
 800f2d4:	6823      	ldr	r3, [r4, #0]
 800f2d6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f2d8:	2304      	movs	r3, #4
 800f2da:	9a01      	ldr	r2, [sp, #4]
 800f2dc:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800f2de:	77fd      	strb	r5, [r7, #31]
 800f2e0:	e7e4      	b.n	800f2ac <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2e2:	22ff      	movs	r2, #255	; 0xff
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	9a01      	ldr	r2, [sp, #4]
 800f2ec:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800f2f2:	e7dc      	b.n	800f2ae <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f2f4:	9a02      	ldr	r2, [sp, #8]
 800f2f6:	0406      	lsls	r6, r0, #16
 800f2f8:	4316      	orrs	r6, r2
 800f2fa:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 800f2fc:	021e      	lsls	r6, r3, #8
 800f2fe:	e7c2      	b.n	800f286 <HAL_RTC_SetDate+0x5a>
 800f300:	00ffff3f 	.word	0x00ffff3f

0800f304 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800f304:	2302      	movs	r3, #2
{
 800f306:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f308:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800f30a:	1c41      	adds	r1, r0, #1
 800f30c:	7fce      	ldrb	r6, [r1, #31]
{
 800f30e:	0004      	movs	r4, r0
 800f310:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800f312:	0018      	movs	r0, r3
 800f314:	2e01      	cmp	r6, #1
 800f316:	d100      	bne.n	800f31a <HAL_RTC_SetAlarm_IT+0x16>
 800f318:	e095      	b.n	800f446 <HAL_RTC_SetAlarm_IT+0x142>
 800f31a:	3801      	subs	r0, #1
 800f31c:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f31e:	18e1      	adds	r1, r4, r3
 800f320:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800f322:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f324:	6826      	ldr	r6, [r4, #0]
 800f326:	9101      	str	r1, [sp, #4]
 800f328:	7828      	ldrb	r0, [r5, #0]
 800f32a:	78af      	ldrb	r7, [r5, #2]
 800f32c:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 800f32e:	2a00      	cmp	r2, #0
 800f330:	d165      	bne.n	800f3fe <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f332:	68b2      	ldr	r2, [r6, #8]
 800f334:	0011      	movs	r1, r2
 800f336:	4019      	ands	r1, r3
 800f338:	421a      	tst	r2, r3
 800f33a:	d100      	bne.n	800f33e <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f33c:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f33e:	f7ff fee5 	bl	800f10c <RTC_ByteToBcd2>
 800f342:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f344:	9801      	ldr	r0, [sp, #4]
 800f346:	f7ff fee1 	bl	800f10c <RTC_ByteToBcd2>
 800f34a:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f34c:	0038      	movs	r0, r7
 800f34e:	f7ff fedd 	bl	800f10c <RTC_ByteToBcd2>
 800f352:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f354:	1c6b      	adds	r3, r5, #1
 800f356:	7fd8      	ldrb	r0, [r3, #31]
 800f358:	f7ff fed8 	bl	800f10c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f35c:	696a      	ldr	r2, [r5, #20]
 800f35e:	69eb      	ldr	r3, [r5, #28]
 800f360:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f362:	78ea      	ldrb	r2, [r5, #3]
 800f364:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f366:	4313      	orrs	r3, r2
 800f368:	431f      	orrs	r7, r3
 800f36a:	9b02      	ldr	r3, [sp, #8]
 800f36c:	041b      	lsls	r3, r3, #16
 800f36e:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f370:	9b01      	ldr	r3, [sp, #4]
 800f372:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f374:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f376:	69aa      	ldr	r2, [r5, #24]
 800f378:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f37a:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f37c:	4313      	orrs	r3, r2
 800f37e:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f380:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f382:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f384:	6273      	str	r3, [r6, #36]	; 0x24
 800f386:	3b77      	subs	r3, #119	; 0x77
 800f388:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f38a:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f38c:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f38e:	429a      	cmp	r2, r3
 800f390:	d15b      	bne.n	800f44a <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f392:	68b3      	ldr	r3, [r6, #8]
 800f394:	4a41      	ldr	r2, [pc, #260]	; (800f49c <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f396:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f398:	4013      	ands	r3, r2
 800f39a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f39c:	68f2      	ldr	r2, [r6, #12]
 800f39e:	4b40      	ldr	r3, [pc, #256]	; (800f4a0 <HAL_RTC_SetAlarm_IT+0x19c>)
 800f3a0:	b2d2      	uxtb	r2, r2
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800f3a6:	f7fd f91d 	bl	800c5e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f3aa:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 800f3ac:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f3ae:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	68da      	ldr	r2, [r3, #12]
 800f3b4:	0011      	movs	r1, r2
 800f3b6:	4029      	ands	r1, r5
 800f3b8:	9103      	str	r1, [sp, #12]
 800f3ba:	422a      	tst	r2, r5
 800f3bc:	d034      	beq.n	800f428 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f3be:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f3c0:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f3c2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f3c4:	2280      	movs	r2, #128	; 0x80
 800f3c6:	6899      	ldr	r1, [r3, #8]
 800f3c8:	0052      	lsls	r2, r2, #1
 800f3ca:	430a      	orrs	r2, r1
 800f3cc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800f3ce:	2280      	movs	r2, #128	; 0x80
 800f3d0:	6899      	ldr	r1, [r3, #8]
 800f3d2:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800f3d8:	2280      	movs	r2, #128	; 0x80
 800f3da:	4b32      	ldr	r3, [pc, #200]	; (800f4a4 <HAL_RTC_SetAlarm_IT+0x1a0>)
 800f3dc:	0292      	lsls	r2, r2, #10
 800f3de:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800f3e0:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800f3e2:	4311      	orrs	r1, r2
 800f3e4:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800f3e6:	6899      	ldr	r1, [r3, #8]
 800f3e8:	430a      	orrs	r2, r1
 800f3ea:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3ec:	22ff      	movs	r2, #255	; 0xff
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f3f2:	3afe      	subs	r2, #254	; 0xfe
 800f3f4:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 800f3f6:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800f3f8:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 800f3fa:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 800f3fc:	e023      	b.n	800f446 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f3fe:	68b2      	ldr	r2, [r6, #8]
 800f400:	0011      	movs	r1, r2
 800f402:	4019      	ands	r1, r3
 800f404:	421a      	tst	r2, r3
 800f406:	d100      	bne.n	800f40a <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f408:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f40a:	69eb      	ldr	r3, [r5, #28]
 800f40c:	696a      	ldr	r2, [r5, #20]
 800f40e:	0400      	lsls	r0, r0, #16
 800f410:	4313      	orrs	r3, r2
 800f412:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f414:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f416:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f418:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f41a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f41c:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f41e:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f420:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f422:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f424:	7fd8      	ldrb	r0, [r3, #31]
 800f426:	e7a6      	b.n	800f376 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f428:	f7fd f8dc 	bl	800c5e4 <HAL_GetTick>
 800f42c:	9b02      	ldr	r3, [sp, #8]
 800f42e:	1ac0      	subs	r0, r0, r3
 800f430:	42b0      	cmp	r0, r6
 800f432:	d9bd      	bls.n	800f3b0 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f434:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f436:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f43c:	1ca3      	adds	r3, r4, #2
 800f43e:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800f440:	9b03      	ldr	r3, [sp, #12]
 800f442:	3401      	adds	r4, #1
 800f444:	77e3      	strb	r3, [r4, #31]
}
 800f446:	b005      	add	sp, #20
 800f448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f44a:	68b3      	ldr	r3, [r6, #8]
 800f44c:	4a16      	ldr	r2, [pc, #88]	; (800f4a8 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f44e:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f450:	4013      	ands	r3, r2
 800f452:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f454:	68f2      	ldr	r2, [r6, #12]
 800f456:	4b15      	ldr	r3, [pc, #84]	; (800f4ac <HAL_RTC_SetAlarm_IT+0x1a8>)
 800f458:	b2d2      	uxtb	r2, r2
 800f45a:	4313      	orrs	r3, r2
 800f45c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800f45e:	f7fd f8c1 	bl	800c5e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f462:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 800f464:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f466:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	68da      	ldr	r2, [r3, #12]
 800f46c:	0011      	movs	r1, r2
 800f46e:	4029      	ands	r1, r5
 800f470:	9103      	str	r1, [sp, #12]
 800f472:	422a      	tst	r2, r5
 800f474:	d00b      	beq.n	800f48e <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f476:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800f478:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f47a:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800f47c:	2280      	movs	r2, #128	; 0x80
 800f47e:	6899      	ldr	r1, [r3, #8]
 800f480:	0092      	lsls	r2, r2, #2
 800f482:	430a      	orrs	r2, r1
 800f484:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800f486:	2280      	movs	r2, #128	; 0x80
 800f488:	6899      	ldr	r1, [r3, #8]
 800f48a:	0192      	lsls	r2, r2, #6
 800f48c:	e7a2      	b.n	800f3d4 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f48e:	f7fd f8a9 	bl	800c5e4 <HAL_GetTick>
 800f492:	9b02      	ldr	r3, [sp, #8]
 800f494:	1ac0      	subs	r0, r0, r3
 800f496:	42b0      	cmp	r0, r6
 800f498:	d9e6      	bls.n	800f468 <HAL_RTC_SetAlarm_IT+0x164>
 800f49a:	e7cb      	b.n	800f434 <HAL_RTC_SetAlarm_IT+0x130>
 800f49c:	fffffeff 	.word	0xfffffeff
 800f4a0:	fffffe7f 	.word	0xfffffe7f
 800f4a4:	40010400 	.word	0x40010400
 800f4a8:	fffffdff 	.word	0xfffffdff
 800f4ac:	fffffd7f 	.word	0xfffffd7f

0800f4b0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f4b0:	0902      	lsrs	r2, r0, #4
{
 800f4b2:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f4b4:	200a      	movs	r0, #10
 800f4b6:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f4b8:	220f      	movs	r2, #15
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	18c0      	adds	r0, r0, r3
 800f4be:	b2c0      	uxtb	r0, r0
}
 800f4c0:	4770      	bx	lr
	...

0800f4c4 <HAL_RTC_GetTime>:
{
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f4c8:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f4ca:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f4cc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800f4ce:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f4d0:	690b      	ldr	r3, [r1, #16]
 800f4d2:	045b      	lsls	r3, r3, #17
 800f4d4:	0c5b      	lsrs	r3, r3, #17
 800f4d6:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f4d8:	680b      	ldr	r3, [r1, #0]
 800f4da:	490e      	ldr	r1, [pc, #56]	; (800f514 <HAL_RTC_GetTime+0x50>)
 800f4dc:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f4de:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f4e0:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f4e2:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f4e4:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f4e6:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f4e8:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f4ea:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f4ec:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f4ee:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f4f0:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f4f2:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 800f4f4:	2a00      	cmp	r2, #0
 800f4f6:	d10a      	bne.n	800f50e <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f4f8:	f7ff ffda 	bl	800f4b0 <RTC_Bcd2ToByte>
 800f4fc:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f4fe:	0030      	movs	r0, r6
 800f500:	f7ff ffd6 	bl	800f4b0 <RTC_Bcd2ToByte>
 800f504:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f506:	0028      	movs	r0, r5
 800f508:	f7ff ffd2 	bl	800f4b0 <RTC_Bcd2ToByte>
 800f50c:	70a0      	strb	r0, [r4, #2]
}
 800f50e:	2000      	movs	r0, #0
 800f510:	bd70      	pop	{r4, r5, r6, pc}
 800f512:	46c0      	nop			; (mov r8, r8)
 800f514:	007f7f7f 	.word	0x007f7f7f

0800f518 <HAL_RTC_GetDate>:
{
 800f518:	b570      	push	{r4, r5, r6, lr}
 800f51a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f51c:	6803      	ldr	r3, [r0, #0]
 800f51e:	490e      	ldr	r1, [pc, #56]	; (800f558 <HAL_RTC_GetDate+0x40>)
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f524:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f526:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f528:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f52a:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f52c:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f52e:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f530:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f532:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f534:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f536:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800f538:	2a00      	cmp	r2, #0
 800f53a:	d10a      	bne.n	800f552 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f53c:	f7ff ffb8 	bl	800f4b0 <RTC_Bcd2ToByte>
 800f540:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f542:	0028      	movs	r0, r5
 800f544:	f7ff ffb4 	bl	800f4b0 <RTC_Bcd2ToByte>
 800f548:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f54a:	0030      	movs	r0, r6
 800f54c:	f7ff ffb0 	bl	800f4b0 <RTC_Bcd2ToByte>
 800f550:	70a0      	strb	r0, [r4, #2]
}
 800f552:	2000      	movs	r0, #0
 800f554:	bd70      	pop	{r4, r5, r6, pc}
 800f556:	46c0      	nop			; (mov r8, r8)
 800f558:	00ffff3f 	.word	0x00ffff3f

0800f55c <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f55c:	2302      	movs	r3, #2
{
 800f55e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f560:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800f562:	1c46      	adds	r6, r0, #1
{
 800f564:	9101      	str	r1, [sp, #4]
 800f566:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(hrtc);
 800f568:	7ff2      	ldrb	r2, [r6, #31]
{
 800f56a:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800f56c:	0018      	movs	r0, r3
 800f56e:	2a01      	cmp	r2, #1
 800f570:	d05a      	beq.n	800f628 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 800f572:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f574:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 800f576:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f578:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	32c9      	adds	r2, #201	; 0xc9
 800f57e:	625a      	str	r2, [r3, #36]	; 0x24
 800f580:	3a77      	subs	r2, #119	; 0x77
 800f582:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	055b      	lsls	r3, r3, #21
 800f588:	d438      	bmi.n	800f5fc <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	492f      	ldr	r1, [pc, #188]	; (800f64c <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 800f58e:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f590:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f592:	400a      	ands	r2, r1
 800f594:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800f596:	68d9      	ldr	r1, [r3, #12]
 800f598:	4a2d      	ldr	r2, [pc, #180]	; (800f650 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800f59a:	b2c9      	uxtb	r1, r1
 800f59c:	430a      	orrs	r2, r1
 800f59e:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800f5a0:	f7fd f820 	bl	800c5e4 <HAL_GetTick>
 800f5a4:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	68da      	ldr	r2, [r3, #12]
 800f5aa:	0011      	movs	r1, r2
 800f5ac:	4029      	ands	r1, r5
 800f5ae:	9103      	str	r1, [sp, #12]
 800f5b0:	422a      	tst	r2, r5
 800f5b2:	d03b      	beq.n	800f62c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f5b4:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800f5b6:	9a01      	ldr	r2, [sp, #4]
 800f5b8:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f5ba:	689a      	ldr	r2, [r3, #8]
 800f5bc:	438a      	bics	r2, r1
 800f5be:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f5c0:	689a      	ldr	r2, [r3, #8]
 800f5c2:	9902      	ldr	r1, [sp, #8]
 800f5c4:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800f5c6:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f5c8:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800f5ca:	4a22      	ldr	r2, [pc, #136]	; (800f654 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 800f5cc:	0349      	lsls	r1, r1, #13
 800f5ce:	6810      	ldr	r0, [r2, #0]
 800f5d0:	4308      	orrs	r0, r1
 800f5d2:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800f5d4:	6890      	ldr	r0, [r2, #8]
 800f5d6:	4301      	orrs	r1, r0
 800f5d8:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800f5da:	2280      	movs	r2, #128	; 0x80
 800f5dc:	6899      	ldr	r1, [r3, #8]
 800f5de:	01d2      	lsls	r2, r2, #7
 800f5e0:	430a      	orrs	r2, r1
 800f5e2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800f5e4:	2280      	movs	r2, #128	; 0x80
 800f5e6:	6899      	ldr	r1, [r3, #8]
 800f5e8:	00d2      	lsls	r2, r2, #3
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5ee:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f5f0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5f2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 800f5f8:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 800f5fa:	e015      	b.n	800f628 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    tickstart = HAL_GetTick();
 800f5fc:	f7fc fff2 	bl	800c5e4 <HAL_GetTick>
 800f600:	0005      	movs	r5, r0
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f602:	2204      	movs	r2, #4
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	4213      	tst	r3, r2
 800f60a:	d0be      	beq.n	800f58a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f60c:	f7fc ffea 	bl	800c5e4 <HAL_GetTick>
 800f610:	23fa      	movs	r3, #250	; 0xfa
 800f612:	1b40      	subs	r0, r0, r5
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	4298      	cmp	r0, r3
 800f618:	d9f3      	bls.n	800f602 <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f61a:	22ff      	movs	r2, #255	; 0xff
 800f61c:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f61e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f620:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800f622:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f624:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 800f626:	77f3      	strb	r3, [r6, #31]
}
 800f628:	b005      	add	sp, #20
 800f62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f62c:	f7fc ffda 	bl	800c5e4 <HAL_GetTick>
 800f630:	9b00      	ldr	r3, [sp, #0]
 800f632:	1ac0      	subs	r0, r0, r3
 800f634:	23fa      	movs	r3, #250	; 0xfa
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	4298      	cmp	r0, r3
 800f63a:	d9b4      	bls.n	800f5a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f63c:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f63e:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800f644:	9b03      	ldr	r3, [sp, #12]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f646:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 800f648:	e7ed      	b.n	800f626 <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
 800f64a:	46c0      	nop			; (mov r8, r8)
 800f64c:	fffffbff 	.word	0xfffffbff
 800f650:	fffffb7f 	.word	0xfffffb7f
 800f654:	40010400 	.word	0x40010400

0800f658 <HAL_RTCEx_DeactivateWakeUpTimer>:
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f658:	2302      	movs	r3, #2
{
 800f65a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800f65c:	1c45      	adds	r5, r0, #1
 800f65e:	7fea      	ldrb	r2, [r5, #31]
{
 800f660:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800f662:	0018      	movs	r0, r3
 800f664:	2a01      	cmp	r2, #1
 800f666:	d031      	beq.n	800f6cc <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
 800f668:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f66a:	18e6      	adds	r6, r4, r3
  __HAL_LOCK(hrtc);
 800f66c:	77ea      	strb	r2, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f66e:	77f3      	strb	r3, [r6, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	32c9      	adds	r2, #201	; 0xc9
 800f674:	625a      	str	r2, [r3, #36]	; 0x24
 800f676:	3a77      	subs	r2, #119	; 0x77
 800f678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f67a:	689a      	ldr	r2, [r3, #8]
 800f67c:	4914      	ldr	r1, [pc, #80]	; (800f6d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>)
  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);

  tickstart = HAL_GetTick();
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f67e:	2704      	movs	r7, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f680:	400a      	ands	r2, r1
 800f682:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800f684:	689a      	ldr	r2, [r3, #8]
 800f686:	4913      	ldr	r1, [pc, #76]	; (800f6d4 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>)
 800f688:	400a      	ands	r2, r1
 800f68a:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800f68c:	f7fc ffaa 	bl	800c5e4 <HAL_GetTick>
 800f690:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f692:	6823      	ldr	r3, [r4, #0]
 800f694:	68da      	ldr	r2, [r3, #12]
 800f696:	0011      	movs	r1, r2
 800f698:	4039      	ands	r1, r7
 800f69a:	9101      	str	r1, [sp, #4]
 800f69c:	423a      	tst	r2, r7
 800f69e:	d006      	beq.n	800f6ae <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6a0:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f6a2:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6a4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800f6aa:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
 800f6ac:	e00e      	b.n	800f6cc <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f6ae:	f7fc ff99 	bl	800c5e4 <HAL_GetTick>
 800f6b2:	9b00      	ldr	r3, [sp, #0]
 800f6b4:	1ac0      	subs	r0, r0, r3
 800f6b6:	23fa      	movs	r3, #250	; 0xfa
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4298      	cmp	r0, r3
 800f6bc:	d9e9      	bls.n	800f692 <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6be:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f6c0:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800f6c6:	9b01      	ldr	r3, [sp, #4]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f6c8:	77f0      	strb	r0, [r6, #31]
      __HAL_UNLOCK(hrtc);
 800f6ca:	77eb      	strb	r3, [r5, #31]
}
 800f6cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f6ce:	46c0      	nop			; (mov r8, r8)
 800f6d0:	fffffbff 	.word	0xfffffbff
 800f6d4:	ffffbfff 	.word	0xffffbfff

0800f6d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800f6d8:	6803      	ldr	r3, [r0, #0]
{
 800f6da:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800f6dc:	68db      	ldr	r3, [r3, #12]
{
 800f6de:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800f6e0:	055b      	lsls	r3, r3, #21
 800f6e2:	d507      	bpl.n	800f6f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800f6e4:	f002 fc46 	bl	8011f74 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800f6e8:	6821      	ldr	r1, [r4, #0]
 800f6ea:	4b06      	ldr	r3, [pc, #24]	; (800f704 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 800f6ec:	68ca      	ldr	r2, [r1, #12]
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800f6f4:	2280      	movs	r2, #128	; 0x80
 800f6f6:	4b04      	ldr	r3, [pc, #16]	; (800f708 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800f6f8:	0352      	lsls	r2, r2, #13
 800f6fa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	3402      	adds	r4, #2
 800f700:	77e3      	strb	r3, [r4, #31]
}
 800f702:	bd10      	pop	{r4, pc}
 800f704:	fffffb7f 	.word	0xfffffb7f
 800f708:	40010400 	.word	0x40010400

0800f70c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f70c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800f70e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f710:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800f712:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800f714:	600a      	str	r2, [r1, #0]
}
 800f716:	4770      	bx	lr

0800f718 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f718:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800f71a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f71c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800f71e:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800f720:	6808      	ldr	r0, [r1, #0]
}
 800f722:	4770      	bx	lr

0800f724 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f724:	2202      	movs	r2, #2
{
 800f726:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 800f728:	1c41      	adds	r1, r0, #1
 800f72a:	7fcc      	ldrb	r4, [r1, #31]
{
 800f72c:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800f72e:	0010      	movs	r0, r2
 800f730:	2c01      	cmp	r4, #1
 800f732:	d010      	beq.n	800f756 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f734:	1898      	adds	r0, r3, r2
 800f736:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	32c8      	adds	r2, #200	; 0xc8
 800f73c:	625a      	str	r2, [r3, #36]	; 0x24
 800f73e:	3a77      	subs	r2, #119	; 0x77
 800f740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800f742:	689c      	ldr	r4, [r3, #8]
 800f744:	3a33      	subs	r2, #51	; 0x33
 800f746:	4322      	orrs	r2, r4
 800f748:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f74a:	22ff      	movs	r2, #255	; 0xff
 800f74c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f74e:	2301      	movs	r3, #1
 800f750:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f752:	2000      	movs	r0, #0
 800f754:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800f756:	bd10      	pop	{r4, pc}

0800f758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 800f75c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800f75e:	2c00      	cmp	r4, #0
 800f760:	d054      	beq.n	800f80c <HAL_SPI_Init+0xb4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f764:	2b00      	cmp	r3, #0
 800f766:	d152      	bne.n	800f80e <HAL_SPI_Init+0xb6>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f768:	2282      	movs	r2, #130	; 0x82
 800f76a:	6861      	ldr	r1, [r4, #4]
 800f76c:	0052      	lsls	r2, r2, #1
 800f76e:	4291      	cmp	r1, r2
 800f770:	d000      	beq.n	800f774 <HAL_SPI_Init+0x1c>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f772:	61e3      	str	r3, [r4, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f774:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f776:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f778:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800f77a:	3551      	adds	r5, #81	; 0x51
 800f77c:	782b      	ldrb	r3, [r5, #0]
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	2b00      	cmp	r3, #0
 800f782:	d105      	bne.n	800f790 <HAL_SPI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f784:	0023      	movs	r3, r4
 800f786:	3350      	adds	r3, #80	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f788:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800f78a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800f78c:	f004 fcb0 	bl	80140f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f790:	2002      	movs	r0, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f792:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800f794:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800f796:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f798:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800f79a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f79c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800f79e:	4393      	bics	r3, r2
 800f7a0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f7a2:	2382      	movs	r3, #130	; 0x82
 800f7a4:	005b      	lsls	r3, r3, #1
 800f7a6:	4033      	ands	r3, r6
 800f7a8:	2684      	movs	r6, #132	; 0x84
 800f7aa:	0236      	lsls	r6, r6, #8
 800f7ac:	403e      	ands	r6, r7
 800f7ae:	4333      	orrs	r3, r6
 800f7b0:	2680      	movs	r6, #128	; 0x80
 800f7b2:	68e7      	ldr	r7, [r4, #12]
 800f7b4:	0136      	lsls	r6, r6, #4
 800f7b6:	403e      	ands	r6, r7
 800f7b8:	4333      	orrs	r3, r6
 800f7ba:	6926      	ldr	r6, [r4, #16]
 800f7bc:	69a2      	ldr	r2, [r4, #24]
 800f7be:	4030      	ands	r0, r6
 800f7c0:	2601      	movs	r6, #1
 800f7c2:	4303      	orrs	r3, r0
 800f7c4:	6960      	ldr	r0, [r4, #20]
 800f7c6:	69e7      	ldr	r7, [r4, #28]
 800f7c8:	4030      	ands	r0, r6
 800f7ca:	4303      	orrs	r3, r0
 800f7cc:	2080      	movs	r0, #128	; 0x80
 800f7ce:	0080      	lsls	r0, r0, #2
 800f7d0:	4010      	ands	r0, r2
 800f7d2:	4303      	orrs	r3, r0
 800f7d4:	2038      	movs	r0, #56	; 0x38
 800f7d6:	4038      	ands	r0, r7
 800f7d8:	4303      	orrs	r3, r0
 800f7da:	2080      	movs	r0, #128	; 0x80
 800f7dc:	6a27      	ldr	r7, [r4, #32]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f7de:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f7e0:	4038      	ands	r0, r7
 800f7e2:	4303      	orrs	r3, r0
 800f7e4:	2080      	movs	r0, #128	; 0x80
 800f7e6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f7e8:	0180      	lsls	r0, r0, #6
 800f7ea:	4038      	ands	r0, r7
 800f7ec:	4303      	orrs	r3, r0
 800f7ee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f7f0:	2304      	movs	r3, #4
 800f7f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f7f4:	401a      	ands	r2, r3
 800f7f6:	330c      	adds	r3, #12
 800f7f8:	4003      	ands	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7fa:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f7fc:	431a      	orrs	r2, r3
 800f7fe:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f800:	69cb      	ldr	r3, [r1, #28]
 800f802:	4a05      	ldr	r2, [pc, #20]	; (800f818 <HAL_SPI_Init+0xc0>)
 800f804:	4013      	ands	r3, r2
 800f806:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f808:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f80a:	702e      	strb	r6, [r5, #0]

  return HAL_OK;
}
 800f80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f80e:	2300      	movs	r3, #0
 800f810:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f812:	6163      	str	r3, [r4, #20]
 800f814:	e7ae      	b.n	800f774 <HAL_SPI_Init+0x1c>
 800f816:	46c0      	nop			; (mov r8, r8)
 800f818:	fffff7ff 	.word	0xfffff7ff

0800f81c <HAL_SPI_ErrorCallback>:
 800f81c:	4770      	bx	lr
	...

0800f820 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 800f820:	6803      	ldr	r3, [r0, #0]
{
 800f822:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f824:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800f826:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800f828:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f82a:	2501      	movs	r5, #1
 800f82c:	0991      	lsrs	r1, r2, #6
 800f82e:	000f      	movs	r7, r1
{
 800f830:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f832:	402f      	ands	r7, r5
 800f834:	4229      	tst	r1, r5
 800f836:	d109      	bne.n	800f84c <HAL_SPI_IRQHandler+0x2c>
 800f838:	422a      	tst	r2, r5
 800f83a:	d007      	beq.n	800f84c <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f83c:	0986      	lsrs	r6, r0, #6
 800f83e:	422e      	tst	r6, r5
 800f840:	d004      	beq.n	800f84c <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->RxISR(hspi);
 800f842:	6c23      	ldr	r3, [r4, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 800f844:	0020      	movs	r0, r4
 800f846:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 800f848:	b005      	add	sp, #20
 800f84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f84c:	2501      	movs	r5, #1
 800f84e:	0796      	lsls	r6, r2, #30
 800f850:	d504      	bpl.n	800f85c <HAL_SPI_IRQHandler+0x3c>
 800f852:	09c6      	lsrs	r6, r0, #7
 800f854:	422e      	tst	r6, r5
 800f856:	d001      	beq.n	800f85c <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 800f858:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f85a:	e7f3      	b.n	800f844 <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f85c:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f85e:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f860:	4331      	orrs	r1, r6
 800f862:	0a12      	lsrs	r2, r2, #8
 800f864:	402a      	ands	r2, r5
 800f866:	4029      	ands	r1, r5
 800f868:	4311      	orrs	r1, r2
 800f86a:	d0ed      	beq.n	800f848 <HAL_SPI_IRQHandler+0x28>
 800f86c:	0941      	lsrs	r1, r0, #5
 800f86e:	4229      	tst	r1, r5
 800f870:	d0ea      	beq.n	800f848 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f872:	2f00      	cmp	r7, #0
 800f874:	d00f      	beq.n	800f896 <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f876:	0021      	movs	r1, r4
 800f878:	3151      	adds	r1, #81	; 0x51
 800f87a:	7809      	ldrb	r1, [r1, #0]
 800f87c:	2903      	cmp	r1, #3
 800f87e:	d050      	beq.n	800f922 <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f880:	2104      	movs	r1, #4
 800f882:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800f884:	4329      	orrs	r1, r5
 800f886:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f888:	2100      	movs	r1, #0
 800f88a:	9100      	str	r1, [sp, #0]
 800f88c:	68d9      	ldr	r1, [r3, #12]
 800f88e:	9100      	str	r1, [sp, #0]
 800f890:	6899      	ldr	r1, [r3, #8]
 800f892:	9100      	str	r1, [sp, #0]
 800f894:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f896:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f898:	420e      	tst	r6, r1
 800f89a:	d00b      	beq.n	800f8b4 <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f89c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800f89e:	4329      	orrs	r1, r5
 800f8a0:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	2540      	movs	r5, #64	; 0x40
 800f8a6:	9102      	str	r1, [sp, #8]
 800f8a8:	6899      	ldr	r1, [r3, #8]
 800f8aa:	9102      	str	r1, [sp, #8]
 800f8ac:	6819      	ldr	r1, [r3, #0]
 800f8ae:	43a9      	bics	r1, r5
 800f8b0:	6019      	str	r1, [r3, #0]
 800f8b2:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f8b4:	2a00      	cmp	r2, #0
 800f8b6:	d008      	beq.n	800f8ca <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f8b8:	2208      	movs	r2, #8
 800f8ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f8bc:	430a      	orrs	r2, r1
 800f8be:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	9203      	str	r2, [sp, #12]
 800f8c4:	689a      	ldr	r2, [r3, #8]
 800f8c6:	9203      	str	r2, [sp, #12]
 800f8c8:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f8cc:	2a00      	cmp	r2, #0
 800f8ce:	d0bb      	beq.n	800f848 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f8d0:	21e0      	movs	r1, #224	; 0xe0
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	438a      	bics	r2, r1
 800f8d6:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800f8d8:	0022      	movs	r2, r4
 800f8da:	39df      	subs	r1, #223	; 0xdf
 800f8dc:	3251      	adds	r2, #81	; 0x51
 800f8de:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f8e0:	3102      	adds	r1, #2
 800f8e2:	4208      	tst	r0, r1
 800f8e4:	d025      	beq.n	800f932 <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f8e6:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800f8e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f8ea:	438a      	bics	r2, r1
 800f8ec:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d009      	beq.n	800f906 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f8f2:	4b12      	ldr	r3, [pc, #72]	; (800f93c <HAL_SPI_IRQHandler+0x11c>)
 800f8f4:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f8f6:	f7fd faa5 	bl	800ce44 <HAL_DMA_Abort_IT>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d003      	beq.n	800f906 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f8fe:	2340      	movs	r3, #64	; 0x40
 800f900:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f902:	4313      	orrs	r3, r2
 800f904:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f906:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f908:	2800      	cmp	r0, #0
 800f90a:	d09d      	beq.n	800f848 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f90c:	4b0b      	ldr	r3, [pc, #44]	; (800f93c <HAL_SPI_IRQHandler+0x11c>)
 800f90e:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f910:	f7fd fa98 	bl	800ce44 <HAL_DMA_Abort_IT>
 800f914:	2800      	cmp	r0, #0
 800f916:	d097      	beq.n	800f848 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f918:	2340      	movs	r3, #64	; 0x40
 800f91a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f91c:	4313      	orrs	r3, r2
 800f91e:	6563      	str	r3, [r4, #84]	; 0x54
 800f920:	e792      	b.n	800f848 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f922:	2200      	movs	r2, #0
 800f924:	9201      	str	r2, [sp, #4]
 800f926:	68da      	ldr	r2, [r3, #12]
 800f928:	9201      	str	r2, [sp, #4]
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	9301      	str	r3, [sp, #4]
 800f92e:	9b01      	ldr	r3, [sp, #4]
        return;
 800f930:	e78a      	b.n	800f848 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 800f932:	0020      	movs	r0, r4
 800f934:	f7ff ff72 	bl	800f81c <HAL_SPI_ErrorCallback>
 800f938:	e786      	b.n	800f848 <HAL_SPI_IRQHandler+0x28>
 800f93a:	46c0      	nop			; (mov r8, r8)
 800f93c:	0800f941 	.word	0x0800f941

0800f940 <SPI_DMAAbortOnError>:
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 800f940:	2300      	movs	r3, #0
{
 800f942:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f944:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800f946:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f948:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f94a:	f7ff ff67 	bl	800f81c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f94e:	bd10      	pop	{r4, pc}

0800f950 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800f950:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800f952:	2608      	movs	r6, #8
 800f954:	2100      	movs	r1, #0
 800f956:	0032      	movs	r2, r6
 800f958:	4668      	mov	r0, sp
 800f95a:	f006 fb02 	bl	8015f62 <memset>
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800f95e:	2307      	movs	r3, #7
  hadc.Init.OversamplingMode = DISABLE;
 800f960:	4c17      	ldr	r4, [pc, #92]	; (800f9c0 <MX_ADC_Init+0x70>)
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f962:	2580      	movs	r5, #128	; 0x80
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800f964:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f966:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.DMAContinuousRequests = ENABLE;
 800f968:	0021      	movs	r1, r4
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f96a:	33ff      	adds	r3, #255	; 0xff
 800f96c:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800f96e:	3bc1      	subs	r3, #193	; 0xc1
 800f970:	3bff      	subs	r3, #255	; 0xff
 800f972:	312c      	adds	r1, #44	; 0x2c
 800f974:	700b      	strb	r3, [r1, #0]
  hadc.Instance = ADC1;
 800f976:	4913      	ldr	r1, [pc, #76]	; (800f9c4 <MX_ADC_Init+0x74>)
  hadc.Init.OversamplingMode = DISABLE;
 800f978:	2200      	movs	r2, #0
  hadc.Instance = ADC1;
 800f97a:	6021      	str	r1, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f97c:	2180      	movs	r1, #128	; 0x80
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f97e:	016d      	lsls	r5, r5, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f980:	0609      	lsls	r1, r1, #24
  hadc.Init.LowPowerAutoWait = ENABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800f982:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = ENABLE;
 800f984:	8423      	strh	r3, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 800f986:	63e2      	str	r2, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f988:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f98a:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800f98c:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f98e:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800f990:	60a2      	str	r2, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f992:	60e2      	str	r2, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800f994:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800f996:	6166      	str	r6, [r4, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 800f998:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 800f99a:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800f99c:	f7fc fef2 	bl	800c784 <HAL_ADC_Init>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d001      	beq.n	800f9a8 <MX_ADC_Init+0x58>
  {
    Error_Handler();
 800f9a4:	f002 fb10 	bl	8011fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800f9a8:	4b07      	ldr	r3, [pc, #28]	; (800f9c8 <MX_ADC_Init+0x78>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800f9aa:	4669      	mov	r1, sp
 800f9ac:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800f9ae:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800f9b0:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800f9b2:	f7fd f893 	bl	800cadc <HAL_ADC_ConfigChannel>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d001      	beq.n	800f9be <MX_ADC_Init+0x6e>
  {
    Error_Handler();
 800f9ba:	f002 fb05 	bl	8011fc8 <Error_Handler>
  }

}
 800f9be:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800f9c0:	20001788 	.word	0x20001788
 800f9c4:	40012400 	.word	0x40012400
 800f9c8:	44020000 	.word	0x44020000

0800f9cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 800f9cc:	4b13      	ldr	r3, [pc, #76]	; (800fa1c <HAL_ADC_MspInit+0x50>)
 800f9ce:	6802      	ldr	r2, [r0, #0]
{
 800f9d0:	b570      	push	{r4, r5, r6, lr}
 800f9d2:	0005      	movs	r5, r0
  if(adcHandle->Instance==ADC1)
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d11f      	bne.n	800fa18 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f9d8:	2380      	movs	r3, #128	; 0x80
 800f9da:	4a11      	ldr	r2, [pc, #68]	; (800fa20 <HAL_ADC_MspInit+0x54>)
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	6b51      	ldr	r1, [r2, #52]	; 0x34

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800f9e0:	4c10      	ldr	r4, [pc, #64]	; (800fa24 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f9e2:	430b      	orrs	r3, r1
 800f9e4:	6353      	str	r3, [r2, #52]	; 0x34
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800f9e6:	2280      	movs	r2, #128	; 0x80
 800f9e8:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f9ea:	1892      	adds	r2, r2, r2
 800f9ec:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f9ee:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 800f9f0:	4b0d      	ldr	r3, [pc, #52]	; (800fa28 <HAL_ADC_MspInit+0x5c>)
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f9f2:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 800f9f4:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f9f6:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800f9f8:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800f9fa:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800f9fc:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800f9fe:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fa00:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800fa02:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800fa04:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800fa06:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800fa08:	f7fd f978 	bl	800ccfc <HAL_DMA_Init>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d001      	beq.n	800fa14 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800fa10:	f002 fada 	bl	8011fc8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800fa14:	64ec      	str	r4, [r5, #76]	; 0x4c
 800fa16:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	46c0      	nop			; (mov r8, r8)
 800fa1c:	40012400 	.word	0x40012400
 800fa20:	40021000 	.word	0x40021000
 800fa24:	200017e4 	.word	0x200017e4
 800fa28:	40020008 	.word	0x40020008

0800fa2c <hal_delay_ms>:

void atca_delay_10us(uint32_t delay) {
  HAL_Delay(delay / 100);
}

void atca_delay_ms(uint32_t delay) {
 800fa2c:	b510      	push	{r4, lr}
  HAL_Delay(delay);
 800fa2e:	f7fc fddf 	bl	800c5f0 <HAL_Delay>
}
 800fa32:	bd10      	pop	{r4, pc}

0800fa34 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 800fa34:	b570      	push	{r4, r5, r6, lr}
    if (mbed_i2c_hal_first_init) {
 800fa36:	4e15      	ldr	r6, [pc, #84]	; (800fa8c <hal_i2c_init+0x58>)
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 800fa38:	0005      	movs	r5, r0
    if (mbed_i2c_hal_first_init) {
 800fa3a:	7833      	ldrb	r3, [r6, #0]
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 800fa3c:	000c      	movs	r4, r1
    if (mbed_i2c_hal_first_init) {
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d006      	beq.n	800fa50 <hal_i2c_init+0x1c>
       // mbed_i2c = new I2C(MBED_CONF_CRYPTOAUTHLIB_I2C_SDA, MBED_CONF_CRYPTOAUTHLIB_I2C_SCL);
    	HAL_I2C_MspInit(&hi2c1);
 800fa42:	4813      	ldr	r0, [pc, #76]	; (800fa90 <hal_i2c_init+0x5c>)
 800fa44:	f001 f930 	bl	8010ca8 <HAL_I2C_MspInit>
        for (size_t ix = 0; ix < ATAC_HAL_MBED_MAX_I2C; ix++) {
            mbed_i2c_hal_data[ix].active = false;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4a12      	ldr	r2, [pc, #72]	; (800fa94 <hal_i2c_init+0x60>)
        }
        mbed_i2c_hal_first_init = false;
 800fa4c:	7033      	strb	r3, [r6, #0]
            mbed_i2c_hal_data[ix].active = false;
 800fa4e:	7013      	strb	r3, [r2, #0]
    }

    if (cfg->iface_type != ATCA_I2C_IFACE) {
 800fa50:	7820      	ldrb	r0, [r4, #0]
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d118      	bne.n	800fa88 <hal_i2c_init+0x54>
    }

    // OK... Let's find an unused item...
    mbed_i2c_hal_data_t *hal_data = NULL;
    for (size_t ix = 0; ix < ATAC_HAL_MBED_MAX_I2C; ix++) {
        if (!mbed_i2c_hal_data[ix].active) {
 800fa56:	4b0f      	ldr	r3, [pc, #60]	; (800fa94 <hal_i2c_init+0x60>)
 800fa58:	781a      	ldrb	r2, [r3, #0]
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	d004      	beq.n	800fa68 <hal_i2c_init+0x34>
            break;
        }
    }

    if (!hal_data) {
    	DBG_PRINTF("Could not find unallocated mbed_i2c_hal_data_t structure");
 800fa5e:	490e      	ldr	r1, [pc, #56]	; (800fa98 <hal_i2c_init+0x64>)
 800fa60:	f7fc fa3d 	bl	800bede <SEGGER_RTT_printf>
        return ATCA_ALLOC_FAILURE;
 800fa64:	20fb      	movs	r0, #251	; 0xfb
    hal_data->i2c = I2C1;

    ((ATCAHAL_t*)hal)->hal_data = hal_data;

    return ATCA_SUCCESS;
}
 800fa66:	bd70      	pop	{r4, r5, r6, pc}
    hal_data->active = true;
 800fa68:	2201      	movs	r2, #1
 800fa6a:	701a      	strb	r2, [r3, #0]
	hal_data->slave_address = cfg->atcai2c.slave_address;
 800fa6c:	7922      	ldrb	r2, [r4, #4]
 800fa6e:	705a      	strb	r2, [r3, #1]
    hal_data->bus = cfg->atcai2c.bus;
 800fa70:	7962      	ldrb	r2, [r4, #5]
 800fa72:	709a      	strb	r2, [r3, #2]
    hal_data->baud = cfg->atcai2c.baud;
 800fa74:	68a2      	ldr	r2, [r4, #8]
 800fa76:	605a      	str	r2, [r3, #4]
    hal_data->wake_delay = cfg->wake_delay;
 800fa78:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800fa7a:	811a      	strh	r2, [r3, #8]
    hal_data->rx_retries = cfg->rx_retries;
 800fa7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ((ATCAHAL_t*)hal)->hal_data = hal_data;
 800fa7e:	622b      	str	r3, [r5, #32]
    hal_data->rx_retries = cfg->rx_retries;
 800fa80:	60da      	str	r2, [r3, #12]
    hal_data->i2c = I2C1;
 800fa82:	4a06      	ldr	r2, [pc, #24]	; (800fa9c <hal_i2c_init+0x68>)
 800fa84:	611a      	str	r2, [r3, #16]
    return ATCA_SUCCESS;
 800fa86:	e7ee      	b.n	800fa66 <hal_i2c_init+0x32>
        return ATCA_BAD_PARAM;
 800fa88:	20e2      	movs	r0, #226	; 0xe2
 800fa8a:	e7ec      	b.n	800fa66 <hal_i2c_init+0x32>
 800fa8c:	200000dc 	.word	0x200000dc
 800fa90:	20001898 	.word	0x20001898
 800fa94:	2000182c 	.word	0x2000182c
 800fa98:	08019671 	.word	0x08019671
 800fa9c:	40005400 	.word	0x40005400

0800faa0 <hal_i2c_post_init>:

ATCA_STATUS hal_i2c_post_init(ATCAIface iface) {
  return ATCA_SUCCESS;
}
 800faa0:	2000      	movs	r0, #0
 800faa2:	4770      	bx	lr

0800faa4 <hal_i2c_send>:
 * \param[in] iface     instance
 * \param[in] txdata    pointer to space to bytes to send
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t word_address, uint8_t *txdata, int txlength) {
 800faa4:	b507      	push	{r0, r1, r2, lr}
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x3;    // insert the Word Address Value, Command token
 800faa6:	2103      	movs	r1, #3
    txlength++;         // account for word address value byte.
 800faa8:	3301      	adds	r3, #1
    txdata[0] = 0x3;    // insert the Word Address Value, Command token
 800faaa:	7011      	strb	r1, [r2, #0]

//    int r = hal_data->i2c->write(hal_data->slave_address, (char*)txdata, txlength);
      int r;
    r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, txdata, txlength, 100);
 800faac:	3161      	adds	r1, #97	; 0x61
 800faae:	9100      	str	r1, [sp, #0]
 800fab0:	4804      	ldr	r0, [pc, #16]	; (800fac4 <hal_i2c_send+0x20>)
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	315c      	adds	r1, #92	; 0x5c
 800fab6:	f7fd fe05 	bl	800d6c4 <HAL_I2C_Master_Transmit>
//    DBG_PRINTF("hal_i2c_send returned %x", r);
    if (r != 0) {
 800faba:	2800      	cmp	r0, #0
 800fabc:	d000      	beq.n	800fac0 <hal_i2c_send+0x1c>
        return ATCA_TX_FAIL;
 800fabe:	20f7      	movs	r0, #247	; 0xf7
    }
    return ATCA_SUCCESS;
}
 800fac0:	bd0e      	pop	{r1, r2, r3, pc}
 800fac2:	46c0      	nop			; (mov r8, r8)
 800fac4:	20001898 	.word	0x20001898

0800fac8 <hal_i2c_receive>:

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 800fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);
 800faca:	6a46      	ldr	r6, [r0, #36]	; 0x24
    // read procedure is:
    // 1. read 1 byte, this will be the length of the package
    // 2. read the rest of the package

    uint8_t lengthPackage[1] = { 0 };
    int r = -1;
 800facc:	2001      	movs	r0, #1
    int retries = hal_data->rx_retries;
    while (--retries > 0 && r != 0) {
        //r = hal_data->i2c->read(hal_data->slave_address, lengthPackage, 1);
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, lengthPackage, 1, 100);
 800face:	2764      	movs	r7, #100	; 0x64
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 800fad0:	b087      	sub	sp, #28
 800fad2:	9303      	str	r3, [sp, #12]
    uint8_t lengthPackage[1] = { 0 };
 800fad4:	4b23      	ldr	r3, [pc, #140]	; (800fb64 <hal_i2c_receive+0x9c>)
 800fad6:	ad05      	add	r5, sp, #20
 800fad8:	781b      	ldrb	r3, [r3, #0]
    int retries = hal_data->rx_retries;
 800fada:	68f4      	ldr	r4, [r6, #12]
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 800fadc:	9202      	str	r2, [sp, #8]
    uint8_t lengthPackage[1] = { 0 };
 800fade:	702b      	strb	r3, [r5, #0]
    int r = -1;
 800fae0:	4240      	negs	r0, r0
    while (--retries > 0 && r != 0) {
 800fae2:	3c01      	subs	r4, #1
 800fae4:	2c00      	cmp	r4, #0
 800fae6:	dd17      	ble.n	800fb18 <hal_i2c_receive+0x50>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d10d      	bne.n	800fb08 <hal_i2c_receive+0x40>

    if (r != 0) {
        return ATCA_RX_TIMEOUT;
    }

    uint8_t bytesToRead = lengthPackage[0] - 1;
 800faec:	782f      	ldrb	r7, [r5, #0]

    if (bytesToRead > *rxlength) {
 800faee:	9b03      	ldr	r3, [sp, #12]
    uint8_t bytesToRead = lengthPackage[0] - 1;
 800faf0:	1e7c      	subs	r4, r7, #1
    if (bytesToRead > *rxlength) {
 800faf2:	881b      	ldrh	r3, [r3, #0]
    uint8_t bytesToRead = lengthPackage[0] - 1;
 800faf4:	b2e2      	uxtb	r2, r4
    if (bytesToRead > *rxlength) {
 800faf6:	b2e4      	uxtb	r4, r4
 800faf8:	429c      	cmp	r4, r3
 800fafa:	d912      	bls.n	800fb22 <hal_i2c_receive+0x5a>
    	DBG_PRINTF("hal_i2c_receive buffer too small, requested %u, but have %u", bytesToRead, *rxlength);
 800fafc:	2000      	movs	r0, #0
 800fafe:	491a      	ldr	r1, [pc, #104]	; (800fb68 <hal_i2c_receive+0xa0>)
 800fb00:	f7fc f9ed 	bl	800bede <SEGGER_RTT_printf>
        return ATCA_SMALL_BUFFER;
 800fb04:	20ed      	movs	r0, #237	; 0xed
 800fb06:	e00a      	b.n	800fb1e <hal_i2c_receive+0x56>
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, lengthPackage, 1, 100);
 800fb08:	2301      	movs	r3, #1
 800fb0a:	002a      	movs	r2, r5
 800fb0c:	21c0      	movs	r1, #192	; 0xc0
 800fb0e:	9700      	str	r7, [sp, #0]
 800fb10:	4816      	ldr	r0, [pc, #88]	; (800fb6c <hal_i2c_receive+0xa4>)
 800fb12:	f7fd fe69 	bl	800d7e8 <HAL_I2C_Master_Receive>
 800fb16:	e7e4      	b.n	800fae2 <hal_i2c_receive+0x1a>
    if (r != 0) {
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d0e7      	beq.n	800faec <hal_i2c_receive+0x24>
        return ATCA_RX_TIMEOUT;
 800fb1c:	20eb      	movs	r0, #235	; 0xeb
    }

    *rxlength = lengthPackage[0];

    return ATCA_SUCCESS;
}
 800fb1e:	b007      	add	sp, #28
 800fb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(rxdata, 0, *rxlength);
 800fb22:	001a      	movs	r2, r3
 800fb24:	2100      	movs	r1, #0
 800fb26:	9802      	ldr	r0, [sp, #8]
 800fb28:	f006 fa1b 	bl	8015f62 <memset>
    rxdata[0] = lengthPackage[0];
 800fb2c:	9b02      	ldr	r3, [sp, #8]
    r = -1;
 800fb2e:	2001      	movs	r0, #1
    rxdata[0] = lengthPackage[0];
 800fb30:	701f      	strb	r7, [r3, #0]
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, rxdata+1, bytesToRead, 100);
 800fb32:	2764      	movs	r7, #100	; 0x64
    retries = hal_data->rx_retries;
 800fb34:	68f6      	ldr	r6, [r6, #12]
    r = -1;
 800fb36:	4240      	negs	r0, r0
    while (--retries > 0 && r != 0) {
 800fb38:	3e01      	subs	r6, #1
 800fb3a:	2e00      	cmp	r6, #0
 800fb3c:	dd0f      	ble.n	800fb5e <hal_i2c_receive+0x96>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d104      	bne.n	800fb4c <hal_i2c_receive+0x84>
    *rxlength = lengthPackage[0];
 800fb42:	782b      	ldrb	r3, [r5, #0]
 800fb44:	9a03      	ldr	r2, [sp, #12]
    return ATCA_SUCCESS;
 800fb46:	2000      	movs	r0, #0
    *rxlength = lengthPackage[0];
 800fb48:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
 800fb4a:	e7e8      	b.n	800fb1e <hal_i2c_receive+0x56>
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, rxdata+1, bytesToRead, 100);
 800fb4c:	9b02      	ldr	r3, [sp, #8]
 800fb4e:	21c0      	movs	r1, #192	; 0xc0
 800fb50:	1c5a      	adds	r2, r3, #1
 800fb52:	9700      	str	r7, [sp, #0]
 800fb54:	0023      	movs	r3, r4
 800fb56:	4805      	ldr	r0, [pc, #20]	; (800fb6c <hal_i2c_receive+0xa4>)
 800fb58:	f7fd fe46 	bl	800d7e8 <HAL_I2C_Master_Receive>
 800fb5c:	e7ec      	b.n	800fb38 <hal_i2c_receive+0x70>
    if (r != 0) {
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d0ef      	beq.n	800fb42 <hal_i2c_receive+0x7a>
 800fb62:	e7db      	b.n	800fb1c <hal_i2c_receive+0x54>
 800fb64:	080196e9 	.word	0x080196e9
 800fb68:	080196aa 	.word	0x080196aa
 800fb6c:	20001898 	.word	0x20001898

0800fb70 <hal_i2c_wake>:


ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
 800fb70:	b507      	push	{r0, r1, r2, lr}
   HAL_I2C_Master_Transmit(&hi2c1, 0x00, 0x00, 1, 100);
 800fb72:	2364      	movs	r3, #100	; 0x64
 800fb74:	2200      	movs	r2, #0
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	0011      	movs	r1, r2
 800fb7a:	4803      	ldr	r0, [pc, #12]	; (800fb88 <hal_i2c_wake+0x18>)
 800fb7c:	3b63      	subs	r3, #99	; 0x63
 800fb7e:	f7fd fda1 	bl	800d6c4 <HAL_I2C_Master_Transmit>
   return ATCA_SUCCESS;
}
 800fb82:	2000      	movs	r0, #0
 800fb84:	bd0e      	pop	{r1, r2, r3, pc}
 800fb86:	46c0      	nop			; (mov r8, r8)
 800fb88:	20001898 	.word	0x20001898

0800fb8c <hal_i2c_idle>:

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
 800fb8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);

	 uint8_t buffer[1] = { 0x2 }; // idle word address value
 800fb8e:	4b07      	ldr	r3, [pc, #28]	; (800fbac <hal_i2c_idle+0x20>)
 800fb90:	aa03      	add	r2, sp, #12
 800fb92:	781b      	ldrb	r3, [r3, #0]
	 HAL_StatusTypeDef r;
     r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800fb94:	21c0      	movs	r1, #192	; 0xc0
	 uint8_t buffer[1] = { 0x2 }; // idle word address value
 800fb96:	7013      	strb	r3, [r2, #0]
     r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800fb98:	2364      	movs	r3, #100	; 0x64
 800fb9a:	4805      	ldr	r0, [pc, #20]	; (800fbb0 <hal_i2c_idle+0x24>)
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	3b63      	subs	r3, #99	; 0x63
 800fba0:	f7fd fd90 	bl	800d6c4 <HAL_I2C_Master_Transmit>

    return ATCA_SUCCESS;
}
 800fba4:	2000      	movs	r0, #0
 800fba6:	b005      	add	sp, #20
 800fba8:	bd00      	pop	{pc}
 800fbaa:	46c0      	nop			; (mov r8, r8)
 800fbac:	080196e6 	.word	0x080196e6
 800fbb0:	20001898 	.word	0x20001898

0800fbb4 <hal_i2c_sleep>:

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
 800fbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);

	uint8_t buffer[1] = { 0x1 };  // sleep word address value
 800fbb6:	4b07      	ldr	r3, [pc, #28]	; (800fbd4 <hal_i2c_sleep+0x20>)
 800fbb8:	aa03      	add	r2, sp, #12
 800fbba:	781b      	ldrb	r3, [r3, #0]
	HAL_StatusTypeDef r;
	r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800fbbc:	21c0      	movs	r1, #192	; 0xc0
	uint8_t buffer[1] = { 0x1 };  // sleep word address value
 800fbbe:	7013      	strb	r3, [r2, #0]
	r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800fbc0:	2364      	movs	r3, #100	; 0x64
 800fbc2:	4805      	ldr	r0, [pc, #20]	; (800fbd8 <hal_i2c_sleep+0x24>)
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	3b63      	subs	r3, #99	; 0x63
 800fbc8:	f7fd fd7c 	bl	800d6c4 <HAL_I2C_Master_Transmit>

    return ATCA_SUCCESS;
}
 800fbcc:	2000      	movs	r0, #0
 800fbce:	b005      	add	sp, #20
 800fbd0:	bd00      	pop	{pc}
 800fbd2:	46c0      	nop			; (mov r8, r8)
 800fbd4:	080196e8 	.word	0x080196e8
 800fbd8:	20001898 	.word	0x20001898

0800fbdc <hal_i2c_release>:

ATCA_STATUS hal_i2c_release(void *hal_data) {
 800fbdc:	0003      	movs	r3, r0
	mbed_i2c_hal_data_t *data = (mbed_i2c_hal_data_t*)hal_data;

	    if (data->i2c) {
	        // is now static, don't delete
	    }
	    data->active = false;
 800fbde:	2000      	movs	r0, #0
 800fbe0:	7018      	strb	r0, [r3, #0]

    return ATCA_SUCCESS;
}
 800fbe2:	4770      	bx	lr

0800fbe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800fbe4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	4a0c      	ldr	r2, [pc, #48]	; (800fc1c <MX_DMA_Init+0x38>)
 800fbea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fbec:	4301      	orrs	r1, r0
 800fbee:	6311      	str	r1, [r2, #48]	; 0x30
 800fbf0:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fbf2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fbf4:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fbf6:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fbf8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fbfa:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fbfc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fbfe:	f7fd f811 	bl	800cc24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800fc02:	2009      	movs	r0, #9
 800fc04:	f7fd f838 	bl	800cc78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800fc08:	2200      	movs	r2, #0
 800fc0a:	200a      	movs	r0, #10
 800fc0c:	0011      	movs	r1, r2
 800fc0e:	f7fd f809 	bl	800cc24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800fc12:	200a      	movs	r0, #10
 800fc14:	f7fd f830 	bl	800cc78 <HAL_NVIC_EnableIRQ>

}
 800fc18:	bd07      	pop	{r0, r1, r2, pc}
 800fc1a:	46c0      	nop			; (mov r8, r8)
 800fc1c:	40021000 	.word	0x40021000

0800fc20 <DebugArr>:
  .useSensor.sfh7776 = false,

#endif
};

static void DebugArr(const void *buf, size_t len) {
 800fc20:	b570      	push	{r4, r5, r6, lr}
 800fc22:	0004      	movs	r4, r0
 800fc24:	1845      	adds	r5, r0, r1
  for(size_t i = 0; i < len; i++) {
    DEBUG_PRINTF("%02x ", ((const uint8_t *)buf)[i]);
 800fc26:	7822      	ldrb	r2, [r4, #0]
 800fc28:	2000      	movs	r0, #0
 800fc2a:	4903      	ldr	r1, [pc, #12]	; (800fc38 <DebugArr+0x18>)
  for(size_t i = 0; i < len; i++) {
 800fc2c:	3401      	adds	r4, #1
    DEBUG_PRINTF("%02x ", ((const uint8_t *)buf)[i]);
 800fc2e:	f7fc f956 	bl	800bede <SEGGER_RTT_printf>
  for(size_t i = 0; i < len; i++) {
 800fc32:	42ac      	cmp	r4, r5
 800fc34:	d1f7      	bne.n	800fc26 <DebugArr+0x6>
  }
}
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
 800fc38:	080196ea 	.word	0x080196ea

0800fc3c <DebugLE>:

static void DebugLE(const uint8_t *buf, uint16_t len) {
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	0005      	movs	r5, r0
  if(len) do {
 800fc40:	2900      	cmp	r1, #0
 800fc42:	d00b      	beq.n	800fc5c <DebugLE+0x20>
 800fc44:	3901      	subs	r1, #1
 800fc46:	b28c      	uxth	r4, r1
 800fc48:	1904      	adds	r4, r0, r4
    DBG_PRINTF("%02x", buf[--len]);
 800fc4a:	7822      	ldrb	r2, [r4, #0]
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	4904      	ldr	r1, [pc, #16]	; (800fc60 <DebugLE+0x24>)
 800fc50:	f7fc f945 	bl	800bede <SEGGER_RTT_printf>
  } while(len);
 800fc54:	0023      	movs	r3, r4
 800fc56:	3c01      	subs	r4, #1
 800fc58:	429d      	cmp	r5, r3
 800fc5a:	d1f6      	bne.n	800fc4a <DebugLE+0xe>
}
 800fc5c:	bd70      	pop	{r4, r5, r6, pc}
 800fc5e:	46c0      	nop			; (mov r8, r8)
 800fc60:	080196f0 	.word	0x080196f0

0800fc64 <EEPROM_CRC>:
  HW_ProgramEEPROM(EEPROM_APP, EEPROM_CRC(msg, size));
  HW_ProgramEEPROM(EEPROM_APP + 4, size);
  HW_WriteEEPROM((void*)(EEPROM_APP + 8), msg, size);
}

uint32_t EEPROM_CRC(const uint8_t *buf, size_t size) {
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	0005      	movs	r5, r0
 800fc68:	000c      	movs	r4, r1
  return Crc32Finalize(Crc32Update(Crc32Init(), buf, size));
 800fc6a:	f7f4 fe51 	bl	8004910 <Crc32Init>
 800fc6e:	0029      	movs	r1, r5
 800fc70:	b2a2      	uxth	r2, r4
 800fc72:	f7f4 fe51 	bl	8004918 <Crc32Update>
 800fc76:	f7f4 fe6b 	bl	8004950 <Crc32Finalize>
}
 800fc7a:	bd70      	pop	{r4, r5, r6, pc}

0800fc7c <EEPROM_Save>:
void EEPROM_Save(void) {
 800fc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  msg[0] = 0;
 800fc7e:	2400      	movs	r4, #0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fc80:	2009      	movs	r0, #9
void EEPROM_Save(void) {
 800fc82:	b0c5      	sub	sp, #276	; 0x114
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fc84:	4da5      	ldr	r5, [pc, #660]	; (800ff1c <EEPROM_Save+0x2a0>)
  msg[0] = 0;
 800fc86:	ae04      	add	r6, sp, #16
 800fc88:	7034      	strb	r4, [r6, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fc8a:	792b      	ldrb	r3, [r5, #4]
 800fc8c:	2228      	movs	r2, #40	; 0x28
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	ab02      	add	r3, sp, #8
 800fc92:	18c0      	adds	r0, r0, r3
 800fc94:	21ff      	movs	r1, #255	; 0xff
 800fc96:	9401      	str	r4, [sp, #4]
 800fc98:	f002 fe62 	bl	8012960 <PBEncodeField>
 800fc9c:	1c43      	adds	r3, r0, #1
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(DevCfg.devEui));
 800fc9e:	0027      	movs	r7, r4
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fca0:	9303      	str	r3, [sp, #12]
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(DevCfg.devEui));
 800fca2:	2bff      	cmp	r3, #255	; 0xff
 800fca4:	d803      	bhi.n	800fcae <EEPROM_Save+0x32>
 800fca6:	3701      	adds	r7, #1
 800fca8:	37ff      	adds	r7, #255	; 0xff
 800fcaa:	18f4      	adds	r4, r6, r3
 800fcac:	1aff      	subs	r7, r7, r3
 800fcae:	1d68      	adds	r0, r5, #5
 800fcb0:	f002 fe30 	bl	8012914 <u64>
 800fcb4:	2231      	movs	r2, #49	; 0x31
 800fcb6:	9000      	str	r0, [sp, #0]
 800fcb8:	9101      	str	r1, [sp, #4]
 800fcba:	0039      	movs	r1, r7
 800fcbc:	0020      	movs	r0, r4
 800fcbe:	f002 fe4f 	bl	8012960 <PBEncodeField>
 800fcc2:	9b03      	ldr	r3, [sp, #12]
 800fcc4:	181f      	adds	r7, r3, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(DevCfg.appEui));
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	001c      	movs	r4, r3
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	2fff      	cmp	r7, #255	; 0xff
 800fcce:	d804      	bhi.n	800fcda <EEPROM_Save+0x5e>
 800fcd0:	3401      	adds	r4, #1
 800fcd2:	19f3      	adds	r3, r6, r7
 800fcd4:	34ff      	adds	r4, #255	; 0xff
 800fcd6:	9303      	str	r3, [sp, #12]
 800fcd8:	1be4      	subs	r4, r4, r7
 800fcda:	0028      	movs	r0, r5
 800fcdc:	300d      	adds	r0, #13
 800fcde:	f002 fe19 	bl	8012914 <u64>
 800fce2:	2239      	movs	r2, #57	; 0x39
 800fce4:	9000      	str	r0, [sp, #0]
 800fce6:	9101      	str	r1, [sp, #4]
 800fce8:	0021      	movs	r1, r4
 800fcea:	9803      	ldr	r0, [sp, #12]
 800fcec:	f002 fe38 	bl	8012960 <PBEncodeField>
 800fcf0:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_KEY, PBMSG_BX_LORA_APP_KEY_SIZE, DevCfg.appKey);
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	0001      	movs	r1, r0
 800fcf6:	2fff      	cmp	r7, #255	; 0xff
 800fcf8:	d803      	bhi.n	800fd02 <EEPROM_Save+0x86>
 800fcfa:	3101      	adds	r1, #1
 800fcfc:	31ff      	adds	r1, #255	; 0xff
 800fcfe:	19f0      	adds	r0, r6, r7
 800fd00:	1bc9      	subs	r1, r1, r7
 800fd02:	002b      	movs	r3, r5
 800fd04:	3315      	adds	r3, #21
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	2242      	movs	r2, #66	; 0x42
 800fd0a:	2310      	movs	r3, #16
 800fd0c:	f002 fe28 	bl	8012960 <PBEncodeField>
 800fd10:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_ADDR, DevCfg.devAddr);
 800fd12:	2000      	movs	r0, #0
 800fd14:	0001      	movs	r1, r0
 800fd16:	2fff      	cmp	r7, #255	; 0xff
 800fd18:	d803      	bhi.n	800fd22 <EEPROM_Save+0xa6>
 800fd1a:	3101      	adds	r1, #1
 800fd1c:	31ff      	adds	r1, #255	; 0xff
 800fd1e:	19f0      	adds	r0, r6, r7
 800fd20:	1bc9      	subs	r1, r1, r7
 800fd22:	224d      	movs	r2, #77	; 0x4d
 800fd24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fd26:	f002 fe1b 	bl	8012960 <PBEncodeField>
 800fd2a:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_MAC_NET_SESSION_KEY, PBMSG_BX_LORA_MAC_NET_SESSION_KEY_SIZE, DevCfg.nwkSKey);
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	0001      	movs	r1, r0
 800fd30:	2fff      	cmp	r7, #255	; 0xff
 800fd32:	d803      	bhi.n	800fd3c <EEPROM_Save+0xc0>
 800fd34:	3101      	adds	r1, #1
 800fd36:	31ff      	adds	r1, #255	; 0xff
 800fd38:	19f0      	adds	r0, r6, r7
 800fd3a:	1bc9      	subs	r1, r1, r7
 800fd3c:	002b      	movs	r3, r5
 800fd3e:	332c      	adds	r3, #44	; 0x2c
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	2252      	movs	r2, #82	; 0x52
 800fd44:	2310      	movs	r3, #16
 800fd46:	f002 fe0b 	bl	8012960 <PBEncodeField>
 800fd4a:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_MAC_APP_SESSION_KEY, PBMSG_BX_LORA_MAC_APP_SESSION_KEY_SIZE, DevCfg.appSKey);
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	0001      	movs	r1, r0
 800fd50:	2fff      	cmp	r7, #255	; 0xff
 800fd52:	d803      	bhi.n	800fd5c <EEPROM_Save+0xe0>
 800fd54:	3101      	adds	r1, #1
 800fd56:	31ff      	adds	r1, #255	; 0xff
 800fd58:	19f0      	adds	r0, r6, r7
 800fd5a:	1bc9      	subs	r1, r1, r7
 800fd5c:	002b      	movs	r3, r5
 800fd5e:	333c      	adds	r3, #60	; 0x3c
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	225a      	movs	r2, #90	; 0x5a
 800fd64:	2310      	movs	r3, #16
 800fd66:	f002 fdfb 	bl	8012960 <PBEncodeField>
 800fd6a:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_FP, (uint64_t)(DevCfg.region == LORAMAC_REGION_EU868 ? PBENUM_FP_EU868 : PBENUM_FP_US915));
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	0001      	movs	r1, r0
 800fd70:	2fff      	cmp	r7, #255	; 0xff
 800fd72:	d803      	bhi.n	800fd7c <EEPROM_Save+0x100>
 800fd74:	3101      	adds	r1, #1
 800fd76:	31ff      	adds	r1, #255	; 0xff
 800fd78:	19f0      	adds	r0, r6, r7
 800fd7a:	1bc9      	subs	r1, r1, r7
 800fd7c:	002b      	movs	r3, r5
 800fd7e:	334c      	adds	r3, #76	; 0x4c
 800fd80:	781c      	ldrb	r4, [r3, #0]
 800fd82:	2201      	movs	r2, #1
 800fd84:	2300      	movs	r3, #0
 800fd86:	2c05      	cmp	r4, #5
 800fd88:	d001      	beq.n	800fd8e <EEPROM_Save+0x112>
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9200      	str	r2, [sp, #0]
 800fd90:	9301      	str	r3, [sp, #4]
 800fd92:	2268      	movs	r2, #104	; 0x68
 800fd94:	f002 fde4 	bl	8012960 <PBEncodeField>
 800fd98:	183c      	adds	r4, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)DevCfg.txPort);
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	0001      	movs	r1, r0
 800fd9e:	2cff      	cmp	r4, #255	; 0xff
 800fda0:	d803      	bhi.n	800fdaa <EEPROM_Save+0x12e>
 800fda2:	3101      	adds	r1, #1
 800fda4:	31ff      	adds	r1, #255	; 0xff
 800fda6:	1930      	adds	r0, r6, r4
 800fda8:	1b09      	subs	r1, r1, r4
 800fdaa:	002b      	movs	r3, r5
 800fdac:	2700      	movs	r7, #0
 800fdae:	334d      	adds	r3, #77	; 0x4d
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	2270      	movs	r2, #112	; 0x70
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	9701      	str	r7, [sp, #4]
 800fdb8:	f002 fdd2 	bl	8012960 <PBEncodeField>
 800fdbc:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)DevCfg.txPower);
 800fdbe:	0039      	movs	r1, r7
 800fdc0:	0038      	movs	r0, r7
 800fdc2:	2cff      	cmp	r4, #255	; 0xff
 800fdc4:	d803      	bhi.n	800fdce <EEPROM_Save+0x152>
 800fdc6:	3101      	adds	r1, #1
 800fdc8:	31ff      	adds	r1, #255	; 0xff
 800fdca:	1930      	adds	r0, r6, r4
 800fdcc:	1b09      	subs	r1, r1, r4
 800fdce:	002b      	movs	r3, r5
 800fdd0:	2700      	movs	r7, #0
 800fdd2:	334e      	adds	r3, #78	; 0x4e
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2278      	movs	r2, #120	; 0x78
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	9701      	str	r7, [sp, #4]
 800fddc:	f002 fdc0 	bl	8012960 <PBEncodeField>
 800fde0:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_SF, (uint64_t)DevCfg.sf);
 800fde2:	0039      	movs	r1, r7
 800fde4:	0038      	movs	r0, r7
 800fde6:	2cff      	cmp	r4, #255	; 0xff
 800fde8:	d803      	bhi.n	800fdf2 <EEPROM_Save+0x176>
 800fdea:	3101      	adds	r1, #1
 800fdec:	31ff      	adds	r1, #255	; 0xff
 800fdee:	1930      	adds	r0, r6, r4
 800fdf0:	1b09      	subs	r1, r1, r4
 800fdf2:	002b      	movs	r3, r5
 800fdf4:	2700      	movs	r7, #0
 800fdf6:	334f      	adds	r3, #79	; 0x4f
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	2280      	movs	r2, #128	; 0x80
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	9701      	str	r7, [sp, #4]
 800fe00:	f002 fdae 	bl	8012960 <PBEncodeField>
 800fe04:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_BW, (uint64_t)DevCfg.bw);
 800fe06:	0039      	movs	r1, r7
 800fe08:	0038      	movs	r0, r7
 800fe0a:	2cff      	cmp	r4, #255	; 0xff
 800fe0c:	d803      	bhi.n	800fe16 <EEPROM_Save+0x19a>
 800fe0e:	3101      	adds	r1, #1
 800fe10:	31ff      	adds	r1, #255	; 0xff
 800fe12:	1930      	adds	r0, r6, r4
 800fe14:	1b09      	subs	r1, r1, r4
 800fe16:	002b      	movs	r3, r5
 800fe18:	2700      	movs	r7, #0
 800fe1a:	3350      	adds	r3, #80	; 0x50
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	2288      	movs	r2, #136	; 0x88
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	9701      	str	r7, [sp, #4]
 800fe24:	f002 fd9c 	bl	8012960 <PBEncodeField>
 800fe28:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)DevCfg.confirmedMsgs);
 800fe2a:	0039      	movs	r1, r7
 800fe2c:	0038      	movs	r0, r7
 800fe2e:	2cff      	cmp	r4, #255	; 0xff
 800fe30:	d803      	bhi.n	800fe3a <EEPROM_Save+0x1be>
 800fe32:	3101      	adds	r1, #1
 800fe34:	31ff      	adds	r1, #255	; 0xff
 800fe36:	1930      	adds	r0, r6, r4
 800fe38:	1b09      	subs	r1, r1, r4
 800fe3a:	002b      	movs	r3, r5
 800fe3c:	2700      	movs	r7, #0
 800fe3e:	3351      	adds	r3, #81	; 0x51
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	2290      	movs	r2, #144	; 0x90
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	9701      	str	r7, [sp, #4]
 800fe48:	f002 fd8a 	bl	8012960 <PBEncodeField>
 800fe4c:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_ADAPTIVE_DATA_RATE, (uint64_t)DevCfg.adaptiveDatarate);
 800fe4e:	0039      	movs	r1, r7
 800fe50:	0038      	movs	r0, r7
 800fe52:	2cff      	cmp	r4, #255	; 0xff
 800fe54:	d803      	bhi.n	800fe5e <EEPROM_Save+0x1e2>
 800fe56:	3101      	adds	r1, #1
 800fe58:	31ff      	adds	r1, #255	; 0xff
 800fe5a:	1930      	adds	r0, r6, r4
 800fe5c:	1b09      	subs	r1, r1, r4
 800fe5e:	002b      	movs	r3, r5
 800fe60:	2700      	movs	r7, #0
 800fe62:	3352      	adds	r3, #82	; 0x52
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	2298      	movs	r2, #152	; 0x98
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	9701      	str	r7, [sp, #4]
 800fe6c:	f002 fd78 	bl	8012960 <PBEncodeField>
 800fe70:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_RESPECT_DUTY_CYCLE, (uint64_t)DevCfg.dutyCycle);
 800fe72:	0039      	movs	r1, r7
 800fe74:	0038      	movs	r0, r7
 800fe76:	2cff      	cmp	r4, #255	; 0xff
 800fe78:	d803      	bhi.n	800fe82 <EEPROM_Save+0x206>
 800fe7a:	3101      	adds	r1, #1
 800fe7c:	31ff      	adds	r1, #255	; 0xff
 800fe7e:	1930      	adds	r0, r6, r4
 800fe80:	1b09      	subs	r1, r1, r4
 800fe82:	002b      	movs	r3, r5
 800fe84:	2700      	movs	r7, #0
 800fe86:	3353      	adds	r3, #83	; 0x53
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	22a0      	movs	r2, #160	; 0xa0
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	9701      	str	r7, [sp, #4]
 800fe90:	f002 fd66 	bl	8012960 <PBEncodeField>
 800fe94:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TIMEBASE, (uint64_t)DevCfg.sendInterval);
 800fe96:	0039      	movs	r1, r7
 800fe98:	0038      	movs	r0, r7
 800fe9a:	2cff      	cmp	r4, #255	; 0xff
 800fe9c:	d803      	bhi.n	800fea6 <EEPROM_Save+0x22a>
 800fe9e:	3101      	adds	r1, #1
 800fea0:	31ff      	adds	r1, #255	; 0xff
 800fea2:	1930      	adds	r0, r6, r4
 800fea4:	1b09      	subs	r1, r1, r4
 800fea6:	2700      	movs	r7, #0
 800fea8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800feaa:	22a8      	movs	r2, #168	; 0xa8
 800feac:	9300      	str	r3, [sp, #0]
 800feae:	9701      	str	r7, [sp, #4]
 800feb0:	f002 fd56 	bl	8012960 <PBEncodeField>
 800feb4:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_TRIGGER, (uint64_t)DevCfg.sendTrigger);
 800feb6:	0039      	movs	r1, r7
 800feb8:	0038      	movs	r0, r7
 800feba:	2cff      	cmp	r4, #255	; 0xff
 800febc:	d803      	bhi.n	800fec6 <EEPROM_Save+0x24a>
 800febe:	3101      	adds	r1, #1
 800fec0:	31ff      	adds	r1, #255	; 0xff
 800fec2:	1930      	adds	r0, r6, r4
 800fec4:	1b09      	subs	r1, r1, r4
 800fec6:	002b      	movs	r3, r5
 800fec8:	2700      	movs	r7, #0
 800feca:	3358      	adds	r3, #88	; 0x58
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	22b0      	movs	r2, #176	; 0xb0
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	9701      	str	r7, [sp, #4]
 800fed4:	f002 fd44 	bl	8012960 <PBEncodeField>
 800fed8:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 800feda:	0039      	movs	r1, r7
 800fedc:	0038      	movs	r0, r7
 800fede:	2cff      	cmp	r4, #255	; 0xff
 800fee0:	d803      	bhi.n	800feea <EEPROM_Save+0x26e>
 800fee2:	3101      	adds	r1, #1
 800fee4:	31ff      	adds	r1, #255	; 0xff
 800fee6:	1930      	adds	r0, r6, r4
 800fee8:	1b09      	subs	r1, r1, r4
 800feea:	002b      	movs	r3, r5
 800feec:	3359      	adds	r3, #89	; 0x59
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	22b8      	movs	r2, #184	; 0xb8
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	2300      	movs	r3, #0
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	f002 fd32 	bl	8012960 <PBEncodeField>
  if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 800fefc:	002b      	movs	r3, r5
 800fefe:	336c      	adds	r3, #108	; 0x6c
 800ff00:	781b      	ldrb	r3, [r3, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 800ff02:	1824      	adds	r4, r4, r0
  if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 800ff04:	075b      	lsls	r3, r3, #29
 800ff06:	d522      	bpl.n	800ff4e <EEPROM_Save+0x2d2>
 800ff08:	002b      	movs	r3, r5
 800ff0a:	335a      	adds	r3, #90	; 0x5a
 800ff0c:	7818      	ldrb	r0, [r3, #0]
 800ff0e:	2803      	cmp	r0, #3
 800ff10:	d81d      	bhi.n	800ff4e <EEPROM_Save+0x2d2>
 800ff12:	f7f0 f90b 	bl	800012c <__gnu_thumb1_case_uqi>
 800ff16:	0582      	.short	0x0582
 800ff18:	95a8      	.short	0x95a8
 800ff1a:	46c0      	nop			; (mov r8, r8)
 800ff1c:	200000e0 	.word	0x200000e0
  case HDC2080_TEMPERATURE_HIGH:  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold)); break;
 800ff20:	2300      	movs	r3, #0
 800ff22:	001f      	movs	r7, r3
 800ff24:	9303      	str	r3, [sp, #12]
 800ff26:	2cff      	cmp	r4, #255	; 0xff
 800ff28:	d804      	bhi.n	800ff34 <EEPROM_Save+0x2b8>
 800ff2a:	3701      	adds	r7, #1
 800ff2c:	1933      	adds	r3, r6, r4
 800ff2e:	37ff      	adds	r7, #255	; 0xff
 800ff30:	9303      	str	r3, [sp, #12]
 800ff32:	1b3f      	subs	r7, r7, r4
 800ff34:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800ff36:	0018      	movs	r0, r3
 800ff38:	17d9      	asrs	r1, r3, #31
 800ff3a:	f002 fe69 	bl	8012c10 <PBEncodeSInt>
 800ff3e:	22d0      	movs	r2, #208	; 0xd0
 800ff40:	9000      	str	r0, [sp, #0]
 800ff42:	9101      	str	r1, [sp, #4]
  case HDC2080_HUMIDITY_HIGH:     size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));    break;
 800ff44:	0039      	movs	r1, r7
 800ff46:	9803      	ldr	r0, [sp, #12]
 800ff48:	f002 fd0a 	bl	8012960 <PBEncodeField>
  case HDC2080_HUMIDITY_LOW:      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);                  break;
 800ff4c:	1824      	adds	r4, r4, r0
  if(DevCfg.useSensor.sfh7776) {
 800ff4e:	002b      	movs	r3, r5
 800ff50:	336c      	adds	r3, #108	; 0x6c
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	079b      	lsls	r3, r3, #30
 800ff56:	d523      	bpl.n	800ffa0 <EEPROM_Save+0x324>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_upper);
 800ff58:	2000      	movs	r0, #0
 800ff5a:	0001      	movs	r1, r0
 800ff5c:	2cff      	cmp	r4, #255	; 0xff
 800ff5e:	d803      	bhi.n	800ff68 <EEPROM_Save+0x2ec>
 800ff60:	3101      	adds	r1, #1
 800ff62:	31ff      	adds	r1, #255	; 0xff
 800ff64:	1930      	adds	r0, r6, r4
 800ff66:	1b09      	subs	r1, r1, r4
 800ff68:	002b      	movs	r3, r5
 800ff6a:	2700      	movs	r7, #0
 800ff6c:	3366      	adds	r3, #102	; 0x66
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	22e0      	movs	r2, #224	; 0xe0
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	9701      	str	r7, [sp, #4]
 800ff76:	f002 fcf3 	bl	8012960 <PBEncodeField>
 800ff7a:	1824      	adds	r4, r4, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_lower);
 800ff7c:	0039      	movs	r1, r7
 800ff7e:	0038      	movs	r0, r7
 800ff80:	2cff      	cmp	r4, #255	; 0xff
 800ff82:	d803      	bhi.n	800ff8c <EEPROM_Save+0x310>
 800ff84:	3101      	adds	r1, #1
 800ff86:	31ff      	adds	r1, #255	; 0xff
 800ff88:	1930      	adds	r0, r6, r4
 800ff8a:	1b09      	subs	r1, r1, r4
 800ff8c:	002b      	movs	r3, r5
 800ff8e:	3368      	adds	r3, #104	; 0x68
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	22e8      	movs	r2, #232	; 0xe8
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	2300      	movs	r3, #0
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	f002 fce1 	bl	8012960 <PBEncodeField>
 800ff9e:	1824      	adds	r4, r4, r0
  if(DevCfg.useSensor.bma400) {
 800ffa0:	002b      	movs	r3, r5
 800ffa2:	336c      	adds	r3, #108	; 0x6c
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	07db      	lsls	r3, r3, #31
 800ffa8:	d520      	bpl.n	800ffec <EEPROM_Save+0x370>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_THRESHOLD, (uint64_t)DevCfg.bma400_threshold);
 800ffaa:	2000      	movs	r0, #0
 800ffac:	0001      	movs	r1, r0
 800ffae:	2cff      	cmp	r4, #255	; 0xff
 800ffb0:	d803      	bhi.n	800ffba <EEPROM_Save+0x33e>
 800ffb2:	3101      	adds	r1, #1
 800ffb4:	31ff      	adds	r1, #255	; 0xff
 800ffb6:	1930      	adds	r0, r6, r4
 800ffb8:	1b09      	subs	r1, r1, r4
 800ffba:	2700      	movs	r7, #0
 800ffbc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800ffbe:	22f0      	movs	r2, #240	; 0xf0
 800ffc0:	9300      	str	r3, [sp, #0]
 800ffc2:	9701      	str	r7, [sp, #4]
 800ffc4:	f002 fccc 	bl	8012960 <PBEncodeField>
 800ffc8:	1824      	adds	r4, r4, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_CONFIGURE, (uint64_t)DevCfg.bma400_config);
 800ffca:	0039      	movs	r1, r7
 800ffcc:	0038      	movs	r0, r7
 800ffce:	2cff      	cmp	r4, #255	; 0xff
 800ffd0:	d803      	bhi.n	800ffda <EEPROM_Save+0x35e>
 800ffd2:	3101      	adds	r1, #1
 800ffd4:	31ff      	adds	r1, #255	; 0xff
 800ffd6:	1930      	adds	r0, r6, r4
 800ffd8:	1b09      	subs	r1, r1, r4
 800ffda:	3564      	adds	r5, #100	; 0x64
 800ffdc:	882b      	ldrh	r3, [r5, #0]
 800ffde:	22f8      	movs	r2, #248	; 0xf8
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	9301      	str	r3, [sp, #4]
 800ffe6:	f002 fcbb 	bl	8012960 <PBEncodeField>
 800ffea:	1824      	adds	r4, r4, r0
  HW_ResetEEPROM((void*)(EEPROM_APP + 8), size);
 800ffec:	0021      	movs	r1, r4
 800ffee:	4824      	ldr	r0, [pc, #144]	; (8010080 <EEPROM_Save+0x404>)
 800fff0:	f000 fcdc 	bl	80109ac <HW_ResetEEPROM>
  HW_ProgramEEPROM(EEPROM_APP, EEPROM_CRC(msg, size));
 800fff4:	0021      	movs	r1, r4
 800fff6:	0030      	movs	r0, r6
 800fff8:	f7ff fe34 	bl	800fc64 <EEPROM_CRC>
 800fffc:	0001      	movs	r1, r0
 800fffe:	4821      	ldr	r0, [pc, #132]	; (8010084 <EEPROM_Save+0x408>)
 8010000:	f000 fcbe 	bl	8010980 <HW_ProgramEEPROM>
  HW_ProgramEEPROM(EEPROM_APP + 4, size);
 8010004:	0021      	movs	r1, r4
 8010006:	4820      	ldr	r0, [pc, #128]	; (8010088 <EEPROM_Save+0x40c>)
 8010008:	f000 fcba 	bl	8010980 <HW_ProgramEEPROM>
  HW_WriteEEPROM((void*)(EEPROM_APP + 8), msg, size);
 801000c:	0022      	movs	r2, r4
 801000e:	0031      	movs	r1, r6
 8010010:	481b      	ldr	r0, [pc, #108]	; (8010080 <EEPROM_Save+0x404>)
 8010012:	f000 fce9 	bl	80109e8 <HW_WriteEEPROM>
}
 8010016:	b045      	add	sp, #276	; 0x114
 8010018:	bdf0      	pop	{r4, r5, r6, r7, pc}
  case HDC2080_TEMPERATURE_LOW:   size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold)); break;
 801001a:	2300      	movs	r3, #0
 801001c:	001f      	movs	r7, r3
 801001e:	9303      	str	r3, [sp, #12]
 8010020:	2cff      	cmp	r4, #255	; 0xff
 8010022:	d804      	bhi.n	801002e <EEPROM_Save+0x3b2>
 8010024:	3701      	adds	r7, #1
 8010026:	1933      	adds	r3, r6, r4
 8010028:	37ff      	adds	r7, #255	; 0xff
 801002a:	9303      	str	r3, [sp, #12]
 801002c:	1b3f      	subs	r7, r7, r4
 801002e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8010030:	0018      	movs	r0, r3
 8010032:	17d9      	asrs	r1, r3, #31
 8010034:	f002 fdec 	bl	8012c10 <PBEncodeSInt>
 8010038:	22d8      	movs	r2, #216	; 0xd8
 801003a:	9000      	str	r0, [sp, #0]
 801003c:	9101      	str	r1, [sp, #4]
 801003e:	e781      	b.n	800ff44 <EEPROM_Save+0x2c8>
  case HDC2080_HUMIDITY_HIGH:     size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));    break;
 8010040:	2300      	movs	r3, #0
 8010042:	001f      	movs	r7, r3
 8010044:	9303      	str	r3, [sp, #12]
 8010046:	2cff      	cmp	r4, #255	; 0xff
 8010048:	d804      	bhi.n	8010054 <EEPROM_Save+0x3d8>
 801004a:	3701      	adds	r7, #1
 801004c:	1933      	adds	r3, r6, r4
 801004e:	37ff      	adds	r7, #255	; 0xff
 8010050:	9303      	str	r3, [sp, #12]
 8010052:	1b3f      	subs	r7, r7, r4
 8010054:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8010056:	0018      	movs	r0, r3
 8010058:	17d9      	asrs	r1, r3, #31
 801005a:	f002 fdd9 	bl	8012c10 <PBEncodeSInt>
 801005e:	22c0      	movs	r2, #192	; 0xc0
 8010060:	9000      	str	r0, [sp, #0]
 8010062:	9101      	str	r1, [sp, #4]
 8010064:	e76e      	b.n	800ff44 <EEPROM_Save+0x2c8>
  case HDC2080_HUMIDITY_LOW:      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);                  break;
 8010066:	2000      	movs	r0, #0
 8010068:	0001      	movs	r1, r0
 801006a:	2cff      	cmp	r4, #255	; 0xff
 801006c:	d803      	bhi.n	8010076 <EEPROM_Save+0x3fa>
 801006e:	3101      	adds	r1, #1
 8010070:	31ff      	adds	r1, #255	; 0xff
 8010072:	1930      	adds	r0, r6, r4
 8010074:	1b09      	subs	r1, r1, r4
 8010076:	22c8      	movs	r2, #200	; 0xc8
 8010078:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 801007a:	f002 fc71 	bl	8012960 <PBEncodeField>
 801007e:	e765      	b.n	800ff4c <EEPROM_Save+0x2d0>
 8010080:	08081008 	.word	0x08081008
 8010084:	08081000 	.word	0x08081000
 8010088:	08081004 	.word	0x08081004

0801008c <EEPROM_Load>:
void EEPROM_Load(void) {
 801008c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len = ((uint32_t*)EEPROM_APP)[1];
 801008e:	4cce      	ldr	r4, [pc, #824]	; (80103c8 <EEPROM_Load+0x33c>)
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 8010090:	4bce      	ldr	r3, [pc, #824]	; (80103cc <EEPROM_Load+0x340>)
  uint32_t len = ((uint32_t*)EEPROM_APP)[1];
 8010092:	6821      	ldr	r1, [r4, #0]
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 8010094:	4dce      	ldr	r5, [pc, #824]	; (80103d0 <EEPROM_Load+0x344>)
 8010096:	000a      	movs	r2, r1
 8010098:	3a0a      	subs	r2, #10
void EEPROM_Load(void) {
 801009a:	b089      	sub	sp, #36	; 0x24
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 801009c:	429a      	cmp	r2, r3
 801009e:	d800      	bhi.n	80100a2 <EEPROM_Load+0x16>
 80100a0:	e0a2      	b.n	80101e8 <EEPROM_Load+0x15c>
    DEBUG_MSG("EEPROM ERR Missing. Saving defaults...\n");
 80100a2:	49cc      	ldr	r1, [pc, #816]	; (80103d4 <EEPROM_Load+0x348>)
 80100a4:	2000      	movs	r0, #0
 80100a6:	f7fb fd47 	bl	800bb38 <SEGGER_RTT_WriteString>
    BoardGetUniqueId(DevCfg.devEui);
 80100aa:	48cb      	ldr	r0, [pc, #812]	; (80103d8 <EEPROM_Load+0x34c>)
 80100ac:	3005      	adds	r0, #5
 80100ae:	f7f3 feb8 	bl	8003e22 <BoardGetUniqueId>
    EEPROM_Save();
 80100b2:	f7ff fde3 	bl	800fc7c <EEPROM_Save>
  crc = ((uint32_t*)EEPROM_APP)[0];
 80100b6:	682b      	ldr	r3, [r5, #0]
  pos++;
 80100b8:	2501      	movs	r5, #1
  len = ((uint32_t*)EEPROM_APP)[1];
 80100ba:	6827      	ldr	r7, [r4, #0]
  crc = ((uint32_t*)EEPROM_APP)[0];
 80100bc:	9303      	str	r3, [sp, #12]
  while(pos != len) {
 80100be:	42bd      	cmp	r5, r7
 80100c0:	d000      	beq.n	80100c4 <EEPROM_Load+0x38>
 80100c2:	e09d      	b.n	8010200 <EEPROM_Load+0x174>
  memset(&DevCfg.changed, ~0, sizeof DevCfg.changed);
 80100c4:	2301      	movs	r3, #1
 80100c6:	4cc4      	ldr	r4, [pc, #784]	; (80103d8 <EEPROM_Load+0x34c>)
 80100c8:	425b      	negs	r3, r3
  DEBUG_PRINTF("EEPROM Loaded size:%3d crc32:0x%08x\n", len, crc);
 80100ca:	002a      	movs	r2, r5
 80100cc:	49c3      	ldr	r1, [pc, #780]	; (80103dc <EEPROM_Load+0x350>)
  memset(&DevCfg.changed, ~0, sizeof DevCfg.changed);
 80100ce:	6023      	str	r3, [r4, #0]
  DEBUG_PRINTF("EEPROM Loaded size:%3d crc32:0x%08x\n", len, crc);
 80100d0:	2000      	movs	r0, #0
 80100d2:	9b03      	ldr	r3, [sp, #12]
 80100d4:	f7fb ff03 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.isOtaa            %x\n", DevCfg.isOtaa);
 80100d8:	7922      	ldrb	r2, [r4, #4]
 80100da:	49c1      	ldr	r1, [pc, #772]	; (80103e0 <EEPROM_Load+0x354>)
 80100dc:	2000      	movs	r0, #0
 80100de:	f7fb fefe 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_MSG(   "EEPROM DevCfg.devEui            "), DebugArr(DevCfg.devEui, sizeof DevCfg.devEui), DEBUG_MSG("\n");
 80100e2:	49c0      	ldr	r1, [pc, #768]	; (80103e4 <EEPROM_Load+0x358>)
 80100e4:	2000      	movs	r0, #0
 80100e6:	f7fb fd27 	bl	800bb38 <SEGGER_RTT_WriteString>
 80100ea:	2108      	movs	r1, #8
 80100ec:	1d60      	adds	r0, r4, #5
 80100ee:	f7ff fd97 	bl	800fc20 <DebugArr>
 80100f2:	4dbd      	ldr	r5, [pc, #756]	; (80103e8 <EEPROM_Load+0x35c>)
 80100f4:	2000      	movs	r0, #0
 80100f6:	0029      	movs	r1, r5
 80100f8:	f7fb fd1e 	bl	800bb38 <SEGGER_RTT_WriteString>
  DEBUG_MSG(   "EEPROM DevCfg.appEui            "), DebugArr(DevCfg.appEui, sizeof DevCfg.appEui), DEBUG_MSG("\n");
 80100fc:	49bb      	ldr	r1, [pc, #748]	; (80103ec <EEPROM_Load+0x360>)
 80100fe:	2000      	movs	r0, #0
 8010100:	f7fb fd1a 	bl	800bb38 <SEGGER_RTT_WriteString>
 8010104:	0020      	movs	r0, r4
 8010106:	2108      	movs	r1, #8
 8010108:	300d      	adds	r0, #13
 801010a:	f7ff fd89 	bl	800fc20 <DebugArr>
 801010e:	0029      	movs	r1, r5
 8010110:	2000      	movs	r0, #0
 8010112:	f7fb fd11 	bl	800bb38 <SEGGER_RTT_WriteString>
  DEBUG_MSG(   "EEPROM DevCfg.appKey            "), DebugArr(DevCfg.appKey, sizeof DevCfg.appKey), DEBUG_MSG("\n");
 8010116:	49b6      	ldr	r1, [pc, #728]	; (80103f0 <EEPROM_Load+0x364>)
 8010118:	2000      	movs	r0, #0
 801011a:	f7fb fd0d 	bl	800bb38 <SEGGER_RTT_WriteString>
 801011e:	0020      	movs	r0, r4
 8010120:	2110      	movs	r1, #16
 8010122:	3015      	adds	r0, #21
 8010124:	f7ff fd7c 	bl	800fc20 <DebugArr>
 8010128:	0029      	movs	r1, r5
 801012a:	2000      	movs	r0, #0
 801012c:	f7fb fd04 	bl	800bb38 <SEGGER_RTT_WriteString>
  DEBUG_PRINTF("EEPROM DevCfg.devAddr           0x%08x\n", DevCfg.devAddr);
 8010130:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010132:	49b0      	ldr	r1, [pc, #704]	; (80103f4 <EEPROM_Load+0x368>)
 8010134:	2000      	movs	r0, #0
 8010136:	f7fb fed2 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_MSG(   "EEPROM DevCfg.nwkSKey           "), DebugArr(DevCfg.nwkSKey, sizeof DevCfg.nwkSKey), DEBUG_MSG("\n");
 801013a:	49af      	ldr	r1, [pc, #700]	; (80103f8 <EEPROM_Load+0x36c>)
 801013c:	2000      	movs	r0, #0
 801013e:	f7fb fcfb 	bl	800bb38 <SEGGER_RTT_WriteString>
 8010142:	0020      	movs	r0, r4
 8010144:	2110      	movs	r1, #16
 8010146:	302c      	adds	r0, #44	; 0x2c
 8010148:	f7ff fd6a 	bl	800fc20 <DebugArr>
 801014c:	0029      	movs	r1, r5
 801014e:	2000      	movs	r0, #0
 8010150:	f7fb fcf2 	bl	800bb38 <SEGGER_RTT_WriteString>
  DEBUG_MSG(   "EEPROM DevCfg.appSKey           "), DebugArr(DevCfg.appSKey, sizeof DevCfg.appSKey), DEBUG_MSG("\n");
 8010154:	49a9      	ldr	r1, [pc, #676]	; (80103fc <EEPROM_Load+0x370>)
 8010156:	2000      	movs	r0, #0
 8010158:	f7fb fcee 	bl	800bb38 <SEGGER_RTT_WriteString>
 801015c:	0020      	movs	r0, r4
 801015e:	2110      	movs	r1, #16
 8010160:	303c      	adds	r0, #60	; 0x3c
 8010162:	f7ff fd5d 	bl	800fc20 <DebugArr>
 8010166:	0029      	movs	r1, r5
 8010168:	2000      	movs	r0, #0
 801016a:	f7fb fce5 	bl	800bb38 <SEGGER_RTT_WriteString>
  DEBUG_PRINTF("EEPROM DevCfg.region            %s\n", DevCfg.region == LORAMAC_REGION_EU868 ? "EU868" : "US915");
 801016e:	0023      	movs	r3, r4
 8010170:	334c      	adds	r3, #76	; 0x4c
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	4aa2      	ldr	r2, [pc, #648]	; (8010400 <EEPROM_Load+0x374>)
 8010176:	2b05      	cmp	r3, #5
 8010178:	d000      	beq.n	801017c <EEPROM_Load+0xf0>
 801017a:	4aa2      	ldr	r2, [pc, #648]	; (8010404 <EEPROM_Load+0x378>)
 801017c:	49a2      	ldr	r1, [pc, #648]	; (8010408 <EEPROM_Load+0x37c>)
 801017e:	2000      	movs	r0, #0
 8010180:	f7fb fead 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.txPort            %d\n", DevCfg.txPort);
 8010184:	0023      	movs	r3, r4
 8010186:	334d      	adds	r3, #77	; 0x4d
 8010188:	781a      	ldrb	r2, [r3, #0]
 801018a:	49a0      	ldr	r1, [pc, #640]	; (801040c <EEPROM_Load+0x380>)
 801018c:	2000      	movs	r0, #0
 801018e:	f7fb fea6 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.txPower           %d dBm\n", DevCfg.txPower);
 8010192:	0023      	movs	r3, r4
 8010194:	334e      	adds	r3, #78	; 0x4e
 8010196:	781a      	ldrb	r2, [r3, #0]
 8010198:	499d      	ldr	r1, [pc, #628]	; (8010410 <EEPROM_Load+0x384>)
 801019a:	2000      	movs	r0, #0
 801019c:	f7fb fe9f 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.sf                %d\n", DevCfg.sf);
 80101a0:	0023      	movs	r3, r4
 80101a2:	334f      	adds	r3, #79	; 0x4f
 80101a4:	781a      	ldrb	r2, [r3, #0]
 80101a6:	499b      	ldr	r1, [pc, #620]	; (8010414 <EEPROM_Load+0x388>)
 80101a8:	2000      	movs	r0, #0
 80101aa:	f7fb fe98 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.bw                %d\n", DevCfg.bw);
 80101ae:	0023      	movs	r3, r4
 80101b0:	3350      	adds	r3, #80	; 0x50
 80101b2:	781a      	ldrb	r2, [r3, #0]
 80101b4:	4998      	ldr	r1, [pc, #608]	; (8010418 <EEPROM_Load+0x38c>)
 80101b6:	2000      	movs	r0, #0
 80101b8:	f7fb fe91 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.confirmedMsgs     %x\n", DevCfg.confirmedMsgs);
 80101bc:	0023      	movs	r3, r4
 80101be:	3351      	adds	r3, #81	; 0x51
 80101c0:	781a      	ldrb	r2, [r3, #0]
 80101c2:	4996      	ldr	r1, [pc, #600]	; (801041c <EEPROM_Load+0x390>)
 80101c4:	2000      	movs	r0, #0
 80101c6:	f7fb fe8a 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.adaptiveDatarate  %x\n", DevCfg.adaptiveDatarate);
 80101ca:	0023      	movs	r3, r4
 80101cc:	3352      	adds	r3, #82	; 0x52
 80101ce:	781a      	ldrb	r2, [r3, #0]
 80101d0:	4993      	ldr	r1, [pc, #588]	; (8010420 <EEPROM_Load+0x394>)
  DEBUG_PRINTF("EEPROM DevCfg.dutyCycle         %x\n", DevCfg.dutyCycle);
 80101d2:	3453      	adds	r4, #83	; 0x53
  DEBUG_PRINTF("EEPROM DevCfg.adaptiveDatarate  %x\n", DevCfg.adaptiveDatarate);
 80101d4:	2000      	movs	r0, #0
 80101d6:	f7fb fe82 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.dutyCycle         %x\n", DevCfg.dutyCycle);
 80101da:	7822      	ldrb	r2, [r4, #0]
 80101dc:	4991      	ldr	r1, [pc, #580]	; (8010424 <EEPROM_Load+0x398>)
 80101de:	2000      	movs	r0, #0
 80101e0:	f7fb fe7d 	bl	800bede <SEGGER_RTT_printf>
}
 80101e4:	b009      	add	sp, #36	; 0x24
 80101e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 80101e8:	488f      	ldr	r0, [pc, #572]	; (8010428 <EEPROM_Load+0x39c>)
 80101ea:	7803      	ldrb	r3, [r0, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d000      	beq.n	80101f2 <EEPROM_Load+0x166>
 80101f0:	e757      	b.n	80100a2 <EEPROM_Load+0x16>
  uint32_t crc = ((uint32_t*)EEPROM_APP)[0];
 80101f2:	682e      	ldr	r6, [r5, #0]
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 80101f4:	f7ff fd36 	bl	800fc64 <EEPROM_CRC>
 80101f8:	42b0      	cmp	r0, r6
 80101fa:	d000      	beq.n	80101fe <EEPROM_Load+0x172>
 80101fc:	e751      	b.n	80100a2 <EEPROM_Load+0x16>
 80101fe:	e75a      	b.n	80100b6 <EEPROM_Load+0x2a>
    uint8_t tagtype = msg[pos] & 0x7;
 8010200:	2207      	movs	r2, #7
 8010202:	4b89      	ldr	r3, [pc, #548]	; (8010428 <EEPROM_Load+0x39c>)
    uint64_t val_int = 0;
 8010204:	2100      	movs	r1, #0
    uint8_t tagtype = msg[pos] & 0x7;
 8010206:	18eb      	adds	r3, r5, r3
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	401a      	ands	r2, r3
 801020e:	9202      	str	r2, [sp, #8]
    uint32_t tagnr = 0;
 8010210:	2200      	movs	r2, #0
 8010212:	9205      	str	r2, [sp, #20]
    uint64_t val_int = 0;
 8010214:	2200      	movs	r2, #0
 8010216:	9106      	str	r1, [sp, #24]
 8010218:	9207      	str	r2, [sp, #28]
    if(msg[pos] & 0x80) {
 801021a:	b25a      	sxtb	r2, r3
 801021c:	2a00      	cmp	r2, #0
 801021e:	da43      	bge.n	80102a8 <EEPROM_Load+0x21c>
      uint8_t tagnr_bitlimit = len - pos < 5 ? (len - pos) * 7 : 25;
 8010220:	1b7b      	subs	r3, r7, r5
 8010222:	3119      	adds	r1, #25
 8010224:	2b04      	cmp	r3, #4
 8010226:	d802      	bhi.n	801022e <EEPROM_Load+0x1a2>
 8010228:	2207      	movs	r2, #7
 801022a:	4353      	muls	r3, r2
 801022c:	b2d9      	uxtb	r1, r3
      uint8_t tagnr_bytes = PBDecodeVarint(msg + pos + 1, tagnr_bitlimit, &tagnr);
 801022e:	4b7f      	ldr	r3, [pc, #508]	; (801042c <EEPROM_Load+0x3a0>)
 8010230:	aa05      	add	r2, sp, #20
 8010232:	18e8      	adds	r0, r5, r3
 8010234:	f002 fc80 	bl	8012b38 <PBDecodeVarint>
      if(!tagnr_bytes) {
 8010238:	2800      	cmp	r0, #0
 801023a:	d123      	bne.n	8010284 <EEPROM_Load+0x1f8>
        Breakpoint();
 801023c:	f000 fd04 	bl	8010c48 <Breakpoint>
        debug_msg = ", Out-of-bounds varint tagnr\n";
 8010240:	4c7b      	ldr	r4, [pc, #492]	; (8010430 <EEPROM_Load+0x3a4>)
  DEBUG_MSG("EEPROM ERR <RD Undefined 0x"), DebugLE(msg + debug_fieldpos, len - debug_fieldpos), DBG_PRINTF("%s", debug_msg);;
 8010242:	497c      	ldr	r1, [pc, #496]	; (8010434 <EEPROM_Load+0x3a8>)
 8010244:	2000      	movs	r0, #0
 8010246:	f7fb fc77 	bl	800bb38 <SEGGER_RTT_WriteString>
 801024a:	1b79      	subs	r1, r7, r5
 801024c:	9801      	ldr	r0, [sp, #4]
 801024e:	b289      	uxth	r1, r1
 8010250:	f7ff fcf4 	bl	800fc3c <DebugLE>
 8010254:	0022      	movs	r2, r4
 8010256:	4978      	ldr	r1, [pc, #480]	; (8010438 <EEPROM_Load+0x3ac>)
 8010258:	2000      	movs	r0, #0
 801025a:	f7fb fe40 	bl	800bede <SEGGER_RTT_printf>
  DEBUG_MSG("EEPROM Invalidating and rebooting.");
 801025e:	4977      	ldr	r1, [pc, #476]	; (801043c <EEPROM_Load+0x3b0>)
 8010260:	2000      	movs	r0, #0
 8010262:	f7fb fc69 	bl	800bb38 <SEGGER_RTT_WriteString>
  HW_EraseEEPROM(EEPROM_APP);
 8010266:	485a      	ldr	r0, [pc, #360]	; (80103d0 <EEPROM_Load+0x344>)
 8010268:	f000 fb76 	bl	8010958 <HW_EraseEEPROM>
  HW_EraseEEPROM(EEPROM_APP + 4);
 801026c:	4856      	ldr	r0, [pc, #344]	; (80103c8 <EEPROM_Load+0x33c>)
 801026e:	f000 fb73 	bl	8010958 <HW_EraseEEPROM>
  __ASM volatile ("dsb 0xF":::"memory");
 8010272:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010276:	4b72      	ldr	r3, [pc, #456]	; (8010440 <EEPROM_Load+0x3b4>)
 8010278:	4a72      	ldr	r2, [pc, #456]	; (8010444 <EEPROM_Load+0x3b8>)
 801027a:	60da      	str	r2, [r3, #12]
 801027c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8010280:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8010282:	e7fd      	b.n	8010280 <EEPROM_Load+0x1f4>
      tagnr |= (msg[pos] & 0x78) >> 3;
 8010284:	9b01      	ldr	r3, [sp, #4]
      tagnr <<= 4;
 8010286:	9a05      	ldr	r2, [sp, #20]
      tagnr |= (msg[pos] & 0x78) >> 3;
 8010288:	781b      	ldrb	r3, [r3, #0]
      tagnr <<= 4;
 801028a:	0112      	lsls	r2, r2, #4
      tagnr |= (msg[pos] & 0x78) >> 3;
 801028c:	065b      	lsls	r3, r3, #25
 801028e:	0f1b      	lsrs	r3, r3, #28
 8010290:	4313      	orrs	r3, r2
 8010292:	1c6c      	adds	r4, r5, #1
 8010294:	9305      	str	r3, [sp, #20]
      pos += tagnr_bytes + 1;
 8010296:	1824      	adds	r4, r4, r0
    if(!tagnr) {
 8010298:	9b05      	ldr	r3, [sp, #20]
      pos += 1;
 801029a:	b2e4      	uxtb	r4, r4
    if(!tagnr) {
 801029c:	2b00      	cmp	r3, #0
 801029e:	d107      	bne.n	80102b0 <EEPROM_Load+0x224>
      Breakpoint();
 80102a0:	f000 fcd2 	bl	8010c48 <Breakpoint>
      debug_msg = ", Ill-formed tagnr\n";
 80102a4:	4c68      	ldr	r4, [pc, #416]	; (8010448 <EEPROM_Load+0x3bc>)
      goto err;
 80102a6:	e7cc      	b.n	8010242 <EEPROM_Load+0x1b6>
      tagnr = (msg[pos] & 0x78) >> 3;
 80102a8:	10db      	asrs	r3, r3, #3
 80102aa:	9305      	str	r3, [sp, #20]
      pos += 1;
 80102ac:	1c6c      	adds	r4, r5, #1
 80102ae:	e7f3      	b.n	8010298 <EEPROM_Load+0x20c>
    if(!(len - pos)) {
 80102b0:	42bc      	cmp	r4, r7
 80102b2:	d100      	bne.n	80102b6 <EEPROM_Load+0x22a>
 80102b4:	e18c      	b.n	80105d0 <EEPROM_Load+0x544>
    switch(tagtype) {
 80102b6:	9b02      	ldr	r3, [sp, #8]
 80102b8:	2b05      	cmp	r3, #5
 80102ba:	d852      	bhi.n	8010362 <EEPROM_Load+0x2d6>
 80102bc:	0018      	movs	r0, r3
 80102be:	f7ef ff35 	bl	800012c <__gnu_thumb1_case_uqi>
 80102c2:	1303      	.short	0x1303
 80102c4:	4850502a 	.word	0x4850502a
      uint8_t varint_bitlimit = len - pos < 10 ? (len - pos) * 7 : 64;
 80102c8:	2140      	movs	r1, #64	; 0x40
 80102ca:	1b3b      	subs	r3, r7, r4
 80102cc:	2b09      	cmp	r3, #9
 80102ce:	d802      	bhi.n	80102d6 <EEPROM_Load+0x24a>
 80102d0:	2207      	movs	r2, #7
 80102d2:	4353      	muls	r3, r2
 80102d4:	b2d9      	uxtb	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 80102d6:	4b54      	ldr	r3, [pc, #336]	; (8010428 <EEPROM_Load+0x39c>)
 80102d8:	aa06      	add	r2, sp, #24
 80102da:	18e0      	adds	r0, r4, r3
 80102dc:	f002 fc2c 	bl	8012b38 <PBDecodeVarint>
 80102e0:	0006      	movs	r6, r0
    if(!val_rawbytes) {
 80102e2:	2e00      	cmp	r6, #0
 80102e4:	d107      	bne.n	80102f6 <EEPROM_Load+0x26a>
 80102e6:	e022      	b.n	801032e <EEPROM_Load+0x2a2>
      memcpy(&val_int, msg + pos, val_rawbytes);
 80102e8:	4b4f      	ldr	r3, [pc, #316]	; (8010428 <EEPROM_Load+0x39c>)
 80102ea:	2208      	movs	r2, #8
 80102ec:	18e1      	adds	r1, r4, r3
 80102ee:	a806      	add	r0, sp, #24
 80102f0:	f005 fe2e 	bl	8015f50 <memcpy>
      val_rawbytes = 8;
 80102f4:	2608      	movs	r6, #8
    if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_OTAA) {
 80102f6:	9b05      	ldr	r3, [sp, #20]
 80102f8:	9a02      	ldr	r2, [sp, #8]
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	4313      	orrs	r3, r2
 80102fe:	2b28      	cmp	r3, #40	; 0x28
 8010300:	d133      	bne.n	801036a <EEPROM_Load+0x2de>
      DevCfg.isOtaa = val_int;
 8010302:	9a07      	ldr	r2, [sp, #28]
 8010304:	9b06      	ldr	r3, [sp, #24]
 8010306:	4313      	orrs	r3, r2
 8010308:	1e5a      	subs	r2, r3, #1
 801030a:	4193      	sbcs	r3, r2
 801030c:	4a32      	ldr	r2, [pc, #200]	; (80103d8 <EEPROM_Load+0x34c>)
 801030e:	7113      	strb	r3, [r2, #4]
    pos += val_rawbytes;
 8010310:	19a4      	adds	r4, r4, r6
 8010312:	b2e5      	uxtb	r5, r4
 8010314:	e6d3      	b.n	80100be <EEPROM_Load+0x32>
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8010316:	1b39      	subs	r1, r7, r4
 8010318:	3901      	subs	r1, #1
 801031a:	1e4b      	subs	r3, r1, #1
 801031c:	4199      	sbcs	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 801031e:	4b42      	ldr	r3, [pc, #264]	; (8010428 <EEPROM_Load+0x39c>)
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8010320:	3107      	adds	r1, #7
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8010322:	aa06      	add	r2, sp, #24
 8010324:	18e0      	adds	r0, r4, r3
 8010326:	f002 fc07 	bl	8012b38 <PBDecodeVarint>
      if(!val_rawbytes) break;
 801032a:	2800      	cmp	r0, #0
 801032c:	d103      	bne.n	8010336 <EEPROM_Load+0x2aa>
      Breakpoint();
 801032e:	f000 fc8b 	bl	8010c48 <Breakpoint>
      debug_msg = ", Ill-formed value\n";
 8010332:	4c46      	ldr	r4, [pc, #280]	; (801044c <EEPROM_Load+0x3c0>)
      goto err;
 8010334:	e785      	b.n	8010242 <EEPROM_Load+0x1b6>
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8010336:	9b07      	ldr	r3, [sp, #28]
 8010338:	9e06      	ldr	r6, [sp, #24]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d1f7      	bne.n	801032e <EEPROM_Load+0x2a2>
 801033e:	2efa      	cmp	r6, #250	; 0xfa
 8010340:	d8f5      	bhi.n	801032e <EEPROM_Load+0x2a2>
      pos += val_rawbytes;
 8010342:	1824      	adds	r4, r4, r0
 8010344:	b2e4      	uxtb	r4, r4
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8010346:	1b3b      	subs	r3, r7, r4
 8010348:	b2db      	uxtb	r3, r3
 801034a:	429e      	cmp	r6, r3
 801034c:	d8ef      	bhi.n	801032e <EEPROM_Load+0x2a2>
 801034e:	b2f6      	uxtb	r6, r6
 8010350:	e7c7      	b.n	80102e2 <EEPROM_Load+0x256>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8010352:	4b35      	ldr	r3, [pc, #212]	; (8010428 <EEPROM_Load+0x39c>)
 8010354:	2204      	movs	r2, #4
 8010356:	18e1      	adds	r1, r4, r3
 8010358:	a806      	add	r0, sp, #24
 801035a:	f005 fdf9 	bl	8015f50 <memcpy>
      val_rawbytes = 4;
 801035e:	2604      	movs	r6, #4
 8010360:	e7c9      	b.n	80102f6 <EEPROM_Load+0x26a>
      Breakpoint();
 8010362:	f000 fc71 	bl	8010c48 <Breakpoint>
      debug_msg = ", Ill-formed tagtype\n";
 8010366:	4c3a      	ldr	r4, [pc, #232]	; (8010450 <EEPROM_Load+0x3c4>)
      goto err;
 8010368:	e76b      	b.n	8010242 <EEPROM_Load+0x1b6>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_EUI) {
 801036a:	2b31      	cmp	r3, #49	; 0x31
 801036c:	d106      	bne.n	801037c <EEPROM_Load+0x2f0>
      b64(DevCfg.devEui, val_int);
 801036e:	9a06      	ldr	r2, [sp, #24]
 8010370:	9b07      	ldr	r3, [sp, #28]
 8010372:	4819      	ldr	r0, [pc, #100]	; (80103d8 <EEPROM_Load+0x34c>)
 8010374:	3005      	adds	r0, #5
      b64(DevCfg.appEui, val_int);
 8010376:	f002 fae4 	bl	8012942 <b64>
 801037a:	e7c9      	b.n	8010310 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_EUI) {
 801037c:	2b39      	cmp	r3, #57	; 0x39
 801037e:	d104      	bne.n	801038a <EEPROM_Load+0x2fe>
      b64(DevCfg.appEui, val_int);
 8010380:	9a06      	ldr	r2, [sp, #24]
 8010382:	9b07      	ldr	r3, [sp, #28]
 8010384:	4814      	ldr	r0, [pc, #80]	; (80103d8 <EEPROM_Load+0x34c>)
 8010386:	300d      	adds	r0, #13
 8010388:	e7f5      	b.n	8010376 <EEPROM_Load+0x2ea>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_KEY && val_rawbytes == sizeof DevCfg.appKey) {
 801038a:	2b42      	cmp	r3, #66	; 0x42
 801038c:	d10a      	bne.n	80103a4 <EEPROM_Load+0x318>
 801038e:	2e10      	cmp	r6, #16
 8010390:	d000      	beq.n	8010394 <EEPROM_Load+0x308>
 8010392:	e10d      	b.n	80105b0 <EEPROM_Load+0x524>
      memcpy(DevCfg.appKey, msg + pos, val_rawbytes);
 8010394:	0032      	movs	r2, r6
 8010396:	4810      	ldr	r0, [pc, #64]	; (80103d8 <EEPROM_Load+0x34c>)
 8010398:	4b23      	ldr	r3, [pc, #140]	; (8010428 <EEPROM_Load+0x39c>)
 801039a:	3015      	adds	r0, #21
 801039c:	18e1      	adds	r1, r4, r3
      memcpy(DevCfg.nwkSKey, msg + pos, val_rawbytes);
 801039e:	f005 fdd7 	bl	8015f50 <memcpy>
 80103a2:	e7b5      	b.n	8010310 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_ADDR) {
 80103a4:	2b4d      	cmp	r3, #77	; 0x4d
 80103a6:	d103      	bne.n	80103b0 <EEPROM_Load+0x324>
      DevCfg.devAddr = val_int;
 80103a8:	4b0b      	ldr	r3, [pc, #44]	; (80103d8 <EEPROM_Load+0x34c>)
 80103aa:	9a06      	ldr	r2, [sp, #24]
 80103ac:	629a      	str	r2, [r3, #40]	; 0x28
 80103ae:	e7af      	b.n	8010310 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_NET_SESSION_KEY && val_rawbytes == sizeof DevCfg.nwkSKey) {
 80103b0:	2b52      	cmp	r3, #82	; 0x52
 80103b2:	d14f      	bne.n	8010454 <EEPROM_Load+0x3c8>
 80103b4:	2e10      	cmp	r6, #16
 80103b6:	d000      	beq.n	80103ba <EEPROM_Load+0x32e>
 80103b8:	e0fa      	b.n	80105b0 <EEPROM_Load+0x524>
      memcpy(DevCfg.nwkSKey, msg + pos, val_rawbytes);
 80103ba:	4807      	ldr	r0, [pc, #28]	; (80103d8 <EEPROM_Load+0x34c>)
 80103bc:	4b1a      	ldr	r3, [pc, #104]	; (8010428 <EEPROM_Load+0x39c>)
 80103be:	0032      	movs	r2, r6
 80103c0:	18e1      	adds	r1, r4, r3
 80103c2:	302c      	adds	r0, #44	; 0x2c
 80103c4:	e7eb      	b.n	801039e <EEPROM_Load+0x312>
 80103c6:	46c0      	nop			; (mov r8, r8)
 80103c8:	08081004 	.word	0x08081004
 80103cc:	000003ee 	.word	0x000003ee
 80103d0:	08081000 	.word	0x08081000
 80103d4:	0801977c 	.word	0x0801977c
 80103d8:	200000e0 	.word	0x200000e0
 80103dc:	08019811 	.word	0x08019811
 80103e0:	08019836 	.word	0x08019836
 80103e4:	0801985a 	.word	0x0801985a
 80103e8:	08018fe6 	.word	0x08018fe6
 80103ec:	0801987b 	.word	0x0801987b
 80103f0:	0801989c 	.word	0x0801989c
 80103f4:	080198bd 	.word	0x080198bd
 80103f8:	080198e5 	.word	0x080198e5
 80103fc:	08019906 	.word	0x08019906
 8010400:	08019770 	.word	0x08019770
 8010404:	08019776 	.word	0x08019776
 8010408:	08019927 	.word	0x08019927
 801040c:	0801994b 	.word	0x0801994b
 8010410:	0801996f 	.word	0x0801996f
 8010414:	08019997 	.word	0x08019997
 8010418:	080199bb 	.word	0x080199bb
 801041c:	080199df 	.word	0x080199df
 8010420:	08019a03 	.word	0x08019a03
 8010424:	08019a27 	.word	0x08019a27
 8010428:	08081008 	.word	0x08081008
 801042c:	08081009 	.word	0x08081009
 8010430:	080196f5 	.word	0x080196f5
 8010434:	080197a4 	.word	0x080197a4
 8010438:	080197eb 	.word	0x080197eb
 801043c:	080197ee 	.word	0x080197ee
 8010440:	e000ed00 	.word	0xe000ed00
 8010444:	05fa0004 	.word	0x05fa0004
 8010448:	08019713 	.word	0x08019713
 801044c:	08019727 	.word	0x08019727
 8010450:	0801973b 	.word	0x0801973b
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_APP_SESSION_KEY && val_rawbytes == sizeof DevCfg.appSKey) {
 8010454:	2b5a      	cmp	r3, #90	; 0x5a
 8010456:	d108      	bne.n	801046a <EEPROM_Load+0x3de>
 8010458:	2e10      	cmp	r6, #16
 801045a:	d000      	beq.n	801045e <EEPROM_Load+0x3d2>
 801045c:	e0a8      	b.n	80105b0 <EEPROM_Load+0x524>
      memcpy(DevCfg.appSKey, msg + pos, val_rawbytes);
 801045e:	485d      	ldr	r0, [pc, #372]	; (80105d4 <EEPROM_Load+0x548>)
 8010460:	4b5d      	ldr	r3, [pc, #372]	; (80105d8 <EEPROM_Load+0x54c>)
 8010462:	0032      	movs	r2, r6
 8010464:	18e1      	adds	r1, r4, r3
 8010466:	303c      	adds	r0, #60	; 0x3c
 8010468:	e799      	b.n	801039e <EEPROM_Load+0x312>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_FP) {
 801046a:	2b68      	cmp	r3, #104	; 0x68
 801046c:	d10b      	bne.n	8010486 <EEPROM_Load+0x3fa>
      DevCfg.region = val_int == PBENUM_FP_EU868 ? LORAMAC_REGION_EU868 : LORAMAC_REGION_US915;
 801046e:	9b06      	ldr	r3, [sp, #24]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d103      	bne.n	801047c <EEPROM_Load+0x3f0>
 8010474:	9b07      	ldr	r3, [sp, #28]
 8010476:	2205      	movs	r2, #5
 8010478:	2b00      	cmp	r3, #0
 801047a:	d000      	beq.n	801047e <EEPROM_Load+0x3f2>
 801047c:	2208      	movs	r2, #8
 801047e:	4b55      	ldr	r3, [pc, #340]	; (80105d4 <EEPROM_Load+0x548>)
 8010480:	334c      	adds	r3, #76	; 0x4c
      DevCfg.useSensor.bma400 = true;
 8010482:	701a      	strb	r2, [r3, #0]
 8010484:	e744      	b.n	8010310 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_PORT) {
 8010486:	2b70      	cmp	r3, #112	; 0x70
 8010488:	d103      	bne.n	8010492 <EEPROM_Load+0x406>
      DevCfg.txPort = val_int;
 801048a:	4b52      	ldr	r3, [pc, #328]	; (80105d4 <EEPROM_Load+0x548>)
 801048c:	334d      	adds	r3, #77	; 0x4d
      DevCfg.sendStrategy = val_int;
 801048e:	9a06      	ldr	r2, [sp, #24]
 8010490:	e7f7      	b.n	8010482 <EEPROM_Load+0x3f6>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_TXP) {
 8010492:	2b78      	cmp	r3, #120	; 0x78
 8010494:	d102      	bne.n	801049c <EEPROM_Load+0x410>
      DevCfg.txPower = val_int;
 8010496:	4b4f      	ldr	r3, [pc, #316]	; (80105d4 <EEPROM_Load+0x548>)
 8010498:	334e      	adds	r3, #78	; 0x4e
 801049a:	e7f8      	b.n	801048e <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_SF) {
 801049c:	2b80      	cmp	r3, #128	; 0x80
 801049e:	d102      	bne.n	80104a6 <EEPROM_Load+0x41a>
      DevCfg.sf = val_int;
 80104a0:	4b4c      	ldr	r3, [pc, #304]	; (80105d4 <EEPROM_Load+0x548>)
 80104a2:	334f      	adds	r3, #79	; 0x4f
 80104a4:	e7f3      	b.n	801048e <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_BW) {
 80104a6:	2b88      	cmp	r3, #136	; 0x88
 80104a8:	d102      	bne.n	80104b0 <EEPROM_Load+0x424>
      DevCfg.bw = val_int;
 80104aa:	4b4a      	ldr	r3, [pc, #296]	; (80105d4 <EEPROM_Load+0x548>)
 80104ac:	3350      	adds	r3, #80	; 0x50
 80104ae:	e7ee      	b.n	801048e <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_CONFIRMED_MESSAGES) {
 80104b0:	2b90      	cmp	r3, #144	; 0x90
 80104b2:	d108      	bne.n	80104c6 <EEPROM_Load+0x43a>
      DevCfg.confirmedMsgs = val_int;
 80104b4:	9a07      	ldr	r2, [sp, #28]
 80104b6:	9b06      	ldr	r3, [sp, #24]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	1e5a      	subs	r2, r3, #1
 80104bc:	4193      	sbcs	r3, r2
 80104be:	4a45      	ldr	r2, [pc, #276]	; (80105d4 <EEPROM_Load+0x548>)
 80104c0:	3251      	adds	r2, #81	; 0x51
      DevCfg.dutyCycle = val_int;
 80104c2:	7013      	strb	r3, [r2, #0]
 80104c4:	e724      	b.n	8010310 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_ADAPTIVE_DATA_RATE) {
 80104c6:	2b98      	cmp	r3, #152	; 0x98
 80104c8:	d107      	bne.n	80104da <EEPROM_Load+0x44e>
      DevCfg.adaptiveDatarate = val_int;
 80104ca:	9a07      	ldr	r2, [sp, #28]
 80104cc:	9b06      	ldr	r3, [sp, #24]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	1e5a      	subs	r2, r3, #1
 80104d2:	4193      	sbcs	r3, r2
 80104d4:	4a3f      	ldr	r2, [pc, #252]	; (80105d4 <EEPROM_Load+0x548>)
 80104d6:	3252      	adds	r2, #82	; 0x52
 80104d8:	e7f3      	b.n	80104c2 <EEPROM_Load+0x436>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_RESPECT_DUTY_CYCLE) {
 80104da:	2ba0      	cmp	r3, #160	; 0xa0
 80104dc:	d107      	bne.n	80104ee <EEPROM_Load+0x462>
      DevCfg.dutyCycle = val_int;
 80104de:	9a07      	ldr	r2, [sp, #28]
 80104e0:	9b06      	ldr	r3, [sp, #24]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	1e5a      	subs	r2, r3, #1
 80104e6:	4193      	sbcs	r3, r2
 80104e8:	4a3a      	ldr	r2, [pc, #232]	; (80105d4 <EEPROM_Load+0x548>)
 80104ea:	3253      	adds	r2, #83	; 0x53
 80104ec:	e7e9      	b.n	80104c2 <EEPROM_Load+0x436>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TIMEBASE) {
 80104ee:	2ba8      	cmp	r3, #168	; 0xa8
 80104f0:	d103      	bne.n	80104fa <EEPROM_Load+0x46e>
      DevCfg.sendInterval = val_int;
 80104f2:	4b38      	ldr	r3, [pc, #224]	; (80105d4 <EEPROM_Load+0x548>)
 80104f4:	9a06      	ldr	r2, [sp, #24]
 80104f6:	655a      	str	r2, [r3, #84]	; 0x54
 80104f8:	e70a      	b.n	8010310 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_TRIGGER) {
 80104fa:	2bb0      	cmp	r3, #176	; 0xb0
 80104fc:	d102      	bne.n	8010504 <EEPROM_Load+0x478>
      DevCfg.sendTrigger = val_int;
 80104fe:	4b35      	ldr	r3, [pc, #212]	; (80105d4 <EEPROM_Load+0x548>)
 8010500:	3358      	adds	r3, #88	; 0x58
 8010502:	e7c4      	b.n	801048e <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_STRATEGY) {
 8010504:	2bb8      	cmp	r3, #184	; 0xb8
 8010506:	d102      	bne.n	801050e <EEPROM_Load+0x482>
      DevCfg.sendStrategy = val_int;
 8010508:	4b32      	ldr	r3, [pc, #200]	; (80105d4 <EEPROM_Load+0x548>)
 801050a:	3359      	adds	r3, #89	; 0x59
 801050c:	e7bf      	b.n	801048e <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD) {
 801050e:	2bc0      	cmp	r3, #192	; 0xc0
 8010510:	d10b      	bne.n	801052a <EEPROM_Load+0x49e>
      DevCfg.hdc2080_threshold = val_int;
 8010512:	4b30      	ldr	r3, [pc, #192]	; (80105d4 <EEPROM_Load+0x548>)
 8010514:	9a06      	ldr	r2, [sp, #24]
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_HIGH;
 8010516:	2103      	movs	r1, #3
      DevCfg.hdc2080_threshold = val_int;
 8010518:	65da      	str	r2, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_HIGH;
 801051a:	001a      	movs	r2, r3
 801051c:	325a      	adds	r2, #90	; 0x5a
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_LOW;
 801051e:	7011      	strb	r1, [r2, #0]
      DevCfg.useSensor.hdc2080 = true;
 8010520:	2204      	movs	r2, #4
 8010522:	336c      	adds	r3, #108	; 0x6c
 8010524:	7819      	ldrb	r1, [r3, #0]
      DevCfg.useSensor.bma400 = true;
 8010526:	430a      	orrs	r2, r1
 8010528:	e7ab      	b.n	8010482 <EEPROM_Load+0x3f6>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD) {
 801052a:	2bc8      	cmp	r3, #200	; 0xc8
 801052c:	d106      	bne.n	801053c <EEPROM_Load+0x4b0>
      DevCfg.hdc2080_threshold = val_int;
 801052e:	4b29      	ldr	r3, [pc, #164]	; (80105d4 <EEPROM_Load+0x548>)
 8010530:	9a06      	ldr	r2, [sp, #24]
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_LOW;
 8010532:	2102      	movs	r1, #2
      DevCfg.hdc2080_threshold = val_int;
 8010534:	65da      	str	r2, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_LOW;
 8010536:	001a      	movs	r2, r3
 8010538:	325a      	adds	r2, #90	; 0x5a
 801053a:	e7f0      	b.n	801051e <EEPROM_Load+0x492>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD) {
 801053c:	2bd0      	cmp	r3, #208	; 0xd0
 801053e:	d109      	bne.n	8010554 <EEPROM_Load+0x4c8>
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 8010540:	9806      	ldr	r0, [sp, #24]
 8010542:	9907      	ldr	r1, [sp, #28]
 8010544:	f002 fb73 	bl	8012c2e <PBDecodeSInt>
 8010548:	4b22      	ldr	r3, [pc, #136]	; (80105d4 <EEPROM_Load+0x548>)
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_HIGH;
 801054a:	2101      	movs	r1, #1
 801054c:	001a      	movs	r2, r3
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 801054e:	65d8      	str	r0, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_HIGH;
 8010550:	325a      	adds	r2, #90	; 0x5a
 8010552:	e7e4      	b.n	801051e <EEPROM_Load+0x492>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD) {
 8010554:	2bd8      	cmp	r3, #216	; 0xd8
 8010556:	d109      	bne.n	801056c <EEPROM_Load+0x4e0>
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 8010558:	9806      	ldr	r0, [sp, #24]
 801055a:	9907      	ldr	r1, [sp, #28]
 801055c:	f002 fb67 	bl	8012c2e <PBDecodeSInt>
 8010560:	4b1c      	ldr	r3, [pc, #112]	; (80105d4 <EEPROM_Load+0x548>)
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_LOW;
 8010562:	2100      	movs	r1, #0
 8010564:	001a      	movs	r2, r3
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 8010566:	65d8      	str	r0, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_LOW;
 8010568:	325a      	adds	r2, #90	; 0x5a
 801056a:	e7d8      	b.n	801051e <EEPROM_Load+0x492>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD) {
 801056c:	2be0      	cmp	r3, #224	; 0xe0
 801056e:	d108      	bne.n	8010582 <EEPROM_Load+0x4f6>
      DevCfg.sfh7776_threshold_upper = val_int;
 8010570:	4b18      	ldr	r3, [pc, #96]	; (80105d4 <EEPROM_Load+0x548>)
 8010572:	001a      	movs	r2, r3
 8010574:	3266      	adds	r2, #102	; 0x66
      DevCfg.sfh7776_threshold_lower = val_int;
 8010576:	9906      	ldr	r1, [sp, #24]
      DevCfg.useSensor.sfh7776 = true;
 8010578:	336c      	adds	r3, #108	; 0x6c
      DevCfg.sfh7776_threshold_lower = val_int;
 801057a:	8011      	strh	r1, [r2, #0]
      DevCfg.useSensor.sfh7776 = true;
 801057c:	2202      	movs	r2, #2
 801057e:	7819      	ldrb	r1, [r3, #0]
 8010580:	e7d1      	b.n	8010526 <EEPROM_Load+0x49a>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD) {
 8010582:	2be8      	cmp	r3, #232	; 0xe8
 8010584:	d103      	bne.n	801058e <EEPROM_Load+0x502>
      DevCfg.sfh7776_threshold_lower = val_int;
 8010586:	4b13      	ldr	r3, [pc, #76]	; (80105d4 <EEPROM_Load+0x548>)
 8010588:	001a      	movs	r2, r3
 801058a:	3268      	adds	r2, #104	; 0x68
 801058c:	e7f3      	b.n	8010576 <EEPROM_Load+0x4ea>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_THRESHOLD) {
 801058e:	2bf0      	cmp	r3, #240	; 0xf0
 8010590:	d106      	bne.n	80105a0 <EEPROM_Load+0x514>
      DevCfg.bma400_threshold = val_int;
 8010592:	4b10      	ldr	r3, [pc, #64]	; (80105d4 <EEPROM_Load+0x548>)
 8010594:	9a06      	ldr	r2, [sp, #24]
 8010596:	661a      	str	r2, [r3, #96]	; 0x60
      DevCfg.useSensor.bma400 = true;
 8010598:	336c      	adds	r3, #108	; 0x6c
 801059a:	2201      	movs	r2, #1
 801059c:	7819      	ldrb	r1, [r3, #0]
 801059e:	e7c2      	b.n	8010526 <EEPROM_Load+0x49a>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_CONFIGURE) {
 80105a0:	2bf8      	cmp	r3, #248	; 0xf8
 80105a2:	d105      	bne.n	80105b0 <EEPROM_Load+0x524>
      DevCfg.bma400_config = val_int;
 80105a4:	4b0b      	ldr	r3, [pc, #44]	; (80105d4 <EEPROM_Load+0x548>)
 80105a6:	9906      	ldr	r1, [sp, #24]
 80105a8:	001a      	movs	r2, r3
 80105aa:	3264      	adds	r2, #100	; 0x64
 80105ac:	8011      	strh	r1, [r2, #0]
 80105ae:	e7f3      	b.n	8010598 <EEPROM_Load+0x50c>
      DEBUG_MSG("EEPROM ERR <RD Undefined 0x"), DebugLE(msg + debug_fieldpos, len - debug_fieldpos);
 80105b0:	490a      	ldr	r1, [pc, #40]	; (80105dc <EEPROM_Load+0x550>)
 80105b2:	2000      	movs	r0, #0
 80105b4:	f7fb fac0 	bl	800bb38 <SEGGER_RTT_WriteString>
 80105b8:	1b79      	subs	r1, r7, r5
 80105ba:	9801      	ldr	r0, [sp, #4]
 80105bc:	b289      	uxth	r1, r1
 80105be:	f7ff fb3d 	bl	800fc3c <DebugLE>
      DBG_PRINTF(", TAGNR %u, TAGTYPE %u, Unknown key-value\n", tagnr, tagtype);
 80105c2:	9b02      	ldr	r3, [sp, #8]
 80105c4:	9a05      	ldr	r2, [sp, #20]
 80105c6:	4906      	ldr	r1, [pc, #24]	; (80105e0 <EEPROM_Load+0x554>)
 80105c8:	2000      	movs	r0, #0
 80105ca:	f7fb fc88 	bl	800bede <SEGGER_RTT_printf>
 80105ce:	e69f      	b.n	8010310 <EEPROM_Load+0x284>
      debug_msg = ", Out-of-bounds tag w/o value\n";
 80105d0:	4c04      	ldr	r4, [pc, #16]	; (80105e4 <EEPROM_Load+0x558>)
 80105d2:	e636      	b.n	8010242 <EEPROM_Load+0x1b6>
 80105d4:	200000e0 	.word	0x200000e0
 80105d8:	08081008 	.word	0x08081008
 80105dc:	080197a4 	.word	0x080197a4
 80105e0:	080197c0 	.word	0x080197c0
 80105e4:	08019751 	.word	0x08019751

080105e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80105e8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80105ea:	2404      	movs	r4, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80105ec:	2501      	movs	r5, #1
{
 80105ee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105f0:	2214      	movs	r2, #20
 80105f2:	2100      	movs	r1, #0
 80105f4:	a803      	add	r0, sp, #12
 80105f6:	f005 fcb4 	bl	8015f62 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80105fa:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 80105fc:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80105fe:	4b4f      	ldr	r3, [pc, #316]	; (801073c <MX_GPIO_Init+0x154>)
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010600:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010602:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SX126x_Reset_Pin, GPIO_PIN_RESET);
 8010604:	4f4e      	ldr	r7, [pc, #312]	; (8010740 <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010606:	4322      	orrs	r2, r4
 8010608:	62da      	str	r2, [r3, #44]	; 0x2c
 801060a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 801060c:	0030      	movs	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801060e:	4022      	ands	r2, r4
 8010610:	9200      	str	r2, [sp, #0]
 8010612:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010616:	432a      	orrs	r2, r5
 8010618:	62da      	str	r2, [r3, #44]	; 0x2c
 801061a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801061c:	402a      	ands	r2, r5
 801061e:	9201      	str	r2, [sp, #4]
 8010620:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010624:	430a      	orrs	r2, r1
 8010626:	62da      	str	r2, [r3, #44]	; 0x2c
 8010628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 801062a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801062c:	400b      	ands	r3, r1
 801062e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010630:	4944      	ldr	r1, [pc, #272]	; (8010744 <MX_GPIO_Init+0x15c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010632:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010634:	f7fc fe3a 	bl	800d2ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SX126x_Reset_Pin, GPIO_PIN_RESET);
 8010638:	2200      	movs	r2, #0
 801063a:	0038      	movs	r0, r7
 801063c:	2113      	movs	r1, #19
 801063e:	f7fc fe35 	bl	800d2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button0_Pin|Reed_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010642:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = Button0_Pin|Reed_Switch_Pin;
 8010644:	4b40      	ldr	r3, [pc, #256]	; (8010748 <MX_GPIO_Init+0x160>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010646:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = Button0_Pin|Reed_Switch_Pin;
 8010648:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801064a:	4b40      	ldr	r3, [pc, #256]	; (801074c <MX_GPIO_Init+0x164>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801064c:	9105      	str	r1, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801064e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010650:	ab03      	add	r3, sp, #12
 8010652:	0019      	movs	r1, r3
 8010654:	f7fc fd5e 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NFC_Int_Pin|LIGHT_Int_Pin;
 8010658:	4b3d      	ldr	r3, [pc, #244]	; (8010750 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801065a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = NFC_Int_Pin|LIGHT_Int_Pin;
 801065c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801065e:	4b3d      	ldr	r3, [pc, #244]	; (8010754 <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010660:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010662:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010664:	ab03      	add	r3, sp, #12
 8010666:	0019      	movs	r1, r3
 8010668:	f7fc fd54 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801066c:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = RF_Switch_Pin;
 801066e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010670:	2400      	movs	r4, #0
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 8010672:	ab03      	add	r3, sp, #12
 8010674:	0030      	movs	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010676:	9105      	str	r1, [sp, #20]
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 8010678:	0019      	movs	r1, r3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801067a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801067c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 801067e:	f7fc fd49 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_Int_Pin;
 8010682:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 8010684:	aa03      	add	r2, sp, #12
  GPIO_InitStruct.Pin = TEMP_Int_Pin;
 8010686:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010688:	4b33      	ldr	r3, [pc, #204]	; (8010758 <MX_GPIO_Init+0x170>)
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 801068a:	0011      	movs	r1, r2
 801068c:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801068e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010690:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 8010692:	f7fc fd3f 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010696:	2102      	movs	r1, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010698:	aa03      	add	r2, sp, #12
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
 801069a:	4b30      	ldr	r3, [pc, #192]	; (801075c <MX_GPIO_Init+0x174>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801069c:	0030      	movs	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801069e:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106a0:	0011      	movs	r1, r2
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
 80106a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106a4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106a6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106a8:	f7fc fd34 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80106ac:	2102      	movs	r1, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80106ae:	0038      	movs	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80106b0:	9105      	str	r1, [sp, #20]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80106b2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_1_Pin;
 80106b4:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106b8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80106ba:	f7fc fd2b 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_2_Pin|SX126x_Reset_Pin;
 80106be:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80106c0:	0038      	movs	r0, r7
 80106c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_2_Pin|SX126x_Reset_Pin;
 80106c4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106ca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80106cc:	f7fc fd22 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 80106d0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 80106d2:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 80106d4:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 80106d6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 80106d8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106da:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106dc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106de:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 80106e0:	f7fc fd18 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 80106e4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 80106e6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 80106e8:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 80106ea:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 80106ec:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80106ee:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80106f0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 80106f2:	f7fc fd0f 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX126x_DIO1_Pin;
 80106f6:	2320      	movs	r3, #32
 80106f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80106fa:	4b17      	ldr	r3, [pc, #92]	; (8010758 <MX_GPIO_Init+0x170>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 80106fc:	0038      	movs	r0, r7
 80106fe:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010700:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010702:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 8010704:	f7fc fd06 	bl	800d114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8010708:	0022      	movs	r2, r4
 801070a:	2103      	movs	r1, #3
 801070c:	2005      	movs	r0, #5
 801070e:	f7fc fa89 	bl	800cc24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8010712:	2005      	movs	r0, #5
 8010714:	f7fc fab0 	bl	800cc78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8010718:	0022      	movs	r2, r4
 801071a:	2103      	movs	r1, #3
 801071c:	2006      	movs	r0, #6
 801071e:	f7fc fa81 	bl	800cc24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8010722:	2006      	movs	r0, #6
 8010724:	f7fc faa8 	bl	800cc78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8010728:	0022      	movs	r2, r4
 801072a:	0029      	movs	r1, r5
 801072c:	2007      	movs	r0, #7
 801072e:	f7fc fa79 	bl	800cc24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8010732:	2007      	movs	r0, #7
 8010734:	f7fc faa0 	bl	800cc78 <HAL_NVIC_EnableIRQ>

}
 8010738:	b009      	add	sp, #36	; 0x24
 801073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073c:	40021000 	.word	0x40021000
 8010740:	50000400 	.word	0x50000400
 8010744:	00001114 	.word	0x00001114
 8010748:	00000201 	.word	0x00000201
 801074c:	10310000 	.word	0x10310000
 8010750:	00000402 	.word	0x00000402
 8010754:	10210000 	.word	0x10210000
 8010758:	10110000 	.word	0x10110000
 801075c:	00001010 	.word	0x00001010

08010760 <LEDBlinkTask>:
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, ledPin);
    HAL_Delay(1000);
  }
}

void LEDBlinkTask(void* info) {
 8010760:	b570      	push	{r4, r5, r6, lr}
  } else {
    CLEAR_BIT(EXTI->IMR, EXTI_IMR_IM0);
  }
#endif

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8010762:	2601      	movs	r6, #1
void LEDBlinkTask(void* info) {
 8010764:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8010766:	4d07      	ldr	r5, [pc, #28]	; (8010784 <LEDBlinkTask+0x24>)
  uint8_t useGreenColor = (uint32_t) info >> 1 & 0x1;
 8010768:	0842      	lsrs	r2, r0, #1
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801076a:	0031      	movs	r1, r6
 801076c:	0028      	movs	r0, r5
 801076e:	4032      	ands	r2, r6
 8010770:	f7fc fd9c 	bl	800d2ac <HAL_GPIO_WritePin>
  uint8_t useRedColor = (uint32_t) info >> 2 & 0x1;
 8010774:	08a2      	lsrs	r2, r4, #2
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, useRedColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8010776:	0028      	movs	r0, r5
 8010778:	4032      	ands	r2, r6
 801077a:	2102      	movs	r1, #2
 801077c:	f7fc fd96 	bl	800d2ac <HAL_GPIO_WritePin>
}
 8010780:	bd70      	pop	{r4, r5, r6, pc}
 8010782:	46c0      	nop			; (mov r8, r8)
 8010784:	50000400 	.word	0x50000400

08010788 <I2C_Scan>:
uint32_t I2C_Scan(void) {
 8010788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  DEBUG_MSG("Scanning I2C bus:\n");
 801078a:	2402      	movs	r4, #2
 801078c:	2000      	movs	r0, #0
  for(uint8_t k = 1; k < 128; k++) {
 801078e:	2780      	movs	r7, #128	; 0x80
  DEBUG_MSG("Scanning I2C bus:\n");
 8010790:	4910      	ldr	r1, [pc, #64]	; (80107d4 <I2C_Scan+0x4c>)
 8010792:	f7fb f9d1 	bl	800bb38 <SEGGER_RTT_WriteString>
  uint32_t device_count = 0;
 8010796:	2500      	movs	r5, #0
    HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, k << 1, 2, 2);
 8010798:	0026      	movs	r6, r4
  for(uint8_t k = 1; k < 128; k++) {
 801079a:	007f      	lsls	r7, r7, #1
    HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, k << 1, 2, 2);
 801079c:	0033      	movs	r3, r6
 801079e:	0032      	movs	r2, r6
 80107a0:	480d      	ldr	r0, [pc, #52]	; (80107d8 <I2C_Scan+0x50>)
 80107a2:	b2a1      	uxth	r1, r4
 80107a4:	f7fd fa30 	bl	800dc08 <HAL_I2C_IsDeviceReady>
    if (result == HAL_OK) {
 80107a8:	2800      	cmp	r0, #0
 80107aa:	d10d      	bne.n	80107c8 <I2C_Scan+0x40>
      DEBUG_PRINTF("0x%02x\n", k << 1); // Received an ACK at that address
 80107ac:	0022      	movs	r2, r4
 80107ae:	490b      	ldr	r1, [pc, #44]	; (80107dc <I2C_Scan+0x54>)
 80107b0:	f7fb fb95 	bl	800bede <SEGGER_RTT_printf>
      device_count++;
 80107b4:	3501      	adds	r5, #1
  for(uint8_t k = 1; k < 128; k++) {
 80107b6:	3402      	adds	r4, #2
 80107b8:	42bc      	cmp	r4, r7
 80107ba:	d1ef      	bne.n	801079c <I2C_Scan+0x14>
  DEBUG_MSG("\n");
 80107bc:	4908      	ldr	r1, [pc, #32]	; (80107e0 <I2C_Scan+0x58>)
 80107be:	2000      	movs	r0, #0
 80107c0:	f7fb f9ba 	bl	800bb38 <SEGGER_RTT_WriteString>
}
 80107c4:	0028      	movs	r0, r5
 80107c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      DEBUG_MSG("."); // No ACK received at that address
 80107c8:	4906      	ldr	r1, [pc, #24]	; (80107e4 <I2C_Scan+0x5c>)
 80107ca:	2000      	movs	r0, #0
 80107cc:	f7fb f9b4 	bl	800bb38 <SEGGER_RTT_WriteString>
 80107d0:	e7f1      	b.n	80107b6 <I2C_Scan+0x2e>
 80107d2:	46c0      	nop			; (mov r8, r8)
 80107d4:	08019a4b 	.word	0x08019a4b
 80107d8:	20001898 	.word	0x20001898
 80107dc:	0801a405 	.word	0x0801a405
 80107e0:	08018fe6 	.word	0x08018fe6
 80107e4:	0801980f 	.word	0x0801980f

080107e8 <getBatteryVoltage>:
uint32_t getBatteryVoltage() {
 80107e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  while (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK);
 80107ea:	4c18      	ldr	r4, [pc, #96]	; (801084c <getBatteryVoltage+0x64>)
 80107ec:	2100      	movs	r1, #0
 80107ee:	0020      	movs	r0, r4
 80107f0:	f7fc f9c8 	bl	800cb84 <HAL_ADCEx_Calibration_Start>
 80107f4:	2800      	cmp	r0, #0
 80107f6:	d1f8      	bne.n	80107ea <getBatteryVoltage+0x2>
  VREFINT_CAL = *p; // read the value at pointer address
 80107f8:	4b15      	ldr	r3, [pc, #84]	; (8010850 <getBatteryVoltage+0x68>)
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 80107fa:	2202      	movs	r2, #2
  VREFINT_CAL = *p; // read the value at pointer address
 80107fc:	881d      	ldrh	r5, [r3, #0]
  volatile uint16_t adc_value[2] = { 0, 0 };
 80107fe:	ab01      	add	r3, sp, #4
 8010800:	8018      	strh	r0, [r3, #0]
 8010802:	8058      	strh	r0, [r3, #2]
 8010804:	9b01      	ldr	r3, [sp, #4]
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 8010806:	4669      	mov	r1, sp
 8010808:	0020      	movs	r0, r4
  volatile uint16_t adc_value[2] = { 0, 0 };
 801080a:	9300      	str	r3, [sp, #0]
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 801080c:	f7fc f894 	bl	800c938 <HAL_ADC_Start_DMA>
  HAL_Delay(10);
 8010810:	200a      	movs	r0, #10
 8010812:	f7fb feed 	bl	800c5f0 <HAL_Delay>
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 8010816:	466b      	mov	r3, sp
  HAL_ADC_Stop_DMA(&hadc);
 8010818:	0020      	movs	r0, r4
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 801081a:	885e      	ldrh	r6, [r3, #2]
  HAL_ADC_Stop_DMA(&hadc);
 801081c:	f7fc f8d4 	bl	800c9c8 <HAL_ADC_Stop_DMA>
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 8010820:	0028      	movs	r0, r5
 8010822:	f7f2 f9d7 	bl	8002bd4 <__aeabi_ui2d>
 8010826:	2200      	movs	r2, #0
 8010828:	4b0a      	ldr	r3, [pc, #40]	; (8010854 <getBatteryVoltage+0x6c>)
 801082a:	f7f1 fb6f 	bl	8001f0c <__aeabi_dmul>
 801082e:	b2b6      	uxth	r6, r6
 8010830:	0004      	movs	r4, r0
 8010832:	0030      	movs	r0, r6
 8010834:	000d      	movs	r5, r1
 8010836:	f7f2 f99d 	bl	8002b74 <__aeabi_i2d>
 801083a:	0002      	movs	r2, r0
 801083c:	000b      	movs	r3, r1
 801083e:	0020      	movs	r0, r4
 8010840:	0029      	movs	r1, r5
 8010842:	f7f0 ff61 	bl	8001708 <__aeabi_ddiv>
 8010846:	f7ef fe9d 	bl	8000584 <__aeabi_d2uiz>
}
 801084a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 801084c:	20001788 	.word	0x20001788
 8010850:	1ff80078 	.word	0x1ff80078
 8010854:	40a77000 	.word	0x40a77000

08010858 <LEDBlink>:
 *   to prevent input overlay and therefore ambiguity.
 *   Thus Performing blinks while Button is masked by LEDBlink, is undefined behaviour.
 */
uint32_t LEDBlink(enum LEDBlinkPattern pattern) {
  struct task t;
  uint32_t when = tasks_ticks + 1;
 8010858:	4b3c      	ldr	r3, [pc, #240]	; (801094c <LEDBlink+0xf4>)
uint32_t LEDBlink(enum LEDBlinkPattern pattern) {
 801085a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t when = tasks_ticks + 1;
 801085c:	681d      	ldr	r5, [r3, #0]
  t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 801085e:	2302      	movs	r3, #2
uint32_t LEDBlink(enum LEDBlinkPattern pattern) {
 8010860:	b085      	sub	sp, #20
  t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 8010862:	9302      	str	r3, [sp, #8]
  t.when = when;
  t.cb = &LEDBlinkTask;
 8010864:	4b3a      	ldr	r3, [pc, #232]	; (8010950 <LEDBlink+0xf8>)
  uint32_t when = tasks_ticks + 1;
 8010866:	1c6c      	adds	r4, r5, #1
  t.cb = &LEDBlinkTask;
 8010868:	9303      	str	r3, [sp, #12]

  /* 1x Green Blinks 1s, Total 1s. */
  switch(pattern) {
 801086a:	2806      	cmp	r0, #6
 801086c:	d825      	bhi.n	80108ba <LEDBlink+0x62>
 801086e:	002e      	movs	r6, r5
 8010870:	360b      	adds	r6, #11
 8010872:	f7ef fc5b 	bl	800012c <__gnu_thumb1_case_uqi>
 8010876:	0b04      	.short	0x0b04
 8010878:	4c494625 	.word	0x4c494625
 801087c:	68          	.byte	0x68
 801087d:	00          	.byte	0x00
  case BlinkPattern_G: {
    tasks_add(t);
 801087e:	0020      	movs	r0, r4
 8010880:	9902      	ldr	r1, [sp, #8]
    break;
  }
  /* 1x Orange Blinks 1s. Total 1s. */
  case BlinkPattern_B: {
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_RED | LEDBLINK_COLOR_GREEN);
    tasks_add(t);
 8010882:	9a03      	ldr	r2, [sp, #12]
 8010884:	f003 fd2a 	bl	80142dc <tasks_add>
    t.arg = (void*) LEDBLINK_BUTTON_ENABLE;
    t.when = when + 10;
 8010888:	0034      	movs	r4, r6
 801088a:	e011      	b.n	80108b0 <LEDBlink+0x58>
    tasks_add(t);
 801088c:	0020      	movs	r0, r4
 801088e:	9902      	ldr	r1, [sp, #8]
    tasks_add(t);
 8010890:	9a03      	ldr	r2, [sp, #12]
 8010892:	f003 fd23 	bl	80142dc <tasks_add>
    tasks_add(t);
 8010896:	2100      	movs	r1, #0
 8010898:	9a03      	ldr	r2, [sp, #12]
 801089a:	0030      	movs	r0, r6
 801089c:	f003 fd1e 	bl	80142dc <tasks_add>
    t.when = when + 20;
 80108a0:	0028      	movs	r0, r5
    tasks_add(t);
 80108a2:	2102      	movs	r1, #2
    t.when = when + 30;
 80108a4:	002c      	movs	r4, r5
    tasks_add(t);
 80108a6:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 80108a8:	3015      	adds	r0, #21
    tasks_add(t);
 80108aa:	f003 fd17 	bl	80142dc <tasks_add>
    t.when = when + 30;
 80108ae:	341f      	adds	r4, #31
    tasks_add(t);
 80108b0:	0020      	movs	r0, r4
 80108b2:	2101      	movs	r1, #1
 80108b4:	9a03      	ldr	r2, [sp, #12]
 80108b6:	f003 fd11 	bl	80142dc <tasks_add>
    break;
  }
  }
  return t.when;
}
 80108ba:	0020      	movs	r0, r4
 80108bc:	b005      	add	sp, #20
 80108be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t.arg = (void*) LEDBLINK_BUTTON_DISABLE;
 80108c0:	2700      	movs	r7, #0
    tasks_add(t);
 80108c2:	0020      	movs	r0, r4
 80108c4:	9902      	ldr	r1, [sp, #8]
 80108c6:	9a03      	ldr	r2, [sp, #12]
 80108c8:	f003 fd08 	bl	80142dc <tasks_add>
    tasks_add(t);
 80108cc:	0039      	movs	r1, r7
 80108ce:	9a03      	ldr	r2, [sp, #12]
 80108d0:	0030      	movs	r0, r6
 80108d2:	f003 fd03 	bl	80142dc <tasks_add>
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 80108d6:	2402      	movs	r4, #2
    t.when = when + 20;
 80108d8:	0028      	movs	r0, r5
    tasks_add(t);
 80108da:	0021      	movs	r1, r4
 80108dc:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 80108de:	3015      	adds	r0, #21
    tasks_add(t);
 80108e0:	f003 fcfc 	bl	80142dc <tasks_add>
    t.when = when + 30;
 80108e4:	0028      	movs	r0, r5
    tasks_add(t);
 80108e6:	0039      	movs	r1, r7
 80108e8:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 30;
 80108ea:	301f      	adds	r0, #31
    tasks_add(t);
 80108ec:	f003 fcf6 	bl	80142dc <tasks_add>
    t.when = when + 40;
 80108f0:	0028      	movs	r0, r5
    tasks_add(t);
 80108f2:	0021      	movs	r1, r4
    t.when = when + 40;
 80108f4:	3029      	adds	r0, #41	; 0x29
    t.when = when + 50;
 80108f6:	002c      	movs	r4, r5
    tasks_add(t);
 80108f8:	9a03      	ldr	r2, [sp, #12]
 80108fa:	f003 fcef 	bl	80142dc <tasks_add>
    t.when = when + 50;
 80108fe:	3433      	adds	r4, #51	; 0x33
    tasks_add(t);
 8010900:	e7d6      	b.n	80108b0 <LEDBlink+0x58>
    tasks_add(t);
 8010902:	0020      	movs	r0, r4
 8010904:	2104      	movs	r1, #4
 8010906:	e7bc      	b.n	8010882 <LEDBlink+0x2a>
    tasks_add(t);
 8010908:	0020      	movs	r0, r4
 801090a:	2104      	movs	r1, #4
 801090c:	e7c0      	b.n	8010890 <LEDBlink+0x38>
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_RED);
 801090e:	2704      	movs	r7, #4
    tasks_add(t);
 8010910:	0020      	movs	r0, r4
    t.arg = (void*) LEDBLINK_BUTTON_DISABLE;
 8010912:	2400      	movs	r4, #0
    tasks_add(t);
 8010914:	0039      	movs	r1, r7
 8010916:	9a03      	ldr	r2, [sp, #12]
 8010918:	f003 fce0 	bl	80142dc <tasks_add>
    tasks_add(t);
 801091c:	0021      	movs	r1, r4
 801091e:	9a03      	ldr	r2, [sp, #12]
 8010920:	0030      	movs	r0, r6
 8010922:	f003 fcdb 	bl	80142dc <tasks_add>
    t.when = when + 20;
 8010926:	0028      	movs	r0, r5
    tasks_add(t);
 8010928:	0039      	movs	r1, r7
 801092a:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 801092c:	3015      	adds	r0, #21
    tasks_add(t);
 801092e:	f003 fcd5 	bl	80142dc <tasks_add>
    t.when = when + 30;
 8010932:	0028      	movs	r0, r5
    tasks_add(t);
 8010934:	0021      	movs	r1, r4
 8010936:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 30;
 8010938:	301f      	adds	r0, #31
    tasks_add(t);
 801093a:	f003 fccf 	bl	80142dc <tasks_add>
    t.when = when + 40;
 801093e:	0028      	movs	r0, r5
    tasks_add(t);
 8010940:	0039      	movs	r1, r7
    t.when = when + 40;
 8010942:	3029      	adds	r0, #41	; 0x29
 8010944:	e7d7      	b.n	80108f6 <LEDBlink+0x9e>
    tasks_add(t);
 8010946:	0020      	movs	r0, r4
 8010948:	2106      	movs	r1, #6
 801094a:	e79a      	b.n	8010882 <LEDBlink+0x2a>
 801094c:	20001b4c 	.word	0x20001b4c
 8010950:	08010761 	.word	0x08010761

08010954 <HW_EnterStopMode>:
  __HAL_RCC_PWR_CLK_ENABLE(); // Enable power control clock

  hwSlept = true;
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // | PWR_CR_CWUF
  HW_ExitStopMode();
}
 8010954:	4770      	bx	lr
	...

08010958 <HW_EraseEEPROM>:
  ST25DV_SetMBEN_Dyn(&St25Dv_Obj);

  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
}

void HW_EraseEEPROM(uint32_t address) {
 8010958:	b510      	push	{r4, lr}
 801095a:	0004      	movs	r4, r0
  HAL_FLASHEx_DATAEEPROM_Unlock();
 801095c:	f7fc fb7c 	bl	800d058 <HAL_FLASHEx_DATAEEPROM_Unlock>
  if (HAL_FLASHEx_DATAEEPROM_Erase(address) != HAL_OK) {
 8010960:	0020      	movs	r0, r4
 8010962:	f7fc fb9b 	bl	800d09c <HAL_FLASHEx_DATAEEPROM_Erase>
 8010966:	2800      	cmp	r0, #0
 8010968:	d004      	beq.n	8010974 <HW_EraseEEPROM+0x1c>
    DBG_PRINTF("ERROR ERASING EEPROM: 0x%02X!\n", address);
 801096a:	0022      	movs	r2, r4
 801096c:	2000      	movs	r0, #0
 801096e:	4903      	ldr	r1, [pc, #12]	; (801097c <HW_EraseEEPROM+0x24>)
 8010970:	f7fb fab5 	bl	800bede <SEGGER_RTT_printf>
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 8010974:	f7fc fb88 	bl	800d088 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8010978:	bd10      	pop	{r4, pc}
 801097a:	46c0      	nop			; (mov r8, r8)
 801097c:	08019a5e 	.word	0x08019a5e

08010980 <HW_ProgramEEPROM>:

void HW_ProgramEEPROM(uint32_t address, uint32_t data) {
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	000d      	movs	r5, r1
 8010984:	0004      	movs	r4, r0
  HAL_FLASHEx_DATAEEPROM_Unlock();
 8010986:	f7fc fb67 	bl	800d058 <HAL_FLASHEx_DATAEEPROM_Unlock>
  if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, address, data)
 801098a:	002a      	movs	r2, r5
 801098c:	0021      	movs	r1, r4
 801098e:	2002      	movs	r0, #2
 8010990:	f7fc fb96 	bl	800d0c0 <HAL_FLASHEx_DATAEEPROM_Program>
 8010994:	2800      	cmp	r0, #0
 8010996:	d004      	beq.n	80109a2 <HW_ProgramEEPROM+0x22>
      != HAL_OK) {
    DBG_PRINTF("ERROR PROGRAMMING EEPROM: 0x%02X!\n", address);
 8010998:	0022      	movs	r2, r4
 801099a:	2000      	movs	r0, #0
 801099c:	4902      	ldr	r1, [pc, #8]	; (80109a8 <HW_ProgramEEPROM+0x28>)
 801099e:	f7fb fa9e 	bl	800bede <SEGGER_RTT_printf>
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 80109a2:	f7fc fb71 	bl	800d088 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	08019a7d 	.word	0x08019a7d

080109ac <HW_ResetEEPROM>:

void HW_ResetEEPROM(void *addr, size_t size) {
 80109ac:	b570      	push	{r4, r5, r6, lr}
 80109ae:	0005      	movs	r5, r0
 80109b0:	000c      	movs	r4, r1
 80109b2:	002e      	movs	r6, r5
  HAL_FLASHEx_DATAEEPROM_Unlock();
 80109b4:	f7fc fb50 	bl	800d058 <HAL_FLASHEx_DATAEEPROM_Unlock>
  // (size + 3) / 4 is a method of rounding up integer division
  for(size_t i = 0; i < (size + 3) / 4; i++) {
 80109b8:	3403      	adds	r4, #3
 80109ba:	08a4      	lsrs	r4, r4, #2
 80109bc:	00a4      	lsls	r4, r4, #2
 80109be:	1964      	adds	r4, r4, r5
 80109c0:	42a6      	cmp	r6, r4
 80109c2:	d102      	bne.n	80109ca <HW_ResetEEPROM+0x1e>
    if (HAL_FLASHEx_DATAEEPROM_Erase((uint32_t)addr + i * 4) != HAL_OK) {
      DBG_PRINTF("ERROR CLEARING EEPROM: 0x%02X!\n", addr);
      Breakpoint();
    }
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 80109c4:	f7fc fb60 	bl	800d088 <HAL_FLASHEx_DATAEEPROM_Lock>

}
 80109c8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASHEx_DATAEEPROM_Erase((uint32_t)addr + i * 4) != HAL_OK) {
 80109ca:	0030      	movs	r0, r6
 80109cc:	f7fc fb66 	bl	800d09c <HAL_FLASHEx_DATAEEPROM_Erase>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d005      	beq.n	80109e0 <HW_ResetEEPROM+0x34>
      DBG_PRINTF("ERROR CLEARING EEPROM: 0x%02X!\n", addr);
 80109d4:	002a      	movs	r2, r5
 80109d6:	4903      	ldr	r1, [pc, #12]	; (80109e4 <HW_ResetEEPROM+0x38>)
 80109d8:	2000      	movs	r0, #0
 80109da:	f7fb fa80 	bl	800bede <SEGGER_RTT_printf>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds - 1, seconds - 1 <= UINT16_MAX ?
      RTC_WAKEUPCLOCK_CK_SPRE_16BITS : RTC_WAKEUPCLOCK_CK_SPRE_17BITS);
}

void Breakpoint(void) {
  asm("nop");
 80109de:	46c0      	nop			; (mov r8, r8)
  for(size_t i = 0; i < (size + 3) / 4; i++) {
 80109e0:	3604      	adds	r6, #4
 80109e2:	e7ed      	b.n	80109c0 <HW_ResetEEPROM+0x14>
 80109e4:	08019aa0 	.word	0x08019aa0

080109e8 <HW_WriteEEPROM>:
void HW_WriteEEPROM(void *addr, const void *buf, size_t size) {
 80109e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ea:	b087      	sub	sp, #28
 80109ec:	0004      	movs	r4, r0
 80109ee:	0015      	movs	r5, r2
 80109f0:	9102      	str	r1, [sp, #8]
  if(HAL_FLASHEx_DATAEEPROM_Unlock()) goto err;
 80109f2:	f7fc fb31 	bl	800d058 <HAL_FLASHEx_DATAEEPROM_Unlock>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d147      	bne.n	8010a8a <HW_WriteEEPROM+0xa2>
  if((uintptr_t)addr % 4) {
 80109fa:	2303      	movs	r3, #3
 80109fc:	0020      	movs	r0, r4
 80109fe:	4018      	ands	r0, r3
 8010a00:	421c      	tst	r4, r3
 8010a02:	d01a      	beq.n	8010a3a <HW_WriteEEPROM+0x52>
    size_t off = (uintptr_t)addr % 4, len = 4 - off > size ? size : 4 - off;
 8010a04:	2604      	movs	r6, #4
 8010a06:	1a36      	subs	r6, r6, r0
 8010a08:	42ae      	cmp	r6, r5
 8010a0a:	d900      	bls.n	8010a0e <HW_WriteEEPROM+0x26>
 8010a0c:	002e      	movs	r6, r5
    uint32_t *prev = (uint32_t*)((uintptr_t)addr >> 2 << 2), word = *prev;
 8010a0e:	0027      	movs	r7, r4
 8010a10:	439f      	bics	r7, r3
 8010a12:	683b      	ldr	r3, [r7, #0]
    memcpy((char*)&word + off, buf, len);
 8010a14:	0032      	movs	r2, r6
    uint32_t *prev = (uint32_t*)((uintptr_t)addr >> 2 << 2), word = *prev;
 8010a16:	9305      	str	r3, [sp, #20]
    memcpy((char*)&word + off, buf, len);
 8010a18:	ab05      	add	r3, sp, #20
 8010a1a:	9902      	ldr	r1, [sp, #8]
 8010a1c:	1818      	adds	r0, r3, r0
 8010a1e:	f005 fa97 	bl	8015f50 <memcpy>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)prev, word)) goto err;
 8010a22:	0039      	movs	r1, r7
 8010a24:	2002      	movs	r0, #2
 8010a26:	9a05      	ldr	r2, [sp, #20]
 8010a28:	f7fc fb4a 	bl	800d0c0 <HAL_FLASHEx_DATAEEPROM_Program>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d12c      	bne.n	8010a8a <HW_WriteEEPROM+0xa2>
    addr = prev + 1, buf = (char*)buf + len, size -= len;
 8010a30:	9b02      	ldr	r3, [sp, #8]
 8010a32:	1d3c      	adds	r4, r7, #4
 8010a34:	199b      	adds	r3, r3, r6
 8010a36:	9302      	str	r3, [sp, #8]
 8010a38:	1bad      	subs	r5, r5, r6
  assert((uintptr_t)addr % 4 == 0);
 8010a3a:	2703      	movs	r7, #3
 8010a3c:	0026      	movs	r6, r4
 8010a3e:	403e      	ands	r6, r7
 8010a40:	423c      	tst	r4, r7
 8010a42:	d01c      	beq.n	8010a7e <HW_WriteEEPROM+0x96>
 8010a44:	21d9      	movs	r1, #217	; 0xd9
 8010a46:	4b17      	ldr	r3, [pc, #92]	; (8010aa4 <HW_WriteEEPROM+0xbc>)
 8010a48:	4a17      	ldr	r2, [pc, #92]	; (8010aa8 <HW_WriteEEPROM+0xc0>)
 8010a4a:	4818      	ldr	r0, [pc, #96]	; (8010aac <HW_WriteEEPROM+0xc4>)
 8010a4c:	0049      	lsls	r1, r1, #1
 8010a4e:	f005 fa0b 	bl	8015e68 <__assert_func>
    memcpy(&word, (char*)buf + i * 4, i * 4 + 4 > size ? (word = ((uint32_t*)addr)[i], size % 4) : 4);
 8010a52:	9b02      	ldr	r3, [sp, #8]
 8010a54:	2204      	movs	r2, #4
 8010a56:	1999      	adds	r1, r3, r6
 8010a58:	1d33      	adds	r3, r6, #4
 8010a5a:	9303      	str	r3, [sp, #12]
 8010a5c:	429d      	cmp	r5, r3
 8010a5e:	d203      	bcs.n	8010a68 <HW_WriteEEPROM+0x80>
 8010a60:	002a      	movs	r2, r5
 8010a62:	59a3      	ldr	r3, [r4, r6]
 8010a64:	403a      	ands	r2, r7
 8010a66:	9305      	str	r3, [sp, #20]
 8010a68:	a805      	add	r0, sp, #20
 8010a6a:	f005 fa71 	bl	8015f50 <memcpy>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)addr + i * 4, word)) goto err;
 8010a6e:	2002      	movs	r0, #2
 8010a70:	9a05      	ldr	r2, [sp, #20]
 8010a72:	19a1      	adds	r1, r4, r6
 8010a74:	f7fc fb24 	bl	800d0c0 <HAL_FLASHEx_DATAEEPROM_Program>
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	d106      	bne.n	8010a8a <HW_WriteEEPROM+0xa2>
  for(size_t i = 0; i * 4 < size; i++) {
 8010a7c:	9e03      	ldr	r6, [sp, #12]
 8010a7e:	42b5      	cmp	r5, r6
 8010a80:	d8e7      	bhi.n	8010a52 <HW_WriteEEPROM+0x6a>
  if(HAL_FLASHEx_DATAEEPROM_Lock()) goto err;
 8010a82:	f7fc fb01 	bl	800d088 <HAL_FLASHEx_DATAEEPROM_Lock>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d009      	beq.n	8010a9e <HW_WriteEEPROM+0xb6>
  DBG_PRINTF("EEPROM <WR ERR %p buf:%p size:%zu err:%" PRIx32 "\n", addr, buf, size, HAL_FLASH_GetError());
 8010a8a:	f7fc faa5 	bl	800cfd8 <HAL_FLASH_GetError>
 8010a8e:	0022      	movs	r2, r4
 8010a90:	9001      	str	r0, [sp, #4]
 8010a92:	9b02      	ldr	r3, [sp, #8]
 8010a94:	2000      	movs	r0, #0
 8010a96:	4906      	ldr	r1, [pc, #24]	; (8010ab0 <HW_WriteEEPROM+0xc8>)
 8010a98:	9500      	str	r5, [sp, #0]
 8010a9a:	f7fb fa20 	bl	800bede <SEGGER_RTT_printf>
}
 8010a9e:	b007      	add	sp, #28
 8010aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aa2:	46c0      	nop			; (mov r8, r8)
 8010aa4:	08019ac0 	.word	0x08019ac0
 8010aa8:	08019b32 	.word	0x08019b32
 8010aac:	08019ad9 	.word	0x08019ad9
 8010ab0:	08019aeb 	.word	0x08019aeb

08010ab4 <HW_ChangePW>:
void HW_ChangePW(uint32_t password) {
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	0004      	movs	r4, r0
  HW_EraseEEPROM(EEPROM_PW);
 8010ab8:	4e08      	ldr	r6, [pc, #32]	; (8010adc <HW_ChangePW+0x28>)
  HW_EraseEEPROM(EEPROM_PW_COMPLEMENT);
 8010aba:	4d09      	ldr	r5, [pc, #36]	; (8010ae0 <HW_ChangePW+0x2c>)
  HW_EraseEEPROM(EEPROM_PW);
 8010abc:	0030      	movs	r0, r6
 8010abe:	f7ff ff4b 	bl	8010958 <HW_EraseEEPROM>
  HW_EraseEEPROM(EEPROM_PW_COMPLEMENT);
 8010ac2:	0028      	movs	r0, r5
 8010ac4:	f7ff ff48 	bl	8010958 <HW_EraseEEPROM>
  HW_ProgramEEPROM(EEPROM_PW,             password);
 8010ac8:	0030      	movs	r0, r6
 8010aca:	0021      	movs	r1, r4
 8010acc:	f7ff ff58 	bl	8010980 <HW_ProgramEEPROM>
  HW_ProgramEEPROM(EEPROM_PW_COMPLEMENT, ~password);
 8010ad0:	0028      	movs	r0, r5
 8010ad2:	43e1      	mvns	r1, r4
 8010ad4:	f7ff ff54 	bl	8010980 <HW_ProgramEEPROM>
}
 8010ad8:	bd70      	pop	{r4, r5, r6, pc}
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	08080008 	.word	0x08080008
 8010ae0:	0808000c 	.word	0x0808000c

08010ae4 <HW_RTCGetMsTime>:
uint32_t HW_RTCGetMsTime(void) {
 8010ae4:	b570      	push	{r4, r5, r6, lr}
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010ae6:	4e16      	ldr	r6, [pc, #88]	; (8010b40 <HW_RTCGetMsTime+0x5c>)
uint32_t HW_RTCGetMsTime(void) {
 8010ae8:	b090      	sub	sp, #64	; 0x40
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010aea:	ac02      	add	r4, sp, #8
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010aec:	ad01      	add	r5, sp, #4
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010aee:	0021      	movs	r1, r4
 8010af0:	2200      	movs	r2, #0
 8010af2:	0030      	movs	r0, r6
 8010af4:	f7fe fce6 	bl	800f4c4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010af8:	2200      	movs	r2, #0
 8010afa:	0029      	movs	r1, r5
 8010afc:	0030      	movs	r0, r6
 8010afe:	f7fe fd0b 	bl	800f518 <HAL_RTC_GetDate>
  timeinfo.tm_sec  = ts.Seconds;
 8010b02:	78a3      	ldrb	r3, [r4, #2]
  seconds = mktime(&timeinfo);
 8010b04:	a807      	add	r0, sp, #28
  timeinfo.tm_sec  = ts.Seconds;
 8010b06:	9307      	str	r3, [sp, #28]
  timeinfo.tm_min  = ts.Minutes;
 8010b08:	7863      	ldrb	r3, [r4, #1]
 8010b0a:	9308      	str	r3, [sp, #32]
  timeinfo.tm_hour = ts.Hours;
 8010b0c:	7823      	ldrb	r3, [r4, #0]
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010b0e:	24fa      	movs	r4, #250	; 0xfa
  timeinfo.tm_hour = ts.Hours;
 8010b10:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_mday = ds.Date;
 8010b12:	78ab      	ldrb	r3, [r5, #2]
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010b14:	00a4      	lsls	r4, r4, #2
  timeinfo.tm_mday = ds.Date;
 8010b16:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_mon  = ds.Month - 1;
 8010b18:	786b      	ldrb	r3, [r5, #1]
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_year = ds.Year;
 8010b1e:	78eb      	ldrb	r3, [r5, #3]
 8010b20:	930c      	str	r3, [sp, #48]	; 0x30
  seconds = mktime(&timeinfo);
 8010b22:	f005 faf1 	bl	8016108 <mktime>
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010b26:	9904      	ldr	r1, [sp, #16]
  seconds = mktime(&timeinfo);
 8010b28:	0005      	movs	r5, r0
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010b2a:	9803      	ldr	r0, [sp, #12]
 8010b2c:	1a08      	subs	r0, r1, r0
 8010b2e:	4360      	muls	r0, r4
 8010b30:	3101      	adds	r1, #1
 8010b32:	f7ef fb19 	bl	8000168 <__udivsi3>
 8010b36:	436c      	muls	r4, r5
 8010b38:	1900      	adds	r0, r0, r4
}
 8010b3a:	b010      	add	sp, #64	; 0x40
 8010b3c:	bd70      	pop	{r4, r5, r6, pc}
 8010b3e:	46c0      	nop			; (mov r8, r8)
 8010b40:	20001994 	.word	0x20001994

08010b44 <HW_RTCGetSTime>:
uint32_t HW_RTCGetSTime(void) {
 8010b44:	b570      	push	{r4, r5, r6, lr}
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010b46:	4e0f      	ldr	r6, [pc, #60]	; (8010b84 <HW_RTCGetSTime+0x40>)
uint32_t HW_RTCGetSTime(void) {
 8010b48:	b090      	sub	sp, #64	; 0x40
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010b4a:	ad02      	add	r5, sp, #8
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010b4c:	ac01      	add	r4, sp, #4
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010b4e:	0029      	movs	r1, r5
 8010b50:	2200      	movs	r2, #0
 8010b52:	0030      	movs	r0, r6
 8010b54:	f7fe fcb6 	bl	800f4c4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010b58:	2200      	movs	r2, #0
 8010b5a:	0021      	movs	r1, r4
 8010b5c:	0030      	movs	r0, r6
 8010b5e:	f7fe fcdb 	bl	800f518 <HAL_RTC_GetDate>
  timeinfo.tm_hour = ts.Hours;
 8010b62:	782b      	ldrb	r3, [r5, #0]
  seconds = mktime(&timeinfo);
 8010b64:	a807      	add	r0, sp, #28
  timeinfo.tm_hour = ts.Hours;
 8010b66:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_min  = ts.Minutes;
 8010b68:	786b      	ldrb	r3, [r5, #1]
 8010b6a:	9308      	str	r3, [sp, #32]
  timeinfo.tm_sec  = ts.Seconds;
 8010b6c:	78ab      	ldrb	r3, [r5, #2]
 8010b6e:	9307      	str	r3, [sp, #28]
  timeinfo.tm_mday = ds.Date;
 8010b70:	78a3      	ldrb	r3, [r4, #2]
 8010b72:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_mon  = ds.Month;
 8010b74:	7863      	ldrb	r3, [r4, #1]
 8010b76:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_year = ds.Year;
 8010b78:	78e3      	ldrb	r3, [r4, #3]
 8010b7a:	930c      	str	r3, [sp, #48]	; 0x30
  seconds = mktime(&timeinfo);
 8010b7c:	f005 fac4 	bl	8016108 <mktime>
}
 8010b80:	b010      	add	sp, #64	; 0x40
 8010b82:	bd70      	pop	{r4, r5, r6, pc}
 8010b84:	20001994 	.word	0x20001994

08010b88 <HW_ExitStopMode>:
  if(!hwSlept)
 8010b88:	4b21      	ldr	r3, [pc, #132]	; (8010c10 <HW_ExitStopMode+0x88>)
void HW_ExitStopMode() {
 8010b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(!hwSlept)
 8010b8c:	781a      	ldrb	r2, [r3, #0]
 8010b8e:	2a00      	cmp	r2, #0
 8010b90:	d03c      	beq.n	8010c0c <HW_ExitStopMode+0x84>
  hwSlept = false;
 8010b92:	2500      	movs	r5, #0
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8010b94:	2007      	movs	r0, #7
  hwSlept = false;
 8010b96:	701d      	strb	r5, [r3, #0]
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8010b98:	f7fc f8a2 	bl	800cce0 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8010b9c:	2005      	movs	r0, #5
 8010b9e:	f7fc f89f 	bl	800cce0 <HAL_NVIC_ClearPendingIRQ>
  MX_GPIO_Init();
 8010ba2:	f7ff fd21 	bl	80105e8 <MX_GPIO_Init>
  DBG_PRINTF("WAKE UP! RTC:%d SysTick:%d\n", HW_RTCGetSTime(), HAL_GetTick());
 8010ba6:	f7ff ffcd 	bl	8010b44 <HW_RTCGetSTime>
 8010baa:	0004      	movs	r4, r0
 8010bac:	f7fb fd1a 	bl	800c5e4 <HAL_GetTick>
 8010bb0:	0022      	movs	r2, r4
 8010bb2:	0003      	movs	r3, r0
 8010bb4:	4917      	ldr	r1, [pc, #92]	; (8010c14 <HW_ExitStopMode+0x8c>)
 8010bb6:	0028      	movs	r0, r5
 8010bb8:	f7fb f991 	bl	800bede <SEGGER_RTT_printf>
  HAL_GPIO_WritePin(DC_Conv_Mode_GPIO_Port, DC_Conv_Mode_Pin, GPIO_PIN_SET);
 8010bbc:	2180      	movs	r1, #128	; 0x80
 8010bbe:	20a0      	movs	r0, #160	; 0xa0
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	0049      	lsls	r1, r1, #1
 8010bc4:	05c0      	lsls	r0, r0, #23
 8010bc6:	f7fc fb71 	bl	800d2ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_Switch_GPIO_Port, RF_Switch_Pin, GPIO_PIN_SET);
 8010bca:	20a0      	movs	r0, #160	; 0xa0
 8010bcc:	2201      	movs	r2, #1
 8010bce:	2104      	movs	r1, #4
 8010bd0:	05c0      	lsls	r0, r0, #23
 8010bd2:	f7fc fb6b 	bl	800d2ac <HAL_GPIO_WritePin>
  if(!I2C_Scan()) {
 8010bd6:	f7ff fdd7 	bl	8010788 <I2C_Scan>
 8010bda:	42a8      	cmp	r0, r5
 8010bdc:	d103      	bne.n	8010be6 <HW_ExitStopMode+0x5e>
    MX_I2C1_Init();
 8010bde:	f000 f835 	bl	8010c4c <MX_I2C1_Init>
    I2C_Scan();
 8010be2:	f7ff fdd1 	bl	8010788 <I2C_Scan>
  SX126xReset();
 8010be6:	f7f3 fcb1 	bl	800454c <SX126xReset>
  SX126xIoRfSwitchInit();
 8010bea:	f7f3 fc9e 	bl	800452a <SX126xIoRfSwitchInit>
  Radio.SetPublicNetwork(true);
 8010bee:	4c0a      	ldr	r4, [pc, #40]	; (8010c18 <HW_ExitStopMode+0x90>)
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010bf4:	9301      	str	r3, [sp, #4]
 8010bf6:	4798      	blx	r3
  Radio.Sleep();
 8010bf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010bfa:	9301      	str	r3, [sp, #4]
 8010bfc:	4798      	blx	r3
  ST25DV_SetMBEN_Dyn(&St25Dv_Obj);
 8010bfe:	4807      	ldr	r0, [pc, #28]	; (8010c1c <HW_ExitStopMode+0x94>)
 8010c00:	f7fb fb35 	bl	800c26e <ST25DV_SetMBEN_Dyn>
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 8010c04:	211a      	movs	r1, #26
 8010c06:	4806      	ldr	r0, [pc, #24]	; (8010c20 <HW_ExitStopMode+0x98>)
 8010c08:	f7fd fd0a 	bl	800e620 <HAL_LPTIM_Counter_Start_IT>
}
 8010c0c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8010c0e:	46c0      	nop			; (mov r8, r8)
 8010c10:	20001840 	.word	0x20001840
 8010c14:	08019b16 	.word	0x08019b16
 8010c18:	0801a9e0 	.word	0x0801a9e0
 8010c1c:	20001968 	.word	0x20001968
 8010c20:	200018f8 	.word	0x200018f8

08010c24 <HW_RTCWUTSet>:
void HW_RTCWUTSet(uint32_t seconds) {
 8010c24:	b510      	push	{r4, lr}
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds - 1, seconds - 1 <= UINT16_MAX ?
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d100      	bne.n	8010c2c <HW_RTCWUTSet+0x8>
 8010c2a:	3001      	adds	r0, #1
 8010c2c:	2380      	movs	r3, #128	; 0x80
 8010c2e:	1e41      	subs	r1, r0, #1
 8010c30:	2204      	movs	r2, #4
 8010c32:	025b      	lsls	r3, r3, #9
 8010c34:	4299      	cmp	r1, r3
 8010c36:	d300      	bcc.n	8010c3a <HW_RTCWUTSet+0x16>
 8010c38:	3202      	adds	r2, #2
 8010c3a:	4802      	ldr	r0, [pc, #8]	; (8010c44 <HW_RTCWUTSet+0x20>)
 8010c3c:	f7fe fc8e 	bl	800f55c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8010c40:	bd10      	pop	{r4, pc}
 8010c42:	46c0      	nop			; (mov r8, r8)
 8010c44:	20001994 	.word	0x20001994

08010c48 <Breakpoint>:
  asm("nop");
 8010c48:	46c0      	nop			; (mov r8, r8)
  // asm("bkpt 0x44");
}
 8010c4a:	4770      	bx	lr

08010c4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010c4c:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8010c4e:	4b14      	ldr	r3, [pc, #80]	; (8010ca0 <MX_I2C1_Init+0x54>)
 8010c50:	4c14      	ldr	r4, [pc, #80]	; (8010ca4 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00000000;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010c52:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8010c54:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000000;
 8010c56:	2300      	movs	r3, #0
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010c58:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000000;
 8010c5a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010c5c:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010c5e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010c60:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010c62:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010c64:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010c66:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010c68:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010c6a:	f7fc fcd5 	bl	800d618 <HAL_I2C_Init>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d001      	beq.n	8010c76 <MX_I2C1_Init+0x2a>
  {
    Error_Handler();
 8010c72:	f001 f9a9 	bl	8011fc8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010c76:	2100      	movs	r1, #0
 8010c78:	0020      	movs	r0, r4
 8010c7a:	f7fd fb43 	bl	800e304 <HAL_I2CEx_ConfigAnalogFilter>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d001      	beq.n	8010c86 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
 8010c82:	f001 f9a1 	bl	8011fc8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010c86:	2100      	movs	r1, #0
 8010c88:	0020      	movs	r0, r4
 8010c8a:	f7fd fb61 	bl	800e350 <HAL_I2CEx_ConfigDigitalFilter>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d001      	beq.n	8010c96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010c92:	f001 f999 	bl	8011fc8 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8010c96:	2080      	movs	r0, #128	; 0x80
 8010c98:	0140      	lsls	r0, r0, #5
 8010c9a:	f7fd fb7d 	bl	800e398 <HAL_I2CEx_EnableFastModePlus>

}
 8010c9e:	bd10      	pop	{r4, pc}
 8010ca0:	40005400 	.word	0x40005400
 8010ca4:	20001898 	.word	0x20001898

08010ca8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010ca8:	b530      	push	{r4, r5, lr}
 8010caa:	0005      	movs	r5, r0
 8010cac:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cae:	2214      	movs	r2, #20
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	a801      	add	r0, sp, #4
 8010cb4:	f005 f955 	bl	8015f62 <memset>
  if(i2cHandle->Instance==I2C1)
 8010cb8:	4b1f      	ldr	r3, [pc, #124]	; (8010d38 <HAL_I2C_MspInit+0x90>)
 8010cba:	682a      	ldr	r2, [r5, #0]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d139      	bne.n	8010d34 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010cc0:	2102      	movs	r1, #2
 8010cc2:	4c1e      	ldr	r4, [pc, #120]	; (8010d3c <HAL_I2C_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cc4:	481e      	ldr	r0, [pc, #120]	; (8010d40 <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010cc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010cc8:	430a      	orrs	r2, r1
 8010cca:	62e2      	str	r2, [r4, #44]	; 0x2c
 8010ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cce:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010cd0:	400b      	ands	r3, r1
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010cd6:	23c0      	movs	r3, #192	; 0xc0
 8010cd8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010cda:	3bae      	subs	r3, #174	; 0xae
 8010cdc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cde:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010ce0:	3b11      	subs	r3, #17
 8010ce2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ce4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8010ce6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ce8:	f7fc fa14 	bl	800d114 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010cec:	2380      	movs	r3, #128	; 0x80
 8010cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010cf0:	039b      	lsls	r3, r3, #14
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	63a3      	str	r3, [r4, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8010cf6:	4c13      	ldr	r4, [pc, #76]	; (8010d44 <HAL_I2C_MspInit+0x9c>)
 8010cf8:	4b13      	ldr	r3, [pc, #76]	; (8010d48 <HAL_I2C_MspInit+0xa0>)
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010cfa:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8010cfc:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8010cfe:	2306      	movs	r3, #6
 8010d00:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010d02:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8010d04:	0020      	movs	r0, r4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010d06:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010d08:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010d0a:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010d0c:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010d0e:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8010d10:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010d12:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8010d14:	f7fb fff2 	bl	800ccfc <HAL_DMA_Init>
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d001      	beq.n	8010d20 <HAL_I2C_MspInit+0x78>
    {
      Error_Handler();
 8010d1c:	f001 f954 	bl	8011fc8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8010d20:	2200      	movs	r2, #0
 8010d22:	2017      	movs	r0, #23
 8010d24:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8010d26:	63ec      	str	r4, [r5, #60]	; 0x3c
 8010d28:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8010d2a:	f7fb ff7b 	bl	800cc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8010d2e:	2017      	movs	r0, #23
 8010d30:	f7fb ffa2 	bl	800cc78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8010d34:	b007      	add	sp, #28
 8010d36:	bd30      	pop	{r4, r5, pc}
 8010d38:	40005400 	.word	0x40005400
 8010d3c:	40021000 	.word	0x40021000
 8010d40:	50000400 	.word	0x50000400
 8010d44:	20001850 	.word	0x20001850
 8010d48:	40020030 	.word	0x40020030

08010d4c <DBG_PrintBuffer>:
  DBG_PRINTF("EDGE %u->%u, HOLD %10u, GAP %10u, TS %10u, LPTIM %10u%s\n", lastEdge, currEdge, hold, gap, now, tasks_ticks, debug_msg);
  lastEdge = currEdge;
  return;
}

static void DBG_PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	0014      	movs	r4, r2
 8010d50:	000d      	movs	r5, r1
  DBG_PRINTF("%s0x", pre);
 8010d52:	0002      	movs	r2, r0
 8010d54:	490b      	ldr	r1, [pc, #44]	; (8010d84 <DBG_PrintBuffer+0x38>)
 8010d56:	2000      	movs	r0, #0
static void DBG_PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8010d58:	001e      	movs	r6, r3
  DBG_PRINTF("%s0x", pre);
 8010d5a:	f7fb f8c0 	bl	800bede <SEGGER_RTT_printf>
  if(len) do {
 8010d5e:	3c01      	subs	r4, #1
 8010d60:	b2a4      	uxth	r4, r4
 8010d62:	192c      	adds	r4, r5, r4
    DBG_PRINTF("%02x", buf[--len]);
 8010d64:	7822      	ldrb	r2, [r4, #0]
 8010d66:	2000      	movs	r0, #0
 8010d68:	4907      	ldr	r1, [pc, #28]	; (8010d88 <DBG_PrintBuffer+0x3c>)
 8010d6a:	f7fb f8b8 	bl	800bede <SEGGER_RTT_printf>
  } while(len);
 8010d6e:	0023      	movs	r3, r4
 8010d70:	3c01      	subs	r4, #1
 8010d72:	429d      	cmp	r5, r3
 8010d74:	d1f6      	bne.n	8010d64 <DBG_PrintBuffer+0x18>
  DBG_PRINTF("%s", post);
 8010d76:	0032      	movs	r2, r6
 8010d78:	4904      	ldr	r1, [pc, #16]	; (8010d8c <DBG_PrintBuffer+0x40>)
 8010d7a:	2000      	movs	r0, #0
 8010d7c:	f7fb f8af 	bl	800bede <SEGGER_RTT_printf>
}
 8010d80:	bd70      	pop	{r4, r5, r6, pc}
 8010d82:	46c0      	nop			; (mov r8, r8)
 8010d84:	08019b41 	.word	0x08019b41
 8010d88:	080196f0 	.word	0x080196f0
 8010d8c:	080197eb 	.word	0x080197eb

08010d90 <ReedSwitchISR>:

#if defined(STX)
void ReedSwitchISR() {
  struct task t;

  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Reed_Switch_GPIO_Port, Reed_Switch_Pin);
 8010d90:	2180      	movs	r1, #128	; 0x80
 8010d92:	20a0      	movs	r0, #160	; 0xa0
void ReedSwitchISR() {
 8010d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Reed_Switch_GPIO_Port, Reed_Switch_Pin);
 8010d96:	0089      	lsls	r1, r1, #2
void ReedSwitchISR() {
 8010d98:	b089      	sub	sp, #36	; 0x24
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Reed_Switch_GPIO_Port, Reed_Switch_Pin);
 8010d9a:	05c0      	lsls	r0, r0, #23
 8010d9c:	f7fc fa80 	bl	800d2a0 <HAL_GPIO_ReadPin>
 8010da0:	0004      	movs	r4, r0
  uint32_t hold, gap, now = HW_RTCGetMsTime();
 8010da2:	f7ff fe9f 	bl	8010ae4 <HW_RTCGetMsTime>
 8010da6:	0005      	movs	r5, r0
  static uint32_t lastFall = 0;
  static uint32_t lastRise = 0;
  static uint8_t  lastEdge = 0;
  const char *debug_msg = "";

  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8010da8:	2c00      	cmp	r4, #0
 8010daa:	d106      	bne.n	8010dba <ReedSwitchISR+0x2a>
 8010dac:	4b26      	ldr	r3, [pc, #152]	; (8010e48 <ReedSwitchISR+0xb8>)
 8010dae:	681e      	ldr	r6, [r3, #0]
 8010db0:	1b86      	subs	r6, r0, r6
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8010db2:	4b25      	ldr	r3, [pc, #148]	; (8010e48 <ReedSwitchISR+0xb8>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	1b5b      	subs	r3, r3, r5
 8010db8:	e005      	b.n	8010dc6 <ReedSwitchISR+0x36>
  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8010dba:	4b24      	ldr	r3, [pc, #144]	; (8010e4c <ReedSwitchISR+0xbc>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	1a1e      	subs	r6, r3, r0
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8010dc0:	1ac3      	subs	r3, r0, r3
 8010dc2:	2c01      	cmp	r4, #1
 8010dc4:	d1f5      	bne.n	8010db2 <ReedSwitchISR+0x22>
 8010dc6:	9307      	str	r3, [sp, #28]

  /* Debounce */
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8010dc8:	4b21      	ldr	r3, [pc, #132]	; (8010e50 <ReedSwitchISR+0xc0>)
 8010dca:	781a      	ldrb	r2, [r3, #0]
    debug_msg = ", DEBOUNCE";
 8010dcc:	4b21      	ldr	r3, [pc, #132]	; (8010e54 <ReedSwitchISR+0xc4>)
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8010dce:	42a2      	cmp	r2, r4
 8010dd0:	d027      	beq.n	8010e22 <ReedSwitchISR+0x92>
 8010dd2:	4f1d      	ldr	r7, [pc, #116]	; (8010e48 <ReedSwitchISR+0xb8>)
 8010dd4:	6839      	ldr	r1, [r7, #0]
 8010dd6:	1a6a      	subs	r2, r5, r1
 8010dd8:	2a64      	cmp	r2, #100	; 0x64
 8010dda:	d922      	bls.n	8010e22 <ReedSwitchISR+0x92>
 8010ddc:	4b1b      	ldr	r3, [pc, #108]	; (8010e4c <ReedSwitchISR+0xbc>)
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	1aab      	subs	r3, r5, r2
 8010de2:	469c      	mov	ip, r3
 8010de4:	4660      	mov	r0, ip
    debug_msg = ", DEBOUNCE";
 8010de6:	4b1b      	ldr	r3, [pc, #108]	; (8010e54 <ReedSwitchISR+0xc4>)
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8010de8:	2864      	cmp	r0, #100	; 0x64
 8010dea:	d91a      	bls.n	8010e22 <ReedSwitchISR+0x92>
    goto exit;
  }

  lastRise = currEdge == GPIO_PIN_SET   ? now : lastRise;
 8010dec:	2c01      	cmp	r4, #1
 8010dee:	d100      	bne.n	8010df2 <ReedSwitchISR+0x62>
 8010df0:	0029      	movs	r1, r5
 8010df2:	6039      	str	r1, [r7, #0]
  lastFall = currEdge == GPIO_PIN_RESET ? now : lastFall;
 8010df4:	2c00      	cmp	r4, #0
 8010df6:	d100      	bne.n	8010dfa <ReedSwitchISR+0x6a>
 8010df8:	002a      	movs	r2, r5
 8010dfa:	4b14      	ldr	r3, [pc, #80]	; (8010e4c <ReedSwitchISR+0xbc>)
 8010dfc:	601a      	str	r2, [r3, #0]
  if(currEdge == GPIO_PIN_RESET && hold <= 1000) {
    debug_msg = ", SCHEDULE Press";
    LEDBlink(BlinkPattern_G);
    detectedGesture = 1, enqueueToSend(EVENT, LRW_B0_TRIGGER_REED_SWITCH);
  } else {
    debug_msg = ", GESTURE Undefined Press";
 8010dfe:	4b16      	ldr	r3, [pc, #88]	; (8010e58 <ReedSwitchISR+0xc8>)
  if(currEdge == GPIO_PIN_RESET && hold <= 1000) {
 8010e00:	2c00      	cmp	r4, #0
 8010e02:	d10e      	bne.n	8010e22 <ReedSwitchISR+0x92>
 8010e04:	22fa      	movs	r2, #250	; 0xfa
 8010e06:	0092      	lsls	r2, r2, #2
 8010e08:	4296      	cmp	r6, r2
 8010e0a:	d80a      	bhi.n	8010e22 <ReedSwitchISR+0x92>
    LEDBlink(BlinkPattern_G);
 8010e0c:	0020      	movs	r0, r4
 8010e0e:	f7ff fd23 	bl	8010858 <LEDBlink>
    detectedGesture = 1, enqueueToSend(EVENT, LRW_B0_TRIGGER_REED_SWITCH);
 8010e12:	2201      	movs	r2, #1
 8010e14:	4b11      	ldr	r3, [pc, #68]	; (8010e5c <ReedSwitchISR+0xcc>)
 8010e16:	2108      	movs	r1, #8
 8010e18:	2002      	movs	r0, #2
 8010e1a:	701a      	strb	r2, [r3, #0]
 8010e1c:	f000 fec6 	bl	8011bac <enqueueToSend>
    debug_msg = ", SCHEDULE Press";
 8010e20:	4b0f      	ldr	r3, [pc, #60]	; (8010e60 <ReedSwitchISR+0xd0>)
  }

exit:
  DBG_PRINTF("EDGE %u->%u, HOLD %10u, GAP %10u, TS %10u, LPTIM %10u%s\n", lastEdge, currEdge, hold, gap, now, tasks_ticks, debug_msg);
 8010e22:	4a10      	ldr	r2, [pc, #64]	; (8010e64 <ReedSwitchISR+0xd4>)
 8010e24:	2000      	movs	r0, #0
 8010e26:	6811      	ldr	r1, [r2, #0]
 8010e28:	4a09      	ldr	r2, [pc, #36]	; (8010e50 <ReedSwitchISR+0xc0>)
 8010e2a:	7812      	ldrb	r2, [r2, #0]
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	9b07      	ldr	r3, [sp, #28]
 8010e30:	9103      	str	r1, [sp, #12]
 8010e32:	9301      	str	r3, [sp, #4]
 8010e34:	490c      	ldr	r1, [pc, #48]	; (8010e68 <ReedSwitchISR+0xd8>)
 8010e36:	0023      	movs	r3, r4
 8010e38:	9502      	str	r5, [sp, #8]
 8010e3a:	9600      	str	r6, [sp, #0]
 8010e3c:	f7fb f84f 	bl	800bede <SEGGER_RTT_printf>
  lastEdge = currEdge;
 8010e40:	4b03      	ldr	r3, [pc, #12]	; (8010e50 <ReedSwitchISR+0xc0>)
 8010e42:	701c      	strb	r4, [r3, #0]
  return;

}
 8010e44:	b009      	add	sp, #36	; 0x24
 8010e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e48:	200018ec 	.word	0x200018ec
 8010e4c:	200018e8 	.word	0x200018e8
 8010e50:	200018e4 	.word	0x200018e4
 8010e54:	08019b8c 	.word	0x08019b8c
 8010e58:	08019b46 	.word	0x08019b46
 8010e5c:	20001961 	.word	0x20001961
 8010e60:	08019bd0 	.word	0x08019bd0
 8010e64:	20001b4c 	.word	0x20001b4c
 8010e68:	08019b97 	.word	0x08019b97

08010e6c <NFCISR>:
 *        NFC comms doc:
 *          /MESSAGE_FORMAT_NFC.md
 *        Bootldr commit log:
 *          664ec8186463d2e7f5d8676ce9745a5a89fdbd50 at /hw/stm32-update-bootloader
 */
void NFCISR(void) {
 8010e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e6e:	b0c7      	sub	sp, #284	; 0x11c
  struct NFC_State nfc;
  /* Password state */
  static bool pw_valid = false;
  static uint32_t pw_timestamp;

  nfc_activity = HAL_GetTick();
 8010e70:	f7fb fbb8 	bl	800c5e4 <HAL_GetTick>
 8010e74:	4bb3      	ldr	r3, [pc, #716]	; (8011144 <NFCISR+0x2d8>)

  /* Write default password, if no password preset */
  if(~*(uint32_t*)EEPROM_PW != *(uint32_t*)EEPROM_PW_COMPLEMENT) {
 8010e76:	4ab4      	ldr	r2, [pc, #720]	; (8011148 <NFCISR+0x2dc>)
  nfc_activity = HAL_GetTick();
 8010e78:	6018      	str	r0, [r3, #0]
  if(~*(uint32_t*)EEPROM_PW != *(uint32_t*)EEPROM_PW_COMPLEMENT) {
 8010e7a:	4bb4      	ldr	r3, [pc, #720]	; (801114c <NFCISR+0x2e0>)
 8010e7c:	6812      	ldr	r2, [r2, #0]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	43db      	mvns	r3, r3
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d002      	beq.n	8010e8c <NFCISR+0x20>
    HW_ChangePW(ST25DV_PASSWORD);
 8010e86:	48b2      	ldr	r0, [pc, #712]	; (8011150 <NFCISR+0x2e4>)
 8010e88:	f7ff fe14 	bl	8010ab4 <HW_ChangePW>
  }

  /* Timout privileged session */
  if(pw_valid && (HW_RTCGetMsTime() < pw_timestamp || HW_RTCGetMsTime() >= pw_timestamp + NFC_PWTIMEOUT)) pw_valid = false;
 8010e8c:	4eb1      	ldr	r6, [pc, #708]	; (8011154 <NFCISR+0x2e8>)
 8010e8e:	7833      	ldrb	r3, [r6, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <NFCISR+0x38>
 8010e94:	f7ff fe26 	bl	8010ae4 <HW_RTCGetMsTime>
 8010e98:	4caf      	ldr	r4, [pc, #700]	; (8011158 <NFCISR+0x2ec>)
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	4298      	cmp	r0, r3
 8010e9e:	d250      	bcs.n	8010f42 <NFCISR+0xd6>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	7033      	strb	r3, [r6, #0]
   * 2) mailbox length    3) mailbox 1st byte
   *
   * Describing the cause of interrupt, whether mailbox needs to be read,
   * and peek at first byte, in case its fw upload, precluding further readout.
   * */
  if(NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_ITSTS_DYN_REG, (void*)&nfc, 4)) return;
 8010ea4:	ac05      	add	r4, sp, #20
 8010ea6:	2304      	movs	r3, #4
 8010ea8:	0022      	movs	r2, r4
 8010eaa:	20a6      	movs	r0, #166	; 0xa6
 8010eac:	49ab      	ldr	r1, [pc, #684]	; (801115c <NFCISR+0x2f0>)
 8010eae:	f001 fc35 	bl	801271c <NFC_ReadReg>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d000      	beq.n	8010eb8 <NFCISR+0x4c>
 8010eb6:	e142      	b.n	801113e <NFCISR+0x2d2>
  DBG_PRINTF("NFC IRQ IT_STS:0x%02x MB_CTRL:0x%02x MB_LEN:0x%02x, Interrupt\n", nfc.it_sts, nfc.mb_ctrl, nfc.mb_len);
 8010eb8:	78a1      	ldrb	r1, [r4, #2]
 8010eba:	7863      	ldrb	r3, [r4, #1]
 8010ebc:	7822      	ldrb	r2, [r4, #0]
 8010ebe:	9100      	str	r1, [sp, #0]
 8010ec0:	49a7      	ldr	r1, [pc, #668]	; (8011160 <NFCISR+0x2f4>)
 8010ec2:	f7fb f80c 	bl	800bede <SEGGER_RTT_printf>

  /* Mailbox must have incoming data (put by RF) atleast 2 bytes */
  if(~nfc.it_sts & ST25DV_ITSTS_DYN_RFPUTMSG_MASK || !nfc.mb_len) return;
 8010ec6:	7823      	ldrb	r3, [r4, #0]
 8010ec8:	069b      	lsls	r3, r3, #26
 8010eca:	d400      	bmi.n	8010ece <NFCISR+0x62>
 8010ecc:	e137      	b.n	801113e <NFCISR+0x2d2>
 8010ece:	78a3      	ldrb	r3, [r4, #2]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d100      	bne.n	8010ed6 <NFCISR+0x6a>
 8010ed4:	e133      	b.n	801113e <NFCISR+0x2d2>

  /* FW update triggers reboot to bootloader */
  if(pw_valid && nfc.mb[MB_FCTCODE] == MB_R2HFIRMWAREUPDATE) {
 8010ed6:	7833      	ldrb	r3, [r6, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d012      	beq.n	8010f02 <NFCISR+0x96>
 8010edc:	78e3      	ldrb	r3, [r4, #3]
 8010ede:	2b04      	cmp	r3, #4
 8010ee0:	d10f      	bne.n	8010f02 <NFCISR+0x96>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, 1, ", Firmware Update Message\n");
 8010ee2:	2117      	movs	r1, #23
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	4b9f      	ldr	r3, [pc, #636]	; (8011164 <NFCISR+0x2f8>)
 8010ee8:	4469      	add	r1, sp
 8010eea:	489f      	ldr	r0, [pc, #636]	; (8011168 <NFCISR+0x2fc>)
 8010eec:	f7ff ff2e 	bl	8010d4c <DBG_PrintBuffer>

    /* Tell bootloader to listen NFC for 2 minutes and not require password */
    HW_EraseEEPROM(EEPROM_BOOTMODE);
 8010ef0:	489e      	ldr	r0, [pc, #632]	; (801116c <NFCISR+0x300>)
 8010ef2:	f7ff fd31 	bl	8010958 <HW_EraseEEPROM>
    HW_ProgramEEPROM(EEPROM_BOOTMODE, BOOTMODE_WAITNFC_MASK | BOOTMODE_PASSOK_MASK | BOOTMODE_KEEPNFC_MASK);
 8010ef6:	2107      	movs	r1, #7
 8010ef8:	489c      	ldr	r0, [pc, #624]	; (801116c <NFCISR+0x300>)
 8010efa:	f7ff fd41 	bl	8010980 <HW_ProgramEEPROM>


    /* Reboot, with mailbox blocking due partial read, thus retain ST25DV state across boot */
    HAL_NVIC_SystemReset();
 8010efe:	f7fb fec7 	bl	800cc90 <HAL_NVIC_SystemReset>
  }

  /* Read Mailbox */
  if((r = NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG + 1, nfc.mb + 1, nfc.mb_len))) return;
 8010f02:	20a6      	movs	r0, #166	; 0xa6
 8010f04:	78a3      	ldrb	r3, [r4, #2]
 8010f06:	499a      	ldr	r1, [pc, #616]	; (8011170 <NFCISR+0x304>)
 8010f08:	aa06      	add	r2, sp, #24
 8010f0a:	f001 fc07 	bl	801271c <NFC_ReadReg>
 8010f0e:	1e07      	subs	r7, r0, #0
 8010f10:	d000      	beq.n	8010f14 <NFCISR+0xa8>
 8010f12:	e114      	b.n	801113e <NFCISR+0x2d2>
  /* Parse frame */
  switch(nfc.mb[MB_FCTCODE]) {
  case MB_R2HGETCONFIG:
  case MB_R2HGETSENSOR: {
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8010f14:	78a2      	ldrb	r2, [r4, #2]
  switch(nfc.mb[MB_FCTCODE]) {
 8010f16:	78e5      	ldrb	r5, [r4, #3]
 8010f18:	4893      	ldr	r0, [pc, #588]	; (8011168 <NFCISR+0x2fc>)
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8010f1a:	3201      	adds	r2, #1
  switch(nfc.mb[MB_FCTCODE]) {
 8010f1c:	2d21      	cmp	r5, #33	; 0x21
 8010f1e:	d100      	bne.n	8010f22 <NFCISR+0xb6>
 8010f20:	e0aa      	b.n	8011078 <NFCISR+0x20c>
 8010f22:	d816      	bhi.n	8010f52 <NFCISR+0xe6>
 8010f24:	2d10      	cmp	r5, #16
 8010f26:	d100      	bne.n	8010f2a <NFCISR+0xbe>
 8010f28:	e146      	b.n	80111b8 <NFCISR+0x34c>
 8010f2a:	2d20      	cmp	r5, #32
 8010f2c:	d05a      	beq.n	8010fe4 <NFCISR+0x178>
 8010f2e:	2d08      	cmp	r5, #8
 8010f30:	d100      	bne.n	8010f34 <NFCISR+0xc8>
 8010f32:	e0c3      	b.n	80110bc <NFCISR+0x250>

    /* Reset Firmware */
    HAL_NVIC_SystemReset();
  }
  default:
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Undefined Message\n");
 8010f34:	2117      	movs	r1, #23
 8010f36:	78a2      	ldrb	r2, [r4, #2]
 8010f38:	4b8e      	ldr	r3, [pc, #568]	; (8011174 <NFCISR+0x308>)
 8010f3a:	488b      	ldr	r0, [pc, #556]	; (8011168 <NFCISR+0x2fc>)
 8010f3c:	3201      	adds	r2, #1
 8010f3e:	4469      	add	r1, sp
 8010f40:	e097      	b.n	8011072 <NFCISR+0x206>
  if(pw_valid && (HW_RTCGetMsTime() < pw_timestamp || HW_RTCGetMsTime() >= pw_timestamp + NFC_PWTIMEOUT)) pw_valid = false;
 8010f42:	f7ff fdcf 	bl	8010ae4 <HW_RTCGetMsTime>
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	4a8b      	ldr	r2, [pc, #556]	; (8011178 <NFCISR+0x30c>)
 8010f4a:	189b      	adds	r3, r3, r2
 8010f4c:	4298      	cmp	r0, r3
 8010f4e:	d2a7      	bcs.n	8010ea0 <NFCISR+0x34>
 8010f50:	e7a8      	b.n	8010ea4 <NFCISR+0x38>
  switch(nfc.mb[MB_FCTCODE]) {
 8010f52:	2d22      	cmp	r5, #34	; 0x22
 8010f54:	d04c      	beq.n	8010ff0 <NFCISR+0x184>
 8010f56:	2dff      	cmp	r5, #255	; 0xff
 8010f58:	d1ec      	bne.n	8010f34 <NFCISR+0xc8>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Factory Reset Message\n");
 8010f5a:	2117      	movs	r1, #23
 8010f5c:	4b87      	ldr	r3, [pc, #540]	; (801117c <NFCISR+0x310>)
 8010f5e:	4469      	add	r1, sp
 8010f60:	f7ff fef4 	bl	8010d4c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 5) break;
 8010f64:	78a3      	ldrb	r3, [r4, #2]
 8010f66:	2b04      	cmp	r3, #4
 8010f68:	d000      	beq.n	8010f6c <NFCISR+0x100>
 8010f6a:	e0e8      	b.n	801113e <NFCISR+0x2d2>
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HFACTORYRESET, MB_COMMAND, MB_NOERROR, MB_NOTCHAINED, 0x00}, 5)) break;
 8010f6c:	3313      	adds	r3, #19
 8010f6e:	ae03      	add	r6, sp, #12
 8010f70:	446b      	add	r3, sp
 8010f72:	2205      	movs	r2, #5
 8010f74:	0031      	movs	r1, r6
 8010f76:	0018      	movs	r0, r3
 8010f78:	7035      	strb	r5, [r6, #0]
 8010f7a:	7077      	strb	r7, [r6, #1]
 8010f7c:	70b7      	strb	r7, [r6, #2]
 8010f7e:	70f7      	strb	r7, [r6, #3]
 8010f80:	7137      	strb	r7, [r6, #4]
 8010f82:	f004 ffd7 	bl	8015f34 <memcmp>
 8010f86:	2800      	cmp	r0, #0
 8010f88:	d000      	beq.n	8010f8c <NFCISR+0x120>
 8010f8a:	e0d8      	b.n	801113e <NFCISR+0x2d2>
    for(size_t i = 0; i < 1536; i++) {
 8010f8c:	4d77      	ldr	r5, [pc, #476]	; (801116c <NFCISR+0x300>)
      HW_EraseEEPROM(DATA_EEPROM_BASE + i * 4);
 8010f8e:	0028      	movs	r0, r5
 8010f90:	f7ff fce2 	bl	8010958 <HW_EraseEEPROM>
    for(size_t i = 0; i < 1536; i++) {
 8010f94:	4b7a      	ldr	r3, [pc, #488]	; (8011180 <NFCISR+0x314>)
 8010f96:	3504      	adds	r5, #4
 8010f98:	429d      	cmp	r5, r3
 8010f9a:	d1f8      	bne.n	8010f8e <NFCISR+0x122>
    const uint8_t response[5] = {MB_R2HFACTORYRESET, MB_RESPONSE, MB_NOERROR, MB_NOTCHAINED, 0x00};
 8010f9c:	4979      	ldr	r1, [pc, #484]	; (8011184 <NFCISR+0x318>)
 8010f9e:	2205      	movs	r2, #5
 8010fa0:	310a      	adds	r1, #10
 8010fa2:	0030      	movs	r0, r6
 8010fa4:	f004 ffd4 	bl	8015f50 <memcpy>
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8010fa8:	2305      	movs	r3, #5
 8010faa:	0032      	movs	r2, r6
 8010fac:	20a6      	movs	r0, #166	; 0xa6
 8010fae:	4976      	ldr	r1, [pc, #472]	; (8011188 <NFCISR+0x31c>)
 8010fb0:	f001 fc20 	bl	80127f4 <NFC_WriteReg>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d105      	bne.n	8010fc4 <NFCISR+0x158>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Factory Reset Message\n");
 8010fb8:	2205      	movs	r2, #5
 8010fba:	4b70      	ldr	r3, [pc, #448]	; (801117c <NFCISR+0x310>)
 8010fbc:	4873      	ldr	r0, [pc, #460]	; (801118c <NFCISR+0x320>)
 8010fbe:	a903      	add	r1, sp, #12
 8010fc0:	f7ff fec4 	bl	8010d4c <DBG_PrintBuffer>
    for(uint32_t t = HAL_GetTick() + 30000; HAL_GetTick() < t && ~nfc.it_sts & ST25DV_ITSTS_DYN_RFGETMSG_MASK;) {
 8010fc4:	f7fb fb0e 	bl	800c5e4 <HAL_GetTick>
 8010fc8:	2640      	movs	r6, #64	; 0x40
 8010fca:	4b71      	ldr	r3, [pc, #452]	; (8011190 <NFCISR+0x324>)
 8010fcc:	18c5      	adds	r5, r0, r3
 8010fce:	f7fb fb09 	bl	800c5e4 <HAL_GetTick>
 8010fd2:	42a8      	cmp	r0, r5
 8010fd4:	d203      	bcs.n	8010fde <NFCISR+0x172>
 8010fd6:	7823      	ldrb	r3, [r4, #0]
 8010fd8:	4233      	tst	r3, r6
 8010fda:	d100      	bne.n	8010fde <NFCISR+0x172>
 8010fdc:	e128      	b.n	8011230 <NFCISR+0x3c4>
    HAL_NVIC_SystemReset();
 8010fde:	f7fb fe57 	bl	800cc90 <HAL_NVIC_SystemReset>
 8010fe2:	e7a7      	b.n	8010f34 <NFCISR+0xc8>
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
 8010fe4:	79e3      	ldrb	r3, [r4, #7]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d031      	beq.n	801104e <NFCISR+0x1e2>
 8010fea:	7a23      	ldrb	r3, [r4, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d02e      	beq.n	801104e <NFCISR+0x1e2>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8010ff0:	4d68      	ldr	r5, [pc, #416]	; (8011194 <NFCISR+0x328>)
 8010ff2:	2117      	movs	r1, #23
 8010ff4:	002b      	movs	r3, r5
 8010ff6:	4469      	add	r1, sp
 8010ff8:	f7ff fea8 	bl	8010d4c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 < MB_DATA) break;
 8010ffc:	78a3      	ldrb	r3, [r4, #2]
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	d800      	bhi.n	8011004 <NFCISR+0x198>
 8011002:	e09c      	b.n	801113e <NFCISR+0x2d2>
    if(nfc.mb[MB_LENGTH] > 1) break;
 8011004:	79e3      	ldrb	r3, [r4, #7]
 8011006:	2b01      	cmp	r3, #1
 8011008:	d900      	bls.n	801100c <NFCISR+0x1a0>
 801100a:	e098      	b.n	801113e <NFCISR+0x2d2>
    if(memcmp(nfc.mb + MB_CMDRESP, (uint8_t[3]){MB_COMMAND, MB_NOERROR, MB_NOTCHAINED}, 3)) break;
 801100c:	2300      	movs	r3, #0
 801100e:	a903      	add	r1, sp, #12
 8011010:	2203      	movs	r2, #3
 8011012:	700b      	strb	r3, [r1, #0]
 8011014:	704b      	strb	r3, [r1, #1]
 8011016:	708b      	strb	r3, [r1, #2]
 8011018:	a806      	add	r0, sp, #24
 801101a:	f004 ff8b 	bl	8015f34 <memcmp>
 801101e:	2800      	cmp	r0, #0
 8011020:	d000      	beq.n	8011024 <NFCISR+0x1b8>
 8011022:	e08c      	b.n	801113e <NFCISR+0x2d2>
    nfc.mb[MB_LENGTH] = (is_conf ? PBEncodeMsg_DeviceConfiguration : PBEncodeMsg_DeviceSensors)(nfc.mb + MB_DATA, sizeof nfc.mb - MB_DATA, pw_valid);
 8011024:	4b5c      	ldr	r3, [pc, #368]	; (8011198 <NFCISR+0x32c>)
 8011026:	2f00      	cmp	r7, #0
 8011028:	d100      	bne.n	801102c <NFCISR+0x1c0>
 801102a:	4b5c      	ldr	r3, [pc, #368]	; (801119c <NFCISR+0x330>)
 801102c:	7832      	ldrb	r2, [r6, #0]
 801102e:	21fb      	movs	r1, #251	; 0xfb
 8011030:	a807      	add	r0, sp, #28
 8011032:	4798      	blx	r3
    nfc.mb[MB_CMDRESP] = MB_RESPONSE;
 8011034:	2201      	movs	r2, #1
    nfc.mb[MB_LENGTH] = (is_conf ? PBEncodeMsg_DeviceConfiguration : PBEncodeMsg_DeviceSensors)(nfc.mb + MB_DATA, sizeof nfc.mb - MB_DATA, pw_valid);
 8011036:	b2c3      	uxtb	r3, r0
 8011038:	71e3      	strb	r3, [r4, #7]
    nfc.mb[MB_CMDRESP] = MB_RESPONSE;
 801103a:	7122      	strb	r2, [r4, #4]
    assert(nfc.mb[MB_LENGTH] <= sizeof nfc.mb - MB_DATA);
 801103c:	2bfb      	cmp	r3, #251	; 0xfb
 801103e:	d909      	bls.n	8011054 <NFCISR+0x1e8>
 8011040:	21a9      	movs	r1, #169	; 0xa9
 8011042:	4b57      	ldr	r3, [pc, #348]	; (80111a0 <NFCISR+0x334>)
 8011044:	4a57      	ldr	r2, [pc, #348]	; (80111a4 <NFCISR+0x338>)
 8011046:	4858      	ldr	r0, [pc, #352]	; (80111a8 <NFCISR+0x33c>)
 8011048:	0049      	lsls	r1, r1, #1
 801104a:	f004 ff0d 	bl	8015e68 <__assert_func>
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
 801104e:	2701      	movs	r7, #1
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8011050:	4d56      	ldr	r5, [pc, #344]	; (80111ac <NFCISR+0x340>)
 8011052:	e7ce      	b.n	8010ff2 <NFCISR+0x186>
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, nfc.mb, nfc.mb[MB_LENGTH] + MB_DATA))
 8011054:	2217      	movs	r2, #23
 8011056:	20a6      	movs	r0, #166	; 0xa6
 8011058:	494b      	ldr	r1, [pc, #300]	; (8011188 <NFCISR+0x31c>)
 801105a:	3305      	adds	r3, #5
 801105c:	446a      	add	r2, sp
 801105e:	f001 fbc9 	bl	80127f4 <NFC_WriteReg>
 8011062:	2800      	cmp	r0, #0
 8011064:	d16b      	bne.n	801113e <NFCISR+0x2d2>
      DBG_PrintBuffer("NFC >TX ", nfc.mb, nfc.mb[MB_LENGTH] + MB_DATA, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8011066:	2117      	movs	r1, #23
 8011068:	002b      	movs	r3, r5
 801106a:	79e2      	ldrb	r2, [r4, #7]
 801106c:	4469      	add	r1, sp
 801106e:	3205      	adds	r2, #5
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Set Configure Message\n");
 8011070:	4846      	ldr	r0, [pc, #280]	; (801118c <NFCISR+0x320>)
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Undefined Message\n");
 8011072:	f7ff fe6b 	bl	8010d4c <DBG_PrintBuffer>
    break;
 8011076:	e062      	b.n	801113e <NFCISR+0x2d2>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Set Configure Message\n");
 8011078:	2117      	movs	r1, #23
 801107a:	4b4d      	ldr	r3, [pc, #308]	; (80111b0 <NFCISR+0x344>)
 801107c:	4469      	add	r1, sp
 801107e:	f7ff fe65 	bl	8010d4c <DBG_PrintBuffer>
    PBDecodeMsg(nfc.mb + MB_DATA, nfc.mb_len + 1 - MB_DATA);
 8011082:	78a1      	ldrb	r1, [r4, #2]
 8011084:	a807      	add	r0, sp, #28
 8011086:	3904      	subs	r1, #4
 8011088:	b2c9      	uxtb	r1, r1
 801108a:	f001 fddb 	bl	8012c44 <PBDecodeMsg>
    const uint8_t response[5] = {MB_R2HSETCONFIG, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 801108e:	2301      	movs	r3, #1
 8011090:	7831      	ldrb	r1, [r6, #0]
 8011092:	aa03      	add	r2, sp, #12
 8011094:	7053      	strb	r3, [r2, #1]
 8011096:	7015      	strb	r5, [r2, #0]
 8011098:	003b      	movs	r3, r7
 801109a:	2900      	cmp	r1, #0
 801109c:	d100      	bne.n	80110a0 <NFCISR+0x234>
 801109e:	2303      	movs	r3, #3
 80110a0:	7093      	strb	r3, [r2, #2]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 80110a2:	20a6      	movs	r0, #166	; 0xa6
 80110a4:	2305      	movs	r3, #5
 80110a6:	4938      	ldr	r1, [pc, #224]	; (8011188 <NFCISR+0x31c>)
    const uint8_t response[5] = {MB_R2HSETCONFIG, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 80110a8:	70d7      	strb	r7, [r2, #3]
 80110aa:	7117      	strb	r7, [r2, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 80110ac:	f001 fba2 	bl	80127f4 <NFC_WriteReg>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d144      	bne.n	801113e <NFCISR+0x2d2>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Set Configure Message\n");
 80110b4:	2205      	movs	r2, #5
 80110b6:	4b3e      	ldr	r3, [pc, #248]	; (80111b0 <NFCISR+0x344>)
 80110b8:	a903      	add	r1, sp, #12
 80110ba:	e7d9      	b.n	8011070 <NFCISR+0x204>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Password Message\n");
 80110bc:	2117      	movs	r1, #23
 80110be:	4d3d      	ldr	r5, [pc, #244]	; (80111b4 <NFCISR+0x348>)
 80110c0:	4469      	add	r1, sp
 80110c2:	002b      	movs	r3, r5
 80110c4:	f7ff fe42 	bl	8010d4c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 9) break;
 80110c8:	78a3      	ldrb	r3, [r4, #2]
 80110ca:	2b08      	cmp	r3, #8
 80110cc:	d137      	bne.n	801113e <NFCISR+0x2d2>
    if(nfc.mb[1] == MB_RESPONSE) nfc.mb[1] = MB_COMMAND; /* Compatibility with ST25DV App */
 80110ce:	7923      	ldrb	r3, [r4, #4]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d100      	bne.n	80110d6 <NFCISR+0x26a>
 80110d4:	7127      	strb	r7, [r4, #4]
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HPRESENTPASSWORD, MB_COMMAND, MB_NOERROR, MB_NOTCHAINED, 0x04}, 5)) break;
 80110d6:	ac03      	add	r4, sp, #12
 80110d8:	2205      	movs	r2, #5
 80110da:	492a      	ldr	r1, [pc, #168]	; (8011184 <NFCISR+0x318>)
 80110dc:	0020      	movs	r0, r4
 80110de:	f004 ff37 	bl	8015f50 <memcpy>
 80110e2:	2317      	movs	r3, #23
 80110e4:	446b      	add	r3, sp
 80110e6:	2205      	movs	r2, #5
 80110e8:	0021      	movs	r1, r4
 80110ea:	0018      	movs	r0, r3
 80110ec:	f004 ff22 	bl	8015f34 <memcmp>
 80110f0:	1e07      	subs	r7, r0, #0
 80110f2:	d124      	bne.n	801113e <NFCISR+0x2d2>
    pw_valid = !memcmp((uint32_t*)EEPROM_PW, nfc.mb + MB_DATA, 4);
 80110f4:	2204      	movs	r2, #4
 80110f6:	4815      	ldr	r0, [pc, #84]	; (801114c <NFCISR+0x2e0>)
 80110f8:	a907      	add	r1, sp, #28
 80110fa:	f004 ff1b 	bl	8015f34 <memcmp>
 80110fe:	4243      	negs	r3, r0
 8011100:	4143      	adcs	r3, r0
 8011102:	7033      	strb	r3, [r6, #0]
    const uint8_t response[5] = {MB_R2HPRESENTPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 8011104:	2308      	movs	r3, #8
 8011106:	7023      	strb	r3, [r4, #0]
 8011108:	3b07      	subs	r3, #7
 801110a:	7063      	strb	r3, [r4, #1]
 801110c:	003b      	movs	r3, r7
 801110e:	2800      	cmp	r0, #0
 8011110:	d000      	beq.n	8011114 <NFCISR+0x2a8>
 8011112:	3303      	adds	r3, #3
 8011114:	70a3      	strb	r3, [r4, #2]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8011116:	0022      	movs	r2, r4
 8011118:	2305      	movs	r3, #5
 801111a:	20a6      	movs	r0, #166	; 0xa6
 801111c:	491a      	ldr	r1, [pc, #104]	; (8011188 <NFCISR+0x31c>)
    const uint8_t response[5] = {MB_R2HPRESENTPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 801111e:	70e7      	strb	r7, [r4, #3]
 8011120:	7127      	strb	r7, [r4, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8011122:	f001 fb67 	bl	80127f4 <NFC_WriteReg>
 8011126:	2800      	cmp	r0, #0
 8011128:	d105      	bne.n	8011136 <NFCISR+0x2ca>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Password Message\n");
 801112a:	002b      	movs	r3, r5
 801112c:	2205      	movs	r2, #5
 801112e:	4817      	ldr	r0, [pc, #92]	; (801118c <NFCISR+0x320>)
 8011130:	a903      	add	r1, sp, #12
 8011132:	f7ff fe0b 	bl	8010d4c <DBG_PrintBuffer>
    pw_timestamp = HW_RTCGetMsTime();
 8011136:	f7ff fcd5 	bl	8010ae4 <HW_RTCGetMsTime>
 801113a:	4b07      	ldr	r3, [pc, #28]	; (8011158 <NFCISR+0x2ec>)
 801113c:	6018      	str	r0, [r3, #0]
  }
}
 801113e:	b047      	add	sp, #284	; 0x11c
 8011140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011142:	46c0      	nop			; (mov r8, r8)
 8011144:	20001990 	.word	0x20001990
 8011148:	0808000c 	.word	0x0808000c
 801114c:	08080008 	.word	0x08080008
 8011150:	78563412 	.word	0x78563412
 8011154:	200018f4 	.word	0x200018f4
 8011158:	200018f0 	.word	0x200018f0
 801115c:	00002005 	.word	0x00002005
 8011160:	08019c10 	.word	0x08019c10
 8011164:	08019c4f 	.word	0x08019c4f
 8011168:	08019c6a 	.word	0x08019c6a
 801116c:	08080000 	.word	0x08080000
 8011170:	00002009 	.word	0x00002009
 8011174:	08019d17 	.word	0x08019d17
 8011178:	0001d4c0 	.word	0x0001d4c0
 801117c:	08019cfe 	.word	0x08019cfe
 8011180:	08081800 	.word	0x08081800
 8011184:	080187e8 	.word	0x080187e8
 8011188:	00002008 	.word	0x00002008
 801118c:	08019cad 	.word	0x08019cad
 8011190:	00007530 	.word	0x00007530
 8011194:	08019bfa 	.word	0x08019bfa
 8011198:	08013675 	.word	0x08013675
 801119c:	08013461 	.word	0x08013461
 80111a0:	08019c73 	.word	0x08019c73
 80111a4:	08019d2c 	.word	0x08019d2c
 80111a8:	08019ca0 	.word	0x08019ca0
 80111ac:	08019be1 	.word	0x08019be1
 80111b0:	08019cb6 	.word	0x08019cb6
 80111b4:	08019ccf 	.word	0x08019ccf
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Change Password Message\n");
 80111b8:	2117      	movs	r1, #23
 80111ba:	4f22      	ldr	r7, [pc, #136]	; (8011244 <NFCISR+0x3d8>)
 80111bc:	4469      	add	r1, sp
 80111be:	003b      	movs	r3, r7
 80111c0:	f7ff fdc4 	bl	8010d4c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 9) break;
 80111c4:	78a3      	ldrb	r3, [r4, #2]
 80111c6:	2b08      	cmp	r3, #8
 80111c8:	d1b9      	bne.n	801113e <NFCISR+0x2d2>
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HCHANGEPASSWORD, MB_COMMAND, MB_NOERROR, MB_NOTCHAINED, 0x04}, 5)) break;
 80111ca:	2205      	movs	r2, #5
 80111cc:	491e      	ldr	r1, [pc, #120]	; (8011248 <NFCISR+0x3dc>)
 80111ce:	ac03      	add	r4, sp, #12
 80111d0:	1889      	adds	r1, r1, r2
 80111d2:	0020      	movs	r0, r4
 80111d4:	f004 febc 	bl	8015f50 <memcpy>
 80111d8:	2317      	movs	r3, #23
 80111da:	446b      	add	r3, sp
 80111dc:	2205      	movs	r2, #5
 80111de:	0021      	movs	r1, r4
 80111e0:	0018      	movs	r0, r3
 80111e2:	f004 fea7 	bl	8015f34 <memcmp>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d1a9      	bne.n	801113e <NFCISR+0x2d2>
    const uint8_t response[5] = {MB_R2HCHANGEPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 80111ea:	2301      	movs	r3, #1
 80111ec:	7832      	ldrb	r2, [r6, #0]
 80111ee:	7063      	strb	r3, [r4, #1]
 80111f0:	7025      	strb	r5, [r4, #0]
 80111f2:	0003      	movs	r3, r0
 80111f4:	2a00      	cmp	r2, #0
 80111f6:	d100      	bne.n	80111fa <NFCISR+0x38e>
 80111f8:	3303      	adds	r3, #3
 80111fa:	70a3      	strb	r3, [r4, #2]
 80111fc:	70e0      	strb	r0, [r4, #3]
 80111fe:	7120      	strb	r0, [r4, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8011200:	2305      	movs	r3, #5
 8011202:	0022      	movs	r2, r4
 8011204:	20a6      	movs	r0, #166	; 0xa6
 8011206:	4911      	ldr	r1, [pc, #68]	; (801124c <NFCISR+0x3e0>)
 8011208:	f001 faf4 	bl	80127f4 <NFC_WriteReg>
 801120c:	2800      	cmp	r0, #0
 801120e:	d105      	bne.n	801121c <NFCISR+0x3b0>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Change Password Message\n");
 8011210:	003b      	movs	r3, r7
 8011212:	2205      	movs	r2, #5
 8011214:	480e      	ldr	r0, [pc, #56]	; (8011250 <NFCISR+0x3e4>)
 8011216:	a903      	add	r1, sp, #12
 8011218:	f7ff fd98 	bl	8010d4c <DBG_PrintBuffer>
    if(!pw_valid) break;
 801121c:	7833      	ldrb	r3, [r6, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d100      	bne.n	8011224 <NFCISR+0x3b8>
 8011222:	e78c      	b.n	801113e <NFCISR+0x2d2>
    memcpy(&new_pw, nfc.mb + MB_DATA, sizeof new_pw);
 8011224:	9b07      	ldr	r3, [sp, #28]
    HW_ChangePW(new_pw);
 8011226:	0018      	movs	r0, r3
    memcpy(&new_pw, nfc.mb + MB_DATA, sizeof new_pw);
 8011228:	9302      	str	r3, [sp, #8]
    HW_ChangePW(new_pw);
 801122a:	f7ff fc43 	bl	8010ab4 <HW_ChangePW>
    break;
 801122e:	e786      	b.n	801113e <NFCISR+0x2d2>
      NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_ITSTS_DYN_REG, &nfc, 1);
 8011230:	2301      	movs	r3, #1
 8011232:	0022      	movs	r2, r4
 8011234:	4907      	ldr	r1, [pc, #28]	; (8011254 <NFCISR+0x3e8>)
 8011236:	20a6      	movs	r0, #166	; 0xa6
 8011238:	f001 fa70 	bl	801271c <NFC_ReadReg>
      HAL_Delay(100);
 801123c:	2064      	movs	r0, #100	; 0x64
 801123e:	f7fb f9d7 	bl	800c5f0 <HAL_Delay>
 8011242:	e6c4      	b.n	8010fce <NFCISR+0x162>
 8011244:	08019ce3 	.word	0x08019ce3
 8011248:	080187e8 	.word	0x080187e8
 801124c:	00002008 	.word	0x00002008
 8011250:	08019cad 	.word	0x08019cad
 8011254:	00002005 	.word	0x00002005

08011258 <MX_LPTIM1_Init>:
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8011258:	22e0      	movs	r2, #224	; 0xe0
  hlptim1.Instance = LPTIM1;
 801125a:	480a      	ldr	r0, [pc, #40]	; (8011284 <MX_LPTIM1_Init+0x2c>)
 801125c:	4b0a      	ldr	r3, [pc, #40]	; (8011288 <MX_LPTIM1_Init+0x30>)
{
 801125e:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 8011260:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8011262:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8011264:	0112      	lsls	r2, r2, #4
 8011266:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8011268:	4a08      	ldr	r2, [pc, #32]	; (801128c <MX_LPTIM1_Init+0x34>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801126a:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 801126c:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 801126e:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8011270:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8011272:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8011274:	f7fd f8bc 	bl	800e3f0 <HAL_LPTIM_Init>
 8011278:	2800      	cmp	r0, #0
 801127a:	d001      	beq.n	8011280 <MX_LPTIM1_Init+0x28>
  {
    Error_Handler();
 801127c:	f000 fea4 	bl	8011fc8 <Error_Handler>
  }

}
 8011280:	bd10      	pop	{r4, pc}
 8011282:	46c0      	nop			; (mov r8, r8)
 8011284:	200018f8 	.word	0x200018f8
 8011288:	40007c00 	.word	0x40007c00
 801128c:	0000ffff 	.word	0x0000ffff

08011290 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 8011290:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <HAL_LPTIM_MspInit+0x28>)
 8011292:	6802      	ldr	r2, [r0, #0]
{
 8011294:	b510      	push	{r4, lr}
  if(lptimHandle->Instance==LPTIM1)
 8011296:	429a      	cmp	r2, r3
 8011298:	d10d      	bne.n	80112b6 <HAL_LPTIM_MspInit+0x26>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801129a:	2380      	movs	r3, #128	; 0x80
 801129c:	4a07      	ldr	r2, [pc, #28]	; (80112bc <HAL_LPTIM_MspInit+0x2c>)
 801129e:	061b      	lsls	r3, r3, #24
 80112a0:	6b91      	ldr	r1, [r2, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 0);
 80112a2:	200d      	movs	r0, #13
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80112a4:	430b      	orrs	r3, r1
 80112a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 0);
 80112a8:	2102      	movs	r1, #2
 80112aa:	2200      	movs	r2, #0
 80112ac:	f7fb fcba 	bl	800cc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80112b0:	200d      	movs	r0, #13
 80112b2:	f7fb fce1 	bl	800cc78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80112b6:	bd10      	pop	{r4, pc}
 80112b8:	40007c00 	.word	0x40007c00
 80112bc:	40021000 	.word	0x40021000

080112c0 <OnMacProcessNotify>:
 *=============================================================================
 */

static void OnMacProcessNotify(void) {
  // IsMacProcessPending = 1;
}
 80112c0:	4770      	bx	lr
	...

080112c4 <MlmeIndication>:
  default: break;
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication) {
  RxParams.IsMcpsIndication = 0;
 80112c4:	2300      	movs	r3, #0
static void MlmeIndication(MlmeIndication_t *mlmeIndication) {
 80112c6:	b510      	push	{r4, lr}
  RxParams.IsMcpsIndication = 0;
 80112c8:	4904      	ldr	r1, [pc, #16]	; (80112dc <MlmeIndication+0x18>)
 80112ca:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mlmeIndication->Status;
 80112cc:	7842      	ldrb	r2, [r0, #1]
 80112ce:	704a      	strb	r2, [r1, #1]
  if(RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED)
 80112d0:	2a0d      	cmp	r2, #13
 80112d2:	d002      	beq.n	80112da <MlmeIndication+0x16>
  DisplayRxUpdate(appData, params);
 80112d4:	0018      	movs	r0, r3
 80112d6:	f7f3 fd03 	bl	8004ce0 <DisplayRxUpdate>
  case MLME_SCHEDULE_UPLINK: IsUplinkTxPending = true; break;
  case MLME_BEACON_LOST: break;
  case MLME_BEACON: break;
  default: break;
  }
}
 80112da:	bd10      	pop	{r4, pc}
 80112dc:	20000198 	.word	0x20000198

080112e0 <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 80112e0:	2301      	movs	r3, #1
static void McpsConfirm(McpsConfirm_t *mcpsConfirm) {
 80112e2:	b570      	push	{r4, r5, r6, lr}
 80112e4:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 80112e6:	4d1b      	ldr	r5, [pc, #108]	; (8011354 <McpsConfirm+0x74>)
  DBG_PRINTF("LRW MCPS TxTimeOnAir:   %d\n", mcpsConfirm->TxTimeOnAir);
 80112e8:	491b      	ldr	r1, [pc, #108]	; (8011358 <McpsConfirm+0x78>)
  TxParams.IsMcpsConfirm = 1;
 80112ea:	702b      	strb	r3, [r5, #0]
  TxParams.Status = mcpsConfirm->Status;
 80112ec:	7843      	ldrb	r3, [r0, #1]
 80112ee:	706b      	strb	r3, [r5, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 80112f0:	7883      	ldrb	r3, [r0, #2]
 80112f2:	72ab      	strb	r3, [r5, #10]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80112f4:	68c3      	ldr	r3, [r0, #12]
 80112f6:	60eb      	str	r3, [r5, #12]
  TxParams.TxPower = mcpsConfirm->TxPower;
 80112f8:	78c3      	ldrb	r3, [r0, #3]
 80112fa:	762b      	strb	r3, [r5, #24]
  TxParams.Channel = mcpsConfirm->Channel;
 80112fc:	6903      	ldr	r3, [r0, #16]
 80112fe:	766b      	strb	r3, [r5, #25]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8011300:	7903      	ldrb	r3, [r0, #4]
 8011302:	726b      	strb	r3, [r5, #9]
  DBG_PRINTF("LRW MCPS TxTimeOnAir:   %d\n", mcpsConfirm->TxTimeOnAir);
 8011304:	6882      	ldr	r2, [r0, #8]
 8011306:	2000      	movs	r0, #0
 8011308:	f7fa fde9 	bl	800bede <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS NbTrans:       %d\n", mcpsConfirm->NbTrans);
 801130c:	7962      	ldrb	r2, [r4, #5]
 801130e:	4913      	ldr	r1, [pc, #76]	; (801135c <McpsConfirm+0x7c>)
 8011310:	2000      	movs	r0, #0
 8011312:	f7fa fde4 	bl	800bede <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS AckReceived:   %d\n", mcpsConfirm->AckReceived);
 8011316:	7922      	ldrb	r2, [r4, #4]
 8011318:	4911      	ldr	r1, [pc, #68]	; (8011360 <McpsConfirm+0x80>)
 801131a:	2000      	movs	r0, #0
 801131c:	f7fa fddf 	bl	800bede <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS UpLinkCounter: %d\n", mcpsConfirm->UpLinkCounter);
 8011320:	68e2      	ldr	r2, [r4, #12]
 8011322:	4910      	ldr	r1, [pc, #64]	; (8011364 <McpsConfirm+0x84>)
 8011324:	2000      	movs	r0, #0
 8011326:	f7fa fdda 	bl	800bede <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS Channel:       %d\n", mcpsConfirm->Channel);
 801132a:	2000      	movs	r0, #0
 801132c:	6922      	ldr	r2, [r4, #16]
 801132e:	490e      	ldr	r1, [pc, #56]	; (8011368 <McpsConfirm+0x88>)
 8011330:	f7fa fdd5 	bl	800bede <SEGGER_RTT_printf>
  if(mcpsConfirm->AckReceived) {
 8011334:	7923      	ldrb	r3, [r4, #4]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d007      	beq.n	801134a <McpsConfirm+0x6a>
    lrw.queue[lrw.retrans_index].msg_type = 0;
 801133a:	220f      	movs	r2, #15
    lrw.retrans_left = 0;
 801133c:	2100      	movs	r1, #0
 801133e:	4b0b      	ldr	r3, [pc, #44]	; (801136c <McpsConfirm+0x8c>)
    lrw.queue[lrw.retrans_index].msg_type = 0;
 8011340:	7858      	ldrb	r0, [r3, #1]
    lrw.retrans_left = 0;
 8011342:	7019      	strb	r1, [r3, #0]
    lrw.queue[lrw.retrans_index].msg_type = 0;
 8011344:	4342      	muls	r2, r0
 8011346:	189b      	adds	r3, r3, r2
 8011348:	7099      	strb	r1, [r3, #2]
  DisplayTxUpdate(params);
 801134a:	0028      	movs	r0, r5
 801134c:	f7f3 fbfe 	bl	8004b4c <DisplayTxUpdate>
}
 8011350:	bd70      	pop	{r4, r5, r6, pc}
 8011352:	46c0      	nop			; (mov r8, r8)
 8011354:	200001ac 	.word	0x200001ac
 8011358:	08019d33 	.word	0x08019d33
 801135c:	08019d4f 	.word	0x08019d4f
 8011360:	08019d6b 	.word	0x08019d6b
 8011364:	08019d87 	.word	0x08019d87
 8011368:	08019da3 	.word	0x08019da3
 801136c:	2000192c 	.word	0x2000192c

08011370 <McpsIndication>:
static void McpsIndication(McpsIndication_t *mcpsIndication) {
 8011370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RxParams.IsMcpsIndication = 1;
 8011372:	2301      	movs	r3, #1
 8011374:	490e      	ldr	r1, [pc, #56]	; (80113b0 <McpsIndication+0x40>)
 8011376:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 8011378:	7843      	ldrb	r3, [r0, #1]
 801137a:	704b      	strb	r3, [r1, #1]
  if(RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 801137c:	2b00      	cmp	r3, #0
 801137e:	d114      	bne.n	80113aa <McpsIndication+0x3a>
  RxParams.Datarate = mcpsIndication->RxDatarate;
 8011380:	7903      	ldrb	r3, [r0, #4]
  appData.Port = mcpsIndication->Port;
 8011382:	aa02      	add	r2, sp, #8
  RxParams.Datarate = mcpsIndication->RxDatarate;
 8011384:	720b      	strb	r3, [r1, #8]
  RxParams.Rssi = mcpsIndication->Rssi;
 8011386:	89c3      	ldrh	r3, [r0, #14]
 8011388:	724b      	strb	r3, [r1, #9]
  RxParams.Snr = mcpsIndication->Snr;
 801138a:	7c03      	ldrb	r3, [r0, #16]
 801138c:	728b      	strb	r3, [r1, #10]
  RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 801138e:	6943      	ldr	r3, [r0, #20]
 8011390:	60cb      	str	r3, [r1, #12]
  RxParams.RxSlot = mcpsIndication->RxSlot;
 8011392:	7c43      	ldrb	r3, [r0, #17]
 8011394:	740b      	strb	r3, [r1, #16]
  appData.Port = mcpsIndication->Port;
 8011396:	78c3      	ldrb	r3, [r0, #3]
 8011398:	7013      	strb	r3, [r2, #0]
  appData.BufferSize = mcpsIndication->BufferSize;
 801139a:	7b03      	ldrb	r3, [r0, #12]
 801139c:	7053      	strb	r3, [r2, #1]
  appData.Buffer = mcpsIndication->Buffer;
 801139e:	6883      	ldr	r3, [r0, #8]
  DisplayRxUpdate(appData, params);
 80113a0:	0010      	movs	r0, r2
  appData.Buffer = mcpsIndication->Buffer;
 80113a2:	9301      	str	r3, [sp, #4]
 80113a4:	9303      	str	r3, [sp, #12]
  DisplayRxUpdate(appData, params);
 80113a6:	f7f3 fc9b 	bl	8004ce0 <DisplayRxUpdate>
}
 80113aa:	b005      	add	sp, #20
 80113ac:	bd00      	pop	{pc}
 80113ae:	46c0      	nop			; (mov r8, r8)
 80113b0:	20000198 	.word	0x20000198

080113b4 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 80113b4:	2300      	movs	r3, #0
static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm) {
 80113b6:	b570      	push	{r4, r5, r6, lr}
 80113b8:	0006      	movs	r6, r0
  TxParams.IsMcpsConfirm = 0;
 80113ba:	4812      	ldr	r0, [pc, #72]	; (8011404 <MlmeConfirm+0x50>)
static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm) {
 80113bc:	b08a      	sub	sp, #40	; 0x28
  TxParams.IsMcpsConfirm = 0;
 80113be:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mlmeConfirm->Status;
 80113c0:	7873      	ldrb	r3, [r6, #1]
 80113c2:	7043      	strb	r3, [r0, #1]
  DisplayTxUpdate(params);
 80113c4:	f7f3 fbc2 	bl	8004b4c <DisplayTxUpdate>
  switch(mlmeConfirm->MlmeRequest) {
 80113c8:	7833      	ldrb	r3, [r6, #0]
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d118      	bne.n	8011400 <MlmeConfirm+0x4c>
    mibReq.Type = MIB_DEV_ADDR;
 80113ce:	ac01      	add	r4, sp, #4
 80113d0:	3306      	adds	r3, #6
    LoRaMacMibGetRequestConfirm(&mibReq);
 80113d2:	0020      	movs	r0, r4
    mibReq.Type = MIB_DEV_ADDR;
 80113d4:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80113d6:	f7f5 ffab 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    JoinParams.CommissioningParams->DevAddr = mibReq.Param.DevAddr;
 80113da:	4d0b      	ldr	r5, [pc, #44]	; (8011408 <MlmeConfirm+0x54>)
 80113dc:	9a02      	ldr	r2, [sp, #8]
 80113de:	682b      	ldr	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80113e0:	0020      	movs	r0, r4
    JoinParams.CommissioningParams->DevAddr = mibReq.Param.DevAddr;
 80113e2:	61da      	str	r2, [r3, #28]
    mibReq.Type = MIB_CHANNELS_DATARATE;
 80113e4:	232d      	movs	r3, #45	; 0x2d
 80113e6:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80113e8:	f7f5 ffa2 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    JoinParams.Datarate = mibReq.Param.ChannelsDatarate;
 80113ec:	7923      	ldrb	r3, [r4, #4]
  DisplayJoinRequestUpdate(params);
 80113ee:	0028      	movs	r0, r5
    JoinParams.Datarate = mibReq.Param.ChannelsDatarate;
 80113f0:	712b      	strb	r3, [r5, #4]
    if(mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK) {
 80113f2:	7873      	ldrb	r3, [r6, #1]
 80113f4:	1e5a      	subs	r2, r3, #1
 80113f6:	4193      	sbcs	r3, r2
 80113f8:	425b      	negs	r3, r3
 80113fa:	716b      	strb	r3, [r5, #5]
  DisplayJoinRequestUpdate(params);
 80113fc:	f7f3 fb6a 	bl	8004ad4 <DisplayJoinRequestUpdate>
}
 8011400:	b00a      	add	sp, #40	; 0x28
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	200001ac 	.word	0x200001ac
 8011408:	20000170 	.word	0x20000170

0801140c <LRW_ToDatarate>:
uint8_t LRW_ToDatarate(uint8_t sf, uint8_t bw) {
 801140c:	b510      	push	{r4, lr}
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 801140e:	4a1b      	ldr	r2, [pc, #108]	; (801147c <LRW_ToDatarate+0x70>)
uint8_t LRW_ToDatarate(uint8_t sf, uint8_t bw) {
 8011410:	0003      	movs	r3, r0
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 8011412:	6812      	ldr	r2, [r2, #0]
 8011414:	324c      	adds	r2, #76	; 0x4c
 8011416:	7810      	ldrb	r0, [r2, #0]
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011418:	2808      	cmp	r0, #8
 801141a:	d10f      	bne.n	801143c <LRW_ToDatarate+0x30>
 801141c:	3804      	subs	r0, #4
 801141e:	2903      	cmp	r1, #3
 8011420:	d00b      	beq.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf <= 7    ? DR_3 : // Max Payload: 242
 8011422:	2901      	cmp	r1, #1
 8011424:	d121      	bne.n	801146a <LRW_ToDatarate+0x5e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011426:	3801      	subs	r0, #1
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf <= 7    ? DR_3 : // Max Payload: 242
 8011428:	2b07      	cmp	r3, #7
 801142a:	d906      	bls.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 801142c:	3801      	subs	r0, #1
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf == 8    ? DR_2 : // Max Payload: 125
 801142e:	2b08      	cmp	r3, #8
 8011430:	d003      	beq.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf == 9    ? DR_1 : // Max Payload:  53
 8011432:	3b09      	subs	r3, #9
 8011434:	425a      	negs	r2, r3
 8011436:	4153      	adcs	r3, r2
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011438:	b2d8      	uxtb	r0, r3
}
 801143a:	bd10      	pop	{r4, pc}
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 801143c:	2805      	cmp	r0, #5
 801143e:	d114      	bne.n	801146a <LRW_ToDatarate+0x5e>
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_250 /* sf =  7 */ ? DR_6 : // Max Payload: 242
 8011440:	2902      	cmp	r1, #2
 8011442:	d018      	beq.n	8011476 <LRW_ToDatarate+0x6a>
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf <= 7    ? DR_5 : // Max Payload: 242
 8011444:	2901      	cmp	r1, #1
 8011446:	d110      	bne.n	801146a <LRW_ToDatarate+0x5e>
 8011448:	2b07      	cmp	r3, #7
 801144a:	d9f6      	bls.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 801144c:	3801      	subs	r0, #1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 8    ? DR_4 : // Max Payload: 242
 801144e:	2b08      	cmp	r3, #8
 8011450:	d0f3      	beq.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011452:	3801      	subs	r0, #1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 9    ? DR_3 : // Max Payload: 115
 8011454:	2b09      	cmp	r3, #9
 8011456:	d0f0      	beq.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011458:	3801      	subs	r0, #1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 10   ? DR_2 : // Max Payload:  51
 801145a:	2b0a      	cmp	r3, #10
 801145c:	d0ed      	beq.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 801145e:	0008      	movs	r0, r1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 11   ? DR_1 : // Max Payload:  51
 8011460:	2b0b      	cmp	r3, #11
 8011462:	d0ea      	beq.n	801143a <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011464:	2000      	movs	r0, #0
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 12   ? DR_0 : // Max Payload:  51
 8011466:	2b0c      	cmp	r3, #12
 8011468:	d0e7      	beq.n	801143a <LRW_ToDatarate+0x2e>
      (DBG_PRINTF("LRW ERR Bad Value!\n"), DR_0);
 801146a:	2000      	movs	r0, #0
 801146c:	4904      	ldr	r1, [pc, #16]	; (8011480 <LRW_ToDatarate+0x74>)
 801146e:	f7fa fd36 	bl	800bede <SEGGER_RTT_printf>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011472:	2000      	movs	r0, #0
 8011474:	e7e1      	b.n	801143a <LRW_ToDatarate+0x2e>
 8011476:	2006      	movs	r0, #6
 8011478:	e7df      	b.n	801143a <LRW_ToDatarate+0x2e>
 801147a:	46c0      	nop			; (mov r8, r8)
 801147c:	2000195c 	.word	0x2000195c
 8011480:	08019dbf 	.word	0x08019dbf

08011484 <LRW_ToTxPower>:
uint8_t LRW_ToTxPower(uint8_t dbm) {
 8011484:	b510      	push	{r4, lr}
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 8011486:	4b1a      	ldr	r3, [pc, #104]	; (80114f0 <LRW_ToTxPower+0x6c>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	334c      	adds	r3, #76	; 0x4c
 801148c:	781c      	ldrb	r4, [r3, #0]
  dbm =
 801148e:	2c05      	cmp	r4, #5
 8011490:	d10f      	bne.n	80114b2 <LRW_ToTxPower+0x2e>
    region == LORAMAC_REGION_EU868 && dbm >= 14 ?  14 : // TX_POWER_0  EU868_MAX_TX_POWER EU868_DEFAULT_TX_POWER EU868_DEFAULT_MAX_EIRP
 8011492:	280d      	cmp	r0, #13
 8011494:	d900      	bls.n	8011498 <LRW_ToTxPower+0x14>
  dbm =
 8011496:	200e      	movs	r0, #14
  dbm = (dbm / 2 + dbm % 2) * 2;
 8011498:	2201      	movs	r2, #1
 801149a:	0843      	lsrs	r3, r0, #1
 801149c:	4010      	ands	r0, r2
 801149e:	1818      	adds	r0, r3, r0
 80114a0:	4090      	lsls	r0, r2
 80114a2:	b2c3      	uxtb	r3, r0
    region == LORAMAC_REGION_EU868 ? (    EU868_MIN_TX_POWER * 2 - dbm) / 2 :
 80114a4:	2c05      	cmp	r4, #5
 80114a6:	d117      	bne.n	80114d8 <LRW_ToTxPower+0x54>
 80114a8:	200e      	movs	r0, #14
 80114aa:	1ac0      	subs	r0, r0, r3
 80114ac:	4110      	asrs	r0, r2
 80114ae:	b2c0      	uxtb	r0, r0
}
 80114b0:	bd10      	pop	{r4, pc}
  dbm =
 80114b2:	2c08      	cmp	r4, #8
 80114b4:	d10a      	bne.n	80114cc <LRW_ToTxPower+0x48>
 80114b6:	1c03      	adds	r3, r0, #0
 80114b8:	2802      	cmp	r0, #2
 80114ba:	d202      	bcs.n	80114c2 <LRW_ToTxPower+0x3e>
 80114bc:	2302      	movs	r3, #2
 80114be:	b2d8      	uxtb	r0, r3
 80114c0:	e7ea      	b.n	8011498 <LRW_ToTxPower+0x14>
 80114c2:	b2c2      	uxtb	r2, r0
 80114c4:	2a1e      	cmp	r2, #30
 80114c6:	d9fa      	bls.n	80114be <LRW_ToTxPower+0x3a>
 80114c8:	231e      	movs	r3, #30
 80114ca:	e7f8      	b.n	80114be <LRW_ToTxPower+0x3a>
    (DBG_PRINTF("LRW ERR Bad Value!\n"), 2);
 80114cc:	2000      	movs	r0, #0
 80114ce:	4909      	ldr	r1, [pc, #36]	; (80114f4 <LRW_ToTxPower+0x70>)
 80114d0:	f7fa fd05 	bl	800bede <SEGGER_RTT_printf>
  dbm =
 80114d4:	2002      	movs	r0, #2
 80114d6:	e7df      	b.n	8011498 <LRW_ToTxPower+0x14>
    region == LORAMAC_REGION_EU868 ? (    EU868_MIN_TX_POWER * 2 - dbm) / 2 :
 80114d8:	2c08      	cmp	r4, #8
 80114da:	d103      	bne.n	80114e4 <LRW_ToTxPower+0x60>
    region == LORAMAC_REGION_US915 ? (2 + US915_MIN_TX_POWER * 2 - dbm) / 2 :
 80114dc:	201e      	movs	r0, #30
 80114de:	1ac0      	subs	r0, r0, r3
 80114e0:	1040      	asrs	r0, r0, #1
 80114e2:	e7e4      	b.n	80114ae <LRW_ToTxPower+0x2a>
    (DBG_PRINTF("LRW ERR Bad Value!\n"), TX_POWER_0);
 80114e4:	2000      	movs	r0, #0
 80114e6:	4903      	ldr	r1, [pc, #12]	; (80114f4 <LRW_ToTxPower+0x70>)
 80114e8:	f7fa fcf9 	bl	800bede <SEGGER_RTT_printf>
    region == LORAMAC_REGION_EU868 ? (    EU868_MIN_TX_POWER * 2 - dbm) / 2 :
 80114ec:	2000      	movs	r0, #0
 80114ee:	e7df      	b.n	80114b0 <LRW_ToTxPower+0x2c>
 80114f0:	2000195c 	.word	0x2000195c
 80114f4:	08019dbf 	.word	0x08019dbf

080114f8 <LRW_FromTxPower>:
uint8_t LRW_FromTxPower(uint8_t txp) {
 80114f8:	b510      	push	{r4, lr}
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 80114fa:	4b0a      	ldr	r3, [pc, #40]	; (8011524 <LRW_FromTxPower+0x2c>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	334c      	adds	r3, #76	; 0x4c
 8011500:	781b      	ldrb	r3, [r3, #0]
      region == LORAMAC_REGION_EU868 ? 14 - txp * 2 :
 8011502:	2b05      	cmp	r3, #5
 8011504:	d104      	bne.n	8011510 <LRW_FromTxPower+0x18>
 8011506:	3302      	adds	r3, #2
      region == LORAMAC_REGION_US915 ? 30 - txp * 2 :
 8011508:	1a18      	subs	r0, r3, r0
      region == LORAMAC_REGION_EU868 ? 14 - txp * 2 :
 801150a:	0040      	lsls	r0, r0, #1
 801150c:	b2c0      	uxtb	r0, r0
}
 801150e:	bd10      	pop	{r4, pc}
      region == LORAMAC_REGION_EU868 ? 14 - txp * 2 :
 8011510:	2b08      	cmp	r3, #8
 8011512:	d101      	bne.n	8011518 <LRW_FromTxPower+0x20>
      region == LORAMAC_REGION_US915 ? 30 - txp * 2 :
 8011514:	3307      	adds	r3, #7
 8011516:	e7f7      	b.n	8011508 <LRW_FromTxPower+0x10>
      (DBG_PRINTF("LRW ERR Bad Value!"), 2);
 8011518:	2000      	movs	r0, #0
 801151a:	4903      	ldr	r1, [pc, #12]	; (8011528 <LRW_FromTxPower+0x30>)
 801151c:	f7fa fcdf 	bl	800bede <SEGGER_RTT_printf>
 8011520:	2002      	movs	r0, #2
 8011522:	e7f4      	b.n	801150e <LRW_FromTxPower+0x16>
 8011524:	2000195c 	.word	0x2000195c
 8011528:	08019dd3 	.word	0x08019dd3

0801152c <LRW_Join>:
  mlmeReq.Type = MLME_JOIN;
 801152c:	2301      	movs	r3, #1
void LRW_Join(void) {
 801152e:	b530      	push	{r4, r5, lr}
  mlmeReq.Req.Join.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011530:	4d10      	ldr	r5, [pc, #64]	; (8011574 <LRW_Join+0x48>)
void LRW_Join(void) {
 8011532:	b087      	sub	sp, #28
  mlmeReq.Type = MLME_JOIN;
 8011534:	ac01      	add	r4, sp, #4
 8011536:	7023      	strb	r3, [r4, #0]
  mlmeReq.Req.Join.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011538:	002b      	movs	r3, r5
 801153a:	3350      	adds	r3, #80	; 0x50
 801153c:	7819      	ldrb	r1, [r3, #0]
 801153e:	002b      	movs	r3, r5
 8011540:	334f      	adds	r3, #79	; 0x4f
 8011542:	7818      	ldrb	r0, [r3, #0]
 8011544:	f7ff ff62 	bl	801140c <LRW_ToDatarate>
 8011548:	7160      	strb	r0, [r4, #5]
  mlmeReq.Req.Join.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_OTAA : ACTIVATION_TYPE_ABP;
 801154a:	792a      	ldrb	r2, [r5, #4]
  OnMacMlmeRequest(LoRaMacMlmeRequest(&mlmeReq), &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime);
 801154c:	0020      	movs	r0, r4
  mlmeReq.Req.Join.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_OTAA : ACTIVATION_TYPE_ABP;
 801154e:	0013      	movs	r3, r2
 8011550:	1e59      	subs	r1, r3, #1
 8011552:	418b      	sbcs	r3, r1
 8011554:	3301      	adds	r3, #1
 8011556:	7123      	strb	r3, [r4, #4]
  CommissioningParams.IsOtaaActivation = DevCfg.isOtaa;
 8011558:	4b07      	ldr	r3, [pc, #28]	; (8011578 <LRW_Join+0x4c>)
 801155a:	701a      	strb	r2, [r3, #0]
  OnMacMlmeRequest(LoRaMacMlmeRequest(&mlmeReq), &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime);
 801155c:	f7f6 fa5e 	bl	8007a1c <LoRaMacMlmeRequest>
    DisplayMacMlmeRequestUpdate(status, mlmeReq, nextTxIn);
 8011560:	9a05      	ldr	r2, [sp, #20]
 8011562:	0021      	movs	r1, r4
 8011564:	f7f3 fa68 	bl	8004a38 <DisplayMacMlmeRequestUpdate>
  DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8011568:	9a05      	ldr	r2, [sp, #20]
 801156a:	4b04      	ldr	r3, [pc, #16]	; (801157c <LRW_Join+0x50>)
 801156c:	601a      	str	r2, [r3, #0]
}
 801156e:	b007      	add	sp, #28
 8011570:	bd30      	pop	{r4, r5, pc}
 8011572:	46c0      	nop			; (mov r8, r8)
 8011574:	200000e0 	.word	0x200000e0
 8011578:	20000150 	.word	0x20000150
 801157c:	20001928 	.word	0x20001928

08011580 <LRW_IsJoined>:
bool LRW_IsJoined(void) {
 8011580:	b510      	push	{r4, lr}
 8011582:	b08a      	sub	sp, #40	; 0x28
  MibRequestConfirm_t mibReq = {.Type = MIB_NETWORK_ACTIVATION};
 8011584:	2224      	movs	r2, #36	; 0x24
 8011586:	2100      	movs	r1, #0
 8011588:	a801      	add	r0, sp, #4
 801158a:	f004 fcea 	bl	8015f62 <memset>
 801158e:	2401      	movs	r4, #1
 8011590:	466b      	mov	r3, sp
  return LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK ||
 8011592:	a801      	add	r0, sp, #4
  MibRequestConfirm_t mibReq = {.Type = MIB_NETWORK_ACTIVATION};
 8011594:	711c      	strb	r4, [r3, #4]
  return LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK ||
 8011596:	f7f5 fecb 	bl	8007330 <LoRaMacMibGetRequestConfirm>
      mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE ? false : true;
 801159a:	2300      	movs	r3, #0
 801159c:	4298      	cmp	r0, r3
 801159e:	d103      	bne.n	80115a8 <LRW_IsJoined+0x28>
 80115a0:	466b      	mov	r3, sp
 80115a2:	7a1b      	ldrb	r3, [r3, #8]
 80115a4:	1e5a      	subs	r2, r3, #1
 80115a6:	4193      	sbcs	r3, r2
 80115a8:	4023      	ands	r3, r4
 80115aa:	0018      	movs	r0, r3
}
 80115ac:	b00a      	add	sp, #40	; 0x28
 80115ae:	bd10      	pop	{r4, pc}

080115b0 <LRW_TX>:
void LRW_TX(LmHandlerAppData_t *appData) {
 80115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b2:	b087      	sub	sp, #28
 80115b4:	0005      	movs	r5, r0
  if(!LRW_IsJoined()) {
 80115b6:	f7ff ffe3 	bl	8011580 <LRW_IsJoined>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	d102      	bne.n	80115c4 <LRW_TX+0x14>
    DEBUG_MSG("LRW ERR Can't send if not joined.\n");
 80115be:	491e      	ldr	r1, [pc, #120]	; (8011638 <LRW_TX+0x88>)
 80115c0:	f7fa faba 	bl	800bb38 <SEGGER_RTT_WriteString>
  TxParams.MsgType = DevCfg.confirmedMsgs ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80115c4:	4e1d      	ldr	r6, [pc, #116]	; (801163c <LRW_TX+0x8c>)
 80115c6:	4f1e      	ldr	r7, [pc, #120]	; (8011640 <LRW_TX+0x90>)
 80115c8:	0033      	movs	r3, r6
 80115ca:	3351      	adds	r3, #81	; 0x51
 80115cc:	781b      	ldrb	r3, [r3, #0]
  mcpsReq.Type = DevCfg.confirmedMsgs ? MCPS_CONFIRMED : MCPS_UNCONFIRMED;
 80115ce:	ac01      	add	r4, sp, #4
  TxParams.MsgType = DevCfg.confirmedMsgs ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80115d0:	723b      	strb	r3, [r7, #8]
  mcpsReq.Type = DevCfg.confirmedMsgs ? MCPS_CONFIRMED : MCPS_UNCONFIRMED;
 80115d2:	7023      	strb	r3, [r4, #0]
  mcpsReq.Req.Unconfirmed.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 80115d4:	0033      	movs	r3, r6
 80115d6:	3350      	adds	r3, #80	; 0x50
 80115d8:	7819      	ldrb	r1, [r3, #0]
 80115da:	0033      	movs	r3, r6
 80115dc:	334f      	adds	r3, #79	; 0x4f
 80115de:	7818      	ldrb	r0, [r3, #0]
 80115e0:	f7ff ff14 	bl	801140c <LRW_ToDatarate>
 80115e4:	73a0      	strb	r0, [r4, #14]
  if(LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK) {
 80115e6:	4669      	mov	r1, sp
 80115e8:	7868      	ldrb	r0, [r5, #1]
 80115ea:	f7f5 fe3d 	bl	8007268 <LoRaMacQueryTxPossible>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d01b      	beq.n	801162a <LRW_TX+0x7a>
    mcpsReq.Type = MCPS_UNCONFIRMED;
 80115f2:	2300      	movs	r3, #0
 80115f4:	7023      	strb	r3, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80115f6:	60a3      	str	r3, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80115f8:	81a3      	strh	r3, [r4, #12]
  TxParams.AppData = *appData;
 80115fa:	003b      	movs	r3, r7
 80115fc:	3310      	adds	r3, #16
 80115fe:	cd06      	ldmia	r5!, {r1, r2}
 8011600:	c306      	stmia	r3!, {r1, r2}
  TxParams.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011602:	0033      	movs	r3, r6
 8011604:	364f      	adds	r6, #79	; 0x4f
 8011606:	3350      	adds	r3, #80	; 0x50
 8011608:	7819      	ldrb	r1, [r3, #0]
 801160a:	7830      	ldrb	r0, [r6, #0]
 801160c:	f7ff fefe 	bl	801140c <LRW_ToDatarate>
 8011610:	72b8      	strb	r0, [r7, #10]
  LoRaMacStatus_t status = LoRaMacMcpsRequest(&mcpsReq);
 8011612:	0020      	movs	r0, r4
 8011614:	f7f6 fae4 	bl	8007be0 <LoRaMacMcpsRequest>
    DisplayMacMcpsRequestUpdate(status, mcpsReq, nextTxIn);
 8011618:	6922      	ldr	r2, [r4, #16]
 801161a:	0021      	movs	r1, r4
 801161c:	f7f3 f9cc 	bl	80049b8 <DisplayMacMcpsRequestUpdate>
  DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8011620:	6922      	ldr	r2, [r4, #16]
 8011622:	4b08      	ldr	r3, [pc, #32]	; (8011644 <LRW_TX+0x94>)
 8011624:	601a      	str	r2, [r3, #0]
}
 8011626:	b007      	add	sp, #28
 8011628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 801162a:	782b      	ldrb	r3, [r5, #0]
 801162c:	7123      	strb	r3, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 801162e:	786b      	ldrb	r3, [r5, #1]
 8011630:	81a3      	strh	r3, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8011632:	686b      	ldr	r3, [r5, #4]
 8011634:	60a3      	str	r3, [r4, #8]
 8011636:	e7e0      	b.n	80115fa <LRW_TX+0x4a>
 8011638:	08019de6 	.word	0x08019de6
 801163c:	200000e0 	.word	0x200000e0
 8011640:	200001ac 	.word	0x200001ac
 8011644:	20001928 	.word	0x20001928

08011648 <LRW_Process>:
  Radio.IrqProcess && (Radio.IrqProcess(), 0);
 8011648:	4b07      	ldr	r3, [pc, #28]	; (8011668 <LRW_Process+0x20>)
void LRW_Process(void) {
 801164a:	b510      	push	{r4, lr}
  Radio.IrqProcess && (Radio.IrqProcess(), 0);
 801164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801164e:	2b00      	cmp	r3, #0
 8011650:	d000      	beq.n	8011654 <LRW_Process+0xc>
 8011652:	4798      	blx	r3
  LoRaMacProcess();
 8011654:	f7f4 feba 	bl	80063cc <LoRaMacProcess>
  (nvmBytes = NvmDataMgmtStore()) && (OnNvmDataChange(LORAMAC_HANDLER_NVM_STORE, nvmBytes), 0);
 8011658:	f7f3 fbb4 	bl	8004dc4 <NvmDataMgmtStore>
 801165c:	1e01      	subs	r1, r0, #0
 801165e:	d002      	beq.n	8011666 <LRW_Process+0x1e>
    DisplayNvmDataChange(state, size);
 8011660:	2001      	movs	r0, #1
 8011662:	f7f3 f995 	bl	8004990 <DisplayNvmDataChange>
}
 8011666:	bd10      	pop	{r4, pc}
 8011668:	0801a9e0 	.word	0x0801a9e0

0801166c <LRW_FromDevCfg>:
void LRW_FromDevCfg(void) {
 801166c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t dr = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 801166e:	4d92      	ldr	r5, [pc, #584]	; (80118b8 <LRW_FromDevCfg+0x24c>)
void LRW_FromDevCfg(void) {
 8011670:	b08f      	sub	sp, #60	; 0x3c
  uint8_t dr = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011672:	002b      	movs	r3, r5
 8011674:	3350      	adds	r3, #80	; 0x50
 8011676:	7819      	ldrb	r1, [r3, #0]
 8011678:	002b      	movs	r3, r5
 801167a:	334f      	adds	r3, #79	; 0x4f
 801167c:	7818      	ldrb	r0, [r3, #0]
 801167e:	f7ff fec5 	bl	801140c <LRW_ToDatarate>
  uint8_t txp = LRW_ToTxPower(DevCfg.txPower);
 8011682:	002b      	movs	r3, r5
  uint8_t dr = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011684:	9002      	str	r0, [sp, #8]
  uint8_t txp = LRW_ToTxPower(DevCfg.txPower);
 8011686:	334e      	adds	r3, #78	; 0x4e
 8011688:	7818      	ldrb	r0, [r3, #0]
 801168a:	f7ff fefb 	bl	8011484 <LRW_ToTxPower>
  if(DevCfg.region != pNvm->MacGroup2.Region) {
 801168e:	002b      	movs	r3, r5
 8011690:	4e8a      	ldr	r6, [pc, #552]	; (80118bc <LRW_FromDevCfg+0x250>)
  uint8_t txp = LRW_ToTxPower(DevCfg.txPower);
 8011692:	9003      	str	r0, [sp, #12]
  if(DevCfg.region != pNvm->MacGroup2.Region) {
 8011694:	334c      	adds	r3, #76	; 0x4c
 8011696:	781a      	ldrb	r2, [r3, #0]
 8011698:	6833      	ldr	r3, [r6, #0]
 801169a:	334c      	adds	r3, #76	; 0x4c
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	4293      	cmp	r3, r2
 80116a0:	d00b      	beq.n	80116ba <LRW_FromDevCfg+0x4e>
    if(LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, DevCfg.region) != LORAMAC_STATUS_OK)
 80116a2:	4987      	ldr	r1, [pc, #540]	; (80118c0 <LRW_FromDevCfg+0x254>)
 80116a4:	4887      	ldr	r0, [pc, #540]	; (80118c4 <LRW_FromDevCfg+0x258>)
 80116a6:	f7f5 fc05 	bl	8006eb4 <LoRaMacInitialization>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d005      	beq.n	80116ba <LRW_FromDevCfg+0x4e>
      DBG_PRINTF("LRW Init Failed! %d\n", __LINE__);
 80116ae:	22c4      	movs	r2, #196	; 0xc4
 80116b0:	2000      	movs	r0, #0
 80116b2:	4985      	ldr	r1, [pc, #532]	; (80118c8 <LRW_FromDevCfg+0x25c>)
 80116b4:	0052      	lsls	r2, r2, #1
 80116b6:	f7fa fc12 	bl	800bede <SEGGER_RTT_printf>
  mibReq.Type = MIB_DEV_EUI;
 80116ba:	2302      	movs	r3, #2
 80116bc:	aa04      	add	r2, sp, #16
  LoRaMacMibGetRequestConfirm(&mibReq);
 80116be:	a805      	add	r0, sp, #20
  mibReq.Type = MIB_DEV_EUI;
 80116c0:	7113      	strb	r3, [r2, #4]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80116c2:	f7f5 fe35 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(memcmp(mibReq.Param.DevEui, DevCfg.devEui, sizeof DevCfg.devEui)) {
 80116c6:	4c81      	ldr	r4, [pc, #516]	; (80118cc <LRW_FromDevCfg+0x260>)
 80116c8:	2208      	movs	r2, #8
 80116ca:	0021      	movs	r1, r4
 80116cc:	9806      	ldr	r0, [sp, #24]
 80116ce:	f004 fc31 	bl	8015f34 <memcmp>
  bool rejoin = false;
 80116d2:	2300      	movs	r3, #0
 80116d4:	9301      	str	r3, [sp, #4]
  if(memcmp(mibReq.Param.DevEui, DevCfg.devEui, sizeof DevCfg.devEui)) {
 80116d6:	4298      	cmp	r0, r3
 80116d8:	d005      	beq.n	80116e6 <LRW_FromDevCfg+0x7a>
    LoRaMacMibSetRequestConfirm(&mibReq);
 80116da:	a805      	add	r0, sp, #20
    mibReq.Param.DevEui = DevCfg.devEui;
 80116dc:	9406      	str	r4, [sp, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80116de:	f7f5 feed 	bl	80074bc <LoRaMacMibSetRequestConfirm>
    rejoin = true;
 80116e2:	2301      	movs	r3, #1
 80116e4:	9301      	str	r3, [sp, #4]
  mibReq.Type = MIB_JOIN_EUI;
 80116e6:	2303      	movs	r3, #3
 80116e8:	aa04      	add	r2, sp, #16
  LoRaMacMibGetRequestConfirm(&mibReq);
 80116ea:	a805      	add	r0, sp, #20
  mibReq.Type = MIB_JOIN_EUI;
 80116ec:	7113      	strb	r3, [r2, #4]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80116ee:	f7f5 fe1f 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(memcmp(mibReq.Param.JoinEui, DevCfg.appEui, sizeof DevCfg.appEui)) {
 80116f2:	4c77      	ldr	r4, [pc, #476]	; (80118d0 <LRW_FromDevCfg+0x264>)
 80116f4:	2208      	movs	r2, #8
 80116f6:	0021      	movs	r1, r4
 80116f8:	9806      	ldr	r0, [sp, #24]
 80116fa:	f004 fc1b 	bl	8015f34 <memcmp>
 80116fe:	2800      	cmp	r0, #0
 8011700:	d005      	beq.n	801170e <LRW_FromDevCfg+0xa2>
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011702:	a805      	add	r0, sp, #20
    mibReq.Param.JoinEui = DevCfg.appEui;
 8011704:	9406      	str	r4, [sp, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011706:	f7f5 fed9 	bl	80074bc <LoRaMacMibSetRequestConfirm>
    rejoin = true;
 801170a:	2301      	movs	r3, #1
 801170c:	9301      	str	r3, [sp, #4]
  if(memcmp(pNvm->SecureElement.KeyList[NWK_KEY].KeyValue, DevCfg.appKey, sizeof DevCfg.appKey)) {
 801170e:	6830      	ldr	r0, [r6, #0]
 8011710:	4f70      	ldr	r7, [pc, #448]	; (80118d4 <LRW_FromDevCfg+0x268>)
 8011712:	30cb      	adds	r0, #203	; 0xcb
 8011714:	2210      	movs	r2, #16
 8011716:	0039      	movs	r1, r7
 8011718:	30ff      	adds	r0, #255	; 0xff
 801171a:	f004 fc0b 	bl	8015f34 <memcmp>
 801171e:	ac05      	add	r4, sp, #20
 8011720:	2800      	cmp	r0, #0
 8011722:	d007      	beq.n	8011734 <LRW_FromDevCfg+0xc8>
    mibReq.Type = MIB_NWK_KEY;
 8011724:	2309      	movs	r3, #9
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011726:	0020      	movs	r0, r4
    mibReq.Type = MIB_NWK_KEY;
 8011728:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NwkKey = DevCfg.appKey;
 801172a:	6067      	str	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801172c:	f7f5 fec6 	bl	80074bc <LoRaMacMibSetRequestConfirm>
    rejoin = true;
 8011730:	2301      	movs	r3, #1
 8011732:	9301      	str	r3, [sp, #4]
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011734:	2301      	movs	r3, #1
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011736:	0020      	movs	r0, r4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011738:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 801173a:	f7f5 fdf9 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(DevCfg.isOtaa != (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP) || rejoin) {
 801173e:	7923      	ldrb	r3, [r4, #4]
 8011740:	792f      	ldrb	r7, [r5, #4]
 8011742:	3b01      	subs	r3, #1
 8011744:	1e5a      	subs	r2, r3, #1
 8011746:	4193      	sbcs	r3, r2
 8011748:	42bb      	cmp	r3, r7
 801174a:	d102      	bne.n	8011752 <LRW_FromDevCfg+0xe6>
 801174c:	9b01      	ldr	r3, [sp, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d016      	beq.n	8011780 <LRW_FromDevCfg+0x114>
    if(!DevCfg.isOtaa) {
 8011752:	2f00      	cmp	r7, #0
 8011754:	d10c      	bne.n	8011770 <LRW_FromDevCfg+0x104>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8011756:	2335      	movs	r3, #53	; 0x35
 8011758:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 801175a:	4b5f      	ldr	r3, [pc, #380]	; (80118d8 <LRW_FromDevCfg+0x26c>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 801175c:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 801175e:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8011760:	f7f5 feac 	bl	80074bc <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 8011764:	2306      	movs	r3, #6
      LoRaMacMibSetRequestConfirm(&mibReq);
 8011766:	0020      	movs	r0, r4
      mibReq.Type = MIB_NET_ID;
 8011768:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 801176a:	6067      	str	r7, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801176c:	f7f5 fea6 	bl	80074bc <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011770:	2301      	movs	r3, #1
 8011772:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_NONE : ACTIVATION_TYPE_ABP;
 8011774:	792a      	ldrb	r2, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011776:	0020      	movs	r0, r4
    mibReq.Param.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_NONE : ACTIVATION_TYPE_ABP;
 8011778:	4053      	eors	r3, r2
 801177a:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801177c:	f7f5 fe9e 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_CHANNELS_DATARATE;
 8011780:	232d      	movs	r3, #45	; 0x2d
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011782:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_DATARATE;
 8011784:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011786:	f7f5 fdd3 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(mibReq.Param.ChannelsDatarate != dr) {
 801178a:	2304      	movs	r3, #4
 801178c:	9a02      	ldr	r2, [sp, #8]
 801178e:	56e3      	ldrsb	r3, [r4, r3]
 8011790:	4293      	cmp	r3, r2
 8011792:	d00e      	beq.n	80117b2 <LRW_FromDevCfg+0x146>
    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011794:	232c      	movs	r3, #44	; 0x2c
    mibReq.Param.ChannelsDefaultDatarate = dr;
 8011796:	2708      	movs	r7, #8
    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011798:	7023      	strb	r3, [r4, #0]
    mibReq.Param.ChannelsDefaultDatarate = dr;
 801179a:	466b      	mov	r3, sp
 801179c:	57df      	ldrsb	r7, [r3, r7]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801179e:	0020      	movs	r0, r4
    mibReq.Param.ChannelsDefaultDatarate = dr;
 80117a0:	7127      	strb	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117a2:	f7f5 fe8b 	bl	80074bc <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_CHANNELS_DATARATE;
 80117a6:	232d      	movs	r3, #45	; 0x2d
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117a8:	0020      	movs	r0, r4
    mibReq.Type = MIB_CHANNELS_DATARATE;
 80117aa:	7023      	strb	r3, [r4, #0]
    mibReq.Param.ChannelsDatarate = dr;
 80117ac:	7127      	strb	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117ae:	f7f5 fe85 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_CHANNELS_TX_POWER;
 80117b2:	232e      	movs	r3, #46	; 0x2e
  LoRaMacMibGetRequestConfirm(&mibReq);
 80117b4:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_TX_POWER;
 80117b6:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80117b8:	f7f5 fdba 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(mibReq.Param.ChannelsTxPower != txp) {
 80117bc:	2304      	movs	r3, #4
 80117be:	9a03      	ldr	r2, [sp, #12]
 80117c0:	56e3      	ldrsb	r3, [r4, r3]
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d00e      	beq.n	80117e4 <LRW_FromDevCfg+0x178>
    mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 80117c6:	232f      	movs	r3, #47	; 0x2f
    mibReq.Param.ChannelsDefaultTxPower = txp;
 80117c8:	270c      	movs	r7, #12
    mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 80117ca:	7023      	strb	r3, [r4, #0]
    mibReq.Param.ChannelsDefaultTxPower = txp;
 80117cc:	466b      	mov	r3, sp
 80117ce:	57df      	ldrsb	r7, [r3, r7]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117d0:	0020      	movs	r0, r4
    mibReq.Param.ChannelsDefaultTxPower = txp;
 80117d2:	7127      	strb	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117d4:	f7f5 fe72 	bl	80074bc <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80117d8:	232e      	movs	r3, #46	; 0x2e
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117da:	0020      	movs	r0, r4
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80117dc:	7023      	strb	r3, [r4, #0]
    mibReq.Param.ChannelsTxPower = txp;
 80117de:	7127      	strb	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117e0:	f7f5 fe6c 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEV_ADDR;
 80117e4:	2307      	movs	r3, #7
  LoRaMacMibGetRequestConfirm(&mibReq);
 80117e6:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_ADDR;
 80117e8:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80117ea:	f7f5 fda1 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(mibReq.Param.DevAddr != DevCfg.devAddr) {
 80117ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80117f0:	6862      	ldr	r2, [r4, #4]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d003      	beq.n	80117fe <LRW_FromDevCfg+0x192>
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117f6:	0020      	movs	r0, r4
    mibReq.Param.DevAddr = DevCfg.devAddr;
 80117f8:	6063      	str	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117fa:	f7f5 fe5f 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue, DevCfg.nwkSKey, sizeof DevCfg.nwkSKey)) {
 80117fe:	6830      	ldr	r0, [r6, #0]
 8011800:	4f36      	ldr	r7, [pc, #216]	; (80118dc <LRW_FromDevCfg+0x270>)
 8011802:	30fe      	adds	r0, #254	; 0xfe
 8011804:	2210      	movs	r2, #16
 8011806:	0039      	movs	r1, r7
 8011808:	30ff      	adds	r0, #255	; 0xff
 801180a:	f004 fb93 	bl	8015f34 <memcmp>
 801180e:	2800      	cmp	r0, #0
 8011810:	d005      	beq.n	801181e <LRW_FromDevCfg+0x1b2>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8011812:	230c      	movs	r3, #12
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011814:	0020      	movs	r0, r4
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8011816:	7023      	strb	r3, [r4, #0]
    mibReq.Param.FNwkSIntKey = DevCfg.nwkSKey;
 8011818:	6067      	str	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801181a:	f7f5 fe4f 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[S_NWK_S_INT_KEY].KeyValue, DevCfg.nwkSKey, sizeof DevCfg.nwkSKey)) {
 801181e:	4a30      	ldr	r2, [pc, #192]	; (80118e0 <LRW_FromDevCfg+0x274>)
 8011820:	6833      	ldr	r3, [r6, #0]
 8011822:	0039      	movs	r1, r7
 8011824:	1898      	adds	r0, r3, r2
 8011826:	3aff      	subs	r2, #255	; 0xff
 8011828:	3aff      	subs	r2, #255	; 0xff
 801182a:	f004 fb83 	bl	8015f34 <memcmp>
 801182e:	2800      	cmp	r0, #0
 8011830:	d005      	beq.n	801183e <LRW_FromDevCfg+0x1d2>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8011832:	230d      	movs	r3, #13
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011834:	0020      	movs	r0, r4
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8011836:	7023      	strb	r3, [r4, #0]
    mibReq.Param.SNwkSIntKey = DevCfg.nwkSKey;
 8011838:	6067      	str	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801183a:	f7f5 fe3f 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[NWK_S_ENC_KEY].KeyValue, DevCfg.nwkSKey, sizeof DevCfg.nwkSKey)) {
 801183e:	4a29      	ldr	r2, [pc, #164]	; (80118e4 <LRW_FromDevCfg+0x278>)
 8011840:	6833      	ldr	r3, [r6, #0]
 8011842:	0039      	movs	r1, r7
 8011844:	1898      	adds	r0, r3, r2
 8011846:	2210      	movs	r2, #16
 8011848:	f004 fb74 	bl	8015f34 <memcmp>
 801184c:	2800      	cmp	r0, #0
 801184e:	d005      	beq.n	801185c <LRW_FromDevCfg+0x1f0>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 8011850:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011852:	0020      	movs	r0, r4
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 8011854:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NwkSEncKey = DevCfg.nwkSKey;
 8011856:	6067      	str	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011858:	f7f5 fe30 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[APP_S_KEY].KeyValue, DevCfg.appSKey, sizeof DevCfg.appSKey)) {
 801185c:	238c      	movs	r3, #140	; 0x8c
 801185e:	4f22      	ldr	r7, [pc, #136]	; (80118e8 <LRW_FromDevCfg+0x27c>)
 8011860:	6830      	ldr	r0, [r6, #0]
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	2210      	movs	r2, #16
 8011866:	0039      	movs	r1, r7
 8011868:	18c0      	adds	r0, r0, r3
 801186a:	f004 fb63 	bl	8015f34 <memcmp>
 801186e:	2800      	cmp	r0, #0
 8011870:	d005      	beq.n	801187e <LRW_FromDevCfg+0x212>
    mibReq.Type = MIB_APP_S_KEY;
 8011872:	230f      	movs	r3, #15
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011874:	0020      	movs	r0, r4
    mibReq.Type = MIB_APP_S_KEY;
 8011876:	7023      	strb	r3, [r4, #0]
    mibReq.Param.AppSKey = DevCfg.appSKey;
 8011878:	6067      	str	r7, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801187a:	f7f5 fe1f 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  if(!!DevCfg.dutyCycle != !!pNvm->MacGroup2.DutyCycleOn) {
 801187e:	002b      	movs	r3, r5
 8011880:	3353      	adds	r3, #83	; 0x53
 8011882:	7818      	ldrb	r0, [r3, #0]
 8011884:	4b0d      	ldr	r3, [pc, #52]	; (80118bc <LRW_FromDevCfg+0x250>)
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	23c4      	movs	r3, #196	; 0xc4
 801188a:	005b      	lsls	r3, r3, #1
 801188c:	5cd3      	ldrb	r3, [r2, r3]
 801188e:	4283      	cmp	r3, r0
 8011890:	d001      	beq.n	8011896 <LRW_FromDevCfg+0x22a>
    LoRaMacTestSetDutyCycleOn(DevCfg.dutyCycle);
 8011892:	f7f6 fa93 	bl	8007dbc <LoRaMacTestSetDutyCycleOn>
  mibReq.Type = MIB_ADR;
 8011896:	2305      	movs	r3, #5
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011898:	0020      	movs	r0, r4
  if(!!mibReq.Param.AdrEnable != !!DevCfg.adaptiveDatarate) {
 801189a:	3552      	adds	r5, #82	; 0x52
  mibReq.Type = MIB_ADR;
 801189c:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 801189e:	f7f5 fd47 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  if(!!mibReq.Param.AdrEnable != !!DevCfg.adaptiveDatarate) {
 80118a2:	782b      	ldrb	r3, [r5, #0]
 80118a4:	7922      	ldrb	r2, [r4, #4]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d003      	beq.n	80118b2 <LRW_FromDevCfg+0x246>
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118aa:	0020      	movs	r0, r4
    mibReq.Param.AdrEnable = DevCfg.adaptiveDatarate;
 80118ac:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118ae:	f7f5 fe05 	bl	80074bc <LoRaMacMibSetRequestConfirm>
}
 80118b2:	b00f      	add	sp, #60	; 0x3c
 80118b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b6:	46c0      	nop			; (mov r8, r8)
 80118b8:	200000e0 	.word	0x200000e0
 80118bc:	2000195c 	.word	0x2000195c
 80118c0:	20000178 	.word	0x20000178
 80118c4:	20000188 	.word	0x20000188
 80118c8:	08019e09 	.word	0x08019e09
 80118cc:	200000e5 	.word	0x200000e5
 80118d0:	200000ed 	.word	0x200000ed
 80118d4:	200000f5 	.word	0x200000f5
 80118d8:	01000400 	.word	0x01000400
 80118dc:	2000010c 	.word	0x2000010c
 80118e0:	0000020e 	.word	0x0000020e
 80118e4:	0000021f 	.word	0x0000021f
 80118e8:	2000011c 	.word	0x2000011c

080118ec <LRW_Init>:
  SX126x.Spi.Mosi.pin = PA_7;
 80118ec:	4b4e      	ldr	r3, [pc, #312]	; (8011a28 <LRW_Init+0x13c>)
 80118ee:	2107      	movs	r1, #7
 80118f0:	001a      	movs	r2, r3
 80118f2:	3264      	adds	r2, #100	; 0x64
void LRW_Init(void) {
 80118f4:	b570      	push	{r4, r5, r6, lr}
  SX126x.Spi.Mosi.pin = PA_7;
 80118f6:	7011      	strb	r1, [r2, #0]
  SX126x.Spi.Mosi.pinIndex = 0x0080;
 80118f8:	001a      	movs	r2, r3
 80118fa:	3179      	adds	r1, #121	; 0x79
 80118fc:	3266      	adds	r2, #102	; 0x66
 80118fe:	8011      	strh	r1, [r2, #0]
  SX126x.Spi.Miso.pin = PA_6;
 8011900:	0019      	movs	r1, r3
 8011902:	2006      	movs	r0, #6
 8011904:	3178      	adds	r1, #120	; 0x78
 8011906:	7008      	strb	r0, [r1, #0]
  SX126x.Spi.Miso.pinIndex = 0x0040;
 8011908:	0019      	movs	r1, r3
 801190a:	303a      	adds	r0, #58	; 0x3a
 801190c:	317a      	adds	r1, #122	; 0x7a
 801190e:	8008      	strh	r0, [r1, #0]
  SX126x.Spi.Sclk.pin = PA_5;
 8011910:	0019      	movs	r1, r3
 8011912:	383b      	subs	r0, #59	; 0x3b
 8011914:	318c      	adds	r1, #140	; 0x8c
 8011916:	7008      	strb	r0, [r1, #0]
  SX126x.Spi.Sclk.pinIndex = 0x0020;
 8011918:	0018      	movs	r0, r3
 801191a:	2120      	movs	r1, #32
 801191c:	308e      	adds	r0, #142	; 0x8e
 801191e:	8001      	strh	r1, [r0, #0]
  SX126x.Spi.Mosi.port = GPIOA;
 8011920:	22a0      	movs	r2, #160	; 0xa0
  SX126x.Spi.Sclk.port = GPIOA;
 8011922:	0018      	movs	r0, r3
  SX126x.Spi.Mosi.port = GPIOA;
 8011924:	05d2      	lsls	r2, r2, #23
  SX126x.Spi.Sclk.port = GPIOA;
 8011926:	3090      	adds	r0, #144	; 0x90
 8011928:	6002      	str	r2, [r0, #0]
  SX126x.Spi.Nss.pin = PA_4;
 801192a:	0018      	movs	r0, r3
 801192c:	2404      	movs	r4, #4
 801192e:	30a0      	adds	r0, #160	; 0xa0
 8011930:	7004      	strb	r4, [r0, #0]
  SX126x.Spi.Nss.pinIndex = 0x0010;
 8011932:	001c      	movs	r4, r3
 8011934:	2010      	movs	r0, #16
 8011936:	34a2      	adds	r4, #162	; 0xa2
 8011938:	8020      	strh	r0, [r4, #0]
  SX126x.Spi.Nss.port = GPIOA;
 801193a:	001c      	movs	r4, r3
 801193c:	34a4      	adds	r4, #164	; 0xa4
 801193e:	6022      	str	r2, [r4, #0]
  SX126x.DIO1.pin = PB_5;
 8011940:	001c      	movs	r4, r3
 8011942:	2515      	movs	r5, #21
 8011944:	3428      	adds	r4, #40	; 0x28
 8011946:	7025      	strb	r5, [r4, #0]
  SX126x.DIO3.pin = PA_12;
 8011948:	001c      	movs	r4, r3
  SX126x.DIO1.pinIndex = 0x0020;
 801194a:	8559      	strh	r1, [r3, #42]	; 0x2a
  SX126x.DIO1.port = GPIOB;
 801194c:	4937      	ldr	r1, [pc, #220]	; (8011a2c <LRW_Init+0x140>)
  SX126x.DIO3.pin = PA_12;
 801194e:	3450      	adds	r4, #80	; 0x50
 8011950:	3d09      	subs	r5, #9
 8011952:	7025      	strb	r5, [r4, #0]
  SX126x.DIO1.port = GPIOB;
 8011954:	62d9      	str	r1, [r3, #44]	; 0x2c
  SX126x.DIO3.pinIndex = 0x1000;
 8011956:	001c      	movs	r4, r3
  SX126x.Reset.port = GPIOB;
 8011958:	6059      	str	r1, [r3, #4]
  SX126x.DIO3.pinIndex = 0x1000;
 801195a:	2580      	movs	r5, #128	; 0x80
  SX126x.BUSY.pin = PA_11;
 801195c:	210b      	movs	r1, #11
  SX126x.DIO3.pinIndex = 0x1000;
 801195e:	3452      	adds	r4, #82	; 0x52
  SX126x.BUSY.pin = PA_11;
 8011960:	7519      	strb	r1, [r3, #20]
  SX126x.DIO3.pinIndex = 0x1000;
 8011962:	016d      	lsls	r5, r5, #5
  SX126x.BUSY.pinIndex = 0x0800;
 8011964:	2180      	movs	r1, #128	; 0x80
  SX126x.Spi.Mosi.port = GPIOA;
 8011966:	669a      	str	r2, [r3, #104]	; 0x68
  SX126x.Spi.Miso.port = GPIOA;
 8011968:	67da      	str	r2, [r3, #124]	; 0x7c
  SX126x.DIO3.pinIndex = 0x1000;
 801196a:	8025      	strh	r5, [r4, #0]
  SX126x.DIO3.port = GPIOA;
 801196c:	655a      	str	r2, [r3, #84]	; 0x54
  SX126x.BUSY.port = GPIOA;
 801196e:	619a      	str	r2, [r3, #24]
  SX126x.Reset.pin = PB_4;
 8011970:	2414      	movs	r4, #20
  SX126x.BUSY.pull = PIN_PULL_UP;
 8011972:	2201      	movs	r2, #1
  SX126x.BUSY.pinIndex = 0x0800;
 8011974:	0109      	lsls	r1, r1, #4
  SX126x.Reset.pin = PB_4;
 8011976:	701c      	strb	r4, [r3, #0]
  SX126x.Reset.pinIndex = 0x0010;
 8011978:	8058      	strh	r0, [r3, #2]
  SX126x.BUSY.pinIndex = 0x0800;
 801197a:	82d9      	strh	r1, [r3, #22]
  SX126x.BUSY.pull = PIN_PULL_UP;
 801197c:	779a      	strb	r2, [r3, #30]
  if(LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, DevCfg.region) != LORAMAC_STATUS_OK)
 801197e:	4b2c      	ldr	r3, [pc, #176]	; (8011a30 <LRW_Init+0x144>)
void LRW_Init(void) {
 8011980:	b08a      	sub	sp, #40	; 0x28
  if(LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, DevCfg.region) != LORAMAC_STATUS_OK)
 8011982:	334c      	adds	r3, #76	; 0x4c
 8011984:	781a      	ldrb	r2, [r3, #0]
 8011986:	492b      	ldr	r1, [pc, #172]	; (8011a34 <LRW_Init+0x148>)
 8011988:	482b      	ldr	r0, [pc, #172]	; (8011a38 <LRW_Init+0x14c>)
 801198a:	f7f5 fa93 	bl	8006eb4 <LoRaMacInitialization>
 801198e:	2800      	cmp	r0, #0
 8011990:	d004      	beq.n	801199c <LRW_Init+0xb0>
    DBG_PRINTF("LRW Init Failed! %d\n", __LINE__);
 8011992:	22f5      	movs	r2, #245	; 0xf5
 8011994:	2000      	movs	r0, #0
 8011996:	4929      	ldr	r1, [pc, #164]	; (8011a3c <LRW_Init+0x150>)
 8011998:	f7fa faa1 	bl	800bede <SEGGER_RTT_printf>
  mibReq.Type = MIB_NVM_CTXS;
 801199c:	2334      	movs	r3, #52	; 0x34
 801199e:	ac01      	add	r4, sp, #4
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119a0:	0020      	movs	r0, r4
  mibReq.Type = MIB_NVM_CTXS;
 80119a2:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119a4:	f7f5 fcc4 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  pNvm = mibReq.Param.Contexts;
 80119a8:	4b25      	ldr	r3, [pc, #148]	; (8011a40 <LRW_Init+0x154>)
 80119aa:	6862      	ldr	r2, [r4, #4]
 80119ac:	601a      	str	r2, [r3, #0]
  if((nvmBytes = NvmDataMgmtRestore())) {
 80119ae:	f7f3 fa75 	bl	8004e9c <NvmDataMgmtRestore>
 80119b2:	1e01      	subs	r1, r0, #0
 80119b4:	d002      	beq.n	80119bc <LRW_Init+0xd0>
    DisplayNvmDataChange(state, size);
 80119b6:	2000      	movs	r0, #0
 80119b8:	f7f2 ffea 	bl	8004990 <DisplayNvmDataChange>
  LRW_FromDevCfg();
 80119bc:	f7ff fe56 	bl	801166c <LRW_FromDevCfg>
  mibReq.Type = MIB_DEV_EUI;
 80119c0:	2302      	movs	r3, #2
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119c2:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_EUI;
 80119c4:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119c6:	f7f5 fcb3 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  memcpy(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 80119ca:	4d1e      	ldr	r5, [pc, #120]	; (8011a44 <LRW_Init+0x158>)
 80119cc:	6861      	ldr	r1, [r4, #4]
 80119ce:	2208      	movs	r2, #8
 80119d0:	1c68      	adds	r0, r5, #1
 80119d2:	f004 fabd 	bl	8015f50 <memcpy>
  mibReq.Type = MIB_JOIN_EUI;
 80119d6:	2303      	movs	r3, #3
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119d8:	0020      	movs	r0, r4
  mibReq.Type = MIB_JOIN_EUI;
 80119da:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119dc:	f7f5 fca8 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 80119e0:	0028      	movs	r0, r5
  mibReq.Type = MIB_SE_PIN;
 80119e2:	2604      	movs	r6, #4
  memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 80119e4:	6861      	ldr	r1, [r4, #4]
 80119e6:	2208      	movs	r2, #8
 80119e8:	3009      	adds	r0, #9
 80119ea:	f7f2 ff56 	bl	800489a <memcpy1>
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119ee:	0020      	movs	r0, r4
  mibReq.Type = MIB_SE_PIN;
 80119f0:	7026      	strb	r6, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119f2:	f7f5 fc9d 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  memcpy(CommissioningParams.SePin, mibReq.Param.SePin, 4);
 80119f6:	0028      	movs	r0, r5
 80119f8:	0032      	movs	r2, r6
 80119fa:	6861      	ldr	r1, [r4, #4]
 80119fc:	3011      	adds	r0, #17
 80119fe:	f004 faa7 	bl	8015f50 <memcpy>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8011a02:	231d      	movs	r3, #29
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a04:	0020      	movs	r0, r4
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8011a06:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnablePublicNetwork = true;
 8011a08:	3b1c      	subs	r3, #28
 8011a0a:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a0c:	f7f5 fd56 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8011a10:	2330      	movs	r3, #48	; 0x30
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a12:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8011a14:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 100;
 8011a16:	3334      	adds	r3, #52	; 0x34
 8011a18:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a1a:	f7f5 fd4f 	bl	80074bc <LoRaMacMibSetRequestConfirm>
  LoRaMacStart();
 8011a1e:	f7f5 fc07 	bl	8007230 <LoRaMacStart>
}
 8011a22:	b00a      	add	sp, #40	; 0x28
 8011a24:	bd70      	pop	{r4, r5, r6, pc}
 8011a26:	46c0      	nop			; (mov r8, r8)
 8011a28:	20001c90 	.word	0x20001c90
 8011a2c:	50000400 	.word	0x50000400
 8011a30:	200000e0 	.word	0x200000e0
 8011a34:	20000178 	.word	0x20000178
 8011a38:	20000188 	.word	0x20000188
 8011a3c:	08019e09 	.word	0x08019e09
 8011a40:	2000195c 	.word	0x2000195c
 8011a44:	20000150 	.word	0x20000150

08011a48 <LRW_ToDevCfg>:
  mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011a48:	232c      	movs	r3, #44	; 0x2c
void LRW_ToDevCfg(void) {
 8011a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a4c:	b091      	sub	sp, #68	; 0x44
  mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011a4e:	ac07      	add	r4, sp, #28
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a50:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011a52:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a54:	f7f5 fc6c 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  datarate = mibReq.Param.ChannelsDefaultDatarate;
 8011a58:	2304      	movs	r3, #4
 8011a5a:	56e3      	ldrsb	r3, [r4, r3]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a5c:	0020      	movs	r0, r4
  datarate = mibReq.Param.ChannelsDefaultDatarate;
 8011a5e:	9301      	str	r3, [sp, #4]
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011a60:	2301      	movs	r3, #1
 8011a62:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a64:	f7f5 fc64 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  DevCfg.isOtaa = mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP;
 8011a68:	7923      	ldrb	r3, [r4, #4]
 8011a6a:	4d3c      	ldr	r5, [pc, #240]	; (8011b5c <LRW_ToDevCfg+0x114>)
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	1e5a      	subs	r2, r3, #1
 8011a70:	4193      	sbcs	r3, r2
  memcpy(DevCfg.devEui, mibReq.Param.DevEui, sizeof DevCfg.devEui);
 8011a72:	2608      	movs	r6, #8
  DevCfg.isOtaa = mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP;
 8011a74:	712b      	strb	r3, [r5, #4]
  mibReq.Type = MIB_DEV_EUI;
 8011a76:	2302      	movs	r3, #2
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a78:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_EUI;
 8011a7a:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a7c:	f7f5 fc58 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  memcpy(DevCfg.devEui, mibReq.Param.DevEui, sizeof DevCfg.devEui);
 8011a80:	0032      	movs	r2, r6
 8011a82:	6861      	ldr	r1, [r4, #4]
 8011a84:	1d68      	adds	r0, r5, #5
 8011a86:	f004 fa63 	bl	8015f50 <memcpy>
  mibReq.Type = MIB_JOIN_EUI;
 8011a8a:	2303      	movs	r3, #3
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a8c:	0020      	movs	r0, r4
  mibReq.Type = MIB_JOIN_EUI;
 8011a8e:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a90:	f7f5 fc4e 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  memcpy(DevCfg.appEui, mibReq.Param.JoinEui, sizeof DevCfg.appEui);
 8011a94:	0028      	movs	r0, r5
 8011a96:	0032      	movs	r2, r6
 8011a98:	6861      	ldr	r1, [r4, #4]
 8011a9a:	300d      	adds	r0, #13
 8011a9c:	f004 fa58 	bl	8015f50 <memcpy>
  memcpy(DevCfg.appKey, pNvm->SecureElement.KeyList[NWK_KEY].KeyValue, sizeof DevCfg.appKey);
 8011aa0:	0028      	movs	r0, r5
 8011aa2:	4f2f      	ldr	r7, [pc, #188]	; (8011b60 <LRW_ToDevCfg+0x118>)
 8011aa4:	19b6      	adds	r6, r6, r6
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	0032      	movs	r2, r6
 8011aaa:	31cb      	adds	r1, #203	; 0xcb
 8011aac:	31ff      	adds	r1, #255	; 0xff
 8011aae:	3015      	adds	r0, #21
 8011ab0:	f004 fa4e 	bl	8015f50 <memcpy>
  mibReq.Type = MIB_DEV_ADDR;
 8011ab4:	2307      	movs	r3, #7
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011ab6:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_ADDR;
 8011ab8:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011aba:	f7f5 fc39 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  DevCfg.devAddr = mibReq.Param.DevAddr;
 8011abe:	6863      	ldr	r3, [r4, #4]
  memcpy(DevCfg.nwkSKey, pNvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue, sizeof DevCfg.nwkSKey);
 8011ac0:	0028      	movs	r0, r5
  DevCfg.devAddr = mibReq.Param.DevAddr;
 8011ac2:	62ab      	str	r3, [r5, #40]	; 0x28
  memcpy(DevCfg.nwkSKey, pNvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue, sizeof DevCfg.nwkSKey);
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	0032      	movs	r2, r6
 8011ac8:	0019      	movs	r1, r3
 8011aca:	31fe      	adds	r1, #254	; 0xfe
 8011acc:	31ff      	adds	r1, #255	; 0xff
 8011ace:	302c      	adds	r0, #44	; 0x2c
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	f004 fa3d 	bl	8015f50 <memcpy>
  memcpy(DevCfg.appSKey, pNvm->SecureElement.KeyList[APP_S_KEY].KeyValue, sizeof DevCfg.appSKey);
 8011ad6:	238c      	movs	r3, #140	; 0x8c
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	469c      	mov	ip, r3
 8011adc:	0028      	movs	r0, r5
 8011ade:	9900      	ldr	r1, [sp, #0]
 8011ae0:	0032      	movs	r2, r6
 8011ae2:	4461      	add	r1, ip
 8011ae4:	303c      	adds	r0, #60	; 0x3c
 8011ae6:	f004 fa33 	bl	8015f50 <memcpy>
  mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8011aea:	232f      	movs	r3, #47	; 0x2f
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011aec:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8011aee:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011af0:	f7f5 fc1e 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  DevCfg.txPower = LRW_FromTxPower(mibReq.Param.ChannelsDefaultTxPower);
 8011af4:	7920      	ldrb	r0, [r4, #4]
 8011af6:	f7ff fcff 	bl	80114f8 <LRW_FromTxPower>
 8011afa:	002b      	movs	r3, r5
 8011afc:	334e      	adds	r3, #78	; 0x4e
 8011afe:	7018      	strb	r0, [r3, #0]
  getPhy.Attribute = PHY_SF_FROM_DR;
 8011b00:	2336      	movs	r3, #54	; 0x36
 8011b02:	ae05      	add	r6, sp, #20
 8011b04:	7033      	strb	r3, [r6, #0]
  getPhy.Datarate = datarate;
 8011b06:	9b01      	ldr	r3, [sp, #4]
  DevCfg.sf = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8011b08:	0031      	movs	r1, r6
  getPhy.Datarate = datarate;
 8011b0a:	7073      	strb	r3, [r6, #1]
  DevCfg.sf = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8011b0c:	4b15      	ldr	r3, [pc, #84]	; (8011b64 <LRW_ToDevCfg+0x11c>)
 8011b0e:	7818      	ldrb	r0, [r3, #0]
 8011b10:	f7f7 f88c 	bl	8008c2c <RegionGetPhyParam>
 8011b14:	002b      	movs	r3, r5
 8011b16:	334f      	adds	r3, #79	; 0x4f
 8011b18:	7018      	strb	r0, [r3, #0]
  getPhy.Attribute = PHY_BW_FROM_DR;
 8011b1a:	2337      	movs	r3, #55	; 0x37
 8011b1c:	7033      	strb	r3, [r6, #0]
  getPhy.Datarate = datarate;
 8011b1e:	9b01      	ldr	r3, [sp, #4]
  DevCfg.sf = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8011b20:	9003      	str	r0, [sp, #12]
  getPhy.Datarate = datarate;
 8011b22:	7073      	strb	r3, [r6, #1]
  DevCfg.bw = RegionGetPhyParam(DevCfg.region, &getPhy).Value + 1;
 8011b24:	4b0f      	ldr	r3, [pc, #60]	; (8011b64 <LRW_ToDevCfg+0x11c>)
 8011b26:	0031      	movs	r1, r6
 8011b28:	7818      	ldrb	r0, [r3, #0]
 8011b2a:	f7f7 f87f 	bl	8008c2c <RegionGetPhyParam>
 8011b2e:	002b      	movs	r3, r5
 8011b30:	9004      	str	r0, [sp, #16]
 8011b32:	3350      	adds	r3, #80	; 0x50
 8011b34:	3001      	adds	r0, #1
 8011b36:	7018      	strb	r0, [r3, #0]
  mibReq.Type = MIB_ADR;
 8011b38:	2305      	movs	r3, #5
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b3a:	0020      	movs	r0, r4
  mibReq.Type = MIB_ADR;
 8011b3c:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b3e:	f7f5 fbf7 	bl	8007330 <LoRaMacMibGetRequestConfirm>
  DevCfg.adaptiveDatarate = mibReq.Param.AdrEnable;
 8011b42:	002b      	movs	r3, r5
 8011b44:	7922      	ldrb	r2, [r4, #4]
 8011b46:	3352      	adds	r3, #82	; 0x52
 8011b48:	701a      	strb	r2, [r3, #0]
  DevCfg.dutyCycle = pNvm->MacGroup2.DutyCycleOn;
 8011b4a:	23c4      	movs	r3, #196	; 0xc4
 8011b4c:	683a      	ldr	r2, [r7, #0]
 8011b4e:	005b      	lsls	r3, r3, #1
 8011b50:	5cd3      	ldrb	r3, [r2, r3]
 8011b52:	3553      	adds	r5, #83	; 0x53
 8011b54:	702b      	strb	r3, [r5, #0]
}
 8011b56:	b011      	add	sp, #68	; 0x44
 8011b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5a:	46c0      	nop			; (mov r8, r8)
 8011b5c:	200000e0 	.word	0x200000e0
 8011b60:	2000195c 	.word	0x2000195c
 8011b64:	2000012c 	.word	0x2000012c

08011b68 <LRW_SaveNvm>:
static void LRW_SaveNvm(uint16_t notifyFlags) {
 8011b68:	b510      	push	{r4, lr}
  NvmDataMgmtEvent(notifyFlags);
 8011b6a:	f7f3 f925 	bl	8004db8 <NvmDataMgmtEvent>
  if(!DevCfg.changed.lrw) {
 8011b6e:	4b04      	ldr	r3, [pc, #16]	; (8011b80 <LRW_SaveNvm+0x18>)
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	079b      	lsls	r3, r3, #30
 8011b74:	d403      	bmi.n	8011b7e <LRW_SaveNvm+0x16>
    LRW_ToDevCfg();
 8011b76:	f7ff ff67 	bl	8011a48 <LRW_ToDevCfg>
    EEPROM_Save();
 8011b7a:	f7fe f87f 	bl	800fc7c <EEPROM_Save>
}
 8011b7e:	bd10      	pop	{r4, pc}
 8011b80:	200000e0 	.word	0x200000e0

08011b84 <LRW_IsBusy>:
bool LRW_IsBusy(void) {
 8011b84:	b510      	push	{r4, lr}
  return LoRaMacIsBusy();
 8011b86:	f7f4 f857 	bl	8005c38 <LoRaMacIsBusy>
}
 8011b8a:	bd10      	pop	{r4, pc}

08011b8c <LRW_HasQueue>:

////////////////////////////////////////////////////

int32_t LRW_HasQueue(void) {
  for(size_t i = 0; i < LRW_QUEUE_LEN; i++) {
    if(lrw.queue[i].msg_type)
 8011b8c:	4b06      	ldr	r3, [pc, #24]	; (8011ba8 <LRW_HasQueue+0x1c>)
      return 1;
 8011b8e:	2001      	movs	r0, #1
    if(lrw.queue[i].msg_type)
 8011b90:	789a      	ldrb	r2, [r3, #2]
 8011b92:	2a00      	cmp	r2, #0
 8011b94:	d106      	bne.n	8011ba4 <LRW_HasQueue+0x18>
 8011b96:	7c5a      	ldrb	r2, [r3, #17]
 8011b98:	2a00      	cmp	r2, #0
 8011b9a:	d103      	bne.n	8011ba4 <LRW_HasQueue+0x18>
 8011b9c:	181b      	adds	r3, r3, r0
 8011b9e:	7fd8      	ldrb	r0, [r3, #31]
      return 1;
 8011ba0:	1e43      	subs	r3, r0, #1
 8011ba2:	4198      	sbcs	r0, r3
  }
  return 0;
}
 8011ba4:	4770      	bx	lr
 8011ba6:	46c0      	nop			; (mov r8, r8)
 8011ba8:	2000192c 	.word	0x2000192c

08011bac <enqueueToSend>:
 *        Either *irq* or *main* context may invoke `enqueueToSend`, no locking
 *        element needed as only *main* can pop, and *irq* only push.
 *        main:           Can't read once .msg_type is cleared.
 *        enqueueToSend:  Can't write once .msg_type is set.
 */
void enqueueToSend(enum MsgType msg_type, uint8_t trigger_type) {
 8011bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bae:	0007      	movs	r7, r0
 8011bb0:	9100      	str	r1, [sp, #0]
  size_t i = 0;

  /* Queue only if we're joined */
  if(!LRW_IsJoined()) {
 8011bb2:	f7ff fce5 	bl	8011580 <LRW_IsJoined>
    DEBUG_MSG("LRW ERR UNJOINED, Ignore Event!\n");
 8011bb6:	4933      	ldr	r1, [pc, #204]	; (8011c84 <enqueueToSend+0xd8>)
  if(!LRW_IsJoined()) {
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d00d      	beq.n	8011bd8 <enqueueToSend+0x2c>
    return;
  }

  /* Pick an empty buffer to use */
  while(lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011bbc:	4d32      	ldr	r5, [pc, #200]	; (8011c88 <enqueueToSend+0xdc>)
 8011bbe:	78ab      	ldrb	r3, [r5, #2]
 8011bc0:	b2de      	uxtb	r6, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00c      	beq.n	8011be0 <enqueueToSend+0x34>
 8011bc6:	7c6b      	ldrb	r3, [r5, #17]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d008      	beq.n	8011bde <enqueueToSend+0x32>
 8011bcc:	1c6b      	adds	r3, r5, #1
 8011bce:	7fdb      	ldrb	r3, [r3, #31]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d054      	beq.n	8011c7e <enqueueToSend+0xd2>

  /* It appears there's no empty buffer */
  if(i >= LRW_QUEUE_LEN) {
    DEBUG_MSG("LRW ERR Queue full!\n");
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	492d      	ldr	r1, [pc, #180]	; (8011c8c <enqueueToSend+0xe0>)
 8011bd8:	f7f9 ffae 	bl	800bb38 <SEGGER_RTT_WriteString>
  /* Queue request for sending message */
#if defined(STX)
  lrw.queue[i].trigger_type = trigger_type;
#endif
  lrw.queue[i].msg_type = msg_type;
}
 8011bdc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  while(lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011bde:	2601      	movs	r6, #1
  switch(msg_type) {
 8011be0:	1e7b      	subs	r3, r7, #1
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d844      	bhi.n	8011c70 <enqueueToSend+0xc4>
  uint8_t *msg = lrw.queue[i].msg;
 8011be6:	240f      	movs	r4, #15
 8011be8:	4374      	muls	r4, r6
      uint32_t v = getBatteryVoltage() / 10;
 8011bea:	f7fe fdfd 	bl	80107e8 <getBatteryVoltage>
  uint8_t *msg = lrw.queue[i].msg;
 8011bee:	3404      	adds	r4, #4
      uint32_t v = getBatteryVoltage() / 10;
 8011bf0:	210a      	movs	r1, #10
  uint8_t *msg = lrw.queue[i].msg;
 8011bf2:	192c      	adds	r4, r5, r4
      uint32_t v = getBatteryVoltage() / 10;
 8011bf4:	f7ee fab8 	bl	8000168 <__udivsi3>
      v = v < 201 ? 201 : v;
 8011bf8:	28c9      	cmp	r0, #201	; 0xc9
 8011bfa:	d200      	bcs.n	8011bfe <enqueueToSend+0x52>
 8011bfc:	20c9      	movs	r0, #201	; 0xc9
      v = v > 327 ? 327 : v;
 8011bfe:	23a4      	movs	r3, #164	; 0xa4
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	4298      	cmp	r0, r3
 8011c04:	d301      	bcc.n	8011c0a <enqueueToSend+0x5e>
 8011c06:	2048      	movs	r0, #72	; 0x48
 8011c08:	30ff      	adds	r0, #255	; 0xff
      msg[1] = (v - 200) & 0x7f;
 8011c0a:	3038      	adds	r0, #56	; 0x38
 8011c0c:	7060      	strb	r0, [r4, #1]
      BMA400_Read();
 8011c0e:	f002 f88d 	bl	8013d2c <BMA400_Read>
      msg[2] = bma400.raw_x;
 8011c12:	4b1f      	ldr	r3, [pc, #124]	; (8011c90 <enqueueToSend+0xe4>)
 8011c14:	8a5a      	ldrh	r2, [r3, #18]
 8011c16:	70a2      	strb	r2, [r4, #2]
      msg[3] = bma400.raw_y;
 8011c18:	8a9a      	ldrh	r2, [r3, #20]
 8011c1a:	70e2      	strb	r2, [r4, #3]
      msg[4] = bma400.raw_z;
 8011c1c:	8ada      	ldrh	r2, [r3, #22]
 8011c1e:	7122      	strb	r2, [r4, #4]
      msg[5] = bma400.raw_x_ref;
 8011c20:	7e1a      	ldrb	r2, [r3, #24]
 8011c22:	7162      	strb	r2, [r4, #5]
      msg[6] = bma400.raw_y_ref;
 8011c24:	7e5a      	ldrb	r2, [r3, #25]
 8011c26:	71a2      	strb	r2, [r4, #6]
      msg[7] = bma400.raw_z_ref;
 8011c28:	7e9b      	ldrb	r3, [r3, #26]
 8011c2a:	71e3      	strb	r3, [r4, #7]
      HDC2080_Read();
 8011c2c:	f002 fa0c 	bl	8014048 <HDC2080_Read>
      msg[8] = hdc2080.raw_temp >> 7 & 0xff;
 8011c30:	4a18      	ldr	r2, [pc, #96]	; (8011c94 <enqueueToSend+0xe8>)
 8011c32:	8813      	ldrh	r3, [r2, #0]
 8011c34:	09d9      	lsrs	r1, r3, #7
 8011c36:	7221      	strb	r1, [r4, #8]
      msg[9] = (hdc2080.raw_temp >> 8 & 0x80) | hdc2080.humid % 100;
 8011c38:	217f      	movs	r1, #127	; 0x7f
 8011c3a:	0a1b      	lsrs	r3, r3, #8
 8011c3c:	438b      	bics	r3, r1
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	7990      	ldrb	r0, [r2, #6]
 8011c42:	391b      	subs	r1, #27
 8011c44:	f7ee fb16 	bl	8000274 <__aeabi_uidivmod>
 8011c48:	9b01      	ldr	r3, [sp, #4]
 8011c4a:	4319      	orrs	r1, r3
 8011c4c:	7261      	strb	r1, [r4, #9]
      SFH7776_Read();
 8011c4e:	f002 f95b 	bl	8013f08 <SFH7776_Read>
    msg[0] = lrw.queue[i].trigger_type & 0xf;
 8011c52:	210f      	movs	r1, #15
      msg[10] = sfh7776.lux;
 8011c54:	4b10      	ldr	r3, [pc, #64]	; (8011c98 <enqueueToSend+0xec>)
 8011c56:	88db      	ldrh	r3, [r3, #6]
 8011c58:	72a3      	strb	r3, [r4, #10]
      msg[11] = sfh7776.lux >> 8 & 0x3f;
 8011c5a:	049b      	lsls	r3, r3, #18
 8011c5c:	0e9b      	lsrs	r3, r3, #26
 8011c5e:	72e3      	strb	r3, [r4, #11]
    msg[0] = lrw.queue[i].trigger_type & 0xf;
 8011c60:	000b      	movs	r3, r1
 8011c62:	4373      	muls	r3, r6
 8011c64:	18eb      	adds	r3, r5, r3
 8011c66:	7c1a      	ldrb	r2, [r3, #16]
 8011c68:	400a      	ands	r2, r1
 8011c6a:	7022      	strb	r2, [r4, #0]
    lrw.queue[i].len = 12;
 8011c6c:	220c      	movs	r2, #12
 8011c6e:	70da      	strb	r2, [r3, #3]
  lrw.queue[i].trigger_type = trigger_type;
 8011c70:	230f      	movs	r3, #15
 8011c72:	435e      	muls	r6, r3
 8011c74:	9b00      	ldr	r3, [sp, #0]
 8011c76:	19ad      	adds	r5, r5, r6
 8011c78:	742b      	strb	r3, [r5, #16]
  lrw.queue[i].msg_type = msg_type;
 8011c7a:	70af      	strb	r7, [r5, #2]
 8011c7c:	e7ae      	b.n	8011bdc <enqueueToSend+0x30>
  while(lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011c7e:	2602      	movs	r6, #2
 8011c80:	e7ae      	b.n	8011be0 <enqueueToSend+0x34>
 8011c82:	46c0      	nop			; (mov r8, r8)
 8011c84:	08019e1e 	.word	0x08019e1e
 8011c88:	2000192c 	.word	0x2000192c
 8011c8c:	08019e3f 	.word	0x08019e3f
 8011c90:	200019d4 	.word	0x200019d4
 8011c94:	200019f0 	.word	0x200019f0
 8011c98:	200019f8 	.word	0x200019f8

08011c9c <LRW_Send>:
 *
 *    Automatic storage duration
 *        Make sure the SendPayload can take buffer from stack, currently it
 *        can as it copies it to an internal buffer.
 */
void LRW_Send(void) {
 8011c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  size_t i = 0;
 8011c9e:	2500      	movs	r5, #0
  LmHandlerAppData_t appData;

  /* Pick a queued message, if there is any */
  while(!lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011ca0:	4c2e      	ldr	r4, [pc, #184]	; (8011d5c <LRW_Send+0xc0>)
void LRW_Send(void) {
 8011ca2:	b085      	sub	sp, #20
  while(!lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011ca4:	78a3      	ldrb	r3, [r4, #2]
 8011ca6:	42ab      	cmp	r3, r5
 8011ca8:	d108      	bne.n	8011cbc <LRW_Send+0x20>
 8011caa:	7c63      	ldrb	r3, [r4, #17]
 8011cac:	3501      	adds	r5, #1
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d104      	bne.n	8011cbc <LRW_Send+0x20>
 8011cb2:	1963      	adds	r3, r4, r5
 8011cb4:	7fdd      	ldrb	r5, [r3, #31]
 8011cb6:	426b      	negs	r3, r5
 8011cb8:	415d      	adcs	r5, r3
 8011cba:	3502      	adds	r5, #2

  /* Pick ongoing message instead */
  i = lrw.retrans_left ? lrw.retrans_index : i;
 8011cbc:	7823      	ldrb	r3, [r4, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d012      	beq.n	8011ce8 <LRW_Send+0x4c>
 8011cc2:	7865      	ldrb	r5, [r4, #1]

  /* It appears there's none */
  if(i >= LRW_QUEUE_LEN) {
 8011cc4:	2d02      	cmp	r5, #2
 8011cc6:	d919      	bls.n	8011cfc <LRW_Send+0x60>
    lrw.retrans_left--;
  }
  if(!lrw.retrans_left) {
    lrw.queue[i].msg_type = 0;
  }
}
 8011cc8:	b005      	add	sp, #20
 8011cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("%02x", lrw.queue[i].msg[--j]);
 8011ccc:	9b01      	ldr	r3, [sp, #4]
 8011cce:	3f01      	subs	r7, #1
 8011cd0:	5dda      	ldrb	r2, [r3, r7]
 8011cd2:	4923      	ldr	r1, [pc, #140]	; (8011d60 <LRW_Send+0xc4>)
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	f7fa f902 	bl	800bede <SEGGER_RTT_printf>
 8011cda:	e01c      	b.n	8011d16 <LRW_Send+0x7a>
    lrw.retrans_left--;
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	7023      	strb	r3, [r4, #0]
  if(!lrw.retrans_left) {
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1f0      	bne.n	8011cc8 <LRW_Send+0x2c>
 8011ce6:	e032      	b.n	8011d4e <LRW_Send+0xb2>
  if(i >= LRW_QUEUE_LEN) {
 8011ce8:	2d03      	cmp	r5, #3
 8011cea:	d0ed      	beq.n	8011cc8 <LRW_Send+0x2c>
  if(!lrw.retrans_left && DevCfg.confirmedMsgs) {
 8011cec:	4b1d      	ldr	r3, [pc, #116]	; (8011d64 <LRW_Send+0xc8>)
 8011cee:	3351      	adds	r3, #81	; 0x51
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d002      	beq.n	8011cfc <LRW_Send+0x60>
    lrw.retrans_left = 3;
 8011cf6:	2303      	movs	r3, #3
    lrw.retrans_index = i;
 8011cf8:	7065      	strb	r5, [r4, #1]
    lrw.retrans_left = 3;
 8011cfa:	7023      	strb	r3, [r4, #0]
  DBG_PRINTF("LRW >TX retrans_left:%d [%u] 0x", lrw.retrans_left, lrw.queue[i].len);
 8011cfc:	260f      	movs	r6, #15
 8011cfe:	436e      	muls	r6, r5
 8011d00:	19a7      	adds	r7, r4, r6
 8011d02:	78fb      	ldrb	r3, [r7, #3]
 8011d04:	2000      	movs	r0, #0
 8011d06:	7822      	ldrb	r2, [r4, #0]
 8011d08:	4917      	ldr	r1, [pc, #92]	; (8011d68 <LRW_Send+0xcc>)
 8011d0a:	3604      	adds	r6, #4
 8011d0c:	f7fa f8e7 	bl	800bede <SEGGER_RTT_printf>
  for(size_t j = lrw.queue[i].len; j;) {
 8011d10:	19a3      	adds	r3, r4, r6
 8011d12:	78ff      	ldrb	r7, [r7, #3]
 8011d14:	9301      	str	r3, [sp, #4]
 8011d16:	2f00      	cmp	r7, #0
 8011d18:	d1d8      	bne.n	8011ccc <LRW_Send+0x30>
  DBG_PRINTF("\n");
 8011d1a:	4914      	ldr	r1, [pc, #80]	; (8011d6c <LRW_Send+0xd0>)
 8011d1c:	0038      	movs	r0, r7
 8011d1e:	f7fa f8de 	bl	800bede <SEGGER_RTT_printf>
  appData.BufferSize = lrw.queue[i].len;
 8011d22:	230f      	movs	r3, #15
 8011d24:	436b      	muls	r3, r5
 8011d26:	18e3      	adds	r3, r4, r3
 8011d28:	78db      	ldrb	r3, [r3, #3]
 8011d2a:	aa02      	add	r2, sp, #8
 8011d2c:	7053      	strb	r3, [r2, #1]
  appData.Port = DevCfg.txPort;
 8011d2e:	4b0d      	ldr	r3, [pc, #52]	; (8011d64 <LRW_Send+0xc8>)
  appData.Buffer = lrw.queue[i].msg;
 8011d30:	19a6      	adds	r6, r4, r6
 8011d32:	9603      	str	r6, [sp, #12]
  appData.Port = DevCfg.txPort;
 8011d34:	334d      	adds	r3, #77	; 0x4d
 8011d36:	781b      	ldrb	r3, [r3, #0]
  LRW_TX(&appData);
 8011d38:	0010      	movs	r0, r2
  appData.Port = DevCfg.txPort;
 8011d3a:	7013      	strb	r3, [r2, #0]
  LRW_TX(&appData);
 8011d3c:	f7ff fc38 	bl	80115b0 <LRW_TX>
  if(DutyCycleWaitTime) {
 8011d40:	4b0b      	ldr	r3, [pc, #44]	; (8011d70 <LRW_Send+0xd4>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d1bf      	bne.n	8011cc8 <LRW_Send+0x2c>
  if(lrw.retrans_left) {
 8011d48:	7823      	ldrb	r3, [r4, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d1c6      	bne.n	8011cdc <LRW_Send+0x40>
    lrw.queue[i].msg_type = 0;
 8011d4e:	230f      	movs	r3, #15
 8011d50:	435d      	muls	r5, r3
 8011d52:	2300      	movs	r3, #0
 8011d54:	1964      	adds	r4, r4, r5
 8011d56:	70a3      	strb	r3, [r4, #2]
 8011d58:	e7b6      	b.n	8011cc8 <LRW_Send+0x2c>
 8011d5a:	46c0      	nop			; (mov r8, r8)
 8011d5c:	2000192c 	.word	0x2000192c
 8011d60:	080196f0 	.word	0x080196f0
 8011d64:	200000e0 	.word	0x200000e0
 8011d68:	08019e54 	.word	0x08019e54
 8011d6c:	08018fe6 	.word	0x08018fe6
 8011d70:	20001928 	.word	0x20001928

08011d74 <PrepareWakeup>:
    PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
    enqueueToSend(SCHEDULED, 0);
  }
}

static void PrepareWakeup(enum WakeUpReason reason, uint32_t duration) {
 8011d74:	b570      	push	{r4, r5, r6, lr}
 8011d76:	0005      	movs	r5, r0
 8011d78:	000c      	movs	r4, r1
  uint32_t now = HW_RTCGetSTime();
 8011d7a:	f7fe fee3 	bl	8010b44 <HW_RTCGetSTime>
  uint32_t due = 0;

  /* Apply settings */
  switch(reason) {
 8011d7e:	4b19      	ldr	r3, [pc, #100]	; (8011de4 <PrepareWakeup+0x70>)
 8011d80:	2d02      	cmp	r5, #2
 8011d82:	d124      	bne.n	8011dce <PrepareWakeup+0x5a>
  case WAKEUP_LRW_NONE:      wuh.dutycycle_due = wuh.schedmsg_due = 0;          break;
  case WAKEUP_LRW_DUTYCYCLE: wuh.dutycycle_due = duration ? now + duration : 0; break;
 8011d84:	2c00      	cmp	r4, #0
 8011d86:	d000      	beq.n	8011d8a <PrepareWakeup+0x16>
 8011d88:	1824      	adds	r4, r4, r0
 8011d8a:	609c      	str	r4, [r3, #8]
  case WAKEUP_LRW_SCHEDMSG:  wuh.schedmsg_due  = duration ? now + duration : 0; break;
  }

  /* Fix overdue dues */
  if(wuh.dutycycle_due && wuh.dutycycle_due < now) wuh.dutycycle_due = now;
 8011d8c:	689a      	ldr	r2, [r3, #8]
 8011d8e:	2a00      	cmp	r2, #0
 8011d90:	d002      	beq.n	8011d98 <PrepareWakeup+0x24>
 8011d92:	4282      	cmp	r2, r0
 8011d94:	d200      	bcs.n	8011d98 <PrepareWakeup+0x24>
 8011d96:	6098      	str	r0, [r3, #8]
  if(wuh.schedmsg_due  && wuh.schedmsg_due < now) wuh.schedmsg_due = now;
 8011d98:	685a      	ldr	r2, [r3, #4]
 8011d9a:	2a00      	cmp	r2, #0
 8011d9c:	d002      	beq.n	8011da4 <PrepareWakeup+0x30>
 8011d9e:	4282      	cmp	r2, r0
 8011da0:	d200      	bcs.n	8011da4 <PrepareWakeup+0x30>
 8011da2:	6058      	str	r0, [r3, #4]

  /* Conclude wakeup timer state */
  wuh.reason = WAKEUP_LRW_NONE;
 8011da4:	2200      	movs	r2, #0
 8011da6:	701a      	strb	r2, [r3, #0]
  if(wuh.dutycycle_due) {
 8011da8:	689a      	ldr	r2, [r3, #8]
 8011daa:	2a00      	cmp	r2, #0
 8011dac:	d001      	beq.n	8011db2 <PrepareWakeup+0x3e>
    due = wuh.dutycycle_due;
    wuh.reason = WAKEUP_LRW_DUTYCYCLE;
 8011dae:	2102      	movs	r1, #2
 8011db0:	7019      	strb	r1, [r3, #0]
  }
  if(wuh.schedmsg_due && (!due || wuh.schedmsg_due < due)) {
 8011db2:	6859      	ldr	r1, [r3, #4]
 8011db4:	2900      	cmp	r1, #0
 8011db6:	d00f      	beq.n	8011dd8 <PrepareWakeup+0x64>
 8011db8:	2a00      	cmp	r2, #0
 8011dba:	d001      	beq.n	8011dc0 <PrepareWakeup+0x4c>
 8011dbc:	428a      	cmp	r2, r1
 8011dbe:	d902      	bls.n	8011dc6 <PrepareWakeup+0x52>
    due = wuh.schedmsg_due;
    wuh.reason = WAKEUP_LRW_SCHEDMSG;
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	701a      	strb	r2, [r3, #0]
 8011dc4:	000a      	movs	r2, r1
  }

  if(due) {
    HW_RTCWUTSet(due - now);
 8011dc6:	1a10      	subs	r0, r2, r0
 8011dc8:	f7fe ff2c 	bl	8010c24 <HW_RTCWUTSet>
  } else {
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
  }
}
 8011dcc:	bd70      	pop	{r4, r5, r6, pc}
  case WAKEUP_LRW_SCHEDMSG:  wuh.schedmsg_due  = duration ? now + duration : 0; break;
 8011dce:	2c00      	cmp	r4, #0
 8011dd0:	d000      	beq.n	8011dd4 <PrepareWakeup+0x60>
 8011dd2:	1824      	adds	r4, r4, r0
 8011dd4:	605c      	str	r4, [r3, #4]
 8011dd6:	e7d9      	b.n	8011d8c <PrepareWakeup+0x18>
  if(due) {
 8011dd8:	2a00      	cmp	r2, #0
 8011dda:	d1f4      	bne.n	8011dc6 <PrepareWakeup+0x52>
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8011ddc:	4802      	ldr	r0, [pc, #8]	; (8011de8 <PrepareWakeup+0x74>)
 8011dde:	f7fd fc3b 	bl	800f658 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8011de2:	e7f3      	b.n	8011dcc <PrepareWakeup+0x58>
 8011de4:	20001844 	.word	0x20001844
 8011de8:	20001994 	.word	0x20001994

08011dec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8011dec:	b510      	push	{r4, lr}
 8011dee:	0004      	movs	r4, r0
 8011df0:	b086      	sub	sp, #24
  switch(GPIO_Pin) {
 8011df2:	2820      	cmp	r0, #32
 8011df4:	d061      	beq.n	8011eba <HAL_GPIO_EXTI_Callback+0xce>
 8011df6:	d808      	bhi.n	8011e0a <HAL_GPIO_EXTI_Callback+0x1e>
 8011df8:	2802      	cmp	r0, #2
 8011dfa:	d065      	beq.n	8011ec8 <HAL_GPIO_EXTI_Callback+0xdc>
 8011dfc:	2808      	cmp	r0, #8
 8011dfe:	d100      	bne.n	8011e02 <HAL_GPIO_EXTI_Callback+0x16>
 8011e00:	e067      	b.n	8011ed2 <HAL_GPIO_EXTI_Callback+0xe6>
 8011e02:	2801      	cmp	r0, #1
 8011e04:	d02a      	beq.n	8011e5c <HAL_GPIO_EXTI_Callback+0x70>
    DEBUG_MSG("IRQ Unhandled\n");
 8011e06:	494d      	ldr	r1, [pc, #308]	; (8011f3c <HAL_GPIO_EXTI_Callback+0x150>)
 8011e08:	e048      	b.n	8011e9c <HAL_GPIO_EXTI_Callback+0xb0>
  switch(GPIO_Pin) {
 8011e0a:	2380      	movs	r3, #128	; 0x80
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	4298      	cmp	r0, r3
 8011e10:	d100      	bne.n	8011e14 <HAL_GPIO_EXTI_Callback+0x28>
 8011e12:	e082      	b.n	8011f1a <HAL_GPIO_EXTI_Callback+0x12e>
 8011e14:	2380      	movs	r3, #128	; 0x80
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	4298      	cmp	r0, r3
 8011e1a:	d1f4      	bne.n	8011e06 <HAL_GPIO_EXTI_Callback+0x1a>
    SFH7776_Read();
 8011e1c:	f002 f874 	bl	8013f08 <SFH7776_Read>
    triggerType = sfh7776.als_vis < sfh7776.als_vis_tl ? LRW_B0_TRIGGER_LIGHT_LOW : LRW_B0_TRIGGER_LIGHT_HIGH;
 8011e20:	4a47      	ldr	r2, [pc, #284]	; (8011f40 <HAL_GPIO_EXTI_Callback+0x154>)
    DEBUG_PRINTF("SEN SFH7776 IRQ trigger:%d ALS_VIS:0x%04x ALS_IR:0x%04x lux:%5d\n", triggerType, sfh7776.als_vis, sfh7776.als_ir, sfh7776.lux);
 8011e22:	2000      	movs	r0, #0
    triggerType = sfh7776.als_vis < sfh7776.als_vis_tl ? LRW_B0_TRIGGER_LIGHT_LOW : LRW_B0_TRIGGER_LIGHT_HIGH;
 8011e24:	8813      	ldrh	r3, [r2, #0]
 8011e26:	8891      	ldrh	r1, [r2, #4]
 8011e28:	428b      	cmp	r3, r1
 8011e2a:	4189      	sbcs	r1, r1
 8011e2c:	424c      	negs	r4, r1
    DEBUG_PRINTF("SEN SFH7776 IRQ trigger:%d ALS_VIS:0x%04x ALS_IR:0x%04x lux:%5d\n", triggerType, sfh7776.als_vis, sfh7776.als_ir, sfh7776.lux);
 8011e2e:	88d1      	ldrh	r1, [r2, #6]
    triggerType = sfh7776.als_vis < sfh7776.als_vis_tl ? LRW_B0_TRIGGER_LIGHT_LOW : LRW_B0_TRIGGER_LIGHT_HIGH;
 8011e30:	3402      	adds	r4, #2
    DEBUG_PRINTF("SEN SFH7776 IRQ trigger:%d ALS_VIS:0x%04x ALS_IR:0x%04x lux:%5d\n", triggerType, sfh7776.als_vis, sfh7776.als_ir, sfh7776.lux);
 8011e32:	9101      	str	r1, [sp, #4]
 8011e34:	8852      	ldrh	r2, [r2, #2]
 8011e36:	4943      	ldr	r1, [pc, #268]	; (8011f44 <HAL_GPIO_EXTI_Callback+0x158>)
 8011e38:	9200      	str	r2, [sp, #0]
 8011e3a:	0022      	movs	r2, r4
 8011e3c:	f7fa f84f 	bl	800bede <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011e40:	f7ff fb9e 	bl	8011580 <LRW_IsJoined>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d028      	beq.n	8011e9a <HAL_GPIO_EXTI_Callback+0xae>
    if(!DevCfg.useSensor.sfh7776) {
 8011e48:	4b3f      	ldr	r3, [pc, #252]	; (8011f48 <HAL_GPIO_EXTI_Callback+0x15c>)
      DEBUG_MSG("SEN SHF7776 UNUSED, Ignore Event!\n");
 8011e4a:	4940      	ldr	r1, [pc, #256]	; (8011f4c <HAL_GPIO_EXTI_Callback+0x160>)
    if(!DevCfg.useSensor.sfh7776) {
 8011e4c:	336c      	adds	r3, #108	; 0x6c
 8011e4e:	781a      	ldrb	r2, [r3, #0]
 8011e50:	2302      	movs	r3, #2
 8011e52:	0010      	movs	r0, r2
 8011e54:	4018      	ands	r0, r3
 8011e56:	421a      	tst	r2, r3
 8011e58:	d05c      	beq.n	8011f14 <HAL_GPIO_EXTI_Callback+0x128>
 8011e5a:	e029      	b.n	8011eb0 <HAL_GPIO_EXTI_Callback+0xc4>
    BMA400_Read();
 8011e5c:	f001 ff66 	bl	8013d2c <BMA400_Read>
    DEBUG_PRINTF("SEN BMA400  IRQ trigger:%u X:%5d Y:%5d Z:%5d rX:%5d rY:%5d rZ:%5d IRQ:0x%04x\n",
 8011e60:	4a3b      	ldr	r2, [pc, #236]	; (8011f50 <HAL_GPIO_EXTI_Callback+0x164>)
 8011e62:	2106      	movs	r1, #6
 8011e64:	5e53      	ldrsh	r3, [r2, r1]
 8011e66:	8891      	ldrh	r1, [r2, #4]
 8011e68:	9105      	str	r1, [sp, #20]
 8011e6a:	2010      	movs	r0, #16
 8011e6c:	5e11      	ldrsh	r1, [r2, r0]
 8011e6e:	9104      	str	r1, [sp, #16]
 8011e70:	200e      	movs	r0, #14
 8011e72:	5e11      	ldrsh	r1, [r2, r0]
 8011e74:	9103      	str	r1, [sp, #12]
 8011e76:	200c      	movs	r0, #12
 8011e78:	5e11      	ldrsh	r1, [r2, r0]
 8011e7a:	9102      	str	r1, [sp, #8]
 8011e7c:	200a      	movs	r0, #10
 8011e7e:	5e11      	ldrsh	r1, [r2, r0]
 8011e80:	2000      	movs	r0, #0
 8011e82:	9101      	str	r1, [sp, #4]
 8011e84:	2108      	movs	r1, #8
 8011e86:	5e52      	ldrsh	r2, [r2, r1]
 8011e88:	4932      	ldr	r1, [pc, #200]	; (8011f54 <HAL_GPIO_EXTI_Callback+0x168>)
 8011e8a:	9200      	str	r2, [sp, #0]
 8011e8c:	0022      	movs	r2, r4
 8011e8e:	f7fa f826 	bl	800bede <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011e92:	f7ff fb75 	bl	8011580 <LRW_IsJoined>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d102      	bne.n	8011ea0 <HAL_GPIO_EXTI_Callback+0xb4>
      DEBUG_MSG("LRW WARN  UNJOINED, Ignore Event!\n");
 8011e9a:	492f      	ldr	r1, [pc, #188]	; (8011f58 <HAL_GPIO_EXTI_Callback+0x16c>)
    DEBUG_MSG("IRQ Unhandled\n");
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	e039      	b.n	8011f14 <HAL_GPIO_EXTI_Callback+0x128>
    if(!DevCfg.useSensor.bma400) {
 8011ea0:	4b29      	ldr	r3, [pc, #164]	; (8011f48 <HAL_GPIO_EXTI_Callback+0x15c>)
      DEBUG_MSG("SEN BMA400  UNUSED, Ignore Event!\n");
 8011ea2:	492e      	ldr	r1, [pc, #184]	; (8011f5c <HAL_GPIO_EXTI_Callback+0x170>)
    if(!DevCfg.useSensor.bma400) {
 8011ea4:	336c      	adds	r3, #108	; 0x6c
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	0018      	movs	r0, r3
 8011eaa:	4020      	ands	r0, r4
 8011eac:	4223      	tst	r3, r4
 8011eae:	d031      	beq.n	8011f14 <HAL_GPIO_EXTI_Callback+0x128>
    enqueueToSend(EVENT, triggerType);
 8011eb0:	0021      	movs	r1, r4
 8011eb2:	2002      	movs	r0, #2
 8011eb4:	f7ff fe7a 	bl	8011bac <enqueueToSend>
    break;
 8011eb8:	e004      	b.n	8011ec4 <HAL_GPIO_EXTI_Callback+0xd8>
    GpioIrq[5]->IrqHandler(GpioIrq[5]->Context);
 8011eba:	4b29      	ldr	r3, [pc, #164]	; (8011f60 <HAL_GPIO_EXTI_Callback+0x174>)
 8011ebc:	695b      	ldr	r3, [r3, #20]
 8011ebe:	691a      	ldr	r2, [r3, #16]
 8011ec0:	68d8      	ldr	r0, [r3, #12]
 8011ec2:	4790      	blx	r2
}
 8011ec4:	b006      	add	sp, #24
 8011ec6:	bd10      	pop	{r4, pc}
    HW_ExitStopMode();
 8011ec8:	f7fe fe5e 	bl	8010b88 <HW_ExitStopMode>
    NFCISR();
 8011ecc:	f7fe ffce 	bl	8010e6c <NFCISR>
    break;
 8011ed0:	e7f8      	b.n	8011ec4 <HAL_GPIO_EXTI_Callback+0xd8>
    HDC2080_Read();
 8011ed2:	f002 f8b9 	bl	8014048 <HDC2080_Read>
      hdc2080.status & 0x40 ? LRW_B0_TRIGGER_TEMPERATURE_HIGH :
 8011ed6:	4b23      	ldr	r3, [pc, #140]	; (8011f64 <HAL_GPIO_EXTI_Callback+0x178>)
    triggerType =
 8011ed8:	2404      	movs	r4, #4
      hdc2080.status & 0x40 ? LRW_B0_TRIGGER_TEMPERATURE_HIGH :
 8011eda:	79db      	ldrb	r3, [r3, #7]
    triggerType =
 8011edc:	065a      	lsls	r2, r3, #25
 8011ede:	d407      	bmi.n	8011ef0 <HAL_GPIO_EXTI_Callback+0x104>
 8011ee0:	3401      	adds	r4, #1
 8011ee2:	069a      	lsls	r2, r3, #26
 8011ee4:	d404      	bmi.n	8011ef0 <HAL_GPIO_EXTI_Callback+0x104>
 8011ee6:	340b      	adds	r4, #11
 8011ee8:	401c      	ands	r4, r3
 8011eea:	4262      	negs	r2, r4
 8011eec:	4154      	adcs	r4, r2
 8011eee:	3406      	adds	r4, #6
    DEBUG_PRINTF("SEN HDC2080 IRQ trigger:%u CONFIG:0x%02x\n", triggerType, hdc2080.status);
 8011ef0:	0022      	movs	r2, r4
 8011ef2:	491d      	ldr	r1, [pc, #116]	; (8011f68 <HAL_GPIO_EXTI_Callback+0x17c>)
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	f7f9 fff2 	bl	800bede <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011efa:	f7ff fb41 	bl	8011580 <LRW_IsJoined>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d0cb      	beq.n	8011e9a <HAL_GPIO_EXTI_Callback+0xae>
    if(!DevCfg.useSensor.hdc2080) {
 8011f02:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <HAL_GPIO_EXTI_Callback+0x15c>)
      DEBUG_MSG("SEN HDC2080 UNUSED, Ignore Event!\n");
 8011f04:	4919      	ldr	r1, [pc, #100]	; (8011f6c <HAL_GPIO_EXTI_Callback+0x180>)
    if(!DevCfg.useSensor.hdc2080) {
 8011f06:	336c      	adds	r3, #108	; 0x6c
 8011f08:	781a      	ldrb	r2, [r3, #0]
 8011f0a:	2304      	movs	r3, #4
 8011f0c:	0010      	movs	r0, r2
 8011f0e:	4018      	ands	r0, r3
 8011f10:	421a      	tst	r2, r3
 8011f12:	d1cd      	bne.n	8011eb0 <HAL_GPIO_EXTI_Callback+0xc4>
    DEBUG_MSG("IRQ Unhandled\n");
 8011f14:	f7f9 fe10 	bl	800bb38 <SEGGER_RTT_WriteString>
}
 8011f18:	e7d4      	b.n	8011ec4 <HAL_GPIO_EXTI_Callback+0xd8>
    DEBUG_PRINTF("SEN Reed Switch IRQ trigger:%u\n", LRW_B0_TRIGGER_REED_SWITCH);
 8011f1a:	2208      	movs	r2, #8
 8011f1c:	4914      	ldr	r1, [pc, #80]	; (8011f70 <HAL_GPIO_EXTI_Callback+0x184>)
 8011f1e:	2000      	movs	r0, #0
 8011f20:	f7f9 ffdd 	bl	800bede <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011f24:	f7ff fb2c 	bl	8011580 <LRW_IsJoined>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d0b6      	beq.n	8011e9a <HAL_GPIO_EXTI_Callback+0xae>
    if(LRW_IsBusy())
 8011f2c:	f7ff fe2a 	bl	8011b84 <LRW_IsBusy>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d1c7      	bne.n	8011ec4 <HAL_GPIO_EXTI_Callback+0xd8>
    ReedSwitchISR();
 8011f34:	f7fe ff2c 	bl	8010d90 <ReedSwitchISR>
    break;
 8011f38:	e7c4      	b.n	8011ec4 <HAL_GPIO_EXTI_Callback+0xd8>
 8011f3a:	46c0      	nop			; (mov r8, r8)
 8011f3c:	08019fd9 	.word	0x08019fd9
 8011f40:	200019f8 	.word	0x200019f8
 8011f44:	08019f75 	.word	0x08019f75
 8011f48:	200000e0 	.word	0x200000e0
 8011f4c:	08019fb6 	.word	0x08019fb6
 8011f50:	200019d4 	.word	0x200019d4
 8011f54:	08019e74 	.word	0x08019e74
 8011f58:	08019ec2 	.word	0x08019ec2
 8011f5c:	08019ee5 	.word	0x08019ee5
 8011f60:	20000328 	.word	0x20000328
 8011f64:	200019f0 	.word	0x200019f0
 8011f68:	08019f08 	.word	0x08019f08
 8011f6c:	08019f32 	.word	0x08019f32
 8011f70:	08019f55 	.word	0x08019f55

08011f74 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8011f74:	b570      	push	{r4, r5, r6, lr}
  uint32_t now = HW_RTCGetSTime();
 8011f76:	f7fe fde5 	bl	8010b44 <HW_RTCGetSTime>
  DEBUG_PRINTF("RTC WAKEUP now:%d reason:%d\n", now, wuh.reason);
 8011f7a:	4d10      	ldr	r5, [pc, #64]	; (8011fbc <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8011f7c:	0002      	movs	r2, r0
 8011f7e:	782b      	ldrb	r3, [r5, #0]
  uint32_t now = HW_RTCGetSTime();
 8011f80:	0004      	movs	r4, r0
  DEBUG_PRINTF("RTC WAKEUP now:%d reason:%d\n", now, wuh.reason);
 8011f82:	490f      	ldr	r1, [pc, #60]	; (8011fc0 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8011f84:	2000      	movs	r0, #0
 8011f86:	f7f9 ffaa 	bl	800bede <SEGGER_RTT_printf>
  if(wuh.dutycycle_due && wuh.dutycycle_due <= now) {
 8011f8a:	68ab      	ldr	r3, [r5, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d005      	beq.n	8011f9c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
 8011f90:	42a3      	cmp	r3, r4
 8011f92:	d803      	bhi.n	8011f9c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
    PrepareWakeup(WAKEUP_LRW_DUTYCYCLE, 0);
 8011f94:	2100      	movs	r1, #0
 8011f96:	2002      	movs	r0, #2
 8011f98:	f7ff feec 	bl	8011d74 <PrepareWakeup>
  if(wuh.schedmsg_due && wuh.schedmsg_due <= now) {
 8011f9c:	686b      	ldr	r3, [r5, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d00a      	beq.n	8011fb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
 8011fa2:	42a3      	cmp	r3, r4
 8011fa4:	d808      	bhi.n	8011fb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
    PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
 8011fa6:	4b07      	ldr	r3, [pc, #28]	; (8011fc4 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8011fa8:	2001      	movs	r0, #1
 8011faa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011fac:	f7ff fee2 	bl	8011d74 <PrepareWakeup>
    enqueueToSend(SCHEDULED, 0);
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	f7ff fdfa 	bl	8011bac <enqueueToSend>
}
 8011fb8:	bd70      	pop	{r4, r5, r6, pc}
 8011fba:	46c0      	nop			; (mov r8, r8)
 8011fbc:	20001844 	.word	0x20001844
 8011fc0:	08019fe8 	.word	0x08019fe8
 8011fc4:	200000e0 	.word	0x200000e0

08011fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011fc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  DBG_PRINTF("ERROR OCCURRED\n");
 8011fca:	490a      	ldr	r1, [pc, #40]	; (8011ff4 <Error_Handler+0x2c>)
 8011fcc:	2000      	movs	r0, #0
 8011fce:	f7f9 ff86 	bl	800bede <SEGGER_RTT_printf>
  HAL_Delay(10000);
 8011fd2:	4809      	ldr	r0, [pc, #36]	; (8011ff8 <Error_Handler+0x30>)
 8011fd4:	f7fa fb0c 	bl	800c5f0 <HAL_Delay>
  DBG_PRINTF("REBOOTING NOW...\n");
 8011fd8:	4908      	ldr	r1, [pc, #32]	; (8011ffc <Error_Handler+0x34>)
 8011fda:	2000      	movs	r0, #0
 8011fdc:	f7f9 ff7f 	bl	800bede <SEGGER_RTT_printf>
 8011fe0:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011fe4:	4b06      	ldr	r3, [pc, #24]	; (8012000 <Error_Handler+0x38>)
 8011fe6:	4a07      	ldr	r2, [pc, #28]	; (8012004 <Error_Handler+0x3c>)
 8011fe8:	60da      	str	r2, [r3, #12]
 8011fea:	f3bf 8f4f 	dsb	sy
    __NOP();
 8011fee:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8011ff0:	e7fd      	b.n	8011fee <Error_Handler+0x26>
 8011ff2:	46c0      	nop			; (mov r8, r8)
 8011ff4:	0801a005 	.word	0x0801a005
 8011ff8:	00002710 	.word	0x00002710
 8011ffc:	0801a015 	.word	0x0801a015
 8012000:	e000ed00 	.word	0xe000ed00
 8012004:	05fa0004 	.word	0x05fa0004

08012008 <SystemClock_Config>:
{
 8012008:	b510      	push	{r4, lr}
 801200a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801200c:	2234      	movs	r2, #52	; 0x34
 801200e:	2100      	movs	r1, #0
 8012010:	a80d      	add	r0, sp, #52	; 0x34
 8012012:	f003 ffa6 	bl	8015f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012016:	2214      	movs	r2, #20
 8012018:	2100      	movs	r1, #0
 801201a:	4668      	mov	r0, sp
 801201c:	f003 ffa1 	bl	8015f62 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012020:	2220      	movs	r2, #32
 8012022:	2100      	movs	r1, #0
 8012024:	a805      	add	r0, sp, #20
 8012026:	f003 ff9c 	bl	8015f62 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801202a:	2380      	movs	r3, #128	; 0x80
 801202c:	491d      	ldr	r1, [pc, #116]	; (80120a4 <SystemClock_Config+0x9c>)
 801202e:	4c1e      	ldr	r4, [pc, #120]	; (80120a8 <SystemClock_Config+0xa0>)
 8012030:	680a      	ldr	r2, [r1, #0]
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	4022      	ands	r2, r4
 8012036:	4313      	orrs	r3, r2
 8012038:	600b      	str	r3, [r1, #0]
  HAL_PWR_EnableBkUpAccess();
 801203a:	f7fc fb35 	bl	800e6a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801203e:	4a1b      	ldr	r2, [pc, #108]	; (80120ac <SystemClock_Config+0xa4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012040:	a80d      	add	r0, sp, #52	; 0x34
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8012042:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8012044:	4023      	ands	r3, r4
 8012046:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8012048:	231c      	movs	r3, #28
 801204a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801204c:	33e4      	adds	r3, #228	; 0xe4
 801204e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8012050:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012052:	3bff      	subs	r3, #255	; 0xff
 8012054:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8012056:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8012058:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 801205a:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 801205c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 801205e:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8012060:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012062:	f7fc fb73 	bl	800e74c <HAL_RCC_OscConfig>
 8012066:	1e01      	subs	r1, r0, #0
 8012068:	d001      	beq.n	801206e <SystemClock_Config+0x66>
    Error_Handler();
 801206a:	f7ff ffad 	bl	8011fc8 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801206e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8012070:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012072:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012074:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012076:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8012078:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801207a:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 801207c:	f7fc fdb4 	bl	800ebe8 <HAL_RCC_ClockConfig>
 8012080:	2800      	cmp	r0, #0
 8012082:	d1f2      	bne.n	801206a <SystemClock_Config+0x62>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8012084:	23a8      	movs	r3, #168	; 0xa8
 8012086:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012088:	2380      	movs	r3, #128	; 0x80
 801208a:	025b      	lsls	r3, r3, #9
 801208c:	9306      	str	r3, [sp, #24]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801208e:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012090:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012092:	031b      	lsls	r3, r3, #12
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012094:	a805      	add	r0, sp, #20
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012096:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012098:	f7fc fe74 	bl	800ed84 <HAL_RCCEx_PeriphCLKConfig>
 801209c:	2800      	cmp	r0, #0
 801209e:	d1e4      	bne.n	801206a <SystemClock_Config+0x62>
}
 80120a0:	b01a      	add	sp, #104	; 0x68
 80120a2:	bd10      	pop	{r4, pc}
 80120a4:	40007000 	.word	0x40007000
 80120a8:	ffffe7ff 	.word	0xffffe7ff
 80120ac:	40021000 	.word	0x40021000

080120b0 <main>:
{
 80120b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120b2:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 80120b4:	f7fa fa76 	bl	800c5a4 <HAL_Init>
  SystemClock_Config();
 80120b8:	f7ff ffa6 	bl	8012008 <SystemClock_Config>
  MX_GPIO_Init();
 80120bc:	f7fe fa94 	bl	80105e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80120c0:	f7fd fd90 	bl	800fbe4 <MX_DMA_Init>
  MX_ADC_Init();
 80120c4:	f7fd fc44 	bl	800f950 <MX_ADC_Init>
  MX_I2C1_Init();
 80120c8:	f7fe fdc0 	bl	8010c4c <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80120cc:	f7ff f8c4 	bl	8011258 <MX_LPTIM1_Init>
  RtcInit();
 80120d0:	f7f2 f880 	bl	80041d4 <RtcInit>
  MX_SPI1_Init();
 80120d4:	f001 ffea 	bl	80140ac <MX_SPI1_Init>
  HAL_GPIO_WritePin(RF_Switch_GPIO_Port, RF_Switch_Pin, GPIO_PIN_SET);
 80120d8:	20a0      	movs	r0, #160	; 0xa0
 80120da:	2201      	movs	r2, #1
 80120dc:	2104      	movs	r1, #4
 80120de:	05c0      	lsls	r0, r0, #23
 80120e0:	f7fb f8e4 	bl	800d2ac <HAL_GPIO_WritePin>
  DEBUG_PRINTF("BOOTED mainfw RTT@0x%08x\n", &_SEGGER_RTT);
 80120e4:	4ab6      	ldr	r2, [pc, #728]	; (80123c0 <main+0x310>)
 80120e6:	49b7      	ldr	r1, [pc, #732]	; (80123c4 <main+0x314>)
 80120e8:	2000      	movs	r0, #0
 80120ea:	f7f9 fef8 	bl	800bede <SEGGER_RTT_printf>
  I2C_Scan();
 80120ee:	f7fe fb4b 	bl	8010788 <I2C_Scan>
  EEPROM_Load();
 80120f2:	f7fd ffcb 	bl	801008c <EEPROM_Load>
  HAL_GPIO_WritePin(DC_Conv_Mode_GPIO_Port, DC_Conv_Mode_Pin, GPIO_PIN_SET);
 80120f6:	2180      	movs	r1, #128	; 0x80
 80120f8:	20a0      	movs	r0, #160	; 0xa0
 80120fa:	2201      	movs	r2, #1
 80120fc:	0049      	lsls	r1, r1, #1
 80120fe:	05c0      	lsls	r0, r0, #23
 8012100:	f7fb f8d4 	bl	800d2ac <HAL_GPIO_WritePin>
  LRW_Init();
 8012104:	f7ff fbf2 	bl	80118ec <LRW_Init>
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 8012108:	211a      	movs	r1, #26
 801210a:	48af      	ldr	r0, [pc, #700]	; (80123c8 <main+0x318>)
 801210c:	f7fc fa88 	bl	800e620 <HAL_LPTIM_Counter_Start_IT>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8012110:	48ae      	ldr	r0, [pc, #696]	; (80123cc <main+0x31c>)
 8012112:	f7fd faa1 	bl	800f658 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8012116:	2200      	movs	r2, #0
 8012118:	2103      	movs	r1, #3
 801211a:	2002      	movs	r0, #2
 801211c:	f7fa fd82 	bl	800cc24 <HAL_NVIC_SetPriority>
  if(LRW_IsJoined())
 8012120:	f7ff fa2e 	bl	8011580 <LRW_IsJoined>
 8012124:	4caa      	ldr	r4, [pc, #680]	; (80123d0 <main+0x320>)
 8012126:	2800      	cmp	r0, #0
 8012128:	d003      	beq.n	8012132 <main+0x82>
    PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
 801212a:	2001      	movs	r0, #1
 801212c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801212e:	f7ff fe21 	bl	8011d74 <PrepareWakeup>
  NFC_Init();
 8012132:	f000 f987 	bl	8012444 <NFC_Init>
ATECC_status = atcab_init(gCfg);
 8012136:	4ba7      	ldr	r3, [pc, #668]	; (80123d4 <main+0x324>)
 8012138:	6818      	ldr	r0, [r3, #0]
 801213a:	f002 f961 	bl	8014400 <atcab_init>
 801213e:	4ea6      	ldr	r6, [pc, #664]	; (80123d8 <main+0x328>)
 8012140:	1e02      	subs	r2, r0, #0
 8012142:	7030      	strb	r0, [r6, #0]
if (ATECC_status != ATCA_SUCCESS ) {
 8012144:	d003      	beq.n	801214e <main+0x9e>
  DBG_PRINTF("ATECC608a configuration failed: %x\n", ATECC_status);
 8012146:	2000      	movs	r0, #0
 8012148:	49a4      	ldr	r1, [pc, #656]	; (80123dc <main+0x32c>)
 801214a:	f7f9 fec8 	bl	800bede <SEGGER_RTT_printf>
ATECC_status = atcab_read_serial_number(serialnum);
 801214e:	4ba4      	ldr	r3, [pc, #656]	; (80123e0 <main+0x330>)
 8012150:	ad0b      	add	r5, sp, #44	; 0x2c
 8012152:	0029      	movs	r1, r5
 8012154:	6818      	ldr	r0, [r3, #0]
 8012156:	f002 fbaf 	bl	80148b8 <calib_read_serial_number>
 801215a:	7030      	strb	r0, [r6, #0]
if (ATECC_status != ATCA_SUCCESS) {
 801215c:	2800      	cmp	r0, #0
 801215e:	d100      	bne.n	8012162 <main+0xb2>
 8012160:	e0c8      	b.n	80122f4 <main+0x244>
  DBG_PRINTF("ATECC608A could not read serial number: %x\n", ATECC_status);
 8012162:	0002      	movs	r2, r0
 8012164:	499f      	ldr	r1, [pc, #636]	; (80123e4 <main+0x334>)
 8012166:	2000      	movs	r0, #0
 8012168:	f7f9 feb9 	bl	800bede <SEGGER_RTT_printf>
    if(DevCfg.changed.any) {
 801216c:	2101      	movs	r1, #1
 801216e:	7823      	ldrb	r3, [r4, #0]
 8012170:	420b      	tst	r3, r1
 8012172:	d059      	beq.n	8012228 <main+0x178>
      if(DevCfg.changed.bma400) {
 8012174:	2204      	movs	r2, #4
 8012176:	4213      	tst	r3, r2
 8012178:	d012      	beq.n	80121a0 <main+0xf0>
        if(DevCfg.useSensor.bma400) {
 801217a:	0023      	movs	r3, r4
 801217c:	336c      	adds	r3, #108	; 0x6c
 801217e:	781a      	ldrb	r2, [r3, #0]
 8012180:	000d      	movs	r5, r1
 8012182:	0023      	movs	r3, r4
 8012184:	4015      	ands	r5, r2
 8012186:	3364      	adds	r3, #100	; 0x64
 8012188:	420a      	tst	r2, r1
 801218a:	d100      	bne.n	801218e <main+0xde>
 801218c:	e0c6      	b.n	801231c <main+0x26c>
          BMA400_Init(DevCfg.bma400_config, DevCfg.bma400_threshold);
 801218e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012190:	8818      	ldrh	r0, [r3, #0]
 8012192:	b291      	uxth	r1, r2
 8012194:	f001 fd0c 	bl	8013bb0 <BMA400_Init>
          DEBUG_MSG("SEN BMA400  IRQ ON\n");
 8012198:	2000      	movs	r0, #0
 801219a:	4993      	ldr	r1, [pc, #588]	; (80123e8 <main+0x338>)
          DEBUG_MSG("SEN BMA400  IRQ OFF\n");
 801219c:	f7f9 fccc 	bl	800bb38 <SEGGER_RTT_WriteString>
      if(DevCfg.changed.sfh7776) {
 80121a0:	7823      	ldrb	r3, [r4, #0]
 80121a2:	06db      	lsls	r3, r3, #27
 80121a4:	d514      	bpl.n	80121d0 <main+0x120>
        if(DevCfg.useSensor.sfh7776) {
 80121a6:	0023      	movs	r3, r4
 80121a8:	336c      	adds	r3, #108	; 0x6c
 80121aa:	7818      	ldrb	r0, [r3, #0]
 80121ac:	2102      	movs	r1, #2
 80121ae:	0005      	movs	r5, r0
 80121b0:	0023      	movs	r3, r4
 80121b2:	0022      	movs	r2, r4
 80121b4:	400d      	ands	r5, r1
 80121b6:	3368      	adds	r3, #104	; 0x68
 80121b8:	3266      	adds	r2, #102	; 0x66
 80121ba:	4208      	tst	r0, r1
 80121bc:	d100      	bne.n	80121c0 <main+0x110>
 80121be:	e0b6      	b.n	801232e <main+0x27e>
          SFH7776_Init(DevCfg.sfh7776_threshold_upper, DevCfg.sfh7776_threshold_lower);
 80121c0:	8819      	ldrh	r1, [r3, #0]
 80121c2:	8810      	ldrh	r0, [r2, #0]
 80121c4:	f001 fe14 	bl	8013df0 <SFH7776_Init>
          DEBUG_MSG("SEN SFH7776 IRQ ON\n");
 80121c8:	2000      	movs	r0, #0
 80121ca:	4988      	ldr	r1, [pc, #544]	; (80123ec <main+0x33c>)
          DEBUG_MSG("SEN SFH7776 IRQ OFF\n");
 80121cc:	f7f9 fcb4 	bl	800bb38 <SEGGER_RTT_WriteString>
      if(DevCfg.changed.hdc2080) {
 80121d0:	7823      	ldrb	r3, [r4, #0]
 80121d2:	071b      	lsls	r3, r3, #28
 80121d4:	d512      	bpl.n	80121fc <main+0x14c>
        if(DevCfg.useSensor.hdc2080) {
 80121d6:	0023      	movs	r3, r4
 80121d8:	336c      	adds	r3, #108	; 0x6c
 80121da:	781a      	ldrb	r2, [r3, #0]
 80121dc:	2504      	movs	r5, #4
 80121de:	0023      	movs	r3, r4
 80121e0:	2104      	movs	r1, #4
 80121e2:	4015      	ands	r5, r2
 80121e4:	335a      	adds	r3, #90	; 0x5a
 80121e6:	420a      	tst	r2, r1
 80121e8:	d100      	bne.n	80121ec <main+0x13c>
 80121ea:	e0ab      	b.n	8012344 <main+0x294>
          HDC2080_Init(DevCfg.hdc2080_mode, DevCfg.hdc2080_threshold);
 80121ec:	7818      	ldrb	r0, [r3, #0]
 80121ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80121f0:	f001 fea6 	bl	8013f40 <HDC2080_Init>
          DEBUG_MSG("SEN HDC2080 IRQ ON\n");
 80121f4:	2000      	movs	r0, #0
 80121f6:	497e      	ldr	r1, [pc, #504]	; (80123f0 <main+0x340>)
          DEBUG_MSG("SEN HDC2080 IRQ OFF\n");
 80121f8:	f7f9 fc9e 	bl	800bb38 <SEGGER_RTT_WriteString>
      if(DevCfg.changed.lrw) {
 80121fc:	7823      	ldrb	r3, [r4, #0]
 80121fe:	079b      	lsls	r3, r3, #30
 8012200:	d501      	bpl.n	8012206 <main+0x156>
        LRW_FromDevCfg();
 8012202:	f7ff fa33 	bl	801166c <LRW_FromDevCfg>
      if(DevCfg.changed.lrw || DevCfg.changed.resched) {
 8012206:	2322      	movs	r3, #34	; 0x22
 8012208:	7822      	ldrb	r2, [r4, #0]
 801220a:	421a      	tst	r2, r3
 801220c:	d008      	beq.n	8012220 <main+0x170>
        PrepareWakeup(WAKEUP_LRW_SCHEDMSG, LRW_IsJoined() ? DevCfg.sendInterval : 0);
 801220e:	f7ff f9b7 	bl	8011580 <LRW_IsJoined>
 8012212:	2100      	movs	r1, #0
 8012214:	4288      	cmp	r0, r1
 8012216:	d000      	beq.n	801221a <main+0x16a>
 8012218:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801221a:	2001      	movs	r0, #1
 801221c:	f7ff fdaa 	bl	8011d74 <PrepareWakeup>
      EEPROM_Save();
 8012220:	f7fd fd2c 	bl	800fc7c <EEPROM_Save>
      memset(&DevCfg.changed, 0, sizeof DevCfg.changed);
 8012224:	2300      	movs	r3, #0
 8012226:	6023      	str	r3, [r4, #0]
    if(!LRW_IsJoined() && memcmp((char[16]){0}, DevCfg.appKey, 16)) {
 8012228:	f7ff f9aa 	bl	8011580 <LRW_IsJoined>
 801222c:	1e05      	subs	r5, r0, #0
 801222e:	d000      	beq.n	8012232 <main+0x182>
 8012230:	e092      	b.n	8012358 <main+0x2a8>
 8012232:	0001      	movs	r1, r0
 8012234:	2210      	movs	r2, #16
 8012236:	a80e      	add	r0, sp, #56	; 0x38
 8012238:	f003 fe93 	bl	8015f62 <memset>
 801223c:	2210      	movs	r2, #16
 801223e:	496d      	ldr	r1, [pc, #436]	; (80123f4 <main+0x344>)
 8012240:	a80e      	add	r0, sp, #56	; 0x38
 8012242:	f003 fe77 	bl	8015f34 <memcmp>
 8012246:	2800      	cmp	r0, #0
 8012248:	d100      	bne.n	801224c <main+0x19c>
 801224a:	e085      	b.n	8012358 <main+0x2a8>
      DEBUG_MSG("LRW JOINING...\n");
 801224c:	496a      	ldr	r1, [pc, #424]	; (80123f8 <main+0x348>)
 801224e:	0028      	movs	r0, r5
 8012250:	f7f9 fc72 	bl	800bb38 <SEGGER_RTT_WriteString>
      LRW_Join();
 8012254:	f7ff f96a 	bl	801152c <LRW_Join>
      if(!DutyCycleWaitTime) joinTrials++;
 8012258:	4b68      	ldr	r3, [pc, #416]	; (80123fc <main+0x34c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d103      	bne.n	8012268 <main+0x1b8>
 8012260:	4a67      	ldr	r2, [pc, #412]	; (8012400 <main+0x350>)
 8012262:	6813      	ldr	r3, [r2, #0]
 8012264:	3301      	adds	r3, #1
 8012266:	6013      	str	r3, [r2, #0]
    while(LRW_IsBusy()) {
 8012268:	f7ff fc8c 	bl	8011b84 <LRW_IsBusy>
 801226c:	2800      	cmp	r0, #0
 801226e:	d17f      	bne.n	8012370 <main+0x2c0>
    if(!DutyCycleWaitTime) {
 8012270:	4d62      	ldr	r5, [pc, #392]	; (80123fc <main+0x34c>)
 8012272:	682f      	ldr	r7, [r5, #0]
 8012274:	2f00      	cmp	r7, #0
 8012276:	d118      	bne.n	80122aa <main+0x1fa>
      if(!LRW_IsJoined()) {
 8012278:	f7ff f982 	bl	8011580 <LRW_IsJoined>
 801227c:	4e60      	ldr	r6, [pc, #384]	; (8012400 <main+0x350>)
 801227e:	9009      	str	r0, [sp, #36]	; 0x24
 8012280:	2800      	cmp	r0, #0
 8012282:	d17b      	bne.n	801237c <main+0x2cc>
        DEBUG_MSG("LRW NOT JOINED\n");
 8012284:	495f      	ldr	r1, [pc, #380]	; (8012404 <main+0x354>)
 8012286:	f7f9 fc57 	bl	800bb38 <SEGGER_RTT_WriteString>
        if(joinTrials == 5) {
 801228a:	6837      	ldr	r7, [r6, #0]
 801228c:	2f05      	cmp	r7, #5
 801228e:	d10c      	bne.n	80122aa <main+0x1fa>
          joinTrials = 0;
 8012290:	9b09      	ldr	r3, [sp, #36]	; 0x24
          DEBUG_MSG("GIVING UP JOINING\n");
 8012292:	495d      	ldr	r1, [pc, #372]	; (8012408 <main+0x358>)
 8012294:	0018      	movs	r0, r3
          joinTrials = 0;
 8012296:	6033      	str	r3, [r6, #0]
          DEBUG_MSG("GIVING UP JOINING\n");
 8012298:	f7f9 fc4e 	bl	800bb38 <SEGGER_RTT_WriteString>
          LEDBlink(BlinkPattern_RRR);
 801229c:	0038      	movs	r0, r7
 801229e:	f7fe fadb 	bl	8010858 <LEDBlink>
          while(tasks_has_pending() == -1) {};
 80122a2:	f002 f841 	bl	8014328 <tasks_has_pending>
 80122a6:	1c43      	adds	r3, r0, #1
 80122a8:	d0fb      	beq.n	80122a2 <main+0x1f2>
  HAL_Delay(100);
 80122aa:	2064      	movs	r0, #100	; 0x64
 80122ac:	f7fa f9a0 	bl	800c5f0 <HAL_Delay>
  if(tasks_has_pending())
 80122b0:	f002 f83a 	bl	8014328 <tasks_has_pending>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d000      	beq.n	80122ba <main+0x20a>
 80122b8:	e758      	b.n	801216c <main+0xbc>
  if(NFC_HasActivity())
 80122ba:	f000 f9ad 	bl	8012618 <NFC_HasActivity>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d000      	beq.n	80122c4 <main+0x214>
 80122c2:	e753      	b.n	801216c <main+0xbc>
  if(LRW_IsBusy())
 80122c4:	f7ff fc5e 	bl	8011b84 <LRW_IsBusy>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d000      	beq.n	80122ce <main+0x21e>
 80122cc:	e74e      	b.n	801216c <main+0xbc>
  if(DutyCycleWaitTime < 1000 && joinTrials)
 80122ce:	23fa      	movs	r3, #250	; 0xfa
 80122d0:	682a      	ldr	r2, [r5, #0]
 80122d2:	009b      	lsls	r3, r3, #2
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d364      	bcc.n	80123a2 <main+0x2f2>
  if(DutyCycleWaitTime > 1000)
 80122d8:	21fa      	movs	r1, #250	; 0xfa
 80122da:	6828      	ldr	r0, [r5, #0]
 80122dc:	0089      	lsls	r1, r1, #2
 80122de:	4288      	cmp	r0, r1
 80122e0:	d905      	bls.n	80122ee <main+0x23e>
    PrepareWakeup(WAKEUP_LRW_DUTYCYCLE, DutyCycleWaitTime / 1000);
 80122e2:	f7ed ff41 	bl	8000168 <__udivsi3>
 80122e6:	0001      	movs	r1, r0
 80122e8:	2002      	movs	r0, #2
 80122ea:	f7ff fd43 	bl	8011d74 <PrepareWakeup>
  HW_EnterStopMode();
 80122ee:	f7fe fb31 	bl	8010954 <HW_EnterStopMode>
 80122f2:	e73b      	b.n	801216c <main+0xbc>
  DBG_PRINTF("ATECC608A serial number: %d:%d:%d:%d:%d:%d:%d:%d:%d \n", serialnum[0],serialnum[1],serialnum[2],serialnum[3],serialnum[4],serialnum[5],serialnum[6],serialnum[7],serialnum[8]);
 80122f4:	7a29      	ldrb	r1, [r5, #8]
 80122f6:	786b      	ldrb	r3, [r5, #1]
 80122f8:	782a      	ldrb	r2, [r5, #0]
 80122fa:	9106      	str	r1, [sp, #24]
 80122fc:	79e9      	ldrb	r1, [r5, #7]
 80122fe:	9105      	str	r1, [sp, #20]
 8012300:	79a9      	ldrb	r1, [r5, #6]
 8012302:	9104      	str	r1, [sp, #16]
 8012304:	7969      	ldrb	r1, [r5, #5]
 8012306:	9103      	str	r1, [sp, #12]
 8012308:	7929      	ldrb	r1, [r5, #4]
 801230a:	9102      	str	r1, [sp, #8]
 801230c:	78e9      	ldrb	r1, [r5, #3]
 801230e:	9101      	str	r1, [sp, #4]
 8012310:	78a9      	ldrb	r1, [r5, #2]
 8012312:	9100      	str	r1, [sp, #0]
 8012314:	493d      	ldr	r1, [pc, #244]	; (801240c <main+0x35c>)
 8012316:	f7f9 fde2 	bl	800bede <SEGGER_RTT_printf>
 801231a:	e727      	b.n	801216c <main+0xbc>
          BMA400_Init(DevCfg.bma400_config = 0xf, DevCfg.bma400_threshold = 3907);
 801231c:	200f      	movs	r0, #15
 801231e:	493c      	ldr	r1, [pc, #240]	; (8012410 <main+0x360>)
 8012320:	8018      	strh	r0, [r3, #0]
 8012322:	6621      	str	r1, [r4, #96]	; 0x60
 8012324:	f001 fc44 	bl	8013bb0 <BMA400_Init>
          DEBUG_MSG("SEN BMA400  IRQ OFF\n");
 8012328:	0028      	movs	r0, r5
 801232a:	493a      	ldr	r1, [pc, #232]	; (8012414 <main+0x364>)
 801232c:	e736      	b.n	801219c <main+0xec>
          SFH7776_Init(DevCfg.sfh7776_threshold_upper = UINT16_MAX, DevCfg.sfh7776_threshold_lower = 0);
 801232e:	2101      	movs	r1, #1
 8012330:	4249      	negs	r1, r1
 8012332:	4839      	ldr	r0, [pc, #228]	; (8012418 <main+0x368>)
 8012334:	8011      	strh	r1, [r2, #0]
 8012336:	0029      	movs	r1, r5
 8012338:	801d      	strh	r5, [r3, #0]
 801233a:	f001 fd59 	bl	8013df0 <SFH7776_Init>
          DEBUG_MSG("SEN SFH7776 IRQ OFF\n");
 801233e:	0028      	movs	r0, r5
 8012340:	4936      	ldr	r1, [pc, #216]	; (801241c <main+0x36c>)
 8012342:	e743      	b.n	80121cc <main+0x11c>
          HDC2080_Init(DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_HIGH, DevCfg.hdc2080_threshold = 12499);
 8012344:	2201      	movs	r2, #1
 8012346:	4936      	ldr	r1, [pc, #216]	; (8012420 <main+0x370>)
 8012348:	0010      	movs	r0, r2
 801234a:	65e1      	str	r1, [r4, #92]	; 0x5c
 801234c:	701a      	strb	r2, [r3, #0]
 801234e:	f001 fdf7 	bl	8013f40 <HDC2080_Init>
          DEBUG_MSG("SEN HDC2080 IRQ OFF\n");
 8012352:	0028      	movs	r0, r5
 8012354:	4933      	ldr	r1, [pc, #204]	; (8012424 <main+0x374>)
 8012356:	e74f      	b.n	80121f8 <main+0x148>
    } else if(!LRW_IsBusy() && !tasks_has_pending()) {
 8012358:	f7ff fc14 	bl	8011b84 <LRW_IsBusy>
 801235c:	2800      	cmp	r0, #0
 801235e:	d183      	bne.n	8012268 <main+0x1b8>
 8012360:	f001 ffe2 	bl	8014328 <tasks_has_pending>
 8012364:	2800      	cmp	r0, #0
 8012366:	d000      	beq.n	801236a <main+0x2ba>
 8012368:	e77e      	b.n	8012268 <main+0x1b8>
      LRW_Send();
 801236a:	f7ff fc97 	bl	8011c9c <LRW_Send>
    while(LRW_IsBusy()) {
 801236e:	e77b      	b.n	8012268 <main+0x1b8>
      LRW_Process();
 8012370:	f7ff f96a 	bl	8011648 <LRW_Process>
      HAL_Delay(100);
 8012374:	2064      	movs	r0, #100	; 0x64
 8012376:	f7fa f93b 	bl	800c5f0 <HAL_Delay>
 801237a:	e775      	b.n	8012268 <main+0x1b8>
        if(joinTrials > 0) {
 801237c:	6833      	ldr	r3, [r6, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d093      	beq.n	80122aa <main+0x1fa>
          joinTrials = 0;
 8012382:	6037      	str	r7, [r6, #0]
          DEBUG_PRINTF("LRW JOINED %d\n", HW_RTCGetMsTime());
 8012384:	f7fe fbae 	bl	8010ae4 <HW_RTCGetMsTime>
 8012388:	4927      	ldr	r1, [pc, #156]	; (8012428 <main+0x378>)
 801238a:	0002      	movs	r2, r0
 801238c:	0038      	movs	r0, r7
 801238e:	f7f9 fda6 	bl	800bede <SEGGER_RTT_printf>
          LEDBlink(BlinkPattern_RG);
 8012392:	2004      	movs	r0, #4
 8012394:	f7fe fa60 	bl	8010858 <LEDBlink>
          PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
 8012398:	2001      	movs	r0, #1
 801239a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801239c:	f7ff fcea 	bl	8011d74 <PrepareWakeup>
 80123a0:	e783      	b.n	80122aa <main+0x1fa>
  if(DutyCycleWaitTime < 1000 && joinTrials)
 80123a2:	4b17      	ldr	r3, [pc, #92]	; (8012400 <main+0x350>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d000      	beq.n	80123ac <main+0x2fc>
 80123aa:	e6df      	b.n	801216c <main+0xbc>
  if(DutyCycleWaitTime < 1000 && LRW_IsJoined() && LRW_HasQueue())
 80123ac:	f7ff f8e8 	bl	8011580 <LRW_IsJoined>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d091      	beq.n	80122d8 <main+0x228>
 80123b4:	f7ff fbea 	bl	8011b8c <LRW_HasQueue>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d08d      	beq.n	80122d8 <main+0x228>
 80123bc:	e6d6      	b.n	801216c <main+0xbc>
 80123be:	46c0      	nop			; (mov r8, r8)
 80123c0:	200012b4 	.word	0x200012b4
 80123c4:	0801a027 	.word	0x0801a027
 80123c8:	200018f8 	.word	0x200018f8
 80123cc:	20001994 	.word	0x20001994
 80123d0:	200000e0 	.word	0x200000e0
 80123d4:	200001c8 	.word	0x200001c8
 80123d8:	20001960 	.word	0x20001960
 80123dc:	0801a041 	.word	0x0801a041
 80123e0:	20001b50 	.word	0x20001b50
 80123e4:	0801a065 	.word	0x0801a065
 80123e8:	0801a0c7 	.word	0x0801a0c7
 80123ec:	0801a0f0 	.word	0x0801a0f0
 80123f0:	0801a119 	.word	0x0801a119
 80123f4:	200000f5 	.word	0x200000f5
 80123f8:	0801a142 	.word	0x0801a142
 80123fc:	20001928 	.word	0x20001928
 8012400:	20001964 	.word	0x20001964
 8012404:	0801a152 	.word	0x0801a152
 8012408:	0801a162 	.word	0x0801a162
 801240c:	0801a091 	.word	0x0801a091
 8012410:	00000f43 	.word	0x00000f43
 8012414:	0801a0db 	.word	0x0801a0db
 8012418:	0000ffff 	.word	0x0000ffff
 801241c:	0801a104 	.word	0x0801a104
 8012420:	000030d3 	.word	0x000030d3
 8012424:	0801a12d 	.word	0x0801a12d
 8012428:	0801a175 	.word	0x0801a175

0801242c <nop>:
  ST25DV_PresentI2CPassword(&St25Dv_Obj, (ST25DV_PASSWD){0x12345678, 0x13245678});
}

static int32_t nop(void) {
  return 0;
}
 801242c:	2000      	movs	r0, #0
 801242e:	4770      	bx	lr

08012430 <NFC_IsReady>:

static int32_t NFC_IsReady(uint16_t DevAddr, const uint32_t Trials) {
 8012430:	b510      	push	{r4, lr}
 8012432:	000a      	movs	r2, r1
  return HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT);
 8012434:	0001      	movs	r1, r0
 8012436:	2364      	movs	r3, #100	; 0x64
 8012438:	4801      	ldr	r0, [pc, #4]	; (8012440 <NFC_IsReady+0x10>)
 801243a:	f7fb fbe5 	bl	800dc08 <HAL_I2C_IsDeviceReady>
}
 801243e:	bd10      	pop	{r4, pc}
 8012440:	20001898 	.word	0x20001898

08012444 <NFC_Init>:
int32_t NFC_Init(void) {
 8012444:	b5f0      	push	{r4, r5, r6, r7, lr}
  ST25DV_I2CSSO_STATUS i2csso = ST25DV_SESSION_CLOSED;
 8012446:	2609      	movs	r6, #9
 8012448:	2300      	movs	r3, #0
int32_t NFC_Init(void) {
 801244a:	b08d      	sub	sp, #52	; 0x34
  ST25DV_I2CSSO_STATUS i2csso = ST25DV_SESSION_CLOSED;
 801244c:	446e      	add	r6, sp
 801244e:	7033      	strb	r3, [r6, #0]
  io.DeInit = NULL;
 8012450:	9307      	str	r3, [sp, #28]
  io.IsReady = NFC_IsReady;
 8012452:	4b68      	ldr	r3, [pc, #416]	; (80125f4 <NFC_Init+0x1b0>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8012454:	4d68      	ldr	r5, [pc, #416]	; (80125f8 <NFC_Init+0x1b4>)
  io.IsReady = NFC_IsReady;
 8012456:	9308      	str	r3, [sp, #32]
  io.Write = NFC_WriteReg;
 8012458:	4b68      	ldr	r3, [pc, #416]	; (80125fc <NFC_Init+0x1b8>)
  io.Init = nop;
 801245a:	4a69      	ldr	r2, [pc, #420]	; (8012600 <NFC_Init+0x1bc>)
  io.Write = NFC_WriteReg;
 801245c:	9309      	str	r3, [sp, #36]	; 0x24
  io.Read = NFC_ReadReg;
 801245e:	4b69      	ldr	r3, [pc, #420]	; (8012604 <NFC_Init+0x1c0>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8012460:	0028      	movs	r0, r5
  io.Read = NFC_ReadReg;
 8012462:	930a      	str	r3, [sp, #40]	; 0x28
  io.GetTick = (int32_t (*)(void))HAL_GetTick;
 8012464:	4b68      	ldr	r3, [pc, #416]	; (8012608 <NFC_Init+0x1c4>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8012466:	a906      	add	r1, sp, #24
  io.Init = nop;
 8012468:	9206      	str	r2, [sp, #24]
  io.GetTick = (int32_t (*)(void))HAL_GetTick;
 801246a:	930b      	str	r3, [sp, #44]	; 0x2c
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 801246c:	f7f9 fdec 	bl	800c048 <ST25DV_RegisterBusIO>
 8012470:	1e04      	subs	r4, r0, #0
 8012472:	d000      	beq.n	8012476 <NFC_Init+0x32>
 8012474:	e0a8      	b.n	80125c8 <NFC_Init+0x184>
  if((r = St25Dv_Drv.Init(&St25Dv_Obj))) {c = 0x2; goto err;};
 8012476:	4f65      	ldr	r7, [pc, #404]	; (801260c <NFC_Init+0x1c8>)
 8012478:	0028      	movs	r0, r5
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	4798      	blx	r3
 801247e:	2302      	movs	r3, #2
 8012480:	1e04      	subs	r4, r0, #0
 8012482:	d000      	beq.n	8012486 <NFC_Init+0x42>
 8012484:	e0a1      	b.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x3; goto err;};
 8012486:	0031      	movs	r1, r6
 8012488:	0028      	movs	r0, r5
 801248a:	f7f9 fecc 	bl	800c226 <ST25DV_ReadI2CSecuritySession_Dyn>
 801248e:	1e04      	subs	r4, r0, #0
 8012490:	d000      	beq.n	8012494 <NFC_Init+0x50>
 8012492:	e0a3      	b.n	80125dc <NFC_Init+0x198>
  if(i2csso == ST25DV_SESSION_CLOSED)
 8012494:	7833      	ldrb	r3, [r6, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d10d      	bne.n	80124b6 <NFC_Init+0x72>
    if((r = ST25DV_PresentI2CPassword(&St25Dv_Obj, (ST25DV_PASSWD){0}))) {c = 0x4; goto err;};
 801249a:	0001      	movs	r1, r0
 801249c:	2208      	movs	r2, #8
 801249e:	a804      	add	r0, sp, #16
 80124a0:	f003 fd5f 	bl	8015f62 <memset>
 80124a4:	0028      	movs	r0, r5
 80124a6:	9904      	ldr	r1, [sp, #16]
 80124a8:	9a05      	ldr	r2, [sp, #20]
 80124aa:	f7f9 fe30 	bl	800c10e <ST25DV_PresentI2CPassword>
 80124ae:	2304      	movs	r3, #4
 80124b0:	1e04      	subs	r4, r0, #0
 80124b2:	d000      	beq.n	80124b6 <NFC_Init+0x72>
 80124b4:	e089      	b.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x5; goto err;};
 80124b6:	0031      	movs	r1, r6
 80124b8:	0028      	movs	r0, r5
 80124ba:	f7f9 feb4 	bl	800c226 <ST25DV_ReadI2CSecuritySession_Dyn>
 80124be:	1e04      	subs	r4, r0, #0
 80124c0:	d000      	beq.n	80124c4 <NFC_Init+0x80>
 80124c2:	e08d      	b.n	80125e0 <NFC_Init+0x19c>
  if(i2csso == ST25DV_SESSION_CLOSED) {c = 0x6; goto err;};
 80124c4:	7833      	ldrb	r3, [r6, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d100      	bne.n	80124cc <NFC_Init+0x88>
 80124ca:	e08b      	b.n	80125e4 <NFC_Init+0x1a0>
  if((r = St25Dv_Drv.GetITStatus(&St25Dv_Obj, &v))) {c = 0x7; goto err;};
 80124cc:	0028      	movs	r0, r5
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	a904      	add	r1, sp, #16
 80124d2:	4798      	blx	r3
 80124d4:	1e04      	subs	r4, r0, #0
 80124d6:	d000      	beq.n	80124da <NFC_Init+0x96>
 80124d8:	e086      	b.n	80125e8 <NFC_Init+0x1a4>
  if(v != (ST25DV_GPO_ALL_MASK))
 80124da:	466b      	mov	r3, sp
 80124dc:	8a1b      	ldrh	r3, [r3, #16]
 80124de:	2bff      	cmp	r3, #255	; 0xff
 80124e0:	d107      	bne.n	80124f2 <NFC_Init+0xae>
  if((r = ST25DV_ReadRFMngt(&St25Dv_Obj, &rfmngt))) {c = 0x9; goto err;};
 80124e2:	0028      	movs	r0, r5
 80124e4:	a903      	add	r1, sp, #12
 80124e6:	f7f9 fe55 	bl	800c194 <ST25DV_ReadRFMngt>
 80124ea:	1e04      	subs	r4, r0, #0
 80124ec:	d009      	beq.n	8012502 <NFC_Init+0xbe>
 80124ee:	2309      	movs	r3, #9
 80124f0:	e06b      	b.n	80125ca <NFC_Init+0x186>
    if((r = St25Dv_Drv.ConfigIT(&St25Dv_Obj, ST25DV_GPO_ALL_MASK))) {c = 0x8; goto err;};
 80124f2:	21ff      	movs	r1, #255	; 0xff
 80124f4:	0028      	movs	r0, r5
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	4798      	blx	r3
 80124fa:	1e04      	subs	r4, r0, #0
 80124fc:	d0f1      	beq.n	80124e2 <NFC_Init+0x9e>
 80124fe:	2308      	movs	r3, #8
 8012500:	e063      	b.n	80125ca <NFC_Init+0x186>
  if(rfmngt.RfDisable || rfmngt.RfSleep)
 8012502:	466b      	mov	r3, sp
 8012504:	466a      	mov	r2, sp
 8012506:	7b1b      	ldrb	r3, [r3, #12]
 8012508:	7b52      	ldrb	r2, [r2, #13]
 801250a:	4313      	orrs	r3, r2
 801250c:	d12b      	bne.n	8012566 <NFC_Init+0x122>
  if((r = ST25DV_WriteRFMngt_Dyn(&St25Dv_Obj, 0))) {c = 0xb; goto err;};
 801250e:	2100      	movs	r1, #0
 8012510:	0028      	movs	r0, r5
 8012512:	f7f9 fea3 	bl	800c25c <ST25DV_WriteRFMngt_Dyn>
 8012516:	230b      	movs	r3, #11
 8012518:	1e04      	subs	r4, r0, #0
 801251a:	d156      	bne.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadEHMode(&St25Dv_Obj, &ehmode))) {c = 0xc; goto err;}
 801251c:	260a      	movs	r6, #10
 801251e:	446e      	add	r6, sp
 8012520:	0031      	movs	r1, r6
 8012522:	0028      	movs	r0, r5
 8012524:	f7f9 fe1b 	bl	800c15e <ST25DV_ReadEHMode>
 8012528:	1e04      	subs	r4, r0, #0
 801252a:	d15f      	bne.n	80125ec <NFC_Init+0x1a8>
  if(ehmode == ST25DV_EH_ACTIVE_AFTER_BOOT)
 801252c:	7833      	ldrb	r3, [r6, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d021      	beq.n	8012576 <NFC_Init+0x132>
  if((r = ST25DV_ResetEHENMode_Dyn(&St25Dv_Obj))) {c = 0xe; goto err;};
 8012532:	0028      	movs	r0, r5
 8012534:	f7f9 fe89 	bl	800c24a <ST25DV_ResetEHENMode_Dyn>
 8012538:	230e      	movs	r3, #14
 801253a:	1e04      	subs	r4, r0, #0
 801253c:	d145      	bne.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadMBWDG(&St25Dv_Obj, (uint8_t*)&v))) {c = 0xf; goto err;};
 801253e:	0028      	movs	r0, r5
 8012540:	a904      	add	r1, sp, #16
 8012542:	f7f9 fe62 	bl	800c20a <ST25DV_ReadMBWDG>
 8012546:	1e04      	subs	r4, r0, #0
 8012548:	d152      	bne.n	80125f0 <NFC_Init+0x1ac>
  if((uint8_t)v)
 801254a:	466b      	mov	r3, sp
 801254c:	7c1b      	ldrb	r3, [r3, #16]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d119      	bne.n	8012586 <NFC_Init+0x142>
  if((r = ST25DV_ReadMBMode(&St25Dv_Obj, &mbmode))) {c = 0x11; goto err;};
 8012552:	260b      	movs	r6, #11
 8012554:	446e      	add	r6, sp
 8012556:	0031      	movs	r1, r6
 8012558:	0028      	movs	r0, r5
 801255a:	f7f9 fe3b 	bl	800c1d4 <ST25DV_ReadMBMode>
 801255e:	1e04      	subs	r4, r0, #0
 8012560:	d019      	beq.n	8012596 <NFC_Init+0x152>
 8012562:	2311      	movs	r3, #17
 8012564:	e031      	b.n	80125ca <NFC_Init+0x186>
    if((r = ST25DV_WriteRFMngt(&St25Dv_Obj, 0))) {c = 0xa; goto err;};
 8012566:	0001      	movs	r1, r0
 8012568:	0028      	movs	r0, r5
 801256a:	f7f9 fe2a 	bl	800c1c2 <ST25DV_WriteRFMngt>
 801256e:	1e04      	subs	r4, r0, #0
 8012570:	d0cd      	beq.n	801250e <NFC_Init+0xca>
 8012572:	230a      	movs	r3, #10
 8012574:	e029      	b.n	80125ca <NFC_Init+0x186>
    if((r = ST25DV_WriteEHMode(&St25Dv_Obj, ST25DV_EH_ON_DEMAND))) {c = 0xd; goto err;}
 8012576:	2101      	movs	r1, #1
 8012578:	0028      	movs	r0, r5
 801257a:	f7f9 fe02 	bl	800c182 <ST25DV_WriteEHMode>
 801257e:	1e04      	subs	r4, r0, #0
 8012580:	d0d7      	beq.n	8012532 <NFC_Init+0xee>
 8012582:	230d      	movs	r3, #13
 8012584:	e021      	b.n	80125ca <NFC_Init+0x186>
    if((r = ST25DV_WriteMBWDG(&St25Dv_Obj, 0))) {c = 0x10; goto err;};
 8012586:	0001      	movs	r1, r0
 8012588:	0028      	movs	r0, r5
 801258a:	f7f9 fe43 	bl	800c214 <ST25DV_WriteMBWDG>
 801258e:	1e04      	subs	r4, r0, #0
 8012590:	d0df      	beq.n	8012552 <NFC_Init+0x10e>
 8012592:	2310      	movs	r3, #16
 8012594:	e019      	b.n	80125ca <NFC_Init+0x186>
  if(mbmode == ST25DV_DISABLE)
 8012596:	7833      	ldrb	r3, [r6, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00d      	beq.n	80125b8 <NFC_Init+0x174>
  if((r = ST25DV_ResetMBEN_Dyn(&St25Dv_Obj))) {c = 0x11; goto err;};
 801259c:	0028      	movs	r0, r5
 801259e:	f7f9 fe6f 	bl	800c280 <ST25DV_ResetMBEN_Dyn>
 80125a2:	2311      	movs	r3, #17
 80125a4:	1e04      	subs	r4, r0, #0
 80125a6:	d110      	bne.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_SetMBEN_Dyn(&St25Dv_Obj))) {c = 0x12; goto err;};
 80125a8:	0028      	movs	r0, r5
 80125aa:	f7f9 fe60 	bl	800c26e <ST25DV_SetMBEN_Dyn>
 80125ae:	1e04      	subs	r4, r0, #0
 80125b0:	d108      	bne.n	80125c4 <NFC_Init+0x180>
}
 80125b2:	0020      	movs	r0, r4
 80125b4:	b00d      	add	sp, #52	; 0x34
 80125b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((r = ST25DV_WriteMBMode(&St25Dv_Obj, ST25DV_ENABLE))) {c = 0x12; goto err;};
 80125b8:	2101      	movs	r1, #1
 80125ba:	0028      	movs	r0, r5
 80125bc:	f7f9 fe1c 	bl	800c1f8 <ST25DV_WriteMBMode>
 80125c0:	1e04      	subs	r4, r0, #0
 80125c2:	d0eb      	beq.n	801259c <NFC_Init+0x158>
 80125c4:	2312      	movs	r3, #18
 80125c6:	e000      	b.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 80125c8:	2301      	movs	r3, #1
  DBG_PRINTF("NFC ERR ST25DV ret:0x%x cond:0x%x err:0x%x Init Failed!\n", r, c, hi2c1.ErrorCode);
 80125ca:	4a11      	ldr	r2, [pc, #68]	; (8012610 <NFC_Init+0x1cc>)
 80125cc:	4911      	ldr	r1, [pc, #68]	; (8012614 <NFC_Init+0x1d0>)
 80125ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80125d0:	2000      	movs	r0, #0
 80125d2:	9200      	str	r2, [sp, #0]
 80125d4:	0022      	movs	r2, r4
 80125d6:	f7f9 fc82 	bl	800bede <SEGGER_RTT_printf>
  return r;
 80125da:	e7ea      	b.n	80125b2 <NFC_Init+0x16e>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x3; goto err;};
 80125dc:	2303      	movs	r3, #3
 80125de:	e7f4      	b.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x5; goto err;};
 80125e0:	2305      	movs	r3, #5
 80125e2:	e7f2      	b.n	80125ca <NFC_Init+0x186>
  if(i2csso == ST25DV_SESSION_CLOSED) {c = 0x6; goto err;};
 80125e4:	2306      	movs	r3, #6
 80125e6:	e7f0      	b.n	80125ca <NFC_Init+0x186>
  if((r = St25Dv_Drv.GetITStatus(&St25Dv_Obj, &v))) {c = 0x7; goto err;};
 80125e8:	2307      	movs	r3, #7
 80125ea:	e7ee      	b.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadEHMode(&St25Dv_Obj, &ehmode))) {c = 0xc; goto err;}
 80125ec:	230c      	movs	r3, #12
 80125ee:	e7ec      	b.n	80125ca <NFC_Init+0x186>
  if((r = ST25DV_ReadMBWDG(&St25Dv_Obj, (uint8_t*)&v))) {c = 0xf; goto err;};
 80125f0:	230f      	movs	r3, #15
 80125f2:	e7ea      	b.n	80125ca <NFC_Init+0x186>
 80125f4:	08012431 	.word	0x08012431
 80125f8:	20001968 	.word	0x20001968
 80125fc:	080127f5 	.word	0x080127f5
 8012600:	0801242d 	.word	0x0801242d
 8012604:	0801271d 	.word	0x0801271d
 8012608:	0800c5e5 	.word	0x0800c5e5
 801260c:	200000b8 	.word	0x200000b8
 8012610:	20001898 	.word	0x20001898
 8012614:	0801a184 	.word	0x0801a184

08012618 <NFC_HasActivity>:

int32_t NFC_HasActivity(void) {
 8012618:	b510      	push	{r4, lr}
  //DEBUG_PRINTF("NFC ACT %10d %10d is %d\n", HAL_GetTick(), nfc_activity, HAL_GetTick() - nfc_activity < 2000U);
  return HAL_GetTick() - nfc_activity < 2000U;
 801261a:	f7f9 ffe3 	bl	800c5e4 <HAL_GetTick>
 801261e:	4b04      	ldr	r3, [pc, #16]	; (8012630 <NFC_HasActivity+0x18>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	1ac0      	subs	r0, r0, r3
 8012624:	23fa      	movs	r3, #250	; 0xfa
 8012626:	00db      	lsls	r3, r3, #3
 8012628:	4298      	cmp	r0, r3
 801262a:	4180      	sbcs	r0, r0
 801262c:	4240      	negs	r0, r0
}
 801262e:	bd10      	pop	{r4, pc}
 8012630:	20001990 	.word	0x20001990

08012634 <NFC_WaitACK>:
 *        Do you think compiler would reorder the hi2c->Lock assigns?
 *        There's sequence points, but no explicit dependency across them.
 */
int32_t NFC_WaitACK(uint32_t Timeout) {
  I2C_HandleTypeDef * const hi2c = &hi2c1;
  uint32_t tickstart = HAL_GetTick();
 8012634:	4673      	mov	r3, lr
int32_t NFC_WaitACK(uint32_t Timeout) {
 8012636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012638:	b085      	sub	sp, #20
 801263a:	9303      	str	r3, [sp, #12]
 801263c:	0006      	movs	r6, r0
  uint32_t tickstart = HAL_GetTick();
 801263e:	f7f9 ffd1 	bl	800c5e4 <HAL_GetTick>

  /* Grab I2C Handle */
  if(hi2c->State != HAL_I2C_STATE_READY)
 8012642:	4c33      	ldr	r4, [pc, #204]	; (8012710 <NFC_WaitACK+0xdc>)
  uint32_t tickstart = HAL_GetTick();
 8012644:	0007      	movs	r7, r0
  if(hi2c->State != HAL_I2C_STATE_READY)
 8012646:	0023      	movs	r3, r4
 8012648:	3341      	adds	r3, #65	; 0x41
 801264a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 801264c:	2502      	movs	r5, #2
  if(hi2c->State != HAL_I2C_STATE_READY)
 801264e:	b2d1      	uxtb	r1, r2
 8012650:	9102      	str	r1, [sp, #8]
 8012652:	2a20      	cmp	r2, #32
 8012654:	d135      	bne.n	80126c2 <NFC_WaitACK+0x8e>
  if(hi2c->Instance->ISR & I2C_ISR_BUSY)
 8012656:	6822      	ldr	r2, [r4, #0]
 8012658:	6991      	ldr	r1, [r2, #24]
 801265a:	2280      	movs	r2, #128	; 0x80
 801265c:	0008      	movs	r0, r1
 801265e:	0212      	lsls	r2, r2, #8
 8012660:	4010      	ands	r0, r2
 8012662:	4211      	tst	r1, r2
 8012664:	d12d      	bne.n	80126c2 <NFC_WaitACK+0x8e>
    return HAL_BUSY;
  if(hi2c->Lock == HAL_LOCKED)
 8012666:	0022      	movs	r2, r4
 8012668:	3240      	adds	r2, #64	; 0x40
 801266a:	7811      	ldrb	r1, [r2, #0]
 801266c:	2901      	cmp	r1, #1
 801266e:	d028      	beq.n	80126c2 <NFC_WaitACK+0x8e>
    return HAL_BUSY;
  else
    hi2c->Lock = HAL_LOCKED;
 8012670:	2101      	movs	r1, #1
 8012672:	7011      	strb	r1, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8012674:	2224      	movs	r2, #36	; 0x24
 8012676:	701a      	strb	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012678:	6460      	str	r0, [r4, #68]	; 0x44

  do {
    /* Generate Start */
    hi2c->Instance->CR2 = I2C_CR2_START | I2C_CR2_AUTOEND | (I2C_CR2_SADD & ST25DV_ADDR_DATA_I2C);
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	4a25      	ldr	r2, [pc, #148]	; (8012714 <NFC_WaitACK+0xe0>)
 801267e:	605a      	str	r2, [r3, #4]

    /* Wait till AUTOEND mode generates STOP, or timeout */
    while(~hi2c->Instance->ISR & I2C_ISR_STOPF)
 8012680:	6823      	ldr	r3, [r4, #0]
 8012682:	699a      	ldr	r2, [r3, #24]
 8012684:	9d02      	ldr	r5, [sp, #8]
 8012686:	4395      	bics	r5, r2
 8012688:	d11e      	bne.n	80126c8 <NFC_WaitACK+0x94>
      if(Timeout != HAL_MAX_DELAY && (HAL_GetTick() - tickstart > Timeout || !Timeout))
        goto timeout;

    /* We've been ACK'ed, cleanup and go home */
    if(~hi2c->Instance->ISR & I2C_ISR_NACKF) {
 801268a:	2110      	movs	r1, #16
 801268c:	699a      	ldr	r2, [r3, #24]
 801268e:	4391      	bics	r1, r2
 8012690:	d032      	beq.n	80126f8 <NFC_WaitACK+0xc4>
      hi2c->Instance->ICR |= I2C_ISR_STOPF;
 8012692:	69da      	ldr	r2, [r3, #28]
 8012694:	9902      	ldr	r1, [sp, #8]
 8012696:	430a      	orrs	r2, r1
 8012698:	61da      	str	r2, [r3, #28]
      /* Release I2C_Handle */
      hi2c->State = HAL_I2C_STATE_READY;
 801269a:	0023      	movs	r3, r4
      hi2c->Lock = HAL_UNLOCKED;
 801269c:	3440      	adds	r4, #64	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 801269e:	3341      	adds	r3, #65	; 0x41
 80126a0:	7019      	strb	r1, [r3, #0]
      hi2c->Lock = HAL_UNLOCKED;
 80126a2:	7025      	strb	r5, [r4, #0]
      if(HAL_GetTick() - tickstart > 100)
 80126a4:	f7f9 ff9e 	bl	800c5e4 <HAL_GetTick>
 80126a8:	1bc0      	subs	r0, r0, r7
 80126aa:	2864      	cmp	r0, #100	; 0x64
 80126ac:	d909      	bls.n	80126c2 <NFC_WaitACK+0x8e>
        DBG_PRINTF("NFC I2C WAIT INFO dur:%5d timeout:%5d caller:0x%p\n", HAL_GetTick() - tickstart, Timeout, __builtin_return_address(0));
 80126ae:	f7f9 ff99 	bl	800c5e4 <HAL_GetTick>
 80126b2:	9b03      	ldr	r3, [sp, #12]
 80126b4:	1bc2      	subs	r2, r0, r7
 80126b6:	9300      	str	r3, [sp, #0]
 80126b8:	0028      	movs	r0, r5
 80126ba:	0033      	movs	r3, r6
 80126bc:	4916      	ldr	r1, [pc, #88]	; (8012718 <NFC_WaitACK+0xe4>)
 80126be:	f7f9 fc0e 	bl	800bede <SEGGER_RTT_printf>
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  hi2c->Lock = HAL_UNLOCKED;
  return HAL_ERROR;
}
 80126c2:	0028      	movs	r0, r5
 80126c4:	b005      	add	sp, #20
 80126c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY && (HAL_GetTick() - tickstart > Timeout || !Timeout))
 80126c8:	1c72      	adds	r2, r6, #1
 80126ca:	d0da      	beq.n	8012682 <NFC_WaitACK+0x4e>
 80126cc:	f7f9 ff8a 	bl	800c5e4 <HAL_GetTick>
 80126d0:	1bc0      	subs	r0, r0, r7
 80126d2:	42b0      	cmp	r0, r6
 80126d4:	d801      	bhi.n	80126da <NFC_WaitACK+0xa6>
 80126d6:	2e00      	cmp	r6, #0
 80126d8:	d1d2      	bne.n	8012680 <NFC_WaitACK+0x4c>
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80126da:	2220      	movs	r2, #32
 80126dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return HAL_ERROR;
 80126de:	2501      	movs	r5, #1
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80126e0:	4313      	orrs	r3, r2
 80126e2:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80126e4:	0023      	movs	r3, r4
 80126e6:	3341      	adds	r3, #65	; 0x41
 80126e8:	701a      	strb	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80126ea:	0022      	movs	r2, r4
 80126ec:	2300      	movs	r3, #0
 80126ee:	3242      	adds	r2, #66	; 0x42
  hi2c->Lock = HAL_UNLOCKED;
 80126f0:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80126f2:	7013      	strb	r3, [r2, #0]
  hi2c->Lock = HAL_UNLOCKED;
 80126f4:	7023      	strb	r3, [r4, #0]
  return HAL_ERROR;
 80126f6:	e7e4      	b.n	80126c2 <NFC_WaitACK+0x8e>
    hi2c->Instance->ICR |= I2C_ISR_NACKF | I2C_ISR_STOPF;
 80126f8:	2230      	movs	r2, #48	; 0x30
 80126fa:	69d9      	ldr	r1, [r3, #28]
 80126fc:	430a      	orrs	r2, r1
 80126fe:	61da      	str	r2, [r3, #28]
  } while(Timeout == HAL_MAX_DELAY || (HAL_GetTick() - tickstart < Timeout && Timeout));
 8012700:	1c73      	adds	r3, r6, #1
 8012702:	d0ba      	beq.n	801267a <NFC_WaitACK+0x46>
 8012704:	f7f9 ff6e 	bl	800c5e4 <HAL_GetTick>
 8012708:	1bc0      	subs	r0, r0, r7
 801270a:	42b0      	cmp	r0, r6
 801270c:	d3b5      	bcc.n	801267a <NFC_WaitACK+0x46>
timeout:
 801270e:	e7e4      	b.n	80126da <NFC_WaitACK+0xa6>
 8012710:	20001898 	.word	0x20001898
 8012714:	020020a6 	.word	0x020020a6
 8012718:	0801a1bd 	.word	0x0801a1bd

0801271c <NFC_ReadReg>:
int32_t NFC_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) {
 801271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801271e:	4674      	mov	r4, lr
 8012720:	b08d      	sub	sp, #52	; 0x34
 8012722:	000e      	movs	r6, r1
 8012724:	940b      	str	r4, [sp, #44]	; 0x2c
 8012726:	920a      	str	r2, [sp, #40]	; 0x28
 8012728:	9308      	str	r3, [sp, #32]
 801272a:	9007      	str	r0, [sp, #28]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 801272c:	f7f9 ff5a 	bl	800c5e4 <HAL_GetTick>
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 8012730:	2332      	movs	r3, #50	; 0x32
 8012732:	9302      	str	r3, [sp, #8]
 8012734:	9b08      	ldr	r3, [sp, #32]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 8012736:	9009      	str	r0, [sp, #36]	; 0x24
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 8012738:	9301      	str	r3, [sp, #4]
 801273a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801273c:	0032      	movs	r2, r6
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	9907      	ldr	r1, [sp, #28]
 8012742:	2302      	movs	r3, #2
 8012744:	4827      	ldr	r0, [pc, #156]	; (80127e4 <NFC_ReadReg+0xc8>)
 8012746:	f7fb f99b 	bl	800da80 <HAL_I2C_Mem_Read>
    return 0;
 801274a:	2400      	movs	r4, #0
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 801274c:	42a0      	cmp	r0, r4
 801274e:	d012      	beq.n	8012776 <NFC_ReadReg+0x5a>
  NFC_WaitACK(5);
 8012750:	2005      	movs	r0, #5
 8012752:	f7ff ff6f 	bl	8012634 <NFC_WaitACK>
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 8012756:	2503      	movs	r5, #3
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 8012758:	2332      	movs	r3, #50	; 0x32
 801275a:	9302      	str	r3, [sp, #8]
 801275c:	9b08      	ldr	r3, [sp, #32]
 801275e:	4f21      	ldr	r7, [pc, #132]	; (80127e4 <NFC_ReadReg+0xc8>)
 8012760:	9301      	str	r3, [sp, #4]
 8012762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012764:	0032      	movs	r2, r6
 8012766:	9300      	str	r3, [sp, #0]
 8012768:	0038      	movs	r0, r7
 801276a:	2302      	movs	r3, #2
 801276c:	9907      	ldr	r1, [sp, #28]
 801276e:	f7fb f987 	bl	800da80 <HAL_I2C_Mem_Read>
 8012772:	1e04      	subs	r4, r0, #0
 8012774:	d102      	bne.n	801277c <NFC_ReadReg+0x60>
}
 8012776:	0020      	movs	r0, r4
 8012778:	b00d      	add	sp, #52	; 0x34
 801277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("NFC I2C <RX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801277c:	f7f9 ff32 	bl	800c5e4 <HAL_GetTick>
 8012780:	9908      	ldr	r1, [sp, #32]
 8012782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012786:	9104      	str	r1, [sp, #16]
 8012788:	9907      	ldr	r1, [sp, #28]
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 801278a:	3d01      	subs	r5, #1
    DBG_PRINTF("NFC I2C <RX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801278c:	1a82      	subs	r2, r0, r2
 801278e:	9102      	str	r1, [sp, #8]
 8012790:	9301      	str	r3, [sp, #4]
 8012792:	2000      	movs	r0, #0
 8012794:	002b      	movs	r3, r5
 8012796:	4914      	ldr	r1, [pc, #80]	; (80127e8 <NFC_ReadReg+0xcc>)
 8012798:	9603      	str	r6, [sp, #12]
 801279a:	9400      	str	r4, [sp, #0]
 801279c:	f7f9 fb9f 	bl	800bede <SEGGER_RTT_printf>
 80127a0:	2032      	movs	r0, #50	; 0x32
 80127a2:	f7ff ff47 	bl	8012634 <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 80127a6:	2d00      	cmp	r5, #0
 80127a8:	d1d6      	bne.n	8012758 <NFC_ReadReg+0x3c>
    DBG_PRINTF("NFC I2C <RX ERR dur:%3d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:0x%x caller:%p\n", HAL_GetTick() - ts, r, hi2c1.ErrorCode, DevAddr, Reg, Length, __builtin_return_address(0));
 80127aa:	f7f9 ff1b 	bl	800c5e4 <HAL_GetTick>
 80127ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80127b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127b2:	9104      	str	r1, [sp, #16]
 80127b4:	9908      	ldr	r1, [sp, #32]
 80127b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127b8:	9103      	str	r1, [sp, #12]
 80127ba:	9907      	ldr	r1, [sp, #28]
 80127bc:	1a82      	subs	r2, r0, r2
 80127be:	9101      	str	r1, [sp, #4]
 80127c0:	9300      	str	r3, [sp, #0]
 80127c2:	490a      	ldr	r1, [pc, #40]	; (80127ec <NFC_ReadReg+0xd0>)
 80127c4:	0023      	movs	r3, r4
 80127c6:	0028      	movs	r0, r5
 80127c8:	9602      	str	r6, [sp, #8]
 80127ca:	f7f9 fb88 	bl	800bede <SEGGER_RTT_printf>
    MX_I2C1_Init();
 80127ce:	f7fe fa3d 	bl	8010c4c <MX_I2C1_Init>
    if(!I2C_Scan()) {
 80127d2:	f7fd ffd9 	bl	8010788 <I2C_Scan>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d1cd      	bne.n	8012776 <NFC_ReadReg+0x5a>
      DEBUG_MSG("NFC I2C <RX ERR Reinit Failed!\n");
 80127da:	0028      	movs	r0, r5
 80127dc:	4904      	ldr	r1, [pc, #16]	; (80127f0 <NFC_ReadReg+0xd4>)
 80127de:	f7f9 f9ab 	bl	800bb38 <SEGGER_RTT_WriteString>
  return r;
 80127e2:	e7c8      	b.n	8012776 <NFC_ReadReg+0x5a>
 80127e4:	20001898 	.word	0x20001898
 80127e8:	0801a1f0 	.word	0x0801a1f0
 80127ec:	0801a260 	.word	0x0801a260
 80127f0:	0801a240 	.word	0x0801a240

080127f4 <NFC_WriteReg>:
int32_t NFC_WriteReg(uint16_t DevAddr, uint16_t Reg, const uint8_t *pData, uint16_t Length) {
 80127f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127f6:	4674      	mov	r4, lr
 80127f8:	b08d      	sub	sp, #52	; 0x34
 80127fa:	000e      	movs	r6, r1
 80127fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80127fe:	920a      	str	r2, [sp, #40]	; 0x28
 8012800:	9308      	str	r3, [sp, #32]
 8012802:	9007      	str	r0, [sp, #28]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 8012804:	f7f9 feee 	bl	800c5e4 <HAL_GetTick>
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 8012808:	2332      	movs	r3, #50	; 0x32
 801280a:	9302      	str	r3, [sp, #8]
 801280c:	9b08      	ldr	r3, [sp, #32]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 801280e:	9009      	str	r0, [sp, #36]	; 0x24
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 8012810:	9301      	str	r3, [sp, #4]
 8012812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012814:	0032      	movs	r2, r6
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	9907      	ldr	r1, [sp, #28]
 801281a:	2302      	movs	r3, #2
 801281c:	4827      	ldr	r0, [pc, #156]	; (80128bc <NFC_WriteReg+0xc8>)
 801281e:	f7fb f875 	bl	800d90c <HAL_I2C_Mem_Write>
    return 0;
 8012822:	2400      	movs	r4, #0
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 8012824:	42a0      	cmp	r0, r4
 8012826:	d012      	beq.n	801284e <NFC_WriteReg+0x5a>
  NFC_WaitACK(5);
 8012828:	2005      	movs	r0, #5
 801282a:	f7ff ff03 	bl	8012634 <NFC_WaitACK>
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 801282e:	2503      	movs	r5, #3
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 8012830:	2332      	movs	r3, #50	; 0x32
 8012832:	9302      	str	r3, [sp, #8]
 8012834:	9b08      	ldr	r3, [sp, #32]
 8012836:	4f21      	ldr	r7, [pc, #132]	; (80128bc <NFC_WriteReg+0xc8>)
 8012838:	9301      	str	r3, [sp, #4]
 801283a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801283c:	0032      	movs	r2, r6
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	0038      	movs	r0, r7
 8012842:	2302      	movs	r3, #2
 8012844:	9907      	ldr	r1, [sp, #28]
 8012846:	f7fb f861 	bl	800d90c <HAL_I2C_Mem_Write>
 801284a:	1e04      	subs	r4, r0, #0
 801284c:	d102      	bne.n	8012854 <NFC_WriteReg+0x60>
}
 801284e:	0020      	movs	r0, r4
 8012850:	b00d      	add	sp, #52	; 0x34
 8012852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("NFC I2C >TX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 8012854:	f7f9 fec6 	bl	800c5e4 <HAL_GetTick>
 8012858:	9908      	ldr	r1, [sp, #32]
 801285a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801285c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801285e:	9104      	str	r1, [sp, #16]
 8012860:	9907      	ldr	r1, [sp, #28]
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 8012862:	3d01      	subs	r5, #1
    DBG_PRINTF("NFC I2C >TX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 8012864:	1a82      	subs	r2, r0, r2
 8012866:	9102      	str	r1, [sp, #8]
 8012868:	9301      	str	r3, [sp, #4]
 801286a:	2000      	movs	r0, #0
 801286c:	002b      	movs	r3, r5
 801286e:	4914      	ldr	r1, [pc, #80]	; (80128c0 <NFC_WriteReg+0xcc>)
 8012870:	9603      	str	r6, [sp, #12]
 8012872:	9400      	str	r4, [sp, #0]
 8012874:	f7f9 fb33 	bl	800bede <SEGGER_RTT_printf>
 8012878:	2032      	movs	r0, #50	; 0x32
 801287a:	f7ff fedb 	bl	8012634 <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 801287e:	2d00      	cmp	r5, #0
 8012880:	d1d6      	bne.n	8012830 <NFC_WriteReg+0x3c>
    DBG_PRINTF("NFC I2C >TX ERR dur:%3d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:0x%x caller:%p\n", HAL_GetTick() - ts, r, hi2c1.ErrorCode, DevAddr, Reg, Length, __builtin_return_address(0));
 8012882:	f7f9 feaf 	bl	800c5e4 <HAL_GetTick>
 8012886:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801288a:	9104      	str	r1, [sp, #16]
 801288c:	9908      	ldr	r1, [sp, #32]
 801288e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012890:	9103      	str	r1, [sp, #12]
 8012892:	9907      	ldr	r1, [sp, #28]
 8012894:	1a82      	subs	r2, r0, r2
 8012896:	9101      	str	r1, [sp, #4]
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	490a      	ldr	r1, [pc, #40]	; (80128c4 <NFC_WriteReg+0xd0>)
 801289c:	0023      	movs	r3, r4
 801289e:	0028      	movs	r0, r5
 80128a0:	9602      	str	r6, [sp, #8]
 80128a2:	f7f9 fb1c 	bl	800bede <SEGGER_RTT_printf>
    MX_I2C1_Init();
 80128a6:	f7fe f9d1 	bl	8010c4c <MX_I2C1_Init>
    if(!I2C_Scan()) {
 80128aa:	f7fd ff6d 	bl	8010788 <I2C_Scan>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d1cd      	bne.n	801284e <NFC_WriteReg+0x5a>
      DEBUG_MSG("NFC I2C >RX ERR Reinit Failed!\n");
 80128b2:	0028      	movs	r0, r5
 80128b4:	4904      	ldr	r1, [pc, #16]	; (80128c8 <NFC_WriteReg+0xd4>)
 80128b6:	f7f9 f93f 	bl	800bb38 <SEGGER_RTT_WriteString>
  return r;
 80128ba:	e7c8      	b.n	801284e <NFC_WriteReg+0x5a>
 80128bc:	20001898 	.word	0x20001898
 80128c0:	0801a2b4 	.word	0x0801a2b4
 80128c4:	0801a324 	.word	0x0801a324
 80128c8:	0801a304 	.word	0x0801a304

080128cc <PrintBuffer>:
/* Public functions ----------------------------------------------------------*/
/**
 * DESCRIPTION
 *        Shorthand to do unbuffered print of byte sequence.
 */
static void PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 80128cc:	b570      	push	{r4, r5, r6, lr}
 80128ce:	0014      	movs	r4, r2
 80128d0:	000d      	movs	r5, r1
  DBG_PRINTF("%s0x", pre);
 80128d2:	0002      	movs	r2, r0
 80128d4:	490c      	ldr	r1, [pc, #48]	; (8012908 <PrintBuffer+0x3c>)
 80128d6:	2000      	movs	r0, #0
static void PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 80128d8:	001e      	movs	r6, r3
  DBG_PRINTF("%s0x", pre);
 80128da:	f7f9 fb00 	bl	800bede <SEGGER_RTT_printf>
  if(len) do {
 80128de:	2c00      	cmp	r4, #0
 80128e0:	d00b      	beq.n	80128fa <PrintBuffer+0x2e>
 80128e2:	3c01      	subs	r4, #1
 80128e4:	b2a4      	uxth	r4, r4
 80128e6:	192c      	adds	r4, r5, r4
    DBG_PRINTF("%02x", buf[--len]);
 80128e8:	7822      	ldrb	r2, [r4, #0]
 80128ea:	2000      	movs	r0, #0
 80128ec:	4907      	ldr	r1, [pc, #28]	; (801290c <PrintBuffer+0x40>)
 80128ee:	f7f9 faf6 	bl	800bede <SEGGER_RTT_printf>
  } while(len);
 80128f2:	0023      	movs	r3, r4
 80128f4:	3c01      	subs	r4, #1
 80128f6:	429d      	cmp	r5, r3
 80128f8:	d1f6      	bne.n	80128e8 <PrintBuffer+0x1c>
  DBG_PRINTF("%s", post);
 80128fa:	0032      	movs	r2, r6
 80128fc:	4904      	ldr	r1, [pc, #16]	; (8012910 <PrintBuffer+0x44>)
 80128fe:	2000      	movs	r0, #0
 8012900:	f7f9 faed 	bl	800bede <SEGGER_RTT_printf>
}
 8012904:	bd70      	pop	{r4, r5, r6, pc}
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	08019b41 	.word	0x08019b41
 801290c:	080196f0 	.word	0x080196f0
 8012910:	080197eb 	.word	0x080197eb

08012914 <u64>:
 *        0 1 2 3 --el-memcpy--> 3210 --proto--> 0 1 2 3
 *        0 1 2 3 --be-memcpy--> 0123 --proto--> 3 2 1 0
 *        0 1 2 3 --el-boolor--> 3210 --proto--> 0 1 2 3
 *        0 1 2 3 --be-boolor--> 3210 --proto--> 0 1 2 3
 */
uint64_t u64(uint8_t b[static 8]) {
 8012914:	0003      	movs	r3, r0
 8012916:	b510      	push	{r4, lr}
  return
      (uint64_t)b[7] << 56 | (uint64_t)b[6] << 48 |
      (uint64_t)b[5] << 40 | (uint64_t)b[4] << 32 |
      (uint64_t)b[3] << 24 | (uint64_t)b[2] << 16 |
      (uint64_t)b[1] << 8  | (uint64_t)b[0];
 8012918:	7842      	ldrb	r2, [r0, #1]
 801291a:	7801      	ldrb	r1, [r0, #0]
 801291c:	0212      	lsls	r2, r2, #8
 801291e:	7880      	ldrb	r0, [r0, #2]
 8012920:	4311      	orrs	r1, r2
 8012922:	78da      	ldrb	r2, [r3, #3]
 8012924:	0400      	lsls	r0, r0, #16
 8012926:	4308      	orrs	r0, r1
 8012928:	0612      	lsls	r2, r2, #24
 801292a:	4310      	orrs	r0, r2
 801292c:	795a      	ldrb	r2, [r3, #5]
 801292e:	7919      	ldrb	r1, [r3, #4]
 8012930:	799c      	ldrb	r4, [r3, #6]
 8012932:	0212      	lsls	r2, r2, #8
 8012934:	430a      	orrs	r2, r1
 8012936:	79d9      	ldrb	r1, [r3, #7]
 8012938:	0424      	lsls	r4, r4, #16
 801293a:	4322      	orrs	r2, r4
 801293c:	0609      	lsls	r1, r1, #24
 801293e:	4311      	orrs	r1, r2
}
 8012940:	bd10      	pop	{r4, pc}

08012942 <b64>:

void b64(uint8_t b[static 8], uint64_t v) {
  b[0] = v >>  0 & 0xFF;
  b[1] = v >>  8 & 0xFF;
 8012942:	0a11      	lsrs	r1, r2, #8
  b[0] = v >>  0 & 0xFF;
 8012944:	7002      	strb	r2, [r0, #0]
  b[1] = v >>  8 & 0xFF;
 8012946:	7041      	strb	r1, [r0, #1]
  b[2] = v >> 16 & 0xFF;
 8012948:	0c11      	lsrs	r1, r2, #16
  b[3] = v >> 24 & 0xFF;
 801294a:	0e12      	lsrs	r2, r2, #24
 801294c:	70c2      	strb	r2, [r0, #3]
  b[4] = v >> 32 & 0xFF;
  b[5] = v >> 40 & 0xFF;
 801294e:	0a1a      	lsrs	r2, r3, #8
  b[4] = v >> 32 & 0xFF;
 8012950:	7103      	strb	r3, [r0, #4]
  b[5] = v >> 40 & 0xFF;
 8012952:	7142      	strb	r2, [r0, #5]
  b[6] = v >> 48 & 0xFF;
 8012954:	0c1a      	lsrs	r2, r3, #16
  b[7] = v >> 56 & 0xFF;
 8012956:	0e1b      	lsrs	r3, r3, #24
  b[2] = v >> 16 & 0xFF;
 8012958:	7081      	strb	r1, [r0, #2]
  b[6] = v >> 48 & 0xFF;
 801295a:	7182      	strb	r2, [r0, #6]
  b[7] = v >> 56 & 0xFF;
 801295c:	71c3      	strb	r3, [r0, #7]
}
 801295e:	4770      	bx	lr

08012960 <PBEncodeField>:
 *
 * BUGS
 *        Heed perils of variable argument lists! If passing literals, cast!
 *        Else u32 value 3 becomes a u64 + UB, e.g. 0xb4dc0ded_00000003.
 */
size_t PBEncodeField(uint8_t * restrict out, size_t len, uint32_t key, ...) {
 8012960:	b40c      	push	{r2, r3}
 8012962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012964:	0007      	movs	r7, r0
  va_list ap;
  size_t size = 0;
  const uint8_t type = key & 0x7;
 8012966:	2007      	movs	r0, #7
size_t PBEncodeField(uint8_t * restrict out, size_t len, uint32_t key, ...) {
 8012968:	b089      	sub	sp, #36	; 0x24
 801296a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const uint8_t type = key & 0x7;
 801296c:	b2da      	uxtb	r2, r3
 801296e:	4018      	ands	r0, r3
  const uint32_t id = key >> 3;
 8012970:	08dc      	lsrs	r4, r3, #3

  /* contract programming * preconditions */
  assert(type == 0 || type == 1 || type == 2 || type == 5);
 8012972:	2802      	cmp	r0, #2
 8012974:	d907      	bls.n	8012986 <PBEncodeField+0x26>
 8012976:	2805      	cmp	r0, #5
 8012978:	d005      	beq.n	8012986 <PBEncodeField+0x26>
 801297a:	216d      	movs	r1, #109	; 0x6d
 801297c:	4b69      	ldr	r3, [pc, #420]	; (8012b24 <PBEncodeField+0x1c4>)
 801297e:	4a6a      	ldr	r2, [pc, #424]	; (8012b28 <PBEncodeField+0x1c8>)
  assert(out || !len);
 8012980:	486a      	ldr	r0, [pc, #424]	; (8012b2c <PBEncodeField+0x1cc>)
 8012982:	f003 fa71 	bl	8015e68 <__assert_func>
 8012986:	09db      	lsrs	r3, r3, #7
 8012988:	2f00      	cmp	r7, #0
 801298a:	d106      	bne.n	801299a <PBEncodeField+0x3a>
 801298c:	2900      	cmp	r1, #0
 801298e:	d100      	bne.n	8012992 <PBEncodeField+0x32>
 8012990:	e0c3      	b.n	8012b1a <PBEncodeField+0x1ba>
 8012992:	216e      	movs	r1, #110	; 0x6e
 8012994:	4b66      	ldr	r3, [pc, #408]	; (8012b30 <PBEncodeField+0x1d0>)
 8012996:	4a64      	ldr	r2, [pc, #400]	; (8012b28 <PBEncodeField+0x1c8>)
 8012998:	e7f2      	b.n	8012980 <PBEncodeField+0x20>
  assert(id);
 801299a:	2c00      	cmp	r4, #0
 801299c:	d103      	bne.n	80129a6 <PBEncodeField+0x46>
 801299e:	216f      	movs	r1, #111	; 0x6f
 80129a0:	4b64      	ldr	r3, [pc, #400]	; (8012b34 <PBEncodeField+0x1d4>)
 80129a2:	4a61      	ldr	r2, [pc, #388]	; (8012b28 <PBEncodeField+0x1c8>)
 80129a4:	e7ec      	b.n	8012980 <PBEncodeField+0x20>

  /* Encode key */

  /* encode 1st byte of any key */
  if(size++ < len)
 80129a6:	2900      	cmp	r1, #0
 80129a8:	d007      	beq.n	80129ba <PBEncodeField+0x5a>
    /* 3 type bits | 4 id bits | 8th continuation bit */
    out[size - 1] = (key & 0x7f) | (key >> 7 ? 0x80 : 0);
 80129aa:	247f      	movs	r4, #127	; 0x7f
 80129ac:	4022      	ands	r2, r4
 80129ae:	001c      	movs	r4, r3
 80129b0:	1e65      	subs	r5, r4, #1
 80129b2:	41ac      	sbcs	r4, r5
 80129b4:	01e4      	lsls	r4, r4, #7
 80129b6:	4322      	orrs	r2, r4
 80129b8:	703a      	strb	r2, [r7, #0]

  /* for each 7-bits encode 1-byte (25-bits, 4-bytes total) */
  for(uint32_t i = id >> 4; i; i >>= 7)
    if(size++ < len)
      /* 7 id bits | 8th continuation bit */
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129ba:	227f      	movs	r2, #127	; 0x7f
  for(uint32_t i = id >> 4; i; i >>= 7)
 80129bc:	2401      	movs	r4, #1
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129be:	4694      	mov	ip, r2
  for(uint32_t i = id >> 4; i; i >>= 7)
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d108      	bne.n	80129d6 <PBEncodeField+0x76>

  /* Encode value */

  va_start(ap, key);
 80129c4:	ab0f      	add	r3, sp, #60	; 0x3c
 80129c6:	9305      	str	r3, [sp, #20]
  switch(type) {
 80129c8:	2805      	cmp	r0, #5
 80129ca:	d833      	bhi.n	8012a34 <PBEncodeField+0xd4>
 80129cc:	f7ed fbae 	bl	800012c <__gnu_thumb1_case_uqi>
 80129d0:	32763811 	.word	0x32763811
 80129d4:	5f32      	.short	0x5f32
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129d6:	09da      	lsrs	r2, r3, #7
    if(size++ < len)
 80129d8:	428c      	cmp	r4, r1
 80129da:	d207      	bcs.n	80129ec <PBEncodeField+0x8c>
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129dc:	4665      	mov	r5, ip
 80129de:	0016      	movs	r6, r2
 80129e0:	402b      	ands	r3, r5
 80129e2:	1e75      	subs	r5, r6, #1
 80129e4:	41ae      	sbcs	r6, r5
 80129e6:	01f6      	lsls	r6, r6, #7
 80129e8:	4333      	orrs	r3, r6
 80129ea:	553b      	strb	r3, [r7, r4]
 80129ec:	0013      	movs	r3, r2
 80129ee:	3401      	adds	r4, #1
 80129f0:	e7e6      	b.n	80129c0 <PBEncodeField+0x60>
  case PB_TAGTYPE_VARINT: {
    /* foreach 7-bits encode 1-byte (64-bits, 10-bytes total) */
    uint64_t in = va_arg(ap, uint64_t);
 80129f2:	2207      	movs	r2, #7
 80129f4:	9b05      	ldr	r3, [sp, #20]
 80129f6:	3307      	adds	r3, #7
 80129f8:	4393      	bics	r3, r2
 80129fa:	cb24      	ldmia	r3!, {r2, r5}
    do {
      if(size++ < len)
        out[size - 1] = (in & 0x7f) | (in >> 7 ? 0x80 : 0);
 80129fc:	066e      	lsls	r6, r5, #25
 80129fe:	0013      	movs	r3, r2
 8012a00:	09d2      	lsrs	r2, r2, #7
 8012a02:	4332      	orrs	r2, r6
 8012a04:	0016      	movs	r6, r2
 8012a06:	46a4      	mov	ip, r4
 8012a08:	09ed      	lsrs	r5, r5, #7
 8012a0a:	432e      	orrs	r6, r5
      if(size++ < len)
 8012a0c:	3401      	adds	r4, #1
 8012a0e:	9601      	str	r6, [sp, #4]
 8012a10:	458c      	cmp	ip, r1
 8012a12:	d20c      	bcs.n	8012a2e <PBEncodeField+0xce>
        out[size - 1] = (in & 0x7f) | (in >> 7 ? 0x80 : 0);
 8012a14:	267f      	movs	r6, #127	; 0x7f
 8012a16:	401e      	ands	r6, r3
 8012a18:	9602      	str	r6, [sp, #8]
 8012a1a:	9e01      	ldr	r6, [sp, #4]
 8012a1c:	2380      	movs	r3, #128	; 0x80
 8012a1e:	2e00      	cmp	r6, #0
 8012a20:	d100      	bne.n	8012a24 <PBEncodeField+0xc4>
 8012a22:	0003      	movs	r3, r0
 8012a24:	9e02      	ldr	r6, [sp, #8]
 8012a26:	431e      	orrs	r6, r3
 8012a28:	0033      	movs	r3, r6
 8012a2a:	4666      	mov	r6, ip
 8012a2c:	55bb      	strb	r3, [r7, r6]
    } while(in >>= 7);
 8012a2e:	9b01      	ldr	r3, [sp, #4]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d1e3      	bne.n	80129fc <PBEncodeField+0x9c>
  default: break;;
  }
  va_end(ap);

  return size;
}
 8012a34:	0020      	movs	r0, r4
 8012a36:	b009      	add	sp, #36	; 0x24
 8012a38:	bcf0      	pop	{r4, r5, r6, r7}
 8012a3a:	bc08      	pop	{r3}
 8012a3c:	b002      	add	sp, #8
 8012a3e:	4718      	bx	r3
    uint64_t x = va_arg(ap, uint64_t);
 8012a40:	2207      	movs	r2, #7
 8012a42:	9b05      	ldr	r3, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 8012a44:	0025      	movs	r5, r4
    uint64_t x = va_arg(ap, uint64_t);
 8012a46:	3307      	adds	r3, #7
 8012a48:	4393      	bics	r3, r2
 8012a4a:	001a      	movs	r2, r3
 8012a4c:	3208      	adds	r2, #8
 8012a4e:	9205      	str	r2, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 8012a50:	3508      	adds	r5, #8
 8012a52:	428c      	cmp	r4, r1
 8012a54:	d817      	bhi.n	8012a86 <PBEncodeField+0x126>
 8012a56:	42a9      	cmp	r1, r5
 8012a58:	d217      	bcs.n	8012a8a <PBEncodeField+0x12a>
 8012a5a:	1b0a      	subs	r2, r1, r4
    if(cpylen)
 8012a5c:	42a1      	cmp	r1, r4
 8012a5e:	d012      	beq.n	8012a86 <PBEncodeField+0x126>
    uint64_t x = va_arg(ap, uint64_t);
 8012a60:	cb09      	ldmia	r3, {r0, r3}
      memcpy(out + size, (const uint8_t[8]){
 8012a62:	a906      	add	r1, sp, #24
        x >>  0, x >>  8, x >> 16, x >> 24,
 8012a64:	0a06      	lsrs	r6, r0, #8
      memcpy(out + size, (const uint8_t[8]){
 8012a66:	7008      	strb	r0, [r1, #0]
 8012a68:	704e      	strb	r6, [r1, #1]
        x >>  0, x >>  8, x >> 16, x >> 24,
 8012a6a:	0c06      	lsrs	r6, r0, #16
 8012a6c:	0e00      	lsrs	r0, r0, #24
      memcpy(out + size, (const uint8_t[8]){
 8012a6e:	70c8      	strb	r0, [r1, #3]
        x >> 32, x >> 40, x >> 48, x >> 56}, cpylen);
 8012a70:	0a18      	lsrs	r0, r3, #8
      memcpy(out + size, (const uint8_t[8]){
 8012a72:	710b      	strb	r3, [r1, #4]
 8012a74:	7148      	strb	r0, [r1, #5]
        x >> 32, x >> 40, x >> 48, x >> 56}, cpylen);
 8012a76:	0c18      	lsrs	r0, r3, #16
 8012a78:	0e1b      	lsrs	r3, r3, #24
      memcpy(out + size, (const uint8_t[8]){
 8012a7a:	708e      	strb	r6, [r1, #2]
 8012a7c:	7188      	strb	r0, [r1, #6]
 8012a7e:	71cb      	strb	r3, [r1, #7]
      memcpy(out + size, (const uint8_t[4]){
 8012a80:	1938      	adds	r0, r7, r4
 8012a82:	f003 fa65 	bl	8015f50 <memcpy>
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012a86:	002c      	movs	r4, r5
    break;;
 8012a88:	e7d4      	b.n	8012a34 <PBEncodeField+0xd4>
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 8012a8a:	2208      	movs	r2, #8
 8012a8c:	e7e8      	b.n	8012a60 <PBEncodeField+0x100>
    uint32_t x = va_arg(ap, uint32_t);
 8012a8e:	9b05      	ldr	r3, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012a90:	1d25      	adds	r5, r4, #4
    uint32_t x = va_arg(ap, uint32_t);
 8012a92:	1d1a      	adds	r2, r3, #4
 8012a94:	9205      	str	r2, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012a96:	428c      	cmp	r4, r1
 8012a98:	d8f5      	bhi.n	8012a86 <PBEncodeField+0x126>
 8012a9a:	42a9      	cmp	r1, r5
 8012a9c:	d20c      	bcs.n	8012ab8 <PBEncodeField+0x158>
 8012a9e:	1b0a      	subs	r2, r1, r4
    if(cpylen)
 8012aa0:	42a1      	cmp	r1, r4
 8012aa2:	d0f0      	beq.n	8012a86 <PBEncodeField+0x126>
    uint32_t x = va_arg(ap, uint32_t);
 8012aa4:	681b      	ldr	r3, [r3, #0]
      memcpy(out + size, (const uint8_t[4]){
 8012aa6:	a906      	add	r1, sp, #24
        x >>  0, x >>  8, x >> 16, x >> 24}, cpylen);
 8012aa8:	0a18      	lsrs	r0, r3, #8
      memcpy(out + size, (const uint8_t[4]){
 8012aaa:	700b      	strb	r3, [r1, #0]
 8012aac:	7048      	strb	r0, [r1, #1]
        x >>  0, x >>  8, x >> 16, x >> 24}, cpylen);
 8012aae:	0c18      	lsrs	r0, r3, #16
 8012ab0:	0e1b      	lsrs	r3, r3, #24
      memcpy(out + size, (const uint8_t[4]){
 8012ab2:	7088      	strb	r0, [r1, #2]
 8012ab4:	70cb      	strb	r3, [r1, #3]
 8012ab6:	e7e3      	b.n	8012a80 <PBEncodeField+0x120>
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012ab8:	2204      	movs	r2, #4
 8012aba:	e7f3      	b.n	8012aa4 <PBEncodeField+0x144>
    const size_t buflen = va_arg(ap, size_t);
 8012abc:	9b05      	ldr	r3, [sp, #20]
    uint64_t x = buflen;
 8012abe:	2600      	movs	r6, #0
    const uint8_t *buf = va_arg(ap, uint8_t * restrict);
 8012ac0:	cb0c      	ldmia	r3, {r2, r3}
    uint64_t x = buflen;
 8012ac2:	0020      	movs	r0, r4
    const uint8_t *buf = va_arg(ap, uint8_t * restrict);
 8012ac4:	469c      	mov	ip, r3
    uint64_t x = buflen;
 8012ac6:	0015      	movs	r5, r2
      if(size++ < len)
 8012ac8:	002b      	movs	r3, r5
        out[size - 1] = (x & 0x7f) | (x >> 7 ? 0x80 : 0);
 8012aca:	0675      	lsls	r5, r6, #25
 8012acc:	09dc      	lsrs	r4, r3, #7
 8012ace:	4325      	orrs	r5, r4
 8012ad0:	002c      	movs	r4, r5
 8012ad2:	09f6      	lsrs	r6, r6, #7
 8012ad4:	9001      	str	r0, [sp, #4]
 8012ad6:	4334      	orrs	r4, r6
 8012ad8:	9402      	str	r4, [sp, #8]
      if(size++ < len)
 8012ada:	9c01      	ldr	r4, [sp, #4]
 8012adc:	3001      	adds	r0, #1
 8012ade:	428c      	cmp	r4, r1
 8012ae0:	d20a      	bcs.n	8012af8 <PBEncodeField+0x198>
        out[size - 1] = (x & 0x7f) | (x >> 7 ? 0x80 : 0);
 8012ae2:	247f      	movs	r4, #127	; 0x7f
 8012ae4:	4023      	ands	r3, r4
 8012ae6:	9c02      	ldr	r4, [sp, #8]
 8012ae8:	9303      	str	r3, [sp, #12]
 8012aea:	1e63      	subs	r3, r4, #1
 8012aec:	419c      	sbcs	r4, r3
 8012aee:	9b03      	ldr	r3, [sp, #12]
 8012af0:	01e4      	lsls	r4, r4, #7
 8012af2:	431c      	orrs	r4, r3
 8012af4:	9b01      	ldr	r3, [sp, #4]
 8012af6:	54fc      	strb	r4, [r7, r3]
    } while(x >>= 7);
 8012af8:	9b02      	ldr	r3, [sp, #8]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d1e4      	bne.n	8012ac8 <PBEncodeField+0x168>
    const size_t cpylen = size > len ? 0 : size + buflen > len ? len - size : buflen;
 8012afe:	1814      	adds	r4, r2, r0
 8012b00:	4281      	cmp	r1, r0
 8012b02:	d397      	bcc.n	8012a34 <PBEncodeField+0xd4>
 8012b04:	428c      	cmp	r4, r1
 8012b06:	d900      	bls.n	8012b0a <PBEncodeField+0x1aa>
 8012b08:	1a0a      	subs	r2, r1, r0
    if(cpylen)
 8012b0a:	2a00      	cmp	r2, #0
 8012b0c:	d100      	bne.n	8012b10 <PBEncodeField+0x1b0>
 8012b0e:	e791      	b.n	8012a34 <PBEncodeField+0xd4>
      memcpy(out + size, buf, cpylen);
 8012b10:	4661      	mov	r1, ip
 8012b12:	1838      	adds	r0, r7, r0
 8012b14:	f003 fa1c 	bl	8015f50 <memcpy>
  return size;
 8012b18:	e78c      	b.n	8012a34 <PBEncodeField+0xd4>
  assert(id);
 8012b1a:	2c00      	cmp	r4, #0
 8012b1c:	d000      	beq.n	8012b20 <PBEncodeField+0x1c0>
 8012b1e:	e74c      	b.n	80129ba <PBEncodeField+0x5a>
 8012b20:	e73d      	b.n	801299e <PBEncodeField+0x3e>
 8012b22:	46c0      	nop			; (mov r8, r8)
 8012b24:	0801a378 	.word	0x0801a378
 8012b28:	0801a7c0 	.word	0x0801a7c0
 8012b2c:	0801a3a9 	.word	0x0801a3a9
 8012b30:	0801a3bb 	.word	0x0801a3bb
 8012b34:	08018aba 	.word	0x08018aba

08012b38 <PBDecodeVarint>:
 *
 */
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
  uint8_t destbytes, nextbits, bitmask, bits = 0;

  destbytes = maxbits / 8 + !!(maxbits % 8);
 8012b38:	2307      	movs	r3, #7
 8012b3a:	400b      	ands	r3, r1
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8012b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b3e:	0014      	movs	r4, r2
  destbytes = maxbits / 8 + !!(maxbits % 8);
 8012b40:	1e5a      	subs	r2, r3, #1
 8012b42:	4193      	sbcs	r3, r2
 8012b44:	08ca      	lsrs	r2, r1, #3
 8012b46:	189b      	adds	r3, r3, r2
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8012b48:	0006      	movs	r6, r0
 8012b4a:	000f      	movs	r7, r1
  destbytes =
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d922      	bls.n	8012b96 <PBDecodeVarint+0x5e>
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d002      	beq.n	8012b5a <PBDecodeVarint+0x22>
 8012b54:	2b04      	cmp	r3, #4
 8012b56:	d920      	bls.n	8012b9a <PBDecodeVarint+0x62>
 8012b58:	2308      	movs	r3, #8
  uint8_t destbytes, nextbits, bitmask, bits = 0;
 8012b5a:	2500      	movs	r5, #0
    nextbits = maxbits - bits;
    nextbits = nextbits > 7 ? 7 : nextbits;
    bitmask = ((uint8_t)1 << nextbits) - 1;

    /* Carve bits, affix to value */
    switch(destbytes) {
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	9301      	str	r3, [sp, #4]
    varint += !!bits;
 8012b60:	002b      	movs	r3, r5
 8012b62:	1e5a      	subs	r2, r3, #1
 8012b64:	4193      	sbcs	r3, r2
 8012b66:	18f6      	adds	r6, r6, r3
    nextbits = maxbits - bits;
 8012b68:	1b7b      	subs	r3, r7, r5
 8012b6a:	b2db      	uxtb	r3, r3
    nextbits = nextbits > 7 ? 7 : nextbits;
 8012b6c:	1c1a      	adds	r2, r3, #0
 8012b6e:	2b07      	cmp	r3, #7
 8012b70:	d900      	bls.n	8012b74 <PBDecodeVarint+0x3c>
 8012b72:	2207      	movs	r2, #7
 8012b74:	b2d3      	uxtb	r3, r2
 8012b76:	9300      	str	r3, [sp, #0]
    bitmask = ((uint8_t)1 << nextbits) - 1;
 8012b78:	2301      	movs	r3, #1
 8012b7a:	9a00      	ldr	r2, [sp, #0]
 8012b7c:	4093      	lsls	r3, r2
    switch(destbytes) {
 8012b7e:	9a01      	ldr	r2, [sp, #4]
    bitmask = ((uint8_t)1 << nextbits) - 1;
 8012b80:	3b01      	subs	r3, #1
 8012b82:	b2db      	uxtb	r3, r3
    switch(destbytes) {
 8012b84:	2a07      	cmp	r2, #7
 8012b86:	d818      	bhi.n	8012bba <PBDecodeVarint+0x82>
 8012b88:	0010      	movs	r0, r2
 8012b8a:	f7ed facf 	bl	800012c <__gnu_thumb1_case_uqi>
 8012b8e:	1808      	.short	0x1808
 8012b90:	16161f16 	.word	0x16161f16
 8012b94:	2616      	.short	0x2616
  destbytes =
 8012b96:	2301      	movs	r3, #1
 8012b98:	e7df      	b.n	8012b5a <PBDecodeVarint+0x22>
 8012b9a:	2304      	movs	r3, #4
 8012b9c:	e7dd      	b.n	8012b5a <PBDecodeVarint+0x22>
    case 1: *(uint8_t *)value |= ((bitmask & *varint) + (uint8_t )0) << bits; break;
 8012b9e:	7830      	ldrb	r0, [r6, #0]
 8012ba0:	4003      	ands	r3, r0
 8012ba2:	40ab      	lsls	r3, r5
 8012ba4:	7820      	ldrb	r0, [r4, #0]
 8012ba6:	4303      	orrs	r3, r0
 8012ba8:	7023      	strb	r3, [r4, #0]
    case 2: *(uint16_t*)value |= ((bitmask & *varint) + (uint16_t)0) << bits; break;
    case 4: *(uint32_t*)value |= ((bitmask & *varint) + (uint32_t)0) << bits; break;
    case 8: *(uint64_t*)value |= ((bitmask & *varint) + (uint64_t)0) << bits; break;
    default: return 0; break;
    }
    bits += nextbits;
 8012baa:	9b00      	ldr	r3, [sp, #0]
 8012bac:	18ed      	adds	r5, r5, r3

  /* Check continuation bit after taking value */
  } while(0x80 & *varint && bits < maxbits);
 8012bae:	7833      	ldrb	r3, [r6, #0]
    bits += nextbits;
 8012bb0:	b2ed      	uxtb	r5, r5
  } while(0x80 & *varint && bits < maxbits);
 8012bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8012bb4:	d91e      	bls.n	8012bf4 <PBDecodeVarint+0xbc>
 8012bb6:	42af      	cmp	r7, r5
 8012bb8:	d8d2      	bhi.n	8012b60 <PBDecodeVarint+0x28>
    switch(destbytes) {
 8012bba:	2000      	movs	r0, #0

  /* Return input bytes read or 0 if too many continuation bits set */
  return *varint & 0x80 ? 0 : bits / 7 + !!(bits % 7);
}
 8012bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    case 2: *(uint16_t*)value |= ((bitmask & *varint) + (uint16_t)0) << bits; break;
 8012bbe:	7830      	ldrb	r0, [r6, #0]
 8012bc0:	4003      	ands	r3, r0
 8012bc2:	40ab      	lsls	r3, r5
 8012bc4:	8820      	ldrh	r0, [r4, #0]
 8012bc6:	4303      	orrs	r3, r0
 8012bc8:	8023      	strh	r3, [r4, #0]
 8012bca:	e7ee      	b.n	8012baa <PBDecodeVarint+0x72>
    case 4: *(uint32_t*)value |= ((bitmask & *varint) + (uint32_t)0) << bits; break;
 8012bcc:	7830      	ldrb	r0, [r6, #0]
 8012bce:	6822      	ldr	r2, [r4, #0]
 8012bd0:	4003      	ands	r3, r0
 8012bd2:	40ab      	lsls	r3, r5
 8012bd4:	4313      	orrs	r3, r2
 8012bd6:	6023      	str	r3, [r4, #0]
 8012bd8:	e7e7      	b.n	8012baa <PBDecodeVarint+0x72>
    case 8: *(uint64_t*)value |= ((bitmask & *varint) + (uint64_t)0) << bits; break;
 8012bda:	7830      	ldrb	r0, [r6, #0]
 8012bdc:	002a      	movs	r2, r5
 8012bde:	4018      	ands	r0, r3
 8012be0:	2100      	movs	r1, #0
 8012be2:	f7ed fc37 	bl	8000454 <__aeabi_llsl>
 8012be6:	6823      	ldr	r3, [r4, #0]
 8012be8:	4318      	orrs	r0, r3
 8012bea:	6863      	ldr	r3, [r4, #4]
 8012bec:	6020      	str	r0, [r4, #0]
 8012bee:	4319      	orrs	r1, r3
 8012bf0:	6061      	str	r1, [r4, #4]
 8012bf2:	e7da      	b.n	8012baa <PBDecodeVarint+0x72>
  return *varint & 0x80 ? 0 : bits / 7 + !!(bits % 7);
 8012bf4:	2107      	movs	r1, #7
 8012bf6:	0028      	movs	r0, r5
 8012bf8:	f7ed fb3c 	bl	8000274 <__aeabi_uidivmod>
 8012bfc:	0028      	movs	r0, r5
 8012bfe:	b2cc      	uxtb	r4, r1
 8012c00:	2107      	movs	r1, #7
 8012c02:	1e63      	subs	r3, r4, #1
 8012c04:	419c      	sbcs	r4, r3
 8012c06:	f7ed faaf 	bl	8000168 <__udivsi3>
 8012c0a:	1820      	adds	r0, r4, r0
 8012c0c:	b2c0      	uxtb	r0, r0
 8012c0e:	e7d5      	b.n	8012bbc <PBDecodeVarint+0x84>

08012c10 <PBEncodeSInt>:

uint64_t PBEncodeSInt(int64_t val) {
 8012c10:	0002      	movs	r2, r0
 8012c12:	000b      	movs	r3, r1
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8012c14:	0fc8      	lsrs	r0, r1, #31
 8012c16:	2100      	movs	r1, #0
uint64_t PBEncodeSInt(int64_t val) {
 8012c18:	b530      	push	{r4, r5, lr}
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8012c1a:	2500      	movs	r5, #0
 8012c1c:	4244      	negs	r4, r0
 8012c1e:	418d      	sbcs	r5, r1
 8012c20:	1892      	adds	r2, r2, r2
 8012c22:	415b      	adcs	r3, r3
 8012c24:	0029      	movs	r1, r5
 8012c26:	0020      	movs	r0, r4
 8012c28:	4059      	eors	r1, r3
 8012c2a:	4050      	eors	r0, r2
}
 8012c2c:	bd30      	pop	{r4, r5, pc}

08012c2e <PBDecodeSInt>:

int64_t PBDecodeSInt(uint64_t val) {
 8012c2e:	0003      	movs	r3, r0
  return (int64_t)(val & 1 ? ~(val >> 1) : val >> 1);
 8012c30:	07ca      	lsls	r2, r1, #31
 8012c32:	0840      	lsrs	r0, r0, #1
 8012c34:	4310      	orrs	r0, r2
 8012c36:	0849      	lsrs	r1, r1, #1
 8012c38:	07db      	lsls	r3, r3, #31
 8012c3a:	d501      	bpl.n	8012c40 <PBDecodeSInt+0x12>
 8012c3c:	43c0      	mvns	r0, r0
 8012c3e:	43c9      	mvns	r1, r1
}
 8012c40:	4770      	bx	lr
	...

08012c44 <PBDecodeMsg>:
 *
 *            larger key  varint_length  payload
 *              82 80 40             05  aa bb cc dd ee
 *        bytes 131072 = {0xaa, 0xbb, 0xcc, 0xdd, 0xee}
 */
void PBDecodeMsg(const uint8_t *msg, uint8_t len) {
 8012c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c46:	b097      	sub	sp, #92	; 0x5c
 8012c48:	9001      	str	r0, [sp, #4]
 8012c4a:	9102      	str	r1, [sp, #8]
  const char *debug_msg = "\n";
  uint8_t debug_fieldpos = 0;
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;

  /* 1st byte always zero, to allow future (unlikely) breaking changes */
  if(len < 1 || msg[0]) {
 8012c4c:	2900      	cmp	r1, #0
 8012c4e:	d101      	bne.n	8012c54 <PBDecodeMsg+0x10>
 8012c50:	f000 fbec 	bl	801342c <PBDecodeMsg+0x7e8>
 8012c54:	7805      	ldrb	r5, [r0, #0]
 8012c56:	2d00      	cmp	r5, #0
 8012c58:	d001      	beq.n	8012c5e <PBDecodeMsg+0x1a>
 8012c5a:	f000 fbe7 	bl	801342c <PBDecodeMsg+0x7e8>
    debug_msg = ", Unknown message version\n";
    goto err;
  }
  if(len == 1) {
 8012c5e:	2901      	cmp	r1, #1
 8012c60:	d101      	bne.n	8012c66 <PBDecodeMsg+0x22>
 8012c62:	f000 fbe6 	bl	8013432 <PBDecodeMsg+0x7ee>
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 8012c66:	9504      	str	r5, [sp, #16]
 8012c68:	9503      	str	r5, [sp, #12]
 8012c6a:	9505      	str	r5, [sp, #20]
    debug_msg = ", Out-of-bounds\n";
    goto err;
  }
  pos++;
 8012c6c:	3501      	adds	r5, #1
  while(pos != len) {
    /*
     * Decode Key
     */
    uint8_t tagtype = msg[pos] & 0x7;
    uint32_t tagnr = 0;
 8012c6e:	2200      	movs	r2, #0
    uint8_t val_rawbytes;
    uint64_t val_int = 0;
 8012c70:	2100      	movs	r1, #0
    uint32_t tagnr = 0;
 8012c72:	9207      	str	r2, [sp, #28]
    uint64_t val_int = 0;
 8012c74:	2200      	movs	r2, #0
    uint8_t tagtype = msg[pos] & 0x7;
 8012c76:	2607      	movs	r6, #7
 8012c78:	9b01      	ldr	r3, [sp, #4]
    uint64_t val_int = 0;
 8012c7a:	9108      	str	r1, [sp, #32]
 8012c7c:	9209      	str	r2, [sp, #36]	; 0x24
    uint8_t tagtype = msg[pos] & 0x7;
 8012c7e:	195f      	adds	r7, r3, r5
 8012c80:	5d5b      	ldrb	r3, [r3, r5]

    debug_fieldpos = pos;

    /* Continuation bit set, tag could be 2 to 5 bytes, values [16,2^29-1] */
    if(msg[pos] & 0x80) {
 8012c82:	b25a      	sxtb	r2, r3
    uint8_t tagtype = msg[pos] & 0x7;
 8012c84:	401e      	ands	r6, r3
    if(msg[pos] & 0x80) {
 8012c86:	2a00      	cmp	r2, #0
 8012c88:	da2a      	bge.n	8012ce0 <PBDecodeMsg+0x9c>
      /* Reuse code to decode subsequent 1 to 4 bytes. */
      uint8_t tagnr_bitlimit = len - pos < 5 ? (len - pos) * 7 : 25;
 8012c8a:	9b02      	ldr	r3, [sp, #8]
 8012c8c:	3119      	adds	r1, #25
 8012c8e:	1b5b      	subs	r3, r3, r5
 8012c90:	2b04      	cmp	r3, #4
 8012c92:	dc02      	bgt.n	8012c9a <PBDecodeMsg+0x56>
 8012c94:	2207      	movs	r2, #7
 8012c96:	4353      	muls	r3, r2
 8012c98:	b2d9      	uxtb	r1, r3
      uint8_t tagnr_bytes = PBDecodeVarint(msg + pos + 1, tagnr_bitlimit, &tagnr);
 8012c9a:	9b01      	ldr	r3, [sp, #4]
 8012c9c:	1c6c      	adds	r4, r5, #1
 8012c9e:	1918      	adds	r0, r3, r4
 8012ca0:	aa07      	add	r2, sp, #28
 8012ca2:	f7ff ff49 	bl	8012b38 <PBDecodeVarint>

      /* Prevent varint spill, i.e. continuation bit set in all *accessed* bytes */
      if(!tagnr_bytes) {
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d100      	bne.n	8012cac <PBDecodeMsg+0x68>
 8012caa:	e3b3      	b.n	8013414 <PBDecodeMsg+0x7d0>
        goto err;
      }

      /* Merge value of 1st byte with value of subsequent 1 to 4 bytes. */
      tagnr <<= 4;
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012cac:	783b      	ldrb	r3, [r7, #0]
      tagnr <<= 4;
 8012cae:	9a07      	ldr	r2, [sp, #28]
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012cb0:	065b      	lsls	r3, r3, #25
 8012cb2:	0f1b      	lsrs	r3, r3, #28
      tagnr <<= 4;
 8012cb4:	0112      	lsls	r2, r2, #4
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012cb6:	4313      	orrs	r3, r2
      pos += tagnr_bytes + 1;
 8012cb8:	1824      	adds	r4, r4, r0
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012cba:	9307      	str	r3, [sp, #28]
      pos += tagnr_bytes + 1;
 8012cbc:	b2e3      	uxtb	r3, r4

    /* Continuation bit clear, tag is 1 byte, values [1,15] */
    } else {
      tagnr = (msg[pos] & 0x78) >> 3;
      pos += 1;
 8012cbe:	9300      	str	r3, [sp, #0]
    }

    /* Key being zero is ill-formed */
    if(!tagnr) {
 8012cc0:	9b07      	ldr	r3, [sp, #28]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d100      	bne.n	8012cc8 <PBDecodeMsg+0x84>
 8012cc6:	e3af      	b.n	8013428 <PBDecodeMsg+0x7e4>
    /*
     * Decode Value
     */

    /* Key without value is ill-formed. */
    if(!(len - pos)) {
 8012cc8:	9b00      	ldr	r3, [sp, #0]
 8012cca:	9a02      	ldr	r2, [sp, #8]
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d01e      	beq.n	8012d0e <PBDecodeMsg+0xca>
      debug_msg = ", Out-of-bounds tag w/o value\n";
      goto abort;
    }

    /* Need size in case to skip unknown field. */
    switch(tagtype) {
 8012cd0:	2e05      	cmp	r6, #5
 8012cd2:	d81c      	bhi.n	8012d0e <PBDecodeMsg+0xca>
 8012cd4:	0030      	movs	r0, r6
 8012cd6:	f7ed fa29 	bl	800012c <__gnu_thumb1_case_uqi>
 8012cda:	5208      	.short	0x5208
 8012cdc:	9a1a1a76 	.word	0x9a1a1a76
      tagnr = (msg[pos] & 0x78) >> 3;
 8012ce0:	10db      	asrs	r3, r3, #3
      pos += 1;
 8012ce2:	1c69      	adds	r1, r5, #1
      tagnr = (msg[pos] & 0x78) >> 3;
 8012ce4:	9307      	str	r3, [sp, #28]
      pos += 1;
 8012ce6:	b2cb      	uxtb	r3, r1
 8012ce8:	e7e9      	b.n	8012cbe <PBDecodeMsg+0x7a>
    case PB_TAGTYPE_VARINT: {
      uint8_t varint_bitlimit = len - pos < 10 ? (len - pos) * 7 : 64;
 8012cea:	9b02      	ldr	r3, [sp, #8]
 8012cec:	9a00      	ldr	r2, [sp, #0]
 8012cee:	2140      	movs	r1, #64	; 0x40
 8012cf0:	1a9b      	subs	r3, r3, r2
 8012cf2:	2b09      	cmp	r3, #9
 8012cf4:	dc02      	bgt.n	8012cfc <PBDecodeMsg+0xb8>
 8012cf6:	2207      	movs	r2, #7
 8012cf8:	4353      	muls	r3, r2
 8012cfa:	b2d9      	uxtb	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8012cfc:	9a00      	ldr	r2, [sp, #0]
 8012cfe:	9b01      	ldr	r3, [sp, #4]
 8012d00:	1898      	adds	r0, r3, r2
 8012d02:	aa08      	add	r2, sp, #32
 8012d04:	f7ff ff18 	bl	8012b38 <PBDecodeVarint>
 8012d08:	0004      	movs	r4, r0
      break;
    }
    }

    /* Value was too large or ill-formed */
    if(!val_rawbytes) {
 8012d0a:	2c00      	cmp	r4, #0
 8012d0c:	d13f      	bne.n	8012d8e <PBDecodeMsg+0x14a>
    pos += val_rawbytes;
  }

abort:
#ifdef STX
  DEVCFG_SET(DevCfg.useSensor.bma400,  use_bma400)  && (DevCfg.changed.bma400  = true);
 8012d0e:	4ac2      	ldr	r2, [pc, #776]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012d10:	9c05      	ldr	r4, [sp, #20]
 8012d12:	0010      	movs	r0, r2
 8012d14:	306c      	adds	r0, #108	; 0x6c
 8012d16:	7803      	ldrb	r3, [r0, #0]
 8012d18:	07d9      	lsls	r1, r3, #31
 8012d1a:	0fc9      	lsrs	r1, r1, #31
 8012d1c:	42a1      	cmp	r1, r4
 8012d1e:	d008      	beq.n	8012d32 <PBDecodeMsg+0xee>
 8012d20:	2101      	movs	r1, #1
 8012d22:	438b      	bics	r3, r1
 8012d24:	4323      	orrs	r3, r4
 8012d26:	7003      	strb	r3, [r0, #0]
 8012d28:	2305      	movs	r3, #5
 8012d2a:	7811      	ldrb	r1, [r2, #0]
 8012d2c:	4399      	bics	r1, r3
 8012d2e:	430b      	orrs	r3, r1
 8012d30:	7013      	strb	r3, [r2, #0]
  DEVCFG_SET(DevCfg.useSensor.sfh7776, use_sfh7776) && (DevCfg.changed.sfh7776 = true);
 8012d32:	0010      	movs	r0, r2
 8012d34:	306c      	adds	r0, #108	; 0x6c
 8012d36:	7801      	ldrb	r1, [r0, #0]
 8012d38:	9c04      	ldr	r4, [sp, #16]
 8012d3a:	078b      	lsls	r3, r1, #30
 8012d3c:	0fdb      	lsrs	r3, r3, #31
 8012d3e:	42a3      	cmp	r3, r4
 8012d40:	d009      	beq.n	8012d56 <PBDecodeMsg+0x112>
 8012d42:	0063      	lsls	r3, r4, #1
 8012d44:	2402      	movs	r4, #2
 8012d46:	43a1      	bics	r1, r4
 8012d48:	430b      	orrs	r3, r1
 8012d4a:	7003      	strb	r3, [r0, #0]
 8012d4c:	2311      	movs	r3, #17
 8012d4e:	7811      	ldrb	r1, [r2, #0]
 8012d50:	4399      	bics	r1, r3
 8012d52:	430b      	orrs	r3, r1
 8012d54:	7013      	strb	r3, [r2, #0]
  DEVCFG_SET(DevCfg.useSensor.hdc2080, use_hdc2080) && (DevCfg.changed.hdc2080 = true);
 8012d56:	0010      	movs	r0, r2
 8012d58:	306c      	adds	r0, #108	; 0x6c
 8012d5a:	7801      	ldrb	r1, [r0, #0]
 8012d5c:	9c03      	ldr	r4, [sp, #12]
 8012d5e:	074b      	lsls	r3, r1, #29
 8012d60:	0fdb      	lsrs	r3, r3, #31
 8012d62:	42a3      	cmp	r3, r4
 8012d64:	d009      	beq.n	8012d7a <PBDecodeMsg+0x136>
 8012d66:	00a3      	lsls	r3, r4, #2
 8012d68:	2404      	movs	r4, #4
 8012d6a:	43a1      	bics	r1, r4
 8012d6c:	430b      	orrs	r3, r1
 8012d6e:	7003      	strb	r3, [r0, #0]
 8012d70:	2309      	movs	r3, #9
 8012d72:	7811      	ldrb	r1, [r2, #0]
 8012d74:	4399      	bics	r1, r3
 8012d76:	430b      	orrs	r3, r1
 8012d78:	7013      	strb	r3, [r2, #0]
#endif

  return;
err:
  PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, debug_msg);
}
 8012d7a:	b017      	add	sp, #92	; 0x5c
 8012d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(&val_int, msg + pos, val_rawbytes);
 8012d7e:	9a00      	ldr	r2, [sp, #0]
 8012d80:	9b01      	ldr	r3, [sp, #4]
 8012d82:	a808      	add	r0, sp, #32
 8012d84:	1899      	adds	r1, r3, r2
 8012d86:	2208      	movs	r2, #8
 8012d88:	f003 f8e2 	bl	8015f50 <memcpy>
      val_rawbytes = 8;
 8012d8c:	2408      	movs	r4, #8
    if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_OTAA) {
 8012d8e:	9b07      	ldr	r3, [sp, #28]
 8012d90:	00db      	lsls	r3, r3, #3
 8012d92:	4333      	orrs	r3, r6
 8012d94:	2b28      	cmp	r3, #40	; 0x28
 8012d96:	d143      	bne.n	8012e20 <PBDecodeMsg+0x1dc>
      DBG_PRINTF("NFC <RX lora_otaa 0x%02x\n", val_int);
 8012d98:	9a08      	ldr	r2, [sp, #32]
 8012d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9c:	499f      	ldr	r1, [pc, #636]	; (801301c <PBDecodeMsg+0x3d8>)
 8012d9e:	2000      	movs	r0, #0
 8012da0:	f7f9 f89d 	bl	800bede <SEGGER_RTT_printf>
      val_int = !!val_int;
 8012da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012da6:	9b08      	ldr	r3, [sp, #32]
 8012da8:	4313      	orrs	r3, r2
 8012daa:	1e5a      	subs	r2, r3, #1
 8012dac:	4193      	sbcs	r3, r2
      DEVCFG_SET(DevCfg.isOtaa, val_int) && (DevCfg.changed.lrw = true);
 8012dae:	4a9a      	ldr	r2, [pc, #616]	; (8013018 <PBDecodeMsg+0x3d4>)
      val_int = !!val_int;
 8012db0:	b2d9      	uxtb	r1, r3
      DEVCFG_SET(DevCfg.isOtaa, val_int) && (DevCfg.changed.lrw = true);
 8012db2:	7910      	ldrb	r0, [r2, #4]
 8012db4:	4283      	cmp	r3, r0
 8012db6:	d053      	beq.n	8012e60 <PBDecodeMsg+0x21c>
 8012db8:	7111      	strb	r1, [r2, #4]
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 8012dba:	2303      	movs	r3, #3
 8012dbc:	7811      	ldrb	r1, [r2, #0]
 8012dbe:	4399      	bics	r1, r3
 8012dc0:	430b      	orrs	r3, r1
 8012dc2:	7013      	strb	r3, [r2, #0]
 8012dc4:	e04c      	b.n	8012e60 <PBDecodeMsg+0x21c>
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8012dc6:	9b02      	ldr	r3, [sp, #8]
 8012dc8:	9a00      	ldr	r2, [sp, #0]
 8012dca:	1a99      	subs	r1, r3, r2
 8012dcc:	3901      	subs	r1, #1
 8012dce:	1e4b      	subs	r3, r1, #1
 8012dd0:	4199      	sbcs	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8012dd2:	9b01      	ldr	r3, [sp, #4]
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8012dd4:	3107      	adds	r1, #7
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8012dd6:	1898      	adds	r0, r3, r2
 8012dd8:	aa08      	add	r2, sp, #32
 8012dda:	f7ff fead 	bl	8012b38 <PBDecodeVarint>
      if(!val_rawbytes) break;
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d100      	bne.n	8012de4 <PBDecodeMsg+0x1a0>
 8012de2:	e794      	b.n	8012d0e <PBDecodeMsg+0xca>
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8012de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de6:	9c08      	ldr	r4, [sp, #32]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d000      	beq.n	8012dee <PBDecodeMsg+0x1aa>
 8012dec:	e78f      	b.n	8012d0e <PBDecodeMsg+0xca>
 8012dee:	2cfa      	cmp	r4, #250	; 0xfa
 8012df0:	d900      	bls.n	8012df4 <PBDecodeMsg+0x1b0>
 8012df2:	e78c      	b.n	8012d0e <PBDecodeMsg+0xca>
      pos += val_rawbytes;
 8012df4:	9b00      	ldr	r3, [sp, #0]
 8012df6:	1818      	adds	r0, r3, r0
 8012df8:	b2c3      	uxtb	r3, r0
 8012dfa:	9300      	str	r3, [sp, #0]
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8012dfc:	9a00      	ldr	r2, [sp, #0]
 8012dfe:	9b02      	ldr	r3, [sp, #8]
 8012e00:	1a9b      	subs	r3, r3, r2
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	429c      	cmp	r4, r3
 8012e06:	d900      	bls.n	8012e0a <PBDecodeMsg+0x1c6>
 8012e08:	e781      	b.n	8012d0e <PBDecodeMsg+0xca>
 8012e0a:	b2e4      	uxtb	r4, r4
 8012e0c:	e77d      	b.n	8012d0a <PBDecodeMsg+0xc6>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8012e0e:	9a00      	ldr	r2, [sp, #0]
 8012e10:	9b01      	ldr	r3, [sp, #4]
 8012e12:	a808      	add	r0, sp, #32
 8012e14:	1899      	adds	r1, r3, r2
 8012e16:	2204      	movs	r2, #4
 8012e18:	f003 f89a 	bl	8015f50 <memcpy>
      val_rawbytes = 4;
 8012e1c:	2404      	movs	r4, #4
 8012e1e:	e7b6      	b.n	8012d8e <PBDecodeMsg+0x14a>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_EUI) {
 8012e20:	2b31      	cmp	r3, #49	; 0x31
 8012e22:	d125      	bne.n	8012e70 <PBDecodeMsg+0x22c>
      PrintBuffer("NFC <RX lora_dev_eui ", &val_int, sizeof val_int, "\n");
 8012e24:	2208      	movs	r2, #8
 8012e26:	4b7e      	ldr	r3, [pc, #504]	; (8013020 <PBDecodeMsg+0x3dc>)
 8012e28:	487e      	ldr	r0, [pc, #504]	; (8013024 <PBDecodeMsg+0x3e0>)
 8012e2a:	a908      	add	r1, sp, #32
 8012e2c:	f7ff fd4e 	bl	80128cc <PrintBuffer>
      b64(deveui, val_int);
 8012e30:	9a08      	ldr	r2, [sp, #32]
 8012e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e34:	a80b      	add	r0, sp, #44	; 0x2c
 8012e36:	f7ff fd84 	bl	8012942 <b64>
      DEVCFG_MEMCPY(DevCfg.devEui, deveui, sizeof deveui) && (DevCfg.changed.lrw = true);
 8012e3a:	4e7b      	ldr	r6, [pc, #492]	; (8013028 <PBDecodeMsg+0x3e4>)
      DEVCFG_MEMCPY(DevCfg.appEui, appeui, sizeof appeui) && (DevCfg.changed.lrw = true);
 8012e3c:	2208      	movs	r2, #8
 8012e3e:	0030      	movs	r0, r6
 8012e40:	a90b      	add	r1, sp, #44	; 0x2c
 8012e42:	f003 f877 	bl	8015f34 <memcmp>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	d00a      	beq.n	8012e60 <PBDecodeMsg+0x21c>
 8012e4a:	2208      	movs	r2, #8
 8012e4c:	0030      	movs	r0, r6
 8012e4e:	a90b      	add	r1, sp, #44	; 0x2c
 8012e50:	4d71      	ldr	r5, [pc, #452]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012e52:	f003 f87d 	bl	8015f50 <memcpy>
 8012e56:	2303      	movs	r3, #3
 8012e58:	782a      	ldrb	r2, [r5, #0]
 8012e5a:	439a      	bics	r2, r3
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	702b      	strb	r3, [r5, #0]
    pos += val_rawbytes;
 8012e60:	9b00      	ldr	r3, [sp, #0]
 8012e62:	191c      	adds	r4, r3, r4
  while(pos != len) {
 8012e64:	9b02      	ldr	r3, [sp, #8]
    pos += val_rawbytes;
 8012e66:	b2e5      	uxtb	r5, r4
  while(pos != len) {
 8012e68:	42ab      	cmp	r3, r5
 8012e6a:	d000      	beq.n	8012e6e <PBDecodeMsg+0x22a>
 8012e6c:	e6ff      	b.n	8012c6e <PBDecodeMsg+0x2a>
 8012e6e:	e74e      	b.n	8012d0e <PBDecodeMsg+0xca>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_EUI) {
 8012e70:	2b39      	cmp	r3, #57	; 0x39
 8012e72:	d10c      	bne.n	8012e8e <PBDecodeMsg+0x24a>
      PrintBuffer("NFC <RX lora_app_eui ", &val_int, sizeof val_int, "\n");
 8012e74:	2208      	movs	r2, #8
 8012e76:	4b6a      	ldr	r3, [pc, #424]	; (8013020 <PBDecodeMsg+0x3dc>)
 8012e78:	486c      	ldr	r0, [pc, #432]	; (801302c <PBDecodeMsg+0x3e8>)
 8012e7a:	a908      	add	r1, sp, #32
 8012e7c:	f7ff fd26 	bl	80128cc <PrintBuffer>
      b64(appeui, val_int);
 8012e80:	9a08      	ldr	r2, [sp, #32]
 8012e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e84:	a80b      	add	r0, sp, #44	; 0x2c
 8012e86:	f7ff fd5c 	bl	8012942 <b64>
      DEVCFG_MEMCPY(DevCfg.appEui, appeui, sizeof appeui) && (DevCfg.changed.lrw = true);
 8012e8a:	4e69      	ldr	r6, [pc, #420]	; (8013030 <PBDecodeMsg+0x3ec>)
 8012e8c:	e7d6      	b.n	8012e3c <PBDecodeMsg+0x1f8>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_KEY && val_rawbytes == 16) {
 8012e8e:	2b42      	cmp	r3, #66	; 0x42
 8012e90:	d11f      	bne.n	8012ed2 <PBDecodeMsg+0x28e>
 8012e92:	2c10      	cmp	r4, #16
 8012e94:	d000      	beq.n	8012e98 <PBDecodeMsg+0x254>
 8012e96:	e2ae      	b.n	80133f6 <PBDecodeMsg+0x7b2>
      PrintBuffer("NFC <RX lora_app_key ", msg + pos, val_rawbytes, "\n");
 8012e98:	9b01      	ldr	r3, [sp, #4]
 8012e9a:	9a00      	ldr	r2, [sp, #0]
 8012e9c:	4865      	ldr	r0, [pc, #404]	; (8013034 <PBDecodeMsg+0x3f0>)
 8012e9e:	189d      	adds	r5, r3, r2
 8012ea0:	0029      	movs	r1, r5
 8012ea2:	0022      	movs	r2, r4
 8012ea4:	4b5e      	ldr	r3, [pc, #376]	; (8013020 <PBDecodeMsg+0x3dc>)
 8012ea6:	f7ff fd11 	bl	80128cc <PrintBuffer>
      DEVCFG_MEMCPY(DevCfg.appKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012eaa:	4f63      	ldr	r7, [pc, #396]	; (8013038 <PBDecodeMsg+0x3f4>)
      DEVCFG_MEMCPY(DevCfg.appSKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012eac:	0022      	movs	r2, r4
 8012eae:	0029      	movs	r1, r5
 8012eb0:	0038      	movs	r0, r7
 8012eb2:	f003 f83f 	bl	8015f34 <memcmp>
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	d0d2      	beq.n	8012e60 <PBDecodeMsg+0x21c>
 8012eba:	0022      	movs	r2, r4
 8012ebc:	0029      	movs	r1, r5
 8012ebe:	0038      	movs	r0, r7
 8012ec0:	4e55      	ldr	r6, [pc, #340]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012ec2:	f003 f845 	bl	8015f50 <memcpy>
 8012ec6:	2303      	movs	r3, #3
 8012ec8:	7832      	ldrb	r2, [r6, #0]
 8012eca:	439a      	bics	r2, r3
 8012ecc:	4313      	orrs	r3, r2
 8012ece:	7033      	strb	r3, [r6, #0]
 8012ed0:	e7c6      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_ADDR) {
 8012ed2:	2b4d      	cmp	r3, #77	; 0x4d
 8012ed4:	d110      	bne.n	8012ef8 <PBDecodeMsg+0x2b4>
      DBG_PRINTF("NFC <RX lora_dev_addr 0x%08x\n", val_int);
 8012ed6:	9a08      	ldr	r2, [sp, #32]
 8012ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eda:	4958      	ldr	r1, [pc, #352]	; (801303c <PBDecodeMsg+0x3f8>)
 8012edc:	2000      	movs	r0, #0
 8012ede:	f7f8 fffe 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.devAddr, val_int) && (DevCfg.changed.lrw = true);
 8012ee2:	4a4d      	ldr	r2, [pc, #308]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012ee4:	9b08      	ldr	r3, [sp, #32]
 8012ee6:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8012ee8:	2000      	movs	r0, #0
 8012eea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012eec:	429d      	cmp	r5, r3
 8012eee:	d101      	bne.n	8012ef4 <PBDecodeMsg+0x2b0>
 8012ef0:	4288      	cmp	r0, r1
 8012ef2:	d0b5      	beq.n	8012e60 <PBDecodeMsg+0x21c>
 8012ef4:	6293      	str	r3, [r2, #40]	; 0x28
 8012ef6:	e760      	b.n	8012dba <PBDecodeMsg+0x176>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_NET_SESSION_KEY && val_rawbytes == 16) {
 8012ef8:	2b52      	cmp	r3, #82	; 0x52
 8012efa:	d10d      	bne.n	8012f18 <PBDecodeMsg+0x2d4>
 8012efc:	2c10      	cmp	r4, #16
 8012efe:	d000      	beq.n	8012f02 <PBDecodeMsg+0x2be>
 8012f00:	e279      	b.n	80133f6 <PBDecodeMsg+0x7b2>
      PrintBuffer("NFC <RX lora_mac_net_session_key ", msg + pos, val_rawbytes, "\n");
 8012f02:	9b01      	ldr	r3, [sp, #4]
 8012f04:	9a00      	ldr	r2, [sp, #0]
 8012f06:	484e      	ldr	r0, [pc, #312]	; (8013040 <PBDecodeMsg+0x3fc>)
 8012f08:	189d      	adds	r5, r3, r2
 8012f0a:	0029      	movs	r1, r5
 8012f0c:	0022      	movs	r2, r4
 8012f0e:	4b44      	ldr	r3, [pc, #272]	; (8013020 <PBDecodeMsg+0x3dc>)
 8012f10:	f7ff fcdc 	bl	80128cc <PrintBuffer>
      DEVCFG_MEMCPY(DevCfg.nwkSKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012f14:	4f4b      	ldr	r7, [pc, #300]	; (8013044 <PBDecodeMsg+0x400>)
 8012f16:	e7c9      	b.n	8012eac <PBDecodeMsg+0x268>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_APP_SESSION_KEY && val_rawbytes == 16) {
 8012f18:	2b5a      	cmp	r3, #90	; 0x5a
 8012f1a:	d10d      	bne.n	8012f38 <PBDecodeMsg+0x2f4>
 8012f1c:	2c10      	cmp	r4, #16
 8012f1e:	d000      	beq.n	8012f22 <PBDecodeMsg+0x2de>
 8012f20:	e269      	b.n	80133f6 <PBDecodeMsg+0x7b2>
      PrintBuffer("NFC <RX lora_mac_app_session_key ", msg + pos, val_rawbytes, "\n");
 8012f22:	9b01      	ldr	r3, [sp, #4]
 8012f24:	9a00      	ldr	r2, [sp, #0]
 8012f26:	4848      	ldr	r0, [pc, #288]	; (8013048 <PBDecodeMsg+0x404>)
 8012f28:	189d      	adds	r5, r3, r2
 8012f2a:	0029      	movs	r1, r5
 8012f2c:	0022      	movs	r2, r4
 8012f2e:	4b3c      	ldr	r3, [pc, #240]	; (8013020 <PBDecodeMsg+0x3dc>)
 8012f30:	f7ff fccc 	bl	80128cc <PrintBuffer>
      DEVCFG_MEMCPY(DevCfg.appSKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012f34:	4f45      	ldr	r7, [pc, #276]	; (801304c <PBDecodeMsg+0x408>)
 8012f36:	e7b9      	b.n	8012eac <PBDecodeMsg+0x268>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_JOINED) {
 8012f38:	2b60      	cmp	r3, #96	; 0x60
 8012f3a:	d114      	bne.n	8012f66 <PBDecodeMsg+0x322>
      DBG_PRINTF("NFC <RX lora_joined 0x%02x\n", val_int);
 8012f3c:	9a08      	ldr	r2, [sp, #32]
 8012f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f40:	2000      	movs	r0, #0
 8012f42:	4943      	ldr	r1, [pc, #268]	; (8013050 <PBDecodeMsg+0x40c>)
 8012f44:	f7f8 ffcb 	bl	800bede <SEGGER_RTT_printf>
      if(!val_int) {
 8012f48:	9b08      	ldr	r3, [sp, #32]
 8012f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f4c:	4313      	orrs	r3, r2
 8012f4e:	d187      	bne.n	8012e60 <PBDecodeMsg+0x21c>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8012f50:	2201      	movs	r2, #1
 8012f52:	a906      	add	r1, sp, #24
 8012f54:	770a      	strb	r2, [r1, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012f56:	000a      	movs	r2, r1
 8012f58:	2120      	movs	r1, #32
        LoRaMacMibSetRequestConfirm(&mibReq);
 8012f5a:	a80d      	add	r0, sp, #52	; 0x34
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012f5c:	1852      	adds	r2, r2, r1
 8012f5e:	7013      	strb	r3, [r2, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8012f60:	f7f4 faac 	bl	80074bc <LoRaMacMibSetRequestConfirm>
 8012f64:	e77c      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_FP) {
 8012f66:	2b68      	cmp	r3, #104	; 0x68
 8012f68:	d127      	bne.n	8012fba <PBDecodeMsg+0x376>
      DBG_PRINTF("NFC <RX lora_fp 0x%02x\n", val_int);
 8012f6a:	9a08      	ldr	r2, [sp, #32]
 8012f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f6e:	2000      	movs	r0, #0
 8012f70:	4938      	ldr	r1, [pc, #224]	; (8013054 <PBDecodeMsg+0x410>)
 8012f72:	f7f8 ffb4 	bl	800bede <SEGGER_RTT_printf>
      switch(val_int) {
 8012f76:	9a08      	ldr	r2, [sp, #32]
 8012f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7a:	2a01      	cmp	r2, #1
 8012f7c:	d10b      	bne.n	8012f96 <PBDecodeMsg+0x352>
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d116      	bne.n	8012fb0 <PBDecodeMsg+0x36c>
      case PBENUM_FP_EU868: DEVCFG_SET(DevCfg.region, LORAMAC_REGION_EU868) && (DevCfg.changed.lrw = true); break;
 8012f82:	4a25      	ldr	r2, [pc, #148]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012f84:	0013      	movs	r3, r2
 8012f86:	334c      	adds	r3, #76	; 0x4c
 8012f88:	7819      	ldrb	r1, [r3, #0]
 8012f8a:	2905      	cmp	r1, #5
 8012f8c:	d100      	bne.n	8012f90 <PBDecodeMsg+0x34c>
 8012f8e:	e767      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8012f90:	2105      	movs	r1, #5
      case PBENUM_FP_US915: DEVCFG_SET(DevCfg.region, LORAMAC_REGION_US915) && (DevCfg.changed.lrw = true); break;
 8012f92:	7019      	strb	r1, [r3, #0]
 8012f94:	e711      	b.n	8012dba <PBDecodeMsg+0x176>
      switch(val_int) {
 8012f96:	2a02      	cmp	r2, #2
 8012f98:	d10a      	bne.n	8012fb0 <PBDecodeMsg+0x36c>
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d108      	bne.n	8012fb0 <PBDecodeMsg+0x36c>
      case PBENUM_FP_US915: DEVCFG_SET(DevCfg.region, LORAMAC_REGION_US915) && (DevCfg.changed.lrw = true); break;
 8012f9e:	4a1e      	ldr	r2, [pc, #120]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012fa0:	0013      	movs	r3, r2
 8012fa2:	334c      	adds	r3, #76	; 0x4c
 8012fa4:	7819      	ldrb	r1, [r3, #0]
 8012fa6:	2908      	cmp	r1, #8
 8012fa8:	d100      	bne.n	8012fac <PBDecodeMsg+0x368>
 8012faa:	e759      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8012fac:	2108      	movs	r1, #8
 8012fae:	e7f0      	b.n	8012f92 <PBDecodeMsg+0x34e>
      default: DEBUG_MSG("NFC Bad Value!\n");
 8012fb0:	4929      	ldr	r1, [pc, #164]	; (8013058 <PBDecodeMsg+0x414>)
 8012fb2:	2000      	movs	r0, #0
 8012fb4:	f7f8 fdc0 	bl	800bb38 <SEGGER_RTT_WriteString>
 8012fb8:	e752      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_PORT) {
 8012fba:	2b70      	cmp	r3, #112	; 0x70
 8012fbc:	d115      	bne.n	8012fea <PBDecodeMsg+0x3a6>
      DBG_PRINTF("NFC <RX lora_port 0x%02x\n", val_int);
 8012fbe:	9a08      	ldr	r2, [sp, #32]
 8012fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fc2:	4926      	ldr	r1, [pc, #152]	; (801305c <PBDecodeMsg+0x418>)
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	f7f8 ff8a 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.txPort, val_int) && (DevCfg.changed.lrw = true);
 8012fca:	4a13      	ldr	r2, [pc, #76]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012fcc:	9b08      	ldr	r3, [sp, #32]
 8012fce:	0010      	movs	r0, r2
 8012fd0:	304d      	adds	r0, #77	; 0x4d
 8012fd2:	7805      	ldrb	r5, [r0, #0]
 8012fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012fd6:	2000      	movs	r0, #0
 8012fd8:	429d      	cmp	r5, r3
 8012fda:	d102      	bne.n	8012fe2 <PBDecodeMsg+0x39e>
 8012fdc:	4288      	cmp	r0, r1
 8012fde:	d100      	bne.n	8012fe2 <PBDecodeMsg+0x39e>
 8012fe0:	e73e      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8012fe2:	0011      	movs	r1, r2
 8012fe4:	314d      	adds	r1, #77	; 0x4d
      DEVCFG_SET(DevCfg.bw, val_int) && (DevCfg.changed.lrw = true);
 8012fe6:	700b      	strb	r3, [r1, #0]
 8012fe8:	e6e7      	b.n	8012dba <PBDecodeMsg+0x176>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_TXP) {
 8012fea:	2b78      	cmp	r3, #120	; 0x78
 8012fec:	d13a      	bne.n	8013064 <PBDecodeMsg+0x420>
      DBG_PRINTF("NFC <RX lora_txp 0x%02x\n", val_int);
 8012fee:	9a08      	ldr	r2, [sp, #32]
 8012ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ff2:	491b      	ldr	r1, [pc, #108]	; (8013060 <PBDecodeMsg+0x41c>)
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	f7f8 ff72 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.txPower, val_int) && (DevCfg.changed.lrw = true);
 8012ffa:	4a07      	ldr	r2, [pc, #28]	; (8013018 <PBDecodeMsg+0x3d4>)
 8012ffc:	9b08      	ldr	r3, [sp, #32]
 8012ffe:	0010      	movs	r0, r2
 8013000:	304e      	adds	r0, #78	; 0x4e
 8013002:	7805      	ldrb	r5, [r0, #0]
 8013004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013006:	2000      	movs	r0, #0
 8013008:	429d      	cmp	r5, r3
 801300a:	d102      	bne.n	8013012 <PBDecodeMsg+0x3ce>
 801300c:	4288      	cmp	r0, r1
 801300e:	d100      	bne.n	8013012 <PBDecodeMsg+0x3ce>
 8013010:	e726      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8013012:	0011      	movs	r1, r2
 8013014:	314e      	adds	r1, #78	; 0x4e
 8013016:	e7e6      	b.n	8012fe6 <PBDecodeMsg+0x3a2>
 8013018:	200000e0 	.word	0x200000e0
 801301c:	0801a3f3 	.word	0x0801a3f3
 8013020:	08018fe6 	.word	0x08018fe6
 8013024:	0801a40d 	.word	0x0801a40d
 8013028:	200000e5 	.word	0x200000e5
 801302c:	0801a423 	.word	0x0801a423
 8013030:	200000ed 	.word	0x200000ed
 8013034:	0801a439 	.word	0x0801a439
 8013038:	200000f5 	.word	0x200000f5
 801303c:	0801a44f 	.word	0x0801a44f
 8013040:	0801a46d 	.word	0x0801a46d
 8013044:	2000010c 	.word	0x2000010c
 8013048:	0801a48f 	.word	0x0801a48f
 801304c:	2000011c 	.word	0x2000011c
 8013050:	0801a4b1 	.word	0x0801a4b1
 8013054:	0801a4cd 	.word	0x0801a4cd
 8013058:	0801a4e5 	.word	0x0801a4e5
 801305c:	0801a4f5 	.word	0x0801a4f5
 8013060:	0801a50f 	.word	0x0801a50f
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_SF) {
 8013064:	2b80      	cmp	r3, #128	; 0x80
 8013066:	d114      	bne.n	8013092 <PBDecodeMsg+0x44e>
      DBG_PRINTF("NFC <RX lora_sf 0x%02x\n", val_int);
 8013068:	9a08      	ldr	r2, [sp, #32]
 801306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801306c:	49ba      	ldr	r1, [pc, #744]	; (8013358 <PBDecodeMsg+0x714>)
 801306e:	2000      	movs	r0, #0
 8013070:	f7f8 ff35 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sf, val_int) && (DevCfg.changed.lrw = true);
 8013074:	4ab9      	ldr	r2, [pc, #740]	; (801335c <PBDecodeMsg+0x718>)
 8013076:	9b08      	ldr	r3, [sp, #32]
 8013078:	0010      	movs	r0, r2
 801307a:	304f      	adds	r0, #79	; 0x4f
 801307c:	7805      	ldrb	r5, [r0, #0]
 801307e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013080:	2000      	movs	r0, #0
 8013082:	429d      	cmp	r5, r3
 8013084:	d102      	bne.n	801308c <PBDecodeMsg+0x448>
 8013086:	4288      	cmp	r0, r1
 8013088:	d100      	bne.n	801308c <PBDecodeMsg+0x448>
 801308a:	e6e9      	b.n	8012e60 <PBDecodeMsg+0x21c>
 801308c:	0011      	movs	r1, r2
 801308e:	314f      	adds	r1, #79	; 0x4f
 8013090:	e7a9      	b.n	8012fe6 <PBDecodeMsg+0x3a2>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_BW) {
 8013092:	2b88      	cmp	r3, #136	; 0x88
 8013094:	d114      	bne.n	80130c0 <PBDecodeMsg+0x47c>
      DBG_PRINTF("NFC <RX lora_bw 0x%02x\n", val_int);
 8013096:	9a08      	ldr	r2, [sp, #32]
 8013098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801309a:	49b1      	ldr	r1, [pc, #708]	; (8013360 <PBDecodeMsg+0x71c>)
 801309c:	2000      	movs	r0, #0
 801309e:	f7f8 ff1e 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.bw, val_int) && (DevCfg.changed.lrw = true);
 80130a2:	4aae      	ldr	r2, [pc, #696]	; (801335c <PBDecodeMsg+0x718>)
 80130a4:	9b08      	ldr	r3, [sp, #32]
 80130a6:	0010      	movs	r0, r2
 80130a8:	3050      	adds	r0, #80	; 0x50
 80130aa:	7805      	ldrb	r5, [r0, #0]
 80130ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130ae:	2000      	movs	r0, #0
 80130b0:	429d      	cmp	r5, r3
 80130b2:	d102      	bne.n	80130ba <PBDecodeMsg+0x476>
 80130b4:	4288      	cmp	r0, r1
 80130b6:	d100      	bne.n	80130ba <PBDecodeMsg+0x476>
 80130b8:	e6d2      	b.n	8012e60 <PBDecodeMsg+0x21c>
 80130ba:	0011      	movs	r1, r2
 80130bc:	3150      	adds	r1, #80	; 0x50
 80130be:	e792      	b.n	8012fe6 <PBDecodeMsg+0x3a2>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_CONFIRMED_MESSAGES) {
 80130c0:	2b90      	cmp	r3, #144	; 0x90
 80130c2:	d114      	bne.n	80130ee <PBDecodeMsg+0x4aa>
      DBG_PRINTF("NFC <RX lora_confirmed_messages 0x%02x\n", val_int);
 80130c4:	9a08      	ldr	r2, [sp, #32]
 80130c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130c8:	49a6      	ldr	r1, [pc, #664]	; (8013364 <PBDecodeMsg+0x720>)
 80130ca:	2000      	movs	r0, #0
 80130cc:	f7f8 ff07 	bl	800bede <SEGGER_RTT_printf>
      val_int = !!val_int;
 80130d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130d2:	9b08      	ldr	r3, [sp, #32]
 80130d4:	4313      	orrs	r3, r2
 80130d6:	1e5a      	subs	r2, r3, #1
 80130d8:	4193      	sbcs	r3, r2
      DEVCFG_SET(DevCfg.confirmedMsgs, val_int) && (DevCfg.changed.lrw = true);
 80130da:	4aa0      	ldr	r2, [pc, #640]	; (801335c <PBDecodeMsg+0x718>)
      val_int = !!val_int;
 80130dc:	b2d8      	uxtb	r0, r3
      DEVCFG_SET(DevCfg.confirmedMsgs, val_int) && (DevCfg.changed.lrw = true);
 80130de:	0011      	movs	r1, r2
 80130e0:	3151      	adds	r1, #81	; 0x51
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 80130e2:	780d      	ldrb	r5, [r1, #0]
 80130e4:	42ab      	cmp	r3, r5
 80130e6:	d100      	bne.n	80130ea <PBDecodeMsg+0x4a6>
 80130e8:	e6ba      	b.n	8012e60 <PBDecodeMsg+0x21c>
 80130ea:	7008      	strb	r0, [r1, #0]
 80130ec:	e665      	b.n	8012dba <PBDecodeMsg+0x176>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_ADAPTIVE_DATA_RATE) {
 80130ee:	2b98      	cmp	r3, #152	; 0x98
 80130f0:	d10f      	bne.n	8013112 <PBDecodeMsg+0x4ce>
      DBG_PRINTF("NFC <RX lora_adaptive_data_rate 0x%02x\n", val_int);
 80130f2:	9a08      	ldr	r2, [sp, #32]
 80130f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130f6:	499c      	ldr	r1, [pc, #624]	; (8013368 <PBDecodeMsg+0x724>)
 80130f8:	2000      	movs	r0, #0
 80130fa:	f7f8 fef0 	bl	800bede <SEGGER_RTT_printf>
      val_int = !!val_int;
 80130fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013100:	9b08      	ldr	r3, [sp, #32]
 8013102:	4313      	orrs	r3, r2
 8013104:	1e5a      	subs	r2, r3, #1
 8013106:	4193      	sbcs	r3, r2
      DEVCFG_SET(DevCfg.adaptiveDatarate, val_int) && (DevCfg.changed.lrw = true);
 8013108:	4a94      	ldr	r2, [pc, #592]	; (801335c <PBDecodeMsg+0x718>)
      val_int = !!val_int;
 801310a:	b2d8      	uxtb	r0, r3
      DEVCFG_SET(DevCfg.adaptiveDatarate, val_int) && (DevCfg.changed.lrw = true);
 801310c:	0011      	movs	r1, r2
 801310e:	3152      	adds	r1, #82	; 0x52
 8013110:	e7e7      	b.n	80130e2 <PBDecodeMsg+0x49e>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_RESPECT_DUTY_CYCLE) {
 8013112:	2ba0      	cmp	r3, #160	; 0xa0
 8013114:	d10f      	bne.n	8013136 <PBDecodeMsg+0x4f2>
      DBG_PRINTF("NFC <RX lora_respect_duty_cycle 0x%02x\n", val_int);
 8013116:	9a08      	ldr	r2, [sp, #32]
 8013118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801311a:	4994      	ldr	r1, [pc, #592]	; (801336c <PBDecodeMsg+0x728>)
 801311c:	2000      	movs	r0, #0
 801311e:	f7f8 fede 	bl	800bede <SEGGER_RTT_printf>
      val_int = !!val_int;
 8013122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013124:	9b08      	ldr	r3, [sp, #32]
 8013126:	4313      	orrs	r3, r2
 8013128:	1e5a      	subs	r2, r3, #1
 801312a:	4193      	sbcs	r3, r2
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 801312c:	4a8b      	ldr	r2, [pc, #556]	; (801335c <PBDecodeMsg+0x718>)
      val_int = !!val_int;
 801312e:	b2d8      	uxtb	r0, r3
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 8013130:	0011      	movs	r1, r2
 8013132:	3153      	adds	r1, #83	; 0x53
 8013134:	e7d5      	b.n	80130e2 <PBDecodeMsg+0x49e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TIMEBASE) {
 8013136:	2ba8      	cmp	r3, #168	; 0xa8
 8013138:	d116      	bne.n	8013168 <PBDecodeMsg+0x524>
      DBG_PRINTF("NFC <RX sensor_timebase 0x%02x\n", val_int);
 801313a:	9a08      	ldr	r2, [sp, #32]
 801313c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801313e:	498c      	ldr	r1, [pc, #560]	; (8013370 <PBDecodeMsg+0x72c>)
 8013140:	2000      	movs	r0, #0
 8013142:	f7f8 fecc 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sendInterval, val_int) && (DevCfg.changed.resched = true);
 8013146:	4985      	ldr	r1, [pc, #532]	; (801335c <PBDecodeMsg+0x718>)
 8013148:	9b08      	ldr	r3, [sp, #32]
 801314a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801314c:	2000      	movs	r0, #0
 801314e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013150:	429d      	cmp	r5, r3
 8013152:	d102      	bne.n	801315a <PBDecodeMsg+0x516>
 8013154:	4290      	cmp	r0, r2
 8013156:	d100      	bne.n	801315a <PBDecodeMsg+0x516>
 8013158:	e682      	b.n	8012e60 <PBDecodeMsg+0x21c>
 801315a:	654b      	str	r3, [r1, #84]	; 0x54
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 801315c:	2321      	movs	r3, #33	; 0x21
 801315e:	780a      	ldrb	r2, [r1, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 8013160:	439a      	bics	r2, r3
 8013162:	4313      	orrs	r3, r2
 8013164:	700b      	strb	r3, [r1, #0]
 8013166:	e67b      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_TRIGGER) {
 8013168:	2bb0      	cmp	r3, #176	; 0xb0
 801316a:	d115      	bne.n	8013198 <PBDecodeMsg+0x554>
      DBG_PRINTF("NFC <RX sensor_send_trigger 0x%02x\n", val_int);
 801316c:	9a08      	ldr	r2, [sp, #32]
 801316e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013170:	4980      	ldr	r1, [pc, #512]	; (8013374 <PBDecodeMsg+0x730>)
 8013172:	2000      	movs	r0, #0
 8013174:	f7f8 feb3 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sendTrigger, val_int) && (DevCfg.changed.resched = true);
 8013178:	4978      	ldr	r1, [pc, #480]	; (801335c <PBDecodeMsg+0x718>)
 801317a:	9b08      	ldr	r3, [sp, #32]
 801317c:	0008      	movs	r0, r1
 801317e:	3058      	adds	r0, #88	; 0x58
 8013180:	7805      	ldrb	r5, [r0, #0]
 8013182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013184:	2000      	movs	r0, #0
 8013186:	429d      	cmp	r5, r3
 8013188:	d102      	bne.n	8013190 <PBDecodeMsg+0x54c>
 801318a:	4290      	cmp	r0, r2
 801318c:	d100      	bne.n	8013190 <PBDecodeMsg+0x54c>
 801318e:	e667      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8013190:	000a      	movs	r2, r1
 8013192:	3258      	adds	r2, #88	; 0x58
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 8013194:	7013      	strb	r3, [r2, #0]
 8013196:	e7e1      	b.n	801315c <PBDecodeMsg+0x518>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_STRATEGY) {
 8013198:	2bb8      	cmp	r3, #184	; 0xb8
 801319a:	d114      	bne.n	80131c6 <PBDecodeMsg+0x582>
      DBG_PRINTF("NFC <RX sensor_send_strategy 0x%02x\n", val_int);
 801319c:	9a08      	ldr	r2, [sp, #32]
 801319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131a0:	4975      	ldr	r1, [pc, #468]	; (8013378 <PBDecodeMsg+0x734>)
 80131a2:	2000      	movs	r0, #0
 80131a4:	f7f8 fe9b 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 80131a8:	496c      	ldr	r1, [pc, #432]	; (801335c <PBDecodeMsg+0x718>)
 80131aa:	9b08      	ldr	r3, [sp, #32]
 80131ac:	0008      	movs	r0, r1
 80131ae:	3059      	adds	r0, #89	; 0x59
 80131b0:	7805      	ldrb	r5, [r0, #0]
 80131b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131b4:	2000      	movs	r0, #0
 80131b6:	429d      	cmp	r5, r3
 80131b8:	d102      	bne.n	80131c0 <PBDecodeMsg+0x57c>
 80131ba:	4290      	cmp	r0, r2
 80131bc:	d100      	bne.n	80131c0 <PBDecodeMsg+0x57c>
 80131be:	e64f      	b.n	8012e60 <PBDecodeMsg+0x21c>
 80131c0:	000a      	movs	r2, r1
 80131c2:	3259      	adds	r2, #89	; 0x59
 80131c4:	e7e6      	b.n	8013194 <PBDecodeMsg+0x550>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD) {
 80131c6:	2bc0      	cmp	r3, #192	; 0xc0
 80131c8:	d122      	bne.n	8013210 <PBDecodeMsg+0x5cc>
      DBG_PRINTF("NFC <RX sensor_humidity_upper_threshold 0x%02x\n", val_int);
 80131ca:	9a08      	ldr	r2, [sp, #32]
 80131cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ce:	496b      	ldr	r1, [pc, #428]	; (801337c <PBDecodeMsg+0x738>)
 80131d0:	2000      	movs	r0, #0
 80131d2:	f7f8 fe84 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.hdc2080_threshold, val_int) && (DevCfg.changed.hdc2080 = true);
 80131d6:	4961      	ldr	r1, [pc, #388]	; (801335c <PBDecodeMsg+0x718>)
 80131d8:	9b08      	ldr	r3, [sp, #32]
 80131da:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80131dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131de:	17d5      	asrs	r5, r2, #31
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d101      	bne.n	80131e8 <PBDecodeMsg+0x5a4>
 80131e4:	4285      	cmp	r5, r0
 80131e6:	d005      	beq.n	80131f4 <PBDecodeMsg+0x5b0>
 80131e8:	65cb      	str	r3, [r1, #92]	; 0x5c
 80131ea:	2309      	movs	r3, #9
 80131ec:	780a      	ldrb	r2, [r1, #0]
 80131ee:	439a      	bics	r2, r3
 80131f0:	4313      	orrs	r3, r2
 80131f2:	700b      	strb	r3, [r1, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_HIGH) && (DevCfg.changed.hdc2080 = true);
 80131f4:	4959      	ldr	r1, [pc, #356]	; (801335c <PBDecodeMsg+0x718>)
      use_hdc2080 = true;
 80131f6:	2001      	movs	r0, #1
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_HIGH) && (DevCfg.changed.hdc2080 = true);
 80131f8:	000b      	movs	r3, r1
 80131fa:	335a      	adds	r3, #90	; 0x5a
 80131fc:	781a      	ldrb	r2, [r3, #0]
      use_hdc2080 = true;
 80131fe:	9003      	str	r0, [sp, #12]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_HIGH) && (DevCfg.changed.hdc2080 = true);
 8013200:	2a03      	cmp	r2, #3
 8013202:	d100      	bne.n	8013206 <PBDecodeMsg+0x5c2>
 8013204:	e62c      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8013206:	2203      	movs	r2, #3
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 8013208:	701a      	strb	r2, [r3, #0]
 801320a:	2309      	movs	r3, #9
 801320c:	780a      	ldrb	r2, [r1, #0]
 801320e:	e7a7      	b.n	8013160 <PBDecodeMsg+0x51c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD) {
 8013210:	2bc8      	cmp	r3, #200	; 0xc8
 8013212:	d11f      	bne.n	8013254 <PBDecodeMsg+0x610>
      DBG_PRINTF("NFC <RX sensor_humidity_lower_threshold 0x%02x\n", val_int);
 8013214:	9a08      	ldr	r2, [sp, #32]
 8013216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013218:	4959      	ldr	r1, [pc, #356]	; (8013380 <PBDecodeMsg+0x73c>)
 801321a:	2000      	movs	r0, #0
 801321c:	f7f8 fe5f 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.hdc2080_threshold, val_int) && (DevCfg.changed.hdc2080 = true);
 8013220:	494e      	ldr	r1, [pc, #312]	; (801335c <PBDecodeMsg+0x718>)
 8013222:	9b08      	ldr	r3, [sp, #32]
 8013224:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8013226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013228:	17d5      	asrs	r5, r2, #31
 801322a:	429a      	cmp	r2, r3
 801322c:	d101      	bne.n	8013232 <PBDecodeMsg+0x5ee>
 801322e:	4285      	cmp	r5, r0
 8013230:	d005      	beq.n	801323e <PBDecodeMsg+0x5fa>
 8013232:	65cb      	str	r3, [r1, #92]	; 0x5c
 8013234:	2309      	movs	r3, #9
 8013236:	780a      	ldrb	r2, [r1, #0]
 8013238:	439a      	bics	r2, r3
 801323a:	4313      	orrs	r3, r2
 801323c:	700b      	strb	r3, [r1, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 801323e:	4947      	ldr	r1, [pc, #284]	; (801335c <PBDecodeMsg+0x718>)
      use_hdc2080 = true;
 8013240:	2001      	movs	r0, #1
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 8013242:	000b      	movs	r3, r1
 8013244:	335a      	adds	r3, #90	; 0x5a
 8013246:	781a      	ldrb	r2, [r3, #0]
      use_hdc2080 = true;
 8013248:	9003      	str	r0, [sp, #12]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 801324a:	2a02      	cmp	r2, #2
 801324c:	d100      	bne.n	8013250 <PBDecodeMsg+0x60c>
 801324e:	e607      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8013250:	2202      	movs	r2, #2
 8013252:	e7d9      	b.n	8013208 <PBDecodeMsg+0x5c4>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD) {
 8013254:	2bd0      	cmp	r3, #208	; 0xd0
 8013256:	d127      	bne.n	80132a8 <PBDecodeMsg+0x664>
      DBG_PRINTF("NFC <RX sensor_temperature_upper_threshold 0x%02x\n", val_int);
 8013258:	9a08      	ldr	r2, [sp, #32]
 801325a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801325c:	4949      	ldr	r1, [pc, #292]	; (8013384 <PBDecodeMsg+0x740>)
 801325e:	2000      	movs	r0, #0
 8013260:	f7f8 fe3d 	bl	800bede <SEGGER_RTT_printf>
      uint64_t v = PBDecodeSInt(val_int);
 8013264:	9808      	ldr	r0, [sp, #32]
 8013266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013268:	f7ff fce1 	bl	8012c2e <PBDecodeSInt>
      DEVCFG_SET(DevCfg.hdc2080_threshold, v) && (DevCfg.changed.hdc2080 = true);
 801326c:	4b3b      	ldr	r3, [pc, #236]	; (801335c <PBDecodeMsg+0x718>)
 801326e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013270:	17d5      	asrs	r5, r2, #31
 8013272:	4282      	cmp	r2, r0
 8013274:	d101      	bne.n	801327a <PBDecodeMsg+0x636>
 8013276:	428d      	cmp	r5, r1
 8013278:	d005      	beq.n	8013286 <PBDecodeMsg+0x642>
 801327a:	2209      	movs	r2, #9
 801327c:	7819      	ldrb	r1, [r3, #0]
 801327e:	65d8      	str	r0, [r3, #92]	; 0x5c
 8013280:	4391      	bics	r1, r2
 8013282:	430a      	orrs	r2, r1
 8013284:	701a      	strb	r2, [r3, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_HIGH) && (DevCfg.changed.hdc2080 = true);
 8013286:	4a35      	ldr	r2, [pc, #212]	; (801335c <PBDecodeMsg+0x718>)
 8013288:	2001      	movs	r0, #1
 801328a:	0013      	movs	r3, r2
 801328c:	335a      	adds	r3, #90	; 0x5a
 801328e:	7819      	ldrb	r1, [r3, #0]
      use_hdc2080 = true;
 8013290:	9103      	str	r1, [sp, #12]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_HIGH) && (DevCfg.changed.hdc2080 = true);
 8013292:	4281      	cmp	r1, r0
 8013294:	d100      	bne.n	8013298 <PBDecodeMsg+0x654>
 8013296:	e5e3      	b.n	8012e60 <PBDecodeMsg+0x21c>
 8013298:	7018      	strb	r0, [r3, #0]
 801329a:	2309      	movs	r3, #9
 801329c:	7811      	ldrb	r1, [r2, #0]
      use_hdc2080 = true;
 801329e:	9003      	str	r0, [sp, #12]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_HIGH) && (DevCfg.changed.hdc2080 = true);
 80132a0:	4399      	bics	r1, r3
 80132a2:	430b      	orrs	r3, r1
 80132a4:	7013      	strb	r3, [r2, #0]
 80132a6:	e5db      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD) {
 80132a8:	2bd8      	cmp	r3, #216	; 0xd8
 80132aa:	d121      	bne.n	80132f0 <PBDecodeMsg+0x6ac>
      DBG_PRINTF("NFC <RX sensor_temperature_lowe_thresholdr 0x%02x\n", val_int);
 80132ac:	9a08      	ldr	r2, [sp, #32]
 80132ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132b0:	4935      	ldr	r1, [pc, #212]	; (8013388 <PBDecodeMsg+0x744>)
 80132b2:	2000      	movs	r0, #0
 80132b4:	f7f8 fe13 	bl	800bede <SEGGER_RTT_printf>
      uint64_t v = PBDecodeSInt(val_int);
 80132b8:	9808      	ldr	r0, [sp, #32]
 80132ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132bc:	f7ff fcb7 	bl	8012c2e <PBDecodeSInt>
      DEVCFG_SET(DevCfg.hdc2080_threshold, v) && (DevCfg.changed.hdc2080 = true);
 80132c0:	4b26      	ldr	r3, [pc, #152]	; (801335c <PBDecodeMsg+0x718>)
 80132c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80132c4:	17d5      	asrs	r5, r2, #31
 80132c6:	4282      	cmp	r2, r0
 80132c8:	d101      	bne.n	80132ce <PBDecodeMsg+0x68a>
 80132ca:	428d      	cmp	r5, r1
 80132cc:	d005      	beq.n	80132da <PBDecodeMsg+0x696>
 80132ce:	2209      	movs	r2, #9
 80132d0:	7819      	ldrb	r1, [r3, #0]
 80132d2:	65d8      	str	r0, [r3, #92]	; 0x5c
 80132d4:	4391      	bics	r1, r2
 80132d6:	430a      	orrs	r2, r1
 80132d8:	701a      	strb	r2, [r3, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 80132da:	4920      	ldr	r1, [pc, #128]	; (801335c <PBDecodeMsg+0x718>)
      use_hdc2080 = true;
 80132dc:	2001      	movs	r0, #1
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 80132de:	000b      	movs	r3, r1
 80132e0:	335a      	adds	r3, #90	; 0x5a
 80132e2:	781a      	ldrb	r2, [r3, #0]
      use_hdc2080 = true;
 80132e4:	9003      	str	r0, [sp, #12]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 80132e6:	2a00      	cmp	r2, #0
 80132e8:	d100      	bne.n	80132ec <PBDecodeMsg+0x6a8>
 80132ea:	e5b9      	b.n	8012e60 <PBDecodeMsg+0x21c>
 80132ec:	2200      	movs	r2, #0
 80132ee:	e78b      	b.n	8013208 <PBDecodeMsg+0x5c4>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD) {
 80132f0:	2be0      	cmp	r3, #224	; 0xe0
 80132f2:	d11b      	bne.n	801332c <PBDecodeMsg+0x6e8>
      DBG_PRINTF("NFC <RX sensor_luminance_upper_threshold 0x%02x\n", val_int);
 80132f4:	9a08      	ldr	r2, [sp, #32]
 80132f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f8:	4924      	ldr	r1, [pc, #144]	; (801338c <PBDecodeMsg+0x748>)
 80132fa:	2000      	movs	r0, #0
 80132fc:	f7f8 fdef 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sfh7776_threshold_upper, val_int) && (DevCfg.changed.sfh7776 = true);
 8013300:	4916      	ldr	r1, [pc, #88]	; (801335c <PBDecodeMsg+0x718>)
 8013302:	9b08      	ldr	r3, [sp, #32]
 8013304:	0008      	movs	r0, r1
 8013306:	3066      	adds	r0, #102	; 0x66
 8013308:	8805      	ldrh	r5, [r0, #0]
 801330a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801330c:	2000      	movs	r0, #0
 801330e:	429d      	cmp	r5, r3
 8013310:	d101      	bne.n	8013316 <PBDecodeMsg+0x6d2>
 8013312:	4290      	cmp	r0, r2
 8013314:	d007      	beq.n	8013326 <PBDecodeMsg+0x6e2>
 8013316:	000a      	movs	r2, r1
 8013318:	3266      	adds	r2, #102	; 0x66
      DEVCFG_SET(DevCfg.sfh7776_threshold_lower, val_int) && (DevCfg.changed.sfh7776 = true);
 801331a:	8013      	strh	r3, [r2, #0]
 801331c:	2311      	movs	r3, #17
 801331e:	780a      	ldrb	r2, [r1, #0]
 8013320:	439a      	bics	r2, r3
 8013322:	4313      	orrs	r3, r2
 8013324:	700b      	strb	r3, [r1, #0]
      use_sfh7776 = true;
 8013326:	2301      	movs	r3, #1
 8013328:	9304      	str	r3, [sp, #16]
 801332a:	e599      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD) {
 801332c:	2be8      	cmp	r3, #232	; 0xe8
 801332e:	d131      	bne.n	8013394 <PBDecodeMsg+0x750>
      DBG_PRINTF("NFC <RX sensor_luminance_lower_threshold 0x%02x\n", val_int);
 8013330:	9a08      	ldr	r2, [sp, #32]
 8013332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013334:	4916      	ldr	r1, [pc, #88]	; (8013390 <PBDecodeMsg+0x74c>)
 8013336:	2000      	movs	r0, #0
 8013338:	f7f8 fdd1 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sfh7776_threshold_lower, val_int) && (DevCfg.changed.sfh7776 = true);
 801333c:	4907      	ldr	r1, [pc, #28]	; (801335c <PBDecodeMsg+0x718>)
 801333e:	9b08      	ldr	r3, [sp, #32]
 8013340:	0008      	movs	r0, r1
 8013342:	3068      	adds	r0, #104	; 0x68
 8013344:	8805      	ldrh	r5, [r0, #0]
 8013346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013348:	2000      	movs	r0, #0
 801334a:	429d      	cmp	r5, r3
 801334c:	d101      	bne.n	8013352 <PBDecodeMsg+0x70e>
 801334e:	4290      	cmp	r0, r2
 8013350:	d0e9      	beq.n	8013326 <PBDecodeMsg+0x6e2>
 8013352:	000a      	movs	r2, r1
 8013354:	3268      	adds	r2, #104	; 0x68
 8013356:	e7e0      	b.n	801331a <PBDecodeMsg+0x6d6>
 8013358:	0801a528 	.word	0x0801a528
 801335c:	200000e0 	.word	0x200000e0
 8013360:	0801a540 	.word	0x0801a540
 8013364:	0801a558 	.word	0x0801a558
 8013368:	0801a580 	.word	0x0801a580
 801336c:	0801a5a8 	.word	0x0801a5a8
 8013370:	0801a5d0 	.word	0x0801a5d0
 8013374:	0801a5f0 	.word	0x0801a5f0
 8013378:	0801a614 	.word	0x0801a614
 801337c:	0801a639 	.word	0x0801a639
 8013380:	0801a669 	.word	0x0801a669
 8013384:	0801a699 	.word	0x0801a699
 8013388:	0801a6cc 	.word	0x0801a6cc
 801338c:	0801a6ff 	.word	0x0801a6ff
 8013390:	0801a730 	.word	0x0801a730
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_THRESHOLD) {
 8013394:	2bf0      	cmp	r3, #240	; 0xf0
 8013396:	d117      	bne.n	80133c8 <PBDecodeMsg+0x784>
      DBG_PRINTF("NFC <RX sensor_axis_threshold 0x%02x\n", val_int);
 8013398:	9a08      	ldr	r2, [sp, #32]
 801339a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339c:	4926      	ldr	r1, [pc, #152]	; (8013438 <PBDecodeMsg+0x7f4>)
 801339e:	2000      	movs	r0, #0
 80133a0:	f7f8 fd9d 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.bma400_threshold, val_int) && (DevCfg.changed.bma400 = true);
 80133a4:	4925      	ldr	r1, [pc, #148]	; (801343c <PBDecodeMsg+0x7f8>)
 80133a6:	9b08      	ldr	r3, [sp, #32]
 80133a8:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 80133aa:	2000      	movs	r0, #0
 80133ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133ae:	429d      	cmp	r5, r3
 80133b0:	d101      	bne.n	80133b6 <PBDecodeMsg+0x772>
 80133b2:	4290      	cmp	r0, r2
 80133b4:	d005      	beq.n	80133c2 <PBDecodeMsg+0x77e>
 80133b6:	660b      	str	r3, [r1, #96]	; 0x60
      DEVCFG_SET(DevCfg.bma400_config, val_int) && (DevCfg.changed.bma400 = true);
 80133b8:	2305      	movs	r3, #5
 80133ba:	780a      	ldrb	r2, [r1, #0]
 80133bc:	439a      	bics	r2, r3
 80133be:	4313      	orrs	r3, r2
 80133c0:	700b      	strb	r3, [r1, #0]
      use_bma400 = true;
 80133c2:	2301      	movs	r3, #1
 80133c4:	9305      	str	r3, [sp, #20]
 80133c6:	e54b      	b.n	8012e60 <PBDecodeMsg+0x21c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_CONFIGURE) {
 80133c8:	2bf8      	cmp	r3, #248	; 0xf8
 80133ca:	d114      	bne.n	80133f6 <PBDecodeMsg+0x7b2>
      DBG_PRINTF("NFC <RX sensor_axis_configure 0x%02x\n", val_int);
 80133cc:	9a08      	ldr	r2, [sp, #32]
 80133ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133d0:	491b      	ldr	r1, [pc, #108]	; (8013440 <PBDecodeMsg+0x7fc>)
 80133d2:	2000      	movs	r0, #0
 80133d4:	f7f8 fd83 	bl	800bede <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.bma400_config, val_int) && (DevCfg.changed.bma400 = true);
 80133d8:	4918      	ldr	r1, [pc, #96]	; (801343c <PBDecodeMsg+0x7f8>)
 80133da:	9b08      	ldr	r3, [sp, #32]
 80133dc:	0008      	movs	r0, r1
 80133de:	3064      	adds	r0, #100	; 0x64
 80133e0:	8805      	ldrh	r5, [r0, #0]
 80133e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133e4:	2000      	movs	r0, #0
 80133e6:	429d      	cmp	r5, r3
 80133e8:	d101      	bne.n	80133ee <PBDecodeMsg+0x7aa>
 80133ea:	4290      	cmp	r0, r2
 80133ec:	d0e9      	beq.n	80133c2 <PBDecodeMsg+0x77e>
 80133ee:	000a      	movs	r2, r1
 80133f0:	3264      	adds	r2, #100	; 0x64
 80133f2:	8013      	strh	r3, [r2, #0]
 80133f4:	e7e0      	b.n	80133b8 <PBDecodeMsg+0x774>
      PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, "");
 80133f6:	9b02      	ldr	r3, [sp, #8]
 80133f8:	0039      	movs	r1, r7
 80133fa:	1b5a      	subs	r2, r3, r5
 80133fc:	4811      	ldr	r0, [pc, #68]	; (8013444 <PBDecodeMsg+0x800>)
 80133fe:	4b12      	ldr	r3, [pc, #72]	; (8013448 <PBDecodeMsg+0x804>)
 8013400:	b292      	uxth	r2, r2
 8013402:	f7ff fa63 	bl	80128cc <PrintBuffer>
      DBG_PRINTF(", TAGNR %u, TAGTYPE %u, Unknown key-value\n", tagnr, tagtype);
 8013406:	0033      	movs	r3, r6
 8013408:	9a07      	ldr	r2, [sp, #28]
 801340a:	4910      	ldr	r1, [pc, #64]	; (801344c <PBDecodeMsg+0x808>)
 801340c:	2000      	movs	r0, #0
 801340e:	f7f8 fd66 	bl	800bede <SEGGER_RTT_printf>
 8013412:	e525      	b.n	8012e60 <PBDecodeMsg+0x21c>
        debug_msg = ", Out-of-bounds varint tagnr\n";
 8013414:	4b0e      	ldr	r3, [pc, #56]	; (8013450 <PBDecodeMsg+0x80c>)
  PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, debug_msg);
 8013416:	9a02      	ldr	r2, [sp, #8]
 8013418:	9901      	ldr	r1, [sp, #4]
 801341a:	1b52      	subs	r2, r2, r5
 801341c:	4809      	ldr	r0, [pc, #36]	; (8013444 <PBDecodeMsg+0x800>)
 801341e:	b292      	uxth	r2, r2
 8013420:	1949      	adds	r1, r1, r5
 8013422:	f7ff fa53 	bl	80128cc <PrintBuffer>
 8013426:	e4a8      	b.n	8012d7a <PBDecodeMsg+0x136>
      debug_msg = ", Ill-formed tagnr\n";
 8013428:	4b0a      	ldr	r3, [pc, #40]	; (8013454 <PBDecodeMsg+0x810>)
 801342a:	e7f4      	b.n	8013416 <PBDecodeMsg+0x7d2>
  uint8_t debug_fieldpos = 0;
 801342c:	2500      	movs	r5, #0
    debug_msg = ", Unknown message version\n";
 801342e:	4b0a      	ldr	r3, [pc, #40]	; (8013458 <PBDecodeMsg+0x814>)
 8013430:	e7f1      	b.n	8013416 <PBDecodeMsg+0x7d2>
    debug_msg = ", Out-of-bounds\n";
 8013432:	4b0a      	ldr	r3, [pc, #40]	; (801345c <PBDecodeMsg+0x818>)
 8013434:	e7ef      	b.n	8013416 <PBDecodeMsg+0x7d2>
 8013436:	46c0      	nop			; (mov r8, r8)
 8013438:	0801a761 	.word	0x0801a761
 801343c:	200000e0 	.word	0x200000e0
 8013440:	0801a787 	.word	0x0801a787
 8013444:	0801a7ad 	.word	0x0801a7ad
 8013448:	080196e9 	.word	0x080196e9
 801344c:	080197c0 	.word	0x080197c0
 8013450:	080196f5 	.word	0x080196f5
 8013454:	08019713 	.word	0x08019713
 8013458:	0801a3c7 	.word	0x0801a3c7
 801345c:	0801a3e2 	.word	0x0801a3e2

08013460 <PBEncodeMsg_DeviceSensors>:

size_t PBEncodeMsg_DeviceSensors(uint8_t *msg, size_t len, bool pw_valid) {
 8013460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013462:	b08b      	sub	sp, #44	; 0x2c
 8013464:	9005      	str	r0, [sp, #20]
 8013466:	9102      	str	r1, [sp, #8]
  size_t size = 0;
  (void)pw_valid;

  /* discriminator byte specifies message DeviceSensors */
  if(size++ < len)
 8013468:	2900      	cmp	r1, #0
 801346a:	d000      	beq.n	801346e <PBEncodeMsg_DeviceSensors+0xe>
 801346c:	e0e5      	b.n	801363a <PBEncodeMsg_DeviceSensors+0x1da>
    msg[0] = PBMSGID_DEVICE_SENSORS;

  /* enum: Device Part Number */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 801346e:	2000      	movs	r0, #0
 8013470:	0001      	movs	r1, r0
 8013472:	2300      	movs	r3, #0
 8013474:	2202      	movs	r2, #2
 8013476:	9200      	str	r2, [sp, #0]
 8013478:	9301      	str	r3, [sp, #4]
 801347a:	3206      	adds	r2, #6
 801347c:	f7ff fa70 	bl	8012960 <PBEncodeField>
      PBENUM_PARTNR_STA
#endif
  );

  /*  uint8_t: Device Battery Voltage */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 8013480:	2600      	movs	r6, #0
 8013482:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013484:	1c44      	adds	r4, r0, #1
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 8013486:	0037      	movs	r7, r6
 8013488:	42a3      	cmp	r3, r4
 801348a:	d903      	bls.n	8013494 <PBEncodeMsg_DeviceSensors+0x34>
 801348c:	9b05      	ldr	r3, [sp, #20]
 801348e:	191e      	adds	r6, r3, r4
 8013490:	9b02      	ldr	r3, [sp, #8]
 8013492:	1b1f      	subs	r7, r3, r4
 8013494:	f7fd f9a8 	bl	80107e8 <getBatteryVoltage>
 8013498:	210a      	movs	r1, #10
 801349a:	f7ec fe65 	bl	8000168 <__udivsi3>
 801349e:	2500      	movs	r5, #0
 80134a0:	0039      	movs	r1, r7
 80134a2:	2210      	movs	r2, #16
 80134a4:	9000      	str	r0, [sp, #0]
 80134a6:	9501      	str	r5, [sp, #4]
 80134a8:	0030      	movs	r0, r6
 80134aa:	f7ff fa59 	bl	8012960 <PBEncodeField>
 80134ae:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_PRESSURE, (uint64_t)500);

  /* uint16_t: Air Quality Index */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_AIR_QUALITY, (uint64_t)100);
#elif defined(STX)
  HDC2080_Read();
 80134b0:	f000 fdca 	bl	8014048 <HDC2080_Read>
  SFH7776_Read();
 80134b4:	f000 fd28 	bl	8013f08 <SFH7776_Read>
  BMA400_Read();
 80134b8:	f000 fc38 	bl	8013d2c <BMA400_Read>
  /*  int16_t: Temperature */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_TEMPERATURE, PBEncodeSInt(hdc2080.fix_temp));
 80134bc:	9b02      	ldr	r3, [sp, #8]
 80134be:	0028      	movs	r0, r5
 80134c0:	0029      	movs	r1, r5
 80134c2:	42a3      	cmp	r3, r4
 80134c4:	d903      	bls.n	80134ce <PBEncodeMsg_DeviceSensors+0x6e>
 80134c6:	9b05      	ldr	r3, [sp, #20]
 80134c8:	1918      	adds	r0, r3, r4
 80134ca:	9b02      	ldr	r3, [sp, #8]
 80134cc:	1b19      	subs	r1, r3, r4
 80134ce:	4f65      	ldr	r7, [pc, #404]	; (8013664 <PBEncodeMsg_DeviceSensors+0x204>)
 80134d0:	2204      	movs	r2, #4
 80134d2:	5ebb      	ldrsh	r3, [r7, r2]
 80134d4:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80134d6:	0fdb      	lsrs	r3, r3, #31
 80134d8:	9306      	str	r3, [sp, #24]
 80134da:	2300      	movs	r3, #0
 80134dc:	9307      	str	r3, [sp, #28]
 80134de:	9d06      	ldr	r5, [sp, #24]
 80134e0:	9e07      	ldr	r6, [sp, #28]
 80134e2:	2300      	movs	r3, #0
 80134e4:	426a      	negs	r2, r5
 80134e6:	41b3      	sbcs	r3, r6
 80134e8:	9208      	str	r2, [sp, #32]
 80134ea:	9309      	str	r3, [sp, #36]	; 0x24
 80134ec:	4662      	mov	r2, ip
 80134ee:	17d3      	asrs	r3, r2, #31
 80134f0:	1892      	adds	r2, r2, r2
 80134f2:	415b      	adcs	r3, r3
 80134f4:	001e      	movs	r6, r3
 80134f6:	9b08      	ldr	r3, [sp, #32]
 80134f8:	0015      	movs	r5, r2
 80134fa:	001a      	movs	r2, r3
 80134fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134fe:	406a      	eors	r2, r5
 8013500:	4073      	eors	r3, r6
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_TEMPERATURE, PBEncodeSInt(hdc2080.fix_temp));
 8013502:	9200      	str	r2, [sp, #0]
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	2218      	movs	r2, #24
 8013508:	f7ff fa2a 	bl	8012960 <PBEncodeField>

  /* uint32_t: Humidity */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_HUMIDITY, (uint64_t)hdc2080.raw_humid * 100000 / 65536);
 801350c:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_TEMPERATURE, PBEncodeSInt(hdc2080.fix_temp));
 801350e:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_HUMIDITY, (uint64_t)hdc2080.raw_humid * 100000 / 65536);
 8013510:	42a3      	cmp	r3, r4
 8013512:	d800      	bhi.n	8013516 <PBEncodeMsg_DeviceSensors+0xb6>
 8013514:	e09c      	b.n	8013650 <PBEncodeMsg_DeviceSensors+0x1f0>
 8013516:	9b05      	ldr	r3, [sp, #20]
 8013518:	191d      	adds	r5, r3, r4
 801351a:	9b02      	ldr	r3, [sp, #8]
 801351c:	1b1e      	subs	r6, r3, r4
 801351e:	8878      	ldrh	r0, [r7, #2]
 8013520:	2300      	movs	r3, #0
 8013522:	4a51      	ldr	r2, [pc, #324]	; (8013668 <PBEncodeMsg_DeviceSensors+0x208>)
 8013524:	2100      	movs	r1, #0
 8013526:	f7ec ffff 	bl	8000528 <__aeabi_lmul>
 801352a:	040b      	lsls	r3, r1, #16
 801352c:	0c00      	lsrs	r0, r0, #16
 801352e:	4318      	orrs	r0, r3
 8013530:	0c09      	lsrs	r1, r1, #16
 8013532:	9000      	str	r0, [sp, #0]
 8013534:	9101      	str	r1, [sp, #4]
 8013536:	2220      	movs	r2, #32
 8013538:	0031      	movs	r1, r6
 801353a:	0028      	movs	r0, r5
 801353c:	f7ff fa10 	bl	8012960 <PBEncodeField>
 8013540:	1824      	adds	r4, r4, r0

  /* uint16_t: Luminance */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_LUMINANCE, (uint64_t)sfh7776.lux);
 8013542:	2000      	movs	r0, #0
 8013544:	9b02      	ldr	r3, [sp, #8]
 8013546:	0001      	movs	r1, r0
 8013548:	42a3      	cmp	r3, r4
 801354a:	d903      	bls.n	8013554 <PBEncodeMsg_DeviceSensors+0xf4>
 801354c:	9b05      	ldr	r3, [sp, #20]
 801354e:	1918      	adds	r0, r3, r4
 8013550:	9b02      	ldr	r3, [sp, #8]
 8013552:	1b19      	subs	r1, r3, r4
 8013554:	2500      	movs	r5, #0
 8013556:	4b45      	ldr	r3, [pc, #276]	; (801366c <PBEncodeMsg_DeviceSensors+0x20c>)
 8013558:	2238      	movs	r2, #56	; 0x38
 801355a:	88db      	ldrh	r3, [r3, #6]
 801355c:	9501      	str	r5, [sp, #4]
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	f7ff f9fe 	bl	8012960 <PBEncodeField>

  /*  int16_t: X-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 8013564:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_LUMINANCE, (uint64_t)sfh7776.lux);
 8013566:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 8013568:	0029      	movs	r1, r5
 801356a:	0028      	movs	r0, r5
 801356c:	42a3      	cmp	r3, r4
 801356e:	d903      	bls.n	8013578 <PBEncodeMsg_DeviceSensors+0x118>
 8013570:	9b05      	ldr	r3, [sp, #20]
 8013572:	1918      	adds	r0, r3, r4
 8013574:	9b02      	ldr	r3, [sp, #8]
 8013576:	1b19      	subs	r1, r3, r4
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013578:	2700      	movs	r7, #0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 801357a:	4b3d      	ldr	r3, [pc, #244]	; (8013670 <PBEncodeMsg_DeviceSensors+0x210>)
 801357c:	2206      	movs	r2, #6
 801357e:	5e9b      	ldrsh	r3, [r3, r2]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013580:	0fde      	lsrs	r6, r3, #31
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 8013582:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013584:	2300      	movs	r3, #0
 8013586:	4272      	negs	r2, r6
 8013588:	41bb      	sbcs	r3, r7
 801358a:	9206      	str	r2, [sp, #24]
 801358c:	9307      	str	r3, [sp, #28]
 801358e:	4662      	mov	r2, ip
 8013590:	17d3      	asrs	r3, r2, #31
 8013592:	1892      	adds	r2, r2, r2
 8013594:	415b      	adcs	r3, r3
 8013596:	9208      	str	r2, [sp, #32]
 8013598:	9309      	str	r3, [sp, #36]	; 0x24
 801359a:	9a08      	ldr	r2, [sp, #32]
 801359c:	9b06      	ldr	r3, [sp, #24]
 801359e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80135a0:	405a      	eors	r2, r3
 80135a2:	9b07      	ldr	r3, [sp, #28]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135a4:	9200      	str	r2, [sp, #0]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135a6:	405d      	eors	r5, r3
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135a8:	2240      	movs	r2, #64	; 0x40
 80135aa:	9501      	str	r5, [sp, #4]
 80135ac:	f7ff f9d8 	bl	8012960 <PBEncodeField>

  /*  int16_t: Y-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80135b0:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135b2:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80135b4:	42a3      	cmp	r3, r4
 80135b6:	d94e      	bls.n	8013656 <PBEncodeMsg_DeviceSensors+0x1f6>
 80135b8:	9b05      	ldr	r3, [sp, #20]
 80135ba:	1918      	adds	r0, r3, r4
 80135bc:	9b02      	ldr	r3, [sp, #8]
 80135be:	1b19      	subs	r1, r3, r4
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135c0:	2700      	movs	r7, #0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80135c2:	4b2b      	ldr	r3, [pc, #172]	; (8013670 <PBEncodeMsg_DeviceSensors+0x210>)
 80135c4:	2508      	movs	r5, #8
 80135c6:	5f5d      	ldrsh	r5, [r3, r5]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135c8:	0fee      	lsrs	r6, r5, #31
 80135ca:	2300      	movs	r3, #0
 80135cc:	4272      	negs	r2, r6
 80135ce:	41bb      	sbcs	r3, r7
 80135d0:	9206      	str	r2, [sp, #24]
 80135d2:	9307      	str	r3, [sp, #28]
 80135d4:	002a      	movs	r2, r5
 80135d6:	17eb      	asrs	r3, r5, #31
 80135d8:	1892      	adds	r2, r2, r2
 80135da:	415b      	adcs	r3, r3
 80135dc:	9208      	str	r2, [sp, #32]
 80135de:	9309      	str	r3, [sp, #36]	; 0x24
 80135e0:	9a08      	ldr	r2, [sp, #32]
 80135e2:	9b06      	ldr	r3, [sp, #24]
 80135e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80135e6:	405a      	eors	r2, r3
 80135e8:	9b07      	ldr	r3, [sp, #28]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80135ea:	9200      	str	r2, [sp, #0]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135ec:	405d      	eors	r5, r3
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80135ee:	2248      	movs	r2, #72	; 0x48
 80135f0:	9501      	str	r5, [sp, #4]
 80135f2:	f7ff f9b5 	bl	8012960 <PBEncodeField>

  /*  int16_t: Z-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 80135f6:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80135f8:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 80135fa:	42a3      	cmp	r3, r4
 80135fc:	d92e      	bls.n	801365c <PBEncodeMsg_DeviceSensors+0x1fc>
 80135fe:	9b05      	ldr	r3, [sp, #20]
 8013600:	1918      	adds	r0, r3, r4
 8013602:	9b02      	ldr	r3, [sp, #8]
 8013604:	1b19      	subs	r1, r3, r4
 8013606:	4b1a      	ldr	r3, [pc, #104]	; (8013670 <PBEncodeMsg_DeviceSensors+0x210>)
 8013608:	250a      	movs	r5, #10
 801360a:	5f5d      	ldrsh	r5, [r3, r5]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 801360c:	2300      	movs	r3, #0
 801360e:	0fea      	lsrs	r2, r5, #31
 8013610:	2700      	movs	r7, #0
 8013612:	4256      	negs	r6, r2
 8013614:	419f      	sbcs	r7, r3
 8013616:	002a      	movs	r2, r5
 8013618:	17eb      	asrs	r3, r5, #31
 801361a:	1892      	adds	r2, r2, r2
 801361c:	415b      	adcs	r3, r3
 801361e:	9202      	str	r2, [sp, #8]
 8013620:	9303      	str	r3, [sp, #12]
 8013622:	9a02      	ldr	r2, [sp, #8]
 8013624:	9b03      	ldr	r3, [sp, #12]
 8013626:	4072      	eors	r2, r6
 8013628:	407b      	eors	r3, r7
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 801362a:	9200      	str	r2, [sp, #0]
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	2250      	movs	r2, #80	; 0x50
 8013630:	f7ff f996 	bl	8012960 <PBEncodeField>
 8013634:	1820      	adds	r0, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_DOUBLE_COUNT, (uint64_t)DevCfg.doubleCount);
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_LONG_COUNT, (uint64_t)DevCfg.longCount);
#endif

  return size;
}
 8013636:	b00b      	add	sp, #44	; 0x2c
 8013638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    msg[0] = PBMSGID_DEVICE_SENSORS;
 801363a:	2301      	movs	r3, #1
 801363c:	9a05      	ldr	r2, [sp, #20]
 801363e:	7013      	strb	r3, [r2, #0]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013640:	9b02      	ldr	r3, [sp, #8]
 8013642:	2b01      	cmp	r3, #1
 8013644:	d100      	bne.n	8013648 <PBEncodeMsg_DeviceSensors+0x1e8>
 8013646:	e712      	b.n	801346e <PBEncodeMsg_DeviceSensors+0xe>
 8013648:	9b02      	ldr	r3, [sp, #8]
 801364a:	1c50      	adds	r0, r2, #1
 801364c:	1e59      	subs	r1, r3, #1
 801364e:	e710      	b.n	8013472 <PBEncodeMsg_DeviceSensors+0x12>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_HUMIDITY, (uint64_t)hdc2080.raw_humid * 100000 / 65536);
 8013650:	9d07      	ldr	r5, [sp, #28]
 8013652:	002e      	movs	r6, r5
 8013654:	e763      	b.n	801351e <PBEncodeMsg_DeviceSensors+0xbe>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 8013656:	0038      	movs	r0, r7
 8013658:	0039      	movs	r1, r7
 801365a:	e7b1      	b.n	80135c0 <PBEncodeMsg_DeviceSensors+0x160>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 801365c:	0038      	movs	r0, r7
 801365e:	0039      	movs	r1, r7
 8013660:	e7d1      	b.n	8013606 <PBEncodeMsg_DeviceSensors+0x1a6>
 8013662:	46c0      	nop			; (mov r8, r8)
 8013664:	200019f0 	.word	0x200019f0
 8013668:	000186a0 	.word	0x000186a0
 801366c:	200019f8 	.word	0x200019f8
 8013670:	200019d4 	.word	0x200019d4

08013674 <PBEncodeMsg_DeviceConfiguration>:

size_t PBEncodeMsg_DeviceConfiguration(uint8_t *msg, size_t len, bool pw_valid) {
 8013674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013676:	b097      	sub	sp, #92	; 0x5c
 8013678:	000f      	movs	r7, r1
 801367a:	0015      	movs	r5, r2
 801367c:	9003      	str	r0, [sp, #12]
  size_t size = 0;

  /* discriminator byte specifies message DeviceConfiguration */
  if(size++ < len)
 801367e:	2900      	cmp	r1, #0
 8013680:	d000      	beq.n	8013684 <PBEncodeMsg_DeviceConfiguration+0x10>
 8013682:	e1cd      	b.n	8013a20 <PBEncodeMsg_DeviceConfiguration+0x3ac>

  /* Device Info
   * ----------- */

  /* enum: Device Part Number */
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_PART_NUMBER,
 8013684:	2000      	movs	r0, #0
 8013686:	0001      	movs	r1, r0
 8013688:	2202      	movs	r2, #2
 801368a:	2300      	movs	r3, #0
 801368c:	9200      	str	r2, [sp, #0]
 801368e:	9301      	str	r3, [sp, #4]
 8013690:	3206      	adds	r2, #6
 8013692:	f7ff f965 	bl	8012960 <PBEncodeField>
 8013696:	1c44      	adds	r4, r0, #1
#elif defined(STA)
      PBENUM_PARTNR_STA
#endif
  );
  /* v1.0 Release */
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_FW_VERSION, (uint64_t)FIRMWARE_VERSION);
 8013698:	2000      	movs	r0, #0
 801369a:	0001      	movs	r1, r0
 801369c:	42a7      	cmp	r7, r4
 801369e:	d902      	bls.n	80136a6 <PBEncodeMsg_DeviceConfiguration+0x32>
 80136a0:	9b03      	ldr	r3, [sp, #12]
 80136a2:	1b39      	subs	r1, r7, r4
 80136a4:	1918      	adds	r0, r3, r4
 80136a6:	220a      	movs	r2, #10
 80136a8:	2300      	movs	r3, #0
 80136aa:	9200      	str	r2, [sp, #0]
 80136ac:	9301      	str	r3, [sp, #4]
 80136ae:	3206      	adds	r2, #6
 80136b0:	f7ff f956 	bl	8012960 <PBEncodeField>
 80136b4:	1824      	adds	r4, r4, r0

  /* Development version is 0, and zero is implied implicitly. No need to
   * explicitly encode "Device Firmware Version" */

  if(pw_valid) {
 80136b6:	2d00      	cmp	r5, #0
 80136b8:	d100      	bne.n	80136bc <PBEncodeMsg_DeviceConfiguration+0x48>
 80136ba:	e227      	b.n	8013b0c <PBEncodeMsg_DeviceConfiguration+0x498>
    LoRaMacNvmData_t *nvm;
    int8_t datarate;
    int8_t value;

    // Obtain direct access to low-level LoRaMac-node context, some things can't get any other way.
    mibReq.Type = MIB_NVM_CTXS;
 80136bc:	2334      	movs	r3, #52	; 0x34
 80136be:	ad0d      	add	r5, sp, #52	; 0x34
    LoRaMacMibGetRequestConfirm(&mibReq);
 80136c0:	0028      	movs	r0, r5
    mibReq.Type = MIB_NVM_CTXS;
 80136c2:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80136c4:	f7f3 fe34 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    nvm = mibReq.Param.Contexts;
 80136c8:	686b      	ldr	r3, [r5, #4]

    mibReq.Type = MIB_CHANNELS_DATARATE;
    LoRaMacMibGetRequestConfirm(&mibReq);
 80136ca:	0028      	movs	r0, r5
    nvm = mibReq.Param.Contexts;
 80136cc:	9306      	str	r3, [sp, #24]
    mibReq.Type = MIB_CHANNELS_DATARATE;
 80136ce:	232d      	movs	r3, #45	; 0x2d
 80136d0:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80136d2:	f7f3 fe2d 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    datarate = mibReq.Param.ChannelsDatarate;
 80136d6:	2304      	movs	r3, #4
 80136d8:	56eb      	ldrsb	r3, [r5, r3]
    /* LoRa Settings
     * ------------- */

    /* rw--  5:    bool   (TTN) Activation Method */
    mibReq.Type = MIB_NETWORK_ACTIVATION;
    LoRaMacMibGetRequestConfirm(&mibReq);
 80136da:	0028      	movs	r0, r5
    datarate = mibReq.Param.ChannelsDatarate;
 80136dc:	9307      	str	r3, [sp, #28]
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80136de:	2301      	movs	r3, #1
 80136e0:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80136e2:	f7f3 fe25 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)(mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP));
 80136e6:	2000      	movs	r0, #0
 80136e8:	0001      	movs	r1, r0
 80136ea:	42a7      	cmp	r7, r4
 80136ec:	d902      	bls.n	80136f4 <PBEncodeMsg_DeviceConfiguration+0x80>
 80136ee:	9b03      	ldr	r3, [sp, #12]
 80136f0:	1b39      	subs	r1, r7, r4
 80136f2:	1918      	adds	r0, r3, r4
 80136f4:	792b      	ldrb	r3, [r5, #4]
 80136f6:	2600      	movs	r6, #0
 80136f8:	3b01      	subs	r3, #1
 80136fa:	1e5a      	subs	r2, r3, #1
 80136fc:	4193      	sbcs	r3, r2
 80136fe:	9601      	str	r6, [sp, #4]
 8013700:	2228      	movs	r2, #40	; 0x28
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	f7ff f92c 	bl	8012960 <PBEncodeField>

    /* rw--  6: char[8]   (TTN) Device EUI */
    mibReq.Type = MIB_DEV_EUI;
 8013708:	2302      	movs	r3, #2
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)(mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP));
 801370a:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 801370c:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 801370e:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013710:	f7f3 fe0e 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(mibReq.Param.DevEui));
 8013714:	9604      	str	r6, [sp, #16]
 8013716:	42a7      	cmp	r7, r4
 8013718:	d903      	bls.n	8013722 <PBEncodeMsg_DeviceConfiguration+0xae>
 801371a:	9b03      	ldr	r3, [sp, #12]
 801371c:	191e      	adds	r6, r3, r4
 801371e:	1b3b      	subs	r3, r7, r4
 8013720:	9304      	str	r3, [sp, #16]
 8013722:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013724:	f7ff f8f6 	bl	8012914 <u64>
 8013728:	2231      	movs	r2, #49	; 0x31
 801372a:	9000      	str	r0, [sp, #0]
 801372c:	9101      	str	r1, [sp, #4]
 801372e:	0030      	movs	r0, r6
 8013730:	9904      	ldr	r1, [sp, #16]
 8013732:	f7ff f915 	bl	8012960 <PBEncodeField>

    /* rw--  7: char[8]   (TTN) Application EUI */
    mibReq.Type = MIB_JOIN_EUI;
    LoRaMacMibGetRequestConfirm(&mibReq);
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(mibReq.Param.JoinEui));
 8013736:	2600      	movs	r6, #0
    mibReq.Type = MIB_JOIN_EUI;
 8013738:	2303      	movs	r3, #3
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(mibReq.Param.DevEui));
 801373a:	ad0d      	add	r5, sp, #52	; 0x34
 801373c:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 801373e:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8013740:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013742:	f7f3 fdf5 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(mibReq.Param.JoinEui));
 8013746:	9604      	str	r6, [sp, #16]
 8013748:	42a7      	cmp	r7, r4
 801374a:	d903      	bls.n	8013754 <PBEncodeMsg_DeviceConfiguration+0xe0>
 801374c:	9b03      	ldr	r3, [sp, #12]
 801374e:	191e      	adds	r6, r3, r4
 8013750:	1b3b      	subs	r3, r7, r4
 8013752:	9304      	str	r3, [sp, #16]
 8013754:	6868      	ldr	r0, [r5, #4]
 8013756:	f7ff f8dd 	bl	8012914 <u64>
 801375a:	2239      	movs	r2, #57	; 0x39
 801375c:	9000      	str	r0, [sp, #0]
 801375e:	9101      	str	r1, [sp, #4]
 8013760:	9904      	ldr	r1, [sp, #16]
 8013762:	0030      	movs	r0, r6
 8013764:	f7ff f8fc 	bl	8012960 <PBEncodeField>
 8013768:	1824      	adds	r4, r4, r0

    /* rw--  8: char[16]  (TTN) App Key */
    size += PBEncodeMsgField(msg, len, size,
 801376a:	2000      	movs	r0, #0
 801376c:	0001      	movs	r1, r0
 801376e:	42a7      	cmp	r7, r4
 8013770:	d902      	bls.n	8013778 <PBEncodeMsg_DeviceConfiguration+0x104>
 8013772:	9b03      	ldr	r3, [sp, #12]
 8013774:	1b39      	subs	r1, r7, r4
 8013776:	1918      	adds	r0, r3, r4
 8013778:	9b06      	ldr	r3, [sp, #24]
 801377a:	2242      	movs	r2, #66	; 0x42
 801377c:	33cb      	adds	r3, #203	; 0xcb
 801377e:	33ff      	adds	r3, #255	; 0xff
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	2310      	movs	r3, #16
 8013784:	f7ff f8ec 	bl	8012960 <PBEncodeField>
        PBMSG_BX_LORA_APP_KEY,
        PBMSG_BX_LORA_APP_KEY_SIZE, nvm->SecureElement.KeyList[NWK_KEY].KeyValue);

    /* rw--  9: uint32_t  (TTN) Device Address */
    mibReq.Type = MIB_DEV_ADDR;
 8013788:	2307      	movs	r3, #7
 801378a:	ad0d      	add	r5, sp, #52	; 0x34
    size += PBEncodeMsgField(msg, len, size,
 801378c:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 801378e:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 8013790:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013792:	f7f3 fdcd 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_ADDR, mibReq.Param.DevAddr);
 8013796:	2000      	movs	r0, #0
 8013798:	0001      	movs	r1, r0
 801379a:	42a7      	cmp	r7, r4
 801379c:	d902      	bls.n	80137a4 <PBEncodeMsg_DeviceConfiguration+0x130>
 801379e:	9b03      	ldr	r3, [sp, #12]
 80137a0:	1b39      	subs	r1, r7, r4
 80137a2:	1918      	adds	r0, r3, r4
 80137a4:	224d      	movs	r2, #77	; 0x4d
 80137a6:	686b      	ldr	r3, [r5, #4]
 80137a8:	f7ff f8da 	bl	8012960 <PBEncodeField>
 80137ac:	1824      	adds	r4, r4, r0

    /* rw-- 10: char[16]  (TTN) Network Session Key */
    size += PBEncodeMsgField(msg, len, size,
 80137ae:	2000      	movs	r0, #0
 80137b0:	0001      	movs	r1, r0
 80137b2:	42a7      	cmp	r7, r4
 80137b4:	d902      	bls.n	80137bc <PBEncodeMsg_DeviceConfiguration+0x148>
 80137b6:	9b03      	ldr	r3, [sp, #12]
 80137b8:	1b39      	subs	r1, r7, r4
 80137ba:	1918      	adds	r0, r3, r4
 80137bc:	9b06      	ldr	r3, [sp, #24]
 80137be:	2252      	movs	r2, #82	; 0x52
 80137c0:	33fe      	adds	r3, #254	; 0xfe
 80137c2:	33ff      	adds	r3, #255	; 0xff
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	2310      	movs	r3, #16
 80137c8:	f7ff f8ca 	bl	8012960 <PBEncodeField>
 80137cc:	1824      	adds	r4, r4, r0
        PBMSG_BX_LORA_MAC_NET_SESSION_KEY,
        PBMSG_BX_LORA_MAC_NET_SESSION_KEY_SIZE, nvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue);

    /* rw-- 11: char[16]  (TTN) App Session Key */
    size += PBEncodeMsgField(msg, len, size,
 80137ce:	2000      	movs	r0, #0
 80137d0:	0001      	movs	r1, r0
 80137d2:	42a7      	cmp	r7, r4
 80137d4:	d902      	bls.n	80137dc <PBEncodeMsg_DeviceConfiguration+0x168>
 80137d6:	9b03      	ldr	r3, [sp, #12]
 80137d8:	1b39      	subs	r1, r7, r4
 80137da:	1918      	adds	r0, r3, r4
 80137dc:	228c      	movs	r2, #140	; 0x8c
 80137de:	9b06      	ldr	r3, [sp, #24]
 80137e0:	0092      	lsls	r2, r2, #2
 80137e2:	189b      	adds	r3, r3, r2
 80137e4:	3ad7      	subs	r2, #215	; 0xd7
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	3aff      	subs	r2, #255	; 0xff
 80137ea:	2310      	movs	r3, #16
 80137ec:	f7ff f8b8 	bl	8012960 <PBEncodeField>
        PBMSG_BX_LORA_MAC_APP_SESSION_KEY,
        PBMSG_BX_LORA_MAC_APP_SESSION_KEY_SIZE, nvm->SecureElement.KeyList[APP_S_KEY].KeyValue);

    /* rw-- 12:     bool  LoRa Join status */
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80137f0:	2301      	movs	r3, #1
 80137f2:	aa06      	add	r2, sp, #24
    size += PBEncodeMsgField(msg, len, size,
 80137f4:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 80137f6:	a80d      	add	r0, sp, #52	; 0x34
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80137f8:	7713      	strb	r3, [r2, #28]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80137fa:	f7f3 fd99 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_JOINED, (uint64_t)(mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE));
 80137fe:	2000      	movs	r0, #0
 8013800:	0001      	movs	r1, r0
 8013802:	42a7      	cmp	r7, r4
 8013804:	d902      	bls.n	801380c <PBEncodeMsg_DeviceConfiguration+0x198>
 8013806:	9b03      	ldr	r3, [sp, #12]
 8013808:	1b39      	subs	r1, r7, r4
 801380a:	1918      	adds	r0, r3, r4
 801380c:	2220      	movs	r2, #32
 801380e:	ab06      	add	r3, sp, #24
 8013810:	189b      	adds	r3, r3, r2
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2500      	movs	r5, #0
 8013816:	1e5a      	subs	r2, r3, #1
 8013818:	4193      	sbcs	r3, r2
 801381a:	9501      	str	r5, [sp, #4]
 801381c:	2260      	movs	r2, #96	; 0x60
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	f7ff f89e 	bl	8012960 <PBEncodeField>
 8013824:	1824      	adds	r4, r4, r0

    /* rw-- 13:  uint8_t  LoRa Frequency Plan */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_FP, (uint64_t)(DevCfg.region == LORAMAC_REGION_EU868 ? PBENUM_FP_EU868 : PBENUM_FP_US915));
 8013826:	0029      	movs	r1, r5
 8013828:	0028      	movs	r0, r5
 801382a:	42a7      	cmp	r7, r4
 801382c:	d902      	bls.n	8013834 <PBEncodeMsg_DeviceConfiguration+0x1c0>
 801382e:	9b03      	ldr	r3, [sp, #12]
 8013830:	1b39      	subs	r1, r7, r4
 8013832:	1918      	adds	r0, r3, r4
 8013834:	4bd1      	ldr	r3, [pc, #836]	; (8013b7c <PBEncodeMsg_DeviceConfiguration+0x508>)
 8013836:	2201      	movs	r2, #1
 8013838:	334c      	adds	r3, #76	; 0x4c
 801383a:	781d      	ldrb	r5, [r3, #0]
 801383c:	2300      	movs	r3, #0
 801383e:	2d05      	cmp	r5, #5
 8013840:	d001      	beq.n	8013846 <PBEncodeMsg_DeviceConfiguration+0x1d2>
 8013842:	2202      	movs	r2, #2
 8013844:	2300      	movs	r3, #0
 8013846:	9200      	str	r2, [sp, #0]
 8013848:	9301      	str	r3, [sp, #4]
 801384a:	2268      	movs	r2, #104	; 0x68
 801384c:	f7ff f888 	bl	8012960 <PBEncodeField>
 8013850:	1824      	adds	r4, r4, r0

    /* rw-- 14:  uint8_t  LoRa Port */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)DevCfg.txPort);
 8013852:	2000      	movs	r0, #0
 8013854:	0001      	movs	r1, r0
 8013856:	42a7      	cmp	r7, r4
 8013858:	d902      	bls.n	8013860 <PBEncodeMsg_DeviceConfiguration+0x1ec>
 801385a:	9b03      	ldr	r3, [sp, #12]
 801385c:	1b39      	subs	r1, r7, r4
 801385e:	1918      	adds	r0, r3, r4
 8013860:	2600      	movs	r6, #0
 8013862:	4bc6      	ldr	r3, [pc, #792]	; (8013b7c <PBEncodeMsg_DeviceConfiguration+0x508>)
 8013864:	2270      	movs	r2, #112	; 0x70
 8013866:	334d      	adds	r3, #77	; 0x4d
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	9601      	str	r6, [sp, #4]
 801386c:	9300      	str	r3, [sp, #0]
 801386e:	f7ff f877 	bl	8012960 <PBEncodeField>

    /* rw-- 15:  uint8_t  LoRa Transmit Power */
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8013872:	232e      	movs	r3, #46	; 0x2e
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)DevCfg.txPort);
 8013874:	1824      	adds	r4, r4, r0
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8013876:	a80d      	add	r0, sp, #52	; 0x34
 8013878:	7003      	strb	r3, [r0, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)LRW_FromTxPower(mibReq.Param.ChannelsTxPower));
 801387a:	0035      	movs	r5, r6
    LoRaMacMibGetRequestConfirm(&mibReq);
 801387c:	f7f3 fd58 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)LRW_FromTxPower(mibReq.Param.ChannelsTxPower));
 8013880:	42a7      	cmp	r7, r4
 8013882:	d902      	bls.n	801388a <PBEncodeMsg_DeviceConfiguration+0x216>
 8013884:	9b03      	ldr	r3, [sp, #12]
 8013886:	1b3d      	subs	r5, r7, r4
 8013888:	191e      	adds	r6, r3, r4
 801388a:	2220      	movs	r2, #32
 801388c:	ab06      	add	r3, sp, #24
 801388e:	189b      	adds	r3, r3, r2
 8013890:	7818      	ldrb	r0, [r3, #0]
 8013892:	f7fd fe31 	bl	80114f8 <LRW_FromTxPower>
 8013896:	2300      	movs	r3, #0
 8013898:	2278      	movs	r2, #120	; 0x78
 801389a:	0029      	movs	r1, r5
 801389c:	9000      	str	r0, [sp, #0]
 801389e:	9301      	str	r3, [sp, #4]
 80138a0:	0030      	movs	r0, r6
 80138a2:	f7ff f85d 	bl	8012960 <PBEncodeField>

    /* rw-- 16:  uint8_t  LoRa Spreading Factor */
    getPhy.Attribute = PHY_SF_FROM_DR;
 80138a6:	2336      	movs	r3, #54	; 0x36
 80138a8:	aa06      	add	r2, sp, #24
 80138aa:	7513      	strb	r3, [r2, #20]
    getPhy.Datarate = datarate;
 80138ac:	0013      	movs	r3, r2
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 80138ae:	4eb3      	ldr	r6, [pc, #716]	; (8013b7c <PBEncodeMsg_DeviceConfiguration+0x508>)
    getPhy.Datarate = datarate;
 80138b0:	9a07      	ldr	r2, [sp, #28]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 80138b2:	a90b      	add	r1, sp, #44	; 0x2c
    getPhy.Datarate = datarate;
 80138b4:	755a      	strb	r2, [r3, #21]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 80138b6:	0033      	movs	r3, r6
 80138b8:	334c      	adds	r3, #76	; 0x4c
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)LRW_FromTxPower(mibReq.Param.ChannelsTxPower));
 80138ba:	1824      	adds	r4, r4, r0
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 80138bc:	7818      	ldrb	r0, [r3, #0]
 80138be:	f7f5 f9b5 	bl	8008c2c <RegionGetPhyParam>
 80138c2:	9009      	str	r0, [sp, #36]	; 0x24
 80138c4:	b243      	sxtb	r3, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_SF, (uint64_t)value);
 80138c6:	2000      	movs	r0, #0
 80138c8:	0001      	movs	r1, r0
 80138ca:	42a7      	cmp	r7, r4
 80138cc:	d902      	bls.n	80138d4 <PBEncodeMsg_DeviceConfiguration+0x260>
 80138ce:	9a03      	ldr	r2, [sp, #12]
 80138d0:	1b39      	subs	r1, r7, r4
 80138d2:	1910      	adds	r0, r2, r4
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	17db      	asrs	r3, r3, #31
 80138d8:	2280      	movs	r2, #128	; 0x80
 80138da:	9301      	str	r3, [sp, #4]
 80138dc:	f7ff f840 	bl	8012960 <PBEncodeField>
 80138e0:	1823      	adds	r3, r4, r0
 80138e2:	9304      	str	r3, [sp, #16]

    /* rw-- 17:  uint8_t  LoRa Bandwidth */
    getPhy.Attribute = PHY_BW_FROM_DR;
 80138e4:	2337      	movs	r3, #55	; 0x37
 80138e6:	aa06      	add	r2, sp, #24
 80138e8:	7513      	strb	r3, [r2, #20]
    getPhy.Datarate = datarate;
 80138ea:	0013      	movs	r3, r2
 80138ec:	9a07      	ldr	r2, [sp, #28]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 80138ee:	a90b      	add	r1, sp, #44	; 0x2c
    getPhy.Datarate = datarate;
 80138f0:	755a      	strb	r2, [r3, #21]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 80138f2:	0033      	movs	r3, r6
 80138f4:	334c      	adds	r3, #76	; 0x4c
 80138f6:	7818      	ldrb	r0, [r3, #0]
 80138f8:	f7f5 f998 	bl	8008c2c <RegionGetPhyParam>
 80138fc:	900a      	str	r0, [sp, #40]	; 0x28
 80138fe:	b243      	sxtb	r3, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_BW, (uint64_t)value + 1);
 8013900:	2000      	movs	r0, #0
 8013902:	9a04      	ldr	r2, [sp, #16]
 8013904:	0001      	movs	r1, r0
 8013906:	4297      	cmp	r7, r2
 8013908:	d903      	bls.n	8013912 <PBEncodeMsg_DeviceConfiguration+0x29e>
 801390a:	9904      	ldr	r1, [sp, #16]
 801390c:	9a03      	ldr	r2, [sp, #12]
 801390e:	1850      	adds	r0, r2, r1
 8013910:	1a79      	subs	r1, r7, r1
 8013912:	001c      	movs	r4, r3
 8013914:	17dd      	asrs	r5, r3, #31
 8013916:	2201      	movs	r2, #1
 8013918:	2300      	movs	r3, #0
 801391a:	1912      	adds	r2, r2, r4
 801391c:	416b      	adcs	r3, r5
 801391e:	9200      	str	r2, [sp, #0]
 8013920:	9301      	str	r3, [sp, #4]
 8013922:	2288      	movs	r2, #136	; 0x88
 8013924:	f7ff f81c 	bl	8012960 <PBEncodeField>
 8013928:	9b04      	ldr	r3, [sp, #16]
 801392a:	181c      	adds	r4, r3, r0

    /* rw-- 18:     bool  LoRa Confirmed Messages */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)DevCfg.confirmedMsgs);
 801392c:	2000      	movs	r0, #0
 801392e:	0001      	movs	r1, r0
 8013930:	42a7      	cmp	r7, r4
 8013932:	d902      	bls.n	801393a <PBEncodeMsg_DeviceConfiguration+0x2c6>
 8013934:	9b03      	ldr	r3, [sp, #12]
 8013936:	1b39      	subs	r1, r7, r4
 8013938:	1918      	adds	r0, r3, r4
 801393a:	0033      	movs	r3, r6
 801393c:	2500      	movs	r5, #0
 801393e:	3351      	adds	r3, #81	; 0x51
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	2290      	movs	r2, #144	; 0x90
 8013944:	9300      	str	r3, [sp, #0]
 8013946:	9501      	str	r5, [sp, #4]
 8013948:	f7ff f80a 	bl	8012960 <PBEncodeField>

    /* rw-- 19:     bool  LoRa Adaptive Data Rate */
    mibReq.Type = MIB_ADR;
 801394c:	2305      	movs	r3, #5
 801394e:	aa06      	add	r2, sp, #24
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)DevCfg.confirmedMsgs);
 8013950:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013952:	a80d      	add	r0, sp, #52	; 0x34
    mibReq.Type = MIB_ADR;
 8013954:	7713      	strb	r3, [r2, #28]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013956:	f7f3 fceb 	bl	8007330 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_ADAPTIVE_DATA_RATE, (uint64_t)mibReq.Param.AdrEnable);
 801395a:	0028      	movs	r0, r5
 801395c:	0029      	movs	r1, r5
 801395e:	42a7      	cmp	r7, r4
 8013960:	d902      	bls.n	8013968 <PBEncodeMsg_DeviceConfiguration+0x2f4>
 8013962:	9b03      	ldr	r3, [sp, #12]
 8013964:	1b39      	subs	r1, r7, r4
 8013966:	1918      	adds	r0, r3, r4
 8013968:	2220      	movs	r2, #32
 801396a:	2500      	movs	r5, #0
 801396c:	ab06      	add	r3, sp, #24
 801396e:	189b      	adds	r3, r3, r2
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	3278      	adds	r2, #120	; 0x78
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	9501      	str	r5, [sp, #4]
 8013978:	f7fe fff2 	bl	8012960 <PBEncodeField>
 801397c:	1824      	adds	r4, r4, r0

    /* rw-- 20:     bool  LoRa Respect Duty Cycle */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_RESPECT_DUTY_CYCLE, (uint64_t)nvm->MacGroup2.DutyCycleOn);
 801397e:	0029      	movs	r1, r5
 8013980:	0028      	movs	r0, r5
 8013982:	42a7      	cmp	r7, r4
 8013984:	d902      	bls.n	801398c <PBEncodeMsg_DeviceConfiguration+0x318>
 8013986:	9b03      	ldr	r3, [sp, #12]
 8013988:	1b39      	subs	r1, r7, r4
 801398a:	1918      	adds	r0, r3, r4
 801398c:	23c4      	movs	r3, #196	; 0xc4
 801398e:	2500      	movs	r5, #0
 8013990:	9a06      	ldr	r2, [sp, #24]
 8013992:	005b      	lsls	r3, r3, #1
 8013994:	5cd3      	ldrb	r3, [r2, r3]
 8013996:	22a0      	movs	r2, #160	; 0xa0
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	9501      	str	r5, [sp, #4]
 801399c:	f7fe ffe0 	bl	8012960 <PBEncodeField>
 80139a0:	1824      	adds	r4, r4, r0

    /* Sensor Settings
     * --------------- */

    /* uint32_t: Time Base */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TIMEBASE, (uint64_t)DevCfg.sendInterval);
 80139a2:	0029      	movs	r1, r5
 80139a4:	0028      	movs	r0, r5
 80139a6:	42a7      	cmp	r7, r4
 80139a8:	d902      	bls.n	80139b0 <PBEncodeMsg_DeviceConfiguration+0x33c>
 80139aa:	9b03      	ldr	r3, [sp, #12]
 80139ac:	1b39      	subs	r1, r7, r4
 80139ae:	1918      	adds	r0, r3, r4
 80139b0:	2500      	movs	r5, #0
 80139b2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80139b4:	22a8      	movs	r2, #168	; 0xa8
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	9501      	str	r5, [sp, #4]
 80139ba:	f7fe ffd1 	bl	8012960 <PBEncodeField>
 80139be:	1824      	adds	r4, r4, r0

    /*     bool: Send Trigger */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_TRIGGER, (uint64_t)DevCfg.sendTrigger);
 80139c0:	0029      	movs	r1, r5
 80139c2:	0028      	movs	r0, r5
 80139c4:	42a7      	cmp	r7, r4
 80139c6:	d902      	bls.n	80139ce <PBEncodeMsg_DeviceConfiguration+0x35a>
 80139c8:	9b03      	ldr	r3, [sp, #12]
 80139ca:	1b39      	subs	r1, r7, r4
 80139cc:	1918      	adds	r0, r3, r4
 80139ce:	0033      	movs	r3, r6
 80139d0:	2500      	movs	r5, #0
 80139d2:	3358      	adds	r3, #88	; 0x58
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	22b0      	movs	r2, #176	; 0xb0
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	9501      	str	r5, [sp, #4]
 80139dc:	f7fe ffc0 	bl	8012960 <PBEncodeField>
 80139e0:	1824      	adds	r4, r4, r0

    /*     bool: Send Strategy */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 80139e2:	0029      	movs	r1, r5
 80139e4:	0028      	movs	r0, r5
 80139e6:	42a7      	cmp	r7, r4
 80139e8:	d902      	bls.n	80139f0 <PBEncodeMsg_DeviceConfiguration+0x37c>
 80139ea:	9b03      	ldr	r3, [sp, #12]
 80139ec:	1b39      	subs	r1, r7, r4
 80139ee:	1918      	adds	r0, r3, r4
 80139f0:	0033      	movs	r3, r6
 80139f2:	3359      	adds	r3, #89	; 0x59
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	22b8      	movs	r2, #184	; 0xb8
 80139f8:	9300      	str	r3, [sp, #0]
 80139fa:	2300      	movs	r3, #0
 80139fc:	9301      	str	r3, [sp, #4]
 80139fe:	f7fe ffaf 	bl	8012960 <PBEncodeField>

#ifdef STE
#warning "TODO Sensors"
#elif defined(STX)

    if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 8013a02:	0033      	movs	r3, r6
 8013a04:	336c      	adds	r3, #108	; 0x6c
 8013a06:	781b      	ldrb	r3, [r3, #0]
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 8013a08:	1824      	adds	r4, r4, r0
    if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 8013a0a:	075b      	lsls	r3, r3, #29
 8013a0c:	d532      	bpl.n	8013a74 <PBEncodeMsg_DeviceConfiguration+0x400>
 8013a0e:	365a      	adds	r6, #90	; 0x5a
 8013a10:	7830      	ldrb	r0, [r6, #0]
 8013a12:	2803      	cmp	r0, #3
 8013a14:	d82e      	bhi.n	8013a74 <PBEncodeMsg_DeviceConfiguration+0x400>
 8013a16:	4b59      	ldr	r3, [pc, #356]	; (8013b7c <PBEncodeMsg_DeviceConfiguration+0x508>)
 8013a18:	f7ec fb88 	bl	800012c <__gnu_thumb1_case_uqi>
 8013a1c:	99a50b7b 	.word	0x99a50b7b
    msg[0] = PBMSGID_DEVICE_CONFIGURATION;
 8013a20:	2300      	movs	r3, #0
 8013a22:	9a03      	ldr	r2, [sp, #12]
 8013a24:	7013      	strb	r3, [r2, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_PART_NUMBER,
 8013a26:	2901      	cmp	r1, #1
 8013a28:	d100      	bne.n	8013a2c <PBEncodeMsg_DeviceConfiguration+0x3b8>
 8013a2a:	e62b      	b.n	8013684 <PBEncodeMsg_DeviceConfiguration+0x10>
 8013a2c:	1c50      	adds	r0, r2, #1
 8013a2e:	3901      	subs	r1, #1
 8013a30:	e62a      	b.n	8013688 <PBEncodeMsg_DeviceConfiguration+0x14>
    case HDC2080_TEMPERATURE_HIGH:
      /*  int32_t: Send LoRa Message on temperature upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a32:	2000      	movs	r0, #0
 8013a34:	9006      	str	r0, [sp, #24]
 8013a36:	42a7      	cmp	r7, r4
 8013a38:	d903      	bls.n	8013a42 <PBEncodeMsg_DeviceConfiguration+0x3ce>
 8013a3a:	9a03      	ldr	r2, [sp, #12]
 8013a3c:	1910      	adds	r0, r2, r4
 8013a3e:	1b3a      	subs	r2, r7, r4
 8013a40:	9206      	str	r2, [sp, #24]
 8013a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013a44:	0fda      	lsrs	r2, r3, #31
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a46:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013a48:	0019      	movs	r1, r3
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	2600      	movs	r6, #0
 8013a4e:	4255      	negs	r5, r2
 8013a50:	419e      	sbcs	r6, r3
 8013a52:	4662      	mov	r2, ip
 8013a54:	17cb      	asrs	r3, r1, #31
 8013a56:	1892      	adds	r2, r2, r2
 8013a58:	415b      	adcs	r3, r3
 8013a5a:	9204      	str	r2, [sp, #16]
 8013a5c:	9305      	str	r3, [sp, #20]
 8013a5e:	9a04      	ldr	r2, [sp, #16]
 8013a60:	406a      	eors	r2, r5
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a62:	9200      	str	r2, [sp, #0]
 8013a64:	22d0      	movs	r2, #208	; 0xd0
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013a66:	9d05      	ldr	r5, [sp, #20]
 8013a68:	4075      	eors	r5, r6
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a6a:	9501      	str	r5, [sp, #4]
      break;
    case HDC2080_TEMPERATURE_LOW:
      /*  int32_t: Send LoRa Message on temperature lower threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a6c:	9906      	ldr	r1, [sp, #24]
 8013a6e:	f7fe ff77 	bl	8012960 <PBEncodeField>
      /*  int32_t: Send LoRa Message on temperature upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, DevCfg.hdc2080_threshold);
      break;
    case HDC2080_HUMIDITY_LOW:
      /*  int32_t: Send LoRa Message on temperature upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);
 8013a72:	1824      	adds	r4, r4, r0
      break;
    }

    if(DevCfg.useSensor.sfh7776) {
 8013a74:	4d41      	ldr	r5, [pc, #260]	; (8013b7c <PBEncodeMsg_DeviceConfiguration+0x508>)
 8013a76:	002b      	movs	r3, r5
 8013a78:	336c      	adds	r3, #108	; 0x6c
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	079b      	lsls	r3, r3, #30
 8013a7e:	d521      	bpl.n	8013ac4 <PBEncodeMsg_DeviceConfiguration+0x450>
      /*  int32_t: Send LoRa Message on luminance upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_upper);
 8013a80:	2000      	movs	r0, #0
 8013a82:	0001      	movs	r1, r0
 8013a84:	42bc      	cmp	r4, r7
 8013a86:	d202      	bcs.n	8013a8e <PBEncodeMsg_DeviceConfiguration+0x41a>
 8013a88:	9b03      	ldr	r3, [sp, #12]
 8013a8a:	1b39      	subs	r1, r7, r4
 8013a8c:	1918      	adds	r0, r3, r4
 8013a8e:	002b      	movs	r3, r5
 8013a90:	2600      	movs	r6, #0
 8013a92:	3366      	adds	r3, #102	; 0x66
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	22e0      	movs	r2, #224	; 0xe0
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	9601      	str	r6, [sp, #4]
 8013a9c:	f7fe ff60 	bl	8012960 <PBEncodeField>
 8013aa0:	1824      	adds	r4, r4, r0

      /*  int32_t: Send LoRa Message on luminance lower threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_lower);
 8013aa2:	0031      	movs	r1, r6
 8013aa4:	0030      	movs	r0, r6
 8013aa6:	42a7      	cmp	r7, r4
 8013aa8:	d902      	bls.n	8013ab0 <PBEncodeMsg_DeviceConfiguration+0x43c>
 8013aaa:	9b03      	ldr	r3, [sp, #12]
 8013aac:	1b39      	subs	r1, r7, r4
 8013aae:	1918      	adds	r0, r3, r4
 8013ab0:	002b      	movs	r3, r5
 8013ab2:	3368      	adds	r3, #104	; 0x68
 8013ab4:	881b      	ldrh	r3, [r3, #0]
 8013ab6:	22e8      	movs	r2, #232	; 0xe8
 8013ab8:	9300      	str	r3, [sp, #0]
 8013aba:	2300      	movs	r3, #0
 8013abc:	9301      	str	r3, [sp, #4]
 8013abe:	f7fe ff4f 	bl	8012960 <PBEncodeField>
 8013ac2:	1824      	adds	r4, r4, r0
    }

    if(DevCfg.useSensor.bma400) {
 8013ac4:	002b      	movs	r3, r5
 8013ac6:	336c      	adds	r3, #108	; 0x6c
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	07db      	lsls	r3, r3, #31
 8013acc:	d51e      	bpl.n	8013b0c <PBEncodeMsg_DeviceConfiguration+0x498>
      /*  int32_t: Send LoRa Message on axis acceleration above threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_THRESHOLD, (uint64_t)DevCfg.bma400_threshold);
 8013ace:	2000      	movs	r0, #0
 8013ad0:	0001      	movs	r1, r0
 8013ad2:	42bc      	cmp	r4, r7
 8013ad4:	d202      	bcs.n	8013adc <PBEncodeMsg_DeviceConfiguration+0x468>
 8013ad6:	9b03      	ldr	r3, [sp, #12]
 8013ad8:	1b39      	subs	r1, r7, r4
 8013ada:	1918      	adds	r0, r3, r4
 8013adc:	2600      	movs	r6, #0
 8013ade:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8013ae0:	22f0      	movs	r2, #240	; 0xf0
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	9601      	str	r6, [sp, #4]
 8013ae6:	f7fe ff3b 	bl	8012960 <PBEncodeField>
 8013aea:	1824      	adds	r4, r4, r0

      /*  int32_t: Send LoRa Message on axis acceleration configure */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_CONFIGURE, (uint64_t)DevCfg.bma400_config);
 8013aec:	0031      	movs	r1, r6
 8013aee:	0030      	movs	r0, r6
 8013af0:	42a7      	cmp	r7, r4
 8013af2:	d902      	bls.n	8013afa <PBEncodeMsg_DeviceConfiguration+0x486>
 8013af4:	9b03      	ldr	r3, [sp, #12]
 8013af6:	1b39      	subs	r1, r7, r4
 8013af8:	1918      	adds	r0, r3, r4
 8013afa:	3564      	adds	r5, #100	; 0x64
 8013afc:	882b      	ldrh	r3, [r5, #0]
 8013afe:	22f8      	movs	r2, #248	; 0xf8
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	2300      	movs	r3, #0
 8013b04:	9301      	str	r3, [sp, #4]
 8013b06:	f7fe ff2b 	bl	8012960 <PBEncodeField>
 8013b0a:	1824      	adds	r4, r4, r0

#endif
  }

  return size;
}
 8013b0c:	0020      	movs	r0, r4
 8013b0e:	b017      	add	sp, #92	; 0x5c
 8013b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b12:	2000      	movs	r0, #0
 8013b14:	9006      	str	r0, [sp, #24]
 8013b16:	42a7      	cmp	r7, r4
 8013b18:	d903      	bls.n	8013b22 <PBEncodeMsg_DeviceConfiguration+0x4ae>
 8013b1a:	9a03      	ldr	r2, [sp, #12]
 8013b1c:	1910      	adds	r0, r2, r4
 8013b1e:	1b3a      	subs	r2, r7, r4
 8013b20:	9206      	str	r2, [sp, #24]
 8013b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013b24:	0fda      	lsrs	r2, r3, #31
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b26:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013b28:	0019      	movs	r1, r3
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	2600      	movs	r6, #0
 8013b2e:	4255      	negs	r5, r2
 8013b30:	419e      	sbcs	r6, r3
 8013b32:	4662      	mov	r2, ip
 8013b34:	17cb      	asrs	r3, r1, #31
 8013b36:	1892      	adds	r2, r2, r2
 8013b38:	415b      	adcs	r3, r3
 8013b3a:	9204      	str	r2, [sp, #16]
 8013b3c:	9305      	str	r3, [sp, #20]
 8013b3e:	9a04      	ldr	r2, [sp, #16]
 8013b40:	406a      	eors	r2, r5
 8013b42:	9d05      	ldr	r5, [sp, #20]
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b44:	9200      	str	r2, [sp, #0]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013b46:	4075      	eors	r5, r6
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b48:	22d8      	movs	r2, #216	; 0xd8
 8013b4a:	9501      	str	r5, [sp, #4]
 8013b4c:	e78e      	b.n	8013a6c <PBEncodeMsg_DeviceConfiguration+0x3f8>
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, DevCfg.hdc2080_threshold);
 8013b4e:	2000      	movs	r0, #0
 8013b50:	0001      	movs	r1, r0
 8013b52:	42a7      	cmp	r7, r4
 8013b54:	d902      	bls.n	8013b5c <PBEncodeMsg_DeviceConfiguration+0x4e8>
 8013b56:	9a03      	ldr	r2, [sp, #12]
 8013b58:	1b39      	subs	r1, r7, r4
 8013b5a:	1910      	adds	r0, r2, r4
 8013b5c:	22c0      	movs	r2, #192	; 0xc0
 8013b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);
 8013b60:	f7fe fefe 	bl	8012960 <PBEncodeField>
 8013b64:	e785      	b.n	8013a72 <PBEncodeMsg_DeviceConfiguration+0x3fe>
 8013b66:	2000      	movs	r0, #0
 8013b68:	0001      	movs	r1, r0
 8013b6a:	42a7      	cmp	r7, r4
 8013b6c:	d902      	bls.n	8013b74 <PBEncodeMsg_DeviceConfiguration+0x500>
 8013b6e:	9a03      	ldr	r2, [sp, #12]
 8013b70:	1b39      	subs	r1, r7, r4
 8013b72:	1910      	adds	r0, r2, r4
 8013b74:	22c8      	movs	r2, #200	; 0xc8
 8013b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013b78:	e7f2      	b.n	8013b60 <PBEncodeMsg_DeviceConfiguration+0x4ec>
 8013b7a:	46c0      	nop			; (mov r8, r8)
 8013b7c:	200000e0 	.word	0x200000e0

08013b80 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8013b80:	4b09      	ldr	r3, [pc, #36]	; (8013ba8 <HAL_RTC_MspInit+0x28>)
 8013b82:	6802      	ldr	r2, [r0, #0]
{
 8013b84:	b510      	push	{r4, lr}
  if(rtcHandle->Instance==RTC)
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d10d      	bne.n	8013ba6 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8013b8a:	2380      	movs	r3, #128	; 0x80
 8013b8c:	4a07      	ldr	r2, [pc, #28]	; (8013bac <HAL_RTC_MspInit+0x2c>)
 8013b8e:	02db      	lsls	r3, r3, #11
 8013b90:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8013b92:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8013b94:	430b      	orrs	r3, r1
 8013b96:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8013b98:	2200      	movs	r2, #0
 8013b9a:	0011      	movs	r1, r2
 8013b9c:	f7f9 f842 	bl	800cc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8013ba0:	2002      	movs	r0, #2
 8013ba2:	f7f9 f869 	bl	800cc78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8013ba6:	bd10      	pop	{r4, pc}
 8013ba8:	40002800 	.word	0x40002800
 8013bac:	40021000 	.word	0x40021000

08013bb0 <BMA400_Init>:
 *    https://github.com/BoschSensortec/BMA400-API
 *        Upstream driver, contains examples (none for low power mode).
 *    https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bma400-ds000.pdf
 *        Datasheet.
 */
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t r, c;

  bma400.p = &bma;
 8013bb2:	4b53      	ldr	r3, [pc, #332]	; (8013d00 <BMA400_Init+0x150>)
 8013bb4:	4c53      	ldr	r4, [pc, #332]	; (8013d04 <BMA400_Init+0x154>)

  /* Initialize BMA400 Driver */
  bma.dev_id = BMA400_I2C_ADDRESS_SDO_LOW; /* I2C device address is 0x80 */
  bma.intf = BMA400_I2C_INTF;              /* I2C interface used */
 8013bb6:	2501      	movs	r5, #1
  bma400.p = &bma;
 8013bb8:	601c      	str	r4, [r3, #0]
  bma.dev_id = BMA400_I2C_ADDRESS_SDO_LOW; /* I2C device address is 0x80 */
 8013bba:	2314      	movs	r3, #20
 8013bbc:	7063      	strb	r3, [r4, #1]
  bma.intf_ptr = &hi2c1;      /* Hook I2C1 peripheral handle to driver */
 8013bbe:	4b52      	ldr	r3, [pc, #328]	; (8013d08 <BMA400_Init+0x158>)
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013bc0:	b08d      	sub	sp, #52	; 0x34
  bma.intf_ptr = &hi2c1;      /* Hook I2C1 peripheral handle to driver */
 8013bc2:	6063      	str	r3, [r4, #4]
  bma.delay_ms = delay_ms;    /* Hook HAL_Delay to driver */
 8013bc4:	4b51      	ldr	r3, [pc, #324]	; (8013d0c <BMA400_Init+0x15c>)
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013bc6:	0007      	movs	r7, r0
  bma.delay_ms = delay_ms;    /* Hook HAL_Delay to driver */
 8013bc8:	6163      	str	r3, [r4, #20]
  bma.read = i2c_reg_read;    /* Hook HAL_I2C_Mem_Read to driver */
 8013bca:	4b51      	ldr	r3, [pc, #324]	; (8013d10 <BMA400_Init+0x160>)
  bma.write = i2c_reg_write;  /* Hook HAL_I2C_Mem_Write to driver */

  if((r = bma400_init(&bma))) {c = 0x1; goto err;};
 8013bcc:	0020      	movs	r0, r4
  bma.read = i2c_reg_read;    /* Hook HAL_I2C_Mem_Read to driver */
 8013bce:	60e3      	str	r3, [r4, #12]
  bma.write = i2c_reg_write;  /* Hook HAL_I2C_Mem_Write to driver */
 8013bd0:	4b50      	ldr	r3, [pc, #320]	; (8013d14 <BMA400_Init+0x164>)
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013bd2:	9101      	str	r1, [sp, #4]
  bma.write = i2c_reg_write;  /* Hook HAL_I2C_Mem_Write to driver */
 8013bd4:	6123      	str	r3, [r4, #16]
  bma.intf = BMA400_I2C_INTF;              /* I2C interface used */
 8013bd6:	70a5      	strb	r5, [r4, #2]
  if((r = bma400_init(&bma))) {c = 0x1; goto err;};
 8013bd8:	f7ef f91c 	bl	8002e14 <bma400_init>
 8013bdc:	002b      	movs	r3, r5
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d000      	beq.n	8013be4 <BMA400_Init+0x34>
 8013be2:	e084      	b.n	8013cee <BMA400_Init+0x13e>

  if((r = bma400_soft_reset(&bma))) {c = 0x2; goto err;};
 8013be4:	0020      	movs	r0, r4
 8013be6:	f7ef f985 	bl	8002ef4 <bma400_soft_reset>
 8013bea:	2302      	movs	r3, #2
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d000      	beq.n	8013bf2 <BMA400_Init+0x42>
 8013bf0:	e07d      	b.n	8013cee <BMA400_Init+0x13e>

  /* Configure Acceleration */
  struct bma400_sensor_conf sconf;
  sconf.type = BMA400_ACCEL;
 8013bf2:	ae07      	add	r6, sp, #28
 8013bf4:	7030      	strb	r0, [r6, #0]

  if((r = bma400_get_sensor_conf(&sconf, 1, &bma))) {c = 0x3; goto err;};
 8013bf6:	0022      	movs	r2, r4
 8013bf8:	0029      	movs	r1, r5
 8013bfa:	0030      	movs	r0, r6
 8013bfc:	f7ef fc5a 	bl	80034b4 <bma400_get_sensor_conf>
 8013c00:	2303      	movs	r3, #3
 8013c02:	2800      	cmp	r0, #0
 8013c04:	d000      	beq.n	8013c08 <BMA400_Init+0x58>
 8013c06:	e072      	b.n	8013cee <BMA400_Init+0x13e>

  sconf.param.accel.odr = BMA400_ODR_25HZ;
 8013c08:	2206      	movs	r2, #6
 8013c0a:	8072      	strh	r2, [r6, #2]
  sconf.param.accel.range = BMA400_2G_RANGE;
  sconf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_1;
  sconf.param.accel.osr = (config & 0x300) >> 8;
 8013c0c:	123a      	asrs	r2, r7, #8
 8013c0e:	4013      	ands	r3, r2
  sconf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_1;
 8013c10:	7130      	strb	r0, [r6, #4]

  if((r = bma400_set_sensor_conf(&sconf, 1, &bma))) {c = 0x4; goto err;};
 8013c12:	0022      	movs	r2, r4
 8013c14:	0029      	movs	r1, r5
 8013c16:	0030      	movs	r0, r6
  sconf.param.accel.osr = (config & 0x300) >> 8;
 8013c18:	7173      	strb	r3, [r6, #5]
  if((r = bma400_set_sensor_conf(&sconf, 1, &bma))) {c = 0x4; goto err;};
 8013c1a:	f7ef fa19 	bl	8003050 <bma400_set_sensor_conf>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d164      	bne.n	8013cec <BMA400_Init+0x13c>
  bma.delay_ms(100);
 8013c22:	6963      	ldr	r3, [r4, #20]
 8013c24:	3064      	adds	r0, #100	; 0x64

  /* Configure Wake Up Interrupt */
  struct bma400_device_conf dconf;
  dconf.type = BMA400_AUTOWAKEUP_INT;
 8013c26:	ae04      	add	r6, sp, #16
  bma.delay_ms(100);
 8013c28:	4798      	blx	r3

  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x5; goto err;};
 8013c2a:	0022      	movs	r2, r4
 8013c2c:	0029      	movs	r1, r5
 8013c2e:	0030      	movs	r0, r6
  dconf.type = BMA400_AUTOWAKEUP_INT;
 8013c30:	7035      	strb	r5, [r6, #0]
  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x5; goto err;};
 8013c32:	f7ef ff35 	bl	8003aa0 <bma400_get_device_conf>
 8013c36:	2305      	movs	r3, #5
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	d158      	bne.n	8013cee <BMA400_Init+0x13e>

  dconf.param.wakeup.int_wkup_threshold = round(threshold * 256 / 9.80665 / 4 / 100);                            /* Acceleration distance from reference on any X/Y/Z: N*0.153m/s^2 (15.6mg/lsb) */
 8013c3c:	9b01      	ldr	r3, [sp, #4]
 8013c3e:	0218      	lsls	r0, r3, #8
 8013c40:	f7ee ff98 	bl	8002b74 <__aeabi_i2d>
 8013c44:	4a34      	ldr	r2, [pc, #208]	; (8013d18 <BMA400_Init+0x168>)
 8013c46:	4b35      	ldr	r3, [pc, #212]	; (8013d1c <BMA400_Init+0x16c>)
 8013c48:	f7ed fd5e 	bl	8001708 <__aeabi_ddiv>
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	4b34      	ldr	r3, [pc, #208]	; (8013d20 <BMA400_Init+0x170>)
 8013c50:	f7ee f95c 	bl	8001f0c <__aeabi_dmul>
 8013c54:	2200      	movs	r2, #0
 8013c56:	4b33      	ldr	r3, [pc, #204]	; (8013d24 <BMA400_Init+0x174>)
 8013c58:	f7ed fd56 	bl	8001708 <__aeabi_ddiv>
 8013c5c:	f002 f8b6 	bl	8015dcc <round>
 8013c60:	f7ec fc90 	bl	8000584 <__aeabi_d2uiz>
  dconf.param.wakeup.sample_count = (config & 0xe) >> 1;                                                  /* Acceleration lasts atleast duration: N*40ms (25Hz samples) */
 8013c64:	2107      	movs	r1, #7
 8013c66:	107b      	asrs	r3, r7, #1
 8013c68:	400b      	ands	r3, r1
 8013c6a:	70f3      	strb	r3, [r6, #3]
  dconf.param.wakeup.wakeup_ref_update = config & 1 ? BMA400_EVERY_TIME_UPDATE : BMA400_ONE_TIME_UPDATE;  /* Wake-up on delta acceleration, ignore gravity & orientation. */
 8013c6c:	003b      	movs	r3, r7
  dconf.param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
  dconf.param.wakeup.wakeup_axes_en = (config & 0x70) >> 4; /* abs((actX >> 4) - refX) > thres ||
 8013c6e:	113f      	asrs	r7, r7, #4
  dconf.param.wakeup.wakeup_ref_update = config & 1 ? BMA400_EVERY_TIME_UPDATE : BMA400_ONE_TIME_UPDATE;  /* Wake-up on delta acceleration, ignore gravity & orientation. */
 8013c70:	402b      	ands	r3, r5
 8013c72:	195b      	adds	r3, r3, r5
  dconf.param.wakeup.int_wkup_threshold = round(threshold * 256 / 9.80665 / 4 / 100);                            /* Acceleration distance from reference on any X/Y/Z: N*0.153m/s^2 (15.6mg/lsb) */
 8013c74:	7170      	strb	r0, [r6, #5]
  dconf.param.wakeup.wakeup_axes_en = (config & 0x70) >> 4; /* abs((actX >> 4) - refX) > thres ||
 8013c76:	400f      	ands	r7, r1
                                                               abs((actY >> 4) - refY) > thres ||
                                                               abs((actZ >> 4) - refZ) > thres */

  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x6; goto err;};
 8013c78:	0022      	movs	r2, r4
 8013c7a:	0029      	movs	r1, r5
 8013c7c:	0030      	movs	r0, r6
  dconf.param.wakeup.wakeup_ref_update = config & 1 ? BMA400_EVERY_TIME_UPDATE : BMA400_ONE_TIME_UPDATE;  /* Wake-up on delta acceleration, ignore gravity & orientation. */
 8013c7e:	70b3      	strb	r3, [r6, #2]
  dconf.param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8013c80:	7275      	strb	r5, [r6, #9]
  dconf.param.wakeup.wakeup_axes_en = (config & 0x70) >> 4; /* abs((actX >> 4) - refX) > thres ||
 8013c82:	7137      	strb	r7, [r6, #4]
  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x6; goto err;};
 8013c84:	f7ef fd70 	bl	8003768 <bma400_set_device_conf>
 8013c88:	2306      	movs	r3, #6
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	d12f      	bne.n	8013cee <BMA400_Init+0x13e>

  /* Configure Auto Low Power */
  dconf.type = BMA400_AUTO_LOW_POWER;
 8013c8e:	2702      	movs	r7, #2

  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x7; goto err;};
 8013c90:	0022      	movs	r2, r4
 8013c92:	0029      	movs	r1, r5
 8013c94:	0030      	movs	r0, r6
  dconf.type = BMA400_AUTO_LOW_POWER;
 8013c96:	7037      	strb	r7, [r6, #0]
  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x7; goto err;};
 8013c98:	f7ef ff02 	bl	8003aa0 <bma400_get_device_conf>
 8013c9c:	2307      	movs	r3, #7
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	d125      	bne.n	8013cee <BMA400_Init+0x13e>

  dconf.param.auto_lp.auto_low_power_trigger = BMA400_AUTO_LP_TIMEOUT_EN;
 8013ca2:	3b03      	subs	r3, #3
  dconf.param.auto_lp.auto_lp_timeout_threshold = 0;
 8013ca4:	80b0      	strh	r0, [r6, #4]

  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x8; goto err;};
 8013ca6:	0022      	movs	r2, r4
 8013ca8:	0029      	movs	r1, r5
 8013caa:	0030      	movs	r0, r6
  dconf.param.auto_lp.auto_low_power_trigger = BMA400_AUTO_LP_TIMEOUT_EN;
 8013cac:	70b3      	strb	r3, [r6, #2]
  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x8; goto err;};
 8013cae:	f7ef fd5b 	bl	8003768 <bma400_set_device_conf>
 8013cb2:	2308      	movs	r3, #8
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d11a      	bne.n	8013cee <BMA400_Init+0x13e>

  /* Configure Interrupt Mappings */
  struct bma400_int_enable iconf[2];
  iconf[0].type = BMA400_LATCH_INT_EN;
  iconf[0].conf = BMA400_DISABLE;
 8013cb8:	2300      	movs	r3, #0
  iconf[0].type = BMA400_LATCH_INT_EN;
 8013cba:	2206      	movs	r2, #6
 8013cbc:	a803      	add	r0, sp, #12
  iconf[0].conf = BMA400_DISABLE;
 8013cbe:	7043      	strb	r3, [r0, #1]
  iconf[1].type = BMA400_AUTO_WAKEUP_EN;
 8013cc0:	330b      	adds	r3, #11
  iconf[0].type = BMA400_LATCH_INT_EN;
 8013cc2:	7002      	strb	r2, [r0, #0]
  iconf[1].conf = BMA400_ENABLE;

  if((r = bma400_enable_interrupt(iconf, 2, &bma))) {c = 0x9; goto err;};
 8013cc4:	0039      	movs	r1, r7
 8013cc6:	0022      	movs	r2, r4
  iconf[1].type = BMA400_AUTO_WAKEUP_EN;
 8013cc8:	7083      	strb	r3, [r0, #2]
  iconf[1].conf = BMA400_ENABLE;
 8013cca:	70c5      	strb	r5, [r0, #3]
  if((r = bma400_enable_interrupt(iconf, 2, &bma))) {c = 0x9; goto err;};
 8013ccc:	f7ef ffc7 	bl	8003c5e <bma400_enable_interrupt>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d112      	bne.n	8013cfa <BMA400_Init+0x14a>
  bma.delay_ms(100);
 8013cd4:	6963      	ldr	r3, [r4, #20]
 8013cd6:	3064      	adds	r0, #100	; 0x64
 8013cd8:	4798      	blx	r3

  /* Configure Power Mode */
  if((r = bma400_set_power_mode(BMA400_LOW_POWER_MODE, &bma))) {c = 0xa; goto err;};
 8013cda:	0021      	movs	r1, r4
 8013cdc:	0028      	movs	r0, r5
 8013cde:	f7ef f92b 	bl	8002f38 <bma400_set_power_mode>
 8013ce2:	230a      	movs	r3, #10
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d102      	bne.n	8013cee <BMA400_Init+0x13e>

  return;
err:
  DEBUG_PRINTF("SEN BMA400 ERR ret:0x%x cond:0x%x Init Failed!\n", r, c);
  return;
}
 8013ce8:	b00d      	add	sp, #52	; 0x34
 8013cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((r = bma400_set_sensor_conf(&sconf, 1, &bma))) {c = 0x4; goto err;};
 8013cec:	2304      	movs	r3, #4
  DEBUG_PRINTF("SEN BMA400 ERR ret:0x%x cond:0x%x Init Failed!\n", r, c);
 8013cee:	0002      	movs	r2, r0
 8013cf0:	490d      	ldr	r1, [pc, #52]	; (8013d28 <BMA400_Init+0x178>)
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	f7f8 f8f3 	bl	800bede <SEGGER_RTT_printf>
  return;
 8013cf8:	e7f6      	b.n	8013ce8 <BMA400_Init+0x138>
  if((r = bma400_enable_interrupt(iconf, 2, &bma))) {c = 0x9; goto err;};
 8013cfa:	2309      	movs	r3, #9
 8013cfc:	e7f7      	b.n	8013cee <BMA400_Init+0x13e>
 8013cfe:	46c0      	nop			; (mov r8, r8)
 8013d00:	200019d4 	.word	0x200019d4
 8013d04:	200019b8 	.word	0x200019b8
 8013d08:	20001898 	.word	0x20001898
 8013d0c:	08003d77 	.word	0x08003d77
 8013d10:	08003da9 	.word	0x08003da9
 8013d14:	08003d81 	.word	0x08003d81
 8013d18:	3a92a305 	.word	0x3a92a305
 8013d1c:	40239d01 	.word	0x40239d01
 8013d20:	3fd00000 	.word	0x3fd00000
 8013d24:	40590000 	.word	0x40590000
 8013d28:	0801a7ce 	.word	0x0801a7ce

08013d2c <BMA400_Read>:

void BMA400_Read(void) {
 8013d2c:	b570      	push	{r4, r5, r6, lr}
 8013d2e:	b086      	sub	sp, #24
  struct bma400_sensor_data data;
  struct bma400_device_conf conf;
  conf.type = BMA400_AUTOWAKEUP_INT;
 8013d30:	466b      	mov	r3, sp
 8013d32:	2401      	movs	r4, #1

  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma);
 8013d34:	4e2c      	ldr	r6, [pc, #176]	; (8013de8 <BMA400_Read+0xbc>)
 8013d36:	ad03      	add	r5, sp, #12
 8013d38:	0032      	movs	r2, r6
 8013d3a:	0029      	movs	r1, r5
 8013d3c:	2000      	movs	r0, #0
  conf.type = BMA400_AUTOWAKEUP_INT;
 8013d3e:	701c      	strb	r4, [r3, #0]
  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma);
 8013d40:	f7ef f924 	bl	8002f8c <bma400_get_accel_data>
  bma400_get_device_conf(&conf, 1, &bma);
 8013d44:	0032      	movs	r2, r6
 8013d46:	0021      	movs	r1, r4
 8013d48:	4668      	mov	r0, sp
 8013d4a:	f7ef fea9 	bl	8003aa0 <bma400_get_device_conf>
  bma400_get_interrupt_status(&bma400.status, &bma);
 8013d4e:	4c27      	ldr	r4, [pc, #156]	; (8013dec <BMA400_Read+0xc0>)
 8013d50:	0031      	movs	r1, r6
 8013d52:	1d20      	adds	r0, r4, #4
 8013d54:	f7ef ff68 	bl	8003c28 <bma400_get_interrupt_status>

  bma400.raw_x = data.x;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	5ee8      	ldrsh	r0, [r5, r3]
  bma400.raw_y = data.y;
  bma400.raw_z = data.z;
  bma400.raw_x_ref = conf.param.wakeup.int_wkup_ref_x;
  bma400.raw_y_ref = conf.param.wakeup.int_wkup_ref_y;
  bma400.raw_z_ref = conf.param.wakeup.int_wkup_ref_z;
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013d5c:	2208      	movs	r2, #8
  bma400.raw_x = data.x;
 8013d5e:	8260      	strh	r0, [r4, #18]
  bma400.raw_y = data.y;
 8013d60:	886b      	ldrh	r3, [r5, #2]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013d62:	1100      	asrs	r0, r0, #4
  bma400.raw_y = data.y;
 8013d64:	82a3      	strh	r3, [r4, #20]
  bma400.raw_z = data.z;
 8013d66:	88ab      	ldrh	r3, [r5, #4]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013d68:	2580      	movs	r5, #128	; 0x80
  bma400.raw_z = data.z;
 8013d6a:	82e3      	strh	r3, [r4, #22]
  bma400.raw_x_ref = conf.param.wakeup.int_wkup_ref_x;
 8013d6c:	466b      	mov	r3, sp
 8013d6e:	88db      	ldrh	r3, [r3, #6]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013d70:	05ed      	lsls	r5, r5, #23
  bma400.raw_x_ref = conf.param.wakeup.int_wkup_ref_x;
 8013d72:	8323      	strh	r3, [r4, #24]
  bma400.raw_z_ref = conf.param.wakeup.int_wkup_ref_z;
 8013d74:	466b      	mov	r3, sp
 8013d76:	7a1b      	ldrb	r3, [r3, #8]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013d78:	1c29      	adds	r1, r5, #0
  bma400.raw_z_ref = conf.param.wakeup.int_wkup_ref_z;
 8013d7a:	76a3      	strb	r3, [r4, #26]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013d7c:	f7f0 f828 	bl	8003dd0 <lsb_to_ms2>
 8013d80:	f7ed f8d6 	bl	8000f30 <__aeabi_f2iz>
 8013d84:	80e0      	strh	r0, [r4, #6]
  bma400.fix_y = lsb_to_ms2(bma400.raw_y >> 4, 2, 8);
 8013d86:	2314      	movs	r3, #20
 8013d88:	5ee0      	ldrsh	r0, [r4, r3]
 8013d8a:	1c29      	adds	r1, r5, #0
 8013d8c:	2208      	movs	r2, #8
 8013d8e:	1100      	asrs	r0, r0, #4
 8013d90:	f7f0 f81e 	bl	8003dd0 <lsb_to_ms2>
 8013d94:	f7ed f8cc 	bl	8000f30 <__aeabi_f2iz>
 8013d98:	8120      	strh	r0, [r4, #8]
  bma400.fix_z = lsb_to_ms2(bma400.raw_z >> 4, 2, 8);
 8013d9a:	2316      	movs	r3, #22
 8013d9c:	5ee0      	ldrsh	r0, [r4, r3]
 8013d9e:	1c29      	adds	r1, r5, #0
 8013da0:	2208      	movs	r2, #8
 8013da2:	1100      	asrs	r0, r0, #4
 8013da4:	f7f0 f814 	bl	8003dd0 <lsb_to_ms2>
 8013da8:	f7ed f8c2 	bl	8000f30 <__aeabi_f2iz>
 8013dac:	8160      	strh	r0, [r4, #10]
  bma400.fix_x_ref = lsb_to_ms2(bma400.raw_x_ref, 2, 8);
 8013dae:	2018      	movs	r0, #24
 8013db0:	1c29      	adds	r1, r5, #0
 8013db2:	2208      	movs	r2, #8
 8013db4:	5620      	ldrsb	r0, [r4, r0]
 8013db6:	f7f0 f80b 	bl	8003dd0 <lsb_to_ms2>
 8013dba:	f7ed f8b9 	bl	8000f30 <__aeabi_f2iz>
 8013dbe:	81a0      	strh	r0, [r4, #12]
  bma400.fix_y_ref = lsb_to_ms2(bma400.raw_y_ref, 2, 8);
 8013dc0:	2019      	movs	r0, #25
 8013dc2:	1c29      	adds	r1, r5, #0
 8013dc4:	2208      	movs	r2, #8
 8013dc6:	5620      	ldrsb	r0, [r4, r0]
 8013dc8:	f7f0 f802 	bl	8003dd0 <lsb_to_ms2>
 8013dcc:	f7ed f8b0 	bl	8000f30 <__aeabi_f2iz>
 8013dd0:	81e0      	strh	r0, [r4, #14]
  bma400.fix_z_ref = lsb_to_ms2(bma400.raw_z_ref, 2, 8);
 8013dd2:	201a      	movs	r0, #26
 8013dd4:	2208      	movs	r2, #8
 8013dd6:	1c29      	adds	r1, r5, #0
 8013dd8:	5620      	ldrsb	r0, [r4, r0]
 8013dda:	f7ef fff9 	bl	8003dd0 <lsb_to_ms2>
 8013dde:	f7ed f8a7 	bl	8000f30 <__aeabi_f2iz>
 8013de2:	8220      	strh	r0, [r4, #16]
}
 8013de4:	b006      	add	sp, #24
 8013de6:	bd70      	pop	{r4, r5, r6, pc}
 8013de8:	200019b8 	.word	0x200019b8
 8013dec:	200019d4 	.word	0x200019d4

08013df0 <SFH7776_Init>:
  int32_t r, c = 0;
  uint8_t val[4];
  uint32_t als_vis_th = fminf(roundf((uint32_t)GAIN_VIS * upper_thres / 8 / 4), UINT16_MAX);
  uint32_t als_vis_tl = fminf(roundf((uint32_t)GAIN_VIS * lower_thres / 8 / 4), UINT16_MAX);

  als_vis_th = GAIN_VIS * upper_thres / 8 / 4, als_vis_th = als_vis_th > UINT16_MAX ? UINT16_MAX : als_vis_th;
 8013df0:	2380      	movs	r3, #128	; 0x80
void SFH7776_Init(uint16_t upper_thres, uint16_t lower_thres) {
 8013df2:	b5f0      	push	{r4, r5, r6, r7, lr}
  als_vis_th = GAIN_VIS * upper_thres / 8 / 4, als_vis_th = als_vis_th > UINT16_MAX ? UINT16_MAX : als_vis_th;
 8013df4:	025b      	lsls	r3, r3, #9
void SFH7776_Init(uint16_t upper_thres, uint16_t lower_thres) {
 8013df6:	b089      	sub	sp, #36	; 0x24
  als_vis_th = GAIN_VIS * upper_thres / 8 / 4, als_vis_th = als_vis_th > UINT16_MAX ? UINT16_MAX : als_vis_th;
 8013df8:	0046      	lsls	r6, r0, #1
 8013dfa:	429e      	cmp	r6, r3
 8013dfc:	d300      	bcc.n	8013e00 <SFH7776_Init+0x10>
 8013dfe:	4e3d      	ldr	r6, [pc, #244]	; (8013ef4 <SFH7776_Init+0x104>)
  als_vis_tl = GAIN_VIS * lower_thres / 8 / 4, als_vis_tl = als_vis_tl > UINT16_MAX ? UINT16_MAX : als_vis_tl;
 8013e00:	004a      	lsls	r2, r1, #1
 8013e02:	9205      	str	r2, [sp, #20]
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d301      	bcc.n	8013e0c <SFH7776_Init+0x1c>
 8013e08:	4b3a      	ldr	r3, [pc, #232]	; (8013ef4 <SFH7776_Init+0x104>)
 8013e0a:	9305      	str	r3, [sp, #20]

  /* Communicate via NFC that threshold was lowered to maximum */
  DevCfg.sfh7776_threshold_upper = 8 * 4 * als_vis_th / GAIN_VIS;
 8013e0c:	4b3a      	ldr	r3, [pc, #232]	; (8013ef8 <SFH7776_Init+0x108>)
 8013e0e:	0872      	lsrs	r2, r6, #1
 8013e10:	0019      	movs	r1, r3
 8013e12:	3166      	adds	r1, #102	; 0x66
 8013e14:	800a      	strh	r2, [r1, #0]
  DevCfg.sfh7776_threshold_lower = 8 * 4 * als_vis_tl / GAIN_VIS;
 8013e16:	9a05      	ldr	r2, [sp, #20]
 8013e18:	3368      	adds	r3, #104	; 0x68
 8013e1a:	0852      	lsrs	r2, r2, #1
 8013e1c:	801a      	strh	r2, [r3, #0]

  // SYSTEM_CONTROL: reset and check identity
  *val = 0x80;
 8013e1e:	2380      	movs	r3, #128	; 0x80
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_SYSTEM_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x1; goto err;};
 8013e20:	2701      	movs	r7, #1
  *val = 0x80;
 8013e22:	ad07      	add	r5, sp, #28
 8013e24:	702b      	strb	r3, [r5, #0]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_SYSTEM_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x1; goto err;};
 8013e26:	3b1c      	subs	r3, #28
 8013e28:	9302      	str	r3, [sp, #8]
 8013e2a:	2240      	movs	r2, #64	; 0x40
 8013e2c:	003b      	movs	r3, r7
 8013e2e:	2172      	movs	r1, #114	; 0x72
 8013e30:	4832      	ldr	r0, [pc, #200]	; (8013efc <SFH7776_Init+0x10c>)
 8013e32:	9701      	str	r7, [sp, #4]
 8013e34:	9500      	str	r5, [sp, #0]
 8013e36:	f7f9 fd69 	bl	800d90c <HAL_I2C_Mem_Write>
 8013e3a:	003b      	movs	r3, r7
 8013e3c:	1e04      	subs	r4, r0, #0
 8013e3e:	d14d      	bne.n	8013edc <SFH7776_Init+0xec>
  if((r = HAL_I2C_Mem_Read(&hi2c1, 0x72, SFH7776_SYSTEM_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x2; goto err;};
 8013e40:	3363      	adds	r3, #99	; 0x63
 8013e42:	9302      	str	r3, [sp, #8]
 8013e44:	2240      	movs	r2, #64	; 0x40
 8013e46:	003b      	movs	r3, r7
 8013e48:	2172      	movs	r1, #114	; 0x72
 8013e4a:	482c      	ldr	r0, [pc, #176]	; (8013efc <SFH7776_Init+0x10c>)
 8013e4c:	9701      	str	r7, [sp, #4]
 8013e4e:	9500      	str	r5, [sp, #0]
 8013e50:	f7f9 fe16 	bl	800da80 <HAL_I2C_Mem_Read>
 8013e54:	2302      	movs	r3, #2
 8013e56:	1e04      	subs	r4, r0, #0
 8013e58:	d140      	bne.n	8013edc <SFH7776_Init+0xec>
  HAL_Delay(100);
 8013e5a:	2064      	movs	r0, #100	; 0x64
 8013e5c:	f7f8 fbc8 	bl	800c5f0 <HAL_Delay>
  if(*val != 0x09) {c = 0x3; goto err;};
 8013e60:	782a      	ldrb	r2, [r5, #0]
 8013e62:	2303      	movs	r3, #3
 8013e64:	2a09      	cmp	r2, #9
 8013e66:	d139      	bne.n	8013edc <SFH7776_Init+0xec>

  // MODE_CONTROL: PS disabled, ALS enabled and measure for 100ms every 400ms.
  // ALS_PS_CONTROL: ALS_VIS and ALS_IR use x64 gain.
  static_assert(T_INT_ALS == 100 && GAIN_VIS == 64 && GAIN_IR == 64, "");
  val[0] = 0x08, val[1] = 0x28;
 8013e68:	3305      	adds	r3, #5
 8013e6a:	702b      	strb	r3, [r5, #0]
 8013e6c:	3320      	adds	r3, #32
 8013e6e:	706b      	strb	r3, [r5, #1]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_MODE_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 2, 100))) {c = 0x4; goto err;};
 8013e70:	333c      	adds	r3, #60	; 0x3c
 8013e72:	9302      	str	r3, [sp, #8]
 8013e74:	3b62      	subs	r3, #98	; 0x62
 8013e76:	9301      	str	r3, [sp, #4]
 8013e78:	2172      	movs	r1, #114	; 0x72
 8013e7a:	003b      	movs	r3, r7
 8013e7c:	481f      	ldr	r0, [pc, #124]	; (8013efc <SFH7776_Init+0x10c>)
 8013e7e:	9500      	str	r5, [sp, #0]
 8013e80:	3238      	adds	r2, #56	; 0x38
 8013e82:	f7f9 fd43 	bl	800d90c <HAL_I2C_Mem_Write>
 8013e86:	2304      	movs	r3, #4
 8013e88:	1e04      	subs	r4, r0, #0
 8013e8a:	d127      	bne.n	8013edc <SFH7776_Init+0xec>

  // ALS_VIS_TH: ALS upper threshold
  // ALS_VIS_TL: ALS lower threshold
  val[0] = als_vis_th, val[1] = als_vis_th >> 8, val[2] = als_vis_tl, val[3] = als_vis_tl >> 8;
 8013e8c:	9905      	ldr	r1, [sp, #20]
 8013e8e:	702e      	strb	r6, [r5, #0]
 8013e90:	0a0a      	lsrs	r2, r1, #8
 8013e92:	70ea      	strb	r2, [r5, #3]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_ALS_VIS_TH_LSB, I2C_MEMADD_SIZE_8BIT, val, 4, 100))) {c = 0x5; goto err;};
 8013e94:	2264      	movs	r2, #100	; 0x64
  val[0] = als_vis_th, val[1] = als_vis_th >> 8, val[2] = als_vis_tl, val[3] = als_vis_tl >> 8;
 8013e96:	0a36      	lsrs	r6, r6, #8
 8013e98:	70a9      	strb	r1, [r5, #2]
 8013e9a:	706e      	strb	r6, [r5, #1]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_ALS_VIS_TH_LSB, I2C_MEMADD_SIZE_8BIT, val, 4, 100))) {c = 0x5; goto err;};
 8013e9c:	2172      	movs	r1, #114	; 0x72
 8013e9e:	9202      	str	r2, [sp, #8]
 8013ea0:	9301      	str	r3, [sp, #4]
 8013ea2:	4816      	ldr	r0, [pc, #88]	; (8013efc <SFH7776_Init+0x10c>)
 8013ea4:	003b      	movs	r3, r7
 8013ea6:	9500      	str	r5, [sp, #0]
 8013ea8:	3a15      	subs	r2, #21
 8013eaa:	f7f9 fd2f 	bl	800d90c <HAL_I2C_Mem_Write>
 8013eae:	2305      	movs	r3, #5
 8013eb0:	1e04      	subs	r4, r0, #0
 8013eb2:	d113      	bne.n	8013edc <SFH7776_Init+0xec>

  // INTERRUPT_CONTROL: ALS only, non-latched.
  *val = 0x06;
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013eb4:	2264      	movs	r2, #100	; 0x64
  *val = 0x06;
 8013eb6:	2606      	movs	r6, #6
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013eb8:	003b      	movs	r3, r7
  *val = 0x06;
 8013eba:	702e      	strb	r6, [r5, #0]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013ebc:	2172      	movs	r1, #114	; 0x72
 8013ebe:	9202      	str	r2, [sp, #8]
 8013ec0:	480e      	ldr	r0, [pc, #56]	; (8013efc <SFH7776_Init+0x10c>)
 8013ec2:	9701      	str	r7, [sp, #4]
 8013ec4:	9500      	str	r5, [sp, #0]
 8013ec6:	3a1a      	subs	r2, #26
 8013ec8:	f7f9 fd20 	bl	800d90c <HAL_I2C_Mem_Write>
 8013ecc:	1e04      	subs	r4, r0, #0
 8013ece:	d104      	bne.n	8013eda <SFH7776_Init+0xea>

  sfh7776.als_vis_tl = als_vis_tl;
 8013ed0:	4b0b      	ldr	r3, [pc, #44]	; (8013f00 <SFH7776_Init+0x110>)
 8013ed2:	9a05      	ldr	r2, [sp, #20]
 8013ed4:	809a      	strh	r2, [r3, #4]

  return;
err:
  DEBUG_PRINTF("SEN SFH7776 ERR ret:0x%x cond:0x%x val:0x%02x err:0x%x Init Failed!\n", r, c, *val, hi2c1.ErrorCode);
}
 8013ed6:	b009      	add	sp, #36	; 0x24
 8013ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013eda:	0033      	movs	r3, r6
  DEBUG_PRINTF("SEN SFH7776 ERR ret:0x%x cond:0x%x val:0x%02x err:0x%x Init Failed!\n", r, c, *val, hi2c1.ErrorCode);
 8013edc:	4a07      	ldr	r2, [pc, #28]	; (8013efc <SFH7776_Init+0x10c>)
 8013ede:	4909      	ldr	r1, [pc, #36]	; (8013f04 <SFH7776_Init+0x114>)
 8013ee0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	9201      	str	r2, [sp, #4]
 8013ee6:	aa07      	add	r2, sp, #28
 8013ee8:	7812      	ldrb	r2, [r2, #0]
 8013eea:	9200      	str	r2, [sp, #0]
 8013eec:	0022      	movs	r2, r4
 8013eee:	f7f7 fff6 	bl	800bede <SEGGER_RTT_printf>
 8013ef2:	e7f0      	b.n	8013ed6 <SFH7776_Init+0xe6>
 8013ef4:	0000ffff 	.word	0x0000ffff
 8013ef8:	200000e0 	.word	0x200000e0
 8013efc:	20001898 	.word	0x20001898
 8013f00:	200019f8 	.word	0x200019f8
 8013f04:	0801a7fe 	.word	0x0801a7fe

08013f08 <SFH7776_Read>:
 */
void SFH7776_Read(void) {
  uint8_t buf[4];
  float lux;

  HAL_I2C_Mem_Read(&hi2c1, 0x72, 0x46, I2C_MEMADD_SIZE_8BIT, buf, sizeof buf, 100);
 8013f08:	2364      	movs	r3, #100	; 0x64
void SFH7776_Read(void) {
 8013f0a:	b510      	push	{r4, lr}
 8013f0c:	b086      	sub	sp, #24
  HAL_I2C_Mem_Read(&hi2c1, 0x72, 0x46, I2C_MEMADD_SIZE_8BIT, buf, sizeof buf, 100);
 8013f0e:	ac05      	add	r4, sp, #20
 8013f10:	9302      	str	r3, [sp, #8]
 8013f12:	3b60      	subs	r3, #96	; 0x60
 8013f14:	9301      	str	r3, [sp, #4]
 8013f16:	2246      	movs	r2, #70	; 0x46
 8013f18:	2172      	movs	r1, #114	; 0x72
 8013f1a:	9400      	str	r4, [sp, #0]
 8013f1c:	3b03      	subs	r3, #3
 8013f1e:	4806      	ldr	r0, [pc, #24]	; (8013f38 <SFH7776_Read+0x30>)
 8013f20:	f7f9 fdae 	bl	800da80 <HAL_I2C_Mem_Read>
  const uint16_t ALS_VIS = buf[1] << 8 | buf[0];
 8013f24:	8822      	ldrh	r2, [r4, #0]
  /*
   * gcc discards redundant calculations, like no floats invoked. Demonstrated by:
   * arm-none-eabi-objdump --visualize-jumps=extended-color -FCz --disassemble=SFH7776_Read ./stx-fw.elf
   */

  sfh7776.lux = 8 * 4 * ALS_VIS * 100 / T_INT_ALS / GAIN_VIS;
 8013f26:	4b05      	ldr	r3, [pc, #20]	; (8013f3c <SFH7776_Read+0x34>)
 8013f28:	8861      	ldrh	r1, [r4, #2]
  lux = 8   * 4     * ALS_VIS / GAIN_VIS; // Trial & Error         (cover:236 lux; exposed: 2957 lux)
 8013f2a:	1050      	asrs	r0, r2, #1
  sfh7776.lux = 8 * 4 * ALS_VIS * 100 / T_INT_ALS / GAIN_VIS;
 8013f2c:	80d8      	strh	r0, [r3, #6]
  sfh7776.als_vis = ALS_VIS;
 8013f2e:	801a      	strh	r2, [r3, #0]
  sfh7776.als_ir = ALS_IR;
 8013f30:	8059      	strh	r1, [r3, #2]
}
 8013f32:	b006      	add	sp, #24
 8013f34:	bd10      	pop	{r4, pc}
 8013f36:	46c0      	nop			; (mov r8, r8)
 8013f38:	20001898 	.word	0x20001898
 8013f3c:	200019f8 	.word	0x200019f8

08013f40 <HDC2080_Init>:
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
  int32_t r, c;
  uint8_t buf[6];

  /* Turn off Interrupt handler */
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013f40:	2208      	movs	r2, #8
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013f42:	b5f0      	push	{r4, r5, r6, r7, lr}
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013f44:	4e3c      	ldr	r6, [pc, #240]	; (8014038 <HDC2080_Init+0xf8>)
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013f46:	b089      	sub	sp, #36	; 0x24
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013f48:	6833      	ldr	r3, [r6, #0]
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013f4a:	9105      	str	r1, [sp, #20]
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013f4c:	4393      	bics	r3, r2
 8013f4e:	6033      	str	r3, [r6, #0]

  // HDC2080_CONFIG: reset peripheral
  *buf = 0x80;
 8013f50:	2380      	movs	r3, #128	; 0x80
 8013f52:	ac06      	add	r4, sp, #24
 8013f54:	7023      	strb	r3, [r4, #0]
  r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_CONFIG, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8013f56:	4f39      	ldr	r7, [pc, #228]	; (801403c <HDC2080_Init+0xfc>)
 8013f58:	3b4e      	subs	r3, #78	; 0x4e
 8013f5a:	9302      	str	r3, [sp, #8]
 8013f5c:	3b31      	subs	r3, #49	; 0x31
 8013f5e:	9301      	str	r3, [sp, #4]
 8013f60:	2180      	movs	r1, #128	; 0x80
 8013f62:	3206      	adds	r2, #6
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013f64:	0005      	movs	r5, r0
  r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_CONFIG, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8013f66:	9400      	str	r4, [sp, #0]
 8013f68:	0038      	movs	r0, r7
 8013f6a:	f7f9 fccf 	bl	800d90c <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8013f6e:	2001      	movs	r0, #1
 8013f70:	f7f8 fb3e 	bl	800c5f0 <HAL_Delay>

  // HDC2080_INT_ENABLE: enable specific threshold interrupt
  *buf =
 8013f74:	2320      	movs	r3, #32
 8013f76:	2d00      	cmp	r5, #0
 8013f78:	d006      	beq.n	8013f88 <HDC2080_Init+0x48>
 8013f7a:	18db      	adds	r3, r3, r3
 8013f7c:	2d01      	cmp	r5, #1
 8013f7e:	d003      	beq.n	8013f88 <HDC2080_Init+0x48>
 8013f80:	3340      	adds	r3, #64	; 0x40
 8013f82:	2d02      	cmp	r5, #2
 8013f84:	d000      	beq.n	8013f88 <HDC2080_Init+0x48>
 8013f86:	3b70      	subs	r3, #112	; 0x70
 8013f88:	7023      	strb	r3, [r4, #0]
    type == HDC2080_TEMPERATURE_LOW  ? 0x20 :
    type == HDC2080_TEMPERATURE_HIGH ? 0x40 :
    type == HDC2080_HUMIDITY_LOW  ? 0x80 :
    type == HDC2080_HUMIDITY_HIGH ? 0x10 : 0x10;
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, buf, 1, 50))) {c = 0x2; goto err;};
 8013f8a:	2332      	movs	r3, #50	; 0x32
 8013f8c:	9302      	str	r3, [sp, #8]
 8013f8e:	3b31      	subs	r3, #49	; 0x31
 8013f90:	2207      	movs	r2, #7
 8013f92:	2180      	movs	r1, #128	; 0x80
 8013f94:	0038      	movs	r0, r7
 8013f96:	9301      	str	r3, [sp, #4]
 8013f98:	9400      	str	r4, [sp, #0]
 8013f9a:	f7f9 fcb7 	bl	800d90c <HAL_I2C_Mem_Write>
 8013f9e:	1e02      	subs	r2, r0, #0
 8013fa0:	d144      	bne.n	801402c <HDC2080_Init+0xec>

  // HDC2080_*_TL: Configure specific threshold
  buf[0] = type != HDC2080_TEMPERATURE_LOW  ? 0x00 : (thres + 4000) * 256 / 16500;
 8013fa2:	2d00      	cmp	r5, #0
 8013fa4:	d108      	bne.n	8013fb8 <HDC2080_Init+0x78>
 8013fa6:	22fa      	movs	r2, #250	; 0xfa
 8013fa8:	9b05      	ldr	r3, [sp, #20]
 8013faa:	0112      	lsls	r2, r2, #4
 8013fac:	1898      	adds	r0, r3, r2
 8013fae:	4924      	ldr	r1, [pc, #144]	; (8014040 <HDC2080_Init+0x100>)
 8013fb0:	0200      	lsls	r0, r0, #8
 8013fb2:	f7ec f963 	bl	800027c <__divsi3>
 8013fb6:	b2c2      	uxtb	r2, r0
  buf[1] = type != HDC2080_TEMPERATURE_HIGH ? 0xff : (thres + 4000) * 256 / 16500;
 8013fb8:	20ff      	movs	r0, #255	; 0xff
  buf[0] = type != HDC2080_TEMPERATURE_LOW  ? 0x00 : (thres + 4000) * 256 / 16500;
 8013fba:	7022      	strb	r2, [r4, #0]
  buf[1] = type != HDC2080_TEMPERATURE_HIGH ? 0xff : (thres + 4000) * 256 / 16500;
 8013fbc:	2d01      	cmp	r5, #1
 8013fbe:	d108      	bne.n	8013fd2 <HDC2080_Init+0x92>
 8013fc0:	22fa      	movs	r2, #250	; 0xfa
 8013fc2:	9b05      	ldr	r3, [sp, #20]
 8013fc4:	0112      	lsls	r2, r2, #4
 8013fc6:	1898      	adds	r0, r3, r2
 8013fc8:	491d      	ldr	r1, [pc, #116]	; (8014040 <HDC2080_Init+0x100>)
 8013fca:	0200      	lsls	r0, r0, #8
 8013fcc:	f7ec f956 	bl	800027c <__divsi3>
 8013fd0:	b2c0      	uxtb	r0, r0
 8013fd2:	7060      	strb	r0, [r4, #1]
  buf[2] = type != HDC2080_HUMIDITY_LOW     ? 0x00 : thres * 256 / 100;
 8013fd4:	2000      	movs	r0, #0
 8013fd6:	2d02      	cmp	r5, #2
 8013fd8:	d105      	bne.n	8013fe6 <HDC2080_Init+0xa6>
 8013fda:	9b05      	ldr	r3, [sp, #20]
 8013fdc:	2164      	movs	r1, #100	; 0x64
 8013fde:	0218      	lsls	r0, r3, #8
 8013fe0:	f7ec f94c 	bl	800027c <__divsi3>
 8013fe4:	b2c0      	uxtb	r0, r0
 8013fe6:	70a0      	strb	r0, [r4, #2]
  buf[3] = type != HDC2080_HUMIDITY_HIGH    ? 0xff : thres * 256 / 100;
 8013fe8:	20ff      	movs	r0, #255	; 0xff
 8013fea:	2d03      	cmp	r5, #3
 8013fec:	d105      	bne.n	8013ffa <HDC2080_Init+0xba>
 8013fee:	9b05      	ldr	r3, [sp, #20]
 8013ff0:	2164      	movs	r1, #100	; 0x64
 8013ff2:	0218      	lsls	r0, r3, #8
 8013ff4:	f7ec f942 	bl	800027c <__divsi3>
 8013ff8:	b2c0      	uxtb	r0, r0

  // HDC2080_CONFIG: 1Hz Auto measure mode, Enable interrupt (non-latched; high active level)
  buf[4] = 0x01 | 0x02 | 0x04 | 0x50;
 8013ffa:	2357      	movs	r3, #87	; 0x57
 8013ffc:	7123      	strb	r3, [r4, #4]

  // HDC2080_MEASURE: Measure humidity and temperature with 9-bit resolution, Start Measurement.
  buf[5] = 0x80 | 0x20 | 0x01;
 8013ffe:	334a      	adds	r3, #74	; 0x4a
 8014000:	7163      	strb	r3, [r4, #5]
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP_TL, I2C_MEMADD_SIZE_8BIT, buf, 6, 50))) {c = 0x3; goto err;};
 8014002:	3b6f      	subs	r3, #111	; 0x6f
  buf[3] = type != HDC2080_HUMIDITY_HIGH    ? 0xff : thres * 256 / 100;
 8014004:	70e0      	strb	r0, [r4, #3]
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP_TL, I2C_MEMADD_SIZE_8BIT, buf, 6, 50))) {c = 0x3; goto err;};
 8014006:	9302      	str	r3, [sp, #8]
 8014008:	3b2c      	subs	r3, #44	; 0x2c
 801400a:	220a      	movs	r2, #10
 801400c:	9301      	str	r3, [sp, #4]
 801400e:	2180      	movs	r1, #128	; 0x80
 8014010:	3b05      	subs	r3, #5
 8014012:	0038      	movs	r0, r7
 8014014:	9400      	str	r4, [sp, #0]
 8014016:	f7f9 fc79 	bl	800d90c <HAL_I2C_Mem_Write>
 801401a:	2303      	movs	r3, #3
 801401c:	1e02      	subs	r2, r0, #0
 801401e:	d106      	bne.n	801402e <HDC2080_Init+0xee>
  goto exit;
err:
  DEBUG_PRINTF("SEN HDC2080 ERR ret:0x%x cond:0x%x Init Failed\n", r, c);
exit:
  /* Enable Interrupt Handler */
  SET_BIT(EXTI->IMR, TEMP_Int_Pin);
 8014020:	2308      	movs	r3, #8
 8014022:	6832      	ldr	r2, [r6, #0]
 8014024:	4313      	orrs	r3, r2
 8014026:	6033      	str	r3, [r6, #0]
}
 8014028:	b009      	add	sp, #36	; 0x24
 801402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, buf, 1, 50))) {c = 0x2; goto err;};
 801402c:	2302      	movs	r3, #2
  DEBUG_PRINTF("SEN HDC2080 ERR ret:0x%x cond:0x%x Init Failed\n", r, c);
 801402e:	4905      	ldr	r1, [pc, #20]	; (8014044 <HDC2080_Init+0x104>)
 8014030:	2000      	movs	r0, #0
 8014032:	f7f7 ff54 	bl	800bede <SEGGER_RTT_printf>
 8014036:	e7f3      	b.n	8014020 <HDC2080_Init+0xe0>
 8014038:	40010400 	.word	0x40010400
 801403c:	20001898 	.word	0x20001898
 8014040:	00004074 	.word	0x00004074
 8014044:	0801a843 	.word	0x0801a843

08014048 <HDC2080_Read>:

void HDC2080_Read(void) {
  int32_t r;
  uint8_t buf[5];
  if(r = HAL_I2C_Mem_Read(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP, I2C_MEMADD_SIZE_8BIT, buf, 5, 50), r != HAL_OK) {
 8014048:	2332      	movs	r3, #50	; 0x32
void HDC2080_Read(void) {
 801404a:	b510      	push	{r4, lr}
 801404c:	b086      	sub	sp, #24
  if(r = HAL_I2C_Mem_Read(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP, I2C_MEMADD_SIZE_8BIT, buf, 5, 50), r != HAL_OK) {
 801404e:	9302      	str	r3, [sp, #8]
 8014050:	ac04      	add	r4, sp, #16
 8014052:	3b2d      	subs	r3, #45	; 0x2d
 8014054:	2200      	movs	r2, #0
 8014056:	9301      	str	r3, [sp, #4]
 8014058:	2180      	movs	r1, #128	; 0x80
 801405a:	480f      	ldr	r0, [pc, #60]	; (8014098 <HDC2080_Read+0x50>)
 801405c:	9400      	str	r4, [sp, #0]
 801405e:	3b04      	subs	r3, #4
 8014060:	f7f9 fd0e 	bl	800da80 <HAL_I2C_Mem_Read>
 8014064:	1e02      	subs	r2, r0, #0
 8014066:	d005      	beq.n	8014074 <HDC2080_Read+0x2c>
    DEBUG_PRINTF("SEN HDC2080 I2C <RX ERR ret:0x%x\n", r);
 8014068:	2000      	movs	r0, #0
 801406a:	490c      	ldr	r1, [pc, #48]	; (801409c <HDC2080_Read+0x54>)
 801406c:	f7f7 ff37 	bl	800bede <SEGGER_RTT_printf>
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
  hdc2080.raw_humid = buf[3] << 8 | buf[2];
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
  hdc2080.humid = hdc2080.raw_humid * 100 / 65536;
  hdc2080.status = buf[4];
}
 8014070:	b006      	add	sp, #24
 8014072:	bd10      	pop	{r4, pc}
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
 8014074:	8820      	ldrh	r0, [r4, #0]
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
 8014076:	4b0a      	ldr	r3, [pc, #40]	; (80140a0 <HDC2080_Read+0x58>)
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
 8014078:	4a0a      	ldr	r2, [pc, #40]	; (80140a4 <HDC2080_Read+0x5c>)
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
 801407a:	4343      	muls	r3, r0
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
 801407c:	8010      	strh	r0, [r2, #0]
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
 801407e:	480a      	ldr	r0, [pc, #40]	; (80140a8 <HDC2080_Read+0x60>)
 8014080:	141b      	asrs	r3, r3, #16
 8014082:	181b      	adds	r3, r3, r0
 8014084:	8093      	strh	r3, [r2, #4]
  hdc2080.humid = hdc2080.raw_humid * 100 / 65536;
 8014086:	2364      	movs	r3, #100	; 0x64
 8014088:	8861      	ldrh	r1, [r4, #2]
 801408a:	434b      	muls	r3, r1
 801408c:	141b      	asrs	r3, r3, #16
  hdc2080.raw_humid = buf[3] << 8 | buf[2];
 801408e:	8051      	strh	r1, [r2, #2]
  hdc2080.humid = hdc2080.raw_humid * 100 / 65536;
 8014090:	7193      	strb	r3, [r2, #6]
  hdc2080.status = buf[4];
 8014092:	7923      	ldrb	r3, [r4, #4]
 8014094:	71d3      	strb	r3, [r2, #7]
 8014096:	e7eb      	b.n	8014070 <HDC2080_Read+0x28>
 8014098:	20001898 	.word	0x20001898
 801409c:	0801a873 	.word	0x0801a873
 80140a0:	00004074 	.word	0x00004074
 80140a4:	200019f0 	.word	0x200019f0
 80140a8:	fffff060 	.word	0xfffff060

080140ac <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 80140ac:	480e      	ldr	r0, [pc, #56]	; (80140e8 <MX_SPI1_Init+0x3c>)
 80140ae:	4b0f      	ldr	r3, [pc, #60]	; (80140ec <MX_SPI1_Init+0x40>)
{
 80140b0:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80140b2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80140b4:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80140b6:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80140b8:	005b      	lsls	r3, r3, #1
 80140ba:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80140bc:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80140be:	0092      	lsls	r2, r2, #2
 80140c0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80140c2:	3ae9      	subs	r2, #233	; 0xe9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80140c4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80140c6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80140c8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80140ca:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80140cc:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80140ce:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80140d0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80140d2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80140d4:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80140d6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80140d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80140da:	f7fb fb3d 	bl	800f758 <HAL_SPI_Init>
 80140de:	2800      	cmp	r0, #0
 80140e0:	d001      	beq.n	80140e6 <MX_SPI1_Init+0x3a>
  {
    Error_Handler();
 80140e2:	f7fd ff71 	bl	8011fc8 <Error_Handler>
  }

}
 80140e6:	bd10      	pop	{r4, pc}
 80140e8:	20001a00 	.word	0x20001a00
 80140ec:	40013000 	.word	0x40013000

080140f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80140f0:	b510      	push	{r4, lr}
 80140f2:	0004      	movs	r4, r0
 80140f4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80140f6:	2214      	movs	r2, #20
 80140f8:	2100      	movs	r1, #0
 80140fa:	a801      	add	r0, sp, #4
 80140fc:	f001 ff31 	bl	8015f62 <memset>
  if(spiHandle->Instance==SPI1)
 8014100:	4b13      	ldr	r3, [pc, #76]	; (8014150 <HAL_SPI_MspInit+0x60>)
 8014102:	6822      	ldr	r2, [r4, #0]
 8014104:	429a      	cmp	r2, r3
 8014106:	d120      	bne.n	801414a <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014108:	2280      	movs	r2, #128	; 0x80
 801410a:	4b12      	ldr	r3, [pc, #72]	; (8014154 <HAL_SPI_MspInit+0x64>)
 801410c:	0152      	lsls	r2, r2, #5
 801410e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = SX126x_SPI_SCK_Pin|SX126x_SPI_MISO_Pin|SX126x_SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014110:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014112:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014114:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014116:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801411a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801411c:	430a      	orrs	r2, r1
 801411e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014122:	400b      	ands	r3, r1
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SX126x_SPI_SCK_Pin|SX126x_SPI_MISO_Pin|SX126x_SPI_MOSI_Pin;
 8014128:	23e0      	movs	r3, #224	; 0xe0
 801412a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801412c:	3bde      	subs	r3, #222	; 0xde
 801412e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014130:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014132:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014134:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014136:	f7f8 ffed 	bl	800d114 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801413a:	2200      	movs	r2, #0
 801413c:	2019      	movs	r0, #25
 801413e:	0011      	movs	r1, r2
 8014140:	f7f8 fd70 	bl	800cc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8014144:	2019      	movs	r0, #25
 8014146:	f7f8 fd97 	bl	800cc78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 801414a:	b006      	add	sp, #24
 801414c:	bd10      	pop	{r4, pc}
 801414e:	46c0      	nop			; (mov r8, r8)
 8014150:	40013000 	.word	0x40013000
 8014154:	40021000 	.word	0x40021000

08014158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8014158:	480d      	ldr	r0, [pc, #52]	; (8014190 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801415a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 801415c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801415e:	e003      	b.n	8014168 <LoopCopyDataInit>

08014160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014160:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8014162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014166:	3104      	adds	r1, #4

08014168 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8014168:	480b      	ldr	r0, [pc, #44]	; (8014198 <LoopForever+0xa>)
  ldr  r3, =_edata
 801416a:	4b0c      	ldr	r3, [pc, #48]	; (801419c <LoopForever+0xe>)
  adds  r2, r0, r1
 801416c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801416e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014170:	d3f6      	bcc.n	8014160 <CopyDataInit>
  ldr  r2, =_sbss
 8014172:	4a0b      	ldr	r2, [pc, #44]	; (80141a0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8014174:	e002      	b.n	801417c <LoopFillZerobss>

08014176 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8014176:	2300      	movs	r3, #0
  str  r3, [r2]
 8014178:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801417a:	3204      	adds	r2, #4

0801417c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 801417c:	4b09      	ldr	r3, [pc, #36]	; (80141a4 <LoopForever+0x16>)
  cmp  r2, r3
 801417e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014180:	d3f9      	bcc.n	8014176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8014182:	f000 f87d 	bl	8014280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014186:	f001 fe9d 	bl	8015ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801418a:	f7fd ff91 	bl	80120b0 <main>

0801418e <LoopForever>:

LoopForever:
    b LoopForever
 801418e:	e7fe      	b.n	801418e <LoopForever>
   ldr   r0, =_estack
 8014190:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8014194:	0801ad4c 	.word	0x0801ad4c
  ldr  r0, =_sdata
 8014198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801419c:	2000030c 	.word	0x2000030c
  ldr  r2, =_sbss
 80141a0:	2000030c 	.word	0x2000030c
  ldr  r3, = _ebss
 80141a4:	20001de4 	.word	0x20001de4

080141a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80141a8:	e7fe      	b.n	80141a8 <ADC1_COMP_IRQHandler>
	...

080141ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80141ac:	2201      	movs	r2, #1
 80141ae:	4b09      	ldr	r3, [pc, #36]	; (80141d4 <HAL_MspInit+0x28>)
{
 80141b0:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80141b2:	6b59      	ldr	r1, [r3, #52]	; 0x34

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80141b4:	2004      	movs	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80141b6:	430a      	orrs	r2, r1
 80141b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80141ba:	2280      	movs	r2, #128	; 0x80
 80141bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80141be:	0552      	lsls	r2, r2, #21
 80141c0:	430a      	orrs	r2, r1
 80141c2:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80141c4:	2200      	movs	r2, #0
 80141c6:	0011      	movs	r1, r2
 80141c8:	f7f8 fd2c 	bl	800cc24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80141cc:	2004      	movs	r0, #4
 80141ce:	f7f8 fd53 	bl	800cc78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80141d2:	bd10      	pop	{r4, pc}
 80141d4:	40021000 	.word	0x40021000

080141d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80141d8:	4770      	bx	lr

080141da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80141da:	e7fe      	b.n	80141da <HardFault_Handler>

080141dc <SVC_Handler>:
 80141dc:	4770      	bx	lr

080141de <PendSV_Handler>:
 80141de:	4770      	bx	lr

080141e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80141e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80141e2:	f7f8 f9f3 	bl	800c5cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80141e6:	bd10      	pop	{r4, pc}

080141e8 <RCC_IRQHandler>:
 80141e8:	4770      	bx	lr

080141ea <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80141ea:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80141ec:	2001      	movs	r0, #1
 80141ee:	f7f9 f863 	bl	800d2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80141f2:	2002      	movs	r0, #2
 80141f4:	f7f9 f860 	bl	800d2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80141f8:	bd10      	pop	{r4, pc}

080141fa <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80141fa:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80141fc:	2008      	movs	r0, #8
 80141fe:	f7f9 f85b 	bl	800d2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8014202:	bd10      	pop	{r4, pc}

08014204 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8014204:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8014206:	2020      	movs	r0, #32
 8014208:	f7f9 f856 	bl	800d2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 801420c:	2080      	movs	r0, #128	; 0x80
 801420e:	0080      	lsls	r0, r0, #2
 8014210:	f7f9 f852 	bl	800d2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8014214:	2080      	movs	r0, #128	; 0x80
 8014216:	00c0      	lsls	r0, r0, #3
 8014218:	f7f9 f84e 	bl	800d2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801421c:	bd10      	pop	{r4, pc}
	...

08014220 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8014220:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8014222:	4802      	ldr	r0, [pc, #8]	; (801422c <DMA1_Channel1_IRQHandler+0xc>)
 8014224:	f7f8 fe33 	bl	800ce8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8014228:	bd10      	pop	{r4, pc}
 801422a:	46c0      	nop			; (mov r8, r8)
 801422c:	200017e4 	.word	0x200017e4

08014230 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8014230:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8014232:	4802      	ldr	r0, [pc, #8]	; (801423c <DMA1_Channel2_3_IRQHandler+0xc>)
 8014234:	f7f8 fe2b 	bl	800ce8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8014238:	bd10      	pop	{r4, pc}
 801423a:	46c0      	nop			; (mov r8, r8)
 801423c:	20001850 	.word	0x20001850

08014240 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8014240:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8014242:	4802      	ldr	r0, [pc, #8]	; (801424c <LPTIM1_IRQHandler+0xc>)
 8014244:	f7fa f924 	bl	800e490 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8014248:	bd10      	pop	{r4, pc}
 801424a:	46c0      	nop			; (mov r8, r8)
 801424c:	200018f8 	.word	0x200018f8

08014250 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8014250:	4806      	ldr	r0, [pc, #24]	; (801426c <I2C1_IRQHandler+0x1c>)
{
 8014252:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8014254:	6803      	ldr	r3, [r0, #0]
 8014256:	699a      	ldr	r2, [r3, #24]
 8014258:	23e0      	movs	r3, #224	; 0xe0
 801425a:	00db      	lsls	r3, r3, #3
 801425c:	421a      	tst	r2, r3
 801425e:	d002      	beq.n	8014266 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8014260:	f7fa f810 	bl	800e284 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8014264:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8014266:	f7f9 fd73 	bl	800dd50 <HAL_I2C_EV_IRQHandler>
}
 801426a:	e7fb      	b.n	8014264 <I2C1_IRQHandler+0x14>
 801426c:	20001898 	.word	0x20001898

08014270 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8014270:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */
  __NOP();
 8014272:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8014274:	4801      	ldr	r0, [pc, #4]	; (801427c <SPI1_IRQHandler+0xc>)
 8014276:	f7fb fad3 	bl	800f820 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 801427a:	bd10      	pop	{r4, pc}
 801427c:	20001a00 	.word	0x20001a00

08014280 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8014280:	2280      	movs	r2, #128	; 0x80
 8014282:	4b10      	ldr	r3, [pc, #64]	; (80142c4 <SystemInit+0x44>)
 8014284:	0052      	lsls	r2, r2, #1
 8014286:	6819      	ldr	r1, [r3, #0]
 8014288:	430a      	orrs	r2, r1
 801428a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 801428c:	68da      	ldr	r2, [r3, #12]
 801428e:	490e      	ldr	r1, [pc, #56]	; (80142c8 <SystemInit+0x48>)
 8014290:	400a      	ands	r2, r1
 8014292:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	490d      	ldr	r1, [pc, #52]	; (80142cc <SystemInit+0x4c>)
 8014298:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801429a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 801429c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801429e:	689a      	ldr	r2, [r3, #8]
 80142a0:	438a      	bics	r2, r1
 80142a2:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	490a      	ldr	r1, [pc, #40]	; (80142d0 <SystemInit+0x50>)
 80142a8:	400a      	ands	r2, r1
 80142aa:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80142ac:	68da      	ldr	r2, [r3, #12]
 80142ae:	4909      	ldr	r1, [pc, #36]	; (80142d4 <SystemInit+0x54>)
 80142b0:	400a      	ands	r2, r1
 80142b2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80142b4:	2200      	movs	r2, #0
 80142b6:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80142b8:	2280      	movs	r2, #128	; 0x80
 80142ba:	4b07      	ldr	r3, [pc, #28]	; (80142d8 <SystemInit+0x58>)
 80142bc:	0512      	lsls	r2, r2, #20
 80142be:	609a      	str	r2, [r3, #8]
#endif
}
 80142c0:	4770      	bx	lr
 80142c2:	46c0      	nop			; (mov r8, r8)
 80142c4:	40021000 	.word	0x40021000
 80142c8:	88ff400c 	.word	0x88ff400c
 80142cc:	fef6fff6 	.word	0xfef6fff6
 80142d0:	fffbffff 	.word	0xfffbffff
 80142d4:	ff02ffff 	.word	0xff02ffff
 80142d8:	e000ed00 	.word	0xe000ed00

080142dc <tasks_add>:
volatile uint32_t tasks_ticks = 0;

struct task *tasks_add(struct task t);
int tasks_has_pending(void);

struct task *tasks_add(struct task t) {
 80142dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142de:	b085      	sub	sp, #20
 80142e0:	9203      	str	r2, [sp, #12]
  uint8_t i = 0;

  do {
    if(tasks[i].when <= tasks_ticks) {
 80142e2:	240c      	movs	r4, #12
struct task *tasks_add(struct task t) {
 80142e4:	2200      	movs	r2, #0
 80142e6:	9102      	str	r1, [sp, #8]
    if(tasks[i].when <= tasks_ticks) {
 80142e8:	4d0c      	ldr	r5, [pc, #48]	; (801431c <tasks_add+0x40>)
 80142ea:	490d      	ldr	r1, [pc, #52]	; (8014320 <tasks_add+0x44>)
struct task *tasks_add(struct task t) {
 80142ec:	ab01      	add	r3, sp, #4
 80142ee:	9001      	str	r0, [sp, #4]
    if(tasks[i].when <= tasks_ticks) {
 80142f0:	0020      	movs	r0, r4
 80142f2:	4350      	muls	r0, r2
 80142f4:	1940      	adds	r0, r0, r5
 80142f6:	680e      	ldr	r6, [r1, #0]
 80142f8:	6807      	ldr	r7, [r0, #0]
 80142fa:	42b7      	cmp	r7, r6
 80142fc:	d804      	bhi.n	8014308 <tasks_add+0x2c>
      tasks[i] = t;
 80142fe:	0002      	movs	r2, r0
 8014300:	cb32      	ldmia	r3!, {r1, r4, r5}
 8014302:	c232      	stmia	r2!, {r1, r4, r5}
    }
  } while(++i % TASK_MAX != 0);

  DEBUG_MSG("Couldn't add task, no space left!\n");
  return NULL;
}
 8014304:	b005      	add	sp, #20
 8014306:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while(++i % TASK_MAX != 0);
 8014308:	3201      	adds	r2, #1
 801430a:	2a14      	cmp	r2, #20
 801430c:	d1f0      	bne.n	80142f0 <tasks_add+0x14>
  DEBUG_MSG("Couldn't add task, no space left!\n");
 801430e:	2000      	movs	r0, #0
 8014310:	4904      	ldr	r1, [pc, #16]	; (8014324 <tasks_add+0x48>)
 8014312:	f7f7 fc11 	bl	800bb38 <SEGGER_RTT_WriteString>
  return NULL;
 8014316:	2000      	movs	r0, #0
 8014318:	e7f4      	b.n	8014304 <tasks_add+0x28>
 801431a:	46c0      	nop			; (mov r8, r8)
 801431c:	20001a5c 	.word	0x20001a5c
 8014320:	20001b4c 	.word	0x20001b4c
 8014324:	0801a8ae 	.word	0x0801a8ae

08014328 <tasks_has_pending>:
void tasks_del(struct task *t) {
  memset(t, 0, sizeof *t);
}

int tasks_has_pending(void) {
  for(size_t i = 0; i < TASK_MAX; i++) {
 8014328:	2300      	movs	r3, #0
    if(tasks[i].when > tasks_ticks)
 801432a:	210c      	movs	r1, #12
int tasks_has_pending(void) {
 801432c:	b530      	push	{r4, r5, lr}
    if(tasks[i].when > tasks_ticks)
 801432e:	4a08      	ldr	r2, [pc, #32]	; (8014350 <tasks_has_pending+0x28>)
 8014330:	4808      	ldr	r0, [pc, #32]	; (8014354 <tasks_has_pending+0x2c>)
 8014332:	000d      	movs	r5, r1
 8014334:	435d      	muls	r5, r3
 8014336:	6814      	ldr	r4, [r2, #0]
 8014338:	5945      	ldr	r5, [r0, r5]
 801433a:	42a5      	cmp	r5, r4
 801433c:	d804      	bhi.n	8014348 <tasks_has_pending+0x20>
  for(size_t i = 0; i < TASK_MAX; i++) {
 801433e:	3301      	adds	r3, #1
 8014340:	2b14      	cmp	r3, #20
 8014342:	d1f6      	bne.n	8014332 <tasks_has_pending+0xa>
      return -1;
  }
  return 0;
 8014344:	2000      	movs	r0, #0
}
 8014346:	bd30      	pop	{r4, r5, pc}
      return -1;
 8014348:	2001      	movs	r0, #1
 801434a:	4240      	negs	r0, r0
 801434c:	e7fb      	b.n	8014346 <tasks_has_pending+0x1e>
 801434e:	46c0      	nop			; (mov r8, r8)
 8014350:	20001b4c 	.word	0x20001b4c
 8014354:	20001a5c 	.word	0x20001a5c

08014358 <HAL_LPTIM_AutoReloadMatchCallback>:

volatile uint8_t processingRdyTasks = 0;
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim1) {
 8014358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tasks_ticks++;
 801435a:	4f0f      	ldr	r7, [pc, #60]	; (8014398 <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
  if (processingRdyTasks) {
 801435c:	4e0f      	ldr	r6, [pc, #60]	; (801439c <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
  tasks_ticks++;
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	3301      	adds	r3, #1
 8014362:	603b      	str	r3, [r7, #0]
  if (processingRdyTasks) {
 8014364:	7833      	ldrb	r3, [r6, #0]
 8014366:	b2dc      	uxtb	r4, r3
 8014368:	2b00      	cmp	r3, #0
 801436a:	d004      	beq.n	8014376 <HAL_LPTIM_AutoReloadMatchCallback+0x1e>
    DEBUG_MSG("Timer ticked before task processing done.\n");
 801436c:	2000      	movs	r0, #0
 801436e:	490c      	ldr	r1, [pc, #48]	; (80143a0 <HAL_LPTIM_AutoReloadMatchCallback+0x48>)
 8014370:	f7f7 fbe2 	bl	800bb38 <SEGGER_RTT_WriteString>
        tasks[i].cb(tasks[i].arg); // execute task function
      }
    }
    processingRdyTasks = 0;
  }
}
 8014374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    processingRdyTasks = 1;
 8014376:	2301      	movs	r3, #1
 8014378:	4d0a      	ldr	r5, [pc, #40]	; (80143a4 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
 801437a:	7033      	strb	r3, [r6, #0]
      if (tasks[i].when == tasks_ticks) { // Ready
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	682a      	ldr	r2, [r5, #0]
 8014380:	429a      	cmp	r2, r3
 8014382:	d102      	bne.n	801438a <HAL_LPTIM_AutoReloadMatchCallback+0x32>
        tasks[i].cb(tasks[i].arg); // execute task function
 8014384:	6868      	ldr	r0, [r5, #4]
 8014386:	68ab      	ldr	r3, [r5, #8]
 8014388:	4798      	blx	r3
    for (size_t i = 0; i < TASK_MAX; ++i) {
 801438a:	3401      	adds	r4, #1
 801438c:	350c      	adds	r5, #12
 801438e:	2c14      	cmp	r4, #20
 8014390:	d1f4      	bne.n	801437c <HAL_LPTIM_AutoReloadMatchCallback+0x24>
    processingRdyTasks = 0;
 8014392:	2300      	movs	r3, #0
 8014394:	7033      	strb	r3, [r6, #0]
}
 8014396:	e7ed      	b.n	8014374 <HAL_LPTIM_AutoReloadMatchCallback+0x1c>
 8014398:	20001b4c 	.word	0x20001b4c
 801439c:	20001a58 	.word	0x20001a58
 80143a0:	0801a8d1 	.word	0x0801a8d1
 80143a4:	20001a5c 	.word	0x20001a5c

080143a8 <atcab_init_ext>:
 *  \param[in]  cfg    Logical interface configuration. Some predefined
 *                     configurations can be found in atca_cfgs.h
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_init_ext(ATCADevice* device, ATCAIfaceCfg *cfg)
{
 80143a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143aa:	0004      	movs	r4, r0
 80143ac:	000e      	movs	r6, r1
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (device)
 80143ae:	2800      	cmp	r0, #0
 80143b0:	d101      	bne.n	80143b6 <atcab_init_ext+0xe>
            (*device)->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
        }
#endif
    }

    return ATCA_SUCCESS;
 80143b2:	2000      	movs	r0, #0
}
 80143b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        if (*device)
 80143b6:	6803      	ldr	r3, [r0, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d001      	beq.n	80143c0 <atcab_init_ext+0x18>
    {
        return status;
    }
    *device = NULL;
#else
    deleteATCADevice(device);
 80143bc:	f000 f88a 	bl	80144d4 <deleteATCADevice>
        *device = newATCADevice(cfg);
 80143c0:	0030      	movs	r0, r6
 80143c2:	f000 f84f 	bl	8014464 <newATCADevice>
 80143c6:	0005      	movs	r5, r0
 80143c8:	6020      	str	r0, [r4, #0]
            return ATCA_GEN_FAIL;
 80143ca:	20e1      	movs	r0, #225	; 0xe1
        if (*device == NULL)
 80143cc:	2d00      	cmp	r5, #0
 80143ce:	d0f1      	beq.n	80143b4 <atcab_init_ext+0xc>
        if (cfg->devtype == ATECC608)
 80143d0:	7873      	ldrb	r3, [r6, #1]
 80143d2:	2b03      	cmp	r3, #3
 80143d4:	d1ed      	bne.n	80143b2 <atcab_init_ext+0xa>
            if ((status = calib_read_bytes_zone(*device, ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &(*device)->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
 80143d6:	2200      	movs	r2, #0
 80143d8:	3b02      	subs	r3, #2
 80143da:	9301      	str	r3, [sp, #4]
 80143dc:	682b      	ldr	r3, [r5, #0]
 80143de:	0011      	movs	r1, r2
 80143e0:	3301      	adds	r3, #1
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	0028      	movs	r0, r5
 80143e6:	2313      	movs	r3, #19
 80143e8:	f000 fa8c 	bl	8014904 <calib_read_bytes_zone>
 80143ec:	2800      	cmp	r0, #0
 80143ee:	d1e1      	bne.n	80143b4 <atcab_init_ext+0xc>
            (*device)->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
 80143f0:	2107      	movs	r1, #7
 80143f2:	6823      	ldr	r3, [r4, #0]
 80143f4:	681a      	ldr	r2, [r3, #0]
 80143f6:	7853      	ldrb	r3, [r2, #1]
 80143f8:	438b      	bics	r3, r1
 80143fa:	7053      	strb	r3, [r2, #1]
 80143fc:	e7da      	b.n	80143b4 <atcab_init_ext+0xc>
	...

08014400 <atcab_init>:
{
 8014400:	b510      	push	{r4, lr}
 8014402:	0001      	movs	r1, r0
    return atcab_init_ext(&_gDevice, cfg);
 8014404:	4801      	ldr	r0, [pc, #4]	; (801440c <atcab_init+0xc>)
 8014406:	f7ff ffcf 	bl	80143a8 <atcab_init_ext>
}
 801440a:	bd10      	pop	{r4, pc}
 801440c:	20001b50 	.word	0x20001b50

08014410 <initATCACommand>:
 *                         should be associated with this command object.
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
 8014410:	0003      	movs	r3, r0
    if (ca_cmd == NULL)
    {
        return ATCA_BAD_PARAM;
 8014412:	20e2      	movs	r0, #226	; 0xe2
    if (ca_cmd == NULL)
 8014414:	2900      	cmp	r1, #0
 8014416:	d002      	beq.n	801441e <initATCACommand+0xe>
    }

    ca_cmd->dt = device_type;
    ca_cmd->clock_divider = 0;
 8014418:	2000      	movs	r0, #0
    ca_cmd->dt = device_type;
 801441a:	700b      	strb	r3, [r1, #0]
    ca_cmd->clock_divider = 0;
 801441c:	7048      	strb	r0, [r1, #1]

    return ATCA_SUCCESS;
}
 801441e:	4770      	bx	lr

08014420 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
 8014420:	b510      	push	{r4, lr}
 8014422:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
 8014424:	d004      	beq.n	8014430 <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
 8014426:	6800      	ldr	r0, [r0, #0]
 8014428:	f001 fd7a 	bl	8015f20 <free>
    *ca_cmd = NULL;
 801442c:	2300      	movs	r3, #0
 801442e:	6023      	str	r3, [r4, #0]
}
 8014430:	bd10      	pop	{r4, pc}

08014432 <atca_trace>:
}

ATCA_STATUS atca_trace(ATCA_STATUS status)
{
    return status;
}
 8014432:	4770      	bx	lr

08014434 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
 8014434:	b570      	push	{r4, r5, r6, lr}
 8014436:	0005      	movs	r5, r0
 8014438:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    {
        return ATCA_BAD_PARAM;
 801443a:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
 801443c:	2d00      	cmp	r5, #0
 801443e:	d010      	beq.n	8014462 <initATCADevice+0x2e>
 8014440:	2900      	cmp	r1, #0
 8014442:	d00e      	beq.n	8014462 <initATCADevice+0x2e>
 8014444:	6809      	ldr	r1, [r1, #0]
 8014446:	2900      	cmp	r1, #0
 8014448:	d00b      	beq.n	8014462 <initATCADevice+0x2e>
 801444a:	6863      	ldr	r3, [r4, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d008      	beq.n	8014462 <initATCADevice+0x2e>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
 8014450:	7868      	ldrb	r0, [r5, #1]
 8014452:	f7ff ffdd 	bl	8014410 <initATCACommand>
    if (status != ATCA_SUCCESS)
 8014456:	2800      	cmp	r0, #0
 8014458:	d103      	bne.n	8014462 <initATCADevice+0x2e>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
 801445a:	0028      	movs	r0, r5
 801445c:	6861      	ldr	r1, [r4, #4]
 801445e:	f000 f876 	bl	801454e <initATCAIface>
    {
        return status;
    }

    return ATCA_SUCCESS;
}
 8014462:	bd70      	pop	{r4, r5, r6, pc}

08014464 <newATCADevice>:
{
 8014464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014466:	1e07      	subs	r7, r0, #0
    if (cfg == NULL)
 8014468:	d102      	bne.n	8014470 <newATCADevice+0xc>
        return NULL;
 801446a:	2400      	movs	r4, #0
}
 801446c:	0020      	movs	r0, r4
 801446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
 8014470:	2018      	movs	r0, #24
 8014472:	f001 fd4b 	bl	8015f0c <malloc>
 8014476:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
 8014478:	d0f7      	beq.n	801446a <newATCADevice+0x6>
    memset(ca_dev, 0, sizeof(struct atca_device));
 801447a:	2210      	movs	r2, #16
 801447c:	2100      	movs	r1, #0
 801447e:	3008      	adds	r0, #8
 8014480:	f001 fd6f 	bl	8015f62 <memset>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
 8014484:	2004      	movs	r0, #4
 8014486:	f001 fd41 	bl	8015f0c <malloc>
 801448a:	1e05      	subs	r5, r0, #0
 801448c:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
 801448e:	d103      	bne.n	8014498 <newATCADevice+0x34>
        free(ca_dev);
 8014490:	0020      	movs	r0, r4
 8014492:	f001 fd45 	bl	8015f20 <free>
 8014496:	e7e8      	b.n	801446a <newATCADevice+0x6>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
 8014498:	2028      	movs	r0, #40	; 0x28
 801449a:	f001 fd37 	bl	8015f0c <malloc>
 801449e:	0006      	movs	r6, r0
 80144a0:	6060      	str	r0, [r4, #4]
        free(ca_dev->mCommands);
 80144a2:	0028      	movs	r0, r5
    if (ca_dev->mIface == NULL)
 80144a4:	2e00      	cmp	r6, #0
 80144a6:	d009      	beq.n	80144bc <newATCADevice+0x58>
    status = initATCADevice(cfg, ca_dev);
 80144a8:	0021      	movs	r1, r4
 80144aa:	0038      	movs	r0, r7
 80144ac:	f7ff ffc2 	bl	8014434 <initATCADevice>
    if (status != ATCA_SUCCESS)
 80144b0:	2800      	cmp	r0, #0
 80144b2:	d0db      	beq.n	801446c <newATCADevice+0x8>
        free(ca_dev->mIface);
 80144b4:	6860      	ldr	r0, [r4, #4]
 80144b6:	f001 fd33 	bl	8015f20 <free>
        free(ca_dev->mCommands);
 80144ba:	6820      	ldr	r0, [r4, #0]
 80144bc:	f001 fd30 	bl	8015f20 <free>
 80144c0:	e7e6      	b.n	8014490 <newATCADevice+0x2c>

080144c2 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
 80144c2:	0003      	movs	r3, r0
 80144c4:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
 80144c6:	20e2      	movs	r0, #226	; 0xe2
    if (ca_dev == NULL)
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d002      	beq.n	80144d2 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
 80144cc:	6858      	ldr	r0, [r3, #4]
 80144ce:	f000 f887 	bl	80145e0 <releaseATCAIface>
}
 80144d2:	bd10      	pop	{r4, pc}

080144d4 <deleteATCADevice>:
{
 80144d4:	b510      	push	{r4, lr}
 80144d6:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
 80144d8:	d013      	beq.n	8014502 <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
 80144da:	6800      	ldr	r0, [r0, #0]
 80144dc:	f7ff fff1 	bl	80144c2 <releaseATCADevice>
    deleteATCACommand(&(*ca_dev)->mCommands);
 80144e0:	6820      	ldr	r0, [r4, #0]
 80144e2:	f7ff ff9d 	bl	8014420 <deleteATCACommand>
    if ((*ca_dev)->mIface)
 80144e6:	6823      	ldr	r3, [r4, #0]
 80144e8:	6858      	ldr	r0, [r3, #4]
 80144ea:	2800      	cmp	r0, #0
 80144ec:	d004      	beq.n	80144f8 <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
 80144ee:	f001 fd17 	bl	8015f20 <free>
        (*ca_dev)->mIface = NULL;
 80144f2:	2200      	movs	r2, #0
 80144f4:	6823      	ldr	r3, [r4, #0]
 80144f6:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
 80144f8:	6820      	ldr	r0, [r4, #0]
 80144fa:	f001 fd11 	bl	8015f20 <free>
    *ca_dev = NULL;
 80144fe:	2300      	movs	r3, #0
 8014500:	6023      	str	r3, [r4, #0]
}
 8014502:	bd10      	pop	{r4, pc}

08014504 <atinit>:
 *         be called instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atinit(ATCAIface ca_iface)
{
 8014504:	b513      	push	{r0, r1, r4, lr}
 8014506:	0004      	movs	r4, r0
    ATCA_STATUS status = hal_iface_init(ca_iface->mIfaceCFG, hal);
 8014508:	a901      	add	r1, sp, #4
 801450a:	6840      	ldr	r0, [r0, #4]
 801450c:	f000 fa74 	bl	80149f8 <hal_iface_init>
    if (ATCA_SUCCESS == status)
 8014510:	2800      	cmp	r0, #0
 8014512:	d11b      	bne.n	801454c <atinit+0x48>
        ca_iface->atinit     = (*hal)->halinit;
 8014514:	9801      	ldr	r0, [sp, #4]

    status = _atinit(ca_iface, &hal);

    if (ATCA_SUCCESS == status)
    {
        status = ca_iface->atinit(hal, ca_iface->mIfaceCFG);
 8014516:	6861      	ldr	r1, [r4, #4]
        ca_iface->atpostinit = (*hal)->halpostinit;
 8014518:	6842      	ldr	r2, [r0, #4]
        ca_iface->atinit     = (*hal)->halinit;
 801451a:	6803      	ldr	r3, [r0, #0]
        ca_iface->atpostinit = (*hal)->halpostinit;
 801451c:	60e2      	str	r2, [r4, #12]
        ca_iface->atsend     = (*hal)->halsend;
 801451e:	6882      	ldr	r2, [r0, #8]
        ca_iface->atinit     = (*hal)->halinit;
 8014520:	60a3      	str	r3, [r4, #8]
        ca_iface->atsend     = (*hal)->halsend;
 8014522:	6122      	str	r2, [r4, #16]
        ca_iface->atreceive  = (*hal)->halreceive;
 8014524:	68c2      	ldr	r2, [r0, #12]
 8014526:	6162      	str	r2, [r4, #20]
        ca_iface->atwake     = (*hal)->halwake;
 8014528:	6902      	ldr	r2, [r0, #16]
 801452a:	61a2      	str	r2, [r4, #24]
        ca_iface->atsleep    = (*hal)->halsleep;
 801452c:	6982      	ldr	r2, [r0, #24]
 801452e:	6222      	str	r2, [r4, #32]
        ca_iface->atidle     = (*hal)->halidle;
 8014530:	6942      	ldr	r2, [r0, #20]
 8014532:	61e2      	str	r2, [r4, #28]
        ca_iface->hal_data   = (*hal)->hal_data;
 8014534:	6a02      	ldr	r2, [r0, #32]
 8014536:	6262      	str	r2, [r4, #36]	; 0x24
        status = ca_iface->atinit(hal, ca_iface->mIfaceCFG);
 8014538:	4798      	blx	r3
    }
    if (status == ATCA_SUCCESS)
 801453a:	2800      	cmp	r0, #0
 801453c:	d106      	bne.n	801454c <atinit+0x48>
    {
        ca_iface->hal_data = hal->hal_data;
 801453e:	9b01      	ldr	r3, [sp, #4]
 8014540:	6a1a      	ldr	r2, [r3, #32]
 8014542:	6262      	str	r2, [r4, #36]	; 0x24
        hal->hal_data = NULL;
 8014544:	6218      	str	r0, [r3, #32]

        // Perform the post init
        status = ca_iface->atpostinit(ca_iface);
 8014546:	0020      	movs	r0, r4
 8014548:	68e3      	ldr	r3, [r4, #12]
 801454a:	4798      	blx	r3
    }

    return status;
}
 801454c:	bd16      	pop	{r1, r2, r4, pc}

0801454e <initATCAIface>:
{
 801454e:	0003      	movs	r3, r0
 8014550:	b510      	push	{r4, lr}
        return ATCA_BAD_PARAM;
 8014552:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
 8014554:	2b00      	cmp	r3, #0
 8014556:	d007      	beq.n	8014568 <initATCAIface+0x1a>
 8014558:	2900      	cmp	r1, #0
 801455a:	d005      	beq.n	8014568 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
 801455c:	781a      	ldrb	r2, [r3, #0]
    status = atinit(ca_iface);
 801455e:	0008      	movs	r0, r1
    ca_iface->mType = cfg->iface_type;
 8014560:	700a      	strb	r2, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
 8014562:	604b      	str	r3, [r1, #4]
    status = atinit(ca_iface);
 8014564:	f7ff ffce 	bl	8014504 <atinit>
}
 8014568:	bd10      	pop	{r4, pc}

0801456a <atsend>:
 * \param[in] txdata         Data to be transmitted to the device.
 * \param[in] txlength       Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t word_address, uint8_t *txdata, int txlength)
{
 801456a:	b570      	push	{r4, r5, r6, lr}
 801456c:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 801456e:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 8014570:	2c00      	cmp	r4, #0
 8014572:	d005      	beq.n	8014580 <atsend+0x16>
    }

    if (ca_iface->atsend)
 8014574:	6925      	ldr	r5, [r4, #16]
    {
        return ca_iface->atsend(ca_iface, word_address, txdata, txlength);
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 8014576:	301b      	adds	r0, #27
    if (ca_iface->atsend)
 8014578:	2d00      	cmp	r5, #0
 801457a:	d001      	beq.n	8014580 <atsend+0x16>
        return ca_iface->atsend(ca_iface, word_address, txdata, txlength);
 801457c:	0020      	movs	r0, r4
 801457e:	47a8      	blx	r5
    }
}
 8014580:	bd70      	pop	{r4, r5, r6, pc}

08014582 <atreceive>:
 * \param[in,out] rxlength       As input, the size of the rxdata buffer.
 *                               As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength)
{
 8014582:	b570      	push	{r4, r5, r6, lr}
 8014584:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 8014586:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 8014588:	2c00      	cmp	r4, #0
 801458a:	d005      	beq.n	8014598 <atreceive+0x16>
    }

    if (ca_iface->atreceive)
 801458c:	6965      	ldr	r5, [r4, #20]
    {
        return ca_iface->atreceive(ca_iface, word_address, rxdata, rxlength);
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 801458e:	301b      	adds	r0, #27
    if (ca_iface->atreceive)
 8014590:	2d00      	cmp	r5, #0
 8014592:	d001      	beq.n	8014598 <atreceive+0x16>
        return ca_iface->atreceive(ca_iface, word_address, rxdata, rxlength);
 8014594:	0020      	movs	r0, r4
 8014596:	47a8      	blx	r5
    }
}
 8014598:	bd70      	pop	{r4, r5, r6, pc}

0801459a <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
 801459a:	b510      	push	{r4, lr}
 801459c:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 801459e:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 80145a0:	2c00      	cmp	r4, #0
 80145a2:	d00d      	beq.n	80145c0 <atwake+0x26>
    }

    if (ca_iface->atwake)
 80145a4:	69a3      	ldr	r3, [r4, #24]
        }
        return status;
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 80145a6:	301b      	adds	r0, #27
    if (ca_iface->atwake)
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d009      	beq.n	80145c0 <atwake+0x26>
        ATCA_STATUS status = ca_iface->atwake(ca_iface);
 80145ac:	0020      	movs	r0, r4
 80145ae:	4798      	blx	r3
        if (ATCA_WAKE_FAILED == status)
 80145b0:	28d0      	cmp	r0, #208	; 0xd0
 80145b2:	d105      	bne.n	80145c0 <atwake+0x26>
            atca_delay_ms(ATCA_POST_DELAY_MSEC);
 80145b4:	38b7      	subs	r0, #183	; 0xb7
 80145b6:	f7fb fa39 	bl	800fa2c <hal_delay_ms>
            status = ca_iface->atwake(ca_iface);
 80145ba:	0020      	movs	r0, r4
 80145bc:	69a3      	ldr	r3, [r4, #24]
 80145be:	4798      	blx	r3
    }
}
 80145c0:	bd10      	pop	{r4, pc}

080145c2 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
 80145c2:	b510      	push	{r4, lr}
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 80145c4:	24e2      	movs	r4, #226	; 0xe2
    if (!ca_iface)
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d008      	beq.n	80145dc <atidle+0x1a>
    }

    if (ca_iface->atidle)
 80145ca:	69c3      	ldr	r3, [r0, #28]
        atca_delay_ms(1);
        return status;
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 80145cc:	341b      	adds	r4, #27
    if (ca_iface->atidle)
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d004      	beq.n	80145dc <atidle+0x1a>
        ATCA_STATUS status = ca_iface->atidle(ca_iface);
 80145d2:	4798      	blx	r3
 80145d4:	0004      	movs	r4, r0
        atca_delay_ms(1);
 80145d6:	2001      	movs	r0, #1
 80145d8:	f7fb fa28 	bl	800fa2c <hal_delay_ms>
    }
}
 80145dc:	0020      	movs	r0, r4
 80145de:	bd10      	pop	{r4, pc}

080145e0 <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
 80145e0:	0003      	movs	r3, r0
 80145e2:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
 80145e4:	20e2      	movs	r0, #226	; 0xe2
    if (ca_iface == NULL)
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d003      	beq.n	80145f2 <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
 80145ea:	7818      	ldrb	r0, [r3, #0]
 80145ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80145ee:	f000 fa15 	bl	8014a1c <hal_iface_release>
}
 80145f2:	bd10      	pop	{r4, pc}

080145f4 <calib_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
 80145f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f6:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;
 80145f8:	2003      	movs	r0, #3
{
 80145fa:	9c06      	ldr	r4, [sp, #24]
    uint8_t mem_zone = zone & 0x03;
 80145fc:	4028      	ands	r0, r5

    if (addr == NULL)
 80145fe:	2c00      	cmp	r4, #0
 8014600:	d103      	bne.n	801460a <calib_get_addr+0x16>
    {
        return ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 8014602:	20e2      	movs	r0, #226	; 0xe2
 8014604:	f7ff ff15 	bl	8014432 <atca_trace>
        }
    }
    while (0);

    return status;
}
 8014608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
 801460a:	2803      	cmp	r0, #3
 801460c:	d0f9      	beq.n	8014602 <calib_get_addr+0xe>
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
 801460e:	2602      	movs	r6, #2
 8014610:	0028      	movs	r0, r5
            *addr |= offset;
 8014612:	2707      	movs	r7, #7
 8014614:	4030      	ands	r0, r6
 8014616:	403b      	ands	r3, r7
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
 8014618:	4235      	tst	r5, r6
 801461a:	d103      	bne.n	8014624 <calib_get_addr+0x30>
            *addr = block << 3;
 801461c:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
 801461e:	4313      	orrs	r3, r2
 8014620:	8023      	strh	r3, [r4, #0]
 8014622:	e7f1      	b.n	8014608 <calib_get_addr+0x14>
            *addr = slot << 3;
 8014624:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
 8014626:	430b      	orrs	r3, r1
            *addr |= block << 8;
 8014628:	0212      	lsls	r2, r2, #8
 801462a:	4313      	orrs	r3, r2
    return status;
 801462c:	2000      	movs	r0, #0
            *addr |= block << 8;
 801462e:	8023      	strh	r3, [r4, #0]
 8014630:	e7ea      	b.n	8014608 <calib_get_addr+0x14>

08014632 <calib_get_zone_size>:
 * \param[out] size    Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_get_zone_size(ATCADevice device, uint8_t zone, uint16_t slot, size_t* size)
{
 8014632:	b510      	push	{r4, lr}
 8014634:	0004      	movs	r4, r0
 8014636:	0008      	movs	r0, r1
    ATCA_STATUS status = ATCA_SUCCESS;

    if ((device == NULL) || (size == NULL))
 8014638:	2c00      	cmp	r4, #0
 801463a:	d001      	beq.n	8014640 <calib_get_zone_size+0xe>
 801463c:	2b00      	cmp	r3, #0
 801463e:	d103      	bne.n	8014648 <calib_get_zone_size+0x16>
        switch (zone)
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_TRACE(ATCA_BAD_PARAM, "Invalid zone received"); break;
 8014640:	20e2      	movs	r0, #226	; 0xe2
 8014642:	f7ff fef6 	bl	8014432 <atca_trace>
        default: status = ATCA_TRACE(ATCA_BAD_PARAM, "Invalid zone received"); break;
        }
    }

    return status;
}
 8014646:	bd10      	pop	{r4, pc}
    if (device->mIface->mIfaceCFG->devtype == ATSHA204A)
 8014648:	6861      	ldr	r1, [r4, #4]
 801464a:	6849      	ldr	r1, [r1, #4]
 801464c:	7849      	ldrb	r1, [r1, #1]
 801464e:	2900      	cmp	r1, #0
 8014650:	d10d      	bne.n	801466e <calib_get_zone_size+0x3c>
        switch (zone)
 8014652:	2801      	cmp	r0, #1
 8014654:	d007      	beq.n	8014666 <calib_get_zone_size+0x34>
 8014656:	2802      	cmp	r0, #2
 8014658:	d007      	beq.n	801466a <calib_get_zone_size+0x38>
        case ATCA_ZONE_CONFIG: *size = 88; break;
 801465a:	2258      	movs	r2, #88	; 0x58
        switch (zone)
 801465c:	2800      	cmp	r0, #0
 801465e:	d1ef      	bne.n	8014640 <calib_get_zone_size+0xe>
    ATCA_STATUS status = ATCA_SUCCESS;
 8014660:	2000      	movs	r0, #0
                *size = 72;
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	e7ef      	b.n	8014646 <calib_get_zone_size+0x14>
        case ATCA_ZONE_OTP:    *size = 64; break;
 8014666:	2240      	movs	r2, #64	; 0x40
 8014668:	e7fa      	b.n	8014660 <calib_get_zone_size+0x2e>
        case ATCA_ZONE_DATA:   *size = 32; break;
 801466a:	2220      	movs	r2, #32
 801466c:	e7f8      	b.n	8014660 <calib_get_zone_size+0x2e>
    else if (device->mIface->mIfaceCFG->devtype == ATSHA206A)
 801466e:	2904      	cmp	r1, #4
 8014670:	d104      	bne.n	801467c <calib_get_zone_size+0x4a>
        switch (zone)
 8014672:	2801      	cmp	r0, #1
 8014674:	d1ef      	bne.n	8014656 <calib_get_zone_size+0x24>
        case ATCA_ZONE_OTP:    *size = 0; break;
 8014676:	2000      	movs	r0, #0
 8014678:	6018      	str	r0, [r3, #0]
 801467a:	e7e4      	b.n	8014646 <calib_get_zone_size+0x14>
        switch (zone)
 801467c:	2801      	cmp	r0, #1
 801467e:	d0f2      	beq.n	8014666 <calib_get_zone_size+0x34>
 8014680:	2802      	cmp	r0, #2
 8014682:	d004      	beq.n	801468e <calib_get_zone_size+0x5c>
 8014684:	2800      	cmp	r0, #0
 8014686:	d1db      	bne.n	8014640 <calib_get_zone_size+0xe>
        case ATCA_ZONE_CONFIG: *size = 128; break;
 8014688:	2280      	movs	r2, #128	; 0x80
 801468a:	601a      	str	r2, [r3, #0]
 801468c:	e7db      	b.n	8014646 <calib_get_zone_size+0x14>
            if (slot < 8)
 801468e:	2a07      	cmp	r2, #7
 8014690:	d801      	bhi.n	8014696 <calib_get_zone_size+0x64>
                *size = 36;
 8014692:	2224      	movs	r2, #36	; 0x24
 8014694:	e7e4      	b.n	8014660 <calib_get_zone_size+0x2e>
            else if (slot == 8)
 8014696:	2a08      	cmp	r2, #8
 8014698:	d102      	bne.n	80146a0 <calib_get_zone_size+0x6e>
                *size = 416;
 801469a:	3299      	adds	r2, #153	; 0x99
 801469c:	32ff      	adds	r2, #255	; 0xff
 801469e:	e7df      	b.n	8014660 <calib_get_zone_size+0x2e>
            else if (slot < 16)
 80146a0:	2a0f      	cmp	r2, #15
 80146a2:	d8cd      	bhi.n	8014640 <calib_get_zone_size+0xe>
                *size = 72;
 80146a4:	2248      	movs	r2, #72	; 0x48
 80146a6:	e7db      	b.n	8014660 <calib_get_zone_size+0x2e>

080146a8 <atCRC>:
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
 80146a8:	180b      	adds	r3, r1, r0
 80146aa:	469c      	mov	ip, r3
    uint16_t crc_register = 0;
 80146ac:	2300      	movs	r3, #0
{
 80146ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    for (counter = 0; counter < length; counter++)
 80146b0:	458c      	cmp	ip, r1
 80146b2:	d103      	bne.n	80146bc <atCRC+0x14>
            {
                crc_register ^= polynom;
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
 80146b4:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
 80146b6:	0a1b      	lsrs	r3, r3, #8
 80146b8:	7053      	strb	r3, [r2, #1]
}
 80146ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 80146bc:	7808      	ldrb	r0, [r1, #0]
 80146be:	2408      	movs	r4, #8
 80146c0:	9001      	str	r0, [sp, #4]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80146c2:	2001      	movs	r0, #1
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 80146c4:	0005      	movs	r5, r0
 80146c6:	9e01      	ldr	r6, [sp, #4]
            crc_bit = crc_register >> 15;
 80146c8:	0bdf      	lsrs	r7, r3, #15
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 80146ca:	4035      	ands	r5, r6
 80146cc:	1e6e      	subs	r6, r5, #1
 80146ce:	41b5      	sbcs	r5, r6
            crc_register <<= 1;
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	b29b      	uxth	r3, r3
            if (data_bit != crc_bit)
 80146d4:	42bd      	cmp	r5, r7
 80146d6:	d002      	beq.n	80146de <atCRC+0x36>
                crc_register ^= polynom;
 80146d8:	4d04      	ldr	r5, [pc, #16]	; (80146ec <atCRC+0x44>)
 80146da:	406b      	eors	r3, r5
 80146dc:	b29b      	uxth	r3, r3
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80146de:	0040      	lsls	r0, r0, #1
 80146e0:	3c01      	subs	r4, #1
 80146e2:	b2c0      	uxtb	r0, r0
 80146e4:	2c00      	cmp	r4, #0
 80146e6:	d1ed      	bne.n	80146c4 <atCRC+0x1c>
    for (counter = 0; counter < length; counter++)
 80146e8:	3101      	adds	r1, #1
 80146ea:	e7e1      	b.n	80146b0 <atCRC+0x8>
 80146ec:	ffff8005 	.word	0xffff8005

080146f0 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
 80146f0:	b510      	push	{r4, lr}

    packet->param2 = ATCA_UINT16_HOST_TO_LE(packet->param2);

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
 80146f2:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
 80146f4:	7840      	ldrb	r0, [r0, #1]
 80146f6:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
 80146f8:	b2c0      	uxtb	r0, r0
 80146fa:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
 80146fc:	f7ff ffd4 	bl	80146a8 <atCRC>
}
 8014700:	bd10      	pop	{r4, pc}

08014702 <atRead>:
    packet->opcode = ATCA_READ;
 8014702:	2302      	movs	r3, #2
{
 8014704:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
 8014706:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
 8014708:	3305      	adds	r3, #5
{
 801470a:	0008      	movs	r0, r1
    packet->txsize = READ_COUNT;
 801470c:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
 801470e:	f7ff ffef 	bl	80146f0 <atCalcCrc>
}
 8014712:	2000      	movs	r0, #0
 8014714:	bd10      	pop	{r4, pc}

08014716 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
 8014716:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
 8014718:	7805      	ldrb	r5, [r0, #0]
{
 801471a:	0004      	movs	r4, r0

    count -= ATCA_CRC_SIZE;
 801471c:	3d02      	subs	r5, #2
    atCRC(count, response, crc);
 801471e:	b2ed      	uxtb	r5, r5
 8014720:	0001      	movs	r1, r0
 8014722:	aa01      	add	r2, sp, #4
 8014724:	0028      	movs	r0, r5
 8014726:	f7ff ffbf 	bl	80146a8 <atCRC>

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
 801472a:	466b      	mov	r3, sp
 801472c:	791a      	ldrb	r2, [r3, #4]
 801472e:	5d63      	ldrb	r3, [r4, r5]
 8014730:	20e5      	movs	r0, #229	; 0xe5
 8014732:	429a      	cmp	r2, r3
 8014734:	d106      	bne.n	8014744 <atCheckCrc+0x2e>
 8014736:	466b      	mov	r3, sp
 8014738:	1964      	adds	r4, r4, r5
 801473a:	795a      	ldrb	r2, [r3, #5]
 801473c:	7863      	ldrb	r3, [r4, #1]
 801473e:	429a      	cmp	r2, r3
 8014740:	d100      	bne.n	8014744 <atCheckCrc+0x2e>
 8014742:	2000      	movs	r0, #0
}
 8014744:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014746 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
 8014746:	b500      	push	{lr}
    if (data[0] == 0x04)        // error packets are always 4 bytes long
 8014748:	7802      	ldrb	r2, [r0, #0]
{
 801474a:	0003      	movs	r3, r0
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
 801474c:	2000      	movs	r0, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
 801474e:	2a04      	cmp	r2, #4
 8014750:	d10e      	bne.n	8014770 <isATCAError+0x2a>
        switch (data[1])
 8014752:	7858      	ldrb	r0, [r3, #1]
 8014754:	2811      	cmp	r0, #17
 8014756:	d80c      	bhi.n	8014772 <isATCAError+0x2c>
 8014758:	f7eb fce8 	bl	800012c <__gnu_thumb1_case_uqi>
 801475c:	0f1b090a 	.word	0x0f1b090a
 8014760:	131b111b 	.word	0x131b111b
 8014764:	1b1b1b15 	.word	0x1b1b1b15
 8014768:	171b1b1b 	.word	0x171b1b1b
 801476c:	191b      	.short	0x191b
 801476e:	20d1      	movs	r0, #209	; 0xd1
    }
}
 8014770:	bd00      	pop	{pc}
        switch (data[1])
 8014772:	28ff      	cmp	r0, #255	; 0xff
 8014774:	d10d      	bne.n	8014792 <isATCAError+0x4c>
            return ATCA_STATUS_CRC;
 8014776:	382b      	subs	r0, #43	; 0x2b
 8014778:	e7fa      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_PARSE_ERROR;
 801477a:	20d2      	movs	r0, #210	; 0xd2
 801477c:	e7f8      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_STATUS_ECC;
 801477e:	20d6      	movs	r0, #214	; 0xd6
 8014780:	e7f6      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_STATUS_SELFTEST_ERROR;
 8014782:	20d7      	movs	r0, #215	; 0xd7
 8014784:	e7f4      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_HEALTH_TEST_ERROR;
 8014786:	20fa      	movs	r0, #250	; 0xfa
 8014788:	e7f2      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_EXECUTION_ERROR;
 801478a:	20f4      	movs	r0, #244	; 0xf4
 801478c:	e7f0      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_WAKE_SUCCESS;
 801478e:	20f3      	movs	r0, #243	; 0xf3
 8014790:	e7ee      	b.n	8014770 <isATCAError+0x2a>
            return ATCA_GEN_FAIL;
 8014792:	20e1      	movs	r0, #225	; 0xe1
 8014794:	e7ec      	b.n	8014770 <isATCAError+0x2a>
	...

08014798 <calib_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_execute_command(ATCAPacket* packet, ATCADevice device)
{
 8014798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801479a:	0006      	movs	r6, r0
 801479c:	b085      	sub	sp, #20
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
 801479e:	6848      	ldr	r0, [r1, #4]
{
 80147a0:	000d      	movs	r5, r1
        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
 80147a2:	f7ff fefa 	bl	801459a <atwake>
 80147a6:	1e04      	subs	r4, r0, #0
 80147a8:	d12a      	bne.n	8014800 <calib_execute_command+0x68>
        {
            break;
        }

        if (ATCA_I2C_IFACE == device->mIface->mIfaceCFG->iface_type)
 80147aa:	6868      	ldr	r0, [r5, #4]
    uint8_t word_address = 0xFF;
 80147ac:	21ff      	movs	r1, #255	; 0xff
        if (ATCA_I2C_IFACE == device->mIface->mIfaceCFG->iface_type)
 80147ae:	6843      	ldr	r3, [r0, #4]
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d100      	bne.n	80147b8 <calib_execute_command+0x20>
        {
            word_address = 0x03; // insert the Word Address Value, Command token
 80147b6:	39fc      	subs	r1, #252	; 0xfc
        }

        // send the command
        if ((status = atsend(device->mIface, word_address, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
 80147b8:	0032      	movs	r2, r6
 80147ba:	7873      	ldrb	r3, [r6, #1]
 80147bc:	f7ff fed5 	bl	801456a <atsend>
 80147c0:	1e04      	subs	r4, r0, #0
 80147c2:	d11d      	bne.n	8014800 <calib_execute_command+0x68>
        {
            break;
        }

        // Delay for execution time or initial wait before polling
        atca_delay_ms(execution_or_wait_time);
 80147c4:	2001      	movs	r0, #1
 80147c6:	f7fb f931 	bl	800fa2c <hal_delay_ms>
 80147ca:	4b19      	ldr	r3, [pc, #100]	; (8014830 <calib_execute_command+0x98>)
 80147cc:	9301      	str	r3, [sp, #4]

        do
        {
            memset(packet->data, 0, sizeof(packet->data));
 80147ce:	1db7      	adds	r7, r6, #6
 80147d0:	22c0      	movs	r2, #192	; 0xc0
 80147d2:	2100      	movs	r1, #0
 80147d4:	0038      	movs	r0, r7
 80147d6:	f001 fbc4 	bl	8015f62 <memset>
            // receive the response
            rxsize = sizeof(packet->data);
 80147da:	22c0      	movs	r2, #192	; 0xc0
 80147dc:	ab02      	add	r3, sp, #8
 80147de:	80da      	strh	r2, [r3, #6]
            if ((status = atreceive(device->mIface, 0, packet->data, &rxsize)) == ATCA_SUCCESS)
 80147e0:	2100      	movs	r1, #0
 80147e2:	003a      	movs	r2, r7
 80147e4:	6868      	ldr	r0, [r5, #4]
 80147e6:	3306      	adds	r3, #6
 80147e8:	f7ff fecb 	bl	8014582 <atreceive>
 80147ec:	1e04      	subs	r4, r0, #0
 80147ee:	d011      	beq.n	8014814 <calib_execute_command+0x7c>
                break;
            }

#ifndef ATCA_NO_POLL
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
 80147f0:	2002      	movs	r0, #2
 80147f2:	f7fb f91b 	bl	800fa2c <hal_delay_ms>
#endif
        }
        while (max_delay_count-- > 0);
 80147f6:	9b01      	ldr	r3, [sp, #4]
 80147f8:	3b01      	subs	r3, #1
 80147fa:	9301      	str	r3, [sp, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d1e6      	bne.n	80147ce <calib_execute_command+0x36>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
 8014800:	6868      	ldr	r0, [r5, #4]
 8014802:	f7ff fede 	bl	80145c2 <atidle>
    return status;
 8014806:	0020      	movs	r0, r4
 8014808:	b005      	add	sp, #20
 801480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                status = ATCA_RX_NO_RESPONSE;
 801480c:	4263      	negs	r3, r4
 801480e:	415c      	adcs	r4, r3
 8014810:	34e6      	adds	r4, #230	; 0xe6
 8014812:	e7f5      	b.n	8014800 <calib_execute_command+0x68>
        if (rxsize < 4)
 8014814:	ab02      	add	r3, sp, #8
 8014816:	88dc      	ldrh	r4, [r3, #6]
 8014818:	2c03      	cmp	r4, #3
 801481a:	d9f7      	bls.n	801480c <calib_execute_command+0x74>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
 801481c:	0038      	movs	r0, r7
 801481e:	f7ff ff7a 	bl	8014716 <atCheckCrc>
 8014822:	1e04      	subs	r4, r0, #0
 8014824:	d1ec      	bne.n	8014800 <calib_execute_command+0x68>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
 8014826:	0038      	movs	r0, r7
 8014828:	f7ff ff8d 	bl	8014746 <isATCAError>
 801482c:	0004      	movs	r4, r0
 801482e:	e7e7      	b.n	8014800 <calib_execute_command+0x68>
 8014830:	000004e3 	.word	0x000004e3

08014834 <calib_read_zone>:
 *  \param[in]  len      Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_zone(ATCADevice device, uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
 8014834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014836:	b0b7      	sub	sp, #220	; 0xdc
 8014838:	0005      	movs	r5, r0
 801483a:	000f      	movs	r7, r1
 801483c:	a83e      	add	r0, sp, #248	; 0xf8
 801483e:	0011      	movs	r1, r2
 8014840:	001a      	movs	r2, r3
 8014842:	ab3c      	add	r3, sp, #240	; 0xf0
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	7806      	ldrb	r6, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if ((device == NULL) || (data == NULL))
 8014848:	2d00      	cmp	r5, #0
 801484a:	d002      	beq.n	8014852 <calib_read_zone+0x1e>
 801484c:	983d      	ldr	r0, [sp, #244]	; 0xf4
 801484e:	2800      	cmp	r0, #0
 8014850:	d106      	bne.n	8014860 <calib_read_zone+0x2c>
        {
            status = ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 8014852:	20e2      	movs	r0, #226	; 0xe2
 8014854:	f7ff fded 	bl	8014432 <atca_trace>
 8014858:	0004      	movs	r4, r0
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
 801485a:	0020      	movs	r0, r4
 801485c:	b037      	add	sp, #220	; 0xdc
 801485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (len != 4 && len != 32)
 8014860:	2e04      	cmp	r6, #4
 8014862:	d001      	beq.n	8014868 <calib_read_zone+0x34>
 8014864:	2e20      	cmp	r6, #32
 8014866:	d1f4      	bne.n	8014852 <calib_read_zone+0x1e>
        if ((status = calib_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
 8014868:	200e      	movs	r0, #14
 801486a:	4468      	add	r0, sp
 801486c:	9000      	str	r0, [sp, #0]
 801486e:	0038      	movs	r0, r7
 8014870:	f7ff fec0 	bl	80145f4 <calib_get_addr>
 8014874:	1e04      	subs	r4, r0, #0
 8014876:	d003      	beq.n	8014880 <calib_read_zone+0x4c>
            ATCA_TRACE(status, "calib_read_zone - execution failed");
 8014878:	0020      	movs	r0, r4
 801487a:	f7ff fdda 	bl	8014432 <atca_trace>
            break;
 801487e:	e7ec      	b.n	801485a <calib_read_zone+0x26>
        if (len == ATCA_BLOCK_SIZE)
 8014880:	2e20      	cmp	r6, #32
 8014882:	d101      	bne.n	8014888 <calib_read_zone+0x54>
            zone = zone | ATCA_ZONE_READWRITE_32;
 8014884:	2380      	movs	r3, #128	; 0x80
 8014886:	431f      	orrs	r7, r3
        packet.param1 = zone;
 8014888:	466b      	mov	r3, sp
        packet.param2 = addr;
 801488a:	466a      	mov	r2, sp
        packet.param1 = zone;
 801488c:	74df      	strb	r7, [r3, #19]
        packet.param2 = addr;
 801488e:	89db      	ldrh	r3, [r3, #14]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
 8014890:	6828      	ldr	r0, [r5, #0]
 8014892:	a904      	add	r1, sp, #16
        packet.param2 = addr;
 8014894:	8293      	strh	r3, [r2, #20]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
 8014896:	f7ff ff34 	bl	8014702 <atRead>
 801489a:	1e04      	subs	r4, r0, #0
 801489c:	d1ec      	bne.n	8014878 <calib_read_zone+0x44>
        if ((status = atca_execute_command(&packet, device)) != ATCA_SUCCESS)
 801489e:	0029      	movs	r1, r5
 80148a0:	a804      	add	r0, sp, #16
 80148a2:	f7ff ff79 	bl	8014798 <calib_execute_command>
 80148a6:	1e04      	subs	r4, r0, #0
 80148a8:	d1e6      	bne.n	8014878 <calib_read_zone+0x44>
        memcpy(data, &packet.data[1], len);
 80148aa:	2117      	movs	r1, #23
 80148ac:	0032      	movs	r2, r6
 80148ae:	983d      	ldr	r0, [sp, #244]	; 0xf4
 80148b0:	4469      	add	r1, sp
 80148b2:	f001 fb4d 	bl	8015f50 <memcpy>
    return status;
 80148b6:	e7d0      	b.n	801485a <calib_read_zone+0x26>

080148b8 <calib_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_serial_number(ATCADevice device, uint8_t* serial_number)
{
 80148b8:	b570      	push	{r4, r5, r6, lr}
 80148ba:	000d      	movs	r5, r1
 80148bc:	b08c      	sub	sp, #48	; 0x30
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
 80148be:	2900      	cmp	r1, #0
 80148c0:	d106      	bne.n	80148d0 <calib_read_serial_number+0x18>
    {
        return ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 80148c2:	20e2      	movs	r0, #226	; 0xe2
 80148c4:	f7ff fdb5 	bl	8014432 <atca_trace>
 80148c8:	0004      	movs	r4, r0
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
 80148ca:	0020      	movs	r0, r4
 80148cc:	b00c      	add	sp, #48	; 0x30
 80148ce:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = calib_read_zone(device, ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
 80148d0:	2100      	movs	r1, #0
 80148d2:	2320      	movs	r3, #32
 80148d4:	ae04      	add	r6, sp, #16
 80148d6:	9302      	str	r3, [sp, #8]
 80148d8:	000a      	movs	r2, r1
 80148da:	000b      	movs	r3, r1
 80148dc:	9601      	str	r6, [sp, #4]
 80148de:	9100      	str	r1, [sp, #0]
 80148e0:	f7ff ffa8 	bl	8014834 <calib_read_zone>
 80148e4:	1e04      	subs	r4, r0, #0
 80148e6:	d002      	beq.n	80148ee <calib_read_serial_number+0x36>
            ATCA_TRACE(status, "calib_read_zone - failed");
 80148e8:	f7ff fda3 	bl	8014432 <atca_trace>
            break;
 80148ec:	e7ed      	b.n	80148ca <calib_read_serial_number+0x12>
        memcpy(&serial_number[0], &read_buf[0], 4);
 80148ee:	0031      	movs	r1, r6
 80148f0:	2204      	movs	r2, #4
 80148f2:	0028      	movs	r0, r5
 80148f4:	f001 fb2c 	bl	8015f50 <memcpy>
        memcpy(&serial_number[4], &read_buf[8], 5);
 80148f8:	2205      	movs	r2, #5
 80148fa:	1d28      	adds	r0, r5, #4
 80148fc:	a906      	add	r1, sp, #24
 80148fe:	f001 fb27 	bl	8015f50 <memcpy>
 8014902:	e7e2      	b.n	80148ca <calib_read_serial_number+0x12>

08014904 <calib_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_bytes_zone(ATCADevice device, uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
 8014904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014906:	b095      	sub	sp, #84	; 0x54
 8014908:	9307      	str	r3, [sp, #28]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
 801490a:	2300      	movs	r3, #0
{
 801490c:	000f      	movs	r7, r1
 801490e:	9009      	str	r0, [sp, #36]	; 0x24
 8014910:	9208      	str	r2, [sp, #32]
    size_t zone_size = 0;
 8014912:	930b      	str	r3, [sp, #44]	; 0x2c
    uint8_t read_size = ATCA_BLOCK_SIZE;
    size_t read_buf_idx = 0;
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
 8014914:	2902      	cmp	r1, #2
 8014916:	d906      	bls.n	8014926 <calib_read_bytes_zone+0x22>
            ATCA_TRACE(status, "calib_get_zone_size - failed");
            break;
        }
        if (offset + length > zone_size)
        {
            return ATCA_TRACE(ATCA_BAD_PARAM, "Invalid parameter received"); // Can't read past the end of a zone
 8014918:	20e2      	movs	r0, #226	; 0xe2
 801491a:	f7ff fd8a 	bl	8014432 <atca_trace>
 801491e:	0004      	movs	r4, r0
        }
    }
    while (false);

    return status;
}
 8014920:	0020      	movs	r0, r4
 8014922:	b015      	add	sp, #84	; 0x54
 8014924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
 8014926:	2902      	cmp	r1, #2
 8014928:	d102      	bne.n	8014930 <calib_read_bytes_zone+0x2c>
 801492a:	9b08      	ldr	r3, [sp, #32]
 801492c:	2b0f      	cmp	r3, #15
 801492e:	d8f3      	bhi.n	8014918 <calib_read_bytes_zone+0x14>
    if (length == 0)
 8014930:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014932:	2b00      	cmp	r3, #0
 8014934:	d05b      	beq.n	80149ee <calib_read_bytes_zone+0xea>
    if (data == NULL)
 8014936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014938:	2b00      	cmp	r3, #0
 801493a:	d0ed      	beq.n	8014918 <calib_read_bytes_zone+0x14>
        if (ATCA_SUCCESS != (status = calib_get_zone_size(device, zone, slot, &zone_size)))
 801493c:	0039      	movs	r1, r7
 801493e:	9a08      	ldr	r2, [sp, #32]
 8014940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014942:	ab0b      	add	r3, sp, #44	; 0x2c
 8014944:	f7ff fe75 	bl	8014632 <calib_get_zone_size>
 8014948:	0004      	movs	r4, r0
 801494a:	1e05      	subs	r5, r0, #0
 801494c:	d003      	beq.n	8014956 <calib_read_bytes_zone+0x52>
                ATCA_TRACE(status, "calib_read_zone - falied");
 801494e:	0020      	movs	r0, r4
 8014950:	f7ff fd6f 	bl	8014432 <atca_trace>
                break;
 8014954:	e7e4      	b.n	8014920 <calib_read_bytes_zone+0x1c>
        if (offset + length > zone_size)
 8014956:	9a07      	ldr	r2, [sp, #28]
 8014958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801495a:	189b      	adds	r3, r3, r2
 801495c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801495e:	4293      	cmp	r3, r2
 8014960:	d8da      	bhi.n	8014918 <calib_read_bytes_zone+0x14>
        cur_block = offset / ATCA_BLOCK_SIZE;
 8014962:	9b07      	ldr	r3, [sp, #28]
    size_t data_idx = 0;
 8014964:	0006      	movs	r6, r0
        cur_block = offset / ATCA_BLOCK_SIZE;
 8014966:	095b      	lsrs	r3, r3, #5
 8014968:	9306      	str	r3, [sp, #24]
    uint8_t read_size = ATCA_BLOCK_SIZE;
 801496a:	2320      	movs	r3, #32
 801496c:	9305      	str	r3, [sp, #20]
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
 801496e:	9b05      	ldr	r3, [sp, #20]
 8014970:	2b20      	cmp	r3, #32
 8014972:	d10c      	bne.n	801498e <calib_read_bytes_zone+0x8a>
 8014974:	9b06      	ldr	r3, [sp, #24]
 8014976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014978:	015b      	lsls	r3, r3, #5
 801497a:	1ad3      	subs	r3, r2, r3
 801497c:	2b1f      	cmp	r3, #31
 801497e:	d806      	bhi.n	801498e <calib_read_bytes_zone+0x8a>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
 8014980:	9b07      	ldr	r3, [sp, #28]
 8014982:	199d      	adds	r5, r3, r6
 8014984:	2307      	movs	r3, #7
 8014986:	08ad      	lsrs	r5, r5, #2
 8014988:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
 801498a:	3b03      	subs	r3, #3
 801498c:	9305      	str	r3, [sp, #20]
            if (ATCA_SUCCESS != (status = calib_read_zone(device, zone, slot, (uint8_t)cur_block, (uint8_t)cur_offset, read_buf, read_size)))
 801498e:	466b      	mov	r3, sp
 8014990:	9a05      	ldr	r2, [sp, #20]
 8014992:	7e1b      	ldrb	r3, [r3, #24]
 8014994:	9202      	str	r2, [sp, #8]
 8014996:	aa0c      	add	r2, sp, #48	; 0x30
 8014998:	9201      	str	r2, [sp, #4]
 801499a:	b2ea      	uxtb	r2, r5
 801499c:	0039      	movs	r1, r7
 801499e:	9200      	str	r2, [sp, #0]
 80149a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149a2:	9a08      	ldr	r2, [sp, #32]
 80149a4:	f7ff ff46 	bl	8014834 <calib_read_zone>
 80149a8:	0004      	movs	r4, r0
 80149aa:	1e01      	subs	r1, r0, #0
 80149ac:	d1cf      	bne.n	801494e <calib_read_bytes_zone+0x4a>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
 80149ae:	9b06      	ldr	r3, [sp, #24]
            if (read_offset < offset)
 80149b0:	9a07      	ldr	r2, [sp, #28]
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
 80149b2:	00db      	lsls	r3, r3, #3
 80149b4:	195b      	adds	r3, r3, r5
 80149b6:	009b      	lsls	r3, r3, #2
            if (read_offset < offset)
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d900      	bls.n	80149be <calib_read_bytes_zone+0xba>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
 80149bc:	1ad1      	subs	r1, r2, r3
            if (length - data_idx < read_size - read_buf_idx)
 80149be:	9b05      	ldr	r3, [sp, #20]
 80149c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80149c2:	1a5b      	subs	r3, r3, r1
 80149c4:	1b94      	subs	r4, r2, r6
 80149c6:	429c      	cmp	r4, r3
 80149c8:	d900      	bls.n	80149cc <calib_read_bytes_zone+0xc8>
 80149ca:	001c      	movs	r4, r3
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
 80149cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80149ce:	0022      	movs	r2, r4
 80149d0:	1998      	adds	r0, r3, r6
 80149d2:	ab0c      	add	r3, sp, #48	; 0x30
 80149d4:	1859      	adds	r1, r3, r1
 80149d6:	f001 fabb 	bl	8015f50 <memcpy>
            if (read_size == ATCA_BLOCK_SIZE)
 80149da:	9b05      	ldr	r3, [sp, #20]
            data_idx += copy_length;
 80149dc:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
 80149de:	2b20      	cmp	r3, #32
 80149e0:	d107      	bne.n	80149f2 <calib_read_bytes_zone+0xee>
                cur_block += 1;
 80149e2:	9b06      	ldr	r3, [sp, #24]
 80149e4:	3301      	adds	r3, #1
 80149e6:	9306      	str	r3, [sp, #24]
        while (data_idx < length)
 80149e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80149ea:	42b3      	cmp	r3, r6
 80149ec:	d8bf      	bhi.n	801496e <calib_read_bytes_zone+0x6a>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
 80149ee:	2400      	movs	r4, #0
 80149f0:	e796      	b.n	8014920 <calib_read_bytes_zone+0x1c>
                cur_offset += 1;
 80149f2:	3501      	adds	r5, #1
 80149f4:	e7f8      	b.n	80149e8 <calib_read_bytes_zone+0xe4>
	...

080149f8 <hal_iface_init>:
 * \param[in] cfg pointer to ATCAIfaceCfg object
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t **hal)
{
 80149f8:	0003      	movs	r3, r0
    ATCA_STATUS status = ATCA_BAD_PARAM;
 80149fa:	20e2      	movs	r0, #226	; 0xe2

    if (cfg && hal)
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d009      	beq.n	8014a14 <hal_iface_init+0x1c>
 8014a00:	2900      	cmp	r1, #0
 8014a02:	d007      	beq.n	8014a14 <hal_iface_init+0x1c>
    {
        status = hal_iface_get_registered(cfg->iface_type, hal);
 8014a04:	781b      	ldrb	r3, [r3, #0]
    if ((ATCA_UNKNOWN_IFACE > iface_type) && hal)
 8014a06:	2b06      	cmp	r3, #6
 8014a08:	d804      	bhi.n	8014a14 <hal_iface_init+0x1c>
        status = ATCA_SUCCESS;
 8014a0a:	2000      	movs	r0, #0
        *hal = atca_registered_hal_list[iface_type];
 8014a0c:	4a02      	ldr	r2, [pc, #8]	; (8014a18 <hal_iface_init+0x20>)
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	589b      	ldr	r3, [r3, r2]
 8014a12:	600b      	str	r3, [r1, #0]
        }
#endif
    }

    return status;
}
 8014a14:	4770      	bx	lr
 8014a16:	46c0      	nop			; (mov r8, r8)
 8014a18:	20000200 	.word	0x20000200

08014a1c <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
 8014a1c:	0003      	movs	r3, r0
 8014a1e:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_BAD_PARAM;
 8014a20:	20e2      	movs	r0, #226	; 0xe2
    if ((ATCA_UNKNOWN_IFACE > iface_type) && hal)
 8014a22:	2b06      	cmp	r3, #6
 8014a24:	d807      	bhi.n	8014a36 <hal_iface_release+0x1a>

    status = hal_iface_get_registered(iface_type, &hal);

    if (ATCA_SUCCESS == status)
    {
        status = hal->halrelease ? hal->halrelease(hal_data) : ATCA_BAD_PARAM;
 8014a26:	4a04      	ldr	r2, [pc, #16]	; (8014a38 <hal_iface_release+0x1c>)
        *hal = atca_registered_hal_list[iface_type];
 8014a28:	009b      	lsls	r3, r3, #2
        status = hal->halrelease ? hal->halrelease(hal_data) : ATCA_BAD_PARAM;
 8014a2a:	589b      	ldr	r3, [r3, r2]
 8014a2c:	69db      	ldr	r3, [r3, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d001      	beq.n	8014a36 <hal_iface_release+0x1a>
 8014a32:	0008      	movs	r0, r1
 8014a34:	4798      	blx	r3
    }

    return status;
}
 8014a36:	bd10      	pop	{r4, pc}
 8014a38:	20000200 	.word	0x20000200

08014a3c <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8014a3c:	2001      	movs	r0, #1
 8014a3e:	4770      	bx	lr

08014a40 <RadioOnTxTimeoutIrq>:
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014a40:	4b04      	ldr	r3, [pc, #16]	; (8014a54 <RadioOnTxTimeoutIrq+0x14>)
{
 8014a42:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d003      	beq.n	8014a52 <RadioOnTxTimeoutIrq+0x12>
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d000      	beq.n	8014a52 <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 8014a50:	4798      	blx	r3
    }
}
 8014a52:	bd10      	pop	{r4, pc}
 8014a54:	20001b58 	.word	0x20001b58

08014a58 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014a58:	4b04      	ldr	r3, [pc, #16]	; (8014a6c <RadioOnRxTimeoutIrq+0x14>)
{
 8014a5a:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d003      	beq.n	8014a6a <RadioOnRxTimeoutIrq+0x12>
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d000      	beq.n	8014a6a <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 8014a68:	4798      	blx	r3
    }
}
 8014a6a:	bd10      	pop	{r4, pc}
 8014a6c:	20001b58 	.word	0x20001b58

08014a70 <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 8014a70:	2201      	movs	r2, #1
 8014a72:	4b01      	ldr	r3, [pc, #4]	; (8014a78 <RadioOnDioIrq+0x8>)
 8014a74:	701a      	strb	r2, [r3, #0]
}
 8014a76:	4770      	bx	lr
 8014a78:	20001b54 	.word	0x20001b54

08014a7c <RadioStandby>:
{
 8014a7c:	b510      	push	{r4, lr}
    SX126xSetStandby( STDBY_RC );
 8014a7e:	2000      	movs	r0, #0
 8014a80:	f000 fdd2 	bl	8015628 <SX126xSetStandby>
}
 8014a84:	bd10      	pop	{r4, pc}
	...

08014a88 <RadioGetStatus>:
{
 8014a88:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 8014a8a:	f7ef fd53 	bl	8004534 <SX126xGetOperatingMode>
 8014a8e:	1f03      	subs	r3, r0, #4
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	2000      	movs	r0, #0
 8014a94:	2b03      	cmp	r3, #3
 8014a96:	d801      	bhi.n	8014a9c <RadioGetStatus+0x14>
 8014a98:	4a01      	ldr	r2, [pc, #4]	; (8014aa0 <RadioGetStatus+0x18>)
 8014a9a:	5cd0      	ldrb	r0, [r2, r3]
}
 8014a9c:	bd10      	pop	{r4, pc}
 8014a9e:	46c0      	nop			; (mov r8, r8)
 8014aa0:	0801a92c 	.word	0x0801a92c

08014aa4 <RadioSetChannel>:
{
 8014aa4:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 8014aa6:	f000 ff35 	bl	8015914 <SX126xSetRfFrequency>
}
 8014aaa:	bd10      	pop	{r4, pc}

08014aac <RadioRead>:
{
 8014aac:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 8014aae:	b280      	uxth	r0, r0
 8014ab0:	f7ef fe5a 	bl	8004768 <SX126xReadRegister>
}
 8014ab4:	bd10      	pop	{r4, pc}

08014ab6 <RadioWrite>:
{
 8014ab6:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 8014ab8:	b280      	uxth	r0, r0
 8014aba:	f7ef fe19 	bl	80046f0 <SX126xWriteRegister>
}
 8014abe:	bd10      	pop	{r4, pc}

08014ac0 <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8014ac0:	2300      	movs	r3, #0
{
 8014ac2:	b570      	push	{r4, r5, r6, lr}
 8014ac4:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8014ac6:	4910      	ldr	r1, [pc, #64]	; (8014b08 <RadioSend+0x48>)
 8014ac8:	001a      	movs	r2, r3
{
 8014aca:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8014acc:	0008      	movs	r0, r1
 8014ace:	f000 fef9 	bl	80158c4 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8014ad2:	f000 ff5b 	bl	801598c <SX126xGetPacketType>
 8014ad6:	4b0d      	ldr	r3, [pc, #52]	; (8014b0c <RadioSend+0x4c>)
 8014ad8:	2801      	cmp	r0, #1
 8014ada:	d113      	bne.n	8014b04 <RadioSend+0x44>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8014adc:	33c3      	adds	r3, #195	; 0xc3
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8014ade:	701c      	strb	r4, [r3, #0]
    SX126xSetPacketParams( &SX126x.PacketParams );
 8014ae0:	480b      	ldr	r0, [pc, #44]	; (8014b10 <RadioSend+0x50>)
 8014ae2:	f000 fff5 	bl	8015ad0 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	0028      	movs	r0, r5
 8014aea:	0021      	movs	r1, r4
 8014aec:	f000 fdd8 	bl	80156a0 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8014af0:	4c08      	ldr	r4, [pc, #32]	; (8014b14 <RadioSend+0x54>)
 8014af2:	4b09      	ldr	r3, [pc, #36]	; (8014b18 <RadioSend+0x58>)
 8014af4:	0020      	movs	r0, r4
 8014af6:	6819      	ldr	r1, [r3, #0]
 8014af8:	f7f6 ff28 	bl	800b94c <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8014afc:	0020      	movs	r0, r4
 8014afe:	f7f6 fe7f 	bl	800b800 <TimerStart>
}
 8014b02:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8014b04:	33bc      	adds	r3, #188	; 0xbc
 8014b06:	e7ea      	b.n	8014ade <RadioSend+0x1e>
 8014b08:	00000201 	.word	0x00000201
 8014b0c:	20001c90 	.word	0x20001c90
 8014b10:	20001d44 	.word	0x20001d44
 8014b14:	20001d84 	.word	0x20001d84
 8014b18:	20001d80 	.word	0x20001d80

08014b1c <RadioSleep>:
{
 8014b1c:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 8014b1e:	2004      	movs	r0, #4
 8014b20:	f000 fd68 	bl	80155f4 <SX126xSetSleep>
    DelayMs( 2 );
 8014b24:	2002      	movs	r0, #2
 8014b26:	f7f6 fd09 	bl	800b53c <DelayMs>
}
 8014b2a:	bd10      	pop	{r4, pc}

08014b2c <RadioSetRxDutyCycle>:
{
 8014b2c:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8014b2e:	f000 fe21 	bl	8015774 <SX126xSetRxDutyCycle>
}
 8014b32:	bd10      	pop	{r4, pc}

08014b34 <RadioReadBuffer>:
{
 8014b34:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 8014b36:	b280      	uxth	r0, r0
 8014b38:	f7ef fde4 	bl	8004704 <SX126xReadRegisters>
}
 8014b3c:	bd10      	pop	{r4, pc}

08014b3e <RadioWriteBuffer>:
{
 8014b3e:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 8014b40:	b280      	uxth	r0, r0
 8014b42:	f7ef fda7 	bl	8004694 <SX126xWriteRegisters>
}
 8014b46:	bd10      	pop	{r4, pc}

08014b48 <RadioStartCad>:
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014b48:	20c0      	movs	r0, #192	; 0xc0
 8014b4a:	2300      	movs	r3, #0
{
 8014b4c:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014b4e:	0040      	lsls	r0, r0, #1
 8014b50:	001a      	movs	r2, r3
 8014b52:	0001      	movs	r1, r0
 8014b54:	f000 feb6 	bl	80158c4 <SX126xSetDioIrqParams>
    SX126xSetCad( );
 8014b58:	f000 fe21 	bl	801579e <SX126xSetCad>
}
 8014b5c:	bd10      	pop	{r4, pc}
	...

08014b60 <RadioSetTxContinuousWave>:
{
 8014b60:	b570      	push	{r4, r5, r6, lr}
 8014b62:	000d      	movs	r5, r1
 8014b64:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 8014b66:	f000 fed5 	bl	8015914 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8014b6a:	0028      	movs	r0, r5
 8014b6c:	f7ef fe5e 	bl	800482c <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 8014b70:	f000 fe1f 	bl	80157b2 <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 8014b74:	21fa      	movs	r1, #250	; 0xfa
 8014b76:	0089      	lsls	r1, r1, #2
 8014b78:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014b7a:	4c04      	ldr	r4, [pc, #16]	; (8014b8c <RadioSetTxContinuousWave+0x2c>)
 8014b7c:	0020      	movs	r0, r4
 8014b7e:	f7f6 fee5 	bl	800b94c <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8014b82:	0020      	movs	r0, r4
 8014b84:	f7f6 fe3c 	bl	800b800 <TimerStart>
}
 8014b88:	bd70      	pop	{r4, r5, r6, pc}
 8014b8a:	46c0      	nop			; (mov r8, r8)
 8014b8c:	20001d84 	.word	0x20001d84

08014b90 <RadioRssi>:
{
 8014b90:	b510      	push	{r4, lr}
    return SX126xGetRssiInst( );
 8014b92:	f001 f809 	bl	8015ba8 <SX126xGetRssiInst>
 8014b96:	b200      	sxth	r0, r0
}
 8014b98:	bd10      	pop	{r4, pc}

08014b9a <RadioGetWakeupTime>:
{
 8014b9a:	b510      	push	{r4, lr}
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8014b9c:	f7ef fcc3 	bl	8004526 <SX126xGetBoardTcxoWakeupTime>
 8014ba0:	3003      	adds	r0, #3
}
 8014ba2:	bd10      	pop	{r4, pc}

08014ba4 <RadioGetFskBandwidthRegValue>:
{
 8014ba4:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d011      	beq.n	8014bce <RadioGetFskBandwidthRegValue+0x2a>
 8014baa:	4a0a      	ldr	r2, [pc, #40]	; (8014bd4 <RadioGetFskBandwidthRegValue+0x30>)
 8014bac:	2301      	movs	r3, #1
 8014bae:	0011      	movs	r1, r2
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8014bb0:	6814      	ldr	r4, [r2, #0]
 8014bb2:	42a0      	cmp	r0, r4
 8014bb4:	d306      	bcc.n	8014bc4 <RadioGetFskBandwidthRegValue+0x20>
 8014bb6:	6894      	ldr	r4, [r2, #8]
 8014bb8:	42a0      	cmp	r0, r4
 8014bba:	d203      	bcs.n	8014bc4 <RadioGetFskBandwidthRegValue+0x20>
            return FskBandwidths[i+1].RegValue;
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	18cb      	adds	r3, r1, r3
 8014bc0:	7918      	ldrb	r0, [r3, #4]
}
 8014bc2:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	3208      	adds	r2, #8
 8014bc8:	2b16      	cmp	r3, #22
 8014bca:	d1f1      	bne.n	8014bb0 <RadioGetFskBandwidthRegValue+0xc>
    while( 1 );
 8014bcc:	e7fe      	b.n	8014bcc <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 8014bce:	201f      	movs	r0, #31
 8014bd0:	e7f7      	b.n	8014bc2 <RadioGetFskBandwidthRegValue+0x1e>
 8014bd2:	46c0      	nop			; (mov r8, r8)
 8014bd4:	0801a930 	.word	0x0801a930

08014bd8 <RadioSetMaxPayloadLength>:
{
 8014bd8:	b510      	push	{r4, lr}
 8014bda:	4b0a      	ldr	r3, [pc, #40]	; (8014c04 <RadioSetMaxPayloadLength+0x2c>)
    if( modem == MODEM_LORA )
 8014bdc:	2801      	cmp	r0, #1
 8014bde:	d107      	bne.n	8014bf0 <RadioSetMaxPayloadLength+0x18>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8014be0:	4a09      	ldr	r2, [pc, #36]	; (8014c08 <RadioSetMaxPayloadLength+0x30>)
 8014be2:	33c3      	adds	r3, #195	; 0xc3
 8014be4:	7011      	strb	r1, [r2, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8014be6:	4809      	ldr	r0, [pc, #36]	; (8014c0c <RadioSetMaxPayloadLength+0x34>)
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014be8:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8014bea:	f000 ff71 	bl	8015ad0 <SX126xSetPacketParams>
}
 8014bee:	bd10      	pop	{r4, pc}
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8014bf0:	001a      	movs	r2, r3
 8014bf2:	32bb      	adds	r2, #187	; 0xbb
 8014bf4:	7812      	ldrb	r2, [r2, #0]
 8014bf6:	2a01      	cmp	r2, #1
 8014bf8:	d1f9      	bne.n	8014bee <RadioSetMaxPayloadLength+0x16>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014bfa:	4a03      	ldr	r2, [pc, #12]	; (8014c08 <RadioSetMaxPayloadLength+0x30>)
 8014bfc:	33bc      	adds	r3, #188	; 0xbc
 8014bfe:	7011      	strb	r1, [r2, #0]
 8014c00:	e7f1      	b.n	8014be6 <RadioSetMaxPayloadLength+0xe>
 8014c02:	46c0      	nop			; (mov r8, r8)
 8014c04:	20001c90 	.word	0x20001c90
 8014c08:	20000240 	.word	0x20000240
 8014c0c:	20001d44 	.word	0x20001d44

08014c10 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014c10:	2300      	movs	r3, #0
 8014c12:	490e      	ldr	r1, [pc, #56]	; (8014c4c <RadioRx+0x3c>)
{
 8014c14:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014c16:	001a      	movs	r2, r3
{
 8014c18:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014c1a:	0008      	movs	r0, r1
 8014c1c:	f000 fe52 	bl	80158c4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8014c20:	2c00      	cmp	r4, #0
 8014c22:	d007      	beq.n	8014c34 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014c24:	4d0a      	ldr	r5, [pc, #40]	; (8014c50 <RadioRx+0x40>)
 8014c26:	0021      	movs	r1, r4
 8014c28:	0028      	movs	r0, r5
 8014c2a:	f7f6 fe8f 	bl	800b94c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8014c2e:	0028      	movs	r0, r5
 8014c30:	f7f6 fde6 	bl	800b800 <TimerStart>
    if( RxContinuous == true )
 8014c34:	4b07      	ldr	r3, [pc, #28]	; (8014c54 <RadioRx+0x44>)
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d003      	beq.n	8014c44 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8014c3c:	4806      	ldr	r0, [pc, #24]	; (8014c58 <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 8014c3e:	f000 fd37 	bl	80156b0 <SX126xSetRx>
}
 8014c42:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 8014c44:	4b05      	ldr	r3, [pc, #20]	; (8014c5c <RadioRx+0x4c>)
 8014c46:	6818      	ldr	r0, [r3, #0]
 8014c48:	0180      	lsls	r0, r0, #6
 8014c4a:	e7f8      	b.n	8014c3e <RadioRx+0x2e>
 8014c4c:	0000ffff 	.word	0x0000ffff
 8014c50:	20001c78 	.word	0x20001c78
 8014c54:	20001c71 	.word	0x20001c71
 8014c58:	00ffffff 	.word	0x00ffffff
 8014c5c:	20001c74 	.word	0x20001c74

08014c60 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014c60:	2300      	movs	r3, #0
 8014c62:	490e      	ldr	r1, [pc, #56]	; (8014c9c <RadioRxBoosted+0x3c>)
{
 8014c64:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014c66:	001a      	movs	r2, r3
{
 8014c68:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014c6a:	0008      	movs	r0, r1
 8014c6c:	f000 fe2a 	bl	80158c4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8014c70:	2c00      	cmp	r4, #0
 8014c72:	d007      	beq.n	8014c84 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014c74:	4d0a      	ldr	r5, [pc, #40]	; (8014ca0 <RadioRxBoosted+0x40>)
 8014c76:	0021      	movs	r1, r4
 8014c78:	0028      	movs	r0, r5
 8014c7a:	f7f6 fe67 	bl	800b94c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8014c7e:	0028      	movs	r0, r5
 8014c80:	f7f6 fdbe 	bl	800b800 <TimerStart>
    if( RxContinuous == true )
 8014c84:	4b07      	ldr	r3, [pc, #28]	; (8014ca4 <RadioRxBoosted+0x44>)
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d003      	beq.n	8014c94 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8014c8c:	4806      	ldr	r0, [pc, #24]	; (8014ca8 <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 8014c8e:	f000 fd5b 	bl	8015748 <SX126xSetRxBoosted>
}
 8014c92:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 8014c94:	4b05      	ldr	r3, [pc, #20]	; (8014cac <RadioRxBoosted+0x4c>)
 8014c96:	6818      	ldr	r0, [r3, #0]
 8014c98:	0180      	lsls	r0, r0, #6
 8014c9a:	e7f8      	b.n	8014c8e <RadioRxBoosted+0x2e>
 8014c9c:	0000ffff 	.word	0x0000ffff
 8014ca0:	20001c78 	.word	0x20001c78
 8014ca4:	20001c71 	.word	0x20001c71
 8014ca8:	00ffffff 	.word	0x00ffffff
 8014cac:	20001c74 	.word	0x20001c74

08014cb0 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8014cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cb2:	b085      	sub	sp, #20
    CRITICAL_SECTION_BEGIN( );
 8014cb4:	a802      	add	r0, sp, #8
 8014cb6:	f7ef f8ab 	bl	8003e10 <BoardCriticalSectionBegin>
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
    IrqFired = false;
 8014cba:	2300      	movs	r3, #0
    const bool isIrqFired = IrqFired;
 8014cbc:	4d5a      	ldr	r5, [pc, #360]	; (8014e28 <RadioIrqProcess+0x178>)
    CRITICAL_SECTION_END( );
 8014cbe:	a802      	add	r0, sp, #8
    const bool isIrqFired = IrqFired;
 8014cc0:	782c      	ldrb	r4, [r5, #0]
    IrqFired = false;
 8014cc2:	702b      	strb	r3, [r5, #0]
    CRITICAL_SECTION_END( );
 8014cc4:	f7ef f8a9 	bl	8003e1a <BoardCriticalSectionEnd>

    if( isIrqFired == true )
 8014cc8:	2c00      	cmp	r4, #0
 8014cca:	d06e      	beq.n	8014daa <RadioIrqProcess+0xfa>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 8014ccc:	f000 fe0e 	bl	80158ec <SX126xGetIrqStatus>
 8014cd0:	0004      	movs	r4, r0
        SX126xClearIrqStatus( irqRegs );
 8014cd2:	f000 ffe5 	bl	8015ca0 <SX126xClearIrqStatus>

        // Check if DIO1 pin is High. If it is the case revert IrqFired to true
        CRITICAL_SECTION_BEGIN( );
 8014cd6:	a803      	add	r0, sp, #12
 8014cd8:	f7ef f89a 	bl	8003e10 <BoardCriticalSectionBegin>
        if( SX126xGetDio1PinState( ) == 1 )
 8014cdc:	f7ef fdae 	bl	800483c <SX126xGetDio1PinState>
 8014ce0:	2801      	cmp	r0, #1
 8014ce2:	d100      	bne.n	8014ce6 <RadioIrqProcess+0x36>
        {
            IrqFired = true;
 8014ce4:	7028      	strb	r0, [r5, #0]
        }
        CRITICAL_SECTION_END( );

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8014ce6:	2501      	movs	r5, #1
        CRITICAL_SECTION_END( );
 8014ce8:	a803      	add	r0, sp, #12
 8014cea:	f7ef f896 	bl	8003e1a <BoardCriticalSectionEnd>
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8014cee:	422c      	tst	r4, r5
 8014cf0:	d00d      	beq.n	8014d0e <RadioIrqProcess+0x5e>
        {
            TimerStop( &TxTimeoutTimer );
 8014cf2:	484e      	ldr	r0, [pc, #312]	; (8014e2c <RadioIrqProcess+0x17c>)
 8014cf4:	f7f6 fdfc 	bl	800b8f0 <TimerStop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8014cf8:	0028      	movs	r0, r5
 8014cfa:	f7ef fc21 	bl	8004540 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8014cfe:	4b4c      	ldr	r3, [pc, #304]	; (8014e30 <RadioIrqProcess+0x180>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d003      	beq.n	8014d0e <RadioIrqProcess+0x5e>
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d000      	beq.n	8014d0e <RadioIrqProcess+0x5e>
            {
                RadioEvents->TxDone( );
 8014d0c:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8014d0e:	2502      	movs	r5, #2
 8014d10:	422c      	tst	r4, r5
 8014d12:	d013      	beq.n	8014d3c <RadioIrqProcess+0x8c>
        {
            TimerStop( &RxTimeoutTimer );
 8014d14:	4847      	ldr	r0, [pc, #284]	; (8014e34 <RadioIrqProcess+0x184>)
 8014d16:	f7f6 fdeb 	bl	800b8f0 <TimerStop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8014d1a:	4f45      	ldr	r7, [pc, #276]	; (8014e30 <RadioIrqProcess+0x180>)
 8014d1c:	4b46      	ldr	r3, [pc, #280]	; (8014e38 <RadioIrqProcess+0x188>)
 8014d1e:	0662      	lsls	r2, r4, #25
 8014d20:	d545      	bpl.n	8014dae <RadioIrqProcess+0xfe>
            {
                if( RxContinuous == false )
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d102      	bne.n	8014d2e <RadioIrqProcess+0x7e>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8014d28:	2001      	movs	r0, #1
 8014d2a:	f7ef fc09 	bl	8004540 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d003      	beq.n	8014d3c <RadioIrqProcess+0x8c>
 8014d34:	691b      	ldr	r3, [r3, #16]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d000      	beq.n	8014d3c <RadioIrqProcess+0x8c>
                {
                    RadioEvents->RxError( );
 8014d3a:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8014d3c:	0623      	lsls	r3, r4, #24
 8014d3e:	d50c      	bpl.n	8014d5a <RadioIrqProcess+0xaa>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8014d40:	2001      	movs	r0, #1
 8014d42:	f7ef fbfd 	bl	8004540 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014d46:	4b3a      	ldr	r3, [pc, #232]	; (8014e30 <RadioIrqProcess+0x180>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d005      	beq.n	8014d5a <RadioIrqProcess+0xaa>
 8014d4e:	699b      	ldr	r3, [r3, #24]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d002      	beq.n	8014d5a <RadioIrqProcess+0xaa>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8014d54:	05e0      	lsls	r0, r4, #23
 8014d56:	0fc0      	lsrs	r0, r0, #31
 8014d58:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8014d5a:	05a3      	lsls	r3, r4, #22
 8014d5c:	d511      	bpl.n	8014d82 <RadioIrqProcess+0xd2>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 8014d5e:	f7ef fbe9 	bl	8004534 <SX126xGetOperatingMode>
 8014d62:	2804      	cmp	r0, #4
 8014d64:	d14f      	bne.n	8014e06 <RadioIrqProcess+0x156>
            {
                TimerStop( &TxTimeoutTimer );
 8014d66:	4831      	ldr	r0, [pc, #196]	; (8014e2c <RadioIrqProcess+0x17c>)
 8014d68:	f7f6 fdc2 	bl	800b8f0 <TimerStop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8014d6c:	2001      	movs	r0, #1
 8014d6e:	f7ef fbe7 	bl	8004540 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014d72:	4b2f      	ldr	r3, [pc, #188]	; (8014e30 <RadioIrqProcess+0x180>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d003      	beq.n	8014d82 <RadioIrqProcess+0xd2>
 8014d7a:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d000      	beq.n	8014d82 <RadioIrqProcess+0xd2>
                {
                    RadioEvents->RxTimeout( );
 8014d80:	4798      	blx	r3
        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8014d82:	06a3      	lsls	r3, r4, #26
 8014d84:	d511      	bpl.n	8014daa <RadioIrqProcess+0xfa>
        {
            TimerStop( &RxTimeoutTimer );
 8014d86:	482b      	ldr	r0, [pc, #172]	; (8014e34 <RadioIrqProcess+0x184>)
 8014d88:	f7f6 fdb2 	bl	800b8f0 <TimerStop>
            if( RxContinuous == false )
 8014d8c:	4b2a      	ldr	r3, [pc, #168]	; (8014e38 <RadioIrqProcess+0x188>)
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d102      	bne.n	8014d9a <RadioIrqProcess+0xea>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8014d94:	2001      	movs	r0, #1
 8014d96:	f7ef fbd3 	bl	8004540 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014d9a:	4b25      	ldr	r3, [pc, #148]	; (8014e30 <RadioIrqProcess+0x180>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <RadioIrqProcess+0xfa>
 8014da2:	68db      	ldr	r3, [r3, #12]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d000      	beq.n	8014daa <RadioIrqProcess+0xfa>
            {
                RadioEvents->RxTimeout( );
 8014da8:	4798      	blx	r3
            }
        }
    }
}
 8014daa:	b005      	add	sp, #20
 8014dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if( RxContinuous == false )
 8014dae:	781e      	ldrb	r6, [r3, #0]
 8014db0:	2e00      	cmp	r6, #0
 8014db2:	d10e      	bne.n	8014dd2 <RadioIrqProcess+0x122>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8014db4:	2001      	movs	r0, #1
 8014db6:	f7ef fbc3 	bl	8004540 <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 8014dba:	0031      	movs	r1, r6
 8014dbc:	481f      	ldr	r0, [pc, #124]	; (8014e3c <RadioIrqProcess+0x18c>)
 8014dbe:	f7ef fc97 	bl	80046f0 <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 8014dc2:	481f      	ldr	r0, [pc, #124]	; (8014e40 <RadioIrqProcess+0x190>)
 8014dc4:	f7ef fcd0 	bl	8004768 <SX126xReadRegister>
 8014dc8:	4305      	orrs	r5, r0
 8014dca:	b2e9      	uxtb	r1, r5
 8014dcc:	481c      	ldr	r0, [pc, #112]	; (8014e40 <RadioIrqProcess+0x190>)
 8014dce:	f7ef fc8f 	bl	80046f0 <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 8014dd2:	466b      	mov	r3, sp
 8014dd4:	4e1b      	ldr	r6, [pc, #108]	; (8014e44 <RadioIrqProcess+0x194>)
 8014dd6:	1dd9      	adds	r1, r3, #7
 8014dd8:	22ff      	movs	r2, #255	; 0xff
 8014dda:	0030      	movs	r0, r6
 8014ddc:	f000 ff12 	bl	8015c04 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 8014de0:	4d19      	ldr	r5, [pc, #100]	; (8014e48 <RadioIrqProcess+0x198>)
 8014de2:	0028      	movs	r0, r5
 8014de4:	f000 ff24 	bl	8015c30 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d0a6      	beq.n	8014d3c <RadioIrqProcess+0x8c>
 8014dee:	689f      	ldr	r7, [r3, #8]
 8014df0:	2f00      	cmp	r7, #0
 8014df2:	d0a3      	beq.n	8014d3c <RadioIrqProcess+0x8c>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8014df4:	4669      	mov	r1, sp
 8014df6:	230d      	movs	r3, #13
 8014df8:	220c      	movs	r2, #12
 8014dfa:	0030      	movs	r0, r6
 8014dfc:	56eb      	ldrsb	r3, [r5, r3]
 8014dfe:	56aa      	ldrsb	r2, [r5, r2]
 8014e00:	79c9      	ldrb	r1, [r1, #7]
 8014e02:	47b8      	blx	r7
 8014e04:	e79a      	b.n	8014d3c <RadioIrqProcess+0x8c>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8014e06:	f7ef fb95 	bl	8004534 <SX126xGetOperatingMode>
 8014e0a:	2805      	cmp	r0, #5
 8014e0c:	d1b9      	bne.n	8014d82 <RadioIrqProcess+0xd2>
                TimerStop( &RxTimeoutTimer );
 8014e0e:	4809      	ldr	r0, [pc, #36]	; (8014e34 <RadioIrqProcess+0x184>)
 8014e10:	f7f6 fd6e 	bl	800b8f0 <TimerStop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8014e14:	2001      	movs	r0, #1
 8014e16:	f7ef fb93 	bl	8004540 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014e1a:	4b05      	ldr	r3, [pc, #20]	; (8014e30 <RadioIrqProcess+0x180>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d0af      	beq.n	8014d82 <RadioIrqProcess+0xd2>
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	e7aa      	b.n	8014d7c <RadioIrqProcess+0xcc>
 8014e26:	46c0      	nop			; (mov r8, r8)
 8014e28:	20001b54 	.word	0x20001b54
 8014e2c:	20001d84 	.word	0x20001d84
 8014e30:	20001b58 	.word	0x20001b58
 8014e34:	20001c78 	.word	0x20001c78
 8014e38:	20001c71 	.word	0x20001c71
 8014e3c:	00000902 	.word	0x00000902
 8014e40:	00000944 	.word	0x00000944
 8014e44:	20001b72 	.word	0x20001b72
 8014e48:	20001b5c 	.word	0x20001b5c

08014e4c <RadioTimeOnAir>:
{
 8014e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e4e:	0014      	movs	r4, r2
 8014e50:	aa08      	add	r2, sp, #32
 8014e52:	8816      	ldrh	r6, [r2, #0]
 8014e54:	aa09      	add	r2, sp, #36	; 0x24
 8014e56:	7817      	ldrb	r7, [r2, #0]
 8014e58:	aa0a      	add	r2, sp, #40	; 0x28
 8014e5a:	7812      	ldrb	r2, [r2, #0]
 8014e5c:	000d      	movs	r5, r1
 8014e5e:	a90b      	add	r1, sp, #44	; 0x2c
 8014e60:	4694      	mov	ip, r2
 8014e62:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 8014e64:	2800      	cmp	r0, #0
 8014e66:	d009      	beq.n	8014e7c <RadioTimeOnAir+0x30>
 8014e68:	2801      	cmp	r0, #1
 8014e6a:	d017      	beq.n	8014e9c <RadioTimeOnAir+0x50>
 8014e6c:	2401      	movs	r4, #1
 8014e6e:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8014e70:	1900      	adds	r0, r0, r4
 8014e72:	0021      	movs	r1, r4
 8014e74:	3801      	subs	r0, #1
 8014e76:	f7eb f977 	bl	8000168 <__udivsi3>
}
 8014e7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
               ( ( crcOn == true ) ? 2 : 0 ) 
 8014e7c:	1e4b      	subs	r3, r1, #1
 8014e7e:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8014e80:	427b      	negs	r3, r7
 8014e82:	415f      	adcs	r7, r3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8014e84:	0049      	lsls	r1, r1, #1
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8014e86:	000a      	movs	r2, r1
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8014e88:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8014e8a:	19be      	adds	r6, r7, r6
    return ( preambleLen << 3 ) +
 8014e8c:	00f6      	lsls	r6, r6, #3
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8014e8e:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8014e90:	3618      	adds	r6, #24
               ) << 3 
 8014e92:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8014e94:	1996      	adds	r6, r2, r6
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8014e96:	0080      	lsls	r0, r0, #2
 8014e98:	4370      	muls	r0, r6
        break;
 8014e9a:	e7e9      	b.n	8014e70 <RadioTimeOnAir+0x24>
    int32_t crDenom           = coderate + 4;
 8014e9c:	3304      	adds	r3, #4
 8014e9e:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8014ea0:	1f63      	subs	r3, r4, #5
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d804      	bhi.n	8014eb0 <RadioTimeOnAir+0x64>
        if( preambleLen < 12 )
 8014ea6:	1c33      	adds	r3, r6, #0
 8014ea8:	2e0c      	cmp	r6, #12
 8014eaa:	d200      	bcs.n	8014eae <RadioTimeOnAir+0x62>
 8014eac:	230c      	movs	r3, #12
 8014eae:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014eb0:	2d00      	cmp	r5, #0
 8014eb2:	d138      	bne.n	8014f26 <RadioTimeOnAir+0xda>
 8014eb4:	0023      	movs	r3, r4
 8014eb6:	2001      	movs	r0, #1
 8014eb8:	002a      	movs	r2, r5
 8014eba:	3b0b      	subs	r3, #11
 8014ebc:	4298      	cmp	r0, r3
 8014ebe:	416a      	adcs	r2, r5
 8014ec0:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014ec2:	b2db      	uxtb	r3, r3
                            ( crcOn ? 16 : 0 ) -
 8014ec4:	1e48      	subs	r0, r1, #1
 8014ec6:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8014ec8:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8014eca:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8014ecc:	00d2      	lsls	r2, r2, #3
 8014ece:	1810      	adds	r0, r2, r0
                            ( fixLen ? 0 : 20 );
 8014ed0:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 8014ed2:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8014ed4:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 8014ed6:	4297      	cmp	r7, r2
 8014ed8:	d100      	bne.n	8014edc <RadioTimeOnAir+0x90>
 8014eda:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 8014edc:	1880      	adds	r0, r0, r2
            ceilDenominator = 4 * ( datarate - 2 );
 8014ede:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8014ee0:	2c06      	cmp	r4, #6
 8014ee2:	d903      	bls.n	8014eec <RadioTimeOnAir+0xa0>
        ceilNumerator += 8;
 8014ee4:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d000      	beq.n	8014eec <RadioTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 8014eea:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8014eec:	43c3      	mvns	r3, r0
 8014eee:	17db      	asrs	r3, r3, #31
 8014ef0:	4018      	ands	r0, r3
 8014ef2:	1840      	adds	r0, r0, r1
 8014ef4:	3801      	subs	r0, #1
 8014ef6:	f7eb f9c1 	bl	800027c <__divsi3>
 8014efa:	9b01      	ldr	r3, [sp, #4]
 8014efc:	4343      	muls	r3, r0
 8014efe:	199e      	adds	r6, r3, r6
        intermediate += 2;
 8014f00:	0032      	movs	r2, r6
 8014f02:	320e      	adds	r2, #14
    if( datarate <= 6 )
 8014f04:	2c06      	cmp	r4, #6
 8014f06:	d900      	bls.n	8014f0a <RadioTimeOnAir+0xbe>
    int32_t intermediate =
 8014f08:	3a02      	subs	r2, #2
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8014f0a:	4b0b      	ldr	r3, [pc, #44]	; (8014f38 <RadioTimeOnAir+0xec>)
 8014f0c:	5d5b      	ldrb	r3, [r3, r5]
    switch( bw )
 8014f0e:	2b0a      	cmp	r3, #10
 8014f10:	d811      	bhi.n	8014f36 <RadioTimeOnAir+0xea>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8014f12:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8014f14:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8014f16:	3201      	adds	r2, #1
 8014f18:	40ba      	lsls	r2, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8014f1a:	0080      	lsls	r0, r0, #2
 8014f1c:	4350      	muls	r0, r2
 8014f1e:	4a07      	ldr	r2, [pc, #28]	; (8014f3c <RadioTimeOnAir+0xf0>)
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	589c      	ldr	r4, [r3, r2]
 8014f24:	e7a4      	b.n	8014e70 <RadioTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8014f26:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014f28:	2d01      	cmp	r5, #1
 8014f2a:	d1cb      	bne.n	8014ec4 <RadioTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014f2c:	0023      	movs	r3, r4
 8014f2e:	3b0c      	subs	r3, #12
 8014f30:	4258      	negs	r0, r3
 8014f32:	4143      	adcs	r3, r0
 8014f34:	e7c5      	b.n	8014ec2 <RadioTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 8014f36:	deff      	udf	#255	; 0xff
 8014f38:	0801a8fc 	.word	0x0801a8fc
 8014f3c:	0801a900 	.word	0x0801a900

08014f40 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8014f40:	4b0c      	ldr	r3, [pc, #48]	; (8014f74 <RadioSetPublicNetwork+0x34>)
{
 8014f42:	b510      	push	{r4, lr}
 8014f44:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8014f46:	7018      	strb	r0, [r3, #0]
 8014f48:	7058      	strb	r0, [r3, #1]
    switch( modem )
 8014f4a:	f000 f817 	bl	8014f7c <RadioSetModem.part.0>
    if( enable == true )
 8014f4e:	2c00      	cmp	r4, #0
 8014f50:	d009      	beq.n	8014f66 <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8014f52:	20e8      	movs	r0, #232	; 0xe8
 8014f54:	2134      	movs	r1, #52	; 0x34
 8014f56:	00c0      	lsls	r0, r0, #3
 8014f58:	f7ef fbca 	bl	80046f0 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8014f5c:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8014f5e:	4806      	ldr	r0, [pc, #24]	; (8014f78 <RadioSetPublicNetwork+0x38>)
 8014f60:	f7ef fbc6 	bl	80046f0 <SX126xWriteRegister>
}
 8014f64:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8014f66:	20e8      	movs	r0, #232	; 0xe8
 8014f68:	2114      	movs	r1, #20
 8014f6a:	00c0      	lsls	r0, r0, #3
 8014f6c:	f7ef fbc0 	bl	80046f0 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8014f70:	2124      	movs	r1, #36	; 0x24
 8014f72:	e7f4      	b.n	8014f5e <RadioSetPublicNetwork+0x1e>
 8014f74:	20001b70 	.word	0x20001b70
 8014f78:	00000741 	.word	0x00000741

08014f7c <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8014f7c:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 8014f7e:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8014f80:	f000 fcf6 	bl	8015970 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8014f84:	4b04      	ldr	r3, [pc, #16]	; (8014f98 <RadioSetModem.part.0+0x1c>)
 8014f86:	7818      	ldrb	r0, [r3, #0]
 8014f88:	785a      	ldrb	r2, [r3, #1]
 8014f8a:	4282      	cmp	r2, r0
 8014f8c:	d002      	beq.n	8014f94 <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8014f8e:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 8014f90:	f7ff ffd6 	bl	8014f40 <RadioSetPublicNetwork>
}
 8014f94:	bd10      	pop	{r4, pc}
 8014f96:	46c0      	nop			; (mov r8, r8)
 8014f98:	20001b70 	.word	0x20001b70

08014f9c <RadioSetModem>:
{
 8014f9c:	b510      	push	{r4, lr}
    switch( modem )
 8014f9e:	2801      	cmp	r0, #1
 8014fa0:	d006      	beq.n	8014fb0 <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	f000 fce4 	bl	8015970 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 8014fa8:	2200      	movs	r2, #0
 8014faa:	4b03      	ldr	r3, [pc, #12]	; (8014fb8 <RadioSetModem+0x1c>)
 8014fac:	705a      	strb	r2, [r3, #1]
}
 8014fae:	bd10      	pop	{r4, pc}
 8014fb0:	f7ff ffe4 	bl	8014f7c <RadioSetModem.part.0>
 8014fb4:	e7fb      	b.n	8014fae <RadioSetModem+0x12>
 8014fb6:	46c0      	nop			; (mov r8, r8)
 8014fb8:	20001b70 	.word	0x20001b70

08014fbc <RadioSetRxConfig>:
{
 8014fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fbe:	b089      	sub	sp, #36	; 0x24
 8014fc0:	9304      	str	r3, [sp, #16]
 8014fc2:	ab0f      	add	r3, sp, #60	; 0x3c
 8014fc4:	881b      	ldrh	r3, [r3, #0]
 8014fc6:	0015      	movs	r5, r2
 8014fc8:	9301      	str	r3, [sp, #4]
 8014fca:	ab10      	add	r3, sp, #64	; 0x40
 8014fcc:	881b      	ldrh	r3, [r3, #0]
 8014fce:	000e      	movs	r6, r1
 8014fd0:	9300      	str	r3, [sp, #0]
 8014fd2:	ab11      	add	r3, sp, #68	; 0x44
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	a906      	add	r1, sp, #24
 8014fd8:	9302      	str	r3, [sp, #8]
 8014fda:	ab12      	add	r3, sp, #72	; 0x48
 8014fdc:	781a      	ldrb	r2, [r3, #0]
 8014fde:	ab13      	add	r3, sp, #76	; 0x4c
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	0007      	movs	r7, r0
 8014fe4:	9303      	str	r3, [sp, #12]
 8014fe6:	2321      	movs	r3, #33	; 0x21
 8014fe8:	185b      	adds	r3, r3, r1
 8014fea:	7fdb      	ldrb	r3, [r3, #31]
 8014fec:	9305      	str	r3, [sp, #20]
 8014fee:	2325      	movs	r3, #37	; 0x25
 8014ff0:	185b      	adds	r3, r3, r1
 8014ff2:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 8014ff4:	4970      	ldr	r1, [pc, #448]	; (80151b8 <RadioSetRxConfig+0x1fc>)
 8014ff6:	700b      	strb	r3, [r1, #0]
        symbTimeout = 0;
 8014ff8:	4259      	negs	r1, r3
 8014ffa:	414b      	adcs	r3, r1
 8014ffc:	9900      	ldr	r1, [sp, #0]
 8014ffe:	425b      	negs	r3, r3
 8015000:	4019      	ands	r1, r3
    if( fixLen == true )
 8015002:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 8015004:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 8015006:	2b00      	cmp	r3, #0
 8015008:	d100      	bne.n	801500c <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 801500a:	22ff      	movs	r2, #255	; 0xff
 801500c:	4b6b      	ldr	r3, [pc, #428]	; (80151bc <RadioSetRxConfig+0x200>)
 801500e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8015010:	2f00      	cmp	r7, #0
 8015012:	d003      	beq.n	801501c <RadioSetRxConfig+0x60>
 8015014:	2f01      	cmp	r7, #1
 8015016:	d05f      	beq.n	80150d8 <RadioSetRxConfig+0x11c>
}
 8015018:	b009      	add	sp, #36	; 0x24
 801501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 801501c:	0038      	movs	r0, r7
 801501e:	f000 fbd2 	bl	80157c6 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015022:	4c67      	ldr	r4, [pc, #412]	; (80151c0 <RadioSetRxConfig+0x204>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015024:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015026:	0023      	movs	r3, r4
 8015028:	33dc      	adds	r3, #220	; 0xdc
 801502a:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 801502c:	0023      	movs	r3, r4
 801502e:	33e0      	adds	r3, #224	; 0xe0
 8015030:	601d      	str	r5, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015032:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8015034:	0070      	lsls	r0, r6, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015036:	33e8      	adds	r3, #232	; 0xe8
 8015038:	701a      	strb	r2, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 801503a:	f7ff fdb3 	bl	8014ba4 <RadioGetFskBandwidthRegValue>
 801503e:	0023      	movs	r3, r4
 8015040:	33e9      	adds	r3, #233	; 0xe9
 8015042:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015044:	0023      	movs	r3, r4
 8015046:	33b4      	adds	r3, #180	; 0xb4
 8015048:	701f      	strb	r7, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801504a:	9b01      	ldr	r3, [sp, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801504c:	9902      	ldr	r1, [sp, #8]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801504e:	00da      	lsls	r2, r3, #3
 8015050:	0023      	movs	r3, r4
 8015052:	33b6      	adds	r3, #182	; 0xb6
 8015054:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015056:	0023      	movs	r3, r4
 8015058:	4a5a      	ldr	r2, [pc, #360]	; (80151c4 <RadioSetRxConfig+0x208>)
 801505a:	33b8      	adds	r3, #184	; 0xb8
 801505c:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801505e:	0023      	movs	r3, r4
 8015060:	33ba      	adds	r3, #186	; 0xba
 8015062:	701f      	strb	r7, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015064:	2201      	movs	r2, #1
 8015066:	0023      	movs	r3, r4
 8015068:	4051      	eors	r1, r2
 801506a:	33bb      	adds	r3, #187	; 0xbb
 801506c:	7019      	strb	r1, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801506e:	0023      	movs	r3, r4
 8015070:	4952      	ldr	r1, [pc, #328]	; (80151bc <RadioSetRxConfig+0x200>)
 8015072:	33bc      	adds	r3, #188	; 0xbc
 8015074:	7809      	ldrb	r1, [r1, #0]
 8015076:	7019      	strb	r1, [r3, #0]
            if( crcOn == true )
 8015078:	9903      	ldr	r1, [sp, #12]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801507a:	23f2      	movs	r3, #242	; 0xf2
            if( crcOn == true )
 801507c:	2900      	cmp	r1, #0
 801507e:	d100      	bne.n	8015082 <RadioSetRxConfig+0xc6>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015080:	0013      	movs	r3, r2
 8015082:	0022      	movs	r2, r4
 8015084:	32bd      	adds	r2, #189	; 0xbd
 8015086:	7013      	strb	r3, [r2, #0]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015088:	0023      	movs	r3, r4
 801508a:	2201      	movs	r2, #1
 801508c:	33be      	adds	r3, #190	; 0xbe
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801508e:	34dc      	adds	r4, #220	; 0xdc
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015090:	701a      	strb	r2, [r3, #0]
            RadioStandby( );
 8015092:	f7ff fcf3 	bl	8014a7c <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015096:	7820      	ldrb	r0, [r4, #0]
 8015098:	1e43      	subs	r3, r0, #1
 801509a:	4198      	sbcs	r0, r3
 801509c:	b2c0      	uxtb	r0, r0
 801509e:	f7ff ff7d 	bl	8014f9c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80150a2:	0020      	movs	r0, r4
 80150a4:	f000 fcbe 	bl	8015a24 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80150a8:	4847      	ldr	r0, [pc, #284]	; (80151c8 <RadioSetRxConfig+0x20c>)
 80150aa:	f000 fd11 	bl	8015ad0 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80150ae:	2208      	movs	r2, #8
 80150b0:	4946      	ldr	r1, [pc, #280]	; (80151cc <RadioSetRxConfig+0x210>)
 80150b2:	a806      	add	r0, sp, #24
 80150b4:	f000 ff4c 	bl	8015f50 <memcpy>
 80150b8:	a806      	add	r0, sp, #24
 80150ba:	f000 fa4b 	bl	8015554 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80150be:	4844      	ldr	r0, [pc, #272]	; (80151d0 <RadioSetRxConfig+0x214>)
 80150c0:	f000 fa7a 	bl	80155b8 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80150c4:	20fa      	movs	r0, #250	; 0xfa
 80150c6:	9b00      	ldr	r3, [sp, #0]
 80150c8:	0140      	lsls	r0, r0, #5
 80150ca:	4358      	muls	r0, r3
 80150cc:	0029      	movs	r1, r5
 80150ce:	f7eb f84b 	bl	8000168 <__udivsi3>
 80150d2:	4b40      	ldr	r3, [pc, #256]	; (80151d4 <RadioSetRxConfig+0x218>)
 80150d4:	6018      	str	r0, [r3, #0]
            break;
 80150d6:	e79f      	b.n	8015018 <RadioSetRxConfig+0x5c>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 80150d8:	2000      	movs	r0, #0
 80150da:	f000 fb74 	bl	80157c6 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80150de:	4c38      	ldr	r4, [pc, #224]	; (80151c0 <RadioSetRxConfig+0x204>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80150e0:	493d      	ldr	r1, [pc, #244]	; (80151d8 <RadioSetRxConfig+0x21c>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80150e2:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80150e4:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80150e6:	33dc      	adds	r3, #220	; 0xdc
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80150e8:	32ec      	adds	r2, #236	; 0xec
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80150ea:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80150ec:	b2eb      	uxtb	r3, r5
 80150ee:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80150f0:	0022      	movs	r2, r4
 80150f2:	5d89      	ldrb	r1, [r1, r6]
 80150f4:	32ed      	adds	r2, #237	; 0xed
 80150f6:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80150f8:	0022      	movs	r2, r4
 80150fa:	9904      	ldr	r1, [sp, #16]
 80150fc:	32ee      	adds	r2, #238	; 0xee
 80150fe:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015100:	2e00      	cmp	r6, #0
 8015102:	d148      	bne.n	8015196 <RadioSetRxConfig+0x1da>
 8015104:	3d0b      	subs	r5, #11
 8015106:	42af      	cmp	r7, r5
 8015108:	4176      	adcs	r6, r6
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801510a:	b2f1      	uxtb	r1, r6
 801510c:	0022      	movs	r2, r4
 801510e:	32ef      	adds	r2, #239	; 0xef
 8015110:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015112:	0022      	movs	r2, r4
 8015114:	2101      	movs	r1, #1
 8015116:	32b4      	adds	r2, #180	; 0xb4
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015118:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 801511a:	7011      	strb	r1, [r2, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801511c:	428b      	cmp	r3, r1
 801511e:	d842      	bhi.n	80151a6 <RadioSetRxConfig+0x1ea>
                if( preambleLen < 12 )
 8015120:	9b01      	ldr	r3, [sp, #4]
 8015122:	2b0b      	cmp	r3, #11
 8015124:	d83f      	bhi.n	80151a6 <RadioSetRxConfig+0x1ea>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8015126:	0023      	movs	r3, r4
 8015128:	220c      	movs	r2, #12
 801512a:	33c0      	adds	r3, #192	; 0xc0
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801512c:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801512e:	0023      	movs	r3, r4
 8015130:	9a02      	ldr	r2, [sp, #8]
 8015132:	33c2      	adds	r3, #194	; 0xc2
 8015134:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015136:	0023      	movs	r3, r4
 8015138:	4a20      	ldr	r2, [pc, #128]	; (80151bc <RadioSetRxConfig+0x200>)
 801513a:	33c3      	adds	r3, #195	; 0xc3
 801513c:	7812      	ldrb	r2, [r2, #0]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801513e:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015140:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8015142:	0023      	movs	r3, r4
 8015144:	9a03      	ldr	r2, [sp, #12]
 8015146:	33c4      	adds	r3, #196	; 0xc4
 8015148:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801514a:	9b05      	ldr	r3, [sp, #20]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801514c:	34dc      	adds	r4, #220	; 0xdc
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801514e:	35c5      	adds	r5, #197	; 0xc5
 8015150:	702b      	strb	r3, [r5, #0]
            RadioStandby( );
 8015152:	f7ff fc93 	bl	8014a7c <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015156:	7820      	ldrb	r0, [r4, #0]
 8015158:	1e43      	subs	r3, r0, #1
 801515a:	4198      	sbcs	r0, r3
 801515c:	b2c0      	uxtb	r0, r0
 801515e:	f7ff ff1d 	bl	8014f9c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8015162:	0020      	movs	r0, r4
 8015164:	f000 fc5e 	bl	8015a24 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8015168:	4817      	ldr	r0, [pc, #92]	; (80151c8 <RadioSetRxConfig+0x20c>)
 801516a:	f000 fcb1 	bl	8015ad0 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 801516e:	466b      	mov	r3, sp
 8015170:	7818      	ldrb	r0, [r3, #0]
 8015172:	f000 fb31 	bl	80157d8 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8015176:	782b      	ldrb	r3, [r5, #0]
 8015178:	2404      	movs	r4, #4
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 801517a:	4818      	ldr	r0, [pc, #96]	; (80151dc <RadioSetRxConfig+0x220>)
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801517c:	2b01      	cmp	r3, #1
 801517e:	d116      	bne.n	80151ae <RadioSetRxConfig+0x1f2>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 8015180:	f7ef faf2 	bl	8004768 <SX126xReadRegister>
 8015184:	43a0      	bics	r0, r4
 8015186:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8015188:	4814      	ldr	r0, [pc, #80]	; (80151dc <RadioSetRxConfig+0x220>)
 801518a:	f7ef fab1 	bl	80046f0 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 801518e:	4b11      	ldr	r3, [pc, #68]	; (80151d4 <RadioSetRxConfig+0x218>)
 8015190:	4a13      	ldr	r2, [pc, #76]	; (80151e0 <RadioSetRxConfig+0x224>)
 8015192:	601a      	str	r2, [r3, #0]
}
 8015194:	e740      	b.n	8015018 <RadioSetRxConfig+0x5c>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015196:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015198:	2e01      	cmp	r6, #1
 801519a:	d1b7      	bne.n	801510c <RadioSetRxConfig+0x150>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801519c:	3d0c      	subs	r5, #12
 801519e:	426a      	negs	r2, r5
 80151a0:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80151a2:	b2e9      	uxtb	r1, r5
 80151a4:	e7b2      	b.n	801510c <RadioSetRxConfig+0x150>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80151a6:	4b06      	ldr	r3, [pc, #24]	; (80151c0 <RadioSetRxConfig+0x204>)
 80151a8:	9a01      	ldr	r2, [sp, #4]
 80151aa:	33c0      	adds	r3, #192	; 0xc0
 80151ac:	e7be      	b.n	801512c <RadioSetRxConfig+0x170>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 80151ae:	f7ef fadb 	bl	8004768 <SX126xReadRegister>
 80151b2:	4304      	orrs	r4, r0
 80151b4:	b2e1      	uxtb	r1, r4
 80151b6:	e7e7      	b.n	8015188 <RadioSetRxConfig+0x1cc>
 80151b8:	20001c71 	.word	0x20001c71
 80151bc:	20000240 	.word	0x20000240
 80151c0:	20001c90 	.word	0x20001c90
 80151c4:	00001804 	.word	0x00001804
 80151c8:	20001d44 	.word	0x20001d44
 80151cc:	080187f7 	.word	0x080187f7
 80151d0:	000001ff 	.word	0x000001ff
 80151d4:	20001c74 	.word	0x20001c74
 80151d8:	0801a8fc 	.word	0x0801a8fc
 80151dc:	00000736 	.word	0x00000736
 80151e0:	0000ffff 	.word	0x0000ffff

080151e4 <RadioSetTxConfig>:
{
 80151e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151e6:	b087      	sub	sp, #28
 80151e8:	9102      	str	r1, [sp, #8]
 80151ea:	a90c      	add	r1, sp, #48	; 0x30
 80151ec:	0017      	movs	r7, r2
 80151ee:	c904      	ldmia	r1!, {r2}
 80151f0:	0005      	movs	r5, r0
 80151f2:	7809      	ldrb	r1, [r1, #0]
 80151f4:	468c      	mov	ip, r1
 80151f6:	a90e      	add	r1, sp, #56	; 0x38
 80151f8:	880e      	ldrh	r6, [r1, #0]
 80151fa:	a90f      	add	r1, sp, #60	; 0x3c
 80151fc:	7809      	ldrb	r1, [r1, #0]
 80151fe:	9100      	str	r1, [sp, #0]
 8015200:	a910      	add	r1, sp, #64	; 0x40
 8015202:	7809      	ldrb	r1, [r1, #0]
 8015204:	9101      	str	r1, [sp, #4]
 8015206:	a913      	add	r1, sp, #76	; 0x4c
 8015208:	7809      	ldrb	r1, [r1, #0]
 801520a:	9103      	str	r1, [sp, #12]
    switch( modem )
 801520c:	2800      	cmp	r0, #0
 801520e:	d008      	beq.n	8015222 <RadioSetTxConfig+0x3e>
 8015210:	2801      	cmp	r0, #1
 8015212:	d055      	beq.n	80152c0 <RadioSetTxConfig+0xdc>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8015214:	485f      	ldr	r0, [pc, #380]	; (8015394 <RadioSetTxConfig+0x1b0>)
 8015216:	f7ef faa7 	bl	8004768 <SX126xReadRegister>
 801521a:	2104      	movs	r1, #4
 801521c:	4301      	orrs	r1, r0
 801521e:	b2c9      	uxtb	r1, r1
 8015220:	e0a0      	b.n	8015364 <RadioSetTxConfig+0x180>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015222:	4c5d      	ldr	r4, [pc, #372]	; (8015398 <RadioSetTxConfig+0x1b4>)
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015224:	00f6      	lsls	r6, r6, #3
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015226:	0021      	movs	r1, r4
 8015228:	31dc      	adds	r1, #220	; 0xdc
 801522a:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 801522c:	0021      	movs	r1, r4
 801522e:	31e0      	adds	r1, #224	; 0xe0
 8015230:	600a      	str	r2, [r1, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015232:	0022      	movs	r2, r4
 8015234:	210b      	movs	r1, #11
 8015236:	32e8      	adds	r2, #232	; 0xe8
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8015238:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801523a:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 801523c:	f7ff fcb2 	bl	8014ba4 <RadioGetFskBandwidthRegValue>
 8015240:	0023      	movs	r3, r4
 8015242:	33e9      	adds	r3, #233	; 0xe9
 8015244:	7018      	strb	r0, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8015246:	0023      	movs	r3, r4
 8015248:	33e4      	adds	r3, #228	; 0xe4
 801524a:	601f      	str	r7, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801524c:	0023      	movs	r3, r4
 801524e:	33b4      	adds	r3, #180	; 0xb4
 8015250:	701d      	strb	r5, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015252:	0023      	movs	r3, r4
 8015254:	33b6      	adds	r3, #182	; 0xb6
 8015256:	801e      	strh	r6, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015258:	0023      	movs	r3, r4
 801525a:	4a50      	ldr	r2, [pc, #320]	; (801539c <RadioSetTxConfig+0x1b8>)
 801525c:	33b8      	adds	r3, #184	; 0xb8
 801525e:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015260:	0023      	movs	r3, r4
 8015262:	33ba      	adds	r3, #186	; 0xba
 8015264:	701d      	strb	r5, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015266:	2201      	movs	r2, #1
 8015268:	0023      	movs	r3, r4
 801526a:	9900      	ldr	r1, [sp, #0]
 801526c:	33bb      	adds	r3, #187	; 0xbb
 801526e:	4051      	eors	r1, r2
 8015270:	7019      	strb	r1, [r3, #0]
            if( crcOn == true )
 8015272:	9901      	ldr	r1, [sp, #4]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015274:	23f2      	movs	r3, #242	; 0xf2
            if( crcOn == true )
 8015276:	2900      	cmp	r1, #0
 8015278:	d100      	bne.n	801527c <RadioSetTxConfig+0x98>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801527a:	0013      	movs	r3, r2
 801527c:	0022      	movs	r2, r4
 801527e:	32bd      	adds	r2, #189	; 0xbd
 8015280:	7013      	strb	r3, [r2, #0]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015282:	0023      	movs	r3, r4
 8015284:	2201      	movs	r2, #1
 8015286:	33be      	adds	r3, #190	; 0xbe
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015288:	34dc      	adds	r4, #220	; 0xdc
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801528a:	701a      	strb	r2, [r3, #0]
            RadioStandby( );
 801528c:	f7ff fbf6 	bl	8014a7c <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015290:	7820      	ldrb	r0, [r4, #0]
 8015292:	1e43      	subs	r3, r0, #1
 8015294:	4198      	sbcs	r0, r3
 8015296:	b2c0      	uxtb	r0, r0
 8015298:	f7ff fe80 	bl	8014f9c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 801529c:	0020      	movs	r0, r4
 801529e:	f000 fbc1 	bl	8015a24 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80152a2:	483f      	ldr	r0, [pc, #252]	; (80153a0 <RadioSetTxConfig+0x1bc>)
 80152a4:	f000 fc14 	bl	8015ad0 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80152a8:	2208      	movs	r2, #8
 80152aa:	493e      	ldr	r1, [pc, #248]	; (80153a4 <RadioSetTxConfig+0x1c0>)
 80152ac:	a804      	add	r0, sp, #16
 80152ae:	f000 fe4f 	bl	8015f50 <memcpy>
 80152b2:	a804      	add	r0, sp, #16
 80152b4:	f000 f94e 	bl	8015554 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80152b8:	483b      	ldr	r0, [pc, #236]	; (80153a8 <RadioSetTxConfig+0x1c4>)
 80152ba:	f000 f97d 	bl	80155b8 <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80152be:	e7a9      	b.n	8015214 <RadioSetTxConfig+0x30>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80152c0:	4c35      	ldr	r4, [pc, #212]	; (8015398 <RadioSetTxConfig+0x1b4>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80152c2:	4f3a      	ldr	r7, [pc, #232]	; (80153ac <RadioSetTxConfig+0x1c8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80152c4:	0021      	movs	r1, r4
 80152c6:	31dc      	adds	r1, #220	; 0xdc
 80152c8:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80152ca:	0020      	movs	r0, r4
 80152cc:	b2d1      	uxtb	r1, r2
 80152ce:	30ec      	adds	r0, #236	; 0xec
 80152d0:	7001      	strb	r1, [r0, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80152d2:	0020      	movs	r0, r4
 80152d4:	5cff      	ldrb	r7, [r7, r3]
 80152d6:	30ed      	adds	r0, #237	; 0xed
 80152d8:	7007      	strb	r7, [r0, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80152da:	0020      	movs	r0, r4
 80152dc:	4667      	mov	r7, ip
 80152de:	30ee      	adds	r0, #238	; 0xee
 80152e0:	7007      	strb	r7, [r0, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d149      	bne.n	801537a <RadioSetTxConfig+0x196>
 80152e6:	3a0b      	subs	r2, #11
 80152e8:	4295      	cmp	r5, r2
 80152ea:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80152ec:	b2d8      	uxtb	r0, r3
 80152ee:	0023      	movs	r3, r4
 80152f0:	33ef      	adds	r3, #239	; 0xef
 80152f2:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80152f4:	0023      	movs	r3, r4
 80152f6:	2201      	movs	r2, #1
 80152f8:	33b4      	adds	r3, #180	; 0xb4
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80152fa:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80152fc:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80152fe:	4291      	cmp	r1, r2
 8015300:	d843      	bhi.n	801538a <RadioSetTxConfig+0x1a6>
                if( preambleLen < 12 )
 8015302:	2e0b      	cmp	r6, #11
 8015304:	d841      	bhi.n	801538a <RadioSetTxConfig+0x1a6>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8015306:	0023      	movs	r3, r4
 8015308:	320b      	adds	r2, #11
 801530a:	33c0      	adds	r3, #192	; 0xc0
 801530c:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801530e:	0023      	movs	r3, r4
 8015310:	9a00      	ldr	r2, [sp, #0]
 8015312:	33c2      	adds	r3, #194	; 0xc2
 8015314:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015316:	0023      	movs	r3, r4
 8015318:	4a25      	ldr	r2, [pc, #148]	; (80153b0 <RadioSetTxConfig+0x1cc>)
 801531a:	33c3      	adds	r3, #195	; 0xc3
 801531c:	7812      	ldrb	r2, [r2, #0]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801531e:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015320:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8015322:	0023      	movs	r3, r4
 8015324:	9a01      	ldr	r2, [sp, #4]
 8015326:	33c4      	adds	r3, #196	; 0xc4
 8015328:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801532a:	0023      	movs	r3, r4
 801532c:	9a03      	ldr	r2, [sp, #12]
 801532e:	33c5      	adds	r3, #197	; 0xc5
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015330:	35dc      	adds	r5, #220	; 0xdc
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8015332:	701a      	strb	r2, [r3, #0]
            RadioStandby( );
 8015334:	f7ff fba2 	bl	8014a7c <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015338:	7828      	ldrb	r0, [r5, #0]
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801533a:	34ed      	adds	r4, #237	; 0xed
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801533c:	1e43      	subs	r3, r0, #1
 801533e:	4198      	sbcs	r0, r3
 8015340:	b2c0      	uxtb	r0, r0
 8015342:	f7ff fe2b 	bl	8014f9c <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8015346:	0028      	movs	r0, r5
 8015348:	f000 fb6c 	bl	8015a24 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 801534c:	4814      	ldr	r0, [pc, #80]	; (80153a0 <RadioSetTxConfig+0x1bc>)
 801534e:	f000 fbbf 	bl	8015ad0 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8015352:	7823      	ldrb	r3, [r4, #0]
 8015354:	2b06      	cmp	r3, #6
 8015356:	d000      	beq.n	801535a <RadioSetTxConfig+0x176>
 8015358:	e75c      	b.n	8015214 <RadioSetTxConfig+0x30>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 801535a:	480e      	ldr	r0, [pc, #56]	; (8015394 <RadioSetTxConfig+0x1b0>)
 801535c:	f7ef fa04 	bl	8004768 <SX126xReadRegister>
 8015360:	21fb      	movs	r1, #251	; 0xfb
 8015362:	4001      	ands	r1, r0
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8015364:	480b      	ldr	r0, [pc, #44]	; (8015394 <RadioSetTxConfig+0x1b0>)
 8015366:	f7ef f9c3 	bl	80046f0 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 801536a:	9802      	ldr	r0, [sp, #8]
 801536c:	f7ef fa5e 	bl	800482c <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8015370:	4b10      	ldr	r3, [pc, #64]	; (80153b4 <RadioSetTxConfig+0x1d0>)
 8015372:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015374:	601a      	str	r2, [r3, #0]
}
 8015376:	b007      	add	sp, #28
 8015378:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801537a:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801537c:	2b01      	cmp	r3, #1
 801537e:	d1b6      	bne.n	80152ee <RadioSetTxConfig+0x10a>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015380:	3a0c      	subs	r2, #12
 8015382:	4253      	negs	r3, r2
 8015384:	415a      	adcs	r2, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015386:	b2d0      	uxtb	r0, r2
 8015388:	e7b1      	b.n	80152ee <RadioSetTxConfig+0x10a>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801538a:	4b03      	ldr	r3, [pc, #12]	; (8015398 <RadioSetTxConfig+0x1b4>)
 801538c:	33c0      	adds	r3, #192	; 0xc0
 801538e:	801e      	strh	r6, [r3, #0]
 8015390:	e7bd      	b.n	801530e <RadioSetTxConfig+0x12a>
 8015392:	46c0      	nop			; (mov r8, r8)
 8015394:	00000889 	.word	0x00000889
 8015398:	20001c90 	.word	0x20001c90
 801539c:	00001804 	.word	0x00001804
 80153a0:	20001d44 	.word	0x20001d44
 80153a4:	080187f7 	.word	0x080187f7
 80153a8:	000001ff 	.word	0x000001ff
 80153ac:	0801a8fc 	.word	0x0801a8fc
 80153b0:	20000240 	.word	0x20000240
 80153b4:	20001d80 	.word	0x20001d80

080153b8 <RadioIsChannelFree>:
{
 80153b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ba:	0004      	movs	r4, r0
 80153bc:	b08d      	sub	sp, #52	; 0x34
    RadioSetModem( MODEM_FSK );
 80153be:	2000      	movs	r0, #0
{
 80153c0:	000d      	movs	r5, r1
 80153c2:	0016      	movs	r6, r2
 80153c4:	930b      	str	r3, [sp, #44]	; 0x2c
    RadioSetModem( MODEM_FSK );
 80153c6:	f7ff fde9 	bl	8014f9c <RadioSetModem>
    SX126xSetRfFrequency( freq );
 80153ca:	0020      	movs	r0, r4
 80153cc:	f000 faa2 	bl	8015914 <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80153d0:	2400      	movs	r4, #0
 80153d2:	2701      	movs	r7, #1
 80153d4:	2303      	movs	r3, #3
 80153d6:	2296      	movs	r2, #150	; 0x96
 80153d8:	0029      	movs	r1, r5
 80153da:	0092      	lsls	r2, r2, #2
 80153dc:	0020      	movs	r0, r4
 80153de:	9408      	str	r4, [sp, #32]
 80153e0:	9407      	str	r4, [sp, #28]
 80153e2:	9406      	str	r4, [sp, #24]
 80153e4:	9405      	str	r4, [sp, #20]
 80153e6:	9404      	str	r4, [sp, #16]
 80153e8:	9403      	str	r4, [sp, #12]
 80153ea:	9402      	str	r4, [sp, #8]
 80153ec:	9301      	str	r3, [sp, #4]
 80153ee:	9709      	str	r7, [sp, #36]	; 0x24
 80153f0:	0023      	movs	r3, r4
 80153f2:	9500      	str	r5, [sp, #0]
 80153f4:	f7ff fde2 	bl	8014fbc <RadioSetRxConfig>
    RadioRx( 0 );
 80153f8:	0020      	movs	r0, r4
 80153fa:	f7ff fc09 	bl	8014c10 <RadioRx>
    DelayMs( 1 );
 80153fe:	0038      	movs	r0, r7
 8015400:	f7f6 f89c 	bl	800b53c <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8015404:	f7f6 fab3 	bl	800b96e <TimerGetCurrentTime>
 8015408:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801540a:	0020      	movs	r0, r4
 801540c:	f7f6 fab5 	bl	800b97a <TimerGetElapsedTime>
 8015410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015412:	4298      	cmp	r0, r3
 8015414:	d305      	bcc.n	8015422 <RadioIsChannelFree+0x6a>
    bool     status           = true;
 8015416:	2401      	movs	r4, #1
    RadioSleep( );
 8015418:	f7ff fb80 	bl	8014b1c <RadioSleep>
}
 801541c:	0020      	movs	r0, r4
 801541e:	b00d      	add	sp, #52	; 0x34
 8015420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SX126xGetRssiInst( );
 8015422:	f000 fbc1 	bl	8015ba8 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 8015426:	b200      	sxth	r0, r0
 8015428:	4286      	cmp	r6, r0
 801542a:	daee      	bge.n	801540a <RadioIsChannelFree+0x52>
            status = false;
 801542c:	2400      	movs	r4, #0
 801542e:	e7f3      	b.n	8015418 <RadioIsChannelFree+0x60>

08015430 <RadioRandom>:
{
 8015430:	b510      	push	{r4, lr}
 8015432:	f7ff fda3 	bl	8014f7c <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015436:	2300      	movs	r3, #0
 8015438:	001a      	movs	r2, r3
 801543a:	0019      	movs	r1, r3
 801543c:	0018      	movs	r0, r3
 801543e:	f000 fa41 	bl	80158c4 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 8015442:	f000 f94b 	bl	80156dc <SX126xGetRandom>
}
 8015446:	bd10      	pop	{r4, pc}

08015448 <RadioAddRegisterToRetentionList>:
{
 8015448:	b530      	push	{r4, r5, lr}
 801544a:	b085      	sub	sp, #20
 801544c:	0004      	movs	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 801544e:	2209      	movs	r2, #9
 8015450:	4814      	ldr	r0, [pc, #80]	; (80154a4 <RadioAddRegisterToRetentionList+0x5c>)
 8015452:	a901      	add	r1, sp, #4
 8015454:	f7ef f956 	bl	8004704 <SX126xReadRegisters>
    const uint8_t nbOfRegisters = buffer[0];
 8015458:	466b      	mov	r3, sp
 801545a:	791d      	ldrb	r5, [r3, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 801545c:	2300      	movs	r3, #0
 801545e:	a801      	add	r0, sp, #4
 8015460:	42ab      	cmp	r3, r5
 8015462:	d113      	bne.n	801548c <RadioAddRegisterToRetentionList+0x44>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 8015464:	2b03      	cmp	r3, #3
 8015466:	d80f      	bhi.n	8015488 <RadioAddRegisterToRetentionList+0x40>
        buffer[0] += 1;
 8015468:	4669      	mov	r1, sp
 801546a:	1c5a      	adds	r2, r3, #1
 801546c:	710a      	strb	r2, [r1, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 801546e:	466a      	mov	r2, sp
 8015470:	005b      	lsls	r3, r3, #1
 8015472:	0a21      	lsrs	r1, r4, #8
 8015474:	3205      	adds	r2, #5
 8015476:	54d1      	strb	r1, [r2, r3]
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8015478:	466a      	mov	r2, sp
 801547a:	3206      	adds	r2, #6
 801547c:	54d4      	strb	r4, [r2, r3]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 801547e:	4809      	ldr	r0, [pc, #36]	; (80154a4 <RadioAddRegisterToRetentionList+0x5c>)
 8015480:	2209      	movs	r2, #9
 8015482:	a901      	add	r1, sp, #4
 8015484:	f7ef f906 	bl	8004694 <SX126xWriteRegisters>
}
 8015488:	b005      	add	sp, #20
 801548a:	bd30      	pop	{r4, r5, pc}
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 801548c:	0001      	movs	r1, r0
 801548e:	7842      	ldrb	r2, [r0, #1]
 8015490:	7889      	ldrb	r1, [r1, #2]
 8015492:	0212      	lsls	r2, r2, #8
 8015494:	1852      	adds	r2, r2, r1
 8015496:	3002      	adds	r0, #2
 8015498:	4294      	cmp	r4, r2
 801549a:	d0f5      	beq.n	8015488 <RadioAddRegisterToRetentionList+0x40>
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 801549c:	3301      	adds	r3, #1
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	e7de      	b.n	8015460 <RadioAddRegisterToRetentionList+0x18>
 80154a2:	46c0      	nop			; (mov r8, r8)
 80154a4:	0000029f 	.word	0x0000029f

080154a8 <RadioInit>:
    RadioEvents = events;
 80154a8:	4b15      	ldr	r3, [pc, #84]	; (8015500 <RadioInit+0x58>)
{
 80154aa:	b510      	push	{r4, lr}
    RadioEvents = events;
 80154ac:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 80154ae:	4815      	ldr	r0, [pc, #84]	; (8015504 <RadioInit+0x5c>)
 80154b0:	f000 f8cc 	bl	801564c <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 80154b4:	2000      	movs	r0, #0
 80154b6:	f000 f8b7 	bl	8015628 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 80154ba:	2001      	movs	r0, #1
 80154bc:	f000 f9bc 	bl	8015838 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 80154c0:	2100      	movs	r1, #0
 80154c2:	0008      	movs	r0, r1
 80154c4:	f000 fb66 	bl	8015b94 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 80154c8:	2104      	movs	r1, #4
 80154ca:	2000      	movs	r0, #0
 80154cc:	f000 fa64 	bl	8015998 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80154d0:	2300      	movs	r3, #0
 80154d2:	480d      	ldr	r0, [pc, #52]	; (8015508 <RadioInit+0x60>)
 80154d4:	001a      	movs	r2, r3
 80154d6:	0001      	movs	r1, r0
 80154d8:	f000 f9f4 	bl	80158c4 <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 80154dc:	480b      	ldr	r0, [pc, #44]	; (801550c <RadioInit+0x64>)
 80154de:	f7ff ffb3 	bl	8015448 <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 80154e2:	480b      	ldr	r0, [pc, #44]	; (8015510 <RadioInit+0x68>)
 80154e4:	f7ff ffb0 	bl	8015448 <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80154e8:	490a      	ldr	r1, [pc, #40]	; (8015514 <RadioInit+0x6c>)
 80154ea:	480b      	ldr	r0, [pc, #44]	; (8015518 <RadioInit+0x70>)
 80154ec:	f7f6 f980 	bl	800b7f0 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80154f0:	490a      	ldr	r1, [pc, #40]	; (801551c <RadioInit+0x74>)
 80154f2:	480b      	ldr	r0, [pc, #44]	; (8015520 <RadioInit+0x78>)
 80154f4:	f7f6 f97c 	bl	800b7f0 <TimerInit>
    IrqFired = false;
 80154f8:	2200      	movs	r2, #0
 80154fa:	4b0a      	ldr	r3, [pc, #40]	; (8015524 <RadioInit+0x7c>)
 80154fc:	701a      	strb	r2, [r3, #0]
}
 80154fe:	bd10      	pop	{r4, pc}
 8015500:	20001b58 	.word	0x20001b58
 8015504:	08014a71 	.word	0x08014a71
 8015508:	0000ffff 	.word	0x0000ffff
 801550c:	000008ac 	.word	0x000008ac
 8015510:	00000889 	.word	0x00000889
 8015514:	08014a41 	.word	0x08014a41
 8015518:	20001d84 	.word	0x20001d84
 801551c:	08014a59 	.word	0x08014a59
 8015520:	20001c78 	.word	0x20001c78
 8015524:	20001b54 	.word	0x20001b54

08015528 <SX126xCheckDeviceReady>:

    SX126xSetOperatingMode( MODE_STDBY_RC );
}

void SX126xCheckDeviceReady( void )
{
 8015528:	b510      	push	{r4, lr}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 801552a:	f7ef f803 	bl	8004534 <SX126xGetOperatingMode>
 801552e:	2800      	cmp	r0, #0
 8015530:	d104      	bne.n	801553c <SX126xCheckDeviceReady+0x14>
    {
        SX126xWakeup( );
 8015532:	f7ef f835 	bl	80045a0 <SX126xWakeup>
    }
    SX126xWaitOnBusy( );
 8015536:	f7ef f829 	bl	800458c <SX126xWaitOnBusy>
}
 801553a:	bd10      	pop	{r4, pc}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 801553c:	f7ee fffa 	bl	8004534 <SX126xGetOperatingMode>
 8015540:	2806      	cmp	r0, #6
 8015542:	d1f8      	bne.n	8015536 <SX126xCheckDeviceReady+0xe>
 8015544:	e7f5      	b.n	8015532 <SX126xCheckDeviceReady+0xa>

08015546 <SX126xSetPayload>:

void SX126xSetPayload( uint8_t *payload, uint8_t size )
{
 8015546:	b510      	push	{r4, lr}
 8015548:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 801554a:	0001      	movs	r1, r0
 801554c:	2000      	movs	r0, #0
 801554e:	f7ef f915 	bl	800477c <SX126xWriteBuffer>
}
 8015552:	bd10      	pop	{r4, pc}

08015554 <SX126xSetSyncWord>:
    SX126xSetPayload( payload, size );
    SX126xSetTx( timeout );
}

uint8_t SX126xSetSyncWord( uint8_t *syncWord )
{
 8015554:	0001      	movs	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8015556:	20d8      	movs	r0, #216	; 0xd8
{
 8015558:	b510      	push	{r4, lr}
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801555a:	00c0      	lsls	r0, r0, #3
 801555c:	2208      	movs	r2, #8
 801555e:	f7ef f899 	bl	8004694 <SX126xWriteRegisters>
    return 0;
}
 8015562:	2000      	movs	r0, #0
 8015564:	bd10      	pop	{r4, pc}
	...

08015568 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed( uint16_t seed )
{
 8015568:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801556a:	466a      	mov	r2, sp
 801556c:	0a03      	lsrs	r3, r0, #8
 801556e:	7113      	strb	r3, [r2, #4]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 8015570:	4b05      	ldr	r3, [pc, #20]	; (8015588 <SX126xSetCrcSeed+0x20>)
    buf[1] = ( uint8_t )( seed & 0xFF );
 8015572:	7150      	strb	r0, [r2, #5]
    switch( SX126xGetPacketType( ) )
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d104      	bne.n	8015584 <SX126xSetCrcSeed+0x1c>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801557a:	2202      	movs	r2, #2
 801557c:	4803      	ldr	r0, [pc, #12]	; (801558c <SX126xSetCrcSeed+0x24>)
 801557e:	a901      	add	r1, sp, #4
 8015580:	f7ef f888 	bl	8004694 <SX126xWriteRegisters>
}
 8015584:	bd07      	pop	{r0, r1, r2, pc}
 8015586:	46c0      	nop			; (mov r8, r8)
 8015588:	20001da2 	.word	0x20001da2
 801558c:	000006bc 	.word	0x000006bc

08015590 <SX126xSetCrcPolynomial>:
{
 8015590:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8015592:	466a      	mov	r2, sp
 8015594:	0a03      	lsrs	r3, r0, #8
 8015596:	7113      	strb	r3, [r2, #4]
    return PacketType;
 8015598:	4b05      	ldr	r3, [pc, #20]	; (80155b0 <SX126xSetCrcPolynomial+0x20>)
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801559a:	7150      	strb	r0, [r2, #5]
    switch( SX126xGetPacketType( ) )
 801559c:	781b      	ldrb	r3, [r3, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d104      	bne.n	80155ac <SX126xSetCrcPolynomial+0x1c>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80155a2:	2202      	movs	r2, #2
 80155a4:	4803      	ldr	r0, [pc, #12]	; (80155b4 <SX126xSetCrcPolynomial+0x24>)
 80155a6:	a901      	add	r1, sp, #4
 80155a8:	f7ef f874 	bl	8004694 <SX126xWriteRegisters>
}
 80155ac:	bd07      	pop	{r0, r1, r2, pc}
 80155ae:	46c0      	nop			; (mov r8, r8)
 80155b0:	20001da2 	.word	0x20001da2
 80155b4:	000006be 	.word	0x000006be

080155b8 <SX126xSetWhiteningSeed>:
{
 80155b8:	b510      	push	{r4, lr}
    return PacketType;
 80155ba:	4b0c      	ldr	r3, [pc, #48]	; (80155ec <SX126xSetWhiteningSeed+0x34>)
{
 80155bc:	0004      	movs	r4, r0
    switch( SX126xGetPacketType( ) )
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d111      	bne.n	80155e8 <SX126xSetWhiteningSeed+0x30>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80155c4:	20d7      	movs	r0, #215	; 0xd7
 80155c6:	00c0      	lsls	r0, r0, #3
 80155c8:	f7ef f8ce 	bl	8004768 <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80155cc:	2301      	movs	r3, #1
 80155ce:	0a21      	lsrs	r1, r4, #8
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80155d0:	4398      	bics	r0, r3
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80155d2:	4019      	ands	r1, r3
 80155d4:	4301      	orrs	r1, r0
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80155d6:	20d7      	movs	r0, #215	; 0xd7
 80155d8:	b2c9      	uxtb	r1, r1
 80155da:	00c0      	lsls	r0, r0, #3
 80155dc:	f7ef f888 	bl	80046f0 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 80155e0:	4803      	ldr	r0, [pc, #12]	; (80155f0 <SX126xSetWhiteningSeed+0x38>)
 80155e2:	b2e1      	uxtb	r1, r4
 80155e4:	f7ef f884 	bl	80046f0 <SX126xWriteRegister>
}
 80155e8:	bd10      	pop	{r4, pc}
 80155ea:	46c0      	nop			; (mov r8, r8)
 80155ec:	20001da2 	.word	0x20001da2
 80155f0:	000006b9 	.word	0x000006b9

080155f4 <SX126xSetSleep>:
{
 80155f4:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80155f6:	466b      	mov	r3, sp
 80155f8:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80155fa:	2306      	movs	r3, #6
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80155fc:	07c2      	lsls	r2, r0, #31
 80155fe:	0fd2      	lsrs	r2, r2, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8015600:	4003      	ands	r3, r0
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8015602:	4313      	orrs	r3, r2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8015604:	700b      	strb	r3, [r1, #0]
    if( sleepConfig.Fields.WarmStart == 0 )
 8015606:	2304      	movs	r3, #4
 8015608:	001a      	movs	r2, r3
 801560a:	4002      	ands	r2, r0
 801560c:	4203      	tst	r3, r0
 801560e:	d101      	bne.n	8015614 <SX126xSetSleep+0x20>
        ImageCalibrated = false;
 8015610:	4b04      	ldr	r3, [pc, #16]	; (8015624 <SX126xSetSleep+0x30>)
 8015612:	701a      	strb	r2, [r3, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8015614:	2201      	movs	r2, #1
 8015616:	2084      	movs	r0, #132	; 0x84
 8015618:	f7ee ffe8 	bl	80045ec <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_SLEEP );
 801561c:	2000      	movs	r0, #0
 801561e:	f7ee ff8f 	bl	8004540 <SX126xSetOperatingMode>
}
 8015622:	bd07      	pop	{r0, r1, r2, pc}
 8015624:	20001da0 	.word	0x20001da0

08015628 <SX126xSetStandby>:
{
 8015628:	b507      	push	{r0, r1, r2, lr}
 801562a:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801562c:	2201      	movs	r2, #1
{
 801562e:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8015630:	1dd9      	adds	r1, r3, #7
 8015632:	2080      	movs	r0, #128	; 0x80
 8015634:	f7ee ffda 	bl	80045ec <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8015638:	466b      	mov	r3, sp
 801563a:	79db      	ldrb	r3, [r3, #7]
        SX126xSetOperatingMode( MODE_STDBY_RC );
 801563c:	2001      	movs	r0, #1
    if( standbyConfig == STDBY_RC )
 801563e:	2b00      	cmp	r3, #0
 8015640:	d000      	beq.n	8015644 <SX126xSetStandby+0x1c>
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 8015642:	2002      	movs	r0, #2
 8015644:	f7ee ff7c 	bl	8004540 <SX126xSetOperatingMode>
}
 8015648:	bd07      	pop	{r0, r1, r2, pc}
	...

0801564c <SX126xInit>:
{
 801564c:	b510      	push	{r4, lr}
 801564e:	0004      	movs	r4, r0
    SX126xReset( );
 8015650:	f7ee ff7c 	bl	800454c <SX126xReset>
    SX126xIoIrqInit( dioIrq );
 8015654:	0020      	movs	r0, r4
 8015656:	f7ee ff5b 	bl	8004510 <SX126xIoIrqInit>
    SX126xWakeup( );
 801565a:	f7ee ffa1 	bl	80045a0 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 801565e:	2000      	movs	r0, #0
 8015660:	f7ff ffe2 	bl	8015628 <SX126xSetStandby>
    SX126xIoTcxoInit( );
 8015664:	f7ee ff5e 	bl	8004524 <SX126xIoTcxoInit>
    SX126xIoRfSwitchInit( );
 8015668:	f7ee ff5f 	bl	800452a <SX126xIoRfSwitchInit>
    ImageCalibrated = false;
 801566c:	2200      	movs	r2, #0
 801566e:	4b03      	ldr	r3, [pc, #12]	; (801567c <SX126xInit+0x30>)
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8015670:	2001      	movs	r0, #1
    ImageCalibrated = false;
 8015672:	701a      	strb	r2, [r3, #0]
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8015674:	f7ee ff64 	bl	8004540 <SX126xSetOperatingMode>
}
 8015678:	bd10      	pop	{r4, pc}
 801567a:	46c0      	nop			; (mov r8, r8)
 801567c:	20001da0 	.word	0x20001da0

08015680 <SX126xSetTx>:
{
 8015680:	b513      	push	{r0, r1, r4, lr}
 8015682:	0004      	movs	r4, r0
    SX126xSetOperatingMode( MODE_TX );
 8015684:	2004      	movs	r0, #4
 8015686:	f7ee ff5b 	bl	8004540 <SX126xSetOperatingMode>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801568a:	a901      	add	r1, sp, #4
 801568c:	0c23      	lsrs	r3, r4, #16
 801568e:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015690:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8015692:	2203      	movs	r2, #3
 8015694:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015696:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015698:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 801569a:	f7ee ffa7 	bl	80045ec <SX126xWriteCommand>
}
 801569e:	bd13      	pop	{r0, r1, r4, pc}

080156a0 <SX126xSendPayload>:
{
 80156a0:	b510      	push	{r4, lr}
 80156a2:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 80156a4:	f7ff ff4f 	bl	8015546 <SX126xSetPayload>
    SX126xSetTx( timeout );
 80156a8:	0020      	movs	r0, r4
 80156aa:	f7ff ffe9 	bl	8015680 <SX126xSetTx>
}
 80156ae:	bd10      	pop	{r4, pc}

080156b0 <SX126xSetRx>:
{
 80156b0:	b513      	push	{r0, r1, r4, lr}
 80156b2:	0004      	movs	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 80156b4:	2005      	movs	r0, #5
 80156b6:	f7ee ff43 	bl	8004540 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 80156ba:	2194      	movs	r1, #148	; 0x94
 80156bc:	4806      	ldr	r0, [pc, #24]	; (80156d8 <SX126xSetRx+0x28>)
 80156be:	f7ef f817 	bl	80046f0 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80156c2:	a901      	add	r1, sp, #4
 80156c4:	0c23      	lsrs	r3, r4, #16
 80156c6:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80156c8:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80156ca:	2203      	movs	r2, #3
 80156cc:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80156ce:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80156d0:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80156d2:	f7ee ff8b 	bl	80045ec <SX126xWriteCommand>
}
 80156d6:	bd13      	pop	{r0, r1, r4, pc}
 80156d8:	000008ac 	.word	0x000008ac

080156dc <SX126xGetRandom>:
{
 80156dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t number = 0;
 80156de:	2700      	movs	r7, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 80156e0:	4e15      	ldr	r6, [pc, #84]	; (8015738 <SX126xGetRandom+0x5c>)
{
 80156e2:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 80156e4:	0030      	movs	r0, r6
    uint32_t number = 0;
 80156e6:	9703      	str	r7, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 80156e8:	f7ef f83e 	bl	8004768 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80156ec:	21fe      	movs	r1, #254	; 0xfe
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 80156ee:	4d13      	ldr	r5, [pc, #76]	; (801573c <SX126xGetRandom+0x60>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80156f0:	4001      	ands	r1, r0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 80156f2:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80156f4:	0030      	movs	r0, r6
 80156f6:	f7ee fffb 	bl	80046f0 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 80156fa:	0028      	movs	r0, r5
 80156fc:	f7ef f834 	bl	8004768 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8015700:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8015702:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8015704:	4001      	ands	r1, r0
 8015706:	0028      	movs	r0, r5
 8015708:	f7ee fff2 	bl	80046f0 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 801570c:	480c      	ldr	r0, [pc, #48]	; (8015740 <SX126xGetRandom+0x64>)
 801570e:	f7ff ffcf 	bl	80156b0 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8015712:	2204      	movs	r2, #4
 8015714:	a903      	add	r1, sp, #12
 8015716:	480b      	ldr	r0, [pc, #44]	; (8015744 <SX126xGetRandom+0x68>)
 8015718:	f7ee fff4 	bl	8004704 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 801571c:	0038      	movs	r0, r7
 801571e:	f7ff ff83 	bl	8015628 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 8015722:	0021      	movs	r1, r4
 8015724:	0030      	movs	r0, r6
 8015726:	f7ee ffe3 	bl	80046f0 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 801572a:	0028      	movs	r0, r5
 801572c:	9901      	ldr	r1, [sp, #4]
 801572e:	f7ee ffdf 	bl	80046f0 <SX126xWriteRegister>
}
 8015732:	9803      	ldr	r0, [sp, #12]
 8015734:	b005      	add	sp, #20
 8015736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015738:	000008e2 	.word	0x000008e2
 801573c:	000008e5 	.word	0x000008e5
 8015740:	00ffffff 	.word	0x00ffffff
 8015744:	00000819 	.word	0x00000819

08015748 <SX126xSetRxBoosted>:
{
 8015748:	b513      	push	{r0, r1, r4, lr}
 801574a:	0004      	movs	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 801574c:	2005      	movs	r0, #5
 801574e:	f7ee fef7 	bl	8004540 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8015752:	2196      	movs	r1, #150	; 0x96
 8015754:	4806      	ldr	r0, [pc, #24]	; (8015770 <SX126xSetRxBoosted+0x28>)
 8015756:	f7ee ffcb 	bl	80046f0 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801575a:	a901      	add	r1, sp, #4
 801575c:	0c23      	lsrs	r3, r4, #16
 801575e:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015760:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8015762:	2203      	movs	r2, #3
 8015764:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015766:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015768:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 801576a:	f7ee ff3f 	bl	80045ec <SX126xWriteCommand>
}
 801576e:	bd13      	pop	{r0, r1, r4, pc}
 8015770:	000008ac 	.word	0x000008ac

08015774 <SX126xSetRxDutyCycle>:
{
 8015774:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8015776:	466a      	mov	r2, sp
 8015778:	0c03      	lsrs	r3, r0, #16
 801577a:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801577c:	0a03      	lsrs	r3, r0, #8
 801577e:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8015780:	0c0b      	lsrs	r3, r1, #16
 8015782:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015784:	0a0b      	lsrs	r3, r1, #8
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8015786:	7090      	strb	r0, [r2, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015788:	7113      	strb	r3, [r2, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801578a:	7151      	strb	r1, [r2, #5]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801578c:	2094      	movs	r0, #148	; 0x94
 801578e:	2206      	movs	r2, #6
 8015790:	4669      	mov	r1, sp
 8015792:	f7ee ff2b 	bl	80045ec <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_RX_DC );
 8015796:	2006      	movs	r0, #6
 8015798:	f7ee fed2 	bl	8004540 <SX126xSetOperatingMode>
}
 801579c:	bd07      	pop	{r0, r1, r2, pc}

0801579e <SX126xSetCad>:
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 801579e:	2200      	movs	r2, #0
{
 80157a0:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 80157a2:	0011      	movs	r1, r2
 80157a4:	20c5      	movs	r0, #197	; 0xc5
 80157a6:	f7ee ff21 	bl	80045ec <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_CAD );
 80157aa:	2007      	movs	r0, #7
 80157ac:	f7ee fec8 	bl	8004540 <SX126xSetOperatingMode>
}
 80157b0:	bd10      	pop	{r4, pc}

080157b2 <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80157b2:	2200      	movs	r2, #0
{
 80157b4:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80157b6:	0011      	movs	r1, r2
 80157b8:	20d1      	movs	r0, #209	; 0xd1
 80157ba:	f7ee ff17 	bl	80045ec <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_TX );
 80157be:	2004      	movs	r0, #4
 80157c0:	f7ee febe 	bl	8004540 <SX126xSetOperatingMode>
}
 80157c4:	bd10      	pop	{r4, pc}

080157c6 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 80157c6:	b507      	push	{r0, r1, r2, lr}
 80157c8:	466b      	mov	r3, sp
 80157ca:	1dd9      	adds	r1, r3, #7
 80157cc:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80157ce:	2201      	movs	r2, #1
 80157d0:	209f      	movs	r0, #159	; 0x9f
 80157d2:	f7ee ff0b 	bl	80045ec <SX126xWriteCommand>
}
 80157d6:	bd07      	pop	{r0, r1, r2, pc}

080157d8 <SX126xSetLoRaSymbNumTimeout>:
{
 80157d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157da:	0005      	movs	r5, r0
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 80157dc:	1c04      	adds	r4, r0, #0
 80157de:	28f8      	cmp	r0, #248	; 0xf8
 80157e0:	d901      	bls.n	80157e6 <SX126xSetLoRaSymbNumTimeout+0xe>
 80157e2:	4b13      	ldr	r3, [pc, #76]	; (8015830 <SX126xSetLoRaSymbNumTimeout+0x58>)
 80157e4:	781c      	ldrb	r4, [r3, #0]
    uint8_t exp  = 0;
 80157e6:	2600      	movs	r6, #0
                       symbNum ) + 1 ) >> 1;
 80157e8:	3401      	adds	r4, #1
 80157ea:	b2e4      	uxtb	r4, r4
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 80157ec:	0864      	lsrs	r4, r4, #1
    while( mant > 31 )
 80157ee:	2c1f      	cmp	r4, #31
 80157f0:	d817      	bhi.n	8015822 <SX126xSetLoRaSymbNumTimeout+0x4a>
    reg = mant << ( 2 * exp + 1 );
 80157f2:	0022      	movs	r2, r4
 80157f4:	0073      	lsls	r3, r6, #1
 80157f6:	3301      	adds	r3, #1
 80157f8:	409a      	lsls	r2, r3
 80157fa:	0013      	movs	r3, r2
 80157fc:	466a      	mov	r2, sp
 80157fe:	71d3      	strb	r3, [r2, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8015800:	466b      	mov	r3, sp
 8015802:	2201      	movs	r2, #1
 8015804:	20a0      	movs	r0, #160	; 0xa0
 8015806:	1dd9      	adds	r1, r3, #7
 8015808:	f7ee fef0 	bl	80045ec <SX126xWriteCommand>
    if( symbNum != 0 )
 801580c:	2d00      	cmp	r5, #0
 801580e:	d007      	beq.n	8015820 <SX126xSetLoRaSymbNumTimeout+0x48>
        reg = exp + ( mant << 3 );
 8015810:	466b      	mov	r3, sp
 8015812:	00e1      	lsls	r1, r4, #3
 8015814:	1871      	adds	r1, r6, r1
 8015816:	b2c9      	uxtb	r1, r1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8015818:	4806      	ldr	r0, [pc, #24]	; (8015834 <SX126xSetLoRaSymbNumTimeout+0x5c>)
        reg = exp + ( mant << 3 );
 801581a:	71d9      	strb	r1, [r3, #7]
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801581c:	f7ee ff68 	bl	80046f0 <SX126xWriteRegister>
}
 8015820:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        mant = ( mant + 3 ) >> 2;
 8015822:	3403      	adds	r4, #3
 8015824:	10a4      	asrs	r4, r4, #2
        exp++;
 8015826:	3601      	adds	r6, #1
        mant = ( mant + 3 ) >> 2;
 8015828:	b2e4      	uxtb	r4, r4
        exp++;
 801582a:	b2f6      	uxtb	r6, r6
 801582c:	e7df      	b.n	80157ee <SX126xSetLoRaSymbNumTimeout+0x16>
 801582e:	46c0      	nop			; (mov r8, r8)
 8015830:	0801aa4c 	.word	0x0801aa4c
 8015834:	00000706 	.word	0x00000706

08015838 <SX126xSetRegulatorMode>:
{
 8015838:	b507      	push	{r0, r1, r2, lr}
 801583a:	466b      	mov	r3, sp
 801583c:	1dd9      	adds	r1, r3, #7
 801583e:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8015840:	2201      	movs	r2, #1
 8015842:	2096      	movs	r0, #150	; 0x96
 8015844:	f7ee fed2 	bl	80045ec <SX126xWriteCommand>
}
 8015848:	bd07      	pop	{r0, r1, r2, pc}
	...

0801584c <SX126xCalibrateImage>:
{
 801584c:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 801584e:	4b12      	ldr	r3, [pc, #72]	; (8015898 <SX126xCalibrateImage+0x4c>)
 8015850:	a901      	add	r1, sp, #4
 8015852:	4298      	cmp	r0, r3
 8015854:	d908      	bls.n	8015868 <SX126xCalibrateImage+0x1c>
        calFreq[0] = 0xE1;
 8015856:	23e1      	movs	r3, #225	; 0xe1
 8015858:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0xE9;
 801585a:	3308      	adds	r3, #8
        calFreq[1] = 0x6F;
 801585c:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801585e:	2202      	movs	r2, #2
 8015860:	2098      	movs	r0, #152	; 0x98
 8015862:	f7ee fec3 	bl	80045ec <SX126xWriteCommand>
}
 8015866:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 8015868:	4b0c      	ldr	r3, [pc, #48]	; (801589c <SX126xCalibrateImage+0x50>)
 801586a:	4298      	cmp	r0, r3
 801586c:	d903      	bls.n	8015876 <SX126xCalibrateImage+0x2a>
        calFreq[0] = 0xD7;
 801586e:	23d7      	movs	r3, #215	; 0xd7
        calFreq[0] = 0x6B;
 8015870:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x6F;
 8015872:	3304      	adds	r3, #4
 8015874:	e7f2      	b.n	801585c <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 8015876:	4b0a      	ldr	r3, [pc, #40]	; (80158a0 <SX126xCalibrateImage+0x54>)
 8015878:	4298      	cmp	r0, r3
 801587a:	d901      	bls.n	8015880 <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xC1;
 801587c:	23c1      	movs	r3, #193	; 0xc1
 801587e:	e7f7      	b.n	8015870 <SX126xCalibrateImage+0x24>
    else if( freq > 460000000 )
 8015880:	4b08      	ldr	r3, [pc, #32]	; (80158a4 <SX126xCalibrateImage+0x58>)
 8015882:	4298      	cmp	r0, r3
 8015884:	d903      	bls.n	801588e <SX126xCalibrateImage+0x42>
        calFreq[0] = 0x75;
 8015886:	2375      	movs	r3, #117	; 0x75
 8015888:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x81;
 801588a:	330c      	adds	r3, #12
 801588c:	e7e6      	b.n	801585c <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 801588e:	4b06      	ldr	r3, [pc, #24]	; (80158a8 <SX126xCalibrateImage+0x5c>)
 8015890:	4298      	cmp	r0, r3
 8015892:	d9e4      	bls.n	801585e <SX126xCalibrateImage+0x12>
        calFreq[0] = 0x6B;
 8015894:	236b      	movs	r3, #107	; 0x6b
 8015896:	e7eb      	b.n	8015870 <SX126xCalibrateImage+0x24>
 8015898:	35a4e900 	.word	0x35a4e900
 801589c:	32a9f880 	.word	0x32a9f880
 80158a0:	2de54480 	.word	0x2de54480
 80158a4:	1b6b0b00 	.word	0x1b6b0b00
 80158a8:	1954fc40 	.word	0x1954fc40

080158ac <SX126xSetPaConfig>:
{
 80158ac:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 80158ae:	ac01      	add	r4, sp, #4
 80158b0:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 80158b2:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 80158b4:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80158b6:	0021      	movs	r1, r4
 80158b8:	2204      	movs	r2, #4
 80158ba:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 80158bc:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80158be:	f7ee fe95 	bl	80045ec <SX126xWriteCommand>
}
 80158c2:	bd13      	pop	{r0, r1, r4, pc}

080158c4 <SX126xSetDioIrqParams>:
{
 80158c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80158c6:	466d      	mov	r5, sp
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80158c8:	7068      	strb	r0, [r5, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80158ca:	70e9      	strb	r1, [r5, #3]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80158cc:	716a      	strb	r2, [r5, #5]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80158ce:	0a04      	lsrs	r4, r0, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80158d0:	0a08      	lsrs	r0, r1, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80158d2:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80158d4:	0a1a      	lsrs	r2, r3, #8
 80158d6:	71aa      	strb	r2, [r5, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80158d8:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80158da:	70a8      	strb	r0, [r5, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80158dc:	7129      	strb	r1, [r5, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80158de:	0010      	movs	r0, r2
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80158e0:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80158e2:	702c      	strb	r4, [r5, #0]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80158e4:	71eb      	strb	r3, [r5, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80158e6:	f7ee fe81 	bl	80045ec <SX126xWriteCommand>
}
 80158ea:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080158ec <SX126xGetIrqStatus>:
{
 80158ec:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 80158ee:	ac01      	add	r4, sp, #4
 80158f0:	2202      	movs	r2, #2
 80158f2:	0021      	movs	r1, r4
 80158f4:	2012      	movs	r0, #18
 80158f6:	f7ee fea1 	bl	800463c <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 80158fa:	8820      	ldrh	r0, [r4, #0]
 80158fc:	ba40      	rev16	r0, r0
 80158fe:	b280      	uxth	r0, r0
}
 8015900:	bd16      	pop	{r1, r2, r4, pc}

08015902 <SX126xSetDio2AsRfSwitchCtrl>:
{
 8015902:	b507      	push	{r0, r1, r2, lr}
 8015904:	466b      	mov	r3, sp
 8015906:	1dd9      	adds	r1, r3, #7
 8015908:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 801590a:	2201      	movs	r2, #1
 801590c:	209d      	movs	r0, #157	; 0x9d
 801590e:	f7ee fe6d 	bl	80045ec <SX126xWriteCommand>
}
 8015912:	bd07      	pop	{r0, r1, r2, pc}

08015914 <SX126xSetRfFrequency>:
{
 8015914:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 8015916:	4c13      	ldr	r4, [pc, #76]	; (8015964 <SX126xSetRfFrequency+0x50>)
{
 8015918:	0005      	movs	r5, r0
    if( ImageCalibrated == false )
 801591a:	7823      	ldrb	r3, [r4, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d103      	bne.n	8015928 <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 8015920:	f7ff ff94 	bl	801584c <SX126xCalibrateImage>
        ImageCalibrated = true;
 8015924:	2301      	movs	r3, #1
 8015926:	7023      	strb	r3, [r4, #0]
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
    stepsFrac = freqInHz - ( stepsInt * SX126X_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015928:	0028      	movs	r0, r5
 801592a:	490f      	ldr	r1, [pc, #60]	; (8015968 <SX126xSetRfFrequency+0x54>)
 801592c:	f7ea fca2 	bl	8000274 <__aeabi_uidivmod>
 8015930:	4b0e      	ldr	r3, [pc, #56]	; (801596c <SX126xSetRfFrequency+0x58>)
 8015932:	0388      	lsls	r0, r1, #14
 8015934:	18c0      	adds	r0, r0, r3
 8015936:	490c      	ldr	r1, [pc, #48]	; (8015968 <SX126xSetRfFrequency+0x54>)
 8015938:	f7ea fc16 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 801593c:	490a      	ldr	r1, [pc, #40]	; (8015968 <SX126xSetRfFrequency+0x54>)
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 801593e:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 8015940:	0028      	movs	r0, r5
 8015942:	f7ea fc11 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 8015946:	0380      	lsls	r0, r0, #14
 8015948:	1820      	adds	r0, r4, r0
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 801594a:	a901      	add	r1, sp, #4
 801594c:	0e03      	lsrs	r3, r0, #24
 801594e:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF );
 8015950:	0c03      	lsrs	r3, r0, #16
 8015952:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 8015954:	0a03      	lsrs	r3, r0, #8
    buf[3] = ( uint8_t )( freqInPllSteps & 0xFF );
 8015956:	70c8      	strb	r0, [r1, #3]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8015958:	2204      	movs	r2, #4
 801595a:	2086      	movs	r0, #134	; 0x86
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 801595c:	708b      	strb	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801595e:	f7ee fe45 	bl	80045ec <SX126xWriteCommand>
}
 8015962:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8015964:	20001da0 	.word	0x20001da0
 8015968:	00003d09 	.word	0x00003d09
 801596c:	00001e84 	.word	0x00001e84

08015970 <SX126xSetPacketType>:
{
 8015970:	b507      	push	{r0, r1, r2, lr}
 8015972:	466b      	mov	r3, sp
 8015974:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 8015976:	4b04      	ldr	r3, [pc, #16]	; (8015988 <SX126xSetPacketType+0x18>)
{
 8015978:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 801597a:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801597c:	2201      	movs	r2, #1
 801597e:	208a      	movs	r0, #138	; 0x8a
 8015980:	f7ee fe34 	bl	80045ec <SX126xWriteCommand>
}
 8015984:	bd07      	pop	{r0, r1, r2, pc}
 8015986:	46c0      	nop			; (mov r8, r8)
 8015988:	20001da2 	.word	0x20001da2

0801598c <SX126xGetPacketType>:
    return PacketType;
 801598c:	4b01      	ldr	r3, [pc, #4]	; (8015994 <SX126xGetPacketType+0x8>)
 801598e:	7818      	ldrb	r0, [r3, #0]
}
 8015990:	4770      	bx	lr
 8015992:	46c0      	nop			; (mov r8, r8)
 8015994:	20001da2 	.word	0x20001da2

08015998 <SX126xSetTxParams>:
{
 8015998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801599a:	0005      	movs	r5, r0
 801599c:	000c      	movs	r4, r1
    if( SX126xGetDeviceId( ) == SX1261 )
 801599e:	f7ee ff4a 	bl	8004836 <SX126xGetDeviceId>
 80159a2:	0002      	movs	r2, r0
 80159a4:	2801      	cmp	r0, #1
 80159a6:	d11e      	bne.n	80159e6 <SX126xSetTxParams+0x4e>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80159a8:	0003      	movs	r3, r0
 80159aa:	2100      	movs	r1, #0
        if( power == 15 )
 80159ac:	2d0f      	cmp	r5, #15
 80159ae:	d111      	bne.n	80159d4 <SX126xSetTxParams+0x3c>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80159b0:	2006      	movs	r0, #6
 80159b2:	f7ff ff7b 	bl	80158ac <SX126xSetPaConfig>
 80159b6:	1c2b      	adds	r3, r5, #0
 80159b8:	b25a      	sxtb	r2, r3
 80159ba:	2a0e      	cmp	r2, #14
 80159bc:	dd00      	ble.n	80159c0 <SX126xSetTxParams+0x28>
 80159be:	230e      	movs	r3, #14
    buf[0] = power;
 80159c0:	466a      	mov	r2, sp
 80159c2:	b25b      	sxtb	r3, r3
 80159c4:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 80159c6:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80159c8:	208e      	movs	r0, #142	; 0x8e
 80159ca:	2202      	movs	r2, #2
 80159cc:	a901      	add	r1, sp, #4
 80159ce:	f7ee fe0d 	bl	80045ec <SX126xWriteCommand>
}
 80159d2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80159d4:	2004      	movs	r0, #4
 80159d6:	f7ff ff69 	bl	80158ac <SX126xSetPaConfig>
        if( power >= 14 )
 80159da:	1c2b      	adds	r3, r5, #0
 80159dc:	3511      	adds	r5, #17
 80159de:	daeb      	bge.n	80159b8 <SX126xSetTxParams+0x20>
 80159e0:	4b0d      	ldr	r3, [pc, #52]	; (8015a18 <SX126xSetTxParams+0x80>)
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	e7ec      	b.n	80159c0 <SX126xSetTxParams+0x28>
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 80159e6:	480d      	ldr	r0, [pc, #52]	; (8015a1c <SX126xSetTxParams+0x84>)
 80159e8:	f7ee febe 	bl	8004768 <SX126xReadRegister>
 80159ec:	211e      	movs	r1, #30
 80159ee:	4301      	orrs	r1, r0
 80159f0:	b2c9      	uxtb	r1, r1
 80159f2:	480a      	ldr	r0, [pc, #40]	; (8015a1c <SX126xSetTxParams+0x84>)
 80159f4:	f7ee fe7c 	bl	80046f0 <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80159f8:	2301      	movs	r3, #1
 80159fa:	2200      	movs	r2, #0
 80159fc:	2107      	movs	r1, #7
 80159fe:	2004      	movs	r0, #4
 8015a00:	f7ff ff54 	bl	80158ac <SX126xSetPaConfig>
        if( power > 22 )
 8015a04:	1c2b      	adds	r3, r5, #0
 8015a06:	3509      	adds	r5, #9
 8015a08:	da01      	bge.n	8015a0e <SX126xSetTxParams+0x76>
 8015a0a:	4b05      	ldr	r3, [pc, #20]	; (8015a20 <SX126xSetTxParams+0x88>)
 8015a0c:	e7e9      	b.n	80159e2 <SX126xSetTxParams+0x4a>
 8015a0e:	b25a      	sxtb	r2, r3
 8015a10:	2a16      	cmp	r2, #22
 8015a12:	ddd5      	ble.n	80159c0 <SX126xSetTxParams+0x28>
 8015a14:	2316      	movs	r3, #22
 8015a16:	e7d3      	b.n	80159c0 <SX126xSetTxParams+0x28>
 8015a18:	0801aa4d 	.word	0x0801aa4d
 8015a1c:	000008d8 	.word	0x000008d8
 8015a20:	0801aa4e 	.word	0x0801aa4e

08015a24 <SX126xSetModulationParams>:
{
 8015a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a26:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015a28:	2208      	movs	r2, #8
 8015a2a:	4668      	mov	r0, sp
 8015a2c:	4923      	ldr	r1, [pc, #140]	; (8015abc <SX126xSetModulationParams+0x98>)
 8015a2e:	f000 fa8f 	bl	8015f50 <memcpy>
    if( PacketType != modulationParams->PacketType )
 8015a32:	4b23      	ldr	r3, [pc, #140]	; (8015ac0 <SX126xSetModulationParams+0x9c>)
 8015a34:	7820      	ldrb	r0, [r4, #0]
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	4283      	cmp	r3, r0
 8015a3a:	d001      	beq.n	8015a40 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 8015a3c:	f7ff ff98 	bl	8015970 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 8015a40:	7823      	ldrb	r3, [r4, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d002      	beq.n	8015a4c <SX126xSetModulationParams+0x28>
 8015a46:	2b01      	cmp	r3, #1
 8015a48:	d02c      	beq.n	8015aa4 <SX126xSetModulationParams+0x80>
}
 8015a4a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 8015a4c:	6861      	ldr	r1, [r4, #4]
 8015a4e:	481d      	ldr	r0, [pc, #116]	; (8015ac4 <SX126xSetModulationParams+0xa0>)
 8015a50:	f7ea fb8a 	bl	8000168 <__udivsi3>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015a54:	466a      	mov	r2, sp
 8015a56:	0c03      	lsrs	r3, r0, #16
 8015a58:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015a5a:	0a03      	lsrs	r3, r0, #8
        buf[2] = tempVal & 0xFF;
 8015a5c:	7090      	strb	r0, [r2, #2]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015a5e:	7053      	strb	r3, [r2, #1]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015a60:	7b23      	ldrb	r3, [r4, #12]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 8015a62:	68a5      	ldr	r5, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015a64:	70d3      	strb	r3, [r2, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015a66:	7b63      	ldrb	r3, [r4, #13]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015a68:	0028      	movs	r0, r5
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015a6a:	7113      	strb	r3, [r2, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015a6c:	4916      	ldr	r1, [pc, #88]	; (8015ac8 <SX126xSetModulationParams+0xa4>)
 8015a6e:	f7ea fc01 	bl	8000274 <__aeabi_uidivmod>
 8015a72:	4b16      	ldr	r3, [pc, #88]	; (8015acc <SX126xSetModulationParams+0xa8>)
 8015a74:	0388      	lsls	r0, r1, #14
 8015a76:	18c0      	adds	r0, r0, r3
 8015a78:	4913      	ldr	r1, [pc, #76]	; (8015ac8 <SX126xSetModulationParams+0xa4>)
 8015a7a:	f7ea fb75 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 8015a7e:	4912      	ldr	r1, [pc, #72]	; (8015ac8 <SX126xSetModulationParams+0xa4>)
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015a80:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 8015a82:	0028      	movs	r0, r5
 8015a84:	f7ea fb70 	bl	8000168 <__udivsi3>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015a88:	466a      	mov	r2, sp
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 8015a8a:	0380      	lsls	r0, r0, #14
 8015a8c:	1820      	adds	r0, r4, r0
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015a8e:	0c03      	lsrs	r3, r0, #16
 8015a90:	7153      	strb	r3, [r2, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8015a92:	0a03      	lsrs	r3, r0, #8
 8015a94:	7193      	strb	r3, [r2, #6]
        buf[7] = ( tempVal& 0xFF );
 8015a96:	71d0      	strb	r0, [r2, #7]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015a98:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015a9a:	4669      	mov	r1, sp
 8015a9c:	208b      	movs	r0, #139	; 0x8b
 8015a9e:	f7ee fda5 	bl	80045ec <SX126xWriteCommand>
        break;
 8015aa2:	e7d2      	b.n	8015a4a <SX126xSetModulationParams+0x26>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8015aa4:	466a      	mov	r2, sp
 8015aa6:	7c23      	ldrb	r3, [r4, #16]
 8015aa8:	7013      	strb	r3, [r2, #0]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8015aaa:	7c63      	ldrb	r3, [r4, #17]
 8015aac:	7053      	strb	r3, [r2, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8015aae:	7ca3      	ldrb	r3, [r4, #18]
 8015ab0:	7093      	strb	r3, [r2, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015ab2:	7ce3      	ldrb	r3, [r4, #19]
 8015ab4:	70d3      	strb	r3, [r2, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015ab6:	2204      	movs	r2, #4
 8015ab8:	e7ef      	b.n	8015a9a <SX126xSetModulationParams+0x76>
 8015aba:	46c0      	nop			; (mov r8, r8)
 8015abc:	080187ff 	.word	0x080187ff
 8015ac0:	20001da2 	.word	0x20001da2
 8015ac4:	3d090000 	.word	0x3d090000
 8015ac8:	00003d09 	.word	0x00003d09
 8015acc:	00001e84 	.word	0x00001e84

08015ad0 <SX126xSetPacketParams>:
{
 8015ad0:	b530      	push	{r4, r5, lr}
 8015ad2:	0005      	movs	r5, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015ad4:	4928      	ldr	r1, [pc, #160]	; (8015b78 <SX126xSetPacketParams+0xa8>)
{
 8015ad6:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015ad8:	ac01      	add	r4, sp, #4
 8015ada:	2209      	movs	r2, #9
 8015adc:	0020      	movs	r0, r4
 8015ade:	3108      	adds	r1, #8
 8015ae0:	f000 fa36 	bl	8015f50 <memcpy>
    if( PacketType != packetParams->PacketType )
 8015ae4:	4b25      	ldr	r3, [pc, #148]	; (8015b7c <SX126xSetPacketParams+0xac>)
 8015ae6:	7828      	ldrb	r0, [r5, #0]
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	4283      	cmp	r3, r0
 8015aec:	d001      	beq.n	8015af2 <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 8015aee:	f7ff ff3f 	bl	8015970 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 8015af2:	782b      	ldrb	r3, [r5, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d003      	beq.n	8015b00 <SX126xSetPacketParams+0x30>
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d02d      	beq.n	8015b58 <SX126xSetPacketParams+0x88>
}
 8015afc:	b005      	add	sp, #20
 8015afe:	bd30      	pop	{r4, r5, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8015b00:	7a6b      	ldrb	r3, [r5, #9]
 8015b02:	2bf1      	cmp	r3, #241	; 0xf1
 8015b04:	d11e      	bne.n	8015b44 <SX126xSetPacketParams+0x74>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8015b06:	481e      	ldr	r0, [pc, #120]	; (8015b80 <SX126xSetPacketParams+0xb0>)
 8015b08:	f7ff fd2e 	bl	8015568 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8015b0c:	481d      	ldr	r0, [pc, #116]	; (8015b84 <SX126xSetPacketParams+0xb4>)
 8015b0e:	f7ff fd3f 	bl	8015590 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8015b12:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015b14:	886a      	ldrh	r2, [r5, #2]
        buf[7] = crcVal;
 8015b16:	71e3      	strb	r3, [r4, #7]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015b18:	0a11      	lsrs	r1, r2, #8
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8015b1a:	7062      	strb	r2, [r4, #1]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015b1c:	792a      	ldrb	r2, [r5, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8015b1e:	7aab      	ldrb	r3, [r5, #10]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015b20:	70a2      	strb	r2, [r4, #2]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8015b22:	796a      	ldrb	r2, [r5, #5]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015b24:	7021      	strb	r1, [r4, #0]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8015b26:	70e2      	strb	r2, [r4, #3]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015b28:	79aa      	ldrb	r2, [r5, #6]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8015b2a:	7223      	strb	r3, [r4, #8]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015b2c:	7122      	strb	r2, [r4, #4]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8015b2e:	79ea      	ldrb	r2, [r5, #7]
 8015b30:	7162      	strb	r2, [r4, #5]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8015b32:	7a2a      	ldrb	r2, [r5, #8]
 8015b34:	71a2      	strb	r2, [r4, #6]
        n = 9;
 8015b36:	2209      	movs	r2, #9
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8015b38:	0021      	movs	r1, r4
 8015b3a:	208c      	movs	r0, #140	; 0x8c
 8015b3c:	b292      	uxth	r2, r2
 8015b3e:	f7ee fd55 	bl	80045ec <SX126xWriteCommand>
 8015b42:	e7db      	b.n	8015afc <SX126xSetPacketParams+0x2c>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8015b44:	2bf2      	cmp	r3, #242	; 0xf2
 8015b46:	d1e5      	bne.n	8015b14 <SX126xSetPacketParams+0x44>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8015b48:	480f      	ldr	r0, [pc, #60]	; (8015b88 <SX126xSetPacketParams+0xb8>)
 8015b4a:	f7ff fd0d 	bl	8015568 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8015b4e:	480f      	ldr	r0, [pc, #60]	; (8015b8c <SX126xSetPacketParams+0xbc>)
 8015b50:	f7ff fd1e 	bl	8015590 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8015b54:	2306      	movs	r3, #6
 8015b56:	e7dd      	b.n	8015b14 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8015b58:	89ab      	ldrh	r3, [r5, #12]
 8015b5a:	0a1a      	lsrs	r2, r3, #8
 8015b5c:	7022      	strb	r2, [r4, #0]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8015b5e:	7063      	strb	r3, [r4, #1]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8015b60:	4a0b      	ldr	r2, [pc, #44]	; (8015b90 <SX126xSetPacketParams+0xc0>)
 8015b62:	7bab      	ldrb	r3, [r5, #14]
 8015b64:	7013      	strb	r3, [r2, #0]
 8015b66:	70a3      	strb	r3, [r4, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015b68:	7beb      	ldrb	r3, [r5, #15]
        n = 6;
 8015b6a:	2206      	movs	r2, #6
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015b6c:	70e3      	strb	r3, [r4, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8015b6e:	7c2b      	ldrb	r3, [r5, #16]
 8015b70:	7123      	strb	r3, [r4, #4]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8015b72:	7c6b      	ldrb	r3, [r5, #17]
 8015b74:	7163      	strb	r3, [r4, #5]
        break;
 8015b76:	e7df      	b.n	8015b38 <SX126xSetPacketParams+0x68>
 8015b78:	080187ff 	.word	0x080187ff
 8015b7c:	20001da2 	.word	0x20001da2
 8015b80:	0000ffff 	.word	0x0000ffff
 8015b84:	00008005 	.word	0x00008005
 8015b88:	00001d0f 	.word	0x00001d0f
 8015b8c:	00001021 	.word	0x00001021
 8015b90:	20001da1 	.word	0x20001da1

08015b94 <SX126xSetBufferBaseAddress>:
{
 8015b94:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 8015b96:	466b      	mov	r3, sp
 8015b98:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 8015b9a:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8015b9c:	2202      	movs	r2, #2
 8015b9e:	208f      	movs	r0, #143	; 0x8f
 8015ba0:	a901      	add	r1, sp, #4
 8015ba2:	f7ee fd23 	bl	80045ec <SX126xWriteCommand>
}
 8015ba6:	bd07      	pop	{r0, r1, r2, pc}

08015ba8 <SX126xGetRssiInst>:
{
 8015ba8:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8015baa:	ac01      	add	r4, sp, #4
 8015bac:	2201      	movs	r2, #1
 8015bae:	0021      	movs	r1, r4
 8015bb0:	2015      	movs	r0, #21
 8015bb2:	f7ee fd43 	bl	800463c <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 8015bb6:	7820      	ldrb	r0, [r4, #0]
 8015bb8:	4240      	negs	r0, r0
 8015bba:	1040      	asrs	r0, r0, #1
}
 8015bbc:	bd16      	pop	{r1, r2, r4, pc}
	...

08015bc0 <SX126xGetRxBufferStatus>:
{
 8015bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015bc2:	0004      	movs	r4, r0
 8015bc4:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8015bc6:	2202      	movs	r2, #2
 8015bc8:	2013      	movs	r0, #19
 8015bca:	a901      	add	r1, sp, #4
 8015bcc:	f7ee fd36 	bl	800463c <SX126xReadCommand>
    return PacketType;
 8015bd0:	4b09      	ldr	r3, [pc, #36]	; (8015bf8 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d10b      	bne.n	8015bf0 <SX126xGetRxBufferStatus+0x30>
 8015bd8:	4b08      	ldr	r3, [pc, #32]	; (8015bfc <SX126xGetRxBufferStatus+0x3c>)
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d107      	bne.n	8015bf0 <SX126xGetRxBufferStatus+0x30>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 8015be0:	4807      	ldr	r0, [pc, #28]	; (8015c00 <SX126xGetRxBufferStatus+0x40>)
 8015be2:	f7ee fdc1 	bl	8004768 <SX126xReadRegister>
 8015be6:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 8015be8:	466b      	mov	r3, sp
 8015bea:	795b      	ldrb	r3, [r3, #5]
 8015bec:	702b      	strb	r3, [r5, #0]
}
 8015bee:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 8015bf0:	466b      	mov	r3, sp
 8015bf2:	791b      	ldrb	r3, [r3, #4]
 8015bf4:	7023      	strb	r3, [r4, #0]
 8015bf6:	e7f7      	b.n	8015be8 <SX126xGetRxBufferStatus+0x28>
 8015bf8:	20001da2 	.word	0x20001da2
 8015bfc:	20001da1 	.word	0x20001da1
 8015c00:	00000702 	.word	0x00000702

08015c04 <SX126xGetPayload>:
{
 8015c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c06:	000c      	movs	r4, r1
    uint8_t offset = 0;
 8015c08:	466b      	mov	r3, sp
 8015c0a:	2700      	movs	r7, #0
{
 8015c0c:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 8015c0e:	1dd9      	adds	r1, r3, #7
 8015c10:	0020      	movs	r0, r4
{
 8015c12:	0016      	movs	r6, r2
    uint8_t offset = 0;
 8015c14:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 8015c16:	f7ff ffd3 	bl	8015bc0 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 8015c1a:	7822      	ldrb	r2, [r4, #0]
        return 1;
 8015c1c:	2001      	movs	r0, #1
    if( *size > maxSize )
 8015c1e:	42b2      	cmp	r2, r6
 8015c20:	d805      	bhi.n	8015c2e <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 8015c22:	466b      	mov	r3, sp
 8015c24:	0029      	movs	r1, r5
 8015c26:	79d8      	ldrb	r0, [r3, #7]
 8015c28:	f7ee fdd2 	bl	80047d0 <SX126xReadBuffer>
    return 0;
 8015c2c:	0038      	movs	r0, r7
}
 8015c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08015c30 <SX126xGetPacketStatus>:
{
 8015c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c32:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8015c34:	ad01      	add	r5, sp, #4
 8015c36:	2203      	movs	r2, #3
 8015c38:	0029      	movs	r1, r5
 8015c3a:	2014      	movs	r0, #20
 8015c3c:	f7ee fcfe 	bl	800463c <SX126xReadCommand>
    return PacketType;
 8015c40:	4b15      	ldr	r3, [pc, #84]	; (8015c98 <SX126xGetPacketStatus+0x68>)
 8015c42:	781a      	ldrb	r2, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 8015c44:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	d009      	beq.n	8015c5e <SX126xGetPacketStatus+0x2e>
 8015c4a:	2a01      	cmp	r2, #1
 8015c4c:	d013      	beq.n	8015c76 <SX126xGetPacketStatus+0x46>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015c4e:	2214      	movs	r2, #20
 8015c50:	2100      	movs	r1, #0
 8015c52:	0020      	movs	r0, r4
 8015c54:	f000 f985 	bl	8015f62 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8015c58:	230f      	movs	r3, #15
 8015c5a:	7023      	strb	r3, [r4, #0]
}
 8015c5c:	e00a      	b.n	8015c74 <SX126xGetPacketStatus+0x44>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015c5e:	782b      	ldrb	r3, [r5, #0]
            pktStatus->Params.Gfsk.FreqError = 0;
 8015c60:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015c62:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8015c64:	786b      	ldrb	r3, [r5, #1]
 8015c66:	425b      	negs	r3, r3
 8015c68:	105b      	asrs	r3, r3, #1
 8015c6a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8015c6c:	78ab      	ldrb	r3, [r5, #2]
 8015c6e:	425b      	negs	r3, r3
 8015c70:	105b      	asrs	r3, r3, #1
 8015c72:	7163      	strb	r3, [r4, #5]
}
 8015c74:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8015c76:	782b      	ldrb	r3, [r5, #0]
 8015c78:	425b      	negs	r3, r3
 8015c7a:	105b      	asrs	r3, r3, #1
 8015c7c:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	56eb      	ldrsb	r3, [r5, r3]
 8015c82:	3302      	adds	r3, #2
 8015c84:	109b      	asrs	r3, r3, #2
 8015c86:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8015c88:	78ab      	ldrb	r3, [r5, #2]
 8015c8a:	425b      	negs	r3, r3
 8015c8c:	105b      	asrs	r3, r3, #1
 8015c8e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8015c90:	4b02      	ldr	r3, [pc, #8]	; (8015c9c <SX126xGetPacketStatus+0x6c>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	6123      	str	r3, [r4, #16]
            break;
 8015c96:	e7ed      	b.n	8015c74 <SX126xGetPacketStatus+0x44>
 8015c98:	20001da2 	.word	0x20001da2
 8015c9c:	20001d9c 	.word	0x20001d9c

08015ca0 <SX126xClearIrqStatus>:
{
 8015ca0:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8015ca2:	466a      	mov	r2, sp
 8015ca4:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 8015ca6:	7150      	strb	r0, [r2, #5]
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8015ca8:	7113      	strb	r3, [r2, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8015caa:	2202      	movs	r2, #2
 8015cac:	a901      	add	r1, sp, #4
 8015cae:	0010      	movs	r0, r2
 8015cb0:	f7ee fc9c 	bl	80045ec <SX126xWriteCommand>
}
 8015cb4:	bd07      	pop	{r0, r1, r2, pc}
	...

08015cb8 <floor>:
 8015cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015cba:	004b      	lsls	r3, r1, #1
 8015cbc:	4a3d      	ldr	r2, [pc, #244]	; (8015db4 <floor+0xfc>)
 8015cbe:	0d5b      	lsrs	r3, r3, #21
 8015cc0:	189f      	adds	r7, r3, r2
 8015cc2:	4684      	mov	ip, r0
 8015cc4:	000e      	movs	r6, r1
 8015cc6:	000d      	movs	r5, r1
 8015cc8:	0004      	movs	r4, r0
 8015cca:	9001      	str	r0, [sp, #4]
 8015ccc:	2f13      	cmp	r7, #19
 8015cce:	dc34      	bgt.n	8015d3a <floor+0x82>
 8015cd0:	2f00      	cmp	r7, #0
 8015cd2:	da16      	bge.n	8015d02 <floor+0x4a>
 8015cd4:	4a38      	ldr	r2, [pc, #224]	; (8015db8 <floor+0x100>)
 8015cd6:	4b39      	ldr	r3, [pc, #228]	; (8015dbc <floor+0x104>)
 8015cd8:	4660      	mov	r0, ip
 8015cda:	0031      	movs	r1, r6
 8015cdc:	f7eb f9d8 	bl	8001090 <__aeabi_dadd>
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	f7ea fbec 	bl	80004c0 <__aeabi_dcmpgt>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d007      	beq.n	8015cfc <floor+0x44>
 8015cec:	2e00      	cmp	r6, #0
 8015cee:	da5d      	bge.n	8015dac <floor+0xf4>
 8015cf0:	0073      	lsls	r3, r6, #1
 8015cf2:	085b      	lsrs	r3, r3, #1
 8015cf4:	431c      	orrs	r4, r3
 8015cf6:	d001      	beq.n	8015cfc <floor+0x44>
 8015cf8:	2400      	movs	r4, #0
 8015cfa:	4d31      	ldr	r5, [pc, #196]	; (8015dc0 <floor+0x108>)
 8015cfc:	46a4      	mov	ip, r4
 8015cfe:	002e      	movs	r6, r5
 8015d00:	e029      	b.n	8015d56 <floor+0x9e>
 8015d02:	4b30      	ldr	r3, [pc, #192]	; (8015dc4 <floor+0x10c>)
 8015d04:	413b      	asrs	r3, r7
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	400b      	ands	r3, r1
 8015d0a:	4303      	orrs	r3, r0
 8015d0c:	d023      	beq.n	8015d56 <floor+0x9e>
 8015d0e:	4a2a      	ldr	r2, [pc, #168]	; (8015db8 <floor+0x100>)
 8015d10:	4b2a      	ldr	r3, [pc, #168]	; (8015dbc <floor+0x104>)
 8015d12:	4660      	mov	r0, ip
 8015d14:	0031      	movs	r1, r6
 8015d16:	f7eb f9bb 	bl	8001090 <__aeabi_dadd>
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	f7ea fbcf 	bl	80004c0 <__aeabi_dcmpgt>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	d0ea      	beq.n	8015cfc <floor+0x44>
 8015d26:	2e00      	cmp	r6, #0
 8015d28:	da03      	bge.n	8015d32 <floor+0x7a>
 8015d2a:	2380      	movs	r3, #128	; 0x80
 8015d2c:	035b      	lsls	r3, r3, #13
 8015d2e:	413b      	asrs	r3, r7
 8015d30:	18f5      	adds	r5, r6, r3
 8015d32:	9b00      	ldr	r3, [sp, #0]
 8015d34:	2400      	movs	r4, #0
 8015d36:	439d      	bics	r5, r3
 8015d38:	e7e0      	b.n	8015cfc <floor+0x44>
 8015d3a:	2f33      	cmp	r7, #51	; 0x33
 8015d3c:	dd0f      	ble.n	8015d5e <floor+0xa6>
 8015d3e:	2380      	movs	r3, #128	; 0x80
 8015d40:	00db      	lsls	r3, r3, #3
 8015d42:	429f      	cmp	r7, r3
 8015d44:	d107      	bne.n	8015d56 <floor+0x9e>
 8015d46:	0002      	movs	r2, r0
 8015d48:	000b      	movs	r3, r1
 8015d4a:	4660      	mov	r0, ip
 8015d4c:	0031      	movs	r1, r6
 8015d4e:	f7eb f99f 	bl	8001090 <__aeabi_dadd>
 8015d52:	4684      	mov	ip, r0
 8015d54:	000e      	movs	r6, r1
 8015d56:	4660      	mov	r0, ip
 8015d58:	0031      	movs	r1, r6
 8015d5a:	b003      	add	sp, #12
 8015d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d5e:	4a1a      	ldr	r2, [pc, #104]	; (8015dc8 <floor+0x110>)
 8015d60:	189b      	adds	r3, r3, r2
 8015d62:	2201      	movs	r2, #1
 8015d64:	4252      	negs	r2, r2
 8015d66:	40da      	lsrs	r2, r3
 8015d68:	9200      	str	r2, [sp, #0]
 8015d6a:	4210      	tst	r0, r2
 8015d6c:	d0f3      	beq.n	8015d56 <floor+0x9e>
 8015d6e:	4a12      	ldr	r2, [pc, #72]	; (8015db8 <floor+0x100>)
 8015d70:	4b12      	ldr	r3, [pc, #72]	; (8015dbc <floor+0x104>)
 8015d72:	4660      	mov	r0, ip
 8015d74:	0031      	movs	r1, r6
 8015d76:	f7eb f98b 	bl	8001090 <__aeabi_dadd>
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	f7ea fb9f 	bl	80004c0 <__aeabi_dcmpgt>
 8015d82:	2800      	cmp	r0, #0
 8015d84:	d0ba      	beq.n	8015cfc <floor+0x44>
 8015d86:	2e00      	cmp	r6, #0
 8015d88:	da02      	bge.n	8015d90 <floor+0xd8>
 8015d8a:	2f14      	cmp	r7, #20
 8015d8c:	d103      	bne.n	8015d96 <floor+0xde>
 8015d8e:	3501      	adds	r5, #1
 8015d90:	9b00      	ldr	r3, [sp, #0]
 8015d92:	439c      	bics	r4, r3
 8015d94:	e7b2      	b.n	8015cfc <floor+0x44>
 8015d96:	2334      	movs	r3, #52	; 0x34
 8015d98:	1bdf      	subs	r7, r3, r7
 8015d9a:	3b33      	subs	r3, #51	; 0x33
 8015d9c:	40bb      	lsls	r3, r7
 8015d9e:	18e4      	adds	r4, r4, r3
 8015da0:	9b01      	ldr	r3, [sp, #4]
 8015da2:	429c      	cmp	r4, r3
 8015da4:	419b      	sbcs	r3, r3
 8015da6:	425b      	negs	r3, r3
 8015da8:	18f5      	adds	r5, r6, r3
 8015daa:	e7f1      	b.n	8015d90 <floor+0xd8>
 8015dac:	2400      	movs	r4, #0
 8015dae:	0025      	movs	r5, r4
 8015db0:	e7a4      	b.n	8015cfc <floor+0x44>
 8015db2:	46c0      	nop			; (mov r8, r8)
 8015db4:	fffffc01 	.word	0xfffffc01
 8015db8:	8800759c 	.word	0x8800759c
 8015dbc:	7e37e43c 	.word	0x7e37e43c
 8015dc0:	bff00000 	.word	0xbff00000
 8015dc4:	000fffff 	.word	0x000fffff
 8015dc8:	fffffbed 	.word	0xfffffbed

08015dcc <round>:
 8015dcc:	b570      	push	{r4, r5, r6, lr}
 8015dce:	000d      	movs	r5, r1
 8015dd0:	0006      	movs	r6, r0
 8015dd2:	0001      	movs	r1, r0
 8015dd4:	006a      	lsls	r2, r5, #1
 8015dd6:	4820      	ldr	r0, [pc, #128]	; (8015e58 <round+0x8c>)
 8015dd8:	0d52      	lsrs	r2, r2, #21
 8015dda:	1810      	adds	r0, r2, r0
 8015ddc:	2813      	cmp	r0, #19
 8015dde:	dc18      	bgt.n	8015e12 <round+0x46>
 8015de0:	2800      	cmp	r0, #0
 8015de2:	da09      	bge.n	8015df8 <round+0x2c>
 8015de4:	0feb      	lsrs	r3, r5, #31
 8015de6:	2200      	movs	r2, #0
 8015de8:	07db      	lsls	r3, r3, #31
 8015dea:	1c41      	adds	r1, r0, #1
 8015dec:	d101      	bne.n	8015df2 <round+0x26>
 8015dee:	491b      	ldr	r1, [pc, #108]	; (8015e5c <round+0x90>)
 8015df0:	430b      	orrs	r3, r1
 8015df2:	0019      	movs	r1, r3
 8015df4:	0010      	movs	r0, r2
 8015df6:	e018      	b.n	8015e2a <round+0x5e>
 8015df8:	4c19      	ldr	r4, [pc, #100]	; (8015e60 <round+0x94>)
 8015dfa:	4104      	asrs	r4, r0
 8015dfc:	0022      	movs	r2, r4
 8015dfe:	402a      	ands	r2, r5
 8015e00:	4311      	orrs	r1, r2
 8015e02:	d014      	beq.n	8015e2e <round+0x62>
 8015e04:	2280      	movs	r2, #128	; 0x80
 8015e06:	0312      	lsls	r2, r2, #12
 8015e08:	4102      	asrs	r2, r0
 8015e0a:	1953      	adds	r3, r2, r5
 8015e0c:	43a3      	bics	r3, r4
 8015e0e:	2200      	movs	r2, #0
 8015e10:	e7ef      	b.n	8015df2 <round+0x26>
 8015e12:	2833      	cmp	r0, #51	; 0x33
 8015e14:	dd0e      	ble.n	8015e34 <round+0x68>
 8015e16:	2380      	movs	r3, #128	; 0x80
 8015e18:	00db      	lsls	r3, r3, #3
 8015e1a:	4298      	cmp	r0, r3
 8015e1c:	d107      	bne.n	8015e2e <round+0x62>
 8015e1e:	0032      	movs	r2, r6
 8015e20:	002b      	movs	r3, r5
 8015e22:	0030      	movs	r0, r6
 8015e24:	0029      	movs	r1, r5
 8015e26:	f7eb f933 	bl	8001090 <__aeabi_dadd>
 8015e2a:	0006      	movs	r6, r0
 8015e2c:	000d      	movs	r5, r1
 8015e2e:	0030      	movs	r0, r6
 8015e30:	0029      	movs	r1, r5
 8015e32:	bd70      	pop	{r4, r5, r6, pc}
 8015e34:	4c0b      	ldr	r4, [pc, #44]	; (8015e64 <round+0x98>)
 8015e36:	1912      	adds	r2, r2, r4
 8015e38:	2401      	movs	r4, #1
 8015e3a:	4264      	negs	r4, r4
 8015e3c:	40d4      	lsrs	r4, r2
 8015e3e:	4234      	tst	r4, r6
 8015e40:	d0f5      	beq.n	8015e2e <round+0x62>
 8015e42:	2233      	movs	r2, #51	; 0x33
 8015e44:	1a10      	subs	r0, r2, r0
 8015e46:	3a32      	subs	r2, #50	; 0x32
 8015e48:	4082      	lsls	r2, r0
 8015e4a:	1992      	adds	r2, r2, r6
 8015e4c:	42b2      	cmp	r2, r6
 8015e4e:	4189      	sbcs	r1, r1
 8015e50:	4249      	negs	r1, r1
 8015e52:	186b      	adds	r3, r5, r1
 8015e54:	43a2      	bics	r2, r4
 8015e56:	e7cc      	b.n	8015df2 <round+0x26>
 8015e58:	fffffc01 	.word	0xfffffc01
 8015e5c:	3ff00000 	.word	0x3ff00000
 8015e60:	000fffff 	.word	0x000fffff
 8015e64:	fffffbed 	.word	0xfffffbed

08015e68 <__assert_func>:
 8015e68:	b530      	push	{r4, r5, lr}
 8015e6a:	0014      	movs	r4, r2
 8015e6c:	001a      	movs	r2, r3
 8015e6e:	4b09      	ldr	r3, [pc, #36]	; (8015e94 <__assert_func+0x2c>)
 8015e70:	0005      	movs	r5, r0
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	b085      	sub	sp, #20
 8015e76:	68d8      	ldr	r0, [r3, #12]
 8015e78:	4b07      	ldr	r3, [pc, #28]	; (8015e98 <__assert_func+0x30>)
 8015e7a:	2c00      	cmp	r4, #0
 8015e7c:	d101      	bne.n	8015e82 <__assert_func+0x1a>
 8015e7e:	4b07      	ldr	r3, [pc, #28]	; (8015e9c <__assert_func+0x34>)
 8015e80:	001c      	movs	r4, r3
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	9100      	str	r1, [sp, #0]
 8015e86:	002b      	movs	r3, r5
 8015e88:	4905      	ldr	r1, [pc, #20]	; (8015ea0 <__assert_func+0x38>)
 8015e8a:	9402      	str	r4, [sp, #8]
 8015e8c:	f000 f80a 	bl	8015ea4 <fiprintf>
 8015e90:	f001 fab4 	bl	80173fc <abort>
 8015e94:	20000244 	.word	0x20000244
 8015e98:	0801aa4f 	.word	0x0801aa4f
 8015e9c:	080196e9 	.word	0x080196e9
 8015ea0:	0801aa5c 	.word	0x0801aa5c

08015ea4 <fiprintf>:
 8015ea4:	b40e      	push	{r1, r2, r3}
 8015ea6:	b503      	push	{r0, r1, lr}
 8015ea8:	0001      	movs	r1, r0
 8015eaa:	ab03      	add	r3, sp, #12
 8015eac:	4804      	ldr	r0, [pc, #16]	; (8015ec0 <fiprintf+0x1c>)
 8015eae:	cb04      	ldmia	r3!, {r2}
 8015eb0:	6800      	ldr	r0, [r0, #0]
 8015eb2:	9301      	str	r3, [sp, #4]
 8015eb4:	f000 fc00 	bl	80166b8 <_vfiprintf_r>
 8015eb8:	b002      	add	sp, #8
 8015eba:	bc08      	pop	{r3}
 8015ebc:	b003      	add	sp, #12
 8015ebe:	4718      	bx	r3
 8015ec0:	20000244 	.word	0x20000244

08015ec4 <__libc_init_array>:
 8015ec4:	b570      	push	{r4, r5, r6, lr}
 8015ec6:	2600      	movs	r6, #0
 8015ec8:	4d0c      	ldr	r5, [pc, #48]	; (8015efc <__libc_init_array+0x38>)
 8015eca:	4c0d      	ldr	r4, [pc, #52]	; (8015f00 <__libc_init_array+0x3c>)
 8015ecc:	1b64      	subs	r4, r4, r5
 8015ece:	10a4      	asrs	r4, r4, #2
 8015ed0:	42a6      	cmp	r6, r4
 8015ed2:	d109      	bne.n	8015ee8 <__libc_init_array+0x24>
 8015ed4:	2600      	movs	r6, #0
 8015ed6:	f002 fc59 	bl	801878c <_init>
 8015eda:	4d0a      	ldr	r5, [pc, #40]	; (8015f04 <__libc_init_array+0x40>)
 8015edc:	4c0a      	ldr	r4, [pc, #40]	; (8015f08 <__libc_init_array+0x44>)
 8015ede:	1b64      	subs	r4, r4, r5
 8015ee0:	10a4      	asrs	r4, r4, #2
 8015ee2:	42a6      	cmp	r6, r4
 8015ee4:	d105      	bne.n	8015ef2 <__libc_init_array+0x2e>
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}
 8015ee8:	00b3      	lsls	r3, r6, #2
 8015eea:	58eb      	ldr	r3, [r5, r3]
 8015eec:	4798      	blx	r3
 8015eee:	3601      	adds	r6, #1
 8015ef0:	e7ee      	b.n	8015ed0 <__libc_init_array+0xc>
 8015ef2:	00b3      	lsls	r3, r6, #2
 8015ef4:	58eb      	ldr	r3, [r5, r3]
 8015ef6:	4798      	blx	r3
 8015ef8:	3601      	adds	r6, #1
 8015efa:	e7f2      	b.n	8015ee2 <__libc_init_array+0x1e>
 8015efc:	0801ad44 	.word	0x0801ad44
 8015f00:	0801ad44 	.word	0x0801ad44
 8015f04:	0801ad44 	.word	0x0801ad44
 8015f08:	0801ad48 	.word	0x0801ad48

08015f0c <malloc>:
 8015f0c:	b510      	push	{r4, lr}
 8015f0e:	4b03      	ldr	r3, [pc, #12]	; (8015f1c <malloc+0x10>)
 8015f10:	0001      	movs	r1, r0
 8015f12:	6818      	ldr	r0, [r3, #0]
 8015f14:	f000 fb32 	bl	801657c <_malloc_r>
 8015f18:	bd10      	pop	{r4, pc}
 8015f1a:	46c0      	nop			; (mov r8, r8)
 8015f1c:	20000244 	.word	0x20000244

08015f20 <free>:
 8015f20:	b510      	push	{r4, lr}
 8015f22:	4b03      	ldr	r3, [pc, #12]	; (8015f30 <free+0x10>)
 8015f24:	0001      	movs	r1, r0
 8015f26:	6818      	ldr	r0, [r3, #0]
 8015f28:	f000 fabc 	bl	80164a4 <_free_r>
 8015f2c:	bd10      	pop	{r4, pc}
 8015f2e:	46c0      	nop			; (mov r8, r8)
 8015f30:	20000244 	.word	0x20000244

08015f34 <memcmp>:
 8015f34:	b530      	push	{r4, r5, lr}
 8015f36:	2400      	movs	r4, #0
 8015f38:	3901      	subs	r1, #1
 8015f3a:	42a2      	cmp	r2, r4
 8015f3c:	d101      	bne.n	8015f42 <memcmp+0xe>
 8015f3e:	2000      	movs	r0, #0
 8015f40:	e005      	b.n	8015f4e <memcmp+0x1a>
 8015f42:	5d03      	ldrb	r3, [r0, r4]
 8015f44:	3401      	adds	r4, #1
 8015f46:	5d0d      	ldrb	r5, [r1, r4]
 8015f48:	42ab      	cmp	r3, r5
 8015f4a:	d0f6      	beq.n	8015f3a <memcmp+0x6>
 8015f4c:	1b58      	subs	r0, r3, r5
 8015f4e:	bd30      	pop	{r4, r5, pc}

08015f50 <memcpy>:
 8015f50:	2300      	movs	r3, #0
 8015f52:	b510      	push	{r4, lr}
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d100      	bne.n	8015f5a <memcpy+0xa>
 8015f58:	bd10      	pop	{r4, pc}
 8015f5a:	5ccc      	ldrb	r4, [r1, r3]
 8015f5c:	54c4      	strb	r4, [r0, r3]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	e7f8      	b.n	8015f54 <memcpy+0x4>

08015f62 <memset>:
 8015f62:	0003      	movs	r3, r0
 8015f64:	1882      	adds	r2, r0, r2
 8015f66:	4293      	cmp	r3, r2
 8015f68:	d100      	bne.n	8015f6c <memset+0xa>
 8015f6a:	4770      	bx	lr
 8015f6c:	7019      	strb	r1, [r3, #0]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	e7f9      	b.n	8015f66 <memset+0x4>
	...

08015f74 <validate_structure>:
 8015f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f76:	6801      	ldr	r1, [r0, #0]
 8015f78:	0004      	movs	r4, r0
 8015f7a:	293b      	cmp	r1, #59	; 0x3b
 8015f7c:	d90b      	bls.n	8015f96 <validate_structure+0x22>
 8015f7e:	223c      	movs	r2, #60	; 0x3c
 8015f80:	4668      	mov	r0, sp
 8015f82:	f001 fa42 	bl	801740a <div>
 8015f86:	6863      	ldr	r3, [r4, #4]
 8015f88:	9900      	ldr	r1, [sp, #0]
 8015f8a:	9a01      	ldr	r2, [sp, #4]
 8015f8c:	185b      	adds	r3, r3, r1
 8015f8e:	6063      	str	r3, [r4, #4]
 8015f90:	2a00      	cmp	r2, #0
 8015f92:	db71      	blt.n	8016078 <validate_structure+0x104>
 8015f94:	6022      	str	r2, [r4, #0]
 8015f96:	6861      	ldr	r1, [r4, #4]
 8015f98:	293b      	cmp	r1, #59	; 0x3b
 8015f9a:	d90b      	bls.n	8015fb4 <validate_structure+0x40>
 8015f9c:	223c      	movs	r2, #60	; 0x3c
 8015f9e:	4668      	mov	r0, sp
 8015fa0:	f001 fa33 	bl	801740a <div>
 8015fa4:	68a3      	ldr	r3, [r4, #8]
 8015fa6:	9900      	ldr	r1, [sp, #0]
 8015fa8:	9a01      	ldr	r2, [sp, #4]
 8015faa:	185b      	adds	r3, r3, r1
 8015fac:	60a3      	str	r3, [r4, #8]
 8015fae:	2a00      	cmp	r2, #0
 8015fb0:	db67      	blt.n	8016082 <validate_structure+0x10e>
 8015fb2:	6062      	str	r2, [r4, #4]
 8015fb4:	68a1      	ldr	r1, [r4, #8]
 8015fb6:	2917      	cmp	r1, #23
 8015fb8:	d90b      	bls.n	8015fd2 <validate_structure+0x5e>
 8015fba:	2218      	movs	r2, #24
 8015fbc:	4668      	mov	r0, sp
 8015fbe:	f001 fa24 	bl	801740a <div>
 8015fc2:	68e3      	ldr	r3, [r4, #12]
 8015fc4:	9900      	ldr	r1, [sp, #0]
 8015fc6:	9a01      	ldr	r2, [sp, #4]
 8015fc8:	185b      	adds	r3, r3, r1
 8015fca:	60e3      	str	r3, [r4, #12]
 8015fcc:	2a00      	cmp	r2, #0
 8015fce:	db5d      	blt.n	801608c <validate_structure+0x118>
 8015fd0:	60a2      	str	r2, [r4, #8]
 8015fd2:	6921      	ldr	r1, [r4, #16]
 8015fd4:	290b      	cmp	r1, #11
 8015fd6:	d90b      	bls.n	8015ff0 <validate_structure+0x7c>
 8015fd8:	220c      	movs	r2, #12
 8015fda:	4668      	mov	r0, sp
 8015fdc:	f001 fa15 	bl	801740a <div>
 8015fe0:	6963      	ldr	r3, [r4, #20]
 8015fe2:	9900      	ldr	r1, [sp, #0]
 8015fe4:	9a01      	ldr	r2, [sp, #4]
 8015fe6:	185b      	adds	r3, r3, r1
 8015fe8:	6163      	str	r3, [r4, #20]
 8015fea:	2a00      	cmp	r2, #0
 8015fec:	db53      	blt.n	8016096 <validate_structure+0x122>
 8015fee:	6122      	str	r2, [r4, #16]
 8015ff0:	6965      	ldr	r5, [r4, #20]
 8015ff2:	231c      	movs	r3, #28
 8015ff4:	07aa      	lsls	r2, r5, #30
 8015ff6:	d110      	bne.n	801601a <validate_structure+0xa6>
 8015ff8:	2164      	movs	r1, #100	; 0x64
 8015ffa:	0028      	movs	r0, r5
 8015ffc:	f7ea fa24 	bl	8000448 <__aeabi_idivmod>
 8016000:	231d      	movs	r3, #29
 8016002:	2900      	cmp	r1, #0
 8016004:	d109      	bne.n	801601a <validate_structure+0xa6>
 8016006:	4b3c      	ldr	r3, [pc, #240]	; (80160f8 <validate_structure+0x184>)
 8016008:	3191      	adds	r1, #145	; 0x91
 801600a:	18e8      	adds	r0, r5, r3
 801600c:	31ff      	adds	r1, #255	; 0xff
 801600e:	f7ea fa1b 	bl	8000448 <__aeabi_idivmod>
 8016012:	424b      	negs	r3, r1
 8016014:	4159      	adcs	r1, r3
 8016016:	000b      	movs	r3, r1
 8016018:	331c      	adds	r3, #28
 801601a:	68e2      	ldr	r2, [r4, #12]
 801601c:	271d      	movs	r7, #29
 801601e:	2a00      	cmp	r2, #0
 8016020:	dd65      	ble.n	80160ee <validate_structure+0x17a>
 8016022:	2603      	movs	r6, #3
 8016024:	271c      	movs	r7, #28
 8016026:	6922      	ldr	r2, [r4, #16]
 8016028:	0018      	movs	r0, r3
 801602a:	68e1      	ldr	r1, [r4, #12]
 801602c:	2a01      	cmp	r2, #1
 801602e:	d002      	beq.n	8016036 <validate_structure+0xc2>
 8016030:	4d32      	ldr	r5, [pc, #200]	; (80160fc <validate_structure+0x188>)
 8016032:	0090      	lsls	r0, r2, #2
 8016034:	5940      	ldr	r0, [r0, r5]
 8016036:	4281      	cmp	r1, r0
 8016038:	dd5c      	ble.n	80160f4 <validate_structure+0x180>
 801603a:	1a09      	subs	r1, r1, r0
 801603c:	3201      	adds	r2, #1
 801603e:	60e1      	str	r1, [r4, #12]
 8016040:	6122      	str	r2, [r4, #16]
 8016042:	2a0c      	cmp	r2, #12
 8016044:	d1ef      	bne.n	8016026 <validate_structure+0xb2>
 8016046:	2300      	movs	r3, #0
 8016048:	6965      	ldr	r5, [r4, #20]
 801604a:	6123      	str	r3, [r4, #16]
 801604c:	1c68      	adds	r0, r5, #1
 801604e:	003b      	movs	r3, r7
 8016050:	6160      	str	r0, [r4, #20]
 8016052:	4230      	tst	r0, r6
 8016054:	d1e7      	bne.n	8016026 <validate_structure+0xb2>
 8016056:	2164      	movs	r1, #100	; 0x64
 8016058:	f7ea f9f6 	bl	8000448 <__aeabi_idivmod>
 801605c:	231d      	movs	r3, #29
 801605e:	2900      	cmp	r1, #0
 8016060:	d1e1      	bne.n	8016026 <validate_structure+0xb2>
 8016062:	4b27      	ldr	r3, [pc, #156]	; (8016100 <validate_structure+0x18c>)
 8016064:	3191      	adds	r1, #145	; 0x91
 8016066:	18e8      	adds	r0, r5, r3
 8016068:	31ff      	adds	r1, #255	; 0xff
 801606a:	f7ea f9ed 	bl	8000448 <__aeabi_idivmod>
 801606e:	424b      	negs	r3, r1
 8016070:	4159      	adcs	r1, r3
 8016072:	000b      	movs	r3, r1
 8016074:	331c      	adds	r3, #28
 8016076:	e7d6      	b.n	8016026 <validate_structure+0xb2>
 8016078:	323c      	adds	r2, #60	; 0x3c
 801607a:	3b01      	subs	r3, #1
 801607c:	6022      	str	r2, [r4, #0]
 801607e:	6063      	str	r3, [r4, #4]
 8016080:	e789      	b.n	8015f96 <validate_structure+0x22>
 8016082:	323c      	adds	r2, #60	; 0x3c
 8016084:	3b01      	subs	r3, #1
 8016086:	6062      	str	r2, [r4, #4]
 8016088:	60a3      	str	r3, [r4, #8]
 801608a:	e793      	b.n	8015fb4 <validate_structure+0x40>
 801608c:	3218      	adds	r2, #24
 801608e:	3b01      	subs	r3, #1
 8016090:	60a2      	str	r2, [r4, #8]
 8016092:	60e3      	str	r3, [r4, #12]
 8016094:	e79d      	b.n	8015fd2 <validate_structure+0x5e>
 8016096:	320c      	adds	r2, #12
 8016098:	3b01      	subs	r3, #1
 801609a:	6122      	str	r2, [r4, #16]
 801609c:	6163      	str	r3, [r4, #20]
 801609e:	e7a7      	b.n	8015ff0 <validate_structure+0x7c>
 80160a0:	6922      	ldr	r2, [r4, #16]
 80160a2:	3a01      	subs	r2, #1
 80160a4:	6122      	str	r2, [r4, #16]
 80160a6:	3201      	adds	r2, #1
 80160a8:	d118      	bne.n	80160dc <validate_structure+0x168>
 80160aa:	230b      	movs	r3, #11
 80160ac:	2203      	movs	r2, #3
 80160ae:	6965      	ldr	r5, [r4, #20]
 80160b0:	6123      	str	r3, [r4, #16]
 80160b2:	1e68      	subs	r0, r5, #1
 80160b4:	6160      	str	r0, [r4, #20]
 80160b6:	3311      	adds	r3, #17
 80160b8:	4210      	tst	r0, r2
 80160ba:	d10f      	bne.n	80160dc <validate_structure+0x168>
 80160bc:	2164      	movs	r1, #100	; 0x64
 80160be:	f7ea f9c3 	bl	8000448 <__aeabi_idivmod>
 80160c2:	003b      	movs	r3, r7
 80160c4:	2900      	cmp	r1, #0
 80160c6:	d109      	bne.n	80160dc <validate_structure+0x168>
 80160c8:	4b0e      	ldr	r3, [pc, #56]	; (8016104 <validate_structure+0x190>)
 80160ca:	3191      	adds	r1, #145	; 0x91
 80160cc:	18e8      	adds	r0, r5, r3
 80160ce:	31ff      	adds	r1, #255	; 0xff
 80160d0:	f7ea f9ba 	bl	8000448 <__aeabi_idivmod>
 80160d4:	424b      	negs	r3, r1
 80160d6:	4159      	adcs	r1, r3
 80160d8:	000b      	movs	r3, r1
 80160da:	331c      	adds	r3, #28
 80160dc:	6921      	ldr	r1, [r4, #16]
 80160de:	001a      	movs	r2, r3
 80160e0:	2901      	cmp	r1, #1
 80160e2:	d002      	beq.n	80160ea <validate_structure+0x176>
 80160e4:	4a05      	ldr	r2, [pc, #20]	; (80160fc <validate_structure+0x188>)
 80160e6:	0089      	lsls	r1, r1, #2
 80160e8:	588a      	ldr	r2, [r1, r2]
 80160ea:	18b2      	adds	r2, r6, r2
 80160ec:	60e2      	str	r2, [r4, #12]
 80160ee:	68e6      	ldr	r6, [r4, #12]
 80160f0:	2e00      	cmp	r6, #0
 80160f2:	ddd5      	ble.n	80160a0 <validate_structure+0x12c>
 80160f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80160f6:	46c0      	nop			; (mov r8, r8)
 80160f8:	0000076c 	.word	0x0000076c
 80160fc:	0801ab90 	.word	0x0801ab90
 8016100:	0000076d 	.word	0x0000076d
 8016104:	0000076b 	.word	0x0000076b

08016108 <mktime>:
 8016108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801610a:	b08f      	sub	sp, #60	; 0x3c
 801610c:	0004      	movs	r4, r0
 801610e:	f001 fba3 	bl	8017858 <__gettzinfo>
 8016112:	0007      	movs	r7, r0
 8016114:	0020      	movs	r0, r4
 8016116:	f7ff ff2d 	bl	8015f74 <validate_structure>
 801611a:	233c      	movs	r3, #60	; 0x3c
 801611c:	6862      	ldr	r2, [r4, #4]
 801611e:	68a1      	ldr	r1, [r4, #8]
 8016120:	4353      	muls	r3, r2
 8016122:	6822      	ldr	r2, [r4, #0]
 8016124:	6966      	ldr	r6, [r4, #20]
 8016126:	189b      	adds	r3, r3, r2
 8016128:	22e1      	movs	r2, #225	; 0xe1
 801612a:	0112      	lsls	r2, r2, #4
 801612c:	434a      	muls	r2, r1
 801612e:	189b      	adds	r3, r3, r2
 8016130:	9300      	str	r3, [sp, #0]
 8016132:	68e2      	ldr	r2, [r4, #12]
 8016134:	17db      	asrs	r3, r3, #31
 8016136:	9301      	str	r3, [sp, #4]
 8016138:	6923      	ldr	r3, [r4, #16]
 801613a:	1e50      	subs	r0, r2, #1
 801613c:	4aaf      	ldr	r2, [pc, #700]	; (80163fc <mktime+0x2f4>)
 801613e:	0099      	lsls	r1, r3, #2
 8016140:	588a      	ldr	r2, [r1, r2]
 8016142:	1882      	adds	r2, r0, r2
 8016144:	9206      	str	r2, [sp, #24]
 8016146:	2b01      	cmp	r3, #1
 8016148:	dd12      	ble.n	8016170 <mktime+0x68>
 801614a:	07b3      	lsls	r3, r6, #30
 801614c:	d110      	bne.n	8016170 <mktime+0x68>
 801614e:	2164      	movs	r1, #100	; 0x64
 8016150:	0030      	movs	r0, r6
 8016152:	f7ea f979 	bl	8000448 <__aeabi_idivmod>
 8016156:	2900      	cmp	r1, #0
 8016158:	d107      	bne.n	801616a <mktime+0x62>
 801615a:	4ba9      	ldr	r3, [pc, #676]	; (8016400 <mktime+0x2f8>)
 801615c:	3191      	adds	r1, #145	; 0x91
 801615e:	31ff      	adds	r1, #255	; 0xff
 8016160:	18f0      	adds	r0, r6, r3
 8016162:	f7ea f971 	bl	8000448 <__aeabi_idivmod>
 8016166:	2900      	cmp	r1, #0
 8016168:	d102      	bne.n	8016170 <mktime+0x68>
 801616a:	9b06      	ldr	r3, [sp, #24]
 801616c:	3301      	adds	r3, #1
 801616e:	9306      	str	r3, [sp, #24]
 8016170:	9b06      	ldr	r3, [sp, #24]
 8016172:	4aa4      	ldr	r2, [pc, #656]	; (8016404 <mktime+0x2fc>)
 8016174:	61e3      	str	r3, [r4, #28]
 8016176:	4ba4      	ldr	r3, [pc, #656]	; (8016408 <mktime+0x300>)
 8016178:	18f3      	adds	r3, r6, r3
 801617a:	4293      	cmp	r3, r2
 801617c:	d900      	bls.n	8016180 <mktime+0x78>
 801617e:	e18b      	b.n	8016498 <mktime+0x390>
 8016180:	2e46      	cmp	r6, #70	; 0x46
 8016182:	dc00      	bgt.n	8016186 <mktime+0x7e>
 8016184:	e09c      	b.n	80162c0 <mktime+0x1b8>
 8016186:	2203      	movs	r2, #3
 8016188:	2346      	movs	r3, #70	; 0x46
 801618a:	4694      	mov	ip, r2
 801618c:	4661      	mov	r1, ip
 801618e:	4662      	mov	r2, ip
 8016190:	4019      	ands	r1, r3
 8016192:	4213      	tst	r3, r2
 8016194:	d000      	beq.n	8016198 <mktime+0x90>
 8016196:	e090      	b.n	80162ba <mktime+0x1b2>
 8016198:	2002      	movs	r0, #2
 801619a:	4d9c      	ldr	r5, [pc, #624]	; (801640c <mktime+0x304>)
 801619c:	4a9c      	ldr	r2, [pc, #624]	; (8016410 <mktime+0x308>)
 801619e:	435d      	muls	r5, r3
 80161a0:	41c5      	rors	r5, r0
 80161a2:	306d      	adds	r0, #109	; 0x6d
 80161a4:	30ff      	adds	r0, #255	; 0xff
 80161a6:	4295      	cmp	r5, r2
 80161a8:	d80b      	bhi.n	80161c2 <mktime+0xba>
 80161aa:	4a95      	ldr	r2, [pc, #596]	; (8016400 <mktime+0x2f8>)
 80161ac:	1898      	adds	r0, r3, r2
 80161ae:	4a97      	ldr	r2, [pc, #604]	; (801640c <mktime+0x304>)
 80161b0:	4342      	muls	r2, r0
 80161b2:	2004      	movs	r0, #4
 80161b4:	41c2      	rors	r2, r0
 80161b6:	4897      	ldr	r0, [pc, #604]	; (8016414 <mktime+0x30c>)
 80161b8:	4290      	cmp	r0, r2
 80161ba:	4149      	adcs	r1, r1
 80161bc:	316e      	adds	r1, #110	; 0x6e
 80161be:	31ff      	adds	r1, #255	; 0xff
 80161c0:	0008      	movs	r0, r1
 80161c2:	9a06      	ldr	r2, [sp, #24]
 80161c4:	3301      	adds	r3, #1
 80161c6:	1812      	adds	r2, r2, r0
 80161c8:	9206      	str	r2, [sp, #24]
 80161ca:	429e      	cmp	r6, r3
 80161cc:	d1de      	bne.n	801618c <mktime+0x84>
 80161ce:	9b06      	ldr	r3, [sp, #24]
 80161d0:	4a91      	ldr	r2, [pc, #580]	; (8016418 <mktime+0x310>)
 80161d2:	9806      	ldr	r0, [sp, #24]
 80161d4:	17d9      	asrs	r1, r3, #31
 80161d6:	2300      	movs	r3, #0
 80161d8:	f7ea f9a6 	bl	8000528 <__aeabi_lmul>
 80161dc:	9a00      	ldr	r2, [sp, #0]
 80161de:	9b01      	ldr	r3, [sp, #4]
 80161e0:	1812      	adds	r2, r2, r0
 80161e2:	414b      	adcs	r3, r1
 80161e4:	9200      	str	r2, [sp, #0]
 80161e6:	9301      	str	r3, [sp, #4]
 80161e8:	f000 fea0 	bl	8016f2c <__tz_lock>
 80161ec:	f000 feae 	bl	8016f4c <_tzset_unlocked>
 80161f0:	4b8a      	ldr	r3, [pc, #552]	; (801641c <mktime+0x314>)
 80161f2:	681d      	ldr	r5, [r3, #0]
 80161f4:	2d00      	cmp	r5, #0
 80161f6:	d058      	beq.n	80162aa <mktime+0x1a2>
 80161f8:	6963      	ldr	r3, [r4, #20]
 80161fa:	4a81      	ldr	r2, [pc, #516]	; (8016400 <mktime+0x2f8>)
 80161fc:	1898      	adds	r0, r3, r2
 80161fe:	6a23      	ldr	r3, [r4, #32]
 8016200:	9307      	str	r3, [sp, #28]
 8016202:	930b      	str	r3, [sp, #44]	; 0x2c
 8016204:	2b00      	cmp	r3, #0
 8016206:	dd01      	ble.n	801620c <mktime+0x104>
 8016208:	2301      	movs	r3, #1
 801620a:	930b      	str	r3, [sp, #44]	; 0x2c
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	4283      	cmp	r3, r0
 8016210:	d000      	beq.n	8016214 <mktime+0x10c>
 8016212:	e093      	b.n	801633c <mktime+0x234>
 8016214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016216:	930a      	str	r3, [sp, #40]	; 0x28
 8016218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801621a:	9308      	str	r3, [sp, #32]
 801621c:	17db      	asrs	r3, r3, #31
 801621e:	9309      	str	r3, [sp, #36]	; 0x24
 8016220:	9808      	ldr	r0, [sp, #32]
 8016222:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016224:	6a3a      	ldr	r2, [r7, #32]
 8016226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016228:	1a12      	subs	r2, r2, r0
 801622a:	418b      	sbcs	r3, r1
 801622c:	9204      	str	r2, [sp, #16]
 801622e:	9305      	str	r3, [sp, #20]
 8016230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016234:	920c      	str	r2, [sp, #48]	; 0x30
 8016236:	930d      	str	r3, [sp, #52]	; 0x34
 8016238:	980c      	ldr	r0, [sp, #48]	; 0x30
 801623a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623e:	001a      	movs	r2, r3
 8016240:	469c      	mov	ip, r3
 8016242:	17db      	asrs	r3, r3, #31
 8016244:	1a80      	subs	r0, r0, r2
 8016246:	4199      	sbcs	r1, r3
 8016248:	9002      	str	r0, [sp, #8]
 801624a:	9103      	str	r1, [sp, #12]
 801624c:	9b03      	ldr	r3, [sp, #12]
 801624e:	9901      	ldr	r1, [sp, #4]
 8016250:	428b      	cmp	r3, r1
 8016252:	dc11      	bgt.n	8016278 <mktime+0x170>
 8016254:	d103      	bne.n	801625e <mktime+0x156>
 8016256:	9900      	ldr	r1, [sp, #0]
 8016258:	9b02      	ldr	r3, [sp, #8]
 801625a:	428b      	cmp	r3, r1
 801625c:	d80c      	bhi.n	8016278 <mktime+0x170>
 801625e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016260:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016262:	9a08      	ldr	r2, [sp, #32]
 8016264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016266:	1a80      	subs	r0, r0, r2
 8016268:	4199      	sbcs	r1, r3
 801626a:	9d01      	ldr	r5, [sp, #4]
 801626c:	42a9      	cmp	r1, r5
 801626e:	dc6a      	bgt.n	8016346 <mktime+0x23e>
 8016270:	d102      	bne.n	8016278 <mktime+0x170>
 8016272:	9d00      	ldr	r5, [sp, #0]
 8016274:	42a8      	cmp	r0, r5
 8016276:	d866      	bhi.n	8016346 <mktime+0x23e>
 8016278:	6839      	ldr	r1, [r7, #0]
 801627a:	2900      	cmp	r1, #0
 801627c:	d065      	beq.n	801634a <mktime+0x242>
 801627e:	9905      	ldr	r1, [sp, #20]
 8016280:	9801      	ldr	r0, [sp, #4]
 8016282:	4281      	cmp	r1, r0
 8016284:	dc0d      	bgt.n	80162a2 <mktime+0x19a>
 8016286:	d103      	bne.n	8016290 <mktime+0x188>
 8016288:	9904      	ldr	r1, [sp, #16]
 801628a:	9800      	ldr	r0, [sp, #0]
 801628c:	4281      	cmp	r1, r0
 801628e:	d808      	bhi.n	80162a2 <mktime+0x19a>
 8016290:	9901      	ldr	r1, [sp, #4]
 8016292:	9b03      	ldr	r3, [sp, #12]
 8016294:	428b      	cmp	r3, r1
 8016296:	dc61      	bgt.n	801635c <mktime+0x254>
 8016298:	d103      	bne.n	80162a2 <mktime+0x19a>
 801629a:	9900      	ldr	r1, [sp, #0]
 801629c:	9b02      	ldr	r3, [sp, #8]
 801629e:	428b      	cmp	r3, r1
 80162a0:	d85c      	bhi.n	801635c <mktime+0x254>
 80162a2:	2500      	movs	r5, #0
 80162a4:	9b07      	ldr	r3, [sp, #28]
 80162a6:	42ab      	cmp	r3, r5
 80162a8:	da5c      	bge.n	8016364 <mktime+0x25c>
 80162aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ac:	001e      	movs	r6, r3
 80162ae:	17df      	asrs	r7, r3, #31
 80162b0:	9a00      	ldr	r2, [sp, #0]
 80162b2:	9b01      	ldr	r3, [sp, #4]
 80162b4:	18b6      	adds	r6, r6, r2
 80162b6:	415f      	adcs	r7, r3
 80162b8:	e0d5      	b.n	8016466 <mktime+0x35e>
 80162ba:	206e      	movs	r0, #110	; 0x6e
 80162bc:	30ff      	adds	r0, #255	; 0xff
 80162be:	e780      	b.n	80161c2 <mktime+0xba>
 80162c0:	2545      	movs	r5, #69	; 0x45
 80162c2:	2e46      	cmp	r6, #70	; 0x46
 80162c4:	d100      	bne.n	80162c8 <mktime+0x1c0>
 80162c6:	e782      	b.n	80161ce <mktime+0xc6>
 80162c8:	2303      	movs	r3, #3
 80162ca:	402b      	ands	r3, r5
 80162cc:	42ae      	cmp	r6, r5
 80162ce:	db15      	blt.n	80162fc <mktime+0x1f4>
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d12e      	bne.n	8016332 <mktime+0x22a>
 80162d4:	2164      	movs	r1, #100	; 0x64
 80162d6:	0030      	movs	r0, r6
 80162d8:	f7ea f8b6 	bl	8000448 <__aeabi_idivmod>
 80162dc:	2900      	cmp	r1, #0
 80162de:	d12a      	bne.n	8016336 <mktime+0x22e>
 80162e0:	4b47      	ldr	r3, [pc, #284]	; (8016400 <mktime+0x2f8>)
 80162e2:	3191      	adds	r1, #145	; 0x91
 80162e4:	18f0      	adds	r0, r6, r3
 80162e6:	31ff      	adds	r1, #255	; 0xff
 80162e8:	f7ea f8ae 	bl	8000448 <__aeabi_idivmod>
 80162ec:	424b      	negs	r3, r1
 80162ee:	4159      	adcs	r1, r3
 80162f0:	316e      	adds	r1, #110	; 0x6e
 80162f2:	31ff      	adds	r1, #255	; 0xff
 80162f4:	9b06      	ldr	r3, [sp, #24]
 80162f6:	1a5b      	subs	r3, r3, r1
 80162f8:	9306      	str	r3, [sp, #24]
 80162fa:	e768      	b.n	80161ce <mktime+0xc6>
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d116      	bne.n	801632e <mktime+0x226>
 8016300:	2164      	movs	r1, #100	; 0x64
 8016302:	0028      	movs	r0, r5
 8016304:	f7ea f8a0 	bl	8000448 <__aeabi_idivmod>
 8016308:	23b7      	movs	r3, #183	; 0xb7
 801630a:	005b      	lsls	r3, r3, #1
 801630c:	2900      	cmp	r1, #0
 801630e:	d109      	bne.n	8016324 <mktime+0x21c>
 8016310:	4b3b      	ldr	r3, [pc, #236]	; (8016400 <mktime+0x2f8>)
 8016312:	3191      	adds	r1, #145	; 0x91
 8016314:	18e8      	adds	r0, r5, r3
 8016316:	31ff      	adds	r1, #255	; 0xff
 8016318:	f7ea f896 	bl	8000448 <__aeabi_idivmod>
 801631c:	424b      	negs	r3, r1
 801631e:	414b      	adcs	r3, r1
 8016320:	336e      	adds	r3, #110	; 0x6e
 8016322:	33ff      	adds	r3, #255	; 0xff
 8016324:	9a06      	ldr	r2, [sp, #24]
 8016326:	3d01      	subs	r5, #1
 8016328:	1ad3      	subs	r3, r2, r3
 801632a:	9306      	str	r3, [sp, #24]
 801632c:	e7cc      	b.n	80162c8 <mktime+0x1c0>
 801632e:	236e      	movs	r3, #110	; 0x6e
 8016330:	e7f7      	b.n	8016322 <mktime+0x21a>
 8016332:	216e      	movs	r1, #110	; 0x6e
 8016334:	e7dd      	b.n	80162f2 <mktime+0x1ea>
 8016336:	21b7      	movs	r1, #183	; 0xb7
 8016338:	0049      	lsls	r1, r1, #1
 801633a:	e7db      	b.n	80162f4 <mktime+0x1ec>
 801633c:	f000 fd3c 	bl	8016db8 <__tzcalc_limits>
 8016340:	2800      	cmp	r0, #0
 8016342:	d000      	beq.n	8016346 <mktime+0x23e>
 8016344:	e766      	b.n	8016214 <mktime+0x10c>
 8016346:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016348:	e082      	b.n	8016450 <mktime+0x348>
 801634a:	9905      	ldr	r1, [sp, #20]
 801634c:	9801      	ldr	r0, [sp, #4]
 801634e:	4281      	cmp	r1, r0
 8016350:	dc9e      	bgt.n	8016290 <mktime+0x188>
 8016352:	d103      	bne.n	801635c <mktime+0x254>
 8016354:	9904      	ldr	r1, [sp, #16]
 8016356:	9800      	ldr	r0, [sp, #0]
 8016358:	4281      	cmp	r1, r0
 801635a:	d899      	bhi.n	8016290 <mktime+0x188>
 801635c:	9b07      	ldr	r3, [sp, #28]
 801635e:	2501      	movs	r5, #1
 8016360:	2b00      	cmp	r3, #0
 8016362:	db78      	blt.n	8016456 <mktime+0x34e>
 8016364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016366:	406b      	eors	r3, r5
 8016368:	9302      	str	r3, [sp, #8]
 801636a:	2b01      	cmp	r3, #1
 801636c:	d170      	bne.n	8016450 <mktime+0x348>
 801636e:	4662      	mov	r2, ip
 8016370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016372:	1a9b      	subs	r3, r3, r2
 8016374:	2d00      	cmp	r5, #0
 8016376:	d002      	beq.n	801637e <mktime+0x276>
 8016378:	4663      	mov	r3, ip
 801637a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801637c:	1a9b      	subs	r3, r3, r2
 801637e:	0018      	movs	r0, r3
 8016380:	6822      	ldr	r2, [r4, #0]
 8016382:	17d9      	asrs	r1, r3, #31
 8016384:	18d2      	adds	r2, r2, r3
 8016386:	6022      	str	r2, [r4, #0]
 8016388:	9a00      	ldr	r2, [sp, #0]
 801638a:	9b01      	ldr	r3, [sp, #4]
 801638c:	1812      	adds	r2, r2, r0
 801638e:	414b      	adcs	r3, r1
 8016390:	9200      	str	r2, [sp, #0]
 8016392:	9301      	str	r3, [sp, #4]
 8016394:	68e3      	ldr	r3, [r4, #12]
 8016396:	0020      	movs	r0, r4
 8016398:	9304      	str	r3, [sp, #16]
 801639a:	f7ff fdeb 	bl	8015f74 <validate_structure>
 801639e:	68e2      	ldr	r2, [r4, #12]
 80163a0:	9b04      	ldr	r3, [sp, #16]
 80163a2:	9904      	ldr	r1, [sp, #16]
 80163a4:	1ad3      	subs	r3, r2, r3
 80163a6:	428a      	cmp	r2, r1
 80163a8:	d052      	beq.n	8016450 <mktime+0x348>
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	dc1d      	bgt.n	80163ea <mktime+0x2e2>
 80163ae:	1c5a      	adds	r2, r3, #1
 80163b0:	da00      	bge.n	80163b4 <mktime+0x2ac>
 80163b2:	9b02      	ldr	r3, [sp, #8]
 80163b4:	9a06      	ldr	r2, [sp, #24]
 80163b6:	69e1      	ldr	r1, [r4, #28]
 80163b8:	18d2      	adds	r2, r2, r3
 80163ba:	9206      	str	r2, [sp, #24]
 80163bc:	2203      	movs	r2, #3
 80163be:	18c9      	adds	r1, r1, r3
 80163c0:	9102      	str	r1, [sp, #8]
 80163c2:	d52f      	bpl.n	8016424 <mktime+0x31c>
 80163c4:	1e70      	subs	r0, r6, #1
 80163c6:	4210      	tst	r0, r2
 80163c8:	d112      	bne.n	80163f0 <mktime+0x2e8>
 80163ca:	2164      	movs	r1, #100	; 0x64
 80163cc:	f7ea f83c 	bl	8000448 <__aeabi_idivmod>
 80163d0:	2900      	cmp	r1, #0
 80163d2:	d111      	bne.n	80163f8 <mktime+0x2f0>
 80163d4:	4b12      	ldr	r3, [pc, #72]	; (8016420 <mktime+0x318>)
 80163d6:	3191      	adds	r1, #145	; 0x91
 80163d8:	18f0      	adds	r0, r6, r3
 80163da:	31ff      	adds	r1, #255	; 0xff
 80163dc:	f7ea f834 	bl	8000448 <__aeabi_idivmod>
 80163e0:	424b      	negs	r3, r1
 80163e2:	4159      	adcs	r1, r3
 80163e4:	316d      	adds	r1, #109	; 0x6d
 80163e6:	31ff      	adds	r1, #255	; 0xff
 80163e8:	e004      	b.n	80163f4 <mktime+0x2ec>
 80163ea:	2301      	movs	r3, #1
 80163ec:	425b      	negs	r3, r3
 80163ee:	e7e1      	b.n	80163b4 <mktime+0x2ac>
 80163f0:	21b6      	movs	r1, #182	; 0xb6
 80163f2:	0049      	lsls	r1, r1, #1
 80163f4:	61e1      	str	r1, [r4, #28]
 80163f6:	e02b      	b.n	8016450 <mktime+0x348>
 80163f8:	216e      	movs	r1, #110	; 0x6e
 80163fa:	e7f4      	b.n	80163e6 <mktime+0x2de>
 80163fc:	0801abc0 	.word	0x0801abc0
 8016400:	0000076c 	.word	0x0000076c
 8016404:	00004e20 	.word	0x00004e20
 8016408:	00002710 	.word	0x00002710
 801640c:	c28f5c29 	.word	0xc28f5c29
 8016410:	028f5c28 	.word	0x028f5c28
 8016414:	00a3d70a 	.word	0x00a3d70a
 8016418:	00015180 	.word	0x00015180
 801641c:	20001dc8 	.word	0x20001dc8
 8016420:	0000076b 	.word	0x0000076b
 8016424:	4216      	tst	r6, r2
 8016426:	d12d      	bne.n	8016484 <mktime+0x37c>
 8016428:	2164      	movs	r1, #100	; 0x64
 801642a:	0030      	movs	r0, r6
 801642c:	f7ea f80c 	bl	8000448 <__aeabi_idivmod>
 8016430:	2900      	cmp	r1, #0
 8016432:	d129      	bne.n	8016488 <mktime+0x380>
 8016434:	4b1a      	ldr	r3, [pc, #104]	; (80164a0 <mktime+0x398>)
 8016436:	3191      	adds	r1, #145	; 0x91
 8016438:	18f0      	adds	r0, r6, r3
 801643a:	31ff      	adds	r1, #255	; 0xff
 801643c:	f7ea f804 	bl	8000448 <__aeabi_idivmod>
 8016440:	424b      	negs	r3, r1
 8016442:	4159      	adcs	r1, r3
 8016444:	316e      	adds	r1, #110	; 0x6e
 8016446:	31ff      	adds	r1, #255	; 0xff
 8016448:	9b02      	ldr	r3, [sp, #8]
 801644a:	428b      	cmp	r3, r1
 801644c:	da1f      	bge.n	801648e <mktime+0x386>
 801644e:	61e3      	str	r3, [r4, #28]
 8016450:	2d01      	cmp	r5, #1
 8016452:	d000      	beq.n	8016456 <mktime+0x34e>
 8016454:	e729      	b.n	80162aa <mktime+0x1a2>
 8016456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016458:	2501      	movs	r5, #1
 801645a:	001e      	movs	r6, r3
 801645c:	17df      	asrs	r7, r3, #31
 801645e:	9a00      	ldr	r2, [sp, #0]
 8016460:	9b01      	ldr	r3, [sp, #4]
 8016462:	18b6      	adds	r6, r6, r2
 8016464:	415f      	adcs	r7, r3
 8016466:	f000 fd69 	bl	8016f3c <__tz_unlock>
 801646a:	9806      	ldr	r0, [sp, #24]
 801646c:	2107      	movs	r1, #7
 801646e:	6225      	str	r5, [r4, #32]
 8016470:	3004      	adds	r0, #4
 8016472:	f7e9 ffe9 	bl	8000448 <__aeabi_idivmod>
 8016476:	2900      	cmp	r1, #0
 8016478:	db0c      	blt.n	8016494 <mktime+0x38c>
 801647a:	61a1      	str	r1, [r4, #24]
 801647c:	0030      	movs	r0, r6
 801647e:	0039      	movs	r1, r7
 8016480:	b00f      	add	sp, #60	; 0x3c
 8016482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016484:	216e      	movs	r1, #110	; 0x6e
 8016486:	e7de      	b.n	8016446 <mktime+0x33e>
 8016488:	21b7      	movs	r1, #183	; 0xb7
 801648a:	0049      	lsls	r1, r1, #1
 801648c:	e7dc      	b.n	8016448 <mktime+0x340>
 801648e:	9b02      	ldr	r3, [sp, #8]
 8016490:	1a59      	subs	r1, r3, r1
 8016492:	e7af      	b.n	80163f4 <mktime+0x2ec>
 8016494:	3107      	adds	r1, #7
 8016496:	e7f0      	b.n	801647a <mktime+0x372>
 8016498:	2601      	movs	r6, #1
 801649a:	4276      	negs	r6, r6
 801649c:	17f7      	asrs	r7, r6, #31
 801649e:	e7ed      	b.n	801647c <mktime+0x374>
 80164a0:	0000076c 	.word	0x0000076c

080164a4 <_free_r>:
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	0005      	movs	r5, r0
 80164a8:	2900      	cmp	r1, #0
 80164aa:	d010      	beq.n	80164ce <_free_r+0x2a>
 80164ac:	1f0c      	subs	r4, r1, #4
 80164ae:	6823      	ldr	r3, [r4, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	da00      	bge.n	80164b6 <_free_r+0x12>
 80164b4:	18e4      	adds	r4, r4, r3
 80164b6:	0028      	movs	r0, r5
 80164b8:	f001 fa50 	bl	801795c <__malloc_lock>
 80164bc:	4a1d      	ldr	r2, [pc, #116]	; (8016534 <_free_r+0x90>)
 80164be:	6813      	ldr	r3, [r2, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d105      	bne.n	80164d0 <_free_r+0x2c>
 80164c4:	6063      	str	r3, [r4, #4]
 80164c6:	6014      	str	r4, [r2, #0]
 80164c8:	0028      	movs	r0, r5
 80164ca:	f001 fa4f 	bl	801796c <__malloc_unlock>
 80164ce:	bd70      	pop	{r4, r5, r6, pc}
 80164d0:	42a3      	cmp	r3, r4
 80164d2:	d908      	bls.n	80164e6 <_free_r+0x42>
 80164d4:	6821      	ldr	r1, [r4, #0]
 80164d6:	1860      	adds	r0, r4, r1
 80164d8:	4283      	cmp	r3, r0
 80164da:	d1f3      	bne.n	80164c4 <_free_r+0x20>
 80164dc:	6818      	ldr	r0, [r3, #0]
 80164de:	685b      	ldr	r3, [r3, #4]
 80164e0:	1841      	adds	r1, r0, r1
 80164e2:	6021      	str	r1, [r4, #0]
 80164e4:	e7ee      	b.n	80164c4 <_free_r+0x20>
 80164e6:	001a      	movs	r2, r3
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d001      	beq.n	80164f2 <_free_r+0x4e>
 80164ee:	42a3      	cmp	r3, r4
 80164f0:	d9f9      	bls.n	80164e6 <_free_r+0x42>
 80164f2:	6811      	ldr	r1, [r2, #0]
 80164f4:	1850      	adds	r0, r2, r1
 80164f6:	42a0      	cmp	r0, r4
 80164f8:	d10b      	bne.n	8016512 <_free_r+0x6e>
 80164fa:	6820      	ldr	r0, [r4, #0]
 80164fc:	1809      	adds	r1, r1, r0
 80164fe:	1850      	adds	r0, r2, r1
 8016500:	6011      	str	r1, [r2, #0]
 8016502:	4283      	cmp	r3, r0
 8016504:	d1e0      	bne.n	80164c8 <_free_r+0x24>
 8016506:	6818      	ldr	r0, [r3, #0]
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	1841      	adds	r1, r0, r1
 801650c:	6011      	str	r1, [r2, #0]
 801650e:	6053      	str	r3, [r2, #4]
 8016510:	e7da      	b.n	80164c8 <_free_r+0x24>
 8016512:	42a0      	cmp	r0, r4
 8016514:	d902      	bls.n	801651c <_free_r+0x78>
 8016516:	230c      	movs	r3, #12
 8016518:	602b      	str	r3, [r5, #0]
 801651a:	e7d5      	b.n	80164c8 <_free_r+0x24>
 801651c:	6821      	ldr	r1, [r4, #0]
 801651e:	1860      	adds	r0, r4, r1
 8016520:	4283      	cmp	r3, r0
 8016522:	d103      	bne.n	801652c <_free_r+0x88>
 8016524:	6818      	ldr	r0, [r3, #0]
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	1841      	adds	r1, r0, r1
 801652a:	6021      	str	r1, [r4, #0]
 801652c:	6063      	str	r3, [r4, #4]
 801652e:	6054      	str	r4, [r2, #4]
 8016530:	e7ca      	b.n	80164c8 <_free_r+0x24>
 8016532:	46c0      	nop			; (mov r8, r8)
 8016534:	20001da4 	.word	0x20001da4

08016538 <sbrk_aligned>:
 8016538:	b570      	push	{r4, r5, r6, lr}
 801653a:	4e0f      	ldr	r6, [pc, #60]	; (8016578 <sbrk_aligned+0x40>)
 801653c:	000d      	movs	r5, r1
 801653e:	6831      	ldr	r1, [r6, #0]
 8016540:	0004      	movs	r4, r0
 8016542:	2900      	cmp	r1, #0
 8016544:	d102      	bne.n	801654c <sbrk_aligned+0x14>
 8016546:	f000 fc1d 	bl	8016d84 <_sbrk_r>
 801654a:	6030      	str	r0, [r6, #0]
 801654c:	0029      	movs	r1, r5
 801654e:	0020      	movs	r0, r4
 8016550:	f000 fc18 	bl	8016d84 <_sbrk_r>
 8016554:	1c43      	adds	r3, r0, #1
 8016556:	d00a      	beq.n	801656e <sbrk_aligned+0x36>
 8016558:	2303      	movs	r3, #3
 801655a:	1cc5      	adds	r5, r0, #3
 801655c:	439d      	bics	r5, r3
 801655e:	42a8      	cmp	r0, r5
 8016560:	d007      	beq.n	8016572 <sbrk_aligned+0x3a>
 8016562:	1a29      	subs	r1, r5, r0
 8016564:	0020      	movs	r0, r4
 8016566:	f000 fc0d 	bl	8016d84 <_sbrk_r>
 801656a:	1c43      	adds	r3, r0, #1
 801656c:	d101      	bne.n	8016572 <sbrk_aligned+0x3a>
 801656e:	2501      	movs	r5, #1
 8016570:	426d      	negs	r5, r5
 8016572:	0028      	movs	r0, r5
 8016574:	bd70      	pop	{r4, r5, r6, pc}
 8016576:	46c0      	nop			; (mov r8, r8)
 8016578:	20001da8 	.word	0x20001da8

0801657c <_malloc_r>:
 801657c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801657e:	2203      	movs	r2, #3
 8016580:	1ccb      	adds	r3, r1, #3
 8016582:	4393      	bics	r3, r2
 8016584:	3308      	adds	r3, #8
 8016586:	0006      	movs	r6, r0
 8016588:	001f      	movs	r7, r3
 801658a:	2b0c      	cmp	r3, #12
 801658c:	d232      	bcs.n	80165f4 <_malloc_r+0x78>
 801658e:	270c      	movs	r7, #12
 8016590:	42b9      	cmp	r1, r7
 8016592:	d831      	bhi.n	80165f8 <_malloc_r+0x7c>
 8016594:	0030      	movs	r0, r6
 8016596:	f001 f9e1 	bl	801795c <__malloc_lock>
 801659a:	4d32      	ldr	r5, [pc, #200]	; (8016664 <_malloc_r+0xe8>)
 801659c:	682b      	ldr	r3, [r5, #0]
 801659e:	001c      	movs	r4, r3
 80165a0:	2c00      	cmp	r4, #0
 80165a2:	d12e      	bne.n	8016602 <_malloc_r+0x86>
 80165a4:	0039      	movs	r1, r7
 80165a6:	0030      	movs	r0, r6
 80165a8:	f7ff ffc6 	bl	8016538 <sbrk_aligned>
 80165ac:	0004      	movs	r4, r0
 80165ae:	1c43      	adds	r3, r0, #1
 80165b0:	d11e      	bne.n	80165f0 <_malloc_r+0x74>
 80165b2:	682c      	ldr	r4, [r5, #0]
 80165b4:	0025      	movs	r5, r4
 80165b6:	2d00      	cmp	r5, #0
 80165b8:	d14a      	bne.n	8016650 <_malloc_r+0xd4>
 80165ba:	6823      	ldr	r3, [r4, #0]
 80165bc:	0029      	movs	r1, r5
 80165be:	18e3      	adds	r3, r4, r3
 80165c0:	0030      	movs	r0, r6
 80165c2:	9301      	str	r3, [sp, #4]
 80165c4:	f000 fbde 	bl	8016d84 <_sbrk_r>
 80165c8:	9b01      	ldr	r3, [sp, #4]
 80165ca:	4283      	cmp	r3, r0
 80165cc:	d143      	bne.n	8016656 <_malloc_r+0xda>
 80165ce:	6823      	ldr	r3, [r4, #0]
 80165d0:	3703      	adds	r7, #3
 80165d2:	1aff      	subs	r7, r7, r3
 80165d4:	2303      	movs	r3, #3
 80165d6:	439f      	bics	r7, r3
 80165d8:	3708      	adds	r7, #8
 80165da:	2f0c      	cmp	r7, #12
 80165dc:	d200      	bcs.n	80165e0 <_malloc_r+0x64>
 80165de:	270c      	movs	r7, #12
 80165e0:	0039      	movs	r1, r7
 80165e2:	0030      	movs	r0, r6
 80165e4:	f7ff ffa8 	bl	8016538 <sbrk_aligned>
 80165e8:	1c43      	adds	r3, r0, #1
 80165ea:	d034      	beq.n	8016656 <_malloc_r+0xda>
 80165ec:	6823      	ldr	r3, [r4, #0]
 80165ee:	19df      	adds	r7, r3, r7
 80165f0:	6027      	str	r7, [r4, #0]
 80165f2:	e013      	b.n	801661c <_malloc_r+0xa0>
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	dacb      	bge.n	8016590 <_malloc_r+0x14>
 80165f8:	230c      	movs	r3, #12
 80165fa:	2500      	movs	r5, #0
 80165fc:	6033      	str	r3, [r6, #0]
 80165fe:	0028      	movs	r0, r5
 8016600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016602:	6822      	ldr	r2, [r4, #0]
 8016604:	1bd1      	subs	r1, r2, r7
 8016606:	d420      	bmi.n	801664a <_malloc_r+0xce>
 8016608:	290b      	cmp	r1, #11
 801660a:	d917      	bls.n	801663c <_malloc_r+0xc0>
 801660c:	19e2      	adds	r2, r4, r7
 801660e:	6027      	str	r7, [r4, #0]
 8016610:	42a3      	cmp	r3, r4
 8016612:	d111      	bne.n	8016638 <_malloc_r+0xbc>
 8016614:	602a      	str	r2, [r5, #0]
 8016616:	6863      	ldr	r3, [r4, #4]
 8016618:	6011      	str	r1, [r2, #0]
 801661a:	6053      	str	r3, [r2, #4]
 801661c:	0030      	movs	r0, r6
 801661e:	0025      	movs	r5, r4
 8016620:	f001 f9a4 	bl	801796c <__malloc_unlock>
 8016624:	2207      	movs	r2, #7
 8016626:	350b      	adds	r5, #11
 8016628:	1d23      	adds	r3, r4, #4
 801662a:	4395      	bics	r5, r2
 801662c:	1aea      	subs	r2, r5, r3
 801662e:	429d      	cmp	r5, r3
 8016630:	d0e5      	beq.n	80165fe <_malloc_r+0x82>
 8016632:	1b5b      	subs	r3, r3, r5
 8016634:	50a3      	str	r3, [r4, r2]
 8016636:	e7e2      	b.n	80165fe <_malloc_r+0x82>
 8016638:	605a      	str	r2, [r3, #4]
 801663a:	e7ec      	b.n	8016616 <_malloc_r+0x9a>
 801663c:	6862      	ldr	r2, [r4, #4]
 801663e:	42a3      	cmp	r3, r4
 8016640:	d101      	bne.n	8016646 <_malloc_r+0xca>
 8016642:	602a      	str	r2, [r5, #0]
 8016644:	e7ea      	b.n	801661c <_malloc_r+0xa0>
 8016646:	605a      	str	r2, [r3, #4]
 8016648:	e7e8      	b.n	801661c <_malloc_r+0xa0>
 801664a:	0023      	movs	r3, r4
 801664c:	6864      	ldr	r4, [r4, #4]
 801664e:	e7a7      	b.n	80165a0 <_malloc_r+0x24>
 8016650:	002c      	movs	r4, r5
 8016652:	686d      	ldr	r5, [r5, #4]
 8016654:	e7af      	b.n	80165b6 <_malloc_r+0x3a>
 8016656:	230c      	movs	r3, #12
 8016658:	0030      	movs	r0, r6
 801665a:	6033      	str	r3, [r6, #0]
 801665c:	f001 f986 	bl	801796c <__malloc_unlock>
 8016660:	e7cd      	b.n	80165fe <_malloc_r+0x82>
 8016662:	46c0      	nop			; (mov r8, r8)
 8016664:	20001da4 	.word	0x20001da4

08016668 <__sfputc_r>:
 8016668:	6893      	ldr	r3, [r2, #8]
 801666a:	b510      	push	{r4, lr}
 801666c:	3b01      	subs	r3, #1
 801666e:	6093      	str	r3, [r2, #8]
 8016670:	2b00      	cmp	r3, #0
 8016672:	da04      	bge.n	801667e <__sfputc_r+0x16>
 8016674:	6994      	ldr	r4, [r2, #24]
 8016676:	42a3      	cmp	r3, r4
 8016678:	db07      	blt.n	801668a <__sfputc_r+0x22>
 801667a:	290a      	cmp	r1, #10
 801667c:	d005      	beq.n	801668a <__sfputc_r+0x22>
 801667e:	6813      	ldr	r3, [r2, #0]
 8016680:	1c58      	adds	r0, r3, #1
 8016682:	6010      	str	r0, [r2, #0]
 8016684:	7019      	strb	r1, [r3, #0]
 8016686:	0008      	movs	r0, r1
 8016688:	bd10      	pop	{r4, pc}
 801668a:	f000 fde9 	bl	8017260 <__swbuf_r>
 801668e:	0001      	movs	r1, r0
 8016690:	e7f9      	b.n	8016686 <__sfputc_r+0x1e>

08016692 <__sfputs_r>:
 8016692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016694:	0006      	movs	r6, r0
 8016696:	000f      	movs	r7, r1
 8016698:	0014      	movs	r4, r2
 801669a:	18d5      	adds	r5, r2, r3
 801669c:	42ac      	cmp	r4, r5
 801669e:	d101      	bne.n	80166a4 <__sfputs_r+0x12>
 80166a0:	2000      	movs	r0, #0
 80166a2:	e007      	b.n	80166b4 <__sfputs_r+0x22>
 80166a4:	7821      	ldrb	r1, [r4, #0]
 80166a6:	003a      	movs	r2, r7
 80166a8:	0030      	movs	r0, r6
 80166aa:	f7ff ffdd 	bl	8016668 <__sfputc_r>
 80166ae:	3401      	adds	r4, #1
 80166b0:	1c43      	adds	r3, r0, #1
 80166b2:	d1f3      	bne.n	801669c <__sfputs_r+0xa>
 80166b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166b8 <_vfiprintf_r>:
 80166b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ba:	b0a1      	sub	sp, #132	; 0x84
 80166bc:	0006      	movs	r6, r0
 80166be:	000c      	movs	r4, r1
 80166c0:	001f      	movs	r7, r3
 80166c2:	9203      	str	r2, [sp, #12]
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d004      	beq.n	80166d2 <_vfiprintf_r+0x1a>
 80166c8:	6983      	ldr	r3, [r0, #24]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d101      	bne.n	80166d2 <_vfiprintf_r+0x1a>
 80166ce:	f000 ffe1 	bl	8017694 <__sinit>
 80166d2:	4b8e      	ldr	r3, [pc, #568]	; (801690c <_vfiprintf_r+0x254>)
 80166d4:	429c      	cmp	r4, r3
 80166d6:	d11c      	bne.n	8016712 <_vfiprintf_r+0x5a>
 80166d8:	6874      	ldr	r4, [r6, #4]
 80166da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80166dc:	07db      	lsls	r3, r3, #31
 80166de:	d405      	bmi.n	80166ec <_vfiprintf_r+0x34>
 80166e0:	89a3      	ldrh	r3, [r4, #12]
 80166e2:	059b      	lsls	r3, r3, #22
 80166e4:	d402      	bmi.n	80166ec <_vfiprintf_r+0x34>
 80166e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166e8:	f001 f8bc 	bl	8017864 <__retarget_lock_acquire_recursive>
 80166ec:	89a3      	ldrh	r3, [r4, #12]
 80166ee:	071b      	lsls	r3, r3, #28
 80166f0:	d502      	bpl.n	80166f8 <_vfiprintf_r+0x40>
 80166f2:	6923      	ldr	r3, [r4, #16]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d11d      	bne.n	8016734 <_vfiprintf_r+0x7c>
 80166f8:	0021      	movs	r1, r4
 80166fa:	0030      	movs	r0, r6
 80166fc:	f000 fe06 	bl	801730c <__swsetup_r>
 8016700:	2800      	cmp	r0, #0
 8016702:	d017      	beq.n	8016734 <_vfiprintf_r+0x7c>
 8016704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016706:	07db      	lsls	r3, r3, #31
 8016708:	d50d      	bpl.n	8016726 <_vfiprintf_r+0x6e>
 801670a:	2001      	movs	r0, #1
 801670c:	4240      	negs	r0, r0
 801670e:	b021      	add	sp, #132	; 0x84
 8016710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016712:	4b7f      	ldr	r3, [pc, #508]	; (8016910 <_vfiprintf_r+0x258>)
 8016714:	429c      	cmp	r4, r3
 8016716:	d101      	bne.n	801671c <_vfiprintf_r+0x64>
 8016718:	68b4      	ldr	r4, [r6, #8]
 801671a:	e7de      	b.n	80166da <_vfiprintf_r+0x22>
 801671c:	4b7d      	ldr	r3, [pc, #500]	; (8016914 <_vfiprintf_r+0x25c>)
 801671e:	429c      	cmp	r4, r3
 8016720:	d1db      	bne.n	80166da <_vfiprintf_r+0x22>
 8016722:	68f4      	ldr	r4, [r6, #12]
 8016724:	e7d9      	b.n	80166da <_vfiprintf_r+0x22>
 8016726:	89a3      	ldrh	r3, [r4, #12]
 8016728:	059b      	lsls	r3, r3, #22
 801672a:	d4ee      	bmi.n	801670a <_vfiprintf_r+0x52>
 801672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801672e:	f001 f89b 	bl	8017868 <__retarget_lock_release_recursive>
 8016732:	e7ea      	b.n	801670a <_vfiprintf_r+0x52>
 8016734:	2300      	movs	r3, #0
 8016736:	ad08      	add	r5, sp, #32
 8016738:	616b      	str	r3, [r5, #20]
 801673a:	3320      	adds	r3, #32
 801673c:	766b      	strb	r3, [r5, #25]
 801673e:	3310      	adds	r3, #16
 8016740:	76ab      	strb	r3, [r5, #26]
 8016742:	9707      	str	r7, [sp, #28]
 8016744:	9f03      	ldr	r7, [sp, #12]
 8016746:	783b      	ldrb	r3, [r7, #0]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d001      	beq.n	8016750 <_vfiprintf_r+0x98>
 801674c:	2b25      	cmp	r3, #37	; 0x25
 801674e:	d14e      	bne.n	80167ee <_vfiprintf_r+0x136>
 8016750:	9b03      	ldr	r3, [sp, #12]
 8016752:	1afb      	subs	r3, r7, r3
 8016754:	9305      	str	r3, [sp, #20]
 8016756:	9b03      	ldr	r3, [sp, #12]
 8016758:	429f      	cmp	r7, r3
 801675a:	d00d      	beq.n	8016778 <_vfiprintf_r+0xc0>
 801675c:	9b05      	ldr	r3, [sp, #20]
 801675e:	0021      	movs	r1, r4
 8016760:	0030      	movs	r0, r6
 8016762:	9a03      	ldr	r2, [sp, #12]
 8016764:	f7ff ff95 	bl	8016692 <__sfputs_r>
 8016768:	1c43      	adds	r3, r0, #1
 801676a:	d100      	bne.n	801676e <_vfiprintf_r+0xb6>
 801676c:	e0b5      	b.n	80168da <_vfiprintf_r+0x222>
 801676e:	696a      	ldr	r2, [r5, #20]
 8016770:	9b05      	ldr	r3, [sp, #20]
 8016772:	4694      	mov	ip, r2
 8016774:	4463      	add	r3, ip
 8016776:	616b      	str	r3, [r5, #20]
 8016778:	783b      	ldrb	r3, [r7, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d100      	bne.n	8016780 <_vfiprintf_r+0xc8>
 801677e:	e0ac      	b.n	80168da <_vfiprintf_r+0x222>
 8016780:	2201      	movs	r2, #1
 8016782:	1c7b      	adds	r3, r7, #1
 8016784:	9303      	str	r3, [sp, #12]
 8016786:	2300      	movs	r3, #0
 8016788:	4252      	negs	r2, r2
 801678a:	606a      	str	r2, [r5, #4]
 801678c:	a904      	add	r1, sp, #16
 801678e:	3254      	adds	r2, #84	; 0x54
 8016790:	1852      	adds	r2, r2, r1
 8016792:	602b      	str	r3, [r5, #0]
 8016794:	60eb      	str	r3, [r5, #12]
 8016796:	60ab      	str	r3, [r5, #8]
 8016798:	7013      	strb	r3, [r2, #0]
 801679a:	65ab      	str	r3, [r5, #88]	; 0x58
 801679c:	9b03      	ldr	r3, [sp, #12]
 801679e:	2205      	movs	r2, #5
 80167a0:	7819      	ldrb	r1, [r3, #0]
 80167a2:	485d      	ldr	r0, [pc, #372]	; (8016918 <_vfiprintf_r+0x260>)
 80167a4:	f001 f8ce 	bl	8017944 <memchr>
 80167a8:	9b03      	ldr	r3, [sp, #12]
 80167aa:	1c5f      	adds	r7, r3, #1
 80167ac:	2800      	cmp	r0, #0
 80167ae:	d120      	bne.n	80167f2 <_vfiprintf_r+0x13a>
 80167b0:	682a      	ldr	r2, [r5, #0]
 80167b2:	06d3      	lsls	r3, r2, #27
 80167b4:	d504      	bpl.n	80167c0 <_vfiprintf_r+0x108>
 80167b6:	2353      	movs	r3, #83	; 0x53
 80167b8:	a904      	add	r1, sp, #16
 80167ba:	185b      	adds	r3, r3, r1
 80167bc:	2120      	movs	r1, #32
 80167be:	7019      	strb	r1, [r3, #0]
 80167c0:	0713      	lsls	r3, r2, #28
 80167c2:	d504      	bpl.n	80167ce <_vfiprintf_r+0x116>
 80167c4:	2353      	movs	r3, #83	; 0x53
 80167c6:	a904      	add	r1, sp, #16
 80167c8:	185b      	adds	r3, r3, r1
 80167ca:	212b      	movs	r1, #43	; 0x2b
 80167cc:	7019      	strb	r1, [r3, #0]
 80167ce:	9b03      	ldr	r3, [sp, #12]
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	2b2a      	cmp	r3, #42	; 0x2a
 80167d4:	d016      	beq.n	8016804 <_vfiprintf_r+0x14c>
 80167d6:	2100      	movs	r1, #0
 80167d8:	68eb      	ldr	r3, [r5, #12]
 80167da:	9f03      	ldr	r7, [sp, #12]
 80167dc:	783a      	ldrb	r2, [r7, #0]
 80167de:	1c78      	adds	r0, r7, #1
 80167e0:	3a30      	subs	r2, #48	; 0x30
 80167e2:	4684      	mov	ip, r0
 80167e4:	2a09      	cmp	r2, #9
 80167e6:	d94f      	bls.n	8016888 <_vfiprintf_r+0x1d0>
 80167e8:	2900      	cmp	r1, #0
 80167ea:	d111      	bne.n	8016810 <_vfiprintf_r+0x158>
 80167ec:	e017      	b.n	801681e <_vfiprintf_r+0x166>
 80167ee:	3701      	adds	r7, #1
 80167f0:	e7a9      	b.n	8016746 <_vfiprintf_r+0x8e>
 80167f2:	4b49      	ldr	r3, [pc, #292]	; (8016918 <_vfiprintf_r+0x260>)
 80167f4:	682a      	ldr	r2, [r5, #0]
 80167f6:	1ac0      	subs	r0, r0, r3
 80167f8:	2301      	movs	r3, #1
 80167fa:	4083      	lsls	r3, r0
 80167fc:	4313      	orrs	r3, r2
 80167fe:	602b      	str	r3, [r5, #0]
 8016800:	9703      	str	r7, [sp, #12]
 8016802:	e7cb      	b.n	801679c <_vfiprintf_r+0xe4>
 8016804:	9b07      	ldr	r3, [sp, #28]
 8016806:	1d19      	adds	r1, r3, #4
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	9107      	str	r1, [sp, #28]
 801680c:	2b00      	cmp	r3, #0
 801680e:	db01      	blt.n	8016814 <_vfiprintf_r+0x15c>
 8016810:	930b      	str	r3, [sp, #44]	; 0x2c
 8016812:	e004      	b.n	801681e <_vfiprintf_r+0x166>
 8016814:	425b      	negs	r3, r3
 8016816:	60eb      	str	r3, [r5, #12]
 8016818:	2302      	movs	r3, #2
 801681a:	4313      	orrs	r3, r2
 801681c:	602b      	str	r3, [r5, #0]
 801681e:	783b      	ldrb	r3, [r7, #0]
 8016820:	2b2e      	cmp	r3, #46	; 0x2e
 8016822:	d10a      	bne.n	801683a <_vfiprintf_r+0x182>
 8016824:	787b      	ldrb	r3, [r7, #1]
 8016826:	2b2a      	cmp	r3, #42	; 0x2a
 8016828:	d137      	bne.n	801689a <_vfiprintf_r+0x1e2>
 801682a:	9b07      	ldr	r3, [sp, #28]
 801682c:	3702      	adds	r7, #2
 801682e:	1d1a      	adds	r2, r3, #4
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	9207      	str	r2, [sp, #28]
 8016834:	2b00      	cmp	r3, #0
 8016836:	db2d      	blt.n	8016894 <_vfiprintf_r+0x1dc>
 8016838:	9309      	str	r3, [sp, #36]	; 0x24
 801683a:	2203      	movs	r2, #3
 801683c:	7839      	ldrb	r1, [r7, #0]
 801683e:	4837      	ldr	r0, [pc, #220]	; (801691c <_vfiprintf_r+0x264>)
 8016840:	f001 f880 	bl	8017944 <memchr>
 8016844:	2800      	cmp	r0, #0
 8016846:	d007      	beq.n	8016858 <_vfiprintf_r+0x1a0>
 8016848:	4b34      	ldr	r3, [pc, #208]	; (801691c <_vfiprintf_r+0x264>)
 801684a:	682a      	ldr	r2, [r5, #0]
 801684c:	1ac0      	subs	r0, r0, r3
 801684e:	2340      	movs	r3, #64	; 0x40
 8016850:	4083      	lsls	r3, r0
 8016852:	4313      	orrs	r3, r2
 8016854:	3701      	adds	r7, #1
 8016856:	602b      	str	r3, [r5, #0]
 8016858:	7839      	ldrb	r1, [r7, #0]
 801685a:	1c7b      	adds	r3, r7, #1
 801685c:	2206      	movs	r2, #6
 801685e:	4830      	ldr	r0, [pc, #192]	; (8016920 <_vfiprintf_r+0x268>)
 8016860:	9303      	str	r3, [sp, #12]
 8016862:	7629      	strb	r1, [r5, #24]
 8016864:	f001 f86e 	bl	8017944 <memchr>
 8016868:	2800      	cmp	r0, #0
 801686a:	d045      	beq.n	80168f8 <_vfiprintf_r+0x240>
 801686c:	4b2d      	ldr	r3, [pc, #180]	; (8016924 <_vfiprintf_r+0x26c>)
 801686e:	2b00      	cmp	r3, #0
 8016870:	d127      	bne.n	80168c2 <_vfiprintf_r+0x20a>
 8016872:	2207      	movs	r2, #7
 8016874:	9b07      	ldr	r3, [sp, #28]
 8016876:	3307      	adds	r3, #7
 8016878:	4393      	bics	r3, r2
 801687a:	3308      	adds	r3, #8
 801687c:	9307      	str	r3, [sp, #28]
 801687e:	696b      	ldr	r3, [r5, #20]
 8016880:	9a04      	ldr	r2, [sp, #16]
 8016882:	189b      	adds	r3, r3, r2
 8016884:	616b      	str	r3, [r5, #20]
 8016886:	e75d      	b.n	8016744 <_vfiprintf_r+0x8c>
 8016888:	210a      	movs	r1, #10
 801688a:	434b      	muls	r3, r1
 801688c:	4667      	mov	r7, ip
 801688e:	189b      	adds	r3, r3, r2
 8016890:	3909      	subs	r1, #9
 8016892:	e7a3      	b.n	80167dc <_vfiprintf_r+0x124>
 8016894:	2301      	movs	r3, #1
 8016896:	425b      	negs	r3, r3
 8016898:	e7ce      	b.n	8016838 <_vfiprintf_r+0x180>
 801689a:	2300      	movs	r3, #0
 801689c:	001a      	movs	r2, r3
 801689e:	3701      	adds	r7, #1
 80168a0:	606b      	str	r3, [r5, #4]
 80168a2:	7839      	ldrb	r1, [r7, #0]
 80168a4:	1c78      	adds	r0, r7, #1
 80168a6:	3930      	subs	r1, #48	; 0x30
 80168a8:	4684      	mov	ip, r0
 80168aa:	2909      	cmp	r1, #9
 80168ac:	d903      	bls.n	80168b6 <_vfiprintf_r+0x1fe>
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d0c3      	beq.n	801683a <_vfiprintf_r+0x182>
 80168b2:	9209      	str	r2, [sp, #36]	; 0x24
 80168b4:	e7c1      	b.n	801683a <_vfiprintf_r+0x182>
 80168b6:	230a      	movs	r3, #10
 80168b8:	435a      	muls	r2, r3
 80168ba:	4667      	mov	r7, ip
 80168bc:	1852      	adds	r2, r2, r1
 80168be:	3b09      	subs	r3, #9
 80168c0:	e7ef      	b.n	80168a2 <_vfiprintf_r+0x1ea>
 80168c2:	ab07      	add	r3, sp, #28
 80168c4:	9300      	str	r3, [sp, #0]
 80168c6:	0022      	movs	r2, r4
 80168c8:	0029      	movs	r1, r5
 80168ca:	0030      	movs	r0, r6
 80168cc:	4b16      	ldr	r3, [pc, #88]	; (8016928 <_vfiprintf_r+0x270>)
 80168ce:	e000      	b.n	80168d2 <_vfiprintf_r+0x21a>
 80168d0:	bf00      	nop
 80168d2:	9004      	str	r0, [sp, #16]
 80168d4:	9b04      	ldr	r3, [sp, #16]
 80168d6:	3301      	adds	r3, #1
 80168d8:	d1d1      	bne.n	801687e <_vfiprintf_r+0x1c6>
 80168da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168dc:	07db      	lsls	r3, r3, #31
 80168de:	d405      	bmi.n	80168ec <_vfiprintf_r+0x234>
 80168e0:	89a3      	ldrh	r3, [r4, #12]
 80168e2:	059b      	lsls	r3, r3, #22
 80168e4:	d402      	bmi.n	80168ec <_vfiprintf_r+0x234>
 80168e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168e8:	f000 ffbe 	bl	8017868 <__retarget_lock_release_recursive>
 80168ec:	89a3      	ldrh	r3, [r4, #12]
 80168ee:	065b      	lsls	r3, r3, #25
 80168f0:	d500      	bpl.n	80168f4 <_vfiprintf_r+0x23c>
 80168f2:	e70a      	b.n	801670a <_vfiprintf_r+0x52>
 80168f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80168f6:	e70a      	b.n	801670e <_vfiprintf_r+0x56>
 80168f8:	ab07      	add	r3, sp, #28
 80168fa:	9300      	str	r3, [sp, #0]
 80168fc:	0022      	movs	r2, r4
 80168fe:	0029      	movs	r1, r5
 8016900:	0030      	movs	r0, r6
 8016902:	4b09      	ldr	r3, [pc, #36]	; (8016928 <_vfiprintf_r+0x270>)
 8016904:	f000 f882 	bl	8016a0c <_printf_i>
 8016908:	e7e3      	b.n	80168d2 <_vfiprintf_r+0x21a>
 801690a:	46c0      	nop			; (mov r8, r8)
 801690c:	0801ac80 	.word	0x0801ac80
 8016910:	0801aca0 	.word	0x0801aca0
 8016914:	0801ac60 	.word	0x0801ac60
 8016918:	0801abf0 	.word	0x0801abf0
 801691c:	0801abf6 	.word	0x0801abf6
 8016920:	0801abfa 	.word	0x0801abfa
 8016924:	00000000 	.word	0x00000000
 8016928:	08016693 	.word	0x08016693

0801692c <_printf_common>:
 801692c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801692e:	0015      	movs	r5, r2
 8016930:	9301      	str	r3, [sp, #4]
 8016932:	688a      	ldr	r2, [r1, #8]
 8016934:	690b      	ldr	r3, [r1, #16]
 8016936:	000c      	movs	r4, r1
 8016938:	9000      	str	r0, [sp, #0]
 801693a:	4293      	cmp	r3, r2
 801693c:	da00      	bge.n	8016940 <_printf_common+0x14>
 801693e:	0013      	movs	r3, r2
 8016940:	0022      	movs	r2, r4
 8016942:	602b      	str	r3, [r5, #0]
 8016944:	3243      	adds	r2, #67	; 0x43
 8016946:	7812      	ldrb	r2, [r2, #0]
 8016948:	2a00      	cmp	r2, #0
 801694a:	d001      	beq.n	8016950 <_printf_common+0x24>
 801694c:	3301      	adds	r3, #1
 801694e:	602b      	str	r3, [r5, #0]
 8016950:	6823      	ldr	r3, [r4, #0]
 8016952:	069b      	lsls	r3, r3, #26
 8016954:	d502      	bpl.n	801695c <_printf_common+0x30>
 8016956:	682b      	ldr	r3, [r5, #0]
 8016958:	3302      	adds	r3, #2
 801695a:	602b      	str	r3, [r5, #0]
 801695c:	6822      	ldr	r2, [r4, #0]
 801695e:	2306      	movs	r3, #6
 8016960:	0017      	movs	r7, r2
 8016962:	401f      	ands	r7, r3
 8016964:	421a      	tst	r2, r3
 8016966:	d027      	beq.n	80169b8 <_printf_common+0x8c>
 8016968:	0023      	movs	r3, r4
 801696a:	3343      	adds	r3, #67	; 0x43
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	1e5a      	subs	r2, r3, #1
 8016970:	4193      	sbcs	r3, r2
 8016972:	6822      	ldr	r2, [r4, #0]
 8016974:	0692      	lsls	r2, r2, #26
 8016976:	d430      	bmi.n	80169da <_printf_common+0xae>
 8016978:	0022      	movs	r2, r4
 801697a:	9901      	ldr	r1, [sp, #4]
 801697c:	9800      	ldr	r0, [sp, #0]
 801697e:	9e08      	ldr	r6, [sp, #32]
 8016980:	3243      	adds	r2, #67	; 0x43
 8016982:	47b0      	blx	r6
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d025      	beq.n	80169d4 <_printf_common+0xa8>
 8016988:	2306      	movs	r3, #6
 801698a:	6820      	ldr	r0, [r4, #0]
 801698c:	682a      	ldr	r2, [r5, #0]
 801698e:	68e1      	ldr	r1, [r4, #12]
 8016990:	2500      	movs	r5, #0
 8016992:	4003      	ands	r3, r0
 8016994:	2b04      	cmp	r3, #4
 8016996:	d103      	bne.n	80169a0 <_printf_common+0x74>
 8016998:	1a8d      	subs	r5, r1, r2
 801699a:	43eb      	mvns	r3, r5
 801699c:	17db      	asrs	r3, r3, #31
 801699e:	401d      	ands	r5, r3
 80169a0:	68a3      	ldr	r3, [r4, #8]
 80169a2:	6922      	ldr	r2, [r4, #16]
 80169a4:	4293      	cmp	r3, r2
 80169a6:	dd01      	ble.n	80169ac <_printf_common+0x80>
 80169a8:	1a9b      	subs	r3, r3, r2
 80169aa:	18ed      	adds	r5, r5, r3
 80169ac:	2700      	movs	r7, #0
 80169ae:	42bd      	cmp	r5, r7
 80169b0:	d120      	bne.n	80169f4 <_printf_common+0xc8>
 80169b2:	2000      	movs	r0, #0
 80169b4:	e010      	b.n	80169d8 <_printf_common+0xac>
 80169b6:	3701      	adds	r7, #1
 80169b8:	68e3      	ldr	r3, [r4, #12]
 80169ba:	682a      	ldr	r2, [r5, #0]
 80169bc:	1a9b      	subs	r3, r3, r2
 80169be:	42bb      	cmp	r3, r7
 80169c0:	ddd2      	ble.n	8016968 <_printf_common+0x3c>
 80169c2:	0022      	movs	r2, r4
 80169c4:	2301      	movs	r3, #1
 80169c6:	9901      	ldr	r1, [sp, #4]
 80169c8:	9800      	ldr	r0, [sp, #0]
 80169ca:	9e08      	ldr	r6, [sp, #32]
 80169cc:	3219      	adds	r2, #25
 80169ce:	47b0      	blx	r6
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d1f0      	bne.n	80169b6 <_printf_common+0x8a>
 80169d4:	2001      	movs	r0, #1
 80169d6:	4240      	negs	r0, r0
 80169d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169da:	2030      	movs	r0, #48	; 0x30
 80169dc:	18e1      	adds	r1, r4, r3
 80169de:	3143      	adds	r1, #67	; 0x43
 80169e0:	7008      	strb	r0, [r1, #0]
 80169e2:	0021      	movs	r1, r4
 80169e4:	1c5a      	adds	r2, r3, #1
 80169e6:	3145      	adds	r1, #69	; 0x45
 80169e8:	7809      	ldrb	r1, [r1, #0]
 80169ea:	18a2      	adds	r2, r4, r2
 80169ec:	3243      	adds	r2, #67	; 0x43
 80169ee:	3302      	adds	r3, #2
 80169f0:	7011      	strb	r1, [r2, #0]
 80169f2:	e7c1      	b.n	8016978 <_printf_common+0x4c>
 80169f4:	0022      	movs	r2, r4
 80169f6:	2301      	movs	r3, #1
 80169f8:	9901      	ldr	r1, [sp, #4]
 80169fa:	9800      	ldr	r0, [sp, #0]
 80169fc:	9e08      	ldr	r6, [sp, #32]
 80169fe:	321a      	adds	r2, #26
 8016a00:	47b0      	blx	r6
 8016a02:	1c43      	adds	r3, r0, #1
 8016a04:	d0e6      	beq.n	80169d4 <_printf_common+0xa8>
 8016a06:	3701      	adds	r7, #1
 8016a08:	e7d1      	b.n	80169ae <_printf_common+0x82>
	...

08016a0c <_printf_i>:
 8016a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a0e:	b08b      	sub	sp, #44	; 0x2c
 8016a10:	9206      	str	r2, [sp, #24]
 8016a12:	000a      	movs	r2, r1
 8016a14:	3243      	adds	r2, #67	; 0x43
 8016a16:	9307      	str	r3, [sp, #28]
 8016a18:	9005      	str	r0, [sp, #20]
 8016a1a:	9204      	str	r2, [sp, #16]
 8016a1c:	7e0a      	ldrb	r2, [r1, #24]
 8016a1e:	000c      	movs	r4, r1
 8016a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a22:	2a78      	cmp	r2, #120	; 0x78
 8016a24:	d807      	bhi.n	8016a36 <_printf_i+0x2a>
 8016a26:	2a62      	cmp	r2, #98	; 0x62
 8016a28:	d809      	bhi.n	8016a3e <_printf_i+0x32>
 8016a2a:	2a00      	cmp	r2, #0
 8016a2c:	d100      	bne.n	8016a30 <_printf_i+0x24>
 8016a2e:	e0c1      	b.n	8016bb4 <_printf_i+0x1a8>
 8016a30:	2a58      	cmp	r2, #88	; 0x58
 8016a32:	d100      	bne.n	8016a36 <_printf_i+0x2a>
 8016a34:	e08c      	b.n	8016b50 <_printf_i+0x144>
 8016a36:	0026      	movs	r6, r4
 8016a38:	3642      	adds	r6, #66	; 0x42
 8016a3a:	7032      	strb	r2, [r6, #0]
 8016a3c:	e022      	b.n	8016a84 <_printf_i+0x78>
 8016a3e:	0010      	movs	r0, r2
 8016a40:	3863      	subs	r0, #99	; 0x63
 8016a42:	2815      	cmp	r0, #21
 8016a44:	d8f7      	bhi.n	8016a36 <_printf_i+0x2a>
 8016a46:	f7e9 fb7b 	bl	8000140 <__gnu_thumb1_case_shi>
 8016a4a:	0016      	.short	0x0016
 8016a4c:	fff6001f 	.word	0xfff6001f
 8016a50:	fff6fff6 	.word	0xfff6fff6
 8016a54:	001ffff6 	.word	0x001ffff6
 8016a58:	fff6fff6 	.word	0xfff6fff6
 8016a5c:	fff6fff6 	.word	0xfff6fff6
 8016a60:	003600a8 	.word	0x003600a8
 8016a64:	fff6009a 	.word	0xfff6009a
 8016a68:	00b9fff6 	.word	0x00b9fff6
 8016a6c:	0036fff6 	.word	0x0036fff6
 8016a70:	fff6fff6 	.word	0xfff6fff6
 8016a74:	009e      	.short	0x009e
 8016a76:	0026      	movs	r6, r4
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	3642      	adds	r6, #66	; 0x42
 8016a7c:	1d11      	adds	r1, r2, #4
 8016a7e:	6019      	str	r1, [r3, #0]
 8016a80:	6813      	ldr	r3, [r2, #0]
 8016a82:	7033      	strb	r3, [r6, #0]
 8016a84:	2301      	movs	r3, #1
 8016a86:	e0a7      	b.n	8016bd8 <_printf_i+0x1cc>
 8016a88:	6808      	ldr	r0, [r1, #0]
 8016a8a:	6819      	ldr	r1, [r3, #0]
 8016a8c:	1d0a      	adds	r2, r1, #4
 8016a8e:	0605      	lsls	r5, r0, #24
 8016a90:	d50b      	bpl.n	8016aaa <_printf_i+0x9e>
 8016a92:	680d      	ldr	r5, [r1, #0]
 8016a94:	601a      	str	r2, [r3, #0]
 8016a96:	2d00      	cmp	r5, #0
 8016a98:	da03      	bge.n	8016aa2 <_printf_i+0x96>
 8016a9a:	232d      	movs	r3, #45	; 0x2d
 8016a9c:	9a04      	ldr	r2, [sp, #16]
 8016a9e:	426d      	negs	r5, r5
 8016aa0:	7013      	strb	r3, [r2, #0]
 8016aa2:	4b61      	ldr	r3, [pc, #388]	; (8016c28 <_printf_i+0x21c>)
 8016aa4:	270a      	movs	r7, #10
 8016aa6:	9303      	str	r3, [sp, #12]
 8016aa8:	e01b      	b.n	8016ae2 <_printf_i+0xd6>
 8016aaa:	680d      	ldr	r5, [r1, #0]
 8016aac:	601a      	str	r2, [r3, #0]
 8016aae:	0641      	lsls	r1, r0, #25
 8016ab0:	d5f1      	bpl.n	8016a96 <_printf_i+0x8a>
 8016ab2:	b22d      	sxth	r5, r5
 8016ab4:	e7ef      	b.n	8016a96 <_printf_i+0x8a>
 8016ab6:	680d      	ldr	r5, [r1, #0]
 8016ab8:	6819      	ldr	r1, [r3, #0]
 8016aba:	1d08      	adds	r0, r1, #4
 8016abc:	6018      	str	r0, [r3, #0]
 8016abe:	062e      	lsls	r6, r5, #24
 8016ac0:	d501      	bpl.n	8016ac6 <_printf_i+0xba>
 8016ac2:	680d      	ldr	r5, [r1, #0]
 8016ac4:	e003      	b.n	8016ace <_printf_i+0xc2>
 8016ac6:	066d      	lsls	r5, r5, #25
 8016ac8:	d5fb      	bpl.n	8016ac2 <_printf_i+0xb6>
 8016aca:	680d      	ldr	r5, [r1, #0]
 8016acc:	b2ad      	uxth	r5, r5
 8016ace:	4b56      	ldr	r3, [pc, #344]	; (8016c28 <_printf_i+0x21c>)
 8016ad0:	2708      	movs	r7, #8
 8016ad2:	9303      	str	r3, [sp, #12]
 8016ad4:	2a6f      	cmp	r2, #111	; 0x6f
 8016ad6:	d000      	beq.n	8016ada <_printf_i+0xce>
 8016ad8:	3702      	adds	r7, #2
 8016ada:	0023      	movs	r3, r4
 8016adc:	2200      	movs	r2, #0
 8016ade:	3343      	adds	r3, #67	; 0x43
 8016ae0:	701a      	strb	r2, [r3, #0]
 8016ae2:	6863      	ldr	r3, [r4, #4]
 8016ae4:	60a3      	str	r3, [r4, #8]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	db03      	blt.n	8016af2 <_printf_i+0xe6>
 8016aea:	2204      	movs	r2, #4
 8016aec:	6821      	ldr	r1, [r4, #0]
 8016aee:	4391      	bics	r1, r2
 8016af0:	6021      	str	r1, [r4, #0]
 8016af2:	2d00      	cmp	r5, #0
 8016af4:	d102      	bne.n	8016afc <_printf_i+0xf0>
 8016af6:	9e04      	ldr	r6, [sp, #16]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d00c      	beq.n	8016b16 <_printf_i+0x10a>
 8016afc:	9e04      	ldr	r6, [sp, #16]
 8016afe:	0028      	movs	r0, r5
 8016b00:	0039      	movs	r1, r7
 8016b02:	f7e9 fbb7 	bl	8000274 <__aeabi_uidivmod>
 8016b06:	9b03      	ldr	r3, [sp, #12]
 8016b08:	3e01      	subs	r6, #1
 8016b0a:	5c5b      	ldrb	r3, [r3, r1]
 8016b0c:	7033      	strb	r3, [r6, #0]
 8016b0e:	002b      	movs	r3, r5
 8016b10:	0005      	movs	r5, r0
 8016b12:	429f      	cmp	r7, r3
 8016b14:	d9f3      	bls.n	8016afe <_printf_i+0xf2>
 8016b16:	2f08      	cmp	r7, #8
 8016b18:	d109      	bne.n	8016b2e <_printf_i+0x122>
 8016b1a:	6823      	ldr	r3, [r4, #0]
 8016b1c:	07db      	lsls	r3, r3, #31
 8016b1e:	d506      	bpl.n	8016b2e <_printf_i+0x122>
 8016b20:	6863      	ldr	r3, [r4, #4]
 8016b22:	6922      	ldr	r2, [r4, #16]
 8016b24:	4293      	cmp	r3, r2
 8016b26:	dc02      	bgt.n	8016b2e <_printf_i+0x122>
 8016b28:	2330      	movs	r3, #48	; 0x30
 8016b2a:	3e01      	subs	r6, #1
 8016b2c:	7033      	strb	r3, [r6, #0]
 8016b2e:	9b04      	ldr	r3, [sp, #16]
 8016b30:	1b9b      	subs	r3, r3, r6
 8016b32:	6123      	str	r3, [r4, #16]
 8016b34:	9b07      	ldr	r3, [sp, #28]
 8016b36:	0021      	movs	r1, r4
 8016b38:	9300      	str	r3, [sp, #0]
 8016b3a:	9805      	ldr	r0, [sp, #20]
 8016b3c:	9b06      	ldr	r3, [sp, #24]
 8016b3e:	aa09      	add	r2, sp, #36	; 0x24
 8016b40:	f7ff fef4 	bl	801692c <_printf_common>
 8016b44:	1c43      	adds	r3, r0, #1
 8016b46:	d14c      	bne.n	8016be2 <_printf_i+0x1d6>
 8016b48:	2001      	movs	r0, #1
 8016b4a:	4240      	negs	r0, r0
 8016b4c:	b00b      	add	sp, #44	; 0x2c
 8016b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b50:	3145      	adds	r1, #69	; 0x45
 8016b52:	700a      	strb	r2, [r1, #0]
 8016b54:	4a34      	ldr	r2, [pc, #208]	; (8016c28 <_printf_i+0x21c>)
 8016b56:	9203      	str	r2, [sp, #12]
 8016b58:	681a      	ldr	r2, [r3, #0]
 8016b5a:	6821      	ldr	r1, [r4, #0]
 8016b5c:	ca20      	ldmia	r2!, {r5}
 8016b5e:	601a      	str	r2, [r3, #0]
 8016b60:	0608      	lsls	r0, r1, #24
 8016b62:	d516      	bpl.n	8016b92 <_printf_i+0x186>
 8016b64:	07cb      	lsls	r3, r1, #31
 8016b66:	d502      	bpl.n	8016b6e <_printf_i+0x162>
 8016b68:	2320      	movs	r3, #32
 8016b6a:	4319      	orrs	r1, r3
 8016b6c:	6021      	str	r1, [r4, #0]
 8016b6e:	2710      	movs	r7, #16
 8016b70:	2d00      	cmp	r5, #0
 8016b72:	d1b2      	bne.n	8016ada <_printf_i+0xce>
 8016b74:	2320      	movs	r3, #32
 8016b76:	6822      	ldr	r2, [r4, #0]
 8016b78:	439a      	bics	r2, r3
 8016b7a:	6022      	str	r2, [r4, #0]
 8016b7c:	e7ad      	b.n	8016ada <_printf_i+0xce>
 8016b7e:	2220      	movs	r2, #32
 8016b80:	6809      	ldr	r1, [r1, #0]
 8016b82:	430a      	orrs	r2, r1
 8016b84:	6022      	str	r2, [r4, #0]
 8016b86:	0022      	movs	r2, r4
 8016b88:	2178      	movs	r1, #120	; 0x78
 8016b8a:	3245      	adds	r2, #69	; 0x45
 8016b8c:	7011      	strb	r1, [r2, #0]
 8016b8e:	4a27      	ldr	r2, [pc, #156]	; (8016c2c <_printf_i+0x220>)
 8016b90:	e7e1      	b.n	8016b56 <_printf_i+0x14a>
 8016b92:	0648      	lsls	r0, r1, #25
 8016b94:	d5e6      	bpl.n	8016b64 <_printf_i+0x158>
 8016b96:	b2ad      	uxth	r5, r5
 8016b98:	e7e4      	b.n	8016b64 <_printf_i+0x158>
 8016b9a:	681a      	ldr	r2, [r3, #0]
 8016b9c:	680d      	ldr	r5, [r1, #0]
 8016b9e:	1d10      	adds	r0, r2, #4
 8016ba0:	6949      	ldr	r1, [r1, #20]
 8016ba2:	6018      	str	r0, [r3, #0]
 8016ba4:	6813      	ldr	r3, [r2, #0]
 8016ba6:	062e      	lsls	r6, r5, #24
 8016ba8:	d501      	bpl.n	8016bae <_printf_i+0x1a2>
 8016baa:	6019      	str	r1, [r3, #0]
 8016bac:	e002      	b.n	8016bb4 <_printf_i+0x1a8>
 8016bae:	066d      	lsls	r5, r5, #25
 8016bb0:	d5fb      	bpl.n	8016baa <_printf_i+0x19e>
 8016bb2:	8019      	strh	r1, [r3, #0]
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	9e04      	ldr	r6, [sp, #16]
 8016bb8:	6123      	str	r3, [r4, #16]
 8016bba:	e7bb      	b.n	8016b34 <_printf_i+0x128>
 8016bbc:	681a      	ldr	r2, [r3, #0]
 8016bbe:	1d11      	adds	r1, r2, #4
 8016bc0:	6019      	str	r1, [r3, #0]
 8016bc2:	6816      	ldr	r6, [r2, #0]
 8016bc4:	2100      	movs	r1, #0
 8016bc6:	0030      	movs	r0, r6
 8016bc8:	6862      	ldr	r2, [r4, #4]
 8016bca:	f000 febb 	bl	8017944 <memchr>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	d001      	beq.n	8016bd6 <_printf_i+0x1ca>
 8016bd2:	1b80      	subs	r0, r0, r6
 8016bd4:	6060      	str	r0, [r4, #4]
 8016bd6:	6863      	ldr	r3, [r4, #4]
 8016bd8:	6123      	str	r3, [r4, #16]
 8016bda:	2300      	movs	r3, #0
 8016bdc:	9a04      	ldr	r2, [sp, #16]
 8016bde:	7013      	strb	r3, [r2, #0]
 8016be0:	e7a8      	b.n	8016b34 <_printf_i+0x128>
 8016be2:	6923      	ldr	r3, [r4, #16]
 8016be4:	0032      	movs	r2, r6
 8016be6:	9906      	ldr	r1, [sp, #24]
 8016be8:	9805      	ldr	r0, [sp, #20]
 8016bea:	9d07      	ldr	r5, [sp, #28]
 8016bec:	47a8      	blx	r5
 8016bee:	1c43      	adds	r3, r0, #1
 8016bf0:	d0aa      	beq.n	8016b48 <_printf_i+0x13c>
 8016bf2:	6823      	ldr	r3, [r4, #0]
 8016bf4:	079b      	lsls	r3, r3, #30
 8016bf6:	d415      	bmi.n	8016c24 <_printf_i+0x218>
 8016bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bfa:	68e0      	ldr	r0, [r4, #12]
 8016bfc:	4298      	cmp	r0, r3
 8016bfe:	daa5      	bge.n	8016b4c <_printf_i+0x140>
 8016c00:	0018      	movs	r0, r3
 8016c02:	e7a3      	b.n	8016b4c <_printf_i+0x140>
 8016c04:	0022      	movs	r2, r4
 8016c06:	2301      	movs	r3, #1
 8016c08:	9906      	ldr	r1, [sp, #24]
 8016c0a:	9805      	ldr	r0, [sp, #20]
 8016c0c:	9e07      	ldr	r6, [sp, #28]
 8016c0e:	3219      	adds	r2, #25
 8016c10:	47b0      	blx	r6
 8016c12:	1c43      	adds	r3, r0, #1
 8016c14:	d098      	beq.n	8016b48 <_printf_i+0x13c>
 8016c16:	3501      	adds	r5, #1
 8016c18:	68e3      	ldr	r3, [r4, #12]
 8016c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c1c:	1a9b      	subs	r3, r3, r2
 8016c1e:	42ab      	cmp	r3, r5
 8016c20:	dcf0      	bgt.n	8016c04 <_printf_i+0x1f8>
 8016c22:	e7e9      	b.n	8016bf8 <_printf_i+0x1ec>
 8016c24:	2500      	movs	r5, #0
 8016c26:	e7f7      	b.n	8016c18 <_printf_i+0x20c>
 8016c28:	0801ac01 	.word	0x0801ac01
 8016c2c:	0801ac12 	.word	0x0801ac12

08016c30 <iprintf>:
 8016c30:	b40f      	push	{r0, r1, r2, r3}
 8016c32:	4b0b      	ldr	r3, [pc, #44]	; (8016c60 <iprintf+0x30>)
 8016c34:	b513      	push	{r0, r1, r4, lr}
 8016c36:	681c      	ldr	r4, [r3, #0]
 8016c38:	2c00      	cmp	r4, #0
 8016c3a:	d005      	beq.n	8016c48 <iprintf+0x18>
 8016c3c:	69a3      	ldr	r3, [r4, #24]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <iprintf+0x18>
 8016c42:	0020      	movs	r0, r4
 8016c44:	f000 fd26 	bl	8017694 <__sinit>
 8016c48:	ab05      	add	r3, sp, #20
 8016c4a:	0020      	movs	r0, r4
 8016c4c:	9a04      	ldr	r2, [sp, #16]
 8016c4e:	68a1      	ldr	r1, [r4, #8]
 8016c50:	9301      	str	r3, [sp, #4]
 8016c52:	f7ff fd31 	bl	80166b8 <_vfiprintf_r>
 8016c56:	bc16      	pop	{r1, r2, r4}
 8016c58:	bc08      	pop	{r3}
 8016c5a:	b004      	add	sp, #16
 8016c5c:	4718      	bx	r3
 8016c5e:	46c0      	nop			; (mov r8, r8)
 8016c60:	20000244 	.word	0x20000244

08016c64 <putchar>:
 8016c64:	4b08      	ldr	r3, [pc, #32]	; (8016c88 <putchar+0x24>)
 8016c66:	b570      	push	{r4, r5, r6, lr}
 8016c68:	681c      	ldr	r4, [r3, #0]
 8016c6a:	0005      	movs	r5, r0
 8016c6c:	2c00      	cmp	r4, #0
 8016c6e:	d005      	beq.n	8016c7c <putchar+0x18>
 8016c70:	69a3      	ldr	r3, [r4, #24]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d102      	bne.n	8016c7c <putchar+0x18>
 8016c76:	0020      	movs	r0, r4
 8016c78:	f000 fd0c 	bl	8017694 <__sinit>
 8016c7c:	0029      	movs	r1, r5
 8016c7e:	0020      	movs	r0, r4
 8016c80:	68a2      	ldr	r2, [r4, #8]
 8016c82:	f000 feab 	bl	80179dc <_putc_r>
 8016c86:	bd70      	pop	{r4, r5, r6, pc}
 8016c88:	20000244 	.word	0x20000244

08016c8c <_puts_r>:
 8016c8c:	b570      	push	{r4, r5, r6, lr}
 8016c8e:	0005      	movs	r5, r0
 8016c90:	000e      	movs	r6, r1
 8016c92:	2800      	cmp	r0, #0
 8016c94:	d004      	beq.n	8016ca0 <_puts_r+0x14>
 8016c96:	6983      	ldr	r3, [r0, #24]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d101      	bne.n	8016ca0 <_puts_r+0x14>
 8016c9c:	f000 fcfa 	bl	8017694 <__sinit>
 8016ca0:	69ab      	ldr	r3, [r5, #24]
 8016ca2:	68ac      	ldr	r4, [r5, #8]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d102      	bne.n	8016cae <_puts_r+0x22>
 8016ca8:	0028      	movs	r0, r5
 8016caa:	f000 fcf3 	bl	8017694 <__sinit>
 8016cae:	4b2d      	ldr	r3, [pc, #180]	; (8016d64 <_puts_r+0xd8>)
 8016cb0:	429c      	cmp	r4, r3
 8016cb2:	d122      	bne.n	8016cfa <_puts_r+0x6e>
 8016cb4:	686c      	ldr	r4, [r5, #4]
 8016cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016cb8:	07db      	lsls	r3, r3, #31
 8016cba:	d405      	bmi.n	8016cc8 <_puts_r+0x3c>
 8016cbc:	89a3      	ldrh	r3, [r4, #12]
 8016cbe:	059b      	lsls	r3, r3, #22
 8016cc0:	d402      	bmi.n	8016cc8 <_puts_r+0x3c>
 8016cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cc4:	f000 fdce 	bl	8017864 <__retarget_lock_acquire_recursive>
 8016cc8:	89a3      	ldrh	r3, [r4, #12]
 8016cca:	071b      	lsls	r3, r3, #28
 8016ccc:	d502      	bpl.n	8016cd4 <_puts_r+0x48>
 8016cce:	6923      	ldr	r3, [r4, #16]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d129      	bne.n	8016d28 <_puts_r+0x9c>
 8016cd4:	0021      	movs	r1, r4
 8016cd6:	0028      	movs	r0, r5
 8016cd8:	f000 fb18 	bl	801730c <__swsetup_r>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d023      	beq.n	8016d28 <_puts_r+0x9c>
 8016ce0:	2501      	movs	r5, #1
 8016ce2:	426d      	negs	r5, r5
 8016ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ce6:	07db      	lsls	r3, r3, #31
 8016ce8:	d405      	bmi.n	8016cf6 <_puts_r+0x6a>
 8016cea:	89a3      	ldrh	r3, [r4, #12]
 8016cec:	059b      	lsls	r3, r3, #22
 8016cee:	d402      	bmi.n	8016cf6 <_puts_r+0x6a>
 8016cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cf2:	f000 fdb9 	bl	8017868 <__retarget_lock_release_recursive>
 8016cf6:	0028      	movs	r0, r5
 8016cf8:	bd70      	pop	{r4, r5, r6, pc}
 8016cfa:	4b1b      	ldr	r3, [pc, #108]	; (8016d68 <_puts_r+0xdc>)
 8016cfc:	429c      	cmp	r4, r3
 8016cfe:	d101      	bne.n	8016d04 <_puts_r+0x78>
 8016d00:	68ac      	ldr	r4, [r5, #8]
 8016d02:	e7d8      	b.n	8016cb6 <_puts_r+0x2a>
 8016d04:	4b19      	ldr	r3, [pc, #100]	; (8016d6c <_puts_r+0xe0>)
 8016d06:	429c      	cmp	r4, r3
 8016d08:	d1d5      	bne.n	8016cb6 <_puts_r+0x2a>
 8016d0a:	68ec      	ldr	r4, [r5, #12]
 8016d0c:	e7d3      	b.n	8016cb6 <_puts_r+0x2a>
 8016d0e:	3601      	adds	r6, #1
 8016d10:	60a3      	str	r3, [r4, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	da04      	bge.n	8016d20 <_puts_r+0x94>
 8016d16:	69a2      	ldr	r2, [r4, #24]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	dc16      	bgt.n	8016d4a <_puts_r+0xbe>
 8016d1c:	290a      	cmp	r1, #10
 8016d1e:	d014      	beq.n	8016d4a <_puts_r+0xbe>
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	1c5a      	adds	r2, r3, #1
 8016d24:	6022      	str	r2, [r4, #0]
 8016d26:	7019      	strb	r1, [r3, #0]
 8016d28:	68a3      	ldr	r3, [r4, #8]
 8016d2a:	7831      	ldrb	r1, [r6, #0]
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	2900      	cmp	r1, #0
 8016d30:	d1ed      	bne.n	8016d0e <_puts_r+0x82>
 8016d32:	60a3      	str	r3, [r4, #8]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	da0f      	bge.n	8016d58 <_puts_r+0xcc>
 8016d38:	0028      	movs	r0, r5
 8016d3a:	0022      	movs	r2, r4
 8016d3c:	310a      	adds	r1, #10
 8016d3e:	f000 fa8f 	bl	8017260 <__swbuf_r>
 8016d42:	250a      	movs	r5, #10
 8016d44:	1c43      	adds	r3, r0, #1
 8016d46:	d1cd      	bne.n	8016ce4 <_puts_r+0x58>
 8016d48:	e7ca      	b.n	8016ce0 <_puts_r+0x54>
 8016d4a:	0022      	movs	r2, r4
 8016d4c:	0028      	movs	r0, r5
 8016d4e:	f000 fa87 	bl	8017260 <__swbuf_r>
 8016d52:	1c43      	adds	r3, r0, #1
 8016d54:	d1e8      	bne.n	8016d28 <_puts_r+0x9c>
 8016d56:	e7c3      	b.n	8016ce0 <_puts_r+0x54>
 8016d58:	250a      	movs	r5, #10
 8016d5a:	6823      	ldr	r3, [r4, #0]
 8016d5c:	1c5a      	adds	r2, r3, #1
 8016d5e:	6022      	str	r2, [r4, #0]
 8016d60:	701d      	strb	r5, [r3, #0]
 8016d62:	e7bf      	b.n	8016ce4 <_puts_r+0x58>
 8016d64:	0801ac80 	.word	0x0801ac80
 8016d68:	0801aca0 	.word	0x0801aca0
 8016d6c:	0801ac60 	.word	0x0801ac60

08016d70 <puts>:
 8016d70:	b510      	push	{r4, lr}
 8016d72:	4b03      	ldr	r3, [pc, #12]	; (8016d80 <puts+0x10>)
 8016d74:	0001      	movs	r1, r0
 8016d76:	6818      	ldr	r0, [r3, #0]
 8016d78:	f7ff ff88 	bl	8016c8c <_puts_r>
 8016d7c:	bd10      	pop	{r4, pc}
 8016d7e:	46c0      	nop			; (mov r8, r8)
 8016d80:	20000244 	.word	0x20000244

08016d84 <_sbrk_r>:
 8016d84:	2300      	movs	r3, #0
 8016d86:	b570      	push	{r4, r5, r6, lr}
 8016d88:	4d06      	ldr	r5, [pc, #24]	; (8016da4 <_sbrk_r+0x20>)
 8016d8a:	0004      	movs	r4, r0
 8016d8c:	0008      	movs	r0, r1
 8016d8e:	602b      	str	r3, [r5, #0]
 8016d90:	f001 fcea 	bl	8018768 <_sbrk>
 8016d94:	1c43      	adds	r3, r0, #1
 8016d96:	d103      	bne.n	8016da0 <_sbrk_r+0x1c>
 8016d98:	682b      	ldr	r3, [r5, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d000      	beq.n	8016da0 <_sbrk_r+0x1c>
 8016d9e:	6023      	str	r3, [r4, #0]
 8016da0:	bd70      	pop	{r4, r5, r6, pc}
 8016da2:	46c0      	nop			; (mov r8, r8)
 8016da4:	20001dd8 	.word	0x20001dd8

08016da8 <strcpy>:
 8016da8:	0003      	movs	r3, r0
 8016daa:	780a      	ldrb	r2, [r1, #0]
 8016dac:	3101      	adds	r1, #1
 8016dae:	701a      	strb	r2, [r3, #0]
 8016db0:	3301      	adds	r3, #1
 8016db2:	2a00      	cmp	r2, #0
 8016db4:	d1f9      	bne.n	8016daa <strcpy+0x2>
 8016db6:	4770      	bx	lr

08016db8 <__tzcalc_limits>:
 8016db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dba:	b08d      	sub	sp, #52	; 0x34
 8016dbc:	0004      	movs	r4, r0
 8016dbe:	f000 fd4b 	bl	8017858 <__gettzinfo>
 8016dc2:	4b53      	ldr	r3, [pc, #332]	; (8016f10 <__tzcalc_limits+0x158>)
 8016dc4:	0005      	movs	r5, r0
 8016dc6:	2000      	movs	r0, #0
 8016dc8:	429c      	cmp	r4, r3
 8016dca:	dd6d      	ble.n	8016ea8 <__tzcalc_limits+0xf0>
 8016dcc:	266e      	movs	r6, #110	; 0x6e
 8016dce:	2164      	movs	r1, #100	; 0x64
 8016dd0:	4b50      	ldr	r3, [pc, #320]	; (8016f14 <__tzcalc_limits+0x15c>)
 8016dd2:	36ff      	adds	r6, #255	; 0xff
 8016dd4:	18e0      	adds	r0, r4, r3
 8016dd6:	4346      	muls	r6, r0
 8016dd8:	4b4f      	ldr	r3, [pc, #316]	; (8016f18 <__tzcalc_limits+0x160>)
 8016dda:	606c      	str	r4, [r5, #4]
 8016ddc:	18e3      	adds	r3, r4, r3
 8016dde:	109b      	asrs	r3, r3, #2
 8016de0:	18f6      	adds	r6, r6, r3
 8016de2:	4b4e      	ldr	r3, [pc, #312]	; (8016f1c <__tzcalc_limits+0x164>)
 8016de4:	4249      	negs	r1, r1
 8016de6:	18e0      	adds	r0, r4, r3
 8016de8:	f7e9 fa48 	bl	800027c <__divsi3>
 8016dec:	21c8      	movs	r1, #200	; 0xc8
 8016dee:	4b4c      	ldr	r3, [pc, #304]	; (8016f20 <__tzcalc_limits+0x168>)
 8016df0:	1836      	adds	r6, r6, r0
 8016df2:	0049      	lsls	r1, r1, #1
 8016df4:	18e0      	adds	r0, r4, r3
 8016df6:	f7e9 fa41 	bl	800027c <__divsi3>
 8016dfa:	2164      	movs	r1, #100	; 0x64
 8016dfc:	1833      	adds	r3, r6, r0
 8016dfe:	0020      	movs	r0, r4
 8016e00:	9301      	str	r3, [sp, #4]
 8016e02:	f7e9 fb21 	bl	8000448 <__aeabi_idivmod>
 8016e06:	9102      	str	r1, [sp, #8]
 8016e08:	21c8      	movs	r1, #200	; 0xc8
 8016e0a:	0020      	movs	r0, r4
 8016e0c:	0049      	lsls	r1, r1, #1
 8016e0e:	f7e9 fb1b 	bl	8000448 <__aeabi_idivmod>
 8016e12:	000b      	movs	r3, r1
 8016e14:	2003      	movs	r0, #3
 8016e16:	425a      	negs	r2, r3
 8016e18:	415a      	adcs	r2, r3
 8016e1a:	002b      	movs	r3, r5
 8016e1c:	002e      	movs	r6, r5
 8016e1e:	3358      	adds	r3, #88	; 0x58
 8016e20:	4004      	ands	r4, r0
 8016e22:	9103      	str	r1, [sp, #12]
 8016e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8016e26:	3608      	adds	r6, #8
 8016e28:	930a      	str	r3, [sp, #40]	; 0x28
 8016e2a:	9409      	str	r4, [sp, #36]	; 0x24
 8016e2c:	7833      	ldrb	r3, [r6, #0]
 8016e2e:	68f7      	ldr	r7, [r6, #12]
 8016e30:	2b4a      	cmp	r3, #74	; 0x4a
 8016e32:	d13b      	bne.n	8016eac <__tzcalc_limits+0xf4>
 8016e34:	9b01      	ldr	r3, [sp, #4]
 8016e36:	19d8      	adds	r0, r3, r7
 8016e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d102      	bne.n	8016e44 <__tzcalc_limits+0x8c>
 8016e3e:	9b02      	ldr	r3, [sp, #8]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d103      	bne.n	8016e4c <__tzcalc_limits+0x94>
 8016e44:	2400      	movs	r4, #0
 8016e46:	9b03      	ldr	r3, [sp, #12]
 8016e48:	42a3      	cmp	r3, r4
 8016e4a:	d103      	bne.n	8016e54 <__tzcalc_limits+0x9c>
 8016e4c:	2401      	movs	r4, #1
 8016e4e:	2f3b      	cmp	r7, #59	; 0x3b
 8016e50:	dc00      	bgt.n	8016e54 <__tzcalc_limits+0x9c>
 8016e52:	2400      	movs	r4, #0
 8016e54:	1900      	adds	r0, r0, r4
 8016e56:	3801      	subs	r0, #1
 8016e58:	2300      	movs	r3, #0
 8016e5a:	4a32      	ldr	r2, [pc, #200]	; (8016f24 <__tzcalc_limits+0x16c>)
 8016e5c:	17c1      	asrs	r1, r0, #31
 8016e5e:	f7e9 fb63 	bl	8000528 <__aeabi_lmul>
 8016e62:	6933      	ldr	r3, [r6, #16]
 8016e64:	9304      	str	r3, [sp, #16]
 8016e66:	17db      	asrs	r3, r3, #31
 8016e68:	9305      	str	r3, [sp, #20]
 8016e6a:	9b04      	ldr	r3, [sp, #16]
 8016e6c:	9c05      	ldr	r4, [sp, #20]
 8016e6e:	18c0      	adds	r0, r0, r3
 8016e70:	4161      	adcs	r1, r4
 8016e72:	6a33      	ldr	r3, [r6, #32]
 8016e74:	9306      	str	r3, [sp, #24]
 8016e76:	17db      	asrs	r3, r3, #31
 8016e78:	9307      	str	r3, [sp, #28]
 8016e7a:	9b06      	ldr	r3, [sp, #24]
 8016e7c:	9c07      	ldr	r4, [sp, #28]
 8016e7e:	18c0      	adds	r0, r0, r3
 8016e80:	4161      	adcs	r1, r4
 8016e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e84:	61b0      	str	r0, [r6, #24]
 8016e86:	61f1      	str	r1, [r6, #28]
 8016e88:	3628      	adds	r6, #40	; 0x28
 8016e8a:	42b3      	cmp	r3, r6
 8016e8c:	d1ce      	bne.n	8016e2c <__tzcalc_limits+0x74>
 8016e8e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8016e90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016e92:	2301      	movs	r3, #1
 8016e94:	4291      	cmp	r1, r2
 8016e96:	dc05      	bgt.n	8016ea4 <__tzcalc_limits+0xec>
 8016e98:	d103      	bne.n	8016ea2 <__tzcalc_limits+0xea>
 8016e9a:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8016e9c:	6a29      	ldr	r1, [r5, #32]
 8016e9e:	428a      	cmp	r2, r1
 8016ea0:	d800      	bhi.n	8016ea4 <__tzcalc_limits+0xec>
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	2001      	movs	r0, #1
 8016ea6:	602b      	str	r3, [r5, #0]
 8016ea8:	b00d      	add	sp, #52	; 0x34
 8016eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016eac:	2b44      	cmp	r3, #68	; 0x44
 8016eae:	d102      	bne.n	8016eb6 <__tzcalc_limits+0xfe>
 8016eb0:	9b01      	ldr	r3, [sp, #4]
 8016eb2:	19d8      	adds	r0, r3, r7
 8016eb4:	e7d0      	b.n	8016e58 <__tzcalc_limits+0xa0>
 8016eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eba:	2a00      	cmp	r2, #0
 8016ebc:	d103      	bne.n	8016ec6 <__tzcalc_limits+0x10e>
 8016ebe:	9a02      	ldr	r2, [sp, #8]
 8016ec0:	2a00      	cmp	r2, #0
 8016ec2:	d000      	beq.n	8016ec6 <__tzcalc_limits+0x10e>
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	2230      	movs	r2, #48	; 0x30
 8016ec8:	4353      	muls	r3, r2
 8016eca:	2200      	movs	r2, #0
 8016ecc:	4816      	ldr	r0, [pc, #88]	; (8016f28 <__tzcalc_limits+0x170>)
 8016ece:	3b04      	subs	r3, #4
 8016ed0:	6871      	ldr	r1, [r6, #4]
 8016ed2:	9c01      	ldr	r4, [sp, #4]
 8016ed4:	181b      	adds	r3, r3, r0
 8016ed6:	3201      	adds	r2, #1
 8016ed8:	0090      	lsls	r0, r2, #2
 8016eda:	5818      	ldr	r0, [r3, r0]
 8016edc:	9008      	str	r0, [sp, #32]
 8016ede:	4291      	cmp	r1, r2
 8016ee0:	dc10      	bgt.n	8016f04 <__tzcalc_limits+0x14c>
 8016ee2:	2107      	movs	r1, #7
 8016ee4:	1d20      	adds	r0, r4, #4
 8016ee6:	f7e9 faaf 	bl	8000448 <__aeabi_idivmod>
 8016eea:	1a79      	subs	r1, r7, r1
 8016eec:	d500      	bpl.n	8016ef0 <__tzcalc_limits+0x138>
 8016eee:	3107      	adds	r1, #7
 8016ef0:	2007      	movs	r0, #7
 8016ef2:	68b3      	ldr	r3, [r6, #8]
 8016ef4:	3b01      	subs	r3, #1
 8016ef6:	4358      	muls	r0, r3
 8016ef8:	1840      	adds	r0, r0, r1
 8016efa:	9b08      	ldr	r3, [sp, #32]
 8016efc:	4298      	cmp	r0, r3
 8016efe:	da04      	bge.n	8016f0a <__tzcalc_limits+0x152>
 8016f00:	1820      	adds	r0, r4, r0
 8016f02:	e7a9      	b.n	8016e58 <__tzcalc_limits+0xa0>
 8016f04:	9808      	ldr	r0, [sp, #32]
 8016f06:	1824      	adds	r4, r4, r0
 8016f08:	e7e5      	b.n	8016ed6 <__tzcalc_limits+0x11e>
 8016f0a:	3807      	subs	r0, #7
 8016f0c:	e7f5      	b.n	8016efa <__tzcalc_limits+0x142>
 8016f0e:	46c0      	nop			; (mov r8, r8)
 8016f10:	000007b1 	.word	0x000007b1
 8016f14:	fffff84e 	.word	0xfffff84e
 8016f18:	fffff84f 	.word	0xfffff84f
 8016f1c:	fffff893 	.word	0xfffff893
 8016f20:	fffff9bf 	.word	0xfffff9bf
 8016f24:	00015180 	.word	0x00015180
 8016f28:	0801acc0 	.word	0x0801acc0

08016f2c <__tz_lock>:
 8016f2c:	b510      	push	{r4, lr}
 8016f2e:	4802      	ldr	r0, [pc, #8]	; (8016f38 <__tz_lock+0xc>)
 8016f30:	f000 fc97 	bl	8017862 <__retarget_lock_acquire>
 8016f34:	bd10      	pop	{r4, pc}
 8016f36:	46c0      	nop			; (mov r8, r8)
 8016f38:	20001dd4 	.word	0x20001dd4

08016f3c <__tz_unlock>:
 8016f3c:	b510      	push	{r4, lr}
 8016f3e:	4802      	ldr	r0, [pc, #8]	; (8016f48 <__tz_unlock+0xc>)
 8016f40:	f000 fc91 	bl	8017866 <__retarget_lock_release>
 8016f44:	bd10      	pop	{r4, pc}
 8016f46:	46c0      	nop			; (mov r8, r8)
 8016f48:	20001dd4 	.word	0x20001dd4

08016f4c <_tzset_unlocked>:
 8016f4c:	b510      	push	{r4, lr}
 8016f4e:	4b02      	ldr	r3, [pc, #8]	; (8016f58 <_tzset_unlocked+0xc>)
 8016f50:	6818      	ldr	r0, [r3, #0]
 8016f52:	f000 f803 	bl	8016f5c <_tzset_unlocked_r>
 8016f56:	bd10      	pop	{r4, pc}
 8016f58:	20000244 	.word	0x20000244

08016f5c <_tzset_unlocked_r>:
 8016f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f5e:	b08d      	sub	sp, #52	; 0x34
 8016f60:	0006      	movs	r6, r0
 8016f62:	f000 fc79 	bl	8017858 <__gettzinfo>
 8016f66:	49b1      	ldr	r1, [pc, #708]	; (801722c <_tzset_unlocked_r+0x2d0>)
 8016f68:	0007      	movs	r7, r0
 8016f6a:	0030      	movs	r0, r6
 8016f6c:	f000 fc6e 	bl	801784c <_getenv_r>
 8016f70:	4caf      	ldr	r4, [pc, #700]	; (8017230 <_tzset_unlocked_r+0x2d4>)
 8016f72:	1e05      	subs	r5, r0, #0
 8016f74:	d10d      	bne.n	8016f92 <_tzset_unlocked_r+0x36>
 8016f76:	4baf      	ldr	r3, [pc, #700]	; (8017234 <_tzset_unlocked_r+0x2d8>)
 8016f78:	4aaf      	ldr	r2, [pc, #700]	; (8017238 <_tzset_unlocked_r+0x2dc>)
 8016f7a:	6018      	str	r0, [r3, #0]
 8016f7c:	4baf      	ldr	r3, [pc, #700]	; (801723c <_tzset_unlocked_r+0x2e0>)
 8016f7e:	6018      	str	r0, [r3, #0]
 8016f80:	4baf      	ldr	r3, [pc, #700]	; (8017240 <_tzset_unlocked_r+0x2e4>)
 8016f82:	6820      	ldr	r0, [r4, #0]
 8016f84:	601a      	str	r2, [r3, #0]
 8016f86:	605a      	str	r2, [r3, #4]
 8016f88:	f7fe ffca 	bl	8015f20 <free>
 8016f8c:	6025      	str	r5, [r4, #0]
 8016f8e:	b00d      	add	sp, #52	; 0x34
 8016f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f92:	6821      	ldr	r1, [r4, #0]
 8016f94:	2900      	cmp	r1, #0
 8016f96:	d159      	bne.n	801704c <_tzset_unlocked_r+0xf0>
 8016f98:	6820      	ldr	r0, [r4, #0]
 8016f9a:	f7fe ffc1 	bl	8015f20 <free>
 8016f9e:	0028      	movs	r0, r5
 8016fa0:	f7e9 f8b2 	bl	8000108 <strlen>
 8016fa4:	1c41      	adds	r1, r0, #1
 8016fa6:	0030      	movs	r0, r6
 8016fa8:	f7ff fae8 	bl	801657c <_malloc_r>
 8016fac:	6020      	str	r0, [r4, #0]
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d151      	bne.n	8017056 <_tzset_unlocked_r+0xfa>
 8016fb2:	782b      	ldrb	r3, [r5, #0]
 8016fb4:	49a3      	ldr	r1, [pc, #652]	; (8017244 <_tzset_unlocked_r+0x2e8>)
 8016fb6:	3b3a      	subs	r3, #58	; 0x3a
 8016fb8:	425a      	negs	r2, r3
 8016fba:	4153      	adcs	r3, r2
 8016fbc:	18ed      	adds	r5, r5, r3
 8016fbe:	0028      	movs	r0, r5
 8016fc0:	4aa1      	ldr	r2, [pc, #644]	; (8017248 <_tzset_unlocked_r+0x2ec>)
 8016fc2:	ab0a      	add	r3, sp, #40	; 0x28
 8016fc4:	f000 fd9e 	bl	8017b04 <siscanf>
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	dde0      	ble.n	8016f8e <_tzset_unlocked_r+0x32>
 8016fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fce:	18ec      	adds	r4, r5, r3
 8016fd0:	5ceb      	ldrb	r3, [r5, r3]
 8016fd2:	2b2d      	cmp	r3, #45	; 0x2d
 8016fd4:	d143      	bne.n	801705e <_tzset_unlocked_r+0x102>
 8016fd6:	3b2e      	subs	r3, #46	; 0x2e
 8016fd8:	3401      	adds	r4, #1
 8016fda:	9304      	str	r3, [sp, #16]
 8016fdc:	2616      	movs	r6, #22
 8016fde:	ab02      	add	r3, sp, #8
 8016fe0:	18f6      	adds	r6, r6, r3
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	ad08      	add	r5, sp, #32
 8016fe6:	8033      	strh	r3, [r6, #0]
 8016fe8:	802b      	strh	r3, [r5, #0]
 8016fea:	ab0a      	add	r3, sp, #40	; 0x28
 8016fec:	0020      	movs	r0, r4
 8016fee:	4997      	ldr	r1, [pc, #604]	; (801724c <_tzset_unlocked_r+0x2f0>)
 8016ff0:	9303      	str	r3, [sp, #12]
 8016ff2:	9502      	str	r5, [sp, #8]
 8016ff4:	9301      	str	r3, [sp, #4]
 8016ff6:	9600      	str	r6, [sp, #0]
 8016ff8:	aa07      	add	r2, sp, #28
 8016ffa:	f000 fd83 	bl	8017b04 <siscanf>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	ddc5      	ble.n	8016f8e <_tzset_unlocked_r+0x32>
 8017002:	233c      	movs	r3, #60	; 0x3c
 8017004:	8832      	ldrh	r2, [r6, #0]
 8017006:	4e92      	ldr	r6, [pc, #584]	; (8017250 <_tzset_unlocked_r+0x2f4>)
 8017008:	4353      	muls	r3, r2
 801700a:	882a      	ldrh	r2, [r5, #0]
 801700c:	4d8c      	ldr	r5, [pc, #560]	; (8017240 <_tzset_unlocked_r+0x2e4>)
 801700e:	189b      	adds	r3, r3, r2
 8017010:	aa02      	add	r2, sp, #8
 8017012:	8a91      	ldrh	r1, [r2, #20]
 8017014:	22e1      	movs	r2, #225	; 0xe1
 8017016:	0112      	lsls	r2, r2, #4
 8017018:	434a      	muls	r2, r1
 801701a:	189b      	adds	r3, r3, r2
 801701c:	9a04      	ldr	r2, [sp, #16]
 801701e:	4989      	ldr	r1, [pc, #548]	; (8017244 <_tzset_unlocked_r+0x2e8>)
 8017020:	435a      	muls	r2, r3
 8017022:	4b89      	ldr	r3, [pc, #548]	; (8017248 <_tzset_unlocked_r+0x2ec>)
 8017024:	62ba      	str	r2, [r7, #40]	; 0x28
 8017026:	602b      	str	r3, [r5, #0]
 8017028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801702a:	0032      	movs	r2, r6
 801702c:	18e4      	adds	r4, r4, r3
 801702e:	0020      	movs	r0, r4
 8017030:	ab0a      	add	r3, sp, #40	; 0x28
 8017032:	f000 fd67 	bl	8017b04 <siscanf>
 8017036:	2800      	cmp	r0, #0
 8017038:	dc18      	bgt.n	801706c <_tzset_unlocked_r+0x110>
 801703a:	682b      	ldr	r3, [r5, #0]
 801703c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801703e:	606b      	str	r3, [r5, #4]
 8017040:	4b7c      	ldr	r3, [pc, #496]	; (8017234 <_tzset_unlocked_r+0x2d8>)
 8017042:	601a      	str	r2, [r3, #0]
 8017044:	2200      	movs	r2, #0
 8017046:	4b7d      	ldr	r3, [pc, #500]	; (801723c <_tzset_unlocked_r+0x2e0>)
 8017048:	601a      	str	r2, [r3, #0]
 801704a:	e7a0      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 801704c:	f7e9 f863 	bl	8000116 <strcmp>
 8017050:	2800      	cmp	r0, #0
 8017052:	d1a1      	bne.n	8016f98 <_tzset_unlocked_r+0x3c>
 8017054:	e79b      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 8017056:	0029      	movs	r1, r5
 8017058:	f7ff fea6 	bl	8016da8 <strcpy>
 801705c:	e7a9      	b.n	8016fb2 <_tzset_unlocked_r+0x56>
 801705e:	2201      	movs	r2, #1
 8017060:	3b2b      	subs	r3, #43	; 0x2b
 8017062:	9204      	str	r2, [sp, #16]
 8017064:	425a      	negs	r2, r3
 8017066:	4153      	adcs	r3, r2
 8017068:	18e4      	adds	r4, r4, r3
 801706a:	e7b7      	b.n	8016fdc <_tzset_unlocked_r+0x80>
 801706c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801706e:	606e      	str	r6, [r5, #4]
 8017070:	18e5      	adds	r5, r4, r3
 8017072:	5ce3      	ldrb	r3, [r4, r3]
 8017074:	2b2d      	cmp	r3, #45	; 0x2d
 8017076:	d000      	beq.n	801707a <_tzset_unlocked_r+0x11e>
 8017078:	e093      	b.n	80171a2 <_tzset_unlocked_r+0x246>
 801707a:	3b2e      	subs	r3, #46	; 0x2e
 801707c:	3501      	adds	r5, #1
 801707e:	9304      	str	r3, [sp, #16]
 8017080:	2416      	movs	r4, #22
 8017082:	2300      	movs	r3, #0
 8017084:	aa02      	add	r2, sp, #8
 8017086:	18a4      	adds	r4, r4, r2
 8017088:	ae08      	add	r6, sp, #32
 801708a:	8293      	strh	r3, [r2, #20]
 801708c:	8023      	strh	r3, [r4, #0]
 801708e:	8033      	strh	r3, [r6, #0]
 8017090:	930a      	str	r3, [sp, #40]	; 0x28
 8017092:	ab0a      	add	r3, sp, #40	; 0x28
 8017094:	0028      	movs	r0, r5
 8017096:	496d      	ldr	r1, [pc, #436]	; (801724c <_tzset_unlocked_r+0x2f0>)
 8017098:	9303      	str	r3, [sp, #12]
 801709a:	9602      	str	r6, [sp, #8]
 801709c:	9301      	str	r3, [sp, #4]
 801709e:	9400      	str	r4, [sp, #0]
 80170a0:	aa07      	add	r2, sp, #28
 80170a2:	f000 fd2f 	bl	8017b04 <siscanf>
 80170a6:	2800      	cmp	r0, #0
 80170a8:	dd00      	ble.n	80170ac <_tzset_unlocked_r+0x150>
 80170aa:	e081      	b.n	80171b0 <_tzset_unlocked_r+0x254>
 80170ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ae:	4a69      	ldr	r2, [pc, #420]	; (8017254 <_tzset_unlocked_r+0x2f8>)
 80170b0:	189c      	adds	r4, r3, r2
 80170b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170b4:	653c      	str	r4, [r7, #80]	; 0x50
 80170b6:	003c      	movs	r4, r7
 80170b8:	18ed      	adds	r5, r5, r3
 80170ba:	2300      	movs	r3, #0
 80170bc:	3408      	adds	r4, #8
 80170be:	9305      	str	r3, [sp, #20]
 80170c0:	782b      	ldrb	r3, [r5, #0]
 80170c2:	3b2c      	subs	r3, #44	; 0x2c
 80170c4:	425a      	negs	r2, r3
 80170c6:	4153      	adcs	r3, r2
 80170c8:	18ed      	adds	r5, r5, r3
 80170ca:	782b      	ldrb	r3, [r5, #0]
 80170cc:	9304      	str	r3, [sp, #16]
 80170ce:	2b4d      	cmp	r3, #77	; 0x4d
 80170d0:	d000      	beq.n	80170d4 <_tzset_unlocked_r+0x178>
 80170d2:	e07d      	b.n	80171d0 <_tzset_unlocked_r+0x274>
 80170d4:	261a      	movs	r6, #26
 80170d6:	ab02      	add	r3, sp, #8
 80170d8:	18f6      	adds	r6, r6, r3
 80170da:	ab0a      	add	r3, sp, #40	; 0x28
 80170dc:	9303      	str	r3, [sp, #12]
 80170de:	231e      	movs	r3, #30
 80170e0:	aa02      	add	r2, sp, #8
 80170e2:	189b      	adds	r3, r3, r2
 80170e4:	9302      	str	r3, [sp, #8]
 80170e6:	ab0a      	add	r3, sp, #40	; 0x28
 80170e8:	9301      	str	r3, [sp, #4]
 80170ea:	ab09      	add	r3, sp, #36	; 0x24
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	0032      	movs	r2, r6
 80170f0:	0028      	movs	r0, r5
 80170f2:	4959      	ldr	r1, [pc, #356]	; (8017258 <_tzset_unlocked_r+0x2fc>)
 80170f4:	ab0a      	add	r3, sp, #40	; 0x28
 80170f6:	f000 fd05 	bl	8017b04 <siscanf>
 80170fa:	2803      	cmp	r0, #3
 80170fc:	d000      	beq.n	8017100 <_tzset_unlocked_r+0x1a4>
 80170fe:	e746      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 8017100:	8831      	ldrh	r1, [r6, #0]
 8017102:	1e4b      	subs	r3, r1, #1
 8017104:	2b0b      	cmp	r3, #11
 8017106:	d900      	bls.n	801710a <_tzset_unlocked_r+0x1ae>
 8017108:	e741      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 801710a:	ab02      	add	r3, sp, #8
 801710c:	8b9a      	ldrh	r2, [r3, #28]
 801710e:	1e53      	subs	r3, r2, #1
 8017110:	2b04      	cmp	r3, #4
 8017112:	d900      	bls.n	8017116 <_tzset_unlocked_r+0x1ba>
 8017114:	e73b      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 8017116:	ab02      	add	r3, sp, #8
 8017118:	8bdb      	ldrh	r3, [r3, #30]
 801711a:	2b06      	cmp	r3, #6
 801711c:	d900      	bls.n	8017120 <_tzset_unlocked_r+0x1c4>
 801711e:	e736      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 8017120:	9804      	ldr	r0, [sp, #16]
 8017122:	6061      	str	r1, [r4, #4]
 8017124:	7020      	strb	r0, [r4, #0]
 8017126:	60a2      	str	r2, [r4, #8]
 8017128:	60e3      	str	r3, [r4, #12]
 801712a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801712c:	18eb      	adds	r3, r5, r3
 801712e:	9304      	str	r3, [sp, #16]
 8017130:	2302      	movs	r3, #2
 8017132:	2616      	movs	r6, #22
 8017134:	aa07      	add	r2, sp, #28
 8017136:	8013      	strh	r3, [r2, #0]
 8017138:	ab02      	add	r3, sp, #8
 801713a:	18f6      	adds	r6, r6, r3
 801713c:	2300      	movs	r3, #0
 801713e:	ad08      	add	r5, sp, #32
 8017140:	8033      	strh	r3, [r6, #0]
 8017142:	802b      	strh	r3, [r5, #0]
 8017144:	930a      	str	r3, [sp, #40]	; 0x28
 8017146:	9b04      	ldr	r3, [sp, #16]
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	2b2f      	cmp	r3, #47	; 0x2f
 801714c:	d108      	bne.n	8017160 <_tzset_unlocked_r+0x204>
 801714e:	ab0a      	add	r3, sp, #40	; 0x28
 8017150:	4942      	ldr	r1, [pc, #264]	; (801725c <_tzset_unlocked_r+0x300>)
 8017152:	9804      	ldr	r0, [sp, #16]
 8017154:	9303      	str	r3, [sp, #12]
 8017156:	9502      	str	r5, [sp, #8]
 8017158:	9301      	str	r3, [sp, #4]
 801715a:	9600      	str	r6, [sp, #0]
 801715c:	f000 fcd2 	bl	8017b04 <siscanf>
 8017160:	233c      	movs	r3, #60	; 0x3c
 8017162:	8832      	ldrh	r2, [r6, #0]
 8017164:	4353      	muls	r3, r2
 8017166:	882a      	ldrh	r2, [r5, #0]
 8017168:	9d04      	ldr	r5, [sp, #16]
 801716a:	189b      	adds	r3, r3, r2
 801716c:	aa07      	add	r2, sp, #28
 801716e:	8811      	ldrh	r1, [r2, #0]
 8017170:	22e1      	movs	r2, #225	; 0xe1
 8017172:	0112      	lsls	r2, r2, #4
 8017174:	434a      	muls	r2, r1
 8017176:	189b      	adds	r3, r3, r2
 8017178:	6123      	str	r3, [r4, #16]
 801717a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801717c:	3428      	adds	r4, #40	; 0x28
 801717e:	469c      	mov	ip, r3
 8017180:	9b05      	ldr	r3, [sp, #20]
 8017182:	4465      	add	r5, ip
 8017184:	2b01      	cmp	r3, #1
 8017186:	d121      	bne.n	80171cc <_tzset_unlocked_r+0x270>
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f7ff fe15 	bl	8016db8 <__tzcalc_limits>
 801718e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017190:	4b28      	ldr	r3, [pc, #160]	; (8017234 <_tzset_unlocked_r+0x2d8>)
 8017192:	601a      	str	r2, [r3, #0]
 8017194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017196:	1a9b      	subs	r3, r3, r2
 8017198:	1e5a      	subs	r2, r3, #1
 801719a:	4193      	sbcs	r3, r2
 801719c:	4a27      	ldr	r2, [pc, #156]	; (801723c <_tzset_unlocked_r+0x2e0>)
 801719e:	6013      	str	r3, [r2, #0]
 80171a0:	e6f5      	b.n	8016f8e <_tzset_unlocked_r+0x32>
 80171a2:	2201      	movs	r2, #1
 80171a4:	3b2b      	subs	r3, #43	; 0x2b
 80171a6:	9204      	str	r2, [sp, #16]
 80171a8:	425a      	negs	r2, r3
 80171aa:	4153      	adcs	r3, r2
 80171ac:	18ed      	adds	r5, r5, r3
 80171ae:	e767      	b.n	8017080 <_tzset_unlocked_r+0x124>
 80171b0:	233c      	movs	r3, #60	; 0x3c
 80171b2:	8822      	ldrh	r2, [r4, #0]
 80171b4:	9c04      	ldr	r4, [sp, #16]
 80171b6:	4353      	muls	r3, r2
 80171b8:	8832      	ldrh	r2, [r6, #0]
 80171ba:	189b      	adds	r3, r3, r2
 80171bc:	aa02      	add	r2, sp, #8
 80171be:	8a91      	ldrh	r1, [r2, #20]
 80171c0:	22e1      	movs	r2, #225	; 0xe1
 80171c2:	0112      	lsls	r2, r2, #4
 80171c4:	434a      	muls	r2, r1
 80171c6:	189b      	adds	r3, r3, r2
 80171c8:	435c      	muls	r4, r3
 80171ca:	e772      	b.n	80170b2 <_tzset_unlocked_r+0x156>
 80171cc:	2301      	movs	r3, #1
 80171ce:	e776      	b.n	80170be <_tzset_unlocked_r+0x162>
 80171d0:	9b04      	ldr	r3, [sp, #16]
 80171d2:	2644      	movs	r6, #68	; 0x44
 80171d4:	2b4a      	cmp	r3, #74	; 0x4a
 80171d6:	d101      	bne.n	80171dc <_tzset_unlocked_r+0x280>
 80171d8:	001e      	movs	r6, r3
 80171da:	3501      	adds	r5, #1
 80171dc:	220a      	movs	r2, #10
 80171de:	0028      	movs	r0, r5
 80171e0:	a90b      	add	r1, sp, #44	; 0x2c
 80171e2:	f000 fda5 	bl	8017d30 <strtoul>
 80171e6:	231e      	movs	r3, #30
 80171e8:	aa02      	add	r2, sp, #8
 80171ea:	189b      	adds	r3, r3, r2
 80171ec:	8018      	strh	r0, [r3, #0]
 80171ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171f0:	9304      	str	r3, [sp, #16]
 80171f2:	42ab      	cmp	r3, r5
 80171f4:	d116      	bne.n	8017224 <_tzset_unlocked_r+0x2c8>
 80171f6:	9b05      	ldr	r3, [sp, #20]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d108      	bne.n	801720e <_tzset_unlocked_r+0x2b2>
 80171fc:	334d      	adds	r3, #77	; 0x4d
 80171fe:	723b      	strb	r3, [r7, #8]
 8017200:	3b4a      	subs	r3, #74	; 0x4a
 8017202:	60fb      	str	r3, [r7, #12]
 8017204:	3b01      	subs	r3, #1
 8017206:	613b      	str	r3, [r7, #16]
 8017208:	9b05      	ldr	r3, [sp, #20]
 801720a:	617b      	str	r3, [r7, #20]
 801720c:	e790      	b.n	8017130 <_tzset_unlocked_r+0x1d4>
 801720e:	003b      	movs	r3, r7
 8017210:	224d      	movs	r2, #77	; 0x4d
 8017212:	3330      	adds	r3, #48	; 0x30
 8017214:	701a      	strb	r2, [r3, #0]
 8017216:	230b      	movs	r3, #11
 8017218:	637b      	str	r3, [r7, #52]	; 0x34
 801721a:	3b0a      	subs	r3, #10
 801721c:	63bb      	str	r3, [r7, #56]	; 0x38
 801721e:	2300      	movs	r3, #0
 8017220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017222:	e785      	b.n	8017130 <_tzset_unlocked_r+0x1d4>
 8017224:	b280      	uxth	r0, r0
 8017226:	7026      	strb	r6, [r4, #0]
 8017228:	60e0      	str	r0, [r4, #12]
 801722a:	e781      	b.n	8017130 <_tzset_unlocked_r+0x1d4>
 801722c:	0801ac23 	.word	0x0801ac23
 8017230:	20001dc4 	.word	0x20001dc4
 8017234:	20001dcc 	.word	0x20001dcc
 8017238:	0801ac26 	.word	0x0801ac26
 801723c:	20001dc8 	.word	0x20001dc8
 8017240:	200002a8 	.word	0x200002a8
 8017244:	0801ac2a 	.word	0x0801ac2a
 8017248:	20001db7 	.word	0x20001db7
 801724c:	0801ac4d 	.word	0x0801ac4d
 8017250:	20001dac 	.word	0x20001dac
 8017254:	fffff1f0 	.word	0xfffff1f0
 8017258:	0801ac39 	.word	0x0801ac39
 801725c:	0801ac4c 	.word	0x0801ac4c

08017260 <__swbuf_r>:
 8017260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017262:	0005      	movs	r5, r0
 8017264:	000e      	movs	r6, r1
 8017266:	0014      	movs	r4, r2
 8017268:	2800      	cmp	r0, #0
 801726a:	d004      	beq.n	8017276 <__swbuf_r+0x16>
 801726c:	6983      	ldr	r3, [r0, #24]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d101      	bne.n	8017276 <__swbuf_r+0x16>
 8017272:	f000 fa0f 	bl	8017694 <__sinit>
 8017276:	4b22      	ldr	r3, [pc, #136]	; (8017300 <__swbuf_r+0xa0>)
 8017278:	429c      	cmp	r4, r3
 801727a:	d12e      	bne.n	80172da <__swbuf_r+0x7a>
 801727c:	686c      	ldr	r4, [r5, #4]
 801727e:	69a3      	ldr	r3, [r4, #24]
 8017280:	60a3      	str	r3, [r4, #8]
 8017282:	89a3      	ldrh	r3, [r4, #12]
 8017284:	071b      	lsls	r3, r3, #28
 8017286:	d532      	bpl.n	80172ee <__swbuf_r+0x8e>
 8017288:	6923      	ldr	r3, [r4, #16]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d02f      	beq.n	80172ee <__swbuf_r+0x8e>
 801728e:	6823      	ldr	r3, [r4, #0]
 8017290:	6922      	ldr	r2, [r4, #16]
 8017292:	b2f7      	uxtb	r7, r6
 8017294:	1a98      	subs	r0, r3, r2
 8017296:	6963      	ldr	r3, [r4, #20]
 8017298:	b2f6      	uxtb	r6, r6
 801729a:	4283      	cmp	r3, r0
 801729c:	dc05      	bgt.n	80172aa <__swbuf_r+0x4a>
 801729e:	0021      	movs	r1, r4
 80172a0:	0028      	movs	r0, r5
 80172a2:	f000 f955 	bl	8017550 <_fflush_r>
 80172a6:	2800      	cmp	r0, #0
 80172a8:	d127      	bne.n	80172fa <__swbuf_r+0x9a>
 80172aa:	68a3      	ldr	r3, [r4, #8]
 80172ac:	3001      	adds	r0, #1
 80172ae:	3b01      	subs	r3, #1
 80172b0:	60a3      	str	r3, [r4, #8]
 80172b2:	6823      	ldr	r3, [r4, #0]
 80172b4:	1c5a      	adds	r2, r3, #1
 80172b6:	6022      	str	r2, [r4, #0]
 80172b8:	701f      	strb	r7, [r3, #0]
 80172ba:	6963      	ldr	r3, [r4, #20]
 80172bc:	4283      	cmp	r3, r0
 80172be:	d004      	beq.n	80172ca <__swbuf_r+0x6a>
 80172c0:	89a3      	ldrh	r3, [r4, #12]
 80172c2:	07db      	lsls	r3, r3, #31
 80172c4:	d507      	bpl.n	80172d6 <__swbuf_r+0x76>
 80172c6:	2e0a      	cmp	r6, #10
 80172c8:	d105      	bne.n	80172d6 <__swbuf_r+0x76>
 80172ca:	0021      	movs	r1, r4
 80172cc:	0028      	movs	r0, r5
 80172ce:	f000 f93f 	bl	8017550 <_fflush_r>
 80172d2:	2800      	cmp	r0, #0
 80172d4:	d111      	bne.n	80172fa <__swbuf_r+0x9a>
 80172d6:	0030      	movs	r0, r6
 80172d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172da:	4b0a      	ldr	r3, [pc, #40]	; (8017304 <__swbuf_r+0xa4>)
 80172dc:	429c      	cmp	r4, r3
 80172de:	d101      	bne.n	80172e4 <__swbuf_r+0x84>
 80172e0:	68ac      	ldr	r4, [r5, #8]
 80172e2:	e7cc      	b.n	801727e <__swbuf_r+0x1e>
 80172e4:	4b08      	ldr	r3, [pc, #32]	; (8017308 <__swbuf_r+0xa8>)
 80172e6:	429c      	cmp	r4, r3
 80172e8:	d1c9      	bne.n	801727e <__swbuf_r+0x1e>
 80172ea:	68ec      	ldr	r4, [r5, #12]
 80172ec:	e7c7      	b.n	801727e <__swbuf_r+0x1e>
 80172ee:	0021      	movs	r1, r4
 80172f0:	0028      	movs	r0, r5
 80172f2:	f000 f80b 	bl	801730c <__swsetup_r>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d0c9      	beq.n	801728e <__swbuf_r+0x2e>
 80172fa:	2601      	movs	r6, #1
 80172fc:	4276      	negs	r6, r6
 80172fe:	e7ea      	b.n	80172d6 <__swbuf_r+0x76>
 8017300:	0801ac80 	.word	0x0801ac80
 8017304:	0801aca0 	.word	0x0801aca0
 8017308:	0801ac60 	.word	0x0801ac60

0801730c <__swsetup_r>:
 801730c:	4b37      	ldr	r3, [pc, #220]	; (80173ec <__swsetup_r+0xe0>)
 801730e:	b570      	push	{r4, r5, r6, lr}
 8017310:	681d      	ldr	r5, [r3, #0]
 8017312:	0006      	movs	r6, r0
 8017314:	000c      	movs	r4, r1
 8017316:	2d00      	cmp	r5, #0
 8017318:	d005      	beq.n	8017326 <__swsetup_r+0x1a>
 801731a:	69ab      	ldr	r3, [r5, #24]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d102      	bne.n	8017326 <__swsetup_r+0x1a>
 8017320:	0028      	movs	r0, r5
 8017322:	f000 f9b7 	bl	8017694 <__sinit>
 8017326:	4b32      	ldr	r3, [pc, #200]	; (80173f0 <__swsetup_r+0xe4>)
 8017328:	429c      	cmp	r4, r3
 801732a:	d10f      	bne.n	801734c <__swsetup_r+0x40>
 801732c:	686c      	ldr	r4, [r5, #4]
 801732e:	230c      	movs	r3, #12
 8017330:	5ee2      	ldrsh	r2, [r4, r3]
 8017332:	b293      	uxth	r3, r2
 8017334:	0711      	lsls	r1, r2, #28
 8017336:	d42d      	bmi.n	8017394 <__swsetup_r+0x88>
 8017338:	06d9      	lsls	r1, r3, #27
 801733a:	d411      	bmi.n	8017360 <__swsetup_r+0x54>
 801733c:	2309      	movs	r3, #9
 801733e:	2001      	movs	r0, #1
 8017340:	6033      	str	r3, [r6, #0]
 8017342:	3337      	adds	r3, #55	; 0x37
 8017344:	4313      	orrs	r3, r2
 8017346:	81a3      	strh	r3, [r4, #12]
 8017348:	4240      	negs	r0, r0
 801734a:	bd70      	pop	{r4, r5, r6, pc}
 801734c:	4b29      	ldr	r3, [pc, #164]	; (80173f4 <__swsetup_r+0xe8>)
 801734e:	429c      	cmp	r4, r3
 8017350:	d101      	bne.n	8017356 <__swsetup_r+0x4a>
 8017352:	68ac      	ldr	r4, [r5, #8]
 8017354:	e7eb      	b.n	801732e <__swsetup_r+0x22>
 8017356:	4b28      	ldr	r3, [pc, #160]	; (80173f8 <__swsetup_r+0xec>)
 8017358:	429c      	cmp	r4, r3
 801735a:	d1e8      	bne.n	801732e <__swsetup_r+0x22>
 801735c:	68ec      	ldr	r4, [r5, #12]
 801735e:	e7e6      	b.n	801732e <__swsetup_r+0x22>
 8017360:	075b      	lsls	r3, r3, #29
 8017362:	d513      	bpl.n	801738c <__swsetup_r+0x80>
 8017364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017366:	2900      	cmp	r1, #0
 8017368:	d008      	beq.n	801737c <__swsetup_r+0x70>
 801736a:	0023      	movs	r3, r4
 801736c:	3344      	adds	r3, #68	; 0x44
 801736e:	4299      	cmp	r1, r3
 8017370:	d002      	beq.n	8017378 <__swsetup_r+0x6c>
 8017372:	0030      	movs	r0, r6
 8017374:	f7ff f896 	bl	80164a4 <_free_r>
 8017378:	2300      	movs	r3, #0
 801737a:	6363      	str	r3, [r4, #52]	; 0x34
 801737c:	2224      	movs	r2, #36	; 0x24
 801737e:	89a3      	ldrh	r3, [r4, #12]
 8017380:	4393      	bics	r3, r2
 8017382:	81a3      	strh	r3, [r4, #12]
 8017384:	2300      	movs	r3, #0
 8017386:	6063      	str	r3, [r4, #4]
 8017388:	6923      	ldr	r3, [r4, #16]
 801738a:	6023      	str	r3, [r4, #0]
 801738c:	2308      	movs	r3, #8
 801738e:	89a2      	ldrh	r2, [r4, #12]
 8017390:	4313      	orrs	r3, r2
 8017392:	81a3      	strh	r3, [r4, #12]
 8017394:	6923      	ldr	r3, [r4, #16]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d10b      	bne.n	80173b2 <__swsetup_r+0xa6>
 801739a:	21a0      	movs	r1, #160	; 0xa0
 801739c:	2280      	movs	r2, #128	; 0x80
 801739e:	89a3      	ldrh	r3, [r4, #12]
 80173a0:	0089      	lsls	r1, r1, #2
 80173a2:	0092      	lsls	r2, r2, #2
 80173a4:	400b      	ands	r3, r1
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d003      	beq.n	80173b2 <__swsetup_r+0xa6>
 80173aa:	0021      	movs	r1, r4
 80173ac:	0030      	movs	r0, r6
 80173ae:	f000 fa85 	bl	80178bc <__smakebuf_r>
 80173b2:	220c      	movs	r2, #12
 80173b4:	5ea3      	ldrsh	r3, [r4, r2]
 80173b6:	2001      	movs	r0, #1
 80173b8:	001a      	movs	r2, r3
 80173ba:	b299      	uxth	r1, r3
 80173bc:	4002      	ands	r2, r0
 80173be:	4203      	tst	r3, r0
 80173c0:	d00f      	beq.n	80173e2 <__swsetup_r+0xd6>
 80173c2:	2200      	movs	r2, #0
 80173c4:	60a2      	str	r2, [r4, #8]
 80173c6:	6962      	ldr	r2, [r4, #20]
 80173c8:	4252      	negs	r2, r2
 80173ca:	61a2      	str	r2, [r4, #24]
 80173cc:	2000      	movs	r0, #0
 80173ce:	6922      	ldr	r2, [r4, #16]
 80173d0:	4282      	cmp	r2, r0
 80173d2:	d1ba      	bne.n	801734a <__swsetup_r+0x3e>
 80173d4:	060a      	lsls	r2, r1, #24
 80173d6:	d5b8      	bpl.n	801734a <__swsetup_r+0x3e>
 80173d8:	2240      	movs	r2, #64	; 0x40
 80173da:	4313      	orrs	r3, r2
 80173dc:	81a3      	strh	r3, [r4, #12]
 80173de:	3801      	subs	r0, #1
 80173e0:	e7b3      	b.n	801734a <__swsetup_r+0x3e>
 80173e2:	0788      	lsls	r0, r1, #30
 80173e4:	d400      	bmi.n	80173e8 <__swsetup_r+0xdc>
 80173e6:	6962      	ldr	r2, [r4, #20]
 80173e8:	60a2      	str	r2, [r4, #8]
 80173ea:	e7ef      	b.n	80173cc <__swsetup_r+0xc0>
 80173ec:	20000244 	.word	0x20000244
 80173f0:	0801ac80 	.word	0x0801ac80
 80173f4:	0801aca0 	.word	0x0801aca0
 80173f8:	0801ac60 	.word	0x0801ac60

080173fc <abort>:
 80173fc:	2006      	movs	r0, #6
 80173fe:	b510      	push	{r4, lr}
 8017400:	f000 fb60 	bl	8017ac4 <raise>
 8017404:	2001      	movs	r0, #1
 8017406:	f001 f9bf 	bl	8018788 <_exit>

0801740a <div>:
 801740a:	b570      	push	{r4, r5, r6, lr}
 801740c:	000e      	movs	r6, r1
 801740e:	0004      	movs	r4, r0
 8017410:	0011      	movs	r1, r2
 8017412:	0030      	movs	r0, r6
 8017414:	0015      	movs	r5, r2
 8017416:	f7e9 f817 	bl	8000448 <__aeabi_idivmod>
 801741a:	2e00      	cmp	r6, #0
 801741c:	db07      	blt.n	801742e <div+0x24>
 801741e:	2900      	cmp	r1, #0
 8017420:	da01      	bge.n	8017426 <div+0x1c>
 8017422:	3001      	adds	r0, #1
 8017424:	1b49      	subs	r1, r1, r5
 8017426:	6020      	str	r0, [r4, #0]
 8017428:	6061      	str	r1, [r4, #4]
 801742a:	0020      	movs	r0, r4
 801742c:	bd70      	pop	{r4, r5, r6, pc}
 801742e:	2900      	cmp	r1, #0
 8017430:	ddf9      	ble.n	8017426 <div+0x1c>
 8017432:	3801      	subs	r0, #1
 8017434:	1949      	adds	r1, r1, r5
 8017436:	e7f6      	b.n	8017426 <div+0x1c>

08017438 <__sflush_r>:
 8017438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801743a:	898b      	ldrh	r3, [r1, #12]
 801743c:	0005      	movs	r5, r0
 801743e:	000c      	movs	r4, r1
 8017440:	071a      	lsls	r2, r3, #28
 8017442:	d45f      	bmi.n	8017504 <__sflush_r+0xcc>
 8017444:	684a      	ldr	r2, [r1, #4]
 8017446:	2a00      	cmp	r2, #0
 8017448:	dc04      	bgt.n	8017454 <__sflush_r+0x1c>
 801744a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801744c:	2a00      	cmp	r2, #0
 801744e:	dc01      	bgt.n	8017454 <__sflush_r+0x1c>
 8017450:	2000      	movs	r0, #0
 8017452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017454:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017456:	2f00      	cmp	r7, #0
 8017458:	d0fa      	beq.n	8017450 <__sflush_r+0x18>
 801745a:	2200      	movs	r2, #0
 801745c:	2180      	movs	r1, #128	; 0x80
 801745e:	682e      	ldr	r6, [r5, #0]
 8017460:	602a      	str	r2, [r5, #0]
 8017462:	001a      	movs	r2, r3
 8017464:	0149      	lsls	r1, r1, #5
 8017466:	400a      	ands	r2, r1
 8017468:	420b      	tst	r3, r1
 801746a:	d034      	beq.n	80174d6 <__sflush_r+0x9e>
 801746c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801746e:	89a3      	ldrh	r3, [r4, #12]
 8017470:	075b      	lsls	r3, r3, #29
 8017472:	d506      	bpl.n	8017482 <__sflush_r+0x4a>
 8017474:	6863      	ldr	r3, [r4, #4]
 8017476:	1ac0      	subs	r0, r0, r3
 8017478:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801747a:	2b00      	cmp	r3, #0
 801747c:	d001      	beq.n	8017482 <__sflush_r+0x4a>
 801747e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017480:	1ac0      	subs	r0, r0, r3
 8017482:	0002      	movs	r2, r0
 8017484:	6a21      	ldr	r1, [r4, #32]
 8017486:	2300      	movs	r3, #0
 8017488:	0028      	movs	r0, r5
 801748a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801748c:	47b8      	blx	r7
 801748e:	89a1      	ldrh	r1, [r4, #12]
 8017490:	1c43      	adds	r3, r0, #1
 8017492:	d106      	bne.n	80174a2 <__sflush_r+0x6a>
 8017494:	682b      	ldr	r3, [r5, #0]
 8017496:	2b1d      	cmp	r3, #29
 8017498:	d831      	bhi.n	80174fe <__sflush_r+0xc6>
 801749a:	4a2c      	ldr	r2, [pc, #176]	; (801754c <__sflush_r+0x114>)
 801749c:	40da      	lsrs	r2, r3
 801749e:	07d3      	lsls	r3, r2, #31
 80174a0:	d52d      	bpl.n	80174fe <__sflush_r+0xc6>
 80174a2:	2300      	movs	r3, #0
 80174a4:	6063      	str	r3, [r4, #4]
 80174a6:	6923      	ldr	r3, [r4, #16]
 80174a8:	6023      	str	r3, [r4, #0]
 80174aa:	04cb      	lsls	r3, r1, #19
 80174ac:	d505      	bpl.n	80174ba <__sflush_r+0x82>
 80174ae:	1c43      	adds	r3, r0, #1
 80174b0:	d102      	bne.n	80174b8 <__sflush_r+0x80>
 80174b2:	682b      	ldr	r3, [r5, #0]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d100      	bne.n	80174ba <__sflush_r+0x82>
 80174b8:	6560      	str	r0, [r4, #84]	; 0x54
 80174ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174bc:	602e      	str	r6, [r5, #0]
 80174be:	2900      	cmp	r1, #0
 80174c0:	d0c6      	beq.n	8017450 <__sflush_r+0x18>
 80174c2:	0023      	movs	r3, r4
 80174c4:	3344      	adds	r3, #68	; 0x44
 80174c6:	4299      	cmp	r1, r3
 80174c8:	d002      	beq.n	80174d0 <__sflush_r+0x98>
 80174ca:	0028      	movs	r0, r5
 80174cc:	f7fe ffea 	bl	80164a4 <_free_r>
 80174d0:	2000      	movs	r0, #0
 80174d2:	6360      	str	r0, [r4, #52]	; 0x34
 80174d4:	e7bd      	b.n	8017452 <__sflush_r+0x1a>
 80174d6:	2301      	movs	r3, #1
 80174d8:	0028      	movs	r0, r5
 80174da:	6a21      	ldr	r1, [r4, #32]
 80174dc:	47b8      	blx	r7
 80174de:	1c43      	adds	r3, r0, #1
 80174e0:	d1c5      	bne.n	801746e <__sflush_r+0x36>
 80174e2:	682b      	ldr	r3, [r5, #0]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d0c2      	beq.n	801746e <__sflush_r+0x36>
 80174e8:	2b1d      	cmp	r3, #29
 80174ea:	d001      	beq.n	80174f0 <__sflush_r+0xb8>
 80174ec:	2b16      	cmp	r3, #22
 80174ee:	d101      	bne.n	80174f4 <__sflush_r+0xbc>
 80174f0:	602e      	str	r6, [r5, #0]
 80174f2:	e7ad      	b.n	8017450 <__sflush_r+0x18>
 80174f4:	2340      	movs	r3, #64	; 0x40
 80174f6:	89a2      	ldrh	r2, [r4, #12]
 80174f8:	4313      	orrs	r3, r2
 80174fa:	81a3      	strh	r3, [r4, #12]
 80174fc:	e7a9      	b.n	8017452 <__sflush_r+0x1a>
 80174fe:	2340      	movs	r3, #64	; 0x40
 8017500:	430b      	orrs	r3, r1
 8017502:	e7fa      	b.n	80174fa <__sflush_r+0xc2>
 8017504:	690f      	ldr	r7, [r1, #16]
 8017506:	2f00      	cmp	r7, #0
 8017508:	d0a2      	beq.n	8017450 <__sflush_r+0x18>
 801750a:	680a      	ldr	r2, [r1, #0]
 801750c:	600f      	str	r7, [r1, #0]
 801750e:	1bd2      	subs	r2, r2, r7
 8017510:	9201      	str	r2, [sp, #4]
 8017512:	2200      	movs	r2, #0
 8017514:	079b      	lsls	r3, r3, #30
 8017516:	d100      	bne.n	801751a <__sflush_r+0xe2>
 8017518:	694a      	ldr	r2, [r1, #20]
 801751a:	60a2      	str	r2, [r4, #8]
 801751c:	9b01      	ldr	r3, [sp, #4]
 801751e:	2b00      	cmp	r3, #0
 8017520:	dc00      	bgt.n	8017524 <__sflush_r+0xec>
 8017522:	e795      	b.n	8017450 <__sflush_r+0x18>
 8017524:	003a      	movs	r2, r7
 8017526:	0028      	movs	r0, r5
 8017528:	9b01      	ldr	r3, [sp, #4]
 801752a:	6a21      	ldr	r1, [r4, #32]
 801752c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801752e:	47b0      	blx	r6
 8017530:	2800      	cmp	r0, #0
 8017532:	dc06      	bgt.n	8017542 <__sflush_r+0x10a>
 8017534:	2340      	movs	r3, #64	; 0x40
 8017536:	2001      	movs	r0, #1
 8017538:	89a2      	ldrh	r2, [r4, #12]
 801753a:	4240      	negs	r0, r0
 801753c:	4313      	orrs	r3, r2
 801753e:	81a3      	strh	r3, [r4, #12]
 8017540:	e787      	b.n	8017452 <__sflush_r+0x1a>
 8017542:	9b01      	ldr	r3, [sp, #4]
 8017544:	183f      	adds	r7, r7, r0
 8017546:	1a1b      	subs	r3, r3, r0
 8017548:	9301      	str	r3, [sp, #4]
 801754a:	e7e7      	b.n	801751c <__sflush_r+0xe4>
 801754c:	20400001 	.word	0x20400001

08017550 <_fflush_r>:
 8017550:	690b      	ldr	r3, [r1, #16]
 8017552:	b570      	push	{r4, r5, r6, lr}
 8017554:	0005      	movs	r5, r0
 8017556:	000c      	movs	r4, r1
 8017558:	2b00      	cmp	r3, #0
 801755a:	d102      	bne.n	8017562 <_fflush_r+0x12>
 801755c:	2500      	movs	r5, #0
 801755e:	0028      	movs	r0, r5
 8017560:	bd70      	pop	{r4, r5, r6, pc}
 8017562:	2800      	cmp	r0, #0
 8017564:	d004      	beq.n	8017570 <_fflush_r+0x20>
 8017566:	6983      	ldr	r3, [r0, #24]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d101      	bne.n	8017570 <_fflush_r+0x20>
 801756c:	f000 f892 	bl	8017694 <__sinit>
 8017570:	4b14      	ldr	r3, [pc, #80]	; (80175c4 <_fflush_r+0x74>)
 8017572:	429c      	cmp	r4, r3
 8017574:	d11b      	bne.n	80175ae <_fflush_r+0x5e>
 8017576:	686c      	ldr	r4, [r5, #4]
 8017578:	220c      	movs	r2, #12
 801757a:	5ea3      	ldrsh	r3, [r4, r2]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d0ed      	beq.n	801755c <_fflush_r+0xc>
 8017580:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017582:	07d2      	lsls	r2, r2, #31
 8017584:	d404      	bmi.n	8017590 <_fflush_r+0x40>
 8017586:	059b      	lsls	r3, r3, #22
 8017588:	d402      	bmi.n	8017590 <_fflush_r+0x40>
 801758a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801758c:	f000 f96a 	bl	8017864 <__retarget_lock_acquire_recursive>
 8017590:	0028      	movs	r0, r5
 8017592:	0021      	movs	r1, r4
 8017594:	f7ff ff50 	bl	8017438 <__sflush_r>
 8017598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801759a:	0005      	movs	r5, r0
 801759c:	07db      	lsls	r3, r3, #31
 801759e:	d4de      	bmi.n	801755e <_fflush_r+0xe>
 80175a0:	89a3      	ldrh	r3, [r4, #12]
 80175a2:	059b      	lsls	r3, r3, #22
 80175a4:	d4db      	bmi.n	801755e <_fflush_r+0xe>
 80175a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175a8:	f000 f95e 	bl	8017868 <__retarget_lock_release_recursive>
 80175ac:	e7d7      	b.n	801755e <_fflush_r+0xe>
 80175ae:	4b06      	ldr	r3, [pc, #24]	; (80175c8 <_fflush_r+0x78>)
 80175b0:	429c      	cmp	r4, r3
 80175b2:	d101      	bne.n	80175b8 <_fflush_r+0x68>
 80175b4:	68ac      	ldr	r4, [r5, #8]
 80175b6:	e7df      	b.n	8017578 <_fflush_r+0x28>
 80175b8:	4b04      	ldr	r3, [pc, #16]	; (80175cc <_fflush_r+0x7c>)
 80175ba:	429c      	cmp	r4, r3
 80175bc:	d1dc      	bne.n	8017578 <_fflush_r+0x28>
 80175be:	68ec      	ldr	r4, [r5, #12]
 80175c0:	e7da      	b.n	8017578 <_fflush_r+0x28>
 80175c2:	46c0      	nop			; (mov r8, r8)
 80175c4:	0801ac80 	.word	0x0801ac80
 80175c8:	0801aca0 	.word	0x0801aca0
 80175cc:	0801ac60 	.word	0x0801ac60

080175d0 <std>:
 80175d0:	2300      	movs	r3, #0
 80175d2:	b510      	push	{r4, lr}
 80175d4:	0004      	movs	r4, r0
 80175d6:	6003      	str	r3, [r0, #0]
 80175d8:	6043      	str	r3, [r0, #4]
 80175da:	6083      	str	r3, [r0, #8]
 80175dc:	8181      	strh	r1, [r0, #12]
 80175de:	6643      	str	r3, [r0, #100]	; 0x64
 80175e0:	0019      	movs	r1, r3
 80175e2:	81c2      	strh	r2, [r0, #14]
 80175e4:	6103      	str	r3, [r0, #16]
 80175e6:	6143      	str	r3, [r0, #20]
 80175e8:	6183      	str	r3, [r0, #24]
 80175ea:	2208      	movs	r2, #8
 80175ec:	305c      	adds	r0, #92	; 0x5c
 80175ee:	f7fe fcb8 	bl	8015f62 <memset>
 80175f2:	4b05      	ldr	r3, [pc, #20]	; (8017608 <std+0x38>)
 80175f4:	6224      	str	r4, [r4, #32]
 80175f6:	6263      	str	r3, [r4, #36]	; 0x24
 80175f8:	4b04      	ldr	r3, [pc, #16]	; (801760c <std+0x3c>)
 80175fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80175fc:	4b04      	ldr	r3, [pc, #16]	; (8017610 <std+0x40>)
 80175fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017600:	4b04      	ldr	r3, [pc, #16]	; (8017614 <std+0x44>)
 8017602:	6323      	str	r3, [r4, #48]	; 0x30
 8017604:	bd10      	pop	{r4, pc}
 8017606:	46c0      	nop			; (mov r8, r8)
 8017608:	08017b55 	.word	0x08017b55
 801760c:	08017b81 	.word	0x08017b81
 8017610:	08017bb9 	.word	0x08017bb9
 8017614:	08017be5 	.word	0x08017be5

08017618 <_cleanup_r>:
 8017618:	b510      	push	{r4, lr}
 801761a:	4902      	ldr	r1, [pc, #8]	; (8017624 <_cleanup_r+0xc>)
 801761c:	f000 f8ba 	bl	8017794 <_fwalk_reent>
 8017620:	bd10      	pop	{r4, pc}
 8017622:	46c0      	nop			; (mov r8, r8)
 8017624:	08017551 	.word	0x08017551

08017628 <__sfmoreglue>:
 8017628:	b570      	push	{r4, r5, r6, lr}
 801762a:	2568      	movs	r5, #104	; 0x68
 801762c:	1e4a      	subs	r2, r1, #1
 801762e:	4355      	muls	r5, r2
 8017630:	000e      	movs	r6, r1
 8017632:	0029      	movs	r1, r5
 8017634:	3174      	adds	r1, #116	; 0x74
 8017636:	f7fe ffa1 	bl	801657c <_malloc_r>
 801763a:	1e04      	subs	r4, r0, #0
 801763c:	d008      	beq.n	8017650 <__sfmoreglue+0x28>
 801763e:	2100      	movs	r1, #0
 8017640:	002a      	movs	r2, r5
 8017642:	6001      	str	r1, [r0, #0]
 8017644:	6046      	str	r6, [r0, #4]
 8017646:	300c      	adds	r0, #12
 8017648:	60a0      	str	r0, [r4, #8]
 801764a:	3268      	adds	r2, #104	; 0x68
 801764c:	f7fe fc89 	bl	8015f62 <memset>
 8017650:	0020      	movs	r0, r4
 8017652:	bd70      	pop	{r4, r5, r6, pc}

08017654 <__sfp_lock_acquire>:
 8017654:	b510      	push	{r4, lr}
 8017656:	4802      	ldr	r0, [pc, #8]	; (8017660 <__sfp_lock_acquire+0xc>)
 8017658:	f000 f904 	bl	8017864 <__retarget_lock_acquire_recursive>
 801765c:	bd10      	pop	{r4, pc}
 801765e:	46c0      	nop			; (mov r8, r8)
 8017660:	20001dd2 	.word	0x20001dd2

08017664 <__sfp_lock_release>:
 8017664:	b510      	push	{r4, lr}
 8017666:	4802      	ldr	r0, [pc, #8]	; (8017670 <__sfp_lock_release+0xc>)
 8017668:	f000 f8fe 	bl	8017868 <__retarget_lock_release_recursive>
 801766c:	bd10      	pop	{r4, pc}
 801766e:	46c0      	nop			; (mov r8, r8)
 8017670:	20001dd2 	.word	0x20001dd2

08017674 <__sinit_lock_acquire>:
 8017674:	b510      	push	{r4, lr}
 8017676:	4802      	ldr	r0, [pc, #8]	; (8017680 <__sinit_lock_acquire+0xc>)
 8017678:	f000 f8f4 	bl	8017864 <__retarget_lock_acquire_recursive>
 801767c:	bd10      	pop	{r4, pc}
 801767e:	46c0      	nop			; (mov r8, r8)
 8017680:	20001dd3 	.word	0x20001dd3

08017684 <__sinit_lock_release>:
 8017684:	b510      	push	{r4, lr}
 8017686:	4802      	ldr	r0, [pc, #8]	; (8017690 <__sinit_lock_release+0xc>)
 8017688:	f000 f8ee 	bl	8017868 <__retarget_lock_release_recursive>
 801768c:	bd10      	pop	{r4, pc}
 801768e:	46c0      	nop			; (mov r8, r8)
 8017690:	20001dd3 	.word	0x20001dd3

08017694 <__sinit>:
 8017694:	b513      	push	{r0, r1, r4, lr}
 8017696:	0004      	movs	r4, r0
 8017698:	f7ff ffec 	bl	8017674 <__sinit_lock_acquire>
 801769c:	69a3      	ldr	r3, [r4, #24]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d002      	beq.n	80176a8 <__sinit+0x14>
 80176a2:	f7ff ffef 	bl	8017684 <__sinit_lock_release>
 80176a6:	bd13      	pop	{r0, r1, r4, pc}
 80176a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80176aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80176ac:	6523      	str	r3, [r4, #80]	; 0x50
 80176ae:	4b13      	ldr	r3, [pc, #76]	; (80176fc <__sinit+0x68>)
 80176b0:	4a13      	ldr	r2, [pc, #76]	; (8017700 <__sinit+0x6c>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80176b6:	9301      	str	r3, [sp, #4]
 80176b8:	42a3      	cmp	r3, r4
 80176ba:	d101      	bne.n	80176c0 <__sinit+0x2c>
 80176bc:	2301      	movs	r3, #1
 80176be:	61a3      	str	r3, [r4, #24]
 80176c0:	0020      	movs	r0, r4
 80176c2:	f000 f81f 	bl	8017704 <__sfp>
 80176c6:	6060      	str	r0, [r4, #4]
 80176c8:	0020      	movs	r0, r4
 80176ca:	f000 f81b 	bl	8017704 <__sfp>
 80176ce:	60a0      	str	r0, [r4, #8]
 80176d0:	0020      	movs	r0, r4
 80176d2:	f000 f817 	bl	8017704 <__sfp>
 80176d6:	2200      	movs	r2, #0
 80176d8:	2104      	movs	r1, #4
 80176da:	60e0      	str	r0, [r4, #12]
 80176dc:	6860      	ldr	r0, [r4, #4]
 80176de:	f7ff ff77 	bl	80175d0 <std>
 80176e2:	2201      	movs	r2, #1
 80176e4:	2109      	movs	r1, #9
 80176e6:	68a0      	ldr	r0, [r4, #8]
 80176e8:	f7ff ff72 	bl	80175d0 <std>
 80176ec:	2202      	movs	r2, #2
 80176ee:	2112      	movs	r1, #18
 80176f0:	68e0      	ldr	r0, [r4, #12]
 80176f2:	f7ff ff6d 	bl	80175d0 <std>
 80176f6:	2301      	movs	r3, #1
 80176f8:	61a3      	str	r3, [r4, #24]
 80176fa:	e7d2      	b.n	80176a2 <__sinit+0xe>
 80176fc:	0801ab8c 	.word	0x0801ab8c
 8017700:	08017619 	.word	0x08017619

08017704 <__sfp>:
 8017704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017706:	0007      	movs	r7, r0
 8017708:	f7ff ffa4 	bl	8017654 <__sfp_lock_acquire>
 801770c:	4b1f      	ldr	r3, [pc, #124]	; (801778c <__sfp+0x88>)
 801770e:	681e      	ldr	r6, [r3, #0]
 8017710:	69b3      	ldr	r3, [r6, #24]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d102      	bne.n	801771c <__sfp+0x18>
 8017716:	0030      	movs	r0, r6
 8017718:	f7ff ffbc 	bl	8017694 <__sinit>
 801771c:	3648      	adds	r6, #72	; 0x48
 801771e:	68b4      	ldr	r4, [r6, #8]
 8017720:	6873      	ldr	r3, [r6, #4]
 8017722:	3b01      	subs	r3, #1
 8017724:	d504      	bpl.n	8017730 <__sfp+0x2c>
 8017726:	6833      	ldr	r3, [r6, #0]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d022      	beq.n	8017772 <__sfp+0x6e>
 801772c:	6836      	ldr	r6, [r6, #0]
 801772e:	e7f6      	b.n	801771e <__sfp+0x1a>
 8017730:	220c      	movs	r2, #12
 8017732:	5ea5      	ldrsh	r5, [r4, r2]
 8017734:	2d00      	cmp	r5, #0
 8017736:	d11a      	bne.n	801776e <__sfp+0x6a>
 8017738:	0020      	movs	r0, r4
 801773a:	4b15      	ldr	r3, [pc, #84]	; (8017790 <__sfp+0x8c>)
 801773c:	3058      	adds	r0, #88	; 0x58
 801773e:	60e3      	str	r3, [r4, #12]
 8017740:	6665      	str	r5, [r4, #100]	; 0x64
 8017742:	f000 f88d 	bl	8017860 <__retarget_lock_init_recursive>
 8017746:	f7ff ff8d 	bl	8017664 <__sfp_lock_release>
 801774a:	0020      	movs	r0, r4
 801774c:	2208      	movs	r2, #8
 801774e:	0029      	movs	r1, r5
 8017750:	6025      	str	r5, [r4, #0]
 8017752:	60a5      	str	r5, [r4, #8]
 8017754:	6065      	str	r5, [r4, #4]
 8017756:	6125      	str	r5, [r4, #16]
 8017758:	6165      	str	r5, [r4, #20]
 801775a:	61a5      	str	r5, [r4, #24]
 801775c:	305c      	adds	r0, #92	; 0x5c
 801775e:	f7fe fc00 	bl	8015f62 <memset>
 8017762:	6365      	str	r5, [r4, #52]	; 0x34
 8017764:	63a5      	str	r5, [r4, #56]	; 0x38
 8017766:	64a5      	str	r5, [r4, #72]	; 0x48
 8017768:	64e5      	str	r5, [r4, #76]	; 0x4c
 801776a:	0020      	movs	r0, r4
 801776c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801776e:	3468      	adds	r4, #104	; 0x68
 8017770:	e7d7      	b.n	8017722 <__sfp+0x1e>
 8017772:	2104      	movs	r1, #4
 8017774:	0038      	movs	r0, r7
 8017776:	f7ff ff57 	bl	8017628 <__sfmoreglue>
 801777a:	1e04      	subs	r4, r0, #0
 801777c:	6030      	str	r0, [r6, #0]
 801777e:	d1d5      	bne.n	801772c <__sfp+0x28>
 8017780:	f7ff ff70 	bl	8017664 <__sfp_lock_release>
 8017784:	230c      	movs	r3, #12
 8017786:	603b      	str	r3, [r7, #0]
 8017788:	e7ef      	b.n	801776a <__sfp+0x66>
 801778a:	46c0      	nop			; (mov r8, r8)
 801778c:	0801ab8c 	.word	0x0801ab8c
 8017790:	ffff0001 	.word	0xffff0001

08017794 <_fwalk_reent>:
 8017794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017796:	0004      	movs	r4, r0
 8017798:	0006      	movs	r6, r0
 801779a:	2700      	movs	r7, #0
 801779c:	9101      	str	r1, [sp, #4]
 801779e:	3448      	adds	r4, #72	; 0x48
 80177a0:	6863      	ldr	r3, [r4, #4]
 80177a2:	68a5      	ldr	r5, [r4, #8]
 80177a4:	9300      	str	r3, [sp, #0]
 80177a6:	9b00      	ldr	r3, [sp, #0]
 80177a8:	3b01      	subs	r3, #1
 80177aa:	9300      	str	r3, [sp, #0]
 80177ac:	d504      	bpl.n	80177b8 <_fwalk_reent+0x24>
 80177ae:	6824      	ldr	r4, [r4, #0]
 80177b0:	2c00      	cmp	r4, #0
 80177b2:	d1f5      	bne.n	80177a0 <_fwalk_reent+0xc>
 80177b4:	0038      	movs	r0, r7
 80177b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80177b8:	89ab      	ldrh	r3, [r5, #12]
 80177ba:	2b01      	cmp	r3, #1
 80177bc:	d908      	bls.n	80177d0 <_fwalk_reent+0x3c>
 80177be:	220e      	movs	r2, #14
 80177c0:	5eab      	ldrsh	r3, [r5, r2]
 80177c2:	3301      	adds	r3, #1
 80177c4:	d004      	beq.n	80177d0 <_fwalk_reent+0x3c>
 80177c6:	0029      	movs	r1, r5
 80177c8:	0030      	movs	r0, r6
 80177ca:	9b01      	ldr	r3, [sp, #4]
 80177cc:	4798      	blx	r3
 80177ce:	4307      	orrs	r7, r0
 80177d0:	3568      	adds	r5, #104	; 0x68
 80177d2:	e7e8      	b.n	80177a6 <_fwalk_reent+0x12>

080177d4 <_findenv_r>:
 80177d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177d6:	000d      	movs	r5, r1
 80177d8:	b085      	sub	sp, #20
 80177da:	0006      	movs	r6, r0
 80177dc:	9203      	str	r2, [sp, #12]
 80177de:	f000 fad9 	bl	8017d94 <__env_lock>
 80177e2:	4f19      	ldr	r7, [pc, #100]	; (8017848 <_findenv_r+0x74>)
 80177e4:	002b      	movs	r3, r5
 80177e6:	683c      	ldr	r4, [r7, #0]
 80177e8:	2c00      	cmp	r4, #0
 80177ea:	d106      	bne.n	80177fa <_findenv_r+0x26>
 80177ec:	0030      	movs	r0, r6
 80177ee:	f000 fad9 	bl	8017da4 <__env_unlock>
 80177f2:	2000      	movs	r0, #0
 80177f4:	b005      	add	sp, #20
 80177f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177f8:	3301      	adds	r3, #1
 80177fa:	781a      	ldrb	r2, [r3, #0]
 80177fc:	2a00      	cmp	r2, #0
 80177fe:	d01f      	beq.n	8017840 <_findenv_r+0x6c>
 8017800:	2a3d      	cmp	r2, #61	; 0x3d
 8017802:	d1f9      	bne.n	80177f8 <_findenv_r+0x24>
 8017804:	e7f2      	b.n	80177ec <_findenv_r+0x18>
 8017806:	3404      	adds	r4, #4
 8017808:	6820      	ldr	r0, [r4, #0]
 801780a:	2800      	cmp	r0, #0
 801780c:	d0ee      	beq.n	80177ec <_findenv_r+0x18>
 801780e:	0029      	movs	r1, r5
 8017810:	9a01      	ldr	r2, [sp, #4]
 8017812:	f000 f9ed 	bl	8017bf0 <strncmp>
 8017816:	2800      	cmp	r0, #0
 8017818:	d1f5      	bne.n	8017806 <_findenv_r+0x32>
 801781a:	6823      	ldr	r3, [r4, #0]
 801781c:	9a01      	ldr	r2, [sp, #4]
 801781e:	189a      	adds	r2, r3, r2
 8017820:	9202      	str	r2, [sp, #8]
 8017822:	9a01      	ldr	r2, [sp, #4]
 8017824:	5c9b      	ldrb	r3, [r3, r2]
 8017826:	2b3d      	cmp	r3, #61	; 0x3d
 8017828:	d1ed      	bne.n	8017806 <_findenv_r+0x32>
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	0030      	movs	r0, r6
 801782e:	1ae4      	subs	r4, r4, r3
 8017830:	9b03      	ldr	r3, [sp, #12]
 8017832:	10a4      	asrs	r4, r4, #2
 8017834:	601c      	str	r4, [r3, #0]
 8017836:	f000 fab5 	bl	8017da4 <__env_unlock>
 801783a:	9802      	ldr	r0, [sp, #8]
 801783c:	3001      	adds	r0, #1
 801783e:	e7d9      	b.n	80177f4 <_findenv_r+0x20>
 8017840:	1b5b      	subs	r3, r3, r5
 8017842:	9301      	str	r3, [sp, #4]
 8017844:	e7e0      	b.n	8017808 <_findenv_r+0x34>
 8017846:	46c0      	nop			; (mov r8, r8)
 8017848:	20000308 	.word	0x20000308

0801784c <_getenv_r>:
 801784c:	b507      	push	{r0, r1, r2, lr}
 801784e:	aa01      	add	r2, sp, #4
 8017850:	f7ff ffc0 	bl	80177d4 <_findenv_r>
 8017854:	bd0e      	pop	{r1, r2, r3, pc}
	...

08017858 <__gettzinfo>:
 8017858:	4800      	ldr	r0, [pc, #0]	; (801785c <__gettzinfo+0x4>)
 801785a:	4770      	bx	lr
 801785c:	200002b0 	.word	0x200002b0

08017860 <__retarget_lock_init_recursive>:
 8017860:	4770      	bx	lr

08017862 <__retarget_lock_acquire>:
 8017862:	4770      	bx	lr

08017864 <__retarget_lock_acquire_recursive>:
 8017864:	4770      	bx	lr

08017866 <__retarget_lock_release>:
 8017866:	4770      	bx	lr

08017868 <__retarget_lock_release_recursive>:
 8017868:	4770      	bx	lr
	...

0801786c <__swhatbuf_r>:
 801786c:	b570      	push	{r4, r5, r6, lr}
 801786e:	000e      	movs	r6, r1
 8017870:	001d      	movs	r5, r3
 8017872:	230e      	movs	r3, #14
 8017874:	5ec9      	ldrsh	r1, [r1, r3]
 8017876:	0014      	movs	r4, r2
 8017878:	b096      	sub	sp, #88	; 0x58
 801787a:	2900      	cmp	r1, #0
 801787c:	da08      	bge.n	8017890 <__swhatbuf_r+0x24>
 801787e:	220c      	movs	r2, #12
 8017880:	5eb3      	ldrsh	r3, [r6, r2]
 8017882:	2200      	movs	r2, #0
 8017884:	602a      	str	r2, [r5, #0]
 8017886:	061b      	lsls	r3, r3, #24
 8017888:	d411      	bmi.n	80178ae <__swhatbuf_r+0x42>
 801788a:	2380      	movs	r3, #128	; 0x80
 801788c:	00db      	lsls	r3, r3, #3
 801788e:	e00f      	b.n	80178b0 <__swhatbuf_r+0x44>
 8017890:	466a      	mov	r2, sp
 8017892:	f000 fa8f 	bl	8017db4 <_fstat_r>
 8017896:	2800      	cmp	r0, #0
 8017898:	dbf1      	blt.n	801787e <__swhatbuf_r+0x12>
 801789a:	23f0      	movs	r3, #240	; 0xf0
 801789c:	9901      	ldr	r1, [sp, #4]
 801789e:	021b      	lsls	r3, r3, #8
 80178a0:	4019      	ands	r1, r3
 80178a2:	4b05      	ldr	r3, [pc, #20]	; (80178b8 <__swhatbuf_r+0x4c>)
 80178a4:	18c9      	adds	r1, r1, r3
 80178a6:	424b      	negs	r3, r1
 80178a8:	4159      	adcs	r1, r3
 80178aa:	6029      	str	r1, [r5, #0]
 80178ac:	e7ed      	b.n	801788a <__swhatbuf_r+0x1e>
 80178ae:	2340      	movs	r3, #64	; 0x40
 80178b0:	2000      	movs	r0, #0
 80178b2:	6023      	str	r3, [r4, #0]
 80178b4:	b016      	add	sp, #88	; 0x58
 80178b6:	bd70      	pop	{r4, r5, r6, pc}
 80178b8:	ffffe000 	.word	0xffffe000

080178bc <__smakebuf_r>:
 80178bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178be:	2602      	movs	r6, #2
 80178c0:	898b      	ldrh	r3, [r1, #12]
 80178c2:	0005      	movs	r5, r0
 80178c4:	000c      	movs	r4, r1
 80178c6:	4233      	tst	r3, r6
 80178c8:	d006      	beq.n	80178d8 <__smakebuf_r+0x1c>
 80178ca:	0023      	movs	r3, r4
 80178cc:	3347      	adds	r3, #71	; 0x47
 80178ce:	6023      	str	r3, [r4, #0]
 80178d0:	6123      	str	r3, [r4, #16]
 80178d2:	2301      	movs	r3, #1
 80178d4:	6163      	str	r3, [r4, #20]
 80178d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80178d8:	466a      	mov	r2, sp
 80178da:	ab01      	add	r3, sp, #4
 80178dc:	f7ff ffc6 	bl	801786c <__swhatbuf_r>
 80178e0:	9900      	ldr	r1, [sp, #0]
 80178e2:	0007      	movs	r7, r0
 80178e4:	0028      	movs	r0, r5
 80178e6:	f7fe fe49 	bl	801657c <_malloc_r>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d108      	bne.n	8017900 <__smakebuf_r+0x44>
 80178ee:	220c      	movs	r2, #12
 80178f0:	5ea3      	ldrsh	r3, [r4, r2]
 80178f2:	059a      	lsls	r2, r3, #22
 80178f4:	d4ef      	bmi.n	80178d6 <__smakebuf_r+0x1a>
 80178f6:	2203      	movs	r2, #3
 80178f8:	4393      	bics	r3, r2
 80178fa:	431e      	orrs	r6, r3
 80178fc:	81a6      	strh	r6, [r4, #12]
 80178fe:	e7e4      	b.n	80178ca <__smakebuf_r+0xe>
 8017900:	4b0f      	ldr	r3, [pc, #60]	; (8017940 <__smakebuf_r+0x84>)
 8017902:	62ab      	str	r3, [r5, #40]	; 0x28
 8017904:	2380      	movs	r3, #128	; 0x80
 8017906:	89a2      	ldrh	r2, [r4, #12]
 8017908:	6020      	str	r0, [r4, #0]
 801790a:	4313      	orrs	r3, r2
 801790c:	81a3      	strh	r3, [r4, #12]
 801790e:	9b00      	ldr	r3, [sp, #0]
 8017910:	6120      	str	r0, [r4, #16]
 8017912:	6163      	str	r3, [r4, #20]
 8017914:	9b01      	ldr	r3, [sp, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d00d      	beq.n	8017936 <__smakebuf_r+0x7a>
 801791a:	0028      	movs	r0, r5
 801791c:	230e      	movs	r3, #14
 801791e:	5ee1      	ldrsh	r1, [r4, r3]
 8017920:	f000 fa5a 	bl	8017dd8 <_isatty_r>
 8017924:	2800      	cmp	r0, #0
 8017926:	d006      	beq.n	8017936 <__smakebuf_r+0x7a>
 8017928:	2203      	movs	r2, #3
 801792a:	89a3      	ldrh	r3, [r4, #12]
 801792c:	4393      	bics	r3, r2
 801792e:	001a      	movs	r2, r3
 8017930:	2301      	movs	r3, #1
 8017932:	4313      	orrs	r3, r2
 8017934:	81a3      	strh	r3, [r4, #12]
 8017936:	89a0      	ldrh	r0, [r4, #12]
 8017938:	4307      	orrs	r7, r0
 801793a:	81a7      	strh	r7, [r4, #12]
 801793c:	e7cb      	b.n	80178d6 <__smakebuf_r+0x1a>
 801793e:	46c0      	nop			; (mov r8, r8)
 8017940:	08017619 	.word	0x08017619

08017944 <memchr>:
 8017944:	b2c9      	uxtb	r1, r1
 8017946:	1882      	adds	r2, r0, r2
 8017948:	4290      	cmp	r0, r2
 801794a:	d101      	bne.n	8017950 <memchr+0xc>
 801794c:	2000      	movs	r0, #0
 801794e:	4770      	bx	lr
 8017950:	7803      	ldrb	r3, [r0, #0]
 8017952:	428b      	cmp	r3, r1
 8017954:	d0fb      	beq.n	801794e <memchr+0xa>
 8017956:	3001      	adds	r0, #1
 8017958:	e7f6      	b.n	8017948 <memchr+0x4>
	...

0801795c <__malloc_lock>:
 801795c:	b510      	push	{r4, lr}
 801795e:	4802      	ldr	r0, [pc, #8]	; (8017968 <__malloc_lock+0xc>)
 8017960:	f7ff ff80 	bl	8017864 <__retarget_lock_acquire_recursive>
 8017964:	bd10      	pop	{r4, pc}
 8017966:	46c0      	nop			; (mov r8, r8)
 8017968:	20001dd1 	.word	0x20001dd1

0801796c <__malloc_unlock>:
 801796c:	b510      	push	{r4, lr}
 801796e:	4802      	ldr	r0, [pc, #8]	; (8017978 <__malloc_unlock+0xc>)
 8017970:	f7ff ff7a 	bl	8017868 <__retarget_lock_release_recursive>
 8017974:	bd10      	pop	{r4, pc}
 8017976:	46c0      	nop			; (mov r8, r8)
 8017978:	20001dd1 	.word	0x20001dd1

0801797c <_realloc_r>:
 801797c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801797e:	0007      	movs	r7, r0
 8017980:	000e      	movs	r6, r1
 8017982:	0014      	movs	r4, r2
 8017984:	2900      	cmp	r1, #0
 8017986:	d105      	bne.n	8017994 <_realloc_r+0x18>
 8017988:	0011      	movs	r1, r2
 801798a:	f7fe fdf7 	bl	801657c <_malloc_r>
 801798e:	0005      	movs	r5, r0
 8017990:	0028      	movs	r0, r5
 8017992:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017994:	2a00      	cmp	r2, #0
 8017996:	d103      	bne.n	80179a0 <_realloc_r+0x24>
 8017998:	f7fe fd84 	bl	80164a4 <_free_r>
 801799c:	0025      	movs	r5, r4
 801799e:	e7f7      	b.n	8017990 <_realloc_r+0x14>
 80179a0:	f000 fa40 	bl	8017e24 <_malloc_usable_size_r>
 80179a4:	9001      	str	r0, [sp, #4]
 80179a6:	4284      	cmp	r4, r0
 80179a8:	d803      	bhi.n	80179b2 <_realloc_r+0x36>
 80179aa:	0035      	movs	r5, r6
 80179ac:	0843      	lsrs	r3, r0, #1
 80179ae:	42a3      	cmp	r3, r4
 80179b0:	d3ee      	bcc.n	8017990 <_realloc_r+0x14>
 80179b2:	0021      	movs	r1, r4
 80179b4:	0038      	movs	r0, r7
 80179b6:	f7fe fde1 	bl	801657c <_malloc_r>
 80179ba:	1e05      	subs	r5, r0, #0
 80179bc:	d0e8      	beq.n	8017990 <_realloc_r+0x14>
 80179be:	9b01      	ldr	r3, [sp, #4]
 80179c0:	0022      	movs	r2, r4
 80179c2:	429c      	cmp	r4, r3
 80179c4:	d900      	bls.n	80179c8 <_realloc_r+0x4c>
 80179c6:	001a      	movs	r2, r3
 80179c8:	0031      	movs	r1, r6
 80179ca:	0028      	movs	r0, r5
 80179cc:	f7fe fac0 	bl	8015f50 <memcpy>
 80179d0:	0031      	movs	r1, r6
 80179d2:	0038      	movs	r0, r7
 80179d4:	f7fe fd66 	bl	80164a4 <_free_r>
 80179d8:	e7da      	b.n	8017990 <_realloc_r+0x14>
	...

080179dc <_putc_r>:
 80179dc:	b570      	push	{r4, r5, r6, lr}
 80179de:	0006      	movs	r6, r0
 80179e0:	000d      	movs	r5, r1
 80179e2:	0014      	movs	r4, r2
 80179e4:	2800      	cmp	r0, #0
 80179e6:	d004      	beq.n	80179f2 <_putc_r+0x16>
 80179e8:	6983      	ldr	r3, [r0, #24]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d101      	bne.n	80179f2 <_putc_r+0x16>
 80179ee:	f7ff fe51 	bl	8017694 <__sinit>
 80179f2:	4b1c      	ldr	r3, [pc, #112]	; (8017a64 <_putc_r+0x88>)
 80179f4:	429c      	cmp	r4, r3
 80179f6:	d124      	bne.n	8017a42 <_putc_r+0x66>
 80179f8:	6874      	ldr	r4, [r6, #4]
 80179fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80179fc:	07db      	lsls	r3, r3, #31
 80179fe:	d405      	bmi.n	8017a0c <_putc_r+0x30>
 8017a00:	89a3      	ldrh	r3, [r4, #12]
 8017a02:	059b      	lsls	r3, r3, #22
 8017a04:	d402      	bmi.n	8017a0c <_putc_r+0x30>
 8017a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a08:	f7ff ff2c 	bl	8017864 <__retarget_lock_acquire_recursive>
 8017a0c:	68a3      	ldr	r3, [r4, #8]
 8017a0e:	3b01      	subs	r3, #1
 8017a10:	60a3      	str	r3, [r4, #8]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	da05      	bge.n	8017a22 <_putc_r+0x46>
 8017a16:	69a2      	ldr	r2, [r4, #24]
 8017a18:	4293      	cmp	r3, r2
 8017a1a:	db1c      	blt.n	8017a56 <_putc_r+0x7a>
 8017a1c:	b2eb      	uxtb	r3, r5
 8017a1e:	2b0a      	cmp	r3, #10
 8017a20:	d019      	beq.n	8017a56 <_putc_r+0x7a>
 8017a22:	6823      	ldr	r3, [r4, #0]
 8017a24:	1c5a      	adds	r2, r3, #1
 8017a26:	6022      	str	r2, [r4, #0]
 8017a28:	701d      	strb	r5, [r3, #0]
 8017a2a:	b2ed      	uxtb	r5, r5
 8017a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a2e:	07db      	lsls	r3, r3, #31
 8017a30:	d405      	bmi.n	8017a3e <_putc_r+0x62>
 8017a32:	89a3      	ldrh	r3, [r4, #12]
 8017a34:	059b      	lsls	r3, r3, #22
 8017a36:	d402      	bmi.n	8017a3e <_putc_r+0x62>
 8017a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a3a:	f7ff ff15 	bl	8017868 <__retarget_lock_release_recursive>
 8017a3e:	0028      	movs	r0, r5
 8017a40:	bd70      	pop	{r4, r5, r6, pc}
 8017a42:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <_putc_r+0x8c>)
 8017a44:	429c      	cmp	r4, r3
 8017a46:	d101      	bne.n	8017a4c <_putc_r+0x70>
 8017a48:	68b4      	ldr	r4, [r6, #8]
 8017a4a:	e7d6      	b.n	80179fa <_putc_r+0x1e>
 8017a4c:	4b07      	ldr	r3, [pc, #28]	; (8017a6c <_putc_r+0x90>)
 8017a4e:	429c      	cmp	r4, r3
 8017a50:	d1d3      	bne.n	80179fa <_putc_r+0x1e>
 8017a52:	68f4      	ldr	r4, [r6, #12]
 8017a54:	e7d1      	b.n	80179fa <_putc_r+0x1e>
 8017a56:	0029      	movs	r1, r5
 8017a58:	0022      	movs	r2, r4
 8017a5a:	0030      	movs	r0, r6
 8017a5c:	f7ff fc00 	bl	8017260 <__swbuf_r>
 8017a60:	0005      	movs	r5, r0
 8017a62:	e7e3      	b.n	8017a2c <_putc_r+0x50>
 8017a64:	0801ac80 	.word	0x0801ac80
 8017a68:	0801aca0 	.word	0x0801aca0
 8017a6c:	0801ac60 	.word	0x0801ac60

08017a70 <_raise_r>:
 8017a70:	b570      	push	{r4, r5, r6, lr}
 8017a72:	0004      	movs	r4, r0
 8017a74:	000d      	movs	r5, r1
 8017a76:	291f      	cmp	r1, #31
 8017a78:	d904      	bls.n	8017a84 <_raise_r+0x14>
 8017a7a:	2316      	movs	r3, #22
 8017a7c:	6003      	str	r3, [r0, #0]
 8017a7e:	2001      	movs	r0, #1
 8017a80:	4240      	negs	r0, r0
 8017a82:	bd70      	pop	{r4, r5, r6, pc}
 8017a84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d004      	beq.n	8017a94 <_raise_r+0x24>
 8017a8a:	008a      	lsls	r2, r1, #2
 8017a8c:	189b      	adds	r3, r3, r2
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	2a00      	cmp	r2, #0
 8017a92:	d108      	bne.n	8017aa6 <_raise_r+0x36>
 8017a94:	0020      	movs	r0, r4
 8017a96:	f000 f831 	bl	8017afc <_getpid_r>
 8017a9a:	002a      	movs	r2, r5
 8017a9c:	0001      	movs	r1, r0
 8017a9e:	0020      	movs	r0, r4
 8017aa0:	f000 f81a 	bl	8017ad8 <_kill_r>
 8017aa4:	e7ed      	b.n	8017a82 <_raise_r+0x12>
 8017aa6:	2000      	movs	r0, #0
 8017aa8:	2a01      	cmp	r2, #1
 8017aaa:	d0ea      	beq.n	8017a82 <_raise_r+0x12>
 8017aac:	1c51      	adds	r1, r2, #1
 8017aae:	d103      	bne.n	8017ab8 <_raise_r+0x48>
 8017ab0:	2316      	movs	r3, #22
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	6023      	str	r3, [r4, #0]
 8017ab6:	e7e4      	b.n	8017a82 <_raise_r+0x12>
 8017ab8:	2400      	movs	r4, #0
 8017aba:	0028      	movs	r0, r5
 8017abc:	601c      	str	r4, [r3, #0]
 8017abe:	4790      	blx	r2
 8017ac0:	0020      	movs	r0, r4
 8017ac2:	e7de      	b.n	8017a82 <_raise_r+0x12>

08017ac4 <raise>:
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	4b03      	ldr	r3, [pc, #12]	; (8017ad4 <raise+0x10>)
 8017ac8:	0001      	movs	r1, r0
 8017aca:	6818      	ldr	r0, [r3, #0]
 8017acc:	f7ff ffd0 	bl	8017a70 <_raise_r>
 8017ad0:	bd10      	pop	{r4, pc}
 8017ad2:	46c0      	nop			; (mov r8, r8)
 8017ad4:	20000244 	.word	0x20000244

08017ad8 <_kill_r>:
 8017ad8:	2300      	movs	r3, #0
 8017ada:	b570      	push	{r4, r5, r6, lr}
 8017adc:	4d06      	ldr	r5, [pc, #24]	; (8017af8 <_kill_r+0x20>)
 8017ade:	0004      	movs	r4, r0
 8017ae0:	0008      	movs	r0, r1
 8017ae2:	0011      	movs	r1, r2
 8017ae4:	602b      	str	r3, [r5, #0]
 8017ae6:	f000 fe27 	bl	8018738 <_kill>
 8017aea:	1c43      	adds	r3, r0, #1
 8017aec:	d103      	bne.n	8017af6 <_kill_r+0x1e>
 8017aee:	682b      	ldr	r3, [r5, #0]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d000      	beq.n	8017af6 <_kill_r+0x1e>
 8017af4:	6023      	str	r3, [r4, #0]
 8017af6:	bd70      	pop	{r4, r5, r6, pc}
 8017af8:	20001dd8 	.word	0x20001dd8

08017afc <_getpid_r>:
 8017afc:	b510      	push	{r4, lr}
 8017afe:	f000 fe0b 	bl	8018718 <_getpid>
 8017b02:	bd10      	pop	{r4, pc}

08017b04 <siscanf>:
 8017b04:	b40e      	push	{r1, r2, r3}
 8017b06:	b530      	push	{r4, r5, lr}
 8017b08:	2381      	movs	r3, #129	; 0x81
 8017b0a:	b09c      	sub	sp, #112	; 0x70
 8017b0c:	466a      	mov	r2, sp
 8017b0e:	ac1f      	add	r4, sp, #124	; 0x7c
 8017b10:	009b      	lsls	r3, r3, #2
 8017b12:	cc20      	ldmia	r4!, {r5}
 8017b14:	8293      	strh	r3, [r2, #20]
 8017b16:	9002      	str	r0, [sp, #8]
 8017b18:	9006      	str	r0, [sp, #24]
 8017b1a:	f7e8 faf5 	bl	8000108 <strlen>
 8017b1e:	4b0b      	ldr	r3, [pc, #44]	; (8017b4c <siscanf+0x48>)
 8017b20:	466a      	mov	r2, sp
 8017b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b24:	2300      	movs	r3, #0
 8017b26:	9003      	str	r0, [sp, #12]
 8017b28:	9007      	str	r0, [sp, #28]
 8017b2a:	4809      	ldr	r0, [pc, #36]	; (8017b50 <siscanf+0x4c>)
 8017b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b2e:	9314      	str	r3, [sp, #80]	; 0x50
 8017b30:	3b01      	subs	r3, #1
 8017b32:	82d3      	strh	r3, [r2, #22]
 8017b34:	a902      	add	r1, sp, #8
 8017b36:	0023      	movs	r3, r4
 8017b38:	002a      	movs	r2, r5
 8017b3a:	6800      	ldr	r0, [r0, #0]
 8017b3c:	9401      	str	r4, [sp, #4]
 8017b3e:	f000 f9d5 	bl	8017eec <__ssvfiscanf_r>
 8017b42:	b01c      	add	sp, #112	; 0x70
 8017b44:	bc30      	pop	{r4, r5}
 8017b46:	bc08      	pop	{r3}
 8017b48:	b003      	add	sp, #12
 8017b4a:	4718      	bx	r3
 8017b4c:	08017b7d 	.word	0x08017b7d
 8017b50:	20000244 	.word	0x20000244

08017b54 <__sread>:
 8017b54:	b570      	push	{r4, r5, r6, lr}
 8017b56:	000c      	movs	r4, r1
 8017b58:	250e      	movs	r5, #14
 8017b5a:	5f49      	ldrsh	r1, [r1, r5]
 8017b5c:	f000 fca6 	bl	80184ac <_read_r>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	db03      	blt.n	8017b6c <__sread+0x18>
 8017b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8017b66:	181b      	adds	r3, r3, r0
 8017b68:	6563      	str	r3, [r4, #84]	; 0x54
 8017b6a:	bd70      	pop	{r4, r5, r6, pc}
 8017b6c:	89a3      	ldrh	r3, [r4, #12]
 8017b6e:	4a02      	ldr	r2, [pc, #8]	; (8017b78 <__sread+0x24>)
 8017b70:	4013      	ands	r3, r2
 8017b72:	81a3      	strh	r3, [r4, #12]
 8017b74:	e7f9      	b.n	8017b6a <__sread+0x16>
 8017b76:	46c0      	nop			; (mov r8, r8)
 8017b78:	ffffefff 	.word	0xffffefff

08017b7c <__seofread>:
 8017b7c:	2000      	movs	r0, #0
 8017b7e:	4770      	bx	lr

08017b80 <__swrite>:
 8017b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b82:	001f      	movs	r7, r3
 8017b84:	898b      	ldrh	r3, [r1, #12]
 8017b86:	0005      	movs	r5, r0
 8017b88:	000c      	movs	r4, r1
 8017b8a:	0016      	movs	r6, r2
 8017b8c:	05db      	lsls	r3, r3, #23
 8017b8e:	d505      	bpl.n	8017b9c <__swrite+0x1c>
 8017b90:	230e      	movs	r3, #14
 8017b92:	5ec9      	ldrsh	r1, [r1, r3]
 8017b94:	2200      	movs	r2, #0
 8017b96:	2302      	movs	r3, #2
 8017b98:	f000 f930 	bl	8017dfc <_lseek_r>
 8017b9c:	89a3      	ldrh	r3, [r4, #12]
 8017b9e:	4a05      	ldr	r2, [pc, #20]	; (8017bb4 <__swrite+0x34>)
 8017ba0:	0028      	movs	r0, r5
 8017ba2:	4013      	ands	r3, r2
 8017ba4:	81a3      	strh	r3, [r4, #12]
 8017ba6:	0032      	movs	r2, r6
 8017ba8:	230e      	movs	r3, #14
 8017baa:	5ee1      	ldrsh	r1, [r4, r3]
 8017bac:	003b      	movs	r3, r7
 8017bae:	f000 f8cb 	bl	8017d48 <_write_r>
 8017bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bb4:	ffffefff 	.word	0xffffefff

08017bb8 <__sseek>:
 8017bb8:	b570      	push	{r4, r5, r6, lr}
 8017bba:	000c      	movs	r4, r1
 8017bbc:	250e      	movs	r5, #14
 8017bbe:	5f49      	ldrsh	r1, [r1, r5]
 8017bc0:	f000 f91c 	bl	8017dfc <_lseek_r>
 8017bc4:	89a3      	ldrh	r3, [r4, #12]
 8017bc6:	1c42      	adds	r2, r0, #1
 8017bc8:	d103      	bne.n	8017bd2 <__sseek+0x1a>
 8017bca:	4a05      	ldr	r2, [pc, #20]	; (8017be0 <__sseek+0x28>)
 8017bcc:	4013      	ands	r3, r2
 8017bce:	81a3      	strh	r3, [r4, #12]
 8017bd0:	bd70      	pop	{r4, r5, r6, pc}
 8017bd2:	2280      	movs	r2, #128	; 0x80
 8017bd4:	0152      	lsls	r2, r2, #5
 8017bd6:	4313      	orrs	r3, r2
 8017bd8:	81a3      	strh	r3, [r4, #12]
 8017bda:	6560      	str	r0, [r4, #84]	; 0x54
 8017bdc:	e7f8      	b.n	8017bd0 <__sseek+0x18>
 8017bde:	46c0      	nop			; (mov r8, r8)
 8017be0:	ffffefff 	.word	0xffffefff

08017be4 <__sclose>:
 8017be4:	b510      	push	{r4, lr}
 8017be6:	230e      	movs	r3, #14
 8017be8:	5ec9      	ldrsh	r1, [r1, r3]
 8017bea:	f000 f8c1 	bl	8017d70 <_close_r>
 8017bee:	bd10      	pop	{r4, pc}

08017bf0 <strncmp>:
 8017bf0:	b530      	push	{r4, r5, lr}
 8017bf2:	0005      	movs	r5, r0
 8017bf4:	1e10      	subs	r0, r2, #0
 8017bf6:	d008      	beq.n	8017c0a <strncmp+0x1a>
 8017bf8:	2400      	movs	r4, #0
 8017bfa:	3a01      	subs	r2, #1
 8017bfc:	5d2b      	ldrb	r3, [r5, r4]
 8017bfe:	5d08      	ldrb	r0, [r1, r4]
 8017c00:	4283      	cmp	r3, r0
 8017c02:	d101      	bne.n	8017c08 <strncmp+0x18>
 8017c04:	4294      	cmp	r4, r2
 8017c06:	d101      	bne.n	8017c0c <strncmp+0x1c>
 8017c08:	1a18      	subs	r0, r3, r0
 8017c0a:	bd30      	pop	{r4, r5, pc}
 8017c0c:	3401      	adds	r4, #1
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d1f4      	bne.n	8017bfc <strncmp+0xc>
 8017c12:	e7f9      	b.n	8017c08 <strncmp+0x18>

08017c14 <_strtoul_l.constprop.0>:
 8017c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c16:	b087      	sub	sp, #28
 8017c18:	9202      	str	r2, [sp, #8]
 8017c1a:	4a42      	ldr	r2, [pc, #264]	; (8017d24 <_strtoul_l.constprop.0+0x110>)
 8017c1c:	001e      	movs	r6, r3
 8017c1e:	9101      	str	r1, [sp, #4]
 8017c20:	000b      	movs	r3, r1
 8017c22:	4694      	mov	ip, r2
 8017c24:	2108      	movs	r1, #8
 8017c26:	9005      	str	r0, [sp, #20]
 8017c28:	001a      	movs	r2, r3
 8017c2a:	4660      	mov	r0, ip
 8017c2c:	7814      	ldrb	r4, [r2, #0]
 8017c2e:	3301      	adds	r3, #1
 8017c30:	5d00      	ldrb	r0, [r0, r4]
 8017c32:	001d      	movs	r5, r3
 8017c34:	0007      	movs	r7, r0
 8017c36:	400f      	ands	r7, r1
 8017c38:	4208      	tst	r0, r1
 8017c3a:	d1f5      	bne.n	8017c28 <_strtoul_l.constprop.0+0x14>
 8017c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8017c3e:	d13a      	bne.n	8017cb6 <_strtoul_l.constprop.0+0xa2>
 8017c40:	2701      	movs	r7, #1
 8017c42:	781c      	ldrb	r4, [r3, #0]
 8017c44:	1c95      	adds	r5, r2, #2
 8017c46:	2e00      	cmp	r6, #0
 8017c48:	d067      	beq.n	8017d1a <_strtoul_l.constprop.0+0x106>
 8017c4a:	2e10      	cmp	r6, #16
 8017c4c:	d109      	bne.n	8017c62 <_strtoul_l.constprop.0+0x4e>
 8017c4e:	2c30      	cmp	r4, #48	; 0x30
 8017c50:	d107      	bne.n	8017c62 <_strtoul_l.constprop.0+0x4e>
 8017c52:	2220      	movs	r2, #32
 8017c54:	782b      	ldrb	r3, [r5, #0]
 8017c56:	4393      	bics	r3, r2
 8017c58:	2b58      	cmp	r3, #88	; 0x58
 8017c5a:	d159      	bne.n	8017d10 <_strtoul_l.constprop.0+0xfc>
 8017c5c:	2610      	movs	r6, #16
 8017c5e:	786c      	ldrb	r4, [r5, #1]
 8017c60:	3502      	adds	r5, #2
 8017c62:	2001      	movs	r0, #1
 8017c64:	0031      	movs	r1, r6
 8017c66:	4240      	negs	r0, r0
 8017c68:	f7e8 fa7e 	bl	8000168 <__udivsi3>
 8017c6c:	9003      	str	r0, [sp, #12]
 8017c6e:	2001      	movs	r0, #1
 8017c70:	0031      	movs	r1, r6
 8017c72:	4240      	negs	r0, r0
 8017c74:	f7e8 fafe 	bl	8000274 <__aeabi_uidivmod>
 8017c78:	2300      	movs	r3, #0
 8017c7a:	9104      	str	r1, [sp, #16]
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	2201      	movs	r2, #1
 8017c80:	0018      	movs	r0, r3
 8017c82:	468c      	mov	ip, r1
 8017c84:	4252      	negs	r2, r2
 8017c86:	0021      	movs	r1, r4
 8017c88:	3930      	subs	r1, #48	; 0x30
 8017c8a:	2909      	cmp	r1, #9
 8017c8c:	d818      	bhi.n	8017cc0 <_strtoul_l.constprop.0+0xac>
 8017c8e:	000c      	movs	r4, r1
 8017c90:	42a6      	cmp	r6, r4
 8017c92:	dd23      	ble.n	8017cdc <_strtoul_l.constprop.0+0xc8>
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	db1f      	blt.n	8017cd8 <_strtoul_l.constprop.0+0xc4>
 8017c98:	9903      	ldr	r1, [sp, #12]
 8017c9a:	0013      	movs	r3, r2
 8017c9c:	4281      	cmp	r1, r0
 8017c9e:	d307      	bcc.n	8017cb0 <_strtoul_l.constprop.0+0x9c>
 8017ca0:	d103      	bne.n	8017caa <_strtoul_l.constprop.0+0x96>
 8017ca2:	9904      	ldr	r1, [sp, #16]
 8017ca4:	0013      	movs	r3, r2
 8017ca6:	42a1      	cmp	r1, r4
 8017ca8:	db02      	blt.n	8017cb0 <_strtoul_l.constprop.0+0x9c>
 8017caa:	4663      	mov	r3, ip
 8017cac:	4370      	muls	r0, r6
 8017cae:	1820      	adds	r0, r4, r0
 8017cb0:	782c      	ldrb	r4, [r5, #0]
 8017cb2:	3501      	adds	r5, #1
 8017cb4:	e7e7      	b.n	8017c86 <_strtoul_l.constprop.0+0x72>
 8017cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8017cb8:	d1c5      	bne.n	8017c46 <_strtoul_l.constprop.0+0x32>
 8017cba:	781c      	ldrb	r4, [r3, #0]
 8017cbc:	1c95      	adds	r5, r2, #2
 8017cbe:	e7c2      	b.n	8017c46 <_strtoul_l.constprop.0+0x32>
 8017cc0:	0021      	movs	r1, r4
 8017cc2:	3941      	subs	r1, #65	; 0x41
 8017cc4:	2919      	cmp	r1, #25
 8017cc6:	d801      	bhi.n	8017ccc <_strtoul_l.constprop.0+0xb8>
 8017cc8:	3c37      	subs	r4, #55	; 0x37
 8017cca:	e7e1      	b.n	8017c90 <_strtoul_l.constprop.0+0x7c>
 8017ccc:	0021      	movs	r1, r4
 8017cce:	3961      	subs	r1, #97	; 0x61
 8017cd0:	2919      	cmp	r1, #25
 8017cd2:	d803      	bhi.n	8017cdc <_strtoul_l.constprop.0+0xc8>
 8017cd4:	3c57      	subs	r4, #87	; 0x57
 8017cd6:	e7db      	b.n	8017c90 <_strtoul_l.constprop.0+0x7c>
 8017cd8:	0013      	movs	r3, r2
 8017cda:	e7e9      	b.n	8017cb0 <_strtoul_l.constprop.0+0x9c>
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	da09      	bge.n	8017cf4 <_strtoul_l.constprop.0+0xe0>
 8017ce0:	2322      	movs	r3, #34	; 0x22
 8017ce2:	2001      	movs	r0, #1
 8017ce4:	9a05      	ldr	r2, [sp, #20]
 8017ce6:	4240      	negs	r0, r0
 8017ce8:	6013      	str	r3, [r2, #0]
 8017cea:	9b02      	ldr	r3, [sp, #8]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d109      	bne.n	8017d04 <_strtoul_l.constprop.0+0xf0>
 8017cf0:	b007      	add	sp, #28
 8017cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cf4:	2f00      	cmp	r7, #0
 8017cf6:	d000      	beq.n	8017cfa <_strtoul_l.constprop.0+0xe6>
 8017cf8:	4240      	negs	r0, r0
 8017cfa:	9a02      	ldr	r2, [sp, #8]
 8017cfc:	2a00      	cmp	r2, #0
 8017cfe:	d0f7      	beq.n	8017cf0 <_strtoul_l.constprop.0+0xdc>
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <_strtoul_l.constprop.0+0xf4>
 8017d04:	1e6b      	subs	r3, r5, #1
 8017d06:	9301      	str	r3, [sp, #4]
 8017d08:	9b02      	ldr	r3, [sp, #8]
 8017d0a:	9a01      	ldr	r2, [sp, #4]
 8017d0c:	601a      	str	r2, [r3, #0]
 8017d0e:	e7ef      	b.n	8017cf0 <_strtoul_l.constprop.0+0xdc>
 8017d10:	2430      	movs	r4, #48	; 0x30
 8017d12:	2e00      	cmp	r6, #0
 8017d14:	d1a5      	bne.n	8017c62 <_strtoul_l.constprop.0+0x4e>
 8017d16:	3608      	adds	r6, #8
 8017d18:	e7a3      	b.n	8017c62 <_strtoul_l.constprop.0+0x4e>
 8017d1a:	2c30      	cmp	r4, #48	; 0x30
 8017d1c:	d099      	beq.n	8017c52 <_strtoul_l.constprop.0+0x3e>
 8017d1e:	260a      	movs	r6, #10
 8017d20:	e79f      	b.n	8017c62 <_strtoul_l.constprop.0+0x4e>
 8017d22:	46c0      	nop			; (mov r8, r8)
 8017d24:	0801aa8c 	.word	0x0801aa8c

08017d28 <_strtoul_r>:
 8017d28:	b510      	push	{r4, lr}
 8017d2a:	f7ff ff73 	bl	8017c14 <_strtoul_l.constprop.0>
 8017d2e:	bd10      	pop	{r4, pc}

08017d30 <strtoul>:
 8017d30:	b510      	push	{r4, lr}
 8017d32:	0013      	movs	r3, r2
 8017d34:	000a      	movs	r2, r1
 8017d36:	0001      	movs	r1, r0
 8017d38:	4802      	ldr	r0, [pc, #8]	; (8017d44 <strtoul+0x14>)
 8017d3a:	6800      	ldr	r0, [r0, #0]
 8017d3c:	f7ff ff6a 	bl	8017c14 <_strtoul_l.constprop.0>
 8017d40:	bd10      	pop	{r4, pc}
 8017d42:	46c0      	nop			; (mov r8, r8)
 8017d44:	20000244 	.word	0x20000244

08017d48 <_write_r>:
 8017d48:	b570      	push	{r4, r5, r6, lr}
 8017d4a:	0004      	movs	r4, r0
 8017d4c:	0008      	movs	r0, r1
 8017d4e:	0011      	movs	r1, r2
 8017d50:	001a      	movs	r2, r3
 8017d52:	2300      	movs	r3, #0
 8017d54:	4d05      	ldr	r5, [pc, #20]	; (8017d6c <_write_r+0x24>)
 8017d56:	602b      	str	r3, [r5, #0]
 8017d58:	f7f3 fefa 	bl	800bb50 <_write>
 8017d5c:	1c43      	adds	r3, r0, #1
 8017d5e:	d103      	bne.n	8017d68 <_write_r+0x20>
 8017d60:	682b      	ldr	r3, [r5, #0]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d000      	beq.n	8017d68 <_write_r+0x20>
 8017d66:	6023      	str	r3, [r4, #0]
 8017d68:	bd70      	pop	{r4, r5, r6, pc}
 8017d6a:	46c0      	nop			; (mov r8, r8)
 8017d6c:	20001dd8 	.word	0x20001dd8

08017d70 <_close_r>:
 8017d70:	2300      	movs	r3, #0
 8017d72:	b570      	push	{r4, r5, r6, lr}
 8017d74:	4d06      	ldr	r5, [pc, #24]	; (8017d90 <_close_r+0x20>)
 8017d76:	0004      	movs	r4, r0
 8017d78:	0008      	movs	r0, r1
 8017d7a:	602b      	str	r3, [r5, #0]
 8017d7c:	f000 fcbc 	bl	80186f8 <_close>
 8017d80:	1c43      	adds	r3, r0, #1
 8017d82:	d103      	bne.n	8017d8c <_close_r+0x1c>
 8017d84:	682b      	ldr	r3, [r5, #0]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d000      	beq.n	8017d8c <_close_r+0x1c>
 8017d8a:	6023      	str	r3, [r4, #0]
 8017d8c:	bd70      	pop	{r4, r5, r6, pc}
 8017d8e:	46c0      	nop			; (mov r8, r8)
 8017d90:	20001dd8 	.word	0x20001dd8

08017d94 <__env_lock>:
 8017d94:	b510      	push	{r4, lr}
 8017d96:	4802      	ldr	r0, [pc, #8]	; (8017da0 <__env_lock+0xc>)
 8017d98:	f7ff fd64 	bl	8017864 <__retarget_lock_acquire_recursive>
 8017d9c:	bd10      	pop	{r4, pc}
 8017d9e:	46c0      	nop			; (mov r8, r8)
 8017da0:	20001dd0 	.word	0x20001dd0

08017da4 <__env_unlock>:
 8017da4:	b510      	push	{r4, lr}
 8017da6:	4802      	ldr	r0, [pc, #8]	; (8017db0 <__env_unlock+0xc>)
 8017da8:	f7ff fd5e 	bl	8017868 <__retarget_lock_release_recursive>
 8017dac:	bd10      	pop	{r4, pc}
 8017dae:	46c0      	nop			; (mov r8, r8)
 8017db0:	20001dd0 	.word	0x20001dd0

08017db4 <_fstat_r>:
 8017db4:	2300      	movs	r3, #0
 8017db6:	b570      	push	{r4, r5, r6, lr}
 8017db8:	4d06      	ldr	r5, [pc, #24]	; (8017dd4 <_fstat_r+0x20>)
 8017dba:	0004      	movs	r4, r0
 8017dbc:	0008      	movs	r0, r1
 8017dbe:	0011      	movs	r1, r2
 8017dc0:	602b      	str	r3, [r5, #0]
 8017dc2:	f000 fca1 	bl	8018708 <_fstat>
 8017dc6:	1c43      	adds	r3, r0, #1
 8017dc8:	d103      	bne.n	8017dd2 <_fstat_r+0x1e>
 8017dca:	682b      	ldr	r3, [r5, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d000      	beq.n	8017dd2 <_fstat_r+0x1e>
 8017dd0:	6023      	str	r3, [r4, #0]
 8017dd2:	bd70      	pop	{r4, r5, r6, pc}
 8017dd4:	20001dd8 	.word	0x20001dd8

08017dd8 <_isatty_r>:
 8017dd8:	2300      	movs	r3, #0
 8017dda:	b570      	push	{r4, r5, r6, lr}
 8017ddc:	4d06      	ldr	r5, [pc, #24]	; (8017df8 <_isatty_r+0x20>)
 8017dde:	0004      	movs	r4, r0
 8017de0:	0008      	movs	r0, r1
 8017de2:	602b      	str	r3, [r5, #0]
 8017de4:	f000 fca0 	bl	8018728 <_isatty>
 8017de8:	1c43      	adds	r3, r0, #1
 8017dea:	d103      	bne.n	8017df4 <_isatty_r+0x1c>
 8017dec:	682b      	ldr	r3, [r5, #0]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d000      	beq.n	8017df4 <_isatty_r+0x1c>
 8017df2:	6023      	str	r3, [r4, #0]
 8017df4:	bd70      	pop	{r4, r5, r6, pc}
 8017df6:	46c0      	nop			; (mov r8, r8)
 8017df8:	20001dd8 	.word	0x20001dd8

08017dfc <_lseek_r>:
 8017dfc:	b570      	push	{r4, r5, r6, lr}
 8017dfe:	0004      	movs	r4, r0
 8017e00:	0008      	movs	r0, r1
 8017e02:	0011      	movs	r1, r2
 8017e04:	001a      	movs	r2, r3
 8017e06:	2300      	movs	r3, #0
 8017e08:	4d05      	ldr	r5, [pc, #20]	; (8017e20 <_lseek_r+0x24>)
 8017e0a:	602b      	str	r3, [r5, #0]
 8017e0c:	f000 fc9c 	bl	8018748 <_lseek>
 8017e10:	1c43      	adds	r3, r0, #1
 8017e12:	d103      	bne.n	8017e1c <_lseek_r+0x20>
 8017e14:	682b      	ldr	r3, [r5, #0]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d000      	beq.n	8017e1c <_lseek_r+0x20>
 8017e1a:	6023      	str	r3, [r4, #0]
 8017e1c:	bd70      	pop	{r4, r5, r6, pc}
 8017e1e:	46c0      	nop			; (mov r8, r8)
 8017e20:	20001dd8 	.word	0x20001dd8

08017e24 <_malloc_usable_size_r>:
 8017e24:	1f0b      	subs	r3, r1, #4
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	1f18      	subs	r0, r3, #4
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	da01      	bge.n	8017e32 <_malloc_usable_size_r+0xe>
 8017e2e:	580b      	ldr	r3, [r1, r0]
 8017e30:	18c0      	adds	r0, r0, r3
 8017e32:	4770      	bx	lr

08017e34 <_sungetc_r>:
 8017e34:	b570      	push	{r4, r5, r6, lr}
 8017e36:	0014      	movs	r4, r2
 8017e38:	1c4b      	adds	r3, r1, #1
 8017e3a:	d103      	bne.n	8017e44 <_sungetc_r+0x10>
 8017e3c:	2501      	movs	r5, #1
 8017e3e:	426d      	negs	r5, r5
 8017e40:	0028      	movs	r0, r5
 8017e42:	bd70      	pop	{r4, r5, r6, pc}
 8017e44:	8993      	ldrh	r3, [r2, #12]
 8017e46:	2220      	movs	r2, #32
 8017e48:	4393      	bics	r3, r2
 8017e4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017e4c:	81a3      	strh	r3, [r4, #12]
 8017e4e:	b2ce      	uxtb	r6, r1
 8017e50:	6863      	ldr	r3, [r4, #4]
 8017e52:	b2cd      	uxtb	r5, r1
 8017e54:	2a00      	cmp	r2, #0
 8017e56:	d010      	beq.n	8017e7a <_sungetc_r+0x46>
 8017e58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	dd07      	ble.n	8017e6e <_sungetc_r+0x3a>
 8017e5e:	6823      	ldr	r3, [r4, #0]
 8017e60:	3b01      	subs	r3, #1
 8017e62:	6023      	str	r3, [r4, #0]
 8017e64:	701e      	strb	r6, [r3, #0]
 8017e66:	6863      	ldr	r3, [r4, #4]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	6063      	str	r3, [r4, #4]
 8017e6c:	e7e8      	b.n	8017e40 <_sungetc_r+0xc>
 8017e6e:	0021      	movs	r1, r4
 8017e70:	f000 fbfe 	bl	8018670 <__submore>
 8017e74:	2800      	cmp	r0, #0
 8017e76:	d0f2      	beq.n	8017e5e <_sungetc_r+0x2a>
 8017e78:	e7e0      	b.n	8017e3c <_sungetc_r+0x8>
 8017e7a:	6921      	ldr	r1, [r4, #16]
 8017e7c:	6822      	ldr	r2, [r4, #0]
 8017e7e:	2900      	cmp	r1, #0
 8017e80:	d007      	beq.n	8017e92 <_sungetc_r+0x5e>
 8017e82:	4291      	cmp	r1, r2
 8017e84:	d205      	bcs.n	8017e92 <_sungetc_r+0x5e>
 8017e86:	1e51      	subs	r1, r2, #1
 8017e88:	7808      	ldrb	r0, [r1, #0]
 8017e8a:	42a8      	cmp	r0, r5
 8017e8c:	d101      	bne.n	8017e92 <_sungetc_r+0x5e>
 8017e8e:	6021      	str	r1, [r4, #0]
 8017e90:	e7ea      	b.n	8017e68 <_sungetc_r+0x34>
 8017e92:	6423      	str	r3, [r4, #64]	; 0x40
 8017e94:	0023      	movs	r3, r4
 8017e96:	3344      	adds	r3, #68	; 0x44
 8017e98:	6363      	str	r3, [r4, #52]	; 0x34
 8017e9a:	2303      	movs	r3, #3
 8017e9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e9e:	0023      	movs	r3, r4
 8017ea0:	3346      	adds	r3, #70	; 0x46
 8017ea2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017ea4:	701e      	strb	r6, [r3, #0]
 8017ea6:	6023      	str	r3, [r4, #0]
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	e7de      	b.n	8017e6a <_sungetc_r+0x36>

08017eac <__ssrefill_r>:
 8017eac:	b510      	push	{r4, lr}
 8017eae:	000c      	movs	r4, r1
 8017eb0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017eb2:	2900      	cmp	r1, #0
 8017eb4:	d00e      	beq.n	8017ed4 <__ssrefill_r+0x28>
 8017eb6:	0023      	movs	r3, r4
 8017eb8:	3344      	adds	r3, #68	; 0x44
 8017eba:	4299      	cmp	r1, r3
 8017ebc:	d001      	beq.n	8017ec2 <__ssrefill_r+0x16>
 8017ebe:	f7fe faf1 	bl	80164a4 <_free_r>
 8017ec2:	2000      	movs	r0, #0
 8017ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ec6:	6360      	str	r0, [r4, #52]	; 0x34
 8017ec8:	6063      	str	r3, [r4, #4]
 8017eca:	4283      	cmp	r3, r0
 8017ecc:	d002      	beq.n	8017ed4 <__ssrefill_r+0x28>
 8017ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017ed0:	6023      	str	r3, [r4, #0]
 8017ed2:	bd10      	pop	{r4, pc}
 8017ed4:	6923      	ldr	r3, [r4, #16]
 8017ed6:	2001      	movs	r0, #1
 8017ed8:	6023      	str	r3, [r4, #0]
 8017eda:	2300      	movs	r3, #0
 8017edc:	89a2      	ldrh	r2, [r4, #12]
 8017ede:	6063      	str	r3, [r4, #4]
 8017ee0:	3320      	adds	r3, #32
 8017ee2:	4313      	orrs	r3, r2
 8017ee4:	81a3      	strh	r3, [r4, #12]
 8017ee6:	4240      	negs	r0, r0
 8017ee8:	e7f3      	b.n	8017ed2 <__ssrefill_r+0x26>
	...

08017eec <__ssvfiscanf_r>:
 8017eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017eee:	4cb8      	ldr	r4, [pc, #736]	; (80181d0 <__ssvfiscanf_r+0x2e4>)
 8017ef0:	0006      	movs	r6, r0
 8017ef2:	44a5      	add	sp, r4
 8017ef4:	000c      	movs	r4, r1
 8017ef6:	2100      	movs	r1, #0
 8017ef8:	9146      	str	r1, [sp, #280]	; 0x118
 8017efa:	9147      	str	r1, [sp, #284]	; 0x11c
 8017efc:	a903      	add	r1, sp, #12
 8017efe:	9148      	str	r1, [sp, #288]	; 0x120
 8017f00:	21be      	movs	r1, #190	; 0xbe
 8017f02:	48b4      	ldr	r0, [pc, #720]	; (80181d4 <__ssvfiscanf_r+0x2e8>)
 8017f04:	0049      	lsls	r1, r1, #1
 8017f06:	ad43      	add	r5, sp, #268	; 0x10c
 8017f08:	5068      	str	r0, [r5, r1]
 8017f0a:	25c0      	movs	r5, #192	; 0xc0
 8017f0c:	49b2      	ldr	r1, [pc, #712]	; (80181d8 <__ssvfiscanf_r+0x2ec>)
 8017f0e:	006d      	lsls	r5, r5, #1
 8017f10:	a843      	add	r0, sp, #268	; 0x10c
 8017f12:	5141      	str	r1, [r0, r5]
 8017f14:	9302      	str	r3, [sp, #8]
 8017f16:	7813      	ldrb	r3, [r2, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d100      	bne.n	8017f1e <__ssvfiscanf_r+0x32>
 8017f1c:	e155      	b.n	80181ca <__ssvfiscanf_r+0x2de>
 8017f1e:	49af      	ldr	r1, [pc, #700]	; (80181dc <__ssvfiscanf_r+0x2f0>)
 8017f20:	2508      	movs	r5, #8
 8017f22:	5cc8      	ldrb	r0, [r1, r3]
 8017f24:	2108      	movs	r1, #8
 8017f26:	1c57      	adds	r7, r2, #1
 8017f28:	4001      	ands	r1, r0
 8017f2a:	4228      	tst	r0, r5
 8017f2c:	d020      	beq.n	8017f70 <__ssvfiscanf_r+0x84>
 8017f2e:	6863      	ldr	r3, [r4, #4]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	dd12      	ble.n	8017f5a <__ssvfiscanf_r+0x6e>
 8017f34:	6823      	ldr	r3, [r4, #0]
 8017f36:	49a9      	ldr	r1, [pc, #676]	; (80181dc <__ssvfiscanf_r+0x2f0>)
 8017f38:	781a      	ldrb	r2, [r3, #0]
 8017f3a:	5c8a      	ldrb	r2, [r1, r2]
 8017f3c:	2108      	movs	r1, #8
 8017f3e:	420a      	tst	r2, r1
 8017f40:	d101      	bne.n	8017f46 <__ssvfiscanf_r+0x5a>
 8017f42:	003a      	movs	r2, r7
 8017f44:	e7e7      	b.n	8017f16 <__ssvfiscanf_r+0x2a>
 8017f46:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8017f48:	3301      	adds	r3, #1
 8017f4a:	9200      	str	r2, [sp, #0]
 8017f4c:	3201      	adds	r2, #1
 8017f4e:	9247      	str	r2, [sp, #284]	; 0x11c
 8017f50:	6862      	ldr	r2, [r4, #4]
 8017f52:	6023      	str	r3, [r4, #0]
 8017f54:	3a01      	subs	r2, #1
 8017f56:	6062      	str	r2, [r4, #4]
 8017f58:	e7e9      	b.n	8017f2e <__ssvfiscanf_r+0x42>
 8017f5a:	22c0      	movs	r2, #192	; 0xc0
 8017f5c:	ab43      	add	r3, sp, #268	; 0x10c
 8017f5e:	0052      	lsls	r2, r2, #1
 8017f60:	589b      	ldr	r3, [r3, r2]
 8017f62:	0021      	movs	r1, r4
 8017f64:	0030      	movs	r0, r6
 8017f66:	9300      	str	r3, [sp, #0]
 8017f68:	4798      	blx	r3
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	d0e2      	beq.n	8017f34 <__ssvfiscanf_r+0x48>
 8017f6e:	e7e8      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 8017f70:	001d      	movs	r5, r3
 8017f72:	2b25      	cmp	r3, #37	; 0x25
 8017f74:	d164      	bne.n	8018040 <__ssvfiscanf_r+0x154>
 8017f76:	9145      	str	r1, [sp, #276]	; 0x114
 8017f78:	9143      	str	r1, [sp, #268]	; 0x10c
 8017f7a:	7853      	ldrb	r3, [r2, #1]
 8017f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8017f7e:	d102      	bne.n	8017f86 <__ssvfiscanf_r+0x9a>
 8017f80:	3b1a      	subs	r3, #26
 8017f82:	9343      	str	r3, [sp, #268]	; 0x10c
 8017f84:	1c97      	adds	r7, r2, #2
 8017f86:	003d      	movs	r5, r7
 8017f88:	220a      	movs	r2, #10
 8017f8a:	7829      	ldrb	r1, [r5, #0]
 8017f8c:	1c6b      	adds	r3, r5, #1
 8017f8e:	9300      	str	r3, [sp, #0]
 8017f90:	000b      	movs	r3, r1
 8017f92:	3b30      	subs	r3, #48	; 0x30
 8017f94:	2b09      	cmp	r3, #9
 8017f96:	d91f      	bls.n	8017fd8 <__ssvfiscanf_r+0xec>
 8017f98:	4f91      	ldr	r7, [pc, #580]	; (80181e0 <__ssvfiscanf_r+0x2f4>)
 8017f9a:	2203      	movs	r2, #3
 8017f9c:	0038      	movs	r0, r7
 8017f9e:	f7ff fcd1 	bl	8017944 <memchr>
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	d007      	beq.n	8017fb6 <__ssvfiscanf_r+0xca>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	1bc0      	subs	r0, r0, r7
 8017faa:	4083      	lsls	r3, r0
 8017fac:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8017fae:	9d00      	ldr	r5, [sp, #0]
 8017fb0:	4313      	orrs	r3, r2
 8017fb2:	9201      	str	r2, [sp, #4]
 8017fb4:	9343      	str	r3, [sp, #268]	; 0x10c
 8017fb6:	1c6f      	adds	r7, r5, #1
 8017fb8:	782d      	ldrb	r5, [r5, #0]
 8017fba:	2d78      	cmp	r5, #120	; 0x78
 8017fbc:	d807      	bhi.n	8017fce <__ssvfiscanf_r+0xe2>
 8017fbe:	2d57      	cmp	r5, #87	; 0x57
 8017fc0:	d812      	bhi.n	8017fe8 <__ssvfiscanf_r+0xfc>
 8017fc2:	2d25      	cmp	r5, #37	; 0x25
 8017fc4:	d03c      	beq.n	8018040 <__ssvfiscanf_r+0x154>
 8017fc6:	d836      	bhi.n	8018036 <__ssvfiscanf_r+0x14a>
 8017fc8:	2d00      	cmp	r5, #0
 8017fca:	d100      	bne.n	8017fce <__ssvfiscanf_r+0xe2>
 8017fcc:	e0fa      	b.n	80181c4 <__ssvfiscanf_r+0x2d8>
 8017fce:	2303      	movs	r3, #3
 8017fd0:	9349      	str	r3, [sp, #292]	; 0x124
 8017fd2:	3307      	adds	r3, #7
 8017fd4:	9344      	str	r3, [sp, #272]	; 0x110
 8017fd6:	e06d      	b.n	80180b4 <__ssvfiscanf_r+0x1c8>
 8017fd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017fda:	9d00      	ldr	r5, [sp, #0]
 8017fdc:	9301      	str	r3, [sp, #4]
 8017fde:	4353      	muls	r3, r2
 8017fe0:	3b30      	subs	r3, #48	; 0x30
 8017fe2:	185b      	adds	r3, r3, r1
 8017fe4:	9345      	str	r3, [sp, #276]	; 0x114
 8017fe6:	e7d0      	b.n	8017f8a <__ssvfiscanf_r+0x9e>
 8017fe8:	0028      	movs	r0, r5
 8017fea:	3858      	subs	r0, #88	; 0x58
 8017fec:	2820      	cmp	r0, #32
 8017fee:	d8ee      	bhi.n	8017fce <__ssvfiscanf_r+0xe2>
 8017ff0:	f7e8 f8a6 	bl	8000140 <__gnu_thumb1_case_shi>
 8017ff4:	ffed0051 	.word	0xffed0051
 8017ff8:	0087ffed 	.word	0x0087ffed
 8017ffc:	ffedffed 	.word	0xffedffed
 8018000:	ffedffed 	.word	0xffedffed
 8018004:	ffedffed 	.word	0xffedffed
 8018008:	0095ffed 	.word	0x0095ffed
 801800c:	0024007d 	.word	0x0024007d
 8018010:	00240024 	.word	0x00240024
 8018014:	007fffed 	.word	0x007fffed
 8018018:	ffedffed 	.word	0xffedffed
 801801c:	ffedffed 	.word	0xffedffed
 8018020:	0083009f 	.word	0x0083009f
 8018024:	ffed004b 	.word	0xffed004b
 8018028:	009dffed 	.word	0x009dffed
 801802c:	007dffed 	.word	0x007dffed
 8018030:	ffedffed 	.word	0xffedffed
 8018034:	0051      	.short	0x0051
 8018036:	3d45      	subs	r5, #69	; 0x45
 8018038:	2d02      	cmp	r5, #2
 801803a:	d8c8      	bhi.n	8017fce <__ssvfiscanf_r+0xe2>
 801803c:	2305      	movs	r3, #5
 801803e:	e06c      	b.n	801811a <__ssvfiscanf_r+0x22e>
 8018040:	6863      	ldr	r3, [r4, #4]
 8018042:	2b00      	cmp	r3, #0
 8018044:	dd0e      	ble.n	8018064 <__ssvfiscanf_r+0x178>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	781a      	ldrb	r2, [r3, #0]
 801804a:	42aa      	cmp	r2, r5
 801804c:	d000      	beq.n	8018050 <__ssvfiscanf_r+0x164>
 801804e:	e0bc      	b.n	80181ca <__ssvfiscanf_r+0x2de>
 8018050:	3301      	adds	r3, #1
 8018052:	6862      	ldr	r2, [r4, #4]
 8018054:	6023      	str	r3, [r4, #0]
 8018056:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018058:	3a01      	subs	r2, #1
 801805a:	9300      	str	r3, [sp, #0]
 801805c:	3301      	adds	r3, #1
 801805e:	6062      	str	r2, [r4, #4]
 8018060:	9347      	str	r3, [sp, #284]	; 0x11c
 8018062:	e76e      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 8018064:	22c0      	movs	r2, #192	; 0xc0
 8018066:	ab43      	add	r3, sp, #268	; 0x10c
 8018068:	0052      	lsls	r2, r2, #1
 801806a:	589b      	ldr	r3, [r3, r2]
 801806c:	0021      	movs	r1, r4
 801806e:	0030      	movs	r0, r6
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	4798      	blx	r3
 8018074:	2800      	cmp	r0, #0
 8018076:	d0e6      	beq.n	8018046 <__ssvfiscanf_r+0x15a>
 8018078:	9846      	ldr	r0, [sp, #280]	; 0x118
 801807a:	2800      	cmp	r0, #0
 801807c:	d000      	beq.n	8018080 <__ssvfiscanf_r+0x194>
 801807e:	e09d      	b.n	80181bc <__ssvfiscanf_r+0x2d0>
 8018080:	3801      	subs	r0, #1
 8018082:	23a5      	movs	r3, #165	; 0xa5
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	449d      	add	sp, r3
 8018088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801808a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801808c:	9300      	str	r3, [sp, #0]
 801808e:	2320      	movs	r3, #32
 8018090:	9a00      	ldr	r2, [sp, #0]
 8018092:	4313      	orrs	r3, r2
 8018094:	9343      	str	r3, [sp, #268]	; 0x10c
 8018096:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018098:	9300      	str	r3, [sp, #0]
 801809a:	2380      	movs	r3, #128	; 0x80
 801809c:	9a00      	ldr	r2, [sp, #0]
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	4313      	orrs	r3, r2
 80180a2:	9343      	str	r3, [sp, #268]	; 0x10c
 80180a4:	2310      	movs	r3, #16
 80180a6:	9344      	str	r3, [sp, #272]	; 0x110
 80180a8:	236e      	movs	r3, #110	; 0x6e
 80180aa:	42ab      	cmp	r3, r5
 80180ac:	41ad      	sbcs	r5, r5
 80180ae:	426d      	negs	r5, r5
 80180b0:	3503      	adds	r5, #3
 80180b2:	9549      	str	r5, [sp, #292]	; 0x124
 80180b4:	6863      	ldr	r3, [r4, #4]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	dd4a      	ble.n	8018150 <__ssvfiscanf_r+0x264>
 80180ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	065b      	lsls	r3, r3, #25
 80180c0:	d406      	bmi.n	80180d0 <__ssvfiscanf_r+0x1e4>
 80180c2:	6823      	ldr	r3, [r4, #0]
 80180c4:	4945      	ldr	r1, [pc, #276]	; (80181dc <__ssvfiscanf_r+0x2f0>)
 80180c6:	781a      	ldrb	r2, [r3, #0]
 80180c8:	5c8a      	ldrb	r2, [r1, r2]
 80180ca:	2108      	movs	r1, #8
 80180cc:	420a      	tst	r2, r1
 80180ce:	d14a      	bne.n	8018166 <__ssvfiscanf_r+0x27a>
 80180d0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80180d2:	2b02      	cmp	r3, #2
 80180d4:	dc5e      	bgt.n	8018194 <__ssvfiscanf_r+0x2a8>
 80180d6:	0022      	movs	r2, r4
 80180d8:	0030      	movs	r0, r6
 80180da:	ab02      	add	r3, sp, #8
 80180dc:	a943      	add	r1, sp, #268	; 0x10c
 80180de:	f000 f883 	bl	80181e8 <_scanf_chars>
 80180e2:	2801      	cmp	r0, #1
 80180e4:	d071      	beq.n	80181ca <__ssvfiscanf_r+0x2de>
 80180e6:	2802      	cmp	r0, #2
 80180e8:	d000      	beq.n	80180ec <__ssvfiscanf_r+0x200>
 80180ea:	e72a      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 80180ec:	e7c4      	b.n	8018078 <__ssvfiscanf_r+0x18c>
 80180ee:	230a      	movs	r3, #10
 80180f0:	e7d9      	b.n	80180a6 <__ssvfiscanf_r+0x1ba>
 80180f2:	2300      	movs	r3, #0
 80180f4:	2503      	movs	r5, #3
 80180f6:	9344      	str	r3, [sp, #272]	; 0x110
 80180f8:	e7db      	b.n	80180b2 <__ssvfiscanf_r+0x1c6>
 80180fa:	2308      	movs	r3, #8
 80180fc:	2504      	movs	r5, #4
 80180fe:	9344      	str	r3, [sp, #272]	; 0x110
 8018100:	e7d7      	b.n	80180b2 <__ssvfiscanf_r+0x1c6>
 8018102:	0039      	movs	r1, r7
 8018104:	a803      	add	r0, sp, #12
 8018106:	f000 f9e5 	bl	80184d4 <__sccl>
 801810a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801810c:	0007      	movs	r7, r0
 801810e:	9300      	str	r3, [sp, #0]
 8018110:	2340      	movs	r3, #64	; 0x40
 8018112:	9a00      	ldr	r2, [sp, #0]
 8018114:	4313      	orrs	r3, r2
 8018116:	9343      	str	r3, [sp, #268]	; 0x10c
 8018118:	2301      	movs	r3, #1
 801811a:	9349      	str	r3, [sp, #292]	; 0x124
 801811c:	e7ca      	b.n	80180b4 <__ssvfiscanf_r+0x1c8>
 801811e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	2340      	movs	r3, #64	; 0x40
 8018124:	9a00      	ldr	r2, [sp, #0]
 8018126:	4313      	orrs	r3, r2
 8018128:	9343      	str	r3, [sp, #268]	; 0x10c
 801812a:	2300      	movs	r3, #0
 801812c:	e7f5      	b.n	801811a <__ssvfiscanf_r+0x22e>
 801812e:	2302      	movs	r3, #2
 8018130:	e7f3      	b.n	801811a <__ssvfiscanf_r+0x22e>
 8018132:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8018134:	06c3      	lsls	r3, r0, #27
 8018136:	d500      	bpl.n	801813a <__ssvfiscanf_r+0x24e>
 8018138:	e703      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 801813a:	9b02      	ldr	r3, [sp, #8]
 801813c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 801813e:	1d19      	adds	r1, r3, #4
 8018140:	9102      	str	r1, [sp, #8]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	07c5      	lsls	r5, r0, #31
 8018146:	d501      	bpl.n	801814c <__ssvfiscanf_r+0x260>
 8018148:	801a      	strh	r2, [r3, #0]
 801814a:	e6fa      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 801814c:	601a      	str	r2, [r3, #0]
 801814e:	e6f8      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 8018150:	22c0      	movs	r2, #192	; 0xc0
 8018152:	ab43      	add	r3, sp, #268	; 0x10c
 8018154:	0052      	lsls	r2, r2, #1
 8018156:	589b      	ldr	r3, [r3, r2]
 8018158:	0021      	movs	r1, r4
 801815a:	0030      	movs	r0, r6
 801815c:	9300      	str	r3, [sp, #0]
 801815e:	4798      	blx	r3
 8018160:	2800      	cmp	r0, #0
 8018162:	d0aa      	beq.n	80180ba <__ssvfiscanf_r+0x1ce>
 8018164:	e788      	b.n	8018078 <__ssvfiscanf_r+0x18c>
 8018166:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8018168:	9200      	str	r2, [sp, #0]
 801816a:	3201      	adds	r2, #1
 801816c:	9247      	str	r2, [sp, #284]	; 0x11c
 801816e:	6862      	ldr	r2, [r4, #4]
 8018170:	3a01      	subs	r2, #1
 8018172:	6062      	str	r2, [r4, #4]
 8018174:	2a00      	cmp	r2, #0
 8018176:	dd02      	ble.n	801817e <__ssvfiscanf_r+0x292>
 8018178:	3301      	adds	r3, #1
 801817a:	6023      	str	r3, [r4, #0]
 801817c:	e7a1      	b.n	80180c2 <__ssvfiscanf_r+0x1d6>
 801817e:	22c0      	movs	r2, #192	; 0xc0
 8018180:	ab43      	add	r3, sp, #268	; 0x10c
 8018182:	0052      	lsls	r2, r2, #1
 8018184:	589b      	ldr	r3, [r3, r2]
 8018186:	0021      	movs	r1, r4
 8018188:	0030      	movs	r0, r6
 801818a:	9300      	str	r3, [sp, #0]
 801818c:	4798      	blx	r3
 801818e:	2800      	cmp	r0, #0
 8018190:	d097      	beq.n	80180c2 <__ssvfiscanf_r+0x1d6>
 8018192:	e771      	b.n	8018078 <__ssvfiscanf_r+0x18c>
 8018194:	2b04      	cmp	r3, #4
 8018196:	dc06      	bgt.n	80181a6 <__ssvfiscanf_r+0x2ba>
 8018198:	0022      	movs	r2, r4
 801819a:	0030      	movs	r0, r6
 801819c:	ab02      	add	r3, sp, #8
 801819e:	a943      	add	r1, sp, #268	; 0x10c
 80181a0:	f000 f880 	bl	80182a4 <_scanf_i>
 80181a4:	e79d      	b.n	80180e2 <__ssvfiscanf_r+0x1f6>
 80181a6:	4b0f      	ldr	r3, [pc, #60]	; (80181e4 <__ssvfiscanf_r+0x2f8>)
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d100      	bne.n	80181ae <__ssvfiscanf_r+0x2c2>
 80181ac:	e6c9      	b.n	8017f42 <__ssvfiscanf_r+0x56>
 80181ae:	0022      	movs	r2, r4
 80181b0:	0030      	movs	r0, r6
 80181b2:	ab02      	add	r3, sp, #8
 80181b4:	a943      	add	r1, sp, #268	; 0x10c
 80181b6:	e000      	b.n	80181ba <__ssvfiscanf_r+0x2ce>
 80181b8:	bf00      	nop
 80181ba:	e792      	b.n	80180e2 <__ssvfiscanf_r+0x1f6>
 80181bc:	89a3      	ldrh	r3, [r4, #12]
 80181be:	065b      	lsls	r3, r3, #25
 80181c0:	d400      	bmi.n	80181c4 <__ssvfiscanf_r+0x2d8>
 80181c2:	e75e      	b.n	8018082 <__ssvfiscanf_r+0x196>
 80181c4:	2001      	movs	r0, #1
 80181c6:	4240      	negs	r0, r0
 80181c8:	e75b      	b.n	8018082 <__ssvfiscanf_r+0x196>
 80181ca:	9846      	ldr	r0, [sp, #280]	; 0x118
 80181cc:	e759      	b.n	8018082 <__ssvfiscanf_r+0x196>
 80181ce:	46c0      	nop			; (mov r8, r8)
 80181d0:	fffffd6c 	.word	0xfffffd6c
 80181d4:	08017e35 	.word	0x08017e35
 80181d8:	08017ead 	.word	0x08017ead
 80181dc:	0801aa8c 	.word	0x0801aa8c
 80181e0:	0801abf6 	.word	0x0801abf6
 80181e4:	00000000 	.word	0x00000000

080181e8 <_scanf_chars>:
 80181e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181ea:	0015      	movs	r5, r2
 80181ec:	688a      	ldr	r2, [r1, #8]
 80181ee:	000c      	movs	r4, r1
 80181f0:	9001      	str	r0, [sp, #4]
 80181f2:	2a00      	cmp	r2, #0
 80181f4:	d105      	bne.n	8018202 <_scanf_chars+0x1a>
 80181f6:	6989      	ldr	r1, [r1, #24]
 80181f8:	3201      	adds	r2, #1
 80181fa:	2900      	cmp	r1, #0
 80181fc:	d000      	beq.n	8018200 <_scanf_chars+0x18>
 80181fe:	3a02      	subs	r2, #2
 8018200:	60a2      	str	r2, [r4, #8]
 8018202:	6822      	ldr	r2, [r4, #0]
 8018204:	06d2      	lsls	r2, r2, #27
 8018206:	d403      	bmi.n	8018210 <_scanf_chars+0x28>
 8018208:	681a      	ldr	r2, [r3, #0]
 801820a:	1d11      	adds	r1, r2, #4
 801820c:	6019      	str	r1, [r3, #0]
 801820e:	6817      	ldr	r7, [r2, #0]
 8018210:	2600      	movs	r6, #0
 8018212:	69a0      	ldr	r0, [r4, #24]
 8018214:	2800      	cmp	r0, #0
 8018216:	d013      	beq.n	8018240 <_scanf_chars+0x58>
 8018218:	2801      	cmp	r0, #1
 801821a:	d108      	bne.n	801822e <_scanf_chars+0x46>
 801821c:	682b      	ldr	r3, [r5, #0]
 801821e:	6962      	ldr	r2, [r4, #20]
 8018220:	781b      	ldrb	r3, [r3, #0]
 8018222:	5cd3      	ldrb	r3, [r2, r3]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d10b      	bne.n	8018240 <_scanf_chars+0x58>
 8018228:	2e00      	cmp	r6, #0
 801822a:	d038      	beq.n	801829e <_scanf_chars+0xb6>
 801822c:	e026      	b.n	801827c <_scanf_chars+0x94>
 801822e:	2802      	cmp	r0, #2
 8018230:	d124      	bne.n	801827c <_scanf_chars+0x94>
 8018232:	682b      	ldr	r3, [r5, #0]
 8018234:	4a1a      	ldr	r2, [pc, #104]	; (80182a0 <_scanf_chars+0xb8>)
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	5cd3      	ldrb	r3, [r2, r3]
 801823a:	2208      	movs	r2, #8
 801823c:	4213      	tst	r3, r2
 801823e:	d11d      	bne.n	801827c <_scanf_chars+0x94>
 8018240:	2210      	movs	r2, #16
 8018242:	6823      	ldr	r3, [r4, #0]
 8018244:	3601      	adds	r6, #1
 8018246:	4213      	tst	r3, r2
 8018248:	d103      	bne.n	8018252 <_scanf_chars+0x6a>
 801824a:	682b      	ldr	r3, [r5, #0]
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	703b      	strb	r3, [r7, #0]
 8018250:	3701      	adds	r7, #1
 8018252:	682a      	ldr	r2, [r5, #0]
 8018254:	686b      	ldr	r3, [r5, #4]
 8018256:	3201      	adds	r2, #1
 8018258:	602a      	str	r2, [r5, #0]
 801825a:	68a2      	ldr	r2, [r4, #8]
 801825c:	3b01      	subs	r3, #1
 801825e:	3a01      	subs	r2, #1
 8018260:	606b      	str	r3, [r5, #4]
 8018262:	60a2      	str	r2, [r4, #8]
 8018264:	2a00      	cmp	r2, #0
 8018266:	d009      	beq.n	801827c <_scanf_chars+0x94>
 8018268:	2b00      	cmp	r3, #0
 801826a:	dcd2      	bgt.n	8018212 <_scanf_chars+0x2a>
 801826c:	23c0      	movs	r3, #192	; 0xc0
 801826e:	005b      	lsls	r3, r3, #1
 8018270:	0029      	movs	r1, r5
 8018272:	58e3      	ldr	r3, [r4, r3]
 8018274:	9801      	ldr	r0, [sp, #4]
 8018276:	4798      	blx	r3
 8018278:	2800      	cmp	r0, #0
 801827a:	d0ca      	beq.n	8018212 <_scanf_chars+0x2a>
 801827c:	6822      	ldr	r2, [r4, #0]
 801827e:	2310      	movs	r3, #16
 8018280:	0011      	movs	r1, r2
 8018282:	4019      	ands	r1, r3
 8018284:	421a      	tst	r2, r3
 8018286:	d106      	bne.n	8018296 <_scanf_chars+0xae>
 8018288:	68e3      	ldr	r3, [r4, #12]
 801828a:	3301      	adds	r3, #1
 801828c:	60e3      	str	r3, [r4, #12]
 801828e:	69a3      	ldr	r3, [r4, #24]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d000      	beq.n	8018296 <_scanf_chars+0xae>
 8018294:	7039      	strb	r1, [r7, #0]
 8018296:	2000      	movs	r0, #0
 8018298:	6923      	ldr	r3, [r4, #16]
 801829a:	199e      	adds	r6, r3, r6
 801829c:	6126      	str	r6, [r4, #16]
 801829e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80182a0:	0801aa8c 	.word	0x0801aa8c

080182a4 <_scanf_i>:
 80182a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182a6:	000c      	movs	r4, r1
 80182a8:	b08d      	sub	sp, #52	; 0x34
 80182aa:	9302      	str	r3, [sp, #8]
 80182ac:	4b79      	ldr	r3, [pc, #484]	; (8018494 <_scanf_i+0x1f0>)
 80182ae:	0016      	movs	r6, r2
 80182b0:	9005      	str	r0, [sp, #20]
 80182b2:	aa09      	add	r2, sp, #36	; 0x24
 80182b4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80182b6:	c223      	stmia	r2!, {r0, r1, r5}
 80182b8:	4b77      	ldr	r3, [pc, #476]	; (8018498 <_scanf_i+0x1f4>)
 80182ba:	9306      	str	r3, [sp, #24]
 80182bc:	69a3      	ldr	r3, [r4, #24]
 80182be:	2b03      	cmp	r3, #3
 80182c0:	d001      	beq.n	80182c6 <_scanf_i+0x22>
 80182c2:	4b76      	ldr	r3, [pc, #472]	; (801849c <_scanf_i+0x1f8>)
 80182c4:	9306      	str	r3, [sp, #24]
 80182c6:	22ae      	movs	r2, #174	; 0xae
 80182c8:	2000      	movs	r0, #0
 80182ca:	68a3      	ldr	r3, [r4, #8]
 80182cc:	0052      	lsls	r2, r2, #1
 80182ce:	1e59      	subs	r1, r3, #1
 80182d0:	9004      	str	r0, [sp, #16]
 80182d2:	4291      	cmp	r1, r2
 80182d4:	d905      	bls.n	80182e2 <_scanf_i+0x3e>
 80182d6:	3b5e      	subs	r3, #94	; 0x5e
 80182d8:	3bff      	subs	r3, #255	; 0xff
 80182da:	9304      	str	r3, [sp, #16]
 80182dc:	235e      	movs	r3, #94	; 0x5e
 80182de:	33ff      	adds	r3, #255	; 0xff
 80182e0:	60a3      	str	r3, [r4, #8]
 80182e2:	0023      	movs	r3, r4
 80182e4:	331c      	adds	r3, #28
 80182e6:	9301      	str	r3, [sp, #4]
 80182e8:	23d0      	movs	r3, #208	; 0xd0
 80182ea:	2700      	movs	r7, #0
 80182ec:	6822      	ldr	r2, [r4, #0]
 80182ee:	011b      	lsls	r3, r3, #4
 80182f0:	4313      	orrs	r3, r2
 80182f2:	6023      	str	r3, [r4, #0]
 80182f4:	9b01      	ldr	r3, [sp, #4]
 80182f6:	9303      	str	r3, [sp, #12]
 80182f8:	6833      	ldr	r3, [r6, #0]
 80182fa:	a809      	add	r0, sp, #36	; 0x24
 80182fc:	7819      	ldrb	r1, [r3, #0]
 80182fe:	00bb      	lsls	r3, r7, #2
 8018300:	2202      	movs	r2, #2
 8018302:	5818      	ldr	r0, [r3, r0]
 8018304:	f7ff fb1e 	bl	8017944 <memchr>
 8018308:	2800      	cmp	r0, #0
 801830a:	d02b      	beq.n	8018364 <_scanf_i+0xc0>
 801830c:	2f01      	cmp	r7, #1
 801830e:	d162      	bne.n	80183d6 <_scanf_i+0x132>
 8018310:	6863      	ldr	r3, [r4, #4]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d106      	bne.n	8018324 <_scanf_i+0x80>
 8018316:	3308      	adds	r3, #8
 8018318:	6822      	ldr	r2, [r4, #0]
 801831a:	6063      	str	r3, [r4, #4]
 801831c:	33f9      	adds	r3, #249	; 0xf9
 801831e:	33ff      	adds	r3, #255	; 0xff
 8018320:	4313      	orrs	r3, r2
 8018322:	6023      	str	r3, [r4, #0]
 8018324:	4b5e      	ldr	r3, [pc, #376]	; (80184a0 <_scanf_i+0x1fc>)
 8018326:	6822      	ldr	r2, [r4, #0]
 8018328:	4013      	ands	r3, r2
 801832a:	6023      	str	r3, [r4, #0]
 801832c:	68a3      	ldr	r3, [r4, #8]
 801832e:	1e5a      	subs	r2, r3, #1
 8018330:	60a2      	str	r2, [r4, #8]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d016      	beq.n	8018364 <_scanf_i+0xc0>
 8018336:	6833      	ldr	r3, [r6, #0]
 8018338:	1c5a      	adds	r2, r3, #1
 801833a:	6032      	str	r2, [r6, #0]
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	9a03      	ldr	r2, [sp, #12]
 8018340:	7013      	strb	r3, [r2, #0]
 8018342:	6873      	ldr	r3, [r6, #4]
 8018344:	1c55      	adds	r5, r2, #1
 8018346:	3b01      	subs	r3, #1
 8018348:	6073      	str	r3, [r6, #4]
 801834a:	9503      	str	r5, [sp, #12]
 801834c:	2b00      	cmp	r3, #0
 801834e:	dc09      	bgt.n	8018364 <_scanf_i+0xc0>
 8018350:	23c0      	movs	r3, #192	; 0xc0
 8018352:	005b      	lsls	r3, r3, #1
 8018354:	58e3      	ldr	r3, [r4, r3]
 8018356:	0031      	movs	r1, r6
 8018358:	9805      	ldr	r0, [sp, #20]
 801835a:	9307      	str	r3, [sp, #28]
 801835c:	4798      	blx	r3
 801835e:	2800      	cmp	r0, #0
 8018360:	d000      	beq.n	8018364 <_scanf_i+0xc0>
 8018362:	e081      	b.n	8018468 <_scanf_i+0x1c4>
 8018364:	3701      	adds	r7, #1
 8018366:	2f03      	cmp	r7, #3
 8018368:	d1c6      	bne.n	80182f8 <_scanf_i+0x54>
 801836a:	6863      	ldr	r3, [r4, #4]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d101      	bne.n	8018374 <_scanf_i+0xd0>
 8018370:	330a      	adds	r3, #10
 8018372:	6063      	str	r3, [r4, #4]
 8018374:	2110      	movs	r1, #16
 8018376:	2700      	movs	r7, #0
 8018378:	6863      	ldr	r3, [r4, #4]
 801837a:	6960      	ldr	r0, [r4, #20]
 801837c:	1ac9      	subs	r1, r1, r3
 801837e:	4b49      	ldr	r3, [pc, #292]	; (80184a4 <_scanf_i+0x200>)
 8018380:	18c9      	adds	r1, r1, r3
 8018382:	f000 f8a7 	bl	80184d4 <__sccl>
 8018386:	9d03      	ldr	r5, [sp, #12]
 8018388:	68a3      	ldr	r3, [r4, #8]
 801838a:	6822      	ldr	r2, [r4, #0]
 801838c:	9303      	str	r3, [sp, #12]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d041      	beq.n	8018416 <_scanf_i+0x172>
 8018392:	6831      	ldr	r1, [r6, #0]
 8018394:	6963      	ldr	r3, [r4, #20]
 8018396:	7808      	ldrb	r0, [r1, #0]
 8018398:	5c1b      	ldrb	r3, [r3, r0]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d03b      	beq.n	8018416 <_scanf_i+0x172>
 801839e:	2830      	cmp	r0, #48	; 0x30
 80183a0:	d129      	bne.n	80183f6 <_scanf_i+0x152>
 80183a2:	2380      	movs	r3, #128	; 0x80
 80183a4:	011b      	lsls	r3, r3, #4
 80183a6:	421a      	tst	r2, r3
 80183a8:	d025      	beq.n	80183f6 <_scanf_i+0x152>
 80183aa:	9b04      	ldr	r3, [sp, #16]
 80183ac:	3701      	adds	r7, #1
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d005      	beq.n	80183be <_scanf_i+0x11a>
 80183b2:	001a      	movs	r2, r3
 80183b4:	9b03      	ldr	r3, [sp, #12]
 80183b6:	3a01      	subs	r2, #1
 80183b8:	3301      	adds	r3, #1
 80183ba:	9204      	str	r2, [sp, #16]
 80183bc:	60a3      	str	r3, [r4, #8]
 80183be:	6873      	ldr	r3, [r6, #4]
 80183c0:	3b01      	subs	r3, #1
 80183c2:	6073      	str	r3, [r6, #4]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	dd1d      	ble.n	8018404 <_scanf_i+0x160>
 80183c8:	6833      	ldr	r3, [r6, #0]
 80183ca:	3301      	adds	r3, #1
 80183cc:	6033      	str	r3, [r6, #0]
 80183ce:	68a3      	ldr	r3, [r4, #8]
 80183d0:	3b01      	subs	r3, #1
 80183d2:	60a3      	str	r3, [r4, #8]
 80183d4:	e7d8      	b.n	8018388 <_scanf_i+0xe4>
 80183d6:	2f02      	cmp	r7, #2
 80183d8:	d1a8      	bne.n	801832c <_scanf_i+0x88>
 80183da:	21c0      	movs	r1, #192	; 0xc0
 80183dc:	2380      	movs	r3, #128	; 0x80
 80183de:	6822      	ldr	r2, [r4, #0]
 80183e0:	00c9      	lsls	r1, r1, #3
 80183e2:	4011      	ands	r1, r2
 80183e4:	009b      	lsls	r3, r3, #2
 80183e6:	4299      	cmp	r1, r3
 80183e8:	d1bf      	bne.n	801836a <_scanf_i+0xc6>
 80183ea:	3bf1      	subs	r3, #241	; 0xf1
 80183ec:	3bff      	subs	r3, #255	; 0xff
 80183ee:	6063      	str	r3, [r4, #4]
 80183f0:	33f0      	adds	r3, #240	; 0xf0
 80183f2:	4313      	orrs	r3, r2
 80183f4:	e799      	b.n	801832a <_scanf_i+0x86>
 80183f6:	4b2c      	ldr	r3, [pc, #176]	; (80184a8 <_scanf_i+0x204>)
 80183f8:	4013      	ands	r3, r2
 80183fa:	6023      	str	r3, [r4, #0]
 80183fc:	780b      	ldrb	r3, [r1, #0]
 80183fe:	702b      	strb	r3, [r5, #0]
 8018400:	3501      	adds	r5, #1
 8018402:	e7dc      	b.n	80183be <_scanf_i+0x11a>
 8018404:	23c0      	movs	r3, #192	; 0xc0
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	58e3      	ldr	r3, [r4, r3]
 801840a:	0031      	movs	r1, r6
 801840c:	9805      	ldr	r0, [sp, #20]
 801840e:	9303      	str	r3, [sp, #12]
 8018410:	4798      	blx	r3
 8018412:	2800      	cmp	r0, #0
 8018414:	d0db      	beq.n	80183ce <_scanf_i+0x12a>
 8018416:	6823      	ldr	r3, [r4, #0]
 8018418:	05db      	lsls	r3, r3, #23
 801841a:	d50e      	bpl.n	801843a <_scanf_i+0x196>
 801841c:	9b01      	ldr	r3, [sp, #4]
 801841e:	429d      	cmp	r5, r3
 8018420:	d907      	bls.n	8018432 <_scanf_i+0x18e>
 8018422:	23be      	movs	r3, #190	; 0xbe
 8018424:	3d01      	subs	r5, #1
 8018426:	005b      	lsls	r3, r3, #1
 8018428:	0032      	movs	r2, r6
 801842a:	7829      	ldrb	r1, [r5, #0]
 801842c:	58e3      	ldr	r3, [r4, r3]
 801842e:	9805      	ldr	r0, [sp, #20]
 8018430:	4798      	blx	r3
 8018432:	9b01      	ldr	r3, [sp, #4]
 8018434:	2001      	movs	r0, #1
 8018436:	429d      	cmp	r5, r3
 8018438:	d029      	beq.n	801848e <_scanf_i+0x1ea>
 801843a:	6821      	ldr	r1, [r4, #0]
 801843c:	2310      	movs	r3, #16
 801843e:	000a      	movs	r2, r1
 8018440:	401a      	ands	r2, r3
 8018442:	4219      	tst	r1, r3
 8018444:	d11c      	bne.n	8018480 <_scanf_i+0x1dc>
 8018446:	702a      	strb	r2, [r5, #0]
 8018448:	6863      	ldr	r3, [r4, #4]
 801844a:	9901      	ldr	r1, [sp, #4]
 801844c:	9805      	ldr	r0, [sp, #20]
 801844e:	9e06      	ldr	r6, [sp, #24]
 8018450:	47b0      	blx	r6
 8018452:	9b02      	ldr	r3, [sp, #8]
 8018454:	6821      	ldr	r1, [r4, #0]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	068a      	lsls	r2, r1, #26
 801845a:	d507      	bpl.n	801846c <_scanf_i+0x1c8>
 801845c:	1d1a      	adds	r2, r3, #4
 801845e:	9902      	ldr	r1, [sp, #8]
 8018460:	600a      	str	r2, [r1, #0]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	6018      	str	r0, [r3, #0]
 8018466:	e008      	b.n	801847a <_scanf_i+0x1d6>
 8018468:	2700      	movs	r7, #0
 801846a:	e7d4      	b.n	8018416 <_scanf_i+0x172>
 801846c:	1d1a      	adds	r2, r3, #4
 801846e:	07ce      	lsls	r6, r1, #31
 8018470:	d5f5      	bpl.n	801845e <_scanf_i+0x1ba>
 8018472:	9902      	ldr	r1, [sp, #8]
 8018474:	600a      	str	r2, [r1, #0]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	8018      	strh	r0, [r3, #0]
 801847a:	68e3      	ldr	r3, [r4, #12]
 801847c:	3301      	adds	r3, #1
 801847e:	60e3      	str	r3, [r4, #12]
 8018480:	2000      	movs	r0, #0
 8018482:	9b01      	ldr	r3, [sp, #4]
 8018484:	1aed      	subs	r5, r5, r3
 8018486:	6923      	ldr	r3, [r4, #16]
 8018488:	19ef      	adds	r7, r5, r7
 801848a:	19df      	adds	r7, r3, r7
 801848c:	6127      	str	r7, [r4, #16]
 801848e:	b00d      	add	sp, #52	; 0x34
 8018490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018492:	46c0      	nop			; (mov r8, r8)
 8018494:	08018810 	.word	0x08018810
 8018498:	08018669 	.word	0x08018669
 801849c:	08017d29 	.word	0x08017d29
 80184a0:	fffffaff 	.word	0xfffffaff
 80184a4:	0801ad29 	.word	0x0801ad29
 80184a8:	fffff6ff 	.word	0xfffff6ff

080184ac <_read_r>:
 80184ac:	b570      	push	{r4, r5, r6, lr}
 80184ae:	0004      	movs	r4, r0
 80184b0:	0008      	movs	r0, r1
 80184b2:	0011      	movs	r1, r2
 80184b4:	001a      	movs	r2, r3
 80184b6:	2300      	movs	r3, #0
 80184b8:	4d05      	ldr	r5, [pc, #20]	; (80184d0 <_read_r+0x24>)
 80184ba:	602b      	str	r3, [r5, #0]
 80184bc:	f000 f94c 	bl	8018758 <_read>
 80184c0:	1c43      	adds	r3, r0, #1
 80184c2:	d103      	bne.n	80184cc <_read_r+0x20>
 80184c4:	682b      	ldr	r3, [r5, #0]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d000      	beq.n	80184cc <_read_r+0x20>
 80184ca:	6023      	str	r3, [r4, #0]
 80184cc:	bd70      	pop	{r4, r5, r6, pc}
 80184ce:	46c0      	nop			; (mov r8, r8)
 80184d0:	20001dd8 	.word	0x20001dd8

080184d4 <__sccl>:
 80184d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184d6:	780b      	ldrb	r3, [r1, #0]
 80184d8:	0004      	movs	r4, r0
 80184da:	2b5e      	cmp	r3, #94	; 0x5e
 80184dc:	d00c      	beq.n	80184f8 <__sccl+0x24>
 80184de:	1c48      	adds	r0, r1, #1
 80184e0:	2100      	movs	r1, #0
 80184e2:	0022      	movs	r2, r4
 80184e4:	1c65      	adds	r5, r4, #1
 80184e6:	35ff      	adds	r5, #255	; 0xff
 80184e8:	7011      	strb	r1, [r2, #0]
 80184ea:	3201      	adds	r2, #1
 80184ec:	42aa      	cmp	r2, r5
 80184ee:	d1fb      	bne.n	80184e8 <__sccl+0x14>
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d105      	bne.n	8018500 <__sccl+0x2c>
 80184f4:	3801      	subs	r0, #1
 80184f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184f8:	784b      	ldrb	r3, [r1, #1]
 80184fa:	1c88      	adds	r0, r1, #2
 80184fc:	2101      	movs	r1, #1
 80184fe:	e7f0      	b.n	80184e2 <__sccl+0xe>
 8018500:	2201      	movs	r2, #1
 8018502:	262d      	movs	r6, #45	; 0x2d
 8018504:	4051      	eors	r1, r2
 8018506:	0002      	movs	r2, r0
 8018508:	54e1      	strb	r1, [r4, r3]
 801850a:	7815      	ldrb	r5, [r2, #0]
 801850c:	1c50      	adds	r0, r2, #1
 801850e:	2d2d      	cmp	r5, #45	; 0x2d
 8018510:	d009      	beq.n	8018526 <__sccl+0x52>
 8018512:	2d5d      	cmp	r5, #93	; 0x5d
 8018514:	d0ef      	beq.n	80184f6 <__sccl+0x22>
 8018516:	2d00      	cmp	r5, #0
 8018518:	d101      	bne.n	801851e <__sccl+0x4a>
 801851a:	0010      	movs	r0, r2
 801851c:	e7eb      	b.n	80184f6 <__sccl+0x22>
 801851e:	002b      	movs	r3, r5
 8018520:	e7f1      	b.n	8018506 <__sccl+0x32>
 8018522:	0033      	movs	r3, r6
 8018524:	e7ef      	b.n	8018506 <__sccl+0x32>
 8018526:	7855      	ldrb	r5, [r2, #1]
 8018528:	2d5d      	cmp	r5, #93	; 0x5d
 801852a:	d0fa      	beq.n	8018522 <__sccl+0x4e>
 801852c:	42ab      	cmp	r3, r5
 801852e:	dcf8      	bgt.n	8018522 <__sccl+0x4e>
 8018530:	0018      	movs	r0, r3
 8018532:	3202      	adds	r2, #2
 8018534:	3001      	adds	r0, #1
 8018536:	5421      	strb	r1, [r4, r0]
 8018538:	4285      	cmp	r5, r0
 801853a:	dcfb      	bgt.n	8018534 <__sccl+0x60>
 801853c:	2000      	movs	r0, #0
 801853e:	1c5f      	adds	r7, r3, #1
 8018540:	42ab      	cmp	r3, r5
 8018542:	da01      	bge.n	8018548 <__sccl+0x74>
 8018544:	1ae8      	subs	r0, r5, r3
 8018546:	3801      	subs	r0, #1
 8018548:	183b      	adds	r3, r7, r0
 801854a:	e7de      	b.n	801850a <__sccl+0x36>

0801854c <_strtol_l.constprop.0>:
 801854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801854e:	b087      	sub	sp, #28
 8018550:	001e      	movs	r6, r3
 8018552:	9005      	str	r0, [sp, #20]
 8018554:	9101      	str	r1, [sp, #4]
 8018556:	9202      	str	r2, [sp, #8]
 8018558:	2b01      	cmp	r3, #1
 801855a:	d045      	beq.n	80185e8 <_strtol_l.constprop.0+0x9c>
 801855c:	000b      	movs	r3, r1
 801855e:	2e24      	cmp	r6, #36	; 0x24
 8018560:	d842      	bhi.n	80185e8 <_strtol_l.constprop.0+0x9c>
 8018562:	4a3f      	ldr	r2, [pc, #252]	; (8018660 <_strtol_l.constprop.0+0x114>)
 8018564:	2108      	movs	r1, #8
 8018566:	4694      	mov	ip, r2
 8018568:	001a      	movs	r2, r3
 801856a:	4660      	mov	r0, ip
 801856c:	7814      	ldrb	r4, [r2, #0]
 801856e:	3301      	adds	r3, #1
 8018570:	5d00      	ldrb	r0, [r0, r4]
 8018572:	001d      	movs	r5, r3
 8018574:	0007      	movs	r7, r0
 8018576:	400f      	ands	r7, r1
 8018578:	4208      	tst	r0, r1
 801857a:	d1f5      	bne.n	8018568 <_strtol_l.constprop.0+0x1c>
 801857c:	2c2d      	cmp	r4, #45	; 0x2d
 801857e:	d13a      	bne.n	80185f6 <_strtol_l.constprop.0+0xaa>
 8018580:	2701      	movs	r7, #1
 8018582:	781c      	ldrb	r4, [r3, #0]
 8018584:	1c95      	adds	r5, r2, #2
 8018586:	2e00      	cmp	r6, #0
 8018588:	d065      	beq.n	8018656 <_strtol_l.constprop.0+0x10a>
 801858a:	2e10      	cmp	r6, #16
 801858c:	d109      	bne.n	80185a2 <_strtol_l.constprop.0+0x56>
 801858e:	2c30      	cmp	r4, #48	; 0x30
 8018590:	d107      	bne.n	80185a2 <_strtol_l.constprop.0+0x56>
 8018592:	2220      	movs	r2, #32
 8018594:	782b      	ldrb	r3, [r5, #0]
 8018596:	4393      	bics	r3, r2
 8018598:	2b58      	cmp	r3, #88	; 0x58
 801859a:	d157      	bne.n	801864c <_strtol_l.constprop.0+0x100>
 801859c:	2610      	movs	r6, #16
 801859e:	786c      	ldrb	r4, [r5, #1]
 80185a0:	3502      	adds	r5, #2
 80185a2:	4b30      	ldr	r3, [pc, #192]	; (8018664 <_strtol_l.constprop.0+0x118>)
 80185a4:	0031      	movs	r1, r6
 80185a6:	18fb      	adds	r3, r7, r3
 80185a8:	0018      	movs	r0, r3
 80185aa:	9303      	str	r3, [sp, #12]
 80185ac:	f7e7 fe62 	bl	8000274 <__aeabi_uidivmod>
 80185b0:	2300      	movs	r3, #0
 80185b2:	2201      	movs	r2, #1
 80185b4:	4684      	mov	ip, r0
 80185b6:	0018      	movs	r0, r3
 80185b8:	9104      	str	r1, [sp, #16]
 80185ba:	4252      	negs	r2, r2
 80185bc:	0021      	movs	r1, r4
 80185be:	3930      	subs	r1, #48	; 0x30
 80185c0:	2909      	cmp	r1, #9
 80185c2:	d81d      	bhi.n	8018600 <_strtol_l.constprop.0+0xb4>
 80185c4:	000c      	movs	r4, r1
 80185c6:	42a6      	cmp	r6, r4
 80185c8:	dd28      	ble.n	801861c <_strtol_l.constprop.0+0xd0>
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	db24      	blt.n	8018618 <_strtol_l.constprop.0+0xcc>
 80185ce:	0013      	movs	r3, r2
 80185d0:	4584      	cmp	ip, r0
 80185d2:	d306      	bcc.n	80185e2 <_strtol_l.constprop.0+0x96>
 80185d4:	d102      	bne.n	80185dc <_strtol_l.constprop.0+0x90>
 80185d6:	9904      	ldr	r1, [sp, #16]
 80185d8:	42a1      	cmp	r1, r4
 80185da:	db02      	blt.n	80185e2 <_strtol_l.constprop.0+0x96>
 80185dc:	2301      	movs	r3, #1
 80185de:	4370      	muls	r0, r6
 80185e0:	1820      	adds	r0, r4, r0
 80185e2:	782c      	ldrb	r4, [r5, #0]
 80185e4:	3501      	adds	r5, #1
 80185e6:	e7e9      	b.n	80185bc <_strtol_l.constprop.0+0x70>
 80185e8:	f000 f880 	bl	80186ec <__errno>
 80185ec:	2316      	movs	r3, #22
 80185ee:	6003      	str	r3, [r0, #0]
 80185f0:	2000      	movs	r0, #0
 80185f2:	b007      	add	sp, #28
 80185f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185f6:	2c2b      	cmp	r4, #43	; 0x2b
 80185f8:	d1c5      	bne.n	8018586 <_strtol_l.constprop.0+0x3a>
 80185fa:	781c      	ldrb	r4, [r3, #0]
 80185fc:	1c95      	adds	r5, r2, #2
 80185fe:	e7c2      	b.n	8018586 <_strtol_l.constprop.0+0x3a>
 8018600:	0021      	movs	r1, r4
 8018602:	3941      	subs	r1, #65	; 0x41
 8018604:	2919      	cmp	r1, #25
 8018606:	d801      	bhi.n	801860c <_strtol_l.constprop.0+0xc0>
 8018608:	3c37      	subs	r4, #55	; 0x37
 801860a:	e7dc      	b.n	80185c6 <_strtol_l.constprop.0+0x7a>
 801860c:	0021      	movs	r1, r4
 801860e:	3961      	subs	r1, #97	; 0x61
 8018610:	2919      	cmp	r1, #25
 8018612:	d803      	bhi.n	801861c <_strtol_l.constprop.0+0xd0>
 8018614:	3c57      	subs	r4, #87	; 0x57
 8018616:	e7d6      	b.n	80185c6 <_strtol_l.constprop.0+0x7a>
 8018618:	0013      	movs	r3, r2
 801861a:	e7e2      	b.n	80185e2 <_strtol_l.constprop.0+0x96>
 801861c:	2b00      	cmp	r3, #0
 801861e:	da09      	bge.n	8018634 <_strtol_l.constprop.0+0xe8>
 8018620:	2322      	movs	r3, #34	; 0x22
 8018622:	9a05      	ldr	r2, [sp, #20]
 8018624:	9803      	ldr	r0, [sp, #12]
 8018626:	6013      	str	r3, [r2, #0]
 8018628:	9b02      	ldr	r3, [sp, #8]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d0e1      	beq.n	80185f2 <_strtol_l.constprop.0+0xa6>
 801862e:	1e6b      	subs	r3, r5, #1
 8018630:	9301      	str	r3, [sp, #4]
 8018632:	e007      	b.n	8018644 <_strtol_l.constprop.0+0xf8>
 8018634:	2f00      	cmp	r7, #0
 8018636:	d000      	beq.n	801863a <_strtol_l.constprop.0+0xee>
 8018638:	4240      	negs	r0, r0
 801863a:	9a02      	ldr	r2, [sp, #8]
 801863c:	2a00      	cmp	r2, #0
 801863e:	d0d8      	beq.n	80185f2 <_strtol_l.constprop.0+0xa6>
 8018640:	2b00      	cmp	r3, #0
 8018642:	d1f4      	bne.n	801862e <_strtol_l.constprop.0+0xe2>
 8018644:	9b02      	ldr	r3, [sp, #8]
 8018646:	9a01      	ldr	r2, [sp, #4]
 8018648:	601a      	str	r2, [r3, #0]
 801864a:	e7d2      	b.n	80185f2 <_strtol_l.constprop.0+0xa6>
 801864c:	2430      	movs	r4, #48	; 0x30
 801864e:	2e00      	cmp	r6, #0
 8018650:	d1a7      	bne.n	80185a2 <_strtol_l.constprop.0+0x56>
 8018652:	3608      	adds	r6, #8
 8018654:	e7a5      	b.n	80185a2 <_strtol_l.constprop.0+0x56>
 8018656:	2c30      	cmp	r4, #48	; 0x30
 8018658:	d09b      	beq.n	8018592 <_strtol_l.constprop.0+0x46>
 801865a:	260a      	movs	r6, #10
 801865c:	e7a1      	b.n	80185a2 <_strtol_l.constprop.0+0x56>
 801865e:	46c0      	nop			; (mov r8, r8)
 8018660:	0801aa8c 	.word	0x0801aa8c
 8018664:	7fffffff 	.word	0x7fffffff

08018668 <_strtol_r>:
 8018668:	b510      	push	{r4, lr}
 801866a:	f7ff ff6f 	bl	801854c <_strtol_l.constprop.0>
 801866e:	bd10      	pop	{r4, pc}

08018670 <__submore>:
 8018670:	000b      	movs	r3, r1
 8018672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018674:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8018676:	3344      	adds	r3, #68	; 0x44
 8018678:	000c      	movs	r4, r1
 801867a:	429d      	cmp	r5, r3
 801867c:	d11c      	bne.n	80186b8 <__submore+0x48>
 801867e:	2680      	movs	r6, #128	; 0x80
 8018680:	00f6      	lsls	r6, r6, #3
 8018682:	0031      	movs	r1, r6
 8018684:	f7fd ff7a 	bl	801657c <_malloc_r>
 8018688:	2800      	cmp	r0, #0
 801868a:	d102      	bne.n	8018692 <__submore+0x22>
 801868c:	2001      	movs	r0, #1
 801868e:	4240      	negs	r0, r0
 8018690:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018692:	0023      	movs	r3, r4
 8018694:	6360      	str	r0, [r4, #52]	; 0x34
 8018696:	63a6      	str	r6, [r4, #56]	; 0x38
 8018698:	3346      	adds	r3, #70	; 0x46
 801869a:	781a      	ldrb	r2, [r3, #0]
 801869c:	4b10      	ldr	r3, [pc, #64]	; (80186e0 <__submore+0x70>)
 801869e:	54c2      	strb	r2, [r0, r3]
 80186a0:	0023      	movs	r3, r4
 80186a2:	3345      	adds	r3, #69	; 0x45
 80186a4:	781a      	ldrb	r2, [r3, #0]
 80186a6:	4b0f      	ldr	r3, [pc, #60]	; (80186e4 <__submore+0x74>)
 80186a8:	54c2      	strb	r2, [r0, r3]
 80186aa:	782a      	ldrb	r2, [r5, #0]
 80186ac:	4b0e      	ldr	r3, [pc, #56]	; (80186e8 <__submore+0x78>)
 80186ae:	54c2      	strb	r2, [r0, r3]
 80186b0:	18c0      	adds	r0, r0, r3
 80186b2:	6020      	str	r0, [r4, #0]
 80186b4:	2000      	movs	r0, #0
 80186b6:	e7eb      	b.n	8018690 <__submore+0x20>
 80186b8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80186ba:	0029      	movs	r1, r5
 80186bc:	0073      	lsls	r3, r6, #1
 80186be:	001a      	movs	r2, r3
 80186c0:	9301      	str	r3, [sp, #4]
 80186c2:	f7ff f95b 	bl	801797c <_realloc_r>
 80186c6:	1e05      	subs	r5, r0, #0
 80186c8:	d0e0      	beq.n	801868c <__submore+0x1c>
 80186ca:	1987      	adds	r7, r0, r6
 80186cc:	0001      	movs	r1, r0
 80186ce:	0032      	movs	r2, r6
 80186d0:	0038      	movs	r0, r7
 80186d2:	f7fd fc3d 	bl	8015f50 <memcpy>
 80186d6:	9b01      	ldr	r3, [sp, #4]
 80186d8:	6027      	str	r7, [r4, #0]
 80186da:	6365      	str	r5, [r4, #52]	; 0x34
 80186dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80186de:	e7e9      	b.n	80186b4 <__submore+0x44>
 80186e0:	000003ff 	.word	0x000003ff
 80186e4:	000003fe 	.word	0x000003fe
 80186e8:	000003fd 	.word	0x000003fd

080186ec <__errno>:
 80186ec:	4b01      	ldr	r3, [pc, #4]	; (80186f4 <__errno+0x8>)
 80186ee:	6818      	ldr	r0, [r3, #0]
 80186f0:	4770      	bx	lr
 80186f2:	46c0      	nop			; (mov r8, r8)
 80186f4:	20000244 	.word	0x20000244

080186f8 <_close>:
 80186f8:	2258      	movs	r2, #88	; 0x58
 80186fa:	2001      	movs	r0, #1
 80186fc:	4b01      	ldr	r3, [pc, #4]	; (8018704 <_close+0xc>)
 80186fe:	4240      	negs	r0, r0
 8018700:	601a      	str	r2, [r3, #0]
 8018702:	4770      	bx	lr
 8018704:	20001dd8 	.word	0x20001dd8

08018708 <_fstat>:
 8018708:	2258      	movs	r2, #88	; 0x58
 801870a:	2001      	movs	r0, #1
 801870c:	4b01      	ldr	r3, [pc, #4]	; (8018714 <_fstat+0xc>)
 801870e:	4240      	negs	r0, r0
 8018710:	601a      	str	r2, [r3, #0]
 8018712:	4770      	bx	lr
 8018714:	20001dd8 	.word	0x20001dd8

08018718 <_getpid>:
 8018718:	2258      	movs	r2, #88	; 0x58
 801871a:	2001      	movs	r0, #1
 801871c:	4b01      	ldr	r3, [pc, #4]	; (8018724 <_getpid+0xc>)
 801871e:	4240      	negs	r0, r0
 8018720:	601a      	str	r2, [r3, #0]
 8018722:	4770      	bx	lr
 8018724:	20001dd8 	.word	0x20001dd8

08018728 <_isatty>:
 8018728:	2258      	movs	r2, #88	; 0x58
 801872a:	4b02      	ldr	r3, [pc, #8]	; (8018734 <_isatty+0xc>)
 801872c:	2000      	movs	r0, #0
 801872e:	601a      	str	r2, [r3, #0]
 8018730:	4770      	bx	lr
 8018732:	46c0      	nop			; (mov r8, r8)
 8018734:	20001dd8 	.word	0x20001dd8

08018738 <_kill>:
 8018738:	2258      	movs	r2, #88	; 0x58
 801873a:	2001      	movs	r0, #1
 801873c:	4b01      	ldr	r3, [pc, #4]	; (8018744 <_kill+0xc>)
 801873e:	4240      	negs	r0, r0
 8018740:	601a      	str	r2, [r3, #0]
 8018742:	4770      	bx	lr
 8018744:	20001dd8 	.word	0x20001dd8

08018748 <_lseek>:
 8018748:	2258      	movs	r2, #88	; 0x58
 801874a:	2001      	movs	r0, #1
 801874c:	4b01      	ldr	r3, [pc, #4]	; (8018754 <_lseek+0xc>)
 801874e:	4240      	negs	r0, r0
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	4770      	bx	lr
 8018754:	20001dd8 	.word	0x20001dd8

08018758 <_read>:
 8018758:	2258      	movs	r2, #88	; 0x58
 801875a:	2001      	movs	r0, #1
 801875c:	4b01      	ldr	r3, [pc, #4]	; (8018764 <_read+0xc>)
 801875e:	4240      	negs	r0, r0
 8018760:	601a      	str	r2, [r3, #0]
 8018762:	4770      	bx	lr
 8018764:	20001dd8 	.word	0x20001dd8

08018768 <_sbrk>:
 8018768:	4a05      	ldr	r2, [pc, #20]	; (8018780 <_sbrk+0x18>)
 801876a:	0003      	movs	r3, r0
 801876c:	6811      	ldr	r1, [r2, #0]
 801876e:	2900      	cmp	r1, #0
 8018770:	d101      	bne.n	8018776 <_sbrk+0xe>
 8018772:	4904      	ldr	r1, [pc, #16]	; (8018784 <_sbrk+0x1c>)
 8018774:	6011      	str	r1, [r2, #0]
 8018776:	6810      	ldr	r0, [r2, #0]
 8018778:	18c3      	adds	r3, r0, r3
 801877a:	6013      	str	r3, [r2, #0]
 801877c:	4770      	bx	lr
 801877e:	46c0      	nop			; (mov r8, r8)
 8018780:	20001de0 	.word	0x20001de0
 8018784:	20001de4 	.word	0x20001de4

08018788 <_exit>:
 8018788:	e7fe      	b.n	8018788 <_exit>
	...

0801878c <_init>:
 801878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801878e:	46c0      	nop			; (mov r8, r8)
 8018790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018792:	bc08      	pop	{r3}
 8018794:	469e      	mov	lr, r3
 8018796:	4770      	bx	lr

08018798 <_fini>:
 8018798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801879a:	46c0      	nop			; (mov r8, r8)
 801879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801879e:	bc08      	pop	{r3}
 80187a0:	469e      	mov	lr, r3
 80187a2:	4770      	bx	lr
