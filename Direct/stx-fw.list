
stx-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018780  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026e0  08018840  08018840  00028840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801af20  0801af20  0002af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801af28  0801af28  0002af28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801af2c  0801af2c  0002af2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000030c  20000000  0801af30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ae8  2000030c  0801b23c  0003030c  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20001df4  0801b23c  00031df4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006c626  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f5ec  00000000  00000000  0009c95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032e8a  00000000  00000000  000abf46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000031c0  00000000  00000000  000dedd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00004bc0  00000000  00000000  000e1f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003eccd  00000000  00000000  000e6b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00014181  00000000  00000000  0012581d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0013999e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a850  00000000  00000000  001399f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  00144240  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000183  00000000  00000000  001442f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000030c 	.word	0x2000030c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08018828 	.word	0x08018828

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000310 	.word	0x20000310
 8000104:	08018828 	.word	0x08018828

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_llsl>:
 8000454:	4091      	lsls	r1, r2
 8000456:	0003      	movs	r3, r0
 8000458:	4090      	lsls	r0, r2
 800045a:	469c      	mov	ip, r3
 800045c:	3a20      	subs	r2, #32
 800045e:	4093      	lsls	r3, r2
 8000460:	4319      	orrs	r1, r3
 8000462:	4252      	negs	r2, r2
 8000464:	4663      	mov	r3, ip
 8000466:	40d3      	lsrs	r3, r2
 8000468:	4319      	orrs	r1, r3
 800046a:	4770      	bx	lr

0800046c <__aeabi_cdrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0010      	movs	r0, r2
 8000470:	4662      	mov	r2, ip
 8000472:	468c      	mov	ip, r1
 8000474:	0019      	movs	r1, r3
 8000476:	4663      	mov	r3, ip
 8000478:	e000      	b.n	800047c <__aeabi_cdcmpeq>
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_cdcmpeq>:
 800047c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047e:	f001 fce1 	bl	8001e44 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	d401      	bmi.n	800048a <__aeabi_cdcmpeq+0xe>
 8000486:	2100      	movs	r1, #0
 8000488:	42c8      	cmn	r0, r1
 800048a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800048c <__aeabi_dcmpeq>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fc31 	bl	8001cf4 <__eqdf2>
 8000492:	4240      	negs	r0, r0
 8000494:	3001      	adds	r0, #1
 8000496:	bd10      	pop	{r4, pc}

08000498 <__aeabi_dcmplt>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 fcd3 	bl	8001e44 <__ledf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	db01      	blt.n	80004a6 <__aeabi_dcmplt+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_dcmple>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f001 fcc9 	bl	8001e44 <__ledf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	dd01      	ble.n	80004ba <__aeabi_dcmple+0xe>
 80004b6:	2000      	movs	r0, #0
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	2001      	movs	r0, #1
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_dcmpgt>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f001 fc59 	bl	8001d78 <__gedf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	dc01      	bgt.n	80004ce <__aeabi_dcmpgt+0xe>
 80004ca:	2000      	movs	r0, #0
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	2001      	movs	r0, #1
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_dcmpge>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f001 fc4f 	bl	8001d78 <__gedf2>
 80004da:	2800      	cmp	r0, #0
 80004dc:	da01      	bge.n	80004e2 <__aeabi_dcmpge+0xe>
 80004de:	2000      	movs	r0, #0
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	2001      	movs	r0, #1
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_uldivmod>:
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <__aeabi_uldivmod+0x28>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d10f      	bne.n	8000510 <__aeabi_uldivmod+0x28>
 80004f0:	2900      	cmp	r1, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_uldivmod+0xe>
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d002      	beq.n	80004fe <__aeabi_uldivmod+0x16>
 80004f8:	2100      	movs	r1, #0
 80004fa:	43c9      	mvns	r1, r1
 80004fc:	0008      	movs	r0, r1
 80004fe:	b407      	push	{r0, r1, r2}
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <__aeabi_uldivmod+0x24>)
 8000502:	a102      	add	r1, pc, #8	; (adr r1, 800050c <__aeabi_uldivmod+0x24>)
 8000504:	1840      	adds	r0, r0, r1
 8000506:	9002      	str	r0, [sp, #8]
 8000508:	bd03      	pop	{r0, r1, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	ffffff45 	.word	0xffffff45
 8000510:	b403      	push	{r0, r1}
 8000512:	4668      	mov	r0, sp
 8000514:	b501      	push	{r0, lr}
 8000516:	9802      	ldr	r0, [sp, #8]
 8000518:	f000 f852 	bl	80005c0 <__udivmoddi4>
 800051c:	9b01      	ldr	r3, [sp, #4]
 800051e:	469e      	mov	lr, r3
 8000520:	b002      	add	sp, #8
 8000522:	bc0c      	pop	{r2, r3}
 8000524:	4770      	bx	lr
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_lmul>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	46ce      	mov	lr, r9
 800052c:	4647      	mov	r7, r8
 800052e:	b580      	push	{r7, lr}
 8000530:	0007      	movs	r7, r0
 8000532:	4699      	mov	r9, r3
 8000534:	0c3b      	lsrs	r3, r7, #16
 8000536:	469c      	mov	ip, r3
 8000538:	0413      	lsls	r3, r2, #16
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	001d      	movs	r5, r3
 800053e:	000e      	movs	r6, r1
 8000540:	4661      	mov	r1, ip
 8000542:	0400      	lsls	r0, r0, #16
 8000544:	0c14      	lsrs	r4, r2, #16
 8000546:	0c00      	lsrs	r0, r0, #16
 8000548:	4345      	muls	r5, r0
 800054a:	434b      	muls	r3, r1
 800054c:	4360      	muls	r0, r4
 800054e:	4361      	muls	r1, r4
 8000550:	18c0      	adds	r0, r0, r3
 8000552:	0c2c      	lsrs	r4, r5, #16
 8000554:	1820      	adds	r0, r4, r0
 8000556:	468c      	mov	ip, r1
 8000558:	4283      	cmp	r3, r0
 800055a:	d903      	bls.n	8000564 <__aeabi_lmul+0x3c>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	025b      	lsls	r3, r3, #9
 8000560:	4698      	mov	r8, r3
 8000562:	44c4      	add	ip, r8
 8000564:	4649      	mov	r1, r9
 8000566:	4379      	muls	r1, r7
 8000568:	4372      	muls	r2, r6
 800056a:	0c03      	lsrs	r3, r0, #16
 800056c:	4463      	add	r3, ip
 800056e:	042d      	lsls	r5, r5, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	18c9      	adds	r1, r1, r3
 8000574:	0400      	lsls	r0, r0, #16
 8000576:	1940      	adds	r0, r0, r5
 8000578:	1889      	adds	r1, r1, r2
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_d2uiz>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	2200      	movs	r2, #0
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <__aeabi_d2uiz+0x38>)
 800058a:	0004      	movs	r4, r0
 800058c:	000d      	movs	r5, r1
 800058e:	f7ff ffa1 	bl	80004d4 <__aeabi_dcmpge>
 8000592:	2800      	cmp	r0, #0
 8000594:	d104      	bne.n	80005a0 <__aeabi_d2uiz+0x1c>
 8000596:	0020      	movs	r0, r4
 8000598:	0029      	movs	r1, r5
 800059a:	f002 fab5 	bl	8002b08 <__aeabi_d2iz>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <__aeabi_d2uiz+0x38>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	0020      	movs	r0, r4
 80005a6:	0029      	movs	r1, r5
 80005a8:	f001 ff1c 	bl	80023e4 <__aeabi_dsub>
 80005ac:	f002 faac 	bl	8002b08 <__aeabi_d2iz>
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	061b      	lsls	r3, r3, #24
 80005b4:	469c      	mov	ip, r3
 80005b6:	4460      	add	r0, ip
 80005b8:	e7f1      	b.n	800059e <__aeabi_d2uiz+0x1a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	41e00000 	.word	0x41e00000

080005c0 <__udivmoddi4>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	4657      	mov	r7, sl
 80005c4:	464e      	mov	r6, r9
 80005c6:	4645      	mov	r5, r8
 80005c8:	46de      	mov	lr, fp
 80005ca:	b5e0      	push	{r5, r6, r7, lr}
 80005cc:	0004      	movs	r4, r0
 80005ce:	000d      	movs	r5, r1
 80005d0:	4692      	mov	sl, r2
 80005d2:	4699      	mov	r9, r3
 80005d4:	b083      	sub	sp, #12
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d830      	bhi.n	800063c <__udivmoddi4+0x7c>
 80005da:	d02d      	beq.n	8000638 <__udivmoddi4+0x78>
 80005dc:	4649      	mov	r1, r9
 80005de:	4650      	mov	r0, sl
 80005e0:	f002 fb84 	bl	8002cec <__clzdi2>
 80005e4:	0029      	movs	r1, r5
 80005e6:	0006      	movs	r6, r0
 80005e8:	0020      	movs	r0, r4
 80005ea:	f002 fb7f 	bl	8002cec <__clzdi2>
 80005ee:	1a33      	subs	r3, r6, r0
 80005f0:	4698      	mov	r8, r3
 80005f2:	3b20      	subs	r3, #32
 80005f4:	469b      	mov	fp, r3
 80005f6:	d433      	bmi.n	8000660 <__udivmoddi4+0xa0>
 80005f8:	465a      	mov	r2, fp
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	4642      	mov	r2, r8
 8000600:	001f      	movs	r7, r3
 8000602:	4653      	mov	r3, sl
 8000604:	4093      	lsls	r3, r2
 8000606:	001e      	movs	r6, r3
 8000608:	42af      	cmp	r7, r5
 800060a:	d83a      	bhi.n	8000682 <__udivmoddi4+0xc2>
 800060c:	42af      	cmp	r7, r5
 800060e:	d100      	bne.n	8000612 <__udivmoddi4+0x52>
 8000610:	e078      	b.n	8000704 <__udivmoddi4+0x144>
 8000612:	465b      	mov	r3, fp
 8000614:	1ba4      	subs	r4, r4, r6
 8000616:	41bd      	sbcs	r5, r7
 8000618:	2b00      	cmp	r3, #0
 800061a:	da00      	bge.n	800061e <__udivmoddi4+0x5e>
 800061c:	e075      	b.n	800070a <__udivmoddi4+0x14a>
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	9200      	str	r2, [sp, #0]
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	465a      	mov	r2, fp
 800062a:	4093      	lsls	r3, r2
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	4642      	mov	r2, r8
 8000632:	4093      	lsls	r3, r2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	e028      	b.n	800068a <__udivmoddi4+0xca>
 8000638:	4282      	cmp	r2, r0
 800063a:	d9cf      	bls.n	80005dc <__udivmoddi4+0x1c>
 800063c:	2200      	movs	r2, #0
 800063e:	2300      	movs	r3, #0
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <__udivmoddi4+0x8e>
 800064a:	601c      	str	r4, [r3, #0]
 800064c:	605d      	str	r5, [r3, #4]
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	b003      	add	sp, #12
 8000654:	bcf0      	pop	{r4, r5, r6, r7}
 8000656:	46bb      	mov	fp, r7
 8000658:	46b2      	mov	sl, r6
 800065a:	46a9      	mov	r9, r5
 800065c:	46a0      	mov	r8, r4
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	4652      	mov	r2, sl
 8000668:	40da      	lsrs	r2, r3
 800066a:	4641      	mov	r1, r8
 800066c:	0013      	movs	r3, r2
 800066e:	464a      	mov	r2, r9
 8000670:	408a      	lsls	r2, r1
 8000672:	0017      	movs	r7, r2
 8000674:	4642      	mov	r2, r8
 8000676:	431f      	orrs	r7, r3
 8000678:	4653      	mov	r3, sl
 800067a:	4093      	lsls	r3, r2
 800067c:	001e      	movs	r6, r3
 800067e:	42af      	cmp	r7, r5
 8000680:	d9c4      	bls.n	800060c <__udivmoddi4+0x4c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4643      	mov	r3, r8
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0d9      	beq.n	8000644 <__udivmoddi4+0x84>
 8000690:	07fb      	lsls	r3, r7, #31
 8000692:	0872      	lsrs	r2, r6, #1
 8000694:	431a      	orrs	r2, r3
 8000696:	4646      	mov	r6, r8
 8000698:	087b      	lsrs	r3, r7, #1
 800069a:	e00e      	b.n	80006ba <__udivmoddi4+0xfa>
 800069c:	42ab      	cmp	r3, r5
 800069e:	d101      	bne.n	80006a4 <__udivmoddi4+0xe4>
 80006a0:	42a2      	cmp	r2, r4
 80006a2:	d80c      	bhi.n	80006be <__udivmoddi4+0xfe>
 80006a4:	1aa4      	subs	r4, r4, r2
 80006a6:	419d      	sbcs	r5, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	1924      	adds	r4, r4, r4
 80006ac:	416d      	adcs	r5, r5
 80006ae:	2100      	movs	r1, #0
 80006b0:	3e01      	subs	r6, #1
 80006b2:	1824      	adds	r4, r4, r0
 80006b4:	414d      	adcs	r5, r1
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d006      	beq.n	80006c8 <__udivmoddi4+0x108>
 80006ba:	42ab      	cmp	r3, r5
 80006bc:	d9ee      	bls.n	800069c <__udivmoddi4+0xdc>
 80006be:	3e01      	subs	r6, #1
 80006c0:	1924      	adds	r4, r4, r4
 80006c2:	416d      	adcs	r5, r5
 80006c4:	2e00      	cmp	r6, #0
 80006c6:	d1f8      	bne.n	80006ba <__udivmoddi4+0xfa>
 80006c8:	9800      	ldr	r0, [sp, #0]
 80006ca:	9901      	ldr	r1, [sp, #4]
 80006cc:	465b      	mov	r3, fp
 80006ce:	1900      	adds	r0, r0, r4
 80006d0:	4169      	adcs	r1, r5
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db24      	blt.n	8000720 <__udivmoddi4+0x160>
 80006d6:	002b      	movs	r3, r5
 80006d8:	465a      	mov	r2, fp
 80006da:	4644      	mov	r4, r8
 80006dc:	40d3      	lsrs	r3, r2
 80006de:	002a      	movs	r2, r5
 80006e0:	40e2      	lsrs	r2, r4
 80006e2:	001c      	movs	r4, r3
 80006e4:	465b      	mov	r3, fp
 80006e6:	0015      	movs	r5, r2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db2a      	blt.n	8000742 <__udivmoddi4+0x182>
 80006ec:	0026      	movs	r6, r4
 80006ee:	409e      	lsls	r6, r3
 80006f0:	0033      	movs	r3, r6
 80006f2:	0026      	movs	r6, r4
 80006f4:	4647      	mov	r7, r8
 80006f6:	40be      	lsls	r6, r7
 80006f8:	0032      	movs	r2, r6
 80006fa:	1a80      	subs	r0, r0, r2
 80006fc:	4199      	sbcs	r1, r3
 80006fe:	9000      	str	r0, [sp, #0]
 8000700:	9101      	str	r1, [sp, #4]
 8000702:	e79f      	b.n	8000644 <__udivmoddi4+0x84>
 8000704:	42a3      	cmp	r3, r4
 8000706:	d8bc      	bhi.n	8000682 <__udivmoddi4+0xc2>
 8000708:	e783      	b.n	8000612 <__udivmoddi4+0x52>
 800070a:	4642      	mov	r2, r8
 800070c:	2320      	movs	r3, #32
 800070e:	2100      	movs	r1, #0
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	2200      	movs	r2, #0
 8000714:	9100      	str	r1, [sp, #0]
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	40da      	lsrs	r2, r3
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	e786      	b.n	800062e <__udivmoddi4+0x6e>
 8000720:	4642      	mov	r2, r8
 8000722:	2320      	movs	r3, #32
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	002a      	movs	r2, r5
 8000728:	4646      	mov	r6, r8
 800072a:	409a      	lsls	r2, r3
 800072c:	0023      	movs	r3, r4
 800072e:	40f3      	lsrs	r3, r6
 8000730:	4644      	mov	r4, r8
 8000732:	4313      	orrs	r3, r2
 8000734:	002a      	movs	r2, r5
 8000736:	40e2      	lsrs	r2, r4
 8000738:	001c      	movs	r4, r3
 800073a:	465b      	mov	r3, fp
 800073c:	0015      	movs	r5, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	dad4      	bge.n	80006ec <__udivmoddi4+0x12c>
 8000742:	4642      	mov	r2, r8
 8000744:	002f      	movs	r7, r5
 8000746:	2320      	movs	r3, #32
 8000748:	0026      	movs	r6, r4
 800074a:	4097      	lsls	r7, r2
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	40de      	lsrs	r6, r3
 8000750:	003b      	movs	r3, r7
 8000752:	4333      	orrs	r3, r6
 8000754:	e7cd      	b.n	80006f2 <__udivmoddi4+0x132>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <__aeabi_fdiv>:
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	464f      	mov	r7, r9
 800075c:	4646      	mov	r6, r8
 800075e:	46d6      	mov	lr, sl
 8000760:	0245      	lsls	r5, r0, #9
 8000762:	b5c0      	push	{r6, r7, lr}
 8000764:	0047      	lsls	r7, r0, #1
 8000766:	1c0c      	adds	r4, r1, #0
 8000768:	0a6d      	lsrs	r5, r5, #9
 800076a:	0e3f      	lsrs	r7, r7, #24
 800076c:	0fc6      	lsrs	r6, r0, #31
 800076e:	2f00      	cmp	r7, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fdiv+0x1c>
 8000772:	e070      	b.n	8000856 <__aeabi_fdiv+0xfe>
 8000774:	2fff      	cmp	r7, #255	; 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fdiv+0x22>
 8000778:	e075      	b.n	8000866 <__aeabi_fdiv+0x10e>
 800077a:	00eb      	lsls	r3, r5, #3
 800077c:	2580      	movs	r5, #128	; 0x80
 800077e:	04ed      	lsls	r5, r5, #19
 8000780:	431d      	orrs	r5, r3
 8000782:	2300      	movs	r3, #0
 8000784:	4699      	mov	r9, r3
 8000786:	469a      	mov	sl, r3
 8000788:	3f7f      	subs	r7, #127	; 0x7f
 800078a:	0260      	lsls	r0, r4, #9
 800078c:	0a43      	lsrs	r3, r0, #9
 800078e:	4698      	mov	r8, r3
 8000790:	0063      	lsls	r3, r4, #1
 8000792:	0e1b      	lsrs	r3, r3, #24
 8000794:	0fe4      	lsrs	r4, r4, #31
 8000796:	2b00      	cmp	r3, #0
 8000798:	d04e      	beq.n	8000838 <__aeabi_fdiv+0xe0>
 800079a:	2bff      	cmp	r3, #255	; 0xff
 800079c:	d046      	beq.n	800082c <__aeabi_fdiv+0xd4>
 800079e:	4642      	mov	r2, r8
 80007a0:	00d0      	lsls	r0, r2, #3
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4302      	orrs	r2, r0
 80007a8:	4690      	mov	r8, r2
 80007aa:	2200      	movs	r2, #0
 80007ac:	3b7f      	subs	r3, #127	; 0x7f
 80007ae:	0031      	movs	r1, r6
 80007b0:	1aff      	subs	r7, r7, r3
 80007b2:	464b      	mov	r3, r9
 80007b4:	4061      	eors	r1, r4
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	4313      	orrs	r3, r2
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d900      	bls.n	80007c0 <__aeabi_fdiv+0x68>
 80007be:	e0b5      	b.n	800092c <__aeabi_fdiv+0x1d4>
 80007c0:	486e      	ldr	r0, [pc, #440]	; (800097c <__aeabi_fdiv+0x224>)
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	58c3      	ldr	r3, [r0, r3]
 80007c6:	469f      	mov	pc, r3
 80007c8:	2300      	movs	r3, #0
 80007ca:	4698      	mov	r8, r3
 80007cc:	0026      	movs	r6, r4
 80007ce:	4645      	mov	r5, r8
 80007d0:	4692      	mov	sl, r2
 80007d2:	4653      	mov	r3, sl
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d100      	bne.n	80007da <__aeabi_fdiv+0x82>
 80007d8:	e089      	b.n	80008ee <__aeabi_fdiv+0x196>
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fdiv+0x88>
 80007de:	e09e      	b.n	800091e <__aeabi_fdiv+0x1c6>
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d018      	beq.n	8000816 <__aeabi_fdiv+0xbe>
 80007e4:	003b      	movs	r3, r7
 80007e6:	337f      	adds	r3, #127	; 0x7f
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dd69      	ble.n	80008c0 <__aeabi_fdiv+0x168>
 80007ec:	076a      	lsls	r2, r5, #29
 80007ee:	d004      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f0:	220f      	movs	r2, #15
 80007f2:	402a      	ands	r2, r5
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d000      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f8:	3504      	adds	r5, #4
 80007fa:	012a      	lsls	r2, r5, #4
 80007fc:	d503      	bpl.n	8000806 <__aeabi_fdiv+0xae>
 80007fe:	4b60      	ldr	r3, [pc, #384]	; (8000980 <__aeabi_fdiv+0x228>)
 8000800:	401d      	ands	r5, r3
 8000802:	003b      	movs	r3, r7
 8000804:	3380      	adds	r3, #128	; 0x80
 8000806:	2bfe      	cmp	r3, #254	; 0xfe
 8000808:	dd00      	ble.n	800080c <__aeabi_fdiv+0xb4>
 800080a:	e070      	b.n	80008ee <__aeabi_fdiv+0x196>
 800080c:	01ad      	lsls	r5, r5, #6
 800080e:	0a6d      	lsrs	r5, r5, #9
 8000810:	b2d8      	uxtb	r0, r3
 8000812:	e002      	b.n	800081a <__aeabi_fdiv+0xc2>
 8000814:	000e      	movs	r6, r1
 8000816:	2000      	movs	r0, #0
 8000818:	2500      	movs	r5, #0
 800081a:	05c0      	lsls	r0, r0, #23
 800081c:	4328      	orrs	r0, r5
 800081e:	07f6      	lsls	r6, r6, #31
 8000820:	4330      	orrs	r0, r6
 8000822:	bce0      	pop	{r5, r6, r7}
 8000824:	46ba      	mov	sl, r7
 8000826:	46b1      	mov	r9, r6
 8000828:	46a8      	mov	r8, r5
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	4643      	mov	r3, r8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d13f      	bne.n	80008b2 <__aeabi_fdiv+0x15a>
 8000832:	2202      	movs	r2, #2
 8000834:	3fff      	subs	r7, #255	; 0xff
 8000836:	e003      	b.n	8000840 <__aeabi_fdiv+0xe8>
 8000838:	4643      	mov	r3, r8
 800083a:	2b00      	cmp	r3, #0
 800083c:	d12d      	bne.n	800089a <__aeabi_fdiv+0x142>
 800083e:	2201      	movs	r2, #1
 8000840:	0031      	movs	r1, r6
 8000842:	464b      	mov	r3, r9
 8000844:	4061      	eors	r1, r4
 8000846:	b2c9      	uxtb	r1, r1
 8000848:	4313      	orrs	r3, r2
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d834      	bhi.n	80008b8 <__aeabi_fdiv+0x160>
 800084e:	484d      	ldr	r0, [pc, #308]	; (8000984 <__aeabi_fdiv+0x22c>)
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	58c3      	ldr	r3, [r0, r3]
 8000854:	469f      	mov	pc, r3
 8000856:	2d00      	cmp	r5, #0
 8000858:	d113      	bne.n	8000882 <__aeabi_fdiv+0x12a>
 800085a:	2304      	movs	r3, #4
 800085c:	4699      	mov	r9, r3
 800085e:	3b03      	subs	r3, #3
 8000860:	2700      	movs	r7, #0
 8000862:	469a      	mov	sl, r3
 8000864:	e791      	b.n	800078a <__aeabi_fdiv+0x32>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d105      	bne.n	8000876 <__aeabi_fdiv+0x11e>
 800086a:	2308      	movs	r3, #8
 800086c:	4699      	mov	r9, r3
 800086e:	3b06      	subs	r3, #6
 8000870:	27ff      	movs	r7, #255	; 0xff
 8000872:	469a      	mov	sl, r3
 8000874:	e789      	b.n	800078a <__aeabi_fdiv+0x32>
 8000876:	230c      	movs	r3, #12
 8000878:	4699      	mov	r9, r3
 800087a:	3b09      	subs	r3, #9
 800087c:	27ff      	movs	r7, #255	; 0xff
 800087e:	469a      	mov	sl, r3
 8000880:	e783      	b.n	800078a <__aeabi_fdiv+0x32>
 8000882:	0028      	movs	r0, r5
 8000884:	f002 fa14 	bl	8002cb0 <__clzsi2>
 8000888:	2776      	movs	r7, #118	; 0x76
 800088a:	1f43      	subs	r3, r0, #5
 800088c:	409d      	lsls	r5, r3
 800088e:	2300      	movs	r3, #0
 8000890:	427f      	negs	r7, r7
 8000892:	4699      	mov	r9, r3
 8000894:	469a      	mov	sl, r3
 8000896:	1a3f      	subs	r7, r7, r0
 8000898:	e777      	b.n	800078a <__aeabi_fdiv+0x32>
 800089a:	4640      	mov	r0, r8
 800089c:	f002 fa08 	bl	8002cb0 <__clzsi2>
 80008a0:	4642      	mov	r2, r8
 80008a2:	1f43      	subs	r3, r0, #5
 80008a4:	409a      	lsls	r2, r3
 80008a6:	2376      	movs	r3, #118	; 0x76
 80008a8:	425b      	negs	r3, r3
 80008aa:	4690      	mov	r8, r2
 80008ac:	1a1b      	subs	r3, r3, r0
 80008ae:	2200      	movs	r2, #0
 80008b0:	e77d      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b2:	23ff      	movs	r3, #255	; 0xff
 80008b4:	2203      	movs	r2, #3
 80008b6:	e77a      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b8:	000e      	movs	r6, r1
 80008ba:	20ff      	movs	r0, #255	; 0xff
 80008bc:	2500      	movs	r5, #0
 80008be:	e7ac      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008c0:	2001      	movs	r0, #1
 80008c2:	1ac0      	subs	r0, r0, r3
 80008c4:	281b      	cmp	r0, #27
 80008c6:	dca6      	bgt.n	8000816 <__aeabi_fdiv+0xbe>
 80008c8:	379e      	adds	r7, #158	; 0x9e
 80008ca:	002a      	movs	r2, r5
 80008cc:	40bd      	lsls	r5, r7
 80008ce:	40c2      	lsrs	r2, r0
 80008d0:	1e6b      	subs	r3, r5, #1
 80008d2:	419d      	sbcs	r5, r3
 80008d4:	4315      	orrs	r5, r2
 80008d6:	076b      	lsls	r3, r5, #29
 80008d8:	d004      	beq.n	80008e4 <__aeabi_fdiv+0x18c>
 80008da:	230f      	movs	r3, #15
 80008dc:	402b      	ands	r3, r5
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fdiv+0x18c>
 80008e2:	3504      	adds	r5, #4
 80008e4:	016b      	lsls	r3, r5, #5
 80008e6:	d544      	bpl.n	8000972 <__aeabi_fdiv+0x21a>
 80008e8:	2001      	movs	r0, #1
 80008ea:	2500      	movs	r5, #0
 80008ec:	e795      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	2500      	movs	r5, #0
 80008f2:	e792      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	2600      	movs	r6, #0
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	03ed      	lsls	r5, r5, #15
 80008fc:	e78d      	b.n	800081a <__aeabi_fdiv+0xc2>
 80008fe:	2300      	movs	r3, #0
 8000900:	4698      	mov	r8, r3
 8000902:	2080      	movs	r0, #128	; 0x80
 8000904:	03c0      	lsls	r0, r0, #15
 8000906:	4205      	tst	r5, r0
 8000908:	d009      	beq.n	800091e <__aeabi_fdiv+0x1c6>
 800090a:	4643      	mov	r3, r8
 800090c:	4203      	tst	r3, r0
 800090e:	d106      	bne.n	800091e <__aeabi_fdiv+0x1c6>
 8000910:	4645      	mov	r5, r8
 8000912:	4305      	orrs	r5, r0
 8000914:	026d      	lsls	r5, r5, #9
 8000916:	0026      	movs	r6, r4
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	0a6d      	lsrs	r5, r5, #9
 800091c:	e77d      	b.n	800081a <__aeabi_fdiv+0xc2>
 800091e:	2080      	movs	r0, #128	; 0x80
 8000920:	03c0      	lsls	r0, r0, #15
 8000922:	4305      	orrs	r5, r0
 8000924:	026d      	lsls	r5, r5, #9
 8000926:	20ff      	movs	r0, #255	; 0xff
 8000928:	0a6d      	lsrs	r5, r5, #9
 800092a:	e776      	b.n	800081a <__aeabi_fdiv+0xc2>
 800092c:	4642      	mov	r2, r8
 800092e:	016b      	lsls	r3, r5, #5
 8000930:	0150      	lsls	r0, r2, #5
 8000932:	4283      	cmp	r3, r0
 8000934:	d219      	bcs.n	800096a <__aeabi_fdiv+0x212>
 8000936:	221b      	movs	r2, #27
 8000938:	2500      	movs	r5, #0
 800093a:	3f01      	subs	r7, #1
 800093c:	2601      	movs	r6, #1
 800093e:	001c      	movs	r4, r3
 8000940:	006d      	lsls	r5, r5, #1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2c00      	cmp	r4, #0
 8000946:	db01      	blt.n	800094c <__aeabi_fdiv+0x1f4>
 8000948:	4298      	cmp	r0, r3
 800094a:	d801      	bhi.n	8000950 <__aeabi_fdiv+0x1f8>
 800094c:	1a1b      	subs	r3, r3, r0
 800094e:	4335      	orrs	r5, r6
 8000950:	3a01      	subs	r2, #1
 8000952:	2a00      	cmp	r2, #0
 8000954:	d1f3      	bne.n	800093e <__aeabi_fdiv+0x1e6>
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	4193      	sbcs	r3, r2
 800095a:	431d      	orrs	r5, r3
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	000e      	movs	r6, r1
 8000962:	2b00      	cmp	r3, #0
 8000964:	dd00      	ble.n	8000968 <__aeabi_fdiv+0x210>
 8000966:	e741      	b.n	80007ec <__aeabi_fdiv+0x94>
 8000968:	e7aa      	b.n	80008c0 <__aeabi_fdiv+0x168>
 800096a:	221a      	movs	r2, #26
 800096c:	2501      	movs	r5, #1
 800096e:	1a1b      	subs	r3, r3, r0
 8000970:	e7e4      	b.n	800093c <__aeabi_fdiv+0x1e4>
 8000972:	01ad      	lsls	r5, r5, #6
 8000974:	2000      	movs	r0, #0
 8000976:	0a6d      	lsrs	r5, r5, #9
 8000978:	e74f      	b.n	800081a <__aeabi_fdiv+0xc2>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	080188b8 	.word	0x080188b8
 8000980:	f7ffffff 	.word	0xf7ffffff
 8000984:	080188f8 	.word	0x080188f8

08000988 <__aeabi_fmul>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464f      	mov	r7, r9
 800098c:	4646      	mov	r6, r8
 800098e:	46d6      	mov	lr, sl
 8000990:	0244      	lsls	r4, r0, #9
 8000992:	0045      	lsls	r5, r0, #1
 8000994:	b5c0      	push	{r6, r7, lr}
 8000996:	0a64      	lsrs	r4, r4, #9
 8000998:	1c0f      	adds	r7, r1, #0
 800099a:	0e2d      	lsrs	r5, r5, #24
 800099c:	0fc6      	lsrs	r6, r0, #31
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fmul+0x1c>
 80009a2:	e08d      	b.n	8000ac0 <__aeabi_fmul+0x138>
 80009a4:	2dff      	cmp	r5, #255	; 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fmul+0x22>
 80009a8:	e092      	b.n	8000ad0 <__aeabi_fmul+0x148>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	4699      	mov	r9, r3
 80009b0:	469a      	mov	sl, r3
 80009b2:	00e4      	lsls	r4, r4, #3
 80009b4:	04c0      	lsls	r0, r0, #19
 80009b6:	4304      	orrs	r4, r0
 80009b8:	3d7f      	subs	r5, #127	; 0x7f
 80009ba:	0278      	lsls	r0, r7, #9
 80009bc:	0a43      	lsrs	r3, r0, #9
 80009be:	4698      	mov	r8, r3
 80009c0:	007b      	lsls	r3, r7, #1
 80009c2:	0e1b      	lsrs	r3, r3, #24
 80009c4:	0fff      	lsrs	r7, r7, #31
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x44>
 80009ca:	e070      	b.n	8000aae <__aeabi_fmul+0x126>
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fmul+0x4a>
 80009d0:	e086      	b.n	8000ae0 <__aeabi_fmul+0x158>
 80009d2:	4642      	mov	r2, r8
 80009d4:	00d0      	lsls	r0, r2, #3
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	3b7f      	subs	r3, #127	; 0x7f
 80009da:	18ed      	adds	r5, r5, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	04d2      	lsls	r2, r2, #19
 80009e0:	4302      	orrs	r2, r0
 80009e2:	4690      	mov	r8, r2
 80009e4:	469c      	mov	ip, r3
 80009e6:	0031      	movs	r1, r6
 80009e8:	464b      	mov	r3, r9
 80009ea:	4079      	eors	r1, r7
 80009ec:	1c68      	adds	r0, r5, #1
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d81c      	bhi.n	8000a2c <__aeabi_fmul+0xa4>
 80009f2:	4a76      	ldr	r2, [pc, #472]	; (8000bcc <__aeabi_fmul+0x244>)
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	469f      	mov	pc, r3
 80009fa:	0039      	movs	r1, r7
 80009fc:	4644      	mov	r4, r8
 80009fe:	46e2      	mov	sl, ip
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d00f      	beq.n	8000a26 <__aeabi_fmul+0x9e>
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fmul+0x84>
 8000a0a:	e0d7      	b.n	8000bbc <__aeabi_fmul+0x234>
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d137      	bne.n	8000a80 <__aeabi_fmul+0xf8>
 8000a10:	2000      	movs	r0, #0
 8000a12:	2400      	movs	r4, #0
 8000a14:	05c0      	lsls	r0, r0, #23
 8000a16:	4320      	orrs	r0, r4
 8000a18:	07c9      	lsls	r1, r1, #31
 8000a1a:	4308      	orrs	r0, r1
 8000a1c:	bce0      	pop	{r5, r6, r7}
 8000a1e:	46ba      	mov	sl, r7
 8000a20:	46b1      	mov	r9, r6
 8000a22:	46a8      	mov	r8, r5
 8000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2400      	movs	r4, #0
 8000a2a:	e7f3      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000a2c:	0c26      	lsrs	r6, r4, #16
 8000a2e:	0424      	lsls	r4, r4, #16
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	4644      	mov	r4, r8
 8000a34:	0424      	lsls	r4, r4, #16
 8000a36:	0c24      	lsrs	r4, r4, #16
 8000a38:	4643      	mov	r3, r8
 8000a3a:	0027      	movs	r7, r4
 8000a3c:	0c1b      	lsrs	r3, r3, #16
 8000a3e:	4357      	muls	r7, r2
 8000a40:	4374      	muls	r4, r6
 8000a42:	435a      	muls	r2, r3
 8000a44:	435e      	muls	r6, r3
 8000a46:	1912      	adds	r2, r2, r4
 8000a48:	0c3b      	lsrs	r3, r7, #16
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_fmul+0xd0>
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0252      	lsls	r2, r2, #9
 8000a54:	4694      	mov	ip, r2
 8000a56:	4466      	add	r6, ip
 8000a58:	043f      	lsls	r7, r7, #16
 8000a5a:	041a      	lsls	r2, r3, #16
 8000a5c:	0c3f      	lsrs	r7, r7, #16
 8000a5e:	19d2      	adds	r2, r2, r7
 8000a60:	0194      	lsls	r4, r2, #6
 8000a62:	1e67      	subs	r7, r4, #1
 8000a64:	41bc      	sbcs	r4, r7
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	0e92      	lsrs	r2, r2, #26
 8000a6a:	199b      	adds	r3, r3, r6
 8000a6c:	4314      	orrs	r4, r2
 8000a6e:	019b      	lsls	r3, r3, #6
 8000a70:	431c      	orrs	r4, r3
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	d400      	bmi.n	8000a78 <__aeabi_fmul+0xf0>
 8000a76:	e09b      	b.n	8000bb0 <__aeabi_fmul+0x228>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	0862      	lsrs	r2, r4, #1
 8000a7c:	401c      	ands	r4, r3
 8000a7e:	4314      	orrs	r4, r2
 8000a80:	0002      	movs	r2, r0
 8000a82:	327f      	adds	r2, #127	; 0x7f
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	dd64      	ble.n	8000b52 <__aeabi_fmul+0x1ca>
 8000a88:	0763      	lsls	r3, r4, #29
 8000a8a:	d004      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4023      	ands	r3, r4
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a94:	3404      	adds	r4, #4
 8000a96:	0123      	lsls	r3, r4, #4
 8000a98:	d503      	bpl.n	8000aa2 <__aeabi_fmul+0x11a>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <__aeabi_fmul+0x248>)
 8000a9e:	3280      	adds	r2, #128	; 0x80
 8000aa0:	401c      	ands	r4, r3
 8000aa2:	2afe      	cmp	r2, #254	; 0xfe
 8000aa4:	dcbf      	bgt.n	8000a26 <__aeabi_fmul+0x9e>
 8000aa6:	01a4      	lsls	r4, r4, #6
 8000aa8:	0a64      	lsrs	r4, r4, #9
 8000aaa:	b2d0      	uxtb	r0, r2
 8000aac:	e7b2      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d13d      	bne.n	8000b30 <__aeabi_fmul+0x1a8>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4691      	mov	r9, r2
 8000abc:	469c      	mov	ip, r3
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d129      	bne.n	8000b18 <__aeabi_fmul+0x190>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	2500      	movs	r5, #0
 8000acc:	469a      	mov	sl, r3
 8000ace:	e774      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11b      	bne.n	8000b0c <__aeabi_fmul+0x184>
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	3b06      	subs	r3, #6
 8000ada:	25ff      	movs	r5, #255	; 0xff
 8000adc:	469a      	mov	sl, r3
 8000ade:	e76c      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	35ff      	adds	r5, #255	; 0xff
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10b      	bne.n	8000b00 <__aeabi_fmul+0x178>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	464a      	mov	r2, r9
 8000aec:	431a      	orrs	r2, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	469c      	mov	ip, r3
 8000af2:	e778      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000af4:	4653      	mov	r3, sl
 8000af6:	0031      	movs	r1, r6
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d000      	beq.n	8000afe <__aeabi_fmul+0x176>
 8000afc:	e783      	b.n	8000a06 <__aeabi_fmul+0x7e>
 8000afe:	e792      	b.n	8000a26 <__aeabi_fmul+0x9e>
 8000b00:	2303      	movs	r3, #3
 8000b02:	464a      	mov	r2, r9
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4691      	mov	r9, r2
 8000b08:	469c      	mov	ip, r3
 8000b0a:	e76c      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b09      	subs	r3, #9
 8000b12:	25ff      	movs	r5, #255	; 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e750      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b18:	0020      	movs	r0, r4
 8000b1a:	f002 f8c9 	bl	8002cb0 <__clzsi2>
 8000b1e:	2576      	movs	r5, #118	; 0x76
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409c      	lsls	r4, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	426d      	negs	r5, r5
 8000b28:	4699      	mov	r9, r3
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	e744      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b30:	4640      	mov	r0, r8
 8000b32:	f002 f8bd 	bl	8002cb0 <__clzsi2>
 8000b36:	4642      	mov	r2, r8
 8000b38:	1f43      	subs	r3, r0, #5
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	4690      	mov	r8, r2
 8000b42:	469c      	mov	ip, r3
 8000b44:	3d76      	subs	r5, #118	; 0x76
 8000b46:	e74e      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b48:	2480      	movs	r4, #128	; 0x80
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	03e4      	lsls	r4, r4, #15
 8000b50:	e760      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b52:	2301      	movs	r3, #1
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	2b1b      	cmp	r3, #27
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_fmul+0x1d4>
 8000b5a:	e759      	b.n	8000a10 <__aeabi_fmul+0x88>
 8000b5c:	0022      	movs	r2, r4
 8000b5e:	309e      	adds	r0, #158	; 0x9e
 8000b60:	40da      	lsrs	r2, r3
 8000b62:	4084      	lsls	r4, r0
 8000b64:	0013      	movs	r3, r2
 8000b66:	1e62      	subs	r2, r4, #1
 8000b68:	4194      	sbcs	r4, r2
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	0763      	lsls	r3, r4, #29
 8000b6e:	d004      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b78:	3404      	adds	r4, #4
 8000b7a:	0163      	lsls	r3, r4, #5
 8000b7c:	d51a      	bpl.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2400      	movs	r4, #0
 8000b82:	e747      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	03c0      	lsls	r0, r0, #15
 8000b88:	4204      	tst	r4, r0
 8000b8a:	d009      	beq.n	8000ba0 <__aeabi_fmul+0x218>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4203      	tst	r3, r0
 8000b90:	d106      	bne.n	8000ba0 <__aeabi_fmul+0x218>
 8000b92:	4644      	mov	r4, r8
 8000b94:	4304      	orrs	r4, r0
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0039      	movs	r1, r7
 8000b9a:	20ff      	movs	r0, #255	; 0xff
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	e739      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	03c0      	lsls	r0, r0, #15
 8000ba4:	4304      	orrs	r4, r0
 8000ba6:	0264      	lsls	r4, r4, #9
 8000ba8:	0031      	movs	r1, r6
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	e731      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	e765      	b.n	8000a80 <__aeabi_fmul+0xf8>
 8000bb4:	01a4      	lsls	r4, r4, #6
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e72b      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	03c0      	lsls	r0, r0, #15
 8000bc0:	4304      	orrs	r4, r0
 8000bc2:	0264      	lsls	r4, r4, #9
 8000bc4:	20ff      	movs	r0, #255	; 0xff
 8000bc6:	0a64      	lsrs	r4, r4, #9
 8000bc8:	e724      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	08018938 	.word	0x08018938
 8000bd0:	f7ffffff 	.word	0xf7ffffff

08000bd4 <__aeabi_fsub>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	46ce      	mov	lr, r9
 8000bd8:	4647      	mov	r7, r8
 8000bda:	0243      	lsls	r3, r0, #9
 8000bdc:	0a5b      	lsrs	r3, r3, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	00da      	lsls	r2, r3, #3
 8000be2:	4694      	mov	ip, r2
 8000be4:	0a72      	lsrs	r2, r6, #9
 8000be6:	4691      	mov	r9, r2
 8000be8:	0045      	lsls	r5, r0, #1
 8000bea:	004a      	lsls	r2, r1, #1
 8000bec:	b580      	push	{r7, lr}
 8000bee:	0e2d      	lsrs	r5, r5, #24
 8000bf0:	001f      	movs	r7, r3
 8000bf2:	0fc4      	lsrs	r4, r0, #31
 8000bf4:	0e12      	lsrs	r2, r2, #24
 8000bf6:	0fc9      	lsrs	r1, r1, #31
 8000bf8:	09b6      	lsrs	r6, r6, #6
 8000bfa:	2aff      	cmp	r2, #255	; 0xff
 8000bfc:	d05b      	beq.n	8000cb6 <__aeabi_fsub+0xe2>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4041      	eors	r1, r0
 8000c02:	428c      	cmp	r4, r1
 8000c04:	d039      	beq.n	8000c7a <__aeabi_fsub+0xa6>
 8000c06:	1aa8      	subs	r0, r5, r2
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	dd5a      	ble.n	8000cc2 <__aeabi_fsub+0xee>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d06a      	beq.n	8000ce6 <__aeabi_fsub+0x112>
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x42>
 8000c14:	e0d9      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	04d2      	lsls	r2, r2, #19
 8000c1a:	4316      	orrs	r6, r2
 8000c1c:	281b      	cmp	r0, #27
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_fsub+0x4e>
 8000c20:	e0e9      	b.n	8000df6 <__aeabi_fsub+0x222>
 8000c22:	2001      	movs	r0, #1
 8000c24:	4663      	mov	r3, ip
 8000c26:	1a18      	subs	r0, r3, r0
 8000c28:	0143      	lsls	r3, r0, #5
 8000c2a:	d400      	bmi.n	8000c2e <__aeabi_fsub+0x5a>
 8000c2c:	e0b4      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000c2e:	0180      	lsls	r0, r0, #6
 8000c30:	0987      	lsrs	r7, r0, #6
 8000c32:	0038      	movs	r0, r7
 8000c34:	f002 f83c 	bl	8002cb0 <__clzsi2>
 8000c38:	3805      	subs	r0, #5
 8000c3a:	4087      	lsls	r7, r0
 8000c3c:	4285      	cmp	r5, r0
 8000c3e:	dc00      	bgt.n	8000c42 <__aeabi_fsub+0x6e>
 8000c40:	e0cc      	b.n	8000ddc <__aeabi_fsub+0x208>
 8000c42:	1a2d      	subs	r5, r5, r0
 8000c44:	48b5      	ldr	r0, [pc, #724]	; (8000f1c <__aeabi_fsub+0x348>)
 8000c46:	4038      	ands	r0, r7
 8000c48:	0743      	lsls	r3, r0, #29
 8000c4a:	d004      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4003      	ands	r3, r0
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c54:	3004      	adds	r0, #4
 8000c56:	0143      	lsls	r3, r0, #5
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fsub+0x88>
 8000c5a:	e0a0      	b.n	8000d9e <__aeabi_fsub+0x1ca>
 8000c5c:	1c6a      	adds	r2, r5, #1
 8000c5e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x90>
 8000c62:	e08d      	b.n	8000d80 <__aeabi_fsub+0x1ac>
 8000c64:	0180      	lsls	r0, r0, #6
 8000c66:	0a47      	lsrs	r7, r0, #9
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	05d0      	lsls	r0, r2, #23
 8000c6c:	4338      	orrs	r0, r7
 8000c6e:	07e4      	lsls	r4, r4, #31
 8000c70:	4320      	orrs	r0, r4
 8000c72:	bcc0      	pop	{r6, r7}
 8000c74:	46b9      	mov	r9, r7
 8000c76:	46b0      	mov	r8, r6
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	1aa8      	subs	r0, r5, r2
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dd45      	ble.n	8000d0e <__aeabi_fsub+0x13a>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d070      	beq.n	8000d68 <__aeabi_fsub+0x194>
 8000c86:	2dff      	cmp	r5, #255	; 0xff
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0xb8>
 8000c8a:	e09e      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	04db      	lsls	r3, r3, #19
 8000c90:	431e      	orrs	r6, r3
 8000c92:	4643      	mov	r3, r8
 8000c94:	2b1b      	cmp	r3, #27
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0xc6>
 8000c98:	e0d2      	b.n	8000e40 <__aeabi_fsub+0x26c>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	4460      	add	r0, ip
 8000c9e:	0143      	lsls	r3, r0, #5
 8000ca0:	d57a      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	2dff      	cmp	r5, #255	; 0xff
 8000ca6:	d06b      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4a9d      	ldr	r2, [pc, #628]	; (8000f20 <__aeabi_fsub+0x34c>)
 8000cac:	4003      	ands	r3, r0
 8000cae:	0840      	lsrs	r0, r0, #1
 8000cb0:	4010      	ands	r0, r2
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	e7c8      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d020      	beq.n	8000cfc <__aeabi_fsub+0x128>
 8000cba:	428c      	cmp	r4, r1
 8000cbc:	d023      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	38ff      	subs	r0, #255	; 0xff
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d039      	beq.n	8000d3a <__aeabi_fsub+0x166>
 8000cc6:	1b57      	subs	r7, r2, r5
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_fsub+0xfa>
 8000ccc:	e09d      	b.n	8000e0a <__aeabi_fsub+0x236>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x102>
 8000cd4:	e0db      	b.n	8000e8e <__aeabi_fsub+0x2ba>
 8000cd6:	1e7b      	subs	r3, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x10a>
 8000cdc:	e10d      	b.n	8000efa <__aeabi_fsub+0x326>
 8000cde:	2fff      	cmp	r7, #255	; 0xff
 8000ce0:	d071      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	e098      	b.n	8000e18 <__aeabi_fsub+0x244>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x118>
 8000cea:	e0a7      	b.n	8000e3c <__aeabi_fsub+0x268>
 8000cec:	1e42      	subs	r2, r0, #1
 8000cee:	2801      	cmp	r0, #1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x120>
 8000cf2:	e0e6      	b.n	8000ec2 <__aeabi_fsub+0x2ee>
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d068      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	e78f      	b.n	8000c1c <__aeabi_fsub+0x48>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4041      	eors	r1, r0
 8000d00:	42a1      	cmp	r1, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000d04:	e77f      	b.n	8000c06 <__aeabi_fsub+0x32>
 8000d06:	20ff      	movs	r0, #255	; 0xff
 8000d08:	4240      	negs	r0, r0
 8000d0a:	4680      	mov	r8, r0
 8000d0c:	44a8      	add	r8, r5
 8000d0e:	4640      	mov	r0, r8
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d038      	beq.n	8000d86 <__aeabi_fsub+0x1b2>
 8000d14:	1b51      	subs	r1, r2, r5
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x148>
 8000d1a:	e0ae      	b.n	8000e7a <__aeabi_fsub+0x2a6>
 8000d1c:	2aff      	cmp	r2, #255	; 0xff
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x14e>
 8000d20:	e0df      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	4660      	mov	r0, ip
 8000d26:	04db      	lsls	r3, r3, #19
 8000d28:	4318      	orrs	r0, r3
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	291b      	cmp	r1, #27
 8000d2e:	dc00      	bgt.n	8000d32 <__aeabi_fsub+0x15e>
 8000d30:	e0d9      	b.n	8000ee6 <__aeabi_fsub+0x312>
 8000d32:	2001      	movs	r0, #1
 8000d34:	0015      	movs	r5, r2
 8000d36:	1980      	adds	r0, r0, r6
 8000d38:	e7b1      	b.n	8000c9e <__aeabi_fsub+0xca>
 8000d3a:	20fe      	movs	r0, #254	; 0xfe
 8000d3c:	1c6a      	adds	r2, r5, #1
 8000d3e:	4210      	tst	r0, r2
 8000d40:	d171      	bne.n	8000e26 <__aeabi_fsub+0x252>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x174>
 8000d46:	e0a6      	b.n	8000e96 <__aeabi_fsub+0x2c2>
 8000d48:	4663      	mov	r3, ip
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x17c>
 8000d4e:	e0d9      	b.n	8000f04 <__aeabi_fsub+0x330>
 8000d50:	2200      	movs	r2, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x184>
 8000d56:	e788      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d58:	1b98      	subs	r0, r3, r6
 8000d5a:	0143      	lsls	r3, r0, #5
 8000d5c:	d400      	bmi.n	8000d60 <__aeabi_fsub+0x18c>
 8000d5e:	e0e1      	b.n	8000f24 <__aeabi_fsub+0x350>
 8000d60:	4663      	mov	r3, ip
 8000d62:	000c      	movs	r4, r1
 8000d64:	1af0      	subs	r0, r6, r3
 8000d66:	e76f      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x19a>
 8000d6c:	e0b7      	b.n	8000ede <__aeabi_fsub+0x30a>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	2801      	cmp	r0, #1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1a4>
 8000d76:	e09c      	b.n	8000eb2 <__aeabi_fsub+0x2de>
 8000d78:	28ff      	cmp	r0, #255	; 0xff
 8000d7a:	d026      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	e788      	b.n	8000c92 <__aeabi_fsub+0xbe>
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	2700      	movs	r7, #0
 8000d84:	e771      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d86:	20fe      	movs	r0, #254	; 0xfe
 8000d88:	1c6a      	adds	r2, r5, #1
 8000d8a:	4210      	tst	r0, r2
 8000d8c:	d064      	beq.n	8000e58 <__aeabi_fsub+0x284>
 8000d8e:	2aff      	cmp	r2, #255	; 0xff
 8000d90:	d0f6      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000d92:	0015      	movs	r5, r2
 8000d94:	4466      	add	r6, ip
 8000d96:	0870      	lsrs	r0, r6, #1
 8000d98:	0743      	lsls	r3, r0, #29
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fsub+0x1ca>
 8000d9c:	e756      	b.n	8000c4c <__aeabi_fsub+0x78>
 8000d9e:	08c3      	lsrs	r3, r0, #3
 8000da0:	2dff      	cmp	r5, #255	; 0xff
 8000da2:	d012      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	0a5f      	lsrs	r7, r3, #9
 8000da8:	b2ea      	uxtb	r2, r5
 8000daa:	e75e      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000dac:	4662      	mov	r2, ip
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000db2:	e096      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d008      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	03d2      	lsls	r2, r2, #15
 8000dbc:	4213      	tst	r3, r2
 8000dbe:	d004      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	4210      	tst	r0, r2
 8000dc4:	d101      	bne.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc6:	000c      	movs	r4, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0d8      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000dce:	2780      	movs	r7, #128	; 0x80
 8000dd0:	03ff      	lsls	r7, r7, #15
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	027f      	lsls	r7, r7, #9
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	0a7f      	lsrs	r7, r7, #9
 8000dda:	e746      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000ddc:	2320      	movs	r3, #32
 8000dde:	003a      	movs	r2, r7
 8000de0:	1b45      	subs	r5, r0, r5
 8000de2:	0038      	movs	r0, r7
 8000de4:	3501      	adds	r5, #1
 8000de6:	40ea      	lsrs	r2, r5
 8000de8:	1b5d      	subs	r5, r3, r5
 8000dea:	40a8      	lsls	r0, r5
 8000dec:	1e43      	subs	r3, r0, #1
 8000dee:	4198      	sbcs	r0, r3
 8000df0:	2500      	movs	r5, #0
 8000df2:	4310      	orrs	r0, r2
 8000df4:	e728      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000df6:	2320      	movs	r3, #32
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	0032      	movs	r2, r6
 8000dfc:	409e      	lsls	r6, r3
 8000dfe:	40c2      	lsrs	r2, r0
 8000e00:	0030      	movs	r0, r6
 8000e02:	1e43      	subs	r3, r0, #1
 8000e04:	4198      	sbcs	r0, r3
 8000e06:	4310      	orrs	r0, r2
 8000e08:	e70c      	b.n	8000c24 <__aeabi_fsub+0x50>
 8000e0a:	2aff      	cmp	r2, #255	; 0xff
 8000e0c:	d0db      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	4660      	mov	r0, ip
 8000e12:	04db      	lsls	r3, r3, #19
 8000e14:	4318      	orrs	r0, r3
 8000e16:	4684      	mov	ip, r0
 8000e18:	2f1b      	cmp	r7, #27
 8000e1a:	dd56      	ble.n	8000eca <__aeabi_fsub+0x2f6>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	000c      	movs	r4, r1
 8000e20:	0015      	movs	r5, r2
 8000e22:	1a30      	subs	r0, r6, r0
 8000e24:	e700      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000e26:	4663      	mov	r3, ip
 8000e28:	1b9f      	subs	r7, r3, r6
 8000e2a:	017b      	lsls	r3, r7, #5
 8000e2c:	d43d      	bmi.n	8000eaa <__aeabi_fsub+0x2d6>
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000e32:	e6fe      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000e34:	2400      	movs	r4, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e716      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e3c:	0005      	movs	r5, r0
 8000e3e:	e7af      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e40:	0032      	movs	r2, r6
 8000e42:	4643      	mov	r3, r8
 8000e44:	4641      	mov	r1, r8
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	2320      	movs	r3, #32
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	409e      	lsls	r6, r3
 8000e4e:	0030      	movs	r0, r6
 8000e50:	1e43      	subs	r3, r0, #1
 8000e52:	4198      	sbcs	r0, r3
 8000e54:	4310      	orrs	r0, r2
 8000e56:	e721      	b.n	8000c9c <__aeabi_fsub+0xc8>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d1a7      	bne.n	8000dac <__aeabi_fsub+0x1d8>
 8000e5c:	4663      	mov	r3, ip
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d059      	beq.n	8000f16 <__aeabi_fsub+0x342>
 8000e62:	2200      	movs	r2, #0
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x296>
 8000e68:	e6ff      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e6a:	0030      	movs	r0, r6
 8000e6c:	4460      	add	r0, ip
 8000e6e:	0143      	lsls	r3, r0, #5
 8000e70:	d592      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <__aeabi_fsub+0x348>)
 8000e74:	3501      	adds	r5, #1
 8000e76:	4018      	ands	r0, r3
 8000e78:	e78e      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d047      	beq.n	8000f10 <__aeabi_fsub+0x33c>
 8000e80:	1e4b      	subs	r3, r1, #1
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d015      	beq.n	8000eb2 <__aeabi_fsub+0x2de>
 8000e86:	29ff      	cmp	r1, #255	; 0xff
 8000e88:	d02b      	beq.n	8000ee2 <__aeabi_fsub+0x30e>
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	e74e      	b.n	8000d2c <__aeabi_fsub+0x158>
 8000e8e:	000c      	movs	r4, r1
 8000e90:	464b      	mov	r3, r9
 8000e92:	003d      	movs	r5, r7
 8000e94:	e784      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e96:	4662      	mov	r2, ip
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d18b      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d192      	bne.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ea0:	2780      	movs	r7, #128	; 0x80
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	03ff      	lsls	r7, r7, #15
 8000ea8:	e6df      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000eaa:	4663      	mov	r3, ip
 8000eac:	000c      	movs	r4, r1
 8000eae:	1af7      	subs	r7, r6, r3
 8000eb0:	e6bf      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	4460      	add	r0, ip
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x2ea>
 8000ebc:	e76c      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ebe:	2502      	movs	r5, #2
 8000ec0:	e6f2      	b.n	8000ca8 <__aeabi_fsub+0xd4>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2501      	movs	r5, #1
 8000ec6:	1b98      	subs	r0, r3, r6
 8000ec8:	e6ae      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000eca:	2320      	movs	r3, #32
 8000ecc:	4664      	mov	r4, ip
 8000ece:	4660      	mov	r0, ip
 8000ed0:	40fc      	lsrs	r4, r7
 8000ed2:	1bdf      	subs	r7, r3, r7
 8000ed4:	40b8      	lsls	r0, r7
 8000ed6:	1e43      	subs	r3, r0, #1
 8000ed8:	4198      	sbcs	r0, r3
 8000eda:	4320      	orrs	r0, r4
 8000edc:	e79f      	b.n	8000e1e <__aeabi_fsub+0x24a>
 8000ede:	0005      	movs	r5, r0
 8000ee0:	e75e      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	e771      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	4665      	mov	r5, ip
 8000eea:	4660      	mov	r0, ip
 8000eec:	40cd      	lsrs	r5, r1
 8000eee:	1a59      	subs	r1, r3, r1
 8000ef0:	4088      	lsls	r0, r1
 8000ef2:	1e43      	subs	r3, r0, #1
 8000ef4:	4198      	sbcs	r0, r3
 8000ef6:	4328      	orrs	r0, r5
 8000ef8:	e71c      	b.n	8000d34 <__aeabi_fsub+0x160>
 8000efa:	4663      	mov	r3, ip
 8000efc:	000c      	movs	r4, r1
 8000efe:	2501      	movs	r5, #1
 8000f00:	1af0      	subs	r0, r6, r3
 8000f02:	e691      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d095      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000f08:	000c      	movs	r4, r1
 8000f0a:	464f      	mov	r7, r9
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	e6ac      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f10:	464b      	mov	r3, r9
 8000f12:	000d      	movs	r5, r1
 8000f14:	e744      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000f16:	464f      	mov	r7, r9
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f1c:	fbffffff 	.word	0xfbffffff
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x356>
 8000f28:	e736      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	e69c      	b.n	8000c6a <__aeabi_fsub+0x96>

08000f30 <__aeabi_f2iz>:
 8000f30:	0241      	lsls	r1, r0, #9
 8000f32:	0042      	lsls	r2, r0, #1
 8000f34:	0fc3      	lsrs	r3, r0, #31
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	2000      	movs	r0, #0
 8000f3a:	0e12      	lsrs	r2, r2, #24
 8000f3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000f3e:	dd03      	ble.n	8000f48 <__aeabi_f2iz+0x18>
 8000f40:	2a9d      	cmp	r2, #157	; 0x9d
 8000f42:	dd02      	ble.n	8000f4a <__aeabi_f2iz+0x1a>
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <__aeabi_f2iz+0x3c>)
 8000f46:	1898      	adds	r0, r3, r2
 8000f48:	4770      	bx	lr
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	0400      	lsls	r0, r0, #16
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	2a95      	cmp	r2, #149	; 0x95
 8000f52:	dc07      	bgt.n	8000f64 <__aeabi_f2iz+0x34>
 8000f54:	2096      	movs	r0, #150	; 0x96
 8000f56:	1a82      	subs	r2, r0, r2
 8000f58:	40d1      	lsrs	r1, r2
 8000f5a:	4248      	negs	r0, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__aeabi_f2iz+0x18>
 8000f60:	0008      	movs	r0, r1
 8000f62:	e7f1      	b.n	8000f48 <__aeabi_f2iz+0x18>
 8000f64:	3a96      	subs	r2, #150	; 0x96
 8000f66:	4091      	lsls	r1, r2
 8000f68:	e7f7      	b.n	8000f5a <__aeabi_f2iz+0x2a>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7fffffff 	.word	0x7fffffff

08000f70 <__aeabi_i2f>:
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d013      	beq.n	8000f9e <__aeabi_i2f+0x2e>
 8000f76:	17c3      	asrs	r3, r0, #31
 8000f78:	18c6      	adds	r6, r0, r3
 8000f7a:	405e      	eors	r6, r3
 8000f7c:	0fc4      	lsrs	r4, r0, #31
 8000f7e:	0030      	movs	r0, r6
 8000f80:	f001 fe96 	bl	8002cb0 <__clzsi2>
 8000f84:	239e      	movs	r3, #158	; 0x9e
 8000f86:	0005      	movs	r5, r0
 8000f88:	1a1b      	subs	r3, r3, r0
 8000f8a:	2b96      	cmp	r3, #150	; 0x96
 8000f8c:	dc0f      	bgt.n	8000fae <__aeabi_i2f+0x3e>
 8000f8e:	2808      	cmp	r0, #8
 8000f90:	dd01      	ble.n	8000f96 <__aeabi_i2f+0x26>
 8000f92:	3d08      	subs	r5, #8
 8000f94:	40ae      	lsls	r6, r5
 8000f96:	0276      	lsls	r6, r6, #9
 8000f98:	0a76      	lsrs	r6, r6, #9
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	e002      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	05c0      	lsls	r0, r0, #23
 8000fa6:	4330      	orrs	r0, r6
 8000fa8:	07e4      	lsls	r4, r4, #31
 8000faa:	4320      	orrs	r0, r4
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fae:	2b99      	cmp	r3, #153	; 0x99
 8000fb0:	dd0c      	ble.n	8000fcc <__aeabi_i2f+0x5c>
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	0031      	movs	r1, r6
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	40d1      	lsrs	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	0001      	movs	r1, r0
 8000fbe:	0030      	movs	r0, r6
 8000fc0:	311b      	adds	r1, #27
 8000fc2:	4088      	lsls	r0, r1
 8000fc4:	1e41      	subs	r1, r0, #1
 8000fc6:	4188      	sbcs	r0, r1
 8000fc8:	4302      	orrs	r2, r0
 8000fca:	0016      	movs	r6, r2
 8000fcc:	2d05      	cmp	r5, #5
 8000fce:	dc12      	bgt.n	8000ff6 <__aeabi_i2f+0x86>
 8000fd0:	0031      	movs	r1, r6
 8000fd2:	4f0d      	ldr	r7, [pc, #52]	; (8001008 <__aeabi_i2f+0x98>)
 8000fd4:	4039      	ands	r1, r7
 8000fd6:	0772      	lsls	r2, r6, #29
 8000fd8:	d009      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8000fda:	200f      	movs	r0, #15
 8000fdc:	4030      	ands	r0, r6
 8000fde:	2804      	cmp	r0, #4
 8000fe0:	d005      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8000fe2:	3104      	adds	r1, #4
 8000fe4:	014a      	lsls	r2, r1, #5
 8000fe6:	d502      	bpl.n	8000fee <__aeabi_i2f+0x7e>
 8000fe8:	239f      	movs	r3, #159	; 0x9f
 8000fea:	4039      	ands	r1, r7
 8000fec:	1b5b      	subs	r3, r3, r5
 8000fee:	0189      	lsls	r1, r1, #6
 8000ff0:	0a4e      	lsrs	r6, r1, #9
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	e7d6      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000ff6:	1f6a      	subs	r2, r5, #5
 8000ff8:	4096      	lsls	r6, r2
 8000ffa:	0031      	movs	r1, r6
 8000ffc:	4f02      	ldr	r7, [pc, #8]	; (8001008 <__aeabi_i2f+0x98>)
 8000ffe:	4039      	ands	r1, r7
 8001000:	0772      	lsls	r2, r6, #29
 8001002:	d0f4      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8001004:	e7e9      	b.n	8000fda <__aeabi_i2f+0x6a>
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	fbffffff 	.word	0xfbffffff

0800100c <__aeabi_ui2f>:
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	1e05      	subs	r5, r0, #0
 8001010:	d00e      	beq.n	8001030 <__aeabi_ui2f+0x24>
 8001012:	f001 fe4d 	bl	8002cb0 <__clzsi2>
 8001016:	239e      	movs	r3, #158	; 0x9e
 8001018:	0004      	movs	r4, r0
 800101a:	1a1b      	subs	r3, r3, r0
 800101c:	2b96      	cmp	r3, #150	; 0x96
 800101e:	dc0c      	bgt.n	800103a <__aeabi_ui2f+0x2e>
 8001020:	2808      	cmp	r0, #8
 8001022:	dd01      	ble.n	8001028 <__aeabi_ui2f+0x1c>
 8001024:	3c08      	subs	r4, #8
 8001026:	40a5      	lsls	r5, r4
 8001028:	026d      	lsls	r5, r5, #9
 800102a:	0a6d      	lsrs	r5, r5, #9
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	e001      	b.n	8001034 <__aeabi_ui2f+0x28>
 8001030:	2000      	movs	r0, #0
 8001032:	2500      	movs	r5, #0
 8001034:	05c0      	lsls	r0, r0, #23
 8001036:	4328      	orrs	r0, r5
 8001038:	bd70      	pop	{r4, r5, r6, pc}
 800103a:	2b99      	cmp	r3, #153	; 0x99
 800103c:	dd09      	ble.n	8001052 <__aeabi_ui2f+0x46>
 800103e:	0002      	movs	r2, r0
 8001040:	0029      	movs	r1, r5
 8001042:	321b      	adds	r2, #27
 8001044:	4091      	lsls	r1, r2
 8001046:	1e4a      	subs	r2, r1, #1
 8001048:	4191      	sbcs	r1, r2
 800104a:	2205      	movs	r2, #5
 800104c:	1a12      	subs	r2, r2, r0
 800104e:	40d5      	lsrs	r5, r2
 8001050:	430d      	orrs	r5, r1
 8001052:	2c05      	cmp	r4, #5
 8001054:	dc12      	bgt.n	800107c <__aeabi_ui2f+0x70>
 8001056:	0029      	movs	r1, r5
 8001058:	4e0c      	ldr	r6, [pc, #48]	; (800108c <__aeabi_ui2f+0x80>)
 800105a:	4031      	ands	r1, r6
 800105c:	076a      	lsls	r2, r5, #29
 800105e:	d009      	beq.n	8001074 <__aeabi_ui2f+0x68>
 8001060:	200f      	movs	r0, #15
 8001062:	4028      	ands	r0, r5
 8001064:	2804      	cmp	r0, #4
 8001066:	d005      	beq.n	8001074 <__aeabi_ui2f+0x68>
 8001068:	3104      	adds	r1, #4
 800106a:	014a      	lsls	r2, r1, #5
 800106c:	d502      	bpl.n	8001074 <__aeabi_ui2f+0x68>
 800106e:	239f      	movs	r3, #159	; 0x9f
 8001070:	4031      	ands	r1, r6
 8001072:	1b1b      	subs	r3, r3, r4
 8001074:	0189      	lsls	r1, r1, #6
 8001076:	0a4d      	lsrs	r5, r1, #9
 8001078:	b2d8      	uxtb	r0, r3
 800107a:	e7db      	b.n	8001034 <__aeabi_ui2f+0x28>
 800107c:	1f62      	subs	r2, r4, #5
 800107e:	4095      	lsls	r5, r2
 8001080:	0029      	movs	r1, r5
 8001082:	4e02      	ldr	r6, [pc, #8]	; (800108c <__aeabi_ui2f+0x80>)
 8001084:	4031      	ands	r1, r6
 8001086:	076a      	lsls	r2, r5, #29
 8001088:	d0f4      	beq.n	8001074 <__aeabi_ui2f+0x68>
 800108a:	e7e9      	b.n	8001060 <__aeabi_ui2f+0x54>
 800108c:	fbffffff 	.word	0xfbffffff

08001090 <__aeabi_dadd>:
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	464f      	mov	r7, r9
 8001094:	4646      	mov	r6, r8
 8001096:	46d6      	mov	lr, sl
 8001098:	000d      	movs	r5, r1
 800109a:	0004      	movs	r4, r0
 800109c:	b5c0      	push	{r6, r7, lr}
 800109e:	001f      	movs	r7, r3
 80010a0:	0011      	movs	r1, r2
 80010a2:	0328      	lsls	r0, r5, #12
 80010a4:	0f62      	lsrs	r2, r4, #29
 80010a6:	0a40      	lsrs	r0, r0, #9
 80010a8:	4310      	orrs	r0, r2
 80010aa:	007a      	lsls	r2, r7, #1
 80010ac:	0d52      	lsrs	r2, r2, #21
 80010ae:	00e3      	lsls	r3, r4, #3
 80010b0:	033c      	lsls	r4, r7, #12
 80010b2:	4691      	mov	r9, r2
 80010b4:	0a64      	lsrs	r4, r4, #9
 80010b6:	0ffa      	lsrs	r2, r7, #31
 80010b8:	0f4f      	lsrs	r7, r1, #29
 80010ba:	006e      	lsls	r6, r5, #1
 80010bc:	4327      	orrs	r7, r4
 80010be:	4692      	mov	sl, r2
 80010c0:	46b8      	mov	r8, r7
 80010c2:	0d76      	lsrs	r6, r6, #21
 80010c4:	0fed      	lsrs	r5, r5, #31
 80010c6:	00c9      	lsls	r1, r1, #3
 80010c8:	4295      	cmp	r5, r2
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x3e>
 80010cc:	e099      	b.n	8001202 <__aeabi_dadd+0x172>
 80010ce:	464c      	mov	r4, r9
 80010d0:	1b34      	subs	r4, r6, r4
 80010d2:	46a4      	mov	ip, r4
 80010d4:	2c00      	cmp	r4, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_dadd+0x4a>
 80010d8:	e07c      	b.n	80011d4 <__aeabi_dadd+0x144>
 80010da:	464a      	mov	r2, r9
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x52>
 80010e0:	e0b8      	b.n	8001254 <__aeabi_dadd+0x1c4>
 80010e2:	4ac5      	ldr	r2, [pc, #788]	; (80013f8 <__aeabi_dadd+0x368>)
 80010e4:	4296      	cmp	r6, r2
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x5a>
 80010e8:	e11c      	b.n	8001324 <__aeabi_dadd+0x294>
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	003c      	movs	r4, r7
 80010ee:	0412      	lsls	r2, r2, #16
 80010f0:	4314      	orrs	r4, r2
 80010f2:	46a0      	mov	r8, r4
 80010f4:	4662      	mov	r2, ip
 80010f6:	2a38      	cmp	r2, #56	; 0x38
 80010f8:	dd00      	ble.n	80010fc <__aeabi_dadd+0x6c>
 80010fa:	e161      	b.n	80013c0 <__aeabi_dadd+0x330>
 80010fc:	2a1f      	cmp	r2, #31
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dadd+0x72>
 8001100:	e1cc      	b.n	800149c <__aeabi_dadd+0x40c>
 8001102:	4664      	mov	r4, ip
 8001104:	2220      	movs	r2, #32
 8001106:	1b12      	subs	r2, r2, r4
 8001108:	4644      	mov	r4, r8
 800110a:	4094      	lsls	r4, r2
 800110c:	000f      	movs	r7, r1
 800110e:	46a1      	mov	r9, r4
 8001110:	4664      	mov	r4, ip
 8001112:	4091      	lsls	r1, r2
 8001114:	40e7      	lsrs	r7, r4
 8001116:	464c      	mov	r4, r9
 8001118:	1e4a      	subs	r2, r1, #1
 800111a:	4191      	sbcs	r1, r2
 800111c:	433c      	orrs	r4, r7
 800111e:	4642      	mov	r2, r8
 8001120:	4321      	orrs	r1, r4
 8001122:	4664      	mov	r4, ip
 8001124:	40e2      	lsrs	r2, r4
 8001126:	1a80      	subs	r0, r0, r2
 8001128:	1a5c      	subs	r4, r3, r1
 800112a:	42a3      	cmp	r3, r4
 800112c:	419b      	sbcs	r3, r3
 800112e:	425f      	negs	r7, r3
 8001130:	1bc7      	subs	r7, r0, r7
 8001132:	023b      	lsls	r3, r7, #8
 8001134:	d400      	bmi.n	8001138 <__aeabi_dadd+0xa8>
 8001136:	e0d0      	b.n	80012da <__aeabi_dadd+0x24a>
 8001138:	027f      	lsls	r7, r7, #9
 800113a:	0a7f      	lsrs	r7, r7, #9
 800113c:	2f00      	cmp	r7, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_dadd+0xb2>
 8001140:	e0ff      	b.n	8001342 <__aeabi_dadd+0x2b2>
 8001142:	0038      	movs	r0, r7
 8001144:	f001 fdb4 	bl	8002cb0 <__clzsi2>
 8001148:	0001      	movs	r1, r0
 800114a:	3908      	subs	r1, #8
 800114c:	2320      	movs	r3, #32
 800114e:	0022      	movs	r2, r4
 8001150:	1a5b      	subs	r3, r3, r1
 8001152:	408f      	lsls	r7, r1
 8001154:	40da      	lsrs	r2, r3
 8001156:	408c      	lsls	r4, r1
 8001158:	4317      	orrs	r7, r2
 800115a:	42b1      	cmp	r1, r6
 800115c:	da00      	bge.n	8001160 <__aeabi_dadd+0xd0>
 800115e:	e0ff      	b.n	8001360 <__aeabi_dadd+0x2d0>
 8001160:	1b89      	subs	r1, r1, r6
 8001162:	1c4b      	adds	r3, r1, #1
 8001164:	2b1f      	cmp	r3, #31
 8001166:	dd00      	ble.n	800116a <__aeabi_dadd+0xda>
 8001168:	e0a8      	b.n	80012bc <__aeabi_dadd+0x22c>
 800116a:	2220      	movs	r2, #32
 800116c:	0039      	movs	r1, r7
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	0020      	movs	r0, r4
 8001172:	4094      	lsls	r4, r2
 8001174:	4091      	lsls	r1, r2
 8001176:	40d8      	lsrs	r0, r3
 8001178:	1e62      	subs	r2, r4, #1
 800117a:	4194      	sbcs	r4, r2
 800117c:	40df      	lsrs	r7, r3
 800117e:	2600      	movs	r6, #0
 8001180:	4301      	orrs	r1, r0
 8001182:	430c      	orrs	r4, r1
 8001184:	0763      	lsls	r3, r4, #29
 8001186:	d009      	beq.n	800119c <__aeabi_dadd+0x10c>
 8001188:	230f      	movs	r3, #15
 800118a:	4023      	ands	r3, r4
 800118c:	2b04      	cmp	r3, #4
 800118e:	d005      	beq.n	800119c <__aeabi_dadd+0x10c>
 8001190:	1d23      	adds	r3, r4, #4
 8001192:	42a3      	cmp	r3, r4
 8001194:	41a4      	sbcs	r4, r4
 8001196:	4264      	negs	r4, r4
 8001198:	193f      	adds	r7, r7, r4
 800119a:	001c      	movs	r4, r3
 800119c:	023b      	lsls	r3, r7, #8
 800119e:	d400      	bmi.n	80011a2 <__aeabi_dadd+0x112>
 80011a0:	e09e      	b.n	80012e0 <__aeabi_dadd+0x250>
 80011a2:	4b95      	ldr	r3, [pc, #596]	; (80013f8 <__aeabi_dadd+0x368>)
 80011a4:	3601      	adds	r6, #1
 80011a6:	429e      	cmp	r6, r3
 80011a8:	d100      	bne.n	80011ac <__aeabi_dadd+0x11c>
 80011aa:	e0b7      	b.n	800131c <__aeabi_dadd+0x28c>
 80011ac:	4a93      	ldr	r2, [pc, #588]	; (80013fc <__aeabi_dadd+0x36c>)
 80011ae:	08e4      	lsrs	r4, r4, #3
 80011b0:	4017      	ands	r7, r2
 80011b2:	077b      	lsls	r3, r7, #29
 80011b4:	0571      	lsls	r1, r6, #21
 80011b6:	027f      	lsls	r7, r7, #9
 80011b8:	4323      	orrs	r3, r4
 80011ba:	0b3f      	lsrs	r7, r7, #12
 80011bc:	0d4a      	lsrs	r2, r1, #21
 80011be:	0512      	lsls	r2, r2, #20
 80011c0:	433a      	orrs	r2, r7
 80011c2:	07ed      	lsls	r5, r5, #31
 80011c4:	432a      	orrs	r2, r5
 80011c6:	0018      	movs	r0, r3
 80011c8:	0011      	movs	r1, r2
 80011ca:	bce0      	pop	{r5, r6, r7}
 80011cc:	46ba      	mov	sl, r7
 80011ce:	46b1      	mov	r9, r6
 80011d0:	46a8      	mov	r8, r5
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	d04b      	beq.n	8001270 <__aeabi_dadd+0x1e0>
 80011d8:	464c      	mov	r4, r9
 80011da:	1ba4      	subs	r4, r4, r6
 80011dc:	46a4      	mov	ip, r4
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_dadd+0x154>
 80011e2:	e123      	b.n	800142c <__aeabi_dadd+0x39c>
 80011e4:	0004      	movs	r4, r0
 80011e6:	431c      	orrs	r4, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x15c>
 80011ea:	e1af      	b.n	800154c <__aeabi_dadd+0x4bc>
 80011ec:	4662      	mov	r2, ip
 80011ee:	1e54      	subs	r4, r2, #1
 80011f0:	2a01      	cmp	r2, #1
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x166>
 80011f4:	e215      	b.n	8001622 <__aeabi_dadd+0x592>
 80011f6:	4d80      	ldr	r5, [pc, #512]	; (80013f8 <__aeabi_dadd+0x368>)
 80011f8:	45ac      	cmp	ip, r5
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x16e>
 80011fc:	e1c8      	b.n	8001590 <__aeabi_dadd+0x500>
 80011fe:	46a4      	mov	ip, r4
 8001200:	e11b      	b.n	800143a <__aeabi_dadd+0x3aa>
 8001202:	464a      	mov	r2, r9
 8001204:	1ab2      	subs	r2, r6, r2
 8001206:	4694      	mov	ip, r2
 8001208:	2a00      	cmp	r2, #0
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x17e>
 800120c:	e0ac      	b.n	8001368 <__aeabi_dadd+0x2d8>
 800120e:	464a      	mov	r2, r9
 8001210:	2a00      	cmp	r2, #0
 8001212:	d043      	beq.n	800129c <__aeabi_dadd+0x20c>
 8001214:	4a78      	ldr	r2, [pc, #480]	; (80013f8 <__aeabi_dadd+0x368>)
 8001216:	4296      	cmp	r6, r2
 8001218:	d100      	bne.n	800121c <__aeabi_dadd+0x18c>
 800121a:	e1af      	b.n	800157c <__aeabi_dadd+0x4ec>
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	003c      	movs	r4, r7
 8001220:	0412      	lsls	r2, r2, #16
 8001222:	4314      	orrs	r4, r2
 8001224:	46a0      	mov	r8, r4
 8001226:	4662      	mov	r2, ip
 8001228:	2a38      	cmp	r2, #56	; 0x38
 800122a:	dc67      	bgt.n	80012fc <__aeabi_dadd+0x26c>
 800122c:	2a1f      	cmp	r2, #31
 800122e:	dc00      	bgt.n	8001232 <__aeabi_dadd+0x1a2>
 8001230:	e15f      	b.n	80014f2 <__aeabi_dadd+0x462>
 8001232:	4647      	mov	r7, r8
 8001234:	3a20      	subs	r2, #32
 8001236:	40d7      	lsrs	r7, r2
 8001238:	4662      	mov	r2, ip
 800123a:	2a20      	cmp	r2, #32
 800123c:	d005      	beq.n	800124a <__aeabi_dadd+0x1ba>
 800123e:	4664      	mov	r4, ip
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	1b12      	subs	r2, r2, r4
 8001244:	4644      	mov	r4, r8
 8001246:	4094      	lsls	r4, r2
 8001248:	4321      	orrs	r1, r4
 800124a:	1e4a      	subs	r2, r1, #1
 800124c:	4191      	sbcs	r1, r2
 800124e:	000c      	movs	r4, r1
 8001250:	433c      	orrs	r4, r7
 8001252:	e057      	b.n	8001304 <__aeabi_dadd+0x274>
 8001254:	003a      	movs	r2, r7
 8001256:	430a      	orrs	r2, r1
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x1cc>
 800125a:	e105      	b.n	8001468 <__aeabi_dadd+0x3d8>
 800125c:	0022      	movs	r2, r4
 800125e:	3a01      	subs	r2, #1
 8001260:	2c01      	cmp	r4, #1
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x1d6>
 8001264:	e182      	b.n	800156c <__aeabi_dadd+0x4dc>
 8001266:	4c64      	ldr	r4, [pc, #400]	; (80013f8 <__aeabi_dadd+0x368>)
 8001268:	45a4      	cmp	ip, r4
 800126a:	d05b      	beq.n	8001324 <__aeabi_dadd+0x294>
 800126c:	4694      	mov	ip, r2
 800126e:	e741      	b.n	80010f4 <__aeabi_dadd+0x64>
 8001270:	4c63      	ldr	r4, [pc, #396]	; (8001400 <__aeabi_dadd+0x370>)
 8001272:	1c77      	adds	r7, r6, #1
 8001274:	4227      	tst	r7, r4
 8001276:	d000      	beq.n	800127a <__aeabi_dadd+0x1ea>
 8001278:	e0c4      	b.n	8001404 <__aeabi_dadd+0x374>
 800127a:	0004      	movs	r4, r0
 800127c:	431c      	orrs	r4, r3
 800127e:	2e00      	cmp	r6, #0
 8001280:	d000      	beq.n	8001284 <__aeabi_dadd+0x1f4>
 8001282:	e169      	b.n	8001558 <__aeabi_dadd+0x4c8>
 8001284:	2c00      	cmp	r4, #0
 8001286:	d100      	bne.n	800128a <__aeabi_dadd+0x1fa>
 8001288:	e1bf      	b.n	800160a <__aeabi_dadd+0x57a>
 800128a:	4644      	mov	r4, r8
 800128c:	430c      	orrs	r4, r1
 800128e:	d000      	beq.n	8001292 <__aeabi_dadd+0x202>
 8001290:	e1d0      	b.n	8001634 <__aeabi_dadd+0x5a4>
 8001292:	0742      	lsls	r2, r0, #29
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	4313      	orrs	r3, r2
 8001298:	08c0      	lsrs	r0, r0, #3
 800129a:	e029      	b.n	80012f0 <__aeabi_dadd+0x260>
 800129c:	003a      	movs	r2, r7
 800129e:	430a      	orrs	r2, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x214>
 80012a2:	e170      	b.n	8001586 <__aeabi_dadd+0x4f6>
 80012a4:	4662      	mov	r2, ip
 80012a6:	4664      	mov	r4, ip
 80012a8:	3a01      	subs	r2, #1
 80012aa:	2c01      	cmp	r4, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dadd+0x220>
 80012ae:	e0e0      	b.n	8001472 <__aeabi_dadd+0x3e2>
 80012b0:	4c51      	ldr	r4, [pc, #324]	; (80013f8 <__aeabi_dadd+0x368>)
 80012b2:	45a4      	cmp	ip, r4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x228>
 80012b6:	e161      	b.n	800157c <__aeabi_dadd+0x4ec>
 80012b8:	4694      	mov	ip, r2
 80012ba:	e7b4      	b.n	8001226 <__aeabi_dadd+0x196>
 80012bc:	003a      	movs	r2, r7
 80012be:	391f      	subs	r1, #31
 80012c0:	40ca      	lsrs	r2, r1
 80012c2:	0011      	movs	r1, r2
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d003      	beq.n	80012d0 <__aeabi_dadd+0x240>
 80012c8:	2240      	movs	r2, #64	; 0x40
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	409f      	lsls	r7, r3
 80012ce:	433c      	orrs	r4, r7
 80012d0:	1e63      	subs	r3, r4, #1
 80012d2:	419c      	sbcs	r4, r3
 80012d4:	2700      	movs	r7, #0
 80012d6:	2600      	movs	r6, #0
 80012d8:	430c      	orrs	r4, r1
 80012da:	0763      	lsls	r3, r4, #29
 80012dc:	d000      	beq.n	80012e0 <__aeabi_dadd+0x250>
 80012de:	e753      	b.n	8001188 <__aeabi_dadd+0xf8>
 80012e0:	46b4      	mov	ip, r6
 80012e2:	08e4      	lsrs	r4, r4, #3
 80012e4:	077b      	lsls	r3, r7, #29
 80012e6:	4323      	orrs	r3, r4
 80012e8:	08f8      	lsrs	r0, r7, #3
 80012ea:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <__aeabi_dadd+0x368>)
 80012ec:	4594      	cmp	ip, r2
 80012ee:	d01d      	beq.n	800132c <__aeabi_dadd+0x29c>
 80012f0:	4662      	mov	r2, ip
 80012f2:	0307      	lsls	r7, r0, #12
 80012f4:	0552      	lsls	r2, r2, #21
 80012f6:	0b3f      	lsrs	r7, r7, #12
 80012f8:	0d52      	lsrs	r2, r2, #21
 80012fa:	e760      	b.n	80011be <__aeabi_dadd+0x12e>
 80012fc:	4644      	mov	r4, r8
 80012fe:	430c      	orrs	r4, r1
 8001300:	1e62      	subs	r2, r4, #1
 8001302:	4194      	sbcs	r4, r2
 8001304:	18e4      	adds	r4, r4, r3
 8001306:	429c      	cmp	r4, r3
 8001308:	419b      	sbcs	r3, r3
 800130a:	425f      	negs	r7, r3
 800130c:	183f      	adds	r7, r7, r0
 800130e:	023b      	lsls	r3, r7, #8
 8001310:	d5e3      	bpl.n	80012da <__aeabi_dadd+0x24a>
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <__aeabi_dadd+0x368>)
 8001314:	3601      	adds	r6, #1
 8001316:	429e      	cmp	r6, r3
 8001318:	d000      	beq.n	800131c <__aeabi_dadd+0x28c>
 800131a:	e0b5      	b.n	8001488 <__aeabi_dadd+0x3f8>
 800131c:	0032      	movs	r2, r6
 800131e:	2700      	movs	r7, #0
 8001320:	2300      	movs	r3, #0
 8001322:	e74c      	b.n	80011be <__aeabi_dadd+0x12e>
 8001324:	0742      	lsls	r2, r0, #29
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	4313      	orrs	r3, r2
 800132a:	08c0      	lsrs	r0, r0, #3
 800132c:	001a      	movs	r2, r3
 800132e:	4302      	orrs	r2, r0
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x2a4>
 8001332:	e1e1      	b.n	80016f8 <__aeabi_dadd+0x668>
 8001334:	2780      	movs	r7, #128	; 0x80
 8001336:	033f      	lsls	r7, r7, #12
 8001338:	4307      	orrs	r7, r0
 800133a:	033f      	lsls	r7, r7, #12
 800133c:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <__aeabi_dadd+0x368>)
 800133e:	0b3f      	lsrs	r7, r7, #12
 8001340:	e73d      	b.n	80011be <__aeabi_dadd+0x12e>
 8001342:	0020      	movs	r0, r4
 8001344:	f001 fcb4 	bl	8002cb0 <__clzsi2>
 8001348:	0001      	movs	r1, r0
 800134a:	3118      	adds	r1, #24
 800134c:	291f      	cmp	r1, #31
 800134e:	dc00      	bgt.n	8001352 <__aeabi_dadd+0x2c2>
 8001350:	e6fc      	b.n	800114c <__aeabi_dadd+0xbc>
 8001352:	3808      	subs	r0, #8
 8001354:	4084      	lsls	r4, r0
 8001356:	0027      	movs	r7, r4
 8001358:	2400      	movs	r4, #0
 800135a:	42b1      	cmp	r1, r6
 800135c:	db00      	blt.n	8001360 <__aeabi_dadd+0x2d0>
 800135e:	e6ff      	b.n	8001160 <__aeabi_dadd+0xd0>
 8001360:	4a26      	ldr	r2, [pc, #152]	; (80013fc <__aeabi_dadd+0x36c>)
 8001362:	1a76      	subs	r6, r6, r1
 8001364:	4017      	ands	r7, r2
 8001366:	e70d      	b.n	8001184 <__aeabi_dadd+0xf4>
 8001368:	2a00      	cmp	r2, #0
 800136a:	d02f      	beq.n	80013cc <__aeabi_dadd+0x33c>
 800136c:	464a      	mov	r2, r9
 800136e:	1b92      	subs	r2, r2, r6
 8001370:	4694      	mov	ip, r2
 8001372:	2e00      	cmp	r6, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_dadd+0x2e8>
 8001376:	e0ad      	b.n	80014d4 <__aeabi_dadd+0x444>
 8001378:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <__aeabi_dadd+0x368>)
 800137a:	4591      	cmp	r9, r2
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x2f0>
 800137e:	e10f      	b.n	80015a0 <__aeabi_dadd+0x510>
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0412      	lsls	r2, r2, #16
 8001384:	4310      	orrs	r0, r2
 8001386:	4662      	mov	r2, ip
 8001388:	2a38      	cmp	r2, #56	; 0x38
 800138a:	dd00      	ble.n	800138e <__aeabi_dadd+0x2fe>
 800138c:	e10f      	b.n	80015ae <__aeabi_dadd+0x51e>
 800138e:	2a1f      	cmp	r2, #31
 8001390:	dd00      	ble.n	8001394 <__aeabi_dadd+0x304>
 8001392:	e180      	b.n	8001696 <__aeabi_dadd+0x606>
 8001394:	4664      	mov	r4, ip
 8001396:	2220      	movs	r2, #32
 8001398:	001e      	movs	r6, r3
 800139a:	1b12      	subs	r2, r2, r4
 800139c:	4667      	mov	r7, ip
 800139e:	0004      	movs	r4, r0
 80013a0:	4093      	lsls	r3, r2
 80013a2:	4094      	lsls	r4, r2
 80013a4:	40fe      	lsrs	r6, r7
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	4193      	sbcs	r3, r2
 80013aa:	40f8      	lsrs	r0, r7
 80013ac:	4334      	orrs	r4, r6
 80013ae:	431c      	orrs	r4, r3
 80013b0:	4480      	add	r8, r0
 80013b2:	1864      	adds	r4, r4, r1
 80013b4:	428c      	cmp	r4, r1
 80013b6:	41bf      	sbcs	r7, r7
 80013b8:	427f      	negs	r7, r7
 80013ba:	464e      	mov	r6, r9
 80013bc:	4447      	add	r7, r8
 80013be:	e7a6      	b.n	800130e <__aeabi_dadd+0x27e>
 80013c0:	4642      	mov	r2, r8
 80013c2:	430a      	orrs	r2, r1
 80013c4:	0011      	movs	r1, r2
 80013c6:	1e4a      	subs	r2, r1, #1
 80013c8:	4191      	sbcs	r1, r2
 80013ca:	e6ad      	b.n	8001128 <__aeabi_dadd+0x98>
 80013cc:	4c0c      	ldr	r4, [pc, #48]	; (8001400 <__aeabi_dadd+0x370>)
 80013ce:	1c72      	adds	r2, r6, #1
 80013d0:	4222      	tst	r2, r4
 80013d2:	d000      	beq.n	80013d6 <__aeabi_dadd+0x346>
 80013d4:	e0a1      	b.n	800151a <__aeabi_dadd+0x48a>
 80013d6:	0002      	movs	r2, r0
 80013d8:	431a      	orrs	r2, r3
 80013da:	2e00      	cmp	r6, #0
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dadd+0x350>
 80013de:	e0fa      	b.n	80015d6 <__aeabi_dadd+0x546>
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x356>
 80013e4:	e145      	b.n	8001672 <__aeabi_dadd+0x5e2>
 80013e6:	003a      	movs	r2, r7
 80013e8:	430a      	orrs	r2, r1
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x35e>
 80013ec:	e146      	b.n	800167c <__aeabi_dadd+0x5ec>
 80013ee:	0742      	lsls	r2, r0, #29
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	08c0      	lsrs	r0, r0, #3
 80013f6:	e77b      	b.n	80012f0 <__aeabi_dadd+0x260>
 80013f8:	000007ff 	.word	0x000007ff
 80013fc:	ff7fffff 	.word	0xff7fffff
 8001400:	000007fe 	.word	0x000007fe
 8001404:	4647      	mov	r7, r8
 8001406:	1a5c      	subs	r4, r3, r1
 8001408:	1bc2      	subs	r2, r0, r7
 800140a:	42a3      	cmp	r3, r4
 800140c:	41bf      	sbcs	r7, r7
 800140e:	427f      	negs	r7, r7
 8001410:	46b9      	mov	r9, r7
 8001412:	0017      	movs	r7, r2
 8001414:	464a      	mov	r2, r9
 8001416:	1abf      	subs	r7, r7, r2
 8001418:	023a      	lsls	r2, r7, #8
 800141a:	d500      	bpl.n	800141e <__aeabi_dadd+0x38e>
 800141c:	e08d      	b.n	800153a <__aeabi_dadd+0x4aa>
 800141e:	0023      	movs	r3, r4
 8001420:	433b      	orrs	r3, r7
 8001422:	d000      	beq.n	8001426 <__aeabi_dadd+0x396>
 8001424:	e68a      	b.n	800113c <__aeabi_dadd+0xac>
 8001426:	2000      	movs	r0, #0
 8001428:	2500      	movs	r5, #0
 800142a:	e761      	b.n	80012f0 <__aeabi_dadd+0x260>
 800142c:	4cb4      	ldr	r4, [pc, #720]	; (8001700 <__aeabi_dadd+0x670>)
 800142e:	45a1      	cmp	r9, r4
 8001430:	d100      	bne.n	8001434 <__aeabi_dadd+0x3a4>
 8001432:	e0ad      	b.n	8001590 <__aeabi_dadd+0x500>
 8001434:	2480      	movs	r4, #128	; 0x80
 8001436:	0424      	lsls	r4, r4, #16
 8001438:	4320      	orrs	r0, r4
 800143a:	4664      	mov	r4, ip
 800143c:	2c38      	cmp	r4, #56	; 0x38
 800143e:	dc3d      	bgt.n	80014bc <__aeabi_dadd+0x42c>
 8001440:	4662      	mov	r2, ip
 8001442:	2c1f      	cmp	r4, #31
 8001444:	dd00      	ble.n	8001448 <__aeabi_dadd+0x3b8>
 8001446:	e0b7      	b.n	80015b8 <__aeabi_dadd+0x528>
 8001448:	2520      	movs	r5, #32
 800144a:	001e      	movs	r6, r3
 800144c:	1b2d      	subs	r5, r5, r4
 800144e:	0004      	movs	r4, r0
 8001450:	40ab      	lsls	r3, r5
 8001452:	40ac      	lsls	r4, r5
 8001454:	40d6      	lsrs	r6, r2
 8001456:	40d0      	lsrs	r0, r2
 8001458:	4642      	mov	r2, r8
 800145a:	1e5d      	subs	r5, r3, #1
 800145c:	41ab      	sbcs	r3, r5
 800145e:	4334      	orrs	r4, r6
 8001460:	1a12      	subs	r2, r2, r0
 8001462:	4690      	mov	r8, r2
 8001464:	4323      	orrs	r3, r4
 8001466:	e02c      	b.n	80014c2 <__aeabi_dadd+0x432>
 8001468:	0742      	lsls	r2, r0, #29
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	4313      	orrs	r3, r2
 800146e:	08c0      	lsrs	r0, r0, #3
 8001470:	e73b      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001472:	185c      	adds	r4, r3, r1
 8001474:	429c      	cmp	r4, r3
 8001476:	419b      	sbcs	r3, r3
 8001478:	4440      	add	r0, r8
 800147a:	425b      	negs	r3, r3
 800147c:	18c7      	adds	r7, r0, r3
 800147e:	2601      	movs	r6, #1
 8001480:	023b      	lsls	r3, r7, #8
 8001482:	d400      	bmi.n	8001486 <__aeabi_dadd+0x3f6>
 8001484:	e729      	b.n	80012da <__aeabi_dadd+0x24a>
 8001486:	2602      	movs	r6, #2
 8001488:	4a9e      	ldr	r2, [pc, #632]	; (8001704 <__aeabi_dadd+0x674>)
 800148a:	0863      	lsrs	r3, r4, #1
 800148c:	4017      	ands	r7, r2
 800148e:	2201      	movs	r2, #1
 8001490:	4014      	ands	r4, r2
 8001492:	431c      	orrs	r4, r3
 8001494:	07fb      	lsls	r3, r7, #31
 8001496:	431c      	orrs	r4, r3
 8001498:	087f      	lsrs	r7, r7, #1
 800149a:	e673      	b.n	8001184 <__aeabi_dadd+0xf4>
 800149c:	4644      	mov	r4, r8
 800149e:	3a20      	subs	r2, #32
 80014a0:	40d4      	lsrs	r4, r2
 80014a2:	4662      	mov	r2, ip
 80014a4:	2a20      	cmp	r2, #32
 80014a6:	d005      	beq.n	80014b4 <__aeabi_dadd+0x424>
 80014a8:	4667      	mov	r7, ip
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	1bd2      	subs	r2, r2, r7
 80014ae:	4647      	mov	r7, r8
 80014b0:	4097      	lsls	r7, r2
 80014b2:	4339      	orrs	r1, r7
 80014b4:	1e4a      	subs	r2, r1, #1
 80014b6:	4191      	sbcs	r1, r2
 80014b8:	4321      	orrs	r1, r4
 80014ba:	e635      	b.n	8001128 <__aeabi_dadd+0x98>
 80014bc:	4303      	orrs	r3, r0
 80014be:	1e58      	subs	r0, r3, #1
 80014c0:	4183      	sbcs	r3, r0
 80014c2:	1acc      	subs	r4, r1, r3
 80014c4:	42a1      	cmp	r1, r4
 80014c6:	41bf      	sbcs	r7, r7
 80014c8:	4643      	mov	r3, r8
 80014ca:	427f      	negs	r7, r7
 80014cc:	4655      	mov	r5, sl
 80014ce:	464e      	mov	r6, r9
 80014d0:	1bdf      	subs	r7, r3, r7
 80014d2:	e62e      	b.n	8001132 <__aeabi_dadd+0xa2>
 80014d4:	0002      	movs	r2, r0
 80014d6:	431a      	orrs	r2, r3
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x44c>
 80014da:	e0bd      	b.n	8001658 <__aeabi_dadd+0x5c8>
 80014dc:	4662      	mov	r2, ip
 80014de:	4664      	mov	r4, ip
 80014e0:	3a01      	subs	r2, #1
 80014e2:	2c01      	cmp	r4, #1
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x458>
 80014e6:	e0e5      	b.n	80016b4 <__aeabi_dadd+0x624>
 80014e8:	4c85      	ldr	r4, [pc, #532]	; (8001700 <__aeabi_dadd+0x670>)
 80014ea:	45a4      	cmp	ip, r4
 80014ec:	d058      	beq.n	80015a0 <__aeabi_dadd+0x510>
 80014ee:	4694      	mov	ip, r2
 80014f0:	e749      	b.n	8001386 <__aeabi_dadd+0x2f6>
 80014f2:	4664      	mov	r4, ip
 80014f4:	2220      	movs	r2, #32
 80014f6:	1b12      	subs	r2, r2, r4
 80014f8:	4644      	mov	r4, r8
 80014fa:	4094      	lsls	r4, r2
 80014fc:	000f      	movs	r7, r1
 80014fe:	46a1      	mov	r9, r4
 8001500:	4664      	mov	r4, ip
 8001502:	4091      	lsls	r1, r2
 8001504:	40e7      	lsrs	r7, r4
 8001506:	464c      	mov	r4, r9
 8001508:	1e4a      	subs	r2, r1, #1
 800150a:	4191      	sbcs	r1, r2
 800150c:	433c      	orrs	r4, r7
 800150e:	4642      	mov	r2, r8
 8001510:	430c      	orrs	r4, r1
 8001512:	4661      	mov	r1, ip
 8001514:	40ca      	lsrs	r2, r1
 8001516:	1880      	adds	r0, r0, r2
 8001518:	e6f4      	b.n	8001304 <__aeabi_dadd+0x274>
 800151a:	4c79      	ldr	r4, [pc, #484]	; (8001700 <__aeabi_dadd+0x670>)
 800151c:	42a2      	cmp	r2, r4
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x492>
 8001520:	e6fd      	b.n	800131e <__aeabi_dadd+0x28e>
 8001522:	1859      	adds	r1, r3, r1
 8001524:	4299      	cmp	r1, r3
 8001526:	419b      	sbcs	r3, r3
 8001528:	4440      	add	r0, r8
 800152a:	425f      	negs	r7, r3
 800152c:	19c7      	adds	r7, r0, r7
 800152e:	07fc      	lsls	r4, r7, #31
 8001530:	0849      	lsrs	r1, r1, #1
 8001532:	0016      	movs	r6, r2
 8001534:	430c      	orrs	r4, r1
 8001536:	087f      	lsrs	r7, r7, #1
 8001538:	e6cf      	b.n	80012da <__aeabi_dadd+0x24a>
 800153a:	1acc      	subs	r4, r1, r3
 800153c:	42a1      	cmp	r1, r4
 800153e:	41bf      	sbcs	r7, r7
 8001540:	4643      	mov	r3, r8
 8001542:	427f      	negs	r7, r7
 8001544:	1a18      	subs	r0, r3, r0
 8001546:	4655      	mov	r5, sl
 8001548:	1bc7      	subs	r7, r0, r7
 800154a:	e5f7      	b.n	800113c <__aeabi_dadd+0xac>
 800154c:	08c9      	lsrs	r1, r1, #3
 800154e:	077b      	lsls	r3, r7, #29
 8001550:	4655      	mov	r5, sl
 8001552:	430b      	orrs	r3, r1
 8001554:	08f8      	lsrs	r0, r7, #3
 8001556:	e6c8      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001558:	2c00      	cmp	r4, #0
 800155a:	d000      	beq.n	800155e <__aeabi_dadd+0x4ce>
 800155c:	e081      	b.n	8001662 <__aeabi_dadd+0x5d2>
 800155e:	4643      	mov	r3, r8
 8001560:	430b      	orrs	r3, r1
 8001562:	d115      	bne.n	8001590 <__aeabi_dadd+0x500>
 8001564:	2080      	movs	r0, #128	; 0x80
 8001566:	2500      	movs	r5, #0
 8001568:	0300      	lsls	r0, r0, #12
 800156a:	e6e3      	b.n	8001334 <__aeabi_dadd+0x2a4>
 800156c:	1a5c      	subs	r4, r3, r1
 800156e:	42a3      	cmp	r3, r4
 8001570:	419b      	sbcs	r3, r3
 8001572:	1bc7      	subs	r7, r0, r7
 8001574:	425b      	negs	r3, r3
 8001576:	2601      	movs	r6, #1
 8001578:	1aff      	subs	r7, r7, r3
 800157a:	e5da      	b.n	8001132 <__aeabi_dadd+0xa2>
 800157c:	0742      	lsls	r2, r0, #29
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	4313      	orrs	r3, r2
 8001582:	08c0      	lsrs	r0, r0, #3
 8001584:	e6d2      	b.n	800132c <__aeabi_dadd+0x29c>
 8001586:	0742      	lsls	r2, r0, #29
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	08c0      	lsrs	r0, r0, #3
 800158e:	e6ac      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001590:	4643      	mov	r3, r8
 8001592:	4642      	mov	r2, r8
 8001594:	08c9      	lsrs	r1, r1, #3
 8001596:	075b      	lsls	r3, r3, #29
 8001598:	4655      	mov	r5, sl
 800159a:	430b      	orrs	r3, r1
 800159c:	08d0      	lsrs	r0, r2, #3
 800159e:	e6c5      	b.n	800132c <__aeabi_dadd+0x29c>
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	075b      	lsls	r3, r3, #29
 80015a6:	08c9      	lsrs	r1, r1, #3
 80015a8:	430b      	orrs	r3, r1
 80015aa:	08d0      	lsrs	r0, r2, #3
 80015ac:	e6be      	b.n	800132c <__aeabi_dadd+0x29c>
 80015ae:	4303      	orrs	r3, r0
 80015b0:	001c      	movs	r4, r3
 80015b2:	1e63      	subs	r3, r4, #1
 80015b4:	419c      	sbcs	r4, r3
 80015b6:	e6fc      	b.n	80013b2 <__aeabi_dadd+0x322>
 80015b8:	0002      	movs	r2, r0
 80015ba:	3c20      	subs	r4, #32
 80015bc:	40e2      	lsrs	r2, r4
 80015be:	0014      	movs	r4, r2
 80015c0:	4662      	mov	r2, ip
 80015c2:	2a20      	cmp	r2, #32
 80015c4:	d003      	beq.n	80015ce <__aeabi_dadd+0x53e>
 80015c6:	2540      	movs	r5, #64	; 0x40
 80015c8:	1aad      	subs	r5, r5, r2
 80015ca:	40a8      	lsls	r0, r5
 80015cc:	4303      	orrs	r3, r0
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	4183      	sbcs	r3, r0
 80015d2:	4323      	orrs	r3, r4
 80015d4:	e775      	b.n	80014c2 <__aeabi_dadd+0x432>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d0e2      	beq.n	80015a0 <__aeabi_dadd+0x510>
 80015da:	003a      	movs	r2, r7
 80015dc:	430a      	orrs	r2, r1
 80015de:	d0cd      	beq.n	800157c <__aeabi_dadd+0x4ec>
 80015e0:	0742      	lsls	r2, r0, #29
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	0312      	lsls	r2, r2, #12
 80015ec:	4210      	tst	r0, r2
 80015ee:	d006      	beq.n	80015fe <__aeabi_dadd+0x56e>
 80015f0:	08fc      	lsrs	r4, r7, #3
 80015f2:	4214      	tst	r4, r2
 80015f4:	d103      	bne.n	80015fe <__aeabi_dadd+0x56e>
 80015f6:	0020      	movs	r0, r4
 80015f8:	08cb      	lsrs	r3, r1, #3
 80015fa:	077a      	lsls	r2, r7, #29
 80015fc:	4313      	orrs	r3, r2
 80015fe:	0f5a      	lsrs	r2, r3, #29
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	0752      	lsls	r2, r2, #29
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	e690      	b.n	800132c <__aeabi_dadd+0x29c>
 800160a:	4643      	mov	r3, r8
 800160c:	430b      	orrs	r3, r1
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x582>
 8001610:	e709      	b.n	8001426 <__aeabi_dadd+0x396>
 8001612:	4643      	mov	r3, r8
 8001614:	4642      	mov	r2, r8
 8001616:	08c9      	lsrs	r1, r1, #3
 8001618:	075b      	lsls	r3, r3, #29
 800161a:	4655      	mov	r5, sl
 800161c:	430b      	orrs	r3, r1
 800161e:	08d0      	lsrs	r0, r2, #3
 8001620:	e666      	b.n	80012f0 <__aeabi_dadd+0x260>
 8001622:	1acc      	subs	r4, r1, r3
 8001624:	42a1      	cmp	r1, r4
 8001626:	4189      	sbcs	r1, r1
 8001628:	1a3f      	subs	r7, r7, r0
 800162a:	4249      	negs	r1, r1
 800162c:	4655      	mov	r5, sl
 800162e:	2601      	movs	r6, #1
 8001630:	1a7f      	subs	r7, r7, r1
 8001632:	e57e      	b.n	8001132 <__aeabi_dadd+0xa2>
 8001634:	4642      	mov	r2, r8
 8001636:	1a5c      	subs	r4, r3, r1
 8001638:	1a87      	subs	r7, r0, r2
 800163a:	42a3      	cmp	r3, r4
 800163c:	4192      	sbcs	r2, r2
 800163e:	4252      	negs	r2, r2
 8001640:	1abf      	subs	r7, r7, r2
 8001642:	023a      	lsls	r2, r7, #8
 8001644:	d53d      	bpl.n	80016c2 <__aeabi_dadd+0x632>
 8001646:	1acc      	subs	r4, r1, r3
 8001648:	42a1      	cmp	r1, r4
 800164a:	4189      	sbcs	r1, r1
 800164c:	4643      	mov	r3, r8
 800164e:	4249      	negs	r1, r1
 8001650:	1a1f      	subs	r7, r3, r0
 8001652:	4655      	mov	r5, sl
 8001654:	1a7f      	subs	r7, r7, r1
 8001656:	e595      	b.n	8001184 <__aeabi_dadd+0xf4>
 8001658:	077b      	lsls	r3, r7, #29
 800165a:	08c9      	lsrs	r1, r1, #3
 800165c:	430b      	orrs	r3, r1
 800165e:	08f8      	lsrs	r0, r7, #3
 8001660:	e643      	b.n	80012ea <__aeabi_dadd+0x25a>
 8001662:	4644      	mov	r4, r8
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	430c      	orrs	r4, r1
 8001668:	d130      	bne.n	80016cc <__aeabi_dadd+0x63c>
 800166a:	0742      	lsls	r2, r0, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c0      	lsrs	r0, r0, #3
 8001670:	e65c      	b.n	800132c <__aeabi_dadd+0x29c>
 8001672:	077b      	lsls	r3, r7, #29
 8001674:	08c9      	lsrs	r1, r1, #3
 8001676:	430b      	orrs	r3, r1
 8001678:	08f8      	lsrs	r0, r7, #3
 800167a:	e639      	b.n	80012f0 <__aeabi_dadd+0x260>
 800167c:	185c      	adds	r4, r3, r1
 800167e:	429c      	cmp	r4, r3
 8001680:	419b      	sbcs	r3, r3
 8001682:	4440      	add	r0, r8
 8001684:	425b      	negs	r3, r3
 8001686:	18c7      	adds	r7, r0, r3
 8001688:	023b      	lsls	r3, r7, #8
 800168a:	d400      	bmi.n	800168e <__aeabi_dadd+0x5fe>
 800168c:	e625      	b.n	80012da <__aeabi_dadd+0x24a>
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <__aeabi_dadd+0x674>)
 8001690:	2601      	movs	r6, #1
 8001692:	401f      	ands	r7, r3
 8001694:	e621      	b.n	80012da <__aeabi_dadd+0x24a>
 8001696:	0004      	movs	r4, r0
 8001698:	3a20      	subs	r2, #32
 800169a:	40d4      	lsrs	r4, r2
 800169c:	4662      	mov	r2, ip
 800169e:	2a20      	cmp	r2, #32
 80016a0:	d004      	beq.n	80016ac <__aeabi_dadd+0x61c>
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	4666      	mov	r6, ip
 80016a6:	1b92      	subs	r2, r2, r6
 80016a8:	4090      	lsls	r0, r2
 80016aa:	4303      	orrs	r3, r0
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	4193      	sbcs	r3, r2
 80016b0:	431c      	orrs	r4, r3
 80016b2:	e67e      	b.n	80013b2 <__aeabi_dadd+0x322>
 80016b4:	185c      	adds	r4, r3, r1
 80016b6:	428c      	cmp	r4, r1
 80016b8:	4189      	sbcs	r1, r1
 80016ba:	4440      	add	r0, r8
 80016bc:	4249      	negs	r1, r1
 80016be:	1847      	adds	r7, r0, r1
 80016c0:	e6dd      	b.n	800147e <__aeabi_dadd+0x3ee>
 80016c2:	0023      	movs	r3, r4
 80016c4:	433b      	orrs	r3, r7
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x63a>
 80016c8:	e6ad      	b.n	8001426 <__aeabi_dadd+0x396>
 80016ca:	e606      	b.n	80012da <__aeabi_dadd+0x24a>
 80016cc:	0744      	lsls	r4, r0, #29
 80016ce:	4323      	orrs	r3, r4
 80016d0:	2480      	movs	r4, #128	; 0x80
 80016d2:	08c0      	lsrs	r0, r0, #3
 80016d4:	0324      	lsls	r4, r4, #12
 80016d6:	4220      	tst	r0, r4
 80016d8:	d008      	beq.n	80016ec <__aeabi_dadd+0x65c>
 80016da:	4642      	mov	r2, r8
 80016dc:	08d6      	lsrs	r6, r2, #3
 80016de:	4226      	tst	r6, r4
 80016e0:	d104      	bne.n	80016ec <__aeabi_dadd+0x65c>
 80016e2:	4655      	mov	r5, sl
 80016e4:	0030      	movs	r0, r6
 80016e6:	08cb      	lsrs	r3, r1, #3
 80016e8:	0751      	lsls	r1, r2, #29
 80016ea:	430b      	orrs	r3, r1
 80016ec:	0f5a      	lsrs	r2, r3, #29
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	0752      	lsls	r2, r2, #29
 80016f4:	4313      	orrs	r3, r2
 80016f6:	e619      	b.n	800132c <__aeabi_dadd+0x29c>
 80016f8:	2300      	movs	r3, #0
 80016fa:	4a01      	ldr	r2, [pc, #4]	; (8001700 <__aeabi_dadd+0x670>)
 80016fc:	001f      	movs	r7, r3
 80016fe:	e55e      	b.n	80011be <__aeabi_dadd+0x12e>
 8001700:	000007ff 	.word	0x000007ff
 8001704:	ff7fffff 	.word	0xff7fffff

08001708 <__aeabi_ddiv>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	4657      	mov	r7, sl
 800170c:	464e      	mov	r6, r9
 800170e:	4645      	mov	r5, r8
 8001710:	46de      	mov	lr, fp
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	4681      	mov	r9, r0
 8001716:	0005      	movs	r5, r0
 8001718:	030c      	lsls	r4, r1, #12
 800171a:	0048      	lsls	r0, r1, #1
 800171c:	4692      	mov	sl, r2
 800171e:	001f      	movs	r7, r3
 8001720:	b085      	sub	sp, #20
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	0d40      	lsrs	r0, r0, #21
 8001726:	0fce      	lsrs	r6, r1, #31
 8001728:	2800      	cmp	r0, #0
 800172a:	d100      	bne.n	800172e <__aeabi_ddiv+0x26>
 800172c:	e156      	b.n	80019dc <__aeabi_ddiv+0x2d4>
 800172e:	4bd4      	ldr	r3, [pc, #848]	; (8001a80 <__aeabi_ddiv+0x378>)
 8001730:	4298      	cmp	r0, r3
 8001732:	d100      	bne.n	8001736 <__aeabi_ddiv+0x2e>
 8001734:	e172      	b.n	8001a1c <__aeabi_ddiv+0x314>
 8001736:	0f6b      	lsrs	r3, r5, #29
 8001738:	00e4      	lsls	r4, r4, #3
 800173a:	431c      	orrs	r4, r3
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	4323      	orrs	r3, r4
 8001742:	4698      	mov	r8, r3
 8001744:	4bcf      	ldr	r3, [pc, #828]	; (8001a84 <__aeabi_ddiv+0x37c>)
 8001746:	00ed      	lsls	r5, r5, #3
 8001748:	469b      	mov	fp, r3
 800174a:	2300      	movs	r3, #0
 800174c:	4699      	mov	r9, r3
 800174e:	4483      	add	fp, r0
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	033c      	lsls	r4, r7, #12
 8001754:	007b      	lsls	r3, r7, #1
 8001756:	4650      	mov	r0, sl
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	0d5b      	lsrs	r3, r3, #21
 800175c:	0fff      	lsrs	r7, r7, #31
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <__aeabi_ddiv+0x5c>
 8001762:	e11f      	b.n	80019a4 <__aeabi_ddiv+0x29c>
 8001764:	4ac6      	ldr	r2, [pc, #792]	; (8001a80 <__aeabi_ddiv+0x378>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d100      	bne.n	800176c <__aeabi_ddiv+0x64>
 800176a:	e162      	b.n	8001a32 <__aeabi_ddiv+0x32a>
 800176c:	49c5      	ldr	r1, [pc, #788]	; (8001a84 <__aeabi_ddiv+0x37c>)
 800176e:	0f42      	lsrs	r2, r0, #29
 8001770:	468c      	mov	ip, r1
 8001772:	00e4      	lsls	r4, r4, #3
 8001774:	4659      	mov	r1, fp
 8001776:	4314      	orrs	r4, r2
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	4463      	add	r3, ip
 800177c:	0412      	lsls	r2, r2, #16
 800177e:	1acb      	subs	r3, r1, r3
 8001780:	4314      	orrs	r4, r2
 8001782:	469b      	mov	fp, r3
 8001784:	00c2      	lsls	r2, r0, #3
 8001786:	2000      	movs	r0, #0
 8001788:	0033      	movs	r3, r6
 800178a:	407b      	eors	r3, r7
 800178c:	469a      	mov	sl, r3
 800178e:	464b      	mov	r3, r9
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d827      	bhi.n	80017e4 <__aeabi_ddiv+0xdc>
 8001794:	49bc      	ldr	r1, [pc, #752]	; (8001a88 <__aeabi_ddiv+0x380>)
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	58cb      	ldr	r3, [r1, r3]
 800179a:	469f      	mov	pc, r3
 800179c:	46b2      	mov	sl, r6
 800179e:	9b00      	ldr	r3, [sp, #0]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d016      	beq.n	80017d2 <__aeabi_ddiv+0xca>
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d100      	bne.n	80017aa <__aeabi_ddiv+0xa2>
 80017a8:	e28e      	b.n	8001cc8 <__aeabi_ddiv+0x5c0>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d000      	beq.n	80017b0 <__aeabi_ddiv+0xa8>
 80017ae:	e0d9      	b.n	8001964 <__aeabi_ddiv+0x25c>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2400      	movs	r4, #0
 80017b4:	2500      	movs	r5, #0
 80017b6:	4652      	mov	r2, sl
 80017b8:	051b      	lsls	r3, r3, #20
 80017ba:	4323      	orrs	r3, r4
 80017bc:	07d2      	lsls	r2, r2, #31
 80017be:	4313      	orrs	r3, r2
 80017c0:	0028      	movs	r0, r5
 80017c2:	0019      	movs	r1, r3
 80017c4:	b005      	add	sp, #20
 80017c6:	bcf0      	pop	{r4, r5, r6, r7}
 80017c8:	46bb      	mov	fp, r7
 80017ca:	46b2      	mov	sl, r6
 80017cc:	46a9      	mov	r9, r5
 80017ce:	46a0      	mov	r8, r4
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	2400      	movs	r4, #0
 80017d4:	2500      	movs	r5, #0
 80017d6:	4baa      	ldr	r3, [pc, #680]	; (8001a80 <__aeabi_ddiv+0x378>)
 80017d8:	e7ed      	b.n	80017b6 <__aeabi_ddiv+0xae>
 80017da:	46ba      	mov	sl, r7
 80017dc:	46a0      	mov	r8, r4
 80017de:	0015      	movs	r5, r2
 80017e0:	9000      	str	r0, [sp, #0]
 80017e2:	e7dc      	b.n	800179e <__aeabi_ddiv+0x96>
 80017e4:	4544      	cmp	r4, r8
 80017e6:	d200      	bcs.n	80017ea <__aeabi_ddiv+0xe2>
 80017e8:	e1c7      	b.n	8001b7a <__aeabi_ddiv+0x472>
 80017ea:	d100      	bne.n	80017ee <__aeabi_ddiv+0xe6>
 80017ec:	e1c2      	b.n	8001b74 <__aeabi_ddiv+0x46c>
 80017ee:	2301      	movs	r3, #1
 80017f0:	425b      	negs	r3, r3
 80017f2:	469c      	mov	ip, r3
 80017f4:	002e      	movs	r6, r5
 80017f6:	4640      	mov	r0, r8
 80017f8:	2500      	movs	r5, #0
 80017fa:	44e3      	add	fp, ip
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	0e14      	lsrs	r4, r2, #24
 8001800:	431c      	orrs	r4, r3
 8001802:	0c1b      	lsrs	r3, r3, #16
 8001804:	4699      	mov	r9, r3
 8001806:	0423      	lsls	r3, r4, #16
 8001808:	0c1f      	lsrs	r7, r3, #16
 800180a:	0212      	lsls	r2, r2, #8
 800180c:	4649      	mov	r1, r9
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	9701      	str	r7, [sp, #4]
 8001812:	f7fe fd2f 	bl	8000274 <__aeabi_uidivmod>
 8001816:	0002      	movs	r2, r0
 8001818:	437a      	muls	r2, r7
 800181a:	040b      	lsls	r3, r1, #16
 800181c:	0c31      	lsrs	r1, r6, #16
 800181e:	4680      	mov	r8, r0
 8001820:	4319      	orrs	r1, r3
 8001822:	428a      	cmp	r2, r1
 8001824:	d907      	bls.n	8001836 <__aeabi_ddiv+0x12e>
 8001826:	2301      	movs	r3, #1
 8001828:	425b      	negs	r3, r3
 800182a:	469c      	mov	ip, r3
 800182c:	1909      	adds	r1, r1, r4
 800182e:	44e0      	add	r8, ip
 8001830:	428c      	cmp	r4, r1
 8001832:	d800      	bhi.n	8001836 <__aeabi_ddiv+0x12e>
 8001834:	e207      	b.n	8001c46 <__aeabi_ddiv+0x53e>
 8001836:	1a88      	subs	r0, r1, r2
 8001838:	4649      	mov	r1, r9
 800183a:	f7fe fd1b 	bl	8000274 <__aeabi_uidivmod>
 800183e:	0409      	lsls	r1, r1, #16
 8001840:	468c      	mov	ip, r1
 8001842:	0431      	lsls	r1, r6, #16
 8001844:	4666      	mov	r6, ip
 8001846:	9a01      	ldr	r2, [sp, #4]
 8001848:	0c09      	lsrs	r1, r1, #16
 800184a:	4342      	muls	r2, r0
 800184c:	0003      	movs	r3, r0
 800184e:	4331      	orrs	r1, r6
 8001850:	428a      	cmp	r2, r1
 8001852:	d904      	bls.n	800185e <__aeabi_ddiv+0x156>
 8001854:	1909      	adds	r1, r1, r4
 8001856:	3b01      	subs	r3, #1
 8001858:	428c      	cmp	r4, r1
 800185a:	d800      	bhi.n	800185e <__aeabi_ddiv+0x156>
 800185c:	e1ed      	b.n	8001c3a <__aeabi_ddiv+0x532>
 800185e:	1a88      	subs	r0, r1, r2
 8001860:	4642      	mov	r2, r8
 8001862:	0412      	lsls	r2, r2, #16
 8001864:	431a      	orrs	r2, r3
 8001866:	4690      	mov	r8, r2
 8001868:	4641      	mov	r1, r8
 800186a:	9b00      	ldr	r3, [sp, #0]
 800186c:	040e      	lsls	r6, r1, #16
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	001f      	movs	r7, r3
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	9b00      	ldr	r3, [sp, #0]
 8001876:	0c36      	lsrs	r6, r6, #16
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	0c19      	lsrs	r1, r3, #16
 800187c:	000b      	movs	r3, r1
 800187e:	4373      	muls	r3, r6
 8001880:	0c12      	lsrs	r2, r2, #16
 8001882:	437e      	muls	r6, r7
 8001884:	9103      	str	r1, [sp, #12]
 8001886:	4351      	muls	r1, r2
 8001888:	437a      	muls	r2, r7
 800188a:	0c1f      	lsrs	r7, r3, #16
 800188c:	46bc      	mov	ip, r7
 800188e:	1876      	adds	r6, r6, r1
 8001890:	4466      	add	r6, ip
 8001892:	42b1      	cmp	r1, r6
 8001894:	d903      	bls.n	800189e <__aeabi_ddiv+0x196>
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0249      	lsls	r1, r1, #9
 800189a:	468c      	mov	ip, r1
 800189c:	4462      	add	r2, ip
 800189e:	0c31      	lsrs	r1, r6, #16
 80018a0:	188a      	adds	r2, r1, r2
 80018a2:	0431      	lsls	r1, r6, #16
 80018a4:	041e      	lsls	r6, r3, #16
 80018a6:	0c36      	lsrs	r6, r6, #16
 80018a8:	198e      	adds	r6, r1, r6
 80018aa:	4290      	cmp	r0, r2
 80018ac:	d302      	bcc.n	80018b4 <__aeabi_ddiv+0x1ac>
 80018ae:	d112      	bne.n	80018d6 <__aeabi_ddiv+0x1ce>
 80018b0:	42b5      	cmp	r5, r6
 80018b2:	d210      	bcs.n	80018d6 <__aeabi_ddiv+0x1ce>
 80018b4:	4643      	mov	r3, r8
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	9b00      	ldr	r3, [sp, #0]
 80018ba:	469c      	mov	ip, r3
 80018bc:	4465      	add	r5, ip
 80018be:	001f      	movs	r7, r3
 80018c0:	429d      	cmp	r5, r3
 80018c2:	419b      	sbcs	r3, r3
 80018c4:	425b      	negs	r3, r3
 80018c6:	191b      	adds	r3, r3, r4
 80018c8:	18c0      	adds	r0, r0, r3
 80018ca:	4284      	cmp	r4, r0
 80018cc:	d200      	bcs.n	80018d0 <__aeabi_ddiv+0x1c8>
 80018ce:	e1a0      	b.n	8001c12 <__aeabi_ddiv+0x50a>
 80018d0:	d100      	bne.n	80018d4 <__aeabi_ddiv+0x1cc>
 80018d2:	e19b      	b.n	8001c0c <__aeabi_ddiv+0x504>
 80018d4:	4688      	mov	r8, r1
 80018d6:	1bae      	subs	r6, r5, r6
 80018d8:	42b5      	cmp	r5, r6
 80018da:	41ad      	sbcs	r5, r5
 80018dc:	1a80      	subs	r0, r0, r2
 80018de:	426d      	negs	r5, r5
 80018e0:	1b40      	subs	r0, r0, r5
 80018e2:	4284      	cmp	r4, r0
 80018e4:	d100      	bne.n	80018e8 <__aeabi_ddiv+0x1e0>
 80018e6:	e1d5      	b.n	8001c94 <__aeabi_ddiv+0x58c>
 80018e8:	4649      	mov	r1, r9
 80018ea:	f7fe fcc3 	bl	8000274 <__aeabi_uidivmod>
 80018ee:	9a01      	ldr	r2, [sp, #4]
 80018f0:	040b      	lsls	r3, r1, #16
 80018f2:	4342      	muls	r2, r0
 80018f4:	0c31      	lsrs	r1, r6, #16
 80018f6:	0005      	movs	r5, r0
 80018f8:	4319      	orrs	r1, r3
 80018fa:	428a      	cmp	r2, r1
 80018fc:	d900      	bls.n	8001900 <__aeabi_ddiv+0x1f8>
 80018fe:	e16c      	b.n	8001bda <__aeabi_ddiv+0x4d2>
 8001900:	1a88      	subs	r0, r1, r2
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fcb6 	bl	8000274 <__aeabi_uidivmod>
 8001908:	9a01      	ldr	r2, [sp, #4]
 800190a:	0436      	lsls	r6, r6, #16
 800190c:	4342      	muls	r2, r0
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	0c36      	lsrs	r6, r6, #16
 8001912:	0003      	movs	r3, r0
 8001914:	430e      	orrs	r6, r1
 8001916:	42b2      	cmp	r2, r6
 8001918:	d900      	bls.n	800191c <__aeabi_ddiv+0x214>
 800191a:	e153      	b.n	8001bc4 <__aeabi_ddiv+0x4bc>
 800191c:	9803      	ldr	r0, [sp, #12]
 800191e:	1ab6      	subs	r6, r6, r2
 8001920:	0002      	movs	r2, r0
 8001922:	042d      	lsls	r5, r5, #16
 8001924:	431d      	orrs	r5, r3
 8001926:	9f02      	ldr	r7, [sp, #8]
 8001928:	042b      	lsls	r3, r5, #16
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	435a      	muls	r2, r3
 800192e:	437b      	muls	r3, r7
 8001930:	469c      	mov	ip, r3
 8001932:	0c29      	lsrs	r1, r5, #16
 8001934:	4348      	muls	r0, r1
 8001936:	0c13      	lsrs	r3, r2, #16
 8001938:	4484      	add	ip, r0
 800193a:	4463      	add	r3, ip
 800193c:	4379      	muls	r1, r7
 800193e:	4298      	cmp	r0, r3
 8001940:	d903      	bls.n	800194a <__aeabi_ddiv+0x242>
 8001942:	2080      	movs	r0, #128	; 0x80
 8001944:	0240      	lsls	r0, r0, #9
 8001946:	4684      	mov	ip, r0
 8001948:	4461      	add	r1, ip
 800194a:	0c18      	lsrs	r0, r3, #16
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	0c12      	lsrs	r2, r2, #16
 8001952:	1841      	adds	r1, r0, r1
 8001954:	189b      	adds	r3, r3, r2
 8001956:	428e      	cmp	r6, r1
 8001958:	d200      	bcs.n	800195c <__aeabi_ddiv+0x254>
 800195a:	e0ff      	b.n	8001b5c <__aeabi_ddiv+0x454>
 800195c:	d100      	bne.n	8001960 <__aeabi_ddiv+0x258>
 800195e:	e0fa      	b.n	8001b56 <__aeabi_ddiv+0x44e>
 8001960:	2301      	movs	r3, #1
 8001962:	431d      	orrs	r5, r3
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <__aeabi_ddiv+0x384>)
 8001966:	445a      	add	r2, fp
 8001968:	2a00      	cmp	r2, #0
 800196a:	dc00      	bgt.n	800196e <__aeabi_ddiv+0x266>
 800196c:	e0aa      	b.n	8001ac4 <__aeabi_ddiv+0x3bc>
 800196e:	076b      	lsls	r3, r5, #29
 8001970:	d000      	beq.n	8001974 <__aeabi_ddiv+0x26c>
 8001972:	e13d      	b.n	8001bf0 <__aeabi_ddiv+0x4e8>
 8001974:	08ed      	lsrs	r5, r5, #3
 8001976:	4643      	mov	r3, r8
 8001978:	01db      	lsls	r3, r3, #7
 800197a:	d506      	bpl.n	800198a <__aeabi_ddiv+0x282>
 800197c:	4642      	mov	r2, r8
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <__aeabi_ddiv+0x388>)
 8001980:	401a      	ands	r2, r3
 8001982:	4690      	mov	r8, r2
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	00d2      	lsls	r2, r2, #3
 8001988:	445a      	add	r2, fp
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <__aeabi_ddiv+0x38c>)
 800198c:	429a      	cmp	r2, r3
 800198e:	dd00      	ble.n	8001992 <__aeabi_ddiv+0x28a>
 8001990:	e71f      	b.n	80017d2 <__aeabi_ddiv+0xca>
 8001992:	4643      	mov	r3, r8
 8001994:	075b      	lsls	r3, r3, #29
 8001996:	431d      	orrs	r5, r3
 8001998:	4643      	mov	r3, r8
 800199a:	0552      	lsls	r2, r2, #21
 800199c:	025c      	lsls	r4, r3, #9
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	0d53      	lsrs	r3, r2, #21
 80019a2:	e708      	b.n	80017b6 <__aeabi_ddiv+0xae>
 80019a4:	4652      	mov	r2, sl
 80019a6:	4322      	orrs	r2, r4
 80019a8:	d100      	bne.n	80019ac <__aeabi_ddiv+0x2a4>
 80019aa:	e07b      	b.n	8001aa4 <__aeabi_ddiv+0x39c>
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d100      	bne.n	80019b2 <__aeabi_ddiv+0x2aa>
 80019b0:	e0fa      	b.n	8001ba8 <__aeabi_ddiv+0x4a0>
 80019b2:	0020      	movs	r0, r4
 80019b4:	f001 f97c 	bl	8002cb0 <__clzsi2>
 80019b8:	0002      	movs	r2, r0
 80019ba:	3a0b      	subs	r2, #11
 80019bc:	231d      	movs	r3, #29
 80019be:	0001      	movs	r1, r0
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	4652      	mov	r2, sl
 80019c4:	3908      	subs	r1, #8
 80019c6:	40da      	lsrs	r2, r3
 80019c8:	408c      	lsls	r4, r1
 80019ca:	4314      	orrs	r4, r2
 80019cc:	4652      	mov	r2, sl
 80019ce:	408a      	lsls	r2, r1
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <__aeabi_ddiv+0x390>)
 80019d2:	4458      	add	r0, fp
 80019d4:	469b      	mov	fp, r3
 80019d6:	4483      	add	fp, r0
 80019d8:	2000      	movs	r0, #0
 80019da:	e6d5      	b.n	8001788 <__aeabi_ddiv+0x80>
 80019dc:	464b      	mov	r3, r9
 80019de:	4323      	orrs	r3, r4
 80019e0:	4698      	mov	r8, r3
 80019e2:	d044      	beq.n	8001a6e <__aeabi_ddiv+0x366>
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d100      	bne.n	80019ea <__aeabi_ddiv+0x2e2>
 80019e8:	e0ce      	b.n	8001b88 <__aeabi_ddiv+0x480>
 80019ea:	0020      	movs	r0, r4
 80019ec:	f001 f960 	bl	8002cb0 <__clzsi2>
 80019f0:	0001      	movs	r1, r0
 80019f2:	0002      	movs	r2, r0
 80019f4:	390b      	subs	r1, #11
 80019f6:	231d      	movs	r3, #29
 80019f8:	1a5b      	subs	r3, r3, r1
 80019fa:	4649      	mov	r1, r9
 80019fc:	0010      	movs	r0, r2
 80019fe:	40d9      	lsrs	r1, r3
 8001a00:	3808      	subs	r0, #8
 8001a02:	4084      	lsls	r4, r0
 8001a04:	000b      	movs	r3, r1
 8001a06:	464d      	mov	r5, r9
 8001a08:	4323      	orrs	r3, r4
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	4085      	lsls	r5, r0
 8001a0e:	4823      	ldr	r0, [pc, #140]	; (8001a9c <__aeabi_ddiv+0x394>)
 8001a10:	1a83      	subs	r3, r0, r2
 8001a12:	469b      	mov	fp, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	4699      	mov	r9, r3
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	e69a      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	4698      	mov	r8, r3
 8001a22:	d11d      	bne.n	8001a60 <__aeabi_ddiv+0x358>
 8001a24:	2308      	movs	r3, #8
 8001a26:	4699      	mov	r9, r3
 8001a28:	3b06      	subs	r3, #6
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	4683      	mov	fp, r0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	e68f      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a32:	4652      	mov	r2, sl
 8001a34:	4322      	orrs	r2, r4
 8001a36:	d109      	bne.n	8001a4c <__aeabi_ddiv+0x344>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	4319      	orrs	r1, r3
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <__aeabi_ddiv+0x398>)
 8001a40:	4689      	mov	r9, r1
 8001a42:	469c      	mov	ip, r3
 8001a44:	2400      	movs	r4, #0
 8001a46:	2002      	movs	r0, #2
 8001a48:	44e3      	add	fp, ip
 8001a4a:	e69d      	b.n	8001788 <__aeabi_ddiv+0x80>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	464a      	mov	r2, r9
 8001a50:	431a      	orrs	r2, r3
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <__aeabi_ddiv+0x398>)
 8001a54:	4691      	mov	r9, r2
 8001a56:	469c      	mov	ip, r3
 8001a58:	4652      	mov	r2, sl
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	44e3      	add	fp, ip
 8001a5e:	e693      	b.n	8001788 <__aeabi_ddiv+0x80>
 8001a60:	230c      	movs	r3, #12
 8001a62:	4699      	mov	r9, r3
 8001a64:	3b09      	subs	r3, #9
 8001a66:	46a0      	mov	r8, r4
 8001a68:	4683      	mov	fp, r0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e671      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	4699      	mov	r9, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	469b      	mov	fp, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	2500      	movs	r5, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	e669      	b.n	8001752 <__aeabi_ddiv+0x4a>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000007ff 	.word	0x000007ff
 8001a84:	fffffc01 	.word	0xfffffc01
 8001a88:	08018978 	.word	0x08018978
 8001a8c:	000003ff 	.word	0x000003ff
 8001a90:	feffffff 	.word	0xfeffffff
 8001a94:	000007fe 	.word	0x000007fe
 8001a98:	000003f3 	.word	0x000003f3
 8001a9c:	fffffc0d 	.word	0xfffffc0d
 8001aa0:	fffff801 	.word	0xfffff801
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4319      	orrs	r1, r3
 8001aaa:	4689      	mov	r9, r1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e66a      	b.n	8001788 <__aeabi_ddiv+0x80>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2480      	movs	r4, #128	; 0x80
 8001ab6:	469a      	mov	sl, r3
 8001ab8:	2500      	movs	r5, #0
 8001aba:	4b8a      	ldr	r3, [pc, #552]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001abc:	0324      	lsls	r4, r4, #12
 8001abe:	e67a      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001ac0:	2501      	movs	r5, #1
 8001ac2:	426d      	negs	r5, r5
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	2b38      	cmp	r3, #56	; 0x38
 8001aca:	dd00      	ble.n	8001ace <__aeabi_ddiv+0x3c6>
 8001acc:	e670      	b.n	80017b0 <__aeabi_ddiv+0xa8>
 8001ace:	2b1f      	cmp	r3, #31
 8001ad0:	dc00      	bgt.n	8001ad4 <__aeabi_ddiv+0x3cc>
 8001ad2:	e0bf      	b.n	8001c54 <__aeabi_ddiv+0x54c>
 8001ad4:	211f      	movs	r1, #31
 8001ad6:	4249      	negs	r1, r1
 8001ad8:	1a8a      	subs	r2, r1, r2
 8001ada:	4641      	mov	r1, r8
 8001adc:	40d1      	lsrs	r1, r2
 8001ade:	000a      	movs	r2, r1
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d004      	beq.n	8001aee <__aeabi_ddiv+0x3e6>
 8001ae4:	4641      	mov	r1, r8
 8001ae6:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <__aeabi_ddiv+0x5e0>)
 8001ae8:	445b      	add	r3, fp
 8001aea:	4099      	lsls	r1, r3
 8001aec:	430d      	orrs	r5, r1
 8001aee:	1e6b      	subs	r3, r5, #1
 8001af0:	419d      	sbcs	r5, r3
 8001af2:	2307      	movs	r3, #7
 8001af4:	432a      	orrs	r2, r5
 8001af6:	001d      	movs	r5, r3
 8001af8:	2400      	movs	r4, #0
 8001afa:	4015      	ands	r5, r2
 8001afc:	4213      	tst	r3, r2
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x3fa>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_ddiv+0x5a4>
 8001b02:	210f      	movs	r1, #15
 8001b04:	2300      	movs	r3, #0
 8001b06:	4011      	ands	r1, r2
 8001b08:	2904      	cmp	r1, #4
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x406>
 8001b0c:	e0cb      	b.n	8001ca6 <__aeabi_ddiv+0x59e>
 8001b0e:	1d11      	adds	r1, r2, #4
 8001b10:	4291      	cmp	r1, r2
 8001b12:	4192      	sbcs	r2, r2
 8001b14:	4252      	negs	r2, r2
 8001b16:	189b      	adds	r3, r3, r2
 8001b18:	000a      	movs	r2, r1
 8001b1a:	0219      	lsls	r1, r3, #8
 8001b1c:	d400      	bmi.n	8001b20 <__aeabi_ddiv+0x418>
 8001b1e:	e0c2      	b.n	8001ca6 <__aeabi_ddiv+0x59e>
 8001b20:	2301      	movs	r3, #1
 8001b22:	2400      	movs	r4, #0
 8001b24:	2500      	movs	r5, #0
 8001b26:	e646      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	4219      	tst	r1, r3
 8001b30:	d008      	beq.n	8001b44 <__aeabi_ddiv+0x43c>
 8001b32:	421c      	tst	r4, r3
 8001b34:	d106      	bne.n	8001b44 <__aeabi_ddiv+0x43c>
 8001b36:	431c      	orrs	r4, r3
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	46ba      	mov	sl, r7
 8001b3c:	0015      	movs	r5, r2
 8001b3e:	4b69      	ldr	r3, [pc, #420]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001b40:	0b24      	lsrs	r4, r4, #12
 8001b42:	e638      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b44:	2480      	movs	r4, #128	; 0x80
 8001b46:	4643      	mov	r3, r8
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	431c      	orrs	r4, r3
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	46b2      	mov	sl, r6
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001b52:	0b24      	lsrs	r4, r4, #12
 8001b54:	e62f      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_ddiv+0x454>
 8001b5a:	e703      	b.n	8001964 <__aeabi_ddiv+0x25c>
 8001b5c:	19a6      	adds	r6, r4, r6
 8001b5e:	1e68      	subs	r0, r5, #1
 8001b60:	42a6      	cmp	r6, r4
 8001b62:	d200      	bcs.n	8001b66 <__aeabi_ddiv+0x45e>
 8001b64:	e08d      	b.n	8001c82 <__aeabi_ddiv+0x57a>
 8001b66:	428e      	cmp	r6, r1
 8001b68:	d200      	bcs.n	8001b6c <__aeabi_ddiv+0x464>
 8001b6a:	e0a3      	b.n	8001cb4 <__aeabi_ddiv+0x5ac>
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0x468>
 8001b6e:	e0b3      	b.n	8001cd8 <__aeabi_ddiv+0x5d0>
 8001b70:	0005      	movs	r5, r0
 8001b72:	e6f5      	b.n	8001960 <__aeabi_ddiv+0x258>
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d900      	bls.n	8001b7a <__aeabi_ddiv+0x472>
 8001b78:	e639      	b.n	80017ee <__aeabi_ddiv+0xe6>
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	07de      	lsls	r6, r3, #31
 8001b7e:	0858      	lsrs	r0, r3, #1
 8001b80:	086b      	lsrs	r3, r5, #1
 8001b82:	431e      	orrs	r6, r3
 8001b84:	07ed      	lsls	r5, r5, #31
 8001b86:	e639      	b.n	80017fc <__aeabi_ddiv+0xf4>
 8001b88:	4648      	mov	r0, r9
 8001b8a:	f001 f891 	bl	8002cb0 <__clzsi2>
 8001b8e:	0001      	movs	r1, r0
 8001b90:	0002      	movs	r2, r0
 8001b92:	3115      	adds	r1, #21
 8001b94:	3220      	adds	r2, #32
 8001b96:	291c      	cmp	r1, #28
 8001b98:	dc00      	bgt.n	8001b9c <__aeabi_ddiv+0x494>
 8001b9a:	e72c      	b.n	80019f6 <__aeabi_ddiv+0x2ee>
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	3808      	subs	r0, #8
 8001ba0:	4083      	lsls	r3, r0
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	e732      	b.n	8001a0e <__aeabi_ddiv+0x306>
 8001ba8:	f001 f882 	bl	8002cb0 <__clzsi2>
 8001bac:	0003      	movs	r3, r0
 8001bae:	001a      	movs	r2, r3
 8001bb0:	3215      	adds	r2, #21
 8001bb2:	3020      	adds	r0, #32
 8001bb4:	2a1c      	cmp	r2, #28
 8001bb6:	dc00      	bgt.n	8001bba <__aeabi_ddiv+0x4b2>
 8001bb8:	e700      	b.n	80019bc <__aeabi_ddiv+0x2b4>
 8001bba:	4654      	mov	r4, sl
 8001bbc:	3b08      	subs	r3, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	409c      	lsls	r4, r3
 8001bc2:	e705      	b.n	80019d0 <__aeabi_ddiv+0x2c8>
 8001bc4:	1936      	adds	r6, r6, r4
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	42b4      	cmp	r4, r6
 8001bca:	d900      	bls.n	8001bce <__aeabi_ddiv+0x4c6>
 8001bcc:	e6a6      	b.n	800191c <__aeabi_ddiv+0x214>
 8001bce:	42b2      	cmp	r2, r6
 8001bd0:	d800      	bhi.n	8001bd4 <__aeabi_ddiv+0x4cc>
 8001bd2:	e6a3      	b.n	800191c <__aeabi_ddiv+0x214>
 8001bd4:	1e83      	subs	r3, r0, #2
 8001bd6:	1936      	adds	r6, r6, r4
 8001bd8:	e6a0      	b.n	800191c <__aeabi_ddiv+0x214>
 8001bda:	1909      	adds	r1, r1, r4
 8001bdc:	3d01      	subs	r5, #1
 8001bde:	428c      	cmp	r4, r1
 8001be0:	d900      	bls.n	8001be4 <__aeabi_ddiv+0x4dc>
 8001be2:	e68d      	b.n	8001900 <__aeabi_ddiv+0x1f8>
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d800      	bhi.n	8001bea <__aeabi_ddiv+0x4e2>
 8001be8:	e68a      	b.n	8001900 <__aeabi_ddiv+0x1f8>
 8001bea:	1e85      	subs	r5, r0, #2
 8001bec:	1909      	adds	r1, r1, r4
 8001bee:	e687      	b.n	8001900 <__aeabi_ddiv+0x1f8>
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	402b      	ands	r3, r5
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_ddiv+0x4f2>
 8001bf8:	e6bc      	b.n	8001974 <__aeabi_ddiv+0x26c>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	42ab      	cmp	r3, r5
 8001c00:	419b      	sbcs	r3, r3
 8001c02:	3504      	adds	r5, #4
 8001c04:	425b      	negs	r3, r3
 8001c06:	08ed      	lsrs	r5, r5, #3
 8001c08:	4498      	add	r8, r3
 8001c0a:	e6b4      	b.n	8001976 <__aeabi_ddiv+0x26e>
 8001c0c:	42af      	cmp	r7, r5
 8001c0e:	d900      	bls.n	8001c12 <__aeabi_ddiv+0x50a>
 8001c10:	e660      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 8001c12:	4282      	cmp	r2, r0
 8001c14:	d804      	bhi.n	8001c20 <__aeabi_ddiv+0x518>
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0x512>
 8001c18:	e65c      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 8001c1a:	42ae      	cmp	r6, r5
 8001c1c:	d800      	bhi.n	8001c20 <__aeabi_ddiv+0x518>
 8001c1e:	e659      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 8001c20:	2302      	movs	r3, #2
 8001c22:	425b      	negs	r3, r3
 8001c24:	469c      	mov	ip, r3
 8001c26:	9b00      	ldr	r3, [sp, #0]
 8001c28:	44e0      	add	r8, ip
 8001c2a:	469c      	mov	ip, r3
 8001c2c:	4465      	add	r5, ip
 8001c2e:	429d      	cmp	r5, r3
 8001c30:	419b      	sbcs	r3, r3
 8001c32:	425b      	negs	r3, r3
 8001c34:	191b      	adds	r3, r3, r4
 8001c36:	18c0      	adds	r0, r0, r3
 8001c38:	e64d      	b.n	80018d6 <__aeabi_ddiv+0x1ce>
 8001c3a:	428a      	cmp	r2, r1
 8001c3c:	d800      	bhi.n	8001c40 <__aeabi_ddiv+0x538>
 8001c3e:	e60e      	b.n	800185e <__aeabi_ddiv+0x156>
 8001c40:	1e83      	subs	r3, r0, #2
 8001c42:	1909      	adds	r1, r1, r4
 8001c44:	e60b      	b.n	800185e <__aeabi_ddiv+0x156>
 8001c46:	428a      	cmp	r2, r1
 8001c48:	d800      	bhi.n	8001c4c <__aeabi_ddiv+0x544>
 8001c4a:	e5f4      	b.n	8001836 <__aeabi_ddiv+0x12e>
 8001c4c:	1e83      	subs	r3, r0, #2
 8001c4e:	4698      	mov	r8, r3
 8001c50:	1909      	adds	r1, r1, r4
 8001c52:	e5f0      	b.n	8001836 <__aeabi_ddiv+0x12e>
 8001c54:	4925      	ldr	r1, [pc, #148]	; (8001cec <__aeabi_ddiv+0x5e4>)
 8001c56:	0028      	movs	r0, r5
 8001c58:	4459      	add	r1, fp
 8001c5a:	408d      	lsls	r5, r1
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	408a      	lsls	r2, r1
 8001c60:	1e69      	subs	r1, r5, #1
 8001c62:	418d      	sbcs	r5, r1
 8001c64:	4641      	mov	r1, r8
 8001c66:	40d8      	lsrs	r0, r3
 8001c68:	40d9      	lsrs	r1, r3
 8001c6a:	4302      	orrs	r2, r0
 8001c6c:	432a      	orrs	r2, r5
 8001c6e:	000b      	movs	r3, r1
 8001c70:	0751      	lsls	r1, r2, #29
 8001c72:	d100      	bne.n	8001c76 <__aeabi_ddiv+0x56e>
 8001c74:	e751      	b.n	8001b1a <__aeabi_ddiv+0x412>
 8001c76:	210f      	movs	r1, #15
 8001c78:	4011      	ands	r1, r2
 8001c7a:	2904      	cmp	r1, #4
 8001c7c:	d000      	beq.n	8001c80 <__aeabi_ddiv+0x578>
 8001c7e:	e746      	b.n	8001b0e <__aeabi_ddiv+0x406>
 8001c80:	e74b      	b.n	8001b1a <__aeabi_ddiv+0x412>
 8001c82:	0005      	movs	r5, r0
 8001c84:	428e      	cmp	r6, r1
 8001c86:	d000      	beq.n	8001c8a <__aeabi_ddiv+0x582>
 8001c88:	e66a      	b.n	8001960 <__aeabi_ddiv+0x258>
 8001c8a:	9a00      	ldr	r2, [sp, #0]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_ddiv+0x58a>
 8001c90:	e666      	b.n	8001960 <__aeabi_ddiv+0x258>
 8001c92:	e667      	b.n	8001964 <__aeabi_ddiv+0x25c>
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <__aeabi_ddiv+0x5e8>)
 8001c96:	445a      	add	r2, fp
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	dc00      	bgt.n	8001c9e <__aeabi_ddiv+0x596>
 8001c9c:	e710      	b.n	8001ac0 <__aeabi_ddiv+0x3b8>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	4498      	add	r8, r3
 8001ca4:	e667      	b.n	8001976 <__aeabi_ddiv+0x26e>
 8001ca6:	075d      	lsls	r5, r3, #29
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	0b1c      	lsrs	r4, r3, #12
 8001cac:	08d2      	lsrs	r2, r2, #3
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4315      	orrs	r5, r2
 8001cb2:	e580      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001cb4:	9800      	ldr	r0, [sp, #0]
 8001cb6:	3d02      	subs	r5, #2
 8001cb8:	0042      	lsls	r2, r0, #1
 8001cba:	4282      	cmp	r2, r0
 8001cbc:	41bf      	sbcs	r7, r7
 8001cbe:	427f      	negs	r7, r7
 8001cc0:	193c      	adds	r4, r7, r4
 8001cc2:	1936      	adds	r6, r6, r4
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	e7dd      	b.n	8001c84 <__aeabi_ddiv+0x57c>
 8001cc8:	2480      	movs	r4, #128	; 0x80
 8001cca:	4643      	mov	r3, r8
 8001ccc:	0324      	lsls	r4, r4, #12
 8001cce:	431c      	orrs	r4, r3
 8001cd0:	0324      	lsls	r4, r4, #12
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__aeabi_ddiv+0x5dc>)
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	e56e      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001cd8:	9a00      	ldr	r2, [sp, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d3ea      	bcc.n	8001cb4 <__aeabi_ddiv+0x5ac>
 8001cde:	0005      	movs	r5, r0
 8001ce0:	e7d3      	b.n	8001c8a <__aeabi_ddiv+0x582>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff
 8001ce8:	0000043e 	.word	0x0000043e
 8001cec:	0000041e 	.word	0x0000041e
 8001cf0:	000003ff 	.word	0x000003ff

08001cf4 <__eqdf2>:
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	464e      	mov	r6, r9
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	46de      	mov	lr, fp
 8001cfc:	4657      	mov	r7, sl
 8001cfe:	4690      	mov	r8, r2
 8001d00:	b5e0      	push	{r5, r6, r7, lr}
 8001d02:	0017      	movs	r7, r2
 8001d04:	031a      	lsls	r2, r3, #12
 8001d06:	0b12      	lsrs	r2, r2, #12
 8001d08:	0005      	movs	r5, r0
 8001d0a:	4684      	mov	ip, r0
 8001d0c:	4819      	ldr	r0, [pc, #100]	; (8001d74 <__eqdf2+0x80>)
 8001d0e:	030e      	lsls	r6, r1, #12
 8001d10:	004c      	lsls	r4, r1, #1
 8001d12:	4691      	mov	r9, r2
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	0fdb      	lsrs	r3, r3, #31
 8001d18:	469b      	mov	fp, r3
 8001d1a:	0b36      	lsrs	r6, r6, #12
 8001d1c:	0d64      	lsrs	r4, r4, #21
 8001d1e:	0fc9      	lsrs	r1, r1, #31
 8001d20:	0d52      	lsrs	r2, r2, #21
 8001d22:	4284      	cmp	r4, r0
 8001d24:	d019      	beq.n	8001d5a <__eqdf2+0x66>
 8001d26:	4282      	cmp	r2, r0
 8001d28:	d010      	beq.n	8001d4c <__eqdf2+0x58>
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	4294      	cmp	r4, r2
 8001d2e:	d10e      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d30:	454e      	cmp	r6, r9
 8001d32:	d10c      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d34:	2001      	movs	r0, #1
 8001d36:	45c4      	cmp	ip, r8
 8001d38:	d109      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d3a:	4559      	cmp	r1, fp
 8001d3c:	d017      	beq.n	8001d6e <__eqdf2+0x7a>
 8001d3e:	2c00      	cmp	r4, #0
 8001d40:	d105      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d42:	0030      	movs	r0, r6
 8001d44:	4328      	orrs	r0, r5
 8001d46:	1e43      	subs	r3, r0, #1
 8001d48:	4198      	sbcs	r0, r3
 8001d4a:	e000      	b.n	8001d4e <__eqdf2+0x5a>
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d50:	46bb      	mov	fp, r7
 8001d52:	46b2      	mov	sl, r6
 8001d54:	46a9      	mov	r9, r5
 8001d56:	46a0      	mov	r8, r4
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5a:	0033      	movs	r3, r6
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	432b      	orrs	r3, r5
 8001d60:	d1f5      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d62:	42a2      	cmp	r2, r4
 8001d64:	d1f3      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d66:	464b      	mov	r3, r9
 8001d68:	433b      	orrs	r3, r7
 8001d6a:	d1f0      	bne.n	8001d4e <__eqdf2+0x5a>
 8001d6c:	e7e2      	b.n	8001d34 <__eqdf2+0x40>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	e7ed      	b.n	8001d4e <__eqdf2+0x5a>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__gedf2>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	4647      	mov	r7, r8
 8001d7c:	46ce      	mov	lr, r9
 8001d7e:	0004      	movs	r4, r0
 8001d80:	0018      	movs	r0, r3
 8001d82:	0016      	movs	r6, r2
 8001d84:	031b      	lsls	r3, r3, #12
 8001d86:	0b1b      	lsrs	r3, r3, #12
 8001d88:	4d2d      	ldr	r5, [pc, #180]	; (8001e40 <__gedf2+0xc8>)
 8001d8a:	004a      	lsls	r2, r1, #1
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	0043      	lsls	r3, r0, #1
 8001d92:	030f      	lsls	r7, r1, #12
 8001d94:	46a4      	mov	ip, r4
 8001d96:	46b0      	mov	r8, r6
 8001d98:	0b3f      	lsrs	r7, r7, #12
 8001d9a:	0d52      	lsrs	r2, r2, #21
 8001d9c:	0fc9      	lsrs	r1, r1, #31
 8001d9e:	0d5b      	lsrs	r3, r3, #21
 8001da0:	0fc0      	lsrs	r0, r0, #31
 8001da2:	42aa      	cmp	r2, r5
 8001da4:	d021      	beq.n	8001dea <__gedf2+0x72>
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d013      	beq.n	8001dd2 <__gedf2+0x5a>
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d122      	bne.n	8001df4 <__gedf2+0x7c>
 8001dae:	433c      	orrs	r4, r7
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <__gedf2+0x42>
 8001db4:	464d      	mov	r5, r9
 8001db6:	432e      	orrs	r6, r5
 8001db8:	d022      	beq.n	8001e00 <__gedf2+0x88>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d010      	beq.n	8001de0 <__gedf2+0x68>
 8001dbe:	4281      	cmp	r1, r0
 8001dc0:	d022      	beq.n	8001e08 <__gedf2+0x90>
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	3901      	subs	r1, #1
 8001dc6:	4008      	ands	r0, r1
 8001dc8:	3801      	subs	r0, #1
 8001dca:	bcc0      	pop	{r6, r7}
 8001dcc:	46b9      	mov	r9, r7
 8001dce:	46b0      	mov	r8, r6
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd2:	464d      	mov	r5, r9
 8001dd4:	432e      	orrs	r6, r5
 8001dd6:	d129      	bne.n	8001e2c <__gedf2+0xb4>
 8001dd8:	2a00      	cmp	r2, #0
 8001dda:	d1f0      	bne.n	8001dbe <__gedf2+0x46>
 8001ddc:	433c      	orrs	r4, r7
 8001dde:	d1ee      	bne.n	8001dbe <__gedf2+0x46>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d1f2      	bne.n	8001dca <__gedf2+0x52>
 8001de4:	2001      	movs	r0, #1
 8001de6:	4240      	negs	r0, r0
 8001de8:	e7ef      	b.n	8001dca <__gedf2+0x52>
 8001dea:	003d      	movs	r5, r7
 8001dec:	4325      	orrs	r5, r4
 8001dee:	d11d      	bne.n	8001e2c <__gedf2+0xb4>
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d0ee      	beq.n	8001dd2 <__gedf2+0x5a>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e2      	bne.n	8001dbe <__gedf2+0x46>
 8001df8:	464c      	mov	r4, r9
 8001dfa:	4326      	orrs	r6, r4
 8001dfc:	d1df      	bne.n	8001dbe <__gedf2+0x46>
 8001dfe:	e7e0      	b.n	8001dc2 <__gedf2+0x4a>
 8001e00:	2000      	movs	r0, #0
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d0e1      	beq.n	8001dca <__gedf2+0x52>
 8001e06:	e7dc      	b.n	8001dc2 <__gedf2+0x4a>
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dc0a      	bgt.n	8001e22 <__gedf2+0xaa>
 8001e0c:	dbe8      	blt.n	8001de0 <__gedf2+0x68>
 8001e0e:	454f      	cmp	r7, r9
 8001e10:	d8d7      	bhi.n	8001dc2 <__gedf2+0x4a>
 8001e12:	d00e      	beq.n	8001e32 <__gedf2+0xba>
 8001e14:	2000      	movs	r0, #0
 8001e16:	454f      	cmp	r7, r9
 8001e18:	d2d7      	bcs.n	8001dca <__gedf2+0x52>
 8001e1a:	2900      	cmp	r1, #0
 8001e1c:	d0e2      	beq.n	8001de4 <__gedf2+0x6c>
 8001e1e:	0008      	movs	r0, r1
 8001e20:	e7d3      	b.n	8001dca <__gedf2+0x52>
 8001e22:	4243      	negs	r3, r0
 8001e24:	4158      	adcs	r0, r3
 8001e26:	0040      	lsls	r0, r0, #1
 8001e28:	3801      	subs	r0, #1
 8001e2a:	e7ce      	b.n	8001dca <__gedf2+0x52>
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	4240      	negs	r0, r0
 8001e30:	e7cb      	b.n	8001dca <__gedf2+0x52>
 8001e32:	45c4      	cmp	ip, r8
 8001e34:	d8c5      	bhi.n	8001dc2 <__gedf2+0x4a>
 8001e36:	2000      	movs	r0, #0
 8001e38:	45c4      	cmp	ip, r8
 8001e3a:	d2c6      	bcs.n	8001dca <__gedf2+0x52>
 8001e3c:	e7ed      	b.n	8001e1a <__gedf2+0xa2>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	000007ff 	.word	0x000007ff

08001e44 <__ledf2>:
 8001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e46:	4647      	mov	r7, r8
 8001e48:	46ce      	mov	lr, r9
 8001e4a:	0004      	movs	r4, r0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	0016      	movs	r6, r2
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	0b1b      	lsrs	r3, r3, #12
 8001e54:	4d2c      	ldr	r5, [pc, #176]	; (8001f08 <__ledf2+0xc4>)
 8001e56:	004a      	lsls	r2, r1, #1
 8001e58:	4699      	mov	r9, r3
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	0043      	lsls	r3, r0, #1
 8001e5e:	030f      	lsls	r7, r1, #12
 8001e60:	46a4      	mov	ip, r4
 8001e62:	46b0      	mov	r8, r6
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d52      	lsrs	r2, r2, #21
 8001e68:	0fc9      	lsrs	r1, r1, #31
 8001e6a:	0d5b      	lsrs	r3, r3, #21
 8001e6c:	0fc0      	lsrs	r0, r0, #31
 8001e6e:	42aa      	cmp	r2, r5
 8001e70:	d00d      	beq.n	8001e8e <__ledf2+0x4a>
 8001e72:	42ab      	cmp	r3, r5
 8001e74:	d010      	beq.n	8001e98 <__ledf2+0x54>
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d127      	bne.n	8001eca <__ledf2+0x86>
 8001e7a:	433c      	orrs	r4, r7
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <__ledf2+0x60>
 8001e80:	464d      	mov	r5, r9
 8001e82:	432e      	orrs	r6, r5
 8001e84:	d10e      	bne.n	8001ea4 <__ledf2+0x60>
 8001e86:	2000      	movs	r0, #0
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	d015      	beq.n	8001eb8 <__ledf2+0x74>
 8001e8c:	e00e      	b.n	8001eac <__ledf2+0x68>
 8001e8e:	003d      	movs	r5, r7
 8001e90:	4325      	orrs	r5, r4
 8001e92:	d110      	bne.n	8001eb6 <__ledf2+0x72>
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d118      	bne.n	8001eca <__ledf2+0x86>
 8001e98:	464d      	mov	r5, r9
 8001e9a:	432e      	orrs	r6, r5
 8001e9c:	d10b      	bne.n	8001eb6 <__ledf2+0x72>
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d102      	bne.n	8001ea8 <__ledf2+0x64>
 8001ea2:	433c      	orrs	r4, r7
 8001ea4:	2c00      	cmp	r4, #0
 8001ea6:	d00b      	beq.n	8001ec0 <__ledf2+0x7c>
 8001ea8:	4281      	cmp	r1, r0
 8001eaa:	d014      	beq.n	8001ed6 <__ledf2+0x92>
 8001eac:	2002      	movs	r0, #2
 8001eae:	3901      	subs	r1, #1
 8001eb0:	4008      	ands	r0, r1
 8001eb2:	3801      	subs	r0, #1
 8001eb4:	e000      	b.n	8001eb8 <__ledf2+0x74>
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	bcc0      	pop	{r6, r7}
 8001eba:	46b9      	mov	r9, r7
 8001ebc:	46b0      	mov	r8, r6
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <__ledf2+0x74>
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	e7f6      	b.n	8001eb8 <__ledf2+0x74>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ec      	bne.n	8001ea8 <__ledf2+0x64>
 8001ece:	464c      	mov	r4, r9
 8001ed0:	4326      	orrs	r6, r4
 8001ed2:	d1e9      	bne.n	8001ea8 <__ledf2+0x64>
 8001ed4:	e7ea      	b.n	8001eac <__ledf2+0x68>
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dd04      	ble.n	8001ee4 <__ledf2+0xa0>
 8001eda:	4243      	negs	r3, r0
 8001edc:	4158      	adcs	r0, r3
 8001ede:	0040      	lsls	r0, r0, #1
 8001ee0:	3801      	subs	r0, #1
 8001ee2:	e7e9      	b.n	8001eb8 <__ledf2+0x74>
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbeb      	blt.n	8001ec0 <__ledf2+0x7c>
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	d8df      	bhi.n	8001eac <__ledf2+0x68>
 8001eec:	d006      	beq.n	8001efc <__ledf2+0xb8>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	454f      	cmp	r7, r9
 8001ef2:	d2e1      	bcs.n	8001eb8 <__ledf2+0x74>
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d0e5      	beq.n	8001ec4 <__ledf2+0x80>
 8001ef8:	0008      	movs	r0, r1
 8001efa:	e7dd      	b.n	8001eb8 <__ledf2+0x74>
 8001efc:	45c4      	cmp	ip, r8
 8001efe:	d8d5      	bhi.n	8001eac <__ledf2+0x68>
 8001f00:	2000      	movs	r0, #0
 8001f02:	45c4      	cmp	ip, r8
 8001f04:	d2d8      	bcs.n	8001eb8 <__ledf2+0x74>
 8001f06:	e7f5      	b.n	8001ef4 <__ledf2+0xb0>
 8001f08:	000007ff 	.word	0x000007ff

08001f0c <__aeabi_dmul>:
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0e:	4657      	mov	r7, sl
 8001f10:	464e      	mov	r6, r9
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	b5e0      	push	{r5, r6, r7, lr}
 8001f18:	4698      	mov	r8, r3
 8001f1a:	030c      	lsls	r4, r1, #12
 8001f1c:	004b      	lsls	r3, r1, #1
 8001f1e:	0006      	movs	r6, r0
 8001f20:	4692      	mov	sl, r2
 8001f22:	b087      	sub	sp, #28
 8001f24:	0b24      	lsrs	r4, r4, #12
 8001f26:	0d5b      	lsrs	r3, r3, #21
 8001f28:	0fcf      	lsrs	r7, r1, #31
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dmul+0x24>
 8001f2e:	e15c      	b.n	80021ea <__aeabi_dmul+0x2de>
 8001f30:	4ad9      	ldr	r2, [pc, #868]	; (8002298 <__aeabi_dmul+0x38c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dmul+0x2c>
 8001f36:	e175      	b.n	8002224 <__aeabi_dmul+0x318>
 8001f38:	0f42      	lsrs	r2, r0, #29
 8001f3a:	00e4      	lsls	r4, r4, #3
 8001f3c:	4314      	orrs	r4, r2
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0412      	lsls	r2, r2, #16
 8001f42:	4314      	orrs	r4, r2
 8001f44:	4ad5      	ldr	r2, [pc, #852]	; (800229c <__aeabi_dmul+0x390>)
 8001f46:	00c5      	lsls	r5, r0, #3
 8001f48:	4694      	mov	ip, r2
 8001f4a:	4463      	add	r3, ip
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	4699      	mov	r9, r3
 8001f52:	469b      	mov	fp, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	4642      	mov	r2, r8
 8001f58:	031e      	lsls	r6, r3, #12
 8001f5a:	0fd2      	lsrs	r2, r2, #31
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4650      	mov	r0, sl
 8001f60:	4690      	mov	r8, r2
 8001f62:	0b36      	lsrs	r6, r6, #12
 8001f64:	0d5b      	lsrs	r3, r3, #21
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dmul+0x5e>
 8001f68:	e120      	b.n	80021ac <__aeabi_dmul+0x2a0>
 8001f6a:	4acb      	ldr	r2, [pc, #812]	; (8002298 <__aeabi_dmul+0x38c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dmul+0x66>
 8001f70:	e162      	b.n	8002238 <__aeabi_dmul+0x32c>
 8001f72:	49ca      	ldr	r1, [pc, #808]	; (800229c <__aeabi_dmul+0x390>)
 8001f74:	0f42      	lsrs	r2, r0, #29
 8001f76:	468c      	mov	ip, r1
 8001f78:	9900      	ldr	r1, [sp, #0]
 8001f7a:	4463      	add	r3, ip
 8001f7c:	00f6      	lsls	r6, r6, #3
 8001f7e:	468c      	mov	ip, r1
 8001f80:	4316      	orrs	r6, r2
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	449c      	add	ip, r3
 8001f86:	0412      	lsls	r2, r2, #16
 8001f88:	4663      	mov	r3, ip
 8001f8a:	4316      	orrs	r6, r2
 8001f8c:	00c2      	lsls	r2, r0, #3
 8001f8e:	2000      	movs	r0, #0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	9900      	ldr	r1, [sp, #0]
 8001f94:	4643      	mov	r3, r8
 8001f96:	3101      	adds	r1, #1
 8001f98:	468c      	mov	ip, r1
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	407b      	eors	r3, r7
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	290f      	cmp	r1, #15
 8001fa2:	d826      	bhi.n	8001ff2 <__aeabi_dmul+0xe6>
 8001fa4:	4bbe      	ldr	r3, [pc, #760]	; (80022a0 <__aeabi_dmul+0x394>)
 8001fa6:	0089      	lsls	r1, r1, #2
 8001fa8:	5859      	ldr	r1, [r3, r1]
 8001faa:	468f      	mov	pc, r1
 8001fac:	4643      	mov	r3, r8
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	0034      	movs	r4, r6
 8001fb2:	0015      	movs	r5, r2
 8001fb4:	4683      	mov	fp, r0
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d016      	beq.n	8001fea <__aeabi_dmul+0xde>
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dmul+0xb6>
 8001fc0:	e203      	b.n	80023ca <__aeabi_dmul+0x4be>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_dmul+0xbc>
 8001fc6:	e0cd      	b.n	8002164 <__aeabi_dmul+0x258>
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2400      	movs	r4, #0
 8001fcc:	2500      	movs	r5, #0
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	0512      	lsls	r2, r2, #20
 8001fd2:	4322      	orrs	r2, r4
 8001fd4:	07db      	lsls	r3, r3, #31
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	0028      	movs	r0, r5
 8001fda:	0011      	movs	r1, r2
 8001fdc:	b007      	add	sp, #28
 8001fde:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe0:	46bb      	mov	fp, r7
 8001fe2:	46b2      	mov	sl, r6
 8001fe4:	46a9      	mov	r9, r5
 8001fe6:	46a0      	mov	r8, r4
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fea:	2400      	movs	r4, #0
 8001fec:	2500      	movs	r5, #0
 8001fee:	4aaa      	ldr	r2, [pc, #680]	; (8002298 <__aeabi_dmul+0x38c>)
 8001ff0:	e7ed      	b.n	8001fce <__aeabi_dmul+0xc2>
 8001ff2:	0c28      	lsrs	r0, r5, #16
 8001ff4:	042d      	lsls	r5, r5, #16
 8001ff6:	0c2d      	lsrs	r5, r5, #16
 8001ff8:	002b      	movs	r3, r5
 8001ffa:	0c11      	lsrs	r1, r2, #16
 8001ffc:	0412      	lsls	r2, r2, #16
 8001ffe:	0c12      	lsrs	r2, r2, #16
 8002000:	4353      	muls	r3, r2
 8002002:	4698      	mov	r8, r3
 8002004:	0013      	movs	r3, r2
 8002006:	002f      	movs	r7, r5
 8002008:	4343      	muls	r3, r0
 800200a:	4699      	mov	r9, r3
 800200c:	434f      	muls	r7, r1
 800200e:	444f      	add	r7, r9
 8002010:	46bb      	mov	fp, r7
 8002012:	4647      	mov	r7, r8
 8002014:	000b      	movs	r3, r1
 8002016:	0c3f      	lsrs	r7, r7, #16
 8002018:	46ba      	mov	sl, r7
 800201a:	4343      	muls	r3, r0
 800201c:	44da      	add	sl, fp
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	45d1      	cmp	r9, sl
 8002022:	d904      	bls.n	800202e <__aeabi_dmul+0x122>
 8002024:	2780      	movs	r7, #128	; 0x80
 8002026:	027f      	lsls	r7, r7, #9
 8002028:	46b9      	mov	r9, r7
 800202a:	444b      	add	r3, r9
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	4653      	mov	r3, sl
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	469b      	mov	fp, r3
 8002034:	4653      	mov	r3, sl
 8002036:	041f      	lsls	r7, r3, #16
 8002038:	4643      	mov	r3, r8
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	4698      	mov	r8, r3
 8002040:	003b      	movs	r3, r7
 8002042:	4443      	add	r3, r8
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	0c33      	lsrs	r3, r6, #16
 8002048:	0436      	lsls	r6, r6, #16
 800204a:	0c36      	lsrs	r6, r6, #16
 800204c:	4698      	mov	r8, r3
 800204e:	0033      	movs	r3, r6
 8002050:	4343      	muls	r3, r0
 8002052:	4699      	mov	r9, r3
 8002054:	4643      	mov	r3, r8
 8002056:	4343      	muls	r3, r0
 8002058:	002f      	movs	r7, r5
 800205a:	469a      	mov	sl, r3
 800205c:	4643      	mov	r3, r8
 800205e:	4377      	muls	r7, r6
 8002060:	435d      	muls	r5, r3
 8002062:	0c38      	lsrs	r0, r7, #16
 8002064:	444d      	add	r5, r9
 8002066:	1945      	adds	r5, r0, r5
 8002068:	45a9      	cmp	r9, r5
 800206a:	d903      	bls.n	8002074 <__aeabi_dmul+0x168>
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	025b      	lsls	r3, r3, #9
 8002070:	4699      	mov	r9, r3
 8002072:	44ca      	add	sl, r9
 8002074:	043f      	lsls	r7, r7, #16
 8002076:	0c28      	lsrs	r0, r5, #16
 8002078:	0c3f      	lsrs	r7, r7, #16
 800207a:	042d      	lsls	r5, r5, #16
 800207c:	19ed      	adds	r5, r5, r7
 800207e:	0c27      	lsrs	r7, r4, #16
 8002080:	0424      	lsls	r4, r4, #16
 8002082:	0c24      	lsrs	r4, r4, #16
 8002084:	0003      	movs	r3, r0
 8002086:	0020      	movs	r0, r4
 8002088:	4350      	muls	r0, r2
 800208a:	437a      	muls	r2, r7
 800208c:	4691      	mov	r9, r2
 800208e:	003a      	movs	r2, r7
 8002090:	4453      	add	r3, sl
 8002092:	9305      	str	r3, [sp, #20]
 8002094:	0c03      	lsrs	r3, r0, #16
 8002096:	469a      	mov	sl, r3
 8002098:	434a      	muls	r2, r1
 800209a:	4361      	muls	r1, r4
 800209c:	4449      	add	r1, r9
 800209e:	4451      	add	r1, sl
 80020a0:	44ab      	add	fp, r5
 80020a2:	4589      	cmp	r9, r1
 80020a4:	d903      	bls.n	80020ae <__aeabi_dmul+0x1a2>
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	4699      	mov	r9, r3
 80020ac:	444a      	add	r2, r9
 80020ae:	0400      	lsls	r0, r0, #16
 80020b0:	0c0b      	lsrs	r3, r1, #16
 80020b2:	0c00      	lsrs	r0, r0, #16
 80020b4:	0409      	lsls	r1, r1, #16
 80020b6:	1809      	adds	r1, r1, r0
 80020b8:	0020      	movs	r0, r4
 80020ba:	4699      	mov	r9, r3
 80020bc:	4643      	mov	r3, r8
 80020be:	4370      	muls	r0, r6
 80020c0:	435c      	muls	r4, r3
 80020c2:	437e      	muls	r6, r7
 80020c4:	435f      	muls	r7, r3
 80020c6:	0c03      	lsrs	r3, r0, #16
 80020c8:	4698      	mov	r8, r3
 80020ca:	19a4      	adds	r4, r4, r6
 80020cc:	4444      	add	r4, r8
 80020ce:	444a      	add	r2, r9
 80020d0:	9703      	str	r7, [sp, #12]
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d904      	bls.n	80020e0 <__aeabi_dmul+0x1d4>
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	4698      	mov	r8, r3
 80020dc:	4447      	add	r7, r8
 80020de:	9703      	str	r7, [sp, #12]
 80020e0:	0423      	lsls	r3, r4, #16
 80020e2:	9e02      	ldr	r6, [sp, #8]
 80020e4:	469a      	mov	sl, r3
 80020e6:	9b05      	ldr	r3, [sp, #20]
 80020e8:	445e      	add	r6, fp
 80020ea:	4698      	mov	r8, r3
 80020ec:	42ae      	cmp	r6, r5
 80020ee:	41ad      	sbcs	r5, r5
 80020f0:	1876      	adds	r6, r6, r1
 80020f2:	428e      	cmp	r6, r1
 80020f4:	4189      	sbcs	r1, r1
 80020f6:	0400      	lsls	r0, r0, #16
 80020f8:	0c00      	lsrs	r0, r0, #16
 80020fa:	4450      	add	r0, sl
 80020fc:	4440      	add	r0, r8
 80020fe:	426d      	negs	r5, r5
 8002100:	1947      	adds	r7, r0, r5
 8002102:	46b8      	mov	r8, r7
 8002104:	4693      	mov	fp, r2
 8002106:	4249      	negs	r1, r1
 8002108:	4689      	mov	r9, r1
 800210a:	44c3      	add	fp, r8
 800210c:	44d9      	add	r9, fp
 800210e:	4298      	cmp	r0, r3
 8002110:	4180      	sbcs	r0, r0
 8002112:	45a8      	cmp	r8, r5
 8002114:	41ad      	sbcs	r5, r5
 8002116:	4593      	cmp	fp, r2
 8002118:	4192      	sbcs	r2, r2
 800211a:	4589      	cmp	r9, r1
 800211c:	4189      	sbcs	r1, r1
 800211e:	426d      	negs	r5, r5
 8002120:	4240      	negs	r0, r0
 8002122:	4328      	orrs	r0, r5
 8002124:	0c24      	lsrs	r4, r4, #16
 8002126:	4252      	negs	r2, r2
 8002128:	4249      	negs	r1, r1
 800212a:	430a      	orrs	r2, r1
 800212c:	9b03      	ldr	r3, [sp, #12]
 800212e:	1900      	adds	r0, r0, r4
 8002130:	1880      	adds	r0, r0, r2
 8002132:	18c7      	adds	r7, r0, r3
 8002134:	464b      	mov	r3, r9
 8002136:	0ddc      	lsrs	r4, r3, #23
 8002138:	9b04      	ldr	r3, [sp, #16]
 800213a:	0275      	lsls	r5, r6, #9
 800213c:	431d      	orrs	r5, r3
 800213e:	1e6a      	subs	r2, r5, #1
 8002140:	4195      	sbcs	r5, r2
 8002142:	464b      	mov	r3, r9
 8002144:	0df6      	lsrs	r6, r6, #23
 8002146:	027f      	lsls	r7, r7, #9
 8002148:	4335      	orrs	r5, r6
 800214a:	025a      	lsls	r2, r3, #9
 800214c:	433c      	orrs	r4, r7
 800214e:	4315      	orrs	r5, r2
 8002150:	01fb      	lsls	r3, r7, #7
 8002152:	d400      	bmi.n	8002156 <__aeabi_dmul+0x24a>
 8002154:	e11c      	b.n	8002390 <__aeabi_dmul+0x484>
 8002156:	2101      	movs	r1, #1
 8002158:	086a      	lsrs	r2, r5, #1
 800215a:	400d      	ands	r5, r1
 800215c:	4315      	orrs	r5, r2
 800215e:	07e2      	lsls	r2, r4, #31
 8002160:	4315      	orrs	r5, r2
 8002162:	0864      	lsrs	r4, r4, #1
 8002164:	494f      	ldr	r1, [pc, #316]	; (80022a4 <__aeabi_dmul+0x398>)
 8002166:	4461      	add	r1, ip
 8002168:	2900      	cmp	r1, #0
 800216a:	dc00      	bgt.n	800216e <__aeabi_dmul+0x262>
 800216c:	e0b0      	b.n	80022d0 <__aeabi_dmul+0x3c4>
 800216e:	076b      	lsls	r3, r5, #29
 8002170:	d009      	beq.n	8002186 <__aeabi_dmul+0x27a>
 8002172:	220f      	movs	r2, #15
 8002174:	402a      	ands	r2, r5
 8002176:	2a04      	cmp	r2, #4
 8002178:	d005      	beq.n	8002186 <__aeabi_dmul+0x27a>
 800217a:	1d2a      	adds	r2, r5, #4
 800217c:	42aa      	cmp	r2, r5
 800217e:	41ad      	sbcs	r5, r5
 8002180:	426d      	negs	r5, r5
 8002182:	1964      	adds	r4, r4, r5
 8002184:	0015      	movs	r5, r2
 8002186:	01e3      	lsls	r3, r4, #7
 8002188:	d504      	bpl.n	8002194 <__aeabi_dmul+0x288>
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <__aeabi_dmul+0x39c>)
 800218e:	00c9      	lsls	r1, r1, #3
 8002190:	4014      	ands	r4, r2
 8002192:	4461      	add	r1, ip
 8002194:	4a45      	ldr	r2, [pc, #276]	; (80022ac <__aeabi_dmul+0x3a0>)
 8002196:	4291      	cmp	r1, r2
 8002198:	dd00      	ble.n	800219c <__aeabi_dmul+0x290>
 800219a:	e726      	b.n	8001fea <__aeabi_dmul+0xde>
 800219c:	0762      	lsls	r2, r4, #29
 800219e:	08ed      	lsrs	r5, r5, #3
 80021a0:	0264      	lsls	r4, r4, #9
 80021a2:	0549      	lsls	r1, r1, #21
 80021a4:	4315      	orrs	r5, r2
 80021a6:	0b24      	lsrs	r4, r4, #12
 80021a8:	0d4a      	lsrs	r2, r1, #21
 80021aa:	e710      	b.n	8001fce <__aeabi_dmul+0xc2>
 80021ac:	4652      	mov	r2, sl
 80021ae:	4332      	orrs	r2, r6
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0x2a8>
 80021b2:	e07f      	b.n	80022b4 <__aeabi_dmul+0x3a8>
 80021b4:	2e00      	cmp	r6, #0
 80021b6:	d100      	bne.n	80021ba <__aeabi_dmul+0x2ae>
 80021b8:	e0dc      	b.n	8002374 <__aeabi_dmul+0x468>
 80021ba:	0030      	movs	r0, r6
 80021bc:	f000 fd78 	bl	8002cb0 <__clzsi2>
 80021c0:	0002      	movs	r2, r0
 80021c2:	3a0b      	subs	r2, #11
 80021c4:	231d      	movs	r3, #29
 80021c6:	0001      	movs	r1, r0
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	4652      	mov	r2, sl
 80021cc:	3908      	subs	r1, #8
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	408e      	lsls	r6, r1
 80021d2:	4316      	orrs	r6, r2
 80021d4:	4652      	mov	r2, sl
 80021d6:	408a      	lsls	r2, r1
 80021d8:	9b00      	ldr	r3, [sp, #0]
 80021da:	4935      	ldr	r1, [pc, #212]	; (80022b0 <__aeabi_dmul+0x3a4>)
 80021dc:	1a18      	subs	r0, r3, r0
 80021de:	0003      	movs	r3, r0
 80021e0:	468c      	mov	ip, r1
 80021e2:	4463      	add	r3, ip
 80021e4:	2000      	movs	r0, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	e6d3      	b.n	8001f92 <__aeabi_dmul+0x86>
 80021ea:	0025      	movs	r5, r4
 80021ec:	4305      	orrs	r5, r0
 80021ee:	d04a      	beq.n	8002286 <__aeabi_dmul+0x37a>
 80021f0:	2c00      	cmp	r4, #0
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dmul+0x2ea>
 80021f4:	e0b0      	b.n	8002358 <__aeabi_dmul+0x44c>
 80021f6:	0020      	movs	r0, r4
 80021f8:	f000 fd5a 	bl	8002cb0 <__clzsi2>
 80021fc:	0001      	movs	r1, r0
 80021fe:	0002      	movs	r2, r0
 8002200:	390b      	subs	r1, #11
 8002202:	231d      	movs	r3, #29
 8002204:	0010      	movs	r0, r2
 8002206:	1a5b      	subs	r3, r3, r1
 8002208:	0031      	movs	r1, r6
 800220a:	0035      	movs	r5, r6
 800220c:	3808      	subs	r0, #8
 800220e:	4084      	lsls	r4, r0
 8002210:	40d9      	lsrs	r1, r3
 8002212:	4085      	lsls	r5, r0
 8002214:	430c      	orrs	r4, r1
 8002216:	4826      	ldr	r0, [pc, #152]	; (80022b0 <__aeabi_dmul+0x3a4>)
 8002218:	1a83      	subs	r3, r0, r2
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2300      	movs	r3, #0
 800221e:	4699      	mov	r9, r3
 8002220:	469b      	mov	fp, r3
 8002222:	e697      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002224:	0005      	movs	r5, r0
 8002226:	4325      	orrs	r5, r4
 8002228:	d126      	bne.n	8002278 <__aeabi_dmul+0x36c>
 800222a:	2208      	movs	r2, #8
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2302      	movs	r3, #2
 8002230:	2400      	movs	r4, #0
 8002232:	4691      	mov	r9, r2
 8002234:	469b      	mov	fp, r3
 8002236:	e68d      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002238:	4652      	mov	r2, sl
 800223a:	9b00      	ldr	r3, [sp, #0]
 800223c:	4332      	orrs	r2, r6
 800223e:	d110      	bne.n	8002262 <__aeabi_dmul+0x356>
 8002240:	4915      	ldr	r1, [pc, #84]	; (8002298 <__aeabi_dmul+0x38c>)
 8002242:	2600      	movs	r6, #0
 8002244:	468c      	mov	ip, r1
 8002246:	4463      	add	r3, ip
 8002248:	4649      	mov	r1, r9
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2302      	movs	r3, #2
 800224e:	4319      	orrs	r1, r3
 8002250:	4689      	mov	r9, r1
 8002252:	2002      	movs	r0, #2
 8002254:	e69d      	b.n	8001f92 <__aeabi_dmul+0x86>
 8002256:	465b      	mov	r3, fp
 8002258:	9701      	str	r7, [sp, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d000      	beq.n	8002260 <__aeabi_dmul+0x354>
 800225e:	e6ad      	b.n	8001fbc <__aeabi_dmul+0xb0>
 8002260:	e6c3      	b.n	8001fea <__aeabi_dmul+0xde>
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <__aeabi_dmul+0x38c>)
 8002264:	2003      	movs	r0, #3
 8002266:	4694      	mov	ip, r2
 8002268:	4463      	add	r3, ip
 800226a:	464a      	mov	r2, r9
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2303      	movs	r3, #3
 8002270:	431a      	orrs	r2, r3
 8002272:	4691      	mov	r9, r2
 8002274:	4652      	mov	r2, sl
 8002276:	e68c      	b.n	8001f92 <__aeabi_dmul+0x86>
 8002278:	220c      	movs	r2, #12
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2303      	movs	r3, #3
 800227e:	0005      	movs	r5, r0
 8002280:	4691      	mov	r9, r2
 8002282:	469b      	mov	fp, r3
 8002284:	e666      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002286:	2304      	movs	r3, #4
 8002288:	4699      	mov	r9, r3
 800228a:	2300      	movs	r3, #0
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	2400      	movs	r4, #0
 8002292:	469b      	mov	fp, r3
 8002294:	e65e      	b.n	8001f54 <__aeabi_dmul+0x48>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff
 800229c:	fffffc01 	.word	0xfffffc01
 80022a0:	080189b8 	.word	0x080189b8
 80022a4:	000003ff 	.word	0x000003ff
 80022a8:	feffffff 	.word	0xfeffffff
 80022ac:	000007fe 	.word	0x000007fe
 80022b0:	fffffc0d 	.word	0xfffffc0d
 80022b4:	4649      	mov	r1, r9
 80022b6:	2301      	movs	r3, #1
 80022b8:	4319      	orrs	r1, r3
 80022ba:	4689      	mov	r9, r1
 80022bc:	2600      	movs	r6, #0
 80022be:	2001      	movs	r0, #1
 80022c0:	e667      	b.n	8001f92 <__aeabi_dmul+0x86>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2480      	movs	r4, #128	; 0x80
 80022c6:	2500      	movs	r5, #0
 80022c8:	4a43      	ldr	r2, [pc, #268]	; (80023d8 <__aeabi_dmul+0x4cc>)
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	e67e      	b.n	8001fce <__aeabi_dmul+0xc2>
 80022d0:	2001      	movs	r0, #1
 80022d2:	1a40      	subs	r0, r0, r1
 80022d4:	2838      	cmp	r0, #56	; 0x38
 80022d6:	dd00      	ble.n	80022da <__aeabi_dmul+0x3ce>
 80022d8:	e676      	b.n	8001fc8 <__aeabi_dmul+0xbc>
 80022da:	281f      	cmp	r0, #31
 80022dc:	dd5b      	ble.n	8002396 <__aeabi_dmul+0x48a>
 80022de:	221f      	movs	r2, #31
 80022e0:	0023      	movs	r3, r4
 80022e2:	4252      	negs	r2, r2
 80022e4:	1a51      	subs	r1, r2, r1
 80022e6:	40cb      	lsrs	r3, r1
 80022e8:	0019      	movs	r1, r3
 80022ea:	2820      	cmp	r0, #32
 80022ec:	d003      	beq.n	80022f6 <__aeabi_dmul+0x3ea>
 80022ee:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <__aeabi_dmul+0x4d0>)
 80022f0:	4462      	add	r2, ip
 80022f2:	4094      	lsls	r4, r2
 80022f4:	4325      	orrs	r5, r4
 80022f6:	1e6a      	subs	r2, r5, #1
 80022f8:	4195      	sbcs	r5, r2
 80022fa:	002a      	movs	r2, r5
 80022fc:	430a      	orrs	r2, r1
 80022fe:	2107      	movs	r1, #7
 8002300:	000d      	movs	r5, r1
 8002302:	2400      	movs	r4, #0
 8002304:	4015      	ands	r5, r2
 8002306:	4211      	tst	r1, r2
 8002308:	d05b      	beq.n	80023c2 <__aeabi_dmul+0x4b6>
 800230a:	210f      	movs	r1, #15
 800230c:	2400      	movs	r4, #0
 800230e:	4011      	ands	r1, r2
 8002310:	2904      	cmp	r1, #4
 8002312:	d053      	beq.n	80023bc <__aeabi_dmul+0x4b0>
 8002314:	1d11      	adds	r1, r2, #4
 8002316:	4291      	cmp	r1, r2
 8002318:	4192      	sbcs	r2, r2
 800231a:	4252      	negs	r2, r2
 800231c:	18a4      	adds	r4, r4, r2
 800231e:	000a      	movs	r2, r1
 8002320:	0223      	lsls	r3, r4, #8
 8002322:	d54b      	bpl.n	80023bc <__aeabi_dmul+0x4b0>
 8002324:	2201      	movs	r2, #1
 8002326:	2400      	movs	r4, #0
 8002328:	2500      	movs	r5, #0
 800232a:	e650      	b.n	8001fce <__aeabi_dmul+0xc2>
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	031b      	lsls	r3, r3, #12
 8002330:	421c      	tst	r4, r3
 8002332:	d009      	beq.n	8002348 <__aeabi_dmul+0x43c>
 8002334:	421e      	tst	r6, r3
 8002336:	d107      	bne.n	8002348 <__aeabi_dmul+0x43c>
 8002338:	4333      	orrs	r3, r6
 800233a:	031c      	lsls	r4, r3, #12
 800233c:	4643      	mov	r3, r8
 800233e:	0015      	movs	r5, r2
 8002340:	0b24      	lsrs	r4, r4, #12
 8002342:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <__aeabi_dmul+0x4cc>)
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	e642      	b.n	8001fce <__aeabi_dmul+0xc2>
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0312      	lsls	r2, r2, #12
 800234c:	4314      	orrs	r4, r2
 800234e:	0324      	lsls	r4, r4, #12
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <__aeabi_dmul+0x4cc>)
 8002352:	0b24      	lsrs	r4, r4, #12
 8002354:	9701      	str	r7, [sp, #4]
 8002356:	e63a      	b.n	8001fce <__aeabi_dmul+0xc2>
 8002358:	f000 fcaa 	bl	8002cb0 <__clzsi2>
 800235c:	0001      	movs	r1, r0
 800235e:	0002      	movs	r2, r0
 8002360:	3115      	adds	r1, #21
 8002362:	3220      	adds	r2, #32
 8002364:	291c      	cmp	r1, #28
 8002366:	dc00      	bgt.n	800236a <__aeabi_dmul+0x45e>
 8002368:	e74b      	b.n	8002202 <__aeabi_dmul+0x2f6>
 800236a:	0034      	movs	r4, r6
 800236c:	3808      	subs	r0, #8
 800236e:	2500      	movs	r5, #0
 8002370:	4084      	lsls	r4, r0
 8002372:	e750      	b.n	8002216 <__aeabi_dmul+0x30a>
 8002374:	f000 fc9c 	bl	8002cb0 <__clzsi2>
 8002378:	0003      	movs	r3, r0
 800237a:	001a      	movs	r2, r3
 800237c:	3215      	adds	r2, #21
 800237e:	3020      	adds	r0, #32
 8002380:	2a1c      	cmp	r2, #28
 8002382:	dc00      	bgt.n	8002386 <__aeabi_dmul+0x47a>
 8002384:	e71e      	b.n	80021c4 <__aeabi_dmul+0x2b8>
 8002386:	4656      	mov	r6, sl
 8002388:	3b08      	subs	r3, #8
 800238a:	2200      	movs	r2, #0
 800238c:	409e      	lsls	r6, r3
 800238e:	e723      	b.n	80021d8 <__aeabi_dmul+0x2cc>
 8002390:	9b00      	ldr	r3, [sp, #0]
 8002392:	469c      	mov	ip, r3
 8002394:	e6e6      	b.n	8002164 <__aeabi_dmul+0x258>
 8002396:	4912      	ldr	r1, [pc, #72]	; (80023e0 <__aeabi_dmul+0x4d4>)
 8002398:	0022      	movs	r2, r4
 800239a:	4461      	add	r1, ip
 800239c:	002e      	movs	r6, r5
 800239e:	408d      	lsls	r5, r1
 80023a0:	408a      	lsls	r2, r1
 80023a2:	40c6      	lsrs	r6, r0
 80023a4:	1e69      	subs	r1, r5, #1
 80023a6:	418d      	sbcs	r5, r1
 80023a8:	4332      	orrs	r2, r6
 80023aa:	432a      	orrs	r2, r5
 80023ac:	40c4      	lsrs	r4, r0
 80023ae:	0753      	lsls	r3, r2, #29
 80023b0:	d0b6      	beq.n	8002320 <__aeabi_dmul+0x414>
 80023b2:	210f      	movs	r1, #15
 80023b4:	4011      	ands	r1, r2
 80023b6:	2904      	cmp	r1, #4
 80023b8:	d1ac      	bne.n	8002314 <__aeabi_dmul+0x408>
 80023ba:	e7b1      	b.n	8002320 <__aeabi_dmul+0x414>
 80023bc:	0765      	lsls	r5, r4, #29
 80023be:	0264      	lsls	r4, r4, #9
 80023c0:	0b24      	lsrs	r4, r4, #12
 80023c2:	08d2      	lsrs	r2, r2, #3
 80023c4:	4315      	orrs	r5, r2
 80023c6:	2200      	movs	r2, #0
 80023c8:	e601      	b.n	8001fce <__aeabi_dmul+0xc2>
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0312      	lsls	r2, r2, #12
 80023ce:	4314      	orrs	r4, r2
 80023d0:	0324      	lsls	r4, r4, #12
 80023d2:	4a01      	ldr	r2, [pc, #4]	; (80023d8 <__aeabi_dmul+0x4cc>)
 80023d4:	0b24      	lsrs	r4, r4, #12
 80023d6:	e5fa      	b.n	8001fce <__aeabi_dmul+0xc2>
 80023d8:	000007ff 	.word	0x000007ff
 80023dc:	0000043e 	.word	0x0000043e
 80023e0:	0000041e 	.word	0x0000041e

080023e4 <__aeabi_dsub>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	4657      	mov	r7, sl
 80023e8:	464e      	mov	r6, r9
 80023ea:	4645      	mov	r5, r8
 80023ec:	46de      	mov	lr, fp
 80023ee:	b5e0      	push	{r5, r6, r7, lr}
 80023f0:	001e      	movs	r6, r3
 80023f2:	0017      	movs	r7, r2
 80023f4:	004a      	lsls	r2, r1, #1
 80023f6:	030b      	lsls	r3, r1, #12
 80023f8:	0d52      	lsrs	r2, r2, #21
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	4690      	mov	r8, r2
 80023fe:	0f42      	lsrs	r2, r0, #29
 8002400:	431a      	orrs	r2, r3
 8002402:	0fcd      	lsrs	r5, r1, #31
 8002404:	4ccd      	ldr	r4, [pc, #820]	; (800273c <__aeabi_dsub+0x358>)
 8002406:	0331      	lsls	r1, r6, #12
 8002408:	00c3      	lsls	r3, r0, #3
 800240a:	4694      	mov	ip, r2
 800240c:	0070      	lsls	r0, r6, #1
 800240e:	0f7a      	lsrs	r2, r7, #29
 8002410:	0a49      	lsrs	r1, r1, #9
 8002412:	00ff      	lsls	r7, r7, #3
 8002414:	469a      	mov	sl, r3
 8002416:	46b9      	mov	r9, r7
 8002418:	0d40      	lsrs	r0, r0, #21
 800241a:	0ff6      	lsrs	r6, r6, #31
 800241c:	4311      	orrs	r1, r2
 800241e:	42a0      	cmp	r0, r4
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x40>
 8002422:	e0b1      	b.n	8002588 <__aeabi_dsub+0x1a4>
 8002424:	2201      	movs	r2, #1
 8002426:	4056      	eors	r6, r2
 8002428:	46b3      	mov	fp, r6
 800242a:	42b5      	cmp	r5, r6
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x4c>
 800242e:	e088      	b.n	8002542 <__aeabi_dsub+0x15e>
 8002430:	4642      	mov	r2, r8
 8002432:	1a12      	subs	r2, r2, r0
 8002434:	2a00      	cmp	r2, #0
 8002436:	dc00      	bgt.n	800243a <__aeabi_dsub+0x56>
 8002438:	e0ae      	b.n	8002598 <__aeabi_dsub+0x1b4>
 800243a:	2800      	cmp	r0, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x5c>
 800243e:	e0c1      	b.n	80025c4 <__aeabi_dsub+0x1e0>
 8002440:	48be      	ldr	r0, [pc, #760]	; (800273c <__aeabi_dsub+0x358>)
 8002442:	4580      	cmp	r8, r0
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x64>
 8002446:	e151      	b.n	80026ec <__aeabi_dsub+0x308>
 8002448:	2080      	movs	r0, #128	; 0x80
 800244a:	0400      	lsls	r0, r0, #16
 800244c:	4301      	orrs	r1, r0
 800244e:	2a38      	cmp	r2, #56	; 0x38
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0x70>
 8002452:	e17b      	b.n	800274c <__aeabi_dsub+0x368>
 8002454:	2a1f      	cmp	r2, #31
 8002456:	dd00      	ble.n	800245a <__aeabi_dsub+0x76>
 8002458:	e1ee      	b.n	8002838 <__aeabi_dsub+0x454>
 800245a:	2020      	movs	r0, #32
 800245c:	003e      	movs	r6, r7
 800245e:	1a80      	subs	r0, r0, r2
 8002460:	000c      	movs	r4, r1
 8002462:	40d6      	lsrs	r6, r2
 8002464:	40d1      	lsrs	r1, r2
 8002466:	4087      	lsls	r7, r0
 8002468:	4662      	mov	r2, ip
 800246a:	4084      	lsls	r4, r0
 800246c:	1a52      	subs	r2, r2, r1
 800246e:	1e78      	subs	r0, r7, #1
 8002470:	4187      	sbcs	r7, r0
 8002472:	4694      	mov	ip, r2
 8002474:	4334      	orrs	r4, r6
 8002476:	4327      	orrs	r7, r4
 8002478:	1bdc      	subs	r4, r3, r7
 800247a:	42a3      	cmp	r3, r4
 800247c:	419b      	sbcs	r3, r3
 800247e:	4662      	mov	r2, ip
 8002480:	425b      	negs	r3, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4699      	mov	r9, r3
 8002486:	464b      	mov	r3, r9
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	d400      	bmi.n	800248e <__aeabi_dsub+0xaa>
 800248c:	e118      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 800248e:	464b      	mov	r3, r9
 8002490:	0258      	lsls	r0, r3, #9
 8002492:	0a43      	lsrs	r3, r0, #9
 8002494:	4699      	mov	r9, r3
 8002496:	464b      	mov	r3, r9
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0xba>
 800249c:	e137      	b.n	800270e <__aeabi_dsub+0x32a>
 800249e:	4648      	mov	r0, r9
 80024a0:	f000 fc06 	bl	8002cb0 <__clzsi2>
 80024a4:	0001      	movs	r1, r0
 80024a6:	3908      	subs	r1, #8
 80024a8:	2320      	movs	r3, #32
 80024aa:	0022      	movs	r2, r4
 80024ac:	4648      	mov	r0, r9
 80024ae:	1a5b      	subs	r3, r3, r1
 80024b0:	40da      	lsrs	r2, r3
 80024b2:	4088      	lsls	r0, r1
 80024b4:	408c      	lsls	r4, r1
 80024b6:	4643      	mov	r3, r8
 80024b8:	4310      	orrs	r0, r2
 80024ba:	4588      	cmp	r8, r1
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dsub+0xdc>
 80024be:	e136      	b.n	800272e <__aeabi_dsub+0x34a>
 80024c0:	1ac9      	subs	r1, r1, r3
 80024c2:	1c4b      	adds	r3, r1, #1
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	dd00      	ble.n	80024ca <__aeabi_dsub+0xe6>
 80024c8:	e0ea      	b.n	80026a0 <__aeabi_dsub+0x2bc>
 80024ca:	2220      	movs	r2, #32
 80024cc:	0026      	movs	r6, r4
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	0001      	movs	r1, r0
 80024d2:	4094      	lsls	r4, r2
 80024d4:	40de      	lsrs	r6, r3
 80024d6:	40d8      	lsrs	r0, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	4091      	lsls	r1, r2
 80024dc:	1e62      	subs	r2, r4, #1
 80024de:	4194      	sbcs	r4, r2
 80024e0:	4681      	mov	r9, r0
 80024e2:	4698      	mov	r8, r3
 80024e4:	4331      	orrs	r1, r6
 80024e6:	430c      	orrs	r4, r1
 80024e8:	0763      	lsls	r3, r4, #29
 80024ea:	d009      	beq.n	8002500 <__aeabi_dsub+0x11c>
 80024ec:	230f      	movs	r3, #15
 80024ee:	4023      	ands	r3, r4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d005      	beq.n	8002500 <__aeabi_dsub+0x11c>
 80024f4:	1d23      	adds	r3, r4, #4
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	41a4      	sbcs	r4, r4
 80024fa:	4264      	negs	r4, r4
 80024fc:	44a1      	add	r9, r4
 80024fe:	001c      	movs	r4, r3
 8002500:	464b      	mov	r3, r9
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	d400      	bmi.n	8002508 <__aeabi_dsub+0x124>
 8002506:	e0de      	b.n	80026c6 <__aeabi_dsub+0x2e2>
 8002508:	4641      	mov	r1, r8
 800250a:	4b8c      	ldr	r3, [pc, #560]	; (800273c <__aeabi_dsub+0x358>)
 800250c:	3101      	adds	r1, #1
 800250e:	4299      	cmp	r1, r3
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x130>
 8002512:	e0e7      	b.n	80026e4 <__aeabi_dsub+0x300>
 8002514:	464b      	mov	r3, r9
 8002516:	488a      	ldr	r0, [pc, #552]	; (8002740 <__aeabi_dsub+0x35c>)
 8002518:	08e4      	lsrs	r4, r4, #3
 800251a:	4003      	ands	r3, r0
 800251c:	0018      	movs	r0, r3
 800251e:	0549      	lsls	r1, r1, #21
 8002520:	075b      	lsls	r3, r3, #29
 8002522:	0240      	lsls	r0, r0, #9
 8002524:	4323      	orrs	r3, r4
 8002526:	0d4a      	lsrs	r2, r1, #21
 8002528:	0b04      	lsrs	r4, r0, #12
 800252a:	0512      	lsls	r2, r2, #20
 800252c:	07ed      	lsls	r5, r5, #31
 800252e:	4322      	orrs	r2, r4
 8002530:	432a      	orrs	r2, r5
 8002532:	0018      	movs	r0, r3
 8002534:	0011      	movs	r1, r2
 8002536:	bcf0      	pop	{r4, r5, r6, r7}
 8002538:	46bb      	mov	fp, r7
 800253a:	46b2      	mov	sl, r6
 800253c:	46a9      	mov	r9, r5
 800253e:	46a0      	mov	r8, r4
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002542:	4642      	mov	r2, r8
 8002544:	1a12      	subs	r2, r2, r0
 8002546:	2a00      	cmp	r2, #0
 8002548:	dd52      	ble.n	80025f0 <__aeabi_dsub+0x20c>
 800254a:	2800      	cmp	r0, #0
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x16c>
 800254e:	e09c      	b.n	800268a <__aeabi_dsub+0x2a6>
 8002550:	45a0      	cmp	r8, r4
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x172>
 8002554:	e0ca      	b.n	80026ec <__aeabi_dsub+0x308>
 8002556:	2080      	movs	r0, #128	; 0x80
 8002558:	0400      	lsls	r0, r0, #16
 800255a:	4301      	orrs	r1, r0
 800255c:	2a38      	cmp	r2, #56	; 0x38
 800255e:	dd00      	ble.n	8002562 <__aeabi_dsub+0x17e>
 8002560:	e149      	b.n	80027f6 <__aeabi_dsub+0x412>
 8002562:	2a1f      	cmp	r2, #31
 8002564:	dc00      	bgt.n	8002568 <__aeabi_dsub+0x184>
 8002566:	e197      	b.n	8002898 <__aeabi_dsub+0x4b4>
 8002568:	0010      	movs	r0, r2
 800256a:	000e      	movs	r6, r1
 800256c:	3820      	subs	r0, #32
 800256e:	40c6      	lsrs	r6, r0
 8002570:	2a20      	cmp	r2, #32
 8002572:	d004      	beq.n	800257e <__aeabi_dsub+0x19a>
 8002574:	2040      	movs	r0, #64	; 0x40
 8002576:	1a82      	subs	r2, r0, r2
 8002578:	4091      	lsls	r1, r2
 800257a:	430f      	orrs	r7, r1
 800257c:	46b9      	mov	r9, r7
 800257e:	464c      	mov	r4, r9
 8002580:	1e62      	subs	r2, r4, #1
 8002582:	4194      	sbcs	r4, r2
 8002584:	4334      	orrs	r4, r6
 8002586:	e13a      	b.n	80027fe <__aeabi_dsub+0x41a>
 8002588:	000a      	movs	r2, r1
 800258a:	433a      	orrs	r2, r7
 800258c:	d028      	beq.n	80025e0 <__aeabi_dsub+0x1fc>
 800258e:	46b3      	mov	fp, r6
 8002590:	42b5      	cmp	r5, r6
 8002592:	d02b      	beq.n	80025ec <__aeabi_dsub+0x208>
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <__aeabi_dsub+0x360>)
 8002596:	4442      	add	r2, r8
 8002598:	2a00      	cmp	r2, #0
 800259a:	d05d      	beq.n	8002658 <__aeabi_dsub+0x274>
 800259c:	4642      	mov	r2, r8
 800259e:	4644      	mov	r4, r8
 80025a0:	1a82      	subs	r2, r0, r2
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	d000      	beq.n	80025a8 <__aeabi_dsub+0x1c4>
 80025a6:	e0f5      	b.n	8002794 <__aeabi_dsub+0x3b0>
 80025a8:	4665      	mov	r5, ip
 80025aa:	431d      	orrs	r5, r3
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0x1cc>
 80025ae:	e19c      	b.n	80028ea <__aeabi_dsub+0x506>
 80025b0:	1e55      	subs	r5, r2, #1
 80025b2:	2a01      	cmp	r2, #1
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x1d4>
 80025b6:	e1fb      	b.n	80029b0 <__aeabi_dsub+0x5cc>
 80025b8:	4c60      	ldr	r4, [pc, #384]	; (800273c <__aeabi_dsub+0x358>)
 80025ba:	42a2      	cmp	r2, r4
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x1dc>
 80025be:	e1bd      	b.n	800293c <__aeabi_dsub+0x558>
 80025c0:	002a      	movs	r2, r5
 80025c2:	e0f0      	b.n	80027a6 <__aeabi_dsub+0x3c2>
 80025c4:	0008      	movs	r0, r1
 80025c6:	4338      	orrs	r0, r7
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x1e8>
 80025ca:	e0c3      	b.n	8002754 <__aeabi_dsub+0x370>
 80025cc:	1e50      	subs	r0, r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x1f0>
 80025d2:	e1a8      	b.n	8002926 <__aeabi_dsub+0x542>
 80025d4:	4c59      	ldr	r4, [pc, #356]	; (800273c <__aeabi_dsub+0x358>)
 80025d6:	42a2      	cmp	r2, r4
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x1f8>
 80025da:	e087      	b.n	80026ec <__aeabi_dsub+0x308>
 80025dc:	0002      	movs	r2, r0
 80025de:	e736      	b.n	800244e <__aeabi_dsub+0x6a>
 80025e0:	2201      	movs	r2, #1
 80025e2:	4056      	eors	r6, r2
 80025e4:	46b3      	mov	fp, r6
 80025e6:	42b5      	cmp	r5, r6
 80025e8:	d000      	beq.n	80025ec <__aeabi_dsub+0x208>
 80025ea:	e721      	b.n	8002430 <__aeabi_dsub+0x4c>
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <__aeabi_dsub+0x360>)
 80025ee:	4442      	add	r2, r8
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x212>
 80025f4:	e0b5      	b.n	8002762 <__aeabi_dsub+0x37e>
 80025f6:	4642      	mov	r2, r8
 80025f8:	4644      	mov	r4, r8
 80025fa:	1a82      	subs	r2, r0, r2
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d100      	bne.n	8002602 <__aeabi_dsub+0x21e>
 8002600:	e138      	b.n	8002874 <__aeabi_dsub+0x490>
 8002602:	4e4e      	ldr	r6, [pc, #312]	; (800273c <__aeabi_dsub+0x358>)
 8002604:	42b0      	cmp	r0, r6
 8002606:	d100      	bne.n	800260a <__aeabi_dsub+0x226>
 8002608:	e1de      	b.n	80029c8 <__aeabi_dsub+0x5e4>
 800260a:	2680      	movs	r6, #128	; 0x80
 800260c:	4664      	mov	r4, ip
 800260e:	0436      	lsls	r6, r6, #16
 8002610:	4334      	orrs	r4, r6
 8002612:	46a4      	mov	ip, r4
 8002614:	2a38      	cmp	r2, #56	; 0x38
 8002616:	dd00      	ble.n	800261a <__aeabi_dsub+0x236>
 8002618:	e196      	b.n	8002948 <__aeabi_dsub+0x564>
 800261a:	2a1f      	cmp	r2, #31
 800261c:	dd00      	ble.n	8002620 <__aeabi_dsub+0x23c>
 800261e:	e224      	b.n	8002a6a <__aeabi_dsub+0x686>
 8002620:	2620      	movs	r6, #32
 8002622:	1ab4      	subs	r4, r6, r2
 8002624:	46a2      	mov	sl, r4
 8002626:	4664      	mov	r4, ip
 8002628:	4656      	mov	r6, sl
 800262a:	40b4      	lsls	r4, r6
 800262c:	46a1      	mov	r9, r4
 800262e:	001c      	movs	r4, r3
 8002630:	464e      	mov	r6, r9
 8002632:	40d4      	lsrs	r4, r2
 8002634:	4326      	orrs	r6, r4
 8002636:	0034      	movs	r4, r6
 8002638:	4656      	mov	r6, sl
 800263a:	40b3      	lsls	r3, r6
 800263c:	1e5e      	subs	r6, r3, #1
 800263e:	41b3      	sbcs	r3, r6
 8002640:	431c      	orrs	r4, r3
 8002642:	4663      	mov	r3, ip
 8002644:	40d3      	lsrs	r3, r2
 8002646:	18c9      	adds	r1, r1, r3
 8002648:	19e4      	adds	r4, r4, r7
 800264a:	42bc      	cmp	r4, r7
 800264c:	41bf      	sbcs	r7, r7
 800264e:	427f      	negs	r7, r7
 8002650:	46b9      	mov	r9, r7
 8002652:	4680      	mov	r8, r0
 8002654:	4489      	add	r9, r1
 8002656:	e0d8      	b.n	800280a <__aeabi_dsub+0x426>
 8002658:	4640      	mov	r0, r8
 800265a:	4c3b      	ldr	r4, [pc, #236]	; (8002748 <__aeabi_dsub+0x364>)
 800265c:	3001      	adds	r0, #1
 800265e:	4220      	tst	r0, r4
 8002660:	d000      	beq.n	8002664 <__aeabi_dsub+0x280>
 8002662:	e0b4      	b.n	80027ce <__aeabi_dsub+0x3ea>
 8002664:	4640      	mov	r0, r8
 8002666:	2800      	cmp	r0, #0
 8002668:	d000      	beq.n	800266c <__aeabi_dsub+0x288>
 800266a:	e144      	b.n	80028f6 <__aeabi_dsub+0x512>
 800266c:	4660      	mov	r0, ip
 800266e:	4318      	orrs	r0, r3
 8002670:	d100      	bne.n	8002674 <__aeabi_dsub+0x290>
 8002672:	e190      	b.n	8002996 <__aeabi_dsub+0x5b2>
 8002674:	0008      	movs	r0, r1
 8002676:	4338      	orrs	r0, r7
 8002678:	d000      	beq.n	800267c <__aeabi_dsub+0x298>
 800267a:	e1aa      	b.n	80029d2 <__aeabi_dsub+0x5ee>
 800267c:	4661      	mov	r1, ip
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	0749      	lsls	r1, r1, #29
 8002682:	430b      	orrs	r3, r1
 8002684:	4661      	mov	r1, ip
 8002686:	08cc      	lsrs	r4, r1, #3
 8002688:	e027      	b.n	80026da <__aeabi_dsub+0x2f6>
 800268a:	0008      	movs	r0, r1
 800268c:	4338      	orrs	r0, r7
 800268e:	d061      	beq.n	8002754 <__aeabi_dsub+0x370>
 8002690:	1e50      	subs	r0, r2, #1
 8002692:	2a01      	cmp	r2, #1
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x2b4>
 8002696:	e139      	b.n	800290c <__aeabi_dsub+0x528>
 8002698:	42a2      	cmp	r2, r4
 800269a:	d027      	beq.n	80026ec <__aeabi_dsub+0x308>
 800269c:	0002      	movs	r2, r0
 800269e:	e75d      	b.n	800255c <__aeabi_dsub+0x178>
 80026a0:	0002      	movs	r2, r0
 80026a2:	391f      	subs	r1, #31
 80026a4:	40ca      	lsrs	r2, r1
 80026a6:	0011      	movs	r1, r2
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d003      	beq.n	80026b4 <__aeabi_dsub+0x2d0>
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4098      	lsls	r0, r3
 80026b2:	4304      	orrs	r4, r0
 80026b4:	1e63      	subs	r3, r4, #1
 80026b6:	419c      	sbcs	r4, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	4699      	mov	r9, r3
 80026bc:	4698      	mov	r8, r3
 80026be:	430c      	orrs	r4, r1
 80026c0:	0763      	lsls	r3, r4, #29
 80026c2:	d000      	beq.n	80026c6 <__aeabi_dsub+0x2e2>
 80026c4:	e712      	b.n	80024ec <__aeabi_dsub+0x108>
 80026c6:	464b      	mov	r3, r9
 80026c8:	464a      	mov	r2, r9
 80026ca:	08e4      	lsrs	r4, r4, #3
 80026cc:	075b      	lsls	r3, r3, #29
 80026ce:	4323      	orrs	r3, r4
 80026d0:	08d4      	lsrs	r4, r2, #3
 80026d2:	4642      	mov	r2, r8
 80026d4:	4919      	ldr	r1, [pc, #100]	; (800273c <__aeabi_dsub+0x358>)
 80026d6:	428a      	cmp	r2, r1
 80026d8:	d00e      	beq.n	80026f8 <__aeabi_dsub+0x314>
 80026da:	0324      	lsls	r4, r4, #12
 80026dc:	0552      	lsls	r2, r2, #21
 80026de:	0b24      	lsrs	r4, r4, #12
 80026e0:	0d52      	lsrs	r2, r2, #21
 80026e2:	e722      	b.n	800252a <__aeabi_dsub+0x146>
 80026e4:	000a      	movs	r2, r1
 80026e6:	2400      	movs	r4, #0
 80026e8:	2300      	movs	r3, #0
 80026ea:	e71e      	b.n	800252a <__aeabi_dsub+0x146>
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	4662      	mov	r2, ip
 80026f0:	0752      	lsls	r2, r2, #29
 80026f2:	4313      	orrs	r3, r2
 80026f4:	4662      	mov	r2, ip
 80026f6:	08d4      	lsrs	r4, r2, #3
 80026f8:	001a      	movs	r2, r3
 80026fa:	4322      	orrs	r2, r4
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x31c>
 80026fe:	e1fc      	b.n	8002afa <__aeabi_dsub+0x716>
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	0312      	lsls	r2, r2, #12
 8002704:	4314      	orrs	r4, r2
 8002706:	0324      	lsls	r4, r4, #12
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <__aeabi_dsub+0x358>)
 800270a:	0b24      	lsrs	r4, r4, #12
 800270c:	e70d      	b.n	800252a <__aeabi_dsub+0x146>
 800270e:	0020      	movs	r0, r4
 8002710:	f000 face 	bl	8002cb0 <__clzsi2>
 8002714:	0001      	movs	r1, r0
 8002716:	3118      	adds	r1, #24
 8002718:	291f      	cmp	r1, #31
 800271a:	dc00      	bgt.n	800271e <__aeabi_dsub+0x33a>
 800271c:	e6c4      	b.n	80024a8 <__aeabi_dsub+0xc4>
 800271e:	3808      	subs	r0, #8
 8002720:	4084      	lsls	r4, r0
 8002722:	4643      	mov	r3, r8
 8002724:	0020      	movs	r0, r4
 8002726:	2400      	movs	r4, #0
 8002728:	4588      	cmp	r8, r1
 800272a:	dc00      	bgt.n	800272e <__aeabi_dsub+0x34a>
 800272c:	e6c8      	b.n	80024c0 <__aeabi_dsub+0xdc>
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__aeabi_dsub+0x35c>)
 8002730:	1a5b      	subs	r3, r3, r1
 8002732:	4010      	ands	r0, r2
 8002734:	4698      	mov	r8, r3
 8002736:	4681      	mov	r9, r0
 8002738:	e6d6      	b.n	80024e8 <__aeabi_dsub+0x104>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	000007ff 	.word	0x000007ff
 8002740:	ff7fffff 	.word	0xff7fffff
 8002744:	fffff801 	.word	0xfffff801
 8002748:	000007fe 	.word	0x000007fe
 800274c:	430f      	orrs	r7, r1
 800274e:	1e7a      	subs	r2, r7, #1
 8002750:	4197      	sbcs	r7, r2
 8002752:	e691      	b.n	8002478 <__aeabi_dsub+0x94>
 8002754:	4661      	mov	r1, ip
 8002756:	08db      	lsrs	r3, r3, #3
 8002758:	0749      	lsls	r1, r1, #29
 800275a:	430b      	orrs	r3, r1
 800275c:	4661      	mov	r1, ip
 800275e:	08cc      	lsrs	r4, r1, #3
 8002760:	e7b8      	b.n	80026d4 <__aeabi_dsub+0x2f0>
 8002762:	4640      	mov	r0, r8
 8002764:	4cd3      	ldr	r4, [pc, #844]	; (8002ab4 <__aeabi_dsub+0x6d0>)
 8002766:	3001      	adds	r0, #1
 8002768:	4220      	tst	r0, r4
 800276a:	d000      	beq.n	800276e <__aeabi_dsub+0x38a>
 800276c:	e0a2      	b.n	80028b4 <__aeabi_dsub+0x4d0>
 800276e:	4640      	mov	r0, r8
 8002770:	2800      	cmp	r0, #0
 8002772:	d000      	beq.n	8002776 <__aeabi_dsub+0x392>
 8002774:	e101      	b.n	800297a <__aeabi_dsub+0x596>
 8002776:	4660      	mov	r0, ip
 8002778:	4318      	orrs	r0, r3
 800277a:	d100      	bne.n	800277e <__aeabi_dsub+0x39a>
 800277c:	e15e      	b.n	8002a3c <__aeabi_dsub+0x658>
 800277e:	0008      	movs	r0, r1
 8002780:	4338      	orrs	r0, r7
 8002782:	d000      	beq.n	8002786 <__aeabi_dsub+0x3a2>
 8002784:	e15f      	b.n	8002a46 <__aeabi_dsub+0x662>
 8002786:	4661      	mov	r1, ip
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	0749      	lsls	r1, r1, #29
 800278c:	430b      	orrs	r3, r1
 800278e:	4661      	mov	r1, ip
 8002790:	08cc      	lsrs	r4, r1, #3
 8002792:	e7a2      	b.n	80026da <__aeabi_dsub+0x2f6>
 8002794:	4dc8      	ldr	r5, [pc, #800]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 8002796:	42a8      	cmp	r0, r5
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x3b8>
 800279a:	e0cf      	b.n	800293c <__aeabi_dsub+0x558>
 800279c:	2580      	movs	r5, #128	; 0x80
 800279e:	4664      	mov	r4, ip
 80027a0:	042d      	lsls	r5, r5, #16
 80027a2:	432c      	orrs	r4, r5
 80027a4:	46a4      	mov	ip, r4
 80027a6:	2a38      	cmp	r2, #56	; 0x38
 80027a8:	dc56      	bgt.n	8002858 <__aeabi_dsub+0x474>
 80027aa:	2a1f      	cmp	r2, #31
 80027ac:	dd00      	ble.n	80027b0 <__aeabi_dsub+0x3cc>
 80027ae:	e0d1      	b.n	8002954 <__aeabi_dsub+0x570>
 80027b0:	2520      	movs	r5, #32
 80027b2:	001e      	movs	r6, r3
 80027b4:	1aad      	subs	r5, r5, r2
 80027b6:	4664      	mov	r4, ip
 80027b8:	40ab      	lsls	r3, r5
 80027ba:	40ac      	lsls	r4, r5
 80027bc:	40d6      	lsrs	r6, r2
 80027be:	1e5d      	subs	r5, r3, #1
 80027c0:	41ab      	sbcs	r3, r5
 80027c2:	4334      	orrs	r4, r6
 80027c4:	4323      	orrs	r3, r4
 80027c6:	4664      	mov	r4, ip
 80027c8:	40d4      	lsrs	r4, r2
 80027ca:	1b09      	subs	r1, r1, r4
 80027cc:	e049      	b.n	8002862 <__aeabi_dsub+0x47e>
 80027ce:	4660      	mov	r0, ip
 80027d0:	1bdc      	subs	r4, r3, r7
 80027d2:	1a46      	subs	r6, r0, r1
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	4180      	sbcs	r0, r0
 80027d8:	4240      	negs	r0, r0
 80027da:	4681      	mov	r9, r0
 80027dc:	0030      	movs	r0, r6
 80027de:	464e      	mov	r6, r9
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	4681      	mov	r9, r0
 80027e4:	0200      	lsls	r0, r0, #8
 80027e6:	d476      	bmi.n	80028d6 <__aeabi_dsub+0x4f2>
 80027e8:	464b      	mov	r3, r9
 80027ea:	4323      	orrs	r3, r4
 80027ec:	d000      	beq.n	80027f0 <__aeabi_dsub+0x40c>
 80027ee:	e652      	b.n	8002496 <__aeabi_dsub+0xb2>
 80027f0:	2400      	movs	r4, #0
 80027f2:	2500      	movs	r5, #0
 80027f4:	e771      	b.n	80026da <__aeabi_dsub+0x2f6>
 80027f6:	4339      	orrs	r1, r7
 80027f8:	000c      	movs	r4, r1
 80027fa:	1e62      	subs	r2, r4, #1
 80027fc:	4194      	sbcs	r4, r2
 80027fe:	18e4      	adds	r4, r4, r3
 8002800:	429c      	cmp	r4, r3
 8002802:	419b      	sbcs	r3, r3
 8002804:	425b      	negs	r3, r3
 8002806:	4463      	add	r3, ip
 8002808:	4699      	mov	r9, r3
 800280a:	464b      	mov	r3, r9
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	d400      	bmi.n	8002812 <__aeabi_dsub+0x42e>
 8002810:	e756      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002812:	2301      	movs	r3, #1
 8002814:	469c      	mov	ip, r3
 8002816:	4ba8      	ldr	r3, [pc, #672]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 8002818:	44e0      	add	r8, ip
 800281a:	4598      	cmp	r8, r3
 800281c:	d038      	beq.n	8002890 <__aeabi_dsub+0x4ac>
 800281e:	464b      	mov	r3, r9
 8002820:	48a6      	ldr	r0, [pc, #664]	; (8002abc <__aeabi_dsub+0x6d8>)
 8002822:	2201      	movs	r2, #1
 8002824:	4003      	ands	r3, r0
 8002826:	0018      	movs	r0, r3
 8002828:	0863      	lsrs	r3, r4, #1
 800282a:	4014      	ands	r4, r2
 800282c:	431c      	orrs	r4, r3
 800282e:	07c3      	lsls	r3, r0, #31
 8002830:	431c      	orrs	r4, r3
 8002832:	0843      	lsrs	r3, r0, #1
 8002834:	4699      	mov	r9, r3
 8002836:	e657      	b.n	80024e8 <__aeabi_dsub+0x104>
 8002838:	0010      	movs	r0, r2
 800283a:	000e      	movs	r6, r1
 800283c:	3820      	subs	r0, #32
 800283e:	40c6      	lsrs	r6, r0
 8002840:	2a20      	cmp	r2, #32
 8002842:	d004      	beq.n	800284e <__aeabi_dsub+0x46a>
 8002844:	2040      	movs	r0, #64	; 0x40
 8002846:	1a82      	subs	r2, r0, r2
 8002848:	4091      	lsls	r1, r2
 800284a:	430f      	orrs	r7, r1
 800284c:	46b9      	mov	r9, r7
 800284e:	464f      	mov	r7, r9
 8002850:	1e7a      	subs	r2, r7, #1
 8002852:	4197      	sbcs	r7, r2
 8002854:	4337      	orrs	r7, r6
 8002856:	e60f      	b.n	8002478 <__aeabi_dsub+0x94>
 8002858:	4662      	mov	r2, ip
 800285a:	431a      	orrs	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	4193      	sbcs	r3, r2
 8002862:	1afc      	subs	r4, r7, r3
 8002864:	42a7      	cmp	r7, r4
 8002866:	41bf      	sbcs	r7, r7
 8002868:	427f      	negs	r7, r7
 800286a:	1bcb      	subs	r3, r1, r7
 800286c:	4699      	mov	r9, r3
 800286e:	465d      	mov	r5, fp
 8002870:	4680      	mov	r8, r0
 8002872:	e608      	b.n	8002486 <__aeabi_dsub+0xa2>
 8002874:	4666      	mov	r6, ip
 8002876:	431e      	orrs	r6, r3
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0x498>
 800287a:	e0be      	b.n	80029fa <__aeabi_dsub+0x616>
 800287c:	1e56      	subs	r6, r2, #1
 800287e:	2a01      	cmp	r2, #1
 8002880:	d100      	bne.n	8002884 <__aeabi_dsub+0x4a0>
 8002882:	e109      	b.n	8002a98 <__aeabi_dsub+0x6b4>
 8002884:	4c8c      	ldr	r4, [pc, #560]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 8002886:	42a2      	cmp	r2, r4
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x4a8>
 800288a:	e119      	b.n	8002ac0 <__aeabi_dsub+0x6dc>
 800288c:	0032      	movs	r2, r6
 800288e:	e6c1      	b.n	8002614 <__aeabi_dsub+0x230>
 8002890:	4642      	mov	r2, r8
 8002892:	2400      	movs	r4, #0
 8002894:	2300      	movs	r3, #0
 8002896:	e648      	b.n	800252a <__aeabi_dsub+0x146>
 8002898:	2020      	movs	r0, #32
 800289a:	000c      	movs	r4, r1
 800289c:	1a80      	subs	r0, r0, r2
 800289e:	003e      	movs	r6, r7
 80028a0:	4087      	lsls	r7, r0
 80028a2:	4084      	lsls	r4, r0
 80028a4:	40d6      	lsrs	r6, r2
 80028a6:	1e78      	subs	r0, r7, #1
 80028a8:	4187      	sbcs	r7, r0
 80028aa:	40d1      	lsrs	r1, r2
 80028ac:	4334      	orrs	r4, r6
 80028ae:	433c      	orrs	r4, r7
 80028b0:	448c      	add	ip, r1
 80028b2:	e7a4      	b.n	80027fe <__aeabi_dsub+0x41a>
 80028b4:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <__aeabi_dsub+0x6d4>)
 80028b6:	4290      	cmp	r0, r2
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x4d8>
 80028ba:	e0e9      	b.n	8002a90 <__aeabi_dsub+0x6ac>
 80028bc:	19df      	adds	r7, r3, r7
 80028be:	429f      	cmp	r7, r3
 80028c0:	419b      	sbcs	r3, r3
 80028c2:	4461      	add	r1, ip
 80028c4:	425b      	negs	r3, r3
 80028c6:	18c9      	adds	r1, r1, r3
 80028c8:	07cc      	lsls	r4, r1, #31
 80028ca:	087f      	lsrs	r7, r7, #1
 80028cc:	084b      	lsrs	r3, r1, #1
 80028ce:	4699      	mov	r9, r3
 80028d0:	4680      	mov	r8, r0
 80028d2:	433c      	orrs	r4, r7
 80028d4:	e6f4      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 80028d6:	1afc      	subs	r4, r7, r3
 80028d8:	42a7      	cmp	r7, r4
 80028da:	41bf      	sbcs	r7, r7
 80028dc:	4663      	mov	r3, ip
 80028de:	427f      	negs	r7, r7
 80028e0:	1ac9      	subs	r1, r1, r3
 80028e2:	1bcb      	subs	r3, r1, r7
 80028e4:	4699      	mov	r9, r3
 80028e6:	465d      	mov	r5, fp
 80028e8:	e5d5      	b.n	8002496 <__aeabi_dsub+0xb2>
 80028ea:	08ff      	lsrs	r7, r7, #3
 80028ec:	074b      	lsls	r3, r1, #29
 80028ee:	465d      	mov	r5, fp
 80028f0:	433b      	orrs	r3, r7
 80028f2:	08cc      	lsrs	r4, r1, #3
 80028f4:	e6ee      	b.n	80026d4 <__aeabi_dsub+0x2f0>
 80028f6:	4662      	mov	r2, ip
 80028f8:	431a      	orrs	r2, r3
 80028fa:	d000      	beq.n	80028fe <__aeabi_dsub+0x51a>
 80028fc:	e082      	b.n	8002a04 <__aeabi_dsub+0x620>
 80028fe:	000b      	movs	r3, r1
 8002900:	433b      	orrs	r3, r7
 8002902:	d11b      	bne.n	800293c <__aeabi_dsub+0x558>
 8002904:	2480      	movs	r4, #128	; 0x80
 8002906:	2500      	movs	r5, #0
 8002908:	0324      	lsls	r4, r4, #12
 800290a:	e6f9      	b.n	8002700 <__aeabi_dsub+0x31c>
 800290c:	19dc      	adds	r4, r3, r7
 800290e:	429c      	cmp	r4, r3
 8002910:	419b      	sbcs	r3, r3
 8002912:	4461      	add	r1, ip
 8002914:	4689      	mov	r9, r1
 8002916:	425b      	negs	r3, r3
 8002918:	4499      	add	r9, r3
 800291a:	464b      	mov	r3, r9
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	d444      	bmi.n	80029aa <__aeabi_dsub+0x5c6>
 8002920:	2301      	movs	r3, #1
 8002922:	4698      	mov	r8, r3
 8002924:	e6cc      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002926:	1bdc      	subs	r4, r3, r7
 8002928:	4662      	mov	r2, ip
 800292a:	42a3      	cmp	r3, r4
 800292c:	419b      	sbcs	r3, r3
 800292e:	1a51      	subs	r1, r2, r1
 8002930:	425b      	negs	r3, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	4699      	mov	r9, r3
 8002936:	2301      	movs	r3, #1
 8002938:	4698      	mov	r8, r3
 800293a:	e5a4      	b.n	8002486 <__aeabi_dsub+0xa2>
 800293c:	08ff      	lsrs	r7, r7, #3
 800293e:	074b      	lsls	r3, r1, #29
 8002940:	465d      	mov	r5, fp
 8002942:	433b      	orrs	r3, r7
 8002944:	08cc      	lsrs	r4, r1, #3
 8002946:	e6d7      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002948:	4662      	mov	r2, ip
 800294a:	431a      	orrs	r2, r3
 800294c:	0014      	movs	r4, r2
 800294e:	1e63      	subs	r3, r4, #1
 8002950:	419c      	sbcs	r4, r3
 8002952:	e679      	b.n	8002648 <__aeabi_dsub+0x264>
 8002954:	0015      	movs	r5, r2
 8002956:	4664      	mov	r4, ip
 8002958:	3d20      	subs	r5, #32
 800295a:	40ec      	lsrs	r4, r5
 800295c:	46a0      	mov	r8, r4
 800295e:	2a20      	cmp	r2, #32
 8002960:	d005      	beq.n	800296e <__aeabi_dsub+0x58a>
 8002962:	2540      	movs	r5, #64	; 0x40
 8002964:	4664      	mov	r4, ip
 8002966:	1aaa      	subs	r2, r5, r2
 8002968:	4094      	lsls	r4, r2
 800296a:	4323      	orrs	r3, r4
 800296c:	469a      	mov	sl, r3
 800296e:	4654      	mov	r4, sl
 8002970:	1e63      	subs	r3, r4, #1
 8002972:	419c      	sbcs	r4, r3
 8002974:	4643      	mov	r3, r8
 8002976:	4323      	orrs	r3, r4
 8002978:	e773      	b.n	8002862 <__aeabi_dsub+0x47e>
 800297a:	4662      	mov	r2, ip
 800297c:	431a      	orrs	r2, r3
 800297e:	d023      	beq.n	80029c8 <__aeabi_dsub+0x5e4>
 8002980:	000a      	movs	r2, r1
 8002982:	433a      	orrs	r2, r7
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x5a4>
 8002986:	e0a0      	b.n	8002aca <__aeabi_dsub+0x6e6>
 8002988:	4662      	mov	r2, ip
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	0752      	lsls	r2, r2, #29
 800298e:	4313      	orrs	r3, r2
 8002990:	4662      	mov	r2, ip
 8002992:	08d4      	lsrs	r4, r2, #3
 8002994:	e6b0      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002996:	000b      	movs	r3, r1
 8002998:	433b      	orrs	r3, r7
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x5ba>
 800299c:	e728      	b.n	80027f0 <__aeabi_dsub+0x40c>
 800299e:	08ff      	lsrs	r7, r7, #3
 80029a0:	074b      	lsls	r3, r1, #29
 80029a2:	465d      	mov	r5, fp
 80029a4:	433b      	orrs	r3, r7
 80029a6:	08cc      	lsrs	r4, r1, #3
 80029a8:	e697      	b.n	80026da <__aeabi_dsub+0x2f6>
 80029aa:	2302      	movs	r3, #2
 80029ac:	4698      	mov	r8, r3
 80029ae:	e736      	b.n	800281e <__aeabi_dsub+0x43a>
 80029b0:	1afc      	subs	r4, r7, r3
 80029b2:	42a7      	cmp	r7, r4
 80029b4:	41bf      	sbcs	r7, r7
 80029b6:	4663      	mov	r3, ip
 80029b8:	427f      	negs	r7, r7
 80029ba:	1ac9      	subs	r1, r1, r3
 80029bc:	1bcb      	subs	r3, r1, r7
 80029be:	4699      	mov	r9, r3
 80029c0:	2301      	movs	r3, #1
 80029c2:	465d      	mov	r5, fp
 80029c4:	4698      	mov	r8, r3
 80029c6:	e55e      	b.n	8002486 <__aeabi_dsub+0xa2>
 80029c8:	074b      	lsls	r3, r1, #29
 80029ca:	08ff      	lsrs	r7, r7, #3
 80029cc:	433b      	orrs	r3, r7
 80029ce:	08cc      	lsrs	r4, r1, #3
 80029d0:	e692      	b.n	80026f8 <__aeabi_dsub+0x314>
 80029d2:	1bdc      	subs	r4, r3, r7
 80029d4:	4660      	mov	r0, ip
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	41b6      	sbcs	r6, r6
 80029da:	1a40      	subs	r0, r0, r1
 80029dc:	4276      	negs	r6, r6
 80029de:	1b80      	subs	r0, r0, r6
 80029e0:	4681      	mov	r9, r0
 80029e2:	0200      	lsls	r0, r0, #8
 80029e4:	d560      	bpl.n	8002aa8 <__aeabi_dsub+0x6c4>
 80029e6:	1afc      	subs	r4, r7, r3
 80029e8:	42a7      	cmp	r7, r4
 80029ea:	41bf      	sbcs	r7, r7
 80029ec:	4663      	mov	r3, ip
 80029ee:	427f      	negs	r7, r7
 80029f0:	1ac9      	subs	r1, r1, r3
 80029f2:	1bcb      	subs	r3, r1, r7
 80029f4:	4699      	mov	r9, r3
 80029f6:	465d      	mov	r5, fp
 80029f8:	e576      	b.n	80024e8 <__aeabi_dsub+0x104>
 80029fa:	08ff      	lsrs	r7, r7, #3
 80029fc:	074b      	lsls	r3, r1, #29
 80029fe:	433b      	orrs	r3, r7
 8002a00:	08cc      	lsrs	r4, r1, #3
 8002a02:	e667      	b.n	80026d4 <__aeabi_dsub+0x2f0>
 8002a04:	000a      	movs	r2, r1
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	433a      	orrs	r2, r7
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x62a>
 8002a0c:	e66f      	b.n	80026ee <__aeabi_dsub+0x30a>
 8002a0e:	4662      	mov	r2, ip
 8002a10:	0752      	lsls	r2, r2, #29
 8002a12:	4313      	orrs	r3, r2
 8002a14:	4662      	mov	r2, ip
 8002a16:	08d4      	lsrs	r4, r2, #3
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0312      	lsls	r2, r2, #12
 8002a1c:	4214      	tst	r4, r2
 8002a1e:	d007      	beq.n	8002a30 <__aeabi_dsub+0x64c>
 8002a20:	08c8      	lsrs	r0, r1, #3
 8002a22:	4210      	tst	r0, r2
 8002a24:	d104      	bne.n	8002a30 <__aeabi_dsub+0x64c>
 8002a26:	465d      	mov	r5, fp
 8002a28:	0004      	movs	r4, r0
 8002a2a:	08fb      	lsrs	r3, r7, #3
 8002a2c:	0749      	lsls	r1, r1, #29
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	0f5a      	lsrs	r2, r3, #29
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	0752      	lsls	r2, r2, #29
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	e65d      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002a3c:	074b      	lsls	r3, r1, #29
 8002a3e:	08ff      	lsrs	r7, r7, #3
 8002a40:	433b      	orrs	r3, r7
 8002a42:	08cc      	lsrs	r4, r1, #3
 8002a44:	e649      	b.n	80026da <__aeabi_dsub+0x2f6>
 8002a46:	19dc      	adds	r4, r3, r7
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	419b      	sbcs	r3, r3
 8002a4c:	4461      	add	r1, ip
 8002a4e:	4689      	mov	r9, r1
 8002a50:	425b      	negs	r3, r3
 8002a52:	4499      	add	r9, r3
 8002a54:	464b      	mov	r3, r9
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	d400      	bmi.n	8002a5c <__aeabi_dsub+0x678>
 8002a5a:	e631      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002a5c:	464a      	mov	r2, r9
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <__aeabi_dsub+0x6d8>)
 8002a60:	401a      	ands	r2, r3
 8002a62:	2301      	movs	r3, #1
 8002a64:	4691      	mov	r9, r2
 8002a66:	4698      	mov	r8, r3
 8002a68:	e62a      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002a6a:	0016      	movs	r6, r2
 8002a6c:	4664      	mov	r4, ip
 8002a6e:	3e20      	subs	r6, #32
 8002a70:	40f4      	lsrs	r4, r6
 8002a72:	46a0      	mov	r8, r4
 8002a74:	2a20      	cmp	r2, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x6a0>
 8002a78:	2640      	movs	r6, #64	; 0x40
 8002a7a:	4664      	mov	r4, ip
 8002a7c:	1ab2      	subs	r2, r6, r2
 8002a7e:	4094      	lsls	r4, r2
 8002a80:	4323      	orrs	r3, r4
 8002a82:	469a      	mov	sl, r3
 8002a84:	4654      	mov	r4, sl
 8002a86:	1e63      	subs	r3, r4, #1
 8002a88:	419c      	sbcs	r4, r3
 8002a8a:	4643      	mov	r3, r8
 8002a8c:	431c      	orrs	r4, r3
 8002a8e:	e5db      	b.n	8002648 <__aeabi_dsub+0x264>
 8002a90:	0002      	movs	r2, r0
 8002a92:	2400      	movs	r4, #0
 8002a94:	2300      	movs	r3, #0
 8002a96:	e548      	b.n	800252a <__aeabi_dsub+0x146>
 8002a98:	19dc      	adds	r4, r3, r7
 8002a9a:	42bc      	cmp	r4, r7
 8002a9c:	41bf      	sbcs	r7, r7
 8002a9e:	4461      	add	r1, ip
 8002aa0:	4689      	mov	r9, r1
 8002aa2:	427f      	negs	r7, r7
 8002aa4:	44b9      	add	r9, r7
 8002aa6:	e738      	b.n	800291a <__aeabi_dsub+0x536>
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	4323      	orrs	r3, r4
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x6cc>
 8002aae:	e69f      	b.n	80027f0 <__aeabi_dsub+0x40c>
 8002ab0:	e606      	b.n	80026c0 <__aeabi_dsub+0x2dc>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	000007fe 	.word	0x000007fe
 8002ab8:	000007ff 	.word	0x000007ff
 8002abc:	ff7fffff 	.word	0xff7fffff
 8002ac0:	08ff      	lsrs	r7, r7, #3
 8002ac2:	074b      	lsls	r3, r1, #29
 8002ac4:	433b      	orrs	r3, r7
 8002ac6:	08cc      	lsrs	r4, r1, #3
 8002ac8:	e616      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002aca:	4662      	mov	r2, ip
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	0752      	lsls	r2, r2, #29
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	4662      	mov	r2, ip
 8002ad4:	08d4      	lsrs	r4, r2, #3
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	0312      	lsls	r2, r2, #12
 8002ada:	4214      	tst	r4, r2
 8002adc:	d007      	beq.n	8002aee <__aeabi_dsub+0x70a>
 8002ade:	08c8      	lsrs	r0, r1, #3
 8002ae0:	4210      	tst	r0, r2
 8002ae2:	d104      	bne.n	8002aee <__aeabi_dsub+0x70a>
 8002ae4:	465d      	mov	r5, fp
 8002ae6:	0004      	movs	r4, r0
 8002ae8:	08fb      	lsrs	r3, r7, #3
 8002aea:	0749      	lsls	r1, r1, #29
 8002aec:	430b      	orrs	r3, r1
 8002aee:	0f5a      	lsrs	r2, r3, #29
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	0752      	lsls	r2, r2, #29
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	e5fe      	b.n	80026f8 <__aeabi_dsub+0x314>
 8002afa:	2300      	movs	r3, #0
 8002afc:	4a01      	ldr	r2, [pc, #4]	; (8002b04 <__aeabi_dsub+0x720>)
 8002afe:	001c      	movs	r4, r3
 8002b00:	e513      	b.n	800252a <__aeabi_dsub+0x146>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	000007ff 	.word	0x000007ff

08002b08 <__aeabi_d2iz>:
 8002b08:	000a      	movs	r2, r1
 8002b0a:	b530      	push	{r4, r5, lr}
 8002b0c:	4c13      	ldr	r4, [pc, #76]	; (8002b5c <__aeabi_d2iz+0x54>)
 8002b0e:	0053      	lsls	r3, r2, #1
 8002b10:	0309      	lsls	r1, r1, #12
 8002b12:	0005      	movs	r5, r0
 8002b14:	0b09      	lsrs	r1, r1, #12
 8002b16:	2000      	movs	r0, #0
 8002b18:	0d5b      	lsrs	r3, r3, #21
 8002b1a:	0fd2      	lsrs	r2, r2, #31
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	dd04      	ble.n	8002b2a <__aeabi_d2iz+0x22>
 8002b20:	480f      	ldr	r0, [pc, #60]	; (8002b60 <__aeabi_d2iz+0x58>)
 8002b22:	4283      	cmp	r3, r0
 8002b24:	dd02      	ble.n	8002b2c <__aeabi_d2iz+0x24>
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <__aeabi_d2iz+0x5c>)
 8002b28:	18d0      	adds	r0, r2, r3
 8002b2a:	bd30      	pop	{r4, r5, pc}
 8002b2c:	2080      	movs	r0, #128	; 0x80
 8002b2e:	0340      	lsls	r0, r0, #13
 8002b30:	4301      	orrs	r1, r0
 8002b32:	480d      	ldr	r0, [pc, #52]	; (8002b68 <__aeabi_d2iz+0x60>)
 8002b34:	1ac0      	subs	r0, r0, r3
 8002b36:	281f      	cmp	r0, #31
 8002b38:	dd08      	ble.n	8002b4c <__aeabi_d2iz+0x44>
 8002b3a:	480c      	ldr	r0, [pc, #48]	; (8002b6c <__aeabi_d2iz+0x64>)
 8002b3c:	1ac3      	subs	r3, r0, r3
 8002b3e:	40d9      	lsrs	r1, r3
 8002b40:	000b      	movs	r3, r1
 8002b42:	4258      	negs	r0, r3
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d1f0      	bne.n	8002b2a <__aeabi_d2iz+0x22>
 8002b48:	0018      	movs	r0, r3
 8002b4a:	e7ee      	b.n	8002b2a <__aeabi_d2iz+0x22>
 8002b4c:	4c08      	ldr	r4, [pc, #32]	; (8002b70 <__aeabi_d2iz+0x68>)
 8002b4e:	40c5      	lsrs	r5, r0
 8002b50:	46a4      	mov	ip, r4
 8002b52:	4463      	add	r3, ip
 8002b54:	4099      	lsls	r1, r3
 8002b56:	000b      	movs	r3, r1
 8002b58:	432b      	orrs	r3, r5
 8002b5a:	e7f2      	b.n	8002b42 <__aeabi_d2iz+0x3a>
 8002b5c:	000003fe 	.word	0x000003fe
 8002b60:	0000041d 	.word	0x0000041d
 8002b64:	7fffffff 	.word	0x7fffffff
 8002b68:	00000433 	.word	0x00000433
 8002b6c:	00000413 	.word	0x00000413
 8002b70:	fffffbed 	.word	0xfffffbed

08002b74 <__aeabi_i2d>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d016      	beq.n	8002ba8 <__aeabi_i2d+0x34>
 8002b7a:	17c3      	asrs	r3, r0, #31
 8002b7c:	18c5      	adds	r5, r0, r3
 8002b7e:	405d      	eors	r5, r3
 8002b80:	0fc4      	lsrs	r4, r0, #31
 8002b82:	0028      	movs	r0, r5
 8002b84:	f000 f894 	bl	8002cb0 <__clzsi2>
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <__aeabi_i2d+0x5c>)
 8002b8a:	1a12      	subs	r2, r2, r0
 8002b8c:	280a      	cmp	r0, #10
 8002b8e:	dc16      	bgt.n	8002bbe <__aeabi_i2d+0x4a>
 8002b90:	0003      	movs	r3, r0
 8002b92:	002e      	movs	r6, r5
 8002b94:	3315      	adds	r3, #21
 8002b96:	409e      	lsls	r6, r3
 8002b98:	230b      	movs	r3, #11
 8002b9a:	1a18      	subs	r0, r3, r0
 8002b9c:	40c5      	lsrs	r5, r0
 8002b9e:	0552      	lsls	r2, r2, #21
 8002ba0:	032d      	lsls	r5, r5, #12
 8002ba2:	0b2d      	lsrs	r5, r5, #12
 8002ba4:	0d53      	lsrs	r3, r2, #21
 8002ba6:	e003      	b.n	8002bb0 <__aeabi_i2d+0x3c>
 8002ba8:	2400      	movs	r4, #0
 8002baa:	2300      	movs	r3, #0
 8002bac:	2500      	movs	r5, #0
 8002bae:	2600      	movs	r6, #0
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	432b      	orrs	r3, r5
 8002bb4:	07e4      	lsls	r4, r4, #31
 8002bb6:	4323      	orrs	r3, r4
 8002bb8:	0030      	movs	r0, r6
 8002bba:	0019      	movs	r1, r3
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	380b      	subs	r0, #11
 8002bc0:	4085      	lsls	r5, r0
 8002bc2:	0552      	lsls	r2, r2, #21
 8002bc4:	032d      	lsls	r5, r5, #12
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	0b2d      	lsrs	r5, r5, #12
 8002bca:	0d53      	lsrs	r3, r2, #21
 8002bcc:	e7f0      	b.n	8002bb0 <__aeabi_i2d+0x3c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	0000041e 	.word	0x0000041e

08002bd4 <__aeabi_ui2d>:
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	1e04      	subs	r4, r0, #0
 8002bd8:	d010      	beq.n	8002bfc <__aeabi_ui2d+0x28>
 8002bda:	f000 f869 	bl	8002cb0 <__clzsi2>
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <__aeabi_ui2d+0x48>)
 8002be0:	1a1b      	subs	r3, r3, r0
 8002be2:	280a      	cmp	r0, #10
 8002be4:	dc11      	bgt.n	8002c0a <__aeabi_ui2d+0x36>
 8002be6:	220b      	movs	r2, #11
 8002be8:	0021      	movs	r1, r4
 8002bea:	1a12      	subs	r2, r2, r0
 8002bec:	40d1      	lsrs	r1, r2
 8002bee:	3015      	adds	r0, #21
 8002bf0:	030a      	lsls	r2, r1, #12
 8002bf2:	055b      	lsls	r3, r3, #21
 8002bf4:	4084      	lsls	r4, r0
 8002bf6:	0b12      	lsrs	r2, r2, #12
 8002bf8:	0d5b      	lsrs	r3, r3, #21
 8002bfa:	e001      	b.n	8002c00 <__aeabi_ui2d+0x2c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	4313      	orrs	r3, r2
 8002c04:	0020      	movs	r0, r4
 8002c06:	0019      	movs	r1, r3
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	0022      	movs	r2, r4
 8002c0c:	380b      	subs	r0, #11
 8002c0e:	4082      	lsls	r2, r0
 8002c10:	055b      	lsls	r3, r3, #21
 8002c12:	0312      	lsls	r2, r2, #12
 8002c14:	2400      	movs	r4, #0
 8002c16:	0b12      	lsrs	r2, r2, #12
 8002c18:	0d5b      	lsrs	r3, r3, #21
 8002c1a:	e7f1      	b.n	8002c00 <__aeabi_ui2d+0x2c>
 8002c1c:	0000041e 	.word	0x0000041e

08002c20 <__aeabi_f2d>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	0043      	lsls	r3, r0, #1
 8002c24:	0246      	lsls	r6, r0, #9
 8002c26:	0fc4      	lsrs	r4, r0, #31
 8002c28:	20fe      	movs	r0, #254	; 0xfe
 8002c2a:	0e1b      	lsrs	r3, r3, #24
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	0a75      	lsrs	r5, r6, #9
 8002c30:	4208      	tst	r0, r1
 8002c32:	d00c      	beq.n	8002c4e <__aeabi_f2d+0x2e>
 8002c34:	22e0      	movs	r2, #224	; 0xe0
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4694      	mov	ip, r2
 8002c3a:	076d      	lsls	r5, r5, #29
 8002c3c:	0b36      	lsrs	r6, r6, #12
 8002c3e:	4463      	add	r3, ip
 8002c40:	051b      	lsls	r3, r3, #20
 8002c42:	4333      	orrs	r3, r6
 8002c44:	07e4      	lsls	r4, r4, #31
 8002c46:	4323      	orrs	r3, r4
 8002c48:	0028      	movs	r0, r5
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <__aeabi_f2d+0x5c>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d01b      	beq.n	8002c8e <__aeabi_f2d+0x6e>
 8002c56:	0028      	movs	r0, r5
 8002c58:	f000 f82a 	bl	8002cb0 <__clzsi2>
 8002c5c:	280a      	cmp	r0, #10
 8002c5e:	dc1c      	bgt.n	8002c9a <__aeabi_f2d+0x7a>
 8002c60:	230b      	movs	r3, #11
 8002c62:	002e      	movs	r6, r5
 8002c64:	1a1b      	subs	r3, r3, r0
 8002c66:	40de      	lsrs	r6, r3
 8002c68:	0003      	movs	r3, r0
 8002c6a:	3315      	adds	r3, #21
 8002c6c:	409d      	lsls	r5, r3
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <__aeabi_f2d+0x88>)
 8002c70:	0336      	lsls	r6, r6, #12
 8002c72:	1a12      	subs	r2, r2, r0
 8002c74:	0552      	lsls	r2, r2, #21
 8002c76:	0b36      	lsrs	r6, r6, #12
 8002c78:	0d53      	lsrs	r3, r2, #21
 8002c7a:	e7e1      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c7c:	2d00      	cmp	r5, #0
 8002c7e:	d009      	beq.n	8002c94 <__aeabi_f2d+0x74>
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0b36      	lsrs	r6, r6, #12
 8002c84:	0312      	lsls	r2, r2, #12
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <__aeabi_f2d+0x8c>)
 8002c88:	076d      	lsls	r5, r5, #29
 8002c8a:	4316      	orrs	r6, r2
 8002c8c:	e7d8      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2600      	movs	r6, #0
 8002c92:	e7d5      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c94:	2600      	movs	r6, #0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <__aeabi_f2d+0x8c>)
 8002c98:	e7d2      	b.n	8002c40 <__aeabi_f2d+0x20>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	3b0b      	subs	r3, #11
 8002c9e:	409d      	lsls	r5, r3
 8002ca0:	002e      	movs	r6, r5
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	e7e3      	b.n	8002c6e <__aeabi_f2d+0x4e>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	00000389 	.word	0x00000389
 8002cac:	000007ff 	.word	0x000007ff

08002cb0 <__clzsi2>:
 8002cb0:	211c      	movs	r1, #28
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	4298      	cmp	r0, r3
 8002cb8:	d301      	bcc.n	8002cbe <__clzsi2+0xe>
 8002cba:	0c00      	lsrs	r0, r0, #16
 8002cbc:	3910      	subs	r1, #16
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	d301      	bcc.n	8002cc8 <__clzsi2+0x18>
 8002cc4:	0a00      	lsrs	r0, r0, #8
 8002cc6:	3908      	subs	r1, #8
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	4298      	cmp	r0, r3
 8002ccc:	d301      	bcc.n	8002cd2 <__clzsi2+0x22>
 8002cce:	0900      	lsrs	r0, r0, #4
 8002cd0:	3904      	subs	r1, #4
 8002cd2:	a202      	add	r2, pc, #8	; (adr r2, 8002cdc <__clzsi2+0x2c>)
 8002cd4:	5c10      	ldrb	r0, [r2, r0]
 8002cd6:	1840      	adds	r0, r0, r1
 8002cd8:	4770      	bx	lr
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	02020304 	.word	0x02020304
 8002ce0:	01010101 	.word	0x01010101
	...

08002cec <__clzdi2>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	2900      	cmp	r1, #0
 8002cf0:	d103      	bne.n	8002cfa <__clzdi2+0xe>
 8002cf2:	f7ff ffdd 	bl	8002cb0 <__clzsi2>
 8002cf6:	3020      	adds	r0, #32
 8002cf8:	e002      	b.n	8002d00 <__clzdi2+0x14>
 8002cfa:	0008      	movs	r0, r1
 8002cfc:	f7ff ffd8 	bl	8002cb0 <__clzsi2>
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)

08002d04 <null_ptr_check>:
/*****************************INTERNAL APIs***********************************************/
static int8_t null_ptr_check(const struct bma400_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d00a      	beq.n	8002d1e <null_ptr_check+0x1a>
 8002d08:	68c3      	ldr	r3, [r0, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <null_ptr_check+0x1a>
 8002d0e:	6903      	ldr	r3, [r0, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <null_ptr_check+0x1a>
 8002d14:	6940      	ldr	r0, [r0, #20]
 8002d16:	4243      	negs	r3, r0
 8002d18:	4158      	adcs	r0, r3
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8002d1a:	4240      	negs	r0, r0
        /* Device structure is fine */
        rslt = BMA400_OK;
    }

    return rslt;
}
 8002d1c:	4770      	bx	lr
        rslt = BMA400_E_NULL_PTR;
 8002d1e:	2001      	movs	r0, #1
 8002d20:	e7fb      	b.n	8002d1a <null_ptr_check+0x16>

08002d22 <check_mapped_interrupts>:
    }
}

static void check_mapped_interrupts(uint8_t int_1_map, uint8_t int_2_map, enum bma400_int_chan *int_map)
{
    if ((int_1_map == BMA400_ENABLE) && (int_2_map == BMA400_DISABLE))
 8002d22:	2801      	cmp	r0, #1
 8002d24:	d103      	bne.n	8002d2e <check_mapped_interrupts+0xc>
 8002d26:	2900      	cmp	r1, #0
 8002d28:	d107      	bne.n	8002d3a <check_mapped_interrupts+0x18>
    {
        /* INT 1 mapped INT 2 not mapped */
        *int_map = BMA400_INT_CHANNEL_1;
 8002d2a:	7010      	strb	r0, [r2, #0]
    if ((int_1_map == BMA400_DISABLE) && (int_2_map == BMA400_DISABLE))
    {
        /* INT 1 ,INT 2 not mapped */
        *int_map = BMA400_UNMAP_INT_PIN;
    }
}
 8002d2c:	4770      	bx	lr
        *int_map = BMA400_UNMAP_INT_PIN;
 8002d2e:	2300      	movs	r3, #0
    if ((int_1_map == BMA400_DISABLE) && (int_2_map == BMA400_ENABLE))
 8002d30:	2901      	cmp	r1, #1
 8002d32:	d100      	bne.n	8002d36 <check_mapped_interrupts+0x14>
        *int_map = BMA400_INT_CHANNEL_2;
 8002d34:	2302      	movs	r3, #2
        *int_map = BMA400_UNMAP_INT_PIN;
 8002d36:	7013      	strb	r3, [r2, #0]
 8002d38:	e7f8      	b.n	8002d2c <check_mapped_interrupts+0xa>
        *int_map = BMA400_MAP_BOTH_INT_PINS;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e7fb      	b.n	8002d36 <check_mapped_interrupts+0x14>

08002d3e <bma400_set_regs>:
{
 8002d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d40:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 8002d42:	0018      	movs	r0, r3
{
 8002d44:	0016      	movs	r6, r2
 8002d46:	001f      	movs	r7, r3
 8002d48:	9101      	str	r1, [sp, #4]
    rslt = null_ptr_check(dev);
 8002d4a:	f7ff ffdb 	bl	8002d04 <null_ptr_check>
 8002d4e:	1e04      	subs	r4, r0, #0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8002d50:	d121      	bne.n	8002d96 <bma400_set_regs+0x58>
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01e      	beq.n	8002d96 <bma400_set_regs+0x58>
        if (len == 1)
 8002d58:	2e01      	cmp	r6, #1
 8002d5a:	d109      	bne.n	8002d70 <bma400_set_regs+0x32>
            rslt = dev->write(dev->dev_id, reg_addr, reg_data, len);
 8002d5c:	7878      	ldrb	r0, [r7, #1]
 8002d5e:	0033      	movs	r3, r6
 8002d60:	0029      	movs	r1, r5
 8002d62:	693f      	ldr	r7, [r7, #16]
 8002d64:	9a01      	ldr	r2, [sp, #4]
 8002d66:	47b8      	blx	r7
            if (rslt != BMA400_OK)
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d117      	bne.n	8002d9c <bma400_set_regs+0x5e>
}
 8002d6c:	0020      	movs	r0, r4
 8002d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (len > 1)
 8002d70:	2e01      	cmp	r6, #1
 8002d72:	d9fb      	bls.n	8002d6c <bma400_set_regs+0x2e>
 8002d74:	1976      	adds	r6, r6, r5
 8002d76:	b2f6      	uxtb	r6, r6
                rslt = dev->write(dev->dev_id, reg_addr, &reg_data[count], 1);
 8002d78:	2301      	movs	r3, #1
 8002d7a:	0029      	movs	r1, r5
 8002d7c:	693c      	ldr	r4, [r7, #16]
 8002d7e:	7878      	ldrb	r0, [r7, #1]
 8002d80:	9a01      	ldr	r2, [sp, #4]
 8002d82:	47a0      	blx	r4
            for (count = 0; count < len; count++)
 8002d84:	9b01      	ldr	r3, [sp, #4]
                reg_addr++;
 8002d86:	3501      	adds	r5, #1
            for (count = 0; count < len; count++)
 8002d88:	3301      	adds	r3, #1
                reg_addr++;
 8002d8a:	b2ed      	uxtb	r5, r5
                rslt = dev->write(dev->dev_id, reg_addr, &reg_data[count], 1);
 8002d8c:	0004      	movs	r4, r0
            for (count = 0; count < len; count++)
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	42b5      	cmp	r5, r6
 8002d92:	d1f1      	bne.n	8002d78 <bma400_set_regs+0x3a>
 8002d94:	e7ea      	b.n	8002d6c <bma400_set_regs+0x2e>
        rslt = BMA400_E_NULL_PTR;
 8002d96:	2401      	movs	r4, #1
                rslt = BMA400_E_COM_FAIL;
 8002d98:	4264      	negs	r4, r4
 8002d9a:	e7e7      	b.n	8002d6c <bma400_set_regs+0x2e>
 8002d9c:	2402      	movs	r4, #2
 8002d9e:	e7fb      	b.n	8002d98 <bma400_set_regs+0x5a>

08002da0 <bma400_get_regs>:
{
 8002da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
    uint16_t temp_len = len + dev->dummy_byte;
 8002da6:	60fa      	str	r2, [r7, #12]
{
 8002da8:	6079      	str	r1, [r7, #4]
 8002daa:	001c      	movs	r4, r3
    uint16_t temp_len = len + dev->dummy_byte;
 8002dac:	7a1b      	ldrb	r3, [r3, #8]
{
 8002dae:	0005      	movs	r5, r0
    uint16_t temp_len = len + dev->dummy_byte;
 8002db0:	18d3      	adds	r3, r2, r3
    uint8_t temp_buff[temp_len];
 8002db2:	466a      	mov	r2, sp
    uint16_t temp_len = len + dev->dummy_byte;
 8002db4:	60bb      	str	r3, [r7, #8]
    uint8_t temp_buff[temp_len];
 8002db6:	3307      	adds	r3, #7
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	469d      	mov	sp, r3
    rslt = null_ptr_check(dev);
 8002dc0:	0020      	movs	r0, r4
    uint8_t temp_buff[temp_len];
 8002dc2:	466e      	mov	r6, sp
    rslt = null_ptr_check(dev);
 8002dc4:	f7ff ff9e 	bl	8002d04 <null_ptr_check>
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d121      	bne.n	8002e10 <bma400_get_regs+0x70>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01e      	beq.n	8002e10 <bma400_get_regs+0x70>
        if (dev->intf != BMA400_I2C_INTF)
 8002dd2:	78a3      	ldrb	r3, [r4, #2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d001      	beq.n	8002ddc <bma400_get_regs+0x3c>
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	431d      	orrs	r5, r3
        rslt = dev->read(dev->dev_id, reg_addr, temp_buff, temp_len);
 8002ddc:	0029      	movs	r1, r5
 8002dde:	0032      	movs	r2, r6
 8002de0:	7860      	ldrb	r0, [r4, #1]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68e5      	ldr	r5, [r4, #12]
 8002de6:	47a8      	blx	r5
        if (rslt == BMA400_OK)
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d00f      	beq.n	8002e0c <bma400_get_regs+0x6c>
            rslt = BMA400_E_COM_FAIL;
 8002dec:	2002      	movs	r0, #2
        rslt = BMA400_E_NULL_PTR;
 8002dee:	4240      	negs	r0, r0
 8002df0:	e009      	b.n	8002e06 <bma400_get_regs+0x66>
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8002df2:	7a22      	ldrb	r2, [r4, #8]
 8002df4:	18f1      	adds	r1, r6, r3
 8002df6:	5c8a      	ldrb	r2, [r1, r2]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	54ca      	strb	r2, [r1, r3]
            for (index = 0; index < len; index++)
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4291      	cmp	r1, r2
 8002e04:	d8f5      	bhi.n	8002df2 <bma400_get_regs+0x52>
}
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b005      	add	sp, #20
 8002e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	e7f6      	b.n	8002dfe <bma400_get_regs+0x5e>
        rslt = BMA400_E_NULL_PTR;
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7ec      	b.n	8002dee <bma400_get_regs+0x4e>

08002e14 <bma400_init>:
{
 8002e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t chip_id = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	466a      	mov	r2, sp
{
 8002e1a:	0005      	movs	r5, r0
    uint8_t chip_id = 0;
 8002e1c:	71d3      	strb	r3, [r2, #7]
    rslt = null_ptr_check(dev);
 8002e1e:	f7ff ff71 	bl	8002d04 <null_ptr_check>
 8002e22:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002e24:	d11d      	bne.n	8002e62 <bma400_init+0x4e>
        dev->delay_ms(5);
 8002e26:	696b      	ldr	r3, [r5, #20]
 8002e28:	2005      	movs	r0, #5
 8002e2a:	4798      	blx	r3
        if (dev->intf == BMA400_SPI_INTF)
 8002e2c:	78ab      	ldrb	r3, [r5, #2]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <bma400_init+0x52>
            dev->dummy_byte = 1;
 8002e32:	2201      	movs	r2, #1
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002e34:	4669      	mov	r1, sp
 8002e36:	0020      	movs	r0, r4
 8002e38:	002b      	movs	r3, r5
            dev->dummy_byte = 1;
 8002e3a:	722a      	strb	r2, [r5, #8]
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002e3c:	3107      	adds	r1, #7
 8002e3e:	f7ff ffaf 	bl	8002da0 <bma400_get_regs>
 8002e42:	1e04      	subs	r4, r0, #0
        if (rslt == BMA400_OK)
 8002e44:	d10d      	bne.n	8002e62 <bma400_init+0x4e>
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002e46:	4669      	mov	r1, sp
 8002e48:	002b      	movs	r3, r5
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	3107      	adds	r1, #7
 8002e50:	f7ff ffa6 	bl	8002da0 <bma400_get_regs>
 8002e54:	1e04      	subs	r4, r0, #0
            if (rslt == BMA400_OK)
 8002e56:	d104      	bne.n	8002e62 <bma400_init+0x4e>
                if (chip_id == BMA400_CHIP_ID)
 8002e58:	466b      	mov	r3, sp
 8002e5a:	79db      	ldrb	r3, [r3, #7]
 8002e5c:	2b90      	cmp	r3, #144	; 0x90
 8002e5e:	d104      	bne.n	8002e6a <bma400_init+0x56>
                    dev->chip_id = chip_id;
 8002e60:	702b      	strb	r3, [r5, #0]
}
 8002e62:	0020      	movs	r0, r4
 8002e64:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            dev->dummy_byte = 0;
 8002e66:	722c      	strb	r4, [r5, #8]
        if (rslt == BMA400_OK)
 8002e68:	e7ed      	b.n	8002e46 <bma400_init+0x32>
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8002e6a:	2403      	movs	r4, #3
 8002e6c:	4264      	negs	r4, r4
 8002e6e:	e7f8      	b.n	8002e62 <bma400_init+0x4e>

08002e70 <set_accel_conf>:
{
 8002e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e72:	000e      	movs	r6, r1
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8002e74:	ac01      	add	r4, sp, #4
 8002e76:	2203      	movs	r2, #3
 8002e78:	491d      	ldr	r1, [pc, #116]	; (8002ef0 <set_accel_conf+0x80>)
{
 8002e7a:	0005      	movs	r5, r0
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	f013 f8b5 	bl	8015fec <memcpy>
    rslt = bma400_get_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8002e82:	0033      	movs	r3, r6
 8002e84:	2203      	movs	r2, #3
 8002e86:	0021      	movs	r1, r4
 8002e88:	2019      	movs	r0, #25
 8002e8a:	f7ff ff89 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d12c      	bne.n	8002eec <set_accel_conf+0x7c>
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002e92:	227f      	movs	r2, #127	; 0x7f
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8002e94:	2160      	movs	r1, #96	; 0x60
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002e96:	7823      	ldrb	r3, [r4, #0]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8002e98:	3019      	adds	r0, #25
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	796a      	ldrb	r2, [r5, #5]
 8002e9e:	01d2      	lsls	r2, r2, #7
 8002ea0:	4313      	orrs	r3, r2
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8002ea2:	792a      	ldrb	r2, [r5, #4]
 8002ea4:	438b      	bics	r3, r1
 8002ea6:	0152      	lsls	r2, r2, #5
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	7023      	strb	r3, [r4, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8002eae:	233f      	movs	r3, #63	; 0x3f
 8002eb0:	7862      	ldrb	r2, [r4, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8002eb2:	3930      	subs	r1, #48	; 0x30
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	786b      	ldrb	r3, [r5, #1]
 8002eb8:	019b      	lsls	r3, r3, #6
 8002eba:	431a      	orrs	r2, r3
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8002ebc:	78eb      	ldrb	r3, [r5, #3]
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	431a      	orrs	r2, r3
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8002ec6:	782b      	ldrb	r3, [r5, #0]
 8002ec8:	3921      	subs	r1, #33	; 0x21
 8002eca:	400b      	ands	r3, r1
 8002ecc:	438a      	bics	r2, r1
 8002ece:	431a      	orrs	r2, r3
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8002ed0:	78ab      	ldrb	r3, [r5, #2]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8002ed2:	7062      	strb	r2, [r4, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8002ed4:	78a2      	ldrb	r2, [r4, #2]
 8002ed6:	3903      	subs	r1, #3
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	438a      	bics	r2, r1
 8002edc:	400b      	ands	r3, r1
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	70a3      	strb	r3, [r4, #2]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	0033      	movs	r3, r6
 8002ee6:	0021      	movs	r1, r4
 8002ee8:	f7ff ff29 	bl	8002d3e <bma400_set_regs>
}
 8002eec:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	08018840 	.word	0x08018840

08002ef4 <bma400_soft_reset>:
{
 8002ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t data = BMA400_SOFT_RESET_CMD;
 8002ef6:	466b      	mov	r3, sp
 8002ef8:	1dde      	adds	r6, r3, #7
 8002efa:	23b6      	movs	r3, #182	; 0xb6
{
 8002efc:	0005      	movs	r5, r0
    uint8_t data = BMA400_SOFT_RESET_CMD;
 8002efe:	7033      	strb	r3, [r6, #0]
    rslt = null_ptr_check(dev);
 8002f00:	f7ff ff00 	bl	8002d04 <null_ptr_check>
 8002f04:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002f06:	d115      	bne.n	8002f34 <bma400_soft_reset+0x40>
        rslt = bma400_set_regs(BMA400_COMMAND_REG_ADDR, &data, 1, dev);
 8002f08:	002b      	movs	r3, r5
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	0031      	movs	r1, r6
 8002f0e:	207e      	movs	r0, #126	; 0x7e
 8002f10:	f7ff ff15 	bl	8002d3e <bma400_set_regs>
        dev->delay_ms(BMA400_SOFT_RESET_DELAY_MS);
 8002f14:	696b      	ldr	r3, [r5, #20]
        rslt = bma400_set_regs(BMA400_COMMAND_REG_ADDR, &data, 1, dev);
 8002f16:	0004      	movs	r4, r0
        dev->delay_ms(BMA400_SOFT_RESET_DELAY_MS);
 8002f18:	2005      	movs	r0, #5
 8002f1a:	4798      	blx	r3
        if ((rslt == BMA400_OK) && (dev->intf == BMA400_SPI_INTF))
 8002f1c:	2c00      	cmp	r4, #0
 8002f1e:	d109      	bne.n	8002f34 <bma400_soft_reset+0x40>
 8002f20:	78ab      	ldrb	r3, [r5, #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <bma400_soft_reset+0x40>
            rslt = bma400_get_regs(0x7F, &data, 1, dev);
 8002f26:	002b      	movs	r3, r5
 8002f28:	2201      	movs	r2, #1
 8002f2a:	0031      	movs	r1, r6
 8002f2c:	207f      	movs	r0, #127	; 0x7f
 8002f2e:	f7ff ff37 	bl	8002da0 <bma400_get_regs>
 8002f32:	0004      	movs	r4, r0
}
 8002f34:	0020      	movs	r0, r4
 8002f36:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08002f38 <bma400_set_power_mode>:
{
 8002f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t reg_data = 0;
 8002f3a:	466b      	mov	r3, sp
 8002f3c:	1dde      	adds	r6, r3, #7
 8002f3e:	2300      	movs	r3, #0
{
 8002f40:	0007      	movs	r7, r0
    rslt = null_ptr_check(dev);
 8002f42:	0008      	movs	r0, r1
{
 8002f44:	000d      	movs	r5, r1
    uint8_t reg_data = 0;
 8002f46:	7033      	strb	r3, [r6, #0]
    rslt = null_ptr_check(dev);
 8002f48:	f7ff fedc 	bl	8002d04 <null_ptr_check>
 8002f4c:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002f4e:	d11a      	bne.n	8002f86 <bma400_set_power_mode+0x4e>
        rslt = bma400_get_regs(BMA400_ACCEL_CONFIG_0_ADDR, &reg_data, 1, dev);
 8002f50:	002b      	movs	r3, r5
 8002f52:	2201      	movs	r2, #1
 8002f54:	0031      	movs	r1, r6
 8002f56:	2019      	movs	r0, #25
 8002f58:	f7ff ff22 	bl	8002da0 <bma400_get_regs>
 8002f5c:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8002f5e:	d112      	bne.n	8002f86 <bma400_set_power_mode+0x4e>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8002f60:	2203      	movs	r2, #3
 8002f62:	7833      	ldrb	r3, [r6, #0]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, &reg_data, 1, dev);
 8002f64:	0031      	movs	r1, r6
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8002f66:	4393      	bics	r3, r2
 8002f68:	403a      	ands	r2, r7
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	7033      	strb	r3, [r6, #0]
        rslt = bma400_set_regs(BMA400_ACCEL_CONFIG_0_ADDR, &reg_data, 1, dev);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	002b      	movs	r3, r5
 8002f72:	2019      	movs	r0, #25
 8002f74:	f7ff fee3 	bl	8002d3e <bma400_set_regs>
 8002f78:	696b      	ldr	r3, [r5, #20]
 8002f7a:	0004      	movs	r4, r0
            dev->delay_ms(40);
 8002f7c:	2028      	movs	r0, #40	; 0x28
        if (power_mode == BMA400_LOW_POWER_MODE)
 8002f7e:	2f01      	cmp	r7, #1
 8002f80:	d000      	beq.n	8002f84 <bma400_set_power_mode+0x4c>
            dev->delay_ms(10); /* TBC */
 8002f82:	200a      	movs	r0, #10
 8002f84:	4798      	blx	r3
}
 8002f86:	0020      	movs	r0, r4
 8002f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08002f8c <bma400_get_accel_data>:
{
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	0006      	movs	r6, r0
 8002f90:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 8002f92:	0010      	movs	r0, r2
{
 8002f94:	000c      	movs	r4, r1
 8002f96:	0017      	movs	r7, r2
    rslt = null_ptr_check(dev);
 8002f98:	f7ff feb4 	bl	8002d04 <null_ptr_check>
    if ((rslt == BMA400_OK) || (accel != NULL))
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d001      	beq.n	8002fa4 <bma400_get_accel_data+0x18>
 8002fa0:	2c00      	cmp	r4, #0
 8002fa2:	d051      	beq.n	8003048 <bma400_get_accel_data+0xbc>
    uint8_t data_array[9] = { 0 };
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	a802      	add	r0, sp, #8
 8002faa:	ad01      	add	r5, sp, #4
 8002fac:	9101      	str	r1, [sp, #4]
 8002fae:	f013 f826 	bl	8015ffe <memset>
    if (data_sel == BMA400_DATA_ONLY)
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	d12b      	bne.n	800300e <bma400_get_accel_data+0x82>
        rslt = bma400_get_regs(BMA400_ACCEL_DATA_ADDR, data_array, 6, dev);
 8002fb6:	003b      	movs	r3, r7
 8002fb8:	2206      	movs	r2, #6
        rslt = bma400_get_regs(BMA400_ACCEL_DATA_ADDR, data_array, 9, dev);
 8002fba:	0029      	movs	r1, r5
 8002fbc:	2004      	movs	r0, #4
 8002fbe:	f7ff feef 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d121      	bne.n	800300a <bma400_get_accel_data+0x7e>
        if (accel->x > 2047)
 8002fc6:	2180      	movs	r1, #128	; 0x80
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002fc8:	786a      	ldrb	r2, [r5, #1]
        lsb = data_array[0];
 8002fca:	782b      	ldrb	r3, [r5, #0]
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002fcc:	0212      	lsls	r2, r2, #8
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	b21b      	sxth	r3, r3
        if (accel->x > 2047)
 8002fd4:	0109      	lsls	r1, r1, #4
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	da1e      	bge.n	8003018 <bma400_get_accel_data+0x8c>
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002fda:	8023      	strh	r3, [r4, #0]
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002fdc:	78ea      	ldrb	r2, [r5, #3]
 8002fde:	78ab      	ldrb	r3, [r5, #2]
 8002fe0:	0212      	lsls	r2, r2, #8
 8002fe2:	4313      	orrs	r3, r2
        if (accel->y > 2047)
 8002fe4:	2280      	movs	r2, #128	; 0x80
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002fe6:	b21b      	sxth	r3, r3
        if (accel->y > 2047)
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	4293      	cmp	r3, r2
 8002fec:	da18      	bge.n	8003020 <bma400_get_accel_data+0x94>
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002fee:	796a      	ldrb	r2, [r5, #5]
            accel->y = accel->y - 4096;
 8002ff0:	8063      	strh	r3, [r4, #2]
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002ff2:	792b      	ldrb	r3, [r5, #4]
 8002ff4:	0212      	lsls	r2, r2, #8
 8002ff6:	4313      	orrs	r3, r2
        if (accel->z > 2047)
 8002ff8:	2280      	movs	r2, #128	; 0x80
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8002ffa:	b21b      	sxth	r3, r3
        if (accel->z > 2047)
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	4293      	cmp	r3, r2
 8003000:	da11      	bge.n	8003026 <bma400_get_accel_data+0x9a>
            accel->z = accel->z - 4096;
 8003002:	80a3      	strh	r3, [r4, #4]
        if (data_sel == BMA400_DATA_ONLY)
 8003004:	2e00      	cmp	r6, #0
 8003006:	d111      	bne.n	800302c <bma400_get_accel_data+0xa0>
            accel->sensortime = 0;
 8003008:	60a6      	str	r6, [r4, #8]
}
 800300a:	b005      	add	sp, #20
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 800300e:	2e01      	cmp	r6, #1
 8003010:	d117      	bne.n	8003042 <bma400_get_accel_data+0xb6>
        rslt = bma400_get_regs(BMA400_ACCEL_DATA_ADDR, data_array, 9, dev);
 8003012:	003b      	movs	r3, r7
 8003014:	2209      	movs	r2, #9
 8003016:	e7d0      	b.n	8002fba <bma400_get_accel_data+0x2e>
            accel->x = accel->x - 4096;
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <bma400_get_accel_data+0xc0>)
 800301a:	18d2      	adds	r2, r2, r3
 800301c:	8022      	strh	r2, [r4, #0]
 800301e:	e7dd      	b.n	8002fdc <bma400_get_accel_data+0x50>
            accel->y = accel->y - 4096;
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <bma400_get_accel_data+0xc0>)
 8003022:	189b      	adds	r3, r3, r2
 8003024:	e7e3      	b.n	8002fee <bma400_get_accel_data+0x62>
            accel->z = accel->z - 4096;
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <bma400_get_accel_data+0xc0>)
 8003028:	189b      	adds	r3, r3, r2
 800302a:	e7ea      	b.n	8003002 <bma400_get_accel_data+0x76>
        if (data_sel == BMA400_DATA_SENSOR_TIME)
 800302c:	2e01      	cmp	r6, #1
 800302e:	d1ec      	bne.n	800300a <bma400_get_accel_data+0x7e>
            time_2 = ((uint32_t)data_array[8] << 16);
 8003030:	7a2b      	ldrb	r3, [r5, #8]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8003032:	79aa      	ldrb	r2, [r5, #6]
            time_2 = ((uint32_t)data_array[8] << 16);
 8003034:	041b      	lsls	r3, r3, #16
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8003036:	189b      	adds	r3, r3, r2
            time_1 = ((uint16_t)data_array[7] << 8);
 8003038:	79ea      	ldrb	r2, [r5, #7]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 800303a:	0212      	lsls	r2, r2, #8
 800303c:	189b      	adds	r3, r3, r2
 800303e:	60a3      	str	r3, [r4, #8]
 8003040:	e7e3      	b.n	800300a <bma400_get_accel_data+0x7e>
        rslt = BMA400_E_INVALID_CONFIG;
 8003042:	2004      	movs	r0, #4
        rslt = BMA400_E_NULL_PTR;
 8003044:	4240      	negs	r0, r0
 8003046:	e7e0      	b.n	800300a <bma400_get_accel_data+0x7e>
 8003048:	2001      	movs	r0, #1
 800304a:	e7fb      	b.n	8003044 <bma400_get_accel_data+0xb8>
 800304c:	fffff000 	.word	0xfffff000

08003050 <bma400_set_sensor_conf>:
{
 8003050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003052:	000f      	movs	r7, r1
    uint8_t data_array[3] = { 0 };
 8003054:	49b0      	ldr	r1, [pc, #704]	; (8003318 <bma400_set_sensor_conf+0x2c8>)
{
 8003056:	b087      	sub	sp, #28
 8003058:	0016      	movs	r6, r2
    uint8_t data_array[3] = { 0 };
 800305a:	3103      	adds	r1, #3
 800305c:	2202      	movs	r2, #2
{
 800305e:	0004      	movs	r4, r0
    uint8_t data_array[3] = { 0 };
 8003060:	a802      	add	r0, sp, #8
 8003062:	f012 ffc3 	bl	8015fec <memcpy>
 8003066:	2200      	movs	r2, #0
 8003068:	ab02      	add	r3, sp, #8
    rslt = null_ptr_check(dev);
 800306a:	0030      	movs	r0, r6
    uint8_t data_array[3] = { 0 };
 800306c:	709a      	strb	r2, [r3, #2]
    rslt = null_ptr_check(dev);
 800306e:	f7ff fe49 	bl	8002d04 <null_ptr_check>
 8003072:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003074:	d117      	bne.n	80030a6 <bma400_set_sensor_conf+0x56>
        rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003076:	0033      	movs	r3, r6
 8003078:	2203      	movs	r2, #3
 800307a:	2021      	movs	r0, #33	; 0x21
 800307c:	a902      	add	r1, sp, #8
 800307e:	f7ff fe8f 	bl	8002da0 <bma400_get_regs>
        if (rslt == BMA400_OK)
 8003082:	2800      	cmp	r0, #0
 8003084:	d10e      	bne.n	80030a4 <bma400_set_sensor_conf+0x54>
 8003086:	2114      	movs	r1, #20
 8003088:	434f      	muls	r7, r1
 800308a:	19e3      	adds	r3, r4, r7
 800308c:	9301      	str	r3, [sp, #4]
            for (idx = 0; idx < n_sett; idx++)
 800308e:	9b01      	ldr	r3, [sp, #4]
 8003090:	42a3      	cmp	r3, r4
 8003092:	d10b      	bne.n	80030ac <bma400_set_sensor_conf+0x5c>
            if (rslt == BMA400_OK)
 8003094:	2d00      	cmp	r5, #0
 8003096:	d106      	bne.n	80030a6 <bma400_set_sensor_conf+0x56>
                rslt = bma400_set_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003098:	0033      	movs	r3, r6
 800309a:	2203      	movs	r2, #3
 800309c:	2021      	movs	r0, #33	; 0x21
 800309e:	a902      	add	r1, sp, #8
 80030a0:	f7ff fe4d 	bl	8002d3e <bma400_set_regs>
 80030a4:	0005      	movs	r5, r0
}
 80030a6:	0028      	movs	r0, r5
 80030a8:	b007      	add	sp, #28
 80030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (conf[idx].type)
 80030ac:	7820      	ldrb	r0, [r4, #0]
 80030ae:	2806      	cmp	r0, #6
 80030b0:	d900      	bls.n	80030b4 <bma400_set_sensor_conf+0x64>
 80030b2:	e114      	b.n	80032de <bma400_set_sensor_conf+0x28e>
 80030b4:	f7fd f84e 	bl	8000154 <__gnu_thumb1_case_uhi>
 80030b8:	000700d6 	.word	0x000700d6
 80030bc:	0091005b 	.word	0x0091005b
 80030c0:	01920132 	.word	0x01920132
 80030c4:	01e4      	.short	0x01e4
    uint8_t reg_data[2] = { 0, 0 };
 80030c6:	2300      	movs	r3, #0
 80030c8:	af03      	add	r7, sp, #12
 80030ca:	803b      	strh	r3, [r7, #0]
    rslt = bma400_get_regs(BMA400_TAP_CONFIG_ADDR, reg_data, 2, dev);
 80030cc:	2202      	movs	r2, #2
 80030ce:	0033      	movs	r3, r6
 80030d0:	0039      	movs	r1, r7
 80030d2:	2057      	movs	r0, #87	; 0x57
 80030d4:	f7ff fe64 	bl	8002da0 <bma400_get_regs>
 80030d8:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80030da:	d000      	beq.n	80030de <bma400_set_sensor_conf+0x8e>
 80030dc:	e0ff      	b.n	80032de <bma400_set_sensor_conf+0x28e>
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 80030de:	2118      	movs	r1, #24
 80030e0:	78a3      	ldrb	r3, [r4, #2]
 80030e2:	783a      	ldrb	r2, [r7, #0]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	438a      	bics	r2, r1
 80030e8:	400b      	ands	r3, r1
 80030ea:	4313      	orrs	r3, r2
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 80030ec:	78e2      	ldrb	r2, [r4, #3]
 80030ee:	3911      	subs	r1, #17
 80030f0:	400a      	ands	r2, r1
 80030f2:	438b      	bics	r3, r1
 80030f4:	4313      	orrs	r3, r2
 80030f6:	703b      	strb	r3, [r7, #0]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 80030f8:	79a3      	ldrb	r3, [r4, #6]
 80030fa:	787a      	ldrb	r2, [r7, #1]
 80030fc:	3129      	adds	r1, #41	; 0x29
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	438a      	bics	r2, r1
 8003102:	400b      	ands	r3, r1
 8003104:	4313      	orrs	r3, r2
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8003106:	7962      	ldrb	r2, [r4, #5]
 8003108:	3924      	subs	r1, #36	; 0x24
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	400a      	ands	r2, r1
 800310e:	438b      	bics	r3, r1
 8003110:	4313      	orrs	r3, r2
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8003112:	7922      	ldrb	r2, [r4, #4]
 8003114:	3909      	subs	r1, #9
 8003116:	400a      	ands	r2, r1
 8003118:	438b      	bics	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	707b      	strb	r3, [r7, #1]
        rslt = bma400_set_regs(BMA400_TAP_CONFIG_ADDR, reg_data, 2, dev);
 800311e:	2202      	movs	r2, #2
 8003120:	0033      	movs	r3, r6
 8003122:	0039      	movs	r1, r7
 8003124:	2057      	movs	r0, #87	; 0x57
 8003126:	f7ff fe0a 	bl	8002d3e <bma400_set_regs>
 800312a:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 800312c:	d000      	beq.n	8003130 <bma400_set_sensor_conf+0xe0>
 800312e:	e0d6      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_TAP_INT_MAP, conf[idx].param.tap.int_chan);
 8003130:	79e3      	ldrb	r3, [r4, #7]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <bma400_set_sensor_conf+0xf4>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8003136:	ab02      	add	r3, sp, #8
 8003138:	789a      	ldrb	r2, [r3, #2]
 800313a:	2304      	movs	r3, #4
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 800313c:	4313      	orrs	r3, r2
 800313e:	aa02      	add	r2, sp, #8
 8003140:	7093      	strb	r3, [r2, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003142:	e0cb      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003144:	2b02      	cmp	r3, #2
 8003146:	d008      	beq.n	800315a <bma400_set_sensor_conf+0x10a>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <bma400_set_sensor_conf+0x114>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800314c:	2b03      	cmp	r3, #3
 800314e:	d000      	beq.n	8003152 <bma400_set_sensor_conf+0x102>
 8003150:	e0c4      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8003152:	ab02      	add	r3, sp, #8
 8003154:	789a      	ldrb	r2, [r3, #2]
 8003156:	2344      	movs	r3, #68	; 0x44
 8003158:	e002      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 800315a:	ab02      	add	r3, sp, #8
 800315c:	789a      	ldrb	r2, [r3, #2]
 800315e:	2340      	movs	r3, #64	; 0x40
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8003160:	4313      	orrs	r3, r2
 8003162:	e037      	b.n	80031d4 <bma400_set_sensor_conf+0x184>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8003164:	2244      	movs	r2, #68	; 0x44
 8003166:	ab02      	add	r3, sp, #8
 8003168:	789b      	ldrb	r3, [r3, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 800316a:	4393      	bics	r3, r2
 800316c:	e032      	b.n	80031d4 <bma400_set_sensor_conf+0x184>
                        rslt = set_activity_change_conf(&conf[idx].param.act_ch, dev);
 800316e:	78e2      	ldrb	r2, [r4, #3]
    data_array[0] = act_ch_set->act_ch_thres;
 8003170:	78a3      	ldrb	r3, [r4, #2]
 8003172:	ad02      	add	r5, sp, #8
 8003174:	712b      	strb	r3, [r5, #4]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8003176:	0153      	lsls	r3, r2, #5
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8003178:	220f      	movs	r2, #15
 800317a:	7960      	ldrb	r0, [r4, #5]
 800317c:	7921      	ldrb	r1, [r4, #4]
 800317e:	4002      	ands	r2, r0
 8003180:	4313      	orrs	r3, r2
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 8003182:	010a      	lsls	r2, r1, #4
 8003184:	2110      	movs	r1, #16
 8003186:	400a      	ands	r2, r1
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8003188:	4313      	orrs	r3, r2
 800318a:	716b      	strb	r3, [r5, #5]
    rslt = bma400_set_regs(BMA400_ACT_CH_CONFIG_0_ADDR, data_array, 2, dev);
 800318c:	2202      	movs	r2, #2
 800318e:	0033      	movs	r3, r6
 8003190:	2055      	movs	r0, #85	; 0x55
 8003192:	a903      	add	r1, sp, #12
 8003194:	f7ff fdd3 	bl	8002d3e <bma400_set_regs>
 8003198:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 800319a:	d000      	beq.n	800319e <bma400_set_sensor_conf+0x14e>
 800319c:	e09f      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_ACT_CH_INT_MAP, conf[idx].param.act_ch.int_chan);
 800319e:	79a3      	ldrb	r3, [r4, #6]
            if (int_map == BMA400_INT_CHANNEL_1)
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d103      	bne.n	80031ac <bma400_set_sensor_conf+0x15c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 80031a4:	ab02      	add	r3, sp, #8
 80031a6:	789a      	ldrb	r2, [r3, #2]
 80031a8:	2308      	movs	r3, #8
 80031aa:	e7c7      	b.n	800313c <bma400_set_sensor_conf+0xec>
            if (int_map == BMA400_INT_CHANNEL_2)
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d008      	beq.n	80031c2 <bma400_set_sensor_conf+0x172>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <bma400_set_sensor_conf+0x17c>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d000      	beq.n	80031ba <bma400_set_sensor_conf+0x16a>
 80031b8:	e090      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80031ba:	ab02      	add	r3, sp, #8
 80031bc:	789a      	ldrb	r2, [r3, #2]
 80031be:	2378      	movs	r3, #120	; 0x78
 80031c0:	e002      	b.n	80031c8 <bma400_set_sensor_conf+0x178>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80031c2:	ab02      	add	r3, sp, #8
 80031c4:	789a      	ldrb	r2, [r3, #2]
 80031c6:	2380      	movs	r3, #128	; 0x80
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80031c8:	425b      	negs	r3, r3
 80031ca:	e7c9      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 80031cc:	2277      	movs	r2, #119	; 0x77
 80031ce:	ab02      	add	r3, sp, #8
 80031d0:	789b      	ldrb	r3, [r3, #2]
 80031d2:	4013      	ands	r3, r2
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80031d4:	aa02      	add	r2, sp, #8
 80031d6:	7093      	strb	r3, [r2, #2]
 80031d8:	e081      	b.n	80032de <bma400_set_sensor_conf+0x28e>
    uint8_t data_array[11] = { 0 };
 80031da:	2207      	movs	r2, #7
 80031dc:	2100      	movs	r1, #0
 80031de:	a804      	add	r0, sp, #16
 80031e0:	f012 ff0d 	bl	8015ffe <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031e4:	2003      	movs	r0, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80031e6:	79a3      	ldrb	r3, [r4, #6]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031e8:	7ae1      	ldrb	r1, [r4, #11]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80031ea:	015b      	lsls	r3, r3, #5
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031ec:	4001      	ands	r1, r0
 80031ee:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80031f0:	79e1      	ldrb	r1, [r4, #7]
 80031f2:	300d      	adds	r0, #13
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80031f4:	7aa2      	ldrb	r2, [r4, #10]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80031f6:	0109      	lsls	r1, r1, #4
 80031f8:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80031fa:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80031fc:	3804      	subs	r0, #4
 80031fe:	0091      	lsls	r1, r2, #2
 8003200:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003202:	430b      	orrs	r3, r1
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8003204:	2102      	movs	r1, #2
    uint8_t data_array[11] = { 0 };
 8003206:	ad03      	add	r5, sp, #12
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003208:	702b      	strb	r3, [r5, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800320a:	7a23      	ldrb	r3, [r4, #8]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 800320c:	380b      	subs	r0, #11
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	400b      	ands	r3, r1
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8003212:	7a61      	ldrb	r1, [r4, #9]
 8003214:	4001      	ands	r1, r0
 8003216:	430b      	orrs	r3, r1
 8003218:	706b      	strb	r3, [r5, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 800321a:	78a3      	ldrb	r3, [r4, #2]
 800321c:	70ab      	strb	r3, [r5, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 800321e:	88a3      	ldrh	r3, [r4, #4]
 8003220:	0a19      	lsrs	r1, r3, #8
 8003222:	70e9      	strb	r1, [r5, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8003224:	712b      	strb	r3, [r5, #4]
    if (gen_int_set->ref_update == BMA400_MANUAL_UPDATE)
 8003226:	2a00      	cmp	r2, #0
 8003228:	d12d      	bne.n	8003286 <bma400_set_sensor_conf+0x236>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 800322a:	89a3      	ldrh	r3, [r4, #12]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 800322c:	0029      	movs	r1, r5
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 800322e:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	71ab      	strb	r3, [r5, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8003234:	89e3      	ldrh	r3, [r4, #14]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 8003236:	320b      	adds	r2, #11
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8003238:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	722b      	strb	r3, [r5, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 800323e:	8a23      	ldrh	r3, [r4, #16]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 8003240:	303e      	adds	r0, #62	; 0x3e
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003242:	726b      	strb	r3, [r5, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	72ab      	strb	r3, [r5, #10]
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 8003248:	0033      	movs	r3, r6
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 5, dev);
 800324a:	f7ff fd78 	bl	8002d3e <bma400_set_regs>
                        if (rslt == BMA400_OK)
 800324e:	2800      	cmp	r0, #0
 8003250:	d108      	bne.n	8003264 <bma400_set_sensor_conf+0x214>
                            map_int_pin(data_array, BMA400_GEN1_INT_MAP, conf[idx].param.gen_int.int_chan);
 8003252:	7ca3      	ldrb	r3, [r4, #18]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003254:	2b01      	cmp	r3, #1
 8003256:	d11b      	bne.n	8003290 <bma400_set_sensor_conf+0x240>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8003258:	ab02      	add	r3, sp, #8
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	2304      	movs	r3, #4
 800325e:	4313      	orrs	r3, r2
 8003260:	aa02      	add	r2, sp, #8
 8003262:	7013      	strb	r3, [r2, #0]
					   rslt = set_accel_conf(&conf[idx].param.accel, dev);
 8003264:	0031      	movs	r1, r6
 8003266:	1ca0      	adds	r0, r4, #2
 8003268:	f7ff fe02 	bl	8002e70 <set_accel_conf>
 800326c:	1e05      	subs	r5, r0, #0
					   if (rslt == BMA400_OK)
 800326e:	d136      	bne.n	80032de <bma400_set_sensor_conf+0x28e>
						   map_int_pin(data_array, BMA400_DATA_READY_INT_MAP, conf[idx].param.accel.int_chan);
 8003270:	7a23      	ldrb	r3, [r4, #8]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003272:	2b01      	cmp	r3, #1
 8003274:	d12c      	bne.n	80032d0 <bma400_set_sensor_conf+0x280>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8003276:	ab02      	add	r3, sp, #8
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	425b      	negs	r3, r3
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800327e:	4313      	orrs	r3, r2
 8003280:	aa02      	add	r2, sp, #8
 8003282:	7013      	strb	r3, [r2, #0]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003284:	e02a      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
        rslt = bma400_set_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 5, dev);
 8003286:	0033      	movs	r3, r6
 8003288:	2205      	movs	r2, #5
 800328a:	0029      	movs	r1, r5
 800328c:	203f      	movs	r0, #63	; 0x3f
 800328e:	e7dc      	b.n	800324a <bma400_set_sensor_conf+0x1fa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003290:	2b02      	cmp	r3, #2
 8003292:	d00c      	beq.n	80032ae <bma400_set_sensor_conf+0x25e>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003294:	2b00      	cmp	r3, #0
 8003296:	d011      	beq.n	80032bc <bma400_set_sensor_conf+0x26c>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003298:	2b03      	cmp	r3, #3
 800329a:	d1e3      	bne.n	8003264 <bma400_set_sensor_conf+0x214>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 800329c:	ab02      	add	r3, sp, #8
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	2304      	movs	r3, #4
 80032a2:	a902      	add	r1, sp, #8
 80032a4:	431a      	orrs	r2, r3
 80032a6:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032a8:	784a      	ldrb	r2, [r1, #1]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	e00e      	b.n	80032cc <bma400_set_sensor_conf+0x27c>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032ae:	ab02      	add	r3, sp, #8
 80032b0:	785a      	ldrb	r2, [r3, #1]
 80032b2:	2304      	movs	r3, #4
 80032b4:	4313      	orrs	r3, r2
 80032b6:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032b8:	7053      	strb	r3, [r2, #1]
 80032ba:	e7d3      	b.n	8003264 <bma400_set_sensor_conf+0x214>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 80032bc:	2204      	movs	r2, #4
 80032be:	ab02      	add	r3, sp, #8
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	4393      	bics	r3, r2
 80032c6:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 80032c8:	784b      	ldrb	r3, [r1, #1]
 80032ca:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80032cc:	000a      	movs	r2, r1
 80032ce:	e7f3      	b.n	80032b8 <bma400_set_sensor_conf+0x268>
            if (int_map == BMA400_INT_CHANNEL_2)
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d006      	beq.n	80032e2 <bma400_set_sensor_conf+0x292>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <bma400_set_sensor_conf+0x29e>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d012      	beq.n	8003302 <bma400_set_sensor_conf+0x2b2>
                        rslt = set_accel_conf(&conf[idx].param.accel, dev);
 80032dc:	2500      	movs	r5, #0
            for (idx = 0; idx < n_sett; idx++)
 80032de:	3414      	adds	r4, #20
 80032e0:	e6d5      	b.n	800308e <bma400_set_sensor_conf+0x3e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80032e2:	ab02      	add	r3, sp, #8
 80032e4:	785a      	ldrb	r2, [r3, #1]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	425b      	negs	r3, r3
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80032ea:	4313      	orrs	r3, r2
 80032ec:	e006      	b.n	80032fc <bma400_set_sensor_conf+0x2ac>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80032ee:	217f      	movs	r1, #127	; 0x7f
 80032f0:	ab02      	add	r3, sp, #8
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	400b      	ands	r3, r1
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80032fc:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80032fe:	7053      	strb	r3, [r2, #1]
 8003300:	e7ed      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8003302:	ab02      	add	r3, sp, #8
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	425b      	negs	r3, r3
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800330a:	431a      	orrs	r2, r3
 800330c:	a902      	add	r1, sp, #8
 800330e:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003310:	784a      	ldrb	r2, [r1, #1]
 8003312:	4313      	orrs	r3, r2
 8003314:	e060      	b.n	80033d8 <bma400_set_sensor_conf+0x388>
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	08018840 	.word	0x08018840
    uint8_t data_array[11] = { 0 };
 800331c:	2207      	movs	r2, #7
 800331e:	2100      	movs	r1, #0
 8003320:	a804      	add	r0, sp, #16
 8003322:	f012 fe6c 	bl	8015ffe <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003326:	2003      	movs	r0, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8003328:	79a3      	ldrb	r3, [r4, #6]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800332a:	7ae1      	ldrb	r1, [r4, #11]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 800332c:	015b      	lsls	r3, r3, #5
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800332e:	4001      	ands	r1, r0
 8003330:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8003332:	79e1      	ldrb	r1, [r4, #7]
 8003334:	300d      	adds	r0, #13
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8003336:	7aa2      	ldrb	r2, [r4, #10]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8003338:	0109      	lsls	r1, r1, #4
 800333a:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800333c:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 800333e:	3804      	subs	r0, #4
 8003340:	0091      	lsls	r1, r2, #2
 8003342:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8003344:	430b      	orrs	r3, r1
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8003346:	2102      	movs	r1, #2
    uint8_t data_array[11] = { 0 };
 8003348:	ad03      	add	r5, sp, #12
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800334a:	702b      	strb	r3, [r5, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800334c:	7a23      	ldrb	r3, [r4, #8]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 800334e:	380b      	subs	r0, #11
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	400b      	ands	r3, r1
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8003354:	7a61      	ldrb	r1, [r4, #9]
 8003356:	4001      	ands	r1, r0
 8003358:	430b      	orrs	r3, r1
 800335a:	706b      	strb	r3, [r5, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 800335c:	78a3      	ldrb	r3, [r4, #2]
 800335e:	70ab      	strb	r3, [r5, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8003360:	88a3      	ldrh	r3, [r4, #4]
 8003362:	0a19      	lsrs	r1, r3, #8
 8003364:	70e9      	strb	r1, [r5, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8003366:	712b      	strb	r3, [r5, #4]
    if (gen_int_set->ref_update == BMA400_MANUAL_UPDATE)
 8003368:	2a00      	cmp	r2, #0
 800336a:	d11a      	bne.n	80033a2 <bma400_set_sensor_conf+0x352>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 800336c:	89a3      	ldrh	r3, [r4, #12]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 800336e:	0029      	movs	r1, r5
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8003370:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	71ab      	strb	r3, [r5, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8003376:	89e3      	ldrh	r3, [r4, #14]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 8003378:	320b      	adds	r2, #11
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800337a:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	722b      	strb	r3, [r5, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003380:	8a23      	ldrh	r3, [r4, #16]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 8003382:	3049      	adds	r0, #73	; 0x49
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003384:	726b      	strb	r3, [r5, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	72ab      	strb	r3, [r5, #10]
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 800338a:	0033      	movs	r3, r6
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 5, dev);
 800338c:	f7ff fcd7 	bl	8002d3e <bma400_set_regs>
 8003390:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 8003392:	d1a4      	bne.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_GEN2_INT_MAP, conf[idx].param.gen_int.int_chan);
 8003394:	7ca3      	ldrb	r3, [r4, #18]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <bma400_set_sensor_conf+0x35c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 800339a:	ab02      	add	r3, sp, #8
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	2308      	movs	r3, #8
 80033a0:	e76d      	b.n	800327e <bma400_set_sensor_conf+0x22e>
        rslt = bma400_set_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 5, dev);
 80033a2:	0033      	movs	r3, r6
 80033a4:	2205      	movs	r2, #5
 80033a6:	0029      	movs	r1, r5
 80033a8:	204a      	movs	r0, #74	; 0x4a
 80033aa:	e7ef      	b.n	800338c <bma400_set_sensor_conf+0x33c>
            if (int_map == BMA400_INT_CHANNEL_2)
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d007      	beq.n	80033c0 <bma400_set_sensor_conf+0x370>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <bma400_set_sensor_conf+0x378>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d191      	bne.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 80033b8:	ab02      	add	r3, sp, #8
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	2308      	movs	r3, #8
 80033be:	e7a4      	b.n	800330a <bma400_set_sensor_conf+0x2ba>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 80033c0:	ab02      	add	r3, sp, #8
 80033c2:	785a      	ldrb	r2, [r3, #1]
 80033c4:	2308      	movs	r3, #8
 80033c6:	e790      	b.n	80032ea <bma400_set_sensor_conf+0x29a>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 80033c8:	2208      	movs	r2, #8
 80033ca:	ab02      	add	r3, sp, #8
 80033cc:	781b      	ldrb	r3, [r3, #0]
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 80033ce:	4393      	bics	r3, r2
 80033d0:	a902      	add	r1, sp, #8
 80033d2:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 80033d4:	784b      	ldrb	r3, [r1, #1]
 80033d6:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80033d8:	000a      	movs	r2, r1
 80033da:	e790      	b.n	80032fe <bma400_set_sensor_conf+0x2ae>
    uint8_t data_array[10] = { 0 };
 80033dc:	2206      	movs	r2, #6
 80033de:	2100      	movs	r1, #0
 80033e0:	a804      	add	r0, sp, #16
 80033e2:	f012 fe0c 	bl	8015ffe <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033e6:	2003      	movs	r0, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80033e8:	78a3      	ldrb	r3, [r4, #2]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033ea:	7a21      	ldrb	r1, [r4, #8]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80033ec:	015b      	lsls	r3, r3, #5
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033ee:	4001      	ands	r1, r0
 80033f0:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80033f2:	78e1      	ldrb	r1, [r4, #3]
 80033f4:	300d      	adds	r0, #13
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 80033f6:	7922      	ldrb	r2, [r4, #4]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80033f8:	0109      	lsls	r1, r1, #4
 80033fa:	4001      	ands	r1, r0
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 80033fc:	430b      	orrs	r3, r1
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 80033fe:	3804      	subs	r0, #4
 8003400:	0091      	lsls	r1, r2, #2
 8003402:	4001      	ands	r1, r0
    uint8_t data_array[10] = { 0 };
 8003404:	ad03      	add	r5, sp, #12
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE, orient_conf->stability_mode);
 8003406:	430b      	orrs	r3, r1
 8003408:	702b      	strb	r3, [r5, #0]
    data_array[1] = orient_conf->orient_thres;
 800340a:	7963      	ldrb	r3, [r4, #5]
 800340c:	706b      	strb	r3, [r5, #1]
    data_array[2] = orient_conf->stability_thres;
 800340e:	79a3      	ldrb	r3, [r4, #6]
 8003410:	70ab      	strb	r3, [r5, #2]
    data_array[3] = orient_conf->orient_int_dur;
 8003412:	79e3      	ldrb	r3, [r4, #7]
 8003414:	70eb      	strb	r3, [r5, #3]
    if (orient_conf->ref_update == BMA400_MANUAL_UPDATE)
 8003416:	2a00      	cmp	r2, #0
 8003418:	d11b      	bne.n	8003452 <bma400_set_sensor_conf+0x402>
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 800341a:	8963      	ldrh	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 800341c:	0029      	movs	r1, r5
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 800341e:	712b      	strb	r3, [r5, #4]
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 8003424:	89a3      	ldrh	r3, [r4, #12]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 8003426:	320a      	adds	r2, #10
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 8003428:	71ab      	strb	r3, [r5, #6]
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 800342e:	89e3      	ldrh	r3, [r4, #14]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 8003430:	3029      	adds	r0, #41	; 0x29
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8003432:	722b      	strb	r3, [r5, #8]
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	726b      	strb	r3, [r5, #9]
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 8003438:	0033      	movs	r3, r6
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 4, dev);
 800343a:	f7ff fc80 	bl	8002d3e <bma400_set_regs>
 800343e:	1e05      	subs	r5, r0, #0
                        if (rslt == BMA400_OK)
 8003440:	d000      	beq.n	8003444 <bma400_set_sensor_conf+0x3f4>
 8003442:	e74c      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                            map_int_pin(data_array, BMA400_ORIENT_CH_INT_MAP, conf[idx].param.orient.int_chan);
 8003444:	7c23      	ldrb	r3, [r4, #16]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <bma400_set_sensor_conf+0x40c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800344a:	ab02      	add	r3, sp, #8
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	2302      	movs	r3, #2
 8003450:	e715      	b.n	800327e <bma400_set_sensor_conf+0x22e>
        rslt = bma400_set_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 4, dev);
 8003452:	0033      	movs	r3, r6
 8003454:	2204      	movs	r2, #4
 8003456:	0029      	movs	r1, r5
 8003458:	2035      	movs	r0, #53	; 0x35
 800345a:	e7ee      	b.n	800343a <bma400_set_sensor_conf+0x3ea>
            if (int_map == BMA400_INT_CHANNEL_2)
 800345c:	2b02      	cmp	r3, #2
 800345e:	d008      	beq.n	8003472 <bma400_set_sensor_conf+0x422>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <bma400_set_sensor_conf+0x428>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003464:	2b03      	cmp	r3, #3
 8003466:	d000      	beq.n	800346a <bma400_set_sensor_conf+0x41a>
 8003468:	e738      	b.n	80032dc <bma400_set_sensor_conf+0x28c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800346a:	ab02      	add	r3, sp, #8
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	2302      	movs	r3, #2
 8003470:	e74b      	b.n	800330a <bma400_set_sensor_conf+0x2ba>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003472:	aa02      	add	r2, sp, #8
 8003474:	7852      	ldrb	r2, [r2, #1]
 8003476:	e738      	b.n	80032ea <bma400_set_sensor_conf+0x29a>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8003478:	ab02      	add	r3, sp, #8
 800347a:	2202      	movs	r2, #2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	e7a6      	b.n	80033ce <bma400_set_sensor_conf+0x37e>
                        map_int_pin(data_array, BMA400_STEP_INT_MAP, conf[idx].param.step_cnt.int_chan);
 8003480:	78a3      	ldrb	r3, [r4, #2]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <bma400_set_sensor_conf+0x43c>
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8003486:	aa02      	add	r2, sp, #8
 8003488:	7892      	ldrb	r2, [r2, #2]
 800348a:	e669      	b.n	8003160 <bma400_set_sensor_conf+0x110>
            if (int_map == BMA400_INT_CHANNEL_2)
 800348c:	2b02      	cmp	r3, #2
 800348e:	d008      	beq.n	80034a2 <bma400_set_sensor_conf+0x452>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <bma400_set_sensor_conf+0x45a>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003494:	2b03      	cmp	r3, #3
 8003496:	d000      	beq.n	800349a <bma400_set_sensor_conf+0x44a>
 8003498:	e721      	b.n	80032de <bma400_set_sensor_conf+0x28e>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 800349a:	ab02      	add	r3, sp, #8
 800349c:	2211      	movs	r2, #17
 800349e:	789b      	ldrb	r3, [r3, #2]
 80034a0:	e65e      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80034a2:	ab02      	add	r3, sp, #8
 80034a4:	2210      	movs	r2, #16
 80034a6:	789b      	ldrb	r3, [r3, #2]
 80034a8:	e65a      	b.n	8003160 <bma400_set_sensor_conf+0x110>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 80034aa:	ab02      	add	r3, sp, #8
 80034ac:	2211      	movs	r2, #17
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	e65b      	b.n	800316a <bma400_set_sensor_conf+0x11a>
 80034b2:	46c0      	nop			; (mov r8, r8)

080034b4 <bma400_get_sensor_conf>:
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	000e      	movs	r6, r1
    uint8_t data_array[3] = { 0 };
 80034b8:	49aa      	ldr	r1, [pc, #680]	; (8003764 <bma400_get_sensor_conf+0x2b0>)
{
 80034ba:	b087      	sub	sp, #28
 80034bc:	9200      	str	r2, [sp, #0]
 80034be:	0004      	movs	r4, r0
    uint8_t data_array[3] = { 0 };
 80034c0:	2202      	movs	r2, #2
 80034c2:	3103      	adds	r1, #3
 80034c4:	a802      	add	r0, sp, #8
 80034c6:	f012 fd91 	bl	8015fec <memcpy>
 80034ca:	2200      	movs	r2, #0
 80034cc:	ab02      	add	r3, sp, #8
 80034ce:	709a      	strb	r2, [r3, #2]
    if (conf == NULL)
 80034d0:	4294      	cmp	r4, r2
 80034d2:	d100      	bne.n	80034d6 <bma400_get_sensor_conf+0x22>
 80034d4:	e142      	b.n	800375c <bma400_get_sensor_conf+0x2a8>
    rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 80034d6:	9b00      	ldr	r3, [sp, #0]
 80034d8:	a902      	add	r1, sp, #8
 80034da:	2021      	movs	r0, #33	; 0x21
 80034dc:	3203      	adds	r2, #3
 80034de:	f7ff fc5f 	bl	8002da0 <bma400_get_regs>
 80034e2:	2114      	movs	r1, #20
 80034e4:	434e      	muls	r6, r1
 80034e6:	0005      	movs	r5, r0
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80034e8:	19a3      	adds	r3, r4, r6

            /* Interrupt 1 pin mapping status */
            int_1_map = BMA400_GET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT);

            /* Interrupt 2 pin mapping status */
            int_2_map = BMA400_GET_BITS(data_array[2], BMA400_STEP_MAP_INT2);
 80034ea:	2601      	movs	r6, #1
 80034ec:	9301      	str	r3, [sp, #4]
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80034ee:	9b01      	ldr	r3, [sp, #4]
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	d001      	beq.n	80034f8 <bma400_get_sensor_conf+0x44>
 80034f4:	2d00      	cmp	r5, #0
 80034f6:	d002      	beq.n	80034fe <bma400_get_sensor_conf+0x4a>
}
 80034f8:	0028      	movs	r0, r5
 80034fa:	b007      	add	sp, #28
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (conf[idx].type)
 80034fe:	7820      	ldrb	r0, [r4, #0]
 8003500:	2806      	cmp	r0, #6
 8003502:	d900      	bls.n	8003506 <bma400_get_sensor_conf+0x52>
 8003504:	e127      	b.n	8003756 <bma400_get_sensor_conf+0x2a2>
 8003506:	f7fc fe25 	bl	8000154 <__gnu_thumb1_case_uhi>
 800350a:	0007      	.short	0x0007
 800350c:	0052002f 	.word	0x0052002f
 8003510:	00af006d 	.word	0x00af006d
 8003514:	012000ef 	.word	0x012000ef
    rslt = bma400_get_regs(BMA400_ACCEL_CONFIG_0_ADDR, data_array, 3, dev);
 8003518:	af03      	add	r7, sp, #12
 800351a:	2203      	movs	r2, #3
 800351c:	0039      	movs	r1, r7
 800351e:	2019      	movs	r0, #25
 8003520:	9b00      	ldr	r3, [sp, #0]
 8003522:	f7ff fc3d 	bl	8002da0 <bma400_get_regs>
 8003526:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003528:	d11c      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        accel_conf->filt1_bw = BMA400_GET_BITS(data_array[0], BMA400_FILT_1_BW);
 800352a:	783b      	ldrb	r3, [r7, #0]
 800352c:	09da      	lsrs	r2, r3, #7
 800352e:	71e2      	strb	r2, [r4, #7]
        accel_conf->osr_lp = BMA400_GET_BITS(data_array[0], BMA400_OSR_LP);
 8003530:	2203      	movs	r2, #3
 8003532:	115b      	asrs	r3, r3, #5
 8003534:	4013      	ands	r3, r2
 8003536:	71a3      	strb	r3, [r4, #6]
        accel_conf->range = BMA400_GET_BITS(data_array[1], BMA400_ACCEL_RANGE);
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	0999      	lsrs	r1, r3, #6
 800353c:	70e1      	strb	r1, [r4, #3]
        accel_conf->osr = BMA400_GET_BITS(data_array[1], BMA400_OSR);
 800353e:	1119      	asrs	r1, r3, #4
 8003540:	4011      	ands	r1, r2
 8003542:	7161      	strb	r1, [r4, #5]
        accel_conf->odr = BMA400_GET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR);
 8003544:	210f      	movs	r1, #15
 8003546:	400b      	ands	r3, r1
 8003548:	70a3      	strb	r3, [r4, #2]
        accel_conf->data_src = BMA400_GET_BITS(data_array[2], BMA400_DATA_FILTER);
 800354a:	78bb      	ldrb	r3, [r7, #2]
 800354c:	109b      	asrs	r3, r3, #2
 800354e:	4013      	ands	r3, r2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003550:	0022      	movs	r2, r4
        accel_conf->data_src = BMA400_GET_BITS(data_array[2], BMA400_DATA_FILTER);
 8003552:	7123      	strb	r3, [r4, #4]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_DRDY);
 8003554:	ab02      	add	r3, sp, #8
 8003556:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_DRDY);
 8003558:	7818      	ldrb	r0, [r3, #0]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800355a:	09c9      	lsrs	r1, r1, #7
 800355c:	09c0      	lsrs	r0, r0, #7
 800355e:	3208      	adds	r2, #8

            /* Check the mapped interrupt pins */
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003560:	f7ff fbdf 	bl	8002d22 <check_mapped_interrupts>
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8003564:	3414      	adds	r4, #20
 8003566:	e7c2      	b.n	80034ee <bma400_get_sensor_conf+0x3a>
    rslt = bma400_get_regs(BMA400_TAP_CONFIG_ADDR, reg_data, 2, dev);
 8003568:	2202      	movs	r2, #2
 800356a:	2057      	movs	r0, #87	; 0x57
 800356c:	9b00      	ldr	r3, [sp, #0]
 800356e:	a903      	add	r1, sp, #12
 8003570:	f7ff fc16 	bl	8002da0 <bma400_get_regs>
 8003574:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003576:	d1f5      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        tap_set->axes_sel = BMA400_GET_BITS(reg_data[0], BMA400_TAP_AXES_EN);
 8003578:	2203      	movs	r2, #3
 800357a:	ab02      	add	r3, sp, #8
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	10d9      	asrs	r1, r3, #3
 8003580:	4011      	ands	r1, r2
 8003582:	70a1      	strb	r1, [r4, #2]
        tap_set->sensitivity = BMA400_GET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY);
 8003584:	2107      	movs	r1, #7
 8003586:	400b      	ands	r3, r1
 8003588:	70e3      	strb	r3, [r4, #3]
        tap_set->quiet_dt = BMA400_GET_BITS(reg_data[1], BMA400_TAP_QUIET_DT);
 800358a:	ab02      	add	r3, sp, #8
 800358c:	795b      	ldrb	r3, [r3, #5]
 800358e:	1119      	asrs	r1, r3, #4
 8003590:	4011      	ands	r1, r2
 8003592:	71a1      	strb	r1, [r4, #6]
        tap_set->quiet = BMA400_GET_BITS(reg_data[1], BMA400_TAP_QUIET);
 8003594:	1099      	asrs	r1, r3, #2
        tap_set->tics_th = BMA400_GET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH);
 8003596:	4013      	ands	r3, r2
 8003598:	7123      	strb	r3, [r4, #4]
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_TAP_MAP_INT1);
 800359a:	ab02      	add	r3, sp, #8
 800359c:	7898      	ldrb	r0, [r3, #2]
        tap_set->quiet = BMA400_GET_BITS(reg_data[1], BMA400_TAP_QUIET);
 800359e:	4011      	ands	r1, r2
 80035a0:	7161      	strb	r1, [r4, #5]
            int_2_map = BMA400_GET_BITS(data_array[2], BMA400_TAP_MAP_INT2);
 80035a2:	1181      	asrs	r1, r0, #6
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80035a4:	1de2      	adds	r2, r4, #7
 80035a6:	4031      	ands	r1, r6
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_TAP_MAP_INT1);
 80035a8:	1080      	asrs	r0, r0, #2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80035aa:	4030      	ands	r0, r6
 80035ac:	e7d8      	b.n	8003560 <bma400_get_sensor_conf+0xac>
    rslt = bma400_get_regs(BMA400_ACT_CH_CONFIG_0_ADDR, data_array, 2, dev);
 80035ae:	2202      	movs	r2, #2
 80035b0:	2055      	movs	r0, #85	; 0x55
 80035b2:	9b00      	ldr	r3, [sp, #0]
 80035b4:	a903      	add	r1, sp, #12
 80035b6:	f7ff fbf3 	bl	8002da0 <bma400_get_regs>
 80035ba:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80035bc:	d1d2      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        act_ch_set->act_ch_thres = data_array[0];
 80035be:	ab02      	add	r3, sp, #8
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	70a3      	strb	r3, [r4, #2]
        act_ch_set->axes_sel = BMA400_GET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN);
 80035c4:	ab02      	add	r3, sp, #8
 80035c6:	795b      	ldrb	r3, [r3, #5]
 80035c8:	095a      	lsrs	r2, r3, #5
 80035ca:	70e2      	strb	r2, [r4, #3]
        act_ch_set->data_source = BMA400_GET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC);
 80035cc:	111a      	asrs	r2, r3, #4
 80035ce:	4032      	ands	r2, r6
 80035d0:	7122      	strb	r2, [r4, #4]
        act_ch_set->act_ch_ntps = BMA400_GET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS);
 80035d2:	220f      	movs	r2, #15
 80035d4:	4013      	ands	r3, r2
 80035d6:	7163      	strb	r3, [r4, #5]
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1);
 80035d8:	ab02      	add	r3, sp, #8
 80035da:	7898      	ldrb	r0, [r3, #2]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80035dc:	1da2      	adds	r2, r4, #6
 80035de:	09c1      	lsrs	r1, r0, #7
            int_1_map = BMA400_GET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1);
 80035e0:	10c0      	asrs	r0, r0, #3
 80035e2:	e7e2      	b.n	80035aa <bma400_get_sensor_conf+0xf6>
    rslt = bma400_get_regs(BMA400_GEN1_INT_CONFIG_ADDR, data_array, 11, dev);
 80035e4:	af03      	add	r7, sp, #12
 80035e6:	220b      	movs	r2, #11
 80035e8:	0039      	movs	r1, r7
 80035ea:	203f      	movs	r0, #63	; 0x3f
 80035ec:	9b00      	ldr	r3, [sp, #0]
 80035ee:	f7ff fbd7 	bl	8002da0 <bma400_get_regs>
 80035f2:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80035f4:	d1b6      	bne.n	8003564 <bma400_get_sensor_conf+0xb0>
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 80035f6:	2103      	movs	r1, #3
        gen_int_set->axes_sel = BMA400_GET_BITS(data_array[0], BMA400_INT_AXES_EN);
 80035f8:	783b      	ldrb	r3, [r7, #0]
 80035fa:	095a      	lsrs	r2, r3, #5
 80035fc:	71a2      	strb	r2, [r4, #6]
        gen_int_set->data_src = BMA400_GET_BITS(data_array[0], BMA400_INT_DATA_SRC);
 80035fe:	111a      	asrs	r2, r3, #4
 8003600:	4032      	ands	r2, r6
 8003602:	71e2      	strb	r2, [r4, #7]
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 8003604:	109a      	asrs	r2, r3, #2
 8003606:	400a      	ands	r2, r1
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 8003608:	400b      	ands	r3, r1
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800360a:	72a2      	strb	r2, [r4, #10]
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 800360c:	72e3      	strb	r3, [r4, #11]
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 800360e:	787b      	ldrb	r3, [r7, #1]
 8003610:	001a      	movs	r2, r3
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 8003612:	105b      	asrs	r3, r3, #1
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 8003614:	4032      	ands	r2, r6
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 8003616:	4033      	ands	r3, r6
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 8003618:	7262      	strb	r2, [r4, #9]
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 800361a:	7223      	strb	r3, [r4, #8]
        gen_int_set->gen_int_thres = data_array[2];
 800361c:	78bb      	ldrb	r3, [r7, #2]
 800361e:	70a3      	strb	r3, [r4, #2]
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 8003620:	ab02      	add	r3, sp, #8
 8003622:	79d9      	ldrb	r1, [r3, #7]
 8003624:	7a1b      	ldrb	r3, [r3, #8]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	430b      	orrs	r3, r1
        data_array[6] = data_array[6] & 0x0F;
 800362a:	210f      	movs	r1, #15
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 800362c:	ba5b      	rev16	r3, r3
 800362e:	80a3      	strh	r3, [r4, #4]
        data_array[6] = data_array[6] & 0x0F;
 8003630:	79bb      	ldrb	r3, [r7, #6]
        gen_int_set->int_thres_ref_x = ((uint16_t)data_array[6] << 8) | data_array[5];
 8003632:	797a      	ldrb	r2, [r7, #5]
 8003634:	400b      	ands	r3, r1
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	4313      	orrs	r3, r2
 800363a:	81a3      	strh	r3, [r4, #12]
        data_array[8] = data_array[8] & 0x0F;
 800363c:	7a3a      	ldrb	r2, [r7, #8]
        gen_int_set->int_thres_ref_y = ((uint16_t)data_array[8] << 8) | data_array[7];
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	400a      	ands	r2, r1
 8003642:	0212      	lsls	r2, r2, #8
 8003644:	431a      	orrs	r2, r3
 8003646:	81e2      	strh	r2, [r4, #14]
        data_array[10] = data_array[10] & 0x0F;
 8003648:	7abb      	ldrb	r3, [r7, #10]
        gen_int_set->int_thres_ref_z = ((uint16_t)data_array[10] << 8) | data_array[9];
 800364a:	7a7a      	ldrb	r2, [r7, #9]
 800364c:	400b      	ands	r3, r1
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4313      	orrs	r3, r2
 8003652:	8223      	strh	r3, [r4, #16]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN1);
 8003654:	ab02      	add	r3, sp, #8
 8003656:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN1);
 8003658:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN1);
 800365a:	1089      	asrs	r1, r1, #2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800365c:	4031      	ands	r1, r6
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN1);
 800365e:	1080      	asrs	r0, r0, #2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003660:	0022      	movs	r2, r4
 8003662:	4030      	ands	r0, r6
 8003664:	3212      	adds	r2, #18
 8003666:	e77b      	b.n	8003560 <bma400_get_sensor_conf+0xac>
    rslt = bma400_get_regs(BMA400_GEN2_INT_CONFIG_ADDR, data_array, 11, dev);
 8003668:	af03      	add	r7, sp, #12
 800366a:	220b      	movs	r2, #11
 800366c:	0039      	movs	r1, r7
 800366e:	204a      	movs	r0, #74	; 0x4a
 8003670:	9b00      	ldr	r3, [sp, #0]
 8003672:	f7ff fb95 	bl	8002da0 <bma400_get_regs>
 8003676:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 8003678:	d000      	beq.n	800367c <bma400_get_sensor_conf+0x1c8>
 800367a:	e773      	b.n	8003564 <bma400_get_sensor_conf+0xb0>
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800367c:	2103      	movs	r1, #3
        gen_int_set->axes_sel = BMA400_GET_BITS(data_array[0], BMA400_INT_AXES_EN);
 800367e:	783b      	ldrb	r3, [r7, #0]
 8003680:	095a      	lsrs	r2, r3, #5
 8003682:	71a2      	strb	r2, [r4, #6]
        gen_int_set->data_src = BMA400_GET_BITS(data_array[0], BMA400_INT_DATA_SRC);
 8003684:	111a      	asrs	r2, r3, #4
 8003686:	4032      	ands	r2, r6
 8003688:	71e2      	strb	r2, [r4, #7]
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800368a:	109a      	asrs	r2, r3, #2
 800368c:	400a      	ands	r2, r1
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 800368e:	400b      	ands	r3, r1
        gen_int_set->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 8003690:	72a2      	strb	r2, [r4, #10]
        gen_int_set->hysteresis = BMA400_GET_BITS_POS_0(data_array[0], BMA400_INT_HYST);
 8003692:	72e3      	strb	r3, [r4, #11]
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	001a      	movs	r2, r3
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 8003698:	105b      	asrs	r3, r3, #1
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 800369a:	4032      	ands	r2, r6
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 800369c:	4033      	ands	r3, r6
        gen_int_set->evaluate_axes = BMA400_GET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB);
 800369e:	7262      	strb	r2, [r4, #9]
        gen_int_set->criterion_sel = BMA400_GET_BITS(data_array[1], BMA400_GEN_INT_CRITERION);
 80036a0:	7223      	strb	r3, [r4, #8]
        gen_int_set->gen_int_thres = data_array[2];
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	70a3      	strb	r3, [r4, #2]
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 80036a6:	ab02      	add	r3, sp, #8
 80036a8:	79d9      	ldrb	r1, [r3, #7]
 80036aa:	7a1b      	ldrb	r3, [r3, #8]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	430b      	orrs	r3, r1
        data_array[6] = data_array[6] & 0x0F;
 80036b0:	210f      	movs	r1, #15
        gen_int_set->gen_int_dur = ((uint16_t)data_array[3] << 8) | data_array[4];
 80036b2:	ba5b      	rev16	r3, r3
 80036b4:	80a3      	strh	r3, [r4, #4]
        data_array[6] = data_array[6] & 0x0F;
 80036b6:	79bb      	ldrb	r3, [r7, #6]
        gen_int_set->int_thres_ref_x = ((uint16_t)data_array[6] << 8) | data_array[5];
 80036b8:	797a      	ldrb	r2, [r7, #5]
 80036ba:	400b      	ands	r3, r1
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	4313      	orrs	r3, r2
 80036c0:	81a3      	strh	r3, [r4, #12]
        data_array[8] = data_array[8] & 0x0F;
 80036c2:	7a3a      	ldrb	r2, [r7, #8]
        gen_int_set->int_thres_ref_y = ((uint16_t)data_array[8] << 8) | data_array[7];
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	400a      	ands	r2, r1
 80036c8:	0212      	lsls	r2, r2, #8
 80036ca:	431a      	orrs	r2, r3
 80036cc:	81e2      	strh	r2, [r4, #14]
        data_array[10] = data_array[10] & 0x0F;
 80036ce:	7abb      	ldrb	r3, [r7, #10]
        gen_int_set->int_thres_ref_z = ((uint16_t)data_array[10] << 8) | data_array[9];
 80036d0:	7a7a      	ldrb	r2, [r7, #9]
 80036d2:	400b      	ands	r3, r1
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	4313      	orrs	r3, r2
 80036d8:	8223      	strh	r3, [r4, #16]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN2);
 80036da:	ab02      	add	r3, sp, #8
 80036dc:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN2);
 80036de:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_GEN2);
 80036e0:	10c9      	asrs	r1, r1, #3
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 80036e2:	4031      	ands	r1, r6
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_GEN2);
 80036e4:	10c0      	asrs	r0, r0, #3
 80036e6:	e7bb      	b.n	8003660 <bma400_get_sensor_conf+0x1ac>
    rslt = bma400_get_regs(BMA400_ORIENTCH_INT_CONFIG_ADDR, data_array, 10, dev);
 80036e8:	af03      	add	r7, sp, #12
 80036ea:	220a      	movs	r2, #10
 80036ec:	0039      	movs	r1, r7
 80036ee:	2035      	movs	r0, #53	; 0x35
 80036f0:	9b00      	ldr	r3, [sp, #0]
 80036f2:	f7ff fb55 	bl	8002da0 <bma400_get_regs>
 80036f6:	1e05      	subs	r5, r0, #0
    if (rslt == BMA400_OK)
 80036f8:	d000      	beq.n	80036fc <bma400_get_sensor_conf+0x248>
 80036fa:	e733      	b.n	8003564 <bma400_get_sensor_conf+0xb0>
        orient_conf->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 80036fc:	2103      	movs	r1, #3
        orient_conf->axes_sel = BMA400_GET_BITS(data_array[0], BMA400_INT_AXES_EN);
 80036fe:	783b      	ldrb	r3, [r7, #0]
 8003700:	095a      	lsrs	r2, r3, #5
 8003702:	70a2      	strb	r2, [r4, #2]
        orient_conf->data_src = BMA400_GET_BITS(data_array[0], BMA400_INT_DATA_SRC);
 8003704:	111a      	asrs	r2, r3, #4
 8003706:	4032      	ands	r2, r6
 8003708:	70e2      	strb	r2, [r4, #3]
        orient_conf->ref_update = BMA400_GET_BITS(data_array[0], BMA400_INT_REFU);
 800370a:	109a      	asrs	r2, r3, #2
 800370c:	400a      	ands	r2, r1
 800370e:	7122      	strb	r2, [r4, #4]
        orient_conf->orient_ref_x = ((uint16_t)data_array[5] << 8) | data_array[4];
 8003710:	220f      	movs	r2, #15
        orient_conf->stability_mode = BMA400_GET_BITS_POS_0(data_array[0], BMA400_STABILITY_MODE);
 8003712:	400b      	ands	r3, r1
 8003714:	7223      	strb	r3, [r4, #8]
        orient_conf->orient_thres = data_array[1];
 8003716:	787b      	ldrb	r3, [r7, #1]
 8003718:	7163      	strb	r3, [r4, #5]
        orient_conf->stability_thres = data_array[2];
 800371a:	78bb      	ldrb	r3, [r7, #2]
 800371c:	71a3      	strb	r3, [r4, #6]
        orient_conf->orient_int_dur = data_array[3];
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	71e3      	strb	r3, [r4, #7]
        data_array[5] = data_array[5] & 0x0F;
 8003722:	797b      	ldrb	r3, [r7, #5]
        orient_conf->orient_ref_x = ((uint16_t)data_array[5] << 8) | data_array[4];
 8003724:	4013      	ands	r3, r2
 8003726:	793a      	ldrb	r2, [r7, #4]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	4313      	orrs	r3, r2
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800372c:	0022      	movs	r2, r4
        orient_conf->orient_ref_x = ((uint16_t)data_array[5] << 8) | data_array[4];
 800372e:	8163      	strh	r3, [r4, #10]
        orient_conf->orient_ref_y = ((uint16_t)data_array[7] << 8) | data_array[6];
 8003730:	88fb      	ldrh	r3, [r7, #6]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003732:	3210      	adds	r2, #16
        orient_conf->orient_ref_y = ((uint16_t)data_array[7] << 8) | data_array[6];
 8003734:	81a3      	strh	r3, [r4, #12]
        orient_conf->orient_ref_z = ((uint16_t)data_array[9] << 8) | data_array[8];
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	81e3      	strh	r3, [r4, #14]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_ORIENT_CH);
 800373a:	ab02      	add	r3, sp, #8
 800373c:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_ORIENT_CH);
 800373e:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_ORIENT_CH);
 8003740:	1049      	asrs	r1, r1, #1
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_ORIENT_CH);
 8003742:	1040      	asrs	r0, r0, #1
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003744:	4031      	ands	r1, r6
 8003746:	4030      	ands	r0, r6
 8003748:	e70a      	b.n	8003560 <bma400_get_sensor_conf+0xac>
            int_1_map = BMA400_GET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT);
 800374a:	ab02      	add	r3, sp, #8
 800374c:	7898      	ldrb	r0, [r3, #2]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 800374e:	1ca2      	adds	r2, r4, #2
            int_2_map = BMA400_GET_BITS(data_array[2], BMA400_STEP_MAP_INT2);
 8003750:	1101      	asrs	r1, r0, #4
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003752:	4031      	ands	r1, r6
 8003754:	e729      	b.n	80035aa <bma400_get_sensor_conf+0xf6>
        switch (conf[idx].type)
 8003756:	2504      	movs	r5, #4
 8003758:	426d      	negs	r5, r5
 800375a:	e703      	b.n	8003564 <bma400_get_sensor_conf+0xb0>
        return rslt;
 800375c:	2501      	movs	r5, #1
 800375e:	426d      	negs	r5, r5
 8003760:	e6ca      	b.n	80034f8 <bma400_get_sensor_conf+0x44>
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	08018840 	.word	0x08018840

08003768 <bma400_set_device_conf>:
{
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	000e      	movs	r6, r1
    uint8_t data_array[3] = { 0 };
 800376c:	49c2      	ldr	r1, [pc, #776]	; (8003a78 <bma400_set_device_conf+0x310>)
{
 800376e:	b087      	sub	sp, #28
 8003770:	0004      	movs	r4, r0
 8003772:	0015      	movs	r5, r2
    uint8_t data_array[3] = { 0 };
 8003774:	3103      	adds	r1, #3
 8003776:	2202      	movs	r2, #2
 8003778:	a802      	add	r0, sp, #8
 800377a:	f012 fc37 	bl	8015fec <memcpy>
 800377e:	2200      	movs	r2, #0
 8003780:	ab02      	add	r3, sp, #8
 8003782:	709a      	strb	r2, [r3, #2]
    if (conf == NULL)
 8003784:	4294      	cmp	r4, r2
 8003786:	d100      	bne.n	800378a <bma400_set_device_conf+0x22>
 8003788:	e186      	b.n	8003a98 <bma400_set_device_conf+0x330>
    rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 800378a:	002b      	movs	r3, r5
 800378c:	a902      	add	r1, sp, #8
 800378e:	2021      	movs	r0, #33	; 0x21
 8003790:	3203      	adds	r2, #3
 8003792:	f7ff fb05 	bl	8002da0 <bma400_get_regs>
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8003796:	210a      	movs	r1, #10
 8003798:	434e      	muls	r6, r1
 800379a:	19a3      	adds	r3, r4, r6
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	429c      	cmp	r4, r3
 80037a2:	d100      	bne.n	80037a6 <bma400_set_device_conf+0x3e>
 80037a4:	e16e      	b.n	8003a84 <bma400_set_device_conf+0x31c>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d001      	beq.n	80037ae <bma400_set_device_conf+0x46>
}
 80037aa:	b007      	add	sp, #28
 80037ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (conf[idx].type)
 80037ae:	2004      	movs	r0, #4
 80037b0:	7823      	ldrb	r3, [r4, #0]
 80037b2:	4240      	negs	r0, r0
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d827      	bhi.n	8003808 <bma400_set_device_conf+0xa0>
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fc fcb7 	bl	800012c <__gnu_thumb1_case_uqi>
 80037be:	2703      	.short	0x2703
 80037c0:	eac7a26e 	.word	0xeac7a26e
    rslt = bma400_get_regs(BMA400_AUTOWAKEUP_1_ADDR, &data_array[1], 1, dev);
 80037c4:	2109      	movs	r1, #9
 80037c6:	a802      	add	r0, sp, #8
 80037c8:	1809      	adds	r1, r1, r0
 80037ca:	002b      	movs	r3, r5
 80037cc:	2201      	movs	r2, #1
 80037ce:	202d      	movs	r0, #45	; 0x2d
 80037d0:	ae04      	add	r6, sp, #16
 80037d2:	f7ff fae5 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d116      	bne.n	8003808 <bma400_set_device_conf+0xa0>
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 80037da:	2104      	movs	r1, #4
 80037dc:	78a3      	ldrb	r3, [r4, #2]
 80037de:	7872      	ldrb	r2, [r6, #1]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	400b      	ands	r3, r1
 80037e4:	438a      	bics	r2, r1
 80037e6:	431a      	orrs	r2, r3
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 80037e8:	88a3      	ldrh	r3, [r4, #4]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 80037ea:	b252      	sxtb	r2, r2
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 80037ec:	1119      	asrs	r1, r3, #4
        data_array[0] = msb;
 80037ee:	7031      	strb	r1, [r6, #0]
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 80037f0:	210f      	movs	r1, #15
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 80037f2:	400b      	ands	r3, r1
 80037f4:	400a      	ands	r2, r1
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4313      	orrs	r3, r2
 80037fa:	7073      	strb	r3, [r6, #1]
        rslt = bma400_set_regs(BMA400_AUTOWAKEUP_0_ADDR, data_array, 2, dev);
 80037fc:	2202      	movs	r2, #2
 80037fe:	002b      	movs	r3, r5
 8003800:	0031      	movs	r1, r6
 8003802:	302c      	adds	r0, #44	; 0x2c
            rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_1_ADDR, &reg_data, 1, dev);
 8003804:	f7ff fa9b 	bl	8002d3e <bma400_set_regs>
    for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8003808:	340a      	adds	r4, #10
 800380a:	e7c8      	b.n	800379e <bma400_set_device_conf+0x36>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800380c:	2203      	movs	r2, #3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 800380e:	201c      	movs	r0, #28
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8003810:	78a3      	ldrb	r3, [r4, #2]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8003812:	a904      	add	r1, sp, #16
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8003814:	4013      	ands	r3, r2
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8003816:	7922      	ldrb	r2, [r4, #4]
 8003818:	0152      	lsls	r2, r2, #5
 800381a:	431a      	orrs	r2, r3
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 800381c:	78e3      	ldrb	r3, [r4, #3]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4003      	ands	r3, r0
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8003822:	4313      	orrs	r3, r2
 8003824:	700b      	strb	r3, [r1, #0]
    data_array[1] = wakeup_conf->int_wkup_threshold;
 8003826:	7963      	ldrb	r3, [r4, #5]
    rslt = bma400_set_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 8003828:	2205      	movs	r2, #5
    data_array[1] = wakeup_conf->int_wkup_threshold;
 800382a:	704b      	strb	r3, [r1, #1]
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 800382c:	79a3      	ldrb	r3, [r4, #6]
    rslt = bma400_set_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 800382e:	3013      	adds	r0, #19
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8003830:	708b      	strb	r3, [r1, #2]
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 8003832:	79e3      	ldrb	r3, [r4, #7]
 8003834:	70cb      	strb	r3, [r1, #3]
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8003836:	7a23      	ldrb	r3, [r4, #8]
 8003838:	710b      	strb	r3, [r1, #4]
    rslt = bma400_set_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 800383a:	002b      	movs	r3, r5
 800383c:	f7ff fa7f 	bl	8002d3e <bma400_set_regs>
                if (rslt == BMA400_OK)
 8003840:	2800      	cmp	r0, #0
 8003842:	d1e1      	bne.n	8003808 <bma400_set_device_conf+0xa0>
                    map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 8003844:	7a63      	ldrb	r3, [r4, #9]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <bma400_set_device_conf+0xee>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 800384a:	aa02      	add	r2, sp, #8
 800384c:	7812      	ldrb	r2, [r2, #0]
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800384e:	4313      	orrs	r3, r2
 8003850:	aa02      	add	r2, sp, #8
 8003852:	7013      	strb	r3, [r2, #0]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003854:	e005      	b.n	8003862 <bma400_set_device_conf+0xfa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003856:	2b02      	cmp	r3, #2
 8003858:	d005      	beq.n	8003866 <bma400_set_device_conf+0xfe>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <bma400_set_device_conf+0x10c>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800385e:	2b03      	cmp	r3, #3
 8003860:	d012      	beq.n	8003888 <bma400_set_device_conf+0x120>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003862:	2000      	movs	r0, #0
 8003864:	e7d0      	b.n	8003808 <bma400_set_device_conf+0xa0>
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8003866:	ab02      	add	r3, sp, #8
 8003868:	785a      	ldrb	r2, [r3, #1]
 800386a:	2301      	movs	r3, #1
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800386c:	4313      	orrs	r3, r2
 800386e:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003870:	7053      	strb	r3, [r2, #1]
 8003872:	e7c9      	b.n	8003808 <bma400_set_device_conf+0xa0>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8003874:	2201      	movs	r2, #1
 8003876:	ab02      	add	r3, sp, #8
 8003878:	781b      	ldrb	r3, [r3, #0]
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800387a:	4393      	bics	r3, r2
 800387c:	a902      	add	r1, sp, #8
 800387e:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8003880:	784b      	ldrb	r3, [r1, #1]
 8003882:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003884:	000a      	movs	r2, r1
 8003886:	e7f3      	b.n	8003870 <bma400_set_device_conf+0x108>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8003888:	ab02      	add	r3, sp, #8
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	2301      	movs	r3, #1
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800388e:	431a      	orrs	r2, r3
 8003890:	a902      	add	r1, sp, #8
 8003892:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003894:	784a      	ldrb	r2, [r1, #1]
 8003896:	4313      	orrs	r3, r2
 8003898:	e7f4      	b.n	8003884 <bma400_set_device_conf+0x11c>
    rslt = bma400_get_regs(BMA400_AUTO_LOW_POW_1_ADDR, &reg_data, 1, dev);
 800389a:	ae03      	add	r6, sp, #12
 800389c:	002b      	movs	r3, r5
 800389e:	2201      	movs	r2, #1
 80038a0:	0031      	movs	r1, r6
 80038a2:	202b      	movs	r0, #43	; 0x2b
 80038a4:	f7ff fa7c 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d1ad      	bne.n	8003808 <bma400_set_device_conf+0xa0>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 80038ac:	210f      	movs	r1, #15
 80038ae:	7833      	ldrb	r3, [r6, #0]
 80038b0:	78a2      	ldrb	r2, [r4, #2]
 80038b2:	438b      	bics	r3, r1
 80038b4:	4011      	ands	r1, r2
 80038b6:	430b      	orrs	r3, r1
 80038b8:	7033      	strb	r3, [r6, #0]
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 80038ba:	230c      	movs	r3, #12
 80038bc:	421a      	tst	r2, r3
 80038be:	d104      	bne.n	80038ca <bma400_set_device_conf+0x162>
            rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_1_ADDR, &reg_data, 1, dev);
 80038c0:	002b      	movs	r3, r5
 80038c2:	2201      	movs	r2, #1
 80038c4:	202b      	movs	r0, #43	; 0x2b
 80038c6:	a903      	add	r1, sp, #12
 80038c8:	e79c      	b.n	8003804 <bma400_set_device_conf+0x9c>
            rslt = bma400_get_regs(BMA400_AUTO_LOW_POW_0_ADDR, &timeout_msb, 1, dev);
 80038ca:	af04      	add	r7, sp, #16
 80038cc:	002b      	movs	r3, r5
 80038ce:	2201      	movs	r2, #1
 80038d0:	0039      	movs	r1, r7
 80038d2:	202a      	movs	r0, #42	; 0x2a
 80038d4:	f7ff fa64 	bl	8002da0 <bma400_get_regs>
            if (rslt == BMA400_OK)
 80038d8:	2800      	cmp	r0, #0
 80038da:	d195      	bne.n	8003808 <bma400_set_device_conf+0xa0>
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80038dc:	210f      	movs	r1, #15
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80038de:	88a3      	ldrh	r3, [r4, #4]
                rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_0_ADDR, &timeout_msb, 1, dev);
 80038e0:	302a      	adds	r0, #42	; 0x2a
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80038e2:	111a      	asrs	r2, r3, #4
 80038e4:	703a      	strb	r2, [r7, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80038e6:	7832      	ldrb	r2, [r6, #0]
 80038e8:	400b      	ands	r3, r1
 80038ea:	400a      	ands	r2, r1
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4313      	orrs	r3, r2
 80038f0:	7033      	strb	r3, [r6, #0]
                rslt = bma400_set_regs(BMA400_AUTO_LOW_POW_0_ADDR, &timeout_msb, 1, dev);
 80038f2:	2201      	movs	r2, #1
 80038f4:	002b      	movs	r3, r5
 80038f6:	0039      	movs	r1, r7
 80038f8:	f7ff fa21 	bl	8002d3e <bma400_set_regs>
        if (rslt == BMA400_OK)
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d183      	bne.n	8003808 <bma400_set_device_conf+0xa0>
 8003900:	e7de      	b.n	80038c0 <bma400_set_device_conf+0x158>
                rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8003902:	78e3      	ldrb	r3, [r4, #3]
static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, const struct bma400_dev *dev)
{
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_INT_12_IO_CTRL_ADDR, &reg_data, 1, dev);
 8003904:	ae04      	add	r6, sp, #16
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	002b      	movs	r3, r5
 800390c:	0031      	movs	r1, r6
 800390e:	2024      	movs	r0, #36	; 0x24
 8003910:	78a7      	ldrb	r7, [r4, #2]
 8003912:	f7ff fa45 	bl	8002da0 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8003916:	2800      	cmp	r0, #0
 8003918:	d000      	beq.n	800391c <bma400_set_device_conf+0x1b4>
 800391a:	e775      	b.n	8003808 <bma400_set_device_conf+0xa0>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 800391c:	2f01      	cmp	r7, #1
 800391e:	d10c      	bne.n	800393a <bma400_set_device_conf+0x1d2>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8003920:	2106      	movs	r1, #6
 8003922:	9a00      	ldr	r2, [sp, #0]
 8003924:	7833      	ldrb	r3, [r6, #0]
 8003926:	0052      	lsls	r2, r2, #1
 8003928:	438b      	bics	r3, r1
 800392a:	400a      	ands	r2, r1
        }
        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 800392c:	4313      	orrs	r3, r2
 800392e:	7033      	strb	r3, [r6, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_INT_12_IO_CTRL_ADDR, &reg_data, 1, dev);
 8003930:	002b      	movs	r3, r5
 8003932:	2201      	movs	r2, #1
 8003934:	0031      	movs	r1, r6
 8003936:	2024      	movs	r0, #36	; 0x24
 8003938:	e764      	b.n	8003804 <bma400_set_device_conf+0x9c>
        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 800393a:	2f02      	cmp	r7, #2
 800393c:	d1f8      	bne.n	8003930 <bma400_set_device_conf+0x1c8>
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 800393e:	2160      	movs	r1, #96	; 0x60
 8003940:	9b00      	ldr	r3, [sp, #0]
 8003942:	7832      	ldrb	r2, [r6, #0]
 8003944:	015b      	lsls	r3, r3, #5
 8003946:	438a      	bics	r2, r1
 8003948:	400b      	ands	r3, r1
 800394a:	e7ef      	b.n	800392c <bma400_set_device_conf+0x1c4>
                map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 800394c:	78a0      	ldrb	r0, [r4, #2]
            if (int_map == BMA400_INT_CHANNEL_1)
 800394e:	2801      	cmp	r0, #1
 8003950:	d103      	bne.n	800395a <bma400_set_device_conf+0x1f2>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003952:	ab02      	add	r3, sp, #8
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	2310      	movs	r3, #16
 8003958:	e779      	b.n	800384e <bma400_set_device_conf+0xe6>
            if (int_map == BMA400_INT_CHANNEL_2)
 800395a:	2802      	cmp	r0, #2
 800395c:	d00e      	beq.n	800397c <bma400_set_device_conf+0x214>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800395e:	2800      	cmp	r0, #0
 8003960:	d013      	beq.n	800398a <bma400_set_device_conf+0x222>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003962:	2803      	cmp	r0, #3
 8003964:	d000      	beq.n	8003968 <bma400_set_device_conf+0x200>
 8003966:	e77c      	b.n	8003862 <bma400_set_device_conf+0xfa>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003968:	ab02      	add	r3, sp, #8
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	2310      	movs	r3, #16
 800396e:	a902      	add	r1, sp, #8
 8003970:	431a      	orrs	r2, r3
 8003972:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003974:	784a      	ldrb	r2, [r1, #1]
 8003976:	4313      	orrs	r3, r2
 8003978:	000a      	movs	r2, r1
 800397a:	e004      	b.n	8003986 <bma400_set_device_conf+0x21e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800397c:	ab02      	add	r3, sp, #8
 800397e:	785a      	ldrb	r2, [r3, #1]
 8003980:	2310      	movs	r3, #16
 8003982:	4313      	orrs	r3, r2
 8003984:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003986:	7053      	strb	r3, [r2, #1]
 8003988:	e76b      	b.n	8003862 <bma400_set_device_conf+0xfa>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 800398a:	ab02      	add	r3, sp, #8
 800398c:	2210      	movs	r2, #16
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	e773      	b.n	800387a <bma400_set_device_conf+0x112>
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003992:	0028      	movs	r0, r5
 8003994:	f7ff f9b6 	bl	8002d04 <null_ptr_check>

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8003998:	2800      	cmp	r0, #0
 800399a:	d000      	beq.n	800399e <bma400_set_device_conf+0x236>
 800399c:	e734      	b.n	8003808 <bma400_set_device_conf+0xa0>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_FIFO_CONFIG_0_ADDR, sens_data, 3, dev);
 800399e:	ae04      	add	r6, sp, #16
 80039a0:	002b      	movs	r3, r5
 80039a2:	2203      	movs	r2, #3
 80039a4:	0031      	movs	r1, r6
 80039a6:	3026      	adds	r0, #38	; 0x26
 80039a8:	f7ff f9fa 	bl	8002da0 <bma400_get_regs>
        if (rslt == BMA400_OK)
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d000      	beq.n	80039b2 <bma400_set_device_conf+0x24a>
 80039b0:	e72a      	b.n	8003808 <bma400_set_device_conf+0xa0>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 80039b2:	78a2      	ldrb	r2, [r4, #2]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 80039b4:	78e3      	ldrb	r3, [r4, #3]
            data_array[0] = fifo_conf->conf_regs;
 80039b6:	a903      	add	r1, sp, #12
 80039b8:	700a      	strb	r2, [r1, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <bma400_set_device_conf+0x25c>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 80039be:	7833      	ldrb	r3, [r6, #0]
 80039c0:	4393      	bics	r3, r2
 80039c2:	700b      	strb	r3, [r1, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80039c4:	2007      	movs	r0, #7
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80039c6:	88a3      	ldrh	r3, [r4, #4]
 80039c8:	b2da      	uxtb	r2, r3
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80039ca:	0a1b      	lsrs	r3, r3, #8
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80039cc:	4003      	ands	r3, r0
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80039ce:	704a      	strb	r2, [r1, #1]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80039d0:	708b      	strb	r3, [r1, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80039d2:	a804      	add	r0, sp, #16
 80039d4:	7846      	ldrb	r6, [r0, #1]
 80039d6:	4296      	cmp	r6, r2
 80039d8:	d11a      	bne.n	8003a10 <bma400_set_device_conf+0x2a8>
 80039da:	7882      	ldrb	r2, [r0, #2]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d117      	bne.n	8003a10 <bma400_set_device_conf+0x2a8>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 1, dev);
 80039e0:	002b      	movs	r3, r5
 80039e2:	2201      	movs	r2, #1
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 3, dev);
 80039e4:	2026      	movs	r0, #38	; 0x26
 80039e6:	f7ff f9aa 	bl	8002d3e <bma400_set_regs>
                if (rslt == BMA400_OK)
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d000      	beq.n	80039f0 <bma400_set_device_conf+0x288>
 80039ee:	e70b      	b.n	8003808 <bma400_set_device_conf+0xa0>
                    map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 80039f0:	79e3      	ldrb	r3, [r4, #7]
            if (int_map == BMA400_INT_CHANNEL_1)
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d110      	bne.n	8003a18 <bma400_set_device_conf+0x2b0>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80039f6:	ab02      	add	r3, sp, #8
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	4313      	orrs	r3, r2
 80039fe:	aa02      	add	r2, sp, #8
 8003a00:	7013      	strb	r3, [r2, #0]
                    map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8003a02:	79a3      	ldrb	r3, [r4, #6]
            if (int_map == BMA400_INT_CHANNEL_1)
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d127      	bne.n	8003a58 <bma400_set_device_conf+0x2f0>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003a08:	ab02      	add	r3, sp, #8
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e71e      	b.n	800384e <bma400_set_device_conf+0xe6>
                rslt = bma400_set_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 3, dev);
 8003a10:	002b      	movs	r3, r5
 8003a12:	2203      	movs	r2, #3
 8003a14:	a903      	add	r1, sp, #12
 8003a16:	e7e5      	b.n	80039e4 <bma400_set_device_conf+0x27c>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d00c      	beq.n	8003a36 <bma400_set_device_conf+0x2ce>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <bma400_set_device_conf+0x2dc>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d1ee      	bne.n	8003a02 <bma400_set_device_conf+0x29a>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a24:	ab02      	add	r3, sp, #8
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	2340      	movs	r3, #64	; 0x40
 8003a2a:	a902      	add	r1, sp, #8
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	700a      	strb	r2, [r1, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a30:	784a      	ldrb	r2, [r1, #1]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	e00e      	b.n	8003a54 <bma400_set_device_conf+0x2ec>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a36:	ab02      	add	r3, sp, #8
 8003a38:	785a      	ldrb	r2, [r3, #1]
 8003a3a:	2340      	movs	r3, #64	; 0x40
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	aa02      	add	r2, sp, #8
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a40:	7053      	strb	r3, [r2, #1]
 8003a42:	e7de      	b.n	8003a02 <bma400_set_device_conf+0x29a>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8003a44:	2240      	movs	r2, #64	; 0x40
 8003a46:	ab02      	add	r3, sp, #8
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	a902      	add	r1, sp, #8
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	700b      	strb	r3, [r1, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8003a50:	784b      	ldrb	r3, [r1, #1]
 8003a52:	4393      	bics	r3, r2
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003a54:	000a      	movs	r2, r1
 8003a56:	e7f3      	b.n	8003a40 <bma400_set_device_conf+0x2d8>
            if (int_map == BMA400_INT_CHANNEL_2)
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d008      	beq.n	8003a6e <bma400_set_device_conf+0x306>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <bma400_set_device_conf+0x314>
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d000      	beq.n	8003a66 <bma400_set_device_conf+0x2fe>
 8003a64:	e6fd      	b.n	8003862 <bma400_set_device_conf+0xfa>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003a66:	ab02      	add	r3, sp, #8
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e70f      	b.n	800388e <bma400_set_device_conf+0x126>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003a6e:	ab02      	add	r3, sp, #8
 8003a70:	785a      	ldrb	r2, [r3, #1]
 8003a72:	2320      	movs	r3, #32
 8003a74:	e6fa      	b.n	800386c <bma400_set_device_conf+0x104>
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	08018840 	.word	0x08018840
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 8003a7c:	ab02      	add	r3, sp, #8
 8003a7e:	2220      	movs	r2, #32
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	e6fa      	b.n	800387a <bma400_set_device_conf+0x112>
    if (rslt == BMA400_OK)
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d000      	beq.n	8003a8a <bma400_set_device_conf+0x322>
 8003a88:	e68f      	b.n	80037aa <bma400_set_device_conf+0x42>
        rslt = bma400_set_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003a8a:	002b      	movs	r3, r5
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	a902      	add	r1, sp, #8
 8003a90:	3021      	adds	r0, #33	; 0x21
 8003a92:	f7ff f954 	bl	8002d3e <bma400_set_regs>
 8003a96:	e688      	b.n	80037aa <bma400_set_device_conf+0x42>
        return rslt;
 8003a98:	2001      	movs	r0, #1
 8003a9a:	4240      	negs	r0, r0
 8003a9c:	e685      	b.n	80037aa <bma400_set_device_conf+0x42>
 8003a9e:	46c0      	nop			; (mov r8, r8)

08003aa0 <bma400_get_device_conf>:
{
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	000f      	movs	r7, r1
    uint8_t data_array[3] = { 0 };
 8003aa4:	495f      	ldr	r1, [pc, #380]	; (8003c24 <bma400_get_device_conf+0x184>)
{
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	0016      	movs	r6, r2
    uint8_t data_array[3] = { 0 };
 8003aaa:	3103      	adds	r1, #3
 8003aac:	2202      	movs	r2, #2
{
 8003aae:	0005      	movs	r5, r0
    uint8_t data_array[3] = { 0 };
 8003ab0:	a803      	add	r0, sp, #12
 8003ab2:	f012 fa9b 	bl	8015fec <memcpy>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	ab02      	add	r3, sp, #8
    rslt = null_ptr_check(dev);
 8003aba:	0030      	movs	r0, r6
    uint8_t data_array[3] = { 0 };
 8003abc:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
 8003abe:	f7ff f921 	bl	8002d04 <null_ptr_check>
 8003ac2:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003ac4:	d10e      	bne.n	8003ae4 <bma400_get_device_conf+0x44>
        rslt = bma400_get_regs(BMA400_INT_MAP_ADDR, data_array, 3, dev);
 8003ac6:	0033      	movs	r3, r6
 8003ac8:	2203      	movs	r2, #3
 8003aca:	2021      	movs	r0, #33	; 0x21
 8003acc:	a903      	add	r1, sp, #12
 8003ace:	f7ff f967 	bl	8002da0 <bma400_get_regs>
 8003ad2:	1e04      	subs	r4, r0, #0
        if (rslt == BMA400_OK)
 8003ad4:	d106      	bne.n	8003ae4 <bma400_get_device_conf+0x44>
 8003ad6:	210a      	movs	r1, #10
 8003ad8:	4379      	muls	r1, r7
 8003ada:	186b      	adds	r3, r5, r1
 8003adc:	9301      	str	r3, [sp, #4]
            for (idx = 0; idx < n_sett; idx++)
 8003ade:	9b01      	ldr	r3, [sp, #4]
 8003ae0:	429d      	cmp	r5, r3
 8003ae2:	d102      	bne.n	8003aea <bma400_get_device_conf+0x4a>
}
 8003ae4:	0020      	movs	r0, r4
 8003ae6:	b007      	add	sp, #28
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (conf[idx].type)
 8003aea:	7828      	ldrb	r0, [r5, #0]
 8003aec:	2805      	cmp	r0, #5
 8003aee:	d818      	bhi.n	8003b22 <bma400_get_device_conf+0x82>
 8003af0:	f7fc fb1c 	bl	800012c <__gnu_thumb1_case_uqi>
 8003af4:	4c3f1903 	.word	0x4c3f1903
 8003af8:	6d63      	.short	0x6d63
    rslt = bma400_get_regs(BMA400_AUTOWAKEUP_0_ADDR, data_array, 2, dev);
 8003afa:	0033      	movs	r3, r6
 8003afc:	2202      	movs	r2, #2
 8003afe:	202c      	movs	r0, #44	; 0x2c
 8003b00:	a904      	add	r1, sp, #16
 8003b02:	f7ff f94d 	bl	8002da0 <bma400_get_regs>
 8003b06:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b08:	d10b      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        wakeup_conf->wakeup_timeout = BMA400_GET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	ab02      	add	r3, sp, #8
 8003b0e:	7a5b      	ldrb	r3, [r3, #9]
 8003b10:	109a      	asrs	r2, r3, #2
 8003b12:	400a      	ands	r2, r1
        auto_lp_conf->auto_low_power_trigger = BMA400_GET_BITS_POS_0(data_array[1], BMA400_AUTO_LOW_POW);
 8003b14:	70aa      	strb	r2, [r5, #2]
        auto_lp_conf->auto_lp_timeout_threshold = timeout_msb << 4 | timeout_lsb;
 8003b16:	aa02      	add	r2, sp, #8
 8003b18:	7a12      	ldrb	r2, [r2, #8]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	80ab      	strh	r3, [r5, #4]
            for (idx = 0; idx < n_sett; idx++)
 8003b22:	350a      	adds	r5, #10
 8003b24:	e7db      	b.n	8003ade <bma400_get_device_conf+0x3e>
    rslt = bma400_get_regs(BMA400_WAKEUP_INT_CONF_0_ADDR, data_array, 5, dev);
 8003b26:	af04      	add	r7, sp, #16
 8003b28:	0033      	movs	r3, r6
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	0039      	movs	r1, r7
 8003b2e:	202f      	movs	r0, #47	; 0x2f
 8003b30:	f7ff f936 	bl	8002da0 <bma400_get_regs>
 8003b34:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b36:	d1f4      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        wakeup_conf->wakeup_ref_update = BMA400_GET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE);
 8003b38:	2203      	movs	r2, #3
        wakeup_conf->sample_count = BMA400_GET_BITS(data_array[0], BMA400_SAMPLE_COUNT);
 8003b3a:	2107      	movs	r1, #7
        wakeup_conf->wakeup_ref_update = BMA400_GET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE);
 8003b3c:	783b      	ldrb	r3, [r7, #0]
 8003b3e:	401a      	ands	r2, r3
 8003b40:	70aa      	strb	r2, [r5, #2]
        wakeup_conf->sample_count = BMA400_GET_BITS(data_array[0], BMA400_SAMPLE_COUNT);
 8003b42:	109a      	asrs	r2, r3, #2
 8003b44:	400a      	ands	r2, r1
 8003b46:	70ea      	strb	r2, [r5, #3]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003b48:	2201      	movs	r2, #1
        wakeup_conf->wakeup_axes_en = BMA400_GET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES);
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	712b      	strb	r3, [r5, #4]
        wakeup_conf->int_wkup_threshold = data_array[1];
 8003b4e:	787b      	ldrb	r3, [r7, #1]
 8003b50:	716b      	strb	r3, [r5, #5]
        wakeup_conf->int_wkup_ref_x = data_array[2];
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	71ab      	strb	r3, [r5, #6]
        wakeup_conf->int_wkup_ref_y = data_array[3];
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	71eb      	strb	r3, [r5, #7]
        wakeup_conf->int_wkup_ref_z = data_array[4];
 8003b5a:	793b      	ldrb	r3, [r7, #4]
 8003b5c:	722b      	strb	r3, [r5, #8]
            int_2_map = BMA400_GET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8003b62:	7818      	ldrb	r0, [r3, #0]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003b64:	4011      	ands	r1, r2
 8003b66:	4010      	ands	r0, r2
 8003b68:	002a      	movs	r2, r5
 8003b6a:	3209      	adds	r2, #9
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003b6c:	f7ff f8d9 	bl	8002d22 <check_mapped_interrupts>
            break;
 8003b70:	e7d7      	b.n	8003b22 <bma400_get_device_conf+0x82>
    rslt = bma400_get_regs(BMA400_AUTO_LOW_POW_0_ADDR, data_array, 2, dev);
 8003b72:	0033      	movs	r3, r6
 8003b74:	2202      	movs	r2, #2
 8003b76:	202a      	movs	r0, #42	; 0x2a
 8003b78:	a904      	add	r1, sp, #16
 8003b7a:	f7ff f911 	bl	8002da0 <bma400_get_regs>
 8003b7e:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b80:	d1cf      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        auto_lp_conf->auto_low_power_trigger = BMA400_GET_BITS_POS_0(data_array[1], BMA400_AUTO_LOW_POW);
 8003b82:	220f      	movs	r2, #15
 8003b84:	ab02      	add	r3, sp, #8
 8003b86:	7a5b      	ldrb	r3, [r3, #9]
 8003b88:	401a      	ands	r2, r3
 8003b8a:	e7c3      	b.n	8003b14 <bma400_get_device_conf+0x74>
    rslt = bma400_get_regs(BMA400_INT_12_IO_CTRL_ADDR, &reg_data, 1, dev);
 8003b8c:	0033      	movs	r3, r6
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2024      	movs	r0, #36	; 0x24
 8003b92:	a904      	add	r1, sp, #16
 8003b94:	f7ff f904 	bl	8002da0 <bma400_get_regs>
 8003b98:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003b9a:	d1c2      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        if (int_conf->int_chan == BMA400_INT_CHANNEL_1)
 8003b9c:	78ab      	ldrb	r3, [r5, #2]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <bma400_get_device_conf+0x10e>
            int_conf->pin_conf = BMA400_GET_BITS(reg_data, BMA400_INT_PIN1_CONF);
 8003ba2:	ab02      	add	r3, sp, #8
 8003ba4:	7a1b      	ldrb	r3, [r3, #8]
 8003ba6:	075b      	lsls	r3, r3, #29
            int_conf->pin_conf = BMA400_GET_BITS(reg_data, BMA400_INT_PIN2_CONF);
 8003ba8:	0f9b      	lsrs	r3, r3, #30
 8003baa:	70eb      	strb	r3, [r5, #3]
                        break;
 8003bac:	e7b9      	b.n	8003b22 <bma400_get_device_conf+0x82>
        if (int_conf->int_chan == BMA400_INT_CHANNEL_2)
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d1b7      	bne.n	8003b22 <bma400_get_device_conf+0x82>
            int_conf->pin_conf = BMA400_GET_BITS(reg_data, BMA400_INT_PIN2_CONF);
 8003bb2:	ab02      	add	r3, sp, #8
 8003bb4:	7a1b      	ldrb	r3, [r3, #8]
 8003bb6:	065b      	lsls	r3, r3, #25
 8003bb8:	e7f6      	b.n	8003ba8 <bma400_get_device_conf+0x108>
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003bba:	2701      	movs	r7, #1
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_INT_OVERRUN);
 8003bbc:	ab03      	add	r3, sp, #12
 8003bbe:	7859      	ldrb	r1, [r3, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_INT_OVERRUN);
 8003bc0:	7818      	ldrb	r0, [r3, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_INT_OVERRUN);
 8003bc2:	1109      	asrs	r1, r1, #4
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_INT_OVERRUN);
 8003bc4:	1100      	asrs	r0, r0, #4
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003bc6:	1caa      	adds	r2, r5, #2
 8003bc8:	4039      	ands	r1, r7
 8003bca:	4038      	ands	r0, r7
 8003bcc:	e7ce      	b.n	8003b6c <bma400_get_device_conf+0xcc>
    rslt = null_ptr_check(dev);
 8003bce:	0030      	movs	r0, r6
 8003bd0:	f7ff f898 	bl	8002d04 <null_ptr_check>
 8003bd4:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8003bd6:	d1a4      	bne.n	8003b22 <bma400_get_device_conf+0x82>
        rslt = bma400_get_regs(BMA400_FIFO_CONFIG_0_ADDR, data_array, 3, dev);
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	0033      	movs	r3, r6
 8003bdc:	2203      	movs	r2, #3
 8003bde:	0039      	movs	r1, r7
 8003be0:	2026      	movs	r0, #38	; 0x26
 8003be2:	f7ff f8dd 	bl	8002da0 <bma400_get_regs>
 8003be6:	1e04      	subs	r4, r0, #0
        if (rslt == BMA400_OK)
 8003be8:	d19b      	bne.n	8003b22 <bma400_get_device_conf+0x82>
            fifo_conf->fifo_watermark = ((uint16_t)data_array[2] << 8) | ((uint16_t)data_array[1]);
 8003bea:	2207      	movs	r2, #7
            fifo_conf->conf_regs = data_array[0];
 8003bec:	783b      	ldrb	r3, [r7, #0]
 8003bee:	70ab      	strb	r3, [r5, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8003bf0:	78bb      	ldrb	r3, [r7, #2]
            fifo_conf->fifo_watermark = ((uint16_t)data_array[2] << 8) | ((uint16_t)data_array[1]);
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	787a      	ldrb	r2, [r7, #1]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	80ab      	strh	r3, [r5, #4]
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003bfc:	2301      	movs	r3, #1
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_FULL);
 8003bfe:	af03      	add	r7, sp, #12
 8003c00:	7879      	ldrb	r1, [r7, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_FULL);
 8003c02:	7838      	ldrb	r0, [r7, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_FULL);
 8003c04:	1149      	asrs	r1, r1, #5
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_FULL);
 8003c06:	1140      	asrs	r0, r0, #5
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003c08:	4019      	ands	r1, r3
 8003c0a:	4018      	ands	r0, r3
 8003c0c:	1daa      	adds	r2, r5, #6
 8003c0e:	f7ff f888 	bl	8002d22 <check_mapped_interrupts>
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003c12:	2301      	movs	r3, #1
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_WM);
 8003c14:	7879      	ldrb	r1, [r7, #1]
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_WM);
 8003c16:	7838      	ldrb	r0, [r7, #0]
            int_2_map = BMA400_GET_BITS(data_array[1], BMA400_EN_FIFO_WM);
 8003c18:	1189      	asrs	r1, r1, #6
            int_1_map = BMA400_GET_BITS(data_array[0], BMA400_EN_FIFO_WM);
 8003c1a:	1180      	asrs	r0, r0, #6
            check_mapped_interrupts(int_1_map, int_2_map, int_map);
 8003c1c:	1dea      	adds	r2, r5, #7
 8003c1e:	4019      	ands	r1, r3
 8003c20:	4018      	ands	r0, r3
 8003c22:	e7a3      	b.n	8003b6c <bma400_get_device_conf+0xcc>
 8003c24:	08018840 	.word	0x08018840

08003c28 <bma400_get_interrupt_status>:
{
 8003c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c2a:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 8003c2c:	0008      	movs	r0, r1
{
 8003c2e:	000e      	movs	r6, r1
    rslt = null_ptr_check(dev);
 8003c30:	f7ff f868 	bl	8002d04 <null_ptr_check>
    if (rslt == BMA400_OK)
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d111      	bne.n	8003c5c <bma400_get_interrupt_status+0x34>
        rslt = bma400_get_regs(BMA400_INT_STAT0_ADDR, reg_data, 3, dev);
 8003c38:	ac01      	add	r4, sp, #4
 8003c3a:	0033      	movs	r3, r6
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	0021      	movs	r1, r4
 8003c40:	300e      	adds	r0, #14
 8003c42:	f7ff f8ad 	bl	8002da0 <bma400_get_regs>
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_INT_STATUS, reg_data[2]);
 8003c46:	221f      	movs	r2, #31
 8003c48:	7863      	ldrb	r3, [r4, #1]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	78a2      	ldrb	r2, [r4, #2]
 8003c4e:	0152      	lsls	r2, r2, #5
 8003c50:	4313      	orrs	r3, r2
        *int_status = ((uint16_t)reg_data[1] << 8) | reg_data[0];
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	7822      	ldrb	r2, [r4, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	802b      	strh	r3, [r5, #0]
}
 8003c5c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08003c5e <bma400_enable_interrupt>:
{
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c60:	0006      	movs	r6, r0
 8003c62:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 8003c64:	0010      	movs	r0, r2
{
 8003c66:	000c      	movs	r4, r1
 8003c68:	0017      	movs	r7, r2
    rslt = null_ptr_check(dev);
 8003c6a:	f7ff f84b 	bl	8002d04 <null_ptr_check>
 8003c6e:	1e03      	subs	r3, r0, #0
    if (rslt == BMA400_OK)
 8003c70:	d117      	bne.n	8003ca2 <bma400_enable_interrupt+0x44>
        rslt = bma400_get_regs(BMA400_INT_CONF_0_ADDR, reg_data, 2, dev);
 8003c72:	ad03      	add	r5, sp, #12
 8003c74:	003b      	movs	r3, r7
 8003c76:	2202      	movs	r2, #2
 8003c78:	0029      	movs	r1, r5
 8003c7a:	201f      	movs	r0, #31
 8003c7c:	f7ff f890 	bl	8002da0 <bma400_get_regs>
 8003c80:	1e03      	subs	r3, r0, #0
        if (rslt == BMA400_OK)
 8003c82:	d10e      	bne.n	8003ca2 <bma400_enable_interrupt+0x44>
 8003c84:	0064      	lsls	r4, r4, #1
 8003c86:	1932      	adds	r2, r6, r4
 8003c88:	9201      	str	r2, [sp, #4]
            for (idx = 0; idx < n_sett; idx++)
 8003c8a:	9a01      	ldr	r2, [sp, #4]
 8003c8c:	4296      	cmp	r6, r2
 8003c8e:	d10b      	bne.n	8003ca8 <bma400_enable_interrupt+0x4a>
            if (rslt == BMA400_OK)
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <bma400_enable_interrupt+0x44>
                rslt = bma400_set_regs(BMA400_INT_CONF_0_ADDR, reg_data, 2, dev);
 8003c94:	003b      	movs	r3, r7
 8003c96:	2202      	movs	r2, #2
 8003c98:	0029      	movs	r1, r5
 8003c9a:	201f      	movs	r0, #31
 8003c9c:	f7ff f84f 	bl	8002d3e <bma400_set_regs>
 8003ca0:	0003      	movs	r3, r0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	b005      	add	sp, #20
 8003ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (int_select[idx].type)
 8003ca8:	7830      	ldrb	r0, [r6, #0]
                conf = int_select[idx].conf;
 8003caa:	7874      	ldrb	r4, [r6, #1]
                switch (int_select[idx].type)
 8003cac:	280b      	cmp	r0, #11
 8003cae:	d85f      	bhi.n	8003d70 <bma400_enable_interrupt+0x112>
 8003cb0:	f7fc fa3c 	bl	800012c <__gnu_thumb1_case_uqi>
 8003cb4:	19140e06 	.word	0x19140e06
 8003cb8:	2f28231e 	.word	0x2f28231e
 8003cbc:	433f3a35 	.word	0x433f3a35
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_DRDY, conf);
 8003cc0:	217f      	movs	r1, #127	; 0x7f
 8003cc2:	782a      	ldrb	r2, [r5, #0]
 8003cc4:	01e4      	lsls	r4, r4, #7
 8003cc6:	400a      	ands	r2, r1
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_FIFO_WM, conf);
 8003cc8:	4314      	orrs	r4, r2
 8003cca:	702c      	strb	r4, [r5, #0]
            for (idx = 0; idx < n_sett; idx++)
 8003ccc:	3602      	adds	r6, #2
 8003cce:	e7dc      	b.n	8003c8a <bma400_enable_interrupt+0x2c>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_FIFO_WM, conf);
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	782a      	ldrb	r2, [r5, #0]
 8003cd4:	01a4      	lsls	r4, r4, #6
 8003cd6:	438a      	bics	r2, r1
 8003cd8:	400c      	ands	r4, r1
 8003cda:	e7f5      	b.n	8003cc8 <bma400_enable_interrupt+0x6a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_FIFO_FULL, conf);
 8003cdc:	2120      	movs	r1, #32
 8003cde:	782a      	ldrb	r2, [r5, #0]
 8003ce0:	0164      	lsls	r4, r4, #5
 8003ce2:	438a      	bics	r2, r1
 8003ce4:	e7f8      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_GEN2, conf);
 8003ce6:	2108      	movs	r1, #8
 8003ce8:	782a      	ldrb	r2, [r5, #0]
 8003cea:	00e4      	lsls	r4, r4, #3
 8003cec:	438a      	bics	r2, r1
 8003cee:	e7f3      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_GEN1, conf);
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	782a      	ldrb	r2, [r5, #0]
 8003cf4:	00a4      	lsls	r4, r4, #2
 8003cf6:	438a      	bics	r2, r1
 8003cf8:	e7ee      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_EN_ORIENT_CH, conf);
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	782a      	ldrb	r2, [r5, #0]
 8003cfe:	0064      	lsls	r4, r4, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	e7e9      	b.n	8003cd8 <bma400_enable_interrupt+0x7a>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_LATCH, conf);
 8003d04:	217f      	movs	r1, #127	; 0x7f
 8003d06:	786a      	ldrb	r2, [r5, #1]
 8003d08:	01e4      	lsls	r4, r4, #7
 8003d0a:	400a      	ands	r2, r1
                        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_EN_STEP_INT, conf);
 8003d0c:	4314      	orrs	r4, r2
 8003d0e:	706c      	strb	r4, [r5, #1]
                        break;
 8003d10:	e7dc      	b.n	8003ccc <bma400_enable_interrupt+0x6e>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_ACTCH, conf);
 8003d12:	2110      	movs	r1, #16
 8003d14:	786a      	ldrb	r2, [r5, #1]
 8003d16:	0124      	lsls	r4, r4, #4
 8003d18:	438a      	bics	r2, r1
                        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_EN_STEP_INT, conf);
 8003d1a:	400c      	ands	r4, r1
 8003d1c:	e7f6      	b.n	8003d0c <bma400_enable_interrupt+0xae>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_D_TAP, conf);
 8003d1e:	2108      	movs	r1, #8
 8003d20:	786a      	ldrb	r2, [r5, #1]
 8003d22:	00e4      	lsls	r4, r4, #3
 8003d24:	438a      	bics	r2, r1
 8003d26:	e7f8      	b.n	8003d1a <bma400_enable_interrupt+0xbc>
                        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_EN_S_TAP, conf);
 8003d28:	2104      	movs	r1, #4
 8003d2a:	786a      	ldrb	r2, [r5, #1]
 8003d2c:	00a4      	lsls	r4, r4, #2
 8003d2e:	438a      	bics	r2, r1
 8003d30:	e7f3      	b.n	8003d1a <bma400_enable_interrupt+0xbc>
                        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_EN_STEP_INT, conf);
 8003d32:	2101      	movs	r1, #1
 8003d34:	786a      	ldrb	r2, [r5, #1]
 8003d36:	438a      	bics	r2, r1
 8003d38:	e7ef      	b.n	8003d1a <bma400_enable_interrupt+0xbc>
    rslt = bma400_get_regs(BMA400_AUTOWAKEUP_1_ADDR, &reg_data, 1, dev);
 8003d3a:	a902      	add	r1, sp, #8
 8003d3c:	003b      	movs	r3, r7
 8003d3e:	2201      	movs	r2, #1
 8003d40:	202d      	movs	r0, #45	; 0x2d
 8003d42:	3103      	adds	r1, #3
 8003d44:	f7ff f82c 	bl	8002da0 <bma400_get_regs>
 8003d48:	1e03      	subs	r3, r0, #0
    if (rslt == BMA400_OK)
 8003d4a:	d1bf      	bne.n	8003ccc <bma400_enable_interrupt+0x6e>
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	ab02      	add	r3, sp, #8
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	0064      	lsls	r4, r4, #1
 8003d54:	4393      	bics	r3, r2
 8003d56:	4014      	ands	r4, r2
 8003d58:	431c      	orrs	r4, r3
        rslt = bma400_set_regs(BMA400_AUTOWAKEUP_1_ADDR, &reg_data, 1, dev);
 8003d5a:	a902      	add	r1, sp, #8
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8003d5c:	ab02      	add	r3, sp, #8
 8003d5e:	70dc      	strb	r4, [r3, #3]
        rslt = bma400_set_regs(BMA400_AUTOWAKEUP_1_ADDR, &reg_data, 1, dev);
 8003d60:	202d      	movs	r0, #45	; 0x2d
 8003d62:	003b      	movs	r3, r7
 8003d64:	3a01      	subs	r2, #1
 8003d66:	3103      	adds	r1, #3
 8003d68:	f7fe ffe9 	bl	8002d3e <bma400_set_regs>
 8003d6c:	0003      	movs	r3, r0
                        break;
 8003d6e:	e7ad      	b.n	8003ccc <bma400_enable_interrupt+0x6e>
                switch (int_select[idx].type)
 8003d70:	2304      	movs	r3, #4
 8003d72:	425b      	negs	r3, r3
 8003d74:	e7aa      	b.n	8003ccc <bma400_enable_interrupt+0x6e>

08003d76 <delay_ms>:

    return rslt;
}

void delay_ms(uint32_t period)
{
 8003d76:	b510      	push	{r4, lr}
    /* Wait for a period amount of ms*/
	HAL_Delay(period);
 8003d78:	f008 fc96 	bl	800c6a8 <HAL_Delay>
}
 8003d7c:	bd10      	pop	{r4, pc}
	...

08003d80 <i2c_reg_write>:

int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8003d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d82:	0014      	movs	r4, r2

    /* Write to registers using I2C. Return 0 for a successful execution. */
	 HAL_StatusTypeDef writeStatus;
	    writeStatus = HAL_I2C_Mem_Write(&hi2c1, (i2c_addr<<1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, length, 1000);
 8003d84:	000a      	movs	r2, r1
 8003d86:	0041      	lsls	r1, r0, #1
 8003d88:	20fa      	movs	r0, #250	; 0xfa
 8003d8a:	0080      	lsls	r0, r0, #2
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	9400      	str	r4, [sp, #0]
 8003d92:	2301      	movs	r3, #1
 8003d94:	4803      	ldr	r0, [pc, #12]	; (8003da4 <i2c_reg_write+0x24>)
 8003d96:	f009 fe31 	bl	800d9fc <HAL_I2C_Mem_Write>
	    if (writeStatus != HAL_OK)
 8003d9a:	1e43      	subs	r3, r0, #1
 8003d9c:	4198      	sbcs	r0, r3
	    {
	        return -1;
	    }
    return 0;
}
 8003d9e:	4240      	negs	r0, r0
 8003da0:	b004      	add	sp, #16
 8003da2:	bd10      	pop	{r4, pc}
 8003da4:	20001898 	.word	0x20001898

08003da8 <i2c_reg_read>:

int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8003da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003daa:	0014      	movs	r4, r2

    /* Read from registers using I2C. Return 0 for a successful execution. */
	HAL_StatusTypeDef readStatus;
		readStatus = HAL_I2C_Mem_Read(&hi2c1, (i2c_addr<<1), reg_addr,I2C_MEMADD_SIZE_8BIT, reg_data, length,1000);
 8003dac:	000a      	movs	r2, r1
 8003dae:	0041      	lsls	r1, r0, #1
 8003db0:	20fa      	movs	r0, #250	; 0xfa
 8003db2:	0080      	lsls	r0, r0, #2
 8003db4:	9002      	str	r0, [sp, #8]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	9400      	str	r4, [sp, #0]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <i2c_reg_read+0x24>)
 8003dbe:	f009 fed7 	bl	800db70 <HAL_I2C_Mem_Read>
		if(readStatus != HAL_OK)
 8003dc2:	1e43      	subs	r3, r0, #1
 8003dc4:	4198      	sbcs	r0, r3
		{
			return -1;
		}
    return 0;
}
 8003dc6:	4240      	negs	r0, r0
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	20001898 	.word	0x20001898

08003dd0 <lsb_to_ms2>:
            break;
    }
}

float lsb_to_ms2(int16_t val, float g_range, uint8_t bit_width)
{
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0015      	movs	r5, r2
 8003dd4:	1c0c      	adds	r4, r1, #0
    float half_scale = (float)(1 << bit_width) / 2.0f;

    return GRAVITY_EARTH * val * g_range * 100 / half_scale;
 8003dd6:	f7fd f8cb 	bl	8000f70 <__aeabi_i2f>
 8003dda:	490b      	ldr	r1, [pc, #44]	; (8003e08 <lsb_to_ms2+0x38>)
 8003ddc:	f7fc fdd4 	bl	8000988 <__aeabi_fmul>
 8003de0:	1c21      	adds	r1, r4, #0
 8003de2:	f7fc fdd1 	bl	8000988 <__aeabi_fmul>
 8003de6:	4909      	ldr	r1, [pc, #36]	; (8003e0c <lsb_to_ms2+0x3c>)
 8003de8:	f7fc fdce 	bl	8000988 <__aeabi_fmul>
 8003dec:	1c04      	adds	r4, r0, #0
    float half_scale = (float)(1 << bit_width) / 2.0f;
 8003dee:	2001      	movs	r0, #1
 8003df0:	40a8      	lsls	r0, r5
 8003df2:	f7fd f8bd 	bl	8000f70 <__aeabi_i2f>
 8003df6:	21fc      	movs	r1, #252	; 0xfc
 8003df8:	0589      	lsls	r1, r1, #22
 8003dfa:	f7fc fdc5 	bl	8000988 <__aeabi_fmul>
 8003dfe:	1c01      	adds	r1, r0, #0
    return GRAVITY_EARTH * val * g_range * 100 / half_scale;
 8003e00:	1c20      	adds	r0, r4, #0
 8003e02:	f7fc fca9 	bl	8000758 <__aeabi_fdiv>
}
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	411ce80a 	.word	0x411ce80a
 8003e0c:	42c80000 	.word	0x42c80000

08003e10 <BoardCriticalSectionBegin>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
#define         ID2                                 ( 0x1FF80054 )
#define         ID3                                 ( 0x1FF80064 )

void BoardCriticalSectionBegin( uint32_t *mask )
{
    *mask = __get_PRIMASK( );
 8003e14:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e16:	b672      	cpsid	i
    __disable_irq( );
}
 8003e18:	4770      	bx	lr

08003e1a <BoardCriticalSectionEnd>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	6803      	ldr	r3, [r0, #0]
 8003e1c:	f383 8810 	msr	PRIMASK, r3

void BoardCriticalSectionEnd( uint32_t *mask )
{
    __set_PRIMASK( *mask );
}
 8003e20:	4770      	bx	lr
	...

08003e24 <BoardGetUniqueId>:
 * NOTES
 *        STM32L0x1 has 12 byte Unique Device ID (rm0377/28.2#page=833)
 *        in Factory Option Bytes (rm0377/Table3#page=54).
 *        But since the ID must be 8 bytes, we need to get creative.
 */
void BoardGetUniqueId(uint8_t *DevEui) {
 8003e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e26:	0005      	movs	r5, r0
  uint32_t w0 = HAL_GetUIDw0();
 8003e28:	f008 fc50 	bl	800c6cc <HAL_GetUIDw0>
 8003e2c:	0004      	movs	r4, r0
  uint32_t w1 = HAL_GetUIDw1();
 8003e2e:	f008 fc53 	bl	800c6d8 <HAL_GetUIDw1>
 8003e32:	0006      	movs	r6, r0
  uint32_t w2 = HAL_GetUIDw2();
 8003e34:	f008 fc56 	bl	800c6e4 <HAL_GetUIDw2>

  // Assumptions
  assert((w0 & 0x00FF0000) == 0x00470000); // workaroundable
 8003e38:	23ff      	movs	r3, #255	; 0xff
 8003e3a:	218e      	movs	r1, #142	; 0x8e
 8003e3c:	041b      	lsls	r3, r3, #16
  uint32_t w2 = HAL_GetUIDw2();
 8003e3e:	0002      	movs	r2, r0
  assert((w0 & 0x00FF0000) == 0x00470000); // workaroundable
 8003e40:	4023      	ands	r3, r4
 8003e42:	03c9      	lsls	r1, r1, #15
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d005      	beq.n	8003e54 <BoardGetUniqueId+0x30>
 8003e48:	215e      	movs	r1, #94	; 0x5e
 8003e4a:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <BoardGetUniqueId+0x134>)
 8003e4c:	4a43      	ldr	r2, [pc, #268]	; (8003f5c <BoardGetUniqueId+0x138>)
  assert((w0 & 0x0000F0F0) == 0x00003030); // important
 8003e4e:	4844      	ldr	r0, [pc, #272]	; (8003f60 <BoardGetUniqueId+0x13c>)
 8003e50:	f012 f858 	bl	8015f04 <__assert_func>
 8003e54:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <BoardGetUniqueId+0x140>)
 8003e56:	4944      	ldr	r1, [pc, #272]	; (8003f68 <BoardGetUniqueId+0x144>)
 8003e58:	4023      	ands	r3, r4
 8003e5a:	428b      	cmp	r3, r1
 8003e5c:	d003      	beq.n	8003e66 <BoardGetUniqueId+0x42>
 8003e5e:	215f      	movs	r1, #95	; 0x5f
 8003e60:	4b42      	ldr	r3, [pc, #264]	; (8003f6c <BoardGetUniqueId+0x148>)
 8003e62:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003e64:	e7f3      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w1 & 0xF0F0F0F0) == 0x30303030); // important
 8003e66:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <BoardGetUniqueId+0x14c>)
 8003e68:	4942      	ldr	r1, [pc, #264]	; (8003f74 <BoardGetUniqueId+0x150>)
 8003e6a:	4033      	ands	r3, r6
 8003e6c:	428b      	cmp	r3, r1
 8003e6e:	d003      	beq.n	8003e78 <BoardGetUniqueId+0x54>
 8003e70:	2160      	movs	r1, #96	; 0x60
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <BoardGetUniqueId+0x154>)
 8003e74:	4a39      	ldr	r2, [pc, #228]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003e76:	e7ea      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w1 >>  0 & 0x0F) < 9); // important
 8003e78:	210f      	movs	r1, #15
 8003e7a:	0033      	movs	r3, r6
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	469c      	mov	ip, r3
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d903      	bls.n	8003e8c <BoardGetUniqueId+0x68>
 8003e84:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <BoardGetUniqueId+0x158>)
 8003e86:	4a35      	ldr	r2, [pc, #212]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003e88:	3152      	adds	r1, #82	; 0x52
 8003e8a:	e7e0      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w1 >>  8 & 0x0F) < 9); // important
 8003e8c:	0a37      	lsrs	r7, r6, #8
 8003e8e:	400f      	ands	r7, r1
 8003e90:	2f08      	cmp	r7, #8
 8003e92:	d903      	bls.n	8003e9c <BoardGetUniqueId+0x78>
 8003e94:	2162      	movs	r1, #98	; 0x62
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <BoardGetUniqueId+0x15c>)
 8003e98:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003e9a:	e7d8      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w1 >> 16 & 0x0F) < 9); // important
 8003e9c:	0c30      	lsrs	r0, r6, #16
 8003e9e:	4008      	ands	r0, r1
 8003ea0:	2808      	cmp	r0, #8
 8003ea2:	d903      	bls.n	8003eac <BoardGetUniqueId+0x88>
 8003ea4:	2163      	movs	r1, #99	; 0x63
 8003ea6:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <BoardGetUniqueId+0x160>)
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003eaa:	e7d0      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w1 >> 24 & 0x0F) < 9); // important
 8003eac:	0e36      	lsrs	r6, r6, #24
 8003eae:	400e      	ands	r6, r1
 8003eb0:	9601      	str	r6, [sp, #4]
 8003eb2:	2e08      	cmp	r6, #8
 8003eb4:	d903      	bls.n	8003ebe <BoardGetUniqueId+0x9a>
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <BoardGetUniqueId+0x164>)
 8003eba:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003ebc:	e7c7      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w0 >>  0 & 0x0F) < 9); // important
 8003ebe:	0026      	movs	r6, r4
 8003ec0:	400e      	ands	r6, r1
 8003ec2:	2e08      	cmp	r6, #8
 8003ec4:	d903      	bls.n	8003ece <BoardGetUniqueId+0xaa>
 8003ec6:	2165      	movs	r1, #101	; 0x65
 8003ec8:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <BoardGetUniqueId+0x168>)
 8003eca:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003ecc:	e7bf      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w0 >>  8 & 0x0F) < 9); // important
 8003ece:	0a23      	lsrs	r3, r4, #8
 8003ed0:	4019      	ands	r1, r3
 8003ed2:	2908      	cmp	r1, #8
 8003ed4:	d903      	bls.n	8003ede <BoardGetUniqueId+0xba>
 8003ed6:	2166      	movs	r1, #102	; 0x66
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <BoardGetUniqueId+0x16c>)
 8003eda:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003edc:	e7b7      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  assert((w2 & 0xFF00FF00) == 0x00000000); // workaroundable
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <BoardGetUniqueId+0x170>)
 8003ee0:	421a      	tst	r2, r3
 8003ee2:	d003      	beq.n	8003eec <BoardGetUniqueId+0xc8>
 8003ee4:	2167      	movs	r1, #103	; 0x67
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <BoardGetUniqueId+0x174>)
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <BoardGetUniqueId+0x138>)
 8003eea:	e7b0      	b.n	8003e4e <BoardGetUniqueId+0x2a>
  uint32_t lotnr =
    (w1 >>  0 & 0x0F) *      1 +
    (w1 >>  8 & 0x0F) *     10 +
    (w1 >> 16 & 0x0F) *    100 +
    (w1 >> 24 & 0x0F) *   1000 +
    (w0 >>  0 & 0x0F) *  10000 +
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <BoardGetUniqueId+0x178>)
 8003eee:	435e      	muls	r6, r3
    (w1 >> 16 & 0x0F) *    100 +
 8003ef0:	2364      	movs	r3, #100	; 0x64
 8003ef2:	4358      	muls	r0, r3
    (w1 >> 24 & 0x0F) *   1000 +
 8003ef4:	4466      	add	r6, ip
 8003ef6:	1836      	adds	r6, r6, r0
    (w1 >>  8 & 0x0F) *     10 +
 8003ef8:	200a      	movs	r0, #10
 8003efa:	4347      	muls	r7, r0
    (w1 >> 24 & 0x0F) *   1000 +
 8003efc:	19f6      	adds	r6, r6, r7
 8003efe:	27fa      	movs	r7, #250	; 0xfa
 8003f00:	9b01      	ldr	r3, [sp, #4]
 8003f02:	00bf      	lsls	r7, r7, #2
 8003f04:	435f      	muls	r7, r3
 8003f06:	19f6      	adds	r6, r6, r7
    (w0 >>  8 & 0x0F) * 100000;
 8003f08:	4f25      	ldr	r7, [pc, #148]	; (8003fa0 <BoardGetUniqueId+0x17c>)
  uint8_t wafnr = w0 >> 24 & 0xFF;
  uint16_t uuid =
    ((w2 & 0x000000FF) >> 0 & 0x00FF) |
 8003f0a:	30f5      	adds	r0, #245	; 0xf5
    (w0 >>  8 & 0x0F) * 100000;
 8003f0c:	4379      	muls	r1, r7
    ((w2 & 0x00FF0000) >> 8 & 0xFF00);
 8003f0e:	0a17      	lsrs	r7, r2, #8
 8003f10:	003b      	movs	r3, r7
  uint32_t lotnr =
 8003f12:	1871      	adds	r1, r6, r1
  uint8_t wafnr = w0 >> 24 & 0xFF;
 8003f14:	0e26      	lsrs	r6, r4, #24

  /* Apparent constants
   * ------------------
   */
  uint8_t lotchar = (w0 & 0x00FF0000) >> 16;  // = 0x47
 8003f16:	0c24      	lsrs	r4, r4, #16
    ((w2 & 0x00FF0000) >> 8 & 0xFF00);
 8003f18:	4383      	bics	r3, r0
    ((w2 & 0x000000FF) >> 0 & 0x00FF) |
 8003f1a:	4002      	ands	r2, r0
  uint8_t lotchar = (w0 & 0x00FF0000) >> 16;  // = 0x47
 8003f1c:	b2e4      	uxtb	r4, r4
  uint16_t uuid =
 8003f1e:	431a      	orrs	r2, r3
  uint8_t uid0    = (w2 & 0x0000FF00) >> 8;   // = 0x00
  uint8_t uid1    = (w2 & 0xFF000000) >> 24;  // = 0x00
  uint8_t bitmask = 0;
  bitmask |= 0x47U == lotchar ? 0 : 0x01;
 8003f20:	0023      	movs	r3, r4
 8003f22:	3b47      	subs	r3, #71	; 0x47
 8003f24:	1e58      	subs	r0, r3, #1
 8003f26:	4183      	sbcs	r3, r0
  uint8_t uid0    = (w2 & 0x0000FF00) >> 8;   // = 0x00
 8003f28:	b2ff      	uxtb	r7, r7
  bitmask |= 0x00U == uid0    ? 0 : 0x02;
 8003f2a:	0038      	movs	r0, r7
  bitmask |= 0x47U == lotchar ? 0 : 0x01;
 8003f2c:	469c      	mov	ip, r3
  bitmask |= 0x00U == uid0    ? 0 : 0x02;
 8003f2e:	1e43      	subs	r3, r0, #1
 8003f30:	4198      	sbcs	r0, r3
 8003f32:	4663      	mov	r3, ip
  uint16_t uuid =
 8003f34:	b292      	uxth	r2, r2
  bitmask |= 0x00U == uid0    ? 0 : 0x02;
 8003f36:	0040      	lsls	r0, r0, #1
   * | 0100    | uid1    | lotchar |                     |
   * | 0101    | uid1    | lotchar |                     |
   * | 0110    | uid1    | uid0    |                     |
   * | 0111    | uid1    | uid0    | Collision possible! |
   */
  DevEui[0] = (uuid & 0x00FF) >> 0;
 8003f38:	702a      	strb	r2, [r5, #0]
  bitmask |= 0x00U == uid0    ? 0 : 0x02;
 8003f3a:	4303      	orrs	r3, r0
  DevEui[1] = (uuid & 0xFF00) >> 8;
 8003f3c:	0a12      	lsrs	r2, r2, #8
 8003f3e:	706a      	strb	r2, [r5, #1]
  DevEui[2] = (bitmask & 0x6) == 0x06 ? uid0 : lotchar;
  DevEui[3] = (bitmask & 0x4) == 0x04 ? uid1 : uid0;
  DevEui[4] = wafnr;
  DevEui[5] = (lotnr & 0x0000FF) >>  0;
 8003f40:	7169      	strb	r1, [r5, #5]
  DevEui[6] = (lotnr & 0x00FF00) >>  8;
 8003f42:	0a0a      	lsrs	r2, r1, #8
  DevEui[7] = (lotnr & 0x0F0000U) >> 16 | ((unsigned)bitmask << 4);
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	0c09      	lsrs	r1, r1, #16
 8003f48:	4319      	orrs	r1, r3
  DevEui[3] = (bitmask & 0x4) == 0x04 ? uid1 : uid0;
 8003f4a:	70ef      	strb	r7, [r5, #3]
  DevEui[4] = wafnr;
 8003f4c:	712e      	strb	r6, [r5, #4]
  DevEui[2] = (bitmask & 0x6) == 0x06 ? uid0 : lotchar;
 8003f4e:	70ac      	strb	r4, [r5, #2]
  DevEui[6] = (lotnr & 0x00FF00) >>  8;
 8003f50:	71aa      	strb	r2, [r5, #6]
  DevEui[7] = (lotnr & 0x0F0000U) >> 16 | ((unsigned)bitmask << 4);
 8003f52:	71e9      	strb	r1, [r5, #7]
}
 8003f54:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	080189f8 	.word	0x080189f8
 8003f5c:	08018b1f 	.word	0x08018b1f
 8003f60:	08018a18 	.word	0x08018a18
 8003f64:	0000f0f0 	.word	0x0000f0f0
 8003f68:	00003030 	.word	0x00003030
 8003f6c:	08018a3f 	.word	0x08018a3f
 8003f70:	f0f0f0f0 	.word	0xf0f0f0f0
 8003f74:	30303030 	.word	0x30303030
 8003f78:	08018a5f 	.word	0x08018a5f
 8003f7c:	08018a7f 	.word	0x08018a7f
 8003f80:	08018a94 	.word	0x08018a94
 8003f84:	08018aa9 	.word	0x08018aa9
 8003f88:	08018abf 	.word	0x08018abf
 8003f8c:	08018ad5 	.word	0x08018ad5
 8003f90:	08018aea 	.word	0x08018aea
 8003f94:	ff00ff00 	.word	0xff00ff00
 8003f98:	08018aff 	.word	0x08018aff
 8003f9c:	00002710 	.word	0x00002710
 8003fa0:	000186a0 	.word	0x000186a0

08003fa4 <DelayMsMcu>:
 */
#include "stm32l0xx.h"
#include "delay-board.h"

void DelayMsMcu( uint32_t ms )
{
 8003fa4:	b510      	push	{r4, lr}
    HAL_Delay( ms );
 8003fa6:	f008 fb7f 	bl	800c6a8 <HAL_Delay>
}
 8003faa:	bd10      	pop	{r4, pc}

08003fac <EepromMcuWriteBuffer>:
#include "boards/utilities.h"
#include "eeprom-board.h"
#include "hardware.h"

LmnStatus_t EepromMcuWriteBuffer( uint16_t addr, uint8_t *buffer, uint16_t size )
{
 8003fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fae:	0005      	movs	r5, r0
 8003fb0:	000c      	movs	r4, r1
 8003fb2:	0016      	movs	r6, r2
    LmnStatus_t status = LMN_STATUS_ERROR;
 8003fb4:	2700      	movs	r7, #0

    assert_param( ( EEPROM_LORA + addr ) >= EEPROM_LORA );
    assert_param( buffer != NULL );
    assert_param( size < ( EEPROM_LORA_END - EEPROM_LORA ) );

    if( HAL_FLASHEx_DATAEEPROM_Unlock( ) == HAL_OK )
 8003fb6:	f009 f8c1 	bl	800d13c <HAL_FLASHEx_DATAEEPROM_Unlock>
 8003fba:	42b8      	cmp	r0, r7
 8003fbc:	d114      	bne.n	8003fe8 <EepromMcuWriteBuffer+0x3c>
    {
        CRITICAL_SECTION_BEGIN( );
 8003fbe:	a801      	add	r0, sp, #4
 8003fc0:	f7ff ff26 	bl	8003e10 <BoardCriticalSectionBegin>
        for( uint16_t i = 0; i < size; i++ )
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <EepromMcuWriteBuffer+0x44>)
 8003fc6:	19a6      	adds	r6, r4, r6
 8003fc8:	18ed      	adds	r5, r5, r3
 8003fca:	42b4      	cmp	r4, r6
 8003fcc:	d008      	beq.n	8003fe0 <EepromMcuWriteBuffer+0x34>
        {
            if( HAL_FLASHEx_DATAEEPROM_Program( FLASH_TYPEPROGRAMDATA_BYTE,
 8003fce:	0029      	movs	r1, r5
 8003fd0:	7822      	ldrb	r2, [r4, #0]
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f009 f8e6 	bl	800d1a4 <HAL_FLASHEx_DATAEEPROM_Program>
 8003fd8:	3401      	adds	r4, #1
 8003fda:	3501      	adds	r5, #1
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d0f4      	beq.n	8003fca <EepromMcuWriteBuffer+0x1e>
            {
                // Failed to write EEPROM
                break;
            }
        }
        CRITICAL_SECTION_END( );
 8003fe0:	a801      	add	r0, sp, #4
 8003fe2:	f7ff ff1a 	bl	8003e1a <BoardCriticalSectionEnd>
        status = LMN_STATUS_OK;
 8003fe6:	2701      	movs	r7, #1
    }

    HAL_FLASHEx_DATAEEPROM_Lock( );
 8003fe8:	f009 f8c0 	bl	800d16c <HAL_FLASHEx_DATAEEPROM_Lock>
    return status;
}
 8003fec:	0038      	movs	r0, r7
 8003fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ff0:	08080010 	.word	0x08080010

08003ff4 <EepromMcuReadBuffer>:

LmnStatus_t EepromMcuReadBuffer( uint16_t addr, uint8_t *buffer, uint16_t size )
{
 8003ff4:	000b      	movs	r3, r1
 8003ff6:	b510      	push	{r4, lr}
    assert_param( ( EEPROM_LORA + addr ) >= EEPROM_LORA );
    assert_param( buffer != NULL );
    assert_param( size < ( EEPROM_LORA_END - EEPROM_LORA ) );

    memcpy1( buffer, ( uint8_t* )( EEPROM_LORA + addr ), size );
 8003ff8:	4903      	ldr	r1, [pc, #12]	; (8004008 <EepromMcuReadBuffer+0x14>)
 8003ffa:	1841      	adds	r1, r0, r1
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fca8 	bl	8004952 <memcpy1>
    return LMN_STATUS_OK;
}
 8004002:	2001      	movs	r0, #1
 8004004:	bd10      	pop	{r4, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	08080010 	.word	0x08080010

0800400c <GpioMcuSetInterrupt>:
{
    obj->Context = context;
}

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800400c:	b530      	push	{r4, r5, lr}
 800400e:	0014      	movs	r4, r2
    if( obj->pin < IOE_0 )
 8004010:	2200      	movs	r2, #0
 8004012:	5682      	ldrsb	r2, [r0, r2]
{
 8004014:	0005      	movs	r5, r0
 8004016:	b087      	sub	sp, #28
    if( obj->pin < IOE_0 )
 8004018:	2a6f      	cmp	r2, #111	; 0x6f
 800401a:	dc2c      	bgt.n	8004076 <GpioMcuSetInterrupt+0x6a>
        uint32_t priority = 0;

        IRQn_Type IRQnb = EXTI0_1_IRQn;
        GPIO_InitTypeDef   GPIO_InitStructure;

        if( irqHandler == NULL )
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02a      	beq.n	8004076 <GpioMcuSetInterrupt+0x6a>
        {
            return;
        }

        obj->IrqHandler = irqHandler;
 8004020:	6103      	str	r3, [r0, #16]

        GPIO_InitStructure.Pin =  obj->pinIndex;
 8004022:	8843      	ldrh	r3, [r0, #2]
 8004024:	9301      	str	r3, [sp, #4]

        if( irqMode == IRQ_RISING_EDGE )
 8004026:	2901      	cmp	r1, #1
 8004028:	d127      	bne.n	800407a <GpioMcuSetInterrupt+0x6e>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800402a:	2388      	movs	r3, #136	; 0x88
 800402c:	035b      	lsls	r3, r3, #13
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800402e:	9302      	str	r3, [sp, #8]
        }

        GPIO_InitStructure.Pull = obj->pull;
 8004030:	7aab      	ldrb	r3, [r5, #10]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8004032:	a901      	add	r1, sp, #4
        GPIO_InitStructure.Pull = obj->pull;
 8004034:	9303      	str	r3, [sp, #12]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004036:	2302      	movs	r3, #2
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8004038:	6868      	ldr	r0, [r5, #4]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800403a:	9304      	str	r3, [sp, #16]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800403c:	f009 f8dc 	bl	800d1f8 <HAL_GPIO_Init>
 8004040:	2100      	movs	r1, #0
 8004042:	2c03      	cmp	r4, #3
 8004044:	d801      	bhi.n	800404a <GpioMcuSetInterrupt+0x3e>
 8004046:	4b25      	ldr	r3, [pc, #148]	; (80040dc <GpioMcuSetInterrupt+0xd0>)
 8004048:	5d19      	ldrb	r1, [r3, r4]
        default:
            priority = 0;
            break;
        }

        switch( obj->pinIndex )
 800404a:	886b      	ldrh	r3, [r5, #2]
 800404c:	2406      	movs	r4, #6
 800404e:	2b08      	cmp	r3, #8
 8004050:	d004      	beq.n	800405c <GpioMcuSetInterrupt+0x50>
 8004052:	d818      	bhi.n	8004086 <GpioMcuSetInterrupt+0x7a>
 8004054:	1f1c      	subs	r4, r3, #4
 8004056:	4263      	negs	r3, r4
 8004058:	415c      	adcs	r4, r3
 800405a:	3405      	adds	r4, #5
            break;
        default:
            break;
        }

        GpioIrq[( obj->pin ) & 0x0F] = obj;
 800405c:	220f      	movs	r2, #15
 800405e:	782b      	ldrb	r3, [r5, #0]

        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8004060:	0020      	movs	r0, r4
        GpioIrq[( obj->pin ) & 0x0F] = obj;
 8004062:	4013      	ands	r3, r2
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <GpioMcuSetInterrupt+0xd4>)
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	509d      	str	r5, [r3, r2]
        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800406a:	2200      	movs	r2, #0
 800406c:	f008 fe4c 	bl	800cd08 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( IRQnb );
 8004070:	0020      	movs	r0, r4
 8004072:	f008 fe73 	bl	800cd5c <HAL_NVIC_EnableIRQ>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 8004076:	b007      	add	sp, #28
 8004078:	bd30      	pop	{r4, r5, pc}
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800407a:	2384      	movs	r3, #132	; 0x84
        else if( irqMode == IRQ_FALLING_EDGE )
 800407c:	2902      	cmp	r1, #2
 800407e:	d000      	beq.n	8004082 <GpioMcuSetInterrupt+0x76>
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004080:	23c4      	movs	r3, #196	; 0xc4
 8004082:	039b      	lsls	r3, r3, #14
 8004084:	e7d3      	b.n	800402e <GpioMcuSetInterrupt+0x22>
        switch( obj->pinIndex )
 8004086:	2280      	movs	r2, #128	; 0x80
            IRQnb = EXTI4_15_IRQn;
 8004088:	2407      	movs	r4, #7
        switch( obj->pinIndex )
 800408a:	00d2      	lsls	r2, r2, #3
 800408c:	4293      	cmp	r3, r2
 800408e:	d0e5      	beq.n	800405c <GpioMcuSetInterrupt+0x50>
 8004090:	d811      	bhi.n	80040b6 <GpioMcuSetInterrupt+0xaa>
 8004092:	2b80      	cmp	r3, #128	; 0x80
 8004094:	d0e2      	beq.n	800405c <GpioMcuSetInterrupt+0x50>
 8004096:	d809      	bhi.n	80040ac <GpioMcuSetInterrupt+0xa0>
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d0df      	beq.n	800405c <GpioMcuSetInterrupt+0x50>
 800409c:	2210      	movs	r2, #16
 800409e:	3b10      	subs	r3, #16
 80040a0:	4393      	bics	r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0d9      	beq.n	800405c <GpioMcuSetInterrupt+0x50>
        IRQn_Type IRQnb = EXTI0_1_IRQn;
 80040a8:	2405      	movs	r4, #5
 80040aa:	e7d7      	b.n	800405c <GpioMcuSetInterrupt+0x50>
        switch( obj->pinIndex )
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <GpioMcuSetInterrupt+0xd8>)
 80040b0:	3bff      	subs	r3, #255	; 0xff
        IRQn_Type IRQnb = EXTI0_1_IRQn;
 80040b2:	2405      	movs	r4, #5
 80040b4:	e009      	b.n	80040ca <GpioMcuSetInterrupt+0xbe>
        switch( obj->pinIndex )
 80040b6:	2280      	movs	r2, #128	; 0x80
            IRQnb = EXTI4_15_IRQn;
 80040b8:	2407      	movs	r4, #7
        switch( obj->pinIndex )
 80040ba:	0192      	lsls	r2, r2, #6
 80040bc:	4293      	cmp	r3, r2
 80040be:	d0cd      	beq.n	800405c <GpioMcuSetInterrupt+0x50>
 80040c0:	d807      	bhi.n	80040d2 <GpioMcuSetInterrupt+0xc6>
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <GpioMcuSetInterrupt+0xdc>)
        IRQn_Type IRQnb = EXTI0_1_IRQn;
 80040c4:	3c02      	subs	r4, #2
        switch( obj->pinIndex )
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <GpioMcuSetInterrupt+0xe0>)
 80040ca:	4213      	tst	r3, r2
 80040cc:	d1c6      	bne.n	800405c <GpioMcuSetInterrupt+0x50>
            IRQnb = EXTI4_15_IRQn;
 80040ce:	3402      	adds	r4, #2
 80040d0:	e7c4      	b.n	800405c <GpioMcuSetInterrupt+0x50>
        switch( obj->pinIndex )
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <GpioMcuSetInterrupt+0xe4>)
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <GpioMcuSetInterrupt+0xe8>)
 80040d8:	e7eb      	b.n	80040b2 <GpioMcuSetInterrupt+0xa6>
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	08018b30 	.word	0x08018b30
 80040e0:	20000328 	.word	0x20000328
 80040e4:	0000feff 	.word	0x0000feff
 80040e8:	fffff800 	.word	0xfffff800
 80040ec:	0000f7ff 	.word	0x0000f7ff
 80040f0:	ffffc000 	.word	0xffffc000
 80040f4:	0000bfff 	.word	0x0000bfff

080040f8 <GpioMcuWrite>:
    }
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
    if( obj->pin < IOE_0 )
 80040f8:	2300      	movs	r3, #0
 80040fa:	56c3      	ldrsb	r3, [r0, r3]
{
 80040fc:	b510      	push	{r4, lr}
    if( obj->pin < IOE_0 )
 80040fe:	2b6f      	cmp	r3, #111	; 0x6f
 8004100:	dc06      	bgt.n	8004110 <GpioMcuWrite+0x18>
        if( obj == NULL )
        {
            assert_param( LMN_STATUS_ERROR );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 8004102:	3301      	adds	r3, #1
 8004104:	d004      	beq.n	8004110 <GpioMcuWrite+0x18>
        {
            return;
        }
        HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 8004106:	b2ca      	uxtb	r2, r1
 8004108:	8841      	ldrh	r1, [r0, #2]
 800410a:	6840      	ldr	r0, [r0, #4]
 800410c:	f009 f940 	bl	800d390 <HAL_GPIO_WritePin>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 8004110:	bd10      	pop	{r4, pc}
	...

08004114 <GpioMcuInit>:
{
 8004114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004116:	b08d      	sub	sp, #52	; 0x34
 8004118:	0004      	movs	r4, r0
 800411a:	a812      	add	r0, sp, #72	; 0x48
 800411c:	7805      	ldrb	r5, [r0, #0]
 800411e:	9301      	str	r3, [sp, #4]
    if( pin < IOE_0 )
 8004120:	296f      	cmp	r1, #111	; 0x6f
 8004122:	dc25      	bgt.n	8004170 <GpioMcuInit+0x5c>
        obj->pin = pin;
 8004124:	7021      	strb	r1, [r4, #0]
        if( pin == NC )
 8004126:	1c4b      	adds	r3, r1, #1
 8004128:	d022      	beq.n	8004170 <GpioMcuInit+0x5c>
        obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800412a:	2701      	movs	r7, #1
 800412c:	200f      	movs	r0, #15
 800412e:	003e      	movs	r6, r7
 8004130:	4008      	ands	r0, r1
 8004132:	4086      	lsls	r6, r0
        if( ( obj->pin & 0xF0 ) == 0x00 )
 8004134:	20f0      	movs	r0, #240	; 0xf0
 8004136:	4684      	mov	ip, r0
 8004138:	4663      	mov	r3, ip
        obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800413a:	8066      	strh	r6, [r4, #2]
        if( ( obj->pin & 0xF0 ) == 0x00 )
 800413c:	4008      	ands	r0, r1
 800413e:	4219      	tst	r1, r3
 8004140:	d118      	bne.n	8004174 <GpioMcuInit+0x60>
            obj->port = GPIOA;
 8004142:	21a0      	movs	r1, #160	; 0xa0
 8004144:	05c9      	lsls	r1, r1, #23
 8004146:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOA_CLK_ENABLE( );
 8004148:	492d      	ldr	r1, [pc, #180]	; (8004200 <GpioMcuInit+0xec>)
 800414a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800414c:	4338      	orrs	r0, r7
 800414e:	62c8      	str	r0, [r1, #44]	; 0x2c
 8004150:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004152:	4039      	ands	r1, r7
 8004154:	9103      	str	r1, [sp, #12]
 8004156:	9903      	ldr	r1, [sp, #12]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004158:	2102      	movs	r1, #2
        GPIO_InitStructure.Pin =  obj->pinIndex ;
 800415a:	9607      	str	r6, [sp, #28]
        GPIO_InitStructure.Pull = obj->pull = type;
 800415c:	72a5      	strb	r5, [r4, #10]
 800415e:	9509      	str	r5, [sp, #36]	; 0x24
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004160:	910a      	str	r1, [sp, #40]	; 0x28
        if( mode == PIN_INPUT )
 8004162:	2a00      	cmp	r2, #0
 8004164:	d130      	bne.n	80041c8 <GpioMcuInit+0xb4>
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8004166:	9208      	str	r2, [sp, #32]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8004168:	6860      	ldr	r0, [r4, #4]
 800416a:	a907      	add	r1, sp, #28
 800416c:	f009 f844 	bl	800d1f8 <HAL_GPIO_Init>
}
 8004170:	b00d      	add	sp, #52	; 0x34
 8004172:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( ( obj->pin & 0xF0 ) == 0x10 )
 8004174:	2810      	cmp	r0, #16
 8004176:	d10b      	bne.n	8004190 <GpioMcuInit+0x7c>
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 8004178:	2302      	movs	r3, #2
 800417a:	4821      	ldr	r0, [pc, #132]	; (8004200 <GpioMcuInit+0xec>)
            obj->port = GPIOB;
 800417c:	4921      	ldr	r1, [pc, #132]	; (8004204 <GpioMcuInit+0xf0>)
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 800417e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
            obj->port = GPIOB;
 8004180:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 8004182:	431f      	orrs	r7, r3
 8004184:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004186:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004188:	4019      	ands	r1, r3
 800418a:	9104      	str	r1, [sp, #16]
 800418c:	9904      	ldr	r1, [sp, #16]
 800418e:	e7e3      	b.n	8004158 <GpioMcuInit+0x44>
        else if( ( obj->pin & 0xF0 ) == 0x20 )
 8004190:	2820      	cmp	r0, #32
 8004192:	d10b      	bne.n	80041ac <GpioMcuInit+0x98>
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 8004194:	2304      	movs	r3, #4
 8004196:	481a      	ldr	r0, [pc, #104]	; (8004200 <GpioMcuInit+0xec>)
            obj->port = GPIOC;
 8004198:	491b      	ldr	r1, [pc, #108]	; (8004208 <GpioMcuInit+0xf4>)
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 800419a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
            obj->port = GPIOC;
 800419c:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 800419e:	431f      	orrs	r7, r3
 80041a0:	62c7      	str	r7, [r0, #44]	; 0x2c
 80041a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041a4:	4019      	ands	r1, r3
 80041a6:	9105      	str	r1, [sp, #20]
 80041a8:	9905      	ldr	r1, [sp, #20]
 80041aa:	e7d5      	b.n	8004158 <GpioMcuInit+0x44>
        else if( ( obj->pin & 0xF0 ) == 0x30 )
 80041ac:	2830      	cmp	r0, #48	; 0x30
 80041ae:	d1d3      	bne.n	8004158 <GpioMcuInit+0x44>
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 80041b0:	2308      	movs	r3, #8
 80041b2:	4813      	ldr	r0, [pc, #76]	; (8004200 <GpioMcuInit+0xec>)
            obj->port = GPIOD;
 80041b4:	4915      	ldr	r1, [pc, #84]	; (800420c <GpioMcuInit+0xf8>)
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 80041b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
            obj->port = GPIOD;
 80041b8:	6061      	str	r1, [r4, #4]
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 80041ba:	431f      	orrs	r7, r3
 80041bc:	62c7      	str	r7, [r0, #44]	; 0x2c
 80041be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041c0:	4019      	ands	r1, r3
 80041c2:	9106      	str	r1, [sp, #24]
 80041c4:	9906      	ldr	r1, [sp, #24]
 80041c6:	e7c7      	b.n	8004158 <GpioMcuInit+0x44>
        else if( mode == PIN_ANALOGIC )
 80041c8:	2a03      	cmp	r2, #3
 80041ca:	d0cc      	beq.n	8004166 <GpioMcuInit+0x52>
        else if( mode == PIN_ALTERNATE_FCT )
 80041cc:	2a02      	cmp	r2, #2
 80041ce:	d108      	bne.n	80041e2 <GpioMcuInit+0xce>
            if( config == PIN_OPEN_DRAIN )
 80041d0:	9b01      	ldr	r3, [sp, #4]
                GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80041d2:	2112      	movs	r1, #18
            if( config == PIN_OPEN_DRAIN )
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d000      	beq.n	80041da <GpioMcuInit+0xc6>
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80041d8:	0011      	movs	r1, r2
            GPIO_InitStructure.Alternate = value;
 80041da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041dc:	9108      	str	r1, [sp, #32]
 80041de:	930b      	str	r3, [sp, #44]	; 0x2c
 80041e0:	e7c2      	b.n	8004168 <GpioMcuInit+0x54>
            if( config == PIN_OPEN_DRAIN )
 80041e2:	9b01      	ldr	r3, [sp, #4]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d108      	bne.n	80041fa <GpioMcuInit+0xe6>
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80041e8:	3310      	adds	r3, #16
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80041ea:	9308      	str	r3, [sp, #32]
        if( mode == PIN_OUTPUT )
 80041ec:	2a01      	cmp	r2, #1
 80041ee:	d1bb      	bne.n	8004168 <GpioMcuInit+0x54>
            GpioMcuWrite( obj, value );
 80041f0:	0020      	movs	r0, r4
 80041f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80041f4:	f7ff ff80 	bl	80040f8 <GpioMcuWrite>
 80041f8:	e7b6      	b.n	8004168 <GpioMcuInit+0x54>
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e7f5      	b.n	80041ea <GpioMcuInit+0xd6>
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	40021000 	.word	0x40021000
 8004204:	50000400 	.word	0x50000400
 8004208:	50000800 	.word	0x50000800
 800420c:	50000c00 	.word	0x50000c00

08004210 <GpioMcuRead>:
    }
}

uint32_t GpioMcuRead( Gpio_t *obj )
{
    if( obj->pin < IOE_0 )
 8004210:	2200      	movs	r2, #0
 8004212:	5682      	ldrsb	r2, [r0, r2]
{
 8004214:	0003      	movs	r3, r0
 8004216:	b510      	push	{r4, lr}
    {
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        return GpioIoeRead( obj );
#else
        return 0;
 8004218:	2000      	movs	r0, #0
    if( obj->pin < IOE_0 )
 800421a:	2a6f      	cmp	r2, #111	; 0x6f
 800421c:	dc05      	bgt.n	800422a <GpioMcuRead+0x1a>
        if( obj->pin == NC )
 800421e:	3201      	adds	r2, #1
 8004220:	d003      	beq.n	800422a <GpioMcuRead+0x1a>
        return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
 8004222:	8859      	ldrh	r1, [r3, #2]
 8004224:	6858      	ldr	r0, [r3, #4]
 8004226:	f009 f8ad 	bl	800d384 <HAL_GPIO_ReadPin>
#endif
    }
}
 800422a:	bd10      	pop	{r4, pc}

0800422c <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 800422c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800422e:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8004230:	a801      	add	r0, sp, #4
{
 8004232:	000d      	movs	r5, r1
    CRITICAL_SECTION_BEGIN( );
 8004234:	f7ff fdec 	bl	8003e10 <BoardCriticalSectionBegin>

    switch( mode )
 8004238:	2d00      	cmp	r5, #0
 800423a:	d009      	beq.n	8004250 <LpmSetStopMode+0x24>
 800423c:	2d01      	cmp	r5, #1
 800423e:	d103      	bne.n	8004248 <LpmSetStopMode+0x1c>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <LpmSetStopMode+0x30>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4314      	orrs	r4, r2
 8004246:	601c      	str	r4, [r3, #0]
        {
            break;
        }
    }

    CRITICAL_SECTION_END( );
 8004248:	a801      	add	r0, sp, #4
 800424a:	f7ff fde6 	bl	8003e1a <BoardCriticalSectionEnd>
    return;
}
 800424e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            StopModeDisable &= ~( uint32_t )id;
 8004250:	4a02      	ldr	r2, [pc, #8]	; (800425c <LpmSetStopMode+0x30>)
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	43a3      	bics	r3, r4
 8004256:	6013      	str	r3, [r2, #0]
            break;
 8004258:	e7f6      	b.n	8004248 <LpmSetStopMode+0x1c>
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	20000368 	.word	0x20000368

08004260 <RtcGetCalendarValue>:

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8004260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004262:	0005      	movs	r5, r0
 8004264:	000c      	movs	r4, r1
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8004266:	4e23      	ldr	r6, [pc, #140]	; (80042f4 <RtcGetCalendarValue+0x94>)
        HAL_RTC_GetDate( &hrtc, date, RTC_FORMAT_BIN );
 8004268:	4f23      	ldr	r7, [pc, #140]	; (80042f8 <RtcGetCalendarValue+0x98>)
        firstRead = RTC->SSR;
 800426a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        HAL_RTC_GetDate( &hrtc, date, RTC_FORMAT_BIN );
 800426c:	2200      	movs	r2, #0
 800426e:	0029      	movs	r1, r5
 8004270:	0038      	movs	r0, r7
        firstRead = RTC->SSR;
 8004272:	9301      	str	r3, [sp, #4]
        HAL_RTC_GetDate( &hrtc, date, RTC_FORMAT_BIN );
 8004274:	f00b f916 	bl	800f4a4 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &hrtc, time, RTC_FORMAT_BIN );
 8004278:	2200      	movs	r2, #0
 800427a:	0021      	movs	r1, r4
 800427c:	0038      	movs	r0, r7
 800427e:	f00b f8e7 	bl	800f450 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8004282:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004284:	9a01      	ldr	r2, [sp, #4]
 8004286:	4293      	cmp	r3, r2
 8004288:	d1ed      	bne.n	8004266 <RtcGetCalendarValue+0x6>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 800428a:	2103      	movs	r1, #3
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 800428c:	78ea      	ldrb	r2, [r5, #3]
 800428e:	481b      	ldr	r0, [pc, #108]	; (80042fc <RtcGetCalendarValue+0x9c>)

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8004290:	786e      	ldrb	r6, [r5, #1]
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 8004292:	4350      	muls	r0, r2
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8004294:	400a      	ands	r2, r1
 8004296:	4253      	negs	r3, r2
 8004298:	415a      	adcs	r2, r3
 800429a:	4253      	negs	r3, r2
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <RtcGetCalendarValue+0xa0>)
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 800429e:	3e01      	subs	r6, #1
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80042a0:	4013      	ands	r3, r2
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <RtcGetCalendarValue+0xa4>)

    seconds += ( date->Date -1 );
 80042a4:	78ad      	ldrb	r5, [r5, #2]
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80042a6:	189b      	adds	r3, r3, r2
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80042a8:	223d      	movs	r2, #61	; 0x3d
 80042aa:	4372      	muls	r2, r6
 80042ac:	0076      	lsls	r6, r6, #1
 80042ae:	40f3      	lsrs	r3, r6
 80042b0:	3201      	adds	r2, #1
 80042b2:	0fd7      	lsrs	r7, r2, #31
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80042b4:	3003      	adds	r0, #3
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80042b6:	18ba      	adds	r2, r7, r2
 80042b8:	3d01      	subs	r5, #1
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80042ba:	0880      	lsrs	r0, r0, #2
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80042bc:	1052      	asrs	r2, r2, #1
 80042be:	1828      	adds	r0, r5, r0
 80042c0:	1810      	adds	r0, r2, r0
 80042c2:	400b      	ands	r3, r1
    seconds += ( date->Date -1 );
 80042c4:	1ac3      	subs	r3, r0, r3

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 80042c6:	4810      	ldr	r0, [pc, #64]	; (8004308 <RtcGetCalendarValue+0xa8>)

    seconds += ( ( uint32_t )time->Seconds + 
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 80042c8:	7822      	ldrb	r2, [r4, #0]
    seconds *= SECONDS_IN_1DAY;
 80042ca:	4358      	muls	r0, r3
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 80042cc:	23e1      	movs	r3, #225	; 0xe1
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	4353      	muls	r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80042d2:	223c      	movs	r2, #60	; 0x3c
 80042d4:	7861      	ldrb	r1, [r4, #1]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80042d6:	25ff      	movs	r5, #255	; 0xff
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80042d8:	434a      	muls	r2, r1
 80042da:	189b      	adds	r3, r3, r2
    seconds += ( ( uint32_t )time->Seconds + 
 80042dc:	78a2      	ldrb	r2, [r4, #2]
    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80042de:	6864      	ldr	r4, [r4, #4]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80042e0:	189b      	adds	r3, r3, r2
    seconds += ( ( uint32_t )time->Seconds + 
 80042e2:	181b      	adds	r3, r3, r0
    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80042e4:	0e19      	lsrs	r1, r3, #24
 80042e6:	0218      	lsls	r0, r3, #8
 80042e8:	2300      	movs	r3, #0
 80042ea:	1b2a      	subs	r2, r5, r4
 80042ec:	1880      	adds	r0, r0, r2
 80042ee:	4159      	adcs	r1, r3

    return( calendarValue );
}
 80042f0:	b003      	add	sp, #12
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	40002800 	.word	0x40002800
 80042f8:	200019a4 	.word	0x200019a4
 80042fc:	000005b5 	.word	0x000005b5
 8004300:	ffaaaab0 	.word	0xffaaaab0
 8004304:	0099aaa0 	.word	0x0099aaa0
 8004308:	00015180 	.word	0x00015180

0800430c <RtcSetTimerContext>:
{
 800430c:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 800430e:	4c04      	ldr	r4, [pc, #16]	; (8004320 <RtcSetTimerContext+0x14>)
 8004310:	0020      	movs	r0, r4
 8004312:	1d21      	adds	r1, r4, #4
 8004314:	3018      	adds	r0, #24
 8004316:	f7ff ffa3 	bl	8004260 <RtcGetCalendarValue>
 800431a:	6020      	str	r0, [r4, #0]
}
 800431c:	bd10      	pop	{r4, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	20000394 	.word	0x20000394

08004324 <RtcGetTimerContext>:
    return RtcTimerContext.Time;
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <RtcGetTimerContext+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
}
 8004328:	4770      	bx	lr
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	20000394 	.word	0x20000394

08004330 <RtcGetMinimumTimeout>:
}
 8004330:	2003      	movs	r0, #3
 8004332:	4770      	bx	lr

08004334 <RtcMs2Tick>:
{
 8004334:	b510      	push	{r4, lr}
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8004336:	0ec1      	lsrs	r1, r0, #27
 8004338:	227d      	movs	r2, #125	; 0x7d
 800433a:	2300      	movs	r3, #0
 800433c:	0140      	lsls	r0, r0, #5
 800433e:	f7fc f8d3 	bl	80004e8 <__aeabi_uldivmod>
}
 8004342:	bd10      	pop	{r4, pc}

08004344 <RtcTick2Ms>:
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8004344:	21fa      	movs	r1, #250	; 0xfa
{
 8004346:	0002      	movs	r2, r0
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8004348:	0089      	lsls	r1, r1, #2
    tick = tick & PREDIV_S;
 800434a:	b2c0      	uxtb	r0, r0
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 800434c:	4348      	muls	r0, r1
    uint32_t seconds = tick >> N_PREDIV_S;
 800434e:	0a12      	lsrs	r2, r2, #8
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8004350:	434a      	muls	r2, r1
 8004352:	0a00      	lsrs	r0, r0, #8
 8004354:	1880      	adds	r0, r0, r2
}
 8004356:	4770      	bx	lr

08004358 <RtcStopAlarm>:
    HAL_RTC_DeactivateAlarm( &hrtc, RTC_ALARM_A );
 8004358:	2180      	movs	r1, #128	; 0x80
{
 800435a:	b510      	push	{r4, lr}
    HAL_RTC_DeactivateAlarm( &hrtc, RTC_ALARM_A );
 800435c:	4c07      	ldr	r4, [pc, #28]	; (800437c <RtcStopAlarm+0x24>)
 800435e:	0049      	lsls	r1, r1, #1
 8004360:	0020      	movs	r0, r4
 8004362:	f00a fe95 	bl	800f090 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG( &hrtc, RTC_FLAG_ALRAF );
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <RtcStopAlarm+0x28>)
 800436a:	68ca      	ldr	r2, [r1, #12]
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	4313      	orrs	r3, r2
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8004370:	2280      	movs	r2, #128	; 0x80
    __HAL_RTC_ALARM_CLEAR_FLAG( &hrtc, RTC_FLAG_ALRAF );
 8004372:	60cb      	str	r3, [r1, #12]
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <RtcStopAlarm+0x2c>)
 8004376:	0292      	lsls	r2, r2, #10
 8004378:	615a      	str	r2, [r3, #20]
}
 800437a:	bd10      	pop	{r4, pc}
 800437c:	200019a4 	.word	0x200019a4
 8004380:	fffffe7f 	.word	0xfffffe7f
 8004384:	40010400 	.word	0x40010400

08004388 <RtcStartAlarm>:
{
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 800438a:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <RtcStartAlarm+0xf0>)
{
 800438c:	b087      	sub	sp, #28
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 800438e:	795a      	ldrb	r2, [r3, #5]
 8004390:	791d      	ldrb	r5, [r3, #4]
 8004392:	9204      	str	r2, [sp, #16]
 8004394:	799a      	ldrb	r2, [r3, #6]
 8004396:	689f      	ldr	r7, [r3, #8]
 8004398:	9203      	str	r2, [sp, #12]
 800439a:	79da      	ldrb	r2, [r3, #7]
{
 800439c:	0006      	movs	r6, r0
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 800439e:	9202      	str	r2, [sp, #8]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 80043a0:	7e5a      	ldrb	r2, [r3, #25]
 80043a2:	9201      	str	r2, [sp, #4]
 80043a4:	7e9c      	ldrb	r4, [r3, #26]
 80043a6:	7edb      	ldrb	r3, [r3, #27]
 80043a8:	9305      	str	r3, [sp, #20]
    RtcStopAlarm( );
 80043aa:	f7ff ffd5 	bl	8004358 <RtcStopAlarm>
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	1bd7      	subs	r7, r2, r7
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 80043b2:	4032      	ands	r2, r6
 80043b4:	18ba      	adds	r2, r7, r2
    timeout >>= N_PREDIV_S;
 80043b6:	0a33      	lsrs	r3, r6, #8
    while( timeout >= TM_SECONDS_IN_1DAY )
 80043b8:	4e30      	ldr	r6, [pc, #192]	; (800447c <RtcStartAlarm+0xf4>)
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 80043ba:	b292      	uxth	r2, r2
    rtcAlarmDays =  date.Date;
 80043bc:	b2a0      	uxth	r0, r4
    while( timeout >= TM_SECONDS_IN_1DAY )
 80043be:	42b3      	cmp	r3, r6
 80043c0:	d83b      	bhi.n	800443a <RtcStartAlarm+0xb2>
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80043c2:	21e1      	movs	r1, #225	; 0xe1
    rtcAlarmHours = time.Hours;
 80043c4:	b2ad      	uxth	r5, r5
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80043c6:	0109      	lsls	r1, r1, #4
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d23b      	bcs.n	8004444 <RtcStartAlarm+0xbc>
    rtcAlarmMinutes = time.Minutes;
 80043cc:	4669      	mov	r1, sp
 80043ce:	8a0f      	ldrh	r7, [r1, #16]
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 80043d0:	2b3b      	cmp	r3, #59	; 0x3b
 80043d2:	d83c      	bhi.n	800444e <RtcStartAlarm+0xc6>
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80043d4:	0a14      	lsrs	r4, r2, #8
 80043d6:	b2d6      	uxtb	r6, r2
 80043d8:	9a03      	ldr	r2, [sp, #12]
 80043da:	18a4      	adds	r4, r4, r2
 80043dc:	18e4      	adds	r4, r4, r3
 80043de:	b2a4      	uxth	r4, r4
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 80043e0:	2c3b      	cmp	r4, #59	; 0x3b
 80043e2:	d838      	bhi.n	8004456 <RtcStartAlarm+0xce>
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 80043e4:	2f3b      	cmp	r7, #59	; 0x3b
 80043e6:	d83b      	bhi.n	8004460 <RtcStartAlarm+0xd8>
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 80043e8:	2d17      	cmp	r5, #23
 80043ea:	d83e      	bhi.n	800446a <RtcStartAlarm+0xe2>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 80043ec:	9b01      	ldr	r3, [sp, #4]
    if( date.Year % 4 == 0 ) 
 80043ee:	9a05      	ldr	r2, [sp, #20]
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 80043f0:	3b01      	subs	r3, #1
    if( date.Year % 4 == 0 ) 
 80043f2:	0792      	lsls	r2, r2, #30
 80043f4:	d13e      	bne.n	8004474 <RtcStartAlarm+0xec>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 80043f6:	4a22      	ldr	r2, [pc, #136]	; (8004480 <RtcStartAlarm+0xf8>)
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 80043f8:	5cd1      	ldrb	r1, [r2, r3]
 80043fa:	4281      	cmp	r1, r0
 80043fc:	d202      	bcs.n	8004404 <RtcStartAlarm+0x7c>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 80043fe:	f7fc f823 	bl	8000448 <__aeabi_idivmod>
 8004402:	b288      	uxth	r0, r1
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8004404:	23ff      	movs	r3, #255	; 0xff
 8004406:	1b9e      	subs	r6, r3, r6
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8004408:	2380      	movs	r3, #128	; 0x80
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 800440a:	491e      	ldr	r1, [pc, #120]	; (8004484 <RtcStartAlarm+0xfc>)
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 800440c:	051b      	lsls	r3, r3, #20
 800440e:	618b      	str	r3, [r1, #24]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8004410:	1c4b      	adds	r3, r1, #1
 8004412:	77d8      	strb	r0, [r3, #31]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8004414:	9b02      	ldr	r3, [sp, #8]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8004416:	2200      	movs	r2, #0
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8004418:	70cb      	strb	r3, [r1, #3]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 800441a:	2380      	movs	r3, #128	; 0x80
    HAL_RTC_SetAlarm_IT( &hrtc, &RtcAlarm, RTC_FORMAT_BIN );
 800441c:	481a      	ldr	r0, [pc, #104]	; (8004488 <RtcStartAlarm+0x100>)
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 800441e:	005b      	lsls	r3, r3, #1
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8004420:	604e      	str	r6, [r1, #4]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8004422:	708c      	strb	r4, [r1, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8004424:	704f      	strb	r7, [r1, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8004426:	700d      	strb	r5, [r1, #0]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8004428:	61ca      	str	r2, [r1, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 800442a:	614a      	str	r2, [r1, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 800442c:	624b      	str	r3, [r1, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800442e:	60ca      	str	r2, [r1, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004430:	610a      	str	r2, [r1, #16]
    HAL_RTC_SetAlarm_IT( &hrtc, &RtcAlarm, RTC_FORMAT_BIN );
 8004432:	f00a ff2d 	bl	800f290 <HAL_RTC_SetAlarm_IT>
}
 8004436:	b007      	add	sp, #28
 8004438:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeout -= TM_SECONDS_IN_1DAY;
 800443a:	4914      	ldr	r1, [pc, #80]	; (800448c <RtcStartAlarm+0x104>)
        rtcAlarmDays++;
 800443c:	3001      	adds	r0, #1
        timeout -= TM_SECONDS_IN_1DAY;
 800443e:	185b      	adds	r3, r3, r1
        rtcAlarmDays++;
 8004440:	b280      	uxth	r0, r0
 8004442:	e7bc      	b.n	80043be <RtcStartAlarm+0x36>
        timeout -= TM_SECONDS_IN_1HOUR;
 8004444:	4c12      	ldr	r4, [pc, #72]	; (8004490 <RtcStartAlarm+0x108>)
        rtcAlarmHours++;
 8004446:	3501      	adds	r5, #1
        timeout -= TM_SECONDS_IN_1HOUR;
 8004448:	191b      	adds	r3, r3, r4
        rtcAlarmHours++;
 800444a:	b2ad      	uxth	r5, r5
 800444c:	e7bc      	b.n	80043c8 <RtcStartAlarm+0x40>
        rtcAlarmMinutes++;
 800444e:	3701      	adds	r7, #1
        timeout -= TM_SECONDS_IN_1MINUTE;
 8004450:	3b3c      	subs	r3, #60	; 0x3c
        rtcAlarmMinutes++;
 8004452:	b2bf      	uxth	r7, r7
 8004454:	e7bc      	b.n	80043d0 <RtcStartAlarm+0x48>
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8004456:	3c3c      	subs	r4, #60	; 0x3c
        rtcAlarmMinutes++;
 8004458:	3701      	adds	r7, #1
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 800445a:	b2a4      	uxth	r4, r4
        rtcAlarmMinutes++;
 800445c:	b2bf      	uxth	r7, r7
 800445e:	e7bf      	b.n	80043e0 <RtcStartAlarm+0x58>
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8004460:	3f3c      	subs	r7, #60	; 0x3c
        rtcAlarmHours++;
 8004462:	3501      	adds	r5, #1
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8004464:	b2bf      	uxth	r7, r7
        rtcAlarmHours++;
 8004466:	b2ad      	uxth	r5, r5
 8004468:	e7bc      	b.n	80043e4 <RtcStartAlarm+0x5c>
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 800446a:	3d18      	subs	r5, #24
        rtcAlarmDays++;
 800446c:	3001      	adds	r0, #1
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 800446e:	b2ad      	uxth	r5, r5
        rtcAlarmDays++;
 8004470:	b280      	uxth	r0, r0
 8004472:	e7b9      	b.n	80043e8 <RtcStartAlarm+0x60>
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <RtcStartAlarm+0x10c>)
 8004476:	e7bf      	b.n	80043f8 <RtcStartAlarm+0x70>
 8004478:	20000394 	.word	0x20000394
 800447c:	0001517f 	.word	0x0001517f
 8004480:	08018b40 	.word	0x08018b40
 8004484:	2000036c 	.word	0x2000036c
 8004488:	200019a4 	.word	0x200019a4
 800448c:	fffeae80 	.word	0xfffeae80
 8004490:	fffff1f0 	.word	0xfffff1f0
 8004494:	08018b34 	.word	0x08018b34

08004498 <RtcGetTimerValue>:
{
 8004498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800449a:	4668      	mov	r0, sp
 800449c:	a901      	add	r1, sp, #4
 800449e:	f7ff fedf 	bl	8004260 <RtcGetCalendarValue>
}
 80044a2:	b007      	add	sp, #28
 80044a4:	bd00      	pop	{pc}
	...

080044a8 <RtcGetTimerElapsedTime>:
{
 80044a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 80044aa:	4668      	mov	r0, sp
 80044ac:	a901      	add	r1, sp, #4
 80044ae:	f7ff fed7 	bl	8004260 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 80044b2:	4b02      	ldr	r3, [pc, #8]	; (80044bc <RtcGetTimerElapsedTime+0x14>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1ac0      	subs	r0, r0, r3
}
 80044b8:	b007      	add	sp, #28
 80044ba:	bd00      	pop	{pc}
 80044bc:	20000394 	.word	0x20000394

080044c0 <RtcSetAlarm>:
{
 80044c0:	b510      	push	{r4, lr}
 80044c2:	0004      	movs	r4, r0
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 80044c4:	f7ff fff0 	bl	80044a8 <RtcGetTimerElapsedTime>
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 80044c8:	2100      	movs	r1, #0
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 80044ca:	1a20      	subs	r0, r4, r0
 80044cc:	2803      	cmp	r0, #3
 80044ce:	d800      	bhi.n	80044d2 <RtcSetAlarm+0x12>
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 80044d0:	2101      	movs	r1, #1
 80044d2:	2004      	movs	r0, #4
 80044d4:	f7ff feaa 	bl	800422c <LpmSetStopMode>
    RtcStartAlarm( timeout );
 80044d8:	0020      	movs	r0, r4
 80044da:	f7ff ff55 	bl	8004388 <RtcStartAlarm>
}
 80044de:	bd10      	pop	{r4, pc}

080044e0 <RtcGetCalendarTime>:

uint32_t RtcGetCalendarTime( uint16_t *milliseconds )
{
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	0006      	movs	r6, r0
    RTC_TimeTypeDef time ;
    RTC_DateTypeDef date;
    uint32_t ticks;

    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 80044e6:	a901      	add	r1, sp, #4
 80044e8:	4668      	mov	r0, sp
 80044ea:	f7ff feb9 	bl	8004260 <RtcGetCalendarValue>
 80044ee:	0004      	movs	r4, r0

    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );

    ticks =  ( uint32_t )calendarValue & PREDIV_S;
 80044f0:	b2c0      	uxtb	r0, r0
    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 80044f2:	000d      	movs	r5, r1

    *milliseconds = RtcTick2Ms( ticks );
 80044f4:	f7ff ff26 	bl	8004344 <RtcTick2Ms>
    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );
 80044f8:	062d      	lsls	r5, r5, #24
    *milliseconds = RtcTick2Ms( ticks );
 80044fa:	8030      	strh	r0, [r6, #0]
    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );
 80044fc:	0a20      	lsrs	r0, r4, #8
 80044fe:	4328      	orrs	r0, r5

    return seconds;
}
 8004500:	b006      	add	sp, #24
 8004502:	bd70      	pop	{r4, r5, r6, pc}

08004504 <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */

void RTC_IRQHandler( void )
{
 8004504:	b510      	push	{r4, lr}
    // Enable low power at irq
    LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 8004506:	2100      	movs	r1, #0
 8004508:	2004      	movs	r0, #4
 800450a:	f7ff fe8f 	bl	800422c <LpmSetStopMode>

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <RTC_IRQHandler+0x38>)

    // Gets the AlarmA interrupt source enable status
    if( __HAL_RTC_ALARM_GET_IT_SOURCE( &hrtc, RTC_IT_ALRA ) != RESET )
 8004512:	4c0b      	ldr	r4, [pc, #44]	; (8004540 <RTC_IRQHandler+0x3c>)
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8004514:	0292      	lsls	r2, r2, #10
 8004516:	615a      	str	r2, [r3, #20]
    if( __HAL_RTC_ALARM_GET_IT_SOURCE( &hrtc, RTC_IT_ALRA ) != RESET )
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	04d2      	lsls	r2, r2, #19
 800451e:	d509      	bpl.n	8004534 <RTC_IRQHandler+0x30>
    {
        // Gets the pending status of the AlarmA interrupt
        if( __HAL_RTC_ALARM_GET_FLAG( &hrtc, RTC_FLAG_ALRAF ) != RESET )
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	05d2      	lsls	r2, r2, #23
 8004524:	d506      	bpl.n	8004534 <RTC_IRQHandler+0x30>
        {
            // Clear the AlarmA interrupt pending bit
            __HAL_RTC_ALARM_CLEAR_FLAG( &hrtc, RTC_FLAG_ALRAF );
 8004526:	68d9      	ldr	r1, [r3, #12]
 8004528:	4a06      	ldr	r2, [pc, #24]	; (8004544 <RTC_IRQHandler+0x40>)
 800452a:	b2c9      	uxtb	r1, r1
 800452c:	430a      	orrs	r2, r1
 800452e:	60da      	str	r2, [r3, #12]
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
    TimerIrqHandler( );
 8004530:	f007 f9fc 	bl	800b92c <TimerIrqHandler>
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004534:	0020      	movs	r0, r4
 8004536:	f00b f895 	bl	800f664 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 800453a:	bd10      	pop	{r4, pc}
 800453c:	40010400 	.word	0x40010400
 8004540:	200019a4 	.word	0x200019a4
 8004544:	fffffe7f 	.word	0xfffffe7f

08004548 <RtcBkupWrite>:
}

void RtcBkupWrite( uint32_t data0, uint32_t data1 )
{
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	000c      	movs	r4, r1
    HAL_RTCEx_BKUPWrite( &hrtc, RTC_BKP_DR0, data0 );
 800454c:	4d05      	ldr	r5, [pc, #20]	; (8004564 <RtcBkupWrite+0x1c>)
{
 800454e:	0002      	movs	r2, r0
    HAL_RTCEx_BKUPWrite( &hrtc, RTC_BKP_DR0, data0 );
 8004550:	2100      	movs	r1, #0
 8004552:	0028      	movs	r0, r5
 8004554:	f00b f8a0 	bl	800f698 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite( &hrtc, RTC_BKP_DR1, data1 );
 8004558:	0028      	movs	r0, r5
 800455a:	0022      	movs	r2, r4
 800455c:	2101      	movs	r1, #1
 800455e:	f00b f89b 	bl	800f698 <HAL_RTCEx_BKUPWrite>
}
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	200019a4 	.word	0x200019a4

08004568 <RtcBkupRead>:

void RtcBkupRead( uint32_t *data0, uint32_t *data1 )
{
 8004568:	b570      	push	{r4, r5, r6, lr}
  *data0 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR0 );
 800456a:	4e07      	ldr	r6, [pc, #28]	; (8004588 <RtcBkupRead+0x20>)
{
 800456c:	0005      	movs	r5, r0
 800456e:	000c      	movs	r4, r1
  *data0 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR0 );
 8004570:	0030      	movs	r0, r6
 8004572:	2100      	movs	r1, #0
 8004574:	f00b f896 	bl	800f6a4 <HAL_RTCEx_BKUPRead>
  *data1 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR1 );
 8004578:	2101      	movs	r1, #1
  *data0 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR0 );
 800457a:	6028      	str	r0, [r5, #0]
  *data1 = HAL_RTCEx_BKUPRead( &hrtc, RTC_BKP_DR1 );
 800457c:	0030      	movs	r0, r6
 800457e:	f00b f891 	bl	800f6a4 <HAL_RTCEx_BKUPRead>
 8004582:	6020      	str	r0, [r4, #0]
}
 8004584:	bd70      	pop	{r4, r5, r6, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	200019a4 	.word	0x200019a4

0800458c <SpiInOut>:

    if(obj == NULL || hspi1.Instance == NULL) {
        assert_param(LMN_STATUS_ERROR);
    }

    __HAL_SPI_ENABLE(&hspi1);
 800458c:	2340      	movs	r3, #64	; 0x40
uint16_t SpiInOut(Spi_t *obj, uint16_t outData) {
 800458e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_SPI_ENABLE(&hspi1);
 8004590:	4d0c      	ldr	r5, [pc, #48]	; (80045c4 <SpiInOut+0x38>)
uint16_t SpiInOut(Spi_t *obj, uint16_t outData) {
 8004592:	000c      	movs	r4, r1
    __HAL_SPI_ENABLE(&hspi1);
 8004594:	682a      	ldr	r2, [r5, #0]

    CRITICAL_SECTION_BEGIN();
 8004596:	a801      	add	r0, sp, #4
    __HAL_SPI_ENABLE(&hspi1);
 8004598:	6811      	ldr	r1, [r2, #0]
 800459a:	430b      	orrs	r3, r1
 800459c:	6013      	str	r3, [r2, #0]
    CRITICAL_SECTION_BEGIN();
 800459e:	f7ff fc37 	bl	8003e10 <BoardCriticalSectionBegin>

    while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 80045a2:	2202      	movs	r2, #2
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	4211      	tst	r1, r2
 80045aa:	d0fc      	beq.n	80045a6 <SpiInOut+0x1a>
    hspi1.Instance->DR = (uint16_t)(outData & 0xFF);

    while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET);
 80045ac:	2201      	movs	r2, #1
    hspi1.Instance->DR = (uint16_t)(outData & 0xFF);
 80045ae:	b2e4      	uxtb	r4, r4
 80045b0:	60dc      	str	r4, [r3, #12]
    while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET);
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	4211      	tst	r1, r2
 80045b6:	d0fc      	beq.n	80045b2 <SpiInOut+0x26>
    rxData = (uint16_t)hspi1.Instance->DR;
 80045b8:	68dc      	ldr	r4, [r3, #12]

    CRITICAL_SECTION_END();
 80045ba:	a801      	add	r0, sp, #4
 80045bc:	f7ff fc2d 	bl	8003e1a <BoardCriticalSectionEnd>

    return rxData;
 80045c0:	b2e0      	uxtb	r0, r4
}
 80045c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80045c4:	20001a10 	.word	0x20001a10

080045c8 <SX126xIoIrqInit>:
    //GpioInit( &SX126x.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    //GpioInit( &SX126x.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}

void SX126xIoIrqInit( DioIrqHandler dioIrq )
{
 80045c8:	b510      	push	{r4, lr}
 80045ca:	0003      	movs	r3, r0
    GpioSetInterrupt( &SX126x.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dioIrq );
 80045cc:	2203      	movs	r2, #3
 80045ce:	2101      	movs	r1, #1
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <SX126xIoIrqInit+0x10>)
 80045d2:	f007 f81c 	bl	800b60e <GpioSetInterrupt>
}
 80045d6:	bd10      	pop	{r4, pc}
 80045d8:	20001cc8 	.word	0x20001cc8

080045dc <SX126xIoTcxoInit>:
 80045dc:	4770      	bx	lr

080045de <SX126xGetBoardTcxoWakeupTime>:
}

uint32_t SX126xGetBoardTcxoWakeupTime( void )
{
    return BOARD_TCXO_WAKEUP_TIME;
}
 80045de:	2000      	movs	r0, #0
 80045e0:	4770      	bx	lr

080045e2 <SX126xIoRfSwitchInit>:

void SX126xIoRfSwitchInit( void )
{
 80045e2:	b510      	push	{r4, lr}
    SX126xSetDio2AsRfSwitchCtrl( true );
 80045e4:	2001      	movs	r0, #1
 80045e6:	f011 f9da 	bl	801599e <SX126xSetDio2AsRfSwitchCtrl>
}
 80045ea:	bd10      	pop	{r4, pc}

080045ec <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 80045ec:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <SX126xGetOperatingMode+0x8>)
 80045ee:	7818      	ldrb	r0, [r3, #0]
}
 80045f0:	4770      	bx	lr
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	200003b0 	.word	0x200003b0

080045f8 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 80045f8:	4b01      	ldr	r3, [pc, #4]	; (8004600 <SX126xSetOperatingMode+0x8>)
 80045fa:	7018      	strb	r0, [r3, #0]
            SX126xDbgPinTxWrite( 0 );
            SX126xDbgPinRxWrite( 0 );
            break;
    }
#endif
}
 80045fc:	4770      	bx	lr
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	200003b0 	.word	0x200003b0

08004604 <SX126xReset>:

void SX126xReset( void )
{
 8004604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    DelayMs( 10 );
    GpioInit( &SX126x.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8004606:	2400      	movs	r4, #0
    DelayMs( 10 );
 8004608:	200a      	movs	r0, #10
 800460a:	f006 fff3 	bl	800b5f4 <DelayMs>
    GpioInit( &SX126x.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800460e:	4d0c      	ldr	r5, [pc, #48]	; (8004640 <SX126xReset+0x3c>)
 8004610:	0023      	movs	r3, r4
 8004612:	0028      	movs	r0, r5
 8004614:	2201      	movs	r2, #1
 8004616:	2114      	movs	r1, #20
 8004618:	9401      	str	r4, [sp, #4]
 800461a:	9400      	str	r4, [sp, #0]
 800461c:	f006 ffee 	bl	800b5fc <GpioInit>
    DelayMs( 20 );
 8004620:	2014      	movs	r0, #20
 8004622:	f006 ffe7 	bl	800b5f4 <DelayMs>
    GpioInit( &SX126x.Reset, RADIO_RESET, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // internal pull-up
 8004626:	0028      	movs	r0, r5
 8004628:	0023      	movs	r3, r4
 800462a:	2203      	movs	r2, #3
 800462c:	2114      	movs	r1, #20
 800462e:	9401      	str	r4, [sp, #4]
 8004630:	9400      	str	r4, [sp, #0]
 8004632:	f006 ffe3 	bl	800b5fc <GpioInit>
    DelayMs( 10 );
 8004636:	200a      	movs	r0, #10
 8004638:	f006 ffdc 	bl	800b5f4 <DelayMs>
}
 800463c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	20001ca0 	.word	0x20001ca0

08004644 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy( void )
{
 8004644:	b510      	push	{r4, lr}
    while( GpioRead( &SX126x.BUSY ) == 1 );
 8004646:	4803      	ldr	r0, [pc, #12]	; (8004654 <SX126xWaitOnBusy+0x10>)
 8004648:	f006 ffe9 	bl	800b61e <GpioRead>
 800464c:	2801      	cmp	r0, #1
 800464e:	d0fa      	beq.n	8004646 <SX126xWaitOnBusy+0x2>
}
 8004650:	bd10      	pop	{r4, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	20001cb4 	.word	0x20001cb4

08004658 <SX126xWakeup>:

void SX126xWakeup( void )
{
 8004658:	b537      	push	{r0, r1, r2, r4, r5, lr}
    CRITICAL_SECTION_BEGIN( );
 800465a:	a801      	add	r0, sp, #4
 800465c:	f7ff fbd8 	bl	8003e10 <BoardCriticalSectionBegin>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004660:	4c0d      	ldr	r4, [pc, #52]	; (8004698 <SX126xWakeup+0x40>)
 8004662:	2100      	movs	r1, #0
 8004664:	0020      	movs	r0, r4
 8004666:	f006 ffd6 	bl	800b616 <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_GET_STATUS );
 800466a:	4d0c      	ldr	r5, [pc, #48]	; (800469c <SX126xWakeup+0x44>)
 800466c:	21c0      	movs	r1, #192	; 0xc0
 800466e:	0028      	movs	r0, r5
 8004670:	f7ff ff8c 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, 0x00 );
 8004674:	0028      	movs	r0, r5
 8004676:	2100      	movs	r1, #0
 8004678:	f7ff ff88 	bl	800458c <SpiInOut>

    GpioWrite( &SX126x.Spi.Nss, 1 );
 800467c:	2101      	movs	r1, #1
 800467e:	0020      	movs	r0, r4
 8004680:	f006 ffc9 	bl	800b616 <GpioWrite>

    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
 8004684:	f7ff ffde 	bl	8004644 <SX126xWaitOnBusy>
    OperatingMode = mode;
 8004688:	2201      	movs	r2, #1
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <SX126xWakeup+0x48>)

    // Update operating mode context variable
    SX126xSetOperatingMode( MODE_STDBY_RC );

    CRITICAL_SECTION_END( );
 800468c:	a801      	add	r0, sp, #4
    OperatingMode = mode;
 800468e:	701a      	strb	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 8004690:	f7ff fbc3 	bl	8003e1a <BoardCriticalSectionEnd>
}
 8004694:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	20001d40 	.word	0x20001d40
 800469c:	20001d04 	.word	0x20001d04
 80046a0:	200003b0 	.word	0x200003b0

080046a4 <SX126xWriteCommand>:

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80046a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046a6:	0015      	movs	r5, r2
 80046a8:	000c      	movs	r4, r1
 80046aa:	9001      	str	r0, [sp, #4]
    SX126xCheckDeviceReady( );
 80046ac:	f010 ff8a 	bl	80155c4 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 80046b0:	4e0e      	ldr	r6, [pc, #56]	; (80046ec <SX126xWriteCommand+0x48>)
 80046b2:	2100      	movs	r1, #0
 80046b4:	0030      	movs	r0, r6
 80046b6:	f006 ffae 	bl	800b616 <GpioWrite>

    SpiInOut( &SX126x.Spi, ( uint8_t )command );
 80046ba:	466b      	mov	r3, sp
 80046bc:	4f0c      	ldr	r7, [pc, #48]	; (80046f0 <SX126xWriteCommand+0x4c>)
 80046be:	8899      	ldrh	r1, [r3, #4]
 80046c0:	0038      	movs	r0, r7
 80046c2:	f7ff ff63 	bl	800458c <SpiInOut>

    for( uint16_t i = 0; i < size; i++ )
 80046c6:	1965      	adds	r5, r4, r5
 80046c8:	42ac      	cmp	r4, r5
 80046ca:	d109      	bne.n	80046e0 <SX126xWriteCommand+0x3c>
    {
        SpiInOut( &SX126x.Spi, buffer[i] );
    }

    GpioWrite( &SX126x.Spi.Nss, 1 );
 80046cc:	2101      	movs	r1, #1
 80046ce:	0030      	movs	r0, r6
 80046d0:	f006 ffa1 	bl	800b616 <GpioWrite>

    if( command != RADIO_SET_SLEEP )
 80046d4:	9b01      	ldr	r3, [sp, #4]
 80046d6:	2b84      	cmp	r3, #132	; 0x84
 80046d8:	d001      	beq.n	80046de <SX126xWriteCommand+0x3a>
    {
        SX126xWaitOnBusy( );
 80046da:	f7ff ffb3 	bl	8004644 <SX126xWaitOnBusy>
    }
}
 80046de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SpiInOut( &SX126x.Spi, buffer[i] );
 80046e0:	7821      	ldrb	r1, [r4, #0]
 80046e2:	0038      	movs	r0, r7
 80046e4:	f7ff ff52 	bl	800458c <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 80046e8:	3401      	adds	r4, #1
 80046ea:	e7ed      	b.n	80046c8 <SX126xWriteCommand+0x24>
 80046ec:	20001d40 	.word	0x20001d40
 80046f0:	20001d04 	.word	0x20001d04

080046f4 <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80046f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046f6:	0006      	movs	r6, r0
 80046f8:	0015      	movs	r5, r2
 80046fa:	000c      	movs	r4, r1
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 80046fc:	f010 ff62 	bl	80155c4 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004700:	4f10      	ldr	r7, [pc, #64]	; (8004744 <SX126xReadCommand+0x50>)
 8004702:	2100      	movs	r1, #0
 8004704:	0038      	movs	r0, r7
 8004706:	f006 ff86 	bl	800b616 <GpioWrite>

    SpiInOut( &SX126x.Spi, ( uint8_t )command );
 800470a:	b2b1      	uxth	r1, r6
 800470c:	4e0e      	ldr	r6, [pc, #56]	; (8004748 <SX126xReadCommand+0x54>)
 800470e:	1965      	adds	r5, r4, r5
 8004710:	0030      	movs	r0, r6
 8004712:	f7ff ff3b 	bl	800458c <SpiInOut>
    status = SpiInOut( &SX126x.Spi, 0x00 );
 8004716:	2100      	movs	r1, #0
 8004718:	0030      	movs	r0, r6
 800471a:	f7ff ff37 	bl	800458c <SpiInOut>
 800471e:	b2c3      	uxtb	r3, r0
 8004720:	9301      	str	r3, [sp, #4]
    for( uint16_t i = 0; i < size; i++ )
 8004722:	42ac      	cmp	r4, r5
 8004724:	d107      	bne.n	8004736 <SX126xReadCommand+0x42>
    {
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
    }

    GpioWrite( &SX126x.Spi.Nss, 1 );
 8004726:	0038      	movs	r0, r7
 8004728:	2101      	movs	r1, #1
 800472a:	f006 ff74 	bl	800b616 <GpioWrite>

    SX126xWaitOnBusy( );
 800472e:	f7ff ff89 	bl	8004644 <SX126xWaitOnBusy>

    return status;
}
 8004732:	9801      	ldr	r0, [sp, #4]
 8004734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
 8004736:	2100      	movs	r1, #0
 8004738:	0030      	movs	r0, r6
 800473a:	f7ff ff27 	bl	800458c <SpiInOut>
 800473e:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 8004740:	3401      	adds	r4, #1
 8004742:	e7ee      	b.n	8004722 <SX126xReadCommand+0x2e>
 8004744:	20001d40 	.word	0x20001d40
 8004748:	20001d04 	.word	0x20001d04

0800474c <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800474c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800474e:	0005      	movs	r5, r0
 8004750:	000c      	movs	r4, r1
 8004752:	9201      	str	r2, [sp, #4]
    SX126xCheckDeviceReady( );
 8004754:	f010 ff36 	bl	80155c4 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004758:	4f11      	ldr	r7, [pc, #68]	; (80047a0 <SX126xWriteRegisters+0x54>)
 800475a:	2100      	movs	r1, #0
 800475c:	0038      	movs	r0, r7
 800475e:	f006 ff5a 	bl	800b616 <GpioWrite>
    
    SpiInOut( &SX126x.Spi, RADIO_WRITE_REGISTER );
 8004762:	4e10      	ldr	r6, [pc, #64]	; (80047a4 <SX126xWriteRegisters+0x58>)
 8004764:	210d      	movs	r1, #13
 8004766:	0030      	movs	r0, r6
 8004768:	f7ff ff10 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, ( address & 0xFF00 ) >> 8 );
 800476c:	0a29      	lsrs	r1, r5, #8
 800476e:	0030      	movs	r0, r6
 8004770:	f7ff ff0c 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, address & 0x00FF );
 8004774:	b2e9      	uxtb	r1, r5
 8004776:	0030      	movs	r0, r6
 8004778:	f7ff ff08 	bl	800458c <SpiInOut>
    
    for( uint16_t i = 0; i < size; i++ )
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	18e5      	adds	r5, r4, r3
 8004780:	42ac      	cmp	r4, r5
 8004782:	d106      	bne.n	8004792 <SX126xWriteRegisters+0x46>
    {
        SpiInOut( &SX126x.Spi, buffer[i] );
    }

    GpioWrite( &SX126x.Spi.Nss, 1 );
 8004784:	0038      	movs	r0, r7
 8004786:	2101      	movs	r1, #1
 8004788:	f006 ff45 	bl	800b616 <GpioWrite>

    SX126xWaitOnBusy( );
 800478c:	f7ff ff5a 	bl	8004644 <SX126xWaitOnBusy>
}
 8004790:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SpiInOut( &SX126x.Spi, buffer[i] );
 8004792:	7821      	ldrb	r1, [r4, #0]
 8004794:	0030      	movs	r0, r6
 8004796:	f7ff fef9 	bl	800458c <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 800479a:	3401      	adds	r4, #1
 800479c:	e7f0      	b.n	8004780 <SX126xWriteRegisters+0x34>
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20001d40 	.word	0x20001d40
 80047a4:	20001d04 	.word	0x20001d04

080047a8 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 80047a8:	b507      	push	{r0, r1, r2, lr}
 80047aa:	466b      	mov	r3, sp
 80047ac:	71d9      	strb	r1, [r3, #7]
 80047ae:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 80047b0:	2201      	movs	r2, #1
 80047b2:	0019      	movs	r1, r3
 80047b4:	f7ff ffca 	bl	800474c <SX126xWriteRegisters>
}
 80047b8:	bd07      	pop	{r0, r1, r2, pc}
	...

080047bc <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80047bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047be:	0005      	movs	r5, r0
 80047c0:	000c      	movs	r4, r1
 80047c2:	9201      	str	r2, [sp, #4]
    SX126xCheckDeviceReady( );
 80047c4:	f010 fefe 	bl	80155c4 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 80047c8:	4f13      	ldr	r7, [pc, #76]	; (8004818 <SX126xReadRegisters+0x5c>)
 80047ca:	2100      	movs	r1, #0
 80047cc:	0038      	movs	r0, r7
 80047ce:	f006 ff22 	bl	800b616 <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_READ_REGISTER );
 80047d2:	4e12      	ldr	r6, [pc, #72]	; (800481c <SX126xReadRegisters+0x60>)
 80047d4:	211d      	movs	r1, #29
 80047d6:	0030      	movs	r0, r6
 80047d8:	f7ff fed8 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, ( address & 0xFF00 ) >> 8 );
 80047dc:	0a29      	lsrs	r1, r5, #8
 80047de:	0030      	movs	r0, r6
 80047e0:	f7ff fed4 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, address & 0x00FF );
 80047e4:	b2e9      	uxtb	r1, r5
 80047e6:	0030      	movs	r0, r6
 80047e8:	f7ff fed0 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, 0 );
 80047ec:	2100      	movs	r1, #0
 80047ee:	0030      	movs	r0, r6
 80047f0:	f7ff fecc 	bl	800458c <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	18e5      	adds	r5, r4, r3
 80047f8:	42ac      	cmp	r4, r5
 80047fa:	d106      	bne.n	800480a <SX126xReadRegisters+0x4e>
    {
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
    }
    GpioWrite( &SX126x.Spi.Nss, 1 );
 80047fc:	0038      	movs	r0, r7
 80047fe:	2101      	movs	r1, #1
 8004800:	f006 ff09 	bl	800b616 <GpioWrite>

    SX126xWaitOnBusy( );
 8004804:	f7ff ff1e 	bl	8004644 <SX126xWaitOnBusy>
}
 8004808:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
 800480a:	2100      	movs	r1, #0
 800480c:	0030      	movs	r0, r6
 800480e:	f7ff febd 	bl	800458c <SpiInOut>
 8004812:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 8004814:	3401      	adds	r4, #1
 8004816:	e7ef      	b.n	80047f8 <SX126xReadRegisters+0x3c>
 8004818:	20001d40 	.word	0x20001d40
 800481c:	20001d04 	.word	0x20001d04

08004820 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 8004820:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 8004822:	466b      	mov	r3, sp
 8004824:	1ddc      	adds	r4, r3, #7
 8004826:	2201      	movs	r2, #1
 8004828:	0021      	movs	r1, r4
 800482a:	f7ff ffc7 	bl	80047bc <SX126xReadRegisters>
    return data;
 800482e:	7820      	ldrb	r0, [r4, #0]
}
 8004830:	bd16      	pop	{r1, r2, r4, pc}
	...

08004834 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8004834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004836:	0015      	movs	r5, r2
 8004838:	000c      	movs	r4, r1
 800483a:	9001      	str	r0, [sp, #4]
    SX126xCheckDeviceReady( );
 800483c:	f010 fec2 	bl	80155c4 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004840:	4f0f      	ldr	r7, [pc, #60]	; (8004880 <SX126xWriteBuffer+0x4c>)
 8004842:	2100      	movs	r1, #0
 8004844:	0038      	movs	r0, r7
 8004846:	f006 fee6 	bl	800b616 <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_WRITE_BUFFER );
 800484a:	4e0e      	ldr	r6, [pc, #56]	; (8004884 <SX126xWriteBuffer+0x50>)
 800484c:	210e      	movs	r1, #14
 800484e:	0030      	movs	r0, r6
 8004850:	f7ff fe9c 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, offset );
 8004854:	466b      	mov	r3, sp
 8004856:	0030      	movs	r0, r6
 8004858:	8899      	ldrh	r1, [r3, #4]
 800485a:	f7ff fe97 	bl	800458c <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 800485e:	1965      	adds	r5, r4, r5
 8004860:	42ac      	cmp	r4, r5
 8004862:	d106      	bne.n	8004872 <SX126xWriteBuffer+0x3e>
    {
        SpiInOut( &SX126x.Spi, buffer[i] );
    }
    GpioWrite( &SX126x.Spi.Nss, 1 );
 8004864:	0038      	movs	r0, r7
 8004866:	2101      	movs	r1, #1
 8004868:	f006 fed5 	bl	800b616 <GpioWrite>

    SX126xWaitOnBusy( );
 800486c:	f7ff feea 	bl	8004644 <SX126xWaitOnBusy>
}
 8004870:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SpiInOut( &SX126x.Spi, buffer[i] );
 8004872:	7821      	ldrb	r1, [r4, #0]
 8004874:	0030      	movs	r0, r6
 8004876:	f7ff fe89 	bl	800458c <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 800487a:	3401      	adds	r4, #1
 800487c:	e7f0      	b.n	8004860 <SX126xWriteBuffer+0x2c>
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20001d40 	.word	0x20001d40
 8004884:	20001d04 	.word	0x20001d04

08004888 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8004888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800488a:	0015      	movs	r5, r2
 800488c:	000c      	movs	r4, r1
 800488e:	9001      	str	r0, [sp, #4]
    SX126xCheckDeviceReady( );
 8004890:	f010 fe98 	bl	80155c4 <SX126xCheckDeviceReady>

    GpioWrite( &SX126x.Spi.Nss, 0 );
 8004894:	4f11      	ldr	r7, [pc, #68]	; (80048dc <SX126xReadBuffer+0x54>)
 8004896:	2100      	movs	r1, #0
 8004898:	0038      	movs	r0, r7
 800489a:	f006 febc 	bl	800b616 <GpioWrite>

    SpiInOut( &SX126x.Spi, RADIO_READ_BUFFER );
 800489e:	4e10      	ldr	r6, [pc, #64]	; (80048e0 <SX126xReadBuffer+0x58>)
 80048a0:	211e      	movs	r1, #30
 80048a2:	0030      	movs	r0, r6
 80048a4:	f7ff fe72 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, offset );
 80048a8:	466b      	mov	r3, sp
 80048aa:	0030      	movs	r0, r6
 80048ac:	8899      	ldrh	r1, [r3, #4]
 80048ae:	f7ff fe6d 	bl	800458c <SpiInOut>
    SpiInOut( &SX126x.Spi, 0 );
 80048b2:	2100      	movs	r1, #0
 80048b4:	0030      	movs	r0, r6
 80048b6:	f7ff fe69 	bl	800458c <SpiInOut>
    for( uint16_t i = 0; i < size; i++ )
 80048ba:	1965      	adds	r5, r4, r5
 80048bc:	42ac      	cmp	r4, r5
 80048be:	d106      	bne.n	80048ce <SX126xReadBuffer+0x46>
    {
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
    }
    GpioWrite( &SX126x.Spi.Nss, 1 );
 80048c0:	0038      	movs	r0, r7
 80048c2:	2101      	movs	r1, #1
 80048c4:	f006 fea7 	bl	800b616 <GpioWrite>

    SX126xWaitOnBusy( );
 80048c8:	f7ff febc 	bl	8004644 <SX126xWaitOnBusy>
}
 80048cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        buffer[i] = SpiInOut( &SX126x.Spi, 0 );
 80048ce:	2100      	movs	r1, #0
 80048d0:	0030      	movs	r0, r6
 80048d2:	f7ff fe5b 	bl	800458c <SpiInOut>
 80048d6:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 80048d8:	3401      	adds	r4, #1
 80048da:	e7ef      	b.n	80048bc <SX126xReadBuffer+0x34>
 80048dc:	20001d40 	.word	0x20001d40
 80048e0:	20001d04 	.word	0x20001d04

080048e4 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower( int8_t power )
{
 80048e4:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 80048e6:	2102      	movs	r1, #2
 80048e8:	f011 f8a4 	bl	8015a34 <SX126xSetTxParams>
}
 80048ec:	bd10      	pop	{r4, pc}

080048ee <SX126xGetDeviceId>:

uint8_t SX126xGetDeviceId( void ) {
        return SX1261;
}
 80048ee:	2001      	movs	r0, #1
 80048f0:	4770      	bx	lr
	...

080048f4 <SX126xGetDio1PinState>:
    // Implement check. Currently all frequencies are supported
    return true;
}

uint32_t SX126xGetDio1PinState( void )
{
 80048f4:	b510      	push	{r4, lr}
    return GpioRead( &SX126x.DIO1 );
 80048f6:	4802      	ldr	r0, [pc, #8]	; (8004900 <SX126xGetDio1PinState+0xc>)
 80048f8:	f006 fe91 	bl	800b61e <GpioRead>
}
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	20001cc8 	.word	0x20001cc8

08004904 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <rand1+0x1c>)
 8004906:	4807      	ldr	r0, [pc, #28]	; (8004924 <rand1+0x20>)
 8004908:	681a      	ldr	r2, [r3, #0]
{
 800490a:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800490c:	4350      	muls	r0, r2
 800490e:	4a06      	ldr	r2, [pc, #24]	; (8004928 <rand1+0x24>)
 8004910:	4906      	ldr	r1, [pc, #24]	; (800492c <rand1+0x28>)
 8004912:	1880      	adds	r0, r0, r2
 8004914:	6018      	str	r0, [r3, #0]
 8004916:	f7fb fcad 	bl	8000274 <__aeabi_uidivmod>
 800491a:	0008      	movs	r0, r1
}
 800491c:	bd10      	pop	{r4, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	20000000 	.word	0x20000000
 8004924:	41c64e6d 	.word	0x41c64e6d
 8004928:	00003039 	.word	0x00003039
 800492c:	7fffffff 	.word	0x7fffffff

08004930 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <srand1+0x8>)
 8004932:	6018      	str	r0, [r3, #0]
}
 8004934:	4770      	bx	lr
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	20000000 	.word	0x20000000

0800493c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	0005      	movs	r5, r0
 8004940:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8004942:	f7ff ffdf 	bl	8004904 <rand1>
 8004946:	1b61      	subs	r1, r4, r5
 8004948:	3101      	adds	r1, #1
 800494a:	f7fb fd7d 	bl	8000448 <__aeabi_idivmod>
 800494e:	1948      	adds	r0, r1, r5
}
 8004950:	bd70      	pop	{r4, r5, r6, pc}

08004952 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8004952:	2300      	movs	r3, #0
{
 8004954:	b510      	push	{r4, lr}
    while( size-- )
 8004956:	4293      	cmp	r3, r2
 8004958:	d100      	bne.n	800495c <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800495a:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800495c:	5ccc      	ldrb	r4, [r1, r3]
 800495e:	54c4      	strb	r4, [r0, r3]
 8004960:	3301      	adds	r3, #1
 8004962:	e7f8      	b.n	8004956 <memcpy1+0x4>

08004964 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8004964:	1e53      	subs	r3, r2, #1
 8004966:	18c0      	adds	r0, r0, r3
    while( size-- )
 8004968:	2300      	movs	r3, #0
{
 800496a:	b530      	push	{r4, r5, lr}
    while( size-- )
 800496c:	429a      	cmp	r2, r3
 800496e:	d100      	bne.n	8004972 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 8004970:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 8004972:	5ccd      	ldrb	r5, [r1, r3]
 8004974:	425c      	negs	r4, r3
 8004976:	5505      	strb	r5, [r0, r4]
 8004978:	3301      	adds	r3, #1
 800497a:	e7f7      	b.n	800496c <memcpyr+0x8>

0800497c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800497c:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800497e:	f011 fb3e 	bl	8015ffe <memset>
    }
}
 8004982:	bd10      	pop	{r4, pc}

08004984 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8004984:	0002      	movs	r2, r0
 8004986:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8004988:	2800      	cmp	r0, #0
 800498a:	d008      	beq.n	800499e <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 800498c:	2301      	movs	r3, #1
 800498e:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 8004990:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8004992:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 8004994:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 8004996:	b2ac      	uxth	r4, r5
 8004998:	428c      	cmp	r4, r1
 800499a:	d301      	bcc.n	80049a0 <Crc32+0x1c>
        }
    }

    return ~crc;
 800499c:	43d8      	mvns	r0, r3
}
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 80049a0:	5d54      	ldrb	r4, [r2, r5]
 80049a2:	4063      	eors	r3, r4
 80049a4:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80049a6:	0858      	lsrs	r0, r3, #1
 80049a8:	4684      	mov	ip, r0
 80049aa:	403b      	ands	r3, r7
 80049ac:	4805      	ldr	r0, [pc, #20]	; (80049c4 <Crc32+0x40>)
 80049ae:	425b      	negs	r3, r3
 80049b0:	4003      	ands	r3, r0
 80049b2:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 80049b4:	3c01      	subs	r4, #1
 80049b6:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80049b8:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d1f3      	bne.n	80049a6 <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 80049be:	3501      	adds	r5, #1
 80049c0:	e7e9      	b.n	8004996 <Crc32+0x12>
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	edb88320 	.word	0xedb88320

080049c8 <Crc32Init>:

uint32_t Crc32Init( void )
{
    return 0xFFFFFFFF;
 80049c8:	2001      	movs	r0, #1
}
 80049ca:	4240      	negs	r0, r0
 80049cc:	4770      	bx	lr
	...

080049d0 <Crc32Update>:

uint32_t Crc32Update( uint32_t crcInit, uint8_t *buffer, uint16_t length )
{
 80049d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = crcInit;

    if( buffer == NULL )
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d014      	beq.n	8004a00 <Crc32Update+0x30>
 80049d6:	2400      	movs	r4, #0
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80049d8:	2601      	movs	r6, #1
 80049da:	4f0a      	ldr	r7, [pc, #40]	; (8004a04 <Crc32Update+0x34>)
    for( uint16_t i = 0; i < length; ++i )
 80049dc:	b2a3      	uxth	r3, r4
 80049de:	4293      	cmp	r3, r2
 80049e0:	d300      	bcc.n	80049e4 <Crc32Update+0x14>
        }
    }
    return crc;
}
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 80049e4:	5d0b      	ldrb	r3, [r1, r4]
 80049e6:	4058      	eors	r0, r3
 80049e8:	2308      	movs	r3, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80049ea:	0845      	lsrs	r5, r0, #1
 80049ec:	4030      	ands	r0, r6
 80049ee:	4240      	negs	r0, r0
        for( uint16_t i = 0; i < 8; i++ )
 80049f0:	3b01      	subs	r3, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80049f2:	4038      	ands	r0, r7
        for( uint16_t i = 0; i < 8; i++ )
 80049f4:	b29b      	uxth	r3, r3
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80049f6:	4068      	eors	r0, r5
        for( uint16_t i = 0; i < 8; i++ )
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f6      	bne.n	80049ea <Crc32Update+0x1a>
    for( uint16_t i = 0; i < length; ++i )
 80049fc:	3401      	adds	r4, #1
 80049fe:	e7ed      	b.n	80049dc <Crc32Update+0xc>
        return 0;
 8004a00:	0008      	movs	r0, r1
 8004a02:	e7ee      	b.n	80049e2 <Crc32Update+0x12>
 8004a04:	edb88320 	.word	0xedb88320

08004a08 <Crc32Finalize>:

uint32_t Crc32Finalize( uint32_t crc )
{
    return ~crc;
 8004a08:	43c0      	mvns	r0, r0
}
 8004a0a:	4770      	bx	lr

08004a0c <PrintHexBuffer>:
 * 
 * \param buffer Buffer to be printed
 * \param size   Buffer size to be printed
 */
void PrintHexBuffer( uint8_t *buffer, uint8_t size )
{
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t newline = 0;

    for( uint8_t i = 0; i < size; i++ )
 8004a0e:	2400      	movs	r4, #0
{
 8004a10:	0006      	movs	r6, r0
 8004a12:	000d      	movs	r5, r1
    uint8_t newline = 0;
 8004a14:	0023      	movs	r3, r4
            newline = 0;
        }

        printf( "%02X ", buffer[i] );

        if( ( ( i + 1 ) % 16 ) == 0 )
 8004a16:	270f      	movs	r7, #15
    for( uint8_t i = 0; i < size; i++ )
 8004a18:	42a5      	cmp	r5, r4
 8004a1a:	d103      	bne.n	8004a24 <PrintHexBuffer+0x18>
        {
            newline = 1;
        }
    }
    printf( "\n" );
 8004a1c:	200a      	movs	r0, #10
 8004a1e:	f012 f96f 	bl	8016d00 <putchar>
}
 8004a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( newline != 0 )
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <PrintHexBuffer+0x22>
            printf( "\n" );
 8004a28:	200a      	movs	r0, #10
 8004a2a:	f012 f969 	bl	8016d00 <putchar>
        printf( "%02X ", buffer[i] );
 8004a2e:	5d31      	ldrb	r1, [r6, r4]
 8004a30:	4804      	ldr	r0, [pc, #16]	; (8004a44 <PrintHexBuffer+0x38>)
 8004a32:	3401      	adds	r4, #1
 8004a34:	f012 f94a 	bl	8016ccc <iprintf>
        if( ( ( i + 1 ) % 16 ) == 0 )
 8004a38:	0023      	movs	r3, r4
 8004a3a:	403b      	ands	r3, r7
 8004a3c:	425a      	negs	r2, r3
 8004a3e:	4153      	adcs	r3, r2
            newline = 1;
 8004a40:	b2db      	uxtb	r3, r3
    for( uint8_t i = 0; i < size; i++ )
 8004a42:	e7e9      	b.n	8004a18 <PrintHexBuffer+0xc>
 8004a44:	08018df7 	.word	0x08018df7

08004a48 <DisplayNvmDataChange>:

void DisplayNvmDataChange( LmHandlerNvmContextStates_t state, uint16_t size )
{
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	000c      	movs	r4, r1
    if( state == LORAMAC_HANDLER_NVM_STORE )
 8004a4c:	2801      	cmp	r0, #1
 8004a4e:	d107      	bne.n	8004a60 <DisplayNvmDataChange+0x18>
    {
        printf( "\n###### ============ CTXS STORED ============ ######\n" );
 8004a50:	4804      	ldr	r0, [pc, #16]	; (8004a64 <DisplayNvmDataChange+0x1c>)

    }
    else
    {
        printf( "\n###### =========== CTXS RESTORED =========== ######\n" );
 8004a52:	f012 f9db 	bl	8016e0c <puts>
    }
    printf( "Size        : %i\n\n", size );
 8004a56:	0021      	movs	r1, r4
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <DisplayNvmDataChange+0x20>)
 8004a5a:	f012 f937 	bl	8016ccc <iprintf>
}
 8004a5e:	bd10      	pop	{r4, pc}
        printf( "\n###### =========== CTXS RESTORED =========== ######\n" );
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <DisplayNvmDataChange+0x24>)
 8004a62:	e7f6      	b.n	8004a52 <DisplayNvmDataChange+0xa>
 8004a64:	08018dfd 	.word	0x08018dfd
 8004a68:	08018e67 	.word	0x08018e67
 8004a6c:	08018e32 	.word	0x08018e32

08004a70 <DisplayMacMcpsRequestUpdate>:
    printf( "\n\n" );
}

void DisplayMacMcpsRequestUpdate( LoRaMacStatus_t status, McpsReq_t *mcpsReq, TimerTime_t nextTxIn )
{
    switch( mcpsReq->Type )
 8004a70:	780b      	ldrb	r3, [r1, #0]
{
 8004a72:	b570      	push	{r4, r5, r6, lr}
 8004a74:	0004      	movs	r4, r0
 8004a76:	0016      	movs	r6, r2
 8004a78:	4814      	ldr	r0, [pc, #80]	; (8004acc <DisplayMacMcpsRequestUpdate+0x5c>)
 8004a7a:	4d15      	ldr	r5, [pc, #84]	; (8004ad0 <DisplayMacMcpsRequestUpdate+0x60>)
    switch( mcpsReq->Type )
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d007      	beq.n	8004a90 <DisplayMacMcpsRequestUpdate+0x20>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d01a      	beq.n	8004aba <DisplayMacMcpsRequestUpdate+0x4a>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d11c      	bne.n	8004ac2 <DisplayMacMcpsRequestUpdate+0x52>
            printf( "###### ===================================== ######\n");
            break;
        }
        case MCPS_UNCONFIRMED:
        {
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 8004a88:	f012 f9c0 	bl	8016e0c <puts>
            printf( "######           MCPS_UNCONFIRMED            ######\n");
 8004a8c:	4811      	ldr	r0, [pc, #68]	; (8004ad4 <DisplayMacMcpsRequestUpdate+0x64>)
 8004a8e:	e002      	b.n	8004a96 <DisplayMacMcpsRequestUpdate+0x26>
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 8004a90:	f012 f9bc 	bl	8016e0c <puts>
            printf( "######            MCPS_CONFIRMED             ######\n");
 8004a94:	4810      	ldr	r0, [pc, #64]	; (8004ad8 <DisplayMacMcpsRequestUpdate+0x68>)
            break;
        }
        default:
        {
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
            printf( "######                MCPS_ERROR             ######\n");
 8004a96:	f012 f9b9 	bl	8016e0c <puts>
            printf( "###### ===================================== ######\n");
 8004a9a:	0028      	movs	r0, r5
 8004a9c:	f012 f9b6 	bl	8016e0c <puts>
            break;
        }
    }
    printf( "STATUS      : %s\n", MacStatusStrings[status] );
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <DisplayMacMcpsRequestUpdate+0x6c>)
 8004aa2:	00a2      	lsls	r2, r4, #2
 8004aa4:	58d1      	ldr	r1, [r2, r3]
 8004aa6:	480e      	ldr	r0, [pc, #56]	; (8004ae0 <DisplayMacMcpsRequestUpdate+0x70>)
 8004aa8:	f012 f910 	bl	8016ccc <iprintf>
    if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8004aac:	2c0b      	cmp	r4, #11
 8004aae:	d103      	bne.n	8004ab8 <DisplayMacMcpsRequestUpdate+0x48>
    {
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
 8004ab0:	0031      	movs	r1, r6
 8004ab2:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <DisplayMacMcpsRequestUpdate+0x74>)
 8004ab4:	f012 f90a 	bl	8016ccc <iprintf>
    }
}
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 8004aba:	f012 f9a7 	bl	8016e0c <puts>
            printf( "######           MCPS_PROPRIETARY            ######\n");
 8004abe:	480a      	ldr	r0, [pc, #40]	; (8004ae8 <DisplayMacMcpsRequestUpdate+0x78>)
 8004ac0:	e7e9      	b.n	8004a96 <DisplayMacMcpsRequestUpdate+0x26>
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 8004ac2:	f012 f9a3 	bl	8016e0c <puts>
            printf( "######                MCPS_ERROR             ######\n");
 8004ac6:	4809      	ldr	r0, [pc, #36]	; (8004aec <DisplayMacMcpsRequestUpdate+0x7c>)
 8004ac8:	e7e5      	b.n	8004a96 <DisplayMacMcpsRequestUpdate+0x26>
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	08018eb9 	.word	0x08018eb9
 8004ad0:	08018f22 	.word	0x08018f22
 8004ad4:	08018f56 	.word	0x08018f56
 8004ad8:	08018eee 	.word	0x08018eee
 8004adc:	20000044 	.word	0x20000044
 8004ae0:	08018ff2 	.word	0x08018ff2
 8004ae4:	08019004 	.word	0x08019004
 8004ae8:	08018f8a 	.word	0x08018f8a
 8004aec:	08018fbe 	.word	0x08018fbe

08004af0 <DisplayMacMlmeRequestUpdate>:

void DisplayMacMlmeRequestUpdate( LoRaMacStatus_t status, MlmeReq_t *mlmeReq, TimerTime_t nextTxIn )
{
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	0005      	movs	r5, r0
    switch( mlmeReq->Type )
 8004af4:	7808      	ldrb	r0, [r1, #0]
{
 8004af6:	0016      	movs	r6, r2
    switch( mlmeReq->Type )
 8004af8:	3801      	subs	r0, #1
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <DisplayMacMlmeRequestUpdate+0x74>)
 8004afc:	4c1a      	ldr	r4, [pc, #104]	; (8004b68 <DisplayMacMlmeRequestUpdate+0x78>)
 8004afe:	2808      	cmp	r0, #8
 8004b00:	d82b      	bhi.n	8004b5a <DisplayMacMlmeRequestUpdate+0x6a>
 8004b02:	f7fb fb13 	bl	800012c <__gnu_thumb1_case_uqi>
 8004b06:	2a05      	.short	0x2a05
 8004b08:	2a251b2a 	.word	0x2a251b2a
 8004b0c:	2a2a      	.short	0x2a2a
 8004b0e:	20          	.byte	0x20
 8004b0f:	00          	.byte	0x00
    {
        case MLME_JOIN:
        {
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004b10:	0018      	movs	r0, r3
 8004b12:	f012 f97b 	bl	8016e0c <puts>
            printf( "######               MLME_JOIN               ######\n");
 8004b16:	4815      	ldr	r0, [pc, #84]	; (8004b6c <DisplayMacMlmeRequestUpdate+0x7c>)
            break;
        }
        default:
        {
            printf( "\n###### =========== MLME-Request ============ ######\n" );
            printf( "######              MLME_UNKNOWN             ######\n");
 8004b18:	f012 f978 	bl	8016e0c <puts>
            printf( "###### ===================================== ######\n");
 8004b1c:	0020      	movs	r0, r4
 8004b1e:	f012 f975 	bl	8016e0c <puts>
            break;
        }
    }
    printf( "STATUS      : %s\n", MacStatusStrings[status] );
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <DisplayMacMlmeRequestUpdate+0x80>)
 8004b24:	00aa      	lsls	r2, r5, #2
 8004b26:	58d1      	ldr	r1, [r2, r3]
 8004b28:	4812      	ldr	r0, [pc, #72]	; (8004b74 <DisplayMacMlmeRequestUpdate+0x84>)
 8004b2a:	f012 f8cf 	bl	8016ccc <iprintf>
    if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8004b2e:	2d0b      	cmp	r5, #11
 8004b30:	d103      	bne.n	8004b3a <DisplayMacMlmeRequestUpdate+0x4a>
    {
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
 8004b32:	0031      	movs	r1, r6
 8004b34:	4810      	ldr	r0, [pc, #64]	; (8004b78 <DisplayMacMlmeRequestUpdate+0x88>)
 8004b36:	f012 f8c9 	bl	8016ccc <iprintf>
    }
}
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f012 f965 	bl	8016e0c <puts>
            printf( "######            MLME_LINK_CHECK            ######\n");
 8004b42:	480e      	ldr	r0, [pc, #56]	; (8004b7c <DisplayMacMlmeRequestUpdate+0x8c>)
 8004b44:	e7e8      	b.n	8004b18 <DisplayMacMlmeRequestUpdate+0x28>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004b46:	0018      	movs	r0, r3
 8004b48:	f012 f960 	bl	8016e0c <puts>
            printf( "######            MLME_DEVICE_TIME           ######\n");
 8004b4c:	480c      	ldr	r0, [pc, #48]	; (8004b80 <DisplayMacMlmeRequestUpdate+0x90>)
 8004b4e:	e7e3      	b.n	8004b18 <DisplayMacMlmeRequestUpdate+0x28>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004b50:	0018      	movs	r0, r3
 8004b52:	f012 f95b 	bl	8016e0c <puts>
            printf( "######               MLME_TXCW               ######\n");
 8004b56:	480b      	ldr	r0, [pc, #44]	; (8004b84 <DisplayMacMlmeRequestUpdate+0x94>)
 8004b58:	e7de      	b.n	8004b18 <DisplayMacMlmeRequestUpdate+0x28>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f012 f956 	bl	8016e0c <puts>
            printf( "######              MLME_UNKNOWN             ######\n");
 8004b60:	4809      	ldr	r0, [pc, #36]	; (8004b88 <DisplayMacMlmeRequestUpdate+0x98>)
 8004b62:	e7d9      	b.n	8004b18 <DisplayMacMlmeRequestUpdate+0x28>
 8004b64:	0801901c 	.word	0x0801901c
 8004b68:	08018f22 	.word	0x08018f22
 8004b6c:	08019051 	.word	0x08019051
 8004b70:	20000044 	.word	0x20000044
 8004b74:	08018ff2 	.word	0x08018ff2
 8004b78:	08019004 	.word	0x08019004
 8004b7c:	08019085 	.word	0x08019085
 8004b80:	080190b9 	.word	0x080190b9
 8004b84:	080190ed 	.word	0x080190ed
 8004b88:	08019121 	.word	0x08019121

08004b8c <DisplayJoinRequestUpdate>:

void DisplayJoinRequestUpdate( LmHandlerJoinParams_t *params )
{
    if( params->CommissioningParams->IsOtaaActivation == true )
 8004b8c:	6803      	ldr	r3, [r0, #0]
{
 8004b8e:	b510      	push	{r4, lr}
    if( params->CommissioningParams->IsOtaaActivation == true )
 8004b90:	781b      	ldrb	r3, [r3, #0]
{
 8004b92:	0004      	movs	r4, r0
    if( params->CommissioningParams->IsOtaaActivation == true )
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d017      	beq.n	8004bc8 <DisplayJoinRequestUpdate+0x3c>
    {
        if( params->Status == LORAMAC_HANDLER_SUCCESS )
 8004b98:	2305      	movs	r3, #5
 8004b9a:	56c3      	ldrsb	r3, [r0, r3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d112      	bne.n	8004bc6 <DisplayJoinRequestUpdate+0x3a>
        {
            printf( "###### ===========   JOINED     ============ ######\n" );
 8004ba0:	4811      	ldr	r0, [pc, #68]	; (8004be8 <DisplayJoinRequestUpdate+0x5c>)
 8004ba2:	f012 f933 	bl	8016e0c <puts>
            printf( "\nOTAA\n\n" );
 8004ba6:	4811      	ldr	r0, [pc, #68]	; (8004bec <DisplayJoinRequestUpdate+0x60>)
 8004ba8:	f012 f930 	bl	8016e0c <puts>
            printf( "DevAddr     :  %08lX\n", params->CommissioningParams->DevAddr );
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	4810      	ldr	r0, [pc, #64]	; (8004bf0 <DisplayJoinRequestUpdate+0x64>)
 8004bb0:	69d9      	ldr	r1, [r3, #28]
 8004bb2:	f012 f88b 	bl	8016ccc <iprintf>
            printf( "\n\n" );
 8004bb6:	480f      	ldr	r0, [pc, #60]	; (8004bf4 <DisplayJoinRequestUpdate+0x68>)
 8004bb8:	f012 f928 	bl	8016e0c <puts>
            printf( "DATA RATE   : DR_%d\n\n", params->Datarate );
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	480e      	ldr	r0, [pc, #56]	; (8004bf8 <DisplayJoinRequestUpdate+0x6c>)
 8004bc0:	5661      	ldrsb	r1, [r4, r1]
 8004bc2:	f012 f883 	bl	8016ccc <iprintf>
        printf( "\nABP\n\n" );
        printf( "DevAddr     : %08lX\n", params->CommissioningParams->DevAddr );
        printf( "\n\n" );
    }
#endif
}
 8004bc6:	bd10      	pop	{r4, pc}
        printf( "###### ===========   JOINED     ============ ######\n" );
 8004bc8:	4807      	ldr	r0, [pc, #28]	; (8004be8 <DisplayJoinRequestUpdate+0x5c>)
 8004bca:	f012 f91f 	bl	8016e0c <puts>
        printf( "\nABP\n\n" );
 8004bce:	480b      	ldr	r0, [pc, #44]	; (8004bfc <DisplayJoinRequestUpdate+0x70>)
 8004bd0:	f012 f91c 	bl	8016e0c <puts>
        printf( "DevAddr     : %08lX\n", params->CommissioningParams->DevAddr );
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	480a      	ldr	r0, [pc, #40]	; (8004c00 <DisplayJoinRequestUpdate+0x74>)
 8004bd8:	69d9      	ldr	r1, [r3, #28]
 8004bda:	f012 f877 	bl	8016ccc <iprintf>
        printf( "\n\n" );
 8004bde:	4805      	ldr	r0, [pc, #20]	; (8004bf4 <DisplayJoinRequestUpdate+0x68>)
 8004be0:	f012 f914 	bl	8016e0c <puts>
}
 8004be4:	e7ef      	b.n	8004bc6 <DisplayJoinRequestUpdate+0x3a>
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	08019155 	.word	0x08019155
 8004bec:	08019189 	.word	0x08019189
 8004bf0:	08019190 	.word	0x08019190
 8004bf4:	080191ba 	.word	0x080191ba
 8004bf8:	080191a6 	.word	0x080191a6
 8004bfc:	080191bc 	.word	0x080191bc
 8004c00:	080191c2 	.word	0x080191c2

08004c04 <DisplayTxUpdate>:

void DisplayTxUpdate( LmHandlerTxParams_t *params )
{
 8004c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    MibRequestConfirm_t mibGet;
    LoRaMacNvmData_t *nvm;

    mibGet.Type = MIB_NVM_CTXS;
 8004c06:	2334      	movs	r3, #52	; 0x34
{
 8004c08:	0004      	movs	r4, r0
 8004c0a:	b08d      	sub	sp, #52	; 0x34
    mibGet.Type = MIB_NVM_CTXS;
 8004c0c:	ad03      	add	r5, sp, #12
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004c0e:	0028      	movs	r0, r5
    mibGet.Type = MIB_NVM_CTXS;
 8004c10:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004c12:	f002 fbe9 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    nvm = mibGet.Param.Contexts;

    if( params->IsMcpsConfirm == 0 )
 8004c16:	7823      	ldrb	r3, [r4, #0]
 8004c18:	4f4c      	ldr	r7, [pc, #304]	; (8004d4c <DisplayTxUpdate+0x148>)
 8004c1a:	4e4d      	ldr	r6, [pc, #308]	; (8004d50 <DisplayTxUpdate+0x14c>)
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <DisplayTxUpdate+0x32>
    {
        printf( "\n###### =========== MLME-Confirm ============ ######\n" );
 8004c20:	484c      	ldr	r0, [pc, #304]	; (8004d54 <DisplayTxUpdate+0x150>)
 8004c22:	f012 f8f3 	bl	8016e0c <puts>
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004c26:	7863      	ldrb	r3, [r4, #1]
 8004c28:	0030      	movs	r0, r6
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	58f9      	ldr	r1, [r7, r3]
 8004c2e:	f012 f84d 	bl	8016ccc <iprintf>
        }
        printf("\n");
    }

    printf( "\n" );
}
 8004c32:	b00d      	add	sp, #52	; 0x34
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    nvm = mibGet.Param.Contexts;
 8004c36:	686b      	ldr	r3, [r5, #4]
    printf( "\n###### =========== MCPS-Confirm ============ ######\n" );
 8004c38:	4847      	ldr	r0, [pc, #284]	; (8004d58 <DisplayTxUpdate+0x154>)
    nvm = mibGet.Param.Contexts;
 8004c3a:	9301      	str	r3, [sp, #4]
    printf( "\n###### =========== MCPS-Confirm ============ ######\n" );
 8004c3c:	f012 f8e6 	bl	8016e0c <puts>
    printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004c40:	7863      	ldrb	r3, [r4, #1]
 8004c42:	0030      	movs	r0, r6
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	58f9      	ldr	r1, [r7, r3]
 8004c48:	f012 f840 	bl	8016ccc <iprintf>
    printf( "\n###### =====   UPLINK FRAME %8lu   ===== ######\n", params->UplinkCounter );
 8004c4c:	68e1      	ldr	r1, [r4, #12]
 8004c4e:	4843      	ldr	r0, [pc, #268]	; (8004d5c <DisplayTxUpdate+0x158>)
 8004c50:	f012 f83c 	bl	8016ccc <iprintf>
    printf( "\n" );
 8004c54:	200a      	movs	r0, #10
 8004c56:	f012 f853 	bl	8016d00 <putchar>
    mibGet.Type = MIB_DEVICE_CLASS;
 8004c5a:	2300      	movs	r3, #0
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004c5c:	0028      	movs	r0, r5
    mibGet.Type = MIB_DEVICE_CLASS;
 8004c5e:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibGet);
 8004c60:	f002 fbc2 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    printf( "CLASS       : %c\n", "ABC"[mibGet.Param.Class] );
 8004c64:	792b      	ldrb	r3, [r5, #4]
 8004c66:	4a3e      	ldr	r2, [pc, #248]	; (8004d60 <DisplayTxUpdate+0x15c>)
 8004c68:	483e      	ldr	r0, [pc, #248]	; (8004d64 <DisplayTxUpdate+0x160>)
 8004c6a:	5cd1      	ldrb	r1, [r2, r3]
 8004c6c:	f012 f82e 	bl	8016ccc <iprintf>
    printf( "\n" );
 8004c70:	200a      	movs	r0, #10
 8004c72:	f012 f845 	bl	8016d00 <putchar>
    printf( "TX PORT     : %d\n", params->AppData.Port );
 8004c76:	7c21      	ldrb	r1, [r4, #16]
 8004c78:	483b      	ldr	r0, [pc, #236]	; (8004d68 <DisplayTxUpdate+0x164>)
 8004c7a:	f012 f827 	bl	8016ccc <iprintf>
    if( params->AppData.BufferSize != 0 )
 8004c7e:	7c63      	ldrb	r3, [r4, #17]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d011      	beq.n	8004ca8 <DisplayTxUpdate+0xa4>
        printf( "TX DATA     : " );
 8004c84:	4839      	ldr	r0, [pc, #228]	; (8004d6c <DisplayTxUpdate+0x168>)
 8004c86:	f012 f821 	bl	8016ccc <iprintf>
        if( params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
 8004c8a:	7a23      	ldrb	r3, [r4, #8]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d13e      	bne.n	8004d0e <DisplayTxUpdate+0x10a>
            printf( "CONFIRMED - %s\n", ( params->AckReceived != 0 ) ? "ACK" : "NACK" );
 8004c90:	7a63      	ldrb	r3, [r4, #9]
 8004c92:	4937      	ldr	r1, [pc, #220]	; (8004d70 <DisplayTxUpdate+0x16c>)
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d100      	bne.n	8004c9a <DisplayTxUpdate+0x96>
 8004c98:	4936      	ldr	r1, [pc, #216]	; (8004d74 <DisplayTxUpdate+0x170>)
 8004c9a:	4837      	ldr	r0, [pc, #220]	; (8004d78 <DisplayTxUpdate+0x174>)
 8004c9c:	f012 f816 	bl	8016ccc <iprintf>
        PrintHexBuffer( params->AppData.Buffer, params->AppData.BufferSize );
 8004ca0:	7c61      	ldrb	r1, [r4, #17]
 8004ca2:	6960      	ldr	r0, [r4, #20]
 8004ca4:	f7ff feb2 	bl	8004a0c <PrintHexBuffer>
    printf( "\n" );
 8004ca8:	200a      	movs	r0, #10
 8004caa:	f012 f829 	bl	8016d00 <putchar>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
 8004cae:	210a      	movs	r1, #10
 8004cb0:	4832      	ldr	r0, [pc, #200]	; (8004d7c <DisplayTxUpdate+0x178>)
 8004cb2:	5661      	ldrsb	r1, [r4, r1]
 8004cb4:	f012 f80a 	bl	8016ccc <iprintf>
    mibGet.Type  = MIB_CHANNELS;
 8004cb8:	231e      	movs	r3, #30
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004cba:	0028      	movs	r0, r5
    mibGet.Type  = MIB_CHANNELS;
 8004cbc:	702b      	strb	r3, [r5, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004cbe:	f002 fb93 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d107      	bne.n	8004cd6 <DisplayTxUpdate+0xd2>
        printf( "U/L FREQ    : %lu\n", mibGet.Param.ChannelList[params->Channel].Frequency );
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	7e62      	ldrb	r2, [r4, #25]
 8004cca:	482d      	ldr	r0, [pc, #180]	; (8004d80 <DisplayTxUpdate+0x17c>)
 8004ccc:	4353      	muls	r3, r2
 8004cce:	686a      	ldr	r2, [r5, #4]
 8004cd0:	5899      	ldr	r1, [r3, r2]
 8004cd2:	f011 fffb 	bl	8016ccc <iprintf>
    printf( "TX POWER    : %d\n", params->TxPower );
 8004cd6:	2118      	movs	r1, #24
 8004cd8:	482a      	ldr	r0, [pc, #168]	; (8004d84 <DisplayTxUpdate+0x180>)
 8004cda:	5661      	ldrsb	r1, [r4, r1]
 8004cdc:	f011 fff6 	bl	8016ccc <iprintf>
    mibGet.Type  = MIB_CHANNELS_MASK;
 8004ce0:	2323      	movs	r3, #35	; 0x23
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004ce2:	0028      	movs	r0, r5
    mibGet.Type  = MIB_CHANNELS_MASK;
 8004ce4:	702b      	strb	r3, [r5, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8004ce6:	f002 fb7f 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d11b      	bne.n	8004d26 <DisplayTxUpdate+0x122>
        printf("CHANNEL MASK: ");
 8004cee:	4826      	ldr	r0, [pc, #152]	; (8004d88 <DisplayTxUpdate+0x184>)
 8004cf0:	f011 ffec 	bl	8016ccc <iprintf>
        switch( nvm->MacGroup2.Region )
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	334c      	adds	r3, #76	; 0x4c
 8004cf8:	7818      	ldrb	r0, [r3, #0]
 8004cfa:	2809      	cmp	r0, #9
 8004cfc:	d821      	bhi.n	8004d42 <DisplayTxUpdate+0x13e>
 8004cfe:	4e23      	ldr	r6, [pc, #140]	; (8004d8c <DisplayTxUpdate+0x188>)
 8004d00:	f7fb fa14 	bl	800012c <__gnu_thumb1_case_uqi>
 8004d04:	09151509 	.word	0x09151509
 8004d08:	09090909 	.word	0x09090909
 8004d0c:	0915      	.short	0x0915
            printf( "UNCONFIRMED\n" );
 8004d0e:	4820      	ldr	r0, [pc, #128]	; (8004d90 <DisplayTxUpdate+0x18c>)
 8004d10:	f012 f87c 	bl	8016e0c <puts>
 8004d14:	e7c4      	b.n	8004ca0 <DisplayTxUpdate+0x9c>
                printf( "%04X ", mibGet.Param.ChannelsMask[0] );
 8004d16:	686b      	ldr	r3, [r5, #4]
 8004d18:	0030      	movs	r0, r6
 8004d1a:	8819      	ldrh	r1, [r3, #0]
 8004d1c:	f011 ffd6 	bl	8016ccc <iprintf>
        printf("\n");
 8004d20:	200a      	movs	r0, #10
 8004d22:	f011 ffed 	bl	8016d00 <putchar>
    printf( "\n" );
 8004d26:	200a      	movs	r0, #10
 8004d28:	f011 ffea 	bl	8016d00 <putchar>
 8004d2c:	e781      	b.n	8004c32 <DisplayTxUpdate+0x2e>
        switch( nvm->MacGroup2.Region )
 8004d2e:	2400      	movs	r4, #0
                    printf( "%04X ", mibGet.Param.ChannelsMask[i] );
 8004d30:	686b      	ldr	r3, [r5, #4]
 8004d32:	0030      	movs	r0, r6
 8004d34:	5b19      	ldrh	r1, [r3, r4]
                for( uint8_t i = 0; i < 5; i++)
 8004d36:	3402      	adds	r4, #2
                    printf( "%04X ", mibGet.Param.ChannelsMask[i] );
 8004d38:	f011 ffc8 	bl	8016ccc <iprintf>
                for( uint8_t i = 0; i < 5; i++)
 8004d3c:	2c0a      	cmp	r4, #10
 8004d3e:	d1f7      	bne.n	8004d30 <DisplayTxUpdate+0x12c>
 8004d40:	e7ee      	b.n	8004d20 <DisplayTxUpdate+0x11c>
                printf( "\n###### ========= Unknown Region ============ ######" );
 8004d42:	4814      	ldr	r0, [pc, #80]	; (8004d94 <DisplayTxUpdate+0x190>)
 8004d44:	f011 ffc2 	bl	8016ccc <iprintf>
                break;
 8004d48:	e7ea      	b.n	8004d20 <DisplayTxUpdate+0x11c>
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	20000004 	.word	0x20000004
 8004d50:	08018ff2 	.word	0x08018ff2
 8004d54:	080191dc 	.word	0x080191dc
 8004d58:	08019211 	.word	0x08019211
 8004d5c:	08019246 	.word	0x08019246
 8004d60:	0801934b 	.word	0x0801934b
 8004d64:	08019278 	.word	0x08019278
 8004d68:	0801928a 	.word	0x0801928a
 8004d6c:	0801929c 	.word	0x0801929c
 8004d70:	080191d8 	.word	0x080191d8
 8004d74:	080191d7 	.word	0x080191d7
 8004d78:	080192ab 	.word	0x080192ab
 8004d7c:	080192c7 	.word	0x080192c7
 8004d80:	080192dc 	.word	0x080192dc
 8004d84:	080192ef 	.word	0x080192ef
 8004d88:	08019301 	.word	0x08019301
 8004d8c:	08019310 	.word	0x08019310
 8004d90:	080192bb 	.word	0x080192bb
 8004d94:	08019316 	.word	0x08019316

08004d98 <DisplayRxUpdate>:

void DisplayRxUpdate( LmHandlerAppData_t *appData, LmHandlerRxParams_t *params )
{
 8004d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9a:	b087      	sub	sp, #28
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8004d9c:	466a      	mov	r2, sp
{
 8004d9e:	000c      	movs	r4, r1
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8004da0:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <DisplayRxUpdate+0xa8>)
{
 8004da2:	0005      	movs	r5, r0
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8004da4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004da6:	c243      	stmia	r2!, {r0, r1, r6}
 8004da8:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004daa:	c243      	stmia	r2!, {r0, r1, r6}

    if( params->IsMcpsIndication == 0 )
 8004dac:	7823      	ldrb	r3, [r4, #0]
 8004dae:	4f25      	ldr	r7, [pc, #148]	; (8004e44 <DisplayRxUpdate+0xac>)
 8004db0:	4e25      	ldr	r6, [pc, #148]	; (8004e48 <DisplayRxUpdate+0xb0>)
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <DisplayRxUpdate+0x34>
    {
        printf( "\n###### ========== MLME-Indication ========== ######\n" );
 8004db6:	4825      	ldr	r0, [pc, #148]	; (8004e4c <DisplayRxUpdate+0xb4>)
 8004db8:	f012 f828 	bl	8016e0c <puts>
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004dbc:	7863      	ldrb	r3, [r4, #1]
 8004dbe:	0030      	movs	r0, r6
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	58f9      	ldr	r1, [r7, r3]
 8004dc4:	f011 ff82 	bl	8016ccc <iprintf>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
    printf( "RX RSSI     : %d\n", params->Rssi );
    printf( "RX SNR      : %d\n", params->Snr );

    printf( "\n" );
}
 8004dc8:	b007      	add	sp, #28
 8004dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf( "\n###### ========== MCPS-Indication ========== ######\n" );
 8004dcc:	4820      	ldr	r0, [pc, #128]	; (8004e50 <DisplayRxUpdate+0xb8>)
 8004dce:	f012 f81d 	bl	8016e0c <puts>
    printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 8004dd2:	7863      	ldrb	r3, [r4, #1]
 8004dd4:	0030      	movs	r0, r6
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	58f9      	ldr	r1, [r7, r3]
 8004dda:	f011 ff77 	bl	8016ccc <iprintf>
    printf( "\n###### =====  DOWNLINK FRAME %8lu  ===== ######\n", params->DownlinkCounter );
 8004dde:	68e1      	ldr	r1, [r4, #12]
 8004de0:	481c      	ldr	r0, [pc, #112]	; (8004e54 <DisplayRxUpdate+0xbc>)
 8004de2:	f011 ff73 	bl	8016ccc <iprintf>
    printf( "RX WINDOW   : %s\n", slotStrings[params->RxSlot] );
 8004de6:	2310      	movs	r3, #16
 8004de8:	466a      	mov	r2, sp
 8004dea:	56e3      	ldrsb	r3, [r4, r3]
 8004dec:	481a      	ldr	r0, [pc, #104]	; (8004e58 <DisplayRxUpdate+0xc0>)
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	5899      	ldr	r1, [r3, r2]
 8004df2:	f011 ff6b 	bl	8016ccc <iprintf>
    printf( "RX PORT     : %d\n", appData->Port );
 8004df6:	7829      	ldrb	r1, [r5, #0]
 8004df8:	4818      	ldr	r0, [pc, #96]	; (8004e5c <DisplayRxUpdate+0xc4>)
 8004dfa:	f011 ff67 	bl	8016ccc <iprintf>
    if( appData->BufferSize != 0 )
 8004dfe:	786b      	ldrb	r3, [r5, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <DisplayRxUpdate+0x7a>
        printf( "RX DATA     : \n" );
 8004e04:	4816      	ldr	r0, [pc, #88]	; (8004e60 <DisplayRxUpdate+0xc8>)
 8004e06:	f012 f801 	bl	8016e0c <puts>
        PrintHexBuffer( appData->Buffer, appData->BufferSize );
 8004e0a:	7869      	ldrb	r1, [r5, #1]
 8004e0c:	6868      	ldr	r0, [r5, #4]
 8004e0e:	f7ff fdfd 	bl	8004a0c <PrintHexBuffer>
    printf( "\n" );
 8004e12:	200a      	movs	r0, #10
 8004e14:	f011 ff74 	bl	8016d00 <putchar>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
 8004e18:	2108      	movs	r1, #8
 8004e1a:	4812      	ldr	r0, [pc, #72]	; (8004e64 <DisplayRxUpdate+0xcc>)
 8004e1c:	5661      	ldrsb	r1, [r4, r1]
 8004e1e:	f011 ff55 	bl	8016ccc <iprintf>
    printf( "RX RSSI     : %d\n", params->Rssi );
 8004e22:	2109      	movs	r1, #9
 8004e24:	4810      	ldr	r0, [pc, #64]	; (8004e68 <DisplayRxUpdate+0xd0>)
 8004e26:	5661      	ldrsb	r1, [r4, r1]
 8004e28:	f011 ff50 	bl	8016ccc <iprintf>
    printf( "RX SNR      : %d\n", params->Snr );
 8004e2c:	210a      	movs	r1, #10
 8004e2e:	480f      	ldr	r0, [pc, #60]	; (8004e6c <DisplayRxUpdate+0xd4>)
 8004e30:	5661      	ldrsb	r1, [r4, r1]
 8004e32:	f011 ff4b 	bl	8016ccc <iprintf>
    printf( "\n" );
 8004e36:	200a      	movs	r0, #10
 8004e38:	f011 ff62 	bl	8016d00 <putchar>
 8004e3c:	e7c4      	b.n	8004dc8 <DisplayRxUpdate+0x30>
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	08018848 	.word	0x08018848
 8004e44:	20000004 	.word	0x20000004
 8004e48:	08018ff2 	.word	0x08018ff2
 8004e4c:	0801934f 	.word	0x0801934f
 8004e50:	08019384 	.word	0x08019384
 8004e54:	080193b9 	.word	0x080193b9
 8004e58:	080193eb 	.word	0x080193eb
 8004e5c:	080193fd 	.word	0x080193fd
 8004e60:	0801940f 	.word	0x0801940f
 8004e64:	080192c7 	.word	0x080192c7
 8004e68:	0801941e 	.word	0x0801941e
 8004e6c:	08019430 	.word	0x08019430

08004e70 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
    NvmNotifyFlags = notifyFlags;
 8004e70:	4b01      	ldr	r3, [pc, #4]	; (8004e78 <NvmDataMgmtEvent+0x8>)
 8004e72:	8018      	strh	r0, [r3, #0]
}
 8004e74:	4770      	bx	lr
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	200003b2 	.word	0x200003b2

08004e7c <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    uint16_t offset = 0;
    uint16_t dataSize = 0;
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_NVM_CTXS;
 8004e7e:	2734      	movs	r7, #52	; 0x34
{
 8004e80:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NVM_CTXS;
 8004e82:	ac01      	add	r4, sp, #4
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004e84:	0020      	movs	r0, r4
    mibReq.Type = MIB_NVM_CTXS;
 8004e86:	7027      	strb	r7, [r4, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004e88:	f002 faae 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;

    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 8004e8c:	4d2f      	ldr	r5, [pc, #188]	; (8004f4c <NvmDataMgmtStore+0xd0>)
 8004e8e:	882b      	ldrh	r3, [r5, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <NvmDataMgmtStore+0x20>
    {
        // There was no update.
        return 0;
 8004e94:	2400      	movs	r4, #0
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 8004e96:	0020      	movs	r0, r4
 8004e98:	b00b      	add	sp, #44	; 0x2c
 8004e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;
 8004e9c:	6866      	ldr	r6, [r4, #4]
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 8004e9e:	f002 fa2b 	bl	80072f8 <LoRaMacStop>
 8004ea2:	1e02      	subs	r2, r0, #0
 8004ea4:	d1f6      	bne.n	8004e94 <NvmDataMgmtStore+0x18>
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_CRYPTO ) ==
 8004ea6:	8829      	ldrh	r1, [r5, #0]
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	000c      	movs	r4, r1
 8004eac:	401c      	ands	r4, r3
 8004eae:	4219      	tst	r1, r3
 8004eb0:	d004      	beq.n	8004ebc <NvmDataMgmtStore+0x40>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ),
 8004eb2:	0039      	movs	r1, r7
 8004eb4:	0030      	movs	r0, r6
 8004eb6:	f006 fbb6 	bl	800b626 <NvmmWrite>
 8004eba:	0004      	movs	r4, r0
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1 ) ==
 8004ebc:	882b      	ldrh	r3, [r5, #0]
 8004ebe:	079b      	lsls	r3, r3, #30
 8004ec0:	d506      	bpl.n	8004ed0 <NvmDataMgmtStore+0x54>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->MacGroup1,
 8004ec2:	2234      	movs	r2, #52	; 0x34
 8004ec4:	2118      	movs	r1, #24
 8004ec6:	18b0      	adds	r0, r6, r2
 8004ec8:	f006 fbad 	bl	800b626 <NvmmWrite>
 8004ecc:	1824      	adds	r4, r4, r0
 8004ece:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2 ) ==
 8004ed0:	882b      	ldrh	r3, [r5, #0]
 8004ed2:	075b      	lsls	r3, r3, #29
 8004ed4:	d507      	bpl.n	8004ee6 <NvmDataMgmtStore+0x6a>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->MacGroup2,
 8004ed6:	224c      	movs	r2, #76	; 0x4c
 8004ed8:	21ac      	movs	r1, #172	; 0xac
 8004eda:	18b0      	adds	r0, r6, r2
 8004edc:	0049      	lsls	r1, r1, #1
 8004ede:	f006 fba2 	bl	800b626 <NvmmWrite>
 8004ee2:	1824      	adds	r4, r4, r0
 8004ee4:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT ) ==
 8004ee6:	882b      	ldrh	r3, [r5, #0]
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	d508      	bpl.n	8004efe <NvmDataMgmtStore+0x82>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ),
 8004eec:	22d2      	movs	r2, #210	; 0xd2
 8004eee:	21d0      	movs	r1, #208	; 0xd0
 8004ef0:	0052      	lsls	r2, r2, #1
 8004ef2:	0049      	lsls	r1, r1, #1
 8004ef4:	18b0      	adds	r0, r6, r2
 8004ef6:	f006 fb96 	bl	800b626 <NvmmWrite>
 8004efa:	1824      	adds	r4, r4, r0
 8004efc:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1 ) ==
 8004efe:	882b      	ldrh	r3, [r5, #0]
 8004f00:	06db      	lsls	r3, r3, #27
 8004f02:	d507      	bpl.n	8004f14 <NvmDataMgmtStore+0x98>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->RegionGroup1,
 8004f04:	22d1      	movs	r2, #209	; 0xd1
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	2114      	movs	r1, #20
 8004f0a:	18b0      	adds	r0, r6, r2
 8004f0c:	f006 fb8b 	bl	800b626 <NvmmWrite>
 8004f10:	1824      	adds	r4, r4, r0
 8004f12:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2 ) ==
 8004f14:	882b      	ldrh	r3, [r5, #0]
 8004f16:	069b      	lsls	r3, r3, #26
 8004f18:	d508      	bpl.n	8004f2c <NvmDataMgmtStore+0xb0>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->RegionGroup2,
 8004f1a:	22d6      	movs	r2, #214	; 0xd6
 8004f1c:	21df      	movs	r1, #223	; 0xdf
 8004f1e:	0092      	lsls	r2, r2, #2
 8004f20:	0089      	lsls	r1, r1, #2
 8004f22:	18b0      	adds	r0, r6, r2
 8004f24:	f006 fb7f 	bl	800b626 <NvmmWrite>
 8004f28:	1824      	adds	r4, r4, r0
 8004f2a:	b2a4      	uxth	r4, r4
    if( ( NvmNotifyFlags & LORAMAC_NVM_NOTIFY_FLAG_CLASS_B ) ==
 8004f2c:	882b      	ldrh	r3, [r5, #0]
 8004f2e:	065b      	lsls	r3, r3, #25
 8004f30:	d507      	bpl.n	8004f42 <NvmDataMgmtStore+0xc6>
        dataSize += NvmmWrite( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ),
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <NvmDataMgmtStore+0xd4>)
 8004f34:	2118      	movs	r1, #24
 8004f36:	001a      	movs	r2, r3
 8004f38:	18f0      	adds	r0, r6, r3
 8004f3a:	f006 fb74 	bl	800b626 <NvmmWrite>
 8004f3e:	1824      	adds	r4, r4, r0
 8004f40:	b2a4      	uxth	r4, r4
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	802b      	strh	r3, [r5, #0]
    LoRaMacStart( );
 8004f46:	f002 f9cf 	bl	80072e8 <LoRaMacStart>
    return dataSize;
 8004f4a:	e7a4      	b.n	8004e96 <NvmDataMgmtStore+0x1a>
 8004f4c:	200003b2 	.word	0x200003b2
 8004f50:	000006d4 	.word	0x000006d4

08004f54 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 8004f54:	b530      	push	{r4, r5, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_NVM_CTXS;
 8004f56:	2434      	movs	r4, #52	; 0x34
{
 8004f58:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NVM_CTXS;
 8004f5a:	ad01      	add	r5, sp, #4
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004f5c:	0028      	movs	r0, r5
    mibReq.Type = MIB_NVM_CTXS;
 8004f5e:	702c      	strb	r4, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8004f60:	f002 fa42 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;
    uint16_t offset = 0;

    // Crypto
    if( NvmmCrc32Check( sizeof( LoRaMacCryptoNvmData_t ), offset ) == false )
 8004f64:	2100      	movs	r1, #0
 8004f66:	0020      	movs	r0, r4
    LoRaMacNvmData_t* nvm = mibReq.Param.Contexts;
 8004f68:	9d02      	ldr	r5, [sp, #8]
    if( NvmmCrc32Check( sizeof( LoRaMacCryptoNvmData_t ), offset ) == false )
 8004f6a:	f006 fb76 	bl	800b65a <NvmmCrc32Check>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d102      	bne.n	8004f78 <NvmDataMgmtRestore+0x24>
    {
        return 0;
 8004f72:	2000      	movs	r0, #0
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 8004f74:	b00b      	add	sp, #44	; 0x2c
 8004f76:	bd30      	pop	{r4, r5, pc}
    if( NvmmCrc32Check( sizeof( LoRaMacNvmDataGroup1_t ), offset ) == false )
 8004f78:	0021      	movs	r1, r4
 8004f7a:	2018      	movs	r0, #24
 8004f7c:	f006 fb6d 	bl	800b65a <NvmmCrc32Check>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d0f6      	beq.n	8004f72 <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( LoRaMacNvmDataGroup2_t ), offset ) == false )
 8004f84:	20ac      	movs	r0, #172	; 0xac
 8004f86:	214c      	movs	r1, #76	; 0x4c
 8004f88:	0040      	lsls	r0, r0, #1
 8004f8a:	f006 fb66 	bl	800b65a <NvmmCrc32Check>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d0ef      	beq.n	8004f72 <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( SecureElementNvmData_t ), offset ) == false )
 8004f92:	21d2      	movs	r1, #210	; 0xd2
 8004f94:	20d0      	movs	r0, #208	; 0xd0
 8004f96:	0049      	lsls	r1, r1, #1
 8004f98:	0040      	lsls	r0, r0, #1
 8004f9a:	f006 fb5e 	bl	800b65a <NvmmCrc32Check>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0e7      	beq.n	8004f72 <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( RegionNvmDataGroup1_t ), offset ) == false )
 8004fa2:	21d1      	movs	r1, #209	; 0xd1
 8004fa4:	2014      	movs	r0, #20
 8004fa6:	0089      	lsls	r1, r1, #2
 8004fa8:	f006 fb57 	bl	800b65a <NvmmCrc32Check>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d0e0      	beq.n	8004f72 <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( RegionNvmDataGroup2_t ), offset ) == false )
 8004fb0:	21d6      	movs	r1, #214	; 0xd6
 8004fb2:	20df      	movs	r0, #223	; 0xdf
 8004fb4:	0089      	lsls	r1, r1, #2
 8004fb6:	0080      	lsls	r0, r0, #2
 8004fb8:	f006 fb4f 	bl	800b65a <NvmmCrc32Check>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d0d8      	beq.n	8004f72 <NvmDataMgmtRestore+0x1e>
    if( NvmmCrc32Check( sizeof( LoRaMacClassBNvmData_t ), offset ) == false )
 8004fc0:	2018      	movs	r0, #24
 8004fc2:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <NvmDataMgmtRestore+0x8c>)
 8004fc4:	f006 fb49 	bl	800b65a <NvmmCrc32Check>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d0d2      	beq.n	8004f72 <NvmDataMgmtRestore+0x1e>
    if( NvmmRead( ( uint8_t* ) nvm, sizeof( LoRaMacNvmData_t ), 0 ) ==
 8004fcc:	4c05      	ldr	r4, [pc, #20]	; (8004fe4 <NvmDataMgmtRestore+0x90>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	0021      	movs	r1, r4
 8004fd2:	0028      	movs	r0, r5
 8004fd4:	f006 fb34 	bl	800b640 <NvmmRead>
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d1ca      	bne.n	8004f72 <NvmDataMgmtRestore+0x1e>
 8004fdc:	e7ca      	b.n	8004f74 <NvmDataMgmtRestore+0x20>
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	000006d4 	.word	0x000006d4
 8004fe4:	000006ec 	.word	0x000006ec

08004fe8 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8004fe8:	2308      	movs	r3, #8
 8004fea:	4a08      	ldr	r2, [pc, #32]	; (800500c <OnRadioTxTimeout+0x24>)
{
 8004fec:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8004fee:	7811      	ldrb	r1, [r2, #0]
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004ff4:	23d2      	movs	r3, #210	; 0xd2
 8004ff6:	4a06      	ldr	r2, [pc, #24]	; (8005010 <OnRadioTxTimeout+0x28>)
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	58d3      	ldr	r3, [r2, r3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <OnRadioTxTimeout+0x20>
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d000      	beq.n	8005008 <OnRadioTxTimeout+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005006:	4798      	blx	r3
    }
}
 8005008:	bd10      	pop	{r4, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	200003b4 	.word	0x200003b4
 8005010:	200003b8 	.word	0x200003b8

08005014 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8005014:	2304      	movs	r3, #4
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <OnRadioRxError+0x24>)
{
 8005018:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800501a:	7811      	ldrb	r1, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8005020:	23d2      	movs	r3, #210	; 0xd2
 8005022:	4a06      	ldr	r2, [pc, #24]	; (800503c <OnRadioRxError+0x28>)
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	58d3      	ldr	r3, [r2, r3]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <OnRadioRxError+0x20>
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d000      	beq.n	8005034 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005032:	4798      	blx	r3
    }
}
 8005034:	bd10      	pop	{r4, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	200003b4 	.word	0x200003b4
 800503c:	200003b8 	.word	0x200003b8

08005040 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8005040:	2302      	movs	r3, #2
 8005042:	4a08      	ldr	r2, [pc, #32]	; (8005064 <OnRadioRxTimeout+0x24>)
{
 8005044:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8005046:	7811      	ldrb	r1, [r2, #0]
 8005048:	430b      	orrs	r3, r1
 800504a:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800504c:	23d2      	movs	r3, #210	; 0xd2
 800504e:	4a06      	ldr	r2, [pc, #24]	; (8005068 <OnRadioRxTimeout+0x28>)
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	58d3      	ldr	r3, [r2, r3]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <OnRadioRxTimeout+0x20>
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d000      	beq.n	8005060 <OnRadioRxTimeout+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800505e:	4798      	blx	r3
    }
}
 8005060:	bd10      	pop	{r4, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	200003b4 	.word	0x200003b4
 8005068:	200003b8 	.word	0x200003b8

0800506c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800506c:	23c2      	movs	r3, #194	; 0xc2
 800506e:	4a05      	ldr	r2, [pc, #20]	; (8005084 <UpdateRxSlotIdleState+0x18>)
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d000      	beq.n	800507a <UpdateRxSlotIdleState+0xe>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8005078:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800507a:	4903      	ldr	r1, [pc, #12]	; (8005088 <UpdateRxSlotIdleState+0x1c>)
 800507c:	4a03      	ldr	r2, [pc, #12]	; (800508c <UpdateRxSlotIdleState+0x20>)
 800507e:	548b      	strb	r3, [r1, r2]
 8005080:	4770      	bx	lr
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	200008d0 	.word	0x200008d0
 8005088:	200003b8 	.word	0x200003b8
 800508c:	0000048c 	.word	0x0000048c

08005090 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8005090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <GetMaxAppPayloadWithoutFOptsLength+0x24>)
 8005094:	a902      	add	r1, sp, #8
 8005096:	001a      	movs	r2, r3
 8005098:	3280      	adds	r2, #128	; 0x80
 800509a:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800509c:	334c      	adds	r3, #76	; 0x4c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800509e:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80050a0:	220d      	movs	r2, #13
    getPhy.Datarate = datarate;
 80050a2:	7048      	strb	r0, [r1, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80050a4:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80050a6:	7818      	ldrb	r0, [r3, #0]
 80050a8:	f003 fe1c 	bl	8008ce4 <RegionGetPhyParam>

    return phyParam.Value;
 80050ac:	b2c0      	uxtb	r0, r0
}
 80050ae:	b005      	add	sp, #20
 80050b0:	bd00      	pop	{pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	200008d0 	.word	0x200008d0

080050b8 <OnRetransmitTimeoutTimerEvent>:
{
 80050b8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80050ba:	480a      	ldr	r0, [pc, #40]	; (80050e4 <OnRetransmitTimeoutTimerEvent+0x2c>)
 80050bc:	f006 fc74 	bl	800b9a8 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <OnRetransmitTimeoutTimerEvent+0x30>)
 80050c2:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <OnRetransmitTimeoutTimerEvent+0x34>)
 80050c4:	5c9a      	ldrb	r2, [r3, r2]
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d002      	beq.n	80050d0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80050ca:	2101      	movs	r1, #1
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <OnRetransmitTimeoutTimerEvent+0x38>)
 80050ce:	5499      	strb	r1, [r3, r2]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80050d0:	22d2      	movs	r2, #210	; 0xd2
 80050d2:	0092      	lsls	r2, r2, #2
 80050d4:	589b      	ldr	r3, [r3, r2]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <OnRetransmitTimeoutTimerEvent+0x2a>
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d000      	beq.n	80050e2 <OnRetransmitTimeoutTimerEvent+0x2a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80050e0:	4798      	blx	r3
}
 80050e2:	bd10      	pop	{r4, pc}
 80050e4:	200007b8 	.word	0x200007b8
 80050e8:	200003b8 	.word	0x200003b8
 80050ec:	0000041a 	.word	0x0000041a
 80050f0:	00000419 	.word	0x00000419

080050f4 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80050f4:	22d0      	movs	r2, #208	; 0xd0
 80050f6:	2380      	movs	r3, #128	; 0x80
{
 80050f8:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80050fa:	4c0a      	ldr	r4, [pc, #40]	; (8005124 <PrepareRxDoneAbort+0x30>)
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	58a1      	ldr	r1, [r4, r2]
 8005100:	430b      	orrs	r3, r1
 8005102:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <PrepareRxDoneAbort+0x34>)
 8005106:	5ce3      	ldrb	r3, [r4, r3]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <PrepareRxDoneAbort+0x1e>
        OnRetransmitTimeoutTimerEvent( NULL );
 800510c:	2000      	movs	r0, #0
 800510e:	f7ff ffd3 	bl	80050b8 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8005112:	2322      	movs	r3, #34	; 0x22
 8005114:	4905      	ldr	r1, [pc, #20]	; (800512c <PrepareRxDoneAbort+0x38>)
 8005116:	5c62      	ldrb	r2, [r4, r1]
 8005118:	439a      	bics	r2, r3
 800511a:	4313      	orrs	r3, r2
 800511c:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 800511e:	f7ff ffa5 	bl	800506c <UpdateRxSlotIdleState>
}
 8005122:	bd10      	pop	{r4, pc}
 8005124:	200003b8 	.word	0x200003b8
 8005128:	0000041a 	.word	0x0000041a
 800512c:	0000048d 	.word	0x0000048d

08005130 <HandleRadioRxErrorTimeout>:
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005130:	23c2      	movs	r3, #194	; 0xc2
{
 8005132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005134:	4f2d      	ldr	r7, [pc, #180]	; (80051ec <HandleRadioRxErrorTimeout+0xbc>)
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	5cfb      	ldrb	r3, [r7, r3]
{
 800513a:	0005      	movs	r5, r0
 800513c:	000c      	movs	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800513e:	2b02      	cmp	r3, #2
 8005140:	d003      	beq.n	800514a <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 8005142:	4b2b      	ldr	r3, [pc, #172]	; (80051f0 <HandleRadioRxErrorTimeout+0xc0>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800514a:	f002 ff17 	bl	8007f7c <LoRaMacClassBIsBeaconExpected>
 800514e:	1e06      	subs	r6, r0, #0
 8005150:	d005      	beq.n	800515e <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8005152:	2002      	movs	r0, #2
 8005154:	f002 ff08 	bl	8007f68 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8005158:	2000      	movs	r0, #0
 800515a:	f002 ff0a 	bl	8007f72 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800515e:	23c2      	movs	r3, #194	; 0xc2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	5cfb      	ldrb	r3, [r7, r3]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d118      	bne.n	800519a <HandleRadioRxErrorTimeout+0x6a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8005168:	f002 ff0a 	bl	8007f80 <LoRaMacClassBIsPingExpected>
 800516c:	9001      	str	r0, [sp, #4]
 800516e:	2800      	cmp	r0, #0
 8005170:	d006      	beq.n	8005180 <HandleRadioRxErrorTimeout+0x50>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8005172:	2000      	movs	r0, #0
 8005174:	f002 fef9 	bl	8007f6a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8005178:	2000      	movs	r0, #0
 800517a:	f002 fefb 	bl	8007f74 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800517e:	9e01      	ldr	r6, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8005180:	f002 ff00 	bl	8007f84 <LoRaMacClassBIsMulticastExpected>
 8005184:	2800      	cmp	r0, #0
 8005186:	d008      	beq.n	800519a <HandleRadioRxErrorTimeout+0x6a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8005188:	2000      	movs	r0, #0
 800518a:	f002 feef 	bl	8007f6c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800518e:	2000      	movs	r0, #0
 8005190:	f002 fef1 	bl	8007f76 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8005194:	f7ff ff6a 	bl	800506c <UpdateRxSlotIdleState>
}
 8005198:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 800519a:	2e00      	cmp	r6, #0
 800519c:	d1fa      	bne.n	8005194 <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 800519e:	4e15      	ldr	r6, [pc, #84]	; (80051f4 <HandleRadioRxErrorTimeout+0xc4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <HandleRadioRxErrorTimeout+0xc8>)
            if( MacCtx.NodeAckRequested == true )
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HandleRadioRxErrorTimeout+0xcc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80051a4:	5cb2      	ldrb	r2, [r6, r2]
            if( MacCtx.NodeAckRequested == true )
 80051a6:	5cf3      	ldrb	r3, [r6, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	d117      	bne.n	80051dc <HandleRadioRxErrorTimeout+0xac>
            if( MacCtx.NodeAckRequested == true )
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HandleRadioRxErrorTimeout+0x84>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HandleRadioRxErrorTimeout+0xd0>)
 80051b2:	54f5      	strb	r5, [r6, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80051b4:	0028      	movs	r0, r5
 80051b6:	f003 f89d 	bl	80082f4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80051ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051bc:	f006 fc39 	bl	800ba32 <TimerGetElapsedTime>
 80051c0:	23ef      	movs	r3, #239	; 0xef
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	58f3      	ldr	r3, [r6, r3]
 80051c6:	4298      	cmp	r0, r3
 80051c8:	d3e4      	bcc.n	8005194 <HandleRadioRxErrorTimeout+0x64>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80051ca:	480e      	ldr	r0, [pc, #56]	; (8005204 <HandleRadioRxErrorTimeout+0xd4>)
 80051cc:	f006 fbec 	bl	800b9a8 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
 80051d0:	2320      	movs	r3, #32
 80051d2:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <HandleRadioRxErrorTimeout+0xd8>)
 80051d4:	5cb1      	ldrb	r1, [r6, r2]
 80051d6:	430b      	orrs	r3, r1
 80051d8:	54b3      	strb	r3, [r6, r2]
 80051da:	e7db      	b.n	8005194 <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HandleRadioRxErrorTimeout+0xb4>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <HandleRadioRxErrorTimeout+0xd0>)
 80051e2:	54f4      	strb	r4, [r6, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80051e4:	0020      	movs	r0, r4
 80051e6:	f003 f885 	bl	80082f4 <LoRaMacConfirmQueueSetStatusCmn>
 80051ea:	e7f1      	b.n	80051d0 <HandleRadioRxErrorTimeout+0xa0>
 80051ec:	200008d0 	.word	0x200008d0
 80051f0:	0801abc8 	.word	0x0801abc8
 80051f4:	200003b8 	.word	0x200003b8
 80051f8:	0000048c 	.word	0x0000048c
 80051fc:	0000041a 	.word	0x0000041a
 8005200:	00000445 	.word	0x00000445
 8005204:	20000758 	.word	0x20000758
 8005208:	0000048d 	.word	0x0000048d

0800520c <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 800520c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800520e:	4d16      	ldr	r5, [pc, #88]	; (8005268 <OpenContinuousRxCWindow+0x5c>)
 8005210:	217c      	movs	r1, #124	; 0x7c
 8005212:	002b      	movs	r3, r5
 8005214:	002f      	movs	r7, r5
 8005216:	4e15      	ldr	r6, [pc, #84]	; (800526c <OpenContinuousRxCWindow+0x60>)
{
 8005218:	b085      	sub	sp, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800521a:	3354      	adds	r3, #84	; 0x54
 800521c:	374c      	adds	r7, #76	; 0x4c
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	5669      	ldrsb	r1, [r5, r1]
 8005222:	7838      	ldrb	r0, [r7, #0]
 8005224:	9600      	str	r6, [sp, #0]
 8005226:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005228:	f003 fdb7 	bl	8008d9a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800522c:	2302      	movs	r3, #2
 800522e:	4c10      	ldr	r4, [pc, #64]	; (8005270 <OpenContinuousRxCWindow+0x64>)
 8005230:	4a10      	ldr	r2, [pc, #64]	; (8005274 <OpenContinuousRxCWindow+0x68>)
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8005232:	0031      	movs	r1, r6
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005234:	54a3      	strb	r3, [r4, r2]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8005236:	339b      	adds	r3, #155	; 0x9b
 8005238:	33ff      	adds	r3, #255	; 0xff
 800523a:	5cea      	ldrb	r2, [r5, r3]
 800523c:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <OpenContinuousRxCWindow+0x6c>)
 800523e:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8005240:	2201      	movs	r2, #1
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <OpenContinuousRxCWindow+0x70>)
 8005244:	54e2      	strb	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8005246:	7838      	ldrb	r0, [r7, #0]
 8005248:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <OpenContinuousRxCWindow+0x74>)
 800524a:	f003 fdb8 	bl	8008dbe <RegionRxConfig>
 800524e:	2800      	cmp	r0, #0
 8005250:	d008      	beq.n	8005264 <OpenContinuousRxCWindow+0x58>
    {
        Radio.Rx( 0 ); // Continuous mode
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <OpenContinuousRxCWindow+0x78>)
 8005254:	2000      	movs	r0, #0
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800525c:	4a05      	ldr	r2, [pc, #20]	; (8005274 <OpenContinuousRxCWindow+0x68>)
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <OpenContinuousRxCWindow+0x7c>)
 8005260:	5ca2      	ldrb	r2, [r4, r2]
 8005262:	54e2      	strb	r2, [r4, r3]
    }
}
 8005264:	b005      	add	sp, #20
 8005266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005268:	200008d0 	.word	0x200008d0
 800526c:	200007a0 	.word	0x200007a0
 8005270:	200003b8 	.word	0x200003b8
 8005274:	000003fa 	.word	0x000003fa
 8005278:	000003fb 	.word	0x000003fb
 800527c:	000003f9 	.word	0x000003f9
 8005280:	200007dc 	.word	0x200007dc
 8005284:	0801abc8 	.word	0x0801abc8
 8005288:	0000048c 	.word	0x0000048c

0800528c <SwitchClass>:
{
 800528c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 800528e:	27c2      	movs	r7, #194	; 0xc2
 8005290:	4d35      	ldr	r5, [pc, #212]	; (8005368 <SwitchClass+0xdc>)
 8005292:	007f      	lsls	r7, r7, #1
 8005294:	5dec      	ldrb	r4, [r5, r7]
{
 8005296:	0006      	movs	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8005298:	2c01      	cmp	r4, #1
 800529a:	d053      	beq.n	8005344 <SwitchClass+0xb8>
 800529c:	2c02      	cmp	r4, #2
 800529e:	d058      	beq.n	8005352 <SwitchClass+0xc6>
 80052a0:	2c00      	cmp	r4, #0
 80052a2:	d10d      	bne.n	80052c0 <SwitchClass+0x34>
            if( deviceClass == CLASS_A )
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d107      	bne.n	80052b8 <SwitchClass+0x2c>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80052a8:	002b      	movs	r3, r5
 80052aa:	3570      	adds	r5, #112	; 0x70
 80052ac:	3378      	adds	r3, #120	; 0x78
 80052ae:	cd06      	ldmia	r5!, {r1, r2}
 80052b0:	c306      	stmia	r3!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80052b2:	3403      	adds	r4, #3
}
 80052b4:	0020      	movs	r0, r4
 80052b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 80052b8:	2801      	cmp	r0, #1
 80052ba:	d043      	beq.n	8005344 <SwitchClass+0xb8>
            if( deviceClass == CLASS_C )
 80052bc:	2802      	cmp	r0, #2
 80052be:	d001      	beq.n	80052c4 <SwitchClass+0x38>
    switch( Nvm.MacGroup2.DeviceClass )
 80052c0:	2403      	movs	r4, #3
 80052c2:	e7f7      	b.n	80052b4 <SwitchClass+0x28>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80052c4:	22fa      	movs	r2, #250	; 0xfa
 80052c6:	21f5      	movs	r1, #245	; 0xf5
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <SwitchClass+0xe0>)
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80052ce:	55e8      	strb	r0, [r5, r7]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80052d0:	189a      	adds	r2, r3, r2
 80052d2:	1859      	adds	r1, r3, r1
 80052d4:	c989      	ldmia	r1!, {r0, r3, r7}
 80052d6:	c289      	stmia	r2!, {r0, r3, r7}
 80052d8:	c909      	ldmia	r1!, {r0, r3}
 80052da:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <SwitchClass+0xe0>)
 80052de:	4824      	ldr	r0, [pc, #144]	; (8005370 <SwitchClass+0xe4>)
 80052e0:	0021      	movs	r1, r4
 80052e2:	541e      	strb	r6, [r3, r0]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80052e4:	232c      	movs	r3, #44	; 0x2c
 80052e6:	4f23      	ldr	r7, [pc, #140]	; (8005374 <SwitchClass+0xe8>)
 80052e8:	001a      	movs	r2, r3
 80052ea:	434a      	muls	r2, r1
 80052ec:	5cbe      	ldrb	r6, [r7, r2]
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	d024      	beq.n	800533c <SwitchClass+0xb0>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80052f2:	18aa      	adds	r2, r5, r2
 80052f4:	0011      	movs	r1, r2
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80052f6:	002e      	movs	r6, r5
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80052f8:	31ec      	adds	r1, #236	; 0xec
 80052fa:	6809      	ldr	r1, [r1, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80052fc:	32f0      	adds	r2, #240	; 0xf0
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80052fe:	67a9      	str	r1, [r5, #120]	; 0x78
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	367c      	adds	r6, #124	; 0x7c
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <SwitchClass+0xe0>)
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8005306:	7032      	strb	r2, [r6, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <SwitchClass+0xec>)
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800530a:	3581      	adds	r5, #129	; 0x81
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800530c:	5c9e      	ldrb	r6, [r3, r2]
 800530e:	3a33      	subs	r2, #51	; 0x33
 8005310:	549e      	strb	r6, [r3, r2]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8005312:	3204      	adds	r2, #4
 8005314:	5099      	str	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005316:	7829      	ldrb	r1, [r5, #0]
 8005318:	320c      	adds	r2, #12
 800531a:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800531c:	2203      	movs	r2, #3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800531e:	2101      	movs	r1, #1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8005320:	541a      	strb	r2, [r3, r0]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <SwitchClass+0xf0>)
 8005324:	5499      	strb	r1, [r3, r2]
                MacCtx.NodeAckRequested = false;
 8005326:	2100      	movs	r1, #0
 8005328:	4a15      	ldr	r2, [pc, #84]	; (8005380 <SwitchClass+0xf4>)
 800532a:	4b10      	ldr	r3, [pc, #64]	; (800536c <SwitchClass+0xe0>)
 800532c:	5499      	strb	r1, [r3, r2]
                Radio.Sleep( );
 800532e:	4b15      	ldr	r3, [pc, #84]	; (8005384 <SwitchClass+0xf8>)
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8005336:	f7ff ff69 	bl	800520c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800533a:	e7bb      	b.n	80052b4 <SwitchClass+0x28>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800533c:	3101      	adds	r1, #1
 800533e:	2904      	cmp	r1, #4
 8005340:	d1d2      	bne.n	80052e8 <SwitchClass+0x5c>
 8005342:	e7f0      	b.n	8005326 <SwitchClass+0x9a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8005344:	0030      	movs	r0, r6
 8005346:	f002 fe24 	bl	8007f92 <LoRaMacClassBSwitchClass>
 800534a:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 800534c:	d1b2      	bne.n	80052b4 <SwitchClass+0x28>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800534e:	55ee      	strb	r6, [r5, r7]
 8005350:	e7b0      	b.n	80052b4 <SwitchClass+0x28>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8005352:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8005354:	2800      	cmp	r0, #0
 8005356:	d1ad      	bne.n	80052b4 <SwitchClass+0x28>
                Radio.Sleep( );
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <SwitchClass+0xf8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800535a:	55e8      	strb	r0, [r5, r7]
                Radio.Sleep( );
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 800535e:	0034      	movs	r4, r6
                Radio.Sleep( );
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8005364:	e7a6      	b.n	80052b4 <SwitchClass+0x28>
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	200008d0 	.word	0x200008d0
 800536c:	200003b8 	.word	0x200003b8
 8005370:	000003fa 	.word	0x000003fa
 8005374:	200009a6 	.word	0x200009a6
 8005378:	0000041b 	.word	0x0000041b
 800537c:	000003f9 	.word	0x000003f9
 8005380:	0000041a 	.word	0x0000041a
 8005384:	0801abc8 	.word	0x0801abc8

08005388 <OnRadioRxDone>:
{
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	000e      	movs	r6, r1
 800538c:	0015      	movs	r5, r2
 800538e:	001c      	movs	r4, r3
 8005390:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8005392:	f006 fb48 	bl	800ba26 <TimerGetCurrentTime>
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <OnRadioRxDone+0x3c>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800539a:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 800539c:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 800539e:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 80053a0:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 80053a2:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80053a4:	2311      	movs	r3, #17
 80053a6:	780a      	ldrb	r2, [r1, #0]
 80053a8:	439a      	bics	r2, r3
 80053aa:	4313      	orrs	r3, r2
 80053ac:	700b      	strb	r3, [r1, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80053ae:	23d2      	movs	r3, #210	; 0xd2
 80053b0:	4a06      	ldr	r2, [pc, #24]	; (80053cc <OnRadioRxDone+0x44>)
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	58d3      	ldr	r3, [r2, r3]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <OnRadioRxDone+0x3a>
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d000      	beq.n	80053c2 <OnRadioRxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80053c0:	4798      	blx	r3
}
 80053c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c4:	2000104c 	.word	0x2000104c
 80053c8:	200003b4 	.word	0x200003b4
 80053cc:	200003b8 	.word	0x200003b8

080053d0 <OnRadioTxDone>:
{
 80053d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80053d2:	f006 fb28 	bl	800ba26 <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80053d6:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <OnRadioTxDone+0x3c>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80053da:	4d0d      	ldr	r5, [pc, #52]	; (8005410 <OnRadioTxDone+0x40>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80053dc:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80053de:	0020      	movs	r0, r4
 80053e0:	f006 f9c2 	bl	800b768 <SysTimeGet>
 80053e4:	23ce      	movs	r3, #206	; 0xce
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	18eb      	adds	r3, r5, r3
 80053ea:	cc06      	ldmia	r4!, {r1, r2}
 80053ec:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80053ee:	2320      	movs	r3, #32
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <OnRadioTxDone+0x44>)
 80053f2:	7811      	ldrb	r1, [r2, #0]
 80053f4:	430b      	orrs	r3, r1
 80053f6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80053f8:	23d2      	movs	r3, #210	; 0xd2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	58eb      	ldr	r3, [r5, r3]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <OnRadioTxDone+0x3a>
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d000      	beq.n	800540a <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005408:	4798      	blx	r3
}
 800540a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800540c:	2000105c 	.word	0x2000105c
 8005410:	200003b8 	.word	0x200003b8
 8005414:	200003b4 	.word	0x200003b4

08005418 <ResetMacParameters>:
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8005418:	23ce      	movs	r3, #206	; 0xce
{
 800541a:	b5f0      	push	{r4, r5, r6, r7, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800541c:	2600      	movs	r6, #0
 800541e:	4c4e      	ldr	r4, [pc, #312]	; (8005558 <ResetMacParameters+0x140>)
 8005420:	005b      	lsls	r3, r3, #1
    MacCtx.ResponseTimeoutStartTime = 0;
 8005422:	4d4e      	ldr	r5, [pc, #312]	; (800555c <ResetMacParameters+0x144>)
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8005424:	54e6      	strb	r6, [r4, r3]
    MacCtx.ResponseTimeoutStartTime = 0;
 8005426:	4b4e      	ldr	r3, [pc, #312]	; (8005560 <ResetMacParameters+0x148>)
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005428:	0022      	movs	r2, r4
    MacCtx.ResponseTimeoutStartTime = 0;
 800542a:	50ee      	str	r6, [r5, r3]
    Nvm.MacGroup2.MaxDCycle = 0;
 800542c:	2388      	movs	r3, #136	; 0x88
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800542e:	2701      	movs	r7, #1
    Nvm.MacGroup2.MaxDCycle = 0;
 8005430:	33ff      	adds	r3, #255	; 0xff
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005432:	32c8      	adds	r2, #200	; 0xc8
    Nvm.MacGroup2.MaxDCycle = 0;
 8005434:	54e6      	strb	r6, [r4, r3]
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005436:	8812      	ldrh	r2, [r2, #0]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8005438:	3305      	adds	r3, #5
 800543a:	52e7      	strh	r7, [r4, r3]
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800543c:	1da3      	adds	r3, r4, #6
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8005440:	0022      	movs	r2, r4
 8005442:	0020      	movs	r0, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 8005444:	6366      	str	r6, [r4, #52]	; 0x34
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8005446:	32a9      	adds	r2, #169	; 0xa9
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	306d      	adds	r0, #109	; 0x6d
 800544c:	7002      	strb	r2, [r0, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800544e:	0020      	movs	r0, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005450:	0021      	movs	r1, r4
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8005452:	3070      	adds	r0, #112	; 0x70
 8005454:	0022      	movs	r2, r4
 8005456:	0003      	movs	r3, r0
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8005458:	3108      	adds	r1, #8
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800545a:	32ac      	adds	r2, #172	; 0xac
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800545c:	468c      	mov	ip, r1
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800545e:	ca03      	ldmia	r2!, {r0, r1}
 8005460:	c303      	stmia	r3!, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8005462:	0020      	movs	r0, r4
 8005464:	0022      	movs	r2, r4
 8005466:	3078      	adds	r0, #120	; 0x78
 8005468:	0003      	movs	r3, r0
 800546a:	32b4      	adds	r2, #180	; 0xb4
 800546c:	ca03      	ldmia	r2!, {r0, r1}
 800546e:	c303      	stmia	r3!, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8005470:	0022      	movs	r2, r4
 8005472:	3280      	adds	r2, #128	; 0x80
 8005474:	0013      	movs	r3, r2
 8005476:	0022      	movs	r2, r4
 8005478:	32bc      	adds	r2, #188	; 0xbc
 800547a:	8812      	ldrh	r2, [r2, #0]
{
 800547c:	b093      	sub	sp, #76	; 0x4c
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800547e:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8005480:	0022      	movs	r2, r4
 8005482:	4663      	mov	r3, ip
 8005484:	32c0      	adds	r2, #192	; 0xc0
 8005486:	6812      	ldr	r2, [r2, #0]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8005488:	a905      	add	r1, sp, #20
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800548a:	67da      	str	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800548c:	0022      	movs	r2, r4
 800548e:	3288      	adds	r2, #136	; 0x88
 8005490:	0013      	movs	r3, r2
 8005492:	0022      	movs	r2, r4
 8005494:	32c4      	adds	r2, #196	; 0xc4
 8005496:	6812      	ldr	r2, [r2, #0]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8005498:	730f      	strb	r7, [r1, #12]
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800549a:	601a      	str	r2, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 800549c:	2383      	movs	r3, #131	; 0x83
    Nvm.MacGroup1.SrvAckRequested = false;
 800549e:	0022      	movs	r2, r4
    MacCtx.ChannelsNbTransCounter = 0;
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	52ee      	strh	r6, [r5, r3]
    MacCtx.NodeAckRequested = false;
 80054a4:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <ResetMacParameters+0x14c>)
    Nvm.MacGroup1.SrvAckRequested = false;
 80054a6:	3246      	adds	r2, #70	; 0x46
    MacCtx.NodeAckRequested = false;
 80054a8:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80054aa:	238a      	movs	r3, #138	; 0x8a
    Nvm.MacGroup1.SrvAckRequested = false;
 80054ac:	7016      	strb	r6, [r2, #0]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80054ae:	0022      	movs	r2, r4
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80054b0:	33ff      	adds	r3, #255	; 0xff
 80054b2:	54e6      	strb	r6, [r4, r3]
    Nvm.MacGroup2.DownlinkReceived = false;
 80054b4:	19db      	adds	r3, r3, r7
 80054b6:	54e6      	strb	r6, [r4, r3]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80054b8:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <ResetMacParameters+0x150>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80054ba:	324c      	adds	r2, #76	; 0x4c
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80054bc:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <ResetMacParameters+0x154>)
 80054c0:	604b      	str	r3, [r1, #4]
    params.Bands = &RegionBands;
 80054c2:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <ResetMacParameters+0x158>)
 80054c4:	608b      	str	r3, [r1, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80054c6:	7810      	ldrb	r0, [r2, #0]
 80054c8:	f003 fc2c 	bl	8008d24 <RegionInitDefaults>
    MacCtx.Channel = 0;
 80054cc:	4b29      	ldr	r3, [pc, #164]	; (8005574 <ResetMacParameters+0x15c>)
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80054ce:	6f22      	ldr	r2, [r4, #112]	; 0x70
    MacCtx.Channel = 0;
 80054d0:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80054d2:	3b47      	subs	r3, #71	; 0x47
 80054d4:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80054d6:	3304      	adds	r3, #4
 80054d8:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80054da:	0022      	movs	r2, r4
 80054dc:	23f9      	movs	r3, #249	; 0xf9
 80054de:	3281      	adds	r2, #129	; 0x81
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <ResetMacParameters+0x160>)
 80054e8:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <ResetMacParameters+0x164>)
 80054ec:	54ef      	strb	r7, [r5, r3]
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80054ee:	23ce      	movs	r3, #206	; 0xce
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	5ce2      	ldrb	r2, [r4, r3]
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <ResetMacParameters+0x168>)
 80054f6:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80054f8:	22f5      	movs	r2, #245	; 0xf5
 80054fa:	19db      	adds	r3, r3, r7
 80054fc:	0092      	lsls	r2, r2, #2
 80054fe:	18eb      	adds	r3, r5, r3
 8005500:	18aa      	adds	r2, r5, r2
 8005502:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005504:	c313      	stmia	r3!, {r0, r1, r4}
 8005506:	ca03      	ldmia	r2!, {r0, r1}
 8005508:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800550a:	2202      	movs	r2, #2
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <ResetMacParameters+0x16c>)
    classBCallbacks.GetTemperatureLevel = NULL;
 800550e:	9603      	str	r6, [sp, #12]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8005510:	54ef      	strb	r7, [r5, r3]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <ResetMacParameters+0x170>)
    classBCallbacks.MacProcessNotify = NULL;
 8005514:	9604      	str	r6, [sp, #16]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005516:	54ea      	strb	r2, [r5, r3]
    if( MacCtx.MacCallbacks != NULL )
 8005518:	3bb2      	subs	r3, #178	; 0xb2
 800551a:	58eb      	ldr	r3, [r5, r3]
 800551c:	42b3      	cmp	r3, r6
 800551e:	d004      	beq.n	800552a <ResetMacParameters+0x112>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8005520:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8005522:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8005524:	9203      	str	r2, [sp, #12]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	9304      	str	r3, [sp, #16]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800552a:	4b18      	ldr	r3, [pc, #96]	; (800558c <ResetMacParameters+0x174>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800552c:	4a18      	ldr	r2, [pc, #96]	; (8005590 <ResetMacParameters+0x178>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800552e:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8005530:	4b18      	ldr	r3, [pc, #96]	; (8005594 <ResetMacParameters+0x17c>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8005532:	a903      	add	r1, sp, #12
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8005534:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8005536:	4b18      	ldr	r3, [pc, #96]	; (8005598 <ResetMacParameters+0x180>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8005538:	a809      	add	r0, sp, #36	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800553a:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800553c:	4b17      	ldr	r3, [pc, #92]	; (800559c <ResetMacParameters+0x184>)
 800553e:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <ResetMacParameters+0x188>)
 8005542:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8005544:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <ResetMacParameters+0x18c>)
 8005546:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8005548:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <ResetMacParameters+0x190>)
 800554a:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800554c:	4b17      	ldr	r3, [pc, #92]	; (80055ac <ResetMacParameters+0x194>)
 800554e:	9310      	str	r3, [sp, #64]	; 0x40
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8005550:	f002 fd09 	bl	8007f66 <LoRaMacClassBInit>
}
 8005554:	b013      	add	sp, #76	; 0x4c
 8005556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005558:	200008d0 	.word	0x200008d0
 800555c:	200003b8 	.word	0x200003b8
 8005560:	00000494 	.word	0x00000494
 8005564:	0000041a 	.word	0x0000041a
 8005568:	20000c14 	.word	0x20000c14
 800556c:	20000c28 	.word	0x20000c28
 8005570:	20000fbc 	.word	0x20000fbc
 8005574:	0000041b 	.word	0x0000041b
 8005578:	000003e5 	.word	0x000003e5
 800557c:	000003e6 	.word	0x000003e6
 8005580:	000003e7 	.word	0x000003e7
 8005584:	000003f9 	.word	0x000003f9
 8005588:	000003fa 	.word	0x000003fa
 800558c:	20000824 	.word	0x20000824
 8005590:	20000fa4 	.word	0x20000fa4
 8005594:	200007d8 	.word	0x200007d8
 8005598:	20000810 	.word	0x20000810
 800559c:	20000845 	.word	0x20000845
 80055a0:	200009a0 	.word	0x200009a0
 80055a4:	2000091c 	.word	0x2000091c
 80055a8:	20000920 	.word	0x20000920
 80055ac:	200009a4 	.word	0x200009a4

080055b0 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80055b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055b2:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 80055b4:	f006 f9f8 	bl	800b9a8 <TimerStop>
    Radio.Standby( );
 80055b8:	4e0b      	ldr	r6, [pc, #44]	; (80055e8 <RxWindowSetup.constprop.0+0x38>)
 80055ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80055c0:	4d0a      	ldr	r5, [pc, #40]	; (80055ec <RxWindowSetup.constprop.0+0x3c>)
 80055c2:	0021      	movs	r1, r4
 80055c4:	002b      	movs	r3, r5
 80055c6:	334c      	adds	r3, #76	; 0x4c
 80055c8:	7818      	ldrb	r0, [r3, #0]
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <RxWindowSetup.constprop.0+0x40>)
 80055cc:	f003 fbf7 	bl	8008dbe <RegionRxConfig>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d007      	beq.n	80055e4 <RxWindowSetup.constprop.0+0x34>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80055d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80055d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80055dc:	7ca1      	ldrb	r1, [r4, #18]
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <RxWindowSetup.constprop.0+0x44>)
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <RxWindowSetup.constprop.0+0x48>)
 80055e2:	54d1      	strb	r1, [r2, r3]
}
 80055e4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	0801abc8 	.word	0x0801abc8
 80055ec:	200008d0 	.word	0x200008d0
 80055f0:	200007dc 	.word	0x200007dc
 80055f4:	200003b8 	.word	0x200003b8
 80055f8:	0000048c 	.word	0x0000048c

080055fc <OnRxWindow1TimerEvent>:
{
 80055fc:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <OnRxWindow1TimerEvent+0x44>)
 8005600:	4a10      	ldr	r2, [pc, #64]	; (8005644 <OnRxWindow1TimerEvent+0x48>)
 8005602:	5c99      	ldrb	r1, [r3, r2]
 8005604:	3a5b      	subs	r2, #91	; 0x5b
 8005606:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8005608:	4a0f      	ldr	r2, [pc, #60]	; (8005648 <OnRxWindow1TimerEvent+0x4c>)
 800560a:	0011      	movs	r1, r2
 800560c:	316d      	adds	r1, #109	; 0x6d
 800560e:	7808      	ldrb	r0, [r1, #0]
 8005610:	490e      	ldr	r1, [pc, #56]	; (800564c <OnRxWindow1TimerEvent+0x50>)
 8005612:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005614:	0011      	movs	r1, r2
 8005616:	3181      	adds	r1, #129	; 0x81
 8005618:	7808      	ldrb	r0, [r1, #0]
 800561a:	21f4      	movs	r1, #244	; 0xf4
 800561c:	0089      	lsls	r1, r1, #2
 800561e:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8005620:	2100      	movs	r1, #0
 8005622:	480b      	ldr	r0, [pc, #44]	; (8005650 <OnRxWindow1TimerEvent+0x54>)
 8005624:	5419      	strb	r1, [r3, r0]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8005626:	480b      	ldr	r0, [pc, #44]	; (8005654 <OnRxWindow1TimerEvent+0x58>)
 8005628:	5419      	strb	r1, [r3, r0]
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800562a:	319d      	adds	r1, #157	; 0x9d
 800562c:	31ff      	adds	r1, #255	; 0xff
 800562e:	5c51      	ldrb	r1, [r2, r1]
 8005630:	4a09      	ldr	r2, [pc, #36]	; (8005658 <OnRxWindow1TimerEvent+0x5c>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8005632:	480a      	ldr	r0, [pc, #40]	; (800565c <OnRxWindow1TimerEvent+0x60>)
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8005634:	5499      	strb	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8005636:	490a      	ldr	r1, [pc, #40]	; (8005660 <OnRxWindow1TimerEvent+0x64>)
 8005638:	f7ff ffba 	bl	80055b0 <RxWindowSetup.constprop.0>
}
 800563c:	bd10      	pop	{r4, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	200003b8 	.word	0x200003b8
 8005644:	0000041b 	.word	0x0000041b
 8005648:	200008d0 	.word	0x200008d0
 800564c:	000003c3 	.word	0x000003c3
 8005650:	000003d1 	.word	0x000003d1
 8005654:	000003d2 	.word	0x000003d2
 8005658:	000003d3 	.word	0x000003d3
 800565c:	20000740 	.word	0x20000740
 8005660:	20000778 	.word	0x20000778

08005664 <OnRxWindow2TimerEvent>:
{
 8005664:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <OnRxWindow2TimerEvent+0x4c>)
 8005668:	4a12      	ldr	r2, [pc, #72]	; (80056b4 <OnRxWindow2TimerEvent+0x50>)
 800566a:	5c9a      	ldrb	r2, [r3, r2]
 800566c:	2a00      	cmp	r2, #0
 800566e:	d01d      	beq.n	80056ac <OnRxWindow2TimerEvent+0x48>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8005670:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <OnRxWindow2TimerEvent+0x54>)
 8005672:	5c99      	ldrb	r1, [r3, r2]
 8005674:	3a47      	subs	r2, #71	; 0x47
 8005676:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8005678:	21f6      	movs	r1, #246	; 0xf6
 800567a:	4a10      	ldr	r2, [pc, #64]	; (80056bc <OnRxWindow2TimerEvent+0x58>)
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005680:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005682:	0011      	movs	r1, r2
 8005684:	3181      	adds	r1, #129	; 0x81
 8005686:	7808      	ldrb	r0, [r1, #0]
 8005688:	21f9      	movs	r1, #249	; 0xf9
 800568a:	0089      	lsls	r1, r1, #2
 800568c:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800568e:	2000      	movs	r0, #0
 8005690:	490b      	ldr	r1, [pc, #44]	; (80056c0 <OnRxWindow2TimerEvent+0x5c>)
 8005692:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8005694:	490b      	ldr	r1, [pc, #44]	; (80056c4 <OnRxWindow2TimerEvent+0x60>)
 8005696:	3001      	adds	r0, #1
 8005698:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800569a:	21ce      	movs	r1, #206	; 0xce
 800569c:	0049      	lsls	r1, r1, #1
 800569e:	5c51      	ldrb	r1, [r2, r1]
 80056a0:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <OnRxWindow2TimerEvent+0x64>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80056a2:	480a      	ldr	r0, [pc, #40]	; (80056cc <OnRxWindow2TimerEvent+0x68>)
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80056a4:	5499      	strb	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80056a6:	490a      	ldr	r1, [pc, #40]	; (80056d0 <OnRxWindow2TimerEvent+0x6c>)
 80056a8:	f7ff ff82 	bl	80055b0 <RxWindowSetup.constprop.0>
}
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	200003b8 	.word	0x200003b8
 80056b4:	0000048c 	.word	0x0000048c
 80056b8:	0000041b 	.word	0x0000041b
 80056bc:	200008d0 	.word	0x200008d0
 80056c0:	000003e5 	.word	0x000003e5
 80056c4:	000003e6 	.word	0x000003e6
 80056c8:	000003e7 	.word	0x000003e7
 80056cc:	20000758 	.word	0x20000758
 80056d0:	2000078c 	.word	0x2000078c

080056d4 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	b093      	sub	sp, #76	; 0x4c
 80056d8:	9102      	str	r1, [sp, #8]
    uint8_t status = 0;
 80056da:	210d      	movs	r1, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80056dc:	9205      	str	r2, [sp, #20]
    uint8_t status = 0;
 80056de:	2200      	movs	r2, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80056e0:	0007      	movs	r7, r0
    uint8_t status = 0;
 80056e2:	a804      	add	r0, sp, #16
 80056e4:	1809      	adds	r1, r1, r0
 80056e6:	700a      	strb	r2, [r1, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80056e8:	a908      	add	r1, sp, #32
 80056ea:	800a      	strh	r2, [r1, #0]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d804      	bhi.n	80056fa <ProcessMacCommands.constprop.0+0x26>
 80056f0:	0014      	movs	r4, r2
    bool adrBlockFound = false;
 80056f2:	9203      	str	r2, [sp, #12]
    while( macIndex < commandsSize )
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	429c      	cmp	r4, r3
 80056f8:	d301      	bcc.n	80056fe <ProcessMacCommands.constprop.0+0x2a>
}
 80056fa:	b013      	add	sp, #76	; 0x4c
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80056fe:	5d38      	ldrb	r0, [r7, r4]
 8005700:	f002 fd62 	bl	80081c8 <LoRaMacCommandsGetCmdSize>
 8005704:	9b02      	ldr	r3, [sp, #8]
 8005706:	1900      	adds	r0, r0, r4
 8005708:	193e      	adds	r6, r7, r4
 800570a:	4298      	cmp	r0, r3
 800570c:	dcf5      	bgt.n	80056fa <ProcessMacCommands.constprop.0+0x26>
        switch( payload[macIndex++] )
 800570e:	7830      	ldrb	r0, [r6, #0]
 8005710:	1c65      	adds	r5, r4, #1
 8005712:	3802      	subs	r0, #2
 8005714:	b2ed      	uxtb	r5, r5
 8005716:	2811      	cmp	r0, #17
 8005718:	d8ef      	bhi.n	80056fa <ProcessMacCommands.constprop.0+0x26>
 800571a:	f7fa fd11 	bl	8000140 <__gnu_thumb1_case_shi>
 800571e:	0012      	.short	0x0012
 8005720:	00b70029 	.word	0x00b70029
 8005724:	011200ce 	.word	0x011200ce
 8005728:	015b012a 	.word	0x015b012a
 800572c:	01d7017a 	.word	0x01d7017a
 8005730:	ffeeffee 	.word	0xffeeffee
 8005734:	ffee0200 	.word	0xffee0200
 8005738:	0252ffee 	.word	0x0252ffee
 800573c:	02810266 	.word	0x02810266
 8005740:	029b      	.short	0x029b
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8005742:	2004      	movs	r0, #4
 8005744:	f002 fdf4 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8005748:	2800      	cmp	r0, #0
 800574a:	d00f      	beq.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800574c:	2104      	movs	r1, #4
 800574e:	2000      	movs	r0, #0
 8005750:	f002 fdaa 	bl	80082a8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8005754:	228c      	movs	r2, #140	; 0x8c
 8005756:	5d79      	ldrb	r1, [r7, r5]
 8005758:	4bd5      	ldr	r3, [pc, #852]	; (8005ab0 <ProcessMacCommands.constprop.0+0x3dc>)
 800575a:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800575c:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800575e:	3402      	adds	r4, #2
 8005760:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8005762:	b2e4      	uxtb	r4, r4
 8005764:	5d39      	ldrb	r1, [r7, r4]
 8005766:	4ad3      	ldr	r2, [pc, #844]	; (8005ab4 <ProcessMacCommands.constprop.0+0x3e0>)
 8005768:	b2ed      	uxtb	r5, r5
 800576a:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 800576c:	002c      	movs	r4, r5
 800576e:	e7c1      	b.n	80056f4 <ProcessMacCommands.constprop.0+0x20>
                int8_t linkAdrDatarate = DR_0;
 8005770:	220e      	movs	r2, #14
 8005772:	2300      	movs	r3, #0
 8005774:	a904      	add	r1, sp, #16
 8005776:	1852      	adds	r2, r2, r1
 8005778:	7013      	strb	r3, [r2, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800577a:	220f      	movs	r2, #15
 800577c:	1852      	adds	r2, r2, r1
 800577e:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbRep = 0;
 8005780:	aa09      	add	r2, sp, #36	; 0x24
 8005782:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8005784:	aa0a      	add	r2, sp, #40	; 0x28
 8005786:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8005788:	9b03      	ldr	r3, [sp, #12]
                    macIndex += 4;
 800578a:	3405      	adds	r4, #5
 800578c:	b2e4      	uxtb	r4, r4
                if( adrBlockFound == false )
 800578e:	2b00      	cmp	r3, #0
 8005790:	d178      	bne.n	8005884 <ProcessMacCommands.constprop.0+0x1b0>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8005792:	1e6b      	subs	r3, r5, #1
 8005794:	a90e      	add	r1, sp, #56	; 0x38
 8005796:	18fb      	adds	r3, r7, r3
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8005798:	22c3      	movs	r2, #195	; 0xc3
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800579a:	604b      	str	r3, [r1, #4]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800579c:	4bc6      	ldr	r3, [pc, #792]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
 800579e:	0052      	lsls	r2, r2, #1
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80057a0:	0018      	movs	r0, r3
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80057a2:	5c9a      	ldrb	r2, [r3, r2]
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80057a4:	3080      	adds	r0, #128	; 0x80
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80057a6:	728a      	strb	r2, [r1, #10]
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80057a8:	7800      	ldrb	r0, [r0, #0]
 80057aa:	7248      	strb	r0, [r1, #9]
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80057ac:	0018      	movs	r0, r3
 80057ae:	3045      	adds	r0, #69	; 0x45
 80057b0:	7800      	ldrb	r0, [r0, #0]
 80057b2:	72c8      	strb	r0, [r1, #11]
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80057b4:	0018      	movs	r0, r3
 80057b6:	3044      	adds	r0, #68	; 0x44
 80057b8:	7800      	ldrb	r0, [r0, #0]
 80057ba:	7308      	strb	r0, [r1, #12]
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80057bc:	0018      	movs	r0, r3
 80057be:	306c      	adds	r0, #108	; 0x6c
 80057c0:	7800      	ldrb	r0, [r0, #0]
 80057c2:	7348      	strb	r0, [r1, #13]
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80057c4:	20cc      	movs	r0, #204	; 0xcc
 80057c6:	0040      	lsls	r0, r0, #1
 80057c8:	581b      	ldr	r3, [r3, r0]
 80057ca:	930e      	str	r3, [sp, #56]	; 0x38
                            linkAdrReq.PayloadSize = 5;
 80057cc:	2305      	movs	r3, #5
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d003      	beq.n	80057da <ProcessMacCommands.constprop.0+0x106>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80057d2:	9b02      	ldr	r3, [sp, #8]
 80057d4:	3301      	adds	r3, #1
 80057d6:	1b5b      	subs	r3, r3, r5
 80057d8:	b2db      	uxtb	r3, r3
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80057da:	260f      	movs	r6, #15
 80057dc:	4cb6      	ldr	r4, [pc, #728]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
 80057de:	720b      	strb	r3, [r1, #8]
 80057e0:	ab04      	add	r3, sp, #16
 80057e2:	18f6      	adds	r6, r6, r3
 80057e4:	0023      	movs	r3, r4
 80057e6:	334c      	adds	r3, #76	; 0x4c
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	220e      	movs	r2, #14
 80057ec:	469c      	mov	ip, r3
 80057ee:	ab0a      	add	r3, sp, #40	; 0x28
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	a804      	add	r0, sp, #16
 80057f4:	ab09      	add	r3, sp, #36	; 0x24
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	1812      	adds	r2, r2, r0
 80057fa:	0033      	movs	r3, r6
 80057fc:	4660      	mov	r0, ip
 80057fe:	f003 faff 	bl	8008e00 <RegionLinkAdrReq>
 8005802:	ab04      	add	r3, sp, #16
 8005804:	7358      	strb	r0, [r3, #13]
                        if( ( status & 0x07 ) == 0x07 )
 8005806:	43c0      	mvns	r0, r0
 8005808:	0743      	lsls	r3, r0, #29
 800580a:	d118      	bne.n	800583e <ProcessMacCommands.constprop.0+0x16a>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800580c:	220e      	movs	r2, #14
 800580e:	ab04      	add	r3, sp, #16
 8005810:	569a      	ldrsb	r2, [r3, r2]
 8005812:	0023      	movs	r3, r4
 8005814:	3345      	adds	r3, #69	; 0x45
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b25b      	sxtb	r3, r3
 800581a:	4293      	cmp	r3, r2
 800581c:	da03      	bge.n	8005826 <ProcessMacCommands.constprop.0+0x152>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800581e:	238a      	movs	r3, #138	; 0x8a
 8005820:	2101      	movs	r1, #1
 8005822:	33ff      	adds	r3, #255	; 0xff
 8005824:	54e1      	strb	r1, [r4, r3]
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8005826:	4ba4      	ldr	r3, [pc, #656]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
 8005828:	0019      	movs	r1, r3
 800582a:	3145      	adds	r1, #69	; 0x45
 800582c:	700a      	strb	r2, [r1, #0]
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800582e:	001a      	movs	r2, r3
 8005830:	7831      	ldrb	r1, [r6, #0]
 8005832:	3244      	adds	r2, #68	; 0x44
 8005834:	7011      	strb	r1, [r2, #0]
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8005836:	aa09      	add	r2, sp, #36	; 0x24
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	336c      	adds	r3, #108	; 0x6c
 800583c:	701a      	strb	r2, [r3, #0]
                            linkAdrReq.PayloadSize = 5;
 800583e:	2400      	movs	r4, #0
 8005840:	e009      	b.n	8005856 <ProcessMacCommands.constprop.0+0x182>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8005842:	230d      	movs	r3, #13
 8005844:	a904      	add	r1, sp, #16
 8005846:	185b      	adds	r3, r3, r1
 8005848:	2201      	movs	r2, #1
 800584a:	0019      	movs	r1, r3
 800584c:	2003      	movs	r0, #3
 800584e:	f002 fbc1 	bl	8007fd4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8005852:	3401      	adds	r4, #1
 8005854:	b2e4      	uxtb	r4, r4
 8005856:	ab0a      	add	r3, sp, #40	; 0x28
 8005858:	781e      	ldrb	r6, [r3, #0]
 800585a:	2105      	movs	r1, #5
 800585c:	0030      	movs	r0, r6
 800585e:	f7fa fc83 	bl	8000168 <__udivsi3>
 8005862:	b2c0      	uxtb	r0, r0
 8005864:	4284      	cmp	r4, r0
 8005866:	d3ec      	bcc.n	8005842 <ProcessMacCommands.constprop.0+0x16e>
                        macIndex += linkAdrNbBytesParsed - 1;
 8005868:	19ad      	adds	r5, r5, r6
 800586a:	b2ed      	uxtb	r5, r5
 800586c:	1e6c      	subs	r4, r5, #1
                        if( macIndex >= commandsSize )
 800586e:	9b02      	ldr	r3, [sp, #8]
                        macIndex += linkAdrNbBytesParsed - 1;
 8005870:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8005872:	42a3      	cmp	r3, r4
 8005874:	d906      	bls.n	8005884 <ProcessMacCommands.constprop.0+0x1b0>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8005876:	5d3b      	ldrb	r3, [r7, r4]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d08a      	beq.n	8005792 <ProcessMacCommands.constprop.0+0xbe>
                    if( macIndex < commandsSize )
 800587c:	9b02      	ldr	r3, [sp, #8]
 800587e:	42ab      	cmp	r3, r5
 8005880:	d800      	bhi.n	8005884 <ProcessMacCommands.constprop.0+0x1b0>
 8005882:	002c      	movs	r4, r5
                break;
 8005884:	2301      	movs	r3, #1
 8005886:	0025      	movs	r5, r4
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	e76f      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800588c:	220f      	movs	r2, #15
 800588e:	5d7b      	ldrb	r3, [r7, r5]
 8005890:	4989      	ldr	r1, [pc, #548]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
 8005892:	4013      	ands	r3, r2
 8005894:	2288      	movs	r2, #136	; 0x88
 8005896:	32ff      	adds	r2, #255	; 0xff
 8005898:	548b      	strb	r3, [r1, r2]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800589a:	3a87      	subs	r2, #135	; 0x87
 800589c:	3aff      	subs	r2, #255	; 0xff
 800589e:	409a      	lsls	r2, r3
 80058a0:	0013      	movs	r3, r2
 80058a2:	22c6      	movs	r2, #198	; 0xc6
 80058a4:	0052      	lsls	r2, r2, #1
 80058a6:	528b      	strh	r3, [r1, r2]
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80058a8:	3402      	adds	r4, #2
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80058aa:	2200      	movs	r2, #0
 80058ac:	2004      	movs	r0, #4
 80058ae:	a908      	add	r1, sp, #32
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80058b0:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80058b2:	f002 fb8f 	bl	8007fd4 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80058b6:	0025      	movs	r5, r4
}
 80058b8:	e758      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                status = 0x07;
 80058ba:	2107      	movs	r1, #7
 80058bc:	ab04      	add	r3, sp, #16
 80058be:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80058c0:	5d7b      	ldrb	r3, [r7, r5]
 80058c2:	ae0e      	add	r6, sp, #56	; 0x38
 80058c4:	091a      	lsrs	r2, r3, #4
 80058c6:	400a      	ands	r2, r1
 80058c8:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80058ca:	220f      	movs	r2, #15
 80058cc:	4013      	ands	r3, r2
 80058ce:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80058d0:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80058d2:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80058d4:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058d6:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80058d8:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058da:	5cba      	ldrb	r2, [r7, r2]
 80058dc:	1d65      	adds	r5, r4, #5
                macIndex++;
 80058de:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058e0:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80058e2:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80058e4:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058e6:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80058e8:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80058ea:	4c73      	ldr	r4, [pc, #460]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80058ec:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 80058ee:	2264      	movs	r2, #100	; 0x64
 80058f0:	4353      	muls	r3, r2
 80058f2:	930f      	str	r3, [sp, #60]	; 0x3c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80058f4:	0023      	movs	r3, r4
 80058f6:	334c      	adds	r3, #76	; 0x4c
 80058f8:	7818      	ldrb	r0, [r3, #0]
 80058fa:	0031      	movs	r1, r6
 80058fc:	f003 fa96 	bl	8008e2c <RegionRxParamSetupReq>
 8005900:	ab04      	add	r3, sp, #16
 8005902:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8005904:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005906:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 8005908:	4003      	ands	r3, r0
 800590a:	2b07      	cmp	r3, #7
 800590c:	d10c      	bne.n	8005928 <ProcessMacCommands.constprop.0+0x254>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800590e:	0022      	movs	r2, r4
 8005910:	7833      	ldrb	r3, [r6, #0]
 8005912:	3274      	adds	r2, #116	; 0x74
 8005914:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8005916:	0022      	movs	r2, r4
 8005918:	327c      	adds	r2, #124	; 0x7c
 800591a:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800591c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800591e:	6723      	str	r3, [r4, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8005920:	67a3      	str	r3, [r4, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8005922:	7873      	ldrb	r3, [r6, #1]
 8005924:	346d      	adds	r4, #109	; 0x6d
 8005926:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8005928:	a908      	add	r1, sp, #32
 800592a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800592c:	2201      	movs	r2, #1
 800592e:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005930:	f002 fb50 	bl	8007fd4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8005934:	2310      	movs	r3, #16
 8005936:	495e      	ldr	r1, [pc, #376]	; (8005ab0 <ProcessMacCommands.constprop.0+0x3dc>)
 8005938:	4a60      	ldr	r2, [pc, #384]	; (8005abc <ProcessMacCommands.constprop.0+0x3e8>)
 800593a:	5c88      	ldrb	r0, [r1, r2]
 800593c:	4303      	orrs	r3, r0
 800593e:	548b      	strb	r3, [r1, r2]
}
 8005940:	e714      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8005942:	23d2      	movs	r3, #210	; 0xd2
 8005944:	4a5a      	ldr	r2, [pc, #360]	; (8005ab0 <ProcessMacCommands.constprop.0+0x3dc>)
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800594a:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <ProcessMacCommands.constprop.0+0x284>
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d000      	beq.n	8005958 <ProcessMacCommands.constprop.0+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8005956:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8005958:	ab04      	add	r3, sp, #16
 800595a:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800595c:	233f      	movs	r3, #63	; 0x3f
 800595e:	9a05      	ldr	r2, [sp, #20]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8005960:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8005962:	4013      	ands	r3, r2
 8005964:	aa04      	add	r2, sp, #16
 8005966:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8005968:	2202      	movs	r2, #2
 800596a:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800596c:	f002 fb32 	bl	8007fd4 <LoRaMacCommandsAddCmd>
                break;
 8005970:	e6fc      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                status = 0x03;
 8005972:	260d      	movs	r6, #13
 8005974:	ab04      	add	r3, sp, #16
 8005976:	18f6      	adds	r6, r6, r3
 8005978:	2303      	movs	r3, #3
 800597a:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 800597c:	5d7b      	ldrb	r3, [r7, r5]
 800597e:	a90a      	add	r1, sp, #40	; 0x28
 8005980:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8005982:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005984:	b2db      	uxtb	r3, r3
 8005986:	5cfd      	ldrb	r5, [r7, r3]
 8005988:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800598a:	b2db      	uxtb	r3, r3
 800598c:	5cfb      	ldrb	r3, [r7, r3]
                newChannelReq.ChannelId = payload[macIndex++];
 800598e:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8005990:	b2c0      	uxtb	r0, r0
 8005992:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005994:	022d      	lsls	r5, r5, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	432b      	orrs	r3, r5
 800599a:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 800599c:	2064      	movs	r0, #100	; 0x64
 800599e:	4343      	muls	r3, r0
 80059a0:	930e      	str	r3, [sp, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80059a2:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
 80059a4:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80059a6:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 80059a8:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 80059aa:	930f      	str	r3, [sp, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80059ac:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 80059ae:	aa0e      	add	r2, sp, #56	; 0x38
                chParam.DrRange.Value = payload[macIndex++];
 80059b0:	7213      	strb	r3, [r2, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
                newChannelReq.NewChannel = &chParam;
 80059b4:	920a      	str	r2, [sp, #40]	; 0x28
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80059b6:	334c      	adds	r3, #76	; 0x4c
 80059b8:	7818      	ldrb	r0, [r3, #0]
 80059ba:	f003 fa46 	bl	8008e4a <RegionNewChannelReq>
 80059be:	b2c3      	uxtb	r3, r0
                chParam.DrRange.Value = payload[macIndex++];
 80059c0:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80059c2:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 80059c4:	2800      	cmp	r0, #0
 80059c6:	da00      	bge.n	80059ca <ProcessMacCommands.constprop.0+0x2f6>
 80059c8:	e6d0      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    macCmdPayload[0] = status;
 80059ca:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80059cc:	2201      	movs	r2, #1
 80059ce:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 80059d0:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80059d2:	e7cb      	b.n	800596c <ProcessMacCommands.constprop.0+0x298>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80059d4:	230f      	movs	r3, #15
 80059d6:	5d7a      	ldrb	r2, [r7, r5]
 80059d8:	3402      	adds	r4, #2
 80059da:	401a      	ands	r2, r3
 80059dc:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80059de:	1c13      	adds	r3, r2, #0
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	d100      	bne.n	80059e6 <ProcessMacCommands.constprop.0+0x312>
 80059e4:	2301      	movs	r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	23fa      	movs	r3, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80059ea:	21fa      	movs	r1, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4353      	muls	r3, r2
 80059f0:	4a31      	ldr	r2, [pc, #196]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80059f2:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80059f4:	65d3      	str	r3, [r2, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80059f6:	185b      	adds	r3, r3, r1
 80059f8:	6613      	str	r3, [r2, #96]	; 0x60
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80059fa:	a908      	add	r1, sp, #32
 80059fc:	2200      	movs	r2, #0
 80059fe:	2008      	movs	r0, #8
 8005a00:	f002 fae8 	bl	8007fd4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8005a04:	2310      	movs	r3, #16
 8005a06:	492a      	ldr	r1, [pc, #168]	; (8005ab0 <ProcessMacCommands.constprop.0+0x3dc>)
 8005a08:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <ProcessMacCommands.constprop.0+0x3e8>)
 8005a0a:	5c88      	ldrb	r0, [r1, r2]
 8005a0c:	4303      	orrs	r3, r0
 8005a0e:	548b      	strb	r3, [r1, r2]
 8005a10:	e751      	b.n	80058b6 <ProcessMacCommands.constprop.0+0x1e2>
                uint8_t eirpDwellTime = payload[macIndex++];
 8005a12:	3402      	adds	r4, #2
 8005a14:	b2e3      	uxtb	r3, r4
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8005a1a:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8005a1c:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8005a1e:	ad09      	add	r5, sp, #36	; 0x24
 8005a20:	702a      	strb	r2, [r5, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8005a22:	3220      	adds	r2, #32
 8005a24:	4011      	ands	r1, r2
 8005a26:	4213      	tst	r3, r2
 8005a28:	d13e      	bne.n	8005aa8 <ProcessMacCommands.constprop.0+0x3d4>
                txParamSetupReq.DownlinkDwellTime = 0;
 8005a2a:	7069      	strb	r1, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8005a2c:	06da      	lsls	r2, r3, #27
 8005a2e:	d501      	bpl.n	8005a34 <ProcessMacCommands.constprop.0+0x360>
                    txParamSetupReq.UplinkDwellTime = 1;
 8005a30:	2201      	movs	r2, #1
 8005a32:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8005a34:	220f      	movs	r2, #15
 8005a36:	4013      	ands	r3, r2
 8005a38:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <ProcessMacCommands.constprop.0+0x3ec>)
 8005a3c:	0029      	movs	r1, r5
 8005a3e:	7818      	ldrb	r0, [r3, #0]
 8005a40:	4c1d      	ldr	r4, [pc, #116]	; (8005ab8 <ProcessMacCommands.constprop.0+0x3e4>)
 8005a42:	f003 fa11 	bl	8008e68 <RegionTxParamSetupReq>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d02c      	beq.n	8005aa4 <ProcessMacCommands.constprop.0+0x3d0>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8005a4a:	0023      	movs	r3, r4
 8005a4c:	782e      	ldrb	r6, [r5, #0]
 8005a4e:	3380      	adds	r3, #128	; 0x80
 8005a50:	701e      	strb	r6, [r3, #0]
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8005a52:	0023      	movs	r3, r4
 8005a54:	786a      	ldrb	r2, [r5, #1]
 8005a56:	3381      	adds	r3, #129	; 0x81
 8005a58:	701a      	strb	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8005a5a:	78ab      	ldrb	r3, [r5, #2]
 8005a5c:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <ProcessMacCommands.constprop.0+0x3f0>)
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8005a5e:	3445      	adds	r4, #69	; 0x45
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8005a60:	5cd0      	ldrb	r0, [r2, r3]
 8005a62:	f7fb fad3 	bl	800100c <__aeabi_ui2f>
 8005a66:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <ProcessMacCommands.constprop.0+0x3f4>)
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8005a68:	2128      	movs	r1, #40	; 0x28
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8005a6a:	67d8      	str	r0, [r3, #124]	; 0x7c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	aa04      	add	r2, sp, #16
 8005a70:	1852      	adds	r2, r2, r1
 8005a72:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8005a74:	222a      	movs	r2, #42	; 0x2a
 8005a76:	ab04      	add	r3, sp, #16
 8005a78:	189b      	adds	r3, r3, r2
 8005a7a:	701e      	strb	r6, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005a7c:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <ProcessMacCommands.constprop.0+0x3ec>)
 8005a7e:	a90e      	add	r1, sp, #56	; 0x38
 8005a80:	7818      	ldrb	r0, [r3, #0]
 8005a82:	f003 f92f 	bl	8008ce4 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8005a86:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005a88:	900a      	str	r0, [sp, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8005a8a:	5661      	ldrsb	r1, [r4, r1]
 8005a8c:	1c03      	adds	r3, r0, #0
 8005a8e:	b240      	sxtb	r0, r0
 8005a90:	7822      	ldrb	r2, [r4, #0]
 8005a92:	4288      	cmp	r0, r1
 8005a94:	da00      	bge.n	8005a98 <ProcessMacCommands.constprop.0+0x3c4>
 8005a96:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2009      	movs	r0, #9
 8005a9c:	a908      	add	r1, sp, #32
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8005a9e:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8005aa0:	f002 fa98 	bl	8007fd4 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8005aa4:	9d04      	ldr	r5, [sp, #16]
 8005aa6:	e661      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	706a      	strb	r2, [r5, #1]
 8005aac:	e7be      	b.n	8005a2c <ProcessMacCommands.constprop.0+0x358>
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	200003b8 	.word	0x200003b8
 8005ab4:	00000461 	.word	0x00000461
 8005ab8:	200008d0 	.word	0x200008d0
 8005abc:	0000048d 	.word	0x0000048d
 8005ac0:	2000091c 	.word	0x2000091c
 8005ac4:	08019442 	.word	0x08019442
 8005ac8:	200008d8 	.word	0x200008d8
                status = 0x03;
 8005acc:	260d      	movs	r6, #13
 8005ace:	ab04      	add	r3, sp, #16
 8005ad0:	18f6      	adds	r6, r6, r3
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8005ad6:	5d7b      	ldrb	r3, [r7, r5]
 8005ad8:	a90e      	add	r1, sp, #56	; 0x38
 8005ada:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005adc:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8005ade:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005ae0:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005ae2:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005ae4:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005ae6:	5cba      	ldrb	r2, [r7, r2]
 8005ae8:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8005aea:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005aec:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005aee:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8005af0:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005af2:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8005af4:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005af6:	b2ed      	uxtb	r5, r5
 8005af8:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8005afa:	2264      	movs	r2, #100	; 0x64
 8005afc:	4353      	muls	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8005b00:	4b5f      	ldr	r3, [pc, #380]	; (8005c80 <ProcessMacCommands.constprop.0+0x5ac>)
 8005b02:	334c      	adds	r3, #76	; 0x4c
 8005b04:	7818      	ldrb	r0, [r3, #0]
 8005b06:	f003 f9be 	bl	8008e86 <RegionDlChannelReq>
 8005b0a:	b2c3      	uxtb	r3, r0
 8005b0c:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	da00      	bge.n	8005b14 <ProcessMacCommands.constprop.0+0x440>
 8005b12:	e62b      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    macCmdPayload[0] = status;
 8005b14:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005b16:	2201      	movs	r2, #1
 8005b18:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8005b1a:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005b1c:	e708      	b.n	8005930 <ProcessMacCommands.constprop.0+0x25c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8005b1e:	2009      	movs	r0, #9
 8005b20:	f002 fc06 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d048      	beq.n	8005bba <ProcessMacCommands.constprop.0+0x4e6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8005b28:	2109      	movs	r1, #9
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f002 fbbc 	bl	80082a8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8005b30:	231e      	movs	r3, #30
 8005b32:	aa04      	add	r2, sp, #16
 8005b34:	189b      	adds	r3, r3, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8005b3a:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	5cfe      	ldrb	r6, [r7, r3]
 8005b40:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8005b46:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005b48:	0409      	lsls	r1, r1, #16
 8005b4a:	430e      	orrs	r6, r1
 8005b4c:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8005b4e:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005b50:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005b52:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005b54:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005b56:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005b58:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005b5a:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005b5c:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005b5e:	5d3a      	ldrb	r2, [r7, r4]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 8005b64:	aa04      	add	r2, sp, #16
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005b66:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005b68:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 8005b6a:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8005b6c:	a80e      	add	r0, sp, #56	; 0x38
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005b6e:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 8005b70:	f005 fdfa 	bl	800b768 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8005b74:	4b43      	ldr	r3, [pc, #268]	; (8005c84 <ProcessMacCommands.constprop.0+0x5b0>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8005b76:	4c44      	ldr	r4, [pc, #272]	; (8005c88 <ProcessMacCommands.constprop.0+0x5b4>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8005b78:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8005b7a:	23cf      	movs	r3, #207	; 0xcf
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	18e3      	adds	r3, r4, r3
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	23ce      	movs	r3, #206	; 0xce
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	58e3      	ldr	r3, [r4, r3]
 8005b8c:	a80c      	add	r0, sp, #48	; 0x30
 8005b8e:	910a      	str	r1, [sp, #40]	; 0x28
 8005b90:	f005 fdb6 	bl	800b700 <SysTimeSub>
 8005b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	a80a      	add	r0, sp, #40	; 0x28
 8005b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba0:	f005 fd94 	bl	800b6cc <SysTimeAdd>
                    SysTimeSet( sysTime );
 8005ba4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ba8:	f005 fdc0 	bl	800b72c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8005bac:	f002 f9fb 	bl	8007fa6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4a36      	ldr	r2, [pc, #216]	; (8005c8c <ProcessMacCommands.constprop.0+0x5b8>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005bb4:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8005bb6:	54a3      	strb	r3, [r4, r2]
 8005bb8:	e5d8      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8005bba:	4b33      	ldr	r3, [pc, #204]	; (8005c88 <ProcessMacCommands.constprop.0+0x5b4>)
 8005bbc:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <ProcessMacCommands.constprop.0+0x5b8>)
 8005bbe:	5498      	strb	r0, [r3, r2]
 8005bc0:	e5d4      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8005bc2:	200c      	movs	r0, #12
 8005bc4:	f002 fbb4 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d100      	bne.n	8005bce <ProcessMacCommands.constprop.0+0x4fa>
 8005bcc:	e5ce      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8005bce:	210c      	movs	r1, #12
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f002 fb69 	bl	80082a8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8005bd6:	4a2c      	ldr	r2, [pc, #176]	; (8005c88 <ProcessMacCommands.constprop.0+0x5b4>)
 8005bd8:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <ProcessMacCommands.constprop.0+0x5bc>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	3b04      	subs	r3, #4
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d800      	bhi.n	8005be4 <ProcessMacCommands.constprop.0+0x510>
 8005be2:	e5c3      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                        LoRaMacClassBPingSlotInfoAns( );
 8005be4:	f002 f9db 	bl	8007f9e <LoRaMacClassBPingSlotInfoAns>
 8005be8:	e5c0      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                frequency = ( uint32_t )payload[macIndex++];
 8005bea:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	5cf9      	ldrb	r1, [r7, r3]
 8005bf0:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005bf6:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	4319      	orrs	r1, r3
                frequency *= 100;
 8005bfc:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8005bfe:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 8005c00:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c02:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8005c04:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c06:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8005c08:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8005c0a:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8005c0c:	3b55      	subs	r3, #85	; 0x55
 8005c0e:	4018      	ands	r0, r3
 8005c10:	f002 f9c6 	bl	8007fa0 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8005c14:	a908      	add	r1, sp, #32
 8005c16:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 8005c1c:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8005c1e:	e687      	b.n	8005930 <ProcessMacCommands.constprop.0+0x25c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8005c20:	200d      	movs	r0, #13
 8005c22:	f002 fb85 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d100      	bne.n	8005c2c <ProcessMacCommands.constprop.0+0x558>
 8005c2a:	e59f      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8005c2c:	210d      	movs	r1, #13
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f002 fb3a 	bl	80082a8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8005c34:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	5cf8      	ldrb	r0, [r7, r3]
 8005c3a:	5d7b      	ldrb	r3, [r7, r5]
 8005c3c:	0200      	lsls	r0, r0, #8
 8005c3e:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 8005c40:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <ProcessMacCommands.constprop.0+0x5c0>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8005c44:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8005c46:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8005c48:	5d39      	ldrb	r1, [r7, r4]
 8005c4a:	681a      	ldr	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8005c4c:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8005c4e:	f002 f9a9 	bl	8007fa4 <LoRaMacClassBBeaconTimingAns>
 8005c52:	e58b      	b.n	800576c <ProcessMacCommands.constprop.0+0x98>
                    frequency = ( uint32_t )payload[macIndex++];
 8005c54:	5d7a      	ldrb	r2, [r7, r5]
 8005c56:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c58:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005c5a:	3403      	adds	r4, #3
 8005c5c:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c5e:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005c60:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c62:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005c64:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	4318      	orrs	r0, r3
                    frequency *= 100;
 8005c6a:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c6c:	4310      	orrs	r0, r2
                    frequency *= 100;
 8005c6e:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8005c70:	f002 f99a 	bl	8007fa8 <LoRaMacClassBBeaconFreqReq>
 8005c74:	a908      	add	r1, sp, #32
 8005c76:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005c7c:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8005c7e:	e675      	b.n	800596c <ProcessMacCommands.constprop.0+0x298>
 8005c80:	200008d0 	.word	0x200008d0
 8005c84:	12d53d80 	.word	0x12d53d80
 8005c88:	200003b8 	.word	0x200003b8
 8005c8c:	0000043c 	.word	0x0000043c
 8005c90:	0000048c 	.word	0x0000048c
 8005c94:	2000104c 	.word	0x2000104c

08005c98 <StopRetransmission.isra.0>:
        counter++;
    }
    return counter;
}

static bool StopRetransmission( void )
 8005c98:	b510      	push	{r4, lr}
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <StopRetransmission.isra.0+0x44>)
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <StopRetransmission.isra.0+0x48>)
 8005c9e:	5c9a      	ldrb	r2, [r3, r2]
 8005ca0:	0792      	lsls	r2, r2, #30
 8005ca2:	d503      	bpl.n	8005cac <StopRetransmission.isra.0+0x14>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <StopRetransmission.isra.0+0x4c>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8005ca6:	5c9a      	ldrb	r2, [r3, r2]
 8005ca8:	2a01      	cmp	r2, #1
 8005caa:	d90b      	bls.n	8005cc4 <StopRetransmission.isra.0+0x2c>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8005cac:	22c3      	movs	r2, #195	; 0xc3
 8005cae:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <StopRetransmission.isra.0+0x50>)
 8005cb0:	0052      	lsls	r2, r2, #1
 8005cb2:	5c8a      	ldrb	r2, [r1, r2]
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	d005      	beq.n	8005cc4 <StopRetransmission.isra.0+0x2c>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8005cb8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        counter++;
 8005cba:	1c50      	adds	r0, r2, #1
 8005cbc:	1e44      	subs	r4, r0, #1
 8005cbe:	41a0      	sbcs	r0, r4
 8005cc0:	1812      	adds	r2, r2, r0
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8005cc2:	634a      	str	r2, [r1, #52]	; 0x34
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8005cc4:	2183      	movs	r1, #131	; 0x83
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	00c9      	lsls	r1, r1, #3
 8005cca:	525a      	strh	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8005ccc:	4907      	ldr	r1, [pc, #28]	; (8005cec <StopRetransmission.isra.0+0x54>)
 8005cce:	545a      	strb	r2, [r3, r1]
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8005cd0:	39da      	subs	r1, #218	; 0xda
 8005cd2:	5858      	ldr	r0, [r3, r1]
 8005cd4:	3202      	adds	r2, #2
 8005cd6:	4390      	bics	r0, r2
 8005cd8:	5058      	str	r0, [r3, r1]

    return true;
}
 8005cda:	bd10      	pop	{r4, pc}
 8005cdc:	200003b8 	.word	0x200003b8
 8005ce0:	0000048d 	.word	0x0000048d
 8005ce4:	00000431 	.word	0x00000431
 8005ce8:	200008d0 	.word	0x200008d0
 8005cec:	0000041a 	.word	0x0000041a

08005cf0 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <LoRaMacIsBusy+0x28>)
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	2301      	movs	r3, #1
        return true;
 8005cf6:	0018      	movs	r0, r3
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8005cf8:	421a      	tst	r2, r3
 8005cfa:	d10b      	bne.n	8005d14 <LoRaMacIsBusy+0x24>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8005cfc:	21d0      	movs	r1, #208	; 0xd0
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <LoRaMacIsBusy+0x2c>)
 8005d00:	0089      	lsls	r1, r1, #2
 8005d02:	5851      	ldr	r1, [r2, r1]
 8005d04:	2900      	cmp	r1, #0
 8005d06:	d105      	bne.n	8005d14 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <LoRaMacIsBusy+0x30>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8005d0a:	5cd0      	ldrb	r0, [r2, r3]
 8005d0c:	3801      	subs	r0, #1
 8005d0e:	1e43      	subs	r3, r0, #1
 8005d10:	4198      	sbcs	r0, r3
 8005d12:	b2c0      	uxtb	r0, r0
}
 8005d14:	4770      	bx	lr
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	200003b4 	.word	0x200003b4
 8005d1c:	200003b8 	.word	0x200003b8
 8005d20:	0000048e 	.word	0x0000048e

08005d24 <PrepareFrame>:
{
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    MacCtx.PktBufferLen = 0;
 8005d26:	2400      	movs	r4, #0
{
 8005d28:	001f      	movs	r7, r3
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	ab0c      	add	r3, sp, #48	; 0x30
    MacCtx.PktBufferLen = 0;
 8005d2e:	4d54      	ldr	r5, [pc, #336]	; (8005e80 <PrepareFrame+0x15c>)
{
 8005d30:	881e      	ldrh	r6, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8005d32:	4b54      	ldr	r3, [pc, #336]	; (8005e84 <PrepareFrame+0x160>)
{
 8005d34:	9203      	str	r2, [sp, #12]
    MacCtx.NodeAckRequested = false;
 8005d36:	54ec      	strb	r4, [r5, r3]
        fBufferSize = 0;
 8005d38:	003b      	movs	r3, r7
 8005d3a:	1e5a      	subs	r2, r3, #1
 8005d3c:	4193      	sbcs	r3, r2
 8005d3e:	425b      	negs	r3, r3
 8005d40:	401e      	ands	r6, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8005d42:	0032      	movs	r2, r6
{
 8005d44:	9001      	str	r0, [sp, #4]
 8005d46:	9102      	str	r1, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8005d48:	484f      	ldr	r0, [pc, #316]	; (8005e88 <PrepareFrame+0x164>)
 8005d4a:	0039      	movs	r1, r7
    MacCtx.PktBufferLen = 0;
 8005d4c:	802c      	strh	r4, [r5, #0]
    uint32_t fCntUp = 0;
 8005d4e:	9404      	str	r4, [sp, #16]
    size_t macCmdsSize = 0;
 8005d50:	9405      	str	r4, [sp, #20]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8005d52:	f7fe fdfe 	bl	8004952 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8005d56:	4b4d      	ldr	r3, [pc, #308]	; (8005e8c <PrepareFrame+0x168>)
 8005d58:	b2f2      	uxtb	r2, r6
 8005d5a:	54ea      	strb	r2, [r5, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8005d5c:	9b01      	ldr	r3, [sp, #4]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	70ab      	strb	r3, [r5, #2]
    switch( macHdr->Bits.MType )
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d03c      	beq.n	8005de6 <PrepareFrame+0xc2>
 8005d6c:	2b07      	cmp	r3, #7
 8005d6e:	d100      	bne.n	8005d72 <PrepareFrame+0x4e>
 8005d70:	e077      	b.n	8005e62 <PrepareFrame+0x13e>
 8005d72:	2002      	movs	r0, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d134      	bne.n	8005de2 <PrepareFrame+0xbe>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8005d78:	002e      	movs	r6, r5
 8005d7a:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8005d7c:	002f      	movs	r7, r5
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8005d7e:	36ff      	adds	r6, #255	; 0xff
 8005d80:	7173      	strb	r3, [r6, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8005d82:	4b43      	ldr	r3, [pc, #268]	; (8005e90 <PrepareFrame+0x16c>)
 8005d84:	37fc      	adds	r7, #252	; 0xfc
 8005d86:	60fb      	str	r3, [r7, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8005d88:	23ff      	movs	r3, #255	; 0xff
 8005d8a:	7373      	strb	r3, [r6, #13]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8005d8c:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8005d8e:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8005d90:	781b      	ldrb	r3, [r3, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8005d92:	4c40      	ldr	r4, [pc, #256]	; (8005e94 <PrepareFrame+0x170>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8005d94:	73b3      	strb	r3, [r6, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8005d96:	2394      	movs	r3, #148	; 0x94
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	54e9      	strb	r1, [r5, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8005d9c:	0023      	movs	r3, r4
 8005d9e:	33d0      	adds	r3, #208	; 0xd0
 8005da0:	681b      	ldr	r3, [r3, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005da2:	a804      	add	r0, sp, #16
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8005da4:	617b      	str	r3, [r7, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	7573      	strb	r3, [r6, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8005dac:	2398      	movs	r3, #152	; 0x98
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	54ea      	strb	r2, [r5, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8005db2:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <PrepareFrame+0x164>)
 8005db4:	633b      	str	r3, [r7, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005db6:	f002 fc41 	bl	800863c <LoRaMacCryptoGetFCntUp>
 8005dba:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8005dbc:	2012      	movs	r0, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <PrepareFrame+0xbe>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8005dc2:	0029      	movs	r1, r5
 8005dc4:	9a04      	ldr	r2, [sp, #16]
 8005dc6:	31fe      	adds	r1, #254	; 0xfe
 8005dc8:	830a      	strh	r2, [r1, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 8005dca:	2189      	movs	r1, #137	; 0x89
 8005dcc:	00c9      	lsls	r1, r1, #3
 8005dce:	526b      	strh	r3, [r5, r1]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8005dd0:	238a      	movs	r3, #138	; 0x8a
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8005dd2:	a805      	add	r0, sp, #20
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	50ea      	str	r2, [r5, r3]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8005dd8:	f002 f9a0 	bl	800811c <LoRaMacCommandsGetSizeSerializedCmds>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d006      	beq.n	8005dee <PrepareFrame+0xca>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8005de0:	2013      	movs	r0, #19
}
 8005de2:	b007      	add	sp, #28
 8005de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.NodeAckRequested = true;
 8005de6:	2301      	movs	r3, #1
 8005de8:	4926      	ldr	r1, [pc, #152]	; (8005e84 <PrepareFrame+0x160>)
 8005dea:	546b      	strb	r3, [r5, r1]
 8005dec:	e7c4      	b.n	8005d78 <PrepareFrame+0x54>
            if( macCmdsSize > 0 )
 8005dee:	9b05      	ldr	r3, [sp, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <PrepareFrame+0xd4>
    return LORAMAC_STATUS_OK;
 8005df4:	2000      	movs	r0, #0
 8005df6:	e7f4      	b.n	8005de2 <PrepareFrame+0xbe>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8005df8:	2045      	movs	r0, #69	; 0x45
 8005dfa:	5620      	ldrsb	r0, [r4, r0]
 8005dfc:	f7ff f948 	bl	8005090 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <PrepareFrame+0x168>)
 8005e02:	5ceb      	ldrb	r3, [r5, r3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01c      	beq.n	8005e42 <PrepareFrame+0x11e>
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	2b0f      	cmp	r3, #15
 8005e0c:	d811      	bhi.n	8005e32 <PrepareFrame+0x10e>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8005e0e:	200f      	movs	r0, #15
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <PrepareFrame+0x174>)
 8005e12:	a905      	add	r1, sp, #20
 8005e14:	f002 f990 	bl	8008138 <LoRaMacCommandsSerializeCmds>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1e1      	bne.n	8005de0 <PrepareFrame+0xbc>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8005e1c:	210f      	movs	r1, #15
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	9a05      	ldr	r2, [sp, #20]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	400a      	ands	r2, r1
 8005e26:	438b      	bics	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	9a02      	ldr	r2, [sp, #8]
 8005e2c:	7013      	strb	r3, [r2, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8005e2e:	7573      	strb	r3, [r6, #21]
 8005e30:	e7d7      	b.n	8005de2 <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8005e32:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <PrepareFrame+0x178>)
 8005e34:	a905      	add	r1, sp, #20
 8005e36:	f002 f97f 	bl	8008138 <LoRaMacCommandsSerializeCmds>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d1d0      	bne.n	8005de0 <PrepareFrame+0xbc>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8005e3e:	300a      	adds	r0, #10
 8005e40:	e7cf      	b.n	8005de2 <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8005e42:	4e16      	ldr	r6, [pc, #88]	; (8005e9c <PrepareFrame+0x178>)
 8005e44:	a905      	add	r1, sp, #20
 8005e46:	0032      	movs	r2, r6
 8005e48:	f002 f976 	bl	8008138 <LoRaMacCommandsSerializeCmds>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d1c7      	bne.n	8005de0 <PrepareFrame+0xbc>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8005e50:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8005e52:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	54e8      	strb	r0, [r5, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8005e58:	9b05      	ldr	r3, [sp, #20]
 8005e5a:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8005e5c:	633e      	str	r6, [r7, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8005e5e:	54ab      	strb	r3, [r5, r2]
 8005e60:	e7bf      	b.n	8005de2 <PrepareFrame+0xbe>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8005e62:	2f00      	cmp	r7, #0
 8005e64:	d0c6      	beq.n	8005df4 <PrepareFrame+0xd0>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d0c4      	beq.n	8005df4 <PrepareFrame+0xd0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8005e6a:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <PrepareFrame+0x17c>)
 8005e6c:	0039      	movs	r1, r7
 8005e6e:	b2f2      	uxtb	r2, r6
 8005e70:	f7fe fd6f 	bl	8004952 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <PrepareFrame+0x168>)
    return LORAMAC_STATUS_OK;
 8005e76:	0020      	movs	r0, r4
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8005e78:	5ceb      	ldrb	r3, [r5, r3]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	802b      	strh	r3, [r5, #0]
 8005e7e:	e7b0      	b.n	8005de2 <PrepareFrame+0xbe>
 8005e80:	200003b8 	.word	0x200003b8
 8005e84:	0000041a 	.word	0x0000041a
 8005e88:	200004f0 	.word	0x200004f0
 8005e8c:	00000237 	.word	0x00000237
 8005e90:	200003ba 	.word	0x200003ba
 8005e94:	200008d0 	.word	0x200008d0
 8005e98:	200004d0 	.word	0x200004d0
 8005e9c:	20000850 	.word	0x20000850
 8005ea0:	200003bb 	.word	0x200003bb

08005ea4 <SendFrameOnChannel>:
{
 8005ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005ea6:	4d4a      	ldr	r5, [pc, #296]	; (8005fd0 <SendFrameOnChannel+0x12c>)
    int8_t txPower = 0;
 8005ea8:	2300      	movs	r3, #0
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005eaa:	002f      	movs	r7, r5
{
 8005eac:	b089      	sub	sp, #36	; 0x24
    txConfig.Channel = channel;
 8005eae:	a904      	add	r1, sp, #16
    int8_t txPower = 0;
 8005eb0:	aa02      	add	r2, sp, #8
 8005eb2:	70d3      	strb	r3, [r2, #3]
    txConfig.Channel = channel;
 8005eb4:	7008      	strb	r0, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005eb6:	3745      	adds	r7, #69	; 0x45
 8005eb8:	783b      	ldrb	r3, [r7, #0]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8005eba:	4c46      	ldr	r4, [pc, #280]	; (8005fd4 <SendFrameOnChannel+0x130>)
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005ebc:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8005ebe:	002b      	movs	r3, r5
 8005ec0:	3344      	adds	r3, #68	; 0x44
 8005ec2:	781b      	ldrb	r3, [r3, #0]
{
 8005ec4:	0006      	movs	r6, r0
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8005ec6:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8005ec8:	002b      	movs	r3, r5
 8005eca:	3308      	adds	r3, #8
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8005ece:	3203      	adds	r2, #3
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8005ed0:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8005ed2:	002b      	movs	r3, r5
 8005ed4:	3388      	adds	r3, #136	; 0x88
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8005eda:	8823      	ldrh	r3, [r4, #0]
 8005edc:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8005ede:	002b      	movs	r3, r5
 8005ee0:	334c      	adds	r3, #76	; 0x4c
 8005ee2:	7818      	ldrb	r0, [r3, #0]
 8005ee4:	4b3c      	ldr	r3, [pc, #240]	; (8005fd8 <SendFrameOnChannel+0x134>)
 8005ee6:	f002 ff7a 	bl	8008dde <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8005eea:	2201      	movs	r2, #1
 8005eec:	4b3b      	ldr	r3, [pc, #236]	; (8005fdc <SendFrameOnChannel+0x138>)
 8005eee:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8005ef0:	783a      	ldrb	r2, [r7, #0]
 8005ef2:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <SendFrameOnChannel+0x13c>)
 8005ef4:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8005ef6:	ab02      	add	r3, sp, #8
 8005ef8:	78da      	ldrb	r2, [r3, #3]
 8005efa:	4b3a      	ldr	r3, [pc, #232]	; (8005fe4 <SendFrameOnChannel+0x140>)
 8005efc:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8005efe:	4b3a      	ldr	r3, [pc, #232]	; (8005fe8 <SendFrameOnChannel+0x144>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8005f00:	4a3a      	ldr	r2, [pc, #232]	; (8005fec <SendFrameOnChannel+0x148>)
    MacCtx.McpsConfirm.Channel = channel;
 8005f02:	50e6      	str	r6, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8005f04:	4e3a      	ldr	r6, [pc, #232]	; (8005ff0 <SendFrameOnChannel+0x14c>)
 8005f06:	59a3      	ldr	r3, [r4, r6]
 8005f08:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8005f0a:	4a3a      	ldr	r2, [pc, #232]	; (8005ff4 <SendFrameOnChannel+0x150>)
 8005f0c:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8005f0e:	f002 f83b 	bl	8007f88 <LoRaMacClassBIsBeaconModeActive>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d118      	bne.n	8005f48 <SendFrameOnChannel+0xa4>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8005f16:	23c2      	movs	r3, #194	; 0xc2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	5ceb      	ldrb	r3, [r5, r3]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
 8005f20:	f002 f846 	bl	8007fb0 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8005f24:	f002 f833 	bl	8007f8e <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005f28:	4b33      	ldr	r3, [pc, #204]	; (8005ff8 <SendFrameOnChannel+0x154>)
    switch( MacCtx.TxMsg.Type )
 8005f2a:	0027      	movs	r7, r4
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005f2c:	5ce6      	ldrb	r6, [r4, r3]
    uint32_t fCntUp = 0;
 8005f2e:	2300      	movs	r3, #0
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005f30:	3545      	adds	r5, #69	; 0x45
 8005f32:	782d      	ldrb	r5, [r5, #0]
    switch( MacCtx.TxMsg.Type )
 8005f34:	37ff      	adds	r7, #255	; 0xff
    uint32_t fCntUp = 0;
 8005f36:	9303      	str	r3, [sp, #12]
    switch( MacCtx.TxMsg.Type )
 8005f38:	797b      	ldrb	r3, [r7, #5]
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8005f3a:	b26d      	sxtb	r5, r5
    switch( MacCtx.TxMsg.Type )
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00c      	beq.n	8005f5a <SendFrameOnChannel+0xb6>
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d029      	beq.n	8005f98 <SendFrameOnChannel+0xf4>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e005      	b.n	8005f54 <SendFrameOnChannel+0xb0>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8005f48:	59a0      	ldr	r0, [r4, r6]
 8005f4a:	f002 f82f 	bl	8007fac <LoRaMacClassBIsUplinkCollision>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8005f4e:	2310      	movs	r3, #16
        if( collisionTime > 0 )
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d0e0      	beq.n	8005f16 <SendFrameOnChannel+0x72>
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	b009      	add	sp, #36	; 0x24
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8005f5a:	4828      	ldr	r0, [pc, #160]	; (8005ffc <SendFrameOnChannel+0x158>)
 8005f5c:	f002 fbb8 	bl	80086d0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d133      	bne.n	8005fcc <SendFrameOnChannel+0x128>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8005f64:	7b7b      	ldrb	r3, [r7, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005f66:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8005f68:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005f6a:	2302      	movs	r3, #2
    MacCtx.ResponseTimeoutStartTime = 0;
 8005f6c:	2500      	movs	r5, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005f6e:	0092      	lsls	r2, r2, #2
 8005f70:	58a1      	ldr	r1, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8005f72:	4823      	ldr	r0, [pc, #140]	; (8006000 <SendFrameOnChannel+0x15c>)
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8005f74:	430b      	orrs	r3, r1
 8005f76:	50a3      	str	r3, [r4, r2]
    MacCtx.ChannelsNbTransCounter++;
 8005f78:	32d8      	adds	r2, #216	; 0xd8
 8005f7a:	5ca3      	ldrb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8005f7c:	7821      	ldrb	r1, [r4, #0]
    MacCtx.ChannelsNbTransCounter++;
 8005f7e:	3301      	adds	r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8005f84:	4a1f      	ldr	r2, [pc, #124]	; (8006004 <SendFrameOnChannel+0x160>)
 8005f86:	54a3      	strb	r3, [r4, r2]
    MacCtx.ResponseTimeoutStartTime = 0;
 8005f88:	4b1f      	ldr	r3, [pc, #124]	; (8006008 <SendFrameOnChannel+0x164>)
 8005f8a:	50e5      	str	r5, [r4, r3]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8005f8c:	4b1f      	ldr	r3, [pc, #124]	; (800600c <SendFrameOnChannel+0x168>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8005f94:	002b      	movs	r3, r5
 8005f96:	e7dd      	b.n	8005f54 <SendFrameOnChannel+0xb0>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005f98:	a803      	add	r0, sp, #12
 8005f9a:	f002 fb4f 	bl	800863c <LoRaMacCryptoGetFCntUp>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8005f9e:	2312      	movs	r3, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d1d7      	bne.n	8005f54 <SendFrameOnChannel+0xb0>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8005fa4:	2383      	movs	r3, #131	; 0x83
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	5ce3      	ldrb	r3, [r4, r3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <SendFrameOnChannel+0x110>
                fCntUp -= 1;
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	9303      	str	r3, [sp, #12]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8005fb4:	0032      	movs	r2, r6
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <SendFrameOnChannel+0x158>)
 8005fb8:	9803      	ldr	r0, [sp, #12]
 8005fba:	b2e9      	uxtb	r1, r5
 8005fbc:	f002 fbae 	bl	800871c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d103      	bne.n	8005fcc <SendFrameOnChannel+0x128>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8005fc4:	0023      	movs	r3, r4
 8005fc6:	33ff      	adds	r3, #255	; 0xff
 8005fc8:	7b5b      	ldrb	r3, [r3, #13]
 8005fca:	e7cc      	b.n	8005f66 <SendFrameOnChannel+0xc2>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8005fcc:	2311      	movs	r3, #17
 8005fce:	e7c1      	b.n	8005f54 <SendFrameOnChannel+0xb0>
 8005fd0:	200008d0 	.word	0x200008d0
 8005fd4:	200003b8 	.word	0x200003b8
 8005fd8:	200007d4 	.word	0x200007d4
 8005fdc:	00000445 	.word	0x00000445
 8005fe0:	00000446 	.word	0x00000446
 8005fe4:	00000447 	.word	0x00000447
 8005fe8:	00000454 	.word	0x00000454
 8005fec:	0000044c 	.word	0x0000044c
 8005ff0:	0000041c 	.word	0x0000041c
 8005ff4:	0000045c 	.word	0x0000045c
 8005ff8:	0000041b 	.word	0x0000041b
 8005ffc:	200004c0 	.word	0x200004c0
 8006000:	200003ba 	.word	0x200003ba
 8006004:	00000449 	.word	0x00000449
 8006008:	00000494 	.word	0x00000494
 800600c:	0801abc8 	.word	0x0801abc8

08006010 <ScheduleTx>:
{
 8006010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006012:	b091      	sub	sp, #68	; 0x44
 8006014:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8006016:	f001 ffb1 	bl	8007f7c <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800601a:	270e      	movs	r7, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800601c:	2800      	cmp	r0, #0
 800601e:	d11a      	bne.n	8006056 <ScheduleTx+0x46>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006020:	23c2      	movs	r3, #194	; 0xc2
 8006022:	4c73      	ldr	r4, [pc, #460]	; (80061f0 <ScheduleTx+0x1e0>)
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	5ce3      	ldrb	r3, [r4, r3]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d00f      	beq.n	800604c <ScheduleTx+0x3c>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800602c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800602e:	4d71      	ldr	r5, [pc, #452]	; (80061f4 <ScheduleTx+0x1e4>)
 8006030:	2b00      	cmp	r3, #0
 8006032:	d018      	beq.n	8006066 <ScheduleTx+0x56>
    switch( MacCtx.TxMsg.Type )
 8006034:	002e      	movs	r6, r5
 8006036:	36ff      	adds	r6, #255	; 0xff
 8006038:	7973      	ldrb	r3, [r6, #5]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01c      	beq.n	8006078 <ScheduleTx+0x68>
 800603e:	2703      	movs	r7, #3
 8006040:	2b04      	cmp	r3, #4
 8006042:	d108      	bne.n	8006056 <ScheduleTx+0x46>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8006044:	486c      	ldr	r0, [pc, #432]	; (80061f8 <ScheduleTx+0x1e8>)
 8006046:	f002 fdd5 	bl	8008bf4 <LoRaMacSerializerData>
 800604a:	e018      	b.n	800607e <ScheduleTx+0x6e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800604c:	f001 ff98 	bl	8007f80 <LoRaMacClassBIsPingExpected>
 8006050:	2800      	cmp	r0, #0
 8006052:	d003      	beq.n	800605c <ScheduleTx+0x4c>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8006054:	270f      	movs	r7, #15
}
 8006056:	0038      	movs	r0, r7
 8006058:	b011      	add	sp, #68	; 0x44
 800605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800605c:	f001 ff92 	bl	8007f84 <LoRaMacClassBIsMulticastExpected>
 8006060:	2800      	cmp	r0, #0
 8006062:	d0e3      	beq.n	800602c <ScheduleTx+0x1c>
 8006064:	e7f6      	b.n	8006054 <ScheduleTx+0x44>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8006066:	23c6      	movs	r3, #198	; 0xc6
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	5ae2      	ldrh	r2, [r4, r3]
 800606c:	4b63      	ldr	r3, [pc, #396]	; (80061fc <ScheduleTx+0x1ec>)
 800606e:	3a01      	subs	r2, #1
 8006070:	58eb      	ldr	r3, [r5, r3]
 8006072:	4353      	muls	r3, r2
 8006074:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006076:	e7dd      	b.n	8006034 <ScheduleTx+0x24>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8006078:	485f      	ldr	r0, [pc, #380]	; (80061f8 <ScheduleTx+0x1e8>)
 800607a:	f002 fd86 	bl	8008b8a <LoRaMacSerializerJoinRequest>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800607e:	2711      	movs	r7, #17
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8006080:	2800      	cmp	r0, #0
 8006082:	d1e8      	bne.n	8006056 <ScheduleTx+0x46>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8006084:	7b73      	ldrb	r3, [r6, #13]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8006086:	af0a      	add	r7, sp, #40	; 0x28
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8006088:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800608a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800608c:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800608e:	930a      	str	r3, [sp, #40]	; 0x28
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006090:	0023      	movs	r3, r4
 8006092:	3345      	adds	r3, #69	; 0x45
 8006094:	781b      	ldrb	r3, [r3, #0]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006096:	ad04      	add	r5, sp, #16
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006098:	723b      	strb	r3, [r7, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800609a:	23c4      	movs	r3, #196	; 0xc4
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	5ce3      	ldrb	r3, [r4, r3]
 80060a0:	72bb      	strb	r3, [r7, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80060a2:	f005 fb87 	bl	800b7b4 <SysTimeGetMcuTime>
 80060a6:	0023      	movs	r3, r4
 80060a8:	3395      	adds	r3, #149	; 0x95
 80060aa:	33ff      	adds	r3, #255	; 0xff
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	23c8      	movs	r3, #200	; 0xc8
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	0028      	movs	r0, r5
 80060b8:	58e3      	ldr	r3, [r4, r3]
 80060ba:	9908      	ldr	r1, [sp, #32]
 80060bc:	f005 fb20 	bl	800b700 <SysTimeSub>
 80060c0:	ab0d      	add	r3, sp, #52	; 0x34
 80060c2:	cd06      	ldmia	r5!, {r1, r2}
 80060c4:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80060c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    nextChan.PktLen = MacCtx.PktBufferLen;
 80060c8:	4d4a      	ldr	r5, [pc, #296]	; (80061f4 <ScheduleTx+0x1e4>)
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80060ca:	607b      	str	r3, [r7, #4]
    nextChan.LastTxIsJoinRequest = false;
 80060cc:	2300      	movs	r3, #0
 80060ce:	753b      	strb	r3, [r7, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80060d0:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
 80060d2:	2201      	movs	r2, #1
    nextChan.PktLen = MacCtx.PktBufferLen;
 80060d4:	82fb      	strh	r3, [r7, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80060d6:	23ce      	movs	r3, #206	; 0xce
    nextChan.Joined = true;
 80060d8:	727a      	strb	r2, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	5ce3      	ldrb	r3, [r4, r3]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <ScheduleTx+0xd6>
        nextChan.LastTxIsJoinRequest = true;
 80060e2:	753a      	strb	r2, [r7, #20]
        nextChan.Joined = false;
 80060e4:	727b      	strb	r3, [r7, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80060e6:	0026      	movs	r6, r4
 80060e8:	4b45      	ldr	r3, [pc, #276]	; (8006200 <ScheduleTx+0x1f0>)
 80060ea:	364c      	adds	r6, #76	; 0x4c
 80060ec:	0039      	movs	r1, r7
 80060ee:	7830      	ldrb	r0, [r6, #0]
 80060f0:	4a44      	ldr	r2, [pc, #272]	; (8006204 <ScheduleTx+0x1f4>)
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	4b44      	ldr	r3, [pc, #272]	; (8006208 <ScheduleTx+0x1f8>)
 80060f6:	f002 fee5 	bl	8008ec4 <RegionNextChannel>
 80060fa:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 80060fc:	d019      	beq.n	8006132 <ScheduleTx+0x122>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80060fe:	280b      	cmp	r0, #11
 8006100:	d1a9      	bne.n	8006056 <ScheduleTx+0x46>
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0a6      	beq.n	8006056 <ScheduleTx+0x46>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8006108:	2292      	movs	r2, #146	; 0x92
            return LORAMAC_STATUS_OK;
 800610a:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <ScheduleTx+0x1e4>)
 800610e:	00d2      	lsls	r2, r2, #3
 8006110:	5899      	ldr	r1, [r3, r2]
 8006112:	42b9      	cmp	r1, r7
 8006114:	d09f      	beq.n	8006056 <ScheduleTx+0x46>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8006116:	20d0      	movs	r0, #208	; 0xd0
 8006118:	2220      	movs	r2, #32
 800611a:	0080      	lsls	r0, r0, #2
 800611c:	581c      	ldr	r4, [r3, r0]
 800611e:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8006120:	4c3a      	ldr	r4, [pc, #232]	; (800620c <ScheduleTx+0x1fc>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8006122:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8006124:	0020      	movs	r0, r4
 8006126:	f005 fc6d 	bl	800ba04 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800612a:	0020      	movs	r0, r4
 800612c:	f005 fbc4 	bl	800b8b8 <TimerStart>
 8006130:	e791      	b.n	8006056 <ScheduleTx+0x46>
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8006132:	0023      	movs	r3, r4
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006134:	0022      	movs	r2, r4
 8006136:	0021      	movs	r1, r4
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8006138:	336d      	adds	r3, #109	; 0x6d
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800613a:	3245      	adds	r2, #69	; 0x45
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800613c:	7837      	ldrb	r7, [r6, #0]
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	3181      	adds	r1, #129	; 0x81
 8006144:	7809      	ldrb	r1, [r1, #0]
 8006146:	b25b      	sxtb	r3, r3
 8006148:	b252      	sxtb	r2, r2
 800614a:	0038      	movs	r0, r7
 800614c:	f002 fecd 	bl	8008eea <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006150:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <ScheduleTx+0x200>)
 8006152:	b241      	sxtb	r1, r0
 8006154:	781a      	ldrb	r2, [r3, #0]
 8006156:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <ScheduleTx+0x204>)
 8006158:	0038      	movs	r0, r7
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800615e:	f002 fe1c 	bl	8008d9a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006162:	2174      	movs	r1, #116	; 0x74
 8006164:	4b2a      	ldr	r3, [pc, #168]	; (8006210 <ScheduleTx+0x200>)
 8006166:	7830      	ldrb	r0, [r6, #0]
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <ScheduleTx+0x208>)
 800616c:	5661      	ldrsb	r1, [r4, r1]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006172:	f002 fe12 	bl	8008d9a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006176:	23f3      	movs	r3, #243	; 0xf3
 8006178:	26ee      	movs	r6, #238	; 0xee
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	58ea      	ldr	r2, [r5, r3]
 800617e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006180:	00b6      	lsls	r6, r6, #2
 8006182:	189b      	adds	r3, r3, r2
 8006184:	51ab      	str	r3, [r5, r6]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006186:	23f8      	movs	r3, #248	; 0xf8
 8006188:	20ef      	movs	r0, #239	; 0xef
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	58eb      	ldr	r3, [r5, r3]
 800618e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006190:	0080      	lsls	r0, r0, #2
 8006192:	18c9      	adds	r1, r1, r3
 8006194:	5029      	str	r1, [r5, r0]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006196:	21ce      	movs	r1, #206	; 0xce
 8006198:	0049      	lsls	r1, r1, #1
 800619a:	5c61      	ldrb	r1, [r4, r1]
 800619c:	2900      	cmp	r1, #0
 800619e:	d105      	bne.n	80061ac <ScheduleTx+0x19c>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80061a0:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80061a2:	18ba      	adds	r2, r7, r2
 80061a4:	51aa      	str	r2, [r5, r6]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80061a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80061a8:	18d3      	adds	r3, r2, r3
 80061aa:	502b      	str	r3, [r5, r0]
    size_t macCmdsSize = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	9307      	str	r3, [sp, #28]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80061b0:	4299      	cmp	r1, r3
 80061b2:	d015      	beq.n	80061e0 <ScheduleTx+0x1d0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80061b4:	a807      	add	r0, sp, #28
 80061b6:	f001 ffb1 	bl	800811c <LoRaMacCommandsGetSizeSerializedCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80061ba:	2713      	movs	r7, #19
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80061bc:	2800      	cmp	r0, #0
 80061be:	d000      	beq.n	80061c2 <ScheduleTx+0x1b2>
 80061c0:	e749      	b.n	8006056 <ScheduleTx+0x46>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80061c2:	2045      	movs	r0, #69	; 0x45
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80061c4:	4a0b      	ldr	r2, [pc, #44]	; (80061f4 <ScheduleTx+0x1e4>)
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <ScheduleTx+0x20c>)
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80061c8:	5620      	ldrsb	r0, [r4, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80061ca:	5cd5      	ldrb	r5, [r2, r3]
 80061cc:	9b07      	ldr	r3, [sp, #28]
            return LORAMAC_STATUS_LENGTH_ERROR;
 80061ce:	3f0b      	subs	r7, #11
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80061d0:	b2de      	uxtb	r6, r3
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80061d2:	f7fe ff5d 	bl	8005090 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80061d6:	19ad      	adds	r5, r5, r6
 80061d8:	b280      	uxth	r0, r0
 80061da:	42a8      	cmp	r0, r5
 80061dc:	d200      	bcs.n	80061e0 <ScheduleTx+0x1d0>
 80061de:	e73a      	b.n	8006056 <ScheduleTx+0x46>
    return SendFrameOnChannel( MacCtx.Channel );
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <ScheduleTx+0x1e4>)
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <ScheduleTx+0x210>)
 80061e4:	5cd0      	ldrb	r0, [r2, r3]
 80061e6:	f7ff fe5d 	bl	8005ea4 <SendFrameOnChannel>
 80061ea:	0007      	movs	r7, r0
 80061ec:	e733      	b.n	8006056 <ScheduleTx+0x46>
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	200008d0 	.word	0x200008d0
 80061f4:	200003b8 	.word	0x200003b8
 80061f8:	200004c0 	.word	0x200004c0
 80061fc:	0000041c 	.word	0x0000041c
 8006200:	2000090c 	.word	0x2000090c
 8006204:	200007d3 	.word	0x200007d3
 8006208:	20000848 	.word	0x20000848
 800620c:	20000728 	.word	0x20000728
 8006210:	20000924 	.word	0x20000924
 8006214:	20000778 	.word	0x20000778
 8006218:	2000078c 	.word	0x2000078c
 800621c:	00000237 	.word	0x00000237
 8006220:	0000041b 	.word	0x0000041b

08006224 <OnTxDelayedTimerEvent>:
{
 8006224:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8006226:	4818      	ldr	r0, [pc, #96]	; (8006288 <OnTxDelayedTimerEvent+0x64>)
 8006228:	f005 fbbe 	bl	800b9a8 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800622c:	22d0      	movs	r2, #208	; 0xd0
 800622e:	2320      	movs	r3, #32
 8006230:	4c16      	ldr	r4, [pc, #88]	; (800628c <OnTxDelayedTimerEvent+0x68>)
 8006232:	0092      	lsls	r2, r2, #2
 8006234:	58a1      	ldr	r1, [r4, r2]
 8006236:	4399      	bics	r1, r3
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <OnTxDelayedTimerEvent+0x6c>)
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800623a:	50a1      	str	r1, [r4, r2]
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 800623c:	58e0      	ldr	r0, [r4, r3]
    if( startTimeInMs != 0 )
 800623e:	2800      	cmp	r0, #0
 8006240:	d00a      	beq.n	8006258 <OnTxDelayedTimerEvent+0x34>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8006242:	f005 fbf6 	bl	800ba32 <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8006246:	23fa      	movs	r3, #250	; 0xfa
 8006248:	015b      	lsls	r3, r3, #5
 800624a:	4298      	cmp	r0, r3
 800624c:	d904      	bls.n	8006258 <OnTxDelayedTimerEvent+0x34>
            Nvm.MacGroup1.SrvAckRequested = false;
 800624e:	2200      	movs	r2, #0
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <OnTxDelayedTimerEvent+0x70>)
 8006252:	3346      	adds	r3, #70	; 0x46
 8006254:	701a      	strb	r2, [r3, #0]
}
 8006256:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8006258:	2001      	movs	r0, #1
 800625a:	f7ff fed9 	bl	8006010 <ScheduleTx>
 800625e:	2800      	cmp	r0, #0
 8006260:	d0f9      	beq.n	8006256 <OnTxDelayedTimerEvent+0x32>
 8006262:	280b      	cmp	r0, #11
 8006264:	d0f7      	beq.n	8006256 <OnTxDelayedTimerEvent+0x32>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8006266:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <OnTxDelayedTimerEvent+0x70>)
 800626a:	3345      	adds	r3, #69	; 0x45
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <OnTxDelayedTimerEvent+0x74>)
 8006270:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8006272:	3b2e      	subs	r3, #46	; 0x2e
 8006274:	5ce2      	ldrb	r2, [r4, r3]
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <OnTxDelayedTimerEvent+0x78>)
 8006278:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <OnTxDelayedTimerEvent+0x7c>)
 800627c:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800627e:	f002 f839 	bl	80082f4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8006282:	f7ff fd09 	bl	8005c98 <StopRetransmission.isra.0>
            break;
 8006286:	e7e6      	b.n	8006256 <OnTxDelayedTimerEvent+0x32>
 8006288:	20000728 	.word	0x20000728
 800628c:	200003b8 	.word	0x200003b8
 8006290:	00000494 	.word	0x00000494
 8006294:	200008d0 	.word	0x200008d0
 8006298:	00000446 	.word	0x00000446
 800629c:	00000449 	.word	0x00000449
 80062a0:	00000445 	.word	0x00000445

080062a4 <Send>:
{
 80062a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a6:	b08f      	sub	sp, #60	; 0x3c
 80062a8:	9104      	str	r1, [sp, #16]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80062aa:	21ce      	movs	r1, #206	; 0xce
{
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <Send+0xf4>)
 80062b0:	0016      	movs	r6, r2
 80062b2:	1d9a      	adds	r2, r3, #6
 80062b4:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80062b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
 80062b8:	9003      	str	r0, [sp, #12]
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80062ba:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80062bc:	0049      	lsls	r1, r1, #1
 80062be:	5c59      	ldrb	r1, [r3, r1]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80062c0:	2007      	movs	r0, #7
 80062c2:	ba6c      	rev16	r4, r5
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d059      	beq.n	800637c <Send+0xd8>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80062c8:	2188      	movs	r1, #136	; 0x88
 80062ca:	31ff      	adds	r1, #255	; 0xff
 80062cc:	5c59      	ldrb	r1, [r3, r1]
 80062ce:	2900      	cmp	r1, #0
 80062d0:	d100      	bne.n	80062d4 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80062d2:	63d9      	str	r1, [r3, #60]	; 0x3c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80062d4:	21c3      	movs	r1, #195	; 0xc3
 80062d6:	4830      	ldr	r0, [pc, #192]	; (8006398 <Send+0xf4>)
 80062d8:	0049      	lsls	r1, r1, #1
 80062da:	5c41      	ldrb	r1, [r0, r1]
    fCtrl.Value = 0;
 80062dc:	ab07      	add	r3, sp, #28
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80062de:	01cf      	lsls	r7, r1, #7
 80062e0:	701f      	strb	r7, [r3, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80062e2:	27c2      	movs	r7, #194	; 0xc2
 80062e4:	007f      	lsls	r7, r7, #1
 80062e6:	5dc0      	ldrb	r0, [r0, r7]
 80062e8:	2801      	cmp	r0, #1
 80062ea:	d103      	bne.n	80062f4 <Send+0x50>
        fCtrl.Bits.FPending      = 1;
 80062ec:	781f      	ldrb	r7, [r3, #0]
 80062ee:	300f      	adds	r0, #15
 80062f0:	4338      	orrs	r0, r7
 80062f2:	7018      	strb	r0, [r3, #0]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80062f4:	4b28      	ldr	r3, [pc, #160]	; (8006398 <Send+0xf4>)
 80062f6:	3346      	adds	r3, #70	; 0x46
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <Send+0x64>
        fCtrl.Bits.Ack = 1;
 80062fe:	2320      	movs	r3, #32
 8006300:	a807      	add	r0, sp, #28
 8006302:	7807      	ldrb	r7, [r0, #0]
 8006304:	433b      	orrs	r3, r7
 8006306:	7003      	strb	r3, [r0, #0]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006308:	23ff      	movs	r3, #255	; 0xff
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800630a:	920a      	str	r2, [sp, #40]	; 0x28
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800630c:	4a23      	ldr	r2, [pc, #140]	; (800639c <Send+0xf8>)
    adrNext.UpdateChanMask = true;
 800630e:	a809      	add	r0, sp, #36	; 0x24
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006310:	009b      	lsls	r3, r3, #2
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006312:	8184      	strh	r4, [r0, #12]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006314:	58d3      	ldr	r3, [r2, r3]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006316:	4c20      	ldr	r4, [pc, #128]	; (8006398 <Send+0xf4>)
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006318:	930b      	str	r3, [sp, #44]	; 0x2c
    adrNext.UpdateChanMask = true;
 800631a:	2701      	movs	r7, #1
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800631c:	0023      	movs	r3, r4
    adrNext.UpdateChanMask = true;
 800631e:	7007      	strb	r7, [r0, #0]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8006320:	7041      	strb	r1, [r0, #1]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006322:	336c      	adds	r3, #108	; 0x6c
 8006324:	781a      	ldrb	r2, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8006326:	491e      	ldr	r1, [pc, #120]	; (80063a0 <Send+0xfc>)
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006328:	7382      	strb	r2, [r0, #14]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800632a:	0022      	movs	r2, r4
 800632c:	3280      	adds	r2, #128	; 0x80
 800632e:	7812      	ldrb	r2, [r2, #0]
 8006330:	73c2      	strb	r2, [r0, #15]
    adrNext.Region = Nvm.MacGroup2.Region;
 8006332:	0022      	movs	r2, r4
 8006334:	324c      	adds	r2, #76	; 0x4c
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	7402      	strb	r2, [r0, #16]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800633a:	aa08      	add	r2, sp, #32
 800633c:	9200      	str	r2, [sp, #0]
 800633e:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <Send+0x100>)
 8006340:	f001 fdac 	bl	8007e9c <LoRaMacAdrCalcNext>
 8006344:	ab04      	add	r3, sp, #16
 8006346:	4038      	ands	r0, r7
 8006348:	7b1f      	ldrb	r7, [r3, #12]
 800634a:	2340      	movs	r3, #64	; 0x40
 800634c:	0180      	lsls	r0, r0, #6
 800634e:	439f      	bics	r7, r3
 8006350:	4307      	orrs	r7, r0
 8006352:	ab04      	add	r3, sp, #16
 8006354:	731f      	strb	r7, [r3, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	9a04      	ldr	r2, [sp, #16]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	9803      	ldr	r0, [sp, #12]
 800635e:	0033      	movs	r3, r6
 8006360:	a907      	add	r1, sp, #28
 8006362:	f7ff fcdf 	bl	8005d24 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8006366:	2800      	cmp	r0, #0
 8006368:	d001      	beq.n	800636e <Send+0xca>
 800636a:	280a      	cmp	r0, #10
 800636c:	d104      	bne.n	8006378 <Send+0xd4>
        status = ScheduleTx( false );
 800636e:	2000      	movs	r0, #0
 8006370:	f7ff fe4e 	bl	8006010 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8006374:	2800      	cmp	r0, #0
 8006376:	d003      	beq.n	8006380 <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8006378:	3406      	adds	r4, #6
 800637a:	87e5      	strh	r5, [r4, #62]	; 0x3e
}
 800637c:	b00f      	add	sp, #60	; 0x3c
 800637e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Nvm.MacGroup1.SrvAckRequested = false;
 8006380:	0023      	movs	r3, r4
 8006382:	3346      	adds	r3, #70	; 0x46
 8006384:	7018      	strb	r0, [r3, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8006386:	9b08      	ldr	r3, [sp, #32]
 8006388:	6363      	str	r3, [r4, #52]	; 0x34
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800638a:	f001 fe9f 	bl	80080cc <LoRaMacCommandsRemoveNoneStickyCmds>
 800638e:	2800      	cmp	r0, #0
 8006390:	d0f4      	beq.n	800637c <Send+0xd8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006392:	2013      	movs	r0, #19
 8006394:	e7f2      	b.n	800637c <Send+0xd8>
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	200008d0 	.word	0x200008d0
 800639c:	200003b8 	.word	0x200003b8
 80063a0:	20000915 	.word	0x20000915
 80063a4:	20000914 	.word	0x20000914

080063a8 <SendReJoinReq>:
{
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	0005      	movs	r5, r0
    bool allowDelayedTx = true;
 80063ac:	2001      	movs	r0, #1
    switch( joinReqType )
 80063ae:	2dff      	cmp	r5, #255	; 0xff
 80063b0:	d11c      	bne.n	80063ec <SendReJoinReq+0x44>
            SwitchClass( CLASS_A );
 80063b2:	2000      	movs	r0, #0
 80063b4:	f7fe ff6a 	bl	800528c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <SendReJoinReq+0x4c>)
 80063ba:	2400      	movs	r4, #0
 80063bc:	001a      	movs	r2, r3
 80063be:	32ff      	adds	r2, #255	; 0xff
 80063c0:	7154      	strb	r4, [r2, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80063c2:	001a      	movs	r2, r3
 80063c4:	490c      	ldr	r1, [pc, #48]	; (80063f8 <SendReJoinReq+0x50>)
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80063c6:	33fe      	adds	r3, #254	; 0xfe
 80063c8:	81dd      	strh	r5, [r3, #14]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80063ca:	32fc      	adds	r2, #252	; 0xfc
 80063cc:	60d1      	str	r1, [r2, #12]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80063ce:	f005 f8f5 	bl	800b5bc <SecureElementGetJoinEui>
 80063d2:	2208      	movs	r2, #8
 80063d4:	0001      	movs	r1, r0
 80063d6:	4809      	ldr	r0, [pc, #36]	; (80063fc <SendReJoinReq+0x54>)
 80063d8:	f7fe fabb 	bl	8004952 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80063dc:	f005 f8d8 	bl	800b590 <SecureElementGetDevEui>
 80063e0:	2208      	movs	r2, #8
 80063e2:	0001      	movs	r1, r0
 80063e4:	4806      	ldr	r0, [pc, #24]	; (8006400 <SendReJoinReq+0x58>)
 80063e6:	f7fe fab4 	bl	8004952 <memcpy1>
            allowDelayedTx = false;
 80063ea:	0020      	movs	r0, r4
    status = ScheduleTx( allowDelayedTx );
 80063ec:	f7ff fe10 	bl	8006010 <ScheduleTx>
}
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	200003b8 	.word	0x200003b8
 80063f8:	200003ba 	.word	0x200003ba
 80063fc:	200004c6 	.word	0x200004c6
 8006400:	200004ce 	.word	0x200004ce

08006404 <SetTxContinuousWave>:
{
 8006404:	0003      	movs	r3, r0
 8006406:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8006408:	b251      	sxtb	r1, r2
 800640a:	4a07      	ldr	r2, [pc, #28]	; (8006428 <SetTxContinuousWave+0x24>)
{
 800640c:	b510      	push	{r4, lr}
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800640e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8006410:	001a      	movs	r2, r3
 8006412:	47a0      	blx	r4
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8006414:	22d0      	movs	r2, #208	; 0xd0
 8006416:	2302      	movs	r3, #2
 8006418:	4904      	ldr	r1, [pc, #16]	; (800642c <SetTxContinuousWave+0x28>)
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	5888      	ldr	r0, [r1, r2]
 800641e:	4303      	orrs	r3, r0
 8006420:	508b      	str	r3, [r1, r2]
}
 8006422:	2000      	movs	r0, #0
 8006424:	bd10      	pop	{r4, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	0801abc8 	.word	0x0801abc8
 800642c:	200003b8 	.word	0x200003b8

08006430 <DetermineFrameType>:
{
 8006430:	0003      	movs	r3, r0
 8006432:	b510      	push	{r4, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006434:	2003      	movs	r0, #3
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <DetermineFrameType+0x26>
 800643a:	2900      	cmp	r1, #0
 800643c:	d00b      	beq.n	8006456 <DetermineFrameType+0x26>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800643e:	7b1c      	ldrb	r4, [r3, #12]
 8006440:	300c      	adds	r0, #12
 8006442:	0022      	movs	r2, r4
 8006444:	4002      	ands	r2, r0
 8006446:	4204      	tst	r4, r0
 8006448:	d006      	beq.n	8006458 <DetermineFrameType+0x28>
 800644a:	1c58      	adds	r0, r3, #1
 800644c:	7fc0      	ldrb	r0, [r0, #31]
 800644e:	2800      	cmp	r0, #0
 8006450:	d002      	beq.n	8006458 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_A;
 8006452:	2000      	movs	r0, #0
 8006454:	7008      	strb	r0, [r1, #0]
}
 8006456:	bd10      	pop	{r4, pc}
    else if( macMsg->FRMPayloadSize == 0 )
 8006458:	0018      	movs	r0, r3
 800645a:	3028      	adds	r0, #40	; 0x28
 800645c:	7800      	ldrb	r0, [r0, #0]
 800645e:	2800      	cmp	r0, #0
 8006460:	d102      	bne.n	8006468 <DetermineFrameType+0x38>
        *fType = FRAME_TYPE_B;
 8006462:	2301      	movs	r3, #1
        *fType = FRAME_TYPE_C;
 8006464:	700b      	strb	r3, [r1, #0]
 8006466:	e7f6      	b.n	8006456 <DetermineFrameType+0x26>
        return LORAMAC_STATUS_ERROR;
 8006468:	2017      	movs	r0, #23
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800646a:	2a00      	cmp	r2, #0
 800646c:	d1f3      	bne.n	8006456 <DetermineFrameType+0x26>
 800646e:	3301      	adds	r3, #1
 8006470:	7fd8      	ldrb	r0, [r3, #31]
 8006472:	2800      	cmp	r0, #0
 8006474:	d101      	bne.n	800647a <DetermineFrameType+0x4a>
        *fType = FRAME_TYPE_C;
 8006476:	2302      	movs	r3, #2
 8006478:	e7f4      	b.n	8006464 <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_D;
 800647a:	2303      	movs	r3, #3
    return LORAMAC_STATUS_OK;
 800647c:	0010      	movs	r0, r2
        *fType = FRAME_TYPE_D;
 800647e:	700b      	strb	r3, [r1, #0]
 8006480:	e7e9      	b.n	8006456 <DetermineFrameType+0x26>
	...

08006484 <LoRaMacProcess>:
{
 8006484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006486:	b0ab      	sub	sp, #172	; 0xac
    CRITICAL_SECTION_BEGIN( );
 8006488:	a80a      	add	r0, sp, #40	; 0x28
 800648a:	f7fd fcc1 	bl	8003e10 <BoardCriticalSectionBegin>
    LoRaMacRadioEvents.Value = 0;
 800648e:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 8006490:	4bdf      	ldr	r3, [pc, #892]	; (8006810 <LoRaMacProcess+0x38c>)
    CRITICAL_SECTION_END( );
 8006492:	a80a      	add	r0, sp, #40	; 0x28
    events = LoRaMacRadioEvents;
 8006494:	681c      	ldr	r4, [r3, #0]
    LoRaMacRadioEvents.Value = 0;
 8006496:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 8006498:	f7fd fcbf 	bl	8003e1a <BoardCriticalSectionEnd>
    if( events.Value != 0 )
 800649c:	2c00      	cmp	r4, #0
 800649e:	d100      	bne.n	80064a2 <LoRaMacProcess+0x1e>
 80064a0:	e0e7      	b.n	8006672 <LoRaMacProcess+0x1ee>
        if( events.Events.TxDone == 1 )
 80064a2:	b2e3      	uxtb	r3, r4
 80064a4:	9305      	str	r3, [sp, #20]
 80064a6:	06a3      	lsls	r3, r4, #26
 80064a8:	d563      	bpl.n	8006572 <LoRaMacProcess+0xee>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80064aa:	23c2      	movs	r3, #194	; 0xc2
 80064ac:	4dd9      	ldr	r5, [pc, #868]	; (8006814 <LoRaMacProcess+0x390>)
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	5ceb      	ldrb	r3, [r5, r3]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d003      	beq.n	80064be <LoRaMacProcess+0x3a>
        Radio.Sleep( );
 80064b6:	4bd8      	ldr	r3, [pc, #864]	; (8006818 <LoRaMacProcess+0x394>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	9303      	str	r3, [sp, #12]
 80064bc:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80064be:	23ee      	movs	r3, #238	; 0xee
 80064c0:	4cd6      	ldr	r4, [pc, #856]	; (800681c <LoRaMacProcess+0x398>)
 80064c2:	4ed7      	ldr	r6, [pc, #860]	; (8006820 <LoRaMacProcess+0x39c>)
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	58e1      	ldr	r1, [r4, r3]
 80064c8:	0030      	movs	r0, r6
 80064ca:	f005 fa9b 	bl	800ba04 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80064ce:	0030      	movs	r0, r6
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80064d0:	26ef      	movs	r6, #239	; 0xef
    TimerStart( &MacCtx.RxWindowTimer1 );
 80064d2:	f005 f9f1 	bl	800b8b8 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80064d6:	4fd3      	ldr	r7, [pc, #844]	; (8006824 <LoRaMacProcess+0x3a0>)
 80064d8:	00b6      	lsls	r6, r6, #2
 80064da:	0038      	movs	r0, r7
 80064dc:	59a1      	ldr	r1, [r4, r6]
 80064de:	f005 fa91 	bl	800ba04 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80064e2:	0038      	movs	r0, r7
 80064e4:	f005 f9e8 	bl	800b8b8 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 80064e8:	4bcf      	ldr	r3, [pc, #828]	; (8006828 <LoRaMacProcess+0x3a4>)
 80064ea:	5ce3      	ldrb	r3, [r4, r3]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d100      	bne.n	80064f2 <LoRaMacProcess+0x6e>
 80064f0:	e212      	b.n	8006918 <LoRaMacProcess+0x494>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 80064f2:	2314      	movs	r3, #20
 80064f4:	a914      	add	r1, sp, #80	; 0x50
 80064f6:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064f8:	002b      	movs	r3, r5
 80064fa:	334c      	adds	r3, #76	; 0x4c
 80064fc:	7818      	ldrb	r0, [r3, #0]
 80064fe:	f002 fbf1 	bl	8008ce4 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8006502:	59a1      	ldr	r1, [r4, r6]
 8006504:	4cc9      	ldr	r4, [pc, #804]	; (800682c <LoRaMacProcess+0x3a8>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006506:	9011      	str	r0, [sp, #68]	; 0x44
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8006508:	1809      	adds	r1, r1, r0
 800650a:	0020      	movs	r0, r4
 800650c:	f005 fa7a 	bl	800ba04 <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8006510:	0020      	movs	r0, r4
 8006512:	f005 f9d1 	bl	800b8b8 <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8006516:	4bc6      	ldr	r3, [pc, #792]	; (8006830 <LoRaMacProcess+0x3ac>)
    txDone.Channel = MacCtx.Channel;
 8006518:	4fc0      	ldr	r7, [pc, #768]	; (800681c <LoRaMacProcess+0x398>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800651a:	681b      	ldr	r3, [r3, #0]
    txDone.Channel = MacCtx.Channel;
 800651c:	4ac5      	ldr	r2, [pc, #788]	; (8006834 <LoRaMacProcess+0x3b0>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800651e:	63ab      	str	r3, [r5, #56]	; 0x38
    txDone.Channel = MacCtx.Channel;
 8006520:	5cba      	ldrb	r2, [r7, r2]
 8006522:	ac1e      	add	r4, sp, #120	; 0x78
 8006524:	7022      	strb	r2, [r4, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006526:	a80f      	add	r0, sp, #60	; 0x3c
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8006528:	6063      	str	r3, [r4, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800652a:	f005 f943 	bl	800b7b4 <SysTimeGetMcuTime>
 800652e:	002b      	movs	r3, r5
 8006530:	3395      	adds	r3, #149	; 0x95
 8006532:	33ff      	adds	r3, #255	; 0xff
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	ae08      	add	r6, sp, #32
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	23c8      	movs	r3, #200	; 0xc8
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	0030      	movs	r0, r6
 8006540:	58eb      	ldr	r3, [r5, r3]
 8006542:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006546:	f005 f8db 	bl	800b700 <SysTimeSub>
 800654a:	ab21      	add	r3, sp, #132	; 0x84
 800654c:	ce06      	ldmia	r6!, {r1, r2}
 800654e:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8006550:	4bb9      	ldr	r3, [pc, #740]	; (8006838 <LoRaMacProcess+0x3b4>)
 8006552:	58fb      	ldr	r3, [r7, r3]
 8006554:	60a3      	str	r3, [r4, #8]
    txDone.Joined  = true;
 8006556:	2301      	movs	r3, #1
 8006558:	7063      	strb	r3, [r4, #1]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800655a:	339c      	adds	r3, #156	; 0x9c
 800655c:	33ff      	adds	r3, #255	; 0xff
 800655e:	5ceb      	ldrb	r3, [r5, r3]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d100      	bne.n	8006566 <LoRaMacProcess+0xe2>
        txDone.Joined  = false;
 8006564:	7063      	strb	r3, [r4, #1]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8006566:	4bab      	ldr	r3, [pc, #684]	; (8006814 <LoRaMacProcess+0x390>)
 8006568:	0021      	movs	r1, r4
 800656a:	334c      	adds	r3, #76	; 0x4c
 800656c:	7818      	ldrb	r0, [r3, #0]
 800656e:	f002 fbcb 	bl	8008d08 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
 8006572:	9b05      	ldr	r3, [sp, #20]
 8006574:	06db      	lsls	r3, r3, #27
 8006576:	d54d      	bpl.n	8006614 <LoRaMacProcess+0x190>
    uint8_t *payload = RxDoneParams.Payload;
 8006578:	4bb0      	ldr	r3, [pc, #704]	; (800683c <LoRaMacProcess+0x3b8>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800657a:	4da6      	ldr	r5, [pc, #664]	; (8006814 <LoRaMacProcess+0x390>)
    uint8_t *payload = RxDoneParams.Payload;
 800657c:	685a      	ldr	r2, [r3, #4]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800657e:	2001      	movs	r0, #1
    uint8_t *payload = RxDoneParams.Payload;
 8006580:	9203      	str	r2, [sp, #12]
    int16_t rssi = RxDoneParams.Rssi;
 8006582:	220a      	movs	r2, #10
 8006584:	5e9e      	ldrsh	r6, [r3, r2]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8006586:	002a      	movs	r2, r5
 8006588:	32d0      	adds	r2, #208	; 0xd0
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800658a:	49a1      	ldr	r1, [pc, #644]	; (8006810 <LoRaMacProcess+0x38c>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800658c:	6812      	ldr	r2, [r2, #0]
    uint16_t size = RxDoneParams.Size;
 800658e:	891f      	ldrh	r7, [r3, #8]
    int8_t snr = RxDoneParams.Snr;
 8006590:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8006592:	9207      	str	r2, [sp, #28]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8006594:	780a      	ldrb	r2, [r1, #0]
    int8_t snr = RxDoneParams.Snr;
 8006596:	b25b      	sxtb	r3, r3
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8006598:	4382      	bics	r2, r0
 800659a:	700a      	strb	r2, [r1, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800659c:	2289      	movs	r2, #137	; 0x89
    int8_t snr = RxDoneParams.Snr;
 800659e:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 80065a0:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 80065a2:	4c9e      	ldr	r4, [pc, #632]	; (800681c <LoRaMacProcess+0x398>)
 80065a4:	00d2      	lsls	r2, r2, #3
 80065a6:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 80065a8:	4aa5      	ldr	r2, [pc, #660]	; (8006840 <LoRaMacProcess+0x3bc>)
    MacCtx.McpsIndication.Snr = snr;
 80065aa:	9904      	ldr	r1, [sp, #16]
    MacCtx.McpsIndication.Rssi = rssi;
 80065ac:	52a6      	strh	r6, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 80065ae:	3202      	adds	r2, #2
 80065b0:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80065b2:	4aa4      	ldr	r2, [pc, #656]	; (8006844 <LoRaMacProcess+0x3c0>)
    uint32_t downLinkCounter = 0;
 80065b4:	930c      	str	r3, [sp, #48]	; 0x30
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80065b6:	5ca2      	ldrb	r2, [r4, r2]
 80065b8:	49a3      	ldr	r1, [pc, #652]	; (8006848 <LoRaMacProcess+0x3c4>)
 80065ba:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 80065bc:	4aa3      	ldr	r2, [pc, #652]	; (800684c <LoRaMacProcess+0x3c8>)
 80065be:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 80065c0:	4aa3      	ldr	r2, [pc, #652]	; (8006850 <LoRaMacProcess+0x3cc>)
 80065c2:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 80065c4:	3203      	adds	r2, #3
 80065c6:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 80065c8:	4aa2      	ldr	r2, [pc, #648]	; (8006854 <LoRaMacProcess+0x3d0>)
 80065ca:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80065cc:	4aa2      	ldr	r2, [pc, #648]	; (8006858 <LoRaMacProcess+0x3d4>)
 80065ce:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80065d0:	4aa2      	ldr	r2, [pc, #648]	; (800685c <LoRaMacProcess+0x3d8>)
 80065d2:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80065d4:	3a14      	subs	r2, #20
 80065d6:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 80065d8:	3218      	adds	r2, #24
 80065da:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80065dc:	4aa0      	ldr	r2, [pc, #640]	; (8006860 <LoRaMacProcess+0x3dc>)
 80065de:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.ResponseTimeout = 0;
 80065e0:	3204      	adds	r2, #4
 80065e2:	50a3      	str	r3, [r4, r2]
    Radio.Sleep( );
 80065e4:	4b8c      	ldr	r3, [pc, #560]	; (8006818 <LoRaMacProcess+0x394>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	9306      	str	r3, [sp, #24]
 80065ea:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 80065ec:	4996      	ldr	r1, [pc, #600]	; (8006848 <LoRaMacProcess+0x3c4>)
 80065ee:	5c63      	ldrb	r3, [r4, r1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <LoRaMacProcess+0x176>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80065f4:	488b      	ldr	r0, [pc, #556]	; (8006824 <LoRaMacProcess+0x3a0>)
 80065f6:	f005 f9d7 	bl	800b9a8 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80065fa:	0039      	movs	r1, r7
 80065fc:	9803      	ldr	r0, [sp, #12]
 80065fe:	f001 fcbb 	bl	8007f78 <LoRaMacClassBRxBeacon>
 8006602:	9006      	str	r0, [sp, #24]
 8006604:	2800      	cmp	r0, #0
 8006606:	d100      	bne.n	800660a <LoRaMacProcess+0x186>
 8006608:	e189      	b.n	800691e <LoRaMacProcess+0x49a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800660a:	4b96      	ldr	r3, [pc, #600]	; (8006864 <LoRaMacProcess+0x3e0>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800660c:	9a04      	ldr	r2, [sp, #16]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800660e:	52e6      	strh	r6, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8006610:	3302      	adds	r3, #2
 8006612:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8006614:	9b05      	ldr	r3, [sp, #20]
 8006616:	071b      	lsls	r3, r3, #28
 8006618:	d51d      	bpl.n	8006656 <LoRaMacProcess+0x1d2>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800661a:	23c2      	movs	r3, #194	; 0xc2
 800661c:	4a7d      	ldr	r2, [pc, #500]	; (8006814 <LoRaMacProcess+0x390>)
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	5cd3      	ldrb	r3, [r2, r3]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d003      	beq.n	800662e <LoRaMacProcess+0x1aa>
        Radio.Sleep( );
 8006626:	4b7c      	ldr	r3, [pc, #496]	; (8006818 <LoRaMacProcess+0x394>)
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	9303      	str	r3, [sp, #12]
 800662c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800662e:	f7fe fd1d 	bl	800506c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8006632:	2002      	movs	r0, #2
 8006634:	4c79      	ldr	r4, [pc, #484]	; (800681c <LoRaMacProcess+0x398>)
 8006636:	4b8c      	ldr	r3, [pc, #560]	; (8006868 <LoRaMacProcess+0x3e4>)
 8006638:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800663a:	f001 fe5b 	bl	80082f4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800663e:	4b7a      	ldr	r3, [pc, #488]	; (8006828 <LoRaMacProcess+0x3a4>)
 8006640:	5ce3      	ldrb	r3, [r4, r3]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <LoRaMacProcess+0x1c8>
        MacCtx.RetransmitTimeoutRetry = true;
 8006646:	2201      	movs	r2, #1
 8006648:	4b88      	ldr	r3, [pc, #544]	; (800686c <LoRaMacProcess+0x3e8>)
 800664a:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800664c:	2320      	movs	r3, #32
 800664e:	4a88      	ldr	r2, [pc, #544]	; (8006870 <LoRaMacProcess+0x3ec>)
 8006650:	5ca1      	ldrb	r1, [r4, r2]
 8006652:	430b      	orrs	r3, r1
 8006654:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxError == 1 )
 8006656:	9b05      	ldr	r3, [sp, #20]
 8006658:	075b      	lsls	r3, r3, #29
 800665a:	d503      	bpl.n	8006664 <LoRaMacProcess+0x1e0>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800665c:	2106      	movs	r1, #6
 800665e:	2005      	movs	r0, #5
 8006660:	f7fe fd66 	bl	8005130 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	079b      	lsls	r3, r3, #30
 8006668:	d503      	bpl.n	8006672 <LoRaMacProcess+0x1ee>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800666a:	2104      	movs	r1, #4
 800666c:	2003      	movs	r0, #3
 800666e:	f7fe fd5f 	bl	8005130 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8006672:	f001 fc9f 	bl	8007fb4 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8006676:	4d7e      	ldr	r5, [pc, #504]	; (8006870 <LoRaMacProcess+0x3ec>)
 8006678:	4c68      	ldr	r4, [pc, #416]	; (800681c <LoRaMacProcess+0x398>)
 800667a:	5d62      	ldrb	r2, [r4, r5]
 800667c:	0693      	lsls	r3, r2, #26
 800667e:	d56f      	bpl.n	8006760 <LoRaMacProcess+0x2dc>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8006680:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 8006682:	2300      	movs	r3, #0
 8006684:	4f7b      	ldr	r7, [pc, #492]	; (8006874 <LoRaMacProcess+0x3f0>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8006686:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8006688:	55e3      	strb	r3, [r4, r7]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800668a:	5863      	ldr	r3, [r4, r1]
 800668c:	0618      	lsls	r0, r3, #24
 800668e:	d502      	bpl.n	8006696 <LoRaMacProcess+0x212>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006690:	2082      	movs	r0, #130	; 0x82
 8006692:	4383      	bics	r3, r0
 8006694:	5063      	str	r3, [r4, r1]
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
    }
}
static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8006696:	2305      	movs	r3, #5
 8006698:	421a      	tst	r2, r3
 800669a:	d100      	bne.n	800669e <LoRaMacProcess+0x21a>
 800669c:	e3db      	b.n	8006e56 <LoRaMacProcess+0x9d2>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800669e:	200b      	movs	r0, #11
 80066a0:	f001 fe46 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d100      	bne.n	80066aa <LoRaMacProcess+0x226>
 80066a8:	e3d5      	b.n	8006e56 <LoRaMacProcess+0x9d2>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80066aa:	5d63      	ldrb	r3, [r4, r5]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80066ac:	07da      	lsls	r2, r3, #31
 80066ae:	d500      	bpl.n	80066b2 <LoRaMacProcess+0x22e>
 80066b0:	e3d1      	b.n	8006e56 <LoRaMacProcess+0x9d2>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80066b2:	075b      	lsls	r3, r3, #29
 80066b4:	d401      	bmi.n	80066ba <LoRaMacProcess+0x236>
 80066b6:	f000 fbea 	bl	8006e8e <LoRaMacProcess+0xa0a>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80066ba:	22d0      	movs	r2, #208	; 0xd0
 80066bc:	2302      	movs	r3, #2
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	58a1      	ldr	r1, [r4, r2]
 80066c2:	4399      	bics	r1, r3
 80066c4:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 80066c6:	23d0      	movs	r3, #208	; 0xd0
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	58e3      	ldr	r3, [r4, r3]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d141      	bne.n	8006754 <LoRaMacProcess+0x2d0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80066d0:	5d66      	ldrb	r6, [r4, r5]
 80066d2:	3301      	adds	r3, #1
 80066d4:	0031      	movs	r1, r6
 80066d6:	4019      	ands	r1, r3
 80066d8:	421e      	tst	r6, r3
 80066da:	d002      	beq.n	80066e2 <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80066dc:	0032      	movs	r2, r6
 80066de:	439a      	bics	r2, r3
 80066e0:	5562      	strb	r2, [r4, r5]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80066e2:	2204      	movs	r2, #4
 80066e4:	5d63      	ldrb	r3, [r4, r5]
 80066e6:	4213      	tst	r3, r2
 80066e8:	d001      	beq.n	80066ee <LoRaMacProcess+0x26a>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80066ea:	4393      	bics	r3, r2
 80066ec:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 80066ee:	2301      	movs	r3, #1
 80066f0:	55e3      	strb	r3, [r4, r7]
        if( reqEvents.Bits.McpsReq == 1 )
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d005      	beq.n	8006702 <LoRaMacProcess+0x27e>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80066f6:	23d1      	movs	r3, #209	; 0xd1
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	58e3      	ldr	r3, [r4, r3]
 80066fc:	485e      	ldr	r0, [pc, #376]	; (8006878 <LoRaMacProcess+0x3f4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8006702:	2304      	movs	r3, #4
 8006704:	421e      	tst	r6, r3
 8006706:	d00a      	beq.n	800671e <LoRaMacProcess+0x29a>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8006708:	485c      	ldr	r0, [pc, #368]	; (800687c <LoRaMacProcess+0x3f8>)
 800670a:	f001 fe1d 	bl	8008348 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800670e:	f001 fe47 	bl	80083a0 <LoRaMacConfirmQueueGetCnt>
 8006712:	2800      	cmp	r0, #0
 8006714:	d003      	beq.n	800671e <LoRaMacProcess+0x29a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8006716:	2204      	movs	r2, #4
 8006718:	5d63      	ldrb	r3, [r4, r5]
 800671a:	4313      	orrs	r3, r2
 800671c:	5563      	strb	r3, [r4, r5]
        LoRaMacClassBResumeBeaconing( );
 800671e:	f001 fc37 	bl	8007f90 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8006722:	2220      	movs	r2, #32
 8006724:	5d63      	ldrb	r3, [r4, r5]
 8006726:	4393      	bics	r3, r2
 8006728:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800672a:	23d0      	movs	r3, #208	; 0xd0
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	58e3      	ldr	r3, [r4, r3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <LoRaMacProcess+0x2d0>
        bool isStickyMacCommandPending = false;
 8006734:	2660      	movs	r6, #96	; 0x60
 8006736:	aa06      	add	r2, sp, #24
 8006738:	1992      	adds	r2, r2, r6
 800673a:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800673c:	a81e      	add	r0, sp, #120	; 0x78
 800673e:	f001 fd2d 	bl	800819c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8006742:	ab06      	add	r3, sp, #24
 8006744:	199b      	adds	r3, r3, r6
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <LoRaMacProcess+0x2d0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800674c:	2310      	movs	r3, #16
 800674e:	5d62      	ldrb	r2, [r4, r5]
 8006750:	4313      	orrs	r3, r2
 8006752:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 8006754:	2301      	movs	r3, #1
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8006756:	5d62      	ldrb	r2, [r4, r5]
    MacCtx.AllowRequests = requestState;
 8006758:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800675a:	333f      	adds	r3, #63	; 0x3f
 800675c:	4313      	orrs	r3, r2
 800675e:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8006760:	2208      	movs	r2, #8
 8006762:	5d63      	ldrb	r3, [r4, r5]
 8006764:	4213      	tst	r3, r2
 8006766:	d007      	beq.n	8006778 <LoRaMacProcess+0x2f4>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8006768:	4393      	bics	r3, r2
 800676a:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800676c:	23d1      	movs	r3, #209	; 0xd1
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	58e3      	ldr	r3, [r4, r3]
 8006772:	4843      	ldr	r0, [pc, #268]	; (8006880 <LoRaMacProcess+0x3fc>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8006778:	2610      	movs	r6, #16
 800677a:	5d63      	ldrb	r3, [r4, r5]
 800677c:	4233      	tst	r3, r6
 800677e:	d00a      	beq.n	8006796 <LoRaMacProcess+0x312>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006780:	2306      	movs	r3, #6
 8006782:	a81e      	add	r0, sp, #120	; 0x78
 8006784:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8006786:	23d1      	movs	r3, #209	; 0xd1
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	58e3      	ldr	r3, [r4, r3]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8006790:	5d63      	ldrb	r3, [r4, r5]
 8006792:	43b3      	bics	r3, r6
 8006794:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006796:	2202      	movs	r2, #2
 8006798:	5d63      	ldrb	r3, [r4, r5]
 800679a:	4213      	tst	r3, r2
 800679c:	d007      	beq.n	80067ae <LoRaMacProcess+0x32a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800679e:	4393      	bics	r3, r2
 80067a0:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80067a2:	23d1      	movs	r3, #209	; 0xd1
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	58e3      	ldr	r3, [r4, r3]
 80067a8:	4836      	ldr	r0, [pc, #216]	; (8006884 <LoRaMacProcess+0x400>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80067ae:	4b25      	ldr	r3, [pc, #148]	; (8006844 <LoRaMacProcess+0x3c0>)
 80067b0:	5ce3      	ldrb	r3, [r4, r3]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d101      	bne.n	80067ba <LoRaMacProcess+0x336>
        OpenContinuousRxCWindow( );
 80067b6:	f7fe fd29 	bl	800520c <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	5d63      	ldrb	r3, [r4, r5]
 80067be:	4213      	tst	r3, r2
 80067c0:	d100      	bne.n	80067c4 <LoRaMacProcess+0x340>
 80067c2:	e0a7      	b.n	8006914 <LoRaMacProcess+0x490>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80067c4:	4393      	bics	r3, r2
 80067c6:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState != LORAMAC_IDLE )
 80067c8:	23d0      	movs	r3, #208	; 0xd0
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	58e5      	ldr	r5, [r4, r3]
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	d000      	beq.n	80067d4 <LoRaMacProcess+0x350>
 80067d2:	e09f      	b.n	8006914 <LoRaMacProcess+0x490>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80067d4:	4e0f      	ldr	r6, [pc, #60]	; (8006814 <LoRaMacProcess+0x390>)
 80067d6:	2130      	movs	r1, #48	; 0x30
 80067d8:	0030      	movs	r0, r6
 80067da:	f7fe f8d3 	bl	8004984 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80067de:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80067e0:	4298      	cmp	r0, r3
 80067e2:	d001      	beq.n	80067e8 <LoRaMacProcess+0x364>
        nvmData->Crypto.Crc32 = crc;
 80067e4:	6330      	str	r0, [r6, #48]	; 0x30
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80067e6:	3501      	adds	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80067e8:	2114      	movs	r1, #20
 80067ea:	4827      	ldr	r0, [pc, #156]	; (8006888 <LoRaMacProcess+0x404>)
 80067ec:	f7fe f8ca 	bl	8004984 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 80067f0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80067f2:	4298      	cmp	r0, r3
 80067f4:	d002      	beq.n	80067fc <LoRaMacProcess+0x378>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80067f6:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 80067f8:	64b0      	str	r0, [r6, #72]	; 0x48
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80067fa:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80067fc:	21aa      	movs	r1, #170	; 0xaa
 80067fe:	4823      	ldr	r0, [pc, #140]	; (800688c <LoRaMacProcess+0x408>)
 8006800:	0049      	lsls	r1, r1, #1
 8006802:	f7fe f8bf 	bl	8004984 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8006806:	23d0      	movs	r3, #208	; 0xd0
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	58f2      	ldr	r2, [r6, r3]
 800680c:	e040      	b.n	8006890 <LoRaMacProcess+0x40c>
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	200003b4 	.word	0x200003b4
 8006814:	200008d0 	.word	0x200008d0
 8006818:	0801abc8 	.word	0x0801abc8
 800681c:	200003b8 	.word	0x200003b8
 8006820:	20000740 	.word	0x20000740
 8006824:	20000758 	.word	0x20000758
 8006828:	0000041a 	.word	0x0000041a
 800682c:	200007b8 	.word	0x200007b8
 8006830:	2000105c 	.word	0x2000105c
 8006834:	0000041b 	.word	0x0000041b
 8006838:	0000041c 	.word	0x0000041c
 800683c:	2000104c 	.word	0x2000104c
 8006840:	0000042e 	.word	0x0000042e
 8006844:	0000048c 	.word	0x0000048c
 8006848:	00000431 	.word	0x00000431
 800684c:	00000422 	.word	0x00000422
 8006850:	00000425 	.word	0x00000425
 8006854:	0000042c 	.word	0x0000042c
 8006858:	00000432 	.word	0x00000432
 800685c:	00000434 	.word	0x00000434
 8006860:	0000043c 	.word	0x0000043c
 8006864:	0000047e 	.word	0x0000047e
 8006868:	00000445 	.word	0x00000445
 800686c:	00000419 	.word	0x00000419
 8006870:	0000048d 	.word	0x0000048d
 8006874:	0000048e 	.word	0x0000048e
 8006878:	200007fc 	.word	0x200007fc
 800687c:	20000810 	.word	0x20000810
 8006880:	20000824 	.word	0x20000824
 8006884:	200007d8 	.word	0x200007d8
 8006888:	20000904 	.word	0x20000904
 800688c:	2000091c 	.word	0x2000091c
 8006890:	4290      	cmp	r0, r2
 8006892:	d003      	beq.n	800689c <LoRaMacProcess+0x418>
        nvmData->MacGroup2.Crc32 = crc;
 8006894:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8006896:	3b9d      	subs	r3, #157	; 0x9d
 8006898:	3bff      	subs	r3, #255	; 0xff
 800689a:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800689c:	21ce      	movs	r1, #206	; 0xce
 800689e:	48c6      	ldr	r0, [pc, #792]	; (8006bb8 <LoRaMacProcess+0x734>)
 80068a0:	0049      	lsls	r1, r1, #1
 80068a2:	f7fe f86f 	bl	8004984 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80068a6:	23d0      	movs	r3, #208	; 0xd0
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	58f2      	ldr	r2, [r6, r3]
 80068ac:	4290      	cmp	r0, r2
 80068ae:	d002      	beq.n	80068b6 <LoRaMacProcess+0x432>
        nvmData->SecureElement.Crc32 = crc;
 80068b0:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80068b2:	2308      	movs	r3, #8
 80068b4:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80068b6:	2110      	movs	r1, #16
 80068b8:	48c0      	ldr	r0, [pc, #768]	; (8006bbc <LoRaMacProcess+0x738>)
 80068ba:	f7fe f863 	bl	8004984 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80068be:	23d5      	movs	r3, #213	; 0xd5
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	58f2      	ldr	r2, [r6, r3]
 80068c4:	4290      	cmp	r0, r2
 80068c6:	d002      	beq.n	80068ce <LoRaMacProcess+0x44a>
        nvmData->RegionGroup1.Crc32 = crc;
 80068c8:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80068ca:	2310      	movs	r3, #16
 80068cc:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80068ce:	21de      	movs	r1, #222	; 0xde
 80068d0:	48bb      	ldr	r0, [pc, #748]	; (8006bc0 <LoRaMacProcess+0x73c>)
 80068d2:	0089      	lsls	r1, r1, #2
 80068d4:	f7fe f856 	bl	8004984 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80068d8:	23da      	movs	r3, #218	; 0xda
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	58f2      	ldr	r2, [r6, r3]
 80068de:	4290      	cmp	r0, r2
 80068e0:	d002      	beq.n	80068e8 <LoRaMacProcess+0x464>
        nvmData->RegionGroup2.Crc32 = crc;
 80068e2:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80068e4:	2320      	movs	r3, #32
 80068e6:	431d      	orrs	r5, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80068e8:	2114      	movs	r1, #20
 80068ea:	48b6      	ldr	r0, [pc, #728]	; (8006bc4 <LoRaMacProcess+0x740>)
 80068ec:	f7fe f84a 	bl	8004984 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80068f0:	23dd      	movs	r3, #221	; 0xdd
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	58f2      	ldr	r2, [r6, r3]
 80068f6:	4290      	cmp	r0, r2
 80068f8:	d002      	beq.n	8006900 <LoRaMacProcess+0x47c>
        nvmData->ClassB.Crc32 = crc;
 80068fa:	50f0      	str	r0, [r6, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	431d      	orrs	r5, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8006900:	23d2      	movs	r3, #210	; 0xd2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	58e3      	ldr	r3, [r4, r3]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <LoRaMacProcess+0x490>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800690a:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <LoRaMacProcess+0x490>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8006910:	0028      	movs	r0, r5
 8006912:	4798      	blx	r3
}
 8006914:	b02b      	add	sp, #172	; 0xac
 8006916:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006918:	4aab      	ldr	r2, [pc, #684]	; (8006bc8 <LoRaMacProcess+0x744>)
 800691a:	54a3      	strb	r3, [r4, r2]
 800691c:	e5fb      	b.n	8006516 <LoRaMacProcess+0x92>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800691e:	23c2      	movs	r3, #194	; 0xc2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	5ceb      	ldrb	r3, [r5, r3]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10d      	bne.n	8006944 <LoRaMacProcess+0x4c0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8006928:	f001 fb2a 	bl	8007f80 <LoRaMacClassBIsPingExpected>
 800692c:	1e06      	subs	r6, r0, #0
 800692e:	d01b      	beq.n	8006968 <LoRaMacProcess+0x4e4>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006930:	9806      	ldr	r0, [sp, #24]
 8006932:	f001 fb1a 	bl	8007f6a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8006936:	9806      	ldr	r0, [sp, #24]
 8006938:	f001 fb1c 	bl	8007f74 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800693c:	2204      	movs	r2, #4
 800693e:	4ba3      	ldr	r3, [pc, #652]	; (8006bcc <LoRaMacProcess+0x748>)
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006940:	49a3      	ldr	r1, [pc, #652]	; (8006bd0 <LoRaMacProcess+0x74c>)
 8006942:	545a      	strb	r2, [r3, r1]
    macHdr.Value = payload[pktHeaderLen++];
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	781b      	ldrb	r3, [r3, #0]
    switch( macHdr.Bits.MType )
 8006948:	0958      	lsrs	r0, r3, #5
 800694a:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 800694c:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 800694e:	4b9f      	ldr	r3, [pc, #636]	; (8006bcc <LoRaMacProcess+0x748>)
 8006950:	2806      	cmp	r0, #6
 8006952:	d900      	bls.n	8006956 <LoRaMacProcess+0x4d2>
 8006954:	e26a      	b.n	8006e2c <LoRaMacProcess+0x9a8>
 8006956:	f7f9 fbfd 	bl	8000154 <__gnu_thumb1_case_uhi>
 800695a:	0014      	.short	0x0014
 800695c:	00a10269 	.word	0x00a10269
 8006960:	009d0269 	.word	0x009d0269
 8006964:	02580269 	.word	0x02580269
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8006968:	f001 fb0c 	bl	8007f84 <LoRaMacClassBIsMulticastExpected>
 800696c:	2800      	cmp	r0, #0
 800696e:	d0e9      	beq.n	8006944 <LoRaMacProcess+0x4c0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006970:	0030      	movs	r0, r6
 8006972:	f001 fafb 	bl	8007f6c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8006976:	0030      	movs	r0, r6
 8006978:	f001 fafd 	bl	8007f76 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800697c:	2205      	movs	r2, #5
 800697e:	4b93      	ldr	r3, [pc, #588]	; (8006bcc <LoRaMacProcess+0x748>)
 8006980:	e7de      	b.n	8006940 <LoRaMacProcess+0x4bc>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8006982:	2f10      	cmp	r7, #16
 8006984:	d806      	bhi.n	8006994 <LoRaMacProcess+0x510>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006986:	2101      	movs	r1, #1
 8006988:	4a90      	ldr	r2, [pc, #576]	; (8006bcc <LoRaMacProcess+0x748>)
 800698a:	4b92      	ldr	r3, [pc, #584]	; (8006bd4 <LoRaMacProcess+0x750>)
 800698c:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800698e:	f7fe fbb1 	bl	80050f4 <PrepareRxDoneAbort>
                return;
 8006992:	e63f      	b.n	8006614 <LoRaMacProcess+0x190>
            macMsgJoinAccept.Buffer = payload;
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	ae14      	add	r6, sp, #80	; 0x50
 8006998:	9314      	str	r3, [sp, #80]	; 0x50
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800699a:	23ce      	movs	r3, #206	; 0xce
            macMsgJoinAccept.BufSize = size;
 800699c:	b2ff      	uxtb	r7, r7
 800699e:	7137      	strb	r7, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	5ceb      	ldrb	r3, [r5, r3]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1ee      	bne.n	8006986 <LoRaMacProcess+0x502>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80069a8:	f004 fe08 	bl	800b5bc <SecureElementGetJoinEui>
 80069ac:	0032      	movs	r2, r6
 80069ae:	0001      	movs	r1, r0
 80069b0:	20ff      	movs	r0, #255	; 0xff
 80069b2:	f001 ffc3 	bl	800893c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d164      	bne.n	8006a84 <LoRaMacProcess+0x600>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80069ba:	002a      	movs	r2, r5
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80069bc:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80069be:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80069c0:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80069c2:	0409      	lsls	r1, r1, #16
 80069c4:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80069c6:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80069c8:	32cc      	adds	r2, #204	; 0xcc
 80069ca:	430b      	orrs	r3, r1
 80069cc:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80069ce:	002b      	movs	r3, r5
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80069d0:	0029      	movs	r1, r5
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80069d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069d4:	33d0      	adds	r3, #208	; 0xd0
 80069d6:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80069d8:	7c33      	ldrb	r3, [r6, #16]
 80069da:	316d      	adds	r1, #109	; 0x6d
 80069dc:	065a      	lsls	r2, r3, #25
 80069de:	0f52      	lsrs	r2, r2, #29
 80069e0:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80069e2:	002a      	movs	r2, r5
 80069e4:	071b      	lsls	r3, r3, #28
 80069e6:	0f1b      	lsrs	r3, r3, #28
 80069e8:	3274      	adds	r2, #116	; 0x74
 80069ea:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80069ec:	002a      	movs	r2, r5
 80069ee:	327c      	adds	r2, #124	; 0x7c
 80069f0:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80069f2:	7c73      	ldrb	r3, [r6, #17]
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d043      	beq.n	8006a80 <LoRaMacProcess+0x5fc>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80069f8:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80069fa:	23fa      	movs	r3, #250	; 0xfa
 80069fc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006a02:	22fa      	movs	r2, #250	; 0xfa
 8006a04:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8006a06:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	662b      	str	r3, [r5, #96]	; 0x60
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8006a0c:	23cd      	movs	r3, #205	; 0xcd
 8006a0e:	2600      	movs	r6, #0
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	54ee      	strb	r6, [r5, r3]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8006a14:	3b51      	subs	r3, #81	; 0x51
 8006a16:	aa06      	add	r2, sp, #24
 8006a18:	3bff      	subs	r3, #255	; 0xff
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	9312      	str	r3, [sp, #72]	; 0x48
                applyCFList.Size = size - 17;
 8006a1e:	0013      	movs	r3, r2
 8006a20:	2234      	movs	r2, #52	; 0x34
                applyCFList.JoinChannel = MacCtx.Channel;
 8006a22:	212c      	movs	r1, #44	; 0x2c
                applyCFList.Size = size - 17;
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	3f11      	subs	r7, #17
 8006a28:	701f      	strb	r7, [r3, #0]
                applyCFList.JoinChannel = MacCtx.Channel;
 8006a2a:	4b6b      	ldr	r3, [pc, #428]	; (8006bd8 <LoRaMacProcess+0x754>)
 8006a2c:	aa06      	add	r2, sp, #24
 8006a2e:	5ce3      	ldrb	r3, [r4, r3]
 8006a30:	1852      	adds	r2, r2, r1
 8006a32:	7013      	strb	r3, [r2, #0]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8006a34:	002b      	movs	r3, r5
 8006a36:	334c      	adds	r3, #76	; 0x4c
 8006a38:	7818      	ldrb	r0, [r3, #0]
 8006a3a:	a911      	add	r1, sp, #68	; 0x44
 8006a3c:	f002 f990 	bl	8008d60 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006a40:	23ce      	movs	r3, #206	; 0xce
 8006a42:	2202      	movs	r2, #2
 8006a44:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8006a46:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006a48:	54ea      	strb	r2, [r5, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8006a4a:	f001 fc71 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8006a4e:	42b0      	cmp	r0, r6
 8006a50:	d003      	beq.n	8006a5a <LoRaMacProcess+0x5d6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8006a52:	2101      	movs	r1, #1
 8006a54:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8006a56:	f001 fc27 	bl	80082a8 <LoRaMacConfirmQueueSetStatus>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006a5a:	4c5c      	ldr	r4, [pc, #368]	; (8006bcc <LoRaMacProcess+0x748>)
 8006a5c:	4b5c      	ldr	r3, [pc, #368]	; (8006bd0 <LoRaMacProcess+0x74c>)
 8006a5e:	5ce3      	ldrb	r3, [r4, r3]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d900      	bls.n	8006a66 <LoRaMacProcess+0x5e2>
 8006a64:	e1f1      	b.n	8006e4a <LoRaMacProcess+0x9c6>
        if( MacCtx.NodeAckRequested == true )
 8006a66:	4b5d      	ldr	r3, [pc, #372]	; (8006bdc <LoRaMacProcess+0x758>)
 8006a68:	5ce3      	ldrb	r3, [r4, r3]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d000      	beq.n	8006a70 <LoRaMacProcess+0x5ec>
 8006a6e:	e1e3      	b.n	8006e38 <LoRaMacProcess+0x9b4>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8006a70:	2320      	movs	r3, #32
 8006a72:	4a5b      	ldr	r2, [pc, #364]	; (8006be0 <LoRaMacProcess+0x75c>)
 8006a74:	5ca1      	ldrb	r1, [r4, r2]
 8006a76:	430b      	orrs	r3, r1
 8006a78:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 8006a7a:	f7fe faf7 	bl	800506c <UpdateRxSlotIdleState>
 8006a7e:	e5c9      	b.n	8006614 <LoRaMacProcess+0x190>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e7b9      	b.n	80069f8 <LoRaMacProcess+0x574>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8006a84:	2001      	movs	r0, #1
 8006a86:	f001 fc53 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d0e5      	beq.n	8006a5a <LoRaMacProcess+0x5d6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8006a8e:	2101      	movs	r1, #1
 8006a90:	2007      	movs	r0, #7
 8006a92:	e7e0      	b.n	8006a56 <LoRaMacProcess+0x5d2>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8006a94:	2284      	movs	r2, #132	; 0x84
 8006a96:	2101      	movs	r1, #1
 8006a98:	00d2      	lsls	r2, r2, #3
 8006a9a:	5499      	strb	r1, [r3, r2]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006a9c:	4c51      	ldr	r4, [pc, #324]	; (8006be4 <LoRaMacProcess+0x760>)
 8006a9e:	a90d      	add	r1, sp, #52	; 0x34
 8006aa0:	0023      	movs	r3, r4
 8006aa2:	3381      	adds	r3, #129	; 0x81
 8006aa4:	781b      	ldrb	r3, [r3, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8006aa6:	4a49      	ldr	r2, [pc, #292]	; (8006bcc <LoRaMacProcess+0x748>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006aa8:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8006aaa:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <LoRaMacProcess+0x764>)
 8006aac:	5cd3      	ldrb	r3, [r2, r3]
 8006aae:	704b      	strb	r3, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8006ab0:	230d      	movs	r3, #13
 8006ab2:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006ab4:	0023      	movs	r3, r4
 8006ab6:	334c      	adds	r3, #76	; 0x4c
 8006ab8:	7818      	ldrb	r0, [r3, #0]
 8006aba:	f002 f913 	bl	8008ce4 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8006abe:	003a      	movs	r2, r7
 8006ac0:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006ac2:	900b      	str	r0, [sp, #44]	; 0x2c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8006ac4:	1c13      	adds	r3, r2, #0
 8006ac6:	0412      	lsls	r2, r2, #16
 8006ac8:	d500      	bpl.n	8006acc <LoRaMacProcess+0x648>
 8006aca:	2300      	movs	r3, #0
 8006acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ace:	b21b      	sxth	r3, r3
 8006ad0:	b212      	sxth	r2, r2
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	dd00      	ble.n	8006ad8 <LoRaMacProcess+0x654>
 8006ad6:	e756      	b.n	8006986 <LoRaMacProcess+0x502>
 8006ad8:	2f0b      	cmp	r7, #11
 8006ada:	d800      	bhi.n	8006ade <LoRaMacProcess+0x65a>
 8006adc:	e753      	b.n	8006986 <LoRaMacProcess+0x502>
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8006ade:	22ff      	movs	r2, #255	; 0xff
            macMsgData.Buffer = payload;
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	ad1e      	add	r5, sp, #120	; 0x78
 8006ae4:	931e      	str	r3, [sp, #120]	; 0x78
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8006ae6:	4b41      	ldr	r3, [pc, #260]	; (8006bec <LoRaMacProcess+0x768>)
            macMsgData.BufSize = size;
 8006ae8:	712f      	strb	r7, [r5, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8006aea:	626b      	str	r3, [r5, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8006aec:	ab28      	add	r3, sp, #160	; 0xa0
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8006aee:	0028      	movs	r0, r5
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8006af0:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8006af2:	f001 ffef 	bl	8008ad4 <LoRaMacParserData>
 8006af6:	1e07      	subs	r7, r0, #0
 8006af8:	d000      	beq.n	8006afc <LoRaMacProcess+0x678>
 8006afa:	e744      	b.n	8006986 <LoRaMacProcess+0x502>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006afc:	23c2      	movs	r3, #194	; 0xc2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	5ce3      	ldrb	r3, [r4, r3]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d113      	bne.n	8006b2e <LoRaMacProcess+0x6aa>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8006b06:	f001 fa3b 	bl	8007f80 <LoRaMacClassBIsPingExpected>
 8006b0a:	1e06      	subs	r6, r0, #0
 8006b0c:	d047      	beq.n	8006b9e <LoRaMacProcess+0x71a>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006b0e:	0038      	movs	r0, r7
 8006b10:	f001 fa2b 	bl	8007f6a <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8006b14:	0038      	movs	r0, r7
 8006b16:	f001 fa2d 	bl	8007f74 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8006b1a:	2204      	movs	r2, #4
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <LoRaMacProcess+0x748>)
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006b1e:	492c      	ldr	r1, [pc, #176]	; (8006bd0 <LoRaMacProcess+0x74c>)
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006b20:	68a8      	ldr	r0, [r5, #8]
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006b22:	545a      	strb	r2, [r3, r1]
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006b24:	7b29      	ldrb	r1, [r5, #12]
 8006b26:	06c9      	lsls	r1, r1, #27
 8006b28:	0fc9      	lsrs	r1, r1, #31
 8006b2a:	f001 fa42 	bl	8007fb2 <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8006b2e:	2387      	movs	r3, #135	; 0x87
 8006b30:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006b32:	4a26      	ldr	r2, [pc, #152]	; (8006bcc <LoRaMacProcess+0x748>)
 8006b34:	af1e      	add	r7, sp, #120	; 0x78
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	50d1      	str	r1, [r2, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8006b3a:	0038      	movs	r0, r7
 8006b3c:	a911      	add	r1, sp, #68	; 0x44
 8006b3e:	f7ff fc77 	bl	8006430 <DetermineFrameType>
 8006b42:	1e06      	subs	r6, r0, #0
 8006b44:	d000      	beq.n	8006b48 <LoRaMacProcess+0x6c4>
 8006b46:	e71e      	b.n	8006986 <LoRaMacProcess+0x502>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8006b48:	0005      	movs	r5, r0
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <LoRaMacProcess+0x76c>)
            downLinkCounter = 0;
 8006b4e:	900c      	str	r0, [sp, #48]	; 0x30
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	428a      	cmp	r2, r1
 8006b56:	d14d      	bne.n	8006bf4 <LoRaMacProcess+0x770>
 8006b58:	7818      	ldrb	r0, [r3, #0]
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d04a      	beq.n	8006bf4 <LoRaMacProcess+0x770>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8006b5e:	232c      	movs	r3, #44	; 0x2c
 8006b60:	436b      	muls	r3, r5
 8006b62:	18e3      	adds	r3, r4, r3
 8006b64:	0019      	movs	r1, r3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8006b66:	33f4      	adds	r3, #244	; 0xf4
 8006b68:	681b      	ldr	r3, [r3, #0]
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8006b6a:	31d7      	adds	r1, #215	; 0xd7
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8006b6c:	681b      	ldr	r3, [r3, #0]
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8006b6e:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8006b70:	930c      	str	r3, [sp, #48]	; 0x30
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8006b72:	23c2      	movs	r3, #194	; 0xc2
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	5ce3      	ldrb	r3, [r4, r3]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d103      	bne.n	8006b84 <LoRaMacProcess+0x700>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8006b7c:	2103      	movs	r1, #3
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <LoRaMacProcess+0x748>)
 8006b80:	4813      	ldr	r0, [pc, #76]	; (8006bd0 <LoRaMacProcess+0x74c>)
 8006b82:	5419      	strb	r1, [r3, r0]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8006b84:	ab11      	add	r3, sp, #68	; 0x44
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d000      	beq.n	8006b8e <LoRaMacProcess+0x70a>
 8006b8c:	e6fb      	b.n	8006986 <LoRaMacProcess+0x502>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8006b8e:	2360      	movs	r3, #96	; 0x60
 8006b90:	7b39      	ldrb	r1, [r7, #12]
 8006b92:	4219      	tst	r1, r3
 8006b94:	d000      	beq.n	8006b98 <LoRaMacProcess+0x714>
 8006b96:	e6f6      	b.n	8006986 <LoRaMacProcess+0x502>
 8006b98:	2601      	movs	r6, #1
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8006b9a:	9207      	str	r2, [sp, #28]
 8006b9c:	e02e      	b.n	8006bfc <LoRaMacProcess+0x778>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8006b9e:	f001 f9f1 	bl	8007f84 <LoRaMacClassBIsMulticastExpected>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0c3      	beq.n	8006b2e <LoRaMacProcess+0x6aa>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006ba6:	0030      	movs	r0, r6
 8006ba8:	f001 f9e0 	bl	8007f6c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8006bac:	0030      	movs	r0, r6
 8006bae:	f001 f9e2 	bl	8007f76 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006bb2:	2205      	movs	r2, #5
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <LoRaMacProcess+0x748>)
 8006bb6:	e7b2      	b.n	8006b1e <LoRaMacProcess+0x69a>
 8006bb8:	20000a74 	.word	0x20000a74
 8006bbc:	20000c14 	.word	0x20000c14
 8006bc0:	20000c28 	.word	0x20000c28
 8006bc4:	20000fa4 	.word	0x20000fa4
 8006bc8:	00000445 	.word	0x00000445
 8006bcc:	200003b8 	.word	0x200003b8
 8006bd0:	00000431 	.word	0x00000431
 8006bd4:	00000421 	.word	0x00000421
 8006bd8:	0000041b 	.word	0x0000041b
 8006bdc:	0000041a 	.word	0x0000041a
 8006be0:	0000048d 	.word	0x0000048d
 8006be4:	200008d0 	.word	0x200008d0
 8006be8:	00000424 	.word	0x00000424
 8006bec:	200005f0 	.word	0x200005f0
 8006bf0:	200009a6 	.word	0x200009a6
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	332c      	adds	r3, #44	; 0x2c
 8006bf8:	2d04      	cmp	r5, #4
 8006bfa:	d1a9      	bne.n	8006b50 <LoRaMacProcess+0x6cc>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8006bfc:	22cd      	movs	r2, #205	; 0xcd
 8006bfe:	49c8      	ldr	r1, [pc, #800]	; (8006f20 <LoRaMacProcess+0xa9c>)
 8006c00:	ab11      	add	r3, sp, #68	; 0x44
 8006c02:	0052      	lsls	r2, r2, #1
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	5c8f      	ldrb	r7, [r1, r2]
    switch( addrID )
 8006c08:	2d04      	cmp	r5, #4
 8006c0a:	d811      	bhi.n	8006c30 <LoRaMacProcess+0x7ac>
 8006c0c:	0028      	movs	r0, r5
 8006c0e:	f7f9 fa8d 	bl	800012c <__gnu_thumb1_case_uqi>
 8006c12:	0323      	.short	0x0323
 8006c14:	211f      	.short	0x211f
 8006c16:	17          	.byte	0x17
 8006c17:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
 8006c18:	2705      	movs	r7, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8006c1a:	ac1e      	add	r4, sp, #120	; 0x78
 8006c1c:	0038      	movs	r0, r7
 8006c1e:	89e1      	ldrh	r1, [r4, #14]
 8006c20:	aa0c      	add	r2, sp, #48	; 0x30
 8006c22:	f001 fd19 	bl	8008658 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d01a      	beq.n	8006c60 <LoRaMacProcess+0x7dc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8006c2a:	2308      	movs	r3, #8
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8006c2c:	2807      	cmp	r0, #7
 8006c2e:	d000      	beq.n	8006c32 <LoRaMacProcess+0x7ae>
    switch( addrID )
 8006c30:	2301      	movs	r3, #1
 8006c32:	4abc      	ldr	r2, [pc, #752]	; (8006f24 <LoRaMacProcess+0xaa0>)
 8006c34:	49bc      	ldr	r1, [pc, #752]	; (8006f28 <LoRaMacProcess+0xaa4>)
 8006c36:	5453      	strb	r3, [r2, r1]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006c38:	4bbc      	ldr	r3, [pc, #752]	; (8006f2c <LoRaMacProcess+0xaa8>)
 8006c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c3c:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8006c3e:	e6a6      	b.n	800698e <LoRaMacProcess+0x50a>
            if( lrWanVersion.Fields.Minor == 1 )
 8006c40:	2f01      	cmp	r7, #1
 8006c42:	d10b      	bne.n	8006c5c <LoRaMacProcess+0x7d8>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <LoRaMacProcess+0x7c8>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d1e6      	bne.n	8006c1a <LoRaMacProcess+0x796>
                    *fCntID = A_FCNT_DOWN;
 8006c4c:	2702      	movs	r7, #2
 8006c4e:	e7e4      	b.n	8006c1a <LoRaMacProcess+0x796>
            *fCntID = MC_FCNT_DOWN_2;
 8006c50:	2706      	movs	r7, #6
            break;
 8006c52:	e7e2      	b.n	8006c1a <LoRaMacProcess+0x796>
            *fCntID = MC_FCNT_DOWN_3;
 8006c54:	2707      	movs	r7, #7
            break;
 8006c56:	e7e0      	b.n	8006c1a <LoRaMacProcess+0x796>
    switch( addrID )
 8006c58:	2704      	movs	r7, #4
 8006c5a:	e7de      	b.n	8006c1a <LoRaMacProcess+0x796>
                *fCntID = FCNT_DOWN;
 8006c5c:	2703      	movs	r7, #3
 8006c5e:	e7dc      	b.n	8006c1a <LoRaMacProcess+0x796>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8006c60:	003a      	movs	r2, r7
 8006c62:	0028      	movs	r0, r5
 8006c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c66:	9907      	ldr	r1, [sp, #28]
 8006c68:	9400      	str	r4, [sp, #0]
 8006c6a:	f001 fdbd 	bl	80087e8 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8006c6e:	4fad      	ldr	r7, [pc, #692]	; (8006f24 <LoRaMacProcess+0xaa0>)
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d006      	beq.n	8006c82 <LoRaMacProcess+0x7fe>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8006c74:	3802      	subs	r0, #2
 8006c76:	1e43      	subs	r3, r0, #1
 8006c78:	4198      	sbcs	r0, r3
 8006c7a:	4bab      	ldr	r3, [pc, #684]	; (8006f28 <LoRaMacProcess+0xaa4>)
 8006c7c:	300a      	adds	r0, #10
 8006c7e:	54f8      	strb	r0, [r7, r3]
 8006c80:	e685      	b.n	800698e <LoRaMacProcess+0x50a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006c82:	4ba9      	ldr	r3, [pc, #676]	; (8006f28 <LoRaMacProcess+0xaa4>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8006c84:	49aa      	ldr	r1, [pc, #680]	; (8006f30 <LoRaMacProcess+0xaac>)
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006c86:	54f8      	strb	r0, [r7, r3]
            MacCtx.McpsIndication.Multicast = multicast;
 8006c88:	4baa      	ldr	r3, [pc, #680]	; (8006f34 <LoRaMacProcess+0xab0>)
 8006c8a:	54fe      	strb	r6, [r7, r3]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8006c8c:	7b23      	ldrb	r3, [r4, #12]
 8006c8e:	06da      	lsls	r2, r3, #27
 8006c90:	0fd2      	lsrs	r2, r2, #31
 8006c92:	547a      	strb	r2, [r7, r1]
            MacCtx.McpsIndication.Buffer = NULL;
 8006c94:	2285      	movs	r2, #133	; 0x85
 8006c96:	00d2      	lsls	r2, r2, #3
 8006c98:	50b8      	str	r0, [r7, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 8006c9a:	4aa7      	ldr	r2, [pc, #668]	; (8006f38 <LoRaMacProcess+0xab4>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006c9c:	990c      	ldr	r1, [sp, #48]	; 0x30
            MacCtx.McpsIndication.BufferSize = 0;
 8006c9e:	54b8      	strb	r0, [r7, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006ca0:	4aa2      	ldr	r2, [pc, #648]	; (8006f2c <LoRaMacProcess+0xaa8>)
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006ca2:	069b      	lsls	r3, r3, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006ca4:	50b9      	str	r1, [r7, r2]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006ca6:	4aa5      	ldr	r2, [pc, #660]	; (8006f3c <LoRaMacProcess+0xab8>)
 8006ca8:	0fdb      	lsrs	r3, r3, #31
 8006caa:	54bb      	strb	r3, [r7, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006cac:	4aa4      	ldr	r2, [pc, #656]	; (8006f40 <LoRaMacProcess+0xabc>)
 8006cae:	54b8      	strb	r0, [r7, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006cb0:	3203      	adds	r2, #3
 8006cb2:	54bb      	strb	r3, [r7, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006cb4:	4ba3      	ldr	r3, [pc, #652]	; (8006f44 <LoRaMacProcess+0xac0>)
 8006cb6:	5cfa      	ldrb	r2, [r7, r3]
 8006cb8:	2a01      	cmp	r2, #1
 8006cba:	d805      	bhi.n	8006cc8 <LoRaMacProcess+0x844>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8006cbc:	4b98      	ldr	r3, [pc, #608]	; (8006f20 <LoRaMacProcess+0xa9c>)
                Nvm.MacGroup2.DownlinkReceived = true;
 8006cbe:	21c5      	movs	r1, #197	; 0xc5
                Nvm.MacGroup1.AdrAckCounter = 0;
 8006cc0:	6358      	str	r0, [r3, #52]	; 0x34
                Nvm.MacGroup2.DownlinkReceived = true;
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	0049      	lsls	r1, r1, #1
 8006cc6:	5458      	strb	r0, [r3, r1]
            if( multicast == 1 )
 8006cc8:	4c96      	ldr	r4, [pc, #600]	; (8006f24 <LoRaMacProcess+0xaa0>)
 8006cca:	ad1e      	add	r5, sp, #120	; 0x78
 8006ccc:	2e01      	cmp	r6, #1
 8006cce:	d104      	bne.n	8006cda <LoRaMacProcess+0x856>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8006cd0:	2384      	movs	r3, #132	; 0x84
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	00db      	lsls	r3, r3, #3
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006cd6:	54e1      	strb	r1, [r4, r3]
 8006cd8:	e01e      	b.n	8006d18 <LoRaMacProcess+0x894>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8006cda:	231f      	movs	r3, #31
 8006cdc:	9906      	ldr	r1, [sp, #24]
 8006cde:	4399      	bics	r1, r3
 8006ce0:	4b8f      	ldr	r3, [pc, #572]	; (8006f20 <LoRaMacProcess+0xa9c>)
 8006ce2:	29a0      	cmp	r1, #160	; 0xa0
 8006ce4:	d12c      	bne.n	8006d40 <LoRaMacProcess+0x8bc>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8006ce6:	0019      	movs	r1, r3
 8006ce8:	2001      	movs	r0, #1
 8006cea:	3146      	adds	r1, #70	; 0x46
 8006cec:	7008      	strb	r0, [r1, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8006cee:	21cd      	movs	r1, #205	; 0xcd
 8006cf0:	0049      	lsls	r1, r1, #1
 8006cf2:	5c59      	ldrb	r1, [r3, r1]
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	d101      	bne.n	8006cfc <LoRaMacProcess+0x878>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8006cf8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006cfa:	6419      	str	r1, [r3, #64]	; 0x40
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8006cfc:	2384      	movs	r3, #132	; 0x84
 8006cfe:	2101      	movs	r1, #1
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	54e1      	strb	r1, [r4, r3]
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8006d04:	428a      	cmp	r2, r1
 8006d06:	d907      	bls.n	8006d18 <LoRaMacProcess+0x894>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 8006d08:	21fa      	movs	r1, #250	; 0xfa
 8006d0a:	3320      	adds	r3, #32
 8006d0c:	0149      	lsls	r1, r1, #5
 8006d0e:	50e1      	str	r1, [r4, r3]
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8006d10:	4b8d      	ldr	r3, [pc, #564]	; (8006f48 <LoRaMacProcess+0xac4>)
 8006d12:	6819      	ldr	r1, [r3, #0]
 8006d14:	4b8d      	ldr	r3, [pc, #564]	; (8006f4c <LoRaMacProcess+0xac8>)
 8006d16:	50e1      	str	r1, [r4, r3]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8006d18:	4b8d      	ldr	r3, [pc, #564]	; (8006f50 <LoRaMacProcess+0xacc>)
 8006d1a:	5ce1      	ldrb	r1, [r4, r3]
 8006d1c:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8006d1e:	2a01      	cmp	r2, #1
 8006d20:	d805      	bhi.n	8006d2e <LoRaMacProcess+0x8aa>
        if( request == MCPS_CONFIRMED )
 8006d22:	2901      	cmp	r1, #1
 8006d24:	d101      	bne.n	8006d2a <LoRaMacProcess+0x8a6>
            if( fCtrl.Bits.Ack == 1 )
 8006d26:	069b      	lsls	r3, r3, #26
 8006d28:	d501      	bpl.n	8006d2e <LoRaMacProcess+0x8aa>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8006d2a:	f001 f9df 	bl	80080ec <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8006d2e:	ab11      	add	r3, sp, #68	; 0x44
 8006d30:	7818      	ldrb	r0, [r3, #0]
 8006d32:	2803      	cmp	r0, #3
 8006d34:	d863      	bhi.n	8006dfe <LoRaMacProcess+0x97a>
 8006d36:	4e87      	ldr	r6, [pc, #540]	; (8006f54 <LoRaMacProcess+0xad0>)
 8006d38:	f7f9 f9f8 	bl	800012c <__gnu_thumb1_case_uqi>
 8006d3c:	50493a08 	.word	0x50493a08
                    Nvm.MacGroup1.SrvAckRequested = false;
 8006d40:	2100      	movs	r1, #0
 8006d42:	3346      	adds	r3, #70	; 0x46
 8006d44:	7019      	strb	r1, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006d46:	2384      	movs	r3, #132	; 0x84
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	e7c4      	b.n	8006cd6 <LoRaMacProcess+0x852>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8006d4c:	7b29      	ldrb	r1, [r5, #12]
 8006d4e:	4b7d      	ldr	r3, [pc, #500]	; (8006f44 <LoRaMacProcess+0xac0>)
 8006d50:	0709      	lsls	r1, r1, #28
 8006d52:	5cfb      	ldrb	r3, [r7, r3]
 8006d54:	9a04      	ldr	r2, [sp, #16]
 8006d56:	0f09      	lsrs	r1, r1, #28
 8006d58:	a822      	add	r0, sp, #136	; 0x88
 8006d5a:	f7fe fcbb 	bl	80056d4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006d5e:	2361      	movs	r3, #97	; 0x61
 8006d60:	aa06      	add	r2, sp, #24
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	7fdb      	ldrb	r3, [r3, #31]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006d66:	6a6a      	ldr	r2, [r5, #36]	; 0x24
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006d68:	55bb      	strb	r3, [r7, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006d6a:	2385      	movs	r3, #133	; 0x85
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	50fa      	str	r2, [r7, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8006d70:	ab28      	add	r3, sp, #160	; 0xa0
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4a70      	ldr	r2, [pc, #448]	; (8006f38 <LoRaMacProcess+0xab4>)
 8006d76:	54bb      	strb	r3, [r7, r2]
                    MacCtx.McpsIndication.RxData = true;
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4b77      	ldr	r3, [pc, #476]	; (8006f58 <LoRaMacProcess+0xad4>)
 8006d7c:	54fa      	strb	r2, [r7, r3]
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8006d7e:	2361      	movs	r3, #97	; 0x61
 8006d80:	aa06      	add	r2, sp, #24
 8006d82:	189b      	adds	r3, r3, r2
 8006d84:	7fda      	ldrb	r2, [r3, #31]
 8006d86:	2ae0      	cmp	r2, #224	; 0xe0
 8006d88:	d10c      	bne.n	8006da4 <LoRaMacProcess+0x920>
 8006d8a:	238c      	movs	r3, #140	; 0x8c
 8006d8c:	4964      	ldr	r1, [pc, #400]	; (8006f20 <LoRaMacProcess+0xa9c>)
 8006d8e:	33ff      	adds	r3, #255	; 0xff
 8006d90:	5ccb      	ldrb	r3, [r1, r3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <LoRaMacProcess+0x920>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006d96:	496f      	ldr	r1, [pc, #444]	; (8006f54 <LoRaMacProcess+0xad0>)
 8006d98:	5462      	strb	r2, [r4, r1]
                MacCtx.McpsIndication.Buffer = NULL;
 8006d9a:	2285      	movs	r2, #133	; 0x85
 8006d9c:	00d2      	lsls	r2, r2, #3
 8006d9e:	50a3      	str	r3, [r4, r2]
                MacCtx.McpsIndication.BufferSize = 0;
 8006da0:	4a65      	ldr	r2, [pc, #404]	; (8006f38 <LoRaMacProcess+0xab4>)
 8006da2:	52a3      	strh	r3, [r4, r2]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8006da4:	2302      	movs	r3, #2
 8006da6:	4a6d      	ldr	r2, [pc, #436]	; (8006f5c <LoRaMacProcess+0xad8>)
 8006da8:	5ca1      	ldrb	r1, [r4, r2]
 8006daa:	430b      	orrs	r3, r1
 8006dac:	54a3      	strb	r3, [r4, r2]
            break;
 8006dae:	e654      	b.n	8006a5a <LoRaMacProcess+0x5d6>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8006db0:	4b64      	ldr	r3, [pc, #400]	; (8006f44 <LoRaMacProcess+0xac0>)
 8006db2:	7b29      	ldrb	r1, [r5, #12]
 8006db4:	5ce3      	ldrb	r3, [r4, r3]
 8006db6:	0709      	lsls	r1, r1, #28
 8006db8:	9a04      	ldr	r2, [sp, #16]
 8006dba:	0f09      	lsrs	r1, r1, #28
 8006dbc:	a822      	add	r0, sp, #136	; 0x88
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8006dbe:	f7fe fc89 	bl	80056d4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006dc2:	2280      	movs	r2, #128	; 0x80
 8006dc4:	ab06      	add	r3, sp, #24
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	55a3      	strb	r3, [r4, r6]
                    break;
 8006dcc:	e7d7      	b.n	8006d7e <LoRaMacProcess+0x8fa>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8006dce:	4b5d      	ldr	r3, [pc, #372]	; (8006f44 <LoRaMacProcess+0xac0>)
 8006dd0:	aa28      	add	r2, sp, #160	; 0xa0
 8006dd2:	7811      	ldrb	r1, [r2, #0]
 8006dd4:	5ce3      	ldrb	r3, [r4, r3]
 8006dd6:	9a04      	ldr	r2, [sp, #16]
 8006dd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006dda:	e7f0      	b.n	8006dbe <LoRaMacProcess+0x93a>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	ab06      	add	r3, sp, #24
 8006de0:	189b      	adds	r3, r3, r2
 8006de2:	781b      	ldrb	r3, [r3, #0]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006de4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006de6:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8006de8:	2385      	movs	r3, #133	; 0x85
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8006dee:	ab28      	add	r3, sp, #160	; 0xa0
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4a51      	ldr	r2, [pc, #324]	; (8006f38 <LoRaMacProcess+0xab4>)
 8006df4:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.RxData = true;
 8006df6:	2201      	movs	r2, #1
 8006df8:	4b57      	ldr	r3, [pc, #348]	; (8006f58 <LoRaMacProcess+0xad4>)
 8006dfa:	54e2      	strb	r2, [r4, r3]
                    break;
 8006dfc:	e7bf      	b.n	8006d7e <LoRaMacProcess+0x8fa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4a49      	ldr	r2, [pc, #292]	; (8006f28 <LoRaMacProcess+0xaa4>)
 8006e02:	54a3      	strb	r3, [r4, r2]
                    PrepareRxDoneAbort( );
 8006e04:	f7fe f976 	bl	80050f4 <PrepareRxDoneAbort>
                    break;
 8006e08:	e7b9      	b.n	8006d7e <LoRaMacProcess+0x8fa>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8006e0a:	4e55      	ldr	r6, [pc, #340]	; (8006f60 <LoRaMacProcess+0xadc>)
 8006e0c:	9903      	ldr	r1, [sp, #12]
 8006e0e:	1e7d      	subs	r5, r7, #1
 8006e10:	b2aa      	uxth	r2, r5
 8006e12:	0030      	movs	r0, r6
 8006e14:	3101      	adds	r1, #1
 8006e16:	f7fd fd9c 	bl	8004952 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8006e1a:	2384      	movs	r3, #132	; 0x84
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	52e2      	strh	r2, [r4, r3]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8006e22:	3308      	adds	r3, #8
 8006e24:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8006e26:	4b44      	ldr	r3, [pc, #272]	; (8006f38 <LoRaMacProcess+0xab4>)
 8006e28:	54e5      	strb	r5, [r4, r3]
 8006e2a:	e7bb      	b.n	8006da4 <LoRaMacProcess+0x920>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	4a3e      	ldr	r2, [pc, #248]	; (8006f28 <LoRaMacProcess+0xaa4>)
 8006e30:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 8006e32:	f7fe f95f 	bl	80050f4 <PrepareRxDoneAbort>
            break;
 8006e36:	e610      	b.n	8006a5a <LoRaMacProcess+0x5d6>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8006e38:	2389      	movs	r3, #137	; 0x89
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	5ce3      	ldrb	r3, [r4, r3]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d100      	bne.n	8006e44 <LoRaMacProcess+0x9c0>
 8006e42:	e615      	b.n	8006a70 <LoRaMacProcess+0x5ec>
                OnRetransmitTimeoutTimerEvent( NULL );
 8006e44:	2000      	movs	r0, #0
 8006e46:	f7fe f937 	bl	80050b8 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 8006e4a:	4b3e      	ldr	r3, [pc, #248]	; (8006f44 <LoRaMacProcess+0xac0>)
 8006e4c:	5ce3      	ldrb	r3, [r4, r3]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d100      	bne.n	8006e54 <LoRaMacProcess+0x9d0>
 8006e52:	e612      	b.n	8006a7a <LoRaMacProcess+0x5f6>
 8006e54:	e60c      	b.n	8006a70 <LoRaMacProcess+0x5ec>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8006e56:	5d63      	ldrb	r3, [r4, r5]
 8006e58:	075b      	lsls	r3, r3, #29
 8006e5a:	d518      	bpl.n	8006e8e <LoRaMacProcess+0xa0a>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	26d0      	movs	r6, #208	; 0xd0
 8006e60:	f001 fa66 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8006e64:	00b6      	lsls	r6, r6, #2
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d00c      	beq.n	8006e84 <LoRaMacProcess+0xa00>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	f001 fa30 	bl	80082d0 <LoRaMacConfirmQueueGetStatus>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d102      	bne.n	8006e7a <LoRaMacProcess+0x9f6>
                MacCtx.ChannelsNbTransCounter = 0;
 8006e74:	2383      	movs	r3, #131	; 0x83
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	59a2      	ldr	r2, [r4, r6]
 8006e7e:	439a      	bics	r2, r3
 8006e80:	51a2      	str	r2, [r4, r6]
 8006e82:	e004      	b.n	8006e8e <LoRaMacProcess+0xa0a>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8006e84:	2005      	movs	r0, #5
 8006e86:	f001 fa53 	bl	8008330 <LoRaMacConfirmQueueIsCmdActive>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d1f5      	bne.n	8006e7a <LoRaMacProcess+0x9f6>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8006e8e:	5d63      	ldrb	r3, [r4, r5]
 8006e90:	07da      	lsls	r2, r3, #31
 8006e92:	d401      	bmi.n	8006e98 <LoRaMacProcess+0xa14>
 8006e94:	f7ff fc17 	bl	80066c6 <LoRaMacProcess+0x242>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8006e98:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <LoRaMacProcess+0xacc>)
 8006e9a:	5ca2      	ldrb	r2, [r4, r2]
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	d001      	beq.n	8006ea4 <LoRaMacProcess+0xa20>
 8006ea0:	2a03      	cmp	r2, #3
 8006ea2:	d11a      	bne.n	8006eda <LoRaMacProcess+0xa56>
    if( counter >= limit )
 8006ea4:	2183      	movs	r1, #131	; 0x83
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <LoRaMacProcess+0xa9c>)
    if( counter >= limit )
 8006ea8:	00c9      	lsls	r1, r1, #3
 8006eaa:	326c      	adds	r2, #108	; 0x6c
 8006eac:	5c61      	ldrb	r1, [r4, r1]
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	4291      	cmp	r1, r2
 8006eb2:	d205      	bcs.n	8006ec0 <LoRaMacProcess+0xa3c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006eb4:	079b      	lsls	r3, r3, #30
 8006eb6:	d527      	bpl.n	8006f08 <LoRaMacProcess+0xa84>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006eb8:	4b22      	ldr	r3, [pc, #136]	; (8006f44 <LoRaMacProcess+0xac0>)
 8006eba:	5ce3      	ldrb	r3, [r4, r3]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d823      	bhi.n	8006f08 <LoRaMacProcess+0xa84>
            TimerStop( &MacCtx.TxDelayedTimer );
 8006ec0:	4828      	ldr	r0, [pc, #160]	; (8006f64 <LoRaMacProcess+0xae0>)
 8006ec2:	f004 fd71 	bl	800b9a8 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8006ec6:	22d0      	movs	r2, #208	; 0xd0
 8006ec8:	2320      	movs	r3, #32
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	58a1      	ldr	r1, [r4, r2]
 8006ece:	4399      	bics	r1, r3
 8006ed0:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8006ed2:	f7fe fee1 	bl	8005c98 <StopRetransmission.isra.0>
 8006ed6:	f7ff fbf6 	bl	80066c6 <LoRaMacProcess+0x242>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8006eda:	2a01      	cmp	r2, #1
 8006edc:	d114      	bne.n	8006f08 <LoRaMacProcess+0xa84>
            if( MacCtx.RetransmitTimeoutRetry == true )
 8006ede:	4a22      	ldr	r2, [pc, #136]	; (8006f68 <LoRaMacProcess+0xae4>)
 8006ee0:	5ca2      	ldrb	r2, [r4, r2]
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	d101      	bne.n	8006eea <LoRaMacProcess+0xa66>
 8006ee6:	f7ff fbee 	bl	80066c6 <LoRaMacProcess+0x242>
    if( counter >= limit )
 8006eea:	2183      	movs	r1, #131	; 0x83
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <LoRaMacProcess+0xa9c>)
    if( counter >= limit )
 8006eee:	00c9      	lsls	r1, r1, #3
 8006ef0:	326c      	adds	r2, #108	; 0x6c
 8006ef2:	5c61      	ldrb	r1, [r4, r1]
 8006ef4:	7812      	ldrb	r2, [r2, #0]
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	d2e2      	bcs.n	8006ec0 <LoRaMacProcess+0xa3c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006efa:	079b      	lsls	r3, r3, #30
 8006efc:	d504      	bpl.n	8006f08 <LoRaMacProcess+0xa84>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8006efe:	2389      	movs	r3, #137	; 0x89
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	5ce3      	ldrb	r3, [r4, r3]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1db      	bne.n	8006ec0 <LoRaMacProcess+0xa3c>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8006f08:	2220      	movs	r2, #32
            MacCtx.RetransmitTimeoutRetry = false;
 8006f0a:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8006f0c:	5d63      	ldrb	r3, [r4, r5]
 8006f0e:	4393      	bics	r3, r2
 8006f10:	5563      	strb	r3, [r4, r5]
            MacCtx.RetransmitTimeoutRetry = false;
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <LoRaMacProcess+0xae4>)
 8006f14:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8006f16:	f7ff f985 	bl	8006224 <OnTxDelayedTimerEvent>
 8006f1a:	f7ff fbd4 	bl	80066c6 <LoRaMacProcess+0x242>
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	200008d0 	.word	0x200008d0
 8006f24:	200003b8 	.word	0x200003b8
 8006f28:	00000421 	.word	0x00000421
 8006f2c:	00000434 	.word	0x00000434
 8006f30:	00000425 	.word	0x00000425
 8006f34:	00000422 	.word	0x00000422
 8006f38:	0000042c 	.word	0x0000042c
 8006f3c:	00000432 	.word	0x00000432
 8006f40:	00000445 	.word	0x00000445
 8006f44:	00000431 	.word	0x00000431
 8006f48:	2000104c 	.word	0x2000104c
 8006f4c:	00000494 	.word	0x00000494
 8006f50:	00000444 	.word	0x00000444
 8006f54:	00000423 	.word	0x00000423
 8006f58:	0000042d 	.word	0x0000042d
 8006f5c:	0000048d 	.word	0x0000048d
 8006f60:	200005f0 	.word	0x200005f0
 8006f64:	20000728 	.word	0x20000728
 8006f68:	00000419 	.word	0x00000419

08006f6c <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	b08d      	sub	sp, #52	; 0x34
 8006f70:	0007      	movs	r7, r0
 8006f72:	0015      	movs	r5, r2
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006f74:	2603      	movs	r6, #3
{
 8006f76:	9101      	str	r1, [sp, #4]
    if( ( primitives == NULL ) ||
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d100      	bne.n	8006f7e <LoRaMacInitialization+0x12>
 8006f7c:	e14e      	b.n	800721c <LoRaMacInitialization+0x2b0>
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d100      	bne.n	8006f84 <LoRaMacInitialization+0x18>
 8006f82:	e14b      	b.n	800721c <LoRaMacInitialization+0x2b0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8006f84:	6803      	ldr	r3, [r0, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d100      	bne.n	8006f8c <LoRaMacInitialization+0x20>
 8006f8a:	e147      	b.n	800721c <LoRaMacInitialization+0x2b0>
 8006f8c:	6843      	ldr	r3, [r0, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d100      	bne.n	8006f94 <LoRaMacInitialization+0x28>
 8006f92:	e143      	b.n	800721c <LoRaMacInitialization+0x2b0>
        ( primitives->MacMcpsIndication == NULL ) ||
 8006f94:	6883      	ldr	r3, [r0, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d100      	bne.n	8006f9c <LoRaMacInitialization+0x30>
 8006f9a:	e13f      	b.n	800721c <LoRaMacInitialization+0x2b0>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8006f9c:	68c3      	ldr	r3, [r0, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d100      	bne.n	8006fa4 <LoRaMacInitialization+0x38>
 8006fa2:	e13b      	b.n	800721c <LoRaMacInitialization+0x2b0>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8006fa4:	0010      	movs	r0, r2
 8006fa6:	f001 fe94 	bl	8008cd2 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8006faa:	3606      	adds	r6, #6
    if( RegionIsActive( region ) == false )
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d100      	bne.n	8006fb2 <LoRaMacInitialization+0x46>
 8006fb0:	e134      	b.n	800721c <LoRaMacInitialization+0x2b0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8006fb2:	0038      	movs	r0, r7
 8006fb4:	f001 f930 	bl	8008218 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8006fb8:	4caa      	ldr	r4, [pc, #680]	; (8007264 <LoRaMacInitialization+0x2f8>)
 8006fba:	2100      	movs	r1, #0
 8006fbc:	0020      	movs	r0, r4
 8006fbe:	4aaa      	ldr	r2, [pc, #680]	; (8007268 <LoRaMacInitialization+0x2fc>)
 8006fc0:	f7fd fcdc 	bl	800497c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8006fc4:	22a3      	movs	r2, #163	; 0xa3
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	48a8      	ldr	r0, [pc, #672]	; (800726c <LoRaMacInitialization+0x300>)
 8006fca:	00d2      	lsls	r2, r2, #3
 8006fcc:	f7fd fcd6 	bl	800497c <memset1>

    // Set non zero variables to its default value
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8006fd0:	23c2      	movs	r3, #194	; 0xc2
 8006fd2:	2000      	movs	r0, #0
    Nvm.MacGroup2.Region = region;
 8006fd4:	0026      	movs	r6, r4

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8006fd6:	4aa6      	ldr	r2, [pc, #664]	; (8007270 <LoRaMacInitialization+0x304>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	54e0      	strb	r0, [r4, r3]
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8006fdc:	3314      	adds	r3, #20
 8006fde:	50e2      	str	r2, [r4, r3]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8006fe0:	4ba4      	ldr	r3, [pc, #656]	; (8007274 <LoRaMacInitialization+0x308>)
    params.Type = INIT_TYPE_DEFAULTS;
 8006fe2:	a908      	add	r1, sp, #32
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8006fe4:	9308      	str	r3, [sp, #32]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8006fe6:	4ba4      	ldr	r3, [pc, #656]	; (8007278 <LoRaMacInitialization+0x30c>)
    Nvm.MacGroup2.Region = region;
 8006fe8:	364c      	adds	r6, #76	; 0x4c
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8006fea:	604b      	str	r3, [r1, #4]
    params.Bands = &RegionBands;
 8006fec:	4ba3      	ldr	r3, [pc, #652]	; (800727c <LoRaMacInitialization+0x310>)
    params.Type = INIT_TYPE_DEFAULTS;
 8006fee:	7308      	strb	r0, [r1, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006ff0:	0028      	movs	r0, r5
    Nvm.MacGroup2.Region = region;
 8006ff2:	7035      	strb	r5, [r6, #0]
    params.Bands = &RegionBands;
 8006ff4:	608b      	str	r3, [r1, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006ff6:	f001 fe95 	bl	8008d24 <RegionInitDefaults>

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006ffa:	230e      	movs	r3, #14
 8006ffc:	ad06      	add	r5, sp, #24
 8006ffe:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007000:	0029      	movs	r1, r5
 8007002:	7830      	ldrb	r0, [r6, #0]
 8007004:	f001 fe6e 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8007008:	1e43      	subs	r3, r0, #1
 800700a:	4198      	sbcs	r0, r3
 800700c:	23c4      	movs	r3, #196	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800700e:	220a      	movs	r2, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8007010:	005b      	lsls	r3, r3, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007012:	702a      	strb	r2, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8007014:	54e0      	strb	r0, [r4, r3]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007016:	0029      	movs	r1, r5
 8007018:	7830      	ldrb	r0, [r6, #0]
 800701a:	f001 fe63 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800701e:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8007020:	2106      	movs	r1, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8007022:	33c8      	adds	r3, #200	; 0xc8
    getPhy.Attribute = PHY_DEF_TX_DR;
 8007024:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8007026:	7018      	strb	r0, [r3, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007028:	0029      	movs	r1, r5
 800702a:	7830      	ldrb	r0, [r6, #0]
 800702c:	f001 fe5a 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8007030:	0023      	movs	r3, r4
 8007032:	33c9      	adds	r3, #201	; 0xc9
 8007034:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007036:	230f      	movs	r3, #15
 8007038:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800703a:	0029      	movs	r1, r5
 800703c:	7830      	ldrb	r0, [r6, #0]
 800703e:	f001 fe51 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8007042:	4b8f      	ldr	r3, [pc, #572]	; (8007280 <LoRaMacInitialization+0x314>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007044:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8007046:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8007048:	2310      	movs	r3, #16
 800704a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800704c:	7830      	ldrb	r0, [r6, #0]
 800704e:	f001 fe49 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8007052:	4b8c      	ldr	r3, [pc, #560]	; (8007284 <LoRaMacInitialization+0x318>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007054:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8007056:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8007058:	2311      	movs	r3, #17
 800705a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800705c:	7830      	ldrb	r0, [r6, #0]
 800705e:	f001 fe41 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8007062:	4b89      	ldr	r3, [pc, #548]	; (8007288 <LoRaMacInitialization+0x31c>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007064:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8007066:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8007068:	2312      	movs	r3, #18
 800706a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800706c:	7830      	ldrb	r0, [r6, #0]
 800706e:	f001 fe39 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8007072:	4b86      	ldr	r3, [pc, #536]	; (800728c <LoRaMacInitialization+0x320>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007074:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8007076:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8007078:	2313      	movs	r3, #19
 800707a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800707c:	7830      	ldrb	r0, [r6, #0]
 800707e:	f001 fe31 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8007082:	4b83      	ldr	r3, [pc, #524]	; (8007290 <LoRaMacInitialization+0x324>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007084:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8007086:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8007088:	2315      	movs	r3, #21
 800708a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800708c:	7830      	ldrb	r0, [r6, #0]
 800708e:	f001 fe29 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8007092:	0023      	movs	r3, r4
 8007094:	33a9      	adds	r3, #169	; 0xa9
 8007096:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8007098:	2316      	movs	r3, #22
 800709a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800709c:	0029      	movs	r1, r5
 800709e:	7830      	ldrb	r0, [r6, #0]
 80070a0:	f001 fe20 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80070a4:	0023      	movs	r3, r4
 80070a6:	33ac      	adds	r3, #172	; 0xac
 80070a8:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80070aa:	0023      	movs	r3, r4
 80070ac:	33b4      	adds	r3, #180	; 0xb4
 80070ae:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80070b0:	2317      	movs	r3, #23
 80070b2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070b4:	0029      	movs	r1, r5
 80070b6:	7830      	ldrb	r0, [r6, #0]
 80070b8:	f001 fe14 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80070bc:	0023      	movs	r3, r4
 80070be:	b2c0      	uxtb	r0, r0
 80070c0:	33b0      	adds	r3, #176	; 0xb0
 80070c2:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80070c4:	0023      	movs	r3, r4
 80070c6:	33b8      	adds	r3, #184	; 0xb8
 80070c8:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80070ca:	231c      	movs	r3, #28
 80070cc:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070ce:	0029      	movs	r1, r5
 80070d0:	7830      	ldrb	r0, [r6, #0]
 80070d2:	f001 fe07 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80070d6:	0023      	movs	r3, r4
 80070d8:	33bc      	adds	r3, #188	; 0xbc
 80070da:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80070dc:	231d      	movs	r3, #29
 80070de:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070e0:	0029      	movs	r1, r5
 80070e2:	7830      	ldrb	r0, [r6, #0]
 80070e4:	f001 fdfe 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80070e8:	0023      	movs	r3, r4
 80070ea:	33bd      	adds	r3, #189	; 0xbd
 80070ec:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80070ee:	231e      	movs	r3, #30
 80070f0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070f2:	0029      	movs	r1, r5
 80070f4:	7830      	ldrb	r0, [r6, #0]
 80070f6:	f001 fdf5 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80070fa:	0023      	movs	r3, r4
 80070fc:	33c0      	adds	r3, #192	; 0xc0
 80070fe:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8007100:	231f      	movs	r3, #31
 8007102:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007104:	0029      	movs	r1, r5
 8007106:	7830      	ldrb	r0, [r6, #0]
 8007108:	f001 fdec 	bl	8008ce4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800710c:	0023      	movs	r3, r4
 800710e:	33c4      	adds	r3, #196	; 0xc4
 8007110:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8007112:	230b      	movs	r3, #11
 8007114:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007116:	0029      	movs	r1, r5
 8007118:	7830      	ldrb	r0, [r6, #0]
 800711a:	f001 fde3 	bl	8008ce4 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800711e:	23ff      	movs	r3, #255	; 0xff
 8007120:	4a52      	ldr	r2, [pc, #328]	; (800726c <LoRaMacInitialization+0x300>)
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	52d0      	strh	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8007126:	230c      	movs	r3, #12
 8007128:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800712a:	0029      	movs	r1, r5
 800712c:	7830      	ldrb	r0, [r6, #0]
 800712e:	f001 fdd9 	bl	8008ce4 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8007132:	4d4e      	ldr	r5, [pc, #312]	; (800726c <LoRaMacInitialization+0x300>)
 8007134:	4b57      	ldr	r3, [pc, #348]	; (8007294 <LoRaMacInitialization+0x328>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8007136:	2601      	movs	r6, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 8007138:	52e8      	strh	r0, [r5, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800713a:	0023      	movs	r3, r4
 800713c:	33a8      	adds	r3, #168	; 0xa8
 800713e:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8007140:	0023      	movs	r3, r4
 8007142:	220a      	movs	r2, #10
 8007144:	338c      	adds	r3, #140	; 0x8c
 8007146:	601a      	str	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8007148:	0023      	movs	r3, r4
 800714a:	2106      	movs	r1, #6
 800714c:	3390      	adds	r3, #144	; 0x90
 800714e:	7019      	strb	r1, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8007150:	0023      	movs	r3, r4
 8007152:	3354      	adds	r3, #84	; 0x54
 8007154:	7019      	strb	r1, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8007156:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <LoRaMacInitialization+0x314>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007158:	9005      	str	r0, [sp, #20]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800715a:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800715c:	6522      	str	r2, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800715e:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8007160:	4b48      	ldr	r3, [pc, #288]	; (8007284 <LoRaMacInitialization+0x318>)
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;

    ResetMacParameters( );

    Nvm.MacGroup2.PublicNetwork = true;
 8007162:	2586      	movs	r5, #134	; 0x86
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8007164:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.PublicNetwork = true;
 8007166:	35ff      	adds	r5, #255	; 0xff
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8007168:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800716a:	4b47      	ldr	r3, [pc, #284]	; (8007288 <LoRaMacInitialization+0x31c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8007170:	4b46      	ldr	r3, [pc, #280]	; (800728c <LoRaMacInitialization+0x320>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8007176:	4b46      	ldr	r3, [pc, #280]	; (8007290 <LoRaMacInitialization+0x324>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	66a3      	str	r3, [r4, #104]	; 0x68
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800717c:	0023      	movs	r3, r4
 800717e:	336c      	adds	r3, #108	; 0x6c
 8007180:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.IsCertPortOn = true;
 8007182:	238c      	movs	r3, #140	; 0x8c
 8007184:	33ff      	adds	r3, #255	; 0xff
 8007186:	54e6      	strb	r6, [r4, r3]
    ResetMacParameters( );
 8007188:	f7fe f946 	bl	8005418 <ResetMacParameters>

    MacCtx.MacPrimitives = primitives;
 800718c:	23d1      	movs	r3, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
    MacCtx.MacFlags.Value = 0;
 800718e:	2000      	movs	r0, #0
    MacCtx.MacPrimitives = primitives;
 8007190:	4a36      	ldr	r2, [pc, #216]	; (800726c <LoRaMacInitialization+0x300>)
    MacCtx.MacCallbacks = callbacks;
 8007192:	9901      	ldr	r1, [sp, #4]
    MacCtx.MacPrimitives = primitives;
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	50d7      	str	r7, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8007198:	3304      	adds	r3, #4
 800719a:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800719c:	4b3e      	ldr	r3, [pc, #248]	; (8007298 <LoRaMacInitialization+0x32c>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800719e:	0007      	movs	r7, r0
    MacCtx.MacFlags.Value = 0;
 80071a0:	54d0      	strb	r0, [r2, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 80071a2:	3b4e      	subs	r3, #78	; 0x4e
 80071a4:	3bff      	subs	r3, #255	; 0xff

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80071a6:	493d      	ldr	r1, [pc, #244]	; (800729c <LoRaMacInitialization+0x330>)
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80071a8:	63a0      	str	r0, [r4, #56]	; 0x38
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80071aa:	63e0      	str	r0, [r4, #60]	; 0x3c
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80071ac:	483c      	ldr	r0, [pc, #240]	; (80072a0 <LoRaMacInitialization+0x334>)
    MacCtx.MacState = LORAMAC_STOPPED;
 80071ae:	50d6      	str	r6, [r2, r3]
    Nvm.MacGroup2.PublicNetwork = true;
 80071b0:	5566      	strb	r6, [r4, r5]
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80071b2:	f004 fb79 	bl	800b8a8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80071b6:	493b      	ldr	r1, [pc, #236]	; (80072a4 <LoRaMacInitialization+0x338>)
 80071b8:	483b      	ldr	r0, [pc, #236]	; (80072a8 <LoRaMacInitialization+0x33c>)
 80071ba:	f004 fb75 	bl	800b8a8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80071be:	493b      	ldr	r1, [pc, #236]	; (80072ac <LoRaMacInitialization+0x340>)
 80071c0:	483b      	ldr	r0, [pc, #236]	; (80072b0 <LoRaMacInitialization+0x344>)
 80071c2:	f004 fb71 	bl	800b8a8 <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80071c6:	ae02      	add	r6, sp, #8
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80071c8:	493a      	ldr	r1, [pc, #232]	; (80072b4 <LoRaMacInitialization+0x348>)
 80071ca:	483b      	ldr	r0, [pc, #236]	; (80072b8 <LoRaMacInitialization+0x34c>)
 80071cc:	f004 fb6c 	bl	800b8a8 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80071d0:	0030      	movs	r0, r6
 80071d2:	f004 faef 	bl	800b7b4 <SysTimeGetMcuTime>
 80071d6:	0023      	movs	r3, r4
 80071d8:	3391      	adds	r3, #145	; 0x91
 80071da:	33ff      	adds	r3, #255	; 0xff
 80071dc:	ce06      	ldmia	r6!, {r1, r2}
 80071de:	c306      	stmia	r3!, {r1, r2}

    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80071e0:	4b36      	ldr	r3, [pc, #216]	; (80072bc <LoRaMacInitialization+0x350>)

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80071e2:	4922      	ldr	r1, [pc, #136]	; (800726c <LoRaMacInitialization+0x300>)
    LoRaMacRadioEvents.Value = 0;
 80071e4:	601f      	str	r7, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80071e6:	23d3      	movs	r3, #211	; 0xd3
 80071e8:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <LoRaMacInitialization+0x354>)
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80071ee:	4a35      	ldr	r2, [pc, #212]	; (80072c4 <LoRaMacInitialization+0x358>)
 80071f0:	3308      	adds	r3, #8
 80071f2:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80071f4:	4a34      	ldr	r2, [pc, #208]	; (80072c8 <LoRaMacInitialization+0x35c>)
 80071f6:	3308      	adds	r3, #8
 80071f8:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80071fa:	4a34      	ldr	r2, [pc, #208]	; (80072cc <LoRaMacInitialization+0x360>)
 80071fc:	3b0c      	subs	r3, #12
 80071fe:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8007200:	4f33      	ldr	r7, [pc, #204]	; (80072d0 <LoRaMacInitialization+0x364>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8007202:	4a34      	ldr	r2, [pc, #208]	; (80072d4 <LoRaMacInitialization+0x368>)
 8007204:	3308      	adds	r3, #8
 8007206:	50ca      	str	r2, [r1, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	4833      	ldr	r0, [pc, #204]	; (80072d8 <LoRaMacInitialization+0x36c>)
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8007210:	4832      	ldr	r0, [pc, #200]	; (80072dc <LoRaMacInitialization+0x370>)
 8007212:	f004 f80b 	bl	800b22c <SecureElementInit>
 8007216:	2800      	cmp	r0, #0
 8007218:	d003      	beq.n	8007222 <LoRaMacInitialization+0x2b6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800721a:	2611      	movs	r6, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800721c:	0030      	movs	r0, r6
 800721e:	b00d      	add	sp, #52	; 0x34
 8007220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8007222:	0020      	movs	r0, r4
 8007224:	f001 f9e2 	bl	80085ec <LoRaMacCryptoInit>
 8007228:	2800      	cmp	r0, #0
 800722a:	d1f6      	bne.n	800721a <LoRaMacInitialization+0x2ae>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800722c:	f000 fec4 	bl	8007fb8 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007230:	2613      	movs	r6, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8007232:	2800      	cmp	r0, #0
 8007234:	d1f2      	bne.n	800721c <LoRaMacInitialization+0x2b0>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8007236:	482a      	ldr	r0, [pc, #168]	; (80072e0 <LoRaMacInitialization+0x374>)
 8007238:	f001 fa36 	bl	80086a8 <LoRaMacCryptoSetMulticastReference>
 800723c:	1e06      	subs	r6, r0, #0
 800723e:	d1ec      	bne.n	800721a <LoRaMacInitialization+0x2ae>
    srand1( Radio.Random( ) );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	4798      	blx	r3
 8007246:	f7fd fb73 	bl	8004930 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800724a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800724c:	5d60      	ldrb	r0, [r4, r5]
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	4798      	blx	r3
    Radio.Sleep( );
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8007258:	2201      	movs	r2, #1
 800725a:	4b22      	ldr	r3, [pc, #136]	; (80072e4 <LoRaMacInitialization+0x378>)
 800725c:	4903      	ldr	r1, [pc, #12]	; (800726c <LoRaMacInitialization+0x300>)
 800725e:	54ca      	strb	r2, [r1, r3]
    return LORAMAC_STATUS_OK;
 8007260:	e7dc      	b.n	800721c <LoRaMacInitialization+0x2b0>
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	200008d0 	.word	0x200008d0
 8007268:	000006ec 	.word	0x000006ec
 800726c:	200003b8 	.word	0x200003b8
 8007270:	01000400 	.word	0x01000400
 8007274:	20000c14 	.word	0x20000c14
 8007278:	20000c28 	.word	0x20000c28
 800727c:	20000fbc 	.word	0x20000fbc
 8007280:	20000964 	.word	0x20000964
 8007284:	20000968 	.word	0x20000968
 8007288:	2000096c 	.word	0x2000096c
 800728c:	20000970 	.word	0x20000970
 8007290:	20000974 	.word	0x20000974
 8007294:	000003fe 	.word	0x000003fe
 8007298:	0000048d 	.word	0x0000048d
 800729c:	08006225 	.word	0x08006225
 80072a0:	20000728 	.word	0x20000728
 80072a4:	080055fd 	.word	0x080055fd
 80072a8:	20000740 	.word	0x20000740
 80072ac:	08005665 	.word	0x08005665
 80072b0:	20000758 	.word	0x20000758
 80072b4:	080050b9 	.word	0x080050b9
 80072b8:	200007b8 	.word	0x200007b8
 80072bc:	200003b4 	.word	0x200003b4
 80072c0:	080053d1 	.word	0x080053d1
 80072c4:	08005389 	.word	0x08005389
 80072c8:	08005015 	.word	0x08005015
 80072cc:	08004fe9 	.word	0x08004fe9
 80072d0:	0801abc8 	.word	0x0801abc8
 80072d4:	08005041 	.word	0x08005041
 80072d8:	20000704 	.word	0x20000704
 80072dc:	20000a74 	.word	0x20000a74
 80072e0:	200009a4 	.word	0x200009a4
 80072e4:	0000048e 	.word	0x0000048e

080072e8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 80072e8:	23d0      	movs	r3, #208	; 0xd0
 80072ea:	2000      	movs	r0, #0
 80072ec:	4a01      	ldr	r2, [pc, #4]	; (80072f4 <LoRaMacStart+0xc>)
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 80072f2:	4770      	bx	lr
 80072f4:	200003b8 	.word	0x200003b8

080072f8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80072f8:	b510      	push	{r4, lr}
    if( LoRaMacIsBusy( ) == false )
 80072fa:	f7fe fcf9 	bl	8005cf0 <LoRaMacIsBusy>
 80072fe:	23d0      	movs	r3, #208	; 0xd0
 8007300:	4a06      	ldr	r2, [pc, #24]	; (800731c <LoRaMacStop+0x24>)
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	2800      	cmp	r0, #0
 8007306:	d102      	bne.n	800730e <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8007308:	2101      	movs	r1, #1
 800730a:	50d1      	str	r1, [r2, r3]
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
}
 800730c:	bd10      	pop	{r4, pc}
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800730e:	58d0      	ldr	r0, [r2, r3]
 8007310:	3801      	subs	r0, #1
 8007312:	1e43      	subs	r3, r0, #1
 8007314:	4198      	sbcs	r0, r3
        return LORAMAC_STATUS_OK;
 8007316:	b2c0      	uxtb	r0, r0
 8007318:	e7f8      	b.n	800730c <LoRaMacStop+0x14>
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	200003b8 	.word	0x200003b8

08007320 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8007320:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007322:	4c2f      	ldr	r4, [pc, #188]	; (80073e0 <LoRaMacQueryTxPossible+0xc0>)
{
 8007324:	b08d      	sub	sp, #52	; 0x34
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007326:	0023      	movs	r3, r4
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007328:	6b67      	ldr	r7, [r4, #52]	; 0x34
{
 800732a:	9003      	str	r0, [sp, #12]
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800732c:	9705      	str	r7, [sp, #20]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800732e:	33c9      	adds	r3, #201	; 0xc9
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	aa02      	add	r2, sp, #8
 8007334:	7253      	strb	r3, [r2, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007336:	220a      	movs	r2, #10
 8007338:	ab02      	add	r3, sp, #8
 800733a:	18d2      	adds	r2, r2, r3
 800733c:	0023      	movs	r3, r4
 800733e:	33c8      	adds	r3, #200	; 0xc8
 8007340:	781b      	ldrb	r3, [r3, #0]
{
 8007342:	000d      	movs	r5, r1
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007344:	7013      	strb	r3, [r2, #0]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8007346:	2383      	movs	r3, #131	; 0x83
 8007348:	4926      	ldr	r1, [pc, #152]	; (80073e4 <LoRaMacQueryTxPossible+0xc4>)
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	5cc9      	ldrb	r1, [r1, r3]
 800734e:	230b      	movs	r3, #11
 8007350:	a802      	add	r0, sp, #8
 8007352:	181b      	adds	r3, r3, r0
    size_t macCmdsSize = 0;
 8007354:	2000      	movs	r0, #0
 8007356:	4684      	mov	ip, r0
 8007358:	9006      	str	r0, [sp, #24]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800735a:	7019      	strb	r1, [r3, #0]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800735c:	3003      	adds	r0, #3
    if( txInfo == NULL )
 800735e:	4565      	cmp	r5, ip
 8007360:	d036      	beq.n	80073d0 <LoRaMacQueryTxPossible+0xb0>
    }

    // Setup ADR request
    adrNext.UpdateChanMask = false;
 8007362:	4666      	mov	r6, ip
 8007364:	a807      	add	r0, sp, #28
 8007366:	7006      	strb	r6, [r0, #0]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007368:	3687      	adds	r6, #135	; 0x87
 800736a:	36ff      	adds	r6, #255	; 0xff
 800736c:	5da6      	ldrb	r6, [r4, r6]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800736e:	6047      	str	r7, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8007370:	27ff      	movs	r7, #255	; 0xff
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8007372:	7381      	strb	r1, [r0, #14]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007374:	0021      	movs	r1, r4
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007376:	7046      	strb	r6, [r0, #1]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8007378:	4e1a      	ldr	r6, [pc, #104]	; (80073e4 <LoRaMacQueryTxPossible+0xc4>)
 800737a:	00bf      	lsls	r7, r7, #2
 800737c:	59f6      	ldr	r6, [r6, r7]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800737e:	3180      	adds	r1, #128	; 0x80
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8007380:	9609      	str	r6, [sp, #36]	; 0x24
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007382:	1da6      	adds	r6, r4, #6
 8007384:	8ff6      	ldrh	r6, [r6, #62]	; 0x3e
    adrNext.Region = Nvm.MacGroup2.Region;
 8007386:	344c      	adds	r4, #76	; 0x4c
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007388:	ba76      	rev16	r6, r6
 800738a:	8186      	strh	r6, [r0, #12]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800738c:	7809      	ldrb	r1, [r1, #0]
 800738e:	73c1      	strb	r1, [r0, #15]
    adrNext.Region = Nvm.MacGroup2.Region;
 8007390:	7821      	ldrb	r1, [r4, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8007392:	ac02      	add	r4, sp, #8
    adrNext.Region = Nvm.MacGroup2.Region;
 8007394:	7401      	strb	r1, [r0, #16]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8007396:	a905      	add	r1, sp, #20
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	2109      	movs	r1, #9
 800739c:	1909      	adds	r1, r1, r4
 800739e:	f000 fd7d 	bl	8007e9c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80073a2:	2009      	movs	r0, #9
 80073a4:	5620      	ldrsb	r0, [r4, r0]
 80073a6:	f7fd fe73 	bl	8005090 <GetMaxAppPayloadWithoutFOptsLength>
 80073aa:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80073ac:	a806      	add	r0, sp, #24
 80073ae:	f000 feb5 	bl	800811c <LoRaMacCommandsGetSizeSerializedCmds>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d112      	bne.n	80073dc <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80073b6:	9b06      	ldr	r3, [sp, #24]
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	d80b      	bhi.n	80073d4 <LoRaMacQueryTxPossible+0xb4>
 80073bc:	786a      	ldrb	r2, [r5, #1]
 80073be:	4293      	cmp	r3, r2
 80073c0:	d808      	bhi.n	80073d4 <LoRaMacQueryTxPossible+0xb4>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80073c2:	1ad1      	subs	r1, r2, r3
 80073c4:	7029      	strb	r1, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80073c6:	9903      	ldr	r1, [sp, #12]
 80073c8:	18cb      	adds	r3, r1, r3
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d200      	bcs.n	80073d0 <LoRaMacQueryTxPossible+0xb0>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80073ce:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80073d0:	b00d      	add	sp, #52	; 0x34
 80073d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 80073d4:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 80073d6:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 80073d8:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80073da:	e7f9      	b.n	80073d0 <LoRaMacQueryTxPossible+0xb0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80073dc:	2013      	movs	r0, #19
 80073de:	e7f7      	b.n	80073d0 <LoRaMacQueryTxPossible+0xb0>
 80073e0:	200008d0 	.word	0x200008d0
 80073e4:	200003b8 	.word	0x200003b8

080073e8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80073e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ea:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80073ec:	2003      	movs	r0, #3
    if( mibGet == NULL )
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d02d      	beq.n	800744e <LoRaMacMibGetRequestConfirm+0x66>
    }

    switch( mibGet->Type )
 80073f2:	7820      	ldrb	r0, [r4, #0]
 80073f4:	2844      	cmp	r0, #68	; 0x44
 80073f6:	d900      	bls.n	80073fa <LoRaMacMibGetRequestConfirm+0x12>
 80073f8:	e0b6      	b.n	8007568 <LoRaMacMibGetRequestConfirm+0x180>
 80073fa:	f7f8 fe97 	bl	800012c <__gnu_thumb1_case_uqi>
 80073fe:	2a23      	.short	0x2a23
 8007400:	3a37342f 	.word	0x3a37342f
 8007404:	b5b5423d 	.word	0xb5b5423d
 8007408:	b5b5b5b5 	.word	0xb5b5b5b5
 800740c:	b5b5b5b5 	.word	0xb5b5b5b5
 8007410:	b5b5b5b5 	.word	0xb5b5b5b5
 8007414:	b5b5b5b5 	.word	0xb5b5b5b5
 8007418:	45b5b5b5 	.word	0x45b5b5b5
 800741c:	5c585249 	.word	0x5c585249
 8007420:	69636660 	.word	0x69636660
 8007424:	7774716e 	.word	0x7774716e
 8007428:	908d7d7a 	.word	0x908d7d7a
 800742c:	9c999396 	.word	0x9c999396
 8007430:	b5a4a69f 	.word	0xb5a4a69f
 8007434:	b5b5b5a9 	.word	0xb5b5b5a9
 8007438:	b5b5b5b5 	.word	0xb5b5b5b5
 800743c:	b5b5b5b5 	.word	0xb5b5b5b5
 8007440:	b5b5      	.short	0xb5b5
 8007442:	b2          	.byte	0xb2
 8007443:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8007444:	23c2      	movs	r3, #194	; 0xc2
 8007446:	4a4a      	ldr	r2, [pc, #296]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	5cd3      	ldrb	r3, [r2, r3]
 800744c:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800744e:	b004      	add	sp, #16
 8007450:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007452:	23ce      	movs	r3, #206	; 0xce
 8007454:	4a46      	ldr	r2, [pc, #280]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8007456:	005b      	lsls	r3, r3, #1
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8007458:	5cd3      	ldrb	r3, [r2, r3]
 800745a:	e03c      	b.n	80074d6 <LoRaMacMibGetRequestConfirm+0xee>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800745c:	f004 f898 	bl	800b590 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8007460:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007462:	2000      	movs	r0, #0
            break;
 8007464:	e7f3      	b.n	800744e <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8007466:	f004 f8a9 	bl	800b5bc <SecureElementGetJoinEui>
 800746a:	e7f9      	b.n	8007460 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.SePin = SecureElementGetPin( );
 800746c:	f004 f8bc 	bl	800b5e8 <SecureElementGetPin>
 8007470:	e7f6      	b.n	8007460 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8007472:	23c3      	movs	r3, #195	; 0xc3
 8007474:	4a3e      	ldr	r2, [pc, #248]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007476:	e7ee      	b.n	8007456 <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8007478:	4b3d      	ldr	r3, [pc, #244]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 800747a:	33cc      	adds	r3, #204	; 0xcc
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800747c:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 800747e:	6063      	str	r3, [r4, #4]
            break;
 8007480:	e7ef      	b.n	8007462 <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8007482:	4b3b      	ldr	r3, [pc, #236]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007484:	33d0      	adds	r3, #208	; 0xd0
 8007486:	e7f9      	b.n	800747c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8007488:	2386      	movs	r3, #134	; 0x86
 800748a:	4a39      	ldr	r2, [pc, #228]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800748c:	33ff      	adds	r3, #255	; 0xff
 800748e:	e7e3      	b.n	8007458 <LoRaMacMibGetRequestConfirm+0x70>
            getPhy.Attribute = PHY_CHANNELS;
 8007490:	231b      	movs	r3, #27
 8007492:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8007494:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007496:	4b36      	ldr	r3, [pc, #216]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007498:	334c      	adds	r3, #76	; 0x4c
 800749a:	7818      	ldrb	r0, [r3, #0]
 800749c:	f001 fc22 	bl	8008ce4 <RegionGetPhyParam>
 80074a0:	e7de      	b.n	8007460 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80074a2:	4b33      	ldr	r3, [pc, #204]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074a4:	3404      	adds	r4, #4
 80074a6:	3370      	adds	r3, #112	; 0x70
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80074a8:	cb06      	ldmia	r3!, {r1, r2}
 80074aa:	c406      	stmia	r4!, {r1, r2}
            break;
 80074ac:	e7d9      	b.n	8007462 <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80074ae:	4b30      	ldr	r3, [pc, #192]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074b0:	33ac      	adds	r3, #172	; 0xac
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80074b2:	3404      	adds	r4, #4
 80074b4:	e7f8      	b.n	80074a8 <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80074b6:	4b2e      	ldr	r3, [pc, #184]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074b8:	3404      	adds	r4, #4
 80074ba:	3378      	adds	r3, #120	; 0x78
 80074bc:	e7f4      	b.n	80074a8 <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80074be:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074c0:	33b4      	adds	r3, #180	; 0xb4
 80074c2:	e7f6      	b.n	80074b2 <LoRaMacMibGetRequestConfirm+0xca>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80074c4:	2319      	movs	r3, #25
 80074c6:	a902      	add	r1, sp, #8
 80074c8:	e7e4      	b.n	8007494 <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80074ca:	2318      	movs	r3, #24
 80074cc:	a902      	add	r1, sp, #8
 80074ce:	e7e1      	b.n	8007494 <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80074d0:	4b27      	ldr	r3, [pc, #156]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074d2:	336c      	adds	r3, #108	; 0x6c
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80074d4:	781b      	ldrb	r3, [r3, #0]
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80074d6:	7123      	strb	r3, [r4, #4]
            break;
 80074d8:	e7c3      	b.n	8007462 <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80074da:	4b25      	ldr	r3, [pc, #148]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074de:	e7ce      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80074e0:	4b23      	ldr	r3, [pc, #140]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e4:	e7cb      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80074e6:	4b22      	ldr	r3, [pc, #136]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ea:	e7c8      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80074ec:	4b20      	ldr	r3, [pc, #128]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074f0:	e7c5      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80074f2:	4b1f      	ldr	r3, [pc, #124]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 80074f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f6:	e7c2      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
 80074f8:	2302      	movs	r3, #2
 80074fa:	466a      	mov	r2, sp
 80074fc:	7213      	strb	r3, [r2, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80074fe:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007500:	4669      	mov	r1, sp
 8007502:	001a      	movs	r2, r3
 8007504:	3280      	adds	r2, #128	; 0x80
 8007506:	7812      	ldrb	r2, [r2, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007508:	334c      	adds	r3, #76	; 0x4c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800750a:	728a      	strb	r2, [r1, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800750c:	7818      	ldrb	r0, [r3, #0]
 800750e:	a902      	add	r1, sp, #8
 8007510:	f001 fbe8 	bl	8008ce4 <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8007514:	7120      	strb	r0, [r4, #4]
            break;
 8007516:	e7a4      	b.n	8007462 <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007518:	4b15      	ldr	r3, [pc, #84]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 800751a:	33c9      	adds	r3, #201	; 0xc9
 800751c:	e7da      	b.n	80074d4 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007520:	3345      	adds	r3, #69	; 0x45
 8007522:	e7d7      	b.n	80074d4 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007526:	33c8      	adds	r3, #200	; 0xc8
 8007528:	e7d4      	b.n	80074d4 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800752a:	4b11      	ldr	r3, [pc, #68]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 800752c:	3344      	adds	r3, #68	; 0x44
 800752e:	e7d1      	b.n	80074d4 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8007530:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	e7a3      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8007536:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007538:	3354      	adds	r3, #84	; 0x54
 800753a:	e7cb      	b.n	80074d4 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 800753e:	3388      	adds	r3, #136	; 0x88
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6063      	str	r3, [r4, #4]
 8007544:	e78d      	b.n	8007462 <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.Contexts = GetNvmData( );
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007548:	e799      	b.n	800747e <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 800754c:	33c4      	adds	r3, #196	; 0xc4
 800754e:	e7f7      	b.n	8007540 <LoRaMacMibGetRequestConfirm+0x158>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8007550:	23cc      	movs	r3, #204	; 0xcc
 8007552:	4a07      	ldr	r2, [pc, #28]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	58d3      	ldr	r3, [r2, r3]
 8007558:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800755a:	f001 fcd7 	bl	8008f0c <RegionGetVersion>
 800755e:	60a0      	str	r0, [r4, #8]
 8007560:	e77f      	b.n	8007462 <LoRaMacMibGetRequestConfirm+0x7a>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8007562:	238c      	movs	r3, #140	; 0x8c
 8007564:	4a02      	ldr	r2, [pc, #8]	; (8007570 <LoRaMacMibGetRequestConfirm+0x188>)
 8007566:	e791      	b.n	800748c <LoRaMacMibGetRequestConfirm+0xa4>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8007568:	0020      	movs	r0, r4
 800756a:	f000 fd14 	bl	8007f96 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800756e:	e76e      	b.n	800744e <LoRaMacMibGetRequestConfirm+0x66>
 8007570:	200008d0 	.word	0x200008d0

08007574 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	0004      	movs	r4, r0
 8007578:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800757a:	2800      	cmp	r0, #0
 800757c:	d102      	bne.n	8007584 <LoRaMacMibSetRequestConfirm+0x10>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800757e:	2003      	movs	r0, #3
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
    return status;
}
 8007580:	b006      	add	sp, #24
 8007582:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8007584:	23d0      	movs	r3, #208	; 0xd0
 8007586:	4da7      	ldr	r5, [pc, #668]	; (8007824 <LoRaMacMibSetRequestConfirm+0x2b0>)
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	58eb      	ldr	r3, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 800758c:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800758e:	079a      	lsls	r2, r3, #30
 8007590:	d4f6      	bmi.n	8007580 <LoRaMacMibSetRequestConfirm+0xc>
    switch( mibSet->Type )
 8007592:	7820      	ldrb	r0, [r4, #0]
 8007594:	2844      	cmp	r0, #68	; 0x44
 8007596:	d900      	bls.n	800759a <LoRaMacMibSetRequestConfirm+0x26>
 8007598:	e283      	b.n	8007aa2 <LoRaMacMibSetRequestConfirm+0x52e>
 800759a:	f7f8 fddb 	bl	8000154 <__gnu_thumb1_case_uhi>
 800759e:	0045      	.short	0x0045
 80075a0:	0059004b 	.word	0x0059004b
 80075a4:	0063005f 	.word	0x0063005f
 80075a8:	006d0067 	.word	0x006d0067
 80075ac:	00760072 	.word	0x00760072
 80075b0:	00860081 	.word	0x00860081
 80075b4:	0090008b 	.word	0x0090008b
 80075b8:	009a0095 	.word	0x009a0095
 80075bc:	00a4009f 	.word	0x00a4009f
 80075c0:	00ae00a9 	.word	0x00ae00a9
 80075c4:	00b800b3 	.word	0x00b800b3
 80075c8:	00c200bd 	.word	0x00c200bd
 80075cc:	00cc00c7 	.word	0x00cc00c7
 80075d0:	00d600d1 	.word	0x00d600d1
 80075d4:	00e000db 	.word	0x00e000db
 80075d8:	028200e5 	.word	0x028200e5
 80075dc:	010600ef 	.word	0x010600ef
 80075e0:	014b0119 	.word	0x014b0119
 80075e4:	015f016d 	.word	0x015f016d
 80075e8:	017b0172 	.word	0x017b0172
 80075ec:	0183017f 	.word	0x0183017f
 80075f0:	018b0187 	.word	0x018b0187
 80075f4:	018f0282 	.word	0x018f0282
 80075f8:	01c601a1 	.word	0x01c601a1
 80075fc:	01d601b7 	.word	0x01d601b7
 8007600:	01e401dd 	.word	0x01e401dd
 8007604:	01ed01e9 	.word	0x01ed01e9
 8007608:	0282026b 	.word	0x0282026b
 800760c:	02820282 	.word	0x02820282
 8007610:	02820282 	.word	0x02820282
 8007614:	02820282 	.word	0x02820282
 8007618:	02820282 	.word	0x02820282
 800761c:	02820282 	.word	0x02820282
 8007620:	02820282 	.word	0x02820282
 8007624:	027d0282 	.word	0x027d0282
            status = SwitchClass( mibSet->Param.Class );
 8007628:	7920      	ldrb	r0, [r4, #4]
 800762a:	f7fd fe2f 	bl	800528c <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
 800762e:	2800      	cmp	r0, #0
 8007630:	d1a6      	bne.n	8007580 <LoRaMacMibSetRequestConfirm+0xc>
 8007632:	e006      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8007634:	7923      	ldrb	r3, [r4, #4]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d0a1      	beq.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800763a:	22ce      	movs	r2, #206	; 0xce
 800763c:	497a      	ldr	r1, [pc, #488]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800763e:	0052      	lsls	r2, r2, #1
 8007640:	548b      	strb	r3, [r1, r2]
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	4a79      	ldr	r2, [pc, #484]	; (800782c <LoRaMacMibSetRequestConfirm+0x2b8>)
 8007646:	2000      	movs	r0, #0
 8007648:	5ca9      	ldrb	r1, [r5, r2]
 800764a:	430b      	orrs	r3, r1
 800764c:	54ab      	strb	r3, [r5, r2]
 800764e:	e797      	b.n	8007580 <LoRaMacMibSetRequestConfirm+0xc>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8007650:	6860      	ldr	r0, [r4, #4]
 8007652:	f003 ff8f 	bl	800b574 <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8007656:	2800      	cmp	r0, #0
 8007658:	d0f3      	beq.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
 800765a:	e790      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800765c:	6860      	ldr	r0, [r4, #4]
 800765e:	f003 ff9d 	bl	800b59c <SecureElementSetJoinEui>
 8007662:	e7f8      	b.n	8007656 <LoRaMacMibSetRequestConfirm+0xe2>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8007664:	6860      	ldr	r0, [r4, #4]
 8007666:	f003 ffaf 	bl	800b5c8 <SecureElementSetPin>
 800766a:	e7f4      	b.n	8007656 <LoRaMacMibSetRequestConfirm+0xe2>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800766c:	23c3      	movs	r3, #195	; 0xc3
 800766e:	7921      	ldrb	r1, [r4, #4]
 8007670:	4a6d      	ldr	r2, [pc, #436]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8007672:	005b      	lsls	r3, r3, #1
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8007674:	54d1      	strb	r1, [r2, r3]
    if( status == LORAMAC_STATUS_OK )
 8007676:	e7e4      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8007678:	4b6b      	ldr	r3, [pc, #428]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	33cc      	adds	r3, #204	; 0xcc
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800767e:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007680:	e7df      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8007682:	4b69      	ldr	r3, [pc, #420]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8007684:	6862      	ldr	r2, [r4, #4]
 8007686:	33d0      	adds	r3, #208	; 0xd0
 8007688:	e7f9      	b.n	800767e <LoRaMacMibSetRequestConfirm+0x10a>
            if( mibSet->Param.AppKey != NULL )
 800768a:	6861      	ldr	r1, [r4, #4]
 800768c:	2900      	cmp	r1, #0
 800768e:	d100      	bne.n	8007692 <LoRaMacMibSetRequestConfirm+0x11e>
 8007690:	e775      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8007692:	2000      	movs	r0, #0
 8007694:	f001 f938 	bl	8008908 <LoRaMacCryptoSetKey>
 8007698:	2800      	cmp	r0, #0
 800769a:	d0d2      	beq.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800769c:	2011      	movs	r0, #17
 800769e:	e76f      	b.n	8007580 <LoRaMacMibSetRequestConfirm+0xc>
            if( mibSet->Param.NwkKey != NULL )
 80076a0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80076a2:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d1f5      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076a8:	e769      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.JSIntKey != NULL )
 80076aa:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 80076ac:	2002      	movs	r0, #2
            if( mibSet->Param.JSIntKey != NULL )
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d1f0      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076b2:	e764      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.JSEncKey != NULL )
 80076b4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 80076b6:	2003      	movs	r0, #3
            if( mibSet->Param.JSEncKey != NULL )
 80076b8:	2900      	cmp	r1, #0
 80076ba:	d1eb      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076bc:	e75f      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.FNwkSIntKey != NULL )
 80076be:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 80076c0:	2004      	movs	r0, #4
            if( mibSet->Param.FNwkSIntKey != NULL )
 80076c2:	2900      	cmp	r1, #0
 80076c4:	d1e6      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076c6:	e75a      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.SNwkSIntKey != NULL )
 80076c8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 80076ca:	2005      	movs	r0, #5
            if( mibSet->Param.SNwkSIntKey != NULL )
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d1e1      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076d0:	e755      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.NwkSEncKey != NULL )
 80076d2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 80076d4:	2006      	movs	r0, #6
            if( mibSet->Param.NwkSEncKey != NULL )
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d1dc      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076da:	e750      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.AppSKey != NULL )
 80076dc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80076de:	2007      	movs	r0, #7
            if( mibSet->Param.AppSKey != NULL )
 80076e0:	2900      	cmp	r1, #0
 80076e2:	d1d7      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076e4:	e74b      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKEKey != NULL )
 80076e6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80076e8:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 80076ea:	2900      	cmp	r1, #0
 80076ec:	d1d2      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076ee:	e746      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey0 != NULL )
 80076f0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80076f2:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d1cd      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 80076f8:	e741      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey0 != NULL )
 80076fa:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80076fc:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 80076fe:	2900      	cmp	r1, #0
 8007700:	d1c8      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007702:	e73c      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8007704:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8007706:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8007708:	2900      	cmp	r1, #0
 800770a:	d1c3      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 800770c:	e737      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey1 != NULL )
 800770e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8007710:	2083      	movs	r0, #131	; 0x83
            if( mibSet->Param.McKey1 != NULL )
 8007712:	2900      	cmp	r1, #0
 8007714:	d1be      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007716:	e732      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey1 != NULL )
 8007718:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800771a:	2084      	movs	r0, #132	; 0x84
            if( mibSet->Param.McAppSKey1 != NULL )
 800771c:	2900      	cmp	r1, #0
 800771e:	d1b9      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007720:	e72d      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8007722:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8007724:	2085      	movs	r0, #133	; 0x85
            if( mibSet->Param.McNwkSKey1 != NULL )
 8007726:	2900      	cmp	r1, #0
 8007728:	d1b4      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 800772a:	e728      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey2 != NULL )
 800772c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800772e:	2086      	movs	r0, #134	; 0x86
            if( mibSet->Param.McKey2 != NULL )
 8007730:	2900      	cmp	r1, #0
 8007732:	d1af      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007734:	e723      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey2 != NULL )
 8007736:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8007738:	2087      	movs	r0, #135	; 0x87
            if( mibSet->Param.McAppSKey2 != NULL )
 800773a:	2900      	cmp	r1, #0
 800773c:	d1aa      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 800773e:	e71e      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8007740:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8007742:	2088      	movs	r0, #136	; 0x88
            if( mibSet->Param.McNwkSKey2 != NULL )
 8007744:	2900      	cmp	r1, #0
 8007746:	d1a5      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007748:	e719      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McKey3 != NULL )
 800774a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800774c:	2089      	movs	r0, #137	; 0x89
            if( mibSet->Param.McKey3 != NULL )
 800774e:	2900      	cmp	r1, #0
 8007750:	d1a0      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007752:	e714      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McAppSKey3 != NULL )
 8007754:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8007756:	208a      	movs	r0, #138	; 0x8a
            if( mibSet->Param.McAppSKey3 != NULL )
 8007758:	2900      	cmp	r1, #0
 800775a:	d19b      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 800775c:	e70f      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.McNwkSKey3 != NULL )
 800775e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8007760:	208b      	movs	r0, #139	; 0x8b
            if( mibSet->Param.McNwkSKey3 != NULL )
 8007762:	2900      	cmp	r1, #0
 8007764:	d196      	bne.n	8007694 <LoRaMacMibSetRequestConfirm+0x120>
 8007766:	e70a      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8007768:	2386      	movs	r3, #134	; 0x86
 800776a:	7920      	ldrb	r0, [r4, #4]
 800776c:	4a2e      	ldr	r2, [pc, #184]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800776e:	33ff      	adds	r3, #255	; 0xff
 8007770:	54d0      	strb	r0, [r2, r3]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8007772:	4b2f      	ldr	r3, [pc, #188]	; (8007830 <LoRaMacMibSetRequestConfirm+0x2bc>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
 800777a:	e762      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800777c:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800777e:	4e2a      	ldr	r6, [pc, #168]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8007780:	aa02      	add	r2, sp, #8
 8007782:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007784:	0033      	movs	r3, r6
 8007786:	3381      	adds	r3, #129	; 0x81
 8007788:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800778a:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800778c:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800778e:	0033      	movs	r3, r6
 8007790:	334c      	adds	r3, #76	; 0x4c
 8007792:	2207      	movs	r2, #7
 8007794:	7818      	ldrb	r0, [r3, #0]
 8007796:	f001 fad3 	bl	8008d40 <RegionVerify>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800779a:	3670      	adds	r6, #112	; 0x70
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800779c:	2800      	cmp	r0, #0
 800779e:	d100      	bne.n	80077a2 <LoRaMacMibSetRequestConfirm+0x22e>
 80077a0:	e6ed      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80077a2:	3404      	adds	r4, #4
 80077a4:	cc0c      	ldmia	r4!, {r2, r3}
 80077a6:	c60c      	stmia	r6!, {r2, r3}
    if( status == LORAMAC_STATUS_OK )
 80077a8:	e74b      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80077aa:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077ac:	4e1e      	ldr	r6, [pc, #120]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80077ae:	aa02      	add	r2, sp, #8
 80077b0:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077b2:	0033      	movs	r3, r6
 80077b4:	3381      	adds	r3, #129	; 0x81
 80077b6:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80077b8:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077ba:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80077bc:	0033      	movs	r3, r6
 80077be:	334c      	adds	r3, #76	; 0x4c
 80077c0:	2207      	movs	r2, #7
 80077c2:	7818      	ldrb	r0, [r3, #0]
 80077c4:	f001 fabc 	bl	8008d40 <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80077c8:	36ac      	adds	r6, #172	; 0xac
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d1e9      	bne.n	80077a2 <LoRaMacMibSetRequestConfirm+0x22e>
 80077ce:	e6d6      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80077d0:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077d2:	4e15      	ldr	r6, [pc, #84]	; (8007828 <LoRaMacMibSetRequestConfirm+0x2b4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80077d4:	aa02      	add	r2, sp, #8
 80077d6:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077d8:	0033      	movs	r3, r6
 80077da:	3381      	adds	r3, #129	; 0x81
 80077dc:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80077de:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077e0:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80077e2:	0033      	movs	r3, r6
 80077e4:	334c      	adds	r3, #76	; 0x4c
 80077e6:	2207      	movs	r2, #7
 80077e8:	7818      	ldrb	r0, [r3, #0]
 80077ea:	f001 faa9 	bl	8008d40 <RegionVerify>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d100      	bne.n	80077f4 <LoRaMacMibSetRequestConfirm+0x280>
 80077f2:	e6c4      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80077f4:	0033      	movs	r3, r6
 80077f6:	3404      	adds	r4, #4
 80077f8:	3378      	adds	r3, #120	; 0x78
 80077fa:	cc06      	ldmia	r4!, {r1, r2}
 80077fc:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80077fe:	23c2      	movs	r3, #194	; 0xc2
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	5cf3      	ldrb	r3, [r6, r3]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d000      	beq.n	800780a <LoRaMacMibSetRequestConfirm+0x296>
 8007808:	e71b      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
 800780a:	339b      	adds	r3, #155	; 0x9b
 800780c:	33ff      	adds	r3, #255	; 0xff
 800780e:	5cf3      	ldrb	r3, [r6, r3]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d100      	bne.n	8007816 <LoRaMacMibSetRequestConfirm+0x2a2>
 8007814:	e715      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
                    Radio.Sleep( );
 8007816:	4b06      	ldr	r3, [pc, #24]	; (8007830 <LoRaMacMibSetRequestConfirm+0x2bc>)
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800781e:	f7fd fcf5 	bl	800520c <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
 8007822:	e70e      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
 8007824:	200003b8 	.word	0x200003b8
 8007828:	200008d0 	.word	0x200008d0
 800782c:	0000048d 	.word	0x0000048d
 8007830:	0801abc8 	.word	0x0801abc8
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007834:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007836:	4e9d      	ldr	r6, [pc, #628]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007838:	aa02      	add	r2, sp, #8
 800783a:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800783c:	0033      	movs	r3, r6
 800783e:	3381      	adds	r3, #129	; 0x81
 8007840:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007842:	a903      	add	r1, sp, #12
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007844:	7153      	strb	r3, [r2, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007846:	0033      	movs	r3, r6
 8007848:	334c      	adds	r3, #76	; 0x4c
 800784a:	2207      	movs	r2, #7
 800784c:	7818      	ldrb	r0, [r3, #0]
 800784e:	f001 fa77 	bl	8008d40 <RegionVerify>
 8007852:	2800      	cmp	r0, #0
 8007854:	d100      	bne.n	8007858 <LoRaMacMibSetRequestConfirm+0x2e4>
 8007856:	e692      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8007858:	36b4      	adds	r6, #180	; 0xb4
 800785a:	e7a2      	b.n	80077a2 <LoRaMacMibSetRequestConfirm+0x22e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	a904      	add	r1, sp, #16
 8007860:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8007862:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8007864:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8007866:	4b91      	ldr	r3, [pc, #580]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 8007868:	334c      	adds	r3, #76	; 0x4c
 800786a:	7818      	ldrb	r0, [r3, #0]
 800786c:	f001 fa86 	bl	8008d7c <RegionChanMaskSet>
 8007870:	2800      	cmp	r0, #0
 8007872:	d000      	beq.n	8007876 <LoRaMacMibSetRequestConfirm+0x302>
 8007874:	e6e5      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
 8007876:	e682      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	a904      	add	r1, sp, #16
 800787c:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800787e:	2300      	movs	r3, #0
 8007880:	e7f0      	b.n	8007864 <LoRaMacMibSetRequestConfirm+0x2f0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8007882:	7922      	ldrb	r2, [r4, #4]
 8007884:	1e53      	subs	r3, r2, #1
 8007886:	2b0e      	cmp	r3, #14
 8007888:	d900      	bls.n	800788c <LoRaMacMibSetRequestConfirm+0x318>
 800788a:	e678      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800788c:	4b87      	ldr	r3, [pc, #540]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 800788e:	336c      	adds	r3, #108	; 0x6c
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8007890:	701a      	strb	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007892:	e6d6      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	4b85      	ldr	r3, [pc, #532]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 8007898:	659a      	str	r2, [r3, #88]	; 0x58
    if( status == LORAMAC_STATUS_OK )
 800789a:	e6d2      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800789c:	6862      	ldr	r2, [r4, #4]
 800789e:	4b83      	ldr	r3, [pc, #524]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 80078a0:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
 80078a2:	e6ce      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80078a4:	6862      	ldr	r2, [r4, #4]
 80078a6:	4b81      	ldr	r3, [pc, #516]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 80078a8:	661a      	str	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
 80078aa:	e6ca      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80078ac:	6862      	ldr	r2, [r4, #4]
 80078ae:	4b7f      	ldr	r3, [pc, #508]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 80078b0:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
 80078b2:	e6c6      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80078b4:	6862      	ldr	r2, [r4, #4]
 80078b6:	4b7d      	ldr	r3, [pc, #500]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 80078b8:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
 80078ba:	e6c2      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80078bc:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80078be:	4c7b      	ldr	r4, [pc, #492]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80078c0:	aa02      	add	r2, sp, #8
 80078c2:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80078c4:	0023      	movs	r3, r4
 80078c6:	334c      	adds	r3, #76	; 0x4c
 80078c8:	2206      	movs	r2, #6
 80078ca:	7818      	ldrb	r0, [r3, #0]
 80078cc:	a903      	add	r1, sp, #12
 80078ce:	f001 fa37 	bl	8008d40 <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80078d2:	34c9      	adds	r4, #201	; 0xc9
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d100      	bne.n	80078da <LoRaMacMibSetRequestConfirm+0x366>
 80078d8:	e651      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80078da:	ab02      	add	r3, sp, #8
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	e013      	b.n	8007908 <LoRaMacMibSetRequestConfirm+0x394>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80078e0:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80078e2:	4c72      	ldr	r4, [pc, #456]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80078e4:	ae03      	add	r6, sp, #12
 80078e6:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80078e8:	0023      	movs	r3, r4
 80078ea:	3380      	adds	r3, #128	; 0x80
 80078ec:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80078ee:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80078f0:	70b3      	strb	r3, [r6, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80078f2:	0023      	movs	r3, r4
 80078f4:	334c      	adds	r3, #76	; 0x4c
 80078f6:	0031      	movs	r1, r6
 80078f8:	7818      	ldrb	r0, [r3, #0]
 80078fa:	f001 fa21 	bl	8008d40 <RegionVerify>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d100      	bne.n	8007904 <LoRaMacMibSetRequestConfirm+0x390>
 8007902:	e63c      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8007904:	7833      	ldrb	r3, [r6, #0]
 8007906:	3445      	adds	r4, #69	; 0x45
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8007908:	7023      	strb	r3, [r4, #0]
    if( status == LORAMAC_STATUS_OK )
 800790a:	e69a      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800790c:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800790e:	4c67      	ldr	r4, [pc, #412]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8007910:	aa02      	add	r2, sp, #8
 8007912:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8007914:	0023      	movs	r3, r4
 8007916:	334c      	adds	r3, #76	; 0x4c
 8007918:	220a      	movs	r2, #10
 800791a:	7818      	ldrb	r0, [r3, #0]
 800791c:	a903      	add	r1, sp, #12
 800791e:	f001 fa0f 	bl	8008d40 <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8007922:	34c8      	adds	r4, #200	; 0xc8
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8007924:	2800      	cmp	r0, #0
 8007926:	d1d8      	bne.n	80078da <LoRaMacMibSetRequestConfirm+0x366>
 8007928:	e629      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800792a:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800792c:	4c5f      	ldr	r4, [pc, #380]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800792e:	aa02      	add	r2, sp, #8
 8007930:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8007932:	0023      	movs	r3, r4
 8007934:	334c      	adds	r3, #76	; 0x4c
 8007936:	2209      	movs	r2, #9
 8007938:	7818      	ldrb	r0, [r3, #0]
 800793a:	a903      	add	r1, sp, #12
 800793c:	f001 fa00 	bl	8008d40 <RegionVerify>
 8007940:	2800      	cmp	r0, #0
 8007942:	d100      	bne.n	8007946 <LoRaMacMibSetRequestConfirm+0x3d2>
 8007944:	e61b      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8007946:	3444      	adds	r4, #68	; 0x44
 8007948:	e7c7      	b.n	80078da <LoRaMacMibSetRequestConfirm+0x366>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800794a:	4b58      	ldr	r3, [pc, #352]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 800794c:	6862      	ldr	r2, [r4, #4]
 800794e:	0019      	movs	r1, r3
 8007950:	318c      	adds	r1, #140	; 0x8c
 8007952:	600a      	str	r2, [r1, #0]
 8007954:	651a      	str	r2, [r3, #80]	; 0x50
    if( status == LORAMAC_STATUS_OK )
 8007956:	e674      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8007958:	4b54      	ldr	r3, [pc, #336]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 800795a:	7922      	ldrb	r2, [r4, #4]
 800795c:	0019      	movs	r1, r3
 800795e:	3190      	adds	r1, #144	; 0x90
 8007960:	700a      	strb	r2, [r1, #0]
 8007962:	3354      	adds	r3, #84	; 0x54
 8007964:	e794      	b.n	8007890 <LoRaMacMibSetRequestConfirm+0x31c>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8007966:	4b51      	ldr	r3, [pc, #324]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 8007968:	6862      	ldr	r2, [r4, #4]
 800796a:	3388      	adds	r3, #136	; 0x88
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800796c:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800796e:	e668      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8007970:	4b4e      	ldr	r3, [pc, #312]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	33c4      	adds	r3, #196	; 0xc4
 8007976:	e7f9      	b.n	800796c <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.Contexts != 0 )
 8007978:	6864      	ldr	r4, [r4, #4]
 800797a:	2c00      	cmp	r4, #0
 800797c:	d100      	bne.n	8007980 <LoRaMacMibSetRequestConfirm+0x40c>
 800797e:	e5fe      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
        return LORAMAC_STATUS_BUSY;
 8007980:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8007982:	4283      	cmp	r3, r0
 8007984:	d000      	beq.n	8007988 <LoRaMacMibSetRequestConfirm+0x414>
 8007986:	e5fb      	b.n	8007580 <LoRaMacMibSetRequestConfirm+0xc>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8007988:	2130      	movs	r1, #48	; 0x30
 800798a:	0020      	movs	r0, r4
 800798c:	f7fc fffa 	bl	8004984 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8007990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007992:	4298      	cmp	r0, r3
 8007994:	d104      	bne.n	80079a0 <LoRaMacMibSetRequestConfirm+0x42c>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8007996:	2234      	movs	r2, #52	; 0x34
 8007998:	0021      	movs	r1, r4
 800799a:	4844      	ldr	r0, [pc, #272]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 800799c:	f7fc ffd9 	bl	8004952 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80079a0:	0026      	movs	r6, r4
 80079a2:	3634      	adds	r6, #52	; 0x34
 80079a4:	2114      	movs	r1, #20
 80079a6:	0030      	movs	r0, r6
 80079a8:	f7fc ffec 	bl	8004984 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 80079ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80079ae:	4298      	cmp	r0, r3
 80079b0:	d104      	bne.n	80079bc <LoRaMacMibSetRequestConfirm+0x448>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80079b2:	2218      	movs	r2, #24
 80079b4:	0031      	movs	r1, r6
 80079b6:	483e      	ldr	r0, [pc, #248]	; (8007ab0 <LoRaMacMibSetRequestConfirm+0x53c>)
 80079b8:	f7fc ffcb 	bl	8004952 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80079bc:	0026      	movs	r6, r4
 80079be:	21aa      	movs	r1, #170	; 0xaa
 80079c0:	364c      	adds	r6, #76	; 0x4c
 80079c2:	0030      	movs	r0, r6
 80079c4:	0049      	lsls	r1, r1, #1
 80079c6:	f7fc ffdd 	bl	8004984 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 80079ca:	23d0      	movs	r3, #208	; 0xd0
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	58e3      	ldr	r3, [r4, r3]
 80079d0:	4298      	cmp	r0, r3
 80079d2:	d119      	bne.n	8007a08 <LoRaMacMibSetRequestConfirm+0x494>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80079d4:	22ac      	movs	r2, #172	; 0xac
 80079d6:	0031      	movs	r1, r6
 80079d8:	0052      	lsls	r2, r2, #1
 80079da:	4836      	ldr	r0, [pc, #216]	; (8007ab4 <LoRaMacMibSetRequestConfirm+0x540>)
 80079dc:	f7fc ffb9 	bl	8004952 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80079e0:	4b35      	ldr	r3, [pc, #212]	; (8007ab8 <LoRaMacMibSetRequestConfirm+0x544>)
 80079e2:	5cea      	ldrb	r2, [r5, r3]
 80079e4:	3b33      	subs	r3, #51	; 0x33
 80079e6:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80079e8:	22fb      	movs	r2, #251	; 0xfb
 80079ea:	4b30      	ldr	r3, [pc, #192]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 80079ec:	0092      	lsls	r2, r2, #2
 80079ee:	6f99      	ldr	r1, [r3, #120]	; 0x78
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80079f0:	3381      	adds	r3, #129	; 0x81
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80079f2:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80079f4:	781a      	ldrb	r2, [r3, #0]
 80079f6:	23fe      	movs	r3, #254	; 0xfe
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80079fc:	2201      	movs	r2, #1
 80079fe:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <LoRaMacMibSetRequestConfirm+0x548>)
 8007a00:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007a02:	4b2f      	ldr	r3, [pc, #188]	; (8007ac0 <LoRaMacMibSetRequestConfirm+0x54c>)
 8007a04:	1892      	adds	r2, r2, r2
 8007a06:	54ea      	strb	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8007a08:	0026      	movs	r6, r4
 8007a0a:	21ce      	movs	r1, #206	; 0xce
 8007a0c:	36a5      	adds	r6, #165	; 0xa5
 8007a0e:	36ff      	adds	r6, #255	; 0xff
 8007a10:	0030      	movs	r0, r6
 8007a12:	0049      	lsls	r1, r1, #1
 8007a14:	f7fc ffb6 	bl	8004984 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8007a18:	23d0      	movs	r3, #208	; 0xd0
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	58e3      	ldr	r3, [r4, r3]
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	d105      	bne.n	8007a2e <LoRaMacMibSetRequestConfirm+0x4ba>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8007a22:	22d0      	movs	r2, #208	; 0xd0
 8007a24:	0031      	movs	r1, r6
 8007a26:	4827      	ldr	r0, [pc, #156]	; (8007ac4 <LoRaMacMibSetRequestConfirm+0x550>)
 8007a28:	0052      	lsls	r2, r2, #1
 8007a2a:	f7fc ff92 	bl	8004952 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8007a2e:	23d1      	movs	r3, #209	; 0xd1
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	18e6      	adds	r6, r4, r3
 8007a34:	2110      	movs	r1, #16
 8007a36:	0030      	movs	r0, r6
 8007a38:	f7fc ffa4 	bl	8004984 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8007a3c:	23d5      	movs	r3, #213	; 0xd5
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	58e3      	ldr	r3, [r4, r3]
 8007a42:	4298      	cmp	r0, r3
 8007a44:	d104      	bne.n	8007a50 <LoRaMacMibSetRequestConfirm+0x4dc>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8007a46:	2214      	movs	r2, #20
 8007a48:	0031      	movs	r1, r6
 8007a4a:	481f      	ldr	r0, [pc, #124]	; (8007ac8 <LoRaMacMibSetRequestConfirm+0x554>)
 8007a4c:	f7fc ff81 	bl	8004952 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8007a50:	4b1e      	ldr	r3, [pc, #120]	; (8007acc <LoRaMacMibSetRequestConfirm+0x558>)
 8007a52:	2114      	movs	r1, #20
 8007a54:	18e6      	adds	r6, r4, r3
 8007a56:	0030      	movs	r0, r6
 8007a58:	f7fc ff94 	bl	8004984 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8007a5c:	23dd      	movs	r3, #221	; 0xdd
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	58e3      	ldr	r3, [r4, r3]
 8007a62:	4298      	cmp	r0, r3
 8007a64:	d000      	beq.n	8007a68 <LoRaMacMibSetRequestConfirm+0x4f4>
 8007a66:	e5ec      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8007a68:	2218      	movs	r2, #24
 8007a6a:	0031      	movs	r1, r6
 8007a6c:	4818      	ldr	r0, [pc, #96]	; (8007ad0 <LoRaMacMibSetRequestConfirm+0x55c>)
 8007a6e:	f7fc ff70 	bl	8004952 <memcpy1>
    if( status == LORAMAC_STATUS_OK )
 8007a72:	e5e6      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8007a74:	79a3      	ldrb	r3, [r4, #6]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d900      	bls.n	8007a7c <LoRaMacMibSetRequestConfirm+0x508>
 8007a7a:	e580      	b.n	800757e <LoRaMacMibSetRequestConfirm+0xa>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8007a7c:	23cc      	movs	r3, #204	; 0xcc
 8007a7e:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 8007a80:	6861      	ldr	r1, [r4, #4]
 8007a82:	005b      	lsls	r3, r3, #1
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8007a84:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8007a86:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8007a88:	f000 fdd0 	bl	800862c <LoRaMacCryptoSetLrWanVersion>
 8007a8c:	0003      	movs	r3, r0
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007a8e:	2011      	movs	r0, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d100      	bne.n	8007a96 <LoRaMacMibSetRequestConfirm+0x522>
 8007a94:	e5d5      	b.n	8007642 <LoRaMacMibSetRequestConfirm+0xce>
 8007a96:	e573      	b.n	8007580 <LoRaMacMibSetRequestConfirm+0xc>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8007a98:	238c      	movs	r3, #140	; 0x8c
 8007a9a:	7921      	ldrb	r1, [r4, #4]
 8007a9c:	4a03      	ldr	r2, [pc, #12]	; (8007aac <LoRaMacMibSetRequestConfirm+0x538>)
 8007a9e:	33ff      	adds	r3, #255	; 0xff
 8007aa0:	e5e8      	b.n	8007674 <LoRaMacMibSetRequestConfirm+0x100>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8007aa2:	0020      	movs	r0, r4
 8007aa4:	f000 fa79 	bl	8007f9a <LoRaMacMibClassBSetRequestConfirm>
            break;
 8007aa8:	e5c1      	b.n	800762e <LoRaMacMibSetRequestConfirm+0xba>
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	200008d0 	.word	0x200008d0
 8007ab0:	20000904 	.word	0x20000904
 8007ab4:	2000091c 	.word	0x2000091c
 8007ab8:	0000041b 	.word	0x0000041b
 8007abc:	000003f9 	.word	0x000003f9
 8007ac0:	000003fa 	.word	0x000003fa
 8007ac4:	20000a74 	.word	0x20000a74
 8007ac8:	20000c14 	.word	0x20000c14
 8007acc:	000006d4 	.word	0x000006d4
 8007ad0:	20000fa4 	.word	0x20000fa4

08007ad4 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007ad4:	2300      	movs	r3, #0
{
 8007ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad8:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007ada:	aa02      	add	r2, sp, #8
{
 8007adc:	0005      	movs	r5, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007ade:	2403      	movs	r4, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007ae0:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 8007ae2:	4298      	cmp	r0, r3
 8007ae4:	d005      	beq.n	8007af2 <LoRaMacMlmeRequest+0x1e>
    }
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007ae6:	6103      	str	r3, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 8007ae8:	f7fe f902 	bl	8005cf0 <LoRaMacIsBusy>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d003      	beq.n	8007af8 <LoRaMacMlmeRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8007af0:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8007af2:	0020      	movs	r0, r4
 8007af4:	b009      	add	sp, #36	; 0x24
 8007af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8007af8:	f000 fc58 	bl	80083ac <LoRaMacConfirmQueueIsFull>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1f7      	bne.n	8007af0 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8007b00:	f000 fc4e 	bl	80083a0 <LoRaMacConfirmQueueGetCnt>
 8007b04:	1e01      	subs	r1, r0, #0
 8007b06:	d103      	bne.n	8007b10 <LoRaMacMlmeRequest+0x3c>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8007b08:	2214      	movs	r2, #20
 8007b0a:	485c      	ldr	r0, [pc, #368]	; (8007c7c <LoRaMacMlmeRequest+0x1a8>)
 8007b0c:	f7fc ff36 	bl	800497c <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	4e5b      	ldr	r6, [pc, #364]	; (8007c80 <LoRaMacMlmeRequest+0x1ac>)
 8007b14:	4a5b      	ldr	r2, [pc, #364]	; (8007c84 <LoRaMacMlmeRequest+0x1b0>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007b16:	485c      	ldr	r0, [pc, #368]	; (8007c88 <LoRaMacMlmeRequest+0x1b4>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b18:	54b3      	strb	r3, [r6, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	5c31      	ldrb	r1, [r6, r0]
    queueElement.Request = mlmeRequest->Type;
 8007b1e:	ac03      	add	r4, sp, #12
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007b20:	430a      	orrs	r2, r1
 8007b22:	5432      	strb	r2, [r6, r0]
    queueElement.RestrictCommonReadyToHandle = false;
 8007b24:	2200      	movs	r2, #0
    queueElement.Request = mlmeRequest->Type;
 8007b26:	7828      	ldrb	r0, [r5, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b28:	7063      	strb	r3, [r4, #1]
    queueElement.Request = mlmeRequest->Type;
 8007b2a:	7020      	strb	r0, [r4, #0]
    switch( mlmeRequest->Type )
 8007b2c:	3801      	subs	r0, #1
    queueElement.RestrictCommonReadyToHandle = false;
 8007b2e:	70e2      	strb	r2, [r4, #3]
    queueElement.ReadyToHandle = false;
 8007b30:	70a2      	strb	r2, [r4, #2]
    switch( mlmeRequest->Type )
 8007b32:	280c      	cmp	r0, #12
 8007b34:	d900      	bls.n	8007b38 <LoRaMacMlmeRequest+0x64>
 8007b36:	e09b      	b.n	8007c70 <LoRaMacMlmeRequest+0x19c>
 8007b38:	f7f8 faf8 	bl	800012c <__gnu_thumb1_case_uqi>
 8007b3c:	649a9a07 	.word	0x649a9a07
 8007b40:	9a9a9a6d 	.word	0x9a9a9a6d
 8007b44:	788e9a74 	.word	0x788e9a74
 8007b48:	8a          	.byte	0x8a
 8007b49:	00          	.byte	0x00
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8007b4a:	23d0      	movs	r3, #208	; 0xd0
 8007b4c:	2720      	movs	r7, #32
 8007b4e:	2220      	movs	r2, #32
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	58f3      	ldr	r3, [r6, r3]
 8007b54:	401f      	ands	r7, r3
 8007b56:	4213      	tst	r3, r2
 8007b58:	d1ca      	bne.n	8007af0 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8007b5a:	792b      	ldrb	r3, [r5, #4]
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d12c      	bne.n	8007bbc <LoRaMacMlmeRequest+0xe8>
                ResetMacParameters( );
 8007b62:	f7fd fc59 	bl	8005418 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8007b66:	2105      	movs	r1, #5
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <LoRaMacMlmeRequest+0x1b8>)
 8007b6a:	003a      	movs	r2, r7
 8007b6c:	5669      	ldrsb	r1, [r5, r1]
 8007b6e:	7818      	ldrb	r0, [r3, #0]
 8007b70:	f001 f998 	bl	8008ea4 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8007b74:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8007b76:	4f46      	ldr	r7, [pc, #280]	; (8007c90 <LoRaMacMlmeRequest+0x1bc>)
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8007b78:	7063      	strb	r3, [r4, #1]
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8007b7a:	3745      	adds	r7, #69	; 0x45
 8007b7c:	7038      	strb	r0, [r7, #0]
                status = SendReJoinReq( JOIN_REQ );
 8007b7e:	20ff      	movs	r0, #255	; 0xff
 8007b80:	f7fe fc12 	bl	80063a8 <SendReJoinReq>
 8007b84:	1e04      	subs	r4, r0, #0
                if( status != LORAMAC_STATUS_OK )
 8007b86:	d007      	beq.n	8007b98 <LoRaMacMlmeRequest+0xc4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8007b88:	2105      	movs	r1, #5
 8007b8a:	4b40      	ldr	r3, [pc, #256]	; (8007c8c <LoRaMacMlmeRequest+0x1b8>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	5669      	ldrsb	r1, [r5, r1]
 8007b90:	7818      	ldrb	r0, [r3, #0]
 8007b92:	f001 f987 	bl	8008ea4 <RegionAlternateDr>
 8007b96:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007b98:	2392      	movs	r3, #146	; 0x92
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	58f3      	ldr	r3, [r6, r3]
 8007b9e:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	d067      	beq.n	8007c74 <LoRaMacMlmeRequest+0x1a0>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8007ba4:	f000 fbfc 	bl	80083a0 <LoRaMacConfirmQueueGetCnt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d1a2      	bne.n	8007af2 <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007bac:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8007bae:	4b39      	ldr	r3, [pc, #228]	; (8007c94 <LoRaMacMlmeRequest+0x1c0>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007bb0:	4935      	ldr	r1, [pc, #212]	; (8007c88 <LoRaMacMlmeRequest+0x1b4>)
            MacCtx.NodeAckRequested = false;
 8007bb2:	54f0      	strb	r0, [r6, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007bb4:	5c73      	ldrb	r3, [r6, r1]
 8007bb6:	4393      	bics	r3, r2
 8007bb8:	5473      	strb	r3, [r6, r1]
 8007bba:	e79a      	b.n	8007af2 <LoRaMacMlmeRequest+0x1e>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8007bbc:	9b01      	ldr	r3, [sp, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007bbe:	2402      	movs	r4, #2
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d1e9      	bne.n	8007b98 <LoRaMacMlmeRequest+0xc4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8007bc4:	238a      	movs	r3, #138	; 0x8a
 8007bc6:	4a32      	ldr	r2, [pc, #200]	; (8007c90 <LoRaMacMlmeRequest+0x1bc>)
 8007bc8:	33ff      	adds	r3, #255	; 0xff
 8007bca:	54d7      	strb	r7, [r2, r3]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007bcc:	0013      	movs	r3, r2
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007bce:	a904      	add	r1, sp, #16
 8007bd0:	730c      	strb	r4, [r1, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007bd2:	334c      	adds	r3, #76	; 0x4c
 8007bd4:	7818      	ldrb	r0, [r3, #0]
 8007bd6:	f001 f8a5 	bl	8008d24 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8007bda:	23ce      	movs	r3, #206	; 0xce
 8007bdc:	792a      	ldrb	r2, [r5, #4]
 8007bde:	492c      	ldr	r1, [pc, #176]	; (8007c90 <LoRaMacMlmeRequest+0x1bc>)
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	54ca      	strb	r2, [r1, r3]
                queueElement.ReadyToHandle = true;
 8007be4:	9a01      	ldr	r2, [sp, #4]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007be6:	ab03      	add	r3, sp, #12
                queueElement.ReadyToHandle = true;
 8007be8:	709a      	strb	r2, [r3, #2]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007bea:	705f      	strb	r7, [r3, #1]
                MacCtx.MacCallbacks->MacProcessNotify( );
 8007bec:	23d2      	movs	r3, #210	; 0xd2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	58f3      	ldr	r3, [r6, r3]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007bf6:	2120      	movs	r1, #32
 8007bf8:	4a23      	ldr	r2, [pc, #140]	; (8007c88 <LoRaMacMlmeRequest+0x1b4>)
 8007bfa:	5cb3      	ldrb	r3, [r6, r2]
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	54b3      	strb	r3, [r6, r2]
            status = LORAMAC_STATUS_OK;
 8007c00:	2400      	movs	r4, #0
 8007c02:	e7c9      	b.n	8007b98 <LoRaMacMlmeRequest+0xc4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007c04:	2200      	movs	r2, #0
 8007c06:	2002      	movs	r0, #2
 8007c08:	a902      	add	r1, sp, #8
 8007c0a:	f000 f9e3 	bl	8007fd4 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007c0e:	2413      	movs	r4, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d1c1      	bne.n	8007b98 <LoRaMacMlmeRequest+0xc4>
 8007c14:	e7f4      	b.n	8007c00 <LoRaMacMlmeRequest+0x12c>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8007c16:	7b2a      	ldrb	r2, [r5, #12]
 8007c18:	88a8      	ldrh	r0, [r5, #4]
 8007c1a:	68a9      	ldr	r1, [r5, #8]
 8007c1c:	f7fe fbf2 	bl	8006404 <SetTxContinuousWave>
 8007c20:	0004      	movs	r4, r0
            break;
 8007c22:	e7b9      	b.n	8007b98 <LoRaMacMlmeRequest+0xc4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007c24:	2200      	movs	r2, #0
 8007c26:	200d      	movs	r0, #13
 8007c28:	a902      	add	r1, sp, #8
 8007c2a:	e7ee      	b.n	8007c0a <LoRaMacMlmeRequest+0x136>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007c2c:	23c2      	movs	r3, #194	; 0xc2
 8007c2e:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <LoRaMacMlmeRequest+0x1bc>)
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	5cd3      	ldrb	r3, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007c34:	2402      	movs	r4, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1ae      	bne.n	8007b98 <LoRaMacMlmeRequest+0xc4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8007c3a:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8007c3c:	0760      	lsls	r0, r4, #29
 8007c3e:	0f40      	lsrs	r0, r0, #29
 8007c40:	f000 f9a4 	bl	8007f8c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8007c44:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8007c46:	2201      	movs	r2, #1
 8007c48:	0019      	movs	r1, r3
 8007c4a:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8007c4c:	701c      	strb	r4, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8007c4e:	e7dc      	b.n	8007c0a <LoRaMacMlmeRequest+0x136>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007c50:	2200      	movs	r2, #0
 8007c52:	2012      	movs	r0, #18
 8007c54:	a902      	add	r1, sp, #8
 8007c56:	e7d8      	b.n	8007c0a <LoRaMacMlmeRequest+0x136>
            queueElement.RestrictCommonReadyToHandle = true;
 8007c58:	70e3      	strb	r3, [r4, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8007c5a:	f000 f988 	bl	8007f6e <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8007c5e:	2401      	movs	r4, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8007c60:	1e07      	subs	r7, r0, #0
 8007c62:	d199      	bne.n	8007b98 <LoRaMacMlmeRequest+0xc4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8007c64:	f000 f980 	bl	8007f68 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8007c68:	0038      	movs	r0, r7
 8007c6a:	f000 f982 	bl	8007f72 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8007c6e:	e7c7      	b.n	8007c00 <LoRaMacMlmeRequest+0x12c>
    switch( mlmeRequest->Type )
 8007c70:	2402      	movs	r4, #2
 8007c72:	e791      	b.n	8007b98 <LoRaMacMlmeRequest+0xc4>
        LoRaMacConfirmQueueAdd( &queueElement );
 8007c74:	a803      	add	r0, sp, #12
 8007c76:	f000 fae3 	bl	8008240 <LoRaMacConfirmQueueAdd>
 8007c7a:	e73a      	b.n	8007af2 <LoRaMacMlmeRequest+0x1e>
 8007c7c:	20000810 	.word	0x20000810
 8007c80:	200003b8 	.word	0x200003b8
 8007c84:	00000459 	.word	0x00000459
 8007c88:	0000048d 	.word	0x0000048d
 8007c8c:	2000091c 	.word	0x2000091c
 8007c90:	200008d0 	.word	0x200008d0
 8007c94:	0000041a 	.word	0x0000041a

08007c98 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8007c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9a:	b091      	sub	sp, #68	; 0x44
 8007c9c:	9001      	str	r0, [sp, #4]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d103      	bne.n	8007caa <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007ca2:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8007ca4:	0020      	movs	r0, r4
 8007ca6:	b011      	add	sp, #68	; 0x44
 8007ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	9a01      	ldr	r2, [sp, #4]
        return LORAMAC_STATUS_BUSY;
 8007cae:	2401      	movs	r4, #1
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007cb0:	6113      	str	r3, [r2, #16]
    if( LoRaMacIsBusy( ) == true )
 8007cb2:	f7fe f81d 	bl	8005cf0 <LoRaMacIsBusy>
 8007cb6:	1e06      	subs	r6, r0, #0
 8007cb8:	d1f4      	bne.n	8007ca4 <LoRaMacMcpsRequest+0xc>
    McpsReq_t request = *mcpsRequest;
 8007cba:	af0b      	add	r7, sp, #44	; 0x2c
 8007cbc:	003b      	movs	r3, r7
 8007cbe:	9a01      	ldr	r2, [sp, #4]
 8007cc0:	ca23      	ldmia	r2!, {r0, r1, r5}
 8007cc2:	c323      	stmia	r3!, {r0, r1, r5}
 8007cc4:	ca03      	ldmia	r2!, {r0, r1}
 8007cc6:	c303      	stmia	r3!, {r0, r1}
 8007cc8:	9b01      	ldr	r3, [sp, #4]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007cca:	2214      	movs	r2, #20
    McpsReq_t request = *mcpsRequest;
 8007ccc:	781b      	ldrb	r3, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007cce:	0031      	movs	r1, r6
    McpsReq_t request = *mcpsRequest;
 8007cd0:	001d      	movs	r5, r3
 8007cd2:	9b01      	ldr	r3, [sp, #4]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007cd4:	485f      	ldr	r0, [pc, #380]	; (8007e54 <LoRaMacMcpsRequest+0x1bc>)
    McpsReq_t request = *mcpsRequest;
 8007cd6:	899b      	ldrh	r3, [r3, #12]
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	7b9b      	ldrb	r3, [r3, #14]
 8007cde:	b25b      	sxtb	r3, r3
 8007ce0:	9303      	str	r3, [sp, #12]
    macHdr.Value = 0;
 8007ce2:	ab06      	add	r3, sp, #24
 8007ce4:	701e      	strb	r6, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007ce6:	f7fc fe49 	bl	800497c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007cea:	4a5b      	ldr	r2, [pc, #364]	; (8007e58 <LoRaMacMcpsRequest+0x1c0>)
 8007cec:	4b5b      	ldr	r3, [pc, #364]	; (8007e5c <LoRaMacMcpsRequest+0x1c4>)
 8007cee:	54d4      	strb	r4, [r2, r3]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8007cf0:	22ce      	movs	r2, #206	; 0xce
 8007cf2:	4b5b      	ldr	r3, [pc, #364]	; (8007e60 <LoRaMacMcpsRequest+0x1c8>)
 8007cf4:	0052      	lsls	r2, r2, #1
 8007cf6:	5c9a      	ldrb	r2, [r3, r2]
 8007cf8:	2a02      	cmp	r2, #2
 8007cfa:	d10f      	bne.n	8007d1c <LoRaMacMcpsRequest+0x84>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8007cfc:	3283      	adds	r2, #131	; 0x83
 8007cfe:	32ff      	adds	r2, #255	; 0xff
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8007d00:	5c9a      	ldrb	r2, [r3, r2]
 8007d02:	2a02      	cmp	r2, #2
 8007d04:	d10a      	bne.n	8007d1c <LoRaMacMcpsRequest+0x84>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8007d06:	3289      	adds	r2, #137	; 0x89
 8007d08:	32ff      	adds	r2, #255	; 0xff
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8007d0a:	5c9b      	ldrb	r3, [r3, r2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d105      	bne.n	8007d1c <LoRaMacMcpsRequest+0x84>
 8007d10:	1c2b      	adds	r3, r5, #0
 8007d12:	2d00      	cmp	r5, #0
 8007d14:	d100      	bne.n	8007d18 <LoRaMacMcpsRequest+0x80>
 8007d16:	1c23      	adds	r3, r4, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	001d      	movs	r5, r3
    switch( request.Type )
 8007d1c:	2d01      	cmp	r5, #1
 8007d1e:	d033      	beq.n	8007d88 <LoRaMacMcpsRequest+0xf0>
 8007d20:	2d03      	cmp	r5, #3
 8007d22:	d038      	beq.n	8007d96 <LoRaMacMcpsRequest+0xfe>
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	d148      	bne.n	8007dba <LoRaMacMcpsRequest+0x122>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8007d28:	221f      	movs	r2, #31
 8007d2a:	ab06      	add	r3, sp, #24
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	401a      	ands	r2, r3
 8007d30:	2340      	movs	r3, #64	; 0x40
            readyToSend = true;
 8007d32:	2601      	movs	r6, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8007d34:	4313      	orrs	r3, r2
 8007d36:	aa06      	add	r2, sp, #24
 8007d38:	7013      	strb	r3, [r2, #0]
            fPort = request.Req.Unconfirmed.fPort;
 8007d3a:	793b      	ldrb	r3, [r7, #4]
 8007d3c:	9302      	str	r3, [sp, #8]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	9304      	str	r3, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8007d42:	2702      	movs	r7, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d44:	4c46      	ldr	r4, [pc, #280]	; (8007e60 <LoRaMacMcpsRequest+0x1c8>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 8007d46:	ab06      	add	r3, sp, #24
 8007d48:	731f      	strb	r7, [r3, #12]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d4a:	0023      	movs	r3, r4
 8007d4c:	3380      	adds	r3, #128	; 0x80
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	aa06      	add	r2, sp, #24
 8007d52:	7393      	strb	r3, [r2, #14]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007d54:	0023      	movs	r3, r4
 8007d56:	334c      	adds	r3, #76	; 0x4c
 8007d58:	7818      	ldrb	r0, [r3, #0]
 8007d5a:	a909      	add	r1, sp, #36	; 0x24
 8007d5c:	f000 ffc2 	bl	8008ce4 <RegionGetPhyParam>
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007d60:	23c3      	movs	r3, #195	; 0xc3
 8007d62:	005b      	lsls	r3, r3, #1
    if( ( adr == true ) &&
 8007d64:	5ce3      	ldrb	r3, [r4, r3]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8007d66:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d030      	beq.n	8007dce <LoRaMacMcpsRequest+0x136>
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007d6c:	22ce      	movs	r2, #206	; 0xce
 8007d6e:	238a      	movs	r3, #138	; 0x8a
 8007d70:	0052      	lsls	r2, r2, #1
    if( ( adr == true ) &&
 8007d72:	5ca2      	ldrb	r2, [r4, r2]
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007d74:	33ff      	adds	r3, #255	; 0xff
 8007d76:	5ce3      	ldrb	r3, [r4, r3]
    if( ( adr == true ) &&
 8007d78:	2a01      	cmp	r2, #1
 8007d7a:	d125      	bne.n	8007dc8 <LoRaMacMcpsRequest+0x130>
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d123      	bne.n	8007dc8 <LoRaMacMcpsRequest+0x130>
    if( readyToSend == true )
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	d12e      	bne.n	8007de2 <LoRaMacMcpsRequest+0x14a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007d84:	2402      	movs	r4, #2
 8007d86:	e05e      	b.n	8007e46 <LoRaMacMcpsRequest+0x1ae>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8007d88:	221f      	movs	r2, #31
 8007d8a:	ab06      	add	r3, sp, #24
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	401a      	ands	r2, r3
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	425b      	negs	r3, r3
 8007d94:	e7cd      	b.n	8007d32 <LoRaMacMcpsRequest+0x9a>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8007d96:	ab06      	add	r3, sp, #24
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	2320      	movs	r3, #32
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	aa06      	add	r2, sp, #24
 8007da2:	7013      	strb	r3, [r2, #0]
            fBuffer = request.Req.Proprietary.fBuffer;
 8007da4:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 8007da6:	2601      	movs	r6, #1
            fBuffer = request.Req.Proprietary.fBuffer;
 8007da8:	9304      	str	r3, [sp, #16]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8007daa:	893b      	ldrh	r3, [r7, #8]
 8007dac:	9305      	str	r3, [sp, #20]
            datarate = request.Req.Proprietary.Datarate;
 8007dae:	230a      	movs	r3, #10
 8007db0:	56fb      	ldrsb	r3, [r7, r3]
 8007db2:	9303      	str	r3, [sp, #12]
    uint8_t fPort = 0;
 8007db4:	2300      	movs	r3, #0
    switch( request.Type )
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	e7c3      	b.n	8007d42 <LoRaMacMcpsRequest+0xaa>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	e7fa      	b.n	8007db6 <LoRaMacMcpsRequest+0x11e>
            MacCtx.NodeAckRequested = false;
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b28      	ldr	r3, [pc, #160]	; (8007e64 <LoRaMacMcpsRequest+0x1cc>)
 8007dc4:	54f2      	strb	r2, [r6, r3]
 8007dc6:	e03e      	b.n	8007e46 <LoRaMacMcpsRequest+0x1ae>
    if( readyToSend == true )
 8007dc8:	2e00      	cmp	r6, #0
 8007dca:	d0db      	beq.n	8007d84 <LoRaMacMcpsRequest+0xec>
 8007dcc:	e01d      	b.n	8007e0a <LoRaMacMcpsRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007dce:	003c      	movs	r4, r7
    if( readyToSend == true )
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	d038      	beq.n	8007e46 <LoRaMacMcpsRequest+0x1ae>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8007dd4:	9a03      	ldr	r2, [sp, #12]
 8007dd6:	1c03      	adds	r3, r0, #0
 8007dd8:	4290      	cmp	r0, r2
 8007dda:	da01      	bge.n	8007de0 <LoRaMacMcpsRequest+0x148>
 8007ddc:	466b      	mov	r3, sp
 8007dde:	7b1b      	ldrb	r3, [r3, #12]
 8007de0:	b258      	sxtb	r0, r3
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007de2:	4c1f      	ldr	r4, [pc, #124]	; (8007e60 <LoRaMacMcpsRequest+0x1c8>)
            verify.DatarateParams.Datarate = datarate;
 8007de4:	ae08      	add	r6, sp, #32
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007de6:	0023      	movs	r3, r4
            verify.DatarateParams.Datarate = datarate;
 8007de8:	7030      	strb	r0, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007dea:	3380      	adds	r3, #128	; 0x80
 8007dec:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007dee:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007df0:	70b3      	strb	r3, [r6, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007df2:	0023      	movs	r3, r4
 8007df4:	334c      	adds	r3, #76	; 0x4c
 8007df6:	0031      	movs	r1, r6
 8007df8:	7818      	ldrb	r0, [r3, #0]
 8007dfa:	f000 ffa1 	bl	8008d40 <RegionVerify>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d100      	bne.n	8007e04 <LoRaMacMcpsRequest+0x16c>
 8007e02:	e74e      	b.n	8007ca2 <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8007e04:	7833      	ldrb	r3, [r6, #0]
 8007e06:	3445      	adds	r4, #69	; 0x45
 8007e08:	7023      	strb	r3, [r4, #0]
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8007e0a:	4e13      	ldr	r6, [pc, #76]	; (8007e58 <LoRaMacMcpsRequest+0x1c0>)
 8007e0c:	4b16      	ldr	r3, [pc, #88]	; (8007e68 <LoRaMacMcpsRequest+0x1d0>)
 8007e0e:	58f0      	ldr	r0, [r6, r3]
    if( startTimeInMs != 0 )
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d009      	beq.n	8007e28 <LoRaMacMcpsRequest+0x190>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8007e14:	f003 fe0d 	bl	800ba32 <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8007e18:	23fa      	movs	r3, #250	; 0xfa
 8007e1a:	015b      	lsls	r3, r3, #5
 8007e1c:	4298      	cmp	r0, r3
 8007e1e:	d903      	bls.n	8007e28 <LoRaMacMcpsRequest+0x190>
            Nvm.MacGroup1.SrvAckRequested = false;
 8007e20:	2200      	movs	r2, #0
 8007e22:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <LoRaMacMcpsRequest+0x1c8>)
 8007e24:	3346      	adds	r3, #70	; 0x46
 8007e26:	701a      	strb	r2, [r3, #0]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8007e28:	9b05      	ldr	r3, [sp, #20]
 8007e2a:	9a04      	ldr	r2, [sp, #16]
 8007e2c:	9902      	ldr	r1, [sp, #8]
 8007e2e:	a806      	add	r0, sp, #24
 8007e30:	f7fe fa38 	bl	80062a4 <Send>
 8007e34:	1e04      	subs	r4, r0, #0
        if( status == LORAMAC_STATUS_OK )
 8007e36:	d1c3      	bne.n	8007dc0 <LoRaMacMcpsRequest+0x128>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <LoRaMacMcpsRequest+0x1d4>)
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8007e3a:	4a0d      	ldr	r2, [pc, #52]	; (8007e70 <LoRaMacMcpsRequest+0x1d8>)
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8007e3c:	54f5      	strb	r5, [r6, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	5cb1      	ldrb	r1, [r6, r2]
 8007e42:	430b      	orrs	r3, r1
 8007e44:	54b3      	strb	r3, [r6, r2]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007e46:	2392      	movs	r3, #146	; 0x92
 8007e48:	4a03      	ldr	r2, [pc, #12]	; (8007e58 <LoRaMacMcpsRequest+0x1c0>)
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	58d3      	ldr	r3, [r2, r3]
 8007e4e:	9a01      	ldr	r2, [sp, #4]
 8007e50:	6113      	str	r3, [r2, #16]
    return status;
 8007e52:	e727      	b.n	8007ca4 <LoRaMacMcpsRequest+0xc>
 8007e54:	200007fc 	.word	0x200007fc
 8007e58:	200003b8 	.word	0x200003b8
 8007e5c:	00000445 	.word	0x00000445
 8007e60:	200008d0 	.word	0x200008d0
 8007e64:	0000041a 	.word	0x0000041a
 8007e68:	00000494 	.word	0x00000494
 8007e6c:	00000444 	.word	0x00000444
 8007e70:	0000048d 	.word	0x0000048d

08007e74 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8007e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007e76:	4d08      	ldr	r5, [pc, #32]	; (8007e98 <LoRaMacTestSetDutyCycleOn+0x24>)
    verify.DutyCycle = enable;
 8007e78:	a901      	add	r1, sp, #4
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007e7a:	002b      	movs	r3, r5
    verify.DutyCycle = enable;
 8007e7c:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007e7e:	334c      	adds	r3, #76	; 0x4c
{
 8007e80:	0004      	movs	r4, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8007e82:	220e      	movs	r2, #14
 8007e84:	7818      	ldrb	r0, [r3, #0]
 8007e86:	f000 ff5b 	bl	8008d40 <RegionVerify>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d002      	beq.n	8007e94 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8007e8e:	23c4      	movs	r3, #196	; 0xc4
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	54ec      	strb	r4, [r5, r3]
    }
}
 8007e94:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	200008d0 	.word	0x200008d0

08007e9c <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8007e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9e:	b08f      	sub	sp, #60	; 0x3c
 8007ea0:	9305      	str	r3, [sp, #20]
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
    int8_t txPower = adrNext->TxPower;
 8007ea2:	230d      	movs	r3, #13
    int8_t datarate = adrNext->Datarate;
 8007ea4:	270c      	movs	r7, #12
{
 8007ea6:	9204      	str	r2, [sp, #16]
 8007ea8:	9103      	str	r1, [sp, #12]
    int8_t txPower = adrNext->TxPower;
 8007eaa:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 8007eac:	57c7      	ldrsb	r7, [r0, r7]
    int8_t txPower = adrNext->TxPower;
 8007eae:	9301      	str	r3, [sp, #4]
    uint8_t nbTrans = adrNext->NbTrans;
 8007eb0:	7b83      	ldrb	r3, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8007eb2:	6842      	ldr	r2, [r0, #4]
    uint8_t nbTrans = adrNext->NbTrans;
 8007eb4:	9302      	str	r3, [sp, #8]
    *adrAckCounter = adrNext->AdrAckCounter;
 8007eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
{
 8007eb8:	0004      	movs	r4, r0
    *adrAckCounter = adrNext->AdrAckCounter;
 8007eba:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8007ebc:	7846      	ldrb	r6, [r0, #1]
    int8_t datarate = adrNext->Datarate;
 8007ebe:	003d      	movs	r5, r7
    if( adrNext->AdrEnabled == true )
 8007ec0:	2e00      	cmp	r6, #0
 8007ec2:	d045      	beq.n	8007f50 <LoRaMacAdrCalcNext+0xb4>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	aa06      	add	r2, sp, #24
 8007ec8:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007eca:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007ecc:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007ece:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007ed0:	7c00      	ldrb	r0, [r0, #16]
 8007ed2:	f000 ff07 	bl	8008ce4 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8007ed6:	b243      	sxtb	r3, r0
 8007ed8:	9300      	str	r3, [sp, #0]
        datarate = MAX( datarate, minTxDatarate );
 8007eda:	429f      	cmp	r7, r3
 8007edc:	da01      	bge.n	8007ee2 <LoRaMacAdrCalcNext+0x46>
 8007ede:	466b      	mov	r3, sp
 8007ee0:	781d      	ldrb	r5, [r3, #0]

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	8921      	ldrh	r1, [r4, #8]
 8007ee6:	6862      	ldr	r2, [r4, #4]
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007ee8:	8963      	ldrh	r3, [r4, #10]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007eea:	428a      	cmp	r2, r1
 8007eec:	4176      	adcs	r6, r6
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007eee:	185b      	adds	r3, r3, r1
        datarate = MAX( datarate, minTxDatarate );
 8007ef0:	b26d      	sxtb	r5, r5
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007ef2:	b2f6      	uxtb	r6, r6
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d307      	bcc.n	8007f08 <LoRaMacAdrCalcNext+0x6c>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8007ef8:	230a      	movs	r3, #10
 8007efa:	a908      	add	r1, sp, #32
 8007efc:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007efe:	7c20      	ldrb	r0, [r4, #16]
 8007f00:	f000 fef0 	bl	8008ce4 <RegionGetPhyParam>
            txPower = phyParam.Value;
 8007f04:	b243      	sxtb	r3, r0
 8007f06:	9301      	str	r3, [sp, #4]
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8007f08:	8961      	ldrh	r1, [r4, #10]
 8007f0a:	8922      	ldrh	r2, [r4, #8]
 8007f0c:	004b      	lsls	r3, r1, #1
 8007f0e:	6860      	ldr	r0, [r4, #4]
 8007f10:	189b      	adds	r3, r3, r2
 8007f12:	4298      	cmp	r0, r3
 8007f14:	d31c      	bcc.n	8007f50 <LoRaMacAdrCalcNext+0xb4>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8007f16:	1a80      	subs	r0, r0, r2
 8007f18:	f7f8 f9ac 	bl	8000274 <__aeabi_uidivmod>
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d117      	bne.n	8007f50 <LoRaMacAdrCalcNext+0xb4>
            {
                if( datarate == minTxDatarate )
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	429f      	cmp	r7, r3
 8007f24:	dc0a      	bgt.n	8007f3c <LoRaMacAdrCalcNext+0xa0>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
                        RegionInitDefaults( adrNext->Region, &params );
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8007f26:	2201      	movs	r2, #1
                    if( adrNext->UpdateChanMask == true )
 8007f28:	7823      	ldrb	r3, [r4, #0]
                    nbTrans = 1;
 8007f2a:	9202      	str	r2, [sp, #8]
                    if( adrNext->UpdateChanMask == true )
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <LoRaMacAdrCalcNext+0xa0>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007f30:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
 8007f32:	7c20      	ldrb	r0, [r4, #16]
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007f34:	a90a      	add	r1, sp, #40	; 0x28
 8007f36:	730b      	strb	r3, [r1, #12]
                        RegionInitDefaults( adrNext->Region, &params );
 8007f38:	f000 fef4 	bl	8008d24 <RegionInitDefaults>
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007f3c:	2320      	movs	r3, #32
 8007f3e:	a908      	add	r1, sp, #32
                getPhy.Datarate = datarate;
 8007f40:	704d      	strb	r5, [r1, #1]
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007f42:	700b      	strb	r3, [r1, #0]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007f44:	7be3      	ldrb	r3, [r4, #15]
 8007f46:	708b      	strb	r3, [r1, #2]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007f48:	7c20      	ldrb	r0, [r4, #16]
 8007f4a:	f000 fecb 	bl	8008ce4 <RegionGetPhyParam>
                datarate = phyParam.Value;
 8007f4e:	b245      	sxtb	r5, r0

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
    return adrAckReq;
}
 8007f50:	0030      	movs	r0, r6
    *drOut = datarate;
 8007f52:	9b03      	ldr	r3, [sp, #12]
    *txPowOut = txPower;
 8007f54:	9a01      	ldr	r2, [sp, #4]
    *drOut = datarate;
 8007f56:	701d      	strb	r5, [r3, #0]
    *txPowOut = txPower;
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	9a02      	ldr	r2, [sp, #8]
 8007f60:	701a      	strb	r2, [r3, #0]
}
 8007f62:	b00f      	add	sp, #60	; 0x3c
 8007f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f66 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f66:	4770      	bx	lr

08007f68 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f68:	4770      	bx	lr

08007f6a <LoRaMacClassBSetPingSlotState>:
 8007f6a:	4770      	bx	lr

08007f6c <LoRaMacClassBSetMulticastSlotState>:
 8007f6c:	4770      	bx	lr

08007f6e <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f6e:	2000      	movs	r0, #0
 8007f70:	4770      	bx	lr

08007f72 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f72:	4770      	bx	lr

08007f74 <LoRaMacClassBPingSlotTimerEvent>:
 8007f74:	4770      	bx	lr

08007f76 <LoRaMacClassBMulticastSlotTimerEvent>:
 8007f76:	4770      	bx	lr

08007f78 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4770      	bx	lr

08007f7c <LoRaMacClassBIsBeaconExpected>:
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	4770      	bx	lr

08007f80 <LoRaMacClassBIsPingExpected>:
 8007f80:	2000      	movs	r0, #0
 8007f82:	4770      	bx	lr

08007f84 <LoRaMacClassBIsMulticastExpected>:
 8007f84:	2000      	movs	r0, #0
 8007f86:	4770      	bx	lr

08007f88 <LoRaMacClassBIsBeaconModeActive>:
 8007f88:	2000      	movs	r0, #0
 8007f8a:	4770      	bx	lr

08007f8c <LoRaMacClassBSetPingSlotInfo>:
 8007f8c:	4770      	bx	lr

08007f8e <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f8e:	4770      	bx	lr

08007f90 <LoRaMacClassBResumeBeaconing>:
 8007f90:	4770      	bx	lr

08007f92 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f92:	2002      	movs	r0, #2
 8007f94:	4770      	bx	lr

08007f96 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007f96:	2002      	movs	r0, #2
 8007f98:	4770      	bx	lr

08007f9a <LoRaMacMibClassBSetRequestConfirm>:
 8007f9a:	2002      	movs	r0, #2
 8007f9c:	4770      	bx	lr

08007f9e <LoRaMacClassBPingSlotInfoAns>:
 8007f9e:	4770      	bx	lr

08007fa0 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	4770      	bx	lr

08007fa4 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8007fa4:	4770      	bx	lr

08007fa6 <LoRaMacClassBDeviceTimeAns>:
 8007fa6:	4770      	bx	lr

08007fa8 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007fa8:	2000      	movs	r0, #0
 8007faa:	4770      	bx	lr

08007fac <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007fac:	2000      	movs	r0, #0
 8007fae:	4770      	bx	lr

08007fb0 <LoRaMacClassBStopRxSlots>:
 8007fb0:	4770      	bx	lr

08007fb2 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 8007fb2:	4770      	bx	lr

08007fb4 <LoRaMacClassBProcess>:
 8007fb4:	4770      	bx	lr
	...

08007fb8 <LoRaMacCommandsInit>:
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8007fb8:	2283      	movs	r2, #131	; 0x83
{
 8007fba:	b510      	push	{r4, lr}
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8007fbc:	4c04      	ldr	r4, [pc, #16]	; (8007fd0 <LoRaMacCommandsInit+0x18>)
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	0020      	movs	r0, r4
 8007fc2:	0092      	lsls	r2, r2, #2
 8007fc4:	f7fc fcda 	bl	800497c <memset1>
    list->First = NULL;
 8007fc8:	2000      	movs	r0, #0
 8007fca:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 8007fcc:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 8007fce:	bd10      	pop	{r4, pc}
 8007fd0:	20001060 	.word	0x20001060

08007fd4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8007fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd6:	0005      	movs	r5, r0
 8007fd8:	0016      	movs	r6, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8007fda:	2701      	movs	r7, #1
{
 8007fdc:	9101      	str	r1, [sp, #4]
    if( payload == NULL )
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	d039      	beq.n	8008056 <LoRaMacCommandsAddCmd+0x82>
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	4b20      	ldr	r3, [pc, #128]	; (8008068 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8007fe6:	0122      	lsls	r2, r4, #4
 8007fe8:	0018      	movs	r0, r3
 8007fea:	4694      	mov	ip, r2
 8007fec:	001a      	movs	r2, r3
 8007fee:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 8007ff0:	7817      	ldrb	r7, [r2, #0]
 8007ff2:	2f00      	cmp	r7, #0
 8007ff4:	d131      	bne.n	800805a <LoRaMacCommandsAddCmd+0x86>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	4282      	cmp	r2, r0
 8007ffa:	d1f9      	bne.n	8007ff0 <LoRaMacCommandsAddCmd+0x1c>
    if( list->First == NULL )
 8007ffc:	481b      	ldr	r0, [pc, #108]	; (800806c <LoRaMacCommandsAddCmd+0x98>)
 8007ffe:	6802      	ldr	r2, [r0, #0]
 8008000:	2a00      	cmp	r2, #0
 8008002:	d100      	bne.n	8008006 <LoRaMacCommandsAddCmd+0x32>
        list->First = element;
 8008004:	6003      	str	r3, [r0, #0]
    if( list->Last )
 8008006:	6842      	ldr	r2, [r0, #4]
 8008008:	2a00      	cmp	r2, #0
 800800a:	d000      	beq.n	800800e <LoRaMacCommandsAddCmd+0x3a>
        list->Last->Next = element;
 800800c:	6013      	str	r3, [r2, #0]
    element->Next = NULL;
 800800e:	0122      	lsls	r2, r4, #4
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 8008010:	3401      	adds	r4, #1
    list->Last = element;
 8008012:	6043      	str	r3, [r0, #4]
    newCmd->PayloadSize = payloadSize;
 8008014:	0123      	lsls	r3, r4, #4
 8008016:	50c6      	str	r6, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008018:	4663      	mov	r3, ip
    element->Next = NULL;
 800801a:	2100      	movs	r1, #0
 800801c:	1882      	adds	r2, r0, r2
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800801e:	330d      	adds	r3, #13
    element->Next = NULL;
 8008020:	6091      	str	r1, [r2, #8]
    newCmd->CID = cid;
 8008022:	7315      	strb	r5, [r2, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008024:	18c0      	adds	r0, r0, r3
 8008026:	9901      	ldr	r1, [sp, #4]
 8008028:	b2b2      	uxth	r2, r6
 800802a:	f7fc fc92 	bl	8004952 <memcpy1>
 800802e:	2300      	movs	r3, #0
 8008030:	2d11      	cmp	r5, #17
 8008032:	d806      	bhi.n	8008042 <LoRaMacCommandsAddCmd+0x6e>
 8008034:	3301      	adds	r3, #1
 8008036:	40ab      	lsls	r3, r5
 8008038:	4a0d      	ldr	r2, [pc, #52]	; (8008070 <LoRaMacCommandsAddCmd+0x9c>)
 800803a:	4013      	ands	r3, r2
 800803c:	1e5a      	subs	r2, r3, #1
 800803e:	4193      	sbcs	r3, r2
 8008040:	b2db      	uxtb	r3, r3
    newCmd->IsSticky = IsSticky( cid );
 8008042:	490a      	ldr	r1, [pc, #40]	; (800806c <LoRaMacCommandsAddCmd+0x98>)
 8008044:	0124      	lsls	r4, r4, #4
 8008046:	190c      	adds	r4, r1, r4
 8008048:	7123      	strb	r3, [r4, #4]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800804a:	2382      	movs	r3, #130	; 0x82
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	58ca      	ldr	r2, [r1, r3]
 8008050:	3201      	adds	r2, #1
 8008052:	1996      	adds	r6, r2, r6
 8008054:	50ce      	str	r6, [r1, r3]

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008056:	0038      	movs	r0, r7
 8008058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800805a:	3401      	adds	r4, #1
 800805c:	0003      	movs	r3, r0
 800805e:	2c20      	cmp	r4, #32
 8008060:	d1c1      	bne.n	8007fe6 <LoRaMacCommandsAddCmd+0x12>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8008062:	2702      	movs	r7, #2
 8008064:	e7f7      	b.n	8008056 <LoRaMacCommandsAddCmd+0x82>
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	20001068 	.word	0x20001068
 800806c:	20001060 	.word	0x20001060
 8008070:	00020720 	.word	0x00020720

08008074 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8008074:	b570      	push	{r4, r5, r6, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008076:	2401      	movs	r4, #1
    if( macCmd == NULL )
 8008078:	2800      	cmp	r0, #0
 800807a:	d022      	beq.n	80080c2 <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 800807c:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <LoRaMacCommandsRemoveCmd+0x54>)
 800807e:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 8008080:	4298      	cmp	r0, r3
 8008082:	d104      	bne.n	800808e <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 8008084:	6803      	ldr	r3, [r0, #0]
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	2300      	movs	r3, #0
 800808a:	e005      	b.n	8008098 <LoRaMacCommandsRemoveCmd+0x24>
 800808c:	000b      	movs	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <LoRaMacCommandsRemoveCmd+0x24>
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	4288      	cmp	r0, r1
 8008096:	d1f9      	bne.n	800808c <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 8008098:	6851      	ldr	r1, [r2, #4]
 800809a:	4288      	cmp	r0, r1
 800809c:	d100      	bne.n	80080a0 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800809e:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 80080a4:	6801      	ldr	r1, [r0, #0]
 80080a6:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80080a8:	2182      	movs	r1, #130	; 0x82
    element->Next = NULL;
 80080aa:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80080ac:	0089      	lsls	r1, r1, #2
 80080ae:	5853      	ldr	r3, [r2, r1]
 80080b0:	6885      	ldr	r5, [r0, #8]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	1b5b      	subs	r3, r3, r5
    element->Next = NULL;
 80080b6:	6004      	str	r4, [r0, #0]
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80080b8:	5053      	str	r3, [r2, r1]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80080ba:	2210      	movs	r2, #16
 80080bc:	0021      	movs	r1, r4
 80080be:	f7fc fc5d 	bl	800497c <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80080c2:	0020      	movs	r0, r4
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	20001060 	.word	0x20001060

080080cc <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80080cc:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 80080d0:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d100      	bne.n	80080d8 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80080d6:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 80080d8:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 80080da:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 80080e0:	f7ff ffc8 	bl	8008074 <LoRaMacCommandsRemoveCmd>
{
 80080e4:	0020      	movs	r0, r4
 80080e6:	e7f4      	b.n	80080d2 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 80080e8:	20001060 	.word	0x20001060

080080ec <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	2401      	movs	r4, #1
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
 80080f2:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d100      	bne.n	80080fa <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80080f8:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 80080fa:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 80080fc:	6805      	ldr	r5, [r0, #0]
    switch( cid )
 80080fe:	2b11      	cmp	r3, #17
 8008100:	d806      	bhi.n	8008110 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>
 8008102:	0022      	movs	r2, r4
 8008104:	409a      	lsls	r2, r3
 8008106:	4b04      	ldr	r3, [pc, #16]	; (8008118 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
 8008108:	421a      	tst	r2, r3
 800810a:	d001      	beq.n	8008110 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>
            LoRaMacCommandsRemoveCmd( curElement );
 800810c:	f7ff ffb2 	bl	8008074 <LoRaMacCommandsRemoveCmd>
{
 8008110:	0028      	movs	r0, r5
 8008112:	e7ef      	b.n	80080f4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 8008114:	20001060 	.word	0x20001060
 8008118:	00020720 	.word	0x00020720

0800811c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800811c:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800811e:	2001      	movs	r0, #1
    if( size == NULL )
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <LoRaMacCommandsGetSizeSerializedCmds+0x14>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8008124:	2282      	movs	r2, #130	; 0x82
    return LORAMAC_COMMANDS_SUCCESS;
 8008126:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 8008128:	4902      	ldr	r1, [pc, #8]	; (8008134 <LoRaMacCommandsGetSizeSerializedCmds+0x18>)
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	588a      	ldr	r2, [r1, r2]
 800812e:	601a      	str	r2, [r3, #0]
}
 8008130:	4770      	bx	lr
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	20001060 	.word	0x20001060

08008138 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8008138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800813a:	000f      	movs	r7, r1
 800813c:	9001      	str	r0, [sp, #4]
 800813e:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008140:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8008142:	2a00      	cmp	r2, #0
 8008144:	d00a      	beq.n	800815c <LoRaMacCommandsSerializeCmds+0x24>
 8008146:	2900      	cmp	r1, #0
 8008148:	d008      	beq.n	800815c <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800814a:	4b13      	ldr	r3, [pc, #76]	; (8008198 <LoRaMacCommandsSerializeCmds+0x60>)
 800814c:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800814e:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8008150:	2c00      	cmp	r4, #0
 8008152:	d104      	bne.n	800815e <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8008154:	0038      	movs	r0, r7
 8008156:	f7ff ffe1 	bl	800811c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800815a:	2000      	movs	r0, #0
}
 800815c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800815e:	9a01      	ldr	r2, [sp, #4]
 8008160:	1ad1      	subs	r1, r2, r3
 8008162:	68a2      	ldr	r2, [r4, #8]
 8008164:	3201      	adds	r2, #1
 8008166:	4291      	cmp	r1, r2
 8008168:	d30e      	bcc.n	8008188 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800816a:	7922      	ldrb	r2, [r4, #4]
 800816c:	1c5d      	adds	r5, r3, #1
 800816e:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8008170:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 8008172:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8008174:	b29a      	uxth	r2, r3
 8008176:	1d61      	adds	r1, r4, #5
 8008178:	1970      	adds	r0, r6, r5
 800817a:	f7fc fbea 	bl	8004952 <memcpy1>
            itr += curElement->PayloadSize;
 800817e:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 8008180:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 8008182:	18ed      	adds	r5, r5, r3
 8008184:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 8008186:	e7e3      	b.n	8008150 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 8008188:	0020      	movs	r0, r4
 800818a:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800818c:	f7ff ff72 	bl	8008074 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 8008190:	2c00      	cmp	r4, #0
 8008192:	d1f9      	bne.n	8008188 <LoRaMacCommandsSerializeCmds+0x50>
 8008194:	e7de      	b.n	8008154 <LoRaMacCommandsSerializeCmds+0x1c>
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	20001060 	.word	0x20001060

0800819c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800819c:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800819e:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80081a4:	4a07      	ldr	r2, [pc, #28]	; (80081c4 <LoRaMacCommandsStickyCmdsPending+0x28>)
 80081a6:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d005      	beq.n	80081bc <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 80081b0:	7b02      	ldrb	r2, [r0, #12]
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	d003      	beq.n	80081be <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80081b6:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 80081b8:	2000      	movs	r0, #0
            *cmdsPending = true;
 80081ba:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80081bc:	4770      	bx	lr
        curElement = curElement->Next;
 80081be:	6800      	ldr	r0, [r0, #0]
 80081c0:	e7f4      	b.n	80081ac <LoRaMacCommandsStickyCmdsPending+0x10>
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	20001060 	.word	0x20001060

080081c8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80081c8:	3802      	subs	r0, #2
 80081ca:	b2c3      	uxtb	r3, r0
{
 80081cc:	2000      	movs	r0, #0
 80081ce:	2b11      	cmp	r3, #17
 80081d0:	d801      	bhi.n	80081d6 <LoRaMacCommandsGetCmdSize+0xe>
 80081d2:	4a01      	ldr	r2, [pc, #4]	; (80081d8 <LoRaMacCommandsGetCmdSize+0x10>)
 80081d4:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 80081d6:	4770      	bx	lr
 80081d8:	08019452 	.word	0x08019452

080081dc <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	0004      	movs	r4, r0
 80081e0:	0008      	movs	r0, r1
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80081e2:	490c      	ldr	r1, [pc, #48]	; (8008214 <GetElement.constprop.0+0x38>)
 80081e4:	1c4b      	adds	r3, r1, #1
 80081e6:	7fda      	ldrb	r2, [r3, #31]
    if( count == 0 )
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d011      	beq.n	8008210 <GetElement.constprop.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081ec:	000d      	movs	r5, r1
 80081ee:	2300      	movs	r3, #0
 80081f0:	351c      	adds	r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 80081f2:	7806      	ldrb	r6, [r0, #0]
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	d007      	beq.n	8008208 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80081f8:	42a8      	cmp	r0, r5
 80081fa:	d006      	beq.n	800820a <GetElement.constprop.0+0x2e>
        bufferPointer++;
 80081fc:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80081fe:	3301      	adds	r3, #1
 8008200:	b2db      	uxtb	r3, r3
 8008202:	429a      	cmp	r2, r3
 8008204:	d1f5      	bne.n	80081f2 <GetElement.constprop.0+0x16>
        return NULL;
 8008206:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 8008208:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800820a:	0008      	movs	r0, r1
 800820c:	300c      	adds	r0, #12
 800820e:	e7f6      	b.n	80081fe <GetElement.constprop.0+0x22>
        return NULL;
 8008210:	0010      	movs	r0, r2
 8008212:	e7f9      	b.n	8008208 <GetElement.constprop.0+0x2c>
 8008214:	2000126c 	.word	0x2000126c

08008218 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8008218:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800821a:	4c08      	ldr	r4, [pc, #32]	; (800823c <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800821c:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 800821e:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008220:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8008222:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008224:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8008226:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008228:	21ff      	movs	r1, #255	; 0xff
 800822a:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800822c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800822e:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008230:	f7fc fba4 	bl	800497c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	3402      	adds	r4, #2
 8008238:	77e3      	strb	r3, [r4, #31]
}
 800823a:	bd10      	pop	{r4, pc}
 800823c:	2000126c 	.word	0x2000126c

08008240 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8008240:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008242:	490e      	ldr	r1, [pc, #56]	; (800827c <LoRaMacConfirmQueueAdd+0x3c>)
{
 8008244:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008246:	1c4d      	adds	r5, r1, #1
 8008248:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 800824a:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800824c:	2c04      	cmp	r4, #4
 800824e:	d813      	bhi.n	8008278 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8008250:	7810      	ldrb	r0, [r2, #0]
 8008252:	688b      	ldr	r3, [r1, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8008254:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8008256:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8008258:	7850      	ldrb	r0, [r2, #1]
 800825a:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800825c:	78d0      	ldrb	r0, [r2, #3]
 800825e:	70d8      	strb	r0, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8008260:	7892      	ldrb	r2, [r2, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008262:	0008      	movs	r0, r1
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8008264:	709a      	strb	r2, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008266:	000a      	movs	r2, r1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008268:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800826a:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800826c:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800826e:	4283      	cmp	r3, r0
 8008270:	d000      	beq.n	8008274 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 8008272:	1d1a      	adds	r2, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 8008274:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8008276:	608a      	str	r2, [r1, #8]
}
 8008278:	bd30      	pop	{r4, r5, pc}
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	2000126c 	.word	0x2000126c

08008280 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008280:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 8008282:	1c59      	adds	r1, r3, #1
 8008284:	7fca      	ldrb	r2, [r1, #31]
    {
        return false;
 8008286:	1e10      	subs	r0, r2, #0
    if( count == 0 )
 8008288:	d00b      	beq.n	80082a2 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800828a:	3a01      	subs	r2, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800828c:	0018      	movs	r0, r3
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800828e:	77ca      	strb	r2, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008290:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8008292:	6859      	ldr	r1, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008294:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008296:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008298:	4281      	cmp	r1, r0
 800829a:	d000      	beq.n	800829e <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 800829c:	1d0a      	adds	r2, r1, #4

    return true;
 800829e:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80082a0:	605a      	str	r2, [r3, #4]
}
 80082a2:	4770      	bx	lr
 80082a4:	2000126c 	.word	0x2000126c

080082a8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80082a8:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <LoRaMacConfirmQueueSetStatus+0x24>)
{
 80082ac:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80082ae:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 80082b0:	7fd2      	ldrb	r2, [r2, #31]
{
 80082b2:	0008      	movs	r0, r1
    if( count == 0 )
 80082b4:	2a00      	cmp	r2, #0
 80082b6:	d007      	beq.n	80082c8 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80082b8:	6859      	ldr	r1, [r3, #4]
 80082ba:	f7ff ff8f 	bl	80081dc <GetElement.constprop.0>
        if( element != NULL )
 80082be:	2800      	cmp	r0, #0
 80082c0:	d002      	beq.n	80082c8 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 80082c2:	2301      	movs	r3, #1
            element->Status = status;
 80082c4:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 80082c6:	7083      	strb	r3, [r0, #2]
        }
    }
}
 80082c8:	bd10      	pop	{r4, pc}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	2000126c 	.word	0x2000126c

080082d0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80082d0:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <LoRaMacConfirmQueueGetStatus+0x20>)
 80082d4:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 80082d6:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80082d8:	2201      	movs	r2, #1
    if( count == 0 )
 80082da:	2900      	cmp	r1, #0
 80082dc:	d006      	beq.n	80082ec <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	f7ff ff7c 	bl	80081dc <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80082e4:	2201      	movs	r2, #1
        if( element != NULL )
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d000      	beq.n	80082ec <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 80082ea:	7842      	ldrb	r2, [r0, #1]
}
 80082ec:	0010      	movs	r0, r2
 80082ee:	bd10      	pop	{r4, pc}
 80082f0:	2000126c 	.word	0x2000126c

080082f4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80082f4:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80082f6:	4a0d      	ldr	r2, [pc, #52]	; (800832c <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80082f8:	1c91      	adds	r1, r2, #2
 80082fa:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80082fc:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 80082fe:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8008300:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 8008302:	2900      	cmp	r1, #0
 8008304:	d00d      	beq.n	8008322 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008306:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 8008308:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800830a:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800830c:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 800830e:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 8008310:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8008312:	2e00      	cmp	r6, #0
 8008314:	d100      	bne.n	8008318 <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 8008316:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008318:	42a3      	cmp	r3, r4
 800831a:	d003      	beq.n	8008324 <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 800831c:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800831e:	4299      	cmp	r1, r3
 8008320:	d1f5      	bne.n	800830e <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 8008322:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008324:	0013      	movs	r3, r2
 8008326:	330c      	adds	r3, #12
 8008328:	e7f9      	b.n	800831e <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	2000126c 	.word	0x2000126c

08008330 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 8008332:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8008334:	6859      	ldr	r1, [r3, #4]
 8008336:	f7ff ff51 	bl	80081dc <GetElement.constprop.0>
 800833a:	1e43      	subs	r3, r0, #1
 800833c:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800833e:	b2c0      	uxtb	r0, r0
 8008340:	bd10      	pop	{r4, pc}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	2000126c 	.word	0x2000126c

08008348 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800834c:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800834e:	4e13      	ldr	r6, [pc, #76]	; (800839c <LoRaMacConfirmQueueHandleCb+0x54>)
{
 8008350:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8008352:	1c73      	adds	r3, r6, #1
 8008354:	7fdb      	ldrb	r3, [r3, #31]
 8008356:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800835e:	b005      	add	sp, #20
 8008360:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8008362:	6873      	ldr	r3, [r6, #4]
 8008364:	7818      	ldrb	r0, [r3, #0]
 8008366:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8008368:	7859      	ldrb	r1, [r3, #1]
 800836a:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800836c:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800836e:	2f00      	cmp	r7, #0
 8008370:	d00d      	beq.n	800838e <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8008372:	6833      	ldr	r3, [r6, #0]
 8008374:	0028      	movs	r0, r5
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800837a:	f7ff ff81 	bl	8008280 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800837e:	2f00      	cmp	r7, #0
 8008380:	d102      	bne.n	8008388 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8008382:	a803      	add	r0, sp, #12
 8008384:	f7ff ff5c 	bl	8008240 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8008388:	3401      	adds	r4, #1
 800838a:	b2e4      	uxtb	r4, r4
 800838c:	e7e4      	b.n	8008358 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800838e:	aa03      	add	r2, sp, #12
 8008390:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8008392:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	70d3      	strb	r3, [r2, #3]
 8008398:	e7ef      	b.n	800837a <LoRaMacConfirmQueueHandleCb+0x32>
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	2000126c 	.word	0x2000126c

080083a0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80083a0:	4b01      	ldr	r3, [pc, #4]	; (80083a8 <LoRaMacConfirmQueueGetCnt+0x8>)
 80083a2:	3301      	adds	r3, #1
 80083a4:	7fd8      	ldrb	r0, [r3, #31]
}
 80083a6:	4770      	bx	lr
 80083a8:	2000126c 	.word	0x2000126c

080083ac <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 80083ac:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <LoRaMacConfirmQueueIsFull+0x10>)
 80083b0:	3301      	adds	r3, #1
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80083b2:	7fdb      	ldrb	r3, [r3, #31]
}
 80083b4:	4298      	cmp	r0, r3
 80083b6:	4180      	sbcs	r0, r0
 80083b8:	4240      	negs	r0, r0
 80083ba:	4770      	bx	lr
 80083bc:	2000126c 	.word	0x2000126c

080083c0 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	0007      	movs	r7, r0
 80083c4:	b085      	sub	sp, #20
 80083c6:	000d      	movs	r5, r1
 80083c8:	0014      	movs	r4, r2
    uint8_t compBase[16] = { 0 };
 80083ca:	2100      	movs	r1, #0
 80083cc:	220c      	movs	r2, #12
 80083ce:	a801      	add	r0, sp, #4
{
 80083d0:	001e      	movs	r6, r3
    uint8_t compBase[16] = { 0 };
 80083d2:	f00d fe14 	bl	8015ffe <memset>
    switch( keyID )
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 80083d6:	1ffb      	subs	r3, r7, #7
 80083d8:	425a      	negs	r2, r3
 80083da:	4153      	adcs	r3, r2
 80083dc:	466a      	mov	r2, sp
 80083de:	3301      	adds	r3, #1
 80083e0:	7013      	strb	r3, [r2, #0]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80083e2:	0a2b      	lsrs	r3, r5, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80083e4:	7055      	strb	r5, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80083e6:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80083e8:	7114      	strb	r4, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80083ea:	0a23      	lsrs	r3, r4, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80083ec:	71d6      	strb	r6, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80083ee:	0c2d      	lsrs	r5, r5, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80083f0:	0c24      	lsrs	r4, r4, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80083f2:	0a36      	lsrs	r6, r6, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80083f4:	70d5      	strb	r5, [r2, #3]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80083f6:	7153      	strb	r3, [r2, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80083f8:	7194      	strb	r4, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80083fa:	7216      	strb	r6, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80083fc:	2101      	movs	r1, #1
 80083fe:	003a      	movs	r2, r7
 8008400:	4668      	mov	r0, sp
 8008402:	f003 f850 	bl	800b4a6 <SecureElementDeriveAndStoreKey>
 8008406:	2800      	cmp	r0, #0
 8008408:	d000      	beq.n	800840c <DeriveSessionKey10x+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800840a:	200e      	movs	r0, #14
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800840c:	b005      	add	sp, #20
 800840e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008410 <PayloadEncrypt>:
{
 8008410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008412:	b08d      	sub	sp, #52	; 0x34
 8008414:	001d      	movs	r5, r3
 8008416:	ab12      	add	r3, sp, #72	; 0x48
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	9001      	str	r0, [sp, #4]
 800841c:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800841e:	9b01      	ldr	r3, [sp, #4]
{
 8008420:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008422:	2009      	movs	r0, #9
{
 8008424:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 8008426:	2b00      	cmp	r3, #0
 8008428:	d02b      	beq.n	8008482 <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 800842a:	2600      	movs	r6, #0
 800842c:	220c      	movs	r2, #12
 800842e:	0031      	movs	r1, r6
 8008430:	a805      	add	r0, sp, #20
 8008432:	9604      	str	r6, [sp, #16]
 8008434:	f00d fde3 	bl	8015ffe <memset>
    uint8_t aBlock[16] = { 0 };
 8008438:	220c      	movs	r2, #12
 800843a:	0031      	movs	r1, r6
 800843c:	a809      	add	r0, sp, #36	; 0x24
 800843e:	9608      	str	r6, [sp, #32]
 8008440:	f00d fddd 	bl	8015ffe <memset>
    aBlock[0] = 0x01;
 8008444:	2201      	movs	r2, #1
    aBlock[5] = dir;
 8008446:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 8008448:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800844a:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800844c:	0a2b      	lsrs	r3, r5, #8
 800844e:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8008450:	0c2b      	lsrs	r3, r5, #16
 8008452:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 8008454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 8008456:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 8008458:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800845a:	0a1b      	lsrs	r3, r3, #8
 800845c:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800845e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8008460:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8008466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 8008468:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800846a:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800846c:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800846e:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 8008470:	0014      	movs	r4, r2
 8008472:	b2e2      	uxtb	r2, r4
 8008474:	0113      	lsls	r3, r2, #4
 8008476:	3b10      	subs	r3, #16
 8008478:	b2db      	uxtb	r3, r3
 800847a:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800847c:	2f00      	cmp	r7, #0
 800847e:	dc02      	bgt.n	8008486 <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 8008480:	2000      	movs	r0, #0
}
 8008482:	b00d      	add	sp, #52	; 0x34
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 8008486:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8008488:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800848a:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800848c:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800848e:	002b      	movs	r3, r5
 8008490:	2110      	movs	r1, #16
 8008492:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 8008494:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8008496:	f002 ff7f 	bl	800b398 <SecureElementAesEncrypt>
 800849a:	2800      	cmp	r0, #0
 800849c:	d115      	bne.n	80084ca <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800849e:	1c39      	adds	r1, r7, #0
 80084a0:	1c0b      	adds	r3, r1, #0
 80084a2:	2f10      	cmp	r7, #16
 80084a4:	dd00      	ble.n	80084a8 <PayloadEncrypt+0x98>
 80084a6:	2310      	movs	r3, #16
 80084a8:	b21b      	sxth	r3, r3
 80084aa:	4298      	cmp	r0, r3
 80084ac:	db02      	blt.n	80084b4 <PayloadEncrypt+0xa4>
        size -= 16;
 80084ae:	3f10      	subs	r7, #16
 80084b0:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 80084b2:	e7de      	b.n	8008472 <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80084b4:	9b02      	ldr	r3, [sp, #8]
 80084b6:	5c2e      	ldrb	r6, [r5, r0]
 80084b8:	181a      	adds	r2, r3, r0
 80084ba:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80084bc:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80084be:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80084c0:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80084c2:	4073      	eors	r3, r6
 80084c4:	9e01      	ldr	r6, [sp, #4]
 80084c6:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80084c8:	e7ea      	b.n	80084a0 <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80084ca:	200e      	movs	r0, #14
 80084cc:	e7d9      	b.n	8008482 <PayloadEncrypt+0x72>

080084ce <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 80084ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 80084d0:	2100      	movs	r1, #0
 80084d2:	220c      	movs	r2, #12
 80084d4:	a801      	add	r0, sp, #4
 80084d6:	9100      	str	r1, [sp, #0]
 80084d8:	f00d fd91 	bl	8015ffe <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80084dc:	227f      	movs	r2, #127	; 0x7f
 80084de:	2108      	movs	r1, #8
 80084e0:	4668      	mov	r0, sp
 80084e2:	f002 ffe0 	bl	800b4a6 <SecureElementDeriveAndStoreKey>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d000      	beq.n	80084ec <LoRaMacCryptoDeriveMcKEKey.part.0+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80084ea:	200e      	movs	r0, #14
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80084ec:	b005      	add	sp, #20
 80084ee:	bd00      	pop	{pc}

080084f0 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 80084f0:	3801      	subs	r0, #1
 80084f2:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 80084f4:	b500      	push	{lr}
    switch( fCntID )
 80084f6:	2806      	cmp	r0, #6
 80084f8:	d80c      	bhi.n	8008514 <GetLastFcntDown.constprop.0+0x24>
 80084fa:	4b10      	ldr	r3, [pc, #64]	; (800853c <GetLastFcntDown.constprop.0+0x4c>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 80084fc:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 80084fe:	f7f7 fe15 	bl	800012c <__gnu_thumb1_case_uqi>
 8008502:	0b04      	.short	0x0b04
 8008504:	1816130f 	.word	0x1816130f
 8008508:	1a          	.byte	0x1a
 8008509:	00          	.byte	0x00
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800850e:	691a      	ldr	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c
    return LORAMAC_CRYPTO_SUCCESS;
 8008512:	2300      	movs	r3, #0
}
 8008514:	0018      	movs	r0, r3
 8008516:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8008518:	695a      	ldr	r2, [r3, #20]
 800851a:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800851c:	695a      	ldr	r2, [r3, #20]
 800851e:	e7f7      	b.n	8008510 <GetLastFcntDown.constprop.0+0x20>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8008520:	699a      	ldr	r2, [r3, #24]
 8008522:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	e7f3      	b.n	8008510 <GetLastFcntDown.constprop.0+0x20>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8008528:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 800852a:	600b      	str	r3, [r1, #0]
 800852c:	e7f1      	b.n	8008512 <GetLastFcntDown.constprop.0+0x22>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	e7fb      	b.n	800852a <GetLastFcntDown.constprop.0+0x3a>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	e7f9      	b.n	800852a <GetLastFcntDown.constprop.0+0x3a>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	e7f7      	b.n	800852a <GetLastFcntDown.constprop.0+0x3a>
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	20001290 	.word	0x20001290

08008540 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8008540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008542:	b0c7      	sub	sp, #284	; 0x11c
 8008544:	0007      	movs	r7, r0
 8008546:	000c      	movs	r4, r1
 8008548:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800854a:	2009      	movs	r0, #9
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800854c:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 800854e:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 8008550:	2f00      	cmp	r7, #0
 8008552:	d042      	beq.n	80085da <VerifyCmacB0.constprop.0+0x9a>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8008554:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008556:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	4299      	cmp	r1, r3
 800855c:	d83d      	bhi.n	80085da <VerifyCmacB0.constprop.0+0x9a>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800855e:	2288      	movs	r2, #136	; 0x88
 8008560:	2100      	movs	r1, #0
 8008562:	0052      	lsls	r2, r2, #1
 8008564:	a802      	add	r0, sp, #8
 8008566:	f7fc fa09 	bl	800497c <memset1>
    b0[0] = 0x49;
 800856a:	2349      	movs	r3, #73	; 0x49
 800856c:	aa02      	add	r2, sp, #8
 800856e:	7013      	strb	r3, [r2, #0]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8008570:	2d00      	cmp	r5, #0
 8008572:	d034      	beq.n	80085de <VerifyCmacB0.constprop.0+0x9e>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 8008574:	4b1c      	ldr	r3, [pc, #112]	; (80085e8 <VerifyCmacB0.constprop.0+0xa8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800857a:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800857c:	b29b      	uxth	r3, r3
 800857e:	0a1b      	lsrs	r3, r3, #8
 8008580:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 8008582:	2300      	movs	r3, #0
 8008584:	aa02      	add	r2, sp, #8
 8008586:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 8008588:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 800858a:	2201      	movs	r2, #1
 800858c:	a902      	add	r1, sp, #8
 800858e:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8008590:	0a32      	lsrs	r2, r6, #8
 8008592:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008594:	0c32      	lsrs	r2, r6, #16
 8008596:	720a      	strb	r2, [r1, #8]
    b0[10] = fCnt & 0xFF;
 8008598:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[6] = devAddr & 0xFF;
 800859a:	718e      	strb	r6, [r1, #6]
    b0[10] = fCnt & 0xFF;
 800859c:	728a      	strb	r2, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800859e:	0a12      	lsrs	r2, r2, #8
 80085a0:	72ca      	strb	r2, [r1, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80085a2:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80085a4:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80085a6:	0c12      	lsrs	r2, r2, #16
 80085a8:	730a      	strb	r2, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80085aa:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[14] = 0x00;
 80085ac:	738b      	strb	r3, [r1, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80085ae:	0e15      	lsrs	r5, r2, #24
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80085b0:	724e      	strb	r6, [r1, #9]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80085b2:	0022      	movs	r2, r4
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80085b4:	734d      	strb	r5, [r1, #13]
    b0[15] = msgLen & 0xFF;
 80085b6:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80085b8:	a806      	add	r0, sp, #24
 80085ba:	0039      	movs	r1, r7
 80085bc:	f7fc f9c9 	bl	8004952 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80085c0:	0021      	movs	r1, r4
 80085c2:	3110      	adds	r1, #16
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80085c8:	b289      	uxth	r1, r1
 80085ca:	a802      	add	r0, sp, #8
 80085cc:	f002 fecb 	bl	800b366 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d002      	beq.n	80085da <VerifyCmacB0.constprop.0+0x9a>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80085d4:	2801      	cmp	r0, #1
 80085d6:	d000      	beq.n	80085da <VerifyCmacB0.constprop.0+0x9a>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80085d8:	200e      	movs	r0, #14
}
 80085da:	b047      	add	sp, #284	; 0x11c
 80085dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 80085de:	ab02      	add	r3, sp, #8
 80085e0:	705d      	strb	r5, [r3, #1]
        b0[2] = 0x00;
 80085e2:	709d      	strb	r5, [r3, #2]
 80085e4:	e7cd      	b.n	8008582 <VerifyCmacB0.constprop.0+0x42>
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	20001290 	.word	0x20001290

080085ec <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80085ec:	2308      	movs	r3, #8
{
 80085ee:	b510      	push	{r4, lr}
    if( nvm == NULL )
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d015      	beq.n	8008620 <LoRaMacCryptoInit+0x34>
    CryptoNvm = nvm;
 80085f4:	4c0b      	ldr	r4, [pc, #44]	; (8008624 <LoRaMacCryptoInit+0x38>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80085f6:	2234      	movs	r2, #52	; 0x34
 80085f8:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 80085fa:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80085fc:	f7fc f9be 	bl	800497c <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8008600:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8008602:	4a09      	ldr	r2, [pc, #36]	; (8008628 <LoRaMacCryptoInit+0x3c>)
    CryptoNvm->FCntList.FCntUp = 0;
 8008604:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8008606:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008608:	2201      	movs	r2, #1
 800860a:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 800860c:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800860e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008610:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8008612:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8008614:	62da      	str	r2, [r3, #44]	; 0x2c
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8008616:	61da      	str	r2, [r3, #28]
 8008618:	621a      	str	r2, [r3, #32]
 800861a:	625a      	str	r2, [r3, #36]	; 0x24
 800861c:	629a      	str	r2, [r3, #40]	; 0x28
    return LORAMAC_CRYPTO_SUCCESS;
 800861e:	0003      	movs	r3, r0
}
 8008620:	0018      	movs	r0, r3
 8008622:	bd10      	pop	{r4, pc}
 8008624:	20001290 	.word	0x20001290
 8008628:	01010100 	.word	0x01010100

0800862c <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6018      	str	r0, [r3, #0]
}
 8008632:	2000      	movs	r0, #0
 8008634:	4770      	bx	lr
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	20001290 	.word	0x20001290

0800863c <LoRaMacCryptoGetFCntUp>:
{
 800863c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800863e:	2009      	movs	r0, #9
    if( currentUp == NULL )
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 8008644:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8008646:	4a03      	ldr	r2, [pc, #12]	; (8008654 <LoRaMacCryptoGetFCntUp+0x18>)
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	68d2      	ldr	r2, [r2, #12]
 800864c:	3201      	adds	r2, #1
 800864e:	601a      	str	r2, [r3, #0]
}
 8008650:	4770      	bx	lr
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	20001290 	.word	0x20001290

08008658 <LoRaMacCryptoGetFCntDown>:
    uint32_t lastDown = 0;
 8008658:	2300      	movs	r3, #0
{
 800865a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800865c:	0006      	movs	r6, r0
 800865e:	000d      	movs	r5, r1
 8008660:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008662:	2009      	movs	r0, #9
    uint32_t lastDown = 0;
 8008664:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 8008666:	429a      	cmp	r2, r3
 8008668:	d009      	beq.n	800867e <LoRaMacCryptoGetFCntDown+0x26>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800866a:	0030      	movs	r0, r6
 800866c:	a901      	add	r1, sp, #4
 800866e:	f7ff ff3f 	bl	80084f0 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008672:	2800      	cmp	r0, #0
 8008674:	d103      	bne.n	800867e <LoRaMacCryptoGetFCntDown+0x26>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	d101      	bne.n	8008680 <LoRaMacCryptoGetFCntDown+0x28>
        *currentDown = frameFcnt;
 800867c:	6025      	str	r5, [r4, #0]
}
 800867e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8008680:	b29a      	uxth	r2, r3
 8008682:	1aaa      	subs	r2, r5, r2
        if( fCntDiff > 0 )
 8008684:	2a00      	cmp	r2, #0
 8008686:	dd02      	ble.n	800868e <LoRaMacCryptoGetFCntDown+0x36>
            *currentDown = lastDown + fCntDiff;
 8008688:	189b      	adds	r3, r3, r2
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	e7f7      	b.n	800867e <LoRaMacCryptoGetFCntDown+0x26>
        else if( fCntDiff == 0 )
 800868e:	2a00      	cmp	r2, #0
 8008690:	d102      	bne.n	8008698 <LoRaMacCryptoGetFCntDown+0x40>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8008692:	2007      	movs	r0, #7
            *currentDown = lastDown;
 8008694:	6023      	str	r3, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8008696:	e7f2      	b.n	800867e <LoRaMacCryptoGetFCntDown+0x26>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8008698:	0c19      	lsrs	r1, r3, #16
 800869a:	2380      	movs	r3, #128	; 0x80
 800869c:	0409      	lsls	r1, r1, #16
 800869e:	025b      	lsls	r3, r3, #9
 80086a0:	18c9      	adds	r1, r1, r3
 80086a2:	1949      	adds	r1, r1, r5
 80086a4:	6021      	str	r1, [r4, #0]
 80086a6:	e7ea      	b.n	800867e <LoRaMacCryptoGetFCntDown+0x26>

080086a8 <LoRaMacCryptoSetMulticastReference>:
{
 80086a8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 80086aa:	2009      	movs	r0, #9
    if( multicastList == NULL )
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00c      	beq.n	80086ca <LoRaMacCryptoSetMulticastReference+0x22>
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80086b0:	4a06      	ldr	r2, [pc, #24]	; (80086cc <LoRaMacCryptoSetMulticastReference+0x24>)
    return LORAMAC_CRYPTO_SUCCESS;
 80086b2:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	0011      	movs	r1, r2
 80086b8:	311c      	adds	r1, #28
 80086ba:	6219      	str	r1, [r3, #32]
 80086bc:	3104      	adds	r1, #4
 80086be:	64d9      	str	r1, [r3, #76]	; 0x4c
 80086c0:	3104      	adds	r1, #4
 80086c2:	6799      	str	r1, [r3, #120]	; 0x78
 80086c4:	3228      	adds	r2, #40	; 0x28
 80086c6:	3384      	adds	r3, #132	; 0x84
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	4770      	bx	lr
 80086cc:	20001290 	.word	0x20001290

080086d0 <LoRaMacCryptoPrepareJoinRequest>:
{
 80086d0:	b513      	push	{r0, r1, r4, lr}
 80086d2:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 80086d4:	2009      	movs	r0, #9
    if( macMsg == 0 )
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	d01d      	beq.n	8008716 <LoRaMacCryptoPrepareJoinRequest+0x46>
    CryptoNvm->DevNonce++;
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <LoRaMacCryptoPrepareJoinRequest+0x48>)
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80086dc:	0020      	movs	r0, r4
    CryptoNvm->DevNonce++;
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	8893      	ldrh	r3, [r2, #4]
 80086e2:	3301      	adds	r3, #1
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80086e8:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80086ea:	f000 fa4e 	bl	8008b8a <LoRaMacSerializerJoinRequest>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d110      	bne.n	8008714 <LoRaMacCryptoPrepareJoinRequest+0x44>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80086f2:	0023      	movs	r3, r4
 80086f4:	3318      	adds	r3, #24
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2213      	movs	r2, #19
 80086fa:	2301      	movs	r3, #1
 80086fc:	6821      	ldr	r1, [r4, #0]
 80086fe:	f002 fe27 	bl	800b350 <SecureElementComputeAesCmac>
 8008702:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008704:	200e      	movs	r0, #14
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <LoRaMacCryptoPrepareJoinRequest+0x46>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800870a:	0020      	movs	r0, r4
 800870c:	f000 fa3d 	bl	8008b8a <LoRaMacSerializerJoinRequest>
 8008710:	2800      	cmp	r0, #0
 8008712:	d000      	beq.n	8008716 <LoRaMacCryptoPrepareJoinRequest+0x46>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008714:	2010      	movs	r0, #16
}
 8008716:	bd16      	pop	{r1, r2, r4, pc}
 8008718:	20001290 	.word	0x20001290

0800871c <LoRaMacCryptoSecureMessage>:
{
 800871c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871e:	0005      	movs	r5, r0
 8008720:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008722:	2009      	movs	r0, #9
{
 8008724:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01f      	beq.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800872a:	4b2e      	ldr	r3, [pc, #184]	; (80087e4 <LoRaMacCryptoSecureMessage+0xc8>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800872c:	3803      	subs	r0, #3
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	42ab      	cmp	r3, r5
 8008734:	d819      	bhi.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 8008736:	1c62      	adds	r2, r4, #1
 8008738:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800873a:	1e51      	subs	r1, r2, #1
 800873c:	418a      	sbcs	r2, r1
 800873e:	1812      	adds	r2, r2, r0
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8008740:	42ab      	cmp	r3, r5
 8008742:	d306      	bcc.n	8008752 <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008744:	0020      	movs	r0, r4
 8008746:	f000 fa55 	bl	8008bf4 <LoRaMacSerializerData>
 800874a:	1e03      	subs	r3, r0, #0
 800874c:	d00f      	beq.n	800876e <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800874e:	2010      	movs	r0, #16
 8008750:	e00b      	b.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8008752:	0023      	movs	r3, r4
 8008754:	3328      	adds	r3, #40	; 0x28
 8008756:	7819      	ldrb	r1, [r3, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	9501      	str	r5, [sp, #4]
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	f7ff fe55 	bl	8008410 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008766:	2800      	cmp	r0, #0
 8008768:	d0ec      	beq.n	8008744 <LoRaMacCryptoSecureMessage+0x28>
}
 800876a:	b009      	add	sp, #36	; 0x24
 800876c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800876e:	7927      	ldrb	r7, [r4, #4]
 8008770:	6821      	ldr	r1, [r4, #0]
 8008772:	3f04      	subs	r7, #4
 8008774:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008776:	2009      	movs	r0, #9
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8008778:	9203      	str	r2, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800877a:	2900      	cmp	r1, #0
 800877c:	d0f5      	beq.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800877e:	2680      	movs	r6, #128	; 0x80
 8008780:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008782:	200d      	movs	r0, #13
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8008784:	0076      	lsls	r6, r6, #1
 8008786:	42b2      	cmp	r2, r6
 8008788:	d8ef      	bhi.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800878a:	2249      	movs	r2, #73	; 0x49
 800878c:	a804      	add	r0, sp, #16
        b0[1] = 0x00;
 800878e:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 8008790:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 8008792:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 8008794:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 8008796:	7143      	strb	r3, [r0, #5]
    b0[14] = 0x00;
 8008798:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800879a:	0023      	movs	r3, r4
 800879c:	68a6      	ldr	r6, [r4, #8]
    b0[0] = 0x49;
 800879e:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80087a0:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 80087a2:	7186      	strb	r6, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80087a4:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80087a6:	0c32      	lsrs	r2, r6, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80087a8:	0e36      	lsrs	r6, r6, #24
 80087aa:	7246      	strb	r6, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80087ac:	0a2e      	lsrs	r6, r5, #8
 80087ae:	72c6      	strb	r6, [r0, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80087b0:	0c2e      	lsrs	r6, r5, #16
 80087b2:	7306      	strb	r6, [r0, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80087b4:	332c      	adds	r3, #44	; 0x2c
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80087b6:	0e2e      	lsrs	r6, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80087b8:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 80087ba:	7285      	strb	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80087bc:	7346      	strb	r6, [r0, #13]
    b0[15] = msgLen & 0xFF;
 80087be:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80087c0:	9a03      	ldr	r2, [sp, #12]
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2306      	movs	r3, #6
 80087c6:	f002 fdc3 	bl	800b350 <SecureElementComputeAesCmac>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d001      	beq.n	80087d2 <LoRaMacCryptoSecureMessage+0xb6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80087ce:	200e      	movs	r0, #14
 80087d0:	e7cb      	b.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80087d2:	0020      	movs	r0, r4
 80087d4:	f000 fa0e 	bl	8008bf4 <LoRaMacSerializerData>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1b8      	bne.n	800874e <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 80087dc:	4b01      	ldr	r3, [pc, #4]	; (80087e4 <LoRaMacCryptoSecureMessage+0xc8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 80087e2:	e7c2      	b.n	800876a <LoRaMacCryptoSecureMessage+0x4e>
 80087e4:	20001290 	.word	0x20001290

080087e8 <LoRaMacCryptoUnsecureMessage>:
{
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80087ee:	001c      	movs	r4, r3
 80087f0:	0007      	movs	r7, r0
 80087f2:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 80087f4:	2309      	movs	r3, #9
{
 80087f6:	9205      	str	r2, [sp, #20]
    if( macMsg == 0 )
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	d008      	beq.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 80087fc:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80087fe:	0010      	movs	r0, r2
 8008800:	a907      	add	r1, sp, #28
    uint32_t lastDown = 0;
 8008802:	9307      	str	r3, [sp, #28]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8008804:	f7ff fe74 	bl	80084f0 <GetLastFcntDown.constprop.0>
 8008808:	2800      	cmp	r0, #0
 800880a:	d003      	beq.n	8008814 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800880c:	2306      	movs	r3, #6
}
 800880e:	0018      	movs	r0, r3
 8008810:	b009      	add	sp, #36	; 0x24
 8008812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	429c      	cmp	r4, r3
 8008818:	d801      	bhi.n	800881e <LoRaMacCryptoUnsecureMessage+0x36>
 800881a:	3301      	adds	r3, #1
 800881c:	d1f6      	bne.n	800880c <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800881e:	0028      	movs	r0, r5
 8008820:	f000 f958 	bl	8008ad4 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8008824:	230f      	movs	r3, #15
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8008826:	2800      	cmp	r0, #0
 8008828:	d1f1      	bne.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800882a:	4a28      	ldr	r2, [pc, #160]	; (80088cc <LoRaMacCryptoUnsecureMessage+0xe4>)
 800882c:	0081      	lsls	r1, r0, #2
 800882e:	5c8b      	ldrb	r3, [r1, r2]
 8008830:	42bb      	cmp	r3, r7
 8008832:	d138      	bne.n	80088a6 <LoRaMacCryptoUnsecureMessage+0xbe>
    if( address != macMsg->FHDR.DevAddr )
 8008834:	68a8      	ldr	r0, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8008836:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 8008838:	42b0      	cmp	r0, r6
 800883a:	d1e8      	bne.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800883c:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <LoRaMacCryptoUnsecureMessage+0xe8>)
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800883e:	7b28      	ldrb	r0, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008840:	681b      	ldr	r3, [r3, #0]
        isAck = false;
 8008842:	0940      	lsrs	r0, r0, #5
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008844:	789b      	ldrb	r3, [r3, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 8008846:	1852      	adds	r2, r2, r1
        isAck = false;
 8008848:	1e5f      	subs	r7, r3, #1
 800884a:	41bb      	sbcs	r3, r7
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800884c:	7929      	ldrb	r1, [r5, #4]
        isAck = false;
 800884e:	4003      	ands	r3, r0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008850:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 8008852:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008854:	3904      	subs	r1, #4
 8008856:	7892      	ldrb	r2, [r2, #2]
 8008858:	9002      	str	r0, [sp, #8]
 800885a:	9401      	str	r4, [sp, #4]
 800885c:	9600      	str	r6, [sp, #0]
 800885e:	6828      	ldr	r0, [r5, #0]
 8008860:	b289      	uxth	r1, r1
 8008862:	f7ff fe6d 	bl	8008540 <VerifyCmacB0.constprop.0>
 8008866:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008868:	d1d1      	bne.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800886a:	1c6b      	adds	r3, r5, #1
 800886c:	7fdb      	ldrb	r3, [r3, #31]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d100      	bne.n	8008874 <LoRaMacCryptoUnsecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8008872:	2706      	movs	r7, #6
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8008874:	002b      	movs	r3, r5
 8008876:	3328      	adds	r3, #40	; 0x28
 8008878:	7819      	ldrb	r1, [r3, #0]
 800887a:	2301      	movs	r3, #1
 800887c:	9401      	str	r4, [sp, #4]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	003a      	movs	r2, r7
 8008882:	0033      	movs	r3, r6
 8008884:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008886:	f7ff fdc3 	bl	8008410 <PayloadEncrypt>
 800888a:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800888c:	d1bf      	bne.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800888e:	9805      	ldr	r0, [sp, #20]
 8008890:	3801      	subs	r0, #1
 8008892:	2806      	cmp	r0, #6
 8008894:	d8bb      	bhi.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
 8008896:	4a0e      	ldr	r2, [pc, #56]	; (80088d0 <LoRaMacCryptoUnsecureMessage+0xe8>)
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 8008898:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 800889a:	f7f7 fc47 	bl	800012c <__gnu_thumb1_case_uqi>
 800889e:	0b09      	.short	0x0b09
 80088a0:	13110f0d 	.word	0x13110f0d
 80088a4:	15          	.byte	0x15
 80088a5:	00          	.byte	0x00
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80088a6:	3001      	adds	r0, #1
 80088a8:	2805      	cmp	r0, #5
 80088aa:	d1bf      	bne.n	800882c <LoRaMacCryptoUnsecureMessage+0x44>
 80088ac:	230b      	movs	r3, #11
 80088ae:	e7ae      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80088b0:	6114      	str	r4, [r2, #16]
            break;
 80088b2:	e7ac      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80088b4:	6154      	str	r4, [r2, #20]
            break;
 80088b6:	e7aa      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 80088b8:	6194      	str	r4, [r2, #24]
            break;
 80088ba:	e7a8      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80088bc:	61d4      	str	r4, [r2, #28]
            break;
 80088be:	e7a6      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 80088c0:	6214      	str	r4, [r2, #32]
            break;
 80088c2:	e7a4      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 80088c4:	6254      	str	r4, [r2, #36]	; 0x24
            break;
 80088c6:	e7a2      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 80088c8:	6294      	str	r4, [r2, #40]	; 0x28
            break;
 80088ca:	e7a0      	b.n	800880e <LoRaMacCryptoUnsecureMessage+0x26>
 80088cc:	200000a4 	.word	0x200000a4
 80088d0:	20001290 	.word	0x20001290

080088d4 <LoRaMacCryptoDeriveMcRootKey>:
{
 80088d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088d6:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80088d8:	200a      	movs	r0, #10
    if( keyID != APP_KEY )
 80088da:	2900      	cmp	r1, #0
 80088dc:	d111      	bne.n	8008902 <LoRaMacCryptoDeriveMcRootKey+0x2e>
    uint8_t compBase[16] = { 0 };
 80088de:	220c      	movs	r2, #12
 80088e0:	a801      	add	r0, sp, #4
 80088e2:	9100      	str	r1, [sp, #0]
 80088e4:	f00d fb8b 	bl	8015ffe <memset>
    if( versionMinor == 1 )
 80088e8:	2c01      	cmp	r4, #1
 80088ea:	d102      	bne.n	80088f2 <LoRaMacCryptoDeriveMcRootKey+0x1e>
        compBase[0] = 0x20;
 80088ec:	2320      	movs	r3, #32
 80088ee:	466a      	mov	r2, sp
 80088f0:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80088f2:	2208      	movs	r2, #8
 80088f4:	2100      	movs	r1, #0
 80088f6:	4668      	mov	r0, sp
 80088f8:	f002 fdd5 	bl	800b4a6 <SecureElementDeriveAndStoreKey>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d000      	beq.n	8008902 <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008900:	200e      	movs	r0, #14
}
 8008902:	b004      	add	sp, #16
 8008904:	bd10      	pop	{r4, pc}
	...

08008908 <LoRaMacCryptoSetKey>:
{
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800890c:	f002 fdc2 	bl	800b494 <SecureElementSetKey>
 8008910:	1e04      	subs	r4, r0, #0
 8008912:	d10d      	bne.n	8008930 <LoRaMacCryptoSetKey+0x28>
    if( keyID == APP_KEY )
 8008914:	2d00      	cmp	r5, #0
 8008916:	d10c      	bne.n	8008932 <LoRaMacCryptoSetKey+0x2a>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8008918:	4b07      	ldr	r3, [pc, #28]	; (8008938 <LoRaMacCryptoSetKey+0x30>)
 800891a:	0021      	movs	r1, r4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	7898      	ldrb	r0, [r3, #2]
 8008920:	f7ff ffd8 	bl	80088d4 <LoRaMacCryptoDeriveMcRootKey>
 8008924:	2800      	cmp	r0, #0
 8008926:	d103      	bne.n	8008930 <LoRaMacCryptoSetKey+0x28>
    if( keyID != MC_ROOT_KEY )
 8008928:	f7ff fdd1 	bl	80084ce <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800892c:	2800      	cmp	r0, #0
 800892e:	d000      	beq.n	8008932 <LoRaMacCryptoSetKey+0x2a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008930:	240e      	movs	r4, #14
}
 8008932:	0020      	movs	r0, r4
 8008934:	bd70      	pop	{r4, r5, r6, pc}
 8008936:	46c0      	nop			; (mov r8, r8)
 8008938:	20001290 	.word	0x20001290

0800893c <LoRaMacCryptoHandleJoinAccept>:
{
 800893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893e:	b091      	sub	sp, #68	; 0x44
 8008940:	9005      	str	r0, [sp, #20]
 8008942:	000e      	movs	r6, r1
 8008944:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008946:	2009      	movs	r0, #9
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8008948:	2a00      	cmp	r2, #0
 800894a:	d073      	beq.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
 800894c:	2900      	cmp	r1, #0
 800894e:	d071      	beq.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8008950:	2700      	movs	r7, #0
 8008952:	221d      	movs	r2, #29
 8008954:	0039      	movs	r1, r7
 8008956:	a808      	add	r0, sp, #32
 8008958:	9707      	str	r7, [sp, #28]
 800895a:	f00d fb50 	bl	8015ffe <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
 800895e:	4d36      	ldr	r5, [pc, #216]	; (8008a38 <LoRaMacCryptoHandleJoinAccept+0xfc>)
    uint8_t versionMinor         = 0;
 8008960:	ab02      	add	r3, sp, #8
 8008962:	74df      	strb	r7, [r3, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8008964:	682b      	ldr	r3, [r5, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8008966:	aa02      	add	r2, sp, #8
    uint16_t nonce               = CryptoNvm->DevNonce;
 8008968:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800896a:	2313      	movs	r3, #19
 800896c:	189b      	adds	r3, r3, r2
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	ab07      	add	r3, sp, #28
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	7923      	ldrb	r3, [r4, #4]
 8008976:	003a      	movs	r2, r7
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	0031      	movs	r1, r6
 800897e:	9805      	ldr	r0, [sp, #20]
 8008980:	f002 fdb1 	bl	800b4e6 <SecureElementProcessJoinAccept>
 8008984:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008986:	200e      	movs	r0, #14
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8008988:	2b00      	cmp	r3, #0
 800898a:	d153      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800898c:	a907      	add	r1, sp, #28
 800898e:	7922      	ldrb	r2, [r4, #4]
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	f7fb ffde 	bl	8004952 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8008996:	0020      	movs	r0, r4
 8008998:	f000 f850 	bl	8008a3c <LoRaMacParserJoinAccept>
 800899c:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800899e:	200f      	movs	r0, #15
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80089a0:	2900      	cmp	r1, #0
 80089a2:	d147      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80089a4:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80089a6:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80089a8:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80089aa:	0412      	lsls	r2, r2, #16
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80089ac:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80089ae:	4316      	orrs	r6, r2
 80089b0:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80089b2:	682b      	ldr	r3, [r5, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80089b4:	380c      	subs	r0, #12
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	42b2      	cmp	r2, r6
 80089ba:	d03b      	beq.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
        CryptoNvm->JoinNonce = currentJoinNonce;
 80089bc:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80089be:	ab02      	add	r3, sp, #8
 80089c0:	7cd8      	ldrb	r0, [r3, #19]
 80089c2:	f7ff ff87 	bl	80088d4 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d134      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
    if( keyID != MC_ROOT_KEY )
 80089ca:	f7ff fd80 	bl	80084ce <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d130      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
        netID = ( uint32_t )macMsg->NetID[0];
 80089d2:	7a62      	ldrb	r2, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80089d4:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80089d6:	7ae4      	ldrb	r4, [r4, #11]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80089d8:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80089da:	0424      	lsls	r4, r4, #16
 80089dc:	431c      	orrs	r4, r3
 80089de:	4314      	orrs	r4, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80089e0:	003b      	movs	r3, r7
 80089e2:	0022      	movs	r2, r4
 80089e4:	0031      	movs	r1, r6
 80089e6:	3007      	adds	r0, #7
 80089e8:	f7ff fcea 	bl	80083c0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d121      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 80089f0:	003b      	movs	r3, r7
 80089f2:	0022      	movs	r2, r4
 80089f4:	0031      	movs	r1, r6
 80089f6:	3006      	adds	r0, #6
 80089f8:	f7ff fce2 	bl	80083c0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d119      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 8008a00:	003b      	movs	r3, r7
 8008a02:	0022      	movs	r2, r4
 8008a04:	0031      	movs	r1, r6
 8008a06:	3004      	adds	r0, #4
 8008a08:	f7ff fcda 	bl	80083c0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d111      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 8008a10:	003b      	movs	r3, r7
 8008a12:	0022      	movs	r2, r4
 8008a14:	0031      	movs	r1, r6
 8008a16:	3005      	adds	r0, #5
 8008a18:	f7ff fcd2 	bl	80083c0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d109      	bne.n	8008a34 <LoRaMacCryptoHandleJoinAccept+0xf8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8008a20:	aa02      	add	r2, sp, #8
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	7cd2      	ldrb	r2, [r2, #19]
    CryptoNvm->FCntList.FCntUp = 0;
 8008a26:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8008a28:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4252      	negs	r2, r2
 8008a2e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008a30:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008a32:	615a      	str	r2, [r3, #20]
}
 8008a34:	b011      	add	sp, #68	; 0x44
 8008a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a38:	20001290 	.word	0x20001290

08008a3c <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8008a40:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008a42:	2c00      	cmp	r4, #0
 8008a44:	d040      	beq.n	8008ac8 <LoRaMacParserJoinAccept+0x8c>
 8008a46:	6821      	ldr	r1, [r4, #0]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d03d      	beq.n	8008ac8 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008a4c:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8008a4e:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008a50:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8008a52:	3101      	adds	r1, #1
 8008a54:	1da0      	adds	r0, r4, #6
 8008a56:	f7fb ff7c 	bl	8004952 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8008a5a:	0020      	movs	r0, r4
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	2203      	movs	r2, #3
 8008a60:	1d19      	adds	r1, r3, #4
 8008a62:	3009      	adds	r0, #9
 8008a64:	f7fb ff75 	bl	8004952 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8008a68:	6821      	ldr	r1, [r4, #0]
 8008a6a:	79c8      	ldrb	r0, [r1, #7]
 8008a6c:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008a6e:	7a0a      	ldrb	r2, [r1, #8]
 8008a70:	0212      	lsls	r2, r2, #8
 8008a72:	4310      	orrs	r0, r2
 8008a74:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008a76:	7a4b      	ldrb	r3, [r1, #9]
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	4303      	orrs	r3, r0
 8008a7c:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008a7e:	7a8a      	ldrb	r2, [r1, #10]
 8008a80:	0612      	lsls	r2, r2, #24
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8008a86:	7acb      	ldrb	r3, [r1, #11]
 8008a88:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8008a8a:	7b0b      	ldrb	r3, [r1, #12]
 8008a8c:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8008a8e:	7923      	ldrb	r3, [r4, #4]
 8008a90:	2b21      	cmp	r3, #33	; 0x21
 8008a92:	d11a      	bne.n	8008aca <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8008a94:	0020      	movs	r0, r4
 8008a96:	2210      	movs	r2, #16
 8008a98:	310d      	adds	r1, #13
 8008a9a:	3012      	adds	r0, #18
 8008a9c:	f7fb ff59 	bl	8004952 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8008aa0:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8008aa2:	6825      	ldr	r5, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008aa4:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8008aa6:	5ce8      	ldrb	r0, [r5, r3]
 8008aa8:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008aaa:	5ca9      	ldrb	r1, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008aac:	1c9a      	adds	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008aae:	0209      	lsls	r1, r1, #8
 8008ab0:	4308      	orrs	r0, r1
 8008ab2:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008ab4:	5caa      	ldrb	r2, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008ab6:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008ab8:	0412      	lsls	r2, r2, #16
 8008aba:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 8008abc:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008abe:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008ac0:	5ceb      	ldrb	r3, [r5, r3]
 8008ac2:	061b      	lsls	r3, r3, #24
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	6262      	str	r2, [r4, #36]	; 0x24
}
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_PARSER_FAIL;
 8008aca:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8008acc:	2b11      	cmp	r3, #17
 8008ace:	dcfb      	bgt.n	8008ac8 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8008ad0:	230d      	movs	r3, #13
 8008ad2:	e7e6      	b.n	8008aa2 <LoRaMacParserJoinAccept+0x66>

08008ad4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8008ad8:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008ada:	2c00      	cmp	r4, #0
 8008adc:	d054      	beq.n	8008b88 <LoRaMacParserData+0xb4>
 8008ade:	6821      	ldr	r1, [r4, #0]
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	d051      	beq.n	8008b88 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008ae4:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8008ae6:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8008ae8:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8008aea:	7848      	ldrb	r0, [r1, #1]
 8008aec:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008aee:	788a      	ldrb	r2, [r1, #2]
 8008af0:	0212      	lsls	r2, r2, #8
 8008af2:	4310      	orrs	r0, r2
 8008af4:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008af6:	78cb      	ldrb	r3, [r1, #3]
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008afc:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008afe:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008b00:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008b02:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008b04:	0612      	lsls	r2, r2, #24
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8008b0a:	794b      	ldrb	r3, [r1, #5]
 8008b0c:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8008b0e:	798b      	ldrb	r3, [r1, #6]
 8008b10:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008b12:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008b14:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008b16:	0212      	lsls	r2, r2, #8
 8008b18:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008b1a:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008b1c:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008b1e:	0712      	lsls	r2, r2, #28
 8008b20:	0f12      	lsrs	r2, r2, #28
 8008b22:	f7fb ff16 	bl	8004952 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008b26:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 8008b28:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 8008b2a:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008b2c:	0709      	lsls	r1, r1, #28
 8008b2e:	0f09      	lsrs	r1, r1, #28
 8008b30:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 8008b32:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 8008b34:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 8008b36:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008b38:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008b3a:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008b3c:	1b93      	subs	r3, r2, r6
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	dd0c      	ble.n	8008b5c <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008b46:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008b48:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008b4a:	1a52      	subs	r2, r2, r1
 8008b4c:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008b4e:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008b50:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8008b52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b54:	b292      	uxth	r2, r2
 8008b56:	1859      	adds	r1, r3, r1
 8008b58:	f7fb fefb 	bl	8004952 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	7923      	ldrb	r3, [r4, #4]
 8008b60:	18d3      	adds	r3, r2, r3
 8008b62:	1f1a      	subs	r2, r3, #4
 8008b64:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8008b66:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8008b68:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8008b6a:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008b6c:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8008b6e:	0209      	lsls	r1, r1, #8
 8008b70:	4308      	orrs	r0, r1
 8008b72:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008b74:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8008b76:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008b78:	0412      	lsls	r2, r2, #16
 8008b7a:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 8008b7c:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008b7e:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	061b      	lsls	r3, r3, #24
 8008b84:	431a      	orrs	r2, r3
 8008b86:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8008b88:	bd70      	pop	{r4, r5, r6, pc}

08008b8a <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008b8e:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008b90:	2c00      	cmp	r4, #0
 8008b92:	d02e      	beq.n	8008bf2 <LoRaMacSerializerJoinRequest+0x68>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d02b      	beq.n	8008bf2 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8008b9a:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8008b9c:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8008b9e:	2a16      	cmp	r2, #22
 8008ba0:	d927      	bls.n	8008bf2 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008ba2:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008ba4:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008ba6:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	2208      	movs	r2, #8
 8008bac:	1c58      	adds	r0, r3, #1
 8008bae:	f7fb fed9 	bl	8004964 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8008bb2:	0021      	movs	r1, r4
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	3009      	adds	r0, #9
 8008bba:	310e      	adds	r1, #14
 8008bbc:	f7fb fed2 	bl	8004964 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8008bc0:	8ae3      	ldrh	r3, [r4, #22]
 8008bc2:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 8008bc4:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8008bc6:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8008bc8:	8ae3      	ldrh	r3, [r4, #22]
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	0a1b      	lsrs	r3, r3, #8
 8008bce:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008bd0:	69a3      	ldr	r3, [r4, #24]
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008bd6:	69a3      	ldr	r3, [r4, #24]
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008bde:	69a3      	ldr	r3, [r4, #24]
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	0c1b      	lsrs	r3, r3, #16
 8008be4:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008be6:	69a3      	ldr	r3, [r4, #24]
 8008be8:	6822      	ldr	r2, [r4, #0]
 8008bea:	0e1b      	lsrs	r3, r3, #24
 8008bec:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 8008bee:	2317      	movs	r3, #23
 8008bf0:	7123      	strb	r3, [r4, #4]
}
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008bf8:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008bfa:	2c00      	cmp	r4, #0
 8008bfc:	d068      	beq.n	8008cd0 <LoRaMacSerializerData+0xdc>
 8008bfe:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008c00:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008c02:	2900      	cmp	r1, #0
 8008c04:	d064      	beq.n	8008cd0 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 8008c06:	0025      	movs	r5, r4
 8008c08:	3528      	adds	r5, #40	; 0x28
 8008c0a:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008c0c:	7b22      	ldrb	r2, [r4, #12]
 8008c0e:	0003      	movs	r3, r0
 8008c10:	1e5e      	subs	r6, r3, #1
 8008c12:	41b3      	sbcs	r3, r6
 8008c14:	0712      	lsls	r2, r2, #28
 8008c16:	0f12      	lsrs	r2, r2, #28
 8008c18:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8008c1a:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008c1c:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8008c1e:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 8008c20:	7922      	ldrb	r2, [r4, #4]
 8008c22:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8008c24:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d352      	bcc.n	8008cd0 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008c2a:	7963      	ldrb	r3, [r4, #5]
 8008c2c:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008c2e:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8008c30:	68a3      	ldr	r3, [r4, #8]
 8008c32:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008c34:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8008c36:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	0c1b      	lsrs	r3, r3, #16
 8008c46:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8008c48:	68a3      	ldr	r3, [r4, #8]
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	0e1b      	lsrs	r3, r3, #24
 8008c4e:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8008c50:	7b23      	ldrb	r3, [r4, #12]
 8008c52:	6822      	ldr	r2, [r4, #0]
 8008c54:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8008c56:	89e3      	ldrh	r3, [r4, #14]
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8008c5c:	89e3      	ldrh	r3, [r4, #14]
 8008c5e:	6822      	ldr	r2, [r4, #0]
 8008c60:	0a1b      	lsrs	r3, r3, #8
 8008c62:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008c64:	7b22      	ldrb	r2, [r4, #12]
 8008c66:	6820      	ldr	r0, [r4, #0]
 8008c68:	0712      	lsls	r2, r2, #28
 8008c6a:	0f12      	lsrs	r2, r2, #28
 8008c6c:	3008      	adds	r0, #8
 8008c6e:	f7fb fe70 	bl	8004952 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008c72:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8008c74:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008c76:	071b      	lsls	r3, r3, #28
 8008c78:	0f1b      	lsrs	r3, r3, #28
 8008c7a:	001e      	movs	r6, r3
 8008c7c:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	d005      	beq.n	8008c8e <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8008c82:	1c62      	adds	r2, r4, #1
 8008c84:	7fd2      	ldrb	r2, [r2, #31]
 8008c86:	6821      	ldr	r1, [r4, #0]
 8008c88:	3309      	adds	r3, #9
 8008c8a:	558a      	strb	r2, [r1, r6]
 8008c8c:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	782a      	ldrb	r2, [r5, #0]
 8008c92:	1998      	adds	r0, r3, r6
 8008c94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c96:	f7fb fe5c 	bl	8004952 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8008c9a:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008c9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c9e:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8008ca0:	18f3      	adds	r3, r6, r3
 8008ca2:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008ca4:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008ca6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008ca8:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008caa:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008cac:	b292      	uxth	r2, r2
 8008cae:	0a09      	lsrs	r1, r1, #8
 8008cb0:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008cb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008cb4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008cb6:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008cb8:	b292      	uxth	r2, r2
 8008cba:	0c09      	lsrs	r1, r1, #16
 8008cbc:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008cbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008cc0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008cc2:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	0e09      	lsrs	r1, r1, #24
 8008cc8:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 8008cca:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008ccc:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 8008cce:	7123      	strb	r3, [r4, #4]
}
 8008cd0:	bd70      	pop	{r4, r5, r6, pc}

08008cd2 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8008cd2:	0003      	movs	r3, r0
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8008cd4:	2001      	movs	r0, #1
    switch( region )
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d003      	beq.n	8008ce2 <RegionIsActive+0x10>
 8008cda:	3b08      	subs	r3, #8
 8008cdc:	425a      	negs	r2, r3
 8008cde:	4153      	adcs	r3, r2
 8008ce0:	b2d8      	uxtb	r0, r3
        default:
        {
            return false;
        }
    }
}
 8008ce2:	4770      	bx	lr

08008ce4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8008ce4:	0003      	movs	r3, r0
 8008ce6:	b507      	push	{r0, r1, r2, lr}
 8008ce8:	0008      	movs	r0, r1
    PhyParam_t phyParam = { 0 };
    switch( region )
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d004      	beq.n	8008cf8 <RegionGetPhyParam+0x14>
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	d007      	beq.n	8008d02 <RegionGetPhyParam+0x1e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	e002      	b.n	8008cfe <RegionGetPhyParam+0x1a>
        EU868_GET_PHY_PARAM( );
 8008cf8:	f000 fd1e 	bl	8009738 <RegionEU868GetPhyParam>
        US915_GET_PHY_PARAM( );
 8008cfc:	9001      	str	r0, [sp, #4]
        }
    }
}
 8008cfe:	9801      	ldr	r0, [sp, #4]
 8008d00:	bd0e      	pop	{r1, r2, r3, pc}
        US915_GET_PHY_PARAM( );
 8008d02:	f001 fa19 	bl	800a138 <RegionUS915GetPhyParam>
 8008d06:	e7f9      	b.n	8008cfc <RegionGetPhyParam+0x18>

08008d08 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8008d08:	0003      	movs	r3, r0
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	0008      	movs	r0, r1
    switch( region )
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d002      	beq.n	8008d18 <RegionSetBandTxDone+0x10>
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d003      	beq.n	8008d1e <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 8008d16:	bd10      	pop	{r4, pc}
        EU868_SET_BAND_TX_DONE( );
 8008d18:	f000 fda0 	bl	800985c <RegionEU868SetBandTxDone>
 8008d1c:	e7fb      	b.n	8008d16 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 8008d1e:	f001 faa9 	bl	800a274 <RegionUS915SetBandTxDone>
 8008d22:	e7f8      	b.n	8008d16 <RegionSetBandTxDone+0xe>

08008d24 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8008d24:	0003      	movs	r3, r0
 8008d26:	b510      	push	{r4, lr}
 8008d28:	0008      	movs	r0, r1
    switch( region )
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d002      	beq.n	8008d34 <RegionInitDefaults+0x10>
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d003      	beq.n	8008d3a <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 8008d32:	bd10      	pop	{r4, pc}
        EU868_INIT_DEFAULTS( );
 8008d34:	f000 fdac 	bl	8009890 <RegionEU868InitDefaults>
 8008d38:	e7fb      	b.n	8008d32 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 8008d3a:	f001 fab5 	bl	800a2a8 <RegionUS915InitDefaults>
}
 8008d3e:	e7f8      	b.n	8008d32 <RegionInitDefaults+0xe>

08008d40 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8008d40:	0003      	movs	r3, r0
 8008d42:	b510      	push	{r4, lr}
 8008d44:	0008      	movs	r0, r1
 8008d46:	0011      	movs	r1, r2
    switch( region )
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d003      	beq.n	8008d54 <RegionVerify+0x14>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d004      	beq.n	8008d5a <RegionVerify+0x1a>
 8008d50:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008d52:	bd10      	pop	{r4, pc}
        EU868_VERIFY( );
 8008d54:	f000 fe00 	bl	8009958 <RegionEU868Verify>
 8008d58:	e7fb      	b.n	8008d52 <RegionVerify+0x12>
        US915_VERIFY( );
 8008d5a:	f001 fb2b 	bl	800a3b4 <RegionUS915Verify>
 8008d5e:	e7f8      	b.n	8008d52 <RegionVerify+0x12>

08008d60 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8008d60:	0003      	movs	r3, r0
 8008d62:	b510      	push	{r4, lr}
 8008d64:	0008      	movs	r0, r1
    switch( region )
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d002      	beq.n	8008d70 <RegionApplyCFList+0x10>
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d003      	beq.n	8008d76 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 8008d6e:	bd10      	pop	{r4, pc}
        EU868_APPLY_CF_LIST( );
 8008d70:	f001 f946 	bl	800a000 <RegionEU868ApplyCFList>
 8008d74:	e7fb      	b.n	8008d6e <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 8008d76:	f001 fb47 	bl	800a408 <RegionUS915ApplyCFList>
}
 8008d7a:	e7f8      	b.n	8008d6e <RegionApplyCFList+0xe>

08008d7c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	0008      	movs	r0, r1
    switch( region )
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d003      	beq.n	8008d8e <RegionChanMaskSet+0x12>
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d004      	beq.n	8008d94 <RegionChanMaskSet+0x18>
 8008d8a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008d8c:	bd10      	pop	{r4, pc}
        EU868_CHAN_MASK_SET( );
 8008d8e:	f000 fe0d 	bl	80099ac <RegionEU868ChanMaskSet>
 8008d92:	e7fb      	b.n	8008d8c <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 8008d94:	f001 fb68 	bl	800a468 <RegionUS915ChanMaskSet>
 8008d98:	e7f8      	b.n	8008d8c <RegionChanMaskSet+0x10>

08008d9a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	0004      	movs	r4, r0
 8008d9e:	0008      	movs	r0, r1
 8008da0:	0011      	movs	r1, r2
 8008da2:	001a      	movs	r2, r3
    switch( region )
 8008da4:	2c05      	cmp	r4, #5
 8008da6:	d002      	beq.n	8008dae <RegionComputeRxWindowParameters+0x14>
 8008da8:	2c08      	cmp	r4, #8
 8008daa:	d004      	beq.n	8008db6 <RegionComputeRxWindowParameters+0x1c>
        default:
        {
            break;
        }
    }
}
 8008dac:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8008dae:	9b02      	ldr	r3, [sp, #8]
 8008db0:	f000 fe1c 	bl	80099ec <RegionEU868ComputeRxWindowParameters>
 8008db4:	e7fa      	b.n	8008dac <RegionComputeRxWindowParameters+0x12>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8008db6:	9b02      	ldr	r3, [sp, #8]
 8008db8:	f001 fb96 	bl	800a4e8 <RegionUS915ComputeRxWindowParameters>
}
 8008dbc:	e7f6      	b.n	8008dac <RegionComputeRxWindowParameters+0x12>

08008dbe <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8008dbe:	0003      	movs	r3, r0
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	0008      	movs	r0, r1
 8008dc4:	0011      	movs	r1, r2
    switch( region )
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d003      	beq.n	8008dd2 <RegionRxConfig+0x14>
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d004      	beq.n	8008dd8 <RegionRxConfig+0x1a>
 8008dce:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008dd0:	bd10      	pop	{r4, pc}
        EU868_RX_CONFIG( );
 8008dd2:	f000 fe41 	bl	8009a58 <RegionEU868RxConfig>
 8008dd6:	e7fb      	b.n	8008dd0 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 8008dd8:	f001 fbb6 	bl	800a548 <RegionUS915RxConfig>
 8008ddc:	e7f8      	b.n	8008dd0 <RegionRxConfig+0x12>

08008dde <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8008dde:	b510      	push	{r4, lr}
 8008de0:	0004      	movs	r4, r0
 8008de2:	0008      	movs	r0, r1
 8008de4:	0011      	movs	r1, r2
 8008de6:	001a      	movs	r2, r3
    switch( region )
 8008de8:	2c05      	cmp	r4, #5
 8008dea:	d003      	beq.n	8008df4 <RegionTxConfig+0x16>
 8008dec:	2c08      	cmp	r4, #8
 8008dee:	d004      	beq.n	8008dfa <RegionTxConfig+0x1c>
 8008df0:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8008df2:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
 8008df4:	f000 fea2 	bl	8009b3c <RegionEU868TxConfig>
 8008df8:	e7fb      	b.n	8008df2 <RegionTxConfig+0x14>
        US915_TX_CONFIG( );
 8008dfa:	f001 fbf5 	bl	800a5e8 <RegionUS915TxConfig>
 8008dfe:	e7f8      	b.n	8008df2 <RegionTxConfig+0x14>

08008e00 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8008e00:	b513      	push	{r0, r1, r4, lr}
 8008e02:	0004      	movs	r4, r0
 8008e04:	0008      	movs	r0, r1
 8008e06:	0011      	movs	r1, r2
 8008e08:	001a      	movs	r2, r3
 8008e0a:	9b05      	ldr	r3, [sp, #20]
    switch( region )
 8008e0c:	2c05      	cmp	r4, #5
 8008e0e:	d003      	beq.n	8008e18 <RegionLinkAdrReq+0x18>
 8008e10:	2c08      	cmp	r4, #8
 8008e12:	d006      	beq.n	8008e22 <RegionLinkAdrReq+0x22>
 8008e14:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008e16:	bd16      	pop	{r1, r2, r4, pc}
        EU868_LINK_ADR_REQ( );
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	f000 ff0c 	bl	8009c38 <RegionEU868LinkAdrReq>
 8008e20:	e7f9      	b.n	8008e16 <RegionLinkAdrReq+0x16>
        US915_LINK_ADR_REQ( );
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	f001 fc5d 	bl	800a6e4 <RegionUS915LinkAdrReq>
 8008e2a:	e7f4      	b.n	8008e16 <RegionLinkAdrReq+0x16>

08008e2c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8008e2c:	0003      	movs	r3, r0
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	0008      	movs	r0, r1
    switch( region )
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d003      	beq.n	8008e3e <RegionRxParamSetupReq+0x12>
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	d004      	beq.n	8008e44 <RegionRxParamSetupReq+0x18>
 8008e3a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008e3c:	bd10      	pop	{r4, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 8008e3e:	f000 ffa1 	bl	8009d84 <RegionEU868RxParamSetupReq>
 8008e42:	e7fb      	b.n	8008e3c <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 8008e44:	f001 fd4a 	bl	800a8dc <RegionUS915RxParamSetupReq>
 8008e48:	e7f8      	b.n	8008e3c <RegionRxParamSetupReq+0x10>

08008e4a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	0008      	movs	r0, r1
    switch( region )
 8008e50:	2b05      	cmp	r3, #5
 8008e52:	d003      	beq.n	8008e5c <RegionNewChannelReq+0x12>
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d004      	beq.n	8008e62 <RegionNewChannelReq+0x18>
 8008e58:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008e5a:	bd10      	pop	{r4, pc}
        EU868_NEW_CHANNEL_REQ( );
 8008e5c:	f001 f90a 	bl	800a074 <RegionEU868NewChannelReq>
 8008e60:	e7fb      	b.n	8008e5a <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 8008e62:	f001 fd68 	bl	800a936 <RegionUS915NewChannelReq>
 8008e66:	e7f8      	b.n	8008e5a <RegionNewChannelReq+0x10>

08008e68 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8008e68:	0003      	movs	r3, r0
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	0008      	movs	r0, r1
    switch( region )
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	d003      	beq.n	8008e7a <RegionTxParamSetupReq+0x12>
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	d004      	beq.n	8008e80 <RegionTxParamSetupReq+0x18>
 8008e76:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008e78:	bd10      	pop	{r4, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 8008e7a:	f000 ffa6 	bl	8009dca <RegionEU868TxParamSetupReq>
 8008e7e:	e7fb      	b.n	8008e78 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 8008e80:	f001 fd5c 	bl	800a93c <RegionUS915TxParamSetupReq>
 8008e84:	e7f8      	b.n	8008e78 <RegionTxParamSetupReq+0x10>

08008e86 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8008e86:	0003      	movs	r3, r0
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	0008      	movs	r0, r1
    switch( region )
 8008e8c:	2b05      	cmp	r3, #5
 8008e8e:	d003      	beq.n	8008e98 <RegionDlChannelReq+0x12>
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d004      	beq.n	8008e9e <RegionDlChannelReq+0x18>
 8008e94:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008e96:	bd10      	pop	{r4, pc}
        EU868_DL_CHANNEL_REQ( );
 8008e98:	f000 ff9a 	bl	8009dd0 <RegionEU868DlChannelReq>
 8008e9c:	e7fb      	b.n	8008e96 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 8008e9e:	f001 fd50 	bl	800a942 <RegionUS915DlChannelReq>
 8008ea2:	e7f8      	b.n	8008e96 <RegionDlChannelReq+0x10>

08008ea4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	0008      	movs	r0, r1
 8008eaa:	0011      	movs	r1, r2
    switch( region )
 8008eac:	2b05      	cmp	r3, #5
 8008eae:	d003      	beq.n	8008eb8 <RegionAlternateDr+0x14>
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d004      	beq.n	8008ebe <RegionAlternateDr+0x1a>
 8008eb4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8008eb6:	bd10      	pop	{r4, pc}
        EU868_ALTERNATE_DR( );
 8008eb8:	f000 ffae 	bl	8009e18 <RegionEU868AlternateDr>
 8008ebc:	e7fb      	b.n	8008eb6 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 8008ebe:	f001 fd43 	bl	800a948 <RegionUS915AlternateDr>
 8008ec2:	e7f8      	b.n	8008eb6 <RegionAlternateDr+0x12>

08008ec4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	0004      	movs	r4, r0
 8008ec8:	0008      	movs	r0, r1
 8008eca:	0011      	movs	r1, r2
 8008ecc:	001a      	movs	r2, r3
    switch( region )
 8008ece:	2c05      	cmp	r4, #5
 8008ed0:	d003      	beq.n	8008eda <RegionNextChannel+0x16>
 8008ed2:	2c08      	cmp	r4, #8
 8008ed4:	d005      	beq.n	8008ee2 <RegionNextChannel+0x1e>
 8008ed6:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8008ed8:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	f000 ff9e 	bl	8009e1c <RegionEU868NextChannel>
 8008ee0:	e7fa      	b.n	8008ed8 <RegionNextChannel+0x14>
        US915_NEXT_CHANNEL( );
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	f001 fd44 	bl	800a970 <RegionUS915NextChannel>
 8008ee8:	e7f6      	b.n	8008ed8 <RegionNextChannel+0x14>

08008eea <RegionApplyDrOffset>:
        }
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8008eea:	b510      	push	{r4, lr}
 8008eec:	0004      	movs	r4, r0
 8008eee:	0008      	movs	r0, r1
 8008ef0:	0011      	movs	r1, r2
 8008ef2:	001a      	movs	r2, r3
    switch( region )
 8008ef4:	2c05      	cmp	r4, #5
 8008ef6:	d003      	beq.n	8008f00 <RegionApplyDrOffset+0x16>
 8008ef8:	2c08      	cmp	r4, #8
 8008efa:	d004      	beq.n	8008f06 <RegionApplyDrOffset+0x1c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8008efc:	b2c8      	uxtb	r0, r1
 8008efe:	e001      	b.n	8008f04 <RegionApplyDrOffset+0x1a>
        EU868_APPLY_DR_OFFSET( );
 8008f00:	f001 f8d6 	bl	800a0b0 <RegionEU868ApplyDrOffset>
        }
    }
}
 8008f04:	bd10      	pop	{r4, pc}
        US915_APPLY_DR_OFFSET( );
 8008f06:	f001 fdd1 	bl	800aaac <RegionUS915ApplyDrOffset>
 8008f0a:	e7fb      	b.n	8008f04 <RegionApplyDrOffset+0x1a>

08008f0c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8008f0c:	4800      	ldr	r0, [pc, #0]	; (8008f10 <RegionGetVersion+0x4>)
 8008f0e:	4770      	bx	lr
 8008f10:	02010001 	.word	0x02010001

08008f14 <RegionBaseUSComputeNext125kHzJoinChannel>:
LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8008f14:	2300      	movs	r3, #0
{
 8008f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	000e      	movs	r6, r1
 8008f1c:	9000      	str	r0, [sp, #0]
 8008f1e:	9201      	str	r2, [sp, #4]
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d102      	bne.n	8008f2e <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008f28:	2003      	movs	r0, #3
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
}
 8008f2a:	b005      	add	sp, #20
 8008f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	d0fa      	beq.n	8008f28 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>
 8008f32:	9b01      	ldr	r3, [sp, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0f7      	beq.n	8008f28 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>
        if( ( startIndex % 2 ) == 0 )
 8008f38:	2701      	movs	r7, #1
    startIndex = *groupsCurrentIndex;
 8008f3a:	780c      	ldrb	r4, [r1, #0]
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8008f3c:	9a00      	ldr	r2, [sp, #0]
 8008f3e:	0863      	lsrs	r3, r4, #1
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	5a9b      	ldrh	r3, [r3, r2]
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8008f44:	0a1a      	lsrs	r2, r3, #8
        if( ( startIndex % 2 ) == 0 )
 8008f46:	423c      	tst	r4, r7
 8008f48:	d101      	bne.n	8008f4e <RegionBaseUSComputeNext125kHzJoinChannel+0x3a>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8008f4a:	22ff      	movs	r2, #255	; 0xff
 8008f4c:	401a      	ands	r2, r3
{
 8008f4e:	2300      	movs	r3, #0
    *availableChannels = 0;
 8008f50:	001d      	movs	r5, r3
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8008f52:	0010      	movs	r0, r2
 8008f54:	4118      	asrs	r0, r3
 8008f56:	b2d9      	uxtb	r1, r3
 8008f58:	4238      	tst	r0, r7
 8008f5a:	d003      	beq.n	8008f64 <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
            findAvailableChannelsIndex[*availableChannels] = i;
 8008f5c:	a802      	add	r0, sp, #8
 8008f5e:	5541      	strb	r1, [r0, r5]
            ( *availableChannels )++;
 8008f60:	3501      	adds	r5, #1
 8008f62:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < 8; i++ )
 8008f64:	3301      	adds	r3, #1
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d1f3      	bne.n	8008f52 <RegionBaseUSComputeNext125kHzJoinChannel+0x3e>
        if ( availableChannels > 0 )
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	d009      	beq.n	8008f82 <RegionBaseUSComputeNext125kHzJoinChannel+0x6e>
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8008f6e:	2000      	movs	r0, #0
 8008f70:	1e69      	subs	r1, r5, #1
 8008f72:	f7fb fce3 	bl	800493c <randr>
 8008f76:	aa02      	add	r2, sp, #8
 8008f78:	5c12      	ldrb	r2, [r2, r0]
 8008f7a:	00e3      	lsls	r3, r4, #3
 8008f7c:	189b      	adds	r3, r3, r2
 8008f7e:	9a01      	ldr	r2, [sp, #4]
 8008f80:	7013      	strb	r3, [r2, #0]
        startIndex++;
 8008f82:	3401      	adds	r4, #1
 8008f84:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8008f86:	2c07      	cmp	r4, #7
 8008f88:	d900      	bls.n	8008f8c <RegionBaseUSComputeNext125kHzJoinChannel+0x78>
            startIndex = 0;
 8008f8a:	2400      	movs	r4, #0
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8008f8c:	2d00      	cmp	r5, #0
 8008f8e:	d103      	bne.n	8008f98 <RegionBaseUSComputeNext125kHzJoinChannel+0x84>
 8008f90:	7833      	ldrb	r3, [r6, #0]
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	d1d2      	bne.n	8008f3c <RegionBaseUSComputeNext125kHzJoinChannel+0x28>
 8008f96:	e7c7      	b.n	8008f28 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>
        return LORAMAC_STATUS_OK;
 8008f98:	2000      	movs	r0, #0
        *groupsCurrentIndex = startIndex;
 8008f9a:	7034      	strb	r4, [r6, #0]
        return LORAMAC_STATUS_OK;
 8008f9c:	e7c5      	b.n	8008f2a <RegionBaseUSComputeNext125kHzJoinChannel+0x16>

08008f9e <RegionBaseUSCalcDownlinkFrequency>:

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8008f9e:	4350      	muls	r0, r2
 8008fa0:	1840      	adds	r0, r0, r1
}
 8008fa2:	4770      	bx	lr

08008fa4 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8008fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa6:	9101      	str	r1, [sp, #4]
 8008fa8:	a908      	add	r1, sp, #32
 8008faa:	7809      	ldrb	r1, [r1, #0]
 8008fac:	9000      	str	r0, [sp, #0]
 8008fae:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 8008fb0:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	db29      	blt.n	800900a <RegionCommonChanVerifyDr+0x66>
 8008fb6:	428a      	cmp	r2, r1
 8008fb8:	dc27      	bgt.n	800900a <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8008fba:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8008fbc:	260f      	movs	r6, #15
 8008fbe:	e01e      	b.n	8008ffe <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8008fc0:	9c01      	ldr	r4, [sp, #4]
 8008fc2:	0041      	lsls	r1, r0, #1
 8008fc4:	5b09      	ldrh	r1, [r1, r4]
 8008fc6:	2500      	movs	r5, #0
 8008fc8:	468c      	mov	ip, r1
 8008fca:	210c      	movs	r1, #12
 8008fcc:	434b      	muls	r3, r1
 8008fce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fd0:	18cb      	adds	r3, r1, r3
 8008fd2:	4661      	mov	r1, ip
 8008fd4:	4129      	asrs	r1, r5
 8008fd6:	4239      	tst	r1, r7
 8008fd8:	d00b      	beq.n	8008ff2 <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8008fda:	2408      	movs	r4, #8
 8008fdc:	7a19      	ldrb	r1, [r3, #8]
 8008fde:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8008fe0:	0709      	lsls	r1, r1, #28
 8008fe2:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8008fe4:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 8008fe6:	4031      	ands	r1, r6
 8008fe8:	428a      	cmp	r2, r1
 8008fea:	db02      	blt.n	8008ff2 <RegionCommonChanVerifyDr+0x4e>
 8008fec:	4034      	ands	r4, r6
 8008fee:	42a2      	cmp	r2, r4
 8008ff0:	dd0c      	ble.n	800900c <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8008ff2:	3501      	adds	r5, #1
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	2d10      	cmp	r5, #16
 8008ff8:	d1eb      	bne.n	8008fd2 <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	b2c0      	uxtb	r0, r0
 8008ffe:	0103      	lsls	r3, r0, #4
 8009000:	9900      	ldr	r1, [sp, #0]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	4299      	cmp	r1, r3
 8009006:	d8db      	bhi.n	8008fc0 <RegionCommonChanVerifyDr+0x1c>
        return false;
 8009008:	2000      	movs	r0, #0
}
 800900a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800900c:	2001      	movs	r0, #1
 800900e:	e7fc      	b.n	800900a <RegionCommonChanVerifyDr+0x66>

08009010 <RegionCommonValueInRange>:
{
 8009010:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 8009012:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 8009014:	428b      	cmp	r3, r1
 8009016:	db04      	blt.n	8009022 <RegionCommonValueInRange+0x12>
 8009018:	0fd8      	lsrs	r0, r3, #31
 800901a:	17d1      	asrs	r1, r2, #31
 800901c:	429a      	cmp	r2, r3
 800901e:	4148      	adcs	r0, r1
        return 1;
 8009020:	b2c0      	uxtb	r0, r0
}
 8009022:	4770      	bx	lr

08009024 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8009024:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 8009026:	090b      	lsrs	r3, r1, #4
{
 8009028:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800902a:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800902c:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800902e:	429d      	cmp	r5, r3
 8009030:	d30b      	bcc.n	800904a <RegionCommonChanDisable+0x26>
 8009032:	4291      	cmp	r1, r2
 8009034:	d209      	bcs.n	800904a <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8009036:	220f      	movs	r2, #15
 8009038:	3001      	adds	r0, #1
 800903a:	4011      	ands	r1, r2
 800903c:	0002      	movs	r2, r0
 800903e:	408a      	lsls	r2, r1
 8009040:	0011      	movs	r1, r2
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	5ae2      	ldrh	r2, [r4, r3]
 8009046:	438a      	bics	r2, r1
 8009048:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800904a:	bd30      	pop	{r4, r5, pc}

0800904c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800904c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800904e:	1e03      	subs	r3, r0, #0
 8009050:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8009052:	d005      	beq.n	8009060 <RegionCommonCountChannels+0x14>
 8009054:	0048      	lsls	r0, r1, #1
 8009056:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 8009058:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800905a:	9a01      	ldr	r2, [sp, #4]
 800905c:	4291      	cmp	r1, r2
 800905e:	d300      	bcc.n	8009062 <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 8009060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8009062:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 8009064:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 8009066:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8009068:	2501      	movs	r5, #1
 800906a:	40a5      	lsls	r5, r4
 800906c:	002e      	movs	r6, r5
 800906e:	403e      	ands	r6, r7
 8009070:	42b5      	cmp	r5, r6
 8009072:	d101      	bne.n	8009078 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 8009074:	3201      	adds	r2, #1
 8009076:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 8009078:	3401      	adds	r4, #1
 800907a:	2c10      	cmp	r4, #16
 800907c:	d1f4      	bne.n	8009068 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800907e:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8009080:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 8009082:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8009084:	b2c9      	uxtb	r1, r1
 8009086:	3302      	adds	r3, #2
 8009088:	e7e7      	b.n	800905a <RegionCommonCountChannels+0xe>

0800908a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800908a:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800908c:	2800      	cmp	r0, #0
 800908e:	d005      	beq.n	800909c <RegionCommonChanMaskCopy+0x12>
 8009090:	2900      	cmp	r1, #0
 8009092:	d003      	beq.n	800909c <RegionCommonChanMaskCopy+0x12>
 8009094:	2300      	movs	r3, #0
 8009096:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 8009098:	4293      	cmp	r3, r2
 800909a:	d100      	bne.n	800909e <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800909c:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800909e:	5acc      	ldrh	r4, [r1, r3]
 80090a0:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 80090a2:	3302      	adds	r3, #2
 80090a4:	e7f8      	b.n	8009098 <RegionCommonChanMaskCopy+0xe>
	...

080090a8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80090a8:	b082      	sub	sp, #8
 80090aa:	b570      	push	{r4, r5, r6, lr}
 80090ac:	8805      	ldrh	r5, [r0, #0]
 80090ae:	9305      	str	r3, [sp, #20]
    if( joined == false )
 80090b0:	2a00      	cmp	r2, #0
 80090b2:	d111      	bne.n	80090d8 <RegionCommonSetBandTxDone+0x30>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80090b4:	26e1      	movs	r6, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80090b6:	2464      	movs	r4, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80090b8:	0136      	lsls	r6, r6, #4
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	d307      	bcc.n	80090ce <RegionCommonSetBandTxDone+0x26>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80090be:	4c0e      	ldr	r4, [pc, #56]	; (80090f8 <RegionCommonSetBandTxDone+0x50>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80090c0:	429c      	cmp	r4, r3
 80090c2:	4152      	adcs	r2, r2
 80090c4:	4254      	negs	r4, r2
 80090c6:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <RegionCommonSetBandTxDone+0x54>)
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <RegionCommonSetBandTxDone+0x58>)
 80090ca:	4014      	ands	r4, r2
 80090cc:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80090ce:	1c2b      	adds	r3, r5, #0
 80090d0:	42a5      	cmp	r5, r4
 80090d2:	d200      	bcs.n	80090d6 <RegionCommonSetBandTxDone+0x2e>
 80090d4:	1c23      	adds	r3, r4, #0
 80090d6:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80090d8:	68c2      	ldr	r2, [r0, #12]
 80090da:	1c2b      	adds	r3, r5, #0
 80090dc:	2d00      	cmp	r5, #0
 80090de:	d100      	bne.n	80090e2 <RegionCommonSetBandTxDone+0x3a>
 80090e0:	2301      	movs	r3, #1
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 80090e6:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80090e8:	428a      	cmp	r2, r1
 80090ea:	d900      	bls.n	80090ee <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80090ec:	1a53      	subs	r3, r2, r1
 80090ee:	60c3      	str	r3, [r0, #12]
    }
}
 80090f0:	bc70      	pop	{r4, r5, r6}
 80090f2:	bc08      	pop	{r3}
 80090f4:	b002      	add	sp, #8
 80090f6:	4718      	bx	r3
 80090f8:	00009aaf 	.word	0x00009aaf
 80090fc:	ffffdcd8 	.word	0xffffdcd8
 8009100:	00002710 	.word	0x00002710

08009104 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8009104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009106:	b093      	sub	sp, #76	; 0x4c
 8009108:	9305      	str	r3, [sp, #20]
 800910a:	ab18      	add	r3, sp, #96	; 0x60
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	0015      	movs	r5, r2
 8009110:	000c      	movs	r4, r1
 8009112:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009114:	930b      	str	r3, [sp, #44]	; 0x2c
 8009116:	9002      	str	r0, [sp, #8]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8009118:	f002 fc85 	bl	800ba26 <TimerGetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800911c:	4b70      	ldr	r3, [pc, #448]	; (80092e0 <RegionCommonUpdateBandTimeOff+0x1dc>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800911e:	9008      	str	r0, [sp, #32]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8009120:	4970      	ldr	r1, [pc, #448]	; (80092e4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 8009122:	18f0      	adds	r0, r6, r3
 8009124:	f7f7 f820 	bl	8000168 <__udivsi3>
 8009128:	2218      	movs	r2, #24
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800912a:	4b6e      	ldr	r3, [pc, #440]	; (80092e4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800912c:	4355      	muls	r5, r2
 800912e:	4358      	muls	r0, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8009130:	4b6d      	ldr	r3, [pc, #436]	; (80092e8 <RegionCommonUpdateBandTimeOff+0x1e4>)
 8009132:	18c3      	adds	r3, r0, r3
 8009134:	9306      	str	r3, [sp, #24]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8009136:	4b6b      	ldr	r3, [pc, #428]	; (80092e4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 8009138:	18c3      	adds	r3, r0, r3
 800913a:	9307      	str	r3, [sp, #28]
 800913c:	1963      	adds	r3, r4, r5
 800913e:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t validBands = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	9303      	str	r3, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8009144:	3b01      	subs	r3, #1
 8009146:	9304      	str	r3, [sp, #16]
    for( uint8_t i = 0; i < nbBands; i++ )
 8009148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914a:	42a3      	cmp	r3, r4
 800914c:	d107      	bne.n	800915e <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8009154:	3b01      	subs	r3, #1
 8009156:	9304      	str	r3, [sp, #16]
    }
    return minTimeToWait;
}
 8009158:	9804      	ldr	r0, [sp, #16]
 800915a:	b013      	add	sp, #76	; 0x4c
 800915c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800915e:	9619      	str	r6, [sp, #100]	; 0x64
 8009160:	ab19      	add	r3, sp, #100	; 0x64
 8009162:	2204      	movs	r2, #4
 8009164:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8009166:	ab0c      	add	r3, sp, #48	; 0x30
 8009168:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800916a:	0030      	movs	r0, r6
 800916c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800916e:	960c      	str	r6, [sp, #48]	; 0x30
 8009170:	f002 fb2f 	bl	800b7d2 <SysTimeToMs>
    if( joined == false )
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	8825      	ldrh	r5, [r4, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d112      	bne.n	80091a2 <RegionCommonUpdateBandTimeOff+0x9e>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800917c:	22e1      	movs	r2, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800917e:	3364      	adds	r3, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8009180:	0112      	lsls	r2, r2, #4
 8009182:	4296      	cmp	r6, r2
 8009184:	d308      	bcc.n	8009198 <RegionCommonUpdateBandTimeOff+0x94>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8009186:	4b59      	ldr	r3, [pc, #356]	; (80092ec <RegionCommonUpdateBandTimeOff+0x1e8>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8009188:	9a02      	ldr	r2, [sp, #8]
 800918a:	42b3      	cmp	r3, r6
 800918c:	4152      	adcs	r2, r2
 800918e:	4253      	negs	r3, r2
 8009190:	4a57      	ldr	r2, [pc, #348]	; (80092f0 <RegionCommonUpdateBandTimeOff+0x1ec>)
 8009192:	4013      	ands	r3, r2
 8009194:	4a57      	ldr	r2, [pc, #348]	; (80092f4 <RegionCommonUpdateBandTimeOff+0x1f0>)
 8009196:	189b      	adds	r3, r3, r2
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8009198:	1c2a      	adds	r2, r5, #0
 800919a:	429d      	cmp	r5, r3
 800919c:	d200      	bcs.n	80091a0 <RegionCommonUpdateBandTimeOff+0x9c>
 800919e:	1c1a      	adds	r2, r3, #0
 80091a0:	b295      	uxth	r5, r2
    if( dutyCycle == 0 )
 80091a2:	1c2b      	adds	r3, r5, #0
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	d100      	bne.n	80091aa <RegionCommonUpdateBandTimeOff+0xa6>
 80091a8:	2301      	movs	r3, #1
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
    if( joined == false )
 80091ae:	9b02      	ldr	r3, [sp, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d15b      	bne.n	800926c <RegionCommonUpdateBandTimeOff+0x168>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80091b4:	2d64      	cmp	r5, #100	; 0x64
 80091b6:	d150      	bne.n	800925a <RegionCommonUpdateBandTimeOff+0x156>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80091b8:	4f4f      	ldr	r7, [pc, #316]	; (80092f8 <RegionCommonUpdateBandTimeOff+0x1f4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 80091ba:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80091bc:	68a1      	ldr	r1, [r4, #8]
 80091be:	a810      	add	r0, sp, #64	; 0x40
 80091c0:	f002 fb24 	bl	800b80c <SysTimeFromMs>
 80091c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ce:	a80e      	add	r0, sp, #56	; 0x38
 80091d0:	f002 fa96 	bl	800b700 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <RegionCommonUpdateBandTimeOff+0xdc>
 80091da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d006      	beq.n	80091ee <RegionCommonUpdateBandTimeOff+0xea>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	42bb      	cmp	r3, r7
 80091e4:	d103      	bne.n	80091ee <RegionCommonUpdateBandTimeOff+0xea>
            ( band->MaxTimeCredits != maxCredits ) ||
 80091e6:	4b45      	ldr	r3, [pc, #276]	; (80092fc <RegionCommonUpdateBandTimeOff+0x1f8>)
 80091e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d90d      	bls.n	800920a <RegionCommonUpdateBandTimeOff+0x106>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80091ee:	4b44      	ldr	r3, [pc, #272]	; (8009300 <RegionCommonUpdateBandTimeOff+0x1fc>)
            band->TimeCredits = maxCredits;
 80091f0:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80091f2:	429e      	cmp	r6, r3
 80091f4:	d909      	bls.n	800920a <RegionCommonUpdateBandTimeOff+0x106>
                timeDiff.SubSeconds = 0;
 80091f6:	2200      	movs	r2, #0
 80091f8:	ab0e      	add	r3, sp, #56	; 0x38
 80091fa:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80091fc:	9a06      	ldr	r2, [sp, #24]
 80091fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009200:	0010      	movs	r0, r2
 8009202:	920e      	str	r2, [sp, #56]	; 0x38
 8009204:	f002 fae5 	bl	800b7d2 <SysTimeToMs>
 8009208:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800920a:	6860      	ldr	r0, [r4, #4]
 800920c:	2800      	cmp	r0, #0
 800920e:	d100      	bne.n	8009212 <RegionCommonUpdateBandTimeOff+0x10e>
        band->TimeCredits = maxCredits;
 8009210:	60e7      	str	r7, [r4, #12]
    if( joined == true )
 8009212:	9b02      	ldr	r3, [sp, #8]
    band->MaxTimeCredits = maxCredits;
 8009214:	6127      	str	r7, [r4, #16]
    if( joined == true )
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <RegionCommonUpdateBandTimeOff+0x120>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800921a:	f002 fc0a 	bl	800ba32 <TimerGetElapsedTime>
 800921e:	68e3      	ldr	r3, [r4, #12]
 8009220:	1818      	adds	r0, r3, r0
 8009222:	60e0      	str	r0, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 8009224:	6922      	ldr	r2, [r4, #16]
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	4293      	cmp	r3, r2
 800922a:	d900      	bls.n	800922e <RegionCommonUpdateBandTimeOff+0x12a>
        band->TimeCredits = band->MaxTimeCredits;
 800922c:	60e2      	str	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800922e:	9b08      	ldr	r3, [sp, #32]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8009230:	991b      	ldr	r1, [sp, #108]	; 0x6c
    band->LastBandUpdateTime = currentTime;
 8009232:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8009234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009236:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8009238:	68e1      	ldr	r1, [r4, #12]
 800923a:	4299      	cmp	r1, r3
 800923c:	d805      	bhi.n	800924a <RegionCommonUpdateBandTimeOff+0x146>
 800923e:	9805      	ldr	r0, [sp, #20]
 8009240:	2800      	cmp	r0, #0
 8009242:	d11a      	bne.n	800927a <RegionCommonUpdateBandTimeOff+0x176>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8009244:	9802      	ldr	r0, [sp, #8]
 8009246:	2800      	cmp	r0, #0
 8009248:	d017      	beq.n	800927a <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
 800924a:	2301      	movs	r3, #1
 800924c:	7523      	strb	r3, [r4, #20]
            validBands++;
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	b2db      	uxtb	r3, r3
 8009254:	9303      	str	r3, [sp, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8009256:	3418      	adds	r4, #24
 8009258:	e776      	b.n	8009148 <RegionCommonUpdateBandTimeOff+0x44>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800925a:	23fa      	movs	r3, #250	; 0xfa
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	429d      	cmp	r5, r3
 8009260:	d102      	bne.n	8009268 <RegionCommonUpdateBandTimeOff+0x164>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8009262:	4f28      	ldr	r7, [pc, #160]	; (8009304 <RegionCommonUpdateBandTimeOff+0x200>)
            band->LastMaxCreditAssignTime = elapsedTime;
 8009264:	60a0      	str	r0, [r4, #8]
 8009266:	e7a9      	b.n	80091bc <RegionCommonUpdateBandTimeOff+0xb8>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8009268:	4f27      	ldr	r7, [pc, #156]	; (8009308 <RegionCommonUpdateBandTimeOff+0x204>)
 800926a:	e7a7      	b.n	80091bc <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 800926c:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <RegionCommonUpdateBandTimeOff+0x1f4>)
 800926e:	9a05      	ldr	r2, [sp, #20]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8009270:	001f      	movs	r7, r3
        if( dutyCycleEnabled == false )
 8009272:	2a00      	cmp	r2, #0
 8009274:	d1c9      	bne.n	800920a <RegionCommonUpdateBandTimeOff+0x106>
            band->TimeCredits = maxCredits;
 8009276:	60e3      	str	r3, [r4, #12]
 8009278:	e7c7      	b.n	800920a <RegionCommonUpdateBandTimeOff+0x106>
            bands[i].ReadyForTransmission = false;
 800927a:	2000      	movs	r0, #0
 800927c:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800927e:	4293      	cmp	r3, r2
 8009280:	d208      	bcs.n	8009294 <RegionCommonUpdateBandTimeOff+0x190>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8009282:	9a04      	ldr	r2, [sp, #16]
 8009284:	1a5b      	subs	r3, r3, r1
 8009286:	429a      	cmp	r2, r3
 8009288:	d900      	bls.n	800928c <RegionCommonUpdateBandTimeOff+0x188>
 800928a:	9304      	str	r3, [sp, #16]
                validBands++;
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	3301      	adds	r3, #1
 8009290:	b2db      	uxtb	r3, r3
 8009292:	9303      	str	r3, [sp, #12]
            if( joined == false )
 8009294:	9b02      	ldr	r3, [sp, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1dd      	bne.n	8009256 <RegionCommonUpdateBandTimeOff+0x152>
                SysTime_t backoffTimeRange = {
 800929a:	9a02      	ldr	r2, [sp, #8]
 800929c:	ab0e      	add	r3, sp, #56	; 0x38
 800929e:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <RegionCommonUpdateBandTimeOff+0x1e4>)
 80092a2:	2d64      	cmp	r5, #100	; 0x64
 80092a4:	d019      	beq.n	80092da <RegionCommonUpdateBandTimeOff+0x1d6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80092a6:	4a19      	ldr	r2, [pc, #100]	; (800930c <RegionCommonUpdateBandTimeOff+0x208>)
 80092a8:	18a9      	adds	r1, r5, r2
 80092aa:	424a      	negs	r2, r1
 80092ac:	4151      	adcs	r1, r2
 80092ae:	4d18      	ldr	r5, [pc, #96]	; (8009310 <RegionCommonUpdateBandTimeOff+0x20c>)
 80092b0:	4249      	negs	r1, r1
 80092b2:	4029      	ands	r1, r5
 80092b4:	18c9      	adds	r1, r1, r3
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80092b6:	429e      	cmp	r6, r3
 80092b8:	d901      	bls.n	80092be <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80092ba:	9b07      	ldr	r3, [sp, #28]
 80092bc:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80092be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80092c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	a80e      	add	r0, sp, #56	; 0x38
 80092c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092c8:	910e      	str	r1, [sp, #56]	; 0x38
 80092ca:	f002 fa19 	bl	800b700 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80092ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80092d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092d2:	f002 fa7e 	bl	800b7d2 <SysTimeToMs>
 80092d6:	9004      	str	r0, [sp, #16]
 80092d8:	e7bd      	b.n	8009256 <RegionCommonUpdateBandTimeOff+0x152>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80092da:	21e1      	movs	r1, #225	; 0xe1
 80092dc:	0109      	lsls	r1, r1, #4
 80092de:	e7ea      	b.n	80092b6 <RegionCommonUpdateBandTimeOff+0x1b2>
 80092e0:	fffe13d0 	.word	0xfffe13d0
 80092e4:	00015180 	.word	0x00015180
 80092e8:	0001ec30 	.word	0x0001ec30
 80092ec:	00009aaf 	.word	0x00009aaf
 80092f0:	ffffdcd8 	.word	0xffffdcd8
 80092f4:	00002710 	.word	0x00002710
 80092f8:	001b7740 	.word	0x001b7740
 80092fc:	0001517f 	.word	0x0001517f
 8009300:	0001ec2f 	.word	0x0001ec2f
 8009304:	0112a880 	.word	0x0112a880
 8009308:	02932e00 	.word	0x02932e00
 800930c:	fffffc18 	.word	0xfffffc18
 8009310:	fffeae80 	.word	0xfffeae80

08009314 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8009314:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8009316:	7802      	ldrb	r2, [r0, #0]
{
 8009318:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800931a:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800931c:	2a03      	cmp	r2, #3
 800931e:	d113      	bne.n	8009348 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8009320:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8009322:	300f      	adds	r0, #15
 8009324:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8009326:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8009328:	4004      	ands	r4, r0
 800932a:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800932c:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800932e:	789a      	ldrb	r2, [r3, #2]
 8009330:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8009332:	78dc      	ldrb	r4, [r3, #3]
 8009334:	0224      	lsls	r4, r4, #8
 8009336:	4322      	orrs	r2, r4
 8009338:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800933a:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800933c:	065a      	lsls	r2, r3, #25
 800933e:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 8009340:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8009342:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8009344:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8009346:	380a      	subs	r0, #10
    }
    return retIndex;
}
 8009348:	bd10      	pop	{r4, pc}

0800934a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800934a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800934c:	2706      	movs	r7, #6
    int8_t txPower = verifyParams->TxPower;
 800934e:	2607      	movs	r6, #7
{
 8009350:	b087      	sub	sp, #28
 8009352:	9103      	str	r1, [sp, #12]
 8009354:	9204      	str	r2, [sp, #16]
 8009356:	9305      	str	r3, [sp, #20]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8009358:	7942      	ldrb	r2, [r0, #5]
{
 800935a:	0004      	movs	r4, r0
    uint8_t status = verifyParams->Status;
 800935c:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800935e:	57c7      	ldrsb	r7, [r0, r7]
    int8_t txPower = verifyParams->TxPower;
 8009360:	5786      	ldrsb	r6, [r0, r6]
    int8_t nbRepetitions = verifyParams->NbRep;
 8009362:	7a03      	ldrb	r3, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 8009364:	2a00      	cmp	r2, #0
 8009366:	d013      	beq.n	8009390 <RegionCommonLinkAdrReqVerifyParams+0x46>
    int8_t nbRepetitions = verifyParams->NbRep;
 8009368:	b25b      	sxtb	r3, r3
 800936a:	9302      	str	r3, [sp, #8]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800936c:	2d00      	cmp	r5, #0
 800936e:	d032      	beq.n	80093d6 <RegionCommonLinkAdrReqVerifyParams+0x8c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8009370:	2f0f      	cmp	r7, #15
 8009372:	d115      	bne.n	80093a0 <RegionCommonLinkAdrReqVerifyParams+0x56>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8009374:	2709      	movs	r7, #9
 8009376:	57e7      	ldrsb	r7, [r4, r7]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8009378:	2e0f      	cmp	r6, #15
 800937a:	d122      	bne.n	80093c2 <RegionCommonLinkAdrReqVerifyParams+0x78>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 800937c:	260a      	movs	r6, #10
 800937e:	57a6      	ldrsb	r6, [r4, r6]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8009380:	2d07      	cmp	r5, #7
 8009382:	d128      	bne.n	80093d6 <RegionCommonLinkAdrReqVerifyParams+0x8c>
    {
        if( nbRepetitions == 0 )
 8009384:	9b02      	ldr	r3, [sp, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d125      	bne.n	80093d6 <RegionCommonLinkAdrReqVerifyParams+0x8c>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 800938a:	3301      	adds	r3, #1
 800938c:	9302      	str	r3, [sp, #8]
 800938e:	e022      	b.n	80093d6 <RegionCommonLinkAdrReqVerifyParams+0x8c>
        nbRepetitions = verifyParams->CurrentNbRep;
 8009390:	230b      	movs	r3, #11
        datarate =  verifyParams->CurrentDatarate;
 8009392:	2709      	movs	r7, #9
        txPower =  verifyParams->CurrentTxPower;
 8009394:	260a      	movs	r6, #10
        nbRepetitions = verifyParams->CurrentNbRep;
 8009396:	56c3      	ldrsb	r3, [r0, r3]
 8009398:	9302      	str	r3, [sp, #8]
        datarate =  verifyParams->CurrentDatarate;
 800939a:	57c7      	ldrsb	r7, [r0, r7]
        txPower =  verifyParams->CurrentTxPower;
 800939c:	5786      	ldrsb	r6, [r0, r6]
 800939e:	e7e5      	b.n	800936c <RegionCommonLinkAdrReqVerifyParams+0x22>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80093a0:	69a2      	ldr	r2, [r4, #24]
 80093a2:	2314      	movs	r3, #20
 80093a4:	9201      	str	r2, [sp, #4]
 80093a6:	2215      	movs	r2, #21
 80093a8:	56a2      	ldrsb	r2, [r4, r2]
 80093aa:	56e3      	ldrsb	r3, [r4, r3]
 80093ac:	9200      	str	r2, [sp, #0]
 80093ae:	7b20      	ldrb	r0, [r4, #12]
 80093b0:	003a      	movs	r2, r7
 80093b2:	6921      	ldr	r1, [r4, #16]
 80093b4:	f7ff fdf6 	bl	8008fa4 <RegionCommonChanVerifyDr>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1dd      	bne.n	8009378 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            status &= 0xFD; // Datarate KO
 80093bc:	2302      	movs	r3, #2
 80093be:	439d      	bics	r5, r3
 80093c0:	e7da      	b.n	8009378 <RegionCommonLinkAdrReqVerifyParams+0x2e>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80093c2:	231d      	movs	r3, #29
 80093c4:	221c      	movs	r2, #28
 80093c6:	56e3      	ldrsb	r3, [r4, r3]
 80093c8:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 80093ca:	42b3      	cmp	r3, r6
 80093cc:	dc0d      	bgt.n	80093ea <RegionCommonLinkAdrReqVerifyParams+0xa0>
 80093ce:	42b2      	cmp	r2, r6
 80093d0:	dad6      	bge.n	8009380 <RegionCommonLinkAdrReqVerifyParams+0x36>
                status &= 0xFB; // TxPower KO
 80093d2:	2304      	movs	r3, #4
 80093d4:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 80093d6:	0028      	movs	r0, r5
    *dr = datarate;
 80093d8:	9b03      	ldr	r3, [sp, #12]
    *nbRep = nbRepetitions;
 80093da:	9a02      	ldr	r2, [sp, #8]
    *dr = datarate;
 80093dc:	701f      	strb	r7, [r3, #0]
    *txPow = txPower;
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	701e      	strb	r6, [r3, #0]
    *nbRep = nbRepetitions;
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	701a      	strb	r2, [r3, #0]
}
 80093e6:	b007      	add	sp, #28
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ea:	001e      	movs	r6, r3
 80093ec:	e7c8      	b.n	8009380 <RegionCommonLinkAdrReqVerifyParams+0x36>
	...

080093f0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80093f0:	4b03      	ldr	r3, [pc, #12]	; (8009400 <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 80093f2:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80093f4:	4083      	lsls	r3, r0
 80093f6:	0018      	movs	r0, r3
 80093f8:	f7f6 feb6 	bl	8000168 <__udivsi3>
}
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	000f4240 	.word	0x000f4240

08009404 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8009404:	0001      	movs	r1, r0
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8009406:	20fa      	movs	r0, #250	; 0xfa
{
 8009408:	b510      	push	{r4, lr}
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800940a:	0140      	lsls	r0, r0, #5
 800940c:	f7f6 feac 	bl	8000168 <__udivsi3>
}
 8009410:	bd10      	pop	{r4, pc}
	...

08009414 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009418:	23fa      	movs	r3, #250	; 0xfa
{
 800941a:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	1f08      	subs	r0, r1, #4
 8009420:	4360      	muls	r0, r4
 8009422:	4353      	muls	r3, r2
 8009424:	18c0      	adds	r0, r0, r3
{
 8009426:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009428:	0040      	lsls	r0, r0, #1
 800942a:	d004      	beq.n	8009436 <RegionCommonComputeRxWindowParameters+0x22>
 800942c:	1e62      	subs	r2, r4, #1
 800942e:	0021      	movs	r1, r4
 8009430:	1810      	adds	r0, r2, r0
 8009432:	f7f6 fe99 	bl	8000168 <__udivsi3>
 8009436:	4285      	cmp	r5, r0
 8009438:	d200      	bcs.n	800943c <RegionCommonComputeRxWindowParameters+0x28>
 800943a:	0005      	movs	r5, r0
 800943c:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800943e:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009440:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8009442:	436c      	muls	r4, r5
 8009444:	2500      	movs	r5, #0
 8009446:	42ac      	cmp	r4, r5
 8009448:	d001      	beq.n	800944e <RegionCommonComputeRxWindowParameters+0x3a>
 800944a:	3401      	adds	r4, #1
 800944c:	0865      	lsrs	r5, r4, #1
 800944e:	21fa      	movs	r1, #250	; 0xfa
 8009450:	0089      	lsls	r1, r1, #2
 8009452:	434e      	muls	r6, r1
 8009454:	1b40      	subs	r0, r0, r5
 8009456:	1b80      	subs	r0, r0, r6
 8009458:	2800      	cmp	r0, #0
 800945a:	dd01      	ble.n	8009460 <RegionCommonComputeRxWindowParameters+0x4c>
 800945c:	4b03      	ldr	r3, [pc, #12]	; (800946c <RegionCommonComputeRxWindowParameters+0x58>)
 800945e:	18c0      	adds	r0, r0, r3
 8009460:	f7f6 ff0c 	bl	800027c <__divsi3>
 8009464:	9b05      	ldr	r3, [sp, #20]
 8009466:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	000003e7 	.word	0x000003e7

08009470 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8009470:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8009472:	0040      	lsls	r0, r0, #1
{
 8009474:	1c14      	adds	r4, r2, #0
 8009476:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8009478:	f7f7 fdc8 	bl	800100c <__aeabi_ui2f>
 800947c:	1c01      	adds	r1, r0, #0
 800947e:	1c28      	adds	r0, r5, #0
 8009480:	f7f7 fba8 	bl	8000bd4 <__aeabi_fsub>
 8009484:	1c21      	adds	r1, r4, #0
 8009486:	f7f7 fba5 	bl	8000bd4 <__aeabi_fsub>
 800948a:	f7f9 fbc9 	bl	8002c20 <__aeabi_f2d>
 800948e:	f00c fc61 	bl	8015d54 <floor>
 8009492:	f7f9 fb39 	bl	8002b08 <__aeabi_d2iz>

    return phyTxPower;
 8009496:	b240      	sxtb	r0, r0
}
 8009498:	bd70      	pop	{r4, r5, r6, pc}

0800949a <RegionCommonCountNbOfEnabledChannels>:
    Radio.Rx( rxBeaconSetupParams->RxTime );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800949a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949c:	b087      	sub	sp, #28
 800949e:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80094a0:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 80094a2:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 80094a4:	001d      	movs	r5, r3
{
 80094a6:	9103      	str	r1, [sp, #12]
 80094a8:	9204      	str	r2, [sp, #16]
 80094aa:	011a      	lsls	r2, r3, #4
 80094ac:	b2d2      	uxtb	r2, r2
 80094ae:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80094b0:	9901      	ldr	r1, [sp, #4]
 80094b2:	8a02      	ldrh	r2, [r0, #16]
 80094b4:	428a      	cmp	r2, r1
 80094b6:	d806      	bhi.n	80094c6 <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80094b8:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	701a      	strb	r2, [r3, #0]
}
 80094c2:	b007      	add	sp, #28
 80094c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c6:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80094c8:	005a      	lsls	r2, r3, #1
 80094ca:	9202      	str	r2, [sp, #8]
 80094cc:	9a01      	ldr	r2, [sp, #4]
 80094ce:	4356      	muls	r6, r2
 80094d0:	2200      	movs	r2, #0
 80094d2:	9600      	str	r6, [sp, #0]
 80094d4:	6841      	ldr	r1, [r0, #4]
 80094d6:	9c02      	ldr	r4, [sp, #8]
 80094d8:	2701      	movs	r7, #1
 80094da:	5b09      	ldrh	r1, [r1, r4]
 80094dc:	4111      	asrs	r1, r2
 80094de:	4239      	tst	r1, r7
 80094e0:	d028      	beq.n	8009534 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80094e2:	6881      	ldr	r1, [r0, #8]
 80094e4:	9c00      	ldr	r4, [sp, #0]
 80094e6:	190c      	adds	r4, r1, r4
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	2900      	cmp	r1, #0
 80094ec:	d022      	beq.n	8009534 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80094ee:	7801      	ldrb	r1, [r0, #0]
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d107      	bne.n	8009504 <RegionCommonCountNbOfEnabledChannels+0x6a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80094f4:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d004      	beq.n	8009504 <RegionCommonCountNbOfEnabledChannels+0x6a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80094fa:	9e02      	ldr	r6, [sp, #8]
 80094fc:	5b89      	ldrh	r1, [r1, r6]
 80094fe:	4111      	asrs	r1, r2
 8009500:	4239      	tst	r1, r7
 8009502:	d017      	beq.n	8009534 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8009504:	2101      	movs	r1, #1
 8009506:	5641      	ldrsb	r1, [r0, r1]
 8009508:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800950a:	7a21      	ldrb	r1, [r4, #8]
 800950c:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800950e:	173f      	asrs	r7, r7, #28
 8009510:	42be      	cmp	r6, r7
 8009512:	db0f      	blt.n	8009534 <RegionCommonCountNbOfEnabledChannels+0x9a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8009514:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 8009516:	1109      	asrs	r1, r1, #4
 8009518:	428e      	cmp	r6, r1
 800951a:	dc0b      	bgt.n	8009534 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800951c:	7a61      	ldrb	r1, [r4, #9]
 800951e:	2418      	movs	r4, #24
 8009520:	4361      	muls	r1, r4
 8009522:	68c4      	ldr	r4, [r0, #12]
 8009524:	1861      	adds	r1, r4, r1
 8009526:	7d09      	ldrb	r1, [r1, #20]
 8009528:	2900      	cmp	r1, #0
 800952a:	d10c      	bne.n	8009546 <RegionCommonCountNbOfEnabledChannels+0xac>
                    nbRestrictedChannelsCount++;
 800952c:	4661      	mov	r1, ip
 800952e:	3101      	adds	r1, #1
 8009530:	b2c9      	uxtb	r1, r1
 8009532:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 8009534:	9900      	ldr	r1, [sp, #0]
 8009536:	3201      	adds	r2, #1
 8009538:	310c      	adds	r1, #12
 800953a:	9100      	str	r1, [sp, #0]
 800953c:	2a10      	cmp	r2, #16
 800953e:	d1c9      	bne.n	80094d4 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8009540:	3301      	adds	r3, #1
 8009542:	b2db      	uxtb	r3, r3
 8009544:	e7b1      	b.n	80094aa <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 8009546:	9c01      	ldr	r4, [sp, #4]
 8009548:	9e03      	ldr	r6, [sp, #12]
 800954a:	1c69      	adds	r1, r5, #1
 800954c:	18a4      	adds	r4, r4, r2
 800954e:	5574      	strb	r4, [r6, r5]
 8009550:	b2cd      	uxtb	r5, r1
 8009552:	e7ef      	b.n	8009534 <RegionCommonCountNbOfEnabledChannels+0x9a>

08009554 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8009554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009556:	0004      	movs	r4, r0
 8009558:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800955a:	6840      	ldr	r0, [r0, #4]
{
 800955c:	001d      	movs	r5, r3
 800955e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009560:	9204      	str	r2, [sp, #16]
 8009562:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8009564:	f002 fa65 	bl	800ba32 <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8009568:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800956a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800956c:	1a1b      	subs	r3, r3, r0
 800956e:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 8009570:	2301      	movs	r3, #1
 8009572:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <RegionCommonIdentifyChannels+0x30>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	4283      	cmp	r3, r0
 8009582:	d825      	bhi.n	80095d0 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8009588:	7a62      	ldrb	r2, [r4, #9]
 800958a:	69e1      	ldr	r1, [r4, #28]
 800958c:	4694      	mov	ip, r2
 800958e:	780a      	ldrb	r2, [r1, #0]
 8009590:	69a1      	ldr	r1, [r4, #24]
 8009592:	9205      	str	r2, [sp, #20]
 8009594:	9103      	str	r1, [sp, #12]
 8009596:	0021      	movs	r1, r4
 8009598:	ae01      	add	r6, sp, #4
 800959a:	310c      	adds	r1, #12
 800959c:	7a23      	ldrb	r3, [r4, #8]
 800959e:	c905      	ldmia	r1!, {r0, r2}
 80095a0:	c605      	stmia	r6!, {r0, r2}
 80095a2:	7d21      	ldrb	r1, [r4, #20]
 80095a4:	4662      	mov	r2, ip
 80095a6:	9100      	str	r1, [sp, #0]
 80095a8:	69e1      	ldr	r1, [r4, #28]
 80095aa:	9805      	ldr	r0, [sp, #20]
 80095ac:	68c9      	ldr	r1, [r1, #12]
 80095ae:	f7ff fda9 	bl	8009104 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80095b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80095b4:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80095b6:	002a      	movs	r2, r5
 80095b8:	9904      	ldr	r1, [sp, #16]
 80095ba:	69e0      	ldr	r0, [r4, #28]
 80095bc:	f7ff ff6d 	bl	800949a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80095c0:	782b      	ldrb	r3, [r5, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 80095c6:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 80095c8:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 80095ca:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 80095cc:	b007      	add	sp, #28
 80095ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 80095d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d2:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80095d4:	4243      	negs	r3, r0
 80095d6:	4158      	adcs	r0, r3
 80095d8:	300b      	adds	r0, #11
 80095da:	e7f7      	b.n	80095cc <RegionCommonIdentifyChannels+0x78>

080095dc <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80095dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 80095de:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 80095e0:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 80095e2:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 80095e4:	5786      	ldrsb	r6, [r0, r6]
{
 80095e6:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 80095e8:	42a6      	cmp	r6, r4
 80095ea:	d010      	beq.n	800960e <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80095ec:	3c01      	subs	r4, #1
 80095ee:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80095f0:	42a6      	cmp	r6, r4
 80095f2:	d00c      	beq.n	800960e <RegionCommonGetNextLowerTxDr+0x32>
 80095f4:	68ab      	ldr	r3, [r5, #8]
 80095f6:	0022      	movs	r2, r4
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	2301      	movs	r3, #1
 80095fc:	56eb      	ldrsb	r3, [r5, r3]
 80095fe:	78e8      	ldrb	r0, [r5, #3]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	6869      	ldr	r1, [r5, #4]
 8009604:	0033      	movs	r3, r6
 8009606:	f7ff fccd 	bl	8008fa4 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800960a:	2800      	cmp	r0, #0
 800960c:	d0ee      	beq.n	80095ec <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800960e:	0020      	movs	r0, r4
 8009610:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08009612 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8009612:	1c0b      	adds	r3, r1, #0
 8009614:	4281      	cmp	r1, r0
 8009616:	da00      	bge.n	800961a <RegionCommonLimitTxPower+0x8>
 8009618:	1c03      	adds	r3, r0, #0
 800961a:	b258      	sxtb	r0, r3
}
 800961c:	4770      	bx	lr
	...

08009620 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8009620:	0080      	lsls	r0, r0, #2
 8009622:	5843      	ldr	r3, [r0, r1]
 8009624:	4a04      	ldr	r2, [pc, #16]	; (8009638 <RegionCommonGetBandwidth+0x18>)
 8009626:	2001      	movs	r0, #1
 8009628:	4293      	cmp	r3, r2
 800962a:	d004      	beq.n	8009636 <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800962c:	4a03      	ldr	r2, [pc, #12]	; (800963c <RegionCommonGetBandwidth+0x1c>)
 800962e:	189b      	adds	r3, r3, r2
 8009630:	425a      	negs	r2, r3
 8009632:	4153      	adcs	r3, r2
 8009634:	0058      	lsls	r0, r3, #1
    }
}
 8009636:	4770      	bx	lr
 8009638:	0003d090 	.word	0x0003d090
 800963c:	fff85ee0 	.word	0xfff85ee0

08009640 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8009640:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
 8009642:	4b12      	ldr	r3, [pc, #72]	; (800968c <GetTimeOnAir+0x4c>)
{
 8009644:	000c      	movs	r4, r1
 8009646:	b085      	sub	sp, #20
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009648:	4911      	ldr	r1, [pc, #68]	; (8009690 <GetTimeOnAir+0x50>)
    int8_t phyDr = DataratesEU868[datarate];
 800964a:	561f      	ldrsb	r7, [r3, r0]
{
 800964c:	0005      	movs	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800964e:	f7ff ffe7 	bl	8009620 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009652:	4b10      	ldr	r3, [pc, #64]	; (8009694 <GetTimeOnAir+0x54>)
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009654:	0001      	movs	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009656:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8009658:	2001      	movs	r0, #1
 800965a:	b2e4      	uxtb	r4, r4
    if( datarate == DR_7 )
 800965c:	2d07      	cmp	r5, #7
 800965e:	d10c      	bne.n	800967a <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009660:	2305      	movs	r3, #5
 8009662:	9003      	str	r0, [sp, #12]
 8009664:	2000      	movs	r0, #0
 8009666:	22fa      	movs	r2, #250	; 0xfa
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	0003      	movs	r3, r0
 800966c:	0092      	lsls	r2, r2, #2
 800966e:	437a      	muls	r2, r7
 8009670:	9402      	str	r4, [sp, #8]
 8009672:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8009674:	47b0      	blx	r6
    }
    return timeOnAir;
}
 8009676:	b005      	add	sp, #20
 8009678:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800967a:	2300      	movs	r3, #0
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	3308      	adds	r3, #8
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	003a      	movs	r2, r7
 8009684:	0003      	movs	r3, r0
 8009686:	9003      	str	r0, [sp, #12]
 8009688:	9402      	str	r4, [sp, #8]
 800968a:	e7f3      	b.n	8009674 <GetTimeOnAir+0x34>
 800968c:	0801948b 	.word	0x0801948b
 8009690:	08019464 	.word	0x08019464
 8009694:	0801abc8 	.word	0x0801abc8

08009698 <VerifyRfFreq>:
{
 8009698:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800969a:	4b1a      	ldr	r3, [pc, #104]	; (8009704 <VerifyRfFreq+0x6c>)
{
 800969c:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800969e:	6a1b      	ldr	r3, [r3, #32]
{
 80096a0:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	4798      	blx	r3
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d006      	beq.n	80096b8 <VerifyRfFreq+0x20>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80096aa:	4b17      	ldr	r3, [pc, #92]	; (8009708 <VerifyRfFreq+0x70>)
 80096ac:	4a17      	ldr	r2, [pc, #92]	; (800970c <VerifyRfFreq+0x74>)
 80096ae:	18e3      	adds	r3, r4, r3
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d802      	bhi.n	80096ba <VerifyRfFreq+0x22>
        *band = 2;
 80096b4:	2302      	movs	r3, #2
        *band = 3;
 80096b6:	702b      	strb	r3, [r5, #0]
}
 80096b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80096ba:	4b15      	ldr	r3, [pc, #84]	; (8009710 <VerifyRfFreq+0x78>)
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <VerifyRfFreq+0x7c>)
 80096be:	18e3      	adds	r3, r4, r3
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d801      	bhi.n	80096c8 <VerifyRfFreq+0x30>
        *band = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	e7f6      	b.n	80096b6 <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <VerifyRfFreq+0x80>)
 80096ca:	4a14      	ldr	r2, [pc, #80]	; (800971c <VerifyRfFreq+0x84>)
 80096cc:	18e3      	adds	r3, r4, r3
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d801      	bhi.n	80096d6 <VerifyRfFreq+0x3e>
        *band = 1;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e7ef      	b.n	80096b6 <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80096d6:	4b12      	ldr	r3, [pc, #72]	; (8009720 <VerifyRfFreq+0x88>)
 80096d8:	4a12      	ldr	r2, [pc, #72]	; (8009724 <VerifyRfFreq+0x8c>)
 80096da:	18e3      	adds	r3, r4, r3
 80096dc:	4293      	cmp	r3, r2
 80096de:	d801      	bhi.n	80096e4 <VerifyRfFreq+0x4c>
        *band = 5;
 80096e0:	2305      	movs	r3, #5
 80096e2:	e7e8      	b.n	80096b6 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80096e4:	4b10      	ldr	r3, [pc, #64]	; (8009728 <VerifyRfFreq+0x90>)
 80096e6:	4a11      	ldr	r2, [pc, #68]	; (800972c <VerifyRfFreq+0x94>)
 80096e8:	18e3      	adds	r3, r4, r3
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d801      	bhi.n	80096f2 <VerifyRfFreq+0x5a>
        *band = 3;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e7e1      	b.n	80096b6 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <VerifyRfFreq+0x98>)
 80096f4:	18e4      	adds	r4, r4, r3
 80096f6:	4b0f      	ldr	r3, [pc, #60]	; (8009734 <VerifyRfFreq+0x9c>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d801      	bhi.n	8009700 <VerifyRfFreq+0x68>
        *band = 4;
 80096fc:	2304      	movs	r3, #4
 80096fe:	e7da      	b.n	80096b6 <VerifyRfFreq+0x1e>
        return false;
 8009700:	2000      	movs	r0, #0
 8009702:	e7d9      	b.n	80096b8 <VerifyRfFreq+0x20>
 8009704:	0801abc8 	.word	0x0801abc8
 8009708:	cc8faa40 	.word	0xcc8faa40
 800970c:	001e847f 	.word	0x001e847f
 8009710:	cc7125c0 	.word	0xcc7125c0
 8009714:	002dc6c0 	.word	0x002dc6c0
 8009718:	cc435eff 	.word	0xcc435eff
 800971c:	000927bf 	.word	0x000927bf
 8009720:	cc38b0a0 	.word	0xcc38b0a0
 8009724:	0007a120 	.word	0x0007a120
 8009728:	cc2e0240 	.word	0xcc2e0240
 800972c:	0003d090 	.word	0x0003d090
 8009730:	cc296e60 	.word	0xcc296e60
 8009734:	000493e0 	.word	0x000493e0

08009738 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8009738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800973a:	2200      	movs	r2, #0
{
 800973c:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800973e:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 8009740:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 8009742:	380b      	subs	r0, #11
 8009744:	282c      	cmp	r0, #44	; 0x2c
 8009746:	d860      	bhi.n	800980a <RegionEU868GetPhyParam+0xd2>
 8009748:	f7f6 fcf0 	bl	800012c <__gnu_thumb1_case_uqi>
 800974c:	342f2d2a 	.word	0x342f2d2a
 8009750:	3e3b3836 	.word	0x3e3b3836
 8009754:	4b5f4240 	.word	0x4b5f4240
 8009758:	57534d5f 	.word	0x57534d5f
 800975c:	5c5f5f59 	.word	0x5c5f5f59
 8009760:	5f5f1762 	.word	0x5f5f1762
 8009764:	5f5f5f5f 	.word	0x5f5f5f5f
 8009768:	5f5f5f5f 	.word	0x5f5f5f5f
 800976c:	4b5f5f5f 	.word	0x4b5f5f5f
 8009770:	5f5f6964 	.word	0x5f5f6964
 8009774:	6b5f694b 	.word	0x6b5f694b
 8009778:	6f          	.byte	0x6f
 8009779:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800977a:	785b      	ldrb	r3, [r3, #1]
 800977c:	a801      	add	r0, sp, #4
 800977e:	7003      	strb	r3, [r0, #0]
 8009780:	2307      	movs	r3, #7
 8009782:	7043      	strb	r3, [r0, #1]
 8009784:	2380      	movs	r3, #128	; 0x80
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8009786:	22d8      	movs	r2, #216	; 0xd8
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009788:	015b      	lsls	r3, r3, #5
 800978a:	8043      	strh	r3, [r0, #2]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800978c:	4b2a      	ldr	r3, [pc, #168]	; (8009838 <RegionEU868GetPhyParam+0x100>)
 800978e:	0092      	lsls	r2, r2, #2
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	189a      	adds	r2, r3, r2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009794:	6042      	str	r2, [r0, #4]
 8009796:	6083      	str	r3, [r0, #8]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8009798:	f7ff ff20 	bl	80095dc <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800979c:	9000      	str	r0, [sp, #0]
            break;
 800979e:	e034      	b.n	800980a <RegionEU868GetPhyParam+0xd2>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80097a0:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80097a2:	9300      	str	r3, [sp, #0]
            break;
 80097a4:	e031      	b.n	800980a <RegionEU868GetPhyParam+0xd2>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80097a6:	2320      	movs	r3, #32
 80097a8:	e7fb      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80097aa:	785b      	ldrb	r3, [r3, #1]
 80097ac:	4a23      	ldr	r2, [pc, #140]	; (800983c <RegionEU868GetPhyParam+0x104>)
 80097ae:	b25b      	sxtb	r3, r3
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80097b0:	5cd3      	ldrb	r3, [r2, r3]
 80097b2:	e7f6      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7f4      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <RegionEU868GetPhyParam+0x108>)
 80097ba:	e7f2      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80097bc:	23fa      	movs	r3, #250	; 0xfa
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	e7ef      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80097c2:	23fa      	movs	r3, #250	; 0xfa
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	e7ec      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <RegionEU868GetPhyParam+0x10c>)
 80097ca:	e7ea      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80097cc:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <RegionEU868GetPhyParam+0x110>)
 80097ce:	e7e8      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80097d0:	21fa      	movs	r1, #250	; 0xfa
 80097d2:	481e      	ldr	r0, [pc, #120]	; (800984c <RegionEU868GetPhyParam+0x114>)
 80097d4:	0089      	lsls	r1, r1, #2
 80097d6:	f7fb f8b1 	bl	800493c <randr>
 80097da:	23fa      	movs	r3, #250	; 0xfa
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	18c0      	adds	r0, r0, r3
 80097e0:	e7dc      	b.n	800979c <RegionEU868GetPhyParam+0x64>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80097e2:	4b1b      	ldr	r3, [pc, #108]	; (8009850 <RegionEU868GetPhyParam+0x118>)
 80097e4:	e7dd      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80097e6:	22d8      	movs	r2, #216	; 0xd8
 80097e8:	4b13      	ldr	r3, [pc, #76]	; (8009838 <RegionEU868GetPhyParam+0x100>)
 80097ea:	681b      	ldr	r3, [r3, #0]
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80097ec:	0092      	lsls	r2, r2, #2
 80097ee:	189b      	adds	r3, r3, r2
 80097f0:	e7d7      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
 80097f2:	4b11      	ldr	r3, [pc, #68]	; (8009838 <RegionEU868GetPhyParam+0x100>)
 80097f4:	22db      	movs	r2, #219	; 0xdb
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	e7f8      	b.n	80097ec <RegionEU868GetPhyParam+0xb4>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80097fa:	2310      	movs	r3, #16
 80097fc:	e7d1      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <RegionEU868GetPhyParam+0x100>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	e7ce      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8009804:	2383      	movs	r3, #131	; 0x83
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8009806:	05db      	lsls	r3, r3, #23
 8009808:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800980a:	9800      	ldr	r0, [sp, #0]
 800980c:	b005      	add	sp, #20
 800980e:	bd00      	pop	{pc}
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8009810:	2380      	movs	r3, #128	; 0x80
 8009812:	e7f8      	b.n	8009806 <RegionEU868GetPhyParam+0xce>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8009814:	2312      	movs	r3, #18
 8009816:	466a      	mov	r2, sp
 8009818:	33ff      	adds	r3, #255	; 0xff
 800981a:	8013      	strh	r3, [r2, #0]
            break;
 800981c:	e7f5      	b.n	800980a <RegionEU868GetPhyParam+0xd2>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800981e:	2303      	movs	r3, #3
 8009820:	e7bf      	b.n	80097a2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8009822:	785b      	ldrb	r3, [r3, #1]
 8009824:	4a0b      	ldr	r2, [pc, #44]	; (8009854 <RegionEU868GetPhyParam+0x11c>)
 8009826:	b25b      	sxtb	r3, r3
 8009828:	e7c2      	b.n	80097b0 <RegionEU868GetPhyParam+0x78>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800982a:	2001      	movs	r0, #1
 800982c:	490a      	ldr	r1, [pc, #40]	; (8009858 <RegionEU868GetPhyParam+0x120>)
 800982e:	5618      	ldrsb	r0, [r3, r0]
 8009830:	f7ff fef6 	bl	8009620 <RegionCommonGetBandwidth>
 8009834:	e7b2      	b.n	800979c <RegionEU868GetPhyParam+0x64>
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	20001298 	.word	0x20001298
 800983c:	08019493 	.word	0x08019493
 8009840:	00000bb8 	.word	0x00000bb8
 8009844:	00001388 	.word	0x00001388
 8009848:	00001770 	.word	0x00001770
 800984c:	fffffc18 	.word	0xfffffc18
 8009850:	33d3e608 	.word	0x33d3e608
 8009854:	0801948b 	.word	0x0801948b
 8009858:	08019464 	.word	0x08019464

0800985c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800985c:	b513      	push	{r0, r1, r4, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800985e:	7804      	ldrb	r4, [r0, #0]
{
 8009860:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8009862:	7842      	ldrb	r2, [r0, #1]
 8009864:	200c      	movs	r0, #12
 8009866:	4b08      	ldr	r3, [pc, #32]	; (8009888 <RegionEU868SetBandTxDone+0x2c>)
 8009868:	4360      	muls	r0, r4
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	181b      	adds	r3, r3, r0
 800986e:	2018      	movs	r0, #24
 8009870:	7a5b      	ldrb	r3, [r3, #9]
 8009872:	4343      	muls	r3, r0
 8009874:	4805      	ldr	r0, [pc, #20]	; (800988c <RegionEU868SetBandTxDone+0x30>)
 8009876:	6800      	ldr	r0, [r0, #0]
 8009878:	18c0      	adds	r0, r0, r3
 800987a:	690b      	ldr	r3, [r1, #16]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	68cb      	ldr	r3, [r1, #12]
 8009880:	6889      	ldr	r1, [r1, #8]
 8009882:	f7ff fc11 	bl	80090a8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8009886:	bd13      	pop	{r0, r1, r4, pc}
 8009888:	20001298 	.word	0x20001298
 800988c:	20001294 	.word	0x20001294

08009890 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8009890:	b570      	push	{r4, r5, r6, lr}
 8009892:	b0a4      	sub	sp, #144	; 0x90
 8009894:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 8009896:	2290      	movs	r2, #144	; 0x90
 8009898:	2100      	movs	r1, #0
 800989a:	4668      	mov	r0, sp
 800989c:	f00c fbaf 	bl	8015ffe <memset>
 80098a0:	2364      	movs	r3, #100	; 0x64
 80098a2:	466a      	mov	r2, sp
 80098a4:	8013      	strh	r3, [r2, #0]
 80098a6:	8313      	strh	r3, [r2, #24]
 80098a8:	22fa      	movs	r2, #250	; 0xfa
 80098aa:	4669      	mov	r1, sp
 80098ac:	200a      	movs	r0, #10
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	860a      	strh	r2, [r1, #48]	; 0x30
 80098b2:	a912      	add	r1, sp, #72	; 0x48
 80098b4:	8008      	strh	r0, [r1, #0]
 80098b6:	a918      	add	r1, sp, #96	; 0x60
 80098b8:	800b      	strh	r3, [r1, #0]
 80098ba:	ab1e      	add	r3, sp, #120	; 0x78
 80098bc:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80098be:	7b22      	ldrb	r2, [r4, #12]
 80098c0:	2a01      	cmp	r2, #1
 80098c2:	d02b      	beq.n	800991c <RegionEU868InitDefaults+0x8c>
 80098c4:	2a02      	cmp	r2, #2
 80098c6:	d035      	beq.n	8009934 <RegionEU868InitDefaults+0xa4>
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	d125      	bne.n	8009918 <RegionEU868InitDefaults+0x88>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d022      	beq.n	8009918 <RegionEU868InitDefaults+0x88>
 80098d2:	6863      	ldr	r3, [r4, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01f      	beq.n	8009918 <RegionEU868InitDefaults+0x88>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80098d8:	4d1c      	ldr	r5, [pc, #112]	; (800994c <RegionEU868InitDefaults+0xbc>)
            RegionBands = (Band_t*) params->Bands;
 80098da:	68a0      	ldr	r0, [r4, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80098dc:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 80098de:	4b1c      	ldr	r3, [pc, #112]	; (8009950 <RegionEU868InitDefaults+0xc0>)

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80098e0:	4669      	mov	r1, sp
 80098e2:	3290      	adds	r2, #144	; 0x90
            RegionBands = (Band_t*) params->Bands;
 80098e4:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80098e6:	f7fb f834 	bl	8004952 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80098ea:	6828      	ldr	r0, [r5, #0]
 80098ec:	4b19      	ldr	r3, [pc, #100]	; (8009954 <RegionEU868InitDefaults+0xc4>)
 80098ee:	0001      	movs	r1, r0
 80098f0:	001a      	movs	r2, r3
 80098f2:	ca70      	ldmia	r2!, {r4, r5, r6}
 80098f4:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80098f6:	ca70      	ldmia	r2!, {r4, r5, r6}
 80098f8:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80098fa:	0002      	movs	r2, r0
 80098fc:	3318      	adds	r3, #24
 80098fe:	3218      	adds	r2, #24
 8009900:	cb32      	ldmia	r3!, {r1, r4, r5}
 8009902:	c232      	stmia	r2!, {r1, r4, r5}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8009904:	23db      	movs	r3, #219	; 0xdb
 8009906:	2207      	movs	r2, #7
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	52c2      	strh	r2, [r0, r3]

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800990c:	18c1      	adds	r1, r0, r3
 800990e:	3b0c      	subs	r3, #12
 8009910:	18c0      	adds	r0, r0, r3
 8009912:	3a06      	subs	r2, #6
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009914:	f7ff fbb9 	bl	800908a <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 8009918:	b024      	add	sp, #144	; 0x90
 800991a:	bd70      	pop	{r4, r5, r6, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <RegionEU868InitDefaults+0xbc>)
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8009924:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8009926:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009928:	23db      	movs	r3, #219	; 0xdb
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	18c1      	adds	r1, r0, r3
 800992e:	3b0c      	subs	r3, #12
 8009930:	18c0      	adds	r0, r0, r3
 8009932:	e7ef      	b.n	8009914 <RegionEU868InitDefaults+0x84>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8009934:	21d8      	movs	r1, #216	; 0xd8
 8009936:	20db      	movs	r0, #219	; 0xdb
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <RegionEU868InitDefaults+0xbc>)
 800993a:	0089      	lsls	r1, r1, #2
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	0080      	lsls	r0, r0, #2
 8009940:	5a5a      	ldrh	r2, [r3, r1]
 8009942:	5a18      	ldrh	r0, [r3, r0]
 8009944:	4302      	orrs	r2, r0
 8009946:	525a      	strh	r2, [r3, r1]
            break;
 8009948:	e7e6      	b.n	8009918 <RegionEU868InitDefaults+0x88>
 800994a:	46c0      	nop			; (mov r8, r8)
 800994c:	20001298 	.word	0x20001298
 8009950:	20001294 	.word	0x20001294
 8009954:	08018860 	.word	0x08018860

08009958 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009958:	0003      	movs	r3, r0
 800995a:	b507      	push	{r0, r1, r2, lr}
 800995c:	0008      	movs	r0, r1
    switch( phyAttribute )
 800995e:	290e      	cmp	r1, #14
 8009960:	d809      	bhi.n	8009976 <RegionEU868Verify+0x1e>
 8009962:	f7f6 fbe3 	bl	800012c <__gnu_thumb1_case_uqi>
 8009966:	080a      	.short	0x080a
 8009968:	1c080808 	.word	0x1c080808
 800996c:	1c081c12 	.word	0x1c081c12
 8009970:	0808081c 	.word	0x0808081c
 8009974:	20          	.byte	0x20
 8009975:	00          	.byte	0x00
 8009976:	2000      	movs	r0, #0
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 8009978:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 800997a:	466a      	mov	r2, sp
 800997c:	1dd1      	adds	r1, r2, #7
 800997e:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 8009980:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 8009982:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 8009984:	f7ff fe88 	bl	8009698 <VerifyRfFreq>
 8009988:	e7f6      	b.n	8009978 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800998a:	2000      	movs	r0, #0
 800998c:	2205      	movs	r2, #5
 800998e:	5618      	ldrsb	r0, [r3, r0]
 8009990:	2100      	movs	r1, #0
 8009992:	f7ff fb3d 	bl	8009010 <RegionCommonValueInRange>
 8009996:	1e43      	subs	r3, r0, #1
 8009998:	4198      	sbcs	r0, r3
 800999a:	b2c0      	uxtb	r0, r0
 800999c:	e7ec      	b.n	8009978 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800999e:	2000      	movs	r0, #0
 80099a0:	2207      	movs	r2, #7
 80099a2:	5618      	ldrsb	r0, [r3, r0]
 80099a4:	e7f4      	b.n	8009990 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 80099a6:	2001      	movs	r0, #1
 80099a8:	e7e6      	b.n	8009978 <RegionEU868Verify+0x20>
	...

080099ac <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80099ac:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 80099ae:	7904      	ldrb	r4, [r0, #4]
{
 80099b0:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 80099b2:	2c00      	cmp	r4, #0
 80099b4:	d00d      	beq.n	80099d2 <RegionEU868ChanMaskSet+0x26>
 80099b6:	2000      	movs	r0, #0
 80099b8:	2c01      	cmp	r4, #1
 80099ba:	d114      	bne.n	80099e6 <RegionEU868ChanMaskSet+0x3a>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80099bc:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <RegionEU868ChanMaskSet+0x3c>)
 80099be:	6819      	ldr	r1, [r3, #0]
 80099c0:	6810      	ldr	r0, [r2, #0]
 80099c2:	22db      	movs	r2, #219	; 0xdb
 80099c4:	0092      	lsls	r2, r2, #2
 80099c6:	1880      	adds	r0, r0, r2
 80099c8:	0022      	movs	r2, r4
 80099ca:	f7ff fb5e 	bl	800908a <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 80099ce:	0020      	movs	r0, r4
            break;
 80099d0:	e009      	b.n	80099e6 <RegionEU868ChanMaskSet+0x3a>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80099d2:	4a05      	ldr	r2, [pc, #20]	; (80099e8 <RegionEU868ChanMaskSet+0x3c>)
 80099d4:	6819      	ldr	r1, [r3, #0]
 80099d6:	6810      	ldr	r0, [r2, #0]
 80099d8:	22d8      	movs	r2, #216	; 0xd8
 80099da:	0092      	lsls	r2, r2, #2
 80099dc:	1880      	adds	r0, r0, r2
 80099de:	2201      	movs	r2, #1
 80099e0:	f7ff fb53 	bl	800908a <RegionCommonChanMaskCopy>
    return true;
 80099e4:	2001      	movs	r0, #1
}
 80099e6:	bd10      	pop	{r4, pc}
 80099e8:	20001298 	.word	0x20001298

080099ec <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80099ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ee:	001c      	movs	r4, r3
 80099f0:	000e      	movs	r6, r1
 80099f2:	0017      	movs	r7, r2
 80099f4:	b085      	sub	sp, #20
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80099f6:	1c03      	adds	r3, r0, #0
 80099f8:	2807      	cmp	r0, #7
 80099fa:	dd00      	ble.n	80099fe <RegionEU868ComputeRxWindowParameters+0x12>
 80099fc:	2307      	movs	r3, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80099fe:	4d13      	ldr	r5, [pc, #76]	; (8009a4c <RegionEU868ComputeRxWindowParameters+0x60>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8009a00:	b258      	sxtb	r0, r3
 8009a02:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8009a04:	0029      	movs	r1, r5
 8009a06:	f7ff fe0b 	bl	8009620 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 8009a0a:	2301      	movs	r3, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8009a0c:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 8009a0e:	56e3      	ldrsb	r3, [r4, r3]
 8009a10:	2b07      	cmp	r3, #7
 8009a12:	d114      	bne.n	8009a3e <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8009a14:	2032      	movs	r0, #50	; 0x32
 8009a16:	f7ff fcf5 	bl	8009404 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <RegionEU868ComputeRxWindowParameters+0x64>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8009a1c:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8009a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	4798      	blx	r3
 8009a24:	0022      	movs	r2, r4
 8009a26:	3408      	adds	r4, #8
 8009a28:	320c      	adds	r2, #12
 8009a2a:	0003      	movs	r3, r0
 8009a2c:	9201      	str	r2, [sp, #4]
 8009a2e:	0031      	movs	r1, r6
 8009a30:	003a      	movs	r2, r7
 8009a32:	0028      	movs	r0, r5
 8009a34:	9400      	str	r4, [sp, #0]
 8009a36:	f7ff fced 	bl	8009414 <RegionCommonComputeRxWindowParameters>
}
 8009a3a:	b005      	add	sp, #20
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8009a3e:	4905      	ldr	r1, [pc, #20]	; (8009a54 <RegionEU868ComputeRxWindowParameters+0x68>)
 8009a40:	009a      	lsls	r2, r3, #2
 8009a42:	5cc8      	ldrb	r0, [r1, r3]
 8009a44:	5951      	ldr	r1, [r2, r5]
 8009a46:	f7ff fcd3 	bl	80093f0 <RegionCommonComputeSymbolTimeLoRa>
 8009a4a:	e7e6      	b.n	8009a1a <RegionEU868ComputeRxWindowParameters+0x2e>
 8009a4c:	08019464 	.word	0x08019464
 8009a50:	0801abc8 	.word	0x0801abc8
 8009a54:	0801948b 	.word	0x0801948b

08009a58 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8009a5a:	2701      	movs	r7, #1
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 8009a5c:	4d31      	ldr	r5, [pc, #196]	; (8009b24 <RegionEU868RxConfig+0xcc>)
{
 8009a5e:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 8009a60:	686b      	ldr	r3, [r5, #4]
{
 8009a62:	910d      	str	r1, [sp, #52]	; 0x34
    int8_t dr = rxConfig->Datarate;
 8009a64:	57c7      	ldrsb	r7, [r0, r7]
{
 8009a66:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 8009a68:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t frequency = rxConfig->Frequency;
 8009a6a:	6846      	ldr	r6, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 8009a6c:	4798      	blx	r3
 8009a6e:	900a      	str	r0, [sp, #40]	; 0x28
    {
        return false;
 8009a70:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 8009a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a74:	4283      	cmp	r3, r0
 8009a76:	d13c      	bne.n	8009af2 <RegionEU868RxConfig+0x9a>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8009a78:	7ca3      	ldrb	r3, [r4, #18]
 8009a7a:	4283      	cmp	r3, r0
 8009a7c:	d10a      	bne.n	8009a94 <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8009a7e:	230c      	movs	r3, #12
 8009a80:	7822      	ldrb	r2, [r4, #0]
 8009a82:	435a      	muls	r2, r3
 8009a84:	4b28      	ldr	r3, [pc, #160]	; (8009b28 <RegionEU868RxConfig+0xd0>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	189b      	adds	r3, r3, r2
 8009a8a:	681e      	ldr	r6, [r3, #0]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	4283      	cmp	r3, r0
 8009a90:	d000      	beq.n	8009a94 <RegionEU868RxConfig+0x3c>
 8009a92:	001e      	movs	r6, r3
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <RegionEU868RxConfig+0xd4>)

    Radio.SetChannel( frequency );
 8009a96:	0030      	movs	r0, r6
    phyDr = DataratesEU868[dr];
 8009a98:	57db      	ldrsb	r3, [r3, r7]
 8009a9a:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 8009a9c:	68eb      	ldr	r3, [r5, #12]
 8009a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8009aa0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8009aa2:	69ab      	ldr	r3, [r5, #24]
 8009aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8009aa6:	7c63      	ldrb	r3, [r4, #17]
    if( dr == DR_7 )
 8009aa8:	2f07      	cmp	r7, #7
 8009aaa:	d124      	bne.n	8009af6 <RegionEU868RxConfig+0x9e>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8009aac:	2000      	movs	r0, #0
 8009aae:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	9008      	str	r0, [sp, #32]
 8009ab4:	9007      	str	r0, [sp, #28]
 8009ab6:	9006      	str	r0, [sp, #24]
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	9004      	str	r0, [sp, #16]
 8009abc:	9003      	str	r0, [sp, #12]
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	22fa      	movs	r2, #250	; 0xfa
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	9302      	str	r3, [sp, #8]
 8009ac6:	2305      	movs	r3, #5
 8009ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	4b18      	ldr	r3, [pc, #96]	; (8009b30 <RegionEU868RxConfig+0xd8>)
 8009ace:	0092      	lsls	r2, r2, #2
 8009ad0:	434a      	muls	r2, r1
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	4917      	ldr	r1, [pc, #92]	; (8009b34 <RegionEU868RxConfig+0xdc>)
 8009ad6:	0003      	movs	r3, r0
 8009ad8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009ada:	47a0      	blx	r4
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateEU868[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8009adc:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <RegionEU868RxConfig+0xe0>)
 8009ade:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ae0:	5dd9      	ldrb	r1, [r3, r7]
 8009ae2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009ae4:	310d      	adds	r1, #13
 8009ae6:	b2c9      	uxtb	r1, r1
 8009ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aea:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
 8009aec:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 8009aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009af0:	701f      	strb	r7, [r3, #0]
}
 8009af2:	b00f      	add	sp, #60	; 0x3c
 8009af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8009af6:	78a1      	ldrb	r1, [r4, #2]
 8009af8:	2601      	movs	r6, #1
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	2300      	movs	r3, #0
 8009afe:	9608      	str	r6, [sp, #32]
 8009b00:	9307      	str	r3, [sp, #28]
 8009b02:	9306      	str	r3, [sp, #24]
 8009b04:	9305      	str	r3, [sp, #20]
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	68a2      	ldr	r2, [r4, #8]
 8009b0c:	0030      	movs	r0, r6
 8009b0e:	b292      	uxth	r2, r2
 8009b10:	9202      	str	r2, [sp, #8]
 8009b12:	2208      	movs	r2, #8
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	9201      	str	r2, [sp, #4]
 8009b18:	0033      	movs	r3, r6
 8009b1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009b1e:	47a0      	blx	r4
        modem = MODEM_LORA;
 8009b20:	960a      	str	r6, [sp, #40]	; 0x28
 8009b22:	e7db      	b.n	8009adc <RegionEU868RxConfig+0x84>
 8009b24:	0801abc8 	.word	0x0801abc8
 8009b28:	20001298 	.word	0x20001298
 8009b2c:	0801948b 	.word	0x0801948b
 8009b30:	00014585 	.word	0x00014585
 8009b34:	0000c350 	.word	0x0000c350
 8009b38:	08019493 	.word	0x08019493

08009b3c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009b3c:	2301      	movs	r3, #1
{
 8009b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009b40:	250c      	movs	r5, #12
{
 8009b42:	b091      	sub	sp, #68	; 0x44
 8009b44:	910e      	str	r1, [sp, #56]	; 0x38
 8009b46:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009b48:	56c3      	ldrsb	r3, [r0, r3]
 8009b4a:	4a35      	ldr	r2, [pc, #212]	; (8009c20 <RegionEU868TxConfig+0xe4>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009b4c:	4e35      	ldr	r6, [pc, #212]	; (8009c24 <RegionEU868TxConfig+0xe8>)
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009b4e:	56d3      	ldrsb	r3, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009b50:	6832      	ldr	r2, [r6, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8009b52:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009b54:	7803      	ldrb	r3, [r0, #0]
{
 8009b56:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009b58:	436b      	muls	r3, r5
 8009b5a:	18d3      	adds	r3, r2, r3
 8009b5c:	2218      	movs	r2, #24
 8009b5e:	7a59      	ldrb	r1, [r3, #9]
 8009b60:	2002      	movs	r0, #2
 8009b62:	434a      	muls	r2, r1
 8009b64:	2102      	movs	r1, #2
 8009b66:	4b30      	ldr	r3, [pc, #192]	; (8009c28 <RegionEU868TxConfig+0xec>)
 8009b68:	5620      	ldrsb	r0, [r4, r0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	189b      	adds	r3, r3, r2
 8009b6e:	5659      	ldrsb	r1, [r3, r1]
 8009b70:	f7ff fd4f 	bl	8009612 <RegionCommonLimitTxPower>
 8009b74:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8009b76:	2001      	movs	r0, #1
 8009b78:	492c      	ldr	r1, [pc, #176]	; (8009c2c <RegionEU868TxConfig+0xf0>)
 8009b7a:	5620      	ldrsb	r0, [r4, r0]
 8009b7c:	f7ff fd50 	bl	8009620 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8009b80:	68a2      	ldr	r2, [r4, #8]
 8009b82:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8009b84:	900b      	str	r0, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8009b86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b88:	f7ff fc72 	bl	8009470 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8009b8c:	7822      	ldrb	r2, [r4, #0]
 8009b8e:	6833      	ldr	r3, [r6, #0]
 8009b90:	4355      	muls	r5, r2
 8009b92:	4e27      	ldr	r6, [pc, #156]	; (8009c30 <RegionEU868TxConfig+0xf4>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8009b94:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8009b96:	68f2      	ldr	r2, [r6, #12]
 8009b98:	58e8      	ldr	r0, [r5, r3]
 8009b9a:	920c      	str	r2, [sp, #48]	; 0x30
 8009b9c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009b9e:	69f3      	ldr	r3, [r6, #28]
    if( txConfig->Datarate == DR_7 )
 8009ba0:	2201      	movs	r2, #1
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba4:	23fa      	movs	r3, #250	; 0xfa
 8009ba6:	2500      	movs	r5, #0
    if( txConfig->Datarate == DR_7 )
 8009ba8:	56a2      	ldrsb	r2, [r4, r2]
 8009baa:	011b      	lsls	r3, r3, #4
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009bac:	9308      	str	r3, [sp, #32]
 8009bae:	9507      	str	r5, [sp, #28]
 8009bb0:	9506      	str	r5, [sp, #24]
 8009bb2:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 8009bb4:	2a07      	cmp	r2, #7
 8009bb6:	d123      	bne.n	8009c00 <RegionEU868TxConfig+0xc4>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009bb8:	2301      	movs	r3, #1
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	9302      	str	r3, [sp, #8]
 8009bc0:	23fa      	movs	r3, #250	; 0xfa
 8009bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4353      	muls	r3, r2
 8009bc8:	0039      	movs	r1, r7
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	0028      	movs	r0, r5
 8009bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd0:	4a18      	ldr	r2, [pc, #96]	; (8009c34 <RegionEU868TxConfig+0xf8>)
 8009bd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009bd4:	9503      	str	r5, [sp, #12]
 8009bd6:	9501      	str	r5, [sp, #4]
 8009bd8:	47b0      	blx	r6
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8009bda:	2001      	movs	r0, #1
 8009bdc:	89a1      	ldrh	r1, [r4, #12]
 8009bde:	5620      	ldrsb	r0, [r4, r0]
 8009be0:	f7ff fd2e 	bl	8009640 <GetTimeOnAir>
 8009be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009be6:	6018      	str	r0, [r3, #0]

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8009be8:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <RegionEU868TxConfig+0xf4>)
 8009bea:	0028      	movs	r0, r5
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	7b21      	ldrb	r1, [r4, #12]
 8009bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8009bf2:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
 8009bf4:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 8009bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bfa:	701a      	strb	r2, [r3, #0]
}
 8009bfc:	b011      	add	sp, #68	; 0x44
 8009bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8009c00:	2308      	movs	r3, #8
 8009c02:	2601      	movs	r6, #1
 8009c04:	9302      	str	r3, [sp, #8]
 8009c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c08:	002a      	movs	r2, r5
 8009c0a:	9503      	str	r5, [sp, #12]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c10:	0039      	movs	r1, r7
 8009c12:	0030      	movs	r0, r6
 8009c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c16:	9604      	str	r6, [sp, #16]
 8009c18:	9601      	str	r6, [sp, #4]
 8009c1a:	47a8      	blx	r5
        modem = MODEM_LORA;
 8009c1c:	0035      	movs	r5, r6
 8009c1e:	e7dc      	b.n	8009bda <RegionEU868TxConfig+0x9e>
 8009c20:	0801948b 	.word	0x0801948b
 8009c24:	20001298 	.word	0x20001298
 8009c28:	20001294 	.word	0x20001294
 8009c2c:	08019464 	.word	0x08019464
 8009c30:	0801abc8 	.word	0x0801abc8
 8009c34:	000061a8 	.word	0x000061a8

08009c38 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8009c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8009c3a:	2700      	movs	r7, #0
    uint8_t status = 0x07;
 8009c3c:	2507      	movs	r5, #7
{
 8009c3e:	b093      	sub	sp, #76	; 0x4c
 8009c40:	9103      	str	r1, [sp, #12]
 8009c42:	9204      	str	r2, [sp, #16]
 8009c44:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8009c46:	2206      	movs	r2, #6
 8009c48:	2100      	movs	r1, #0
 8009c4a:	a808      	add	r0, sp, #32
{
 8009c4c:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8009c4e:	f00c f9d6 	bl	8015ffe <memset>
    uint16_t chMask = 0;
 8009c52:	ab06      	add	r3, sp, #24
 8009c54:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8009c56:	7a23      	ldrb	r3, [r4, #8]
 8009c58:	42bb      	cmp	r3, r7
 8009c5a:	d906      	bls.n	8009c6a <RegionEU868LinkAdrReq+0x32>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	a908      	add	r1, sp, #32
 8009c60:	19d8      	adds	r0, r3, r7
 8009c62:	f7ff fb57 	bl	8009314 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d147      	bne.n	8009cfa <RegionEU868LinkAdrReq+0xc2>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 8009c6a:	a80a      	add	r0, sp, #40	; 0x28
 8009c6c:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009c6e:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009c70:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009c72:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009c74:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009c76:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009c78:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8009c7a:	78ab      	ldrb	r3, [r5, #2]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009c7c:	4e40      	ldr	r6, [pc, #256]	; (8009d80 <RegionEU868LinkAdrReq+0x148>)
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8009c7e:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8009c80:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009c82:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8009c84:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009c86:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009c88:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009c8a:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8009c8c:	7b23      	ldrb	r3, [r4, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009c8e:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8009c90:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8009c92:	7b63      	ldrb	r3, [r4, #13]
 8009c94:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8009c96:	2310      	movs	r3, #16
 8009c98:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8009c9a:	ab06      	add	r3, sp, #24
 8009c9c:	3306      	adds	r3, #6
 8009c9e:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8009ca0:	23e0      	movs	r3, #224	; 0xe0
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009ca6:	6833      	ldr	r3, [r6, #0]
 8009ca8:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8009caa:	2307      	movs	r3, #7
 8009cac:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8009cae:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009cb0:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8009cb2:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009cb4:	1909      	adds	r1, r1, r4
 8009cb6:	002b      	movs	r3, r5
 8009cb8:	f7ff fb47 	bl	800934a <RegionCommonLinkAdrReqVerifyParams>
 8009cbc:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8009cbe:	2807      	cmp	r0, #7
 8009cc0:	d10d      	bne.n	8009cde <RegionEU868LinkAdrReq+0xa6>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8009cc2:	22d8      	movs	r2, #216	; 0xd8
 8009cc4:	6833      	ldr	r3, [r6, #0]
 8009cc6:	0092      	lsls	r2, r2, #2
 8009cc8:	1898      	adds	r0, r3, r2
 8009cca:	2100      	movs	r1, #0
 8009ccc:	220c      	movs	r2, #12
 8009cce:	f7fa fe55 	bl	800497c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8009cd2:	ab06      	add	r3, sp, #24
 8009cd4:	88d9      	ldrh	r1, [r3, #6]
 8009cd6:	23d8      	movs	r3, #216	; 0xd8
 8009cd8:	6832      	ldr	r2, [r6, #0]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	52d1      	strh	r1, [r2, r3]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 8009cde:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 8009ce0:	786b      	ldrb	r3, [r5, #1]
 8009ce2:	9a03      	ldr	r2, [sp, #12]
 8009ce4:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 8009ce6:	78ab      	ldrb	r3, [r5, #2]
 8009ce8:	9a04      	ldr	r2, [sp, #16]
 8009cea:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8009cec:	782b      	ldrb	r3, [r5, #0]
 8009cee:	9a05      	ldr	r2, [sp, #20]
 8009cf0:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 8009cf2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009cf4:	701f      	strb	r7, [r3, #0]
}
 8009cf6:	b013      	add	sp, #76	; 0x4c
 8009cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 8009cfa:	ab06      	add	r3, sp, #24
 8009cfc:	899b      	ldrh	r3, [r3, #12]
 8009cfe:	aa06      	add	r2, sp, #24
 8009d00:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009d02:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 8009d04:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009d06:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 8009d08:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d123      	bne.n	8009d56 <RegionEU868LinkAdrReq+0x11e>
            status &= 0xFE; // Channel mask KO
 8009d0e:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0a0      	beq.n	8009c56 <RegionEU868LinkAdrReq+0x1e>
                        status &= 0xFE; // Channel mask KO
 8009d14:	2606      	movs	r6, #6
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8009d16:	4a1a      	ldr	r2, [pc, #104]	; (8009d80 <RegionEU868LinkAdrReq+0x148>)
 8009d18:	2507      	movs	r5, #7
 8009d1a:	6812      	ldr	r2, [r2, #0]
                        status &= 0xFE; // Channel mask KO
 8009d1c:	46b4      	mov	ip, r6
 8009d1e:	9201      	str	r2, [sp, #4]
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8009d20:	2200      	movs	r2, #0
 8009d22:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 8009d24:	2806      	cmp	r0, #6
 8009d26:	d11f      	bne.n	8009d68 <RegionEU868LinkAdrReq+0x130>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8009d28:	9901      	ldr	r1, [sp, #4]
 8009d2a:	680e      	ldr	r6, [r1, #0]
 8009d2c:	2e00      	cmp	r6, #0
 8009d2e:	d005      	beq.n	8009d3c <RegionEU868LinkAdrReq+0x104>
                        chMask |= 1 << i;
 8009d30:	2601      	movs	r6, #1
 8009d32:	4096      	lsls	r6, r2
 8009d34:	2101      	movs	r1, #1
 8009d36:	4333      	orrs	r3, r6
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8009d3c:	9901      	ldr	r1, [sp, #4]
 8009d3e:	3201      	adds	r2, #1
 8009d40:	310c      	adds	r1, #12
 8009d42:	9101      	str	r1, [sp, #4]
 8009d44:	2a10      	cmp	r2, #16
 8009d46:	d1ed      	bne.n	8009d24 <RegionEU868LinkAdrReq+0xec>
 8009d48:	9a02      	ldr	r2, [sp, #8]
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	d100      	bne.n	8009d50 <RegionEU868LinkAdrReq+0x118>
 8009d4e:	e782      	b.n	8009c56 <RegionEU868LinkAdrReq+0x1e>
 8009d50:	aa06      	add	r2, sp, #24
 8009d52:	80d3      	strh	r3, [r2, #6]
 8009d54:	e77f      	b.n	8009c56 <RegionEU868LinkAdrReq+0x1e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8009d56:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 8009d58:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8009d5a:	2a04      	cmp	r2, #4
 8009d5c:	d800      	bhi.n	8009d60 <RegionEU868LinkAdrReq+0x128>
 8009d5e:	e77a      	b.n	8009c56 <RegionEU868LinkAdrReq+0x1e>
 8009d60:	42a8      	cmp	r0, r5
 8009d62:	d000      	beq.n	8009d66 <RegionEU868LinkAdrReq+0x12e>
 8009d64:	e777      	b.n	8009c56 <RegionEU868LinkAdrReq+0x1e>
 8009d66:	e7d5      	b.n	8009d14 <RegionEU868LinkAdrReq+0xdc>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8009d68:	001e      	movs	r6, r3
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4116      	asrs	r6, r2
 8009d6e:	420e      	tst	r6, r1
 8009d70:	d0e4      	beq.n	8009d3c <RegionEU868LinkAdrReq+0x104>
 8009d72:	9901      	ldr	r1, [sp, #4]
 8009d74:	6809      	ldr	r1, [r1, #0]
 8009d76:	2900      	cmp	r1, #0
 8009d78:	d1e0      	bne.n	8009d3c <RegionEU868LinkAdrReq+0x104>
                        status &= 0xFE; // Channel mask KO
 8009d7a:	4665      	mov	r5, ip
 8009d7c:	e7de      	b.n	8009d3c <RegionEU868LinkAdrReq+0x104>
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	20001298 	.word	0x20001298

08009d84 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8009d84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint8_t band = 0;
 8009d86:	466b      	mov	r3, sp
 8009d88:	2600      	movs	r6, #0
 8009d8a:	1dd9      	adds	r1, r3, #7
{
 8009d8c:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8009d8e:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 8009d90:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8009d92:	f7ff fc81 	bl	8009698 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 8009d96:	1e43      	subs	r3, r0, #1
 8009d98:	4198      	sbcs	r0, r3
 8009d9a:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	2207      	movs	r2, #7
 8009da0:	0031      	movs	r1, r6
 8009da2:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 8009da4:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8009da6:	f7ff f933 	bl	8009010 <RegionCommonValueInRange>
 8009daa:	42b0      	cmp	r0, r6
 8009dac:	d101      	bne.n	8009db2 <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 8009dae:	2302      	movs	r3, #2
 8009db0:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8009db2:	2001      	movs	r0, #1
 8009db4:	2205      	movs	r2, #5
 8009db6:	2100      	movs	r1, #0
 8009db8:	5628      	ldrsb	r0, [r5, r0]
 8009dba:	f7ff f929 	bl	8009010 <RegionCommonValueInRange>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d101      	bne.n	8009dc6 <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	439c      	bics	r4, r3
    }

    return status;
}
 8009dc6:	0020      	movs	r0, r4
 8009dc8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08009dca <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
 8009dca:	2001      	movs	r0, #1
}
 8009dcc:	4240      	negs	r0, r0
 8009dce:	4770      	bx	lr

08009dd0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8009dd0:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
    uint8_t band = 0;
 8009dd2:	466b      	mov	r3, sp
 8009dd4:	1dd9      	adds	r1, r3, #7
 8009dd6:	2300      	movs	r3, #0
{
 8009dd8:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8009dda:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 8009ddc:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8009dde:	f7ff fc5b 	bl	8009698 <VerifyRfFreq>
    {
        status &= 0xFE;
 8009de2:	0003      	movs	r3, r0
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	4193      	sbcs	r3, r2
 8009de8:	220c      	movs	r2, #12
 8009dea:	7821      	ldrb	r1, [r4, #0]
 8009dec:	3302      	adds	r3, #2
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8009dee:	4351      	muls	r1, r2
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <RegionEU868DlChannelReq+0x44>)
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	1852      	adds	r2, r2, r1
 8009df6:	6811      	ldr	r1, [r2, #0]
 8009df8:	2900      	cmp	r1, #0
 8009dfa:	d103      	bne.n	8009e04 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFD;
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	4393      	bics	r3, r2
    if( status == 0x03 )
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
 8009e00:	b258      	sxtb	r0, r3
}
 8009e02:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d102      	bne.n	8009e0e <RegionEU868DlChannelReq+0x3e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8009e08:	6861      	ldr	r1, [r4, #4]
 8009e0a:	6051      	str	r1, [r2, #4]
 8009e0c:	e7f8      	b.n	8009e00 <RegionEU868DlChannelReq+0x30>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e7f6      	b.n	8009e00 <RegionEU868DlChannelReq+0x30>
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	20001298 	.word	0x20001298

08009e18 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 8009e18:	4770      	bx	lr
	...

08009e1c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbEnabledChannels = 0;
 8009e1e:	2500      	movs	r5, #0
{
 8009e20:	b09b      	sub	sp, #108	; 0x6c
 8009e22:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 8009e24:	ab07      	add	r3, sp, #28
 8009e26:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8009e28:	230d      	movs	r3, #13
{
 8009e2a:	9204      	str	r2, [sp, #16]
    uint8_t nbRestrictedChannels = 0;
 8009e2c:	aa04      	add	r2, sp, #16
 8009e2e:	189b      	adds	r3, r3, r2
{
 8009e30:	9103      	str	r1, [sp, #12]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8009e32:	220c      	movs	r2, #12
 8009e34:	0029      	movs	r1, r5
{
 8009e36:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8009e38:	a809      	add	r0, sp, #36	; 0x24
    uint8_t nbRestrictedChannels = 0;
 8009e3a:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8009e3c:	9508      	str	r5, [sp, #32]
 8009e3e:	f00c f8de 	bl	8015ffe <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8009e42:	230e      	movs	r3, #14
 8009e44:	aa04      	add	r2, sp, #16
 8009e46:	2607      	movs	r6, #7
 8009e48:	189b      	adds	r3, r3, r2

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009e4a:	22d8      	movs	r2, #216	; 0xd8
 8009e4c:	4f30      	ldr	r7, [pc, #192]	; (8009f10 <RegionEU868NextChannel+0xf4>)
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8009e4e:	801e      	strh	r6, [r3, #0]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	0092      	lsls	r2, r2, #2
 8009e54:	1898      	adds	r0, r3, r2
 8009e56:	0029      	movs	r1, r5
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f7ff f8f7 	bl	800904c <RegionCommonCountChannels>
 8009e5e:	42a8      	cmp	r0, r5
 8009e60:	d105      	bne.n	8009e6e <RegionEU868NextChannel+0x52>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009e62:	23d8      	movs	r3, #216	; 0xd8
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	5ad1      	ldrh	r1, [r2, r3]
 8009e6a:	430e      	orrs	r6, r1
 8009e6c:	52d6      	strh	r6, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009e6e:	22d8      	movs	r2, #216	; 0xd8
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009e70:	2008      	movs	r0, #8
    countChannelsParams.Joined = nextChanParams->Joined;
 8009e72:	7a63      	ldrb	r3, [r4, #9]
 8009e74:	ad0c      	add	r5, sp, #48	; 0x30
 8009e76:	702b      	strb	r3, [r5, #0]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009e78:	4b25      	ldr	r3, [pc, #148]	; (8009f10 <RegionEU868NextChannel+0xf4>)
 8009e7a:	0092      	lsls	r2, r2, #2
 8009e7c:	681b      	ldr	r3, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009e7e:	5620      	ldrsb	r0, [r4, r0]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009e80:	189a      	adds	r2, r3, r2
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8009e82:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.Bands = RegionBands;
 8009e84:	4b23      	ldr	r3, [pc, #140]	; (8009f14 <RegionEU868NextChannel+0xf8>)
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009e86:	920d      	str	r2, [sp, #52]	; 0x34
    countChannelsParams.Bands = RegionBands;
 8009e88:	681b      	ldr	r3, [r3, #0]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = &joinChannels;
 8009e8a:	aa04      	add	r2, sp, #16
    countChannelsParams.Bands = RegionBands;
 8009e8c:	930f      	str	r3, [sp, #60]	; 0x3c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8009e8e:	2310      	movs	r3, #16
 8009e90:	822b      	strh	r3, [r5, #16]
    countChannelsParams.JoinChannels = &joinChannels;
 8009e92:	3b02      	subs	r3, #2
 8009e94:	189b      	adds	r3, r3, r2
 8009e96:	9311      	str	r3, [sp, #68]	; 0x44

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009e98:	6823      	ldr	r3, [r4, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009e9a:	7068      	strb	r0, [r5, #1]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009e9c:	9312      	str	r3, [sp, #72]	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8009e9e:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009ea0:	ae12      	add	r6, sp, #72	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8009ea2:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009ea4:	7aa3      	ldrb	r3, [r4, #10]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009ea6:	0022      	movs	r2, r4
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009ea8:	7233      	strb	r3, [r6, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8009eaa:	2306      	movs	r3, #6
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009eac:	320c      	adds	r2, #12
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8009eae:	7273      	strb	r3, [r6, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009eb0:	ab15      	add	r3, sp, #84	; 0x54
 8009eb2:	ca82      	ldmia	r2!, {r1, r7}
 8009eb4:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8009eb6:	7d23      	ldrb	r3, [r4, #20]
 8009eb8:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009eba:	8ae1      	ldrh	r1, [r4, #22]
 8009ebc:	f7ff fbc0 	bl	8009640 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	aa04      	add	r2, sp, #16
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	230d      	movs	r3, #13
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8009ec8:	9519      	str	r5, [sp, #100]	; 0x64
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009eca:	189b      	adds	r3, r3, r2
 8009ecc:	ad07      	add	r5, sp, #28
 8009ece:	ac08      	add	r4, sp, #32
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009ed0:	9018      	str	r0, [sp, #96]	; 0x60
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	0030      	movs	r0, r6
 8009ed6:	002b      	movs	r3, r5
 8009ed8:	0022      	movs	r2, r4
 8009eda:	9905      	ldr	r1, [sp, #20]
 8009edc:	f7ff fb3a 	bl	8009554 <RegionCommonIdentifyChannels>
 8009ee0:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8009ee2:	d109      	bne.n	8009ef8 <RegionEU868NextChannel+0xdc>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8009ee4:	7829      	ldrb	r1, [r5, #0]
 8009ee6:	3901      	subs	r1, #1
 8009ee8:	f7fa fd28 	bl	800493c <randr>
 8009eec:	9a03      	ldr	r2, [sp, #12]
 8009eee:	5c23      	ldrb	r3, [r4, r0]
 8009ef0:	7013      	strb	r3, [r2, #0]
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
 8009ef2:	0030      	movs	r0, r6
 8009ef4:	b01b      	add	sp, #108	; 0x6c
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8009ef8:	280c      	cmp	r0, #12
 8009efa:	d1fa      	bne.n	8009ef2 <RegionEU868NextChannel+0xd6>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009efc:	22d8      	movs	r2, #216	; 0xd8
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <RegionEU868NextChannel+0xf4>)
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	6819      	ldr	r1, [r3, #0]
 8009f04:	2307      	movs	r3, #7
 8009f06:	5a88      	ldrh	r0, [r1, r2]
 8009f08:	4303      	orrs	r3, r0
 8009f0a:	528b      	strh	r3, [r1, r2]
 8009f0c:	e7f1      	b.n	8009ef2 <RegionEU868NextChannel+0xd6>
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	20001298 	.word	0x20001298
 8009f14:	20001294 	.word	0x20001294

08009f18 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t band = 0;
 8009f1a:	2500      	movs	r5, #0
{
 8009f1c:	b085      	sub	sp, #20
    uint8_t band = 0;
 8009f1e:	ab02      	add	r3, sp, #8
 8009f20:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8009f22:	7906      	ldrb	r6, [r0, #4]
{
 8009f24:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8009f26:	2e02      	cmp	r6, #2
 8009f28:	d802      	bhi.n	8009f30 <RegionEU868ChannelAdd+0x18>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8009f2a:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
    RegionNvmGroup2->Channels[id].Band = band;
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 8009f2c:	b005      	add	sp, #20
 8009f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f30:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 8009f32:	2e0f      	cmp	r6, #15
 8009f34:	d8fa      	bhi.n	8009f2c <RegionEU868ChannelAdd+0x14>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	0029      	movs	r1, r5
 8009f3a:	7a18      	ldrb	r0, [r3, #8]
 8009f3c:	2207      	movs	r2, #7
 8009f3e:	0700      	lsls	r0, r0, #28
 8009f40:	1700      	asrs	r0, r0, #28
 8009f42:	f7ff f865 	bl	8009010 <RegionCommonValueInRange>
 8009f46:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009f48:	2008      	movs	r0, #8
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	0029      	movs	r1, r5
 8009f4e:	5618      	ldrsb	r0, [r3, r0]
 8009f50:	2207      	movs	r2, #7
 8009f52:	1100      	asrs	r0, r0, #4
 8009f54:	f7ff f85c 	bl	8009010 <RegionCommonValueInRange>
        drInvalid = true;
 8009f58:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d002      	beq.n	8009f64 <RegionEU868ChannelAdd+0x4c>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8009f5e:	427b      	negs	r3, r7
 8009f60:	415f      	adcs	r7, r3
 8009f62:	b2fd      	uxtb	r5, r7
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	7a03      	ldrb	r3, [r0, #8]
 8009f68:	071a      	lsls	r2, r3, #28
 8009f6a:	b25b      	sxtb	r3, r3
 8009f6c:	1712      	asrs	r2, r2, #28
 8009f6e:	111b      	asrs	r3, r3, #4
 8009f70:	429a      	cmp	r2, r3
 8009f72:	dd00      	ble.n	8009f76 <RegionEU868ChannelAdd+0x5e>
        drInvalid = true;
 8009f74:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8009f76:	ab02      	add	r3, sp, #8
 8009f78:	6800      	ldr	r0, [r0, #0]
 8009f7a:	1dd9      	adds	r1, r3, #7
 8009f7c:	f7ff fb8c 	bl	8009698 <VerifyRfFreq>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d103      	bne.n	8009f8c <RegionEU868ChannelAdd+0x74>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8009f84:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	d0d0      	beq.n	8009f2c <RegionEU868ChannelAdd+0x14>
 8009f8a:	e7ce      	b.n	8009f2a <RegionEU868ChannelAdd+0x12>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8009f8c:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	d1cc      	bne.n	8009f2c <RegionEU868ChannelAdd+0x14>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8009f92:	220c      	movs	r2, #12
 8009f94:	0013      	movs	r3, r2
 8009f96:	4373      	muls	r3, r6
 8009f98:	4f0b      	ldr	r7, [pc, #44]	; (8009fc8 <RegionEU868ChannelAdd+0xb0>)
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	9901      	ldr	r1, [sp, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	1858      	adds	r0, r3, r1
 8009fa2:	6821      	ldr	r1, [r4, #0]
 8009fa4:	f7fa fcd5 	bl	8004952 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	9b01      	ldr	r3, [sp, #4]
 8009fac:	a902      	add	r1, sp, #8
 8009fae:	79c9      	ldrb	r1, [r1, #7]
 8009fb0:	18d3      	adds	r3, r2, r3
 8009fb2:	7259      	strb	r1, [r3, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	20d8      	movs	r0, #216	; 0xd8
 8009fb8:	40b1      	lsls	r1, r6
 8009fba:	0080      	lsls	r0, r0, #2
 8009fbc:	5a13      	ldrh	r3, [r2, r0]
 8009fbe:	430b      	orrs	r3, r1
 8009fc0:	5213      	strh	r3, [r2, r0]
    return LORAMAC_STATUS_OK;
 8009fc2:	0028      	movs	r0, r5
 8009fc4:	e7b2      	b.n	8009f2c <RegionEU868ChannelAdd+0x14>
 8009fc6:	46c0      	nop			; (mov r8, r8)
 8009fc8:	20001298 	.word	0x20001298

08009fcc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8009fcc:	b570      	push	{r4, r5, r6, lr}
    uint8_t id = channelRemove->ChannelId;
 8009fce:	7805      	ldrb	r5, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 8009fd0:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8009fd2:	2d02      	cmp	r5, #2
 8009fd4:	d90f      	bls.n	8009ff6 <RegionEU868ChannelsRemove+0x2a>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8009fd6:	220c      	movs	r2, #12
 8009fd8:	0010      	movs	r0, r2
 8009fda:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <RegionEU868ChannelsRemove+0x30>)
 8009fdc:	4368      	muls	r0, r5
 8009fde:	681c      	ldr	r4, [r3, #0]
 8009fe0:	1820      	adds	r0, r4, r0
 8009fe2:	f00c f80c 	bl	8015ffe <memset>

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8009fe6:	23d8      	movs	r3, #216	; 0xd8
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	0029      	movs	r1, r5
 8009fec:	2210      	movs	r2, #16
 8009fee:	18e0      	adds	r0, r4, r3
 8009ff0:	f7ff f818 	bl	8009024 <RegionCommonChanDisable>
 8009ff4:	0001      	movs	r1, r0
}
 8009ff6:	0008      	movs	r0, r1
 8009ff8:	bd70      	pop	{r4, r5, r6, pc}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	20001298 	.word	0x20001298

0800a000 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800a000:	2350      	movs	r3, #80	; 0x50
{
 800a002:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a004:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800a006:	ac03      	add	r4, sp, #12
 800a008:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800a00a:	7a03      	ldrb	r3, [r0, #8]
{
 800a00c:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d12d      	bne.n	800a06e <RegionEU868ApplyCFList+0x6e>
    if( applyCFList->Payload[15] != 0 )
 800a012:	6843      	ldr	r3, [r0, #4]
 800a014:	7bde      	ldrb	r6, [r3, #15]
 800a016:	2e00      	cmp	r6, #0
 800a018:	d129      	bne.n	800a06e <RegionEU868ApplyCFList+0x6e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800a01a:	2503      	movs	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800a01c:	2d07      	cmp	r5, #7
 800a01e:	d817      	bhi.n	800a050 <RegionEU868ApplyCFList+0x50>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	5d91      	ldrb	r1, [r2, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800a024:	1990      	adds	r0, r2, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800a026:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800a028:	7842      	ldrb	r2, [r0, #1]
 800a02a:	0212      	lsls	r2, r2, #8
 800a02c:	4311      	orrs	r1, r2
            newChannel.Frequency *= 100;
 800a02e:	2264      	movs	r2, #100	; 0x64
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800a030:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800a032:	7883      	ldrb	r3, [r0, #2]
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	430b      	orrs	r3, r1
            newChannel.Frequency *= 100;
 800a038:	4353      	muls	r3, r2
            newChannel.Rx1Frequency = 0;
 800a03a:	2200      	movs	r2, #0
            newChannel.Frequency *= 100;
 800a03c:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800a03e:	6062      	str	r2, [r4, #4]
        if( newChannel.Frequency != 0 )
 800a040:	4293      	cmp	r3, r2
 800a042:	d10a      	bne.n	800a05a <RegionEU868ApplyCFList+0x5a>
            channelRemove.ChannelId = chanIdx;
 800a044:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800a046:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800a048:	701d      	strb	r5, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800a04a:	f7ff ffbf 	bl	8009fcc <RegionEU868ChannelsRemove>
 800a04e:	e009      	b.n	800a064 <RegionEU868ApplyCFList+0x64>
            newChannel.Frequency = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800a054:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800a056:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800a058:	e7f4      	b.n	800a044 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800a05a:	a801      	add	r0, sp, #4
 800a05c:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800a05e:	7105      	strb	r5, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800a060:	f7ff ff5a 	bl	8009f18 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800a064:	3501      	adds	r5, #1
 800a066:	b2ed      	uxtb	r5, r5
 800a068:	3603      	adds	r6, #3
 800a06a:	2d10      	cmp	r5, #16
 800a06c:	d1d6      	bne.n	800a01c <RegionEU868ApplyCFList+0x1c>
}
 800a06e:	b007      	add	sp, #28
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a074 <RegionEU868NewChannelReq>:
{
 800a074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800a076:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800a078:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800a07a:	6811      	ldr	r1, [r2, #0]
 800a07c:	2900      	cmp	r1, #0
 800a07e:	d10a      	bne.n	800a096 <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800a080:	a801      	add	r0, sp, #4
 800a082:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800a084:	f7ff ffa2 	bl	8009fcc <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 800a088:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d100      	bne.n	800a090 <RegionEU868NewChannelReq+0x1c>
            status &= 0xFC;
 800a08e:	2300      	movs	r3, #0
    return status;
 800a090:	b258      	sxtb	r0, r3
}
 800a092:	b005      	add	sp, #20
 800a094:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800a096:	a802      	add	r0, sp, #8
 800a098:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800a09a:	7103      	strb	r3, [r0, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800a09c:	f7ff ff3c 	bl	8009f18 <RegionEU868ChannelAdd>
 800a0a0:	2806      	cmp	r0, #6
 800a0a2:	d8f4      	bhi.n	800a08e <RegionEU868NewChannelReq+0x1a>
 800a0a4:	4b01      	ldr	r3, [pc, #4]	; (800a0ac <RegionEU868NewChannelReq+0x38>)
 800a0a6:	5c1b      	ldrb	r3, [r3, r0]
 800a0a8:	e7f2      	b.n	800a090 <RegionEU868NewChannelReq+0x1c>
 800a0aa:	46c0      	nop			; (mov r8, r8)
 800a0ac:	08019484 	.word	0x08019484

0800a0b0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 800a0b0:	1a8a      	subs	r2, r1, r2
 800a0b2:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800a0b4:	1c10      	adds	r0, r2, #0
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	da00      	bge.n	800a0bc <RegionEU868ApplyDrOffset+0xc>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	b2c0      	uxtb	r0, r0
}
 800a0be:	4770      	bx	lr

0800a0c0 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800a0c0:	b530      	push	{r4, r5, lr}
    int8_t phyDr = DataratesUS915[datarate];
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <GetTimeOnAir+0x30>)
{
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	000c      	movs	r4, r1
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800a0c8:	490a      	ldr	r1, [pc, #40]	; (800a0f4 <GetTimeOnAir+0x34>)
    int8_t phyDr = DataratesUS915[datarate];
 800a0ca:	561d      	ldrsb	r5, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800a0cc:	f7ff faa8 	bl	8009620 <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800a0d0:	2300      	movs	r3, #0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800a0d2:	0001      	movs	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	3308      	adds	r3, #8
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <GetTimeOnAir+0x38>)
 800a0de:	b2e4      	uxtb	r4, r4
 800a0e0:	9402      	str	r4, [sp, #8]
 800a0e2:	002a      	movs	r2, r5
 800a0e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a0e6:	9003      	str	r0, [sp, #12]
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	47a0      	blx	r4
}
 800a0ec:	b005      	add	sp, #20
 800a0ee:	bd30      	pop	{r4, r5, pc}
 800a0f0:	080194f0 	.word	0x080194f0
 800a0f4:	0801949c 	.word	0x0801949c
 800a0f8:	0801abc8 	.word	0x0801abc8

0800a0fc <VerifyRfFreq>:
{
 800a0fc:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <VerifyRfFreq+0x2c>)
{
 800a100:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	4798      	blx	r3
 800a108:	1e01      	subs	r1, r0, #0
 800a10a:	d00b      	beq.n	800a124 <VerifyRfFreq+0x28>
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800a10c:	4b07      	ldr	r3, [pc, #28]	; (800a12c <VerifyRfFreq+0x30>)
        return false;
 800a10e:	2100      	movs	r1, #0
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800a110:	18e0      	adds	r0, r4, r3
 800a112:	4b07      	ldr	r3, [pc, #28]	; (800a130 <VerifyRfFreq+0x34>)
 800a114:	4298      	cmp	r0, r3
 800a116:	d805      	bhi.n	800a124 <VerifyRfFreq+0x28>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800a118:	4906      	ldr	r1, [pc, #24]	; (800a134 <VerifyRfFreq+0x38>)
 800a11a:	f7f6 f8ab 	bl	8000274 <__aeabi_uidivmod>
 800a11e:	424b      	negs	r3, r1
 800a120:	4159      	adcs	r1, r3
 800a122:	b2c9      	uxtb	r1, r1
}
 800a124:	0008      	movs	r0, r1
 800a126:	bd16      	pop	{r1, r2, r4, pc}
 800a128:	0801abc8 	.word	0x0801abc8
 800a12c:	c8f78f60 	.word	0xc8f78f60
 800a130:	00401640 	.word	0x00401640
 800a134:	000927c0 	.word	0x000927c0

0800a138 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800a138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800a13a:	2200      	movs	r2, #0
{
 800a13c:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800a13e:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800a140:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800a142:	3801      	subs	r0, #1
 800a144:	2836      	cmp	r0, #54	; 0x36
 800a146:	d81f      	bhi.n	800a188 <RegionUS915GetPhyParam+0x50>
 800a148:	f7f5 fff0 	bl	800012c <__gnu_thumb1_case_uqi>
 800a14c:	1e1e1e1c 	.word	0x1e1e1e1c
 800a150:	1e1e1e1e 	.word	0x1e1e1e1e
 800a154:	36341e1e 	.word	0x36341e1e
 800a158:	3f3d1e38 	.word	0x3f3d1e38
 800a15c:	49474542 	.word	0x49474542
 800a160:	541c521e 	.word	0x541c521e
 800a164:	1e605e5a 	.word	0x1e605e5a
 800a168:	211e631e 	.word	0x211e631e
 800a16c:	1e1e1e1e 	.word	0x1e1e1e1e
 800a170:	1e1e1e1e 	.word	0x1e1e1e1e
 800a174:	1e1e1e1e 	.word	0x1e1e1e1e
 800a178:	1c6c661e 	.word	0x1c6c661e
 800a17c:	1c661e1c 	.word	0x1c661e1c
 800a180:	721c      	.short	0x721c
 800a182:	76          	.byte	0x76
 800a183:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800a184:	2308      	movs	r3, #8
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
            break;
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800a186:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800a188:	9800      	ldr	r0, [sp, #0]
 800a18a:	b005      	add	sp, #20
 800a18c:	bd00      	pop	{pc}
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800a18e:	785b      	ldrb	r3, [r3, #1]
 800a190:	a801      	add	r0, sp, #4
 800a192:	7003      	strb	r3, [r0, #0]
 800a194:	2304      	movs	r3, #4
 800a196:	7043      	strb	r3, [r0, #1]
 800a198:	2390      	movs	r3, #144	; 0x90
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800a19a:	22d8      	movs	r2, #216	; 0xd8
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800a19c:	01db      	lsls	r3, r3, #7
 800a19e:	8043      	strh	r3, [r0, #2]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800a1a0:	4b28      	ldr	r3, [pc, #160]	; (800a244 <RegionUS915GetPhyParam+0x10c>)
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	189a      	adds	r2, r3, r2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800a1a8:	6042      	str	r2, [r0, #4]
 800a1aa:	6083      	str	r3, [r0, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800a1ac:	f7ff fa16 	bl	80095dc <RegionCommonGetNextLowerTxDr>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800a1b0:	9000      	str	r0, [sp, #0]
            break;
 800a1b2:	e7e9      	b.n	800a188 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800a1b4:	2340      	movs	r3, #64	; 0x40
 800a1b6:	e7e6      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800a1b8:	2320      	movs	r3, #32
 800a1ba:	e7e4      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	4a22      	ldr	r2, [pc, #136]	; (800a248 <RegionUS915GetPhyParam+0x110>)
 800a1c0:	b25b      	sxtb	r3, r3
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800a1c2:	5cd3      	ldrb	r3, [r2, r3]
 800a1c4:	e7df      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800a1c6:	4b21      	ldr	r3, [pc, #132]	; (800a24c <RegionUS915GetPhyParam+0x114>)
 800a1c8:	e7dd      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800a1ca:	23fa      	movs	r3, #250	; 0xfa
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	e7da      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800a1d0:	23fa      	movs	r3, #250	; 0xfa
 800a1d2:	00db      	lsls	r3, r3, #3
 800a1d4:	e7d7      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800a1d6:	4b1e      	ldr	r3, [pc, #120]	; (800a250 <RegionUS915GetPhyParam+0x118>)
 800a1d8:	e7d5      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800a1da:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <RegionUS915GetPhyParam+0x11c>)
 800a1dc:	e7d3      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800a1de:	21fa      	movs	r1, #250	; 0xfa
 800a1e0:	481d      	ldr	r0, [pc, #116]	; (800a258 <RegionUS915GetPhyParam+0x120>)
 800a1e2:	0089      	lsls	r1, r1, #2
 800a1e4:	f7fa fbaa 	bl	800493c <randr>
 800a1e8:	23fa      	movs	r3, #250	; 0xfa
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	18c0      	adds	r0, r0, r3
 800a1ee:	e7df      	b.n	800a1b0 <RegionUS915GetPhyParam+0x78>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800a1f0:	4b1a      	ldr	r3, [pc, #104]	; (800a25c <RegionUS915GetPhyParam+0x124>)
 800a1f2:	e7c8      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a1f4:	22d8      	movs	r2, #216	; 0xd8
 800a1f6:	4b13      	ldr	r3, [pc, #76]	; (800a244 <RegionUS915GetPhyParam+0x10c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	189b      	adds	r3, r3, r2
 800a1fe:	e7c2      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
 800a200:	4b10      	ldr	r3, [pc, #64]	; (800a244 <RegionUS915GetPhyParam+0x10c>)
 800a202:	22db      	movs	r2, #219	; 0xdb
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	e7f8      	b.n	800a1fa <RegionUS915GetPhyParam+0xc2>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800a208:	2348      	movs	r3, #72	; 0x48
 800a20a:	e7bc      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800a20c:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <RegionUS915GetPhyParam+0x10c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	e7b9      	b.n	800a186 <RegionUS915GetPhyParam+0x4e>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800a212:	4b13      	ldr	r3, [pc, #76]	; (800a260 <RegionUS915GetPhyParam+0x128>)
 800a214:	9300      	str	r3, [sp, #0]
            break;
 800a216:	e7b7      	b.n	800a188 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800a218:	7918      	ldrb	r0, [r3, #4]
 800a21a:	4a12      	ldr	r2, [pc, #72]	; (800a264 <RegionUS915GetPhyParam+0x12c>)
 800a21c:	490f      	ldr	r1, [pc, #60]	; (800a25c <RegionUS915GetPhyParam+0x124>)
 800a21e:	f7fe febe 	bl	8008f9e <RegionBaseUSCalcDownlinkFrequency>
 800a222:	e7c5      	b.n	800a1b0 <RegionUS915GetPhyParam+0x78>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800a224:	466a      	mov	r2, sp
 800a226:	4b10      	ldr	r3, [pc, #64]	; (800a268 <RegionUS915GetPhyParam+0x130>)
 800a228:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800a22a:	2303      	movs	r3, #3
 800a22c:	7093      	strb	r3, [r2, #2]
            break;
 800a22e:	e7ab      	b.n	800a188 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800a230:	785b      	ldrb	r3, [r3, #1]
 800a232:	4a0e      	ldr	r2, [pc, #56]	; (800a26c <RegionUS915GetPhyParam+0x134>)
 800a234:	b25b      	sxtb	r3, r3
 800a236:	e7c4      	b.n	800a1c2 <RegionUS915GetPhyParam+0x8a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800a238:	2001      	movs	r0, #1
 800a23a:	490d      	ldr	r1, [pc, #52]	; (800a270 <RegionUS915GetPhyParam+0x138>)
 800a23c:	5618      	ldrsb	r0, [r3, r0]
 800a23e:	f7ff f9ef 	bl	8009620 <RegionCommonGetBandwidth>
 800a242:	e7b5      	b.n	800a1b0 <RegionUS915GetPhyParam+0x78>
 800a244:	200012a4 	.word	0x200012a4
 800a248:	08019500 	.word	0x08019500
 800a24c:	00000bb8 	.word	0x00000bb8
 800a250:	00001388 	.word	0x00001388
 800a254:	00001770 	.word	0x00001770
 800a258:	fffffc18 	.word	0xfffffc18
 800a25c:	370870a0 	.word	0x370870a0
 800a260:	4200999a 	.word	0x4200999a
 800a264:	000927c0 	.word	0x000927c0
 800a268:	00000417 	.word	0x00000417
 800a26c:	080194f0 	.word	0x080194f0
 800a270:	0801949c 	.word	0x0801949c

0800a274 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800a274:	b513      	push	{r0, r1, r4, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800a276:	7804      	ldrb	r4, [r0, #0]
{
 800a278:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800a27a:	7842      	ldrb	r2, [r0, #1]
 800a27c:	200c      	movs	r0, #12
 800a27e:	4b08      	ldr	r3, [pc, #32]	; (800a2a0 <RegionUS915SetBandTxDone+0x2c>)
 800a280:	4360      	muls	r0, r4
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	181b      	adds	r3, r3, r0
 800a286:	2018      	movs	r0, #24
 800a288:	7a5b      	ldrb	r3, [r3, #9]
 800a28a:	4343      	muls	r3, r0
 800a28c:	4805      	ldr	r0, [pc, #20]	; (800a2a4 <RegionUS915SetBandTxDone+0x30>)
 800a28e:	6800      	ldr	r0, [r0, #0]
 800a290:	18c0      	adds	r0, r0, r3
 800a292:	690b      	ldr	r3, [r1, #16]
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	68cb      	ldr	r3, [r1, #12]
 800a298:	6889      	ldr	r1, [r1, #8]
 800a29a:	f7fe ff05 	bl	80090a8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800a29e:	bd13      	pop	{r0, r1, r4, pc}
 800a2a0:	200012a4 	.word	0x200012a4
 800a2a4:	2000129c 	.word	0x2000129c

0800a2a8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2aa:	b087      	sub	sp, #28
    Band_t bands[US915_MAX_NB_BANDS] =
 800a2ac:	2400      	movs	r4, #0
 800a2ae:	466a      	mov	r2, sp
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	7094      	strb	r4, [r2, #2]
 800a2b4:	8013      	strh	r3, [r2, #0]
 800a2b6:	9401      	str	r4, [sp, #4]
 800a2b8:	9402      	str	r4, [sp, #8]
 800a2ba:	9403      	str	r4, [sp, #12]
 800a2bc:	9404      	str	r4, [sp, #16]
 800a2be:	7514      	strb	r4, [r2, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800a2c0:	7b05      	ldrb	r5, [r0, #12]
 800a2c2:	42a5      	cmp	r5, r4
 800a2c4:	d004      	beq.n	800a2d0 <RegionUS915InitDefaults+0x28>
 800a2c6:	3d01      	subs	r5, #1
 800a2c8:	2d01      	cmp	r5, #1
 800a2ca:	d94a      	bls.n	800a362 <RegionUS915InitDefaults+0xba>
        default:
        {
            break;
        }
    }
}
 800a2cc:	b007      	add	sp, #28
 800a2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800a2d0:	6803      	ldr	r3, [r0, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0fa      	beq.n	800a2cc <RegionUS915InitDefaults+0x24>
 800a2d6:	6842      	ldr	r2, [r0, #4]
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d0f7      	beq.n	800a2cc <RegionUS915InitDefaults+0x24>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800a2dc:	4c2c      	ldr	r4, [pc, #176]	; (800a390 <RegionUS915InitDefaults+0xe8>)
            RegionBands = (Band_t*) params->Bands;
 800a2de:	6880      	ldr	r0, [r0, #8]
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800a2e0:	492c      	ldr	r1, [pc, #176]	; (800a394 <RegionUS915InitDefaults+0xec>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800a2e2:	6022      	str	r2, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800a2e4:	4a2c      	ldr	r2, [pc, #176]	; (800a398 <RegionUS915InitDefaults+0xf0>)
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800a2e6:	600b      	str	r3, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800a2e8:	6010      	str	r0, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800a2ea:	4669      	mov	r1, sp
 800a2ec:	2218      	movs	r2, #24
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800a2ee:	819d      	strh	r5, [r3, #12]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800a2f0:	f7fa fb2f 	bl	8004952 <memcpy1>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800a2f4:	6820      	ldr	r0, [r4, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800a2f6:	2730      	movs	r7, #48	; 0x30
 800a2f8:	0003      	movs	r3, r0
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800a2fa:	4a28      	ldr	r2, [pc, #160]	; (800a39c <RegionUS915InitDefaults+0xf4>)
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a2fc:	4928      	ldr	r1, [pc, #160]	; (800a3a0 <RegionUS915InitDefaults+0xf8>)
 800a2fe:	4e29      	ldr	r6, [pc, #164]	; (800a3a4 <RegionUS915InitDefaults+0xfc>)
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800a300:	601a      	str	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a302:	1992      	adds	r2, r2, r6
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800a304:	721f      	strb	r7, [r3, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800a306:	725d      	strb	r5, [r3, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a308:	330c      	adds	r3, #12
 800a30a:	428a      	cmp	r2, r1
 800a30c:	d1f7      	bne.n	800a2fe <RegionUS915InitDefaults+0x56>
 800a30e:	23c0      	movs	r3, #192	; 0xc0
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800a310:	2744      	movs	r7, #68	; 0x44
                RegionNvmGroup2->Channels[i].Band = 0;
 800a312:	2500      	movs	r5, #0
 800a314:	009b      	lsls	r3, r3, #2
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800a316:	4a24      	ldr	r2, [pc, #144]	; (800a3a8 <RegionUS915InitDefaults+0x100>)
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800a318:	4924      	ldr	r1, [pc, #144]	; (800a3ac <RegionUS915InitDefaults+0x104>)
 800a31a:	18c3      	adds	r3, r0, r3
 800a31c:	4e24      	ldr	r6, [pc, #144]	; (800a3b0 <RegionUS915InitDefaults+0x108>)
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800a31e:	601a      	str	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800a320:	1992      	adds	r2, r2, r6
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800a322:	721f      	strb	r7, [r3, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800a324:	725d      	strb	r5, [r3, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800a326:	330c      	adds	r3, #12
 800a328:	428a      	cmp	r2, r1
 800a32a:	d1f7      	bne.n	800a31c <RegionUS915InitDefaults+0x74>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800a32c:	2301      	movs	r3, #1
 800a32e:	22db      	movs	r2, #219	; 0xdb
 800a330:	425b      	negs	r3, r3
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	5083      	str	r3, [r0, r2]
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800a336:	3204      	adds	r2, #4
 800a338:	5083      	str	r3, [r0, r2]
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800a33a:	23dd      	movs	r3, #221	; 0xdd
 800a33c:	22ff      	movs	r2, #255	; 0xff
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a33e:	25d8      	movs	r5, #216	; 0xd8
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	50c2      	str	r2, [r0, r3]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a344:	00ad      	lsls	r5, r5, #2
 800a346:	3b08      	subs	r3, #8
 800a348:	18c1      	adds	r1, r0, r3
 800a34a:	3af9      	subs	r2, #249	; 0xf9
 800a34c:	1940      	adds	r0, r0, r5
 800a34e:	f7fe fe9c 	bl	800908a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800a352:	6821      	ldr	r1, [r4, #0]
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <RegionUS915InitDefaults+0xec>)
 800a356:	2206      	movs	r2, #6
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	1949      	adds	r1, r1, r5
 800a35c:	f7fe fe95 	bl	800908a <RegionCommonChanMaskCopy>
            break;
 800a360:	e7b4      	b.n	800a2cc <RegionUS915InitDefaults+0x24>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a362:	23db      	movs	r3, #219	; 0xdb
 800a364:	26d8      	movs	r6, #216	; 0xd8
 800a366:	4d0a      	ldr	r5, [pc, #40]	; (800a390 <RegionUS915InitDefaults+0xe8>)
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	6828      	ldr	r0, [r5, #0]
 800a36c:	00b6      	lsls	r6, r6, #2
 800a36e:	18c1      	adds	r1, r0, r3
 800a370:	2206      	movs	r2, #6
 800a372:	1980      	adds	r0, r0, r6
 800a374:	f7fe fe89 	bl	800908a <RegionCommonChanMaskCopy>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800a378:	4b06      	ldr	r3, [pc, #24]	; (800a394 <RegionUS915InitDefaults+0xec>)
 800a37a:	682a      	ldr	r2, [r5, #0]
 800a37c:	6819      	ldr	r1, [r3, #0]
 800a37e:	1992      	adds	r2, r2, r6
 800a380:	5b10      	ldrh	r0, [r2, r4]
 800a382:	5b0b      	ldrh	r3, [r1, r4]
 800a384:	4003      	ands	r3, r0
 800a386:	530b      	strh	r3, [r1, r4]
            for( uint8_t i = 0; i < 6; i++ )
 800a388:	3402      	adds	r4, #2
 800a38a:	2c0c      	cmp	r4, #12
 800a38c:	d1f8      	bne.n	800a380 <RegionUS915InitDefaults+0xd8>
 800a38e:	e79d      	b.n	800a2cc <RegionUS915InitDefaults+0x24>
 800a390:	200012a4 	.word	0x200012a4
 800a394:	200012a0 	.word	0x200012a0
 800a398:	2000129c 	.word	0x2000129c
 800a39c:	35c80160 	.word	0x35c80160
 800a3a0:	368b5160 	.word	0x368b5160
 800a3a4:	00030d40 	.word	0x00030d40
 800a3a8:	35d2afc0 	.word	0x35d2afc0
 800a3ac:	3695ffc0 	.word	0x3695ffc0
 800a3b0:	00186a00 	.word	0x00186a00

0800a3b4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	b510      	push	{r4, lr}
 800a3b8:	0008      	movs	r0, r1
    switch( phyAttribute )
 800a3ba:	290a      	cmp	r1, #10
 800a3bc:	d822      	bhi.n	800a404 <RegionUS915Verify+0x50>
 800a3be:	f7f5 feb5 	bl	800012c <__gnu_thumb1_case_uqi>
 800a3c2:	2106      	.short	0x2106
 800a3c4:	0a212121 	.word	0x0a212121
 800a3c8:	1d21130f 	.word	0x1d21130f
 800a3cc:	1d          	.byte	0x1d
 800a3cd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800a3ce:	6818      	ldr	r0, [r3, #0]
 800a3d0:	f7ff fe94 	bl	800a0fc <VerifyRfFreq>
            return US915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800a3d4:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	2204      	movs	r2, #4
 800a3da:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800a3dc:	2100      	movs	r1, #0
 800a3de:	e007      	b.n	800a3f0 <RegionUS915Verify+0x3c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	2205      	movs	r2, #5
 800a3e4:	5618      	ldrsb	r0, [r3, r0]
 800a3e6:	e7f9      	b.n	800a3dc <RegionUS915Verify+0x28>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	220d      	movs	r2, #13
 800a3ec:	2108      	movs	r1, #8
 800a3ee:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800a3f0:	f7fe fe0e 	bl	8009010 <RegionCommonValueInRange>
 800a3f4:	1e43      	subs	r3, r0, #1
 800a3f6:	4198      	sbcs	r0, r3
 800a3f8:	b2c0      	uxtb	r0, r0
 800a3fa:	e7eb      	b.n	800a3d4 <RegionUS915Verify+0x20>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	220e      	movs	r2, #14
 800a400:	5618      	ldrsb	r0, [r3, r0]
 800a402:	e7eb      	b.n	800a3dc <RegionUS915Verify+0x28>
    switch( phyAttribute )
 800a404:	2000      	movs	r0, #0
 800a406:	e7e5      	b.n	800a3d4 <RegionUS915Verify+0x20>

0800a408 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800a408:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800a40a:	7a03      	ldrb	r3, [r0, #8]
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	d125      	bne.n	800a45c <RegionUS915ApplyCFList+0x54>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800a410:	6843      	ldr	r3, [r0, #4]
 800a412:	7bda      	ldrb	r2, [r3, #15]
 800a414:	2a01      	cmp	r2, #1
 800a416:	d121      	bne.n	800a45c <RegionUS915ApplyCFList+0x54>
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800a418:	4a11      	ldr	r2, [pc, #68]	; (800a460 <RegionUS915ApplyCFList+0x58>)
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800a41a:	27da      	movs	r7, #218	; 0xda
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800a41c:	6815      	ldr	r5, [r2, #0]
 800a41e:	22d8      	movs	r2, #216	; 0xd8
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a420:	2100      	movs	r1, #0
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	18a8      	adds	r0, r5, r2
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a426:	4a0f      	ldr	r2, [pc, #60]	; (800a464 <RegionUS915ApplyCFList+0x5c>)
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800a428:	00bf      	lsls	r7, r7, #2
 800a42a:	6814      	ldr	r4, [r2, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	8002      	strh	r2, [r0, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800a430:	785e      	ldrb	r6, [r3, #1]
 800a432:	0236      	lsls	r6, r6, #8
 800a434:	4332      	orrs	r2, r6
 800a436:	8002      	strh	r2, [r0, #0]
        if( chMaskItr == 4 )
 800a438:	2904      	cmp	r1, #4
 800a43a:	d102      	bne.n	800a442 <RegionUS915ApplyCFList+0x3a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800a43c:	26ff      	movs	r6, #255	; 0xff
 800a43e:	4032      	ands	r2, r6
 800a440:	53ea      	strh	r2, [r5, r7]
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a442:	8822      	ldrh	r2, [r4, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a444:	3101      	adds	r1, #1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a446:	4694      	mov	ip, r2
 800a448:	4666      	mov	r6, ip
 800a44a:	8802      	ldrh	r2, [r0, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a44c:	b2c9      	uxtb	r1, r1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800a44e:	4032      	ands	r2, r6
 800a450:	8022      	strh	r2, [r4, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800a452:	3302      	adds	r3, #2
 800a454:	3002      	adds	r0, #2
 800a456:	3402      	adds	r4, #2
 800a458:	2905      	cmp	r1, #5
 800a45a:	d1e7      	bne.n	800a42c <RegionUS915ApplyCFList+0x24>
    }
}
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a45e:	46c0      	nop			; (mov r8, r8)
 800a460:	200012a4 	.word	0x200012a4
 800a464:	200012a0 	.word	0x200012a0

0800a468 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800a46a:	2204      	movs	r2, #4
{
 800a46c:	0005      	movs	r5, r0
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800a46e:	2100      	movs	r1, #0
 800a470:	6800      	ldr	r0, [r0, #0]
 800a472:	f7fe fdeb 	bl	800904c <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
        ( nbChannels > 0 ) )
    {
        return false;
 800a476:	2400      	movs	r4, #0
    if( ( nbChannels < 2 ) &&
 800a478:	2801      	cmp	r0, #1
 800a47a:	d005      	beq.n	800a488 <RegionUS915ChanMaskSet+0x20>
    }

    switch( chanMaskSet->ChannelsMaskType )
 800a47c:	792c      	ldrb	r4, [r5, #4]
 800a47e:	2c00      	cmp	r4, #0
 800a480:	d004      	beq.n	800a48c <RegionUS915ChanMaskSet+0x24>
 800a482:	2c01      	cmp	r4, #1
 800a484:	d01f      	beq.n	800a4c6 <RegionUS915ChanMaskSet+0x5e>
 800a486:	2400      	movs	r4, #0
        }
        default:
            return false;
    }
    return true;
}
 800a488:	0020      	movs	r0, r4
 800a48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800a48c:	27d8      	movs	r7, #216	; 0xd8
 800a48e:	4e13      	ldr	r6, [pc, #76]	; (800a4dc <RegionUS915ChanMaskSet+0x74>)
 800a490:	00bf      	lsls	r7, r7, #2
 800a492:	6833      	ldr	r3, [r6, #0]
 800a494:	2206      	movs	r2, #6
 800a496:	19d8      	adds	r0, r3, r7
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	f7fe fdf6 	bl	800908a <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800a49e:	23dd      	movs	r3, #221	; 0xdd
 800a4a0:	6832      	ldr	r2, [r6, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	5cd1      	ldrb	r1, [r2, r3]
 800a4a6:	52d1      	strh	r1, [r2, r3]
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800a4a8:	4b0d      	ldr	r3, [pc, #52]	; (800a4e0 <RegionUS915ChanMaskSet+0x78>)
 800a4aa:	52d4      	strh	r4, [r2, r3]
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <RegionUS915ChanMaskSet+0x7c>)
 800a4ae:	19d2      	adds	r2, r2, r7
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	0023      	movs	r3, r4
 800a4b4:	5ad4      	ldrh	r4, [r2, r3]
 800a4b6:	5ac1      	ldrh	r1, [r0, r3]
 800a4b8:	4021      	ands	r1, r4
 800a4ba:	52c1      	strh	r1, [r0, r3]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800a4bc:	3302      	adds	r3, #2
 800a4be:	2b0c      	cmp	r3, #12
 800a4c0:	d1f8      	bne.n	800a4b4 <RegionUS915ChanMaskSet+0x4c>
    return true;
 800a4c2:	2401      	movs	r4, #1
 800a4c4:	e7e0      	b.n	800a488 <RegionUS915ChanMaskSet+0x20>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <RegionUS915ChanMaskSet+0x74>)
 800a4c8:	2206      	movs	r2, #6
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	23db      	movs	r3, #219	; 0xdb
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	6829      	ldr	r1, [r5, #0]
 800a4d2:	18c0      	adds	r0, r0, r3
 800a4d4:	f7fe fdd9 	bl	800908a <RegionCommonChanMaskCopy>
            break;
 800a4d8:	e7d6      	b.n	800a488 <RegionUS915ChanMaskSet+0x20>
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	200012a4 	.word	0x200012a4
 800a4e0:	00000376 	.word	0x00000376
 800a4e4:	200012a0 	.word	0x200012a0

0800a4e8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ea:	001c      	movs	r4, r3
 800a4ec:	000e      	movs	r6, r1
 800a4ee:	0017      	movs	r7, r2
 800a4f0:	b085      	sub	sp, #20
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800a4f2:	1c03      	adds	r3, r0, #0
 800a4f4:	280d      	cmp	r0, #13
 800a4f6:	dd00      	ble.n	800a4fa <RegionUS915ComputeRxWindowParameters+0x12>
 800a4f8:	230d      	movs	r3, #13
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a4fa:	4d10      	ldr	r5, [pc, #64]	; (800a53c <RegionUS915ComputeRxWindowParameters+0x54>)
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800a4fc:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a4fe:	0029      	movs	r1, r5
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800a500:	b258      	sxtb	r0, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a502:	f7ff f88d 	bl	8009620 <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800a506:	2301      	movs	r3, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800a508:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800a50a:	56e3      	ldrsb	r3, [r4, r3]
 800a50c:	490c      	ldr	r1, [pc, #48]	; (800a540 <RegionUS915ComputeRxWindowParameters+0x58>)
 800a50e:	009a      	lsls	r2, r3, #2
 800a510:	5cc8      	ldrb	r0, [r1, r3]
 800a512:	5951      	ldr	r1, [r2, r5]
 800a514:	f7fe ff6c 	bl	80093f0 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <RegionUS915ComputeRxWindowParameters+0x5c>)
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800a51a:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a51e:	9303      	str	r3, [sp, #12]
 800a520:	4798      	blx	r3
 800a522:	0022      	movs	r2, r4
 800a524:	3408      	adds	r4, #8
 800a526:	320c      	adds	r2, #12
 800a528:	0003      	movs	r3, r0
 800a52a:	9201      	str	r2, [sp, #4]
 800a52c:	0031      	movs	r1, r6
 800a52e:	003a      	movs	r2, r7
 800a530:	0028      	movs	r0, r5
 800a532:	9400      	str	r4, [sp, #0]
 800a534:	f7fe ff6e 	bl	8009414 <RegionCommonComputeRxWindowParameters>
}
 800a538:	b005      	add	sp, #20
 800a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53c:	0801949c 	.word	0x0801949c
 800a540:	080194f0 	.word	0x080194f0
 800a544:	0801abc8 	.word	0x0801abc8

0800a548 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a548:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 800a54a:	2701      	movs	r7, #1
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800a54c:	4e21      	ldr	r6, [pc, #132]	; (800a5d4 <RegionUS915RxConfig+0x8c>)
{
 800a54e:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 800a550:	6873      	ldr	r3, [r6, #4]
{
 800a552:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800a554:	57c7      	ldrsb	r7, [r0, r7]
{
 800a556:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800a558:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 800a55a:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800a55c:	4798      	blx	r3
 800a55e:	0003      	movs	r3, r0
    {
        return false;
 800a560:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800a562:	4283      	cmp	r3, r0
 800a564:	d133      	bne.n	800a5ce <RegionUS915RxConfig+0x86>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800a566:	7ca3      	ldrb	r3, [r4, #18]
 800a568:	4283      	cmp	r3, r0
 800a56a:	d106      	bne.n	800a57a <RegionUS915RxConfig+0x32>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800a56c:	2307      	movs	r3, #7
 800a56e:	7825      	ldrb	r5, [r4, #0]
 800a570:	402b      	ands	r3, r5
 800a572:	4d19      	ldr	r5, [pc, #100]	; (800a5d8 <RegionUS915RxConfig+0x90>)
 800a574:	435d      	muls	r5, r3
 800a576:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <RegionUS915RxConfig+0x94>)
 800a578:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800a57a:	4b19      	ldr	r3, [pc, #100]	; (800a5e0 <RegionUS915RxConfig+0x98>)

    Radio.SetChannel( frequency );
 800a57c:	0028      	movs	r0, r5
    phyDr = DataratesUS915[dr];
 800a57e:	57db      	ldrsb	r3, [r3, r7]

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a580:	2501      	movs	r5, #1
    phyDr = DataratesUS915[dr];
 800a582:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800a584:	68f3      	ldr	r3, [r6, #12]
 800a586:	930d      	str	r3, [sp, #52]	; 0x34
 800a588:	4798      	blx	r3
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a58a:	7c63      	ldrb	r3, [r4, #17]
 800a58c:	78a1      	ldrb	r1, [r4, #2]
 800a58e:	9309      	str	r3, [sp, #36]	; 0x24
 800a590:	2300      	movs	r3, #0
 800a592:	9508      	str	r5, [sp, #32]
 800a594:	9307      	str	r3, [sp, #28]
 800a596:	9306      	str	r3, [sp, #24]
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	9303      	str	r3, [sp, #12]
 800a59e:	68a2      	ldr	r2, [r4, #8]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	b292      	uxth	r2, r2
 800a5a4:	9202      	str	r2, [sp, #8]
 800a5a6:	2208      	movs	r2, #8
 800a5a8:	69b3      	ldr	r3, [r6, #24]
 800a5aa:	0028      	movs	r0, r5
 800a5ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ae:	9201      	str	r2, [sp, #4]
 800a5b0:	002b      	movs	r3, r5
 800a5b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a5b6:	47a0      	blx	r4

    Radio.SetMaxPayloadLength( MODEM_LORA, MaxPayloadOfDatarateUS915[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <RegionUS915RxConfig+0x9c>)
 800a5ba:	0028      	movs	r0, r5
 800a5bc:	5dd9      	ldrb	r1, [r3, r7]
 800a5be:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a5c0:	310d      	adds	r1, #13
 800a5c2:	b2c9      	uxtb	r1, r1
 800a5c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5c6:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
 800a5c8:	0028      	movs	r0, r5
    *datarate = (uint8_t) dr;
 800a5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5cc:	701f      	strb	r7, [r3, #0]
}
 800a5ce:	b00f      	add	sp, #60	; 0x3c
 800a5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5d2:	46c0      	nop			; (mov r8, r8)
 800a5d4:	0801abc8 	.word	0x0801abc8
 800a5d8:	000927c0 	.word	0x000927c0
 800a5dc:	370870a0 	.word	0x370870a0
 800a5e0:	080194f0 	.word	0x080194f0
 800a5e4:	08019500 	.word	0x08019500

0800a5e8 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a5ea:	2701      	movs	r7, #1
{
 800a5ec:	b091      	sub	sp, #68	; 0x44
 800a5ee:	910d      	str	r1, [sp, #52]	; 0x34
 800a5f0:	920e      	str	r2, [sp, #56]	; 0x38
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a5f2:	57c7      	ldrsb	r7, [r0, r7]
 800a5f4:	4b35      	ldr	r3, [pc, #212]	; (800a6cc <RegionUS915TxConfig+0xe4>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a5f6:	7802      	ldrb	r2, [r0, #0]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a5f8:	57db      	ldrsb	r3, [r3, r7]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a5fa:	2502      	movs	r5, #2
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800a5fc:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a5fe:	4b34      	ldr	r3, [pc, #208]	; (800a6d0 <RegionUS915TxConfig+0xe8>)
 800a600:	5745      	ldrsb	r5, [r0, r5]
 800a602:	681e      	ldr	r6, [r3, #0]
 800a604:	230c      	movs	r3, #12
 800a606:	4353      	muls	r3, r2
 800a608:	2218      	movs	r2, #24
 800a60a:	18f3      	adds	r3, r6, r3
 800a60c:	7a59      	ldrb	r1, [r3, #9]
 800a60e:	4b31      	ldr	r3, [pc, #196]	; (800a6d4 <RegionUS915TxConfig+0xec>)
 800a610:	434a      	muls	r2, r1
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800a612:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a614:	681b      	ldr	r3, [r3, #0]
{
 800a616:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a618:	189b      	adds	r3, r3, r2
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800a61a:	0028      	movs	r0, r5
 800a61c:	5659      	ldrsb	r1, [r3, r1]
 800a61e:	f7fe fff8 	bl	8009612 <RegionCommonLimitTxPower>
 800a622:	900a      	str	r0, [sp, #40]	; 0x28
    if( datarate == DR_4 )
 800a624:	2f04      	cmp	r7, #4
 800a626:	d143      	bne.n	800a6b0 <RegionUS915TxConfig+0xc8>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800a628:	1c28      	adds	r0, r5, #0
 800a62a:	2d02      	cmp	r5, #2
 800a62c:	da00      	bge.n	800a630 <RegionUS915TxConfig+0x48>
 800a62e:	2002      	movs	r0, #2
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800a630:	b243      	sxtb	r3, r0
 800a632:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800a634:	2001      	movs	r0, #1
 800a636:	4928      	ldr	r1, [pc, #160]	; (800a6d8 <RegionUS915TxConfig+0xf0>)
 800a638:	5620      	ldrsb	r0, [r4, r0]
 800a63a:	f7fe fff1 	bl	8009620 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800a63e:	2200      	movs	r2, #0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800a640:	900c      	str	r0, [sp, #48]	; 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800a642:	4926      	ldr	r1, [pc, #152]	; (800a6dc <RegionUS915TxConfig+0xf4>)
 800a644:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a646:	f7fe ff13 	bl	8009470 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a64a:	4b21      	ldr	r3, [pc, #132]	; (800a6d0 <RegionUS915TxConfig+0xe8>)
 800a64c:	7821      	ldrb	r1, [r4, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	230c      	movs	r3, #12
 800a652:	434b      	muls	r3, r1
 800a654:	4e22      	ldr	r6, [pc, #136]	; (800a6e0 <RegionUS915TxConfig+0xf8>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800a656:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a658:	68f1      	ldr	r1, [r6, #12]
 800a65a:	5898      	ldr	r0, [r3, r2]
 800a65c:	910f      	str	r1, [sp, #60]	; 0x3c
 800a65e:	4788      	blx	r1

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800a660:	23fa      	movs	r3, #250	; 0xfa
 800a662:	011b      	lsls	r3, r3, #4
 800a664:	9308      	str	r3, [sp, #32]
 800a666:	2308      	movs	r3, #8
 800a668:	2200      	movs	r2, #0
 800a66a:	2501      	movs	r5, #1
 800a66c:	9302      	str	r3, [sp, #8]
 800a66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a670:	9207      	str	r2, [sp, #28]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	69f3      	ldr	r3, [r6, #28]
 800a676:	9206      	str	r2, [sp, #24]
 800a678:	930b      	str	r3, [sp, #44]	; 0x2c
 800a67a:	9205      	str	r2, [sp, #20]
 800a67c:	9203      	str	r2, [sp, #12]
 800a67e:	0039      	movs	r1, r7
 800a680:	0028      	movs	r0, r5
 800a682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a684:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a686:	9504      	str	r5, [sp, #16]
 800a688:	9501      	str	r5, [sp, #4]
 800a68a:	47b8      	blx	r7

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800a68c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a68e:	0028      	movs	r0, r5
 800a690:	7b21      	ldrb	r1, [r4, #12]
 800a692:	930b      	str	r3, [sp, #44]	; 0x2c
 800a694:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a696:	2001      	movs	r0, #1
 800a698:	89a1      	ldrh	r1, [r4, #12]
 800a69a:	5620      	ldrsb	r0, [r4, r0]
 800a69c:	f7ff fd10 	bl	800a0c0 <GetTimeOnAir>
 800a6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38

    *txPower = txPowerLimited;
 800a6a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a6a4:	6018      	str	r0, [r3, #0]
    return true;
}
 800a6a6:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 800a6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6aa:	701a      	strb	r2, [r3, #0]
}
 800a6ac:	b011      	add	sp, #68	; 0x44
 800a6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a6b0:	23d8      	movs	r3, #216	; 0xd8
 800a6b2:	009b      	lsls	r3, r3, #2
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800a6b4:	2204      	movs	r2, #4
 800a6b6:	2100      	movs	r1, #0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800a6b8:	18f0      	adds	r0, r6, r3
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800a6ba:	f7fe fcc7 	bl	800904c <RegionCommonCountChannels>
 800a6be:	2831      	cmp	r0, #49	; 0x31
 800a6c0:	d8b8      	bhi.n	800a634 <RegionUS915TxConfig+0x4c>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800a6c2:	1c28      	adds	r0, r5, #0
 800a6c4:	2d05      	cmp	r5, #5
 800a6c6:	dab3      	bge.n	800a630 <RegionUS915TxConfig+0x48>
 800a6c8:	2005      	movs	r0, #5
 800a6ca:	e7b1      	b.n	800a630 <RegionUS915TxConfig+0x48>
 800a6cc:	080194f0 	.word	0x080194f0
 800a6d0:	200012a4 	.word	0x200012a4
 800a6d4:	2000129c 	.word	0x2000129c
 800a6d8:	0801949c 	.word	0x0801949c
 800a6dc:	41f00000 	.word	0x41f00000
 800a6e0:	0801abc8 	.word	0x0801abc8

0800a6e4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e6:	b097      	sub	sp, #92	; 0x5c
 800a6e8:	9105      	str	r1, [sp, #20]
 800a6ea:	9206      	str	r2, [sp, #24]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	2206      	movs	r2, #6
{
 800a6f0:	0005      	movs	r5, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a6f2:	a809      	add	r0, sp, #36	; 0x24
{
 800a6f4:	9307      	str	r3, [sp, #28]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a6f6:	f00b fc82 	bl	8015ffe <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800a6fa:	220c      	movs	r2, #12
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	a80b      	add	r0, sp, #44	; 0x2c
 800a700:	f00b fc7d 	bl	8015ffe <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800a704:	4b6f      	ldr	r3, [pc, #444]	; (800a8c4 <RegionUS915LinkAdrReq+0x1e0>)
 800a706:	2206      	movs	r2, #6
 800a708:	6819      	ldr	r1, [r3, #0]
 800a70a:	23d8      	movs	r3, #216	; 0xd8
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	18c9      	adds	r1, r1, r3
 800a710:	a80b      	add	r0, sp, #44	; 0x2c
 800a712:	f7fe fcba 	bl	800908a <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 800a716:	2300      	movs	r3, #0
            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a718:	27ff      	movs	r7, #255	; 0xff
    uint8_t bytesProcessed = 0;
 800a71a:	9301      	str	r3, [sp, #4]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800a71c:	7a2b      	ldrb	r3, [r5, #8]
 800a71e:	9a01      	ldr	r2, [sp, #4]
 800a720:	ae09      	add	r6, sp, #36	; 0x24
 800a722:	ac0b      	add	r4, sp, #44	; 0x2c
 800a724:	4293      	cmp	r3, r2
 800a726:	d908      	bls.n	800a73a <RegionUS915LinkAdrReq+0x56>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800a728:	686b      	ldr	r3, [r5, #4]
 800a72a:	9a01      	ldr	r2, [sp, #4]
 800a72c:	0031      	movs	r1, r6
 800a72e:	1898      	adds	r0, r3, r2
 800a730:	f7fe fdf0 	bl	8009314 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800a734:	2800      	cmp	r0, #0
 800a736:	d000      	beq.n	800a73a <RegionUS915LinkAdrReq+0x56>
 800a738:	e06c      	b.n	800a814 <RegionUS915LinkAdrReq+0x130>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800a73a:	2301      	movs	r3, #1
 800a73c:	56f3      	ldrsb	r3, [r6, r3]
 800a73e:	2b03      	cmp	r3, #3
 800a740:	dc07      	bgt.n	800a752 <RegionUS915LinkAdrReq+0x6e>
 800a742:	2204      	movs	r2, #4
 800a744:	2100      	movs	r1, #0
 800a746:	0020      	movs	r0, r4
 800a748:	f7fe fc80 	bl	800904c <RegionCommonCountChannels>
    {
        status &= 0xFE; // Channel mask KO
 800a74c:	2306      	movs	r3, #6
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800a74e:	2801      	cmp	r0, #1
 800a750:	d900      	bls.n	800a754 <RegionUS915LinkAdrReq+0x70>
    uint8_t bytesProcessed = 0;
 800a752:	2307      	movs	r3, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionUS915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800a754:	a80e      	add	r0, sp, #56	; 0x38
 800a756:	7103      	strb	r3, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800a758:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800a75a:	4c5a      	ldr	r4, [pc, #360]	; (800a8c4 <RegionUS915LinkAdrReq+0x1e0>)
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800a75c:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800a75e:	ab09      	add	r3, sp, #36	; 0x24
 800a760:	785a      	ldrb	r2, [r3, #1]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a762:	a908      	add	r1, sp, #32
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800a764:	7182      	strb	r2, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800a766:	789a      	ldrb	r2, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800a768:	ae0b      	add	r6, sp, #44	; 0x2c
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800a76a:	71c2      	strb	r2, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800a76c:	781a      	ldrb	r2, [r3, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a76e:	3105      	adds	r1, #5
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800a770:	7202      	strb	r2, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800a772:	7aea      	ldrb	r2, [r5, #11]
 800a774:	7242      	strb	r2, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800a776:	7b2a      	ldrb	r2, [r5, #12]
 800a778:	7282      	strb	r2, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800a77a:	7b6a      	ldrb	r2, [r5, #13]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800a77c:	6106      	str	r6, [r0, #16]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800a77e:	72c2      	strb	r2, [r0, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800a780:	2248      	movs	r2, #72	; 0x48
 800a782:	7302      	strb	r2, [r0, #12]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800a784:	2280      	movs	r2, #128	; 0x80
 800a786:	00d2      	lsls	r2, r2, #3
 800a788:	8282      	strh	r2, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800a78a:	6822      	ldr	r2, [r4, #0]
 800a78c:	6182      	str	r2, [r0, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800a78e:	220e      	movs	r2, #14
 800a790:	8382      	strh	r2, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800a792:	682a      	ldr	r2, [r5, #0]
 800a794:	920e      	str	r2, [sp, #56]	; 0x38
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a796:	aa08      	add	r2, sp, #32
 800a798:	3206      	adds	r2, #6
 800a79a:	f7fe fdd6 	bl	800934a <RegionCommonLinkAdrReqVerifyParams>
 800a79e:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800a7a0:	2807      	cmp	r0, #7
 800a7a2:	d127      	bne.n	800a7f4 <RegionUS915LinkAdrReq+0x110>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800a7a4:	22d8      	movs	r2, #216	; 0xd8
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	0092      	lsls	r2, r2, #2
 800a7aa:	1898      	adds	r0, r3, r2
 800a7ac:	0031      	movs	r1, r6
 800a7ae:	2206      	movs	r2, #6
 800a7b0:	f7fe fc6b 	bl	800908a <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800a7b4:	21d8      	movs	r1, #216	; 0xd8
 800a7b6:	4b44      	ldr	r3, [pc, #272]	; (800a8c8 <RegionUS915LinkAdrReq+0x1e4>)
 800a7b8:	6822      	ldr	r2, [r4, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	0089      	lsls	r1, r1, #2
 800a7be:	5a51      	ldrh	r1, [r2, r1]
 800a7c0:	8818      	ldrh	r0, [r3, #0]
 800a7c2:	4001      	ands	r1, r0
 800a7c4:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800a7c6:	4941      	ldr	r1, [pc, #260]	; (800a8cc <RegionUS915LinkAdrReq+0x1e8>)
 800a7c8:	8858      	ldrh	r0, [r3, #2]
 800a7ca:	5a51      	ldrh	r1, [r2, r1]
 800a7cc:	4001      	ands	r1, r0
 800a7ce:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800a7d0:	21d9      	movs	r1, #217	; 0xd9
 800a7d2:	0089      	lsls	r1, r1, #2
 800a7d4:	5a51      	ldrh	r1, [r2, r1]
 800a7d6:	8898      	ldrh	r0, [r3, #4]
 800a7d8:	4001      	ands	r1, r0
 800a7da:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800a7dc:	493c      	ldr	r1, [pc, #240]	; (800a8d0 <RegionUS915LinkAdrReq+0x1ec>)
 800a7de:	88d8      	ldrh	r0, [r3, #6]
 800a7e0:	5a51      	ldrh	r1, [r2, r1]
 800a7e2:	4001      	ands	r1, r0
 800a7e4:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800a7e6:	21da      	movs	r1, #218	; 0xda
 800a7e8:	0089      	lsls	r1, r1, #2
 800a7ea:	5a51      	ldrh	r1, [r2, r1]
 800a7ec:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800a7ee:	4939      	ldr	r1, [pc, #228]	; (800a8d4 <RegionUS915LinkAdrReq+0x1f0>)
 800a7f0:	5a52      	ldrh	r2, [r2, r1]
 800a7f2:	815a      	strh	r2, [r3, #10]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800a7f4:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800a7f6:	ab09      	add	r3, sp, #36	; 0x24
 800a7f8:	785a      	ldrb	r2, [r3, #1]
 800a7fa:	9905      	ldr	r1, [sp, #20]
 800a7fc:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800a7fe:	789a      	ldrb	r2, [r3, #2]
 800a800:	9906      	ldr	r1, [sp, #24]
    *nbRepOut = linkAdrParams.NbRep;
 800a802:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 800a804:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800a806:	9a07      	ldr	r2, [sp, #28]
 800a808:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800a80a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a80c:	9a01      	ldr	r2, [sp, #4]
 800a80e:	701a      	strb	r2, [r3, #0]
}
 800a810:	b017      	add	sp, #92	; 0x5c
 800a812:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	1818      	adds	r0, r3, r0
 800a818:	b2c3      	uxtb	r3, r0
 800a81a:	9301      	str	r3, [sp, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800a81c:	78f2      	ldrb	r2, [r6, #3]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800a81e:	88b3      	ldrh	r3, [r6, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800a820:	2a06      	cmp	r2, #6
 800a822:	d107      	bne.n	800a834 <RegionUS915LinkAdrReq+0x150>
            channelsMask[0] = 0xFFFF;
 800a824:	3a07      	subs	r2, #7
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800a826:	403b      	ands	r3, r7
            channelsMask[0] = 0x0000;
 800a828:	8022      	strh	r2, [r4, #0]
            channelsMask[1] = 0x0000;
 800a82a:	8062      	strh	r2, [r4, #2]
            channelsMask[2] = 0x0000;
 800a82c:	80a2      	strh	r2, [r4, #4]
            channelsMask[3] = 0x0000;
 800a82e:	80e2      	strh	r2, [r4, #6]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800a830:	8123      	strh	r3, [r4, #8]
 800a832:	e773      	b.n	800a71c <RegionUS915LinkAdrReq+0x38>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800a834:	2a07      	cmp	r2, #7
 800a836:	d101      	bne.n	800a83c <RegionUS915LinkAdrReq+0x158>
            channelsMask[0] = 0x0000;
 800a838:	2200      	movs	r2, #0
 800a83a:	e7f4      	b.n	800a826 <RegionUS915LinkAdrReq+0x142>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800a83c:	2a05      	cmp	r2, #5
 800a83e:	d13d      	bne.n	800a8bc <RegionUS915LinkAdrReq+0x1d8>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a840:	2100      	movs	r1, #0
            uint8_t cntChannelMask = 0;
 800a842:	000a      	movs	r2, r1
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a844:	403b      	ands	r3, r7
 800a846:	9304      	str	r3, [sp, #16]
                        channelsMask[4] |= ( bitMask << i );
 800a848:	2001      	movs	r0, #1
                    if( ( i % 2 ) == 0 )
 800a84a:	2301      	movs	r3, #1
                        channelsMask[4] |= ( bitMask << i );
 800a84c:	4088      	lsls	r0, r1
                    if( ( i % 2 ) == 0 )
 800a84e:	400b      	ands	r3, r1
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a850:	0056      	lsls	r6, r2, #1
                    if( ( i % 2 ) == 0 )
 800a852:	469c      	mov	ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a854:	5b33      	ldrh	r3, [r6, r4]
 800a856:	9302      	str	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800a858:	b203      	sxth	r3, r0
 800a85a:	9303      	str	r3, [sp, #12]
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800a85c:	0003      	movs	r3, r0
 800a85e:	9804      	ldr	r0, [sp, #16]
 800a860:	4203      	tst	r3, r0
 800a862:	d018      	beq.n	800a896 <RegionUS915LinkAdrReq+0x1b2>
                    if( ( i % 2 ) == 0 )
 800a864:	4663      	mov	r3, ip
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <RegionUS915LinkAdrReq+0x19c>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a86a:	9b02      	ldr	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800a86c:	9803      	ldr	r0, [sp, #12]
                        channelsMask[cntChannelMask] |= 0x00FF;
 800a86e:	433b      	orrs	r3, r7
 800a870:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800a872:	8923      	ldrh	r3, [r4, #8]
 800a874:	4303      	orrs	r3, r0
 800a876:	8123      	strh	r3, [r4, #8]
            for( uint8_t i = 0; i <= 7; i++ )
 800a878:	3101      	adds	r1, #1
 800a87a:	2908      	cmp	r1, #8
 800a87c:	d1e4      	bne.n	800a848 <RegionUS915LinkAdrReq+0x164>
 800a87e:	e74d      	b.n	800a71c <RegionUS915LinkAdrReq+0x38>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800a880:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <RegionUS915LinkAdrReq+0x1f4>)
 800a882:	9802      	ldr	r0, [sp, #8]
 800a884:	4318      	orrs	r0, r3
 800a886:	5330      	strh	r0, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800a888:	8923      	ldrh	r3, [r4, #8]
 800a88a:	9803      	ldr	r0, [sp, #12]
 800a88c:	4303      	orrs	r3, r0
 800a88e:	8123      	strh	r3, [r4, #8]
                        cntChannelMask++;
 800a890:	3201      	adds	r2, #1
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	e7f0      	b.n	800a878 <RegionUS915LinkAdrReq+0x194>
                        channelsMask[4] &= ~( bitMask << i );
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	43d8      	mvns	r0, r3
                    if( ( i % 2 ) == 0 )
 800a89a:	4663      	mov	r3, ip
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d106      	bne.n	800a8ae <RegionUS915LinkAdrReq+0x1ca>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800a8a0:	9b02      	ldr	r3, [sp, #8]
 800a8a2:	43bb      	bics	r3, r7
 800a8a4:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800a8a6:	8923      	ldrh	r3, [r4, #8]
 800a8a8:	4018      	ands	r0, r3
 800a8aa:	8120      	strh	r0, [r4, #8]
 800a8ac:	e7e4      	b.n	800a878 <RegionUS915LinkAdrReq+0x194>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800a8ae:	9b02      	ldr	r3, [sp, #8]
 800a8b0:	403b      	ands	r3, r7
 800a8b2:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800a8b4:	8923      	ldrh	r3, [r4, #8]
 800a8b6:	4018      	ands	r0, r3
 800a8b8:	8120      	strh	r0, [r4, #8]
 800a8ba:	e7e9      	b.n	800a890 <RegionUS915LinkAdrReq+0x1ac>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800a8bc:	0052      	lsls	r2, r2, #1
 800a8be:	5313      	strh	r3, [r2, r4]
 800a8c0:	e72c      	b.n	800a71c <RegionUS915LinkAdrReq+0x38>
 800a8c2:	46c0      	nop			; (mov r8, r8)
 800a8c4:	200012a4 	.word	0x200012a4
 800a8c8:	200012a0 	.word	0x200012a0
 800a8cc:	00000362 	.word	0x00000362
 800a8d0:	00000366 	.word	0x00000366
 800a8d4:	0000036a 	.word	0x0000036a
 800a8d8:	ffffff00 	.word	0xffffff00

0800a8dc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800a8e0:	6840      	ldr	r0, [r0, #4]
 800a8e2:	f7ff fc0b 	bl	800a0fc <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800a8e6:	1e43      	subs	r3, r0, #1
 800a8e8:	4198      	sbcs	r0, r3
 800a8ea:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	220d      	movs	r2, #13
 800a8f0:	2108      	movs	r1, #8
 800a8f2:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800a8f4:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800a8f6:	f7fe fb8b 	bl	8009010 <RegionCommonValueInRange>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d101      	bne.n	800a902 <RegionUS915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800a8fe:	2302      	movs	r3, #2
 800a900:	439c      	bics	r4, r3
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800a902:	2000      	movs	r0, #0
 800a904:	2207      	movs	r2, #7
 800a906:	2105      	movs	r1, #5
 800a908:	5628      	ldrsb	r0, [r5, r0]
 800a90a:	f7fe fb81 	bl	8009010 <RegionCommonValueInRange>
 800a90e:	2801      	cmp	r0, #1
 800a910:	d003      	beq.n	800a91a <RegionUS915RxParamSetupReq+0x3e>
 800a912:	2300      	movs	r3, #0
 800a914:	56eb      	ldrsb	r3, [r5, r3]
 800a916:	2b0d      	cmp	r3, #13
 800a918:	dd01      	ble.n	800a91e <RegionUS915RxParamSetupReq+0x42>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800a91a:	2302      	movs	r3, #2
 800a91c:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800a91e:	2001      	movs	r0, #1
 800a920:	2203      	movs	r2, #3
 800a922:	2100      	movs	r1, #0
 800a924:	5628      	ldrsb	r0, [r5, r0]
 800a926:	f7fe fb73 	bl	8009010 <RegionCommonValueInRange>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d101      	bne.n	800a932 <RegionUS915RxParamSetupReq+0x56>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800a92e:	2304      	movs	r3, #4
 800a930:	439c      	bics	r4, r3
    }

    return status;
}
 800a932:	0020      	movs	r0, r4
 800a934:	bd70      	pop	{r4, r5, r6, pc}

0800a936 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
 800a936:	2001      	movs	r0, #1
}
 800a938:	4240      	negs	r0, r0
 800a93a:	4770      	bx	lr

0800a93c <RegionUS915TxParamSetupReq>:
 800a93c:	2001      	movs	r0, #1
 800a93e:	4240      	negs	r0, r0
 800a940:	4770      	bx	lr

0800a942 <RegionUS915DlChannelReq>:
 800a942:	2001      	movs	r0, #1
 800a944:	4240      	negs	r0, r0
 800a946:	4770      	bx	lr

0800a948 <RegionUS915AlternateDr>:
{
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800a948:	4b08      	ldr	r3, [pc, #32]	; (800a96c <RegionUS915AlternateDr+0x24>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	7b53      	ldrb	r3, [r2, #13]
    if( type == ALTERNATE_DR )
 800a94e:	2900      	cmp	r1, #0
 800a950:	d10a      	bne.n	800a968 <RegionUS915AlternateDr+0x20>
        RegionNvmGroup1->JoinTrialsCounter++;
 800a952:	3301      	adds	r3, #1
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 800a954:	7353      	strb	r3, [r2, #13]
 800a956:	2339      	movs	r3, #57	; 0x39
 800a958:	7b52      	ldrb	r2, [r2, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 800a95a:	2004      	movs	r0, #4
        RegionNvmGroup1->JoinTrialsCounter--;
 800a95c:	4353      	muls	r3, r2
    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b1c      	cmp	r3, #28
 800a962:	d900      	bls.n	800a966 <RegionUS915AlternateDr+0x1e>
    }
    else
    {
        currentDr = DR_0;
 800a964:	2000      	movs	r0, #0
    }
    return currentDr;
}
 800a966:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800a968:	3b01      	subs	r3, #1
 800a96a:	e7f3      	b.n	800a954 <RegionUS915AlternateDr+0xc>
 800a96c:	200012a0 	.word	0x200012a0

0800a970 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a972:	b0a7      	sub	sp, #156	; 0x9c
 800a974:	9303      	str	r3, [sp, #12]
    uint8_t nbEnabledChannels = 0;
 800a976:	230e      	movs	r3, #14
 800a978:	2600      	movs	r6, #0
{
 800a97a:	9202      	str	r2, [sp, #8]
    uint8_t nbEnabledChannels = 0;
 800a97c:	aa02      	add	r2, sp, #8
 800a97e:	189b      	adds	r3, r3, r2
 800a980:	701e      	strb	r6, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800a982:	230f      	movs	r3, #15
{
 800a984:	0004      	movs	r4, r0
    uint8_t nbRestrictedChannels = 0;
 800a986:	189b      	adds	r3, r3, r2
{
 800a988:	000d      	movs	r5, r1
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800a98a:	2244      	movs	r2, #68	; 0x44
 800a98c:	0031      	movs	r1, r6
 800a98e:	a815      	add	r0, sp, #84	; 0x54
    uint8_t nbRestrictedChannels = 0;
 800a990:	701e      	strb	r6, [r3, #0]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800a992:	9614      	str	r6, [sp, #80]	; 0x50
 800a994:	f00b fb33 	bl	8015ffe <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800a998:	4f41      	ldr	r7, [pc, #260]	; (800aaa0 <RegionUS915NextChannel+0x130>)
 800a99a:	0031      	movs	r1, r6
 800a99c:	2204      	movs	r2, #4
 800a99e:	6838      	ldr	r0, [r7, #0]
 800a9a0:	f7fe fb54 	bl	800904c <RegionCommonCountChannels>
 800a9a4:	1e06      	subs	r6, r0, #0
 800a9a6:	d10a      	bne.n	800a9be <RegionUS915NextChannel+0x4e>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800a9a8:	4b3e      	ldr	r3, [pc, #248]	; (800aaa4 <RegionUS915NextChannel+0x134>)
 800a9aa:	2204      	movs	r2, #4
 800a9ac:	6819      	ldr	r1, [r3, #0]
 800a9ae:	23d8      	movs	r3, #216	; 0xd8
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	18c9      	adds	r1, r1, r3
 800a9b4:	6838      	ldr	r0, [r7, #0]
 800a9b6:	f7fe fb68 	bl	800908a <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	731e      	strb	r6, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800a9be:	2008      	movs	r0, #8
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800a9c0:	4b37      	ldr	r3, [pc, #220]	; (800aaa0 <RegionUS915NextChannel+0x130>)
    if( nextChanParams->Datarate >= DR_4 )
 800a9c2:	5620      	ldrsb	r0, [r4, r0]
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800a9c4:	681a      	ldr	r2, [r3, #0]
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800a9c6:	4b37      	ldr	r3, [pc, #220]	; (800aaa4 <RegionUS915NextChannel+0x134>)
 800a9c8:	6819      	ldr	r1, [r3, #0]
    if( nextChanParams->Datarate >= DR_4 )
 800a9ca:	2803      	cmp	r0, #3
 800a9cc:	dd06      	ble.n	800a9dc <RegionUS915NextChannel+0x6c>
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800a9ce:	7a13      	ldrb	r3, [r2, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d103      	bne.n	800a9dc <RegionUS915NextChannel+0x6c>
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800a9d4:	23da      	movs	r3, #218	; 0xda
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	5acb      	ldrh	r3, [r1, r3]
 800a9da:	8113      	strh	r3, [r2, #8]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800a9dc:	9207      	str	r2, [sp, #28]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionBands;
 800a9de:	4a32      	ldr	r2, [pc, #200]	; (800aaa8 <RegionUS915NextChannel+0x138>)
    countChannelsParams.Joined = nextChanParams->Joined;
 800a9e0:	ab06      	add	r3, sp, #24
    countChannelsParams.Bands = RegionBands;
 800a9e2:	6812      	ldr	r2, [r2, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
 800a9e4:	7a66      	ldrb	r6, [r4, #9]
    countChannelsParams.Bands = RegionBands;
 800a9e6:	9209      	str	r2, [sp, #36]	; 0x24
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800a9e8:	2248      	movs	r2, #72	; 0x48
 800a9ea:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = NULL;
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	920b      	str	r2, [sp, #44]	; 0x2c

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a9f0:	6822      	ldr	r2, [r4, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
 800a9f2:	701e      	strb	r6, [r3, #0]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a9f4:	920c      	str	r2, [sp, #48]	; 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a9f6:	6862      	ldr	r2, [r4, #4]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800a9f8:	7058      	strb	r0, [r3, #1]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a9fa:	920d      	str	r2, [sp, #52]	; 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800a9fc:	7aa2      	ldrb	r2, [r4, #10]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a9fe:	ae0c      	add	r6, sp, #48	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800aa00:	7232      	strb	r2, [r6, #8]
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800aa02:	2201      	movs	r2, #1
 800aa04:	7272      	strb	r2, [r6, #9]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800aa06:	0022      	movs	r2, r4
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800aa08:	9108      	str	r1, [sp, #32]
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800aa0a:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800aa0c:	320c      	adds	r2, #12
 800aa0e:	ab0f      	add	r3, sp, #60	; 0x3c
 800aa10:	ca82      	ldmia	r2!, {r1, r7}
 800aa12:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800aa14:	7d23      	ldrb	r3, [r4, #20]
 800aa16:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800aa18:	8ae1      	ldrh	r1, [r4, #22]
 800aa1a:	f7ff fb51 	bl	800a0c0 <GetTimeOnAir>

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800aa1e:	9b02      	ldr	r3, [sp, #8]
 800aa20:	aa02      	add	r2, sp, #8
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	230f      	movs	r3, #15
 800aa26:	189b      	adds	r3, r3, r2
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	230e      	movs	r3, #14
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800aa2c:	9012      	str	r0, [sp, #72]	; 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800aa2e:	189b      	adds	r3, r3, r2
 800aa30:	0030      	movs	r0, r6
 800aa32:	9903      	ldr	r1, [sp, #12]
 800aa34:	aa14      	add	r2, sp, #80	; 0x50
 800aa36:	f7fe fd8d 	bl	8009554 <RegionCommonIdentifyChannels>
 800aa3a:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800aa3c:	d112      	bne.n	800aa64 <RegionUS915NextChannel+0xf4>
    {
        if( nextChanParams->Joined == true )
 800aa3e:	7a63      	ldrb	r3, [r4, #9]
 800aa40:	4f17      	ldr	r7, [pc, #92]	; (800aaa0 <RegionUS915NextChannel+0x130>)
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d011      	beq.n	800aa6a <RegionUS915NextChannel+0xfa>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800aa46:	ab02      	add	r3, sp, #8
 800aa48:	7b99      	ldrb	r1, [r3, #14]
 800aa4a:	3901      	subs	r1, #1
 800aa4c:	f7f9 ff76 	bl	800493c <randr>
 800aa50:	2248      	movs	r2, #72	; 0x48
 800aa52:	ab02      	add	r3, sp, #8
 800aa54:	189b      	adds	r3, r3, r2
 800aa56:	5c1b      	ldrb	r3, [r3, r0]
                uint8_t i = 0;
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 800aa58:	702b      	strb	r3, [r5, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800aa5a:	2248      	movs	r2, #72	; 0x48
 800aa5c:	7829      	ldrb	r1, [r5, #0]
 800aa5e:	6838      	ldr	r0, [r7, #0]
 800aa60:	f7fe fae0 	bl	8009024 <RegionCommonChanDisable>
    }
    return status;
}
 800aa64:	0030      	movs	r0, r6
 800aa66:	b027      	add	sp, #156	; 0x9c
 800aa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( nextChanParams->Datarate == DR_0 )
 800aa6a:	2308      	movs	r3, #8
 800aa6c:	56e3      	ldrsb	r3, [r4, r3]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800aa6e:	6838      	ldr	r0, [r7, #0]
            if( nextChanParams->Datarate == DR_0 )
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d008      	beq.n	800aa86 <RegionUS915NextChannel+0x116>
                uint8_t i = 0;
 800aa74:	0033      	movs	r3, r6
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800aa76:	7a01      	ldrb	r1, [r0, #8]
 800aa78:	000a      	movs	r2, r1
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	411a      	asrs	r2, r3
 800aa7e:	4202      	tst	r2, r0
 800aa80:	d00a      	beq.n	800aa98 <RegionUS915NextChannel+0x128>
                *channel = 64 + i;
 800aa82:	3340      	adds	r3, #64	; 0x40
 800aa84:	e7e8      	b.n	800aa58 <RegionUS915NextChannel+0xe8>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800aa86:	0001      	movs	r1, r0
 800aa88:	002a      	movs	r2, r5
 800aa8a:	310c      	adds	r1, #12
 800aa8c:	f7fe fa42 	bl	8008f14 <RegionBaseUSComputeNext125kHzJoinChannel>
 800aa90:	2803      	cmp	r0, #3
 800aa92:	d1e2      	bne.n	800aa5a <RegionUS915NextChannel+0xea>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa94:	0006      	movs	r6, r0
 800aa96:	e7e5      	b.n	800aa64 <RegionUS915NextChannel+0xf4>
                    i++;
 800aa98:	3301      	adds	r3, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	e7ec      	b.n	800aa78 <RegionUS915NextChannel+0x108>
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	200012a0 	.word	0x200012a0
 800aaa4:	200012a4 	.word	0x200012a4
 800aaa8:	2000129c 	.word	0x2000129c

0800aaac <RegionUS915ApplyDrOffset>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800aaac:	008b      	lsls	r3, r1, #2
 800aaae:	4904      	ldr	r1, [pc, #16]	; (800aac0 <RegionUS915ApplyDrOffset+0x14>)
 800aab0:	18c9      	adds	r1, r1, r3
 800aab2:	568b      	ldrsb	r3, [r1, r2]

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800aab4:	1c18      	adds	r0, r3, #0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da00      	bge.n	800aabc <RegionUS915ApplyDrOffset+0x10>
 800aaba:	2000      	movs	r0, #0
 800aabc:	b2c0      	uxtb	r0, r0
}
 800aabe:	4770      	bx	lr
 800aac0:	080194dc 	.word	0x080194dc

0800aac4 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aac4:	780a      	ldrb	r2, [r1, #0]
 800aac6:	7803      	ldrb	r3, [r0, #0]
 800aac8:	4053      	eors	r3, r2
 800aaca:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800aacc:	784a      	ldrb	r2, [r1, #1]
 800aace:	7843      	ldrb	r3, [r0, #1]
 800aad0:	4053      	eors	r3, r2
 800aad2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800aad4:	788a      	ldrb	r2, [r1, #2]
 800aad6:	7883      	ldrb	r3, [r0, #2]
 800aad8:	4053      	eors	r3, r2
 800aada:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800aadc:	78ca      	ldrb	r2, [r1, #3]
 800aade:	78c3      	ldrb	r3, [r0, #3]
 800aae0:	4053      	eors	r3, r2
 800aae2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aae4:	790a      	ldrb	r2, [r1, #4]
 800aae6:	7903      	ldrb	r3, [r0, #4]
 800aae8:	4053      	eors	r3, r2
 800aaea:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800aaec:	794a      	ldrb	r2, [r1, #5]
 800aaee:	7943      	ldrb	r3, [r0, #5]
 800aaf0:	4053      	eors	r3, r2
 800aaf2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800aaf4:	798a      	ldrb	r2, [r1, #6]
 800aaf6:	7983      	ldrb	r3, [r0, #6]
 800aaf8:	4053      	eors	r3, r2
 800aafa:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800aafc:	79ca      	ldrb	r2, [r1, #7]
 800aafe:	79c3      	ldrb	r3, [r0, #7]
 800ab00:	4053      	eors	r3, r2
 800ab02:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ab04:	7a0a      	ldrb	r2, [r1, #8]
 800ab06:	7a03      	ldrb	r3, [r0, #8]
 800ab08:	4053      	eors	r3, r2
 800ab0a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ab0c:	7a4a      	ldrb	r2, [r1, #9]
 800ab0e:	7a43      	ldrb	r3, [r0, #9]
 800ab10:	4053      	eors	r3, r2
 800ab12:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ab14:	7a8a      	ldrb	r2, [r1, #10]
 800ab16:	7a83      	ldrb	r3, [r0, #10]
 800ab18:	4053      	eors	r3, r2
 800ab1a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ab1c:	7aca      	ldrb	r2, [r1, #11]
 800ab1e:	7ac3      	ldrb	r3, [r0, #11]
 800ab20:	4053      	eors	r3, r2
 800ab22:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ab24:	7b0a      	ldrb	r2, [r1, #12]
 800ab26:	7b03      	ldrb	r3, [r0, #12]
 800ab28:	4053      	eors	r3, r2
 800ab2a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ab2c:	7b4a      	ldrb	r2, [r1, #13]
 800ab2e:	7b43      	ldrb	r3, [r0, #13]
 800ab30:	4053      	eors	r3, r2
 800ab32:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ab34:	7b8a      	ldrb	r2, [r1, #14]
 800ab36:	7b83      	ldrb	r3, [r0, #14]
 800ab38:	4053      	eors	r3, r2
 800ab3a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ab3c:	7bca      	ldrb	r2, [r1, #15]
 800ab3e:	7bc3      	ldrb	r3, [r0, #15]
 800ab40:	4053      	eors	r3, r2
 800ab42:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ab44:	4770      	bx	lr

0800ab46 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ab46:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ab48:	780b      	ldrb	r3, [r1, #0]
 800ab4a:	7814      	ldrb	r4, [r2, #0]
 800ab4c:	4063      	eors	r3, r4
 800ab4e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ab50:	7854      	ldrb	r4, [r2, #1]
 800ab52:	784b      	ldrb	r3, [r1, #1]
 800ab54:	4063      	eors	r3, r4
 800ab56:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ab58:	7894      	ldrb	r4, [r2, #2]
 800ab5a:	788b      	ldrb	r3, [r1, #2]
 800ab5c:	4063      	eors	r3, r4
 800ab5e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ab60:	78d4      	ldrb	r4, [r2, #3]
 800ab62:	78cb      	ldrb	r3, [r1, #3]
 800ab64:	4063      	eors	r3, r4
 800ab66:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ab68:	7914      	ldrb	r4, [r2, #4]
 800ab6a:	790b      	ldrb	r3, [r1, #4]
 800ab6c:	4063      	eors	r3, r4
 800ab6e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ab70:	7954      	ldrb	r4, [r2, #5]
 800ab72:	794b      	ldrb	r3, [r1, #5]
 800ab74:	4063      	eors	r3, r4
 800ab76:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ab78:	7994      	ldrb	r4, [r2, #6]
 800ab7a:	798b      	ldrb	r3, [r1, #6]
 800ab7c:	4063      	eors	r3, r4
 800ab7e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ab80:	79d4      	ldrb	r4, [r2, #7]
 800ab82:	79cb      	ldrb	r3, [r1, #7]
 800ab84:	4063      	eors	r3, r4
 800ab86:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ab88:	7a14      	ldrb	r4, [r2, #8]
 800ab8a:	7a0b      	ldrb	r3, [r1, #8]
 800ab8c:	4063      	eors	r3, r4
 800ab8e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ab90:	7a4b      	ldrb	r3, [r1, #9]
 800ab92:	7a54      	ldrb	r4, [r2, #9]
 800ab94:	4063      	eors	r3, r4
 800ab96:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ab98:	7a8b      	ldrb	r3, [r1, #10]
 800ab9a:	7a94      	ldrb	r4, [r2, #10]
 800ab9c:	4063      	eors	r3, r4
 800ab9e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800aba0:	7ad4      	ldrb	r4, [r2, #11]
 800aba2:	7acb      	ldrb	r3, [r1, #11]
 800aba4:	4063      	eors	r3, r4
 800aba6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800aba8:	7b14      	ldrb	r4, [r2, #12]
 800abaa:	7b0b      	ldrb	r3, [r1, #12]
 800abac:	4063      	eors	r3, r4
 800abae:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800abb0:	7b54      	ldrb	r4, [r2, #13]
 800abb2:	7b4b      	ldrb	r3, [r1, #13]
 800abb4:	4063      	eors	r3, r4
 800abb6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800abb8:	7b94      	ldrb	r4, [r2, #14]
 800abba:	7b8b      	ldrb	r3, [r1, #14]
 800abbc:	4063      	eors	r3, r4
 800abbe:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800abc0:	7bcb      	ldrb	r3, [r1, #15]
 800abc2:	7bd2      	ldrb	r2, [r2, #15]
 800abc4:	4053      	eors	r3, r2
 800abc6:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800abc8:	bd10      	pop	{r4, pc}
	...

0800abcc <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 800abcc:	000b      	movs	r3, r1
{
 800abce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd0:	3b10      	subs	r3, #16
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	000f      	movs	r7, r1
 800abd6:	0014      	movs	r4, r2
 800abd8:	b087      	sub	sp, #28
 800abda:	2b10      	cmp	r3, #16
 800abdc:	d805      	bhi.n	800abea <aes_set_key+0x1e>
 800abde:	2201      	movs	r2, #1
 800abe0:	409a      	lsls	r2, r3
 800abe2:	0013      	movs	r3, r2
 800abe4:	4a3b      	ldr	r2, [pc, #236]	; (800acd4 <aes_set_key+0x108>)
 800abe6:	4213      	tst	r3, r2
 800abe8:	d105      	bne.n	800abf6 <aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800abea:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 800abec:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 800abee:	34f0      	adds	r4, #240	; 0xf0
 800abf0:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800abf2:	b007      	add	sp, #28
 800abf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 800abf6:	2300      	movs	r3, #0
 800abf8:	429f      	cmp	r7, r3
 800abfa:	d155      	bne.n	800aca8 <aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 800abfc:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 800abfe:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 800ac00:	331c      	adds	r3, #28
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 800ac08:	091b      	lsrs	r3, r3, #4
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	32f0      	adds	r2, #240	; 0xf0
 800ac0e:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ac10:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 800ac12:	003d      	movs	r5, r7
            t0 = s_box(t0);
 800ac14:	4e30      	ldr	r6, [pc, #192]	; (800acd8 <aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ac16:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800ac18:	1963      	adds	r3, r4, r5
 800ac1a:	1f1a      	subs	r2, r3, #4
 800ac1c:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800ac1e:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 800ac20:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 800ac22:	1eda      	subs	r2, r3, #3
 800ac24:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800ac26:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 800ac28:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 800ac2a:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800ac2c:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800ac2e:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 800ac30:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800ac32:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 800ac34:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 800ac36:	f7f5 fb1d 	bl	8000274 <__aeabi_uidivmod>
 800ac3a:	b2c9      	uxtb	r1, r1
 800ac3c:	2900      	cmp	r1, #0
 800ac3e:	d137      	bne.n	800acb0 <aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 800ac40:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 800ac42:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 800ac44:	5cf2      	ldrb	r2, [r6, r3]
 800ac46:	9b04      	ldr	r3, [sp, #16]
 800ac48:	405a      	eors	r2, r3
            t1 = s_box(t2);
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	5cf3      	ldrb	r3, [r6, r3]
 800ac4e:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	5cf3      	ldrb	r3, [r6, r3]
 800ac54:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 800ac56:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 800ac58:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 800ac5a:	5cf3      	ldrb	r3, [r6, r3]
 800ac5c:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	09db      	lsrs	r3, r3, #7
 800ac62:	434b      	muls	r3, r1
 800ac64:	9904      	ldr	r1, [sp, #16]
 800ac66:	0049      	lsls	r1, r1, #1
 800ac68:	404b      	eors	r3, r1
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ac6e:	1beb      	subs	r3, r5, r7
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	5ce2      	ldrb	r2, [r4, r3]
 800ac74:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ac76:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ac78:	4051      	eors	r1, r2
 800ac7a:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ac7c:	785a      	ldrb	r2, [r3, #1]
 800ac7e:	9801      	ldr	r0, [sp, #4]
 800ac80:	1c69      	adds	r1, r5, #1
 800ac82:	4050      	eors	r0, r2
 800ac84:	b2c9      	uxtb	r1, r1
 800ac86:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ac88:	789a      	ldrb	r2, [r3, #2]
 800ac8a:	9802      	ldr	r0, [sp, #8]
 800ac8c:	1961      	adds	r1, r4, r5
 800ac8e:	4050      	eors	r0, r2
 800ac90:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ac92:	78db      	ldrb	r3, [r3, #3]
 800ac94:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ac96:	3504      	adds	r5, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ac98:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ac9a:	9b05      	ldr	r3, [sp, #20]
 800ac9c:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ac9e:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800aca0:	42ab      	cmp	r3, r5
 800aca2:	d8b9      	bhi.n	800ac18 <aes_set_key+0x4c>
    return 0;
 800aca4:	2000      	movs	r0, #0
 800aca6:	e7a4      	b.n	800abf2 <aes_set_key+0x26>
        *d++ = *s++;
 800aca8:	5cc2      	ldrb	r2, [r0, r3]
 800acaa:	54e2      	strb	r2, [r4, r3]
 800acac:	3301      	adds	r3, #1
 800acae:	e7a3      	b.n	800abf8 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 800acb0:	2f18      	cmp	r7, #24
 800acb2:	d9dc      	bls.n	800ac6e <aes_set_key+0xa2>
 800acb4:	2910      	cmp	r1, #16
 800acb6:	d1da      	bne.n	800ac6e <aes_set_key+0xa2>
            t0 = s_box(t0);
 800acb8:	9b00      	ldr	r3, [sp, #0]
 800acba:	5cf3      	ldrb	r3, [r6, r3]
 800acbc:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 800acbe:	9b01      	ldr	r3, [sp, #4]
 800acc0:	5cf3      	ldrb	r3, [r6, r3]
 800acc2:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 800acc4:	9b02      	ldr	r3, [sp, #8]
 800acc6:	5cf3      	ldrb	r3, [r6, r3]
 800acc8:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	5cf3      	ldrb	r3, [r6, r3]
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	e7cd      	b.n	800ac6e <aes_set_key+0xa2>
 800acd2:	46c0      	nop			; (mov r8, r8)
 800acd4:	00010101 	.word	0x00010101
 800acd8:	08019710 	.word	0x08019710

0800acdc <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acde:	b099      	sub	sp, #100	; 0x64
 800ace0:	9210      	str	r2, [sp, #64]	; 0x40
 800ace2:	9113      	str	r1, [sp, #76]	; 0x4c
    if( ctx->rnd )
 800ace4:	32f0      	adds	r2, #240	; 0xf0
 800ace6:	7812      	ldrb	r2, [r2, #0]
{
 800ace8:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 800acea:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 800acec:	2a00      	cmp	r2, #0
 800acee:	d072      	beq.n	800add6 <aes_encrypt+0xfa>
        copy_and_key( s1, in, ctx->ksch );
 800acf0:	0019      	movs	r1, r3
 800acf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acf4:	a814      	add	r0, sp, #80	; 0x50
 800acf6:	f7ff ff26 	bl	800ab46 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800acfa:	2301      	movs	r3, #1
 800acfc:	9301      	str	r3, [sp, #4]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	011a      	lsls	r2, r3, #4
 800ad02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad04:	189b      	adds	r3, r3, r2
 800ad06:	9312      	str	r3, [sp, #72]	; 0x48
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ad08:	ab14      	add	r3, sp, #80	; 0x50
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ad0e:	ab14      	add	r3, sp, #80	; 0x50
 800ad10:	785b      	ldrb	r3, [r3, #1]
 800ad12:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ad14:	ab14      	add	r3, sp, #80	; 0x50
 800ad16:	789b      	ldrb	r3, [r3, #2]
 800ad18:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ad1a:	ab14      	add	r3, sp, #80	; 0x50
 800ad1c:	78db      	ldrb	r3, [r3, #3]
 800ad1e:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ad20:	ab14      	add	r3, sp, #80	; 0x50
 800ad22:	791b      	ldrb	r3, [r3, #4]
 800ad24:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ad26:	ab14      	add	r3, sp, #80	; 0x50
 800ad28:	795c      	ldrb	r4, [r3, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ad2a:	799b      	ldrb	r3, [r3, #6]
 800ad2c:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ad2e:	ab14      	add	r3, sp, #80	; 0x50
 800ad30:	79db      	ldrb	r3, [r3, #7]
 800ad32:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ad34:	ab14      	add	r3, sp, #80	; 0x50
 800ad36:	7a1b      	ldrb	r3, [r3, #8]
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ad3a:	ab14      	add	r3, sp, #80	; 0x50
 800ad3c:	7a5b      	ldrb	r3, [r3, #9]
 800ad3e:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ad40:	ab14      	add	r3, sp, #80	; 0x50
 800ad42:	7a9f      	ldrb	r7, [r3, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ad44:	7adb      	ldrb	r3, [r3, #11]
 800ad46:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ad48:	ab14      	add	r3, sp, #80	; 0x50
 800ad4a:	7b1b      	ldrb	r3, [r3, #12]
 800ad4c:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ad4e:	ab14      	add	r3, sp, #80	; 0x50
 800ad50:	7b5b      	ldrb	r3, [r3, #13]
 800ad52:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ad54:	ab14      	add	r3, sp, #80	; 0x50
 800ad56:	7b9b      	ldrb	r3, [r3, #14]
 800ad58:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ad5a:	ab14      	add	r3, sp, #80	; 0x50
 800ad5c:	7bdb      	ldrb	r3, [r3, #15]
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ad5e:	9901      	ldr	r1, [sp, #4]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ad60:	930f      	str	r3, [sp, #60]	; 0x3c
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ad62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad64:	33f0      	adds	r3, #240	; 0xf0
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	4b74      	ldr	r3, [pc, #464]	; (800af3c <aes_encrypt+0x260>)
 800ad6a:	428a      	cmp	r2, r1
 800ad6c:	d835      	bhi.n	800adda <aes_encrypt+0xfe>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ad6e:	9a02      	ldr	r2, [sp, #8]
 800ad70:	a914      	add	r1, sp, #80	; 0x50
 800ad72:	5c9a      	ldrb	r2, [r3, r2]
 800ad74:	700a      	strb	r2, [r1, #0]
 800ad76:	9a06      	ldr	r2, [sp, #24]
 800ad78:	5c9a      	ldrb	r2, [r3, r2]
 800ad7a:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ad7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad7e:	5c9a      	ldrb	r2, [r3, r2]
 800ad80:	720a      	strb	r2, [r1, #8]
 800ad82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad84:	5c9a      	ldrb	r2, [r3, r2]
 800ad86:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ad88:	5d1a      	ldrb	r2, [r3, r4]
 800ad8a:	704a      	strb	r2, [r1, #1]
 800ad8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8e:	5c9a      	ldrb	r2, [r3, r2]
 800ad90:	714a      	strb	r2, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ad92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad94:	5c9a      	ldrb	r2, [r3, r2]
 800ad96:	724a      	strb	r2, [r1, #9]
 800ad98:	9a03      	ldr	r2, [sp, #12]
 800ad9a:	5c9a      	ldrb	r2, [r3, r2]
 800ad9c:	734a      	strb	r2, [r1, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ad9e:	5dda      	ldrb	r2, [r3, r7]
 800ada0:	708a      	strb	r2, [r1, #2]
 800ada2:	9a04      	ldr	r2, [sp, #16]
 800ada4:	5c9a      	ldrb	r2, [r3, r2]
 800ada6:	728a      	strb	r2, [r1, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ada8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adaa:	5c9a      	ldrb	r2, [r3, r2]
 800adac:	718a      	strb	r2, [r1, #6]
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	5c9a      	ldrb	r2, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800adb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800adb4:	738a      	strb	r2, [r1, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800adb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adb8:	5c9a      	ldrb	r2, [r3, r2]
 800adba:	73ca      	strb	r2, [r1, #15]
 800adbc:	9a08      	ldr	r2, [sp, #32]
 800adbe:	5c9a      	ldrb	r2, [r3, r2]
 800adc0:	72ca      	strb	r2, [r1, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800adc2:	9a05      	ldr	r2, [sp, #20]
 800adc4:	5c9a      	ldrb	r2, [r3, r2]
 800adc6:	71ca      	strb	r2, [r1, #7]
 800adc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adca:	5c9b      	ldrb	r3, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800adcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800adce:	70cb      	strb	r3, [r1, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800add0:	f7ff feb9 	bl	800ab46 <copy_and_key>
    return 0;
 800add4:	2000      	movs	r0, #0
}
 800add6:	b019      	add	sp, #100	; 0x64
 800add8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800adda:	5dda      	ldrb	r2, [r3, r7]
 800addc:	4958      	ldr	r1, [pc, #352]	; (800af40 <aes_encrypt+0x264>)
 800adde:	9211      	str	r2, [sp, #68]	; 0x44
 800ade0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ade2:	9d02      	ldr	r5, [sp, #8]
 800ade4:	5c98      	ldrb	r0, [r3, r2]
 800ade6:	4a57      	ldr	r2, [pc, #348]	; (800af44 <aes_encrypt+0x268>)
 800ade8:	5d56      	ldrb	r6, [r2, r5]
 800adea:	5d0d      	ldrb	r5, [r1, r4]
 800adec:	406e      	eors	r6, r5
 800adee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800adf0:	406e      	eors	r6, r5
 800adf2:	4046      	eors	r6, r0
 800adf4:	ad14      	add	r5, sp, #80	; 0x50
 800adf6:	702e      	strb	r6, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800adf8:	9d02      	ldr	r5, [sp, #8]
 800adfa:	5d5e      	ldrb	r6, [r3, r5]
 800adfc:	5d15      	ldrb	r5, [r2, r4]
 800adfe:	4070      	eors	r0, r6
 800ae00:	4068      	eors	r0, r5
 800ae02:	5dcd      	ldrb	r5, [r1, r7]
 800ae04:	4068      	eors	r0, r5
 800ae06:	ad14      	add	r5, sp, #80	; 0x50
 800ae08:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ae0a:	5d18      	ldrb	r0, [r3, r4]
 800ae0c:	5dd4      	ldrb	r4, [r2, r7]
 800ae0e:	4046      	eors	r6, r0
 800ae10:	4066      	eors	r6, r4
 800ae12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ae14:	5d0c      	ldrb	r4, [r1, r4]
 800ae16:	4066      	eors	r6, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ae18:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ae1a:	70ae      	strb	r6, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ae1c:	4060      	eors	r0, r4
 800ae1e:	9c02      	ldr	r4, [sp, #8]
 800ae20:	5d0f      	ldrb	r7, [r1, r4]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ae22:	9c06      	ldr	r4, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ae24:	4047      	eors	r7, r0
 800ae26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ae28:	5c10      	ldrb	r0, [r2, r0]
 800ae2a:	4078      	eors	r0, r7
 800ae2c:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ae2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ae30:	5c1d      	ldrb	r5, [r3, r0]
 800ae32:	9805      	ldr	r0, [sp, #20]
 800ae34:	5c18      	ldrb	r0, [r3, r0]
 800ae36:	5d14      	ldrb	r4, [r2, r4]
 800ae38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ae3a:	5d8e      	ldrb	r6, [r1, r6]
 800ae3c:	4074      	eors	r4, r6
 800ae3e:	406c      	eors	r4, r5
 800ae40:	4044      	eors	r4, r0
 800ae42:	ae14      	add	r6, sp, #80	; 0x50
 800ae44:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ae46:	9c06      	ldr	r4, [sp, #24]
 800ae48:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ae4a:	5d1c      	ldrb	r4, [r3, r4]
 800ae4c:	5d96      	ldrb	r6, [r2, r6]
 800ae4e:	4060      	eors	r0, r4
 800ae50:	4070      	eors	r0, r6
 800ae52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ae54:	5d8e      	ldrb	r6, [r1, r6]
 800ae56:	4070      	eors	r0, r6
 800ae58:	ae14      	add	r6, sp, #80	; 0x50
 800ae5a:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ae5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ae60:	5c18      	ldrb	r0, [r3, r0]
 800ae62:	5d96      	ldrb	r6, [r2, r6]
 800ae64:	4044      	eors	r4, r0
 800ae66:	4074      	eors	r4, r6
 800ae68:	9e05      	ldr	r6, [sp, #20]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ae6a:	4068      	eors	r0, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ae6c:	5d8e      	ldrb	r6, [r1, r6]
 800ae6e:	4074      	eors	r4, r6
 800ae70:	ae14      	add	r6, sp, #80	; 0x50
 800ae72:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ae74:	9c06      	ldr	r4, [sp, #24]
 800ae76:	5d0d      	ldrb	r5, [r1, r4]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ae78:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ae7a:	4045      	eors	r5, r0
 800ae7c:	9805      	ldr	r0, [sp, #20]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ae7e:	5d14      	ldrb	r4, [r2, r4]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ae80:	5c10      	ldrb	r0, [r2, r0]
 800ae82:	4068      	eors	r0, r5
 800ae84:	71f0      	strb	r0, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ae86:	9804      	ldr	r0, [sp, #16]
 800ae88:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ae8a:	5c1d      	ldrb	r5, [r3, r0]
 800ae8c:	5d8e      	ldrb	r6, [r1, r6]
 800ae8e:	9808      	ldr	r0, [sp, #32]
 800ae90:	4074      	eors	r4, r6
 800ae92:	5c18      	ldrb	r0, [r3, r0]
 800ae94:	406c      	eors	r4, r5
 800ae96:	4044      	eors	r4, r0
 800ae98:	ae14      	add	r6, sp, #80	; 0x50
 800ae9a:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ae9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ae9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800aea0:	5d1c      	ldrb	r4, [r3, r4]
 800aea2:	5d96      	ldrb	r6, [r2, r6]
 800aea4:	4060      	eors	r0, r4
 800aea6:	4070      	eors	r0, r6
 800aea8:	9e04      	ldr	r6, [sp, #16]
 800aeaa:	5d8e      	ldrb	r6, [r1, r6]
 800aeac:	4070      	eors	r0, r6
 800aeae:	ae14      	add	r6, sp, #80	; 0x50
 800aeb0:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800aeb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aeb4:	9e04      	ldr	r6, [sp, #16]
 800aeb6:	5c18      	ldrb	r0, [r3, r0]
 800aeb8:	5d96      	ldrb	r6, [r2, r6]
 800aeba:	4044      	eors	r4, r0
 800aebc:	4074      	eors	r4, r6
 800aebe:	9e08      	ldr	r6, [sp, #32]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800aec0:	4068      	eors	r0, r5
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800aec2:	5d8e      	ldrb	r6, [r1, r6]
 800aec4:	4074      	eors	r4, r6
 800aec6:	ae14      	add	r6, sp, #80	; 0x50
 800aec8:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800aeca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aecc:	5d0d      	ldrb	r5, [r1, r4]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800aece:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800aed0:	4045      	eors	r5, r0
 800aed2:	9808      	ldr	r0, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800aed4:	5d14      	ldrb	r4, [r2, r4]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800aed6:	5c10      	ldrb	r0, [r2, r0]
 800aed8:	4068      	eors	r0, r5
 800aeda:	72f0      	strb	r0, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800aedc:	9807      	ldr	r0, [sp, #28]
 800aede:	9e03      	ldr	r6, [sp, #12]
 800aee0:	5c1d      	ldrb	r5, [r3, r0]
 800aee2:	5d8e      	ldrb	r6, [r1, r6]
 800aee4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aee6:	4074      	eors	r4, r6
 800aee8:	5c18      	ldrb	r0, [r3, r0]
 800aeea:	406c      	eors	r4, r5
 800aeec:	4044      	eors	r4, r0
 800aeee:	ae14      	add	r6, sp, #80	; 0x50
 800aef0:	7334      	strb	r4, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800aef2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800aef4:	9e03      	ldr	r6, [sp, #12]
 800aef6:	5d1c      	ldrb	r4, [r3, r4]
 800aef8:	5d96      	ldrb	r6, [r2, r6]
 800aefa:	4060      	eors	r0, r4
 800aefc:	4070      	eors	r0, r6
 800aefe:	9e07      	ldr	r6, [sp, #28]
 800af00:	5d8e      	ldrb	r6, [r1, r6]
 800af02:	4070      	eors	r0, r6
 800af04:	ae14      	add	r6, sp, #80	; 0x50
 800af06:	7370      	strb	r0, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800af08:	9803      	ldr	r0, [sp, #12]
 800af0a:	5c1b      	ldrb	r3, [r3, r0]
 800af0c:	9807      	ldr	r0, [sp, #28]
 800af0e:	405c      	eors	r4, r3
 800af10:	5c10      	ldrb	r0, [r2, r0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800af12:	406b      	eors	r3, r5
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800af14:	4044      	eors	r4, r0
 800af16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af18:	5c08      	ldrb	r0, [r1, r0]
 800af1a:	4044      	eors	r4, r0
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800af1c:	980c      	ldr	r0, [sp, #48]	; 0x30
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800af1e:	73b4      	strb	r4, [r6, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800af20:	5c0d      	ldrb	r5, [r1, r0]
 800af22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af24:	406b      	eors	r3, r5
 800af26:	5c55      	ldrb	r5, [r2, r1]
    xor_block(d, k);
 800af28:	0030      	movs	r0, r6
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800af2a:	406b      	eors	r3, r5
 800af2c:	73f3      	strb	r3, [r6, #15]
    xor_block(d, k);
 800af2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800af30:	f7ff fdc8 	bl	800aac4 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	e6df      	b.n	800acfc <aes_encrypt+0x20>
 800af3c:	08019710 	.word	0x08019710
 800af40:	08019610 	.word	0x08019610
 800af44:	08019510 	.word	0x08019510

0800af48 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800af48:	b510      	push	{r4, lr}
 800af4a:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800af4c:	2210      	movs	r2, #16
 800af4e:	2100      	movs	r1, #0
 800af50:	30f1      	adds	r0, #241	; 0xf1
 800af52:	f7f9 fd13 	bl	800497c <memset1>
    ctx->M_n = 0;
 800af56:	0023      	movs	r3, r4
 800af58:	2100      	movs	r1, #0
 800af5a:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800af5c:	22f0      	movs	r2, #240	; 0xf0
 800af5e:	0020      	movs	r0, r4
    ctx->M_n = 0;
 800af60:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800af62:	f7f9 fd0b 	bl	800497c <memset1>
}
 800af66:	bd10      	pop	{r4, pc}

0800af68 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800af68:	b510      	push	{r4, lr}
 800af6a:	0002      	movs	r2, r0
 800af6c:	0008      	movs	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800af6e:	2110      	movs	r1, #16
 800af70:	f7ff fe2c 	bl	800abcc <aes_set_key>
}
 800af74:	bd10      	pop	{r4, pc}

0800af76 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800af76:	0003      	movs	r3, r0
{
 800af78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7a:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 800af7c:	33fc      	adds	r3, #252	; 0xfc
 800af7e:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800af80:	1ca3      	adds	r3, r4, #2
{
 800af82:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800af84:	33ff      	adds	r3, #255	; 0xff
{
 800af86:	000e      	movs	r6, r1
 800af88:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800af8a:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d036      	beq.n	800affe <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 800af90:	2710      	movs	r7, #16
 800af92:	1a3f      	subs	r7, r7, r0
 800af94:	9700      	str	r7, [sp, #0]
 800af96:	4297      	cmp	r7, r2
 800af98:	d900      	bls.n	800af9c <AES_CMAC_Update+0x26>
 800af9a:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800af9c:	466b      	mov	r3, sp
 800af9e:	881a      	ldrh	r2, [r3, #0]
 800afa0:	1ca3      	adds	r3, r4, #2
 800afa2:	33ff      	adds	r3, #255	; 0xff
 800afa4:	0031      	movs	r1, r6
 800afa6:	1818      	adds	r0, r3, r0
 800afa8:	f7f9 fcd3 	bl	8004952 <memcpy1>
        ctx->M_n += mlen;
 800afac:	0022      	movs	r2, r4
 800afae:	32fc      	adds	r2, #252	; 0xfc
 800afb0:	6991      	ldr	r1, [r2, #24]
 800afb2:	9b00      	ldr	r3, [sp, #0]
 800afb4:	185b      	adds	r3, r3, r1
 800afb6:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 800afb8:	2b0f      	cmp	r3, #15
 800afba:	d929      	bls.n	800b010 <AES_CMAC_Update+0x9a>
 800afbc:	42af      	cmp	r7, r5
 800afbe:	d227      	bcs.n	800b010 <AES_CMAC_Update+0x9a>
 800afc0:	0023      	movs	r3, r4
 800afc2:	1ca1      	adds	r1, r4, #2
 800afc4:	33f1      	adds	r3, #241	; 0xf1
 800afc6:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 800afc8:	781a      	ldrb	r2, [r3, #0]
 800afca:	7c18      	ldrb	r0, [r3, #16]
 800afcc:	4042      	eors	r2, r0
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	3301      	adds	r3, #1
 800afd2:	428b      	cmp	r3, r1
 800afd4:	d1f8      	bne.n	800afc8 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800afd6:	0027      	movs	r7, r4
 800afd8:	37f1      	adds	r7, #241	; 0xf1
 800afda:	2210      	movs	r2, #16
 800afdc:	0039      	movs	r1, r7
 800afde:	a802      	add	r0, sp, #8
 800afe0:	f7f9 fcb7 	bl	8004952 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 800afe4:	a902      	add	r1, sp, #8
 800afe6:	0022      	movs	r2, r4
 800afe8:	0008      	movs	r0, r1
 800afea:	f7ff fe77 	bl	800acdc <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800afee:	2210      	movs	r2, #16
 800aff0:	0038      	movs	r0, r7
 800aff2:	a902      	add	r1, sp, #8
 800aff4:	f7f9 fcad 	bl	8004952 <memcpy1>

        data += mlen;
 800aff8:	9b00      	ldr	r3, [sp, #0]
 800affa:	18f6      	adds	r6, r6, r3
        len -= mlen;
 800affc:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 800affe:	2d10      	cmp	r5, #16
 800b000:	d808      	bhi.n	800b014 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b002:	0031      	movs	r1, r6
 800b004:	9801      	ldr	r0, [sp, #4]
 800b006:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 800b008:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 800b00a:	f7f9 fca2 	bl	8004952 <memcpy1>
    ctx->M_n = len;
 800b00e:	61a5      	str	r5, [r4, #24]
}
 800b010:	b007      	add	sp, #28
 800b012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b014:	0023      	movs	r3, r4
 800b016:	0032      	movs	r2, r6
 800b018:	1ca0      	adds	r0, r4, #2
 800b01a:	33f1      	adds	r3, #241	; 0xf1
 800b01c:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 800b01e:	7819      	ldrb	r1, [r3, #0]
 800b020:	7817      	ldrb	r7, [r2, #0]
 800b022:	3201      	adds	r2, #1
 800b024:	4079      	eors	r1, r7
 800b026:	7019      	strb	r1, [r3, #0]
 800b028:	3301      	adds	r3, #1
 800b02a:	4283      	cmp	r3, r0
 800b02c:	d1f7      	bne.n	800b01e <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b02e:	0027      	movs	r7, r4
 800b030:	37f1      	adds	r7, #241	; 0xf1
 800b032:	2210      	movs	r2, #16
 800b034:	0039      	movs	r1, r7
 800b036:	a802      	add	r0, sp, #8
 800b038:	f7f9 fc8b 	bl	8004952 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 800b03c:	a902      	add	r1, sp, #8
 800b03e:	0022      	movs	r2, r4
 800b040:	0008      	movs	r0, r1
 800b042:	f7ff fe4b 	bl	800acdc <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b046:	2210      	movs	r2, #16
 800b048:	0038      	movs	r0, r7
 800b04a:	a902      	add	r1, sp, #8
 800b04c:	f7f9 fc81 	bl	8004952 <memcpy1>
        data += 16;
 800b050:	3610      	adds	r6, #16
        len -= 16;
 800b052:	3d10      	subs	r5, #16
 800b054:	e7d3      	b.n	800affe <AES_CMAC_Update+0x88>

0800b056 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b058:	000c      	movs	r4, r1
 800b05a:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b05c:	2210      	movs	r2, #16
 800b05e:	2100      	movs	r1, #0
{
 800b060:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 800b062:	a802      	add	r0, sp, #8
 800b064:	f7f9 fc8a 	bl	800497c <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
 800b068:	a902      	add	r1, sp, #8
 800b06a:	0022      	movs	r2, r4
 800b06c:	0008      	movs	r0, r1
 800b06e:	f7ff fe35 	bl	800acdc <aes_encrypt>

    if( K[0] & 0x80 )
 800b072:	ab02      	add	r3, sp, #8
 800b074:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800b076:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 800b078:	2a7f      	cmp	r2, #127	; 0x7f
 800b07a:	d940      	bls.n	800b0fe <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	7858      	ldrb	r0, [r3, #1]
 800b080:	0052      	lsls	r2, r2, #1
 800b082:	09c0      	lsrs	r0, r0, #7
 800b084:	4302      	orrs	r2, r0
 800b086:	3101      	adds	r1, #1
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	3301      	adds	r3, #1
 800b08c:	290f      	cmp	r1, #15
 800b08e:	d1f5      	bne.n	800b07c <AES_CMAC_Final+0x26>
 800b090:	ab02      	add	r3, sp, #8
 800b092:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 800b094:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 800b096:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 800b098:	425b      	negs	r3, r3
 800b09a:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 800b09c:	0027      	movs	r7, r4
 800b09e:	37fc      	adds	r7, #252	; 0xfc
 800b0a0:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 800b0a2:	aa02      	add	r2, sp, #8
 800b0a4:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 800b0a6:	2810      	cmp	r0, #16
 800b0a8:	d137      	bne.n	800b11a <AES_CMAC_Final+0xc4>
 800b0aa:	0020      	movs	r0, r4
 800b0ac:	1ca3      	adds	r3, r4, #2
 800b0ae:	3012      	adds	r0, #18
 800b0b0:	33ff      	adds	r3, #255	; 0xff
 800b0b2:	aa02      	add	r2, sp, #8
 800b0b4:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b0b6:	7819      	ldrb	r1, [r3, #0]
 800b0b8:	7815      	ldrb	r5, [r2, #0]
 800b0ba:	3201      	adds	r2, #1
 800b0bc:	4069      	eors	r1, r5
 800b0be:	7019      	strb	r1, [r3, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	4298      	cmp	r0, r3
 800b0c4:	d1f7      	bne.n	800b0b6 <AES_CMAC_Final+0x60>
 800b0c6:	0023      	movs	r3, r4
 800b0c8:	33f1      	adds	r3, #241	; 0xf1
 800b0ca:	0019      	movs	r1, r3
 800b0cc:	1ca0      	adds	r0, r4, #2
 800b0ce:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 800b0d0:	781a      	ldrb	r2, [r3, #0]
 800b0d2:	7c1d      	ldrb	r5, [r3, #16]
 800b0d4:	406a      	eors	r2, r5
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	4283      	cmp	r3, r0
 800b0dc:	d1f8      	bne.n	800b0d0 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0de:	a806      	add	r0, sp, #24
 800b0e0:	2210      	movs	r2, #16
 800b0e2:	f7f9 fc36 	bl	8004952 <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
 800b0e6:	0022      	movs	r2, r4
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	a806      	add	r0, sp, #24
 800b0ec:	f7ff fdf6 	bl	800acdc <aes_encrypt>
    memset1( K, 0, sizeof K );
 800b0f0:	2210      	movs	r2, #16
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	a802      	add	r0, sp, #8
 800b0f6:	f7f9 fc41 	bl	800497c <memset1>
}
 800b0fa:	b00b      	add	sp, #44	; 0x2c
 800b0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 800b0fe:	781a      	ldrb	r2, [r3, #0]
 800b100:	7858      	ldrb	r0, [r3, #1]
 800b102:	0052      	lsls	r2, r2, #1
 800b104:	09c0      	lsrs	r0, r0, #7
 800b106:	4302      	orrs	r2, r0
 800b108:	3101      	adds	r1, #1
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	290f      	cmp	r1, #15
 800b110:	d1f5      	bne.n	800b0fe <AES_CMAC_Final+0xa8>
 800b112:	ab02      	add	r3, sp, #8
 800b114:	7bdb      	ldrb	r3, [r3, #15]
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	e7c0      	b.n	800b09c <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 800b11a:	ab02      	add	r3, sp, #8
 800b11c:	781a      	ldrb	r2, [r3, #0]
            LSHIFT( K, K );
 800b11e:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 800b120:	2a7f      	cmp	r2, #127	; 0x7f
 800b122:	d933      	bls.n	800b18c <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	785d      	ldrb	r5, [r3, #1]
 800b128:	0052      	lsls	r2, r2, #1
 800b12a:	09ed      	lsrs	r5, r5, #7
 800b12c:	432a      	orrs	r2, r5
 800b12e:	3101      	adds	r1, #1
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	3301      	adds	r3, #1
 800b134:	290f      	cmp	r1, #15
 800b136:	d1f5      	bne.n	800b124 <AES_CMAC_Final+0xce>
 800b138:	ab02      	add	r3, sp, #8
 800b13a:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 800b13c:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 800b13e:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 800b140:	425b      	negs	r3, r3
 800b142:	4053      	eors	r3, r2
            LSHIFT( K, K );
 800b144:	aa02      	add	r2, sp, #8
 800b146:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 800b148:	2280      	movs	r2, #128	; 0x80
 800b14a:	1823      	adds	r3, r4, r0
 800b14c:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 800b14e:	1c46      	adds	r6, r0, #1
 800b150:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 800b152:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 800b154:	2e10      	cmp	r6, #16
 800b156:	d801      	bhi.n	800b15c <AES_CMAC_Final+0x106>
 800b158:	350f      	adds	r5, #15
 800b15a:	1a2d      	subs	r5, r5, r0
 800b15c:	3003      	adds	r0, #3
 800b15e:	30ff      	adds	r0, #255	; 0xff
 800b160:	002a      	movs	r2, r5
 800b162:	2100      	movs	r1, #0
 800b164:	1820      	adds	r0, r4, r0
 800b166:	f00a ff4a 	bl	8015ffe <memset>
 800b16a:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 800b16c:	19ad      	adds	r5, r5, r6
 800b16e:	1ca3      	adds	r3, r4, #2
 800b170:	3012      	adds	r0, #18
 800b172:	61bd      	str	r5, [r7, #24]
 800b174:	33ff      	adds	r3, #255	; 0xff
 800b176:	aa02      	add	r2, sp, #8
 800b178:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 800b17a:	7819      	ldrb	r1, [r3, #0]
 800b17c:	7815      	ldrb	r5, [r2, #0]
 800b17e:	3201      	adds	r2, #1
 800b180:	4069      	eors	r1, r5
 800b182:	7019      	strb	r1, [r3, #0]
 800b184:	3301      	adds	r3, #1
 800b186:	4298      	cmp	r0, r3
 800b188:	d1f7      	bne.n	800b17a <AES_CMAC_Final+0x124>
 800b18a:	e79c      	b.n	800b0c6 <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 800b18c:	781a      	ldrb	r2, [r3, #0]
 800b18e:	785d      	ldrb	r5, [r3, #1]
 800b190:	0052      	lsls	r2, r2, #1
 800b192:	09ed      	lsrs	r5, r5, #7
 800b194:	432a      	orrs	r2, r5
 800b196:	3101      	adds	r1, #1
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	3301      	adds	r3, #1
 800b19c:	290f      	cmp	r1, #15
 800b19e:	d1f5      	bne.n	800b18c <AES_CMAC_Final+0x136>
 800b1a0:	ab02      	add	r3, sp, #8
 800b1a2:	7bdb      	ldrb	r3, [r3, #15]
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	e7cd      	b.n	800b144 <AES_CMAC_Final+0xee>

0800b1a8 <SoftSeHalGetUniqueId>:
#include "board.h"

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
 800b1a8:	b510      	push	{r4, lr}
    BoardGetUniqueId( id );
 800b1aa:	f7f8 fe3b 	bl	8003e24 <BoardGetUniqueId>
}
 800b1ae:	bd10      	pop	{r4, pc}

0800b1b0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b2:	b0cd      	sub	sp, #308	; 0x134
 800b1b4:	0005      	movs	r5, r0
 800b1b6:	000c      	movs	r4, r1
 800b1b8:	0016      	movs	r6, r2
    if( ( buffer == NULL ) || ( cmac == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1ba:	2002      	movs	r0, #2
{
 800b1bc:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b1be:	2900      	cmp	r1, #0
 800b1c0:	d02a      	beq.n	800b218 <ComputeCmac+0x68>
 800b1c2:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d027      	beq.n	800b218 <ComputeCmac+0x68>
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b1c8:	a806      	add	r0, sp, #24
 800b1ca:	f7ff febd 	bl	800af48 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b1ce:	4b16      	ldr	r3, [pc, #88]	; (800b228 <ComputeCmac+0x78>)
 800b1d0:	681f      	ldr	r7, [r3, #0]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	0038      	movs	r0, r7
 800b1d6:	3014      	adds	r0, #20
 800b1d8:	2111      	movs	r1, #17
 800b1da:	4359      	muls	r1, r3
 800b1dc:	5c42      	ldrb	r2, [r0, r1]
 800b1de:	4694      	mov	ip, r2
 800b1e0:	9a01      	ldr	r2, [sp, #4]
 800b1e2:	4594      	cmp	ip, r2
 800b1e4:	d114      	bne.n	800b210 <ComputeCmac+0x60>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b1e6:	3115      	adds	r1, #21
 800b1e8:	1879      	adds	r1, r7, r1
 800b1ea:	a806      	add	r0, sp, #24
 800b1ec:	f7ff febc 	bl	800af68 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	d113      	bne.n	800b21c <ComputeCmac+0x6c>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b1f4:	0032      	movs	r2, r6
 800b1f6:	0021      	movs	r1, r4
 800b1f8:	a806      	add	r0, sp, #24
 800b1fa:	f7ff febc 	bl	800af76 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b1fe:	a802      	add	r0, sp, #8
 800b200:	a906      	add	r1, sp, #24
 800b202:	f7ff ff28 	bl	800b056 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b206:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800b208:	9a02      	ldr	r2, [sp, #8]
 800b20a:	2000      	movs	r0, #0
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	e003      	b.n	800b218 <ComputeCmac+0x68>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b210:	3301      	adds	r3, #1
 800b212:	2b17      	cmp	r3, #23
 800b214:	d1e0      	bne.n	800b1d8 <ComputeCmac+0x28>
 800b216:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
 800b218:	b04d      	add	sp, #308	; 0x134
 800b21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b21c:	2210      	movs	r2, #16
 800b21e:	0029      	movs	r1, r5
 800b220:	a806      	add	r0, sp, #24
 800b222:	f7ff fea8 	bl	800af76 <AES_CMAC_Update>
 800b226:	e7e5      	b.n	800b1f4 <ComputeCmac+0x44>
 800b228:	200012a8 	.word	0x200012a8

0800b22c <SecureElementInit>:
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
    SecureElementNvmData_t seNvmInit =
 800b22c:	22d0      	movs	r2, #208	; 0xd0
{
 800b22e:	b570      	push	{r4, r5, r6, lr}
 800b230:	b0e8      	sub	sp, #416	; 0x1a0
    SecureElementNvmData_t seNvmInit =
 800b232:	2100      	movs	r1, #0
 800b234:	0052      	lsls	r2, r2, #1
{
 800b236:	0006      	movs	r6, r0
    SecureElementNvmData_t seNvmInit =
 800b238:	4668      	mov	r0, sp
 800b23a:	f00a fee0 	bl	8015ffe <memset>
 800b23e:	2015      	movs	r0, #21
 800b240:	4c41      	ldr	r4, [pc, #260]	; (800b348 <SecureElementInit+0x11c>)
 800b242:	2210      	movs	r2, #16
 800b244:	0021      	movs	r1, r4
 800b246:	4468      	add	r0, sp
 800b248:	f00a fed0 	bl	8015fec <memcpy>
 800b24c:	466b      	mov	r3, sp
 800b24e:	2201      	movs	r2, #1
 800b250:	2026      	movs	r0, #38	; 0x26
 800b252:	3306      	adds	r3, #6
 800b254:	77da      	strb	r2, [r3, #31]
 800b256:	0021      	movs	r1, r4
 800b258:	320f      	adds	r2, #15
 800b25a:	4468      	add	r0, sp
 800b25c:	f00a fec6 	bl	8015fec <memcpy>
 800b260:	2336      	movs	r3, #54	; 0x36
 800b262:	2502      	movs	r5, #2
 800b264:	446b      	add	r3, sp
 800b266:	701d      	strb	r5, [r3, #0]
 800b268:	2347      	movs	r3, #71	; 0x47
 800b26a:	2203      	movs	r2, #3
 800b26c:	2059      	movs	r0, #89	; 0x59
 800b26e:	446b      	add	r3, sp
 800b270:	701a      	strb	r2, [r3, #0]
 800b272:	ab16      	add	r3, sp, #88	; 0x58
 800b274:	3201      	adds	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	0021      	movs	r1, r4
 800b27a:	320c      	adds	r2, #12
 800b27c:	4468      	add	r0, sp
 800b27e:	f00a feb5 	bl	8015fec <memcpy>
 800b282:	2369      	movs	r3, #105	; 0x69
 800b284:	2205      	movs	r2, #5
 800b286:	206a      	movs	r0, #106	; 0x6a
 800b288:	446b      	add	r3, sp
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	0021      	movs	r1, r4
 800b28e:	320b      	adds	r2, #11
 800b290:	4468      	add	r0, sp
 800b292:	f00a feab 	bl	8015fec <memcpy>
 800b296:	237a      	movs	r3, #122	; 0x7a
 800b298:	2206      	movs	r2, #6
 800b29a:	207b      	movs	r0, #123	; 0x7b
 800b29c:	446b      	add	r3, sp
 800b29e:	701a      	strb	r2, [r3, #0]
 800b2a0:	0021      	movs	r1, r4
 800b2a2:	320a      	adds	r2, #10
 800b2a4:	4468      	add	r0, sp
 800b2a6:	f00a fea1 	bl	8015fec <memcpy>
 800b2aa:	238b      	movs	r3, #139	; 0x8b
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	446b      	add	r3, sp
 800b2b0:	701a      	strb	r2, [r3, #0]
 800b2b2:	0021      	movs	r1, r4
 800b2b4:	3209      	adds	r2, #9
 800b2b6:	a823      	add	r0, sp, #140	; 0x8c
 800b2b8:	f00a fe98 	bl	8015fec <memcpy>
 800b2bc:	2208      	movs	r2, #8
 800b2be:	ab27      	add	r3, sp, #156	; 0x9c
 800b2c0:	701a      	strb	r2, [r3, #0]
 800b2c2:	23ad      	movs	r3, #173	; 0xad
 800b2c4:	3277      	adds	r2, #119	; 0x77
 800b2c6:	446b      	add	r3, sp
 800b2c8:	701a      	strb	r2, [r3, #0]
 800b2ca:	23be      	movs	r3, #190	; 0xbe
 800b2cc:	3201      	adds	r2, #1
 800b2ce:	446b      	add	r3, sp
 800b2d0:	701a      	strb	r2, [r3, #0]
 800b2d2:	23cf      	movs	r3, #207	; 0xcf
 800b2d4:	3201      	adds	r2, #1
 800b2d6:	446b      	add	r3, sp
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	ab38      	add	r3, sp, #224	; 0xe0
 800b2dc:	3201      	adds	r2, #1
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	23f1      	movs	r3, #241	; 0xf1
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	446b      	add	r3, sp
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	23ff      	movs	r3, #255	; 0xff
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	446b      	add	r3, sp
 800b2ee:	70da      	strb	r2, [r3, #3]
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	751a      	strb	r2, [r3, #20]
 800b2f4:	2392      	movs	r3, #146	; 0x92
 800b2f6:	4669      	mov	r1, sp
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	54ca      	strb	r2, [r1, r3]
 800b2fe:	2336      	movs	r3, #54	; 0x36
 800b300:	3201      	adds	r2, #1
 800b302:	33ff      	adds	r3, #255	; 0xff
 800b304:	54ca      	strb	r2, [r1, r3]
 800b306:	3311      	adds	r3, #17
 800b308:	3201      	adds	r2, #1
 800b30a:	54ca      	strb	r2, [r1, r3]
 800b30c:	2358      	movs	r3, #88	; 0x58
 800b30e:	3201      	adds	r2, #1
 800b310:	33ff      	adds	r3, #255	; 0xff
 800b312:	54ca      	strb	r2, [r1, r3]
 800b314:	3311      	adds	r3, #17
 800b316:	3201      	adds	r2, #1
 800b318:	54ca      	strb	r2, [r1, r3]
 800b31a:	237a      	movs	r3, #122	; 0x7a
 800b31c:	3201      	adds	r2, #1
 800b31e:	33ff      	adds	r3, #255	; 0xff
 800b320:	54ca      	strb	r2, [r1, r3]
 800b322:	3311      	adds	r3, #17
 800b324:	3201      	adds	r2, #1
    };


    if( nvm == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b326:	0028      	movs	r0, r5
    SecureElementNvmData_t seNvmInit =
 800b328:	54ca      	strb	r2, [r1, r3]
    if( nvm == NULL )
 800b32a:	2e00      	cmp	r6, #0
 800b32c:	d00a      	beq.n	800b344 <SecureElementInit+0x118>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b32e:	4c07      	ldr	r4, [pc, #28]	; (800b34c <SecureElementInit+0x120>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b330:	3215      	adds	r2, #21
 800b332:	0030      	movs	r0, r6
 800b334:	32ff      	adds	r2, #255	; 0xff
    SeNvm = nvm;
 800b336:	6026      	str	r6, [r4, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b338:	f7f9 fb0b 	bl	8004952 <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
 800b33c:	6820      	ldr	r0, [r4, #0]
 800b33e:	f7ff ff33 	bl	800b1a8 <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
 800b342:	2000      	movs	r0, #0
}
 800b344:	b068      	add	sp, #416	; 0x1a0
 800b346:	bd70      	pop	{r4, r5, r6, pc}
 800b348:	08019810 	.word	0x08019810
 800b34c:	200012a8 	.word	0x200012a8

0800b350 <SecureElementComputeAesCmac>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800b350:	b513      	push	{r0, r1, r4, lr}
 800b352:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b354:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b356:	2b7e      	cmp	r3, #126	; 0x7e
 800b358:	d804      	bhi.n	800b364 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b35a:	9804      	ldr	r0, [sp, #16]
 800b35c:	9000      	str	r0, [sp, #0]
 800b35e:	0020      	movs	r0, r4
 800b360:	f7ff ff26 	bl	800b1b0 <ComputeCmac>
}
 800b364:	bd16      	pop	{r1, r2, r4, pc}

0800b366 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b366:	b530      	push	{r4, r5, lr}
 800b368:	0004      	movs	r4, r0
 800b36a:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b36c:	2002      	movs	r0, #2
{
 800b36e:	b085      	sub	sp, #20
    if( buffer == NULL )
 800b370:	2c00      	cmp	r4, #0
 800b372:	d00e      	beq.n	800b392 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
    uint32_t              compCmac = 0;
 800b374:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b376:	aa03      	add	r2, sp, #12
 800b378:	9200      	str	r2, [sp, #0]
 800b37a:	000a      	movs	r2, r1
 800b37c:	0021      	movs	r1, r4
    uint32_t              compCmac = 0;
 800b37e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b380:	f7ff ff16 	bl	800b1b0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b384:	2800      	cmp	r0, #0
 800b386:	d104      	bne.n	800b392 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	1b58      	subs	r0, r3, r5
 800b38c:	1e43      	subs	r3, r0, #1
 800b38e:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 800b390:	b2c0      	uxtb	r0, r0
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 800b392:	b005      	add	sp, #20
 800b394:	bd30      	pop	{r4, r5, pc}
	...

0800b398 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b39a:	b0c1      	sub	sp, #260	; 0x104
 800b39c:	0005      	movs	r5, r0
 800b39e:	000c      	movs	r4, r1
 800b3a0:	001e      	movs	r6, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b3a2:	2002      	movs	r0, #2
{
 800b3a4:	9201      	str	r2, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 800b3a6:	2d00      	cmp	r5, #0
 800b3a8:	d029      	beq.n	800b3fe <SecureElementAesEncrypt+0x66>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d027      	beq.n	800b3fe <SecureElementAesEncrypt+0x66>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b3ae:	230f      	movs	r3, #15
 800b3b0:	000f      	movs	r7, r1
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b3b2:	3003      	adds	r0, #3
    if( ( size % 16 ) != 0 )
 800b3b4:	401f      	ands	r7, r3
 800b3b6:	4219      	tst	r1, r3
 800b3b8:	d121      	bne.n	800b3fe <SecureElementAesEncrypt+0x66>
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b3ba:	22f0      	movs	r2, #240	; 0xf0
 800b3bc:	0039      	movs	r1, r7
 800b3be:	a803      	add	r0, sp, #12
 800b3c0:	f7f9 fadc 	bl	800497c <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b3c4:	4b13      	ldr	r3, [pc, #76]	; (800b414 <SecureElementAesEncrypt+0x7c>)
 800b3c6:	003a      	movs	r2, r7
 800b3c8:	6818      	ldr	r0, [r3, #0]
 800b3ca:	0007      	movs	r7, r0
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	2311      	movs	r3, #17
 800b3d0:	4353      	muls	r3, r2
 800b3d2:	5cf9      	ldrb	r1, [r7, r3]
 800b3d4:	468c      	mov	ip, r1
 800b3d6:	9901      	ldr	r1, [sp, #4]
 800b3d8:	458c      	cmp	ip, r1
 800b3da:	d10c      	bne.n	800b3f6 <SecureElementAesEncrypt+0x5e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
 800b3dc:	3315      	adds	r3, #21
 800b3de:	2110      	movs	r1, #16
 800b3e0:	18c0      	adds	r0, r0, r3
 800b3e2:	aa03      	add	r2, sp, #12
 800b3e4:	f7ff fbf2 	bl	800abcc <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 800b3e8:	0027      	movs	r7, r4
 800b3ea:	1be0      	subs	r0, r4, r7
 800b3ec:	b2c0      	uxtb	r0, r0
 800b3ee:	2f00      	cmp	r7, #0
 800b3f0:	d107      	bne.n	800b402 <SecureElementAesEncrypt+0x6a>
 800b3f2:	0038      	movs	r0, r7
 800b3f4:	e003      	b.n	800b3fe <SecureElementAesEncrypt+0x66>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b3f6:	3201      	adds	r2, #1
 800b3f8:	2a17      	cmp	r2, #23
 800b3fa:	d1e8      	bne.n	800b3ce <SecureElementAesEncrypt+0x36>
 800b3fc:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
 800b3fe:	b041      	add	sp, #260	; 0x104
 800b400:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b402:	1831      	adds	r1, r6, r0
 800b404:	aa03      	add	r2, sp, #12
 800b406:	1828      	adds	r0, r5, r0
            size  = size - 16;
 800b408:	3f10      	subs	r7, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b40a:	f7ff fc67 	bl	800acdc <aes_encrypt>
            size  = size - 16;
 800b40e:	b2bf      	uxth	r7, r7
 800b410:	e7eb      	b.n	800b3ea <SecureElementAesEncrypt+0x52>
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	200012a8 	.word	0x200012a8

0800b418 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b41a:	4e1c      	ldr	r6, [pc, #112]	; (800b48c <SecureElementSetKey.part.0+0x74>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800b41c:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b41e:	6832      	ldr	r2, [r6, #0]
 800b420:	2300      	movs	r3, #0
 800b422:	0017      	movs	r7, r2
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800b424:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b426:	3714      	adds	r7, #20
 800b428:	2411      	movs	r4, #17
 800b42a:	435c      	muls	r4, r3
 800b42c:	5d39      	ldrb	r1, [r7, r4]
 800b42e:	4281      	cmp	r1, r0
 800b430:	d127      	bne.n	800b482 <SecureElementSetKey.part.0+0x6a>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800b432:	0003      	movs	r3, r0
 800b434:	3b80      	subs	r3, #128	; 0x80
 800b436:	b2db      	uxtb	r3, r3
 800b438:	3415      	adds	r4, #21
 800b43a:	2b09      	cmp	r3, #9
 800b43c:	d81a      	bhi.n	800b474 <SecureElementSetKey.part.0+0x5c>
 800b43e:	4914      	ldr	r1, [pc, #80]	; (800b490 <SecureElementSetKey.part.0+0x78>)
 800b440:	40d9      	lsrs	r1, r3
 800b442:	000b      	movs	r3, r1
 800b444:	2101      	movs	r1, #1
 800b446:	4399      	bics	r1, r3
 800b448:	d114      	bne.n	800b474 <SecureElementSetKey.part.0+0x5c>
                uint8_t               decryptedKey[16] = { 0 };
 800b44a:	220c      	movs	r2, #12
 800b44c:	a801      	add	r0, sp, #4
 800b44e:	9100      	str	r1, [sp, #0]
 800b450:	f00a fdd5 	bl	8015ffe <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b454:	227f      	movs	r2, #127	; 0x7f
 800b456:	2110      	movs	r1, #16
 800b458:	0028      	movs	r0, r5
 800b45a:	466b      	mov	r3, sp
 800b45c:	f7ff ff9c 	bl	800b398 <SecureElementAesEncrypt>
 800b460:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b462:	6830      	ldr	r0, [r6, #0]
 800b464:	2210      	movs	r2, #16
 800b466:	4669      	mov	r1, sp
 800b468:	1900      	adds	r0, r0, r4
 800b46a:	f7f9 fa72 	bl	8004952 <memcpy1>
}
 800b46e:	0028      	movs	r0, r5
 800b470:	b005      	add	sp, #20
 800b472:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b474:	0029      	movs	r1, r5
 800b476:	1910      	adds	r0, r2, r4
 800b478:	2210      	movs	r2, #16
 800b47a:	f7f9 fa6a 	bl	8004952 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b47e:	2500      	movs	r5, #0
 800b480:	e7f5      	b.n	800b46e <SecureElementSetKey.part.0+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b482:	3301      	adds	r3, #1
 800b484:	2b17      	cmp	r3, #23
 800b486:	d1cf      	bne.n	800b428 <SecureElementSetKey.part.0+0x10>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b488:	2503      	movs	r5, #3
 800b48a:	e7f0      	b.n	800b46e <SecureElementSetKey.part.0+0x56>
 800b48c:	200012a8 	.word	0x200012a8
 800b490:	00000249 	.word	0x00000249

0800b494 <SecureElementSetKey>:
{
 800b494:	0003      	movs	r3, r0
 800b496:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 800b498:	2002      	movs	r0, #2
    if( key == NULL )
 800b49a:	2900      	cmp	r1, #0
 800b49c:	d002      	beq.n	800b4a4 <SecureElementSetKey+0x10>
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f7ff ffba 	bl	800b418 <SecureElementSetKey.part.0>
}
 800b4a4:	bd10      	pop	{r4, pc}

0800b4a6 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b4a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b4a8:	0005      	movs	r5, r0
 800b4aa:	000e      	movs	r6, r1
 800b4ac:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b4ae:	2002      	movs	r0, #2
    if( input == NULL )
 800b4b0:	2d00      	cmp	r5, #0
 800b4b2:	d016      	beq.n	800b4e2 <SecureElementDeriveAndStoreKey+0x3c>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
    uint8_t               key[16] = { 0 };
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	220c      	movs	r2, #12
 800b4b8:	a801      	add	r0, sp, #4
 800b4ba:	9100      	str	r1, [sp, #0]
 800b4bc:	f00a fd9f 	bl	8015ffe <memset>

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b4c0:	2c7f      	cmp	r4, #127	; 0x7f
 800b4c2:	d102      	bne.n	800b4ca <SecureElementDeriveAndStoreKey+0x24>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b4c4:	2003      	movs	r0, #3
        if( rootKeyID != MC_ROOT_KEY )
 800b4c6:	2e08      	cmp	r6, #8
 800b4c8:	d10b      	bne.n	800b4e2 <SecureElementDeriveAndStoreKey+0x3c>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b4ca:	466b      	mov	r3, sp
 800b4cc:	0032      	movs	r2, r6
 800b4ce:	2110      	movs	r1, #16
 800b4d0:	0028      	movs	r0, r5
 800b4d2:	f7ff ff61 	bl	800b398 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d103      	bne.n	800b4e2 <SecureElementDeriveAndStoreKey+0x3c>
    if( key == NULL )
 800b4da:	4669      	mov	r1, sp
 800b4dc:	0020      	movs	r0, r4
 800b4de:	f7ff ff9b 	bl	800b418 <SecureElementSetKey.part.0>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800b4e2:	b004      	add	sp, #16
 800b4e4:	bd70      	pop	{r4, r5, r6, pc}

0800b4e6 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b4e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4e8:	001c      	movs	r4, r3
 800b4ea:	ab08      	add	r3, sp, #32
 800b4ec:	781f      	ldrb	r7, [r3, #0]
 800b4ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b4f0:	2302      	movs	r3, #2
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b4f2:	2c00      	cmp	r4, #0
 800b4f4:	d03c      	beq.n	800b570 <SecureElementProcessJoinAccept+0x8a>
 800b4f6:	2d00      	cmp	r5, #0
 800b4f8:	d03a      	beq.n	800b570 <SecureElementProcessJoinAccept+0x8a>
 800b4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4fc:	2a00      	cmp	r2, #0
 800b4fe:	d037      	beq.n	800b570 <SecureElementProcessJoinAccept+0x8a>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b500:	3303      	adds	r3, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b502:	2f21      	cmp	r7, #33	; 0x21
 800b504:	d834      	bhi.n	800b570 <SecureElementProcessJoinAccept+0x8a>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b506:	3b04      	subs	r3, #4
 800b508:	9301      	str	r3, [sp, #4]

    if( joinReqType != JOIN_REQ )
 800b50a:	28ff      	cmp	r0, #255	; 0xff
 800b50c:	d001      	beq.n	800b512 <SecureElementProcessJoinAccept+0x2c>
    {
        encKeyID = J_S_ENC_KEY;
 800b50e:	3302      	adds	r3, #2
 800b510:	9301      	str	r3, [sp, #4]
    }

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b512:	b2be      	uxth	r6, r7
 800b514:	0032      	movs	r2, r6
 800b516:	0021      	movs	r1, r4
 800b518:	0028      	movs	r0, r5
 800b51a:	f7f9 fa1a 	bl	8004952 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b51e:	1e71      	subs	r1, r6, #1
 800b520:	1c6b      	adds	r3, r5, #1
 800b522:	9a01      	ldr	r2, [sp, #4]
 800b524:	b289      	uxth	r1, r1
 800b526:	1c60      	adds	r0, r4, #1
 800b528:	f7ff ff36 	bl	800b398 <SecureElementAesEncrypt>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b52c:	2307      	movs	r3, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b52e:	2800      	cmp	r0, #0
 800b530:	d11e      	bne.n	800b570 <SecureElementProcessJoinAccept+0x8a>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b532:	7aea      	ldrb	r2, [r5, #11]
 800b534:	40da      	lsrs	r2, r3
 800b536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b538:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b53a:	2304      	movs	r3, #4
    if( *versionMinor == 0 )
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	d117      	bne.n	800b570 <SecureElementProcessJoinAccept+0x8a>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b540:	19eb      	adds	r3, r5, r7
 800b542:	1e9a      	subs	r2, r3, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b544:	1e59      	subs	r1, r3, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b546:	7812      	ldrb	r2, [r2, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b548:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b54a:	0412      	lsls	r2, r2, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b54c:	0609      	lsls	r1, r1, #24
 800b54e:	430a      	orrs	r2, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b550:	1f19      	subs	r1, r3, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b552:	3b03      	subs	r3, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b554:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	021b      	lsls	r3, r3, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b55c:	1f31      	subs	r1, r6, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b55e:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b560:	0028      	movs	r0, r5
 800b562:	2301      	movs	r3, #1
 800b564:	b289      	uxth	r1, r1
 800b566:	f7ff fefe 	bl	800b366 <SecureElementVerifyAesCmac>
 800b56a:	1e43      	subs	r3, r0, #1
 800b56c:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 800b56e:	b2c3      	uxtb	r3, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800b570:	0018      	movs	r0, r3
 800b572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b574 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800b574:	0001      	movs	r1, r0
 800b576:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b578:	2002      	movs	r0, #2
    if( devEui == NULL )
 800b57a:	2900      	cmp	r1, #0
 800b57c:	d005      	beq.n	800b58a <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800b57e:	4b03      	ldr	r3, [pc, #12]	; (800b58c <SecureElementSetDevEui+0x18>)
 800b580:	2208      	movs	r2, #8
 800b582:	6818      	ldr	r0, [r3, #0]
 800b584:	f7f9 f9e5 	bl	8004952 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b588:	2000      	movs	r0, #0
}
 800b58a:	bd10      	pop	{r4, pc}
 800b58c:	200012a8 	.word	0x200012a8

0800b590 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 800b590:	4b01      	ldr	r3, [pc, #4]	; (800b598 <SecureElementGetDevEui+0x8>)
 800b592:	6818      	ldr	r0, [r3, #0]
}
 800b594:	4770      	bx	lr
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	200012a8 	.word	0x200012a8

0800b59c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800b59c:	0001      	movs	r1, r0
 800b59e:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5a0:	2002      	movs	r0, #2
    if( joinEui == NULL )
 800b5a2:	2900      	cmp	r1, #0
 800b5a4:	d006      	beq.n	800b5b4 <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800b5a6:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <SecureElementSetJoinEui+0x1c>)
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	3008      	adds	r0, #8
 800b5ae:	f7f9 f9d0 	bl	8004952 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b5b2:	2000      	movs	r0, #0
}
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	46c0      	nop			; (mov r8, r8)
 800b5b8:	200012a8 	.word	0x200012a8

0800b5bc <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800b5bc:	4b01      	ldr	r3, [pc, #4]	; (800b5c4 <SecureElementGetJoinEui+0x8>)
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	3008      	adds	r0, #8
}
 800b5c2:	4770      	bx	lr
 800b5c4:	200012a8 	.word	0x200012a8

0800b5c8 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
 800b5c8:	0001      	movs	r1, r0
 800b5ca:	b510      	push	{r4, lr}
    if( pin == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5cc:	2002      	movs	r0, #2
    if( pin == NULL )
 800b5ce:	2900      	cmp	r1, #0
 800b5d0:	d006      	beq.n	800b5e0 <SecureElementSetPin+0x18>
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
 800b5d2:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <SecureElementSetPin+0x1c>)
 800b5d4:	2204      	movs	r2, #4
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	3010      	adds	r0, #16
 800b5da:	f7f9 f9ba 	bl	8004952 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b5de:	2000      	movs	r0, #0
}
 800b5e0:	bd10      	pop	{r4, pc}
 800b5e2:	46c0      	nop			; (mov r8, r8)
 800b5e4:	200012a8 	.word	0x200012a8

0800b5e8 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
 800b5e8:	4b01      	ldr	r3, [pc, #4]	; (800b5f0 <SecureElementGetPin+0x8>)
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	3010      	adds	r0, #16
}
 800b5ee:	4770      	bx	lr
 800b5f0:	200012a8 	.word	0x200012a8

0800b5f4 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800b5f4:	b510      	push	{r4, lr}
    DelayMsMcu( ms );
 800b5f6:	f7f8 fcd5 	bl	8003fa4 <DelayMsMcu>
}
 800b5fa:	bd10      	pop	{r4, pc}

0800b5fc <GpioInit>:
 * \author    Gregory Cristian ( Semtech )
 */
#include "gpio-board.h"

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800b5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5fe:	ac06      	add	r4, sp, #24
 800b600:	7824      	ldrb	r4, [r4, #0]
    GpioMcuInit( obj, pin, mode, config, type, value );
 800b602:	9d07      	ldr	r5, [sp, #28]
 800b604:	9400      	str	r4, [sp, #0]
 800b606:	9501      	str	r5, [sp, #4]
 800b608:	f7f8 fd84 	bl	8004114 <GpioMcuInit>
}
 800b60c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800b60e <GpioSetInterrupt>:
{
    GpioMcuSetContext( obj, context );
}

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800b60e:	b510      	push	{r4, lr}
    GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800b610:	f7f8 fcfc 	bl	800400c <GpioMcuSetInterrupt>
}
 800b614:	bd10      	pop	{r4, pc}

0800b616 <GpioWrite>:
{
    GpioMcuRemoveInterrupt( obj );
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800b616:	b510      	push	{r4, lr}
    GpioMcuWrite( obj, value );
 800b618:	f7f8 fd6e 	bl	80040f8 <GpioMcuWrite>
}
 800b61c:	bd10      	pop	{r4, pc}

0800b61e <GpioRead>:
{
    GpioMcuToggle( obj );
}

uint32_t GpioRead( Gpio_t *obj )
{
 800b61e:	b510      	push	{r4, lr}
    return GpioMcuRead( obj );
 800b620:	f7f8 fdf6 	bl	8004210 <GpioMcuRead>
}
 800b624:	bd10      	pop	{r4, pc}

0800b626 <NvmmWrite>:
#include "utilities.h"
#include "eeprom-board.h"
#include "nvmm.h"

uint16_t NvmmWrite( uint8_t* src, uint16_t size, uint16_t offset )
{
 800b626:	0003      	movs	r3, r0
 800b628:	b510      	push	{r4, lr}
 800b62a:	0010      	movs	r0, r2
 800b62c:	000c      	movs	r4, r1
    if( EepromMcuWriteBuffer( offset, src, size ) == LMN_STATUS_OK )
 800b62e:	000a      	movs	r2, r1
 800b630:	0019      	movs	r1, r3
 800b632:	f7f8 fcbb 	bl	8003fac <EepromMcuWriteBuffer>
 800b636:	2801      	cmp	r0, #1
 800b638:	d000      	beq.n	800b63c <NvmmWrite+0x16>
    {
        return size;
    }
    return 0;
 800b63a:	2400      	movs	r4, #0
}
 800b63c:	0020      	movs	r0, r4
 800b63e:	bd10      	pop	{r4, pc}

0800b640 <NvmmRead>:

uint16_t NvmmRead( uint8_t* dest, uint16_t size, uint16_t offset )
{
 800b640:	0003      	movs	r3, r0
 800b642:	b510      	push	{r4, lr}
 800b644:	0010      	movs	r0, r2
 800b646:	000c      	movs	r4, r1
    if( EepromMcuReadBuffer( offset, dest, size ) == LMN_STATUS_OK )
 800b648:	000a      	movs	r2, r1
 800b64a:	0019      	movs	r1, r3
 800b64c:	f7f8 fcd2 	bl	8003ff4 <EepromMcuReadBuffer>
 800b650:	2801      	cmp	r0, #1
 800b652:	d000      	beq.n	800b656 <NvmmRead+0x16>
    {
        return size;
    }
    return 0;
 800b654:	2400      	movs	r4, #0
}
 800b656:	0020      	movs	r0, r4
 800b658:	bd10      	pop	{r4, pc}

0800b65a <NvmmCrc32Check>:

bool NvmmCrc32Check( uint16_t size, uint16_t offset )
{
 800b65a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t data = 0;
 800b65c:	2400      	movs	r4, #0
{
 800b65e:	b085      	sub	sp, #20
    uint32_t calculatedCrc32 = 0;
    uint32_t readCrc32 = 0;

    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b660:	1f02      	subs	r2, r0, #4
    uint8_t data = 0;
 800b662:	ab02      	add	r3, sp, #8
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b664:	188a      	adds	r2, r1, r2
{
 800b666:	9001      	str	r0, [sp, #4]
 800b668:	000e      	movs	r6, r1
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b66a:	b292      	uxth	r2, r2
 800b66c:	2104      	movs	r1, #4
 800b66e:	a803      	add	r0, sp, #12
    uint8_t data = 0;
 800b670:	1cdf      	adds	r7, r3, #3
    uint32_t readCrc32 = 0;
 800b672:	9403      	str	r4, [sp, #12]
    uint8_t data = 0;
 800b674:	703c      	strb	r4, [r7, #0]
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b676:	f7ff ffe3 	bl	800b640 <NvmmRead>
 800b67a:	0003      	movs	r3, r0
        if( calculatedCrc32 != readCrc32 )
        {
            return false;
        }
    }
    return true;
 800b67c:	2001      	movs	r0, #1
    if( NvmmRead( ( uint8_t* ) &readCrc32, sizeof( readCrc32 ),
 800b67e:	2b04      	cmp	r3, #4
 800b680:	d10e      	bne.n	800b6a0 <NvmmCrc32Check+0x46>
        calculatedCrc32 = Crc32Init( );
 800b682:	f7f9 f9a1 	bl	80049c8 <Crc32Init>
 800b686:	0005      	movs	r5, r0
        for( uint16_t i = 0; i < ( size - sizeof( readCrc32 ) ); i++ )
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	3b04      	subs	r3, #4
 800b68c:	429c      	cmp	r4, r3
 800b68e:	d309      	bcc.n	800b6a4 <NvmmCrc32Check+0x4a>
        calculatedCrc32 = Crc32Finalize( calculatedCrc32 );
 800b690:	0028      	movs	r0, r5
 800b692:	f7f9 f9b9 	bl	8004a08 <Crc32Finalize>
        if( calculatedCrc32 != readCrc32 )
 800b696:	9b03      	ldr	r3, [sp, #12]
 800b698:	1a18      	subs	r0, r3, r0
 800b69a:	4243      	negs	r3, r0
 800b69c:	4158      	adcs	r0, r3
 800b69e:	b2c0      	uxtb	r0, r0
}
 800b6a0:	b005      	add	sp, #20
 800b6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( NvmmRead( &data, 1, offset + i ) != 1 )
 800b6a4:	19a2      	adds	r2, r4, r6
 800b6a6:	b292      	uxth	r2, r2
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	0038      	movs	r0, r7
 800b6ac:	f7ff ffc8 	bl	800b640 <NvmmRead>
 800b6b0:	0002      	movs	r2, r0
 800b6b2:	2801      	cmp	r0, #1
 800b6b4:	d107      	bne.n	800b6c6 <NvmmCrc32Check+0x6c>
            calculatedCrc32 = Crc32Update( calculatedCrc32, &data, 1 );
 800b6b6:	0028      	movs	r0, r5
 800b6b8:	0039      	movs	r1, r7
 800b6ba:	f7f9 f989 	bl	80049d0 <Crc32Update>
        for( uint16_t i = 0; i < ( size - sizeof( readCrc32 ) ); i++ )
 800b6be:	3401      	adds	r4, #1
            calculatedCrc32 = Crc32Update( calculatedCrc32, &data, 1 );
 800b6c0:	0005      	movs	r5, r0
        for( uint16_t i = 0; i < ( size - sizeof( readCrc32 ) ); i++ )
 800b6c2:	b2a4      	uxth	r4, r4
 800b6c4:	e7e0      	b.n	800b688 <NvmmCrc32Check+0x2e>
                return false;
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e7ea      	b.n	800b6a0 <NvmmCrc32Check+0x46>
	...

0800b6cc <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 800b6d0:	18c9      	adds	r1, r1, r3
{
 800b6d2:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b6d4:	ab05      	add	r3, sp, #20
 800b6d6:	889c      	ldrh	r4, [r3, #4]
 800b6d8:	18a2      	adds	r2, r4, r2
    if( c.SubSeconds >= 1000 )
 800b6da:	24fa      	movs	r4, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b6dc:	b293      	uxth	r3, r2
 800b6de:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 800b6e0:	00a4      	lsls	r4, r4, #2
 800b6e2:	42a2      	cmp	r2, r4
 800b6e4:	db03      	blt.n	800b6ee <SysTimeAdd+0x22>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 800b6e6:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <SysTimeAdd+0x30>)
        c.Seconds++;
 800b6e8:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 800b6ea:	189b      	adds	r3, r3, r2
 800b6ec:	b21a      	sxth	r2, r3
    }
    return c;
 800b6ee:	6001      	str	r1, [r0, #0]
 800b6f0:	8082      	strh	r2, [r0, #4]
}
 800b6f2:	bc16      	pop	{r1, r2, r4}
 800b6f4:	bc08      	pop	{r3}
 800b6f6:	b002      	add	sp, #8
 800b6f8:	4718      	bx	r3
 800b6fa:	46c0      	nop			; (mov r8, r8)
 800b6fc:	fffffc18 	.word	0xfffffc18

0800b700 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800b700:	b082      	sub	sp, #8
 800b702:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 800b704:	1ac9      	subs	r1, r1, r3
{
 800b706:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b708:	ab05      	add	r3, sp, #20
 800b70a:	889b      	ldrh	r3, [r3, #4]
 800b70c:	1ad2      	subs	r2, r2, r3
 800b70e:	b293      	uxth	r3, r2
 800b710:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800b712:	0412      	lsls	r2, r2, #16
 800b714:	d504      	bpl.n	800b720 <SysTimeSub+0x20>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 800b716:	22fa      	movs	r2, #250	; 0xfa
 800b718:	0092      	lsls	r2, r2, #2
 800b71a:	189b      	adds	r3, r3, r2
        c.Seconds--;
 800b71c:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 800b71e:	b21c      	sxth	r4, r3
    }
    return c;
 800b720:	6001      	str	r1, [r0, #0]
 800b722:	8084      	strh	r4, [r0, #4]
}
 800b724:	bc16      	pop	{r1, r2, r4}
 800b726:	bc08      	pop	{r3}
 800b728:	b002      	add	sp, #8
 800b72a:	4718      	bx	r3

0800b72c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800b72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b72e:	2300      	movs	r3, #0
{
 800b730:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b732:	ac02      	add	r4, sp, #8

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b734:	a803      	add	r0, sp, #12
{
 800b736:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b738:	9302      	str	r3, [sp, #8]
 800b73a:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b73c:	f7f8 fed0 	bl	80044e0 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 800b740:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b742:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 800b744:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b746:	466b      	mov	r3, sp
 800b748:	88a2      	ldrh	r2, [r4, #4]
 800b74a:	889b      	ldrh	r3, [r3, #4]
 800b74c:	1a9b      	subs	r3, r3, r2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 800b752:	041b      	lsls	r3, r3, #16
 800b754:	d504      	bpl.n	800b760 <SysTimeSet+0x34>
        c.SubSeconds += 1000;
 800b756:	23fa      	movs	r3, #250	; 0xfa
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	18d2      	adds	r2, r2, r3
        c.Seconds--;
 800b75c:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 800b75e:	b211      	sxth	r1, r2

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 800b760:	f7f8 fef2 	bl	8004548 <RtcBkupWrite>
}
 800b764:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

0800b768 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b768:	2300      	movs	r3, #0
{
 800b76a:	b530      	push	{r4, r5, lr}
 800b76c:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b76e:	ad02      	add	r5, sp, #8
{
 800b770:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b772:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b774:	9302      	str	r3, [sp, #8]
 800b776:	80ab      	strh	r3, [r5, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b778:	f7f8 feb2 	bl	80044e0 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
 800b77c:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b77e:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
 800b780:	4668      	mov	r0, sp
 800b782:	f7f8 fef1 	bl	8004568 <RtcBkupRead>
    if( c.SubSeconds >= 1000 )
 800b786:	20fa      	movs	r0, #250	; 0xfa
    c.Seconds = a.Seconds + b.Seconds;
 800b788:	9b00      	ldr	r3, [sp, #0]
 800b78a:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b78c:	9901      	ldr	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 800b78e:	189a      	adds	r2, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b790:	88ab      	ldrh	r3, [r5, #4]
    if( c.SubSeconds >= 1000 )
 800b792:	0080      	lsls	r0, r0, #2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b794:	18cb      	adds	r3, r1, r3
 800b796:	b299      	uxth	r1, r3
 800b798:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 800b79a:	4283      	cmp	r3, r0
 800b79c:	db03      	blt.n	800b7a6 <SysTimeGet+0x3e>
        c.SubSeconds -= 1000;
 800b79e:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <SysTimeGet+0x48>)
        c.Seconds++;
 800b7a0:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 800b7a2:	18c9      	adds	r1, r1, r3
 800b7a4:	b20b      	sxth	r3, r1
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 800b7a6:	0020      	movs	r0, r4
    return sysTime;
 800b7a8:	6022      	str	r2, [r4, #0]
 800b7aa:	80a3      	strh	r3, [r4, #4]
}
 800b7ac:	b005      	add	sp, #20
 800b7ae:	bd30      	pop	{r4, r5, pc}
 800b7b0:	fffffc18 	.word	0xfffffc18

0800b7b4 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 800b7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	466d      	mov	r5, sp
{
 800b7ba:	0004      	movs	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b7bc:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	80ab      	strh	r3, [r5, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b7c2:	f7f8 fe8d 	bl	80044e0 <RtcGetCalendarTime>

    return calendarTime;
 800b7c6:	0023      	movs	r3, r4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b7c8:	9000      	str	r0, [sp, #0]
    return calendarTime;
 800b7ca:	cd06      	ldmia	r5!, {r1, r2}
 800b7cc:	c306      	stmia	r3!, {r1, r2}
}
 800b7ce:	0020      	movs	r0, r4
 800b7d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b7d2 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800b7d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7d4:	9000      	str	r0, [sp, #0]
 800b7d6:	9101      	str	r1, [sp, #4]
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 800b7d8:	a802      	add	r0, sp, #8
 800b7da:	a903      	add	r1, sp, #12
 800b7dc:	f7f8 fec4 	bl	8004568 <RtcBkupRead>
    c.Seconds = a.Seconds - b.Seconds;
 800b7e0:	9a02      	ldr	r2, [sp, #8]
 800b7e2:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b7e4:	9903      	ldr	r1, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 800b7e6:	1a9b      	subs	r3, r3, r2
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800b7e8:	466a      	mov	r2, sp
 800b7ea:	8892      	ldrh	r2, [r2, #4]
 800b7ec:	1a52      	subs	r2, r2, r1
 800b7ee:	b291      	uxth	r1, r2
 800b7f0:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800b7f2:	0412      	lsls	r2, r2, #16
 800b7f4:	d504      	bpl.n	800b800 <SysTimeToMs+0x2e>
        c.SubSeconds += 1000;
 800b7f6:	22fa      	movs	r2, #250	; 0xfa
 800b7f8:	0092      	lsls	r2, r2, #2
 800b7fa:	1889      	adds	r1, r1, r2
        c.Seconds--;
 800b7fc:	3b01      	subs	r3, #1
        c.SubSeconds += 1000;
 800b7fe:	b20c      	sxth	r4, r1

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800b800:	20fa      	movs	r0, #250	; 0xfa
 800b802:	0080      	lsls	r0, r0, #2
 800b804:	4358      	muls	r0, r3
 800b806:	1900      	adds	r0, r0, r4
}
 800b808:	b004      	add	sp, #16
 800b80a:	bd10      	pop	{r4, pc}

0800b80c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800b80c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b80e:	000e      	movs	r6, r1
    uint32_t seconds = timeMs / 1000;
 800b810:	21fa      	movs	r1, #250	; 0xfa
{
 800b812:	0004      	movs	r4, r0
    uint32_t seconds = timeMs / 1000;
 800b814:	0089      	lsls	r1, r1, #2
 800b816:	0030      	movs	r0, r6
 800b818:	f7f4 fca6 	bl	8000168 <__udivsi3>
 800b81c:	21fa      	movs	r1, #250	; 0xfa
 800b81e:	0005      	movs	r5, r0
 800b820:	9000      	str	r0, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
 800b822:	0089      	lsls	r1, r1, #2
 800b824:	0030      	movs	r0, r6
 800b826:	f7f4 fd25 	bl	8000274 <__aeabi_uidivmod>
 800b82a:	000e      	movs	r6, r1
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
 800b82c:	4668      	mov	r0, sp
    uint32_t subSeconds = timeMs - seconds * 1000;
 800b82e:	9101      	str	r1, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
 800b830:	a901      	add	r1, sp, #4
 800b832:	f7f8 fe99 	bl	8004568 <RtcBkupRead>
    if( c.SubSeconds >= 1000 )
 800b836:	20fa      	movs	r0, #250	; 0xfa
    c.Seconds = a.Seconds + b.Seconds;
 800b838:	9b00      	ldr	r3, [sp, #0]
    if( c.SubSeconds >= 1000 )
 800b83a:	0080      	lsls	r0, r0, #2
    c.Seconds = a.Seconds + b.Seconds;
 800b83c:	18ed      	adds	r5, r5, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	199e      	adds	r6, r3, r6
 800b842:	b231      	sxth	r1, r6
 800b844:	b2b2      	uxth	r2, r6
    if( c.SubSeconds >= 1000 )
 800b846:	4281      	cmp	r1, r0
 800b848:	db03      	blt.n	800b852 <SysTimeFromMs+0x46>
        c.SubSeconds -= 1000;
 800b84a:	4b04      	ldr	r3, [pc, #16]	; (800b85c <SysTimeFromMs+0x50>)
        c.Seconds++;
 800b84c:	3501      	adds	r5, #1
        c.SubSeconds -= 1000;
 800b84e:	18d2      	adds	r2, r2, r3
 800b850:	b211      	sxth	r1, r2

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
 800b852:	0020      	movs	r0, r4
    return c;
 800b854:	6025      	str	r5, [r4, #0]
 800b856:	80a1      	strh	r1, [r4, #4]
}
 800b858:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800b85a:	46c0      	nop			; (mov r8, r8)
 800b85c:	fffffc18 	.word	0xfffffc18

0800b860 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	0004      	movs	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800b864:	f7f8 fd64 	bl	8004330 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 800b868:	2301      	movs	r3, #1
 800b86a:	7263      	strb	r3, [r4, #9]
    int32_t minTicks= RtcGetMinimumTimeout( );
 800b86c:	0005      	movs	r5, r0

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800b86e:	6826      	ldr	r6, [r4, #0]
 800b870:	f7f8 fe1a 	bl	80044a8 <RtcGetTimerElapsedTime>
 800b874:	1828      	adds	r0, r5, r0
 800b876:	4286      	cmp	r6, r0
 800b878:	d203      	bcs.n	800b882 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800b87a:	f7f8 fe15 	bl	80044a8 <RtcGetTimerElapsedTime>
 800b87e:	182d      	adds	r5, r5, r0
 800b880:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 800b882:	6820      	ldr	r0, [r4, #0]
 800b884:	f7f8 fe1c 	bl	80044c0 <RtcSetAlarm>
}
 800b888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b88c <TimerInsertNewHeadTimer>:
    TimerEvent_t* cur = TimerListHead;
 800b88c:	4a05      	ldr	r2, [pc, #20]	; (800b8a4 <TimerInsertNewHeadTimer+0x18>)
{
 800b88e:	b510      	push	{r4, lr}
    TimerEvent_t* cur = TimerListHead;
 800b890:	6813      	ldr	r3, [r2, #0]
    if( cur != NULL )
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <TimerInsertNewHeadTimer+0xe>
        cur->IsNext2Expire = false;
 800b896:	2100      	movs	r1, #0
 800b898:	7259      	strb	r1, [r3, #9]
    obj->Next = cur;
 800b89a:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 800b89c:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
 800b89e:	f7ff ffdf 	bl	800b860 <TimerSetTimeout>
}
 800b8a2:	bd10      	pop	{r4, pc}
 800b8a4:	200012ac 	.word	0x200012ac

0800b8a8 <TimerInit>:
    obj->Timestamp = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800b8ac:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800b8ae:	8103      	strh	r3, [r0, #8]
    obj->Callback = callback;
 800b8b0:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800b8b2:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800b8b4:	6143      	str	r3, [r0, #20]
}
 800b8b6:	4770      	bx	lr

0800b8b8 <TimerStart>:
{
 800b8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8ba:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800b8bc:	a801      	add	r0, sp, #4
 800b8be:	f7f8 faa7 	bl	8003e10 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800b8c2:	2c00      	cmp	r4, #0
 800b8c4:	d00f      	beq.n	800b8e6 <TimerStart+0x2e>
    TimerEvent_t* cur = TimerListHead;
 800b8c6:	4d18      	ldr	r5, [pc, #96]	; (800b928 <TimerStart+0x70>)
 800b8c8:	682a      	ldr	r2, [r5, #0]
 800b8ca:	0013      	movs	r3, r2
    while( cur != NULL )
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10e      	bne.n	800b8ee <TimerStart+0x36>
    obj->Timestamp = obj->ReloadValue;
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	d10c      	bne.n	800b8f6 <TimerStart+0x3e>
        RtcSetTimerContext( );
 800b8dc:	f7f8 fd16 	bl	800430c <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
 800b8e0:	0020      	movs	r0, r4
 800b8e2:	f7ff ffd3 	bl	800b88c <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
 800b8e6:	a801      	add	r0, sp, #4
 800b8e8:	f7f8 fa97 	bl	8003e1a <BoardCriticalSectionEnd>
}
 800b8ec:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        if( cur == obj )
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	d0f9      	beq.n	800b8e6 <TimerStart+0x2e>
        cur = cur->Next;
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	e7ea      	b.n	800b8cc <TimerStart+0x14>
        elapsedTime = RtcGetTimerElapsedTime( );
 800b8f6:	f7f8 fdd7 	bl	80044a8 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	18c0      	adds	r0, r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
 800b8fe:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
 800b900:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	4290      	cmp	r0, r2
 800b906:	d3eb      	bcc.n	800b8e0 <TimerStart+0x28>
    TimerEvent_t* next = TimerListHead->Next;
 800b908:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 800b90a:	6959      	ldr	r1, [r3, #20]
 800b90c:	2900      	cmp	r1, #0
 800b90e:	d102      	bne.n	800b916 <TimerStart+0x5e>
    cur->Next = obj;
 800b910:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
 800b912:	6161      	str	r1, [r4, #20]
 800b914:	e7e7      	b.n	800b8e6 <TimerStart+0x2e>
        if( obj->Timestamp > next->Timestamp )
 800b916:	6811      	ldr	r1, [r2, #0]
 800b918:	4288      	cmp	r0, r1
 800b91a:	d902      	bls.n	800b922 <TimerStart+0x6a>
            next = next->Next;
 800b91c:	0013      	movs	r3, r2
 800b91e:	6952      	ldr	r2, [r2, #20]
 800b920:	e7f3      	b.n	800b90a <TimerStart+0x52>
            cur->Next = obj;
 800b922:	615c      	str	r4, [r3, #20]
            obj->Next = next;
 800b924:	6162      	str	r2, [r4, #20]
            return;
 800b926:	e7de      	b.n	800b8e6 <TimerStart+0x2e>
 800b928:	200012ac 	.word	0x200012ac

0800b92c <TimerIrqHandler>:
{
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 800b92e:	f7f8 fcf9 	bl	8004324 <RtcGetTimerContext>
 800b932:	0005      	movs	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 800b934:	f7f8 fcea 	bl	800430c <RtcSetTimerContext>
    if( TimerListHead != NULL )
 800b938:	4c1a      	ldr	r4, [pc, #104]	; (800b9a4 <TimerIrqHandler+0x78>)
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d015      	beq.n	800b96c <TimerIrqHandler+0x40>
    uint32_t deltaContext = now - old; // intentional wrap around
 800b940:	001a      	movs	r2, r3
 800b942:	1b47      	subs	r7, r0, r5
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800b944:	6952      	ldr	r2, [r2, #20]
 800b946:	2a00      	cmp	r2, #0
 800b948:	d106      	bne.n	800b958 <TimerIrqHandler+0x2c>
        TimerListHead = TimerListHead->Next;
 800b94a:	6959      	ldr	r1, [r3, #20]
        cur->IsStarted = false;
 800b94c:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800b94e:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 800b950:	6021      	str	r1, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 800b952:	2a00      	cmp	r2, #0
 800b954:	d108      	bne.n	800b968 <TimerIrqHandler+0x3c>
 800b956:	e7fe      	b.n	800b956 <TimerIrqHandler+0x2a>
            if( next->Timestamp > deltaContext )
 800b958:	6811      	ldr	r1, [r2, #0]
                next->Timestamp = 0;
 800b95a:	2600      	movs	r6, #0
            if( next->Timestamp > deltaContext )
 800b95c:	42b9      	cmp	r1, r7
 800b95e:	d901      	bls.n	800b964 <TimerIrqHandler+0x38>
                next->Timestamp -= deltaContext;
 800b960:	1949      	adds	r1, r1, r5
 800b962:	1a0e      	subs	r6, r1, r0
 800b964:	6016      	str	r6, [r2, #0]
 800b966:	e7ed      	b.n	800b944 <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
 800b968:	6918      	ldr	r0, [r3, #16]
 800b96a:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d103      	bne.n	800b97a <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800b972:	6820      	ldr	r0, [r4, #0]
 800b974:	2800      	cmp	r0, #0
 800b976:	d10e      	bne.n	800b996 <TimerIrqHandler+0x6a>
}
 800b978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800b97a:	681d      	ldr	r5, [r3, #0]
 800b97c:	f7f8 fd94 	bl	80044a8 <RtcGetTimerElapsedTime>
 800b980:	4285      	cmp	r5, r0
 800b982:	d2f6      	bcs.n	800b972 <TimerIrqHandler+0x46>
        cur = TimerListHead;
 800b984:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 800b986:	695a      	ldr	r2, [r3, #20]
 800b988:	6022      	str	r2, [r4, #0]
        cur->IsStarted = false;
 800b98a:	2200      	movs	r2, #0
 800b98c:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	2a00      	cmp	r2, #0
 800b992:	d1e9      	bne.n	800b968 <TimerIrqHandler+0x3c>
 800b994:	e7fe      	b.n	800b994 <TimerIrqHandler+0x68>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800b996:	7a43      	ldrb	r3, [r0, #9]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1ed      	bne.n	800b978 <TimerIrqHandler+0x4c>
        TimerSetTimeout( TimerListHead );
 800b99c:	f7ff ff60 	bl	800b860 <TimerSetTimeout>
}
 800b9a0:	e7ea      	b.n	800b978 <TimerIrqHandler+0x4c>
 800b9a2:	46c0      	nop			; (mov r8, r8)
 800b9a4:	200012ac 	.word	0x200012ac

0800b9a8 <TimerStop>:
{
 800b9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9aa:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800b9ac:	a801      	add	r0, sp, #4
 800b9ae:	f7f8 fa2f 	bl	8003e10 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800b9b2:	4d13      	ldr	r5, [pc, #76]	; (800ba00 <TimerStop+0x58>)
 800b9b4:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <TimerStop+0x16>
 800b9ba:	2c00      	cmp	r4, #0
 800b9bc:	d103      	bne.n	800b9c6 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800b9be:	a801      	add	r0, sp, #4
 800b9c0:	f7f8 fa2b 	bl	8003e1a <BoardCriticalSectionEnd>
}
 800b9c4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    obj->IsStarted = false;
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	d10f      	bne.n	800b9ee <TimerStop+0x46>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800b9ce:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 800b9d0:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800b9d2:	4291      	cmp	r1, r2
 800b9d4:	d009      	beq.n	800b9ea <TimerStop+0x42>
            TimerListHead->IsNext2Expire = false;
 800b9d6:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 800b9d8:	4294      	cmp	r4, r2
 800b9da:	d004      	beq.n	800b9e6 <TimerStop+0x3e>
                TimerSetTimeout( TimerListHead );
 800b9dc:	0020      	movs	r0, r4
                TimerListHead = TimerListHead->Next;
 800b9de:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
 800b9e0:	f7ff ff3e 	bl	800b860 <TimerSetTimeout>
 800b9e4:	e7eb      	b.n	800b9be <TimerStop+0x16>
                RtcStopAlarm( );
 800b9e6:	f7f8 fcb7 	bl	8004358 <RtcStopAlarm>
                TimerListHead = NULL;
 800b9ea:	602c      	str	r4, [r5, #0]
 800b9ec:	e7e7      	b.n	800b9be <TimerStop+0x16>
                cur = cur->Next;
 800b9ee:	001a      	movs	r2, r3
 800b9f0:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0e3      	beq.n	800b9be <TimerStop+0x16>
            if( cur == obj )
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	d1f9      	bne.n	800b9ee <TimerStop+0x46>
                if( cur->Next != NULL )
 800b9fa:	6963      	ldr	r3, [r4, #20]
 800b9fc:	6153      	str	r3, [r2, #20]
 800b9fe:	e7de      	b.n	800b9be <TimerStop+0x16>
 800ba00:	200012ac 	.word	0x200012ac

0800ba04 <TimerSetValue>:
{
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	0005      	movs	r5, r0
 800ba08:	0008      	movs	r0, r1
    uint32_t ticks = RtcMs2Tick( value );
 800ba0a:	f7f8 fc93 	bl	8004334 <RtcMs2Tick>
 800ba0e:	0004      	movs	r4, r0
    TimerStop( obj );
 800ba10:	0028      	movs	r0, r5
 800ba12:	f7ff ffc9 	bl	800b9a8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800ba16:	f7f8 fc8b 	bl	8004330 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800ba1a:	4284      	cmp	r4, r0
 800ba1c:	d200      	bcs.n	800ba20 <TimerSetValue+0x1c>
 800ba1e:	0004      	movs	r4, r0
    obj->Timestamp = ticks;
 800ba20:	602c      	str	r4, [r5, #0]
    obj->ReloadValue = ticks;
 800ba22:	606c      	str	r4, [r5, #4]
}
 800ba24:	bd70      	pop	{r4, r5, r6, pc}

0800ba26 <TimerGetCurrentTime>:
{
 800ba26:	b510      	push	{r4, lr}
    uint32_t now = RtcGetTimerValue( );
 800ba28:	f7f8 fd36 	bl	8004498 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800ba2c:	f7f8 fc8a 	bl	8004344 <RtcTick2Ms>
}
 800ba30:	bd10      	pop	{r4, pc}

0800ba32 <TimerGetElapsedTime>:
{
 800ba32:	b570      	push	{r4, r5, r6, lr}
 800ba34:	1e04      	subs	r4, r0, #0
    if ( past == 0 )
 800ba36:	d009      	beq.n	800ba4c <TimerGetElapsedTime+0x1a>
    uint32_t nowInTicks = RtcGetTimerValue( );
 800ba38:	f7f8 fd2e 	bl	8004498 <RtcGetTimerValue>
 800ba3c:	0005      	movs	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800ba3e:	0020      	movs	r0, r4
 800ba40:	f7f8 fc78 	bl	8004334 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800ba44:	1a28      	subs	r0, r5, r0
 800ba46:	f7f8 fc7d 	bl	8004344 <RtcTick2Ms>
 800ba4a:	0004      	movs	r4, r0
}
 800ba4c:	0020      	movs	r0, r4
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}

0800ba50 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800ba50:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 800ba52:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d801      	bhi.n	800ba5c <_GetAvailWriteSpace+0xc>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800ba58:	6880      	ldr	r0, [r0, #8]
 800ba5a:	181b      	adds	r3, r3, r0
  } else {
    r = RdOff - WrOff - 1u;
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	1a98      	subs	r0, r3, r2
  }
  return r;
}
 800ba60:	4770      	bx	lr

0800ba62 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800ba62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
 800ba64:	6883      	ldr	r3, [r0, #8]
  WrOff = pRing->WrOff;
 800ba66:	68c4      	ldr	r4, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	1b1f      	subs	r7, r3, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800ba6c:	6843      	ldr	r3, [r0, #4]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800ba6e:	0005      	movs	r5, r0
 800ba70:	000e      	movs	r6, r1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800ba72:	1918      	adds	r0, r3, r4
    pRing->WrOff = WrOff + NumBytes;
 800ba74:	18a4      	adds	r4, r4, r2
  if (Rem > NumBytes) {
 800ba76:	4297      	cmp	r7, r2
 800ba78:	d807      	bhi.n	800ba8a <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800ba7a:	003a      	movs	r2, r7
 800ba7c:	f00a fab6 	bl	8015fec <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800ba80:	9b01      	ldr	r3, [sp, #4]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800ba82:	6868      	ldr	r0, [r5, #4]
    NumBytesAtOnce = NumBytes - Rem;
 800ba84:	1ae4      	subs	r4, r4, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800ba86:	0022      	movs	r2, r4
 800ba88:	19f1      	adds	r1, r6, r7
 800ba8a:	f00a faaf 	bl	8015fec <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800ba8e:	60ec      	str	r4, [r5, #12]
}
 800ba90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800ba92 <_WriteBlocking>:
  NumBytesWritten = 0u;
 800ba92:	2300      	movs	r3, #0
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800ba94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba96:	0006      	movs	r6, r0
 800ba98:	0017      	movs	r7, r2
  WrOff = pRing->WrOff;
 800ba9a:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800ba9c:	9101      	str	r1, [sp, #4]
  NumBytesWritten = 0u;
 800ba9e:	9300      	str	r3, [sp, #0]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800baa0:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800baa2:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 800baa4:	429d      	cmp	r5, r3
 800baa6:	d21f      	bcs.n	800bae8 <_WriteBlocking+0x56>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800baa8:	3b01      	subs	r3, #1
 800baaa:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800baac:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800baae:	42bc      	cmp	r4, r7
 800bab0:	d900      	bls.n	800bab4 <_WriteBlocking+0x22>
 800bab2:	003c      	movs	r4, r7
 800bab4:	429c      	cmp	r4, r3
 800bab6:	d900      	bls.n	800baba <_WriteBlocking+0x28>
 800bab8:	001c      	movs	r4, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800baba:	6873      	ldr	r3, [r6, #4]
 800babc:	0022      	movs	r2, r4
 800babe:	1958      	adds	r0, r3, r5
 800bac0:	9901      	ldr	r1, [sp, #4]
 800bac2:	f00a fa93 	bl	8015fec <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800bac6:	9b00      	ldr	r3, [sp, #0]
    WrOff           += NumBytesToWrite;
 800bac8:	192d      	adds	r5, r5, r4
    NumBytesWritten += NumBytesToWrite;
 800baca:	191b      	adds	r3, r3, r4
 800bacc:	9300      	str	r3, [sp, #0]
    pBuffer         += NumBytesToWrite;
 800bace:	9b01      	ldr	r3, [sp, #4]
    NumBytes        -= NumBytesToWrite;
 800bad0:	1b3f      	subs	r7, r7, r4
    pBuffer         += NumBytesToWrite;
 800bad2:	191b      	adds	r3, r3, r4
 800bad4:	9301      	str	r3, [sp, #4]
    if (WrOff == pRing->SizeOfBuffer) {
 800bad6:	68b3      	ldr	r3, [r6, #8]
 800bad8:	42ab      	cmp	r3, r5
 800bada:	d100      	bne.n	800bade <_WriteBlocking+0x4c>
      WrOff = 0u;
 800badc:	2500      	movs	r5, #0
    pRing->WrOff = WrOff;
 800bade:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 800bae0:	2f00      	cmp	r7, #0
 800bae2:	d1dd      	bne.n	800baa0 <_WriteBlocking+0xe>
}
 800bae4:	9800      	ldr	r0, [sp, #0]
 800bae6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800bae8:	191b      	adds	r3, r3, r4
 800baea:	e7dd      	b.n	800baa8 <_WriteBlocking+0x16>

0800baec <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800baec:	2303      	movs	r3, #3
static void _DoInit(void) {
 800baee:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800baf0:	4c10      	ldr	r4, [pc, #64]	; (800bb34 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
 800baf2:	4a11      	ldr	r2, [pc, #68]	; (800bb38 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800baf4:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800baf6:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800baf8:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
 800bafa:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bafc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800bafe:	2380      	movs	r3, #128	; 0x80
  p->aDown[0].sName         = "Terminal";
 800bb00:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bb02:	4a0f      	ldr	r2, [pc, #60]	; (800bb40 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800bb04:	00db      	lsls	r3, r3, #3
 800bb06:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bb08:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
 800bb0a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800bb0c:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 800bb0e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800bb10:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bb12:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
 800bb14:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800bb16:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bb18:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800bb1a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
 800bb1c:	4909      	ldr	r1, [pc, #36]	; (800bb44 <_DoInit+0x58>)
 800bb1e:	480a      	ldr	r0, [pc, #40]	; (800bb48 <_DoInit+0x5c>)
 800bb20:	f00b f990 	bl	8016e44 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
 800bb24:	0020      	movs	r0, r4
 800bb26:	4909      	ldr	r1, [pc, #36]	; (800bb4c <_DoInit+0x60>)
 800bb28:	f00b f98c 	bl	8016e44 <strcpy>
  p->acID[6] = ' ';
 800bb2c:	2320      	movs	r3, #32
 800bb2e:	71a3      	strb	r3, [r4, #6]
}
 800bb30:	bd10      	pop	{r4, pc}
 800bb32:	46c0      	nop			; (mov r8, r8)
 800bb34:	200012b0 	.word	0x200012b0
 800bb38:	08019821 	.word	0x08019821
 800bb3c:	20001368 	.word	0x20001368
 800bb40:	20001358 	.word	0x20001358
 800bb44:	0801982a 	.word	0x0801982a
 800bb48:	200012b7 	.word	0x200012b7
 800bb4c:	0801982e 	.word	0x0801982e

0800bb50 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	0016      	movs	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800bb54:	2218      	movs	r2, #24
 800bb56:	1c45      	adds	r5, r0, #1
 800bb58:	4355      	muls	r5, r2
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800bb5a:	4342      	muls	r2, r0
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800bb5c:	4b16      	ldr	r3, [pc, #88]	; (800bbb8 <SEGGER_RTT_WriteNoLock+0x68>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bb5e:	000f      	movs	r7, r1
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800bb60:	18ed      	adds	r5, r5, r3
  switch (pRing->Flags) {
 800bb62:	189b      	adds	r3, r3, r2
 800bb64:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bb66:	2c01      	cmp	r4, #1
 800bb68:	d010      	beq.n	800bb8c <SEGGER_RTT_WriteNoLock+0x3c>
 800bb6a:	2c02      	cmp	r4, #2
 800bb6c:	d01b      	beq.n	800bba6 <SEGGER_RTT_WriteNoLock+0x56>
 800bb6e:	2c00      	cmp	r4, #0
 800bb70:	d11f      	bne.n	800bbb2 <SEGGER_RTT_WriteNoLock+0x62>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800bb72:	0028      	movs	r0, r5
 800bb74:	f7ff ff6c 	bl	800ba50 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 800bb78:	4286      	cmp	r6, r0
 800bb7a:	d805      	bhi.n	800bb88 <SEGGER_RTT_WriteNoLock+0x38>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
 800bb7c:	0032      	movs	r2, r6
 800bb7e:	0039      	movs	r1, r7
 800bb80:	0028      	movs	r0, r5
 800bb82:	f7ff ff6e 	bl	800ba62 <_WriteNoCheck>
 800bb86:	0034      	movs	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
 800bb88:	0020      	movs	r0, r4
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 800bb8c:	0028      	movs	r0, r5
 800bb8e:	f7ff ff5f 	bl	800ba50 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 800bb92:	0034      	movs	r4, r6
 800bb94:	4286      	cmp	r6, r0
 800bb96:	d900      	bls.n	800bb9a <SEGGER_RTT_WriteNoLock+0x4a>
 800bb98:	0004      	movs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 800bb9a:	0022      	movs	r2, r4
 800bb9c:	0039      	movs	r1, r7
 800bb9e:	0028      	movs	r0, r5
 800bba0:	f7ff ff5f 	bl	800ba62 <_WriteNoCheck>
    break;
 800bba4:	e7f0      	b.n	800bb88 <SEGGER_RTT_WriteNoLock+0x38>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800bba6:	0032      	movs	r2, r6
 800bba8:	0028      	movs	r0, r5
 800bbaa:	f7ff ff72 	bl	800ba92 <_WriteBlocking>
 800bbae:	0004      	movs	r4, r0
    break;
 800bbb0:	e7ea      	b.n	800bb88 <SEGGER_RTT_WriteNoLock+0x38>
  switch (pRing->Flags) {
 800bbb2:	2400      	movs	r4, #0
  return Status;
 800bbb4:	e7e8      	b.n	800bb88 <SEGGER_RTT_WriteNoLock+0x38>
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	200012b0 	.word	0x200012b0

0800bbbc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;
  //
  INIT();
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <SEGGER_RTT_Write+0x30>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bbc0:	0004      	movs	r4, r0
  INIT();
 800bbc2:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bbc4:	000e      	movs	r6, r1
 800bbc6:	0017      	movs	r7, r2
  INIT();
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <SEGGER_RTT_Write+0x14>
 800bbcc:	f7ff ff8e 	bl	800baec <_DoInit>
  SEGGER_RTT_LOCK();
 800bbd0:	f3ef 8510 	mrs	r5, PRIMASK
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	f381 8810 	msr	PRIMASK, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800bbda:	003a      	movs	r2, r7
 800bbdc:	0031      	movs	r1, r6
 800bbde:	0020      	movs	r0, r4
 800bbe0:	f7ff ffb6 	bl	800bb50 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800bbe4:	f385 8810 	msr	PRIMASK, r5
  //
  return Status;
}
 800bbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	200012b0 	.word	0x200012b0

0800bbf0 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 800bbf0:	b570      	push	{r4, r5, r6, lr}
 800bbf2:	0005      	movs	r5, r0
  unsigned Len;

  Len = STRLEN(s);
 800bbf4:	0008      	movs	r0, r1
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 800bbf6:	000c      	movs	r4, r1
  Len = STRLEN(s);
 800bbf8:	f7f4 fa86 	bl	8000108 <strlen>
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800bbfc:	0021      	movs	r1, r4
  Len = STRLEN(s);
 800bbfe:	0002      	movs	r2, r0
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800bc00:	0028      	movs	r0, r5
 800bc02:	f7ff ffdb 	bl	800bbbc <SEGGER_RTT_Write>
}
 800bc06:	bd70      	pop	{r4, r5, r6, pc}

0800bc08 <_write>:
*   Low-level write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write(int file, char *ptr, int len) {
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	0014      	movs	r4, r2
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	f7ff ffd5 	bl	800bbbc <SEGGER_RTT_Write>
  return len;
}
 800bc12:	0020      	movs	r0, r4
 800bc14:	bd10      	pop	{r4, pc}

0800bc16 <_StoreChar>:
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
  unsigned Cnt;

  Cnt = p->Cnt;
 800bc16:	6882      	ldr	r2, [r0, #8]
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	0004      	movs	r4, r0
  if ((Cnt + 1u) <= p->BufferSize) {
 800bc1c:	6840      	ldr	r0, [r0, #4]
 800bc1e:	1c53      	adds	r3, r2, #1
 800bc20:	4283      	cmp	r3, r0
 800bc22:	d805      	bhi.n	800bc30 <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
 800bc28:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
 800bc2a:	68e3      	ldr	r3, [r4, #12]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800bc30:	68a2      	ldr	r2, [r4, #8]
 800bc32:	6863      	ldr	r3, [r4, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d109      	bne.n	800bc4c <_StoreChar+0x36>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800bc38:	6821      	ldr	r1, [r4, #0]
 800bc3a:	6920      	ldr	r0, [r4, #16]
 800bc3c:	f7ff ffbe 	bl	800bbbc <SEGGER_RTT_Write>
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	4298      	cmp	r0, r3
 800bc44:	d003      	beq.n	800bc4e <_StoreChar+0x38>
      p->ReturnValue = -1;
 800bc46:	2301      	movs	r3, #1
 800bc48:	425b      	negs	r3, r3
 800bc4a:	60e3      	str	r3, [r4, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800bc4c:	bd10      	pop	{r4, pc}
      p->Cnt = 0u;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60a3      	str	r3, [r4, #8]
}
 800bc52:	e7fb      	b.n	800bc4c <_StoreChar+0x36>

0800bc54 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800bc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc56:	0005      	movs	r5, r0
 800bc58:	0017      	movs	r7, r2
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800bc5a:	0008      	movs	r0, r1
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
 800bc5c:	2601      	movs	r6, #1
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800bc5e:	b085      	sub	sp, #20
 800bc60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc62:	9102      	str	r1, [sp, #8]
 800bc64:	9300      	str	r3, [sp, #0]
  while (Number >= Base) {
 800bc66:	42b8      	cmp	r0, r7
 800bc68:	d219      	bcs.n	800bc9e <_PrintUnsigned+0x4a>
    Number = (Number / Base);
    Width++;
  }
  if (NumDigits > Width) {
 800bc6a:	9a00      	ldr	r2, [sp, #0]
 800bc6c:	9601      	str	r6, [sp, #4]
 800bc6e:	4296      	cmp	r6, r2
 800bc70:	d200      	bcs.n	800bc74 <_PrintUnsigned+0x20>
 800bc72:	9201      	str	r2, [sp, #4]
    Width = NumDigits;
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800bc74:	2301      	movs	r3, #1
 800bc76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc78:	401a      	ands	r2, r3
 800bc7a:	9203      	str	r2, [sp, #12]
 800bc7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc7e:	421a      	tst	r2, r3
 800bc80:	d102      	bne.n	800bc88 <_PrintUnsigned+0x34>
    if (FieldWidth != 0u) {
 800bc82:	2c00      	cmp	r4, #0
 800bc84:	d110      	bne.n	800bca8 <_PrintUnsigned+0x54>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
        c = '0';
      } else {
        c = ' ';
 800bc86:	2400      	movs	r4, #0
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800bc88:	68eb      	ldr	r3, [r5, #12]
  Digit = 1u;
 800bc8a:	2601      	movs	r6, #1
  if (pBufferDesc->ReturnValue >= 0) {
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	db4b      	blt.n	800bd28 <_PrintUnsigned+0xd4>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800bc90:	9b00      	ldr	r3, [sp, #0]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d91f      	bls.n	800bcd6 <_PrintUnsigned+0x82>
        NumDigits--;
 800bc96:	3b01      	subs	r3, #1
 800bc98:	9300      	str	r3, [sp, #0]
        Div = v / Digit;
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
          break;
        }
      }
      Digit *= Base;
 800bc9a:	437e      	muls	r6, r7
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800bc9c:	e7f8      	b.n	800bc90 <_PrintUnsigned+0x3c>
    Number = (Number / Base);
 800bc9e:	0039      	movs	r1, r7
 800bca0:	f7f4 fa62 	bl	8000168 <__udivsi3>
    Width++;
 800bca4:	3601      	adds	r6, #1
 800bca6:	e7de      	b.n	800bc66 <_PrintUnsigned+0x12>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800bca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        c = ' ';
 800bcaa:	2620      	movs	r6, #32
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800bcac:	079b      	lsls	r3, r3, #30
 800bcae:	d504      	bpl.n	800bcba <_PrintUnsigned+0x66>
 800bcb0:	9b00      	ldr	r3, [sp, #0]
        c = '0';
 800bcb2:	3610      	adds	r6, #16
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d000      	beq.n	800bcba <_PrintUnsigned+0x66>
        c = ' ';
 800bcb8:	3e10      	subs	r6, #16
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	42a3      	cmp	r3, r4
 800bcbe:	d2e3      	bcs.n	800bc88 <_PrintUnsigned+0x34>
        _StoreChar(pBufferDesc, c);
 800bcc0:	0031      	movs	r1, r6
 800bcc2:	0028      	movs	r0, r5
 800bcc4:	f7ff ffa7 	bl	800bc16 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800bcc8:	68eb      	ldr	r3, [r5, #12]
        FieldWidth--;
 800bcca:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dbdb      	blt.n	800bc88 <_PrintUnsigned+0x34>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bcd0:	2c00      	cmp	r4, #0
 800bcd2:	d1f2      	bne.n	800bcba <_PrintUnsigned+0x66>
 800bcd4:	e7d7      	b.n	800bc86 <_PrintUnsigned+0x32>
        Div = v / Digit;
 800bcd6:	0031      	movs	r1, r6
 800bcd8:	9802      	ldr	r0, [sp, #8]
 800bcda:	f7f4 fa45 	bl	8000168 <__udivsi3>
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800bcde:	4287      	cmp	r7, r0
 800bce0:	d9db      	bls.n	800bc9a <_PrintUnsigned+0x46>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 800bce2:	9802      	ldr	r0, [sp, #8]
 800bce4:	0031      	movs	r1, r6
 800bce6:	f7f4 fac5 	bl	8000274 <__aeabi_uidivmod>
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800bcea:	4b11      	ldr	r3, [pc, #68]	; (800bd30 <_PrintUnsigned+0xdc>)
 800bcec:	9102      	str	r1, [sp, #8]
 800bcee:	5c19      	ldrb	r1, [r3, r0]
 800bcf0:	0028      	movs	r0, r5
 800bcf2:	f7ff ff90 	bl	800bc16 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800bcf6:	68eb      	ldr	r3, [r5, #12]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	db05      	blt.n	800bd08 <_PrintUnsigned+0xb4>
        break;
      }
      Digit /= Base;
 800bcfc:	0039      	movs	r1, r7
 800bcfe:	0030      	movs	r0, r6
 800bd00:	f7f4 fa32 	bl	8000168 <__udivsi3>
    } while (Digit);
 800bd04:	42be      	cmp	r6, r7
 800bd06:	d211      	bcs.n	800bd2c <_PrintUnsigned+0xd8>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00c      	beq.n	800bd28 <_PrintUnsigned+0xd4>
      if (FieldWidth != 0u) {
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bd0e:	2c00      	cmp	r4, #0
 800bd10:	d00a      	beq.n	800bd28 <_PrintUnsigned+0xd4>
 800bd12:	9b01      	ldr	r3, [sp, #4]
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	d207      	bcs.n	800bd28 <_PrintUnsigned+0xd4>
          FieldWidth--;
          _StoreChar(pBufferDesc, ' ');
 800bd18:	2120      	movs	r1, #32
 800bd1a:	0028      	movs	r0, r5
 800bd1c:	f7ff ff7b 	bl	800bc16 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800bd20:	68eb      	ldr	r3, [r5, #12]
          FieldWidth--;
 800bd22:	3c01      	subs	r4, #1
          if (pBufferDesc->ReturnValue < 0) {
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	daf2      	bge.n	800bd0e <_PrintUnsigned+0xba>
          }
        }
      }
    }
  }
}
 800bd28:	b005      	add	sp, #20
 800bd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Digit /= Base;
 800bd2c:	0006      	movs	r6, r0
 800bd2e:	e7d8      	b.n	800bce2 <_PrintUnsigned+0x8e>
 800bd30:	08019835 	.word	0x08019835

0800bd34 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800bd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd36:	b09f      	sub	sp, #124	; 0x7c
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800bd38:	ab0e      	add	r3, sp, #56	; 0x38
 800bd3a:	9309      	str	r3, [sp, #36]	; 0x24
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800bd3c:	2340      	movs	r3, #64	; 0x40
 800bd3e:	930a      	str	r3, [sp, #40]	; 0x28
  BufferDesc.Cnt            = 0u;
 800bd40:	2300      	movs	r3, #0
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800bd42:	000e      	movs	r6, r1
 800bd44:	0015      	movs	r5, r2
 800bd46:	9007      	str	r0, [sp, #28]
  BufferDesc.Cnt            = 0u;
 800bd48:	930b      	str	r3, [sp, #44]	; 0x2c
  BufferDesc.RTTBufferIndex = BufferIndex;
 800bd4a:	900d      	str	r0, [sp, #52]	; 0x34
  BufferDesc.ReturnValue    = 0;
 800bd4c:	930c      	str	r3, [sp, #48]	; 0x30

  do {
    c = *sFormat;
 800bd4e:	7831      	ldrb	r1, [r6, #0]
    sFormat++;
 800bd50:	3601      	adds	r6, #1
    if (c == 0u) {
 800bd52:	2900      	cmp	r1, #0
 800bd54:	d107      	bne.n	800bd66 <SEGGER_RTT_vprintf+0x32>
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);

  if (BufferDesc.ReturnValue > 0) {
 800bd56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd58:	9303      	str	r3, [sp, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dd00      	ble.n	800bd60 <SEGGER_RTT_vprintf+0x2c>
 800bd5e:	e109      	b.n	800bf74 <SEGGER_RTT_vprintf+0x240>
    if (BufferDesc.Cnt != 0u) {
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
  }
  return BufferDesc.ReturnValue;
 800bd60:	980c      	ldr	r0, [sp, #48]	; 0x30
}
 800bd62:	b01f      	add	sp, #124	; 0x7c
 800bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '%') {
 800bd66:	2925      	cmp	r1, #37	; 0x25
 800bd68:	d000      	beq.n	800bd6c <SEGGER_RTT_vprintf+0x38>
 800bd6a:	e0b3      	b.n	800bed4 <SEGGER_RTT_vprintf+0x1a0>
      FormatFlags = 0u;
 800bd6c:	2700      	movs	r7, #0
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800bd6e:	2208      	movs	r2, #8
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800bd70:	2004      	movs	r0, #4
 800bd72:	e006      	b.n	800bd82 <SEGGER_RTT_vprintf+0x4e>
        switch (c) {
 800bd74:	2b30      	cmp	r3, #48	; 0x30
 800bd76:	d10d      	bne.n	800bd94 <SEGGER_RTT_vprintf+0x60>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e000      	b.n	800bd7e <SEGGER_RTT_vprintf+0x4a>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800bd7c:	2301      	movs	r3, #1
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800bd7e:	431f      	orrs	r7, r3
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800bd80:	000e      	movs	r6, r1
        c = *sFormat;
 800bd82:	7833      	ldrb	r3, [r6, #0]
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800bd84:	1c71      	adds	r1, r6, #1
        switch (c) {
 800bd86:	2b2d      	cmp	r3, #45	; 0x2d
 800bd88:	d0f8      	beq.n	800bd7c <SEGGER_RTT_vprintf+0x48>
 800bd8a:	d8f3      	bhi.n	800bd74 <SEGGER_RTT_vprintf+0x40>
 800bd8c:	2b23      	cmp	r3, #35	; 0x23
 800bd8e:	d010      	beq.n	800bdb2 <SEGGER_RTT_vprintf+0x7e>
 800bd90:	2b2b      	cmp	r3, #43	; 0x2b
 800bd92:	d00c      	beq.n	800bdae <SEGGER_RTT_vprintf+0x7a>
 800bd94:	2400      	movs	r4, #0
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800bd96:	210a      	movs	r1, #10
        c = *sFormat;
 800bd98:	7833      	ldrb	r3, [r6, #0]
        sFormat++;
 800bd9a:	1c72      	adds	r2, r6, #1
        if ((c < '0') || (c > '9')) {
 800bd9c:	0018      	movs	r0, r3
 800bd9e:	3830      	subs	r0, #48	; 0x30
 800bda0:	2809      	cmp	r0, #9
 800bda2:	d808      	bhi.n	800bdb6 <SEGGER_RTT_vprintf+0x82>
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800bda4:	434c      	muls	r4, r1
 800bda6:	3c30      	subs	r4, #48	; 0x30
        sFormat++;
 800bda8:	0016      	movs	r6, r2
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800bdaa:	191c      	adds	r4, r3, r4
        c = *sFormat;
 800bdac:	e7f4      	b.n	800bd98 <SEGGER_RTT_vprintf+0x64>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800bdae:	4307      	orrs	r7, r0
 800bdb0:	e7e6      	b.n	800bd80 <SEGGER_RTT_vprintf+0x4c>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800bdb2:	4317      	orrs	r7, r2
 800bdb4:	e7e4      	b.n	800bd80 <SEGGER_RTT_vprintf+0x4c>
      NumDigits = 0u;
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	9103      	str	r1, [sp, #12]
      if (c == '.') {
 800bdba:	2b2e      	cmp	r3, #46	; 0x2e
 800bdbc:	d10e      	bne.n	800bddc <SEGGER_RTT_vprintf+0xa8>
        sFormat++;
 800bdbe:	0016      	movs	r6, r2
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800bdc0:	200a      	movs	r0, #10
          c = *sFormat;
 800bdc2:	7832      	ldrb	r2, [r6, #0]
          sFormat++;
 800bdc4:	1c71      	adds	r1, r6, #1
          if ((c < '0') || (c > '9')) {
 800bdc6:	0013      	movs	r3, r2
 800bdc8:	3b30      	subs	r3, #48	; 0x30
 800bdca:	2b09      	cmp	r3, #9
 800bdcc:	d806      	bhi.n	800bddc <SEGGER_RTT_vprintf+0xa8>
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800bdce:	9b03      	ldr	r3, [sp, #12]
          sFormat++;
 800bdd0:	000e      	movs	r6, r1
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800bdd2:	4343      	muls	r3, r0
 800bdd4:	3b30      	subs	r3, #48	; 0x30
 800bdd6:	18d3      	adds	r3, r2, r3
 800bdd8:	9303      	str	r3, [sp, #12]
          c = *sFormat;
 800bdda:	e7f2      	b.n	800bdc2 <SEGGER_RTT_vprintf+0x8e>
        if ((c == 'l') || (c == 'h')) {
 800bddc:	2304      	movs	r3, #4
      c = *sFormat;
 800bdde:	7831      	ldrb	r1, [r6, #0]
        if ((c == 'l') || (c == 'h')) {
 800bde0:	000a      	movs	r2, r1
          sFormat++;
 800bde2:	3601      	adds	r6, #1
        if ((c == 'l') || (c == 'h')) {
 800bde4:	439a      	bics	r2, r3
 800bde6:	2a68      	cmp	r2, #104	; 0x68
 800bde8:	d101      	bne.n	800bdee <SEGGER_RTT_vprintf+0xba>
          c = *sFormat;
 800bdea:	7831      	ldrb	r1, [r6, #0]
        if ((c == 'l') || (c == 'h')) {
 800bdec:	e7f8      	b.n	800bde0 <SEGGER_RTT_vprintf+0xac>
      switch (c) {
 800bdee:	2978      	cmp	r1, #120	; 0x78
 800bdf0:	d809      	bhi.n	800be06 <SEGGER_RTT_vprintf+0xd2>
 800bdf2:	296f      	cmp	r1, #111	; 0x6f
 800bdf4:	d80b      	bhi.n	800be0e <SEGGER_RTT_vprintf+0xda>
 800bdf6:	2963      	cmp	r1, #99	; 0x63
 800bdf8:	d067      	beq.n	800beca <SEGGER_RTT_vprintf+0x196>
 800bdfa:	d817      	bhi.n	800be2c <SEGGER_RTT_vprintf+0xf8>
 800bdfc:	2925      	cmp	r1, #37	; 0x25
 800bdfe:	d069      	beq.n	800bed4 <SEGGER_RTT_vprintf+0x1a0>
 800be00:	2958      	cmp	r1, #88	; 0x58
 800be02:	d100      	bne.n	800be06 <SEGGER_RTT_vprintf+0xd2>
 800be04:	e095      	b.n	800bf32 <SEGGER_RTT_vprintf+0x1fe>
  } while (BufferDesc.ReturnValue >= 0);
 800be06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be08:	2b00      	cmp	r3, #0
 800be0a:	daa0      	bge.n	800bd4e <SEGGER_RTT_vprintf+0x1a>
 800be0c:	e7a3      	b.n	800bd56 <SEGGER_RTT_vprintf+0x22>
      switch (c) {
 800be0e:	3970      	subs	r1, #112	; 0x70
 800be10:	0008      	movs	r0, r1
 800be12:	2908      	cmp	r1, #8
 800be14:	d8f7      	bhi.n	800be06 <SEGGER_RTT_vprintf+0xd2>
 800be16:	f7f4 f993 	bl	8000140 <__gnu_thumb1_case_shi>
 800be1a:	00a5      	.short	0x00a5
 800be1c:	fff6fff6 	.word	0xfff6fff6
 800be20:	fff60094 	.word	0xfff60094
 800be24:	fff60083 	.word	0xfff60083
 800be28:	008cfff6 	.word	0x008cfff6
 800be2c:	2964      	cmp	r1, #100	; 0x64
 800be2e:	d1ea      	bne.n	800be06 <SEGGER_RTT_vprintf+0xd2>
        v = va_arg(*pParamList, int);
 800be30:	682b      	ldr	r3, [r5, #0]
 800be32:	1d1a      	adds	r2, r3, #4
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	602a      	str	r2, [r5, #0]
  Number = (v < 0) ? -v : v;
 800be38:	17da      	asrs	r2, r3, #31
 800be3a:	1898      	adds	r0, r3, r2
        v = va_arg(*pParamList, int);
 800be3c:	9304      	str	r3, [sp, #16]
  Width = 1u;
 800be3e:	2301      	movs	r3, #1
  Number = (v < 0) ? -v : v;
 800be40:	4050      	eors	r0, r2
    Width++;
 800be42:	9305      	str	r3, [sp, #20]
  while (Number >= (int)Base) {
 800be44:	2809      	cmp	r0, #9
 800be46:	dc49      	bgt.n	800bedc <SEGGER_RTT_vprintf+0x1a8>
  if (NumDigits > Width) {
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	9a05      	ldr	r2, [sp, #20]
 800be4c:	9306      	str	r3, [sp, #24]
 800be4e:	4293      	cmp	r3, r2
 800be50:	d200      	bcs.n	800be54 <SEGGER_RTT_vprintf+0x120>
 800be52:	9206      	str	r2, [sp, #24]
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800be54:	2c00      	cmp	r4, #0
 800be56:	d005      	beq.n	800be64 <SEGGER_RTT_vprintf+0x130>
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	db01      	blt.n	800be62 <SEGGER_RTT_vprintf+0x12e>
 800be5e:	077b      	lsls	r3, r7, #29
 800be60:	d500      	bpl.n	800be64 <SEGGER_RTT_vprintf+0x130>
    FieldWidth--;
 800be62:	3c01      	subs	r4, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800be64:	2302      	movs	r3, #2
 800be66:	421f      	tst	r7, r3
 800be68:	d002      	beq.n	800be70 <SEGGER_RTT_vprintf+0x13c>
 800be6a:	9b03      	ldr	r3, [sp, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d005      	beq.n	800be7c <SEGGER_RTT_vprintf+0x148>
 800be70:	2301      	movs	r3, #1
 800be72:	421f      	tst	r7, r3
 800be74:	d102      	bne.n	800be7c <SEGGER_RTT_vprintf+0x148>
    if (FieldWidth != 0u) {
 800be76:	2c00      	cmp	r4, #0
 800be78:	d136      	bne.n	800bee8 <SEGGER_RTT_vprintf+0x1b4>
  Width = 1u;
 800be7a:	2400      	movs	r4, #0
  if (pBufferDesc->ReturnValue >= 0) {
 800be7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dbc0      	blt.n	800be06 <SEGGER_RTT_vprintf+0xd2>
    if (v < 0) {
 800be84:	9b04      	ldr	r3, [sp, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	da3a      	bge.n	800bf00 <SEGGER_RTT_vprintf+0x1cc>
      _StoreChar(pBufferDesc, '-');
 800be8a:	212d      	movs	r1, #45	; 0x2d
      v = -v;
 800be8c:	425b      	negs	r3, r3
 800be8e:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '+');
 800be90:	a809      	add	r0, sp, #36	; 0x24
 800be92:	f7ff fec0 	bl	800bc16 <_StoreChar>
    if (pBufferDesc->ReturnValue >= 0) {
 800be96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dbb4      	blt.n	800be06 <SEGGER_RTT_vprintf+0xd2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800be9c:	2303      	movs	r3, #3
 800be9e:	403b      	ands	r3, r7
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d105      	bne.n	800beb0 <SEGGER_RTT_vprintf+0x17c>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d102      	bne.n	800beb0 <SEGGER_RTT_vprintf+0x17c>
        if (FieldWidth != 0u) {
 800beaa:	2c00      	cmp	r4, #0
 800beac:	d12c      	bne.n	800bf08 <SEGGER_RTT_vprintf+0x1d4>
  Width = 1u;
 800beae:	2400      	movs	r4, #0
      if (pBufferDesc->ReturnValue >= 0) {
 800beb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	dba6      	blt.n	800be06 <SEGGER_RTT_vprintf+0xd2>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800beb8:	220a      	movs	r2, #10
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	9904      	ldr	r1, [sp, #16]
 800bebe:	9701      	str	r7, [sp, #4]
 800bec0:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800bec2:	a809      	add	r0, sp, #36	; 0x24
 800bec4:	f7ff fec6 	bl	800bc54 <_PrintUnsigned>
        break;
 800bec8:	e79d      	b.n	800be06 <SEGGER_RTT_vprintf+0xd2>
        v = va_arg(*pParamList, int);
 800beca:	682b      	ldr	r3, [r5, #0]
        c0 = (char)v;
 800becc:	6819      	ldr	r1, [r3, #0]
        v = va_arg(*pParamList, int);
 800bece:	1d1a      	adds	r2, r3, #4
 800bed0:	602a      	str	r2, [r5, #0]
        _StoreChar(&BufferDesc, c0);
 800bed2:	b2c9      	uxtb	r1, r1
      _StoreChar(&BufferDesc, c);
 800bed4:	a809      	add	r0, sp, #36	; 0x24
 800bed6:	f7ff fe9e 	bl	800bc16 <_StoreChar>
 800beda:	e794      	b.n	800be06 <SEGGER_RTT_vprintf+0xd2>
    Number = (Number / (int)Base);
 800bedc:	210a      	movs	r1, #10
 800bede:	f7f4 f9cd 	bl	800027c <__divsi3>
    Width++;
 800bee2:	9b05      	ldr	r3, [sp, #20]
 800bee4:	3301      	adds	r3, #1
 800bee6:	e7ac      	b.n	800be42 <SEGGER_RTT_vprintf+0x10e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bee8:	9b06      	ldr	r3, [sp, #24]
 800beea:	42a3      	cmp	r3, r4
 800beec:	d2c6      	bcs.n	800be7c <SEGGER_RTT_vprintf+0x148>
        _StoreChar(pBufferDesc, ' ');
 800beee:	2120      	movs	r1, #32
 800bef0:	a809      	add	r0, sp, #36	; 0x24
 800bef2:	f7ff fe90 	bl	800bc16 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800bef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        FieldWidth--;
 800bef8:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800befa:	2b00      	cmp	r3, #0
 800befc:	dabb      	bge.n	800be76 <SEGGER_RTT_vprintf+0x142>
 800befe:	e7bd      	b.n	800be7c <SEGGER_RTT_vprintf+0x148>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800bf00:	077b      	lsls	r3, r7, #29
 800bf02:	d5c8      	bpl.n	800be96 <SEGGER_RTT_vprintf+0x162>
      _StoreChar(pBufferDesc, '+');
 800bf04:	212b      	movs	r1, #43	; 0x2b
 800bf06:	e7c3      	b.n	800be90 <SEGGER_RTT_vprintf+0x15c>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bf08:	9b06      	ldr	r3, [sp, #24]
 800bf0a:	42a3      	cmp	r3, r4
 800bf0c:	d2d0      	bcs.n	800beb0 <SEGGER_RTT_vprintf+0x17c>
            _StoreChar(pBufferDesc, '0');
 800bf0e:	2130      	movs	r1, #48	; 0x30
 800bf10:	a809      	add	r0, sp, #36	; 0x24
 800bf12:	f7ff fe80 	bl	800bc16 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800bf16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            FieldWidth--;
 800bf18:	3c01      	subs	r4, #1
            if (pBufferDesc->ReturnValue < 0) {
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	dac5      	bge.n	800beaa <SEGGER_RTT_vprintf+0x176>
 800bf1e:	e7c7      	b.n	800beb0 <SEGGER_RTT_vprintf+0x17c>
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800bf20:	220a      	movs	r2, #10
        v = va_arg(*pParamList, int);
 800bf22:	6829      	ldr	r1, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800bf24:	9701      	str	r7, [sp, #4]
        v = va_arg(*pParamList, int);
 800bf26:	1d0b      	adds	r3, r1, #4
 800bf28:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800bf2e:	6809      	ldr	r1, [r1, #0]
 800bf30:	e7c7      	b.n	800bec2 <SEGGER_RTT_vprintf+0x18e>
        v = va_arg(*pParamList, int);
 800bf32:	6829      	ldr	r1, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800bf34:	9701      	str	r7, [sp, #4]
        v = va_arg(*pParamList, int);
 800bf36:	1d0b      	adds	r3, r1, #4
 800bf38:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800bf3e:	2210      	movs	r2, #16
 800bf40:	e7f5      	b.n	800bf2e <SEGGER_RTT_vprintf+0x1fa>
          const char * s = va_arg(*pParamList, const char *);
 800bf42:	682b      	ldr	r3, [r5, #0]
 800bf44:	1d1a      	adds	r2, r3, #4
 800bf46:	602a      	str	r2, [r5, #0]
 800bf48:	681c      	ldr	r4, [r3, #0]
            c = *s;
 800bf4a:	7821      	ldrb	r1, [r4, #0]
            s++;
 800bf4c:	3401      	adds	r4, #1
            if (c == '\0') {
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	d100      	bne.n	800bf54 <SEGGER_RTT_vprintf+0x220>
 800bf52:	e758      	b.n	800be06 <SEGGER_RTT_vprintf+0xd2>
           _StoreChar(&BufferDesc, c);
 800bf54:	a809      	add	r0, sp, #36	; 0x24
 800bf56:	f7ff fe5e 	bl	800bc16 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800bf5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf5c:	9303      	str	r3, [sp, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	daf3      	bge.n	800bf4a <SEGGER_RTT_vprintf+0x216>
 800bf62:	e750      	b.n	800be06 <SEGGER_RTT_vprintf+0xd2>
        v = va_arg(*pParamList, int);
 800bf64:	6829      	ldr	r1, [r5, #0]
 800bf66:	1d0b      	adds	r3, r1, #4
 800bf68:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	3308      	adds	r3, #8
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	e7e4      	b.n	800bf3e <SEGGER_RTT_vprintf+0x20a>
    if (BufferDesc.Cnt != 0u) {
 800bf74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	d003      	beq.n	800bf82 <SEGGER_RTT_vprintf+0x24e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800bf7a:	9807      	ldr	r0, [sp, #28]
 800bf7c:	a90e      	add	r1, sp, #56	; 0x38
 800bf7e:	f7ff fe1d 	bl	800bbbc <SEGGER_RTT_Write>
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800bf82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf84:	9303      	str	r3, [sp, #12]
 800bf86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf88:	9304      	str	r3, [sp, #16]
 800bf8a:	9a04      	ldr	r2, [sp, #16]
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	4694      	mov	ip, r2
 800bf90:	4463      	add	r3, ip
 800bf92:	930c      	str	r3, [sp, #48]	; 0x30
 800bf94:	e6e4      	b.n	800bd60 <SEGGER_RTT_vprintf+0x2c>

0800bf96 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800bf96:	b40e      	push	{r1, r2, r3}
 800bf98:	b503      	push	{r0, r1, lr}
 800bf9a:	ab03      	add	r3, sp, #12
 800bf9c:	cb02      	ldmia	r3!, {r1}
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800bf9e:	aa01      	add	r2, sp, #4
  va_start(ParamList, sFormat);
 800bfa0:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800bfa2:	f7ff fec7 	bl	800bd34 <SEGGER_RTT_vprintf>
  va_end(ParamList);
  return r;
}
 800bfa6:	b002      	add	sp, #8
 800bfa8:	bc08      	pop	{r3}
 800bfaa:	b003      	add	sp, #12
 800bfac:	4718      	bx	r3

0800bfae <ST25DV_IsDeviceReady>:
  *           This function determines if the ST25DV is ready to answer an I2C request. 
  * @param    Trials Max number of tentative.
  * @retval   int32_t enum status.
  */
int32_t ST25DV_IsDeviceReady(ST25DV_Object_t* pObj,  const uint32_t Trials )
{
 800bfae:	b510      	push	{r4, lr}
  /* Test communication with device */
  return pObj->IO.IsReady(ST25DV_ADDR_DATA_I2C, Trials );
 800bfb0:	6883      	ldr	r3, [r0, #8]
 800bfb2:	20a6      	movs	r0, #166	; 0xa6
 800bfb4:	4798      	blx	r3
}
 800bfb6:	bd10      	pop	{r4, pc}

0800bfb8 <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	000c      	movs	r4, r1
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 800bfbc:	6905      	ldr	r5, [r0, #16]
{
 800bfbe:	0011      	movs	r1, r2
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 800bfc0:	20a6      	movs	r0, #166	; 0xa6
 800bfc2:	0022      	movs	r2, r4
 800bfc4:	47a8      	blx	r5
}
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}

0800bfc8 <ST25DV_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteData(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 800bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfca:	0007      	movs	r7, r0
 800bfcc:	001e      	movs	r6, r3
 800bfce:	b085      	sub	sp, #20
 800bfd0:	9101      	str	r1, [sp, #4]
 800bfd2:	9202      	str	r2, [sp, #8]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800bfd4:	2380      	movs	r3, #128	; 0x80
 800bfd6:	1c35      	adds	r5, r6, #0
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	429e      	cmp	r6, r3
 800bfdc:	d900      	bls.n	800bfe0 <ST25DV_WriteData+0x18>
 800bfde:	1c1d      	adds	r5, r3, #0
 800bfe0:	b2ad      	uxth	r5, r5
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
    }
    /* Write split_data_nb bytes in memory */
    ret = pObj->IO.Write( ST25DV_ADDR_DATA_I2C, mem_addr, pdata_index, split_data_nb);
 800bfe2:	68fc      	ldr	r4, [r7, #12]
 800bfe4:	002b      	movs	r3, r5
 800bfe6:	20a6      	movs	r0, #166	; 0xa6
 800bfe8:	9a01      	ldr	r2, [sp, #4]
 800bfea:	9902      	ldr	r1, [sp, #8]
 800bfec:	47a0      	blx	r4
 800bfee:	1e04      	subs	r4, r0, #0

    if( ret == NFCTAG_OK )
 800bff0:	d111      	bne.n	800c016 <ST25DV_WriteData+0x4e>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	4798      	blx	r3
 800bff6:	9003      	str	r0, [sp, #12]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800bff8:	2101      	movs	r1, #1
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	20a6      	movs	r0, #166	; 0xa6
 800bffe:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c000:	697b      	ldr	r3, [r7, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800c002:	0004      	movs	r4, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c004:	4798      	blx	r3
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	1ac0      	subs	r0, r0, r3
 800c00a:	23a0      	movs	r3, #160	; 0xa0
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	4298      	cmp	r0, r3
 800c010:	d211      	bcs.n	800c036 <ST25DV_WriteData+0x6e>
 800c012:	2c00      	cmp	r4, #0
 800c014:	d1f0      	bne.n	800bff8 <ST25DV_WriteData+0x30>
        ret = NFCTAG_TIMEOUT;
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 800c016:	9b01      	ldr	r3, [sp, #4]
    mem_addr += split_data_nb;
    bytes_to_write -= split_data_nb;
 800c018:	1b76      	subs	r6, r6, r5
    pdata_index += split_data_nb;
 800c01a:	195b      	adds	r3, r3, r5
 800c01c:	9301      	str	r3, [sp, #4]
    mem_addr += split_data_nb;
 800c01e:	9b02      	ldr	r3, [sp, #8]
    bytes_to_write -= split_data_nb;
 800c020:	b2b6      	uxth	r6, r6
    mem_addr += split_data_nb;
 800c022:	195a      	adds	r2, r3, r5
 800c024:	b293      	uxth	r3, r2
 800c026:	9302      	str	r3, [sp, #8]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800c028:	2e00      	cmp	r6, #0
 800c02a:	d001      	beq.n	800c030 <ST25DV_WriteData+0x68>
 800c02c:	2c00      	cmp	r4, #0
 800c02e:	d0d1      	beq.n	800bfd4 <ST25DV_WriteData+0xc>
  
  return ret;
}
 800c030:	0020      	movs	r0, r4
 800c032:	b005      	add	sp, #20
 800c034:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( pollstatus != NFCTAG_OK )
 800c036:	2c00      	cmp	r4, #0
 800c038:	d0ed      	beq.n	800c016 <ST25DV_WriteData+0x4e>
        ret = NFCTAG_TIMEOUT;
 800c03a:	2403      	movs	r4, #3
 800c03c:	4264      	negs	r4, r4
 800c03e:	e7ea      	b.n	800c016 <ST25DV_WriteData+0x4e>

0800c040 <ST25DV_ReadID>:
{
 800c040:	b510      	push	{r4, lr}
  return ST25DV_GetICREF(&(pObj->Ctx), pICRef);
 800c042:	3018      	adds	r0, #24
 800c044:	f000 f98b 	bl	800c35e <ST25DV_GetICREF>
}
 800c048:	bd10      	pop	{r4, pc}

0800c04a <ST25DV_Init>:
  if (pObj->IsInitialized == 0U)
 800c04a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800c04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c04e:	0004      	movs	r4, r0
  if (pObj->IsInitialized == 0U)
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10c      	bne.n	800c06e <ST25DV_Init+0x24>
    ST25DV_ReadID(pObj,&nfctag_id);
 800c054:	466b      	mov	r3, sp
 800c056:	1ddd      	adds	r5, r3, #7
 800c058:	0029      	movs	r1, r5
 800c05a:	f7ff fff1 	bl	800c040 <ST25DV_ReadID>
    if( (nfctag_id != I_AM_ST25DV04) && (nfctag_id != I_AM_ST25DV64) )
 800c05e:	2202      	movs	r2, #2
 800c060:	782b      	ldrb	r3, [r5, #0]
 800c062:	4393      	bics	r3, r2
 800c064:	2b24      	cmp	r3, #36	; 0x24
 800c066:	d002      	beq.n	800c06e <ST25DV_Init+0x24>
      return NFCTAG_ERROR;
 800c068:	2001      	movs	r0, #1
 800c06a:	4240      	negs	r0, r0
}
 800c06c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  pObj->IsInitialized = 1U;
 800c06e:	2301      	movs	r3, #1
  return NFCTAG_OK;
 800c070:	2000      	movs	r0, #0
  pObj->IsInitialized = 1U;
 800c072:	6263      	str	r3, [r4, #36]	; 0x24
  return NFCTAG_OK;
 800c074:	e7fa      	b.n	800c06c <ST25DV_Init+0x22>

0800c076 <ST25DV_GetGPOStatus>:
{
 800c076:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800c078:	466b      	mov	r3, sp
 800c07a:	1ddd      	adds	r5, r3, #7
{
 800c07c:	000c      	movs	r4, r1
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800c07e:	3018      	adds	r0, #24
 800c080:	0029      	movs	r1, r5
 800c082:	f000 f9fa 	bl	800c47a <ST25DV_GetGPO_ALL>
  if( status != NFCTAG_OK )
 800c086:	2800      	cmp	r0, #0
 800c088:	d101      	bne.n	800c08e <ST25DV_GetGPOStatus+0x18>
  *pGPOStatus = (uint16_t)reg_value;
 800c08a:	782b      	ldrb	r3, [r5, #0]
 800c08c:	8023      	strh	r3, [r4, #0]
}
 800c08e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c090 <ST25DV_ConfigureGPO>:
{
 800c090:	b507      	push	{r0, r1, r2, lr}
 800c092:	466b      	mov	r3, sp
 800c094:	80d9      	strh	r1, [r3, #6]
 800c096:	3306      	adds	r3, #6
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 800c098:	0019      	movs	r1, r3
 800c09a:	3018      	adds	r0, #24
 800c09c:	f000 f9f7 	bl	800c48e <ST25DV_SetGPO_ALL>
}
 800c0a0:	bd0e      	pop	{r1, r2, r3, pc}

0800c0a2 <ReadRegWrap>:
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
}

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 800c0a2:	b510      	push	{r4, lr}
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800c0a4:	6904      	ldr	r4, [r0, #16]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800c0a6:	0488      	lsls	r0, r1, #18
 800c0a8:	d502      	bpl.n	800c0b0 <ReadRegWrap+0xe>
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800c0aa:	20a6      	movs	r0, #166	; 0xa6
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800c0ac:	47a0      	blx	r4
  }
}
 800c0ae:	bd10      	pop	{r4, pc}
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800c0b0:	20ae      	movs	r0, #174	; 0xae
 800c0b2:	e7fb      	b.n	800c0ac <ReadRegWrap+0xa>

0800c0b4 <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	0005      	movs	r5, r0
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800c0b8:	68c4      	ldr	r4, [r0, #12]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800c0ba:	0488      	lsls	r0, r1, #18
 800c0bc:	d504      	bpl.n	800c0c8 <WriteRegWrap+0x14>
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800c0be:	20a6      	movs	r0, #166	; 0xa6
 800c0c0:	47a0      	blx	r4
 800c0c2:	0004      	movs	r4, r0
      ret = NFCTAG_TIMEOUT;
    }
  }

  return ret;
}
 800c0c4:	0020      	movs	r0, r4
 800c0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800c0c8:	20ae      	movs	r0, #174	; 0xae
 800c0ca:	47a0      	blx	r4
 800c0cc:	1e04      	subs	r4, r0, #0
  if( ret == NFCTAG_OK )
 800c0ce:	d1f9      	bne.n	800c0c4 <WriteRegWrap+0x10>
    int32_t tickstart = pObj->IO.GetTick();
 800c0d0:	696b      	ldr	r3, [r5, #20]
 800c0d2:	4798      	blx	r3
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c0d4:	27a0      	movs	r7, #160	; 0xa0
    int32_t tickstart = pObj->IO.GetTick();
 800c0d6:	0006      	movs	r6, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c0d8:	007f      	lsls	r7, r7, #1
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 800c0da:	2101      	movs	r1, #1
 800c0dc:	68ab      	ldr	r3, [r5, #8]
 800c0de:	20ae      	movs	r0, #174	; 0xae
 800c0e0:	4798      	blx	r3
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c0e2:	696b      	ldr	r3, [r5, #20]
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 800c0e4:	0004      	movs	r4, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c0e6:	4798      	blx	r3
 800c0e8:	1b80      	subs	r0, r0, r6
 800c0ea:	42b8      	cmp	r0, r7
 800c0ec:	d202      	bcs.n	800c0f4 <WriteRegWrap+0x40>
 800c0ee:	2c00      	cmp	r4, #0
 800c0f0:	d1f3      	bne.n	800c0da <WriteRegWrap+0x26>
 800c0f2:	e7e7      	b.n	800c0c4 <WriteRegWrap+0x10>
    if( pollstatus != NFCTAG_OK )
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	d0e5      	beq.n	800c0c4 <WriteRegWrap+0x10>
      ret = NFCTAG_TIMEOUT;
 800c0f8:	2403      	movs	r4, #3
 800c0fa:	4264      	negs	r4, r4
 800c0fc:	e7e2      	b.n	800c0c4 <WriteRegWrap+0x10>
	...

0800c100 <ST25DV_RegisterBusIO>:
{
 800c100:	b510      	push	{r4, lr}
  if (pObj == NULL)
 800c102:	2800      	cmp	r0, #0
 800c104:	d102      	bne.n	800c10c <ST25DV_RegisterBusIO+0xc>
    ret = NFCTAG_ERROR;
 800c106:	2001      	movs	r0, #1
    } else if (pObj->IO.Init() != 0) {
 800c108:	4240      	negs	r0, r0
}
 800c10a:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit      = pIO->DeInit;
 800c10c:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init        = pIO->Init;
 800c10e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 800c110:	6042      	str	r2, [r0, #4]
    pObj->IO.Write       = pIO->Write;
 800c112:	68ca      	ldr	r2, [r1, #12]
    pObj->IO.Init        = pIO->Init;
 800c114:	6003      	str	r3, [r0, #0]
    pObj->IO.Write       = pIO->Write;
 800c116:	60c2      	str	r2, [r0, #12]
    pObj->IO.Read        = pIO->Read;
 800c118:	690a      	ldr	r2, [r1, #16]
 800c11a:	6102      	str	r2, [r0, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 800c11c:	688a      	ldr	r2, [r1, #8]
 800c11e:	6082      	str	r2, [r0, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 800c120:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800c122:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick     = pIO->GetTick;
 800c124:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800c126:	4a05      	ldr	r2, [pc, #20]	; (800c13c <ST25DV_RegisterBusIO+0x3c>)
 800c128:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800c12a:	4a05      	ldr	r2, [pc, #20]	; (800c140 <ST25DV_RegisterBusIO+0x40>)
 800c12c:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init == NULL)
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0e9      	beq.n	800c106 <ST25DV_RegisterBusIO+0x6>
    } else if (pObj->IO.Init() != 0) {
 800c132:	4798      	blx	r3
 800c134:	1e43      	subs	r3, r0, #1
 800c136:	4198      	sbcs	r0, r3
 800c138:	e7e6      	b.n	800c108 <ST25DV_RegisterBusIO+0x8>
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	0800c0a3 	.word	0x0800c0a3
 800c140:	0800c0b5 	.word	0x0800c0b5

0800c144 <ST25DV_WriteRegister>:
{ 
 800c144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c146:	0007      	movs	r7, r0
 800c148:	001e      	movs	r6, r3
 800c14a:	b085      	sub	sp, #20
 800c14c:	9100      	str	r1, [sp, #0]
 800c14e:	9201      	str	r2, [sp, #4]
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800c150:	2380      	movs	r3, #128	; 0x80
 800c152:	2500      	movs	r5, #0
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	429e      	cmp	r6, r3
 800c158:	d800      	bhi.n	800c15c <ST25DV_WriteRegister+0x18>
 800c15a:	0035      	movs	r5, r6
 800c15c:	b2eb      	uxtb	r3, r5
 800c15e:	9303      	str	r3, [sp, #12]
    ret = pObj->IO.Write( ST25DV_ADDR_SYST_I2C, mem_addr, pdata_index,  split_data_nb);
 800c160:	23ff      	movs	r3, #255	; 0xff
 800c162:	401d      	ands	r5, r3
 800c164:	68fc      	ldr	r4, [r7, #12]
 800c166:	002b      	movs	r3, r5
 800c168:	20ae      	movs	r0, #174	; 0xae
 800c16a:	9a00      	ldr	r2, [sp, #0]
 800c16c:	9901      	ldr	r1, [sp, #4]
 800c16e:	47a0      	blx	r4
 800c170:	1e04      	subs	r4, r0, #0
    if( ret == NFCTAG_OK )
 800c172:	d111      	bne.n	800c198 <ST25DV_WriteRegister+0x54>
      uint32_t tickstart = pObj->IO.GetTick();
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	4798      	blx	r3
 800c178:	9002      	str	r0, [sp, #8]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800c17a:	2101      	movs	r1, #1
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	20a6      	movs	r0, #166	; 0xa6
 800c180:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c182:	697b      	ldr	r3, [r7, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800c184:	0004      	movs	r4, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800c186:	4798      	blx	r3
 800c188:	9b02      	ldr	r3, [sp, #8]
 800c18a:	1ac0      	subs	r0, r0, r3
 800c18c:	23a0      	movs	r3, #160	; 0xa0
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	4298      	cmp	r0, r3
 800c192:	d213      	bcs.n	800c1bc <ST25DV_WriteRegister+0x78>
 800c194:	2c00      	cmp	r4, #0
 800c196:	d1f0      	bne.n	800c17a <ST25DV_WriteRegister+0x36>
    pdata_index += split_data_nb;
 800c198:	9a03      	ldr	r2, [sp, #12]
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	4694      	mov	ip, r2
 800c19e:	4463      	add	r3, ip
 800c1a0:	9300      	str	r3, [sp, #0]
    mem_addr += split_data_nb;
 800c1a2:	9b01      	ldr	r3, [sp, #4]
    bytes_to_write -= split_data_nb;
 800c1a4:	1b76      	subs	r6, r6, r5
    mem_addr += split_data_nb;
 800c1a6:	18ea      	adds	r2, r5, r3
 800c1a8:	b293      	uxth	r3, r2
    bytes_to_write -= split_data_nb;
 800c1aa:	b2b6      	uxth	r6, r6
    mem_addr += split_data_nb;
 800c1ac:	9301      	str	r3, [sp, #4]
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800c1ae:	2e00      	cmp	r6, #0
 800c1b0:	d001      	beq.n	800c1b6 <ST25DV_WriteRegister+0x72>
 800c1b2:	2c00      	cmp	r4, #0
 800c1b4:	d0cc      	beq.n	800c150 <ST25DV_WriteRegister+0xc>
}
 800c1b6:	0020      	movs	r0, r4
 800c1b8:	b005      	add	sp, #20
 800c1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( pollstatus != NFCTAG_OK )
 800c1bc:	2c00      	cmp	r4, #0
 800c1be:	d0eb      	beq.n	800c198 <ST25DV_WriteRegister+0x54>
        ret = NFCTAG_TIMEOUT;
 800c1c0:	2403      	movs	r4, #3
 800c1c2:	4264      	negs	r4, r4
 800c1c4:	e7e8      	b.n	800c198 <ST25DV_WriteRegister+0x54>

0800c1c6 <ST25DV_PresentI2CPassword>:
{
 800c1c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1c8:	000f      	movs	r7, r1
  uint8_t ai2c_message[17] = {0};
 800c1ca:	2100      	movs	r1, #0
{
 800c1cc:	b089      	sub	sp, #36	; 0x24
 800c1ce:	0004      	movs	r4, r0
 800c1d0:	0016      	movs	r6, r2
  uint8_t ai2c_message[17] = {0};
 800c1d2:	a804      	add	r0, sp, #16
 800c1d4:	220d      	movs	r2, #13
 800c1d6:	9103      	str	r1, [sp, #12]
 800c1d8:	f009 ff11 	bl	8015ffe <memset>
  ai2c_message[8] = 0x09;
 800c1dc:	2309      	movs	r3, #9
  uint8_t ai2c_message[17] = {0};
 800c1de:	ad03      	add	r5, sp, #12
  ai2c_message[8] = 0x09;
 800c1e0:	722b      	strb	r3, [r5, #8]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1e2:	2218      	movs	r2, #24
 800c1e4:	002b      	movs	r3, r5
 800c1e6:	0031      	movs	r1, r6
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1e8:	0038      	movs	r0, r7
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1ea:	40d1      	lsrs	r1, r2
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1ec:	40d0      	lsrs	r0, r2
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1ee:	b2c9      	uxtb	r1, r1
  for( i = 0; i < 4; i++ )
 800c1f0:	3a08      	subs	r2, #8
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1f2:	7119      	strb	r1, [r3, #4]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 800c1f4:	7359      	strb	r1, [r3, #13]
  for( i = 0; i < 4; i++ )
 800c1f6:	0011      	movs	r1, r2
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800c1f8:	b2c0      	uxtb	r0, r0
 800c1fa:	7018      	strb	r0, [r3, #0]
    ai2c_message[i + 9] = ai2c_message[i];
 800c1fc:	7258      	strb	r0, [r3, #9]
  for( i = 0; i < 4; i++ )
 800c1fe:	3301      	adds	r3, #1
 800c200:	3108      	adds	r1, #8
 800c202:	d1f0      	bne.n	800c1e6 <ST25DV_PresentI2CPassword+0x20>
  return ST25DV_WriteRegister(pObj, ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 800c204:	2290      	movs	r2, #144	; 0x90
 800c206:	2311      	movs	r3, #17
 800c208:	0029      	movs	r1, r5
 800c20a:	0020      	movs	r0, r4
 800c20c:	0112      	lsls	r2, r2, #4
 800c20e:	f7ff ff99 	bl	800c144 <ST25DV_WriteRegister>
}
 800c212:	b009      	add	sp, #36	; 0x24
 800c214:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c216 <ST25DV_ReadEHMode>:
{
 800c216:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetEH_MODE( &(pObj->Ctx), &reg_value);
 800c218:	466b      	mov	r3, sp
 800c21a:	1ddd      	adds	r5, r3, #7
{
 800c21c:	000c      	movs	r4, r1
  status = ST25DV_GetEH_MODE( &(pObj->Ctx), &reg_value);
 800c21e:	3018      	adds	r0, #24
 800c220:	0029      	movs	r1, r5
 800c222:	f000 f93e 	bl	800c4a2 <ST25DV_GetEH_MODE>
  if( status != NFCTAG_OK )
 800c226:	2800      	cmp	r0, #0
 800c228:	d104      	bne.n	800c234 <ST25DV_ReadEHMode+0x1e>
  if( reg_value )
 800c22a:	782b      	ldrb	r3, [r5, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <ST25DV_ReadEHMode+0x20>
    *pEH_mode = ST25DV_EH_ON_DEMAND;
 800c230:	2301      	movs	r3, #1
 800c232:	7023      	strb	r3, [r4, #0]
}
 800c234:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pEH_mode = ST25DV_EH_ACTIVE_AFTER_BOOT;
 800c236:	7020      	strb	r0, [r4, #0]
 800c238:	e7fc      	b.n	800c234 <ST25DV_ReadEHMode+0x1e>

0800c23a <ST25DV_WriteEHMode>:
{
 800c23a:	b507      	push	{r0, r1, r2, lr}
  reg_value = (uint8_t)EH_mode;
 800c23c:	466b      	mov	r3, sp
 800c23e:	71d9      	strb	r1, [r3, #7]
 800c240:	3307      	adds	r3, #7
  return ST25DV_SetEH_MODE(&(pObj->Ctx), &reg_value);
 800c242:	0019      	movs	r1, r3
 800c244:	3018      	adds	r0, #24
 800c246:	f000 f93d 	bl	800c4c4 <ST25DV_SetEH_MODE>
}
 800c24a:	bd0e      	pop	{r1, r2, r3, pc}

0800c24c <ST25DV_ReadRFMngt>:
{
 800c24c:	b513      	push	{r0, r1, r4, lr}
  uint8_t reg_value = 0;
 800c24e:	466a      	mov	r2, sp
 800c250:	2300      	movs	r3, #0
{
 800c252:	000c      	movs	r4, r1
  status = ST25DV_GetRF_MNGT_ALL(&(pObj->Ctx), &reg_value);
 800c254:	3018      	adds	r0, #24
 800c256:	1dd1      	adds	r1, r2, #7
  uint8_t reg_value = 0;
 800c258:	71d3      	strb	r3, [r2, #7]
  status = ST25DV_GetRF_MNGT_ALL(&(pObj->Ctx), &reg_value);
 800c25a:	f000 f975 	bl	800c548 <ST25DV_GetRF_MNGT_ALL>
  if( status == NFCTAG_OK )
 800c25e:	2800      	cmp	r0, #0
 800c260:	d108      	bne.n	800c274 <ST25DV_ReadRFMngt+0x28>
    if( (reg_value & ST25DV_RF_MNGT_RFDIS_MASK) == ST25DV_RF_MNGT_RFDIS_MASK )
 800c262:	466b      	mov	r3, sp
 800c264:	79da      	ldrb	r2, [r3, #7]
 800c266:	2301      	movs	r3, #1
 800c268:	0011      	movs	r1, r2
 800c26a:	4019      	ands	r1, r3
 800c26c:	7021      	strb	r1, [r4, #0]
    if( (reg_value & ST25DV_RF_MNGT_RFSLEEP_MASK) == ST25DV_RF_MNGT_RFSLEEP_MASK )
 800c26e:	0792      	lsls	r2, r2, #30
 800c270:	d501      	bpl.n	800c276 <ST25DV_ReadRFMngt+0x2a>
      pRF_Mngt->RfSleep = ST25DV_ENABLE;
 800c272:	7063      	strb	r3, [r4, #1]
}
 800c274:	bd16      	pop	{r1, r2, r4, pc}
      pRF_Mngt->RfSleep = ST25DV_DISABLE;
 800c276:	7060      	strb	r0, [r4, #1]
  return status;
 800c278:	e7fc      	b.n	800c274 <ST25DV_ReadRFMngt+0x28>

0800c27a <ST25DV_WriteRFMngt>:
{
 800c27a:	b507      	push	{r0, r1, r2, lr}
 800c27c:	466b      	mov	r3, sp
 800c27e:	71d9      	strb	r1, [r3, #7]
 800c280:	3307      	adds	r3, #7
  return ST25DV_SetRF_MNGT_ALL(&(pObj->Ctx), &Rfmngt);
 800c282:	0019      	movs	r1, r3
 800c284:	3018      	adds	r0, #24
 800c286:	f000 f970 	bl	800c56a <ST25DV_SetRF_MNGT_ALL>
}
 800c28a:	bd0e      	pop	{r1, r2, r3, pc}

0800c28c <ST25DV_ReadMBMode>:
{
 800c28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800c28e:	466b      	mov	r3, sp
 800c290:	1ddd      	adds	r5, r3, #7
{
 800c292:	000c      	movs	r4, r1
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800c294:	3018      	adds	r0, #24
 800c296:	0029      	movs	r1, r5
 800c298:	f000 f86b 	bl	800c372 <ST25DV_GetMB_MODE_RW>
  if( status != NFCTAG_OK )
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d104      	bne.n	800c2aa <ST25DV_ReadMBMode+0x1e>
  if( reg_value  )
 800c2a0:	782b      	ldrb	r3, [r5, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <ST25DV_ReadMBMode+0x20>
    *pMB_mode = ST25DV_ENABLE;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	7023      	strb	r3, [r4, #0]
}
 800c2aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pMB_mode = ST25DV_DISABLE;
 800c2ac:	7020      	strb	r0, [r4, #0]
 800c2ae:	e7fc      	b.n	800c2aa <ST25DV_ReadMBMode+0x1e>

0800c2b0 <ST25DV_WriteMBMode>:
{
 800c2b0:	b507      	push	{r0, r1, r2, lr}
  reg_value = (uint8_t)MB_mode;
 800c2b2:	466b      	mov	r3, sp
 800c2b4:	71d9      	strb	r1, [r3, #7]
 800c2b6:	3307      	adds	r3, #7
  status = ST25DV_SetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800c2b8:	0019      	movs	r1, r3
 800c2ba:	3018      	adds	r0, #24
 800c2bc:	f000 f86a 	bl	800c394 <ST25DV_SetMB_MODE_RW>
}
 800c2c0:	bd0e      	pop	{r1, r2, r3, pc}

0800c2c2 <ST25DV_ReadMBWDG>:
{
 800c2c2:	b510      	push	{r4, lr}
  status = ST25DV_GetMB_WDG_DELAY(&(pObj->Ctx), pWdgDelay);
 800c2c4:	3018      	adds	r0, #24
 800c2c6:	f000 f8a7 	bl	800c418 <ST25DV_GetMB_WDG_DELAY>
}
 800c2ca:	bd10      	pop	{r4, pc}

0800c2cc <ST25DV_WriteMBWDG>:
{
 800c2cc:	b507      	push	{r0, r1, r2, lr}
 800c2ce:	466b      	mov	r3, sp
 800c2d0:	71d9      	strb	r1, [r3, #7]
 800c2d2:	3307      	adds	r3, #7
  return ST25DV_SetMB_WDG_DELAY(&(pObj->Ctx), &WdgDelay);
 800c2d4:	0019      	movs	r1, r3
 800c2d6:	3018      	adds	r0, #24
 800c2d8:	f000 f8af 	bl	800c43a <ST25DV_SetMB_WDG_DELAY>
}
 800c2dc:	bd0e      	pop	{r1, r2, r3, pc}

0800c2de <ST25DV_ReadI2CSecuritySession_Dyn>:
{
 800c2de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetI2C_SSO_DYN_I2CSSO(&(pObj->Ctx), &reg_value);
 800c2e0:	466b      	mov	r3, sp
 800c2e2:	1ddd      	adds	r5, r3, #7
{
 800c2e4:	000c      	movs	r4, r1
  status = ST25DV_GetI2C_SSO_DYN_I2CSSO(&(pObj->Ctx), &reg_value);
 800c2e6:	3018      	adds	r0, #24
 800c2e8:	0029      	movs	r1, r5
 800c2ea:	f000 f97f 	bl	800c5ec <ST25DV_GetI2C_SSO_DYN_I2CSSO>
  if( status != NFCTAG_OK )
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d104      	bne.n	800c2fc <ST25DV_ReadI2CSecuritySession_Dyn+0x1e>
  if( reg_value )
 800c2f2:	782b      	ldrb	r3, [r5, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d002      	beq.n	800c2fe <ST25DV_ReadI2CSecuritySession_Dyn+0x20>
    *pSession = ST25DV_SESSION_OPEN;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	7023      	strb	r3, [r4, #0]
}
 800c2fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pSession = ST25DV_SESSION_CLOSED;
 800c2fe:	7020      	strb	r0, [r4, #0]
 800c300:	e7fc      	b.n	800c2fc <ST25DV_ReadI2CSecuritySession_Dyn+0x1e>

0800c302 <ST25DV_ResetEHENMode_Dyn>:
{
 800c302:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 800c304:	466b      	mov	r3, sp
 800c306:	1dd9      	adds	r1, r3, #7
 800c308:	2300      	movs	r3, #0
  return ST25DV_SetEH_CTRL_DYN_EH_EN(&(pObj->Ctx), &reg_value);
 800c30a:	3018      	adds	r0, #24
  uint8_t reg_value = 0;
 800c30c:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetEH_CTRL_DYN_EH_EN(&(pObj->Ctx), &reg_value);
 800c30e:	f000 f8f9 	bl	800c504 <ST25DV_SetEH_CTRL_DYN_EH_EN>
}
 800c312:	bd0e      	pop	{r1, r2, r3, pc}

0800c314 <ST25DV_WriteRFMngt_Dyn>:
{
 800c314:	b507      	push	{r0, r1, r2, lr}
 800c316:	466b      	mov	r3, sp
 800c318:	71d9      	strb	r1, [r3, #7]
 800c31a:	3307      	adds	r3, #7
  return ST25DV_SetRF_MNGT_DYN_ALL(&(pObj->Ctx), &RF_Mngt);
 800c31c:	0019      	movs	r1, r3
 800c31e:	3018      	adds	r0, #24
 800c320:	f000 f942 	bl	800c5a8 <ST25DV_SetRF_MNGT_DYN_ALL>
}
 800c324:	bd0e      	pop	{r1, r2, r3, pc}

0800c326 <ST25DV_SetMBEN_Dyn>:
{
 800c326:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 1;
 800c328:	466b      	mov	r3, sp
 800c32a:	1dd9      	adds	r1, r3, #7
 800c32c:	2301      	movs	r3, #1
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c32e:	3018      	adds	r0, #24
  uint8_t reg_value = 1;
 800c330:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c332:	f000 f84f 	bl	800c3d4 <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800c336:	bd0e      	pop	{r1, r2, r3, pc}

0800c338 <ST25DV_ResetMBEN_Dyn>:
{
 800c338:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 800c33a:	466b      	mov	r3, sp
 800c33c:	1dd9      	adds	r1, r3, #7
 800c33e:	2300      	movs	r3, #0
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c340:	3018      	adds	r0, #24
  uint8_t reg_value = 0;
 800c342:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800c344:	f000 f846 	bl	800c3d4 <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800c348:	bd0e      	pop	{r1, r2, r3, pc}

0800c34a <ST25DV_ReadReg>:
#include "st25dv_reg.h"

int32_t ST25DV_ReadReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t* Data, uint16_t len)
{
 800c34a:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800c34c:	6844      	ldr	r4, [r0, #4]
 800c34e:	6880      	ldr	r0, [r0, #8]
 800c350:	47a0      	blx	r4
}
 800c352:	bd10      	pop	{r4, pc}

0800c354 <ST25DV_WriteReg>:

int32_t ST25DV_WriteReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t const *Data, uint16_t len)
{
 800c354:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800c356:	6804      	ldr	r4, [r0, #0]
 800c358:	6880      	ldr	r0, [r0, #8]
 800c35a:	47a0      	blx	r4
}
 800c35c:	bd10      	pop	{r4, pc}

0800c35e <ST25DV_GetICREF>:


/**** Copy generated code hereafter ****/
int32_t ST25DV_GetICREF (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c35e:	000a      	movs	r2, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 800c360:	2301      	movs	r3, #1
{
 800c362:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 800c364:	2117      	movs	r1, #23
 800c366:	f7ff fff0 	bl	800c34a <ST25DV_ReadReg>
 800c36a:	1e43      	subs	r3, r0, #1
 800c36c:	4198      	sbcs	r0, r3
 800c36e:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c370:	bd10      	pop	{r4, pc}

0800c372 <ST25DV_GetMB_MODE_RW>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_MODE_RW (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c372:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 800c374:	000a      	movs	r2, r1
{
 800c376:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 800c378:	2301      	movs	r3, #1
 800c37a:	210d      	movs	r1, #13
 800c37c:	f7ff ffe5 	bl	800c34a <ST25DV_ReadReg>
 800c380:	2800      	cmp	r0, #0
 800c382:	d104      	bne.n	800c38e <ST25DV_GetMB_MODE_RW+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_MB_MODE_RW_MASK);
 800c384:	2201      	movs	r2, #1
 800c386:	7823      	ldrb	r3, [r4, #0]
 800c388:	4013      	ands	r3, r2
 800c38a:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_MB_MODE_RW_SHIFT);
  return NFCTAG_OK;
}
 800c38c:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c38e:	2001      	movs	r0, #1
 800c390:	4240      	negs	r0, r0
 800c392:	e7fb      	b.n	800c38c <ST25DV_GetMB_MODE_RW+0x1a>

0800c394 <ST25DV_SetMB_MODE_RW>:

int32_t ST25DV_SetMB_MODE_RW (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c394:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c396:	466a      	mov	r2, sp
{
 800c398:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c39a:	2301      	movs	r3, #1
 800c39c:	210d      	movs	r1, #13
 800c39e:	3207      	adds	r2, #7
{
 800c3a0:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c3a2:	f7ff ffd2 	bl	800c34a <ST25DV_ReadReg>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d112      	bne.n	800c3d0 <ST25DV_SetMB_MODE_RW+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800c3aa:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800c3ac:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800c3ae:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800c3b0:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800c3b2:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800c3b4:	401a      	ands	r2, r3
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	4669      	mov	r1, sp
 800c3ba:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800c3bc:	466a      	mov	r2, sp
 800c3be:	210d      	movs	r1, #13
 800c3c0:	0020      	movs	r0, r4
 800c3c2:	3207      	adds	r2, #7
 800c3c4:	f7ff ffc6 	bl	800c354 <ST25DV_WriteReg>
 800c3c8:	1e43      	subs	r3, r0, #1
 800c3ca:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c3cc:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c3ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	e7fb      	b.n	800c3cc <ST25DV_SetMB_MODE_RW+0x38>

0800c3d4 <ST25DV_SetMB_CTRL_DYN_MBEN>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_MBEN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_CTRL_DYN_MBEN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c3d6:	466a      	mov	r2, sp
{
 800c3d8:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c3da:	2301      	movs	r3, #1
 800c3dc:	490d      	ldr	r1, [pc, #52]	; (800c414 <ST25DV_SetMB_CTRL_DYN_MBEN+0x40>)
 800c3de:	3207      	adds	r2, #7
{
 800c3e0:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c3e2:	f7ff ffb2 	bl	800c34a <ST25DV_ReadReg>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d112      	bne.n	800c410 <ST25DV_SetMB_CTRL_DYN_MBEN+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800c3ea:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800c3ec:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800c3ee:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800c3f0:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800c3f2:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800c3f4:	401a      	ands	r2, r3
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	4669      	mov	r1, sp
 800c3fa:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800c3fc:	466a      	mov	r2, sp
 800c3fe:	0020      	movs	r0, r4
 800c400:	4904      	ldr	r1, [pc, #16]	; (800c414 <ST25DV_SetMB_CTRL_DYN_MBEN+0x40>)
 800c402:	3207      	adds	r2, #7
 800c404:	f7ff ffa6 	bl	800c354 <ST25DV_WriteReg>
 800c408:	1e43      	subs	r3, r0, #1
 800c40a:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c40c:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c40e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c410:	2001      	movs	r0, #1
 800c412:	e7fb      	b.n	800c40c <ST25DV_SetMB_CTRL_DYN_MBEN+0x38>
 800c414:	00002006 	.word	0x00002006

0800c418 <ST25DV_GetMB_WDG_DELAY>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c418:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), (uint8_t *)value, 1))
 800c41a:	000a      	movs	r2, r1
{
 800c41c:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), (uint8_t *)value, 1))
 800c41e:	2301      	movs	r3, #1
 800c420:	210e      	movs	r1, #14
 800c422:	f7ff ff92 	bl	800c34a <ST25DV_ReadReg>
 800c426:	2800      	cmp	r0, #0
 800c428:	d104      	bne.n	800c434 <ST25DV_GetMB_WDG_DELAY+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_MB_WDG_DELAY_MASK);
 800c42a:	2207      	movs	r2, #7
 800c42c:	7823      	ldrb	r3, [r4, #0]
 800c42e:	4013      	ands	r3, r2
 800c430:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_MB_WDG_DELAY_SHIFT);
  return NFCTAG_OK;
}
 800c432:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c434:	2001      	movs	r0, #1
 800c436:	4240      	negs	r0, r0
 800c438:	e7fb      	b.n	800c432 <ST25DV_GetMB_WDG_DELAY+0x1a>

0800c43a <ST25DV_SetMB_WDG_DELAY>:

int32_t ST25DV_SetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c43a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c43c:	466a      	mov	r2, sp
{
 800c43e:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c440:	2301      	movs	r3, #1
 800c442:	210e      	movs	r1, #14
 800c444:	3207      	adds	r2, #7
{
 800c446:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c448:	f7ff ff7f 	bl	800c34a <ST25DV_ReadReg>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d112      	bne.n	800c476 <ST25DV_SetMB_WDG_DELAY+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800c450:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c452:	2107      	movs	r1, #7
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800c454:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c456:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800c458:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c45a:	400b      	ands	r3, r1
 800c45c:	4313      	orrs	r3, r2
 800c45e:	466a      	mov	r2, sp

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c460:	0020      	movs	r0, r4
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800c462:	71d3      	strb	r3, [r2, #7]
  if( ST25DV_WriteReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800c464:	2301      	movs	r3, #1
 800c466:	1852      	adds	r2, r2, r1
 800c468:	1849      	adds	r1, r1, r1
 800c46a:	f7ff ff73 	bl	800c354 <ST25DV_WriteReg>
 800c46e:	1e43      	subs	r3, r0, #1
 800c470:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c472:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c474:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c476:	2001      	movs	r0, #1
 800c478:	e7fb      	b.n	800c472 <ST25DV_SetMB_WDG_DELAY+0x38>

0800c47a <ST25DV_GetGPO_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c47a:	000a      	movs	r2, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 800c47c:	2301      	movs	r3, #1
{
 800c47e:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 800c480:	2100      	movs	r1, #0
 800c482:	f7ff ff62 	bl	800c34a <ST25DV_ReadReg>
 800c486:	1e43      	subs	r3, r0, #1
 800c488:	4198      	sbcs	r0, r3
 800c48a:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c48c:	bd10      	pop	{r4, pc}

0800c48e <ST25DV_SetGPO_ALL>:

int32_t ST25DV_SetGPO_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c48e:	000a      	movs	r2, r1
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 800c490:	2301      	movs	r3, #1
{
 800c492:	b510      	push	{r4, lr}
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 800c494:	2100      	movs	r1, #0
 800c496:	f7ff ff5d 	bl	800c354 <ST25DV_WriteReg>
 800c49a:	1e43      	subs	r3, r0, #1
 800c49c:	4198      	sbcs	r0, r3
 800c49e:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c4a0:	bd10      	pop	{r4, pc}

0800c4a2 <ST25DV_GetEH_MODE>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetEH_MODE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c4a2:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800c4a4:	000a      	movs	r2, r1
{
 800c4a6:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	2102      	movs	r1, #2
 800c4ac:	f7ff ff4d 	bl	800c34a <ST25DV_ReadReg>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d104      	bne.n	800c4be <ST25DV_GetEH_MODE+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_EH_MODE_MASK);
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	7823      	ldrb	r3, [r4, #0]
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_EH_MODE_SHIFT);
  return NFCTAG_OK;
}
 800c4bc:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c4be:	2001      	movs	r0, #1
 800c4c0:	4240      	negs	r0, r0
 800c4c2:	e7fb      	b.n	800c4bc <ST25DV_GetEH_MODE+0x1a>

0800c4c4 <ST25DV_SetEH_MODE>:

int32_t ST25DV_SetEH_MODE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c4c6:	466a      	mov	r2, sp
{
 800c4c8:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	2102      	movs	r1, #2
 800c4ce:	3207      	adds	r2, #7
{
 800c4d0:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c4d2:	f7ff ff3a 	bl	800c34a <ST25DV_ReadReg>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d112      	bne.n	800c500 <ST25DV_SetEH_MODE+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800c4da:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800c4dc:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800c4de:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800c4e0:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800c4e2:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800c4e4:	401a      	ands	r2, r3
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	4669      	mov	r1, sp
 800c4ea:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800c4ec:	466a      	mov	r2, sp
 800c4ee:	2102      	movs	r1, #2
 800c4f0:	0020      	movs	r0, r4
 800c4f2:	3207      	adds	r2, #7
 800c4f4:	f7ff ff2e 	bl	800c354 <ST25DV_WriteReg>
 800c4f8:	1e43      	subs	r3, r0, #1
 800c4fa:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c4fc:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c4fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c500:	2001      	movs	r0, #1
 800c502:	e7fb      	b.n	800c4fc <ST25DV_SetEH_MODE+0x38>

0800c504 <ST25DV_SetEH_CTRL_DYN_EH_EN>:
  *value = *value >> (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetEH_CTRL_DYN_EH_EN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c504:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c506:	466a      	mov	r2, sp
{
 800c508:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c50a:	2301      	movs	r3, #1
 800c50c:	490d      	ldr	r1, [pc, #52]	; (800c544 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x40>)
 800c50e:	3207      	adds	r2, #7
{
 800c510:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c512:	f7ff ff1a 	bl	800c34a <ST25DV_ReadReg>
 800c516:	2800      	cmp	r0, #0
 800c518:	d112      	bne.n	800c540 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800c51a:	4669      	mov	r1, sp
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800c51c:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800c51e:	79c9      	ldrb	r1, [r1, #7]
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800c520:	782a      	ldrb	r2, [r5, #0]
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800c522:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800c524:	401a      	ands	r2, r3
 800c526:	430a      	orrs	r2, r1
 800c528:	4669      	mov	r1, sp
 800c52a:	71ca      	strb	r2, [r1, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800c52c:	466a      	mov	r2, sp
 800c52e:	0020      	movs	r0, r4
 800c530:	4904      	ldr	r1, [pc, #16]	; (800c544 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x40>)
 800c532:	3207      	adds	r2, #7
 800c534:	f7ff ff0e 	bl	800c354 <ST25DV_WriteReg>
 800c538:	1e43      	subs	r3, r0, #1
 800c53a:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c53c:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c53e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c540:	2001      	movs	r0, #1
 800c542:	e7fb      	b.n	800c53c <ST25DV_SetEH_CTRL_DYN_EH_EN+0x38>
 800c544:	00002002 	.word	0x00002002

0800c548 <ST25DV_GetRF_MNGT_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetRF_MNGT_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c548:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), (uint8_t *)value, 1))
 800c54a:	000a      	movs	r2, r1
{
 800c54c:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), (uint8_t *)value, 1))
 800c54e:	2301      	movs	r3, #1
 800c550:	2103      	movs	r1, #3
 800c552:	f7ff fefa 	bl	800c34a <ST25DV_ReadReg>
 800c556:	2800      	cmp	r0, #0
 800c558:	d104      	bne.n	800c564 <ST25DV_GetRF_MNGT_ALL+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_RF_MNGT_ALL_MASK);
 800c55a:	2203      	movs	r2, #3
 800c55c:	7823      	ldrb	r3, [r4, #0]
 800c55e:	4013      	ands	r3, r2
 800c560:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_RF_MNGT_ALL_SHIFT);
  return NFCTAG_OK;
}
 800c562:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c564:	2001      	movs	r0, #1
 800c566:	4240      	negs	r0, r0
 800c568:	e7fb      	b.n	800c562 <ST25DV_GetRF_MNGT_ALL+0x1a>

0800c56a <ST25DV_SetRF_MNGT_ALL>:

int32_t ST25DV_SetRF_MNGT_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c56a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c56c:	466a      	mov	r2, sp
{
 800c56e:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c570:	2301      	movs	r3, #1
 800c572:	2103      	movs	r1, #3
 800c574:	3207      	adds	r2, #7
{
 800c576:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c578:	f7ff fee7 	bl	800c34a <ST25DV_ReadReg>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d111      	bne.n	800c5a4 <ST25DV_SetRF_MNGT_ALL+0x3a>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800c580:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c582:	2103      	movs	r1, #3
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800c584:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c586:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800c588:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c58a:	400b      	ands	r3, r1
 800c58c:	4313      	orrs	r3, r2
 800c58e:	466a      	mov	r2, sp

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c590:	0020      	movs	r0, r4
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800c592:	71d3      	strb	r3, [r2, #7]
  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800c594:	2301      	movs	r3, #1
 800c596:	3207      	adds	r2, #7
 800c598:	f7ff fedc 	bl	800c354 <ST25DV_WriteReg>
 800c59c:	1e43      	subs	r3, r0, #1
 800c59e:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c5a0:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c5a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	e7fb      	b.n	800c5a0 <ST25DV_SetRF_MNGT_ALL+0x36>

0800c5a8 <ST25DV_SetRF_MNGT_DYN_ALL>:
  *value = *value >> (ST25DV_RF_MNGT_DYN_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRF_MNGT_DYN_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800c5a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c5aa:	466a      	mov	r2, sp
{
 800c5ac:	000d      	movs	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	490d      	ldr	r1, [pc, #52]	; (800c5e8 <ST25DV_SetRF_MNGT_DYN_ALL+0x40>)
 800c5b2:	3207      	adds	r2, #7
{
 800c5b4:	0004      	movs	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c5b6:	f7ff fec8 	bl	800c34a <ST25DV_ReadReg>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d112      	bne.n	800c5e4 <ST25DV_SetRF_MNGT_DYN_ALL+0x3c>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800c5be:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c5c0:	2103      	movs	r1, #3
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800c5c2:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c5c4:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800c5c6:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c5c8:	400b      	ands	r3, r1
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	466a      	mov	r2, sp

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c5ce:	0020      	movs	r0, r4
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800c5d0:	71d3      	strb	r3, [r2, #7]
  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800c5d2:	4905      	ldr	r1, [pc, #20]	; (800c5e8 <ST25DV_SetRF_MNGT_DYN_ALL+0x40>)
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	3207      	adds	r2, #7
 800c5d8:	f7ff febc 	bl	800c354 <ST25DV_WriteReg>
 800c5dc:	1e43      	subs	r3, r0, #1
 800c5de:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800c5e0:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800c5e2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    return NFCTAG_ERROR;
 800c5e4:	2001      	movs	r0, #1
 800c5e6:	e7fb      	b.n	800c5e0 <ST25DV_SetRF_MNGT_DYN_ALL+0x38>
 800c5e8:	00002003 	.word	0x00002003

0800c5ec <ST25DV_GetI2C_SSO_DYN_I2CSSO>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetI2C_SSO_DYN_I2CSSO (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800c5ec:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_I2C_SSO_DYN_REG), (uint8_t *)value, 1))
 800c5ee:	000a      	movs	r2, r1
{
 800c5f0:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_I2C_SSO_DYN_REG), (uint8_t *)value, 1))
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	4906      	ldr	r1, [pc, #24]	; (800c610 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x24>)
 800c5f6:	f7ff fea8 	bl	800c34a <ST25DV_ReadReg>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d104      	bne.n	800c608 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_I2C_SSO_DYN_I2CSSO_MASK);
 800c5fe:	2201      	movs	r2, #1
 800c600:	7823      	ldrb	r3, [r4, #0]
 800c602:	4013      	ands	r3, r2
 800c604:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_I2C_SSO_DYN_I2CSSO_SHIFT);
  return NFCTAG_OK;
}
 800c606:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800c608:	2001      	movs	r0, #1
 800c60a:	4240      	negs	r0, r0
 800c60c:	e7fb      	b.n	800c606 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x1a>
 800c60e:	46c0      	nop			; (mov r8, r8)
 800c610:	00002004 	.word	0x00002004

0800c614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c618:	20fa      	movs	r0, #250	; 0xfa
 800c61a:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <HAL_InitTick+0x3c>)
 800c61c:	0080      	lsls	r0, r0, #2
 800c61e:	7819      	ldrb	r1, [r3, #0]
 800c620:	f7f3 fda2 	bl	8000168 <__udivsi3>
 800c624:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <HAL_InitTick+0x40>)
 800c626:	0001      	movs	r1, r0
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	f7f3 fd9d 	bl	8000168 <__udivsi3>
 800c62e:	f000 fbaf 	bl	800cd90 <HAL_SYSTICK_Config>
 800c632:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800c634:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c636:	2c00      	cmp	r4, #0
 800c638:	d109      	bne.n	800c64e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c63a:	2d03      	cmp	r5, #3
 800c63c:	d807      	bhi.n	800c64e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c63e:	3802      	subs	r0, #2
 800c640:	0022      	movs	r2, r4
 800c642:	0029      	movs	r1, r5
 800c644:	f000 fb60 	bl	800cd08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c648:	0020      	movs	r0, r4
 800c64a:	4b03      	ldr	r3, [pc, #12]	; (800c658 <HAL_InitTick+0x44>)
 800c64c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	200000d4 	.word	0x200000d4
 800c654:	200001cc 	.word	0x200001cc
 800c658:	200000d8 	.word	0x200000d8

0800c65c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800c65c:	2340      	movs	r3, #64	; 0x40
 800c65e:	4a08      	ldr	r2, [pc, #32]	; (800c680 <HAL_Init+0x24>)
{
 800c660:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800c662:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c664:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800c666:	430b      	orrs	r3, r1
 800c668:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c66a:	f7ff ffd3 	bl	800c614 <HAL_InitTick>
 800c66e:	1e04      	subs	r4, r0, #0
 800c670:	d103      	bne.n	800c67a <HAL_Init+0x1e>
    HAL_MspInit();
 800c672:	f007 fde9 	bl	8014248 <HAL_MspInit>
}
 800c676:	0020      	movs	r0, r4
 800c678:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800c67a:	2401      	movs	r4, #1
 800c67c:	e7fb      	b.n	800c676 <HAL_Init+0x1a>
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	40022000 	.word	0x40022000

0800c684 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800c684:	4a03      	ldr	r2, [pc, #12]	; (800c694 <HAL_IncTick+0x10>)
 800c686:	4b04      	ldr	r3, [pc, #16]	; (800c698 <HAL_IncTick+0x14>)
 800c688:	6811      	ldr	r1, [r2, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	185b      	adds	r3, r3, r1
 800c68e:	6013      	str	r3, [r2, #0]
}
 800c690:	4770      	bx	lr
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	20001768 	.word	0x20001768
 800c698:	200000d4 	.word	0x200000d4

0800c69c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800c69c:	4b01      	ldr	r3, [pc, #4]	; (800c6a4 <HAL_GetTick+0x8>)
 800c69e:	6818      	ldr	r0, [r3, #0]
}
 800c6a0:	4770      	bx	lr
 800c6a2:	46c0      	nop			; (mov r8, r8)
 800c6a4:	20001768 	.word	0x20001768

0800c6a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c6ac:	f7ff fff6 	bl	800c69c <HAL_GetTick>
 800c6b0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c6b2:	1c63      	adds	r3, r4, #1
 800c6b4:	d002      	beq.n	800c6bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800c6b6:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <HAL_Delay+0x20>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c6bc:	f7ff ffee 	bl	800c69c <HAL_GetTick>
 800c6c0:	1b40      	subs	r0, r0, r5
 800c6c2:	42a0      	cmp	r0, r4
 800c6c4:	d3fa      	bcc.n	800c6bc <HAL_Delay+0x14>
  {
  }
}
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	200000d4 	.word	0x200000d4

0800c6cc <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800c6cc:	4b01      	ldr	r3, [pc, #4]	; (800c6d4 <HAL_GetUIDw0+0x8>)
 800c6ce:	6818      	ldr	r0, [r3, #0]
}
 800c6d0:	4770      	bx	lr
 800c6d2:	46c0      	nop			; (mov r8, r8)
 800c6d4:	1ff80050 	.word	0x1ff80050

0800c6d8 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800c6d8:	4b01      	ldr	r3, [pc, #4]	; (800c6e0 <HAL_GetUIDw1+0x8>)
 800c6da:	6818      	ldr	r0, [r3, #0]
}
 800c6dc:	4770      	bx	lr
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	1ff80054 	.word	0x1ff80054

0800c6e4 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800c6e4:	4b01      	ldr	r3, [pc, #4]	; (800c6ec <HAL_GetUIDw2+0x8>)
 800c6e6:	6818      	ldr	r0, [r3, #0]
}
 800c6e8:	4770      	bx	lr
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	1ff80064 	.word	0x1ff80064

0800c6f0 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c6f0:	4b08      	ldr	r3, [pc, #32]	; (800c714 <ADC_DelayMicroSecond+0x24>)
{
 800c6f2:	b513      	push	{r0, r1, r4, lr}
 800c6f4:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c6f6:	4908      	ldr	r1, [pc, #32]	; (800c718 <ADC_DelayMicroSecond+0x28>)
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	f7f3 fd35 	bl	8000168 <__udivsi3>
 800c6fe:	4344      	muls	r4, r0
 800c700:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d100      	bne.n	800c70a <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800c708:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800c70a:	9b01      	ldr	r3, [sp, #4]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	9301      	str	r3, [sp, #4]
 800c710:	e7f7      	b.n	800c702 <ADC_DelayMicroSecond+0x12>
 800c712:	46c0      	nop			; (mov r8, r8)
 800c714:	200001cc 	.word	0x200001cc
 800c718:	000f4240 	.word	0x000f4240

0800c71c <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c71c:	2103      	movs	r1, #3
 800c71e:	6803      	ldr	r3, [r0, #0]
{
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c724:	6898      	ldr	r0, [r3, #8]
 800c726:	4008      	ands	r0, r1
 800c728:	2801      	cmp	r0, #1
 800c72a:	d001      	beq.n	800c730 <ADC_Disable+0x14>
  return HAL_OK;
 800c72c:	2000      	movs	r0, #0
}
 800c72e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	4202      	tst	r2, r0
 800c734:	d0fa      	beq.n	800c72c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800c736:	2205      	movs	r2, #5
 800c738:	689d      	ldr	r5, [r3, #8]
 800c73a:	4015      	ands	r5, r2
 800c73c:	2d01      	cmp	r5, #1
 800c73e:	d11d      	bne.n	800c77c <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 800c740:	6898      	ldr	r0, [r3, #8]
 800c742:	3a03      	subs	r2, #3
 800c744:	4302      	orrs	r2, r0
 800c746:	609a      	str	r2, [r3, #8]
 800c748:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800c74a:	f7ff ffa7 	bl	800c69c <HAL_GetTick>
 800c74e:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	422b      	tst	r3, r5
 800c756:	d0e9      	beq.n	800c72c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c758:	f7ff ffa0 	bl	800c69c <HAL_GetTick>
 800c75c:	1b80      	subs	r0, r0, r6
 800c75e:	280a      	cmp	r0, #10
 800c760:	d9f6      	bls.n	800c750 <ADC_Disable+0x34>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	422b      	tst	r3, r5
 800c768:	d0f2      	beq.n	800c750 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c76a:	2310      	movs	r3, #16
 800c76c:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 800c76e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c770:	4313      	orrs	r3, r2
 800c772:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c774:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c776:	431d      	orrs	r5, r3
 800c778:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 800c77a:	e7d8      	b.n	800c72e <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c77c:	2310      	movs	r3, #16
 800c77e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c780:	4313      	orrs	r3, r2
 800c782:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c786:	4303      	orrs	r3, r0
 800c788:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800c78a:	e7d0      	b.n	800c72e <ADC_Disable+0x12>

0800c78c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c78c:	2103      	movs	r1, #3
 800c78e:	6803      	ldr	r3, [r0, #0]
{
 800c790:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c792:	689a      	ldr	r2, [r3, #8]
{
 800c794:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c796:	400a      	ands	r2, r1
 800c798:	2a01      	cmp	r2, #1
 800c79a:	d104      	bne.n	800c7a6 <ADC_Enable+0x1a>
 800c79c:	6819      	ldr	r1, [r3, #0]
 800c79e:	4211      	tst	r1, r2
 800c7a0:	d001      	beq.n	800c7a6 <ADC_Enable+0x1a>
  return HAL_OK;
 800c7a2:	2000      	movs	r0, #0
}
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c7a6:	6899      	ldr	r1, [r3, #8]
 800c7a8:	4a15      	ldr	r2, [pc, #84]	; (800c800 <ADC_Enable+0x74>)
 800c7aa:	4211      	tst	r1, r2
 800c7ac:	d008      	beq.n	800c7c0 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7ae:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c7b0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c7b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7ba:	4303      	orrs	r3, r0
 800c7bc:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800c7be:	e7f1      	b.n	800c7a4 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800c7c0:	2501      	movs	r5, #1
 800c7c2:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c7c4:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800c7c6:	432a      	orrs	r2, r5
 800c7c8:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c7ca:	f7ff ff91 	bl	800c6f0 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800c7ce:	f7ff ff65 	bl	800c69c <HAL_GetTick>
 800c7d2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	422b      	tst	r3, r5
 800c7da:	d1e2      	bne.n	800c7a2 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c7dc:	f7ff ff5e 	bl	800c69c <HAL_GetTick>
 800c7e0:	1b80      	subs	r0, r0, r6
 800c7e2:	280a      	cmp	r0, #10
 800c7e4:	d9f6      	bls.n	800c7d4 <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	422b      	tst	r3, r5
 800c7ec:	d1f2      	bne.n	800c7d4 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7ee:	2310      	movs	r3, #16
 800c7f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 800c7f2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c7f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7fa:	431d      	orrs	r5, r3
 800c7fc:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 800c7fe:	e7d1      	b.n	800c7a4 <ADC_Enable+0x18>
 800c800:	80000017 	.word	0x80000017

0800c804 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800c804:	2204      	movs	r2, #4
 800c806:	6803      	ldr	r3, [r0, #0]
{
 800c808:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800c80a:	6899      	ldr	r1, [r3, #8]
{
 800c80c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800c80e:	4211      	tst	r1, r2
 800c810:	d101      	bne.n	800c816 <ADC_ConversionStop+0x12>
  return HAL_OK;
 800c812:	2000      	movs	r0, #0
}
 800c814:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800c816:	6899      	ldr	r1, [r3, #8]
 800c818:	4211      	tst	r1, r2
 800c81a:	d006      	beq.n	800c82a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800c81c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800c81e:	0792      	lsls	r2, r2, #30
 800c820:	d403      	bmi.n	800c82a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800c822:	2210      	movs	r2, #16
 800c824:	6899      	ldr	r1, [r3, #8]
 800c826:	430a      	orrs	r2, r1
 800c828:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800c82a:	f7ff ff37 	bl	800c69c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800c82e:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800c830:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	4233      	tst	r3, r6
 800c838:	d0eb      	beq.n	800c812 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c83a:	f7ff ff2f 	bl	800c69c <HAL_GetTick>
 800c83e:	1b40      	subs	r0, r0, r5
 800c840:	280a      	cmp	r0, #10
 800c842:	d9f6      	bls.n	800c832 <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	4233      	tst	r3, r6
 800c84a:	d0f2      	beq.n	800c832 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c84c:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c84e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c850:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c852:	4313      	orrs	r3, r2
 800c854:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c858:	4303      	orrs	r3, r0
 800c85a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800c85c:	e7da      	b.n	800c814 <ADC_ConversionStop+0x10>
	...

0800c860 <HAL_ADC_Init>:
{
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	0004      	movs	r4, r0
    return HAL_ERROR;
 800c864:	2001      	movs	r0, #1
  if(hadc == NULL)
 800c866:	2c00      	cmp	r4, #0
 800c868:	d01b      	beq.n	800c8a2 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c86a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d106      	bne.n	800c87e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800c870:	0022      	movs	r2, r4
 800c872:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800c874:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800c876:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800c878:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800c87a:	f003 f853 	bl	800f924 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800c87e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c880:	06db      	lsls	r3, r3, #27
 800c882:	d406      	bmi.n	800c892 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	2204      	movs	r2, #4
 800c888:	6899      	ldr	r1, [r3, #8]
 800c88a:	0008      	movs	r0, r1
 800c88c:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800c88e:	4211      	tst	r1, r2
 800c890:	d008      	beq.n	800c8a4 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c892:	2310      	movs	r3, #16
 800c894:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800c896:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c898:	4313      	orrs	r3, r2
 800c89a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800c89c:	2300      	movs	r3, #0
 800c89e:	3450      	adds	r4, #80	; 0x50
 800c8a0:	7023      	strb	r3, [r4, #0]
}
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800c8a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c8a6:	4955      	ldr	r1, [pc, #340]	; (800c9fc <HAL_ADC_Init+0x19c>)
 800c8a8:	4011      	ands	r1, r2
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c8b0:	2203      	movs	r2, #3
 800c8b2:	6899      	ldr	r1, [r3, #8]
 800c8b4:	4011      	ands	r1, r2
 800c8b6:	4a52      	ldr	r2, [pc, #328]	; (800ca00 <HAL_ADC_Init+0x1a0>)
 800c8b8:	2901      	cmp	r1, #1
 800c8ba:	d102      	bne.n	800c8c2 <HAL_ADC_Init+0x62>
 800c8bc:	681d      	ldr	r5, [r3, #0]
 800c8be:	420d      	tst	r5, r1
 800c8c0:	d119      	bne.n	800c8f6 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800c8c2:	2680      	movs	r6, #128	; 0x80
 800c8c4:	6861      	ldr	r1, [r4, #4]
 800c8c6:	05f6      	lsls	r6, r6, #23
 800c8c8:	004d      	lsls	r5, r1, #1
 800c8ca:	086d      	lsrs	r5, r5, #1
 800c8cc:	42b5      	cmp	r5, r6
 800c8ce:	d003      	beq.n	800c8d8 <HAL_ADC_Init+0x78>
 800c8d0:	2580      	movs	r5, #128	; 0x80
 800c8d2:	062d      	lsls	r5, r5, #24
 800c8d4:	42a9      	cmp	r1, r5
 800c8d6:	d176      	bne.n	800c9c6 <HAL_ADC_Init+0x166>
 800c8d8:	691d      	ldr	r5, [r3, #16]
 800c8da:	00ad      	lsls	r5, r5, #2
 800c8dc:	08ad      	lsrs	r5, r5, #2
 800c8de:	611d      	str	r5, [r3, #16]
 800c8e0:	691d      	ldr	r5, [r3, #16]
 800c8e2:	4329      	orrs	r1, r5
 800c8e4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800c8e6:	2518      	movs	r5, #24
 800c8e8:	68d9      	ldr	r1, [r3, #12]
 800c8ea:	43a9      	bics	r1, r5
 800c8ec:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800c8ee:	68d9      	ldr	r1, [r3, #12]
 800c8f0:	68a5      	ldr	r5, [r4, #8]
 800c8f2:	4329      	orrs	r1, r5
 800c8f4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800c8f6:	6811      	ldr	r1, [r2, #0]
 800c8f8:	4d42      	ldr	r5, [pc, #264]	; (800ca04 <HAL_ADC_Init+0x1a4>)
 800c8fa:	4029      	ands	r1, r5
 800c8fc:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800c8fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c900:	6815      	ldr	r5, [r2, #0]
 800c902:	0649      	lsls	r1, r1, #25
 800c904:	4329      	orrs	r1, r5
 800c906:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800c908:	2280      	movs	r2, #128	; 0x80
 800c90a:	6899      	ldr	r1, [r3, #8]
 800c90c:	0552      	lsls	r2, r2, #21
 800c90e:	4211      	tst	r1, r2
 800c910:	d102      	bne.n	800c918 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800c912:	6899      	ldr	r1, [r3, #8]
 800c914:	430a      	orrs	r2, r1
 800c916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	493b      	ldr	r1, [pc, #236]	; (800ca08 <HAL_ADC_Init+0x1a8>)
 800c91c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c91e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c920:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c922:	68dd      	ldr	r5, [r3, #12]
 800c924:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c926:	2902      	cmp	r1, #2
 800c928:	d100      	bne.n	800c92c <HAL_ADC_Init+0xcc>
 800c92a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c92c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c92e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c930:	4332      	orrs	r2, r6
 800c932:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c934:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c936:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c938:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c93a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800c93c:	69e5      	ldr	r5, [r4, #28]
 800c93e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c940:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c942:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c944:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c946:	0025      	movs	r5, r4
 800c948:	352c      	adds	r5, #44	; 0x2c
 800c94a:	782d      	ldrb	r5, [r5, #0]
 800c94c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c94e:	432a      	orrs	r2, r5
 800c950:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c952:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c954:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c956:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c958:	30ff      	adds	r0, #255	; 0xff
 800c95a:	4282      	cmp	r2, r0
 800c95c:	d004      	beq.n	800c968 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c95e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c960:	68d8      	ldr	r0, [r3, #12]
 800c962:	432a      	orrs	r2, r5
 800c964:	4302      	orrs	r2, r0
 800c966:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c968:	1ca2      	adds	r2, r4, #2
 800c96a:	7fd2      	ldrb	r2, [r2, #31]
 800c96c:	2a01      	cmp	r2, #1
 800c96e:	d106      	bne.n	800c97e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800c970:	2900      	cmp	r1, #0
 800c972:	d134      	bne.n	800c9de <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800c974:	2280      	movs	r2, #128	; 0x80
 800c976:	68d9      	ldr	r1, [r3, #12]
 800c978:	0252      	lsls	r2, r2, #9
 800c97a:	430a      	orrs	r2, r1
 800c97c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800c97e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800c980:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800c982:	2901      	cmp	r1, #1
 800c984:	d133      	bne.n	800c9ee <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800c986:	4821      	ldr	r0, [pc, #132]	; (800ca0c <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800c988:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800c98a:	4002      	ands	r2, r0
 800c98c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800c98e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c990:	6918      	ldr	r0, [r3, #16]
 800c992:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800c994:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800c996:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800c998:	4302      	orrs	r2, r0
 800c99a:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800c99c:	691a      	ldr	r2, [r3, #16]
 800c99e:	4311      	orrs	r1, r2
 800c9a0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c9a2:	2107      	movs	r1, #7
 800c9a4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800c9a6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c9a8:	438a      	bics	r2, r1
 800c9aa:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800c9ac:	695a      	ldr	r2, [r3, #20]
 800c9ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800c9b4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800c9b6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800c9b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c9ba:	4393      	bics	r3, r2
 800c9bc:	001a      	movs	r2, r3
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800c9c4:	e76d      	b.n	800c8a2 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800c9c6:	691d      	ldr	r5, [r3, #16]
 800c9c8:	4e11      	ldr	r6, [pc, #68]	; (800ca10 <HAL_ADC_Init+0x1b0>)
 800c9ca:	00ad      	lsls	r5, r5, #2
 800c9cc:	08ad      	lsrs	r5, r5, #2
 800c9ce:	611d      	str	r5, [r3, #16]
 800c9d0:	6815      	ldr	r5, [r2, #0]
 800c9d2:	4035      	ands	r5, r6
 800c9d4:	6015      	str	r5, [r2, #0]
 800c9d6:	6815      	ldr	r5, [r2, #0]
 800c9d8:	4329      	orrs	r1, r5
 800c9da:	6011      	str	r1, [r2, #0]
 800c9dc:	e783      	b.n	800c8e6 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c9de:	2120      	movs	r1, #32
 800c9e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9e2:	4301      	orrs	r1, r0
 800c9e4:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c9e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	65a2      	str	r2, [r4, #88]	; 0x58
 800c9ec:	e7c7      	b.n	800c97e <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	420a      	tst	r2, r1
 800c9f2:	d0d6      	beq.n	800c9a2 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800c9f4:	691a      	ldr	r2, [r3, #16]
 800c9f6:	438a      	bics	r2, r1
 800c9f8:	611a      	str	r2, [r3, #16]
 800c9fa:	e7d2      	b.n	800c9a2 <HAL_ADC_Init+0x142>
 800c9fc:	fffffefd 	.word	0xfffffefd
 800ca00:	40012708 	.word	0x40012708
 800ca04:	fdffffff 	.word	0xfdffffff
 800ca08:	fffe0219 	.word	0xfffe0219
 800ca0c:	fffffc03 	.word	0xfffffc03
 800ca10:	ffc3ffff 	.word	0xffc3ffff

0800ca14 <HAL_ADC_Start_DMA>:
{
 800ca14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca16:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ca18:	6802      	ldr	r2, [r0, #0]
{
 800ca1a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ca1c:	6893      	ldr	r3, [r2, #8]
{
 800ca1e:	000e      	movs	r6, r1
    tmp_hal_status = HAL_BUSY;
 800ca20:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ca22:	075b      	lsls	r3, r3, #29
 800ca24:	d42f      	bmi.n	800ca86 <HAL_ADC_Start_DMA+0x72>
    __HAL_LOCK(hadc);
 800ca26:	0027      	movs	r7, r4
 800ca28:	3750      	adds	r7, #80	; 0x50
 800ca2a:	783b      	ldrb	r3, [r7, #0]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d02a      	beq.n	800ca86 <HAL_ADC_Start_DMA+0x72>
 800ca30:	2301      	movs	r3, #1
 800ca32:	703b      	strb	r3, [r7, #0]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800ca34:	68d1      	ldr	r1, [r2, #12]
 800ca36:	430b      	orrs	r3, r1
 800ca38:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ca3a:	69e3      	ldr	r3, [r4, #28]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d123      	bne.n	800ca88 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State,
 800ca40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ca42:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <HAL_ADC_Start_DMA+0x80>)
      ADC_CLEAR_ERRORCODE(hadc);
 800ca44:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ca46:	401a      	ands	r2, r3
 800ca48:	2380      	movs	r3, #128	; 0x80
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800ca50:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800ca52:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ca54:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ca56:	4b10      	ldr	r3, [pc, #64]	; (800ca98 <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ca58:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ca5a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ca5c:	4b0f      	ldr	r3, [pc, #60]	; (800ca9c <HAL_ADC_Start_DMA+0x88>)
 800ca5e:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ca60:	4b0f      	ldr	r3, [pc, #60]	; (800caa0 <HAL_ADC_Start_DMA+0x8c>)
 800ca62:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ca64:	231c      	movs	r3, #28
 800ca66:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ca68:	684a      	ldr	r2, [r1, #4]
 800ca6a:	3b0c      	subs	r3, #12
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ca70:	0032      	movs	r2, r6
 800ca72:	9b01      	ldr	r3, [sp, #4]
 800ca74:	3140      	adds	r1, #64	; 0x40
 800ca76:	f000 f9f7 	bl	800ce68 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ca7a:	2304      	movs	r3, #4
 800ca7c:	0028      	movs	r0, r5
 800ca7e:	6822      	ldr	r2, [r4, #0]
 800ca80:	6891      	ldr	r1, [r2, #8]
 800ca82:	430b      	orrs	r3, r1
 800ca84:	6093      	str	r3, [r2, #8]
}
 800ca86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800ca88:	0020      	movs	r0, r4
 800ca8a:	f7ff fe7f 	bl	800c78c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d0d6      	beq.n	800ca40 <HAL_ADC_Start_DMA+0x2c>
 800ca92:	e7f8      	b.n	800ca86 <HAL_ADC_Start_DMA+0x72>
 800ca94:	fffff0fe 	.word	0xfffff0fe
 800ca98:	0800cb21 	.word	0x0800cb21
 800ca9c:	0800cb93 	.word	0x0800cb93
 800caa0:	0800cb9f 	.word	0x0800cb9f

0800caa4 <HAL_ADC_Stop_DMA>:
{
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800caa6:	0006      	movs	r6, r0
 800caa8:	3650      	adds	r6, #80	; 0x50
 800caaa:	7833      	ldrb	r3, [r6, #0]
{
 800caac:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800caae:	2402      	movs	r4, #2
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d024      	beq.n	800cafe <HAL_ADC_Stop_DMA+0x5a>
 800cab4:	2701      	movs	r7, #1
 800cab6:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800cab8:	f7ff fea4 	bl	800c804 <ADC_ConversionStop>
 800cabc:	1e04      	subs	r4, r0, #0
  if (tmp_hal_status == HAL_OK)
 800cabe:	d11c      	bne.n	800cafa <HAL_ADC_Stop_DMA+0x56>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800cac0:	682a      	ldr	r2, [r5, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800cac2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800cac4:	68d3      	ldr	r3, [r2, #12]
 800cac6:	43bb      	bics	r3, r7
 800cac8:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800caca:	1d83      	adds	r3, r0, #6
 800cacc:	7fdb      	ldrb	r3, [r3, #31]
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d107      	bne.n	800cae2 <HAL_ADC_Stop_DMA+0x3e>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800cad2:	f000 fa09 	bl	800cee8 <HAL_DMA_Abort>
 800cad6:	1e04      	subs	r4, r0, #0
      if (tmp_hal_status != HAL_OK)
 800cad8:	d003      	beq.n	800cae2 <HAL_ADC_Stop_DMA+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800cada:	2340      	movs	r3, #64	; 0x40
 800cadc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800cade:	4313      	orrs	r3, r2
 800cae0:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800cae2:	2110      	movs	r1, #16
 800cae4:	682a      	ldr	r2, [r5, #0]
      tmp_hal_status = ADC_Disable(hadc);
 800cae6:	0028      	movs	r0, r5
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800cae8:	6853      	ldr	r3, [r2, #4]
 800caea:	438b      	bics	r3, r1
 800caec:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800caee:	2c00      	cmp	r4, #0
 800caf0:	d107      	bne.n	800cb02 <HAL_ADC_Stop_DMA+0x5e>
      tmp_hal_status = ADC_Disable(hadc);
 800caf2:	f7ff fe13 	bl	800c71c <ADC_Disable>
 800caf6:	1e04      	subs	r4, r0, #0
    if (tmp_hal_status == HAL_OK)
 800caf8:	d006      	beq.n	800cb08 <HAL_ADC_Stop_DMA+0x64>
  __HAL_UNLOCK(hadc);
 800cafa:	2300      	movs	r3, #0
 800cafc:	7033      	strb	r3, [r6, #0]
}
 800cafe:	0020      	movs	r0, r4
 800cb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 800cb02:	f7ff fe0b 	bl	800c71c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800cb06:	e7f8      	b.n	800cafa <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 800cb08:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800cb0a:	4a03      	ldr	r2, [pc, #12]	; (800cb18 <HAL_ADC_Stop_DMA+0x74>)
 800cb0c:	401a      	ands	r2, r3
 800cb0e:	2301      	movs	r3, #1
 800cb10:	4313      	orrs	r3, r2
 800cb12:	656b      	str	r3, [r5, #84]	; 0x54
 800cb14:	e7f1      	b.n	800cafa <HAL_ADC_Stop_DMA+0x56>
 800cb16:	46c0      	nop			; (mov r8, r8)
 800cb18:	fffffefe 	.word	0xfffffefe

0800cb1c <HAL_ADC_ConvCpltCallback>:
 800cb1c:	4770      	bx	lr
	...

0800cb20 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800cb20:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cb22:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800cb24:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800cb26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb28:	4211      	tst	r1, r2
 800cb2a:	d12b      	bne.n	800cb84 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cb2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb2e:	32b1      	adds	r2, #177	; 0xb1
 800cb30:	32ff      	adds	r2, #255	; 0xff
 800cb32:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800cb34:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cb36:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	0109      	lsls	r1, r1, #4
 800cb3c:	68d0      	ldr	r0, [r2, #12]
 800cb3e:	4208      	tst	r0, r1
 800cb40:	d113      	bne.n	800cb6a <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800cb42:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800cb44:	7fc9      	ldrb	r1, [r1, #31]
 800cb46:	2900      	cmp	r1, #0
 800cb48:	d10f      	bne.n	800cb6a <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800cb4a:	6811      	ldr	r1, [r2, #0]
 800cb4c:	0709      	lsls	r1, r1, #28
 800cb4e:	d50c      	bpl.n	800cb6a <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800cb50:	6891      	ldr	r1, [r2, #8]
 800cb52:	0749      	lsls	r1, r1, #29
 800cb54:	d40d      	bmi.n	800cb72 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800cb56:	200c      	movs	r0, #12
 800cb58:	6851      	ldr	r1, [r2, #4]
 800cb5a:	4381      	bics	r1, r0
 800cb5c:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800cb5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb60:	490a      	ldr	r1, [pc, #40]	; (800cb8c <ADC_DMAConvCplt+0x6c>)
 800cb62:	4011      	ands	r1, r2
 800cb64:	2201      	movs	r2, #1
 800cb66:	430a      	orrs	r2, r1
 800cb68:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f7ff ffd6 	bl	800cb1c <HAL_ADC_ConvCpltCallback>
}
 800cb70:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cb72:	2220      	movs	r2, #32
 800cb74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb76:	430a      	orrs	r2, r1
 800cb78:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	659a      	str	r2, [r3, #88]	; 0x58
 800cb82:	e7f2      	b.n	800cb6a <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800cb84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb88:	4798      	blx	r3
}
 800cb8a:	e7f1      	b.n	800cb70 <ADC_DMAConvCplt+0x50>
 800cb8c:	fffffefe 	.word	0xfffffefe

0800cb90 <HAL_ADC_ConvHalfCpltCallback>:
 800cb90:	4770      	bx	lr

0800cb92 <ADC_DMAHalfConvCplt>:
{
 800cb92:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800cb94:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800cb96:	f7ff fffb 	bl	800cb90 <HAL_ADC_ConvHalfCpltCallback>
}
 800cb9a:	bd10      	pop	{r4, pc}

0800cb9c <HAL_ADC_ErrorCallback>:
 800cb9c:	4770      	bx	lr

0800cb9e <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800cb9e:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cba0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800cba2:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800cba4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800cba6:	4313      	orrs	r3, r2
 800cba8:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800cbaa:	2304      	movs	r3, #4
 800cbac:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 800cbb2:	f7ff fff3 	bl	800cb9c <HAL_ADC_ErrorCallback>
}
 800cbb6:	bd10      	pop	{r4, pc}

0800cbb8 <HAL_ADC_ConfigChannel>:
{
 800cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800cbba:	0004      	movs	r4, r0
 800cbbc:	3450      	adds	r4, #80	; 0x50
 800cbbe:	7822      	ldrb	r2, [r4, #0]
{
 800cbc0:	0003      	movs	r3, r0
 800cbc2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800cbc4:	2002      	movs	r0, #2
 800cbc6:	2a01      	cmp	r2, #1
 800cbc8:	d00b      	beq.n	800cbe2 <HAL_ADC_ConfigChannel+0x2a>
 800cbca:	3801      	subs	r0, #1
 800cbcc:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	6891      	ldr	r1, [r2, #8]
 800cbd2:	0749      	lsls	r1, r1, #29
 800cbd4:	d506      	bpl.n	800cbe4 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800cbde:	2300      	movs	r3, #0
 800cbe0:	7023      	strb	r3, [r4, #0]
}
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cbe4:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cbe6:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800cbe8:	4e19      	ldr	r6, [pc, #100]	; (800cc50 <HAL_ADC_ConfigChannel+0x98>)
 800cbea:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cbec:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cbee:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cbf0:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cbf2:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 800cbf4:	42b7      	cmp	r7, r6
 800cbf6:	d019      	beq.n	800cc2c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cbf8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800cbfa:	4301      	orrs	r1, r0
 800cbfc:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d008      	beq.n	800cc14 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800cc02:	2380      	movs	r3, #128	; 0x80
 800cc04:	4a13      	ldr	r2, [pc, #76]	; (800cc54 <HAL_ADC_ConfigChannel+0x9c>)
 800cc06:	041b      	lsls	r3, r3, #16
 800cc08:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800cc0a:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800cc0c:	430b      	orrs	r3, r1
 800cc0e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800cc10:	f7ff fd6e 	bl	800c6f0 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	039b      	lsls	r3, r3, #14
 800cc18:	d505      	bpl.n	800cc26 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800cc1a:	2380      	movs	r3, #128	; 0x80
 800cc1c:	4a0d      	ldr	r2, [pc, #52]	; (800cc54 <HAL_ADC_ConfigChannel+0x9c>)
 800cc1e:	03db      	lsls	r3, r3, #15
 800cc20:	6811      	ldr	r1, [r2, #0]
 800cc22:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800cc24:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800cc26:	2000      	movs	r0, #0
 800cc28:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800cc2a:	e7da      	b.n	800cbe2 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800cc2c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800cc2e:	438d      	bics	r5, r1
 800cc30:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d004      	beq.n	800cc40 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800cc36:	4a07      	ldr	r2, [pc, #28]	; (800cc54 <HAL_ADC_ConfigChannel+0x9c>)
 800cc38:	4907      	ldr	r1, [pc, #28]	; (800cc58 <HAL_ADC_ConfigChannel+0xa0>)
 800cc3a:	6813      	ldr	r3, [r2, #0]
 800cc3c:	400b      	ands	r3, r1
 800cc3e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800cc40:	0383      	lsls	r3, r0, #14
 800cc42:	d5f0      	bpl.n	800cc26 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800cc44:	4a03      	ldr	r2, [pc, #12]	; (800cc54 <HAL_ADC_ConfigChannel+0x9c>)
 800cc46:	4905      	ldr	r1, [pc, #20]	; (800cc5c <HAL_ADC_ConfigChannel+0xa4>)
 800cc48:	6813      	ldr	r3, [r2, #0]
 800cc4a:	400b      	ands	r3, r1
 800cc4c:	e7ea      	b.n	800cc24 <HAL_ADC_ConfigChannel+0x6c>
 800cc4e:	46c0      	nop			; (mov r8, r8)
 800cc50:	00001001 	.word	0x00001001
 800cc54:	40012708 	.word	0x40012708
 800cc58:	ff7fffff 	.word	0xff7fffff
 800cc5c:	ffbfffff 	.word	0xffbfffff

0800cc60 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cc62:	0005      	movs	r5, r0
 800cc64:	3550      	adds	r5, #80	; 0x50
 800cc66:	782b      	ldrb	r3, [r5, #0]
{
 800cc68:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800cc6a:	2002      	movs	r0, #2
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d048      	beq.n	800cd02 <HAL_ADCEx_Calibration_Start+0xa2>
 800cc70:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cc72:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 800cc74:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	6898      	ldr	r0, [r3, #8]
 800cc7a:	4010      	ands	r0, r2
 800cc7c:	2801      	cmp	r0, #1
 800cc7e:	d109      	bne.n	800cc94 <HAL_ADCEx_Calibration_Start+0x34>
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	4202      	tst	r2, r0
 800cc84:	d006      	beq.n	800cc94 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cc86:	2320      	movs	r3, #32
 800cc88:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cc8e:	2300      	movs	r3, #0
 800cc90:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800cc92:	e036      	b.n	800cd02 <HAL_ADCEx_Calibration_Start+0xa2>
    ADC_STATE_CLR_SET(hadc->State, 
 800cc94:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cc96:	491b      	ldr	r1, [pc, #108]	; (800cd04 <HAL_ADCEx_Calibration_Start+0xa4>)
 800cc98:	4011      	ands	r1, r2
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cc9e:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800cca0:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cca2:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	438a      	bics	r2, r1
 800cca8:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800ccaa:	2280      	movs	r2, #128	; 0x80
 800ccac:	6899      	ldr	r1, [r3, #8]
 800ccae:	0612      	lsls	r2, r2, #24
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800ccb4:	f7ff fcf2 	bl	800c69c <HAL_GetTick>
 800ccb8:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	689a      	ldr	r2, [r3, #8]
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	db0c      	blt.n	800ccdc <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800ccc2:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800ccc4:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800ccc6:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800ccc8:	430e      	orrs	r6, r1
 800ccca:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800cccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ccce:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800ccd0:	4393      	bics	r3, r2
 800ccd2:	001a      	movs	r2, r3
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	6563      	str	r3, [r4, #84]	; 0x54
 800ccda:	e7d8      	b.n	800cc8e <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800ccdc:	f7ff fcde 	bl	800c69c <HAL_GetTick>
 800cce0:	1bc0      	subs	r0, r0, r7
 800cce2:	280a      	cmp	r0, #10
 800cce4:	d9e9      	bls.n	800ccba <HAL_ADCEx_Calibration_Start+0x5a>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dae5      	bge.n	800ccba <HAL_ADCEx_Calibration_Start+0x5a>
          ADC_STATE_CLR_SET(hadc->State,
 800ccee:	2212      	movs	r2, #18
 800ccf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800ccf2:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 800ccf4:	4393      	bics	r3, r2
 800ccf6:	001a      	movs	r2, r3
 800ccf8:	2310      	movs	r3, #16
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 800ccfe:	2300      	movs	r3, #0
 800cd00:	702b      	strb	r3, [r5, #0]
}
 800cd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd04:	fffffefd 	.word	0xfffffefd

0800cd08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cd08:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cd0a:	25ff      	movs	r5, #255	; 0xff
 800cd0c:	2403      	movs	r4, #3
 800cd0e:	002a      	movs	r2, r5
 800cd10:	4004      	ands	r4, r0
 800cd12:	00e4      	lsls	r4, r4, #3
 800cd14:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800cd16:	0189      	lsls	r1, r1, #6
 800cd18:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cd1a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800cd1c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cd1e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800cd20:	2800      	cmp	r0, #0
 800cd22:	db0a      	blt.n	800cd3a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cd24:	24c0      	movs	r4, #192	; 0xc0
 800cd26:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <HAL_NVIC_SetPriority+0x4c>)
 800cd28:	0880      	lsrs	r0, r0, #2
 800cd2a:	0080      	lsls	r0, r0, #2
 800cd2c:	18c0      	adds	r0, r0, r3
 800cd2e:	00a4      	lsls	r4, r4, #2
 800cd30:	5903      	ldr	r3, [r0, r4]
 800cd32:	401a      	ands	r2, r3
 800cd34:	4311      	orrs	r1, r2
 800cd36:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800cd38:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cd3a:	200f      	movs	r0, #15
 800cd3c:	4003      	ands	r3, r0
 800cd3e:	3b08      	subs	r3, #8
 800cd40:	4805      	ldr	r0, [pc, #20]	; (800cd58 <HAL_NVIC_SetPriority+0x50>)
 800cd42:	089b      	lsrs	r3, r3, #2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	181b      	adds	r3, r3, r0
 800cd48:	69d8      	ldr	r0, [r3, #28]
 800cd4a:	4002      	ands	r2, r0
 800cd4c:	4311      	orrs	r1, r2
 800cd4e:	61d9      	str	r1, [r3, #28]
 800cd50:	e7f2      	b.n	800cd38 <HAL_NVIC_SetPriority+0x30>
 800cd52:	46c0      	nop			; (mov r8, r8)
 800cd54:	e000e100 	.word	0xe000e100
 800cd58:	e000ed00 	.word	0xe000ed00

0800cd5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	db05      	blt.n	800cd6c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd60:	231f      	movs	r3, #31
 800cd62:	4018      	ands	r0, r3
 800cd64:	3b1e      	subs	r3, #30
 800cd66:	4083      	lsls	r3, r0
 800cd68:	4a01      	ldr	r2, [pc, #4]	; (800cd70 <HAL_NVIC_EnableIRQ+0x14>)
 800cd6a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800cd6c:	4770      	bx	lr
 800cd6e:	46c0      	nop			; (mov r8, r8)
 800cd70:	e000e100 	.word	0xe000e100

0800cd74 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cd74:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd78:	4b03      	ldr	r3, [pc, #12]	; (800cd88 <HAL_NVIC_SystemReset+0x14>)
 800cd7a:	4a04      	ldr	r2, [pc, #16]	; (800cd8c <HAL_NVIC_SystemReset+0x18>)
 800cd7c:	60da      	str	r2, [r3, #12]
 800cd7e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cd82:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800cd84:	e7fd      	b.n	800cd82 <HAL_NVIC_SystemReset+0xe>
 800cd86:	46c0      	nop			; (mov r8, r8)
 800cd88:	e000ed00 	.word	0xe000ed00
 800cd8c:	05fa0004 	.word	0x05fa0004

0800cd90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cd90:	2280      	movs	r2, #128	; 0x80
 800cd92:	1e43      	subs	r3, r0, #1
 800cd94:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800cd96:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d20d      	bcs.n	800cdb8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cd9c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cd9e:	4a07      	ldr	r2, [pc, #28]	; (800cdbc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cda0:	4807      	ldr	r0, [pc, #28]	; (800cdc0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cda2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800cda4:	6a03      	ldr	r3, [r0, #32]
 800cda6:	0609      	lsls	r1, r1, #24
 800cda8:	021b      	lsls	r3, r3, #8
 800cdaa:	0a1b      	lsrs	r3, r3, #8
 800cdac:	430b      	orrs	r3, r1
 800cdae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cdb0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cdb2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cdb4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cdb6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800cdb8:	4770      	bx	lr
 800cdba:	46c0      	nop			; (mov r8, r8)
 800cdbc:	e000e010 	.word	0xe000e010
 800cdc0:	e000ed00 	.word	0xe000ed00

0800cdc4 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	db07      	blt.n	800cdd8 <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cdc8:	231f      	movs	r3, #31
 800cdca:	22c0      	movs	r2, #192	; 0xc0
 800cdcc:	4018      	ands	r0, r3
 800cdce:	3b1e      	subs	r3, #30
 800cdd0:	4083      	lsls	r3, r0
 800cdd2:	4902      	ldr	r1, [pc, #8]	; (800cddc <HAL_NVIC_ClearPendingIRQ+0x18>)
 800cdd4:	0052      	lsls	r2, r2, #1
 800cdd6:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800cdd8:	4770      	bx	lr
 800cdda:	46c0      	nop			; (mov r8, r8)
 800cddc:	e000e100 	.word	0xe000e100

0800cde0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800cde4:	2001      	movs	r0, #1
  if(hdma == NULL)
 800cde6:	2c00      	cmp	r4, #0
 800cde8:	d035      	beq.n	800ce56 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cdea:	6825      	ldr	r5, [r4, #0]
 800cdec:	4b1a      	ldr	r3, [pc, #104]	; (800ce58 <HAL_DMA_Init+0x78>)
 800cdee:	2114      	movs	r1, #20
 800cdf0:	18e8      	adds	r0, r5, r3
 800cdf2:	f7f3 f9b9 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800cdf6:	4b19      	ldr	r3, [pc, #100]	; (800ce5c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cdf8:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800cdfa:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ce00:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800ce02:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ce04:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ce06:	4b16      	ldr	r3, [pc, #88]	; (800ce60 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ce08:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ce0a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 800ce0c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ce0e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800ce10:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ce12:	433b      	orrs	r3, r7
 800ce14:	6967      	ldr	r7, [r4, #20]
 800ce16:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ce18:	69a7      	ldr	r7, [r4, #24]
 800ce1a:	433b      	orrs	r3, r7
 800ce1c:	69e7      	ldr	r7, [r4, #28]
 800ce1e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800ce20:	6a27      	ldr	r7, [r4, #32]
 800ce22:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800ce24:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ce26:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ce28:	2380      	movs	r3, #128	; 0x80
 800ce2a:	01db      	lsls	r3, r3, #7
 800ce2c:	4299      	cmp	r1, r3
 800ce2e:	d00c      	beq.n	800ce4a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ce30:	251c      	movs	r5, #28
 800ce32:	4028      	ands	r0, r5
 800ce34:	3d0d      	subs	r5, #13
 800ce36:	4085      	lsls	r5, r0
 800ce38:	490a      	ldr	r1, [pc, #40]	; (800ce64 <HAL_DMA_Init+0x84>)
 800ce3a:	680b      	ldr	r3, [r1, #0]
 800ce3c:	43ab      	bics	r3, r5
 800ce3e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ce40:	6863      	ldr	r3, [r4, #4]
 800ce42:	680d      	ldr	r5, [r1, #0]
 800ce44:	4083      	lsls	r3, r0
 800ce46:	432b      	orrs	r3, r5
 800ce48:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce4a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ce4c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce4e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ce50:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800ce52:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800ce54:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800ce56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce58:	bffdfff8 	.word	0xbffdfff8
 800ce5c:	40020000 	.word	0x40020000
 800ce60:	ffff800f 	.word	0xffff800f
 800ce64:	400200a8 	.word	0x400200a8

0800ce68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ce68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ce6a:	1d45      	adds	r5, r0, #5
{
 800ce6c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800ce6e:	7feb      	ldrb	r3, [r5, #31]
{
 800ce70:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800ce72:	2002      	movs	r0, #2
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d029      	beq.n	800cecc <HAL_DMA_Start_IT+0x64>
 800ce78:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800ce7a:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 800ce7c:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800ce7e:	7ffb      	ldrb	r3, [r7, #31]
 800ce80:	2600      	movs	r6, #0
 800ce82:	469c      	mov	ip, r3
 800ce84:	4660      	mov	r0, ip
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2801      	cmp	r0, #1
 800ce8a:	d12a      	bne.n	800cee2 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ce90:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce92:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce94:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800ce96:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce98:	361c      	adds	r6, #28
 800ce9a:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 800ce9c:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ce9e:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800cea0:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cea2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800cea4:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cea6:	9b01      	ldr	r3, [sp, #4]
 800cea8:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ceaa:	68a3      	ldr	r3, [r4, #8]
 800ceac:	2b10      	cmp	r3, #16
 800ceae:	d10e      	bne.n	800cece <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ceb0:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ceb2:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800ceb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00c      	beq.n	800ced4 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ceba:	230e      	movs	r3, #14
 800cebc:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cebe:	4313      	orrs	r3, r2
 800cec0:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800cec2:	2301      	movs	r3, #1
 800cec4:	6802      	ldr	r2, [r0, #0]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ceca:	2000      	movs	r0, #0
}
 800cecc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800cece:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800ced0:	60c2      	str	r2, [r0, #12]
 800ced2:	e7ef      	b.n	800ceb4 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ced4:	2204      	movs	r2, #4
 800ced6:	6803      	ldr	r3, [r0, #0]
 800ced8:	4393      	bics	r3, r2
 800ceda:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cedc:	6802      	ldr	r2, [r0, #0]
 800cede:	230a      	movs	r3, #10
 800cee0:	e7ed      	b.n	800cebe <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800cee2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 800cee4:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800cee6:	e7f1      	b.n	800cecc <HAL_DMA_Start_IT+0x64>

0800cee8 <HAL_DMA_Abort>:
{
 800cee8:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ceea:	1d85      	adds	r5, r0, #6
 800ceec:	7feb      	ldrb	r3, [r5, #31]
 800ceee:	1d44      	adds	r4, r0, #5
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d005      	beq.n	800cf00 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cef4:	2304      	movs	r3, #4
 800cef6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800cef8:	2300      	movs	r3, #0
    return HAL_ERROR;
 800cefa:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800cefc:	77e3      	strb	r3, [r4, #31]
}
 800cefe:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf00:	210e      	movs	r1, #14
 800cf02:	6803      	ldr	r3, [r0, #0]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	438a      	bics	r2, r1
 800cf08:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	6819      	ldr	r1, [r3, #0]
 800cf0e:	4391      	bics	r1, r2
 800cf10:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cf12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cf14:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cf16:	201c      	movs	r0, #28
 800cf18:	4003      	ands	r3, r0
 800cf1a:	0010      	movs	r0, r2
 800cf1c:	4098      	lsls	r0, r3
 800cf1e:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800cf20:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800cf22:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 800cf24:	77e0      	strb	r0, [r4, #31]
    return status;
 800cf26:	e7ea      	b.n	800cefe <HAL_DMA_Abort+0x16>

0800cf28 <HAL_DMA_Abort_IT>:
{
 800cf28:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cf2a:	1d84      	adds	r4, r0, #6
 800cf2c:	7fe3      	ldrb	r3, [r4, #31]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d004      	beq.n	800cf3c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cf32:	2304      	movs	r3, #4
 800cf34:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800cf36:	3b03      	subs	r3, #3
}
 800cf38:	0018      	movs	r0, r3
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf3c:	210e      	movs	r1, #14
 800cf3e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cf40:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	438a      	bics	r2, r1
 800cf46:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800cf48:	2201      	movs	r2, #1
 800cf4a:	6819      	ldr	r1, [r3, #0]
 800cf4c:	4391      	bics	r1, r2
 800cf4e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cf50:	231c      	movs	r3, #28
 800cf52:	402b      	ands	r3, r5
 800cf54:	0015      	movs	r5, r2
 800cf56:	409d      	lsls	r5, r3
 800cf58:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800cf5a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cf5c:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800cf5e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800cf60:	2400      	movs	r4, #0
 800cf62:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 800cf64:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800cf66:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800cf68:	42a2      	cmp	r2, r4
 800cf6a:	d0e5      	beq.n	800cf38 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800cf6c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800cf6e:	0023      	movs	r3, r4
 800cf70:	e7e2      	b.n	800cf38 <HAL_DMA_Abort_IT+0x10>

0800cf72 <HAL_DMA_IRQHandler>:
{
 800cf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800cf74:	221c      	movs	r2, #28
 800cf76:	2704      	movs	r7, #4
 800cf78:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cf7a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800cf7c:	4032      	ands	r2, r6
 800cf7e:	003e      	movs	r6, r7
 800cf80:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cf82:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800cf84:	6803      	ldr	r3, [r0, #0]
 800cf86:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800cf88:	4235      	tst	r5, r6
 800cf8a:	d00d      	beq.n	800cfa8 <HAL_DMA_IRQHandler+0x36>
 800cf8c:	423c      	tst	r4, r7
 800cf8e:	d00b      	beq.n	800cfa8 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	0692      	lsls	r2, r2, #26
 800cf94:	d402      	bmi.n	800cf9c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	43ba      	bics	r2, r7
 800cf9a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800cf9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800cf9e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d019      	beq.n	800cfd8 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800cfa4:	4798      	blx	r3
  return;
 800cfa6:	e017      	b.n	800cfd8 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800cfa8:	2702      	movs	r7, #2
 800cfaa:	003e      	movs	r6, r7
 800cfac:	4096      	lsls	r6, r2
 800cfae:	4235      	tst	r5, r6
 800cfb0:	d013      	beq.n	800cfda <HAL_DMA_IRQHandler+0x68>
 800cfb2:	423c      	tst	r4, r7
 800cfb4:	d011      	beq.n	800cfda <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	0692      	lsls	r2, r2, #26
 800cfba:	d406      	bmi.n	800cfca <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cfbc:	240a      	movs	r4, #10
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	43a2      	bics	r2, r4
 800cfc2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	1d83      	adds	r3, r0, #6
 800cfc8:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800cfca:	2200      	movs	r2, #0
 800cfcc:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800cfce:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800cfd0:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800cfd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d1e5      	bne.n	800cfa4 <HAL_DMA_IRQHandler+0x32>
}
 800cfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800cfda:	2608      	movs	r6, #8
 800cfdc:	0037      	movs	r7, r6
 800cfde:	4097      	lsls	r7, r2
 800cfe0:	423d      	tst	r5, r7
 800cfe2:	d0f9      	beq.n	800cfd8 <HAL_DMA_IRQHandler+0x66>
 800cfe4:	4234      	tst	r4, r6
 800cfe6:	d0f7      	beq.n	800cfd8 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cfe8:	250e      	movs	r5, #14
 800cfea:	681c      	ldr	r4, [r3, #0]
 800cfec:	43ac      	bics	r4, r5
 800cfee:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cff0:	2301      	movs	r3, #1
 800cff2:	001c      	movs	r4, r3
 800cff4:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800cff6:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cff8:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cffa:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800cffc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800cffe:	2200      	movs	r2, #0
 800d000:	1d43      	adds	r3, r0, #5
 800d002:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800d004:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d006:	e7e5      	b.n	800cfd4 <HAL_DMA_IRQHandler+0x62>

0800d008 <HAL_DMA_GetState>:
  return hdma->State;
 800d008:	3006      	adds	r0, #6
 800d00a:	7fc0      	ldrb	r0, [r0, #31]
 800d00c:	b2c0      	uxtb	r0, r0
}
 800d00e:	4770      	bx	lr

0800d010 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800d010:	4a28      	ldr	r2, [pc, #160]	; (800d0b4 <FLASH_SetErrorCode+0xa4>)
 800d012:	2180      	movs	r1, #128	; 0x80
 800d014:	6990      	ldr	r0, [r2, #24]
 800d016:	0049      	lsls	r1, r1, #1
 800d018:	0003      	movs	r3, r0
{
 800d01a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800d01c:	400b      	ands	r3, r1
 800d01e:	4208      	tst	r0, r1
 800d020:	d005      	beq.n	800d02e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d022:	2302      	movs	r3, #2
 800d024:	4824      	ldr	r0, [pc, #144]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
 800d026:	6944      	ldr	r4, [r0, #20]
 800d028:	4323      	orrs	r3, r4
 800d02a:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800d02c:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800d02e:	2080      	movs	r0, #128	; 0x80
 800d030:	6991      	ldr	r1, [r2, #24]
 800d032:	0080      	lsls	r0, r0, #2
 800d034:	4201      	tst	r1, r0
 800d036:	d005      	beq.n	800d044 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d038:	2101      	movs	r1, #1
 800d03a:	4c1f      	ldr	r4, [pc, #124]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800d03c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d03e:	6965      	ldr	r5, [r4, #20]
 800d040:	4329      	orrs	r1, r5
 800d042:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800d044:	2080      	movs	r0, #128	; 0x80
 800d046:	6991      	ldr	r1, [r2, #24]
 800d048:	00c0      	lsls	r0, r0, #3
 800d04a:	4201      	tst	r1, r0
 800d04c:	d005      	beq.n	800d05a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800d04e:	2108      	movs	r1, #8
 800d050:	4c19      	ldr	r4, [pc, #100]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 800d052:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800d054:	6965      	ldr	r5, [r4, #20]
 800d056:	4329      	orrs	r1, r5
 800d058:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800d05a:	2080      	movs	r0, #128	; 0x80
 800d05c:	6991      	ldr	r1, [r2, #24]
 800d05e:	0100      	lsls	r0, r0, #4
 800d060:	4201      	tst	r1, r0
 800d062:	d005      	beq.n	800d070 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800d064:	2104      	movs	r1, #4
 800d066:	4c14      	ldr	r4, [pc, #80]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 800d068:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800d06a:	6965      	ldr	r5, [r4, #20]
 800d06c:	4329      	orrs	r1, r5
 800d06e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800d070:	2080      	movs	r0, #128	; 0x80
 800d072:	6991      	ldr	r1, [r2, #24]
 800d074:	0180      	lsls	r0, r0, #6
 800d076:	4201      	tst	r1, r0
 800d078:	d005      	beq.n	800d086 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800d07a:	2110      	movs	r1, #16
 800d07c:	4c0e      	ldr	r4, [pc, #56]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800d07e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800d080:	6965      	ldr	r5, [r4, #20]
 800d082:	4329      	orrs	r1, r5
 800d084:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800d086:	6991      	ldr	r1, [r2, #24]
 800d088:	0389      	lsls	r1, r1, #14
 800d08a:	d505      	bpl.n	800d098 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800d08c:	2020      	movs	r0, #32
 800d08e:	4c0a      	ldr	r4, [pc, #40]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 800d090:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800d092:	6961      	ldr	r1, [r4, #20]
 800d094:	4301      	orrs	r1, r0
 800d096:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800d098:	2080      	movs	r0, #128	; 0x80
 800d09a:	6991      	ldr	r1, [r2, #24]
 800d09c:	0240      	lsls	r0, r0, #9
 800d09e:	4201      	tst	r1, r0
 800d0a0:	d005      	beq.n	800d0ae <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800d0a2:	2140      	movs	r1, #64	; 0x40
 800d0a4:	4c04      	ldr	r4, [pc, #16]	; (800d0b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 800d0a6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800d0a8:	6965      	ldr	r5, [r4, #20]
 800d0aa:	4329      	orrs	r1, r5
 800d0ac:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d0ae:	6193      	str	r3, [r2, #24]
}  
 800d0b0:	bd30      	pop	{r4, r5, pc}
 800d0b2:	46c0      	nop			; (mov r8, r8)
 800d0b4:	40022000 	.word	0x40022000
 800d0b8:	2000176c 	.word	0x2000176c

0800d0bc <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800d0bc:	4b01      	ldr	r3, [pc, #4]	; (800d0c4 <HAL_FLASH_GetError+0x8>)
 800d0be:	6958      	ldr	r0, [r3, #20]
}
 800d0c0:	4770      	bx	lr
 800d0c2:	46c0      	nop			; (mov r8, r8)
 800d0c4:	2000176c 	.word	0x2000176c

0800d0c8 <FLASH_WaitForLastOperation>:
{
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d0cc:	f7ff fae6 	bl	800c69c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d0d0:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800d0d2:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d0d4:	4b18      	ldr	r3, [pc, #96]	; (800d138 <FLASH_WaitForLastOperation+0x70>)
 800d0d6:	699a      	ldr	r2, [r3, #24]
 800d0d8:	4232      	tst	r2, r6
 800d0da:	d121      	bne.n	800d120 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d0dc:	2202      	movs	r2, #2
 800d0de:	6999      	ldr	r1, [r3, #24]
 800d0e0:	4211      	tst	r1, r2
 800d0e2:	d000      	beq.n	800d0e6 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d0e4:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800d0e6:	699a      	ldr	r2, [r3, #24]
 800d0e8:	05d2      	lsls	r2, r2, #23
 800d0ea:	d415      	bmi.n	800d118 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800d0ec:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800d0ee:	0592      	lsls	r2, r2, #22
 800d0f0:	d412      	bmi.n	800d118 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800d0f2:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800d0f4:	0552      	lsls	r2, r2, #21
 800d0f6:	d40f      	bmi.n	800d118 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800d0f8:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800d0fa:	0512      	lsls	r2, r2, #20
 800d0fc:	d40c      	bmi.n	800d118 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800d0fe:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800d100:	0492      	lsls	r2, r2, #18
 800d102:	d409      	bmi.n	800d118 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800d104:	6999      	ldr	r1, [r3, #24]
 800d106:	2280      	movs	r2, #128	; 0x80
 800d108:	0008      	movs	r0, r1
 800d10a:	0292      	lsls	r2, r2, #10
 800d10c:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800d10e:	4211      	tst	r1, r2
 800d110:	d102      	bne.n	800d118 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800d112:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800d114:	03db      	lsls	r3, r3, #15
 800d116:	d508      	bpl.n	800d12a <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 800d118:	f7ff ff7a 	bl	800d010 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d11c:	2001      	movs	r0, #1
 800d11e:	e004      	b.n	800d12a <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800d120:	1c62      	adds	r2, r4, #1
 800d122:	d0d8      	beq.n	800d0d6 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d124:	2c00      	cmp	r4, #0
 800d126:	d101      	bne.n	800d12c <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 800d128:	2003      	movs	r0, #3
}
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d12c:	f7ff fab6 	bl	800c69c <HAL_GetTick>
 800d130:	1b40      	subs	r0, r0, r5
 800d132:	42a0      	cmp	r0, r4
 800d134:	d9ce      	bls.n	800d0d4 <FLASH_WaitForLastOperation+0xc>
 800d136:	e7f7      	b.n	800d128 <FLASH_WaitForLastOperation+0x60>
 800d138:	40022000 	.word	0x40022000

0800d13c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d13c:	2201      	movs	r2, #1
 800d13e:	4b08      	ldr	r3, [pc, #32]	; (800d160 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 800d140:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d142:	6859      	ldr	r1, [r3, #4]
 800d144:	4211      	tst	r1, r2
 800d146:	d00a      	beq.n	800d15e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d148:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d14c:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800d14e:	4805      	ldr	r0, [pc, #20]	; (800d164 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 800d150:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800d152:	4805      	ldr	r0, [pc, #20]	; (800d168 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800d154:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d156:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d15a:	6858      	ldr	r0, [r3, #4]
 800d15c:	4010      	ands	r0, r2
}
 800d15e:	4770      	bx	lr
 800d160:	40022000 	.word	0x40022000
 800d164:	89abcdef 	.word	0x89abcdef
 800d168:	02030405 	.word	0x02030405

0800d16c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800d16c:	2301      	movs	r3, #1
 800d16e:	4a03      	ldr	r2, [pc, #12]	; (800d17c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 800d170:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800d172:	6851      	ldr	r1, [r2, #4]
 800d174:	430b      	orrs	r3, r1
 800d176:	6053      	str	r3, [r2, #4]
}
 800d178:	4770      	bx	lr
 800d17a:	46c0      	nop			; (mov r8, r8)
 800d17c:	40022000 	.word	0x40022000

0800d180 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800d180:	b510      	push	{r4, lr}
 800d182:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d184:	4805      	ldr	r0, [pc, #20]	; (800d19c <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800d186:	f7ff ff9f 	bl	800d0c8 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d105      	bne.n	800d19a <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d18e:	4b04      	ldr	r3, [pc, #16]	; (800d1a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 800d190:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800d192:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d194:	4801      	ldr	r0, [pc, #4]	; (800d19c <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800d196:	f7ff ff97 	bl	800d0c8 <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800d19a:	bd10      	pop	{r4, pc}
 800d19c:	0000c350 	.word	0x0000c350
 800d1a0:	2000176c 	.word	0x2000176c

0800d1a4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800d1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d1a6:	4f12      	ldr	r7, [pc, #72]	; (800d1f0 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800d1a8:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 800d1aa:	7c3b      	ldrb	r3, [r7, #16]
{
 800d1ac:	000d      	movs	r5, r1
 800d1ae:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 800d1b0:	2002      	movs	r0, #2
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d00c      	beq.n	800d1d0 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 800d1b6:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d1b8:	480e      	ldr	r0, [pc, #56]	; (800d1f4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800d1ba:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d1bc:	f7ff ff84 	bl	800d0c8 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d103      	bne.n	800d1cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d1c4:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800d1c6:	2e02      	cmp	r6, #2
 800d1c8:	d103      	bne.n	800d1d2 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800d1ca:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	743b      	strb	r3, [r7, #16]

  return status;
}
 800d1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800d1d2:	2e01      	cmp	r6, #1
 800d1d4:	d102      	bne.n	800d1dc <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800d1d6:	b2a4      	uxth	r4, r4
 800d1d8:	802c      	strh	r4, [r5, #0]
 800d1da:	e7f7      	b.n	800d1cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800d1dc:	2e00      	cmp	r6, #0
 800d1de:	d003      	beq.n	800d1e8 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d1e0:	4804      	ldr	r0, [pc, #16]	; (800d1f4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800d1e2:	f7ff ff71 	bl	800d0c8 <FLASH_WaitForLastOperation>
 800d1e6:	e7f1      	b.n	800d1cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800d1e8:	b2e4      	uxtb	r4, r4
 800d1ea:	702c      	strb	r4, [r5, #0]
 800d1ec:	e7ee      	b.n	800d1cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800d1ee:	46c0      	nop			; (mov r8, r8)
 800d1f0:	2000176c 	.word	0x2000176c
 800d1f4:	0000c350 	.word	0x0000c350

0800d1f8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d1f8:	4a5a      	ldr	r2, [pc, #360]	; (800d364 <HAL_GPIO_Init+0x16c>)
{
 800d1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d1fc:	1882      	adds	r2, r0, r2
 800d1fe:	1e54      	subs	r4, r2, #1
 800d200:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800d202:	2300      	movs	r3, #0
{
 800d204:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d206:	3205      	adds	r2, #5
{
 800d208:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d20a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d20c:	9a03      	ldr	r2, [sp, #12]
 800d20e:	6812      	ldr	r2, [r2, #0]
 800d210:	0014      	movs	r4, r2
 800d212:	40dc      	lsrs	r4, r3
 800d214:	d101      	bne.n	800d21a <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800d216:	b007      	add	sp, #28
 800d218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800d21a:	2101      	movs	r1, #1
 800d21c:	000d      	movs	r5, r1
 800d21e:	0014      	movs	r4, r2
 800d220:	409d      	lsls	r5, r3
 800d222:	402c      	ands	r4, r5
 800d224:	468c      	mov	ip, r1
 800d226:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 800d228:	422a      	tst	r2, r5
 800d22a:	d100      	bne.n	800d22e <HAL_GPIO_Init+0x36>
 800d22c:	e098      	b.n	800d360 <HAL_GPIO_Init+0x168>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d22e:	2403      	movs	r4, #3
 800d230:	9a03      	ldr	r2, [sp, #12]
 800d232:	005e      	lsls	r6, r3, #1
 800d234:	6852      	ldr	r2, [r2, #4]
 800d236:	9201      	str	r2, [sp, #4]
 800d238:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d23a:	40b4      	lsls	r4, r6
 800d23c:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d23e:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d240:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d242:	4564      	cmp	r4, ip
 800d244:	d82a      	bhi.n	800d29c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800d246:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d248:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d24a:	9903      	ldr	r1, [sp, #12]
 800d24c:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d24e:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d250:	40b4      	lsls	r4, r6
 800d252:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800d254:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800d256:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d258:	43ac      	bics	r4, r5
 800d25a:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d25c:	090c      	lsrs	r4, r1, #4
 800d25e:	4661      	mov	r1, ip
 800d260:	400c      	ands	r4, r1
 800d262:	409c      	lsls	r4, r3
 800d264:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800d266:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800d268:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d26a:	9904      	ldr	r1, [sp, #16]
 800d26c:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d26e:	9903      	ldr	r1, [sp, #12]
 800d270:	688c      	ldr	r4, [r1, #8]
 800d272:	40b4      	lsls	r4, r6
 800d274:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800d276:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d278:	2a02      	cmp	r2, #2
 800d27a:	d111      	bne.n	800d2a0 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d27c:	2507      	movs	r5, #7
 800d27e:	210f      	movs	r1, #15
 800d280:	401d      	ands	r5, r3
 800d282:	00ad      	lsls	r5, r5, #2
 800d284:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800d286:	08dc      	lsrs	r4, r3, #3
 800d288:	00a4      	lsls	r4, r4, #2
 800d28a:	1904      	adds	r4, r0, r4
 800d28c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d28e:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800d290:	9903      	ldr	r1, [sp, #12]
 800d292:	6909      	ldr	r1, [r1, #16]
 800d294:	40a9      	lsls	r1, r5
 800d296:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800d298:	6227      	str	r7, [r4, #32]
 800d29a:	e001      	b.n	800d2a0 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d29c:	2a03      	cmp	r2, #3
 800d29e:	d1e3      	bne.n	800d268 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2a0:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 800d2a2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d2a4:	9904      	ldr	r1, [sp, #16]
 800d2a6:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2a8:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 800d2aa:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d2ac:	22c0      	movs	r2, #192	; 0xc0
 800d2ae:	9901      	ldr	r1, [sp, #4]
 800d2b0:	0292      	lsls	r2, r2, #10
 800d2b2:	4211      	tst	r1, r2
 800d2b4:	d054      	beq.n	800d360 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2b6:	2701      	movs	r7, #1
 800d2b8:	4c2b      	ldr	r4, [pc, #172]	; (800d368 <HAL_GPIO_Init+0x170>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d2ba:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d2be:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2c0:	433a      	orrs	r2, r7
 800d2c2:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800d2c4:	4a29      	ldr	r2, [pc, #164]	; (800d36c <HAL_GPIO_Init+0x174>)
 800d2c6:	089c      	lsrs	r4, r3, #2
 800d2c8:	00a4      	lsls	r4, r4, #2
 800d2ca:	18a4      	adds	r4, r4, r2
 800d2cc:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d2ce:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800d2d0:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d2d2:	220f      	movs	r2, #15
 800d2d4:	00ad      	lsls	r5, r5, #2
 800d2d6:	40aa      	lsls	r2, r5
 800d2d8:	4661      	mov	r1, ip
 800d2da:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d2dc:	22a0      	movs	r2, #160	; 0xa0
 800d2de:	05d2      	lsls	r2, r2, #23
 800d2e0:	4694      	mov	ip, r2
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	4560      	cmp	r0, ip
 800d2e6:	d011      	beq.n	800d30c <HAL_GPIO_Init+0x114>
 800d2e8:	4a21      	ldr	r2, [pc, #132]	; (800d370 <HAL_GPIO_Init+0x178>)
 800d2ea:	4694      	mov	ip, r2
 800d2ec:	003a      	movs	r2, r7
 800d2ee:	4560      	cmp	r0, ip
 800d2f0:	d00c      	beq.n	800d30c <HAL_GPIO_Init+0x114>
 800d2f2:	4f20      	ldr	r7, [pc, #128]	; (800d374 <HAL_GPIO_Init+0x17c>)
 800d2f4:	1892      	adds	r2, r2, r2
 800d2f6:	42b8      	cmp	r0, r7
 800d2f8:	d008      	beq.n	800d30c <HAL_GPIO_Init+0x114>
 800d2fa:	4f1f      	ldr	r7, [pc, #124]	; (800d378 <HAL_GPIO_Init+0x180>)
 800d2fc:	0032      	movs	r2, r6
 800d2fe:	42b8      	cmp	r0, r7
 800d300:	d004      	beq.n	800d30c <HAL_GPIO_Init+0x114>
 800d302:	4e1e      	ldr	r6, [pc, #120]	; (800d37c <HAL_GPIO_Init+0x184>)
 800d304:	3201      	adds	r2, #1
 800d306:	42b0      	cmp	r0, r6
 800d308:	d000      	beq.n	800d30c <HAL_GPIO_Init+0x114>
 800d30a:	9a05      	ldr	r2, [sp, #20]
 800d30c:	40aa      	lsls	r2, r5
 800d30e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 800d310:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d312:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 800d314:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 800d316:	4a1a      	ldr	r2, [pc, #104]	; (800d380 <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 800d318:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 800d31a:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d31c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800d31e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d320:	03c9      	lsls	r1, r1, #15
 800d322:	d401      	bmi.n	800d328 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 800d324:	0035      	movs	r5, r6
 800d326:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800d328:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800d32a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800d32c:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d32e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800d330:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d332:	0389      	lsls	r1, r1, #14
 800d334:	d401      	bmi.n	800d33a <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 800d336:	0035      	movs	r5, r6
 800d338:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800d33a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800d33c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800d33e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d340:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800d342:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d344:	02c9      	lsls	r1, r1, #11
 800d346:	d401      	bmi.n	800d34c <HAL_GPIO_Init+0x154>
        temp &= ~((uint32_t)iocurrent);
 800d348:	0035      	movs	r5, r6
 800d34a:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800d34c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800d34e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800d350:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d352:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800d354:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d356:	0289      	lsls	r1, r1, #10
 800d358:	d401      	bmi.n	800d35e <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 800d35a:	4025      	ands	r5, r4
 800d35c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800d35e:	60d6      	str	r6, [r2, #12]
    position++;
 800d360:	3301      	adds	r3, #1
 800d362:	e753      	b.n	800d20c <HAL_GPIO_Init+0x14>
 800d364:	afffe400 	.word	0xafffe400
 800d368:	40021000 	.word	0x40021000
 800d36c:	40010000 	.word	0x40010000
 800d370:	50000400 	.word	0x50000400
 800d374:	50000800 	.word	0x50000800
 800d378:	50000c00 	.word	0x50000c00
 800d37c:	50001000 	.word	0x50001000
 800d380:	40010400 	.word	0x40010400

0800d384 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d384:	6900      	ldr	r0, [r0, #16]
 800d386:	4008      	ands	r0, r1
 800d388:	1e43      	subs	r3, r0, #1
 800d38a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800d38c:	b2c0      	uxtb	r0, r0
}
 800d38e:	4770      	bx	lr

0800d390 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d390:	2a00      	cmp	r2, #0
 800d392:	d001      	beq.n	800d398 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d394:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d396:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800d398:	6281      	str	r1, [r0, #40]	; 0x28
}
 800d39a:	e7fc      	b.n	800d396 <HAL_GPIO_WritePin+0x6>

0800d39c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d39c:	4b04      	ldr	r3, [pc, #16]	; (800d3b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800d39e:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d3a0:	695a      	ldr	r2, [r3, #20]
 800d3a2:	4210      	tst	r0, r2
 800d3a4:	d002      	beq.n	800d3ac <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d3a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d3a8:	f004 fd0a 	bl	8011dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d3ac:	bd10      	pop	{r4, pc}
 800d3ae:	46c0      	nop			; (mov r8, r8)
 800d3b0:	40010400 	.word	0x40010400

0800d3b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d3b4:	6803      	ldr	r3, [r0, #0]
 800d3b6:	699a      	ldr	r2, [r3, #24]
 800d3b8:	0792      	lsls	r2, r2, #30
 800d3ba:	d501      	bpl.n	800d3c0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d3bc:	2200      	movs	r2, #0
 800d3be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	6999      	ldr	r1, [r3, #24]
 800d3c4:	4211      	tst	r1, r2
 800d3c6:	d102      	bne.n	800d3ce <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d3c8:	6999      	ldr	r1, [r3, #24]
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	619a      	str	r2, [r3, #24]
  }
}
 800d3ce:	4770      	bx	lr

0800d3d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d3d0:	b530      	push	{r4, r5, lr}
 800d3d2:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800d3d4:	0412      	lsls	r2, r2, #16
 800d3d6:	6800      	ldr	r0, [r0, #0]
 800d3d8:	4322      	orrs	r2, r4
 800d3da:	431a      	orrs	r2, r3
 800d3dc:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <I2C_TransferConfig+0x24>)
 800d3de:	6845      	ldr	r5, [r0, #4]
 800d3e0:	0589      	lsls	r1, r1, #22
 800d3e2:	0d64      	lsrs	r4, r4, #21
 800d3e4:	0d89      	lsrs	r1, r1, #22
 800d3e6:	431c      	orrs	r4, r3
 800d3e8:	43a5      	bics	r5, r4
 800d3ea:	430a      	orrs	r2, r1
 800d3ec:	432a      	orrs	r2, r5
 800d3ee:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800d3f0:	bd30      	pop	{r4, r5, pc}
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	03ff63ff 	.word	0x03ff63ff

0800d3f8 <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 800d3f8:	2300      	movs	r3, #0
{
 800d3fa:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d3fc:	07ca      	lsls	r2, r1, #31
 800d3fe:	d508      	bpl.n	800d412 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d400:	0003      	movs	r3, r0
 800d402:	3341      	adds	r3, #65	; 0x41
 800d404:	781a      	ldrb	r2, [r3, #0]
 800d406:	2328      	movs	r3, #40	; 0x28
 800d408:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d40a:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d40c:	2a28      	cmp	r2, #40	; 0x28
 800d40e:	d000      	beq.n	800d412 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d410:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d412:	078a      	lsls	r2, r1, #30
 800d414:	d508      	bpl.n	800d428 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d416:	0002      	movs	r2, r0
 800d418:	2428      	movs	r4, #40	; 0x28
 800d41a:	3241      	adds	r2, #65	; 0x41
 800d41c:	7812      	ldrb	r2, [r2, #0]
 800d41e:	4022      	ands	r2, r4
 800d420:	42a2      	cmp	r2, r4
 800d422:	d10b      	bne.n	800d43c <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d424:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d426:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d428:	b209      	sxth	r1, r1
 800d42a:	2900      	cmp	r1, #0
 800d42c:	da01      	bge.n	800d432 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d42e:	22b8      	movs	r2, #184	; 0xb8
 800d430:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d432:	6801      	ldr	r1, [r0, #0]
 800d434:	680a      	ldr	r2, [r1, #0]
 800d436:	439a      	bics	r2, r3
 800d438:	600a      	str	r2, [r1, #0]
}
 800d43a:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d43c:	22f4      	movs	r2, #244	; 0xf4
 800d43e:	e7f2      	b.n	800d426 <I2C_Disable_IRQ+0x2e>

0800d440 <I2C_IsAcknowledgeFailed>:
{
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d442:	6803      	ldr	r3, [r0, #0]
{
 800d444:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d446:	699a      	ldr	r2, [r3, #24]
{
 800d448:	0004      	movs	r4, r0
 800d44a:	000d      	movs	r5, r1
  return HAL_OK;
 800d44c:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d44e:	06d2      	lsls	r2, r2, #27
 800d450:	d536      	bpl.n	800d4c0 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	0192      	lsls	r2, r2, #6
 800d456:	d404      	bmi.n	800d462 <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d458:	2280      	movs	r2, #128	; 0x80
 800d45a:	6859      	ldr	r1, [r3, #4]
 800d45c:	01d2      	lsls	r2, r2, #7
 800d45e:	430a      	orrs	r2, r1
 800d460:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d462:	2720      	movs	r7, #32
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	699a      	ldr	r2, [r3, #24]
 800d468:	423a      	tst	r2, r7
 800d46a:	d012      	beq.n	800d492 <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d46c:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800d46e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d470:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d472:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800d474:	f7ff ff9e 	bl	800d3b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800d478:	6822      	ldr	r2, [r4, #0]
 800d47a:	4912      	ldr	r1, [pc, #72]	; (800d4c4 <I2C_IsAcknowledgeFailed+0x84>)
 800d47c:	6853      	ldr	r3, [r2, #4]
 800d47e:	400b      	ands	r3, r1
 800d480:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d482:	2304      	movs	r3, #4
 800d484:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d486:	4313      	orrs	r3, r2
 800d488:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d48a:	0023      	movs	r3, r4
 800d48c:	3341      	adds	r3, #65	; 0x41
 800d48e:	701f      	strb	r7, [r3, #0]
 800d490:	e00f      	b.n	800d4b2 <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 800d492:	1c6a      	adds	r2, r5, #1
 800d494:	d0e7      	beq.n	800d466 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d496:	f7ff f901 	bl	800c69c <HAL_GetTick>
 800d49a:	1b80      	subs	r0, r0, r6
 800d49c:	4285      	cmp	r5, r0
 800d49e:	d301      	bcc.n	800d4a4 <I2C_IsAcknowledgeFailed+0x64>
 800d4a0:	2d00      	cmp	r5, #0
 800d4a2:	d1df      	bne.n	800d464 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d4ac:	0023      	movs	r3, r4
 800d4ae:	3341      	adds	r3, #65	; 0x41
 800d4b0:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4b2:	0022      	movs	r2, r4
 800d4b4:	2300      	movs	r3, #0
    return HAL_ERROR;
 800d4b6:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4b8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800d4ba:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4bc:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800d4be:	7023      	strb	r3, [r4, #0]
}
 800d4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	fe00e800 	.word	0xfe00e800

0800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	0004      	movs	r4, r0
 800d4cc:	000d      	movs	r5, r1
 800d4ce:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d4d0:	2702      	movs	r7, #2
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	423b      	tst	r3, r7
 800d4d8:	d001      	beq.n	800d4de <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800d4da:	2000      	movs	r0, #0
}
 800d4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4de:	0032      	movs	r2, r6
 800d4e0:	0029      	movs	r1, r5
 800d4e2:	0020      	movs	r0, r4
 800d4e4:	f7ff ffac 	bl	800d440 <I2C_IsAcknowledgeFailed>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d115      	bne.n	800d518 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800d4ec:	1c6b      	adds	r3, r5, #1
 800d4ee:	d0f0      	beq.n	800d4d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4f0:	f7ff f8d4 	bl	800c69c <HAL_GetTick>
 800d4f4:	1b80      	subs	r0, r0, r6
 800d4f6:	42a8      	cmp	r0, r5
 800d4f8:	d801      	bhi.n	800d4fe <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800d4fa:	2d00      	cmp	r5, #0
 800d4fc:	d1e9      	bne.n	800d4d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4fe:	2220      	movs	r2, #32
 800d500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d502:	4313      	orrs	r3, r2
 800d504:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d506:	0023      	movs	r3, r4
 800d508:	3341      	adds	r3, #65	; 0x41
 800d50a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d50c:	0022      	movs	r2, r4
 800d50e:	2300      	movs	r3, #0
 800d510:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800d512:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d514:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d516:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800d518:	2001      	movs	r0, #1
 800d51a:	e7df      	b.n	800d4dc <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800d51c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800d51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51e:	0004      	movs	r4, r0
 800d520:	000d      	movs	r5, r1
 800d522:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d524:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d526:	2204      	movs	r2, #4
 800d528:	6823      	ldr	r3, [r4, #0]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	4213      	tst	r3, r2
 800d52e:	d111      	bne.n	800d554 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d530:	0032      	movs	r2, r6
 800d532:	0029      	movs	r1, r5
 800d534:	0020      	movs	r0, r4
 800d536:	f7ff ff83 	bl	800d440 <I2C_IsAcknowledgeFailed>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d119      	bne.n	800d572 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	699a      	ldr	r2, [r3, #24]
 800d542:	423a      	tst	r2, r7
 800d544:	d017      	beq.n	800d576 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d546:	2104      	movs	r1, #4
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	420a      	tst	r2, r1
 800d54c:	d004      	beq.n	800d558 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 800d54e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d550:	2a00      	cmp	r2, #0
 800d552:	d001      	beq.n	800d558 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 800d554:	2000      	movs	r0, #0
}
 800d556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d558:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	490e      	ldr	r1, [pc, #56]	; (800d598 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 800d55e:	400a      	ands	r2, r1
 800d560:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800d562:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d564:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800d566:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d568:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d56a:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d56c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d56e:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 800d570:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800d572:	2001      	movs	r0, #1
 800d574:	e7ef      	b.n	800d556 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d576:	f7ff f891 	bl	800c69c <HAL_GetTick>
 800d57a:	1b80      	subs	r0, r0, r6
 800d57c:	42a8      	cmp	r0, r5
 800d57e:	d801      	bhi.n	800d584 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 800d580:	2d00      	cmp	r5, #0
 800d582:	d1d0      	bne.n	800d526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d584:	2220      	movs	r2, #32
 800d586:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d588:	4313      	orrs	r3, r2
 800d58a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d58c:	0023      	movs	r3, r4
 800d58e:	3341      	adds	r3, #65	; 0x41
 800d590:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800d592:	3440      	adds	r4, #64	; 0x40
 800d594:	2300      	movs	r3, #0
 800d596:	e7eb      	b.n	800d570 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d598:	fe00e800 	.word	0xfe00e800

0800d59c <I2C_WaitOnFlagUntilTimeout>:
{
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	0004      	movs	r4, r0
 800d5a0:	000e      	movs	r6, r1
 800d5a2:	0017      	movs	r7, r2
 800d5a4:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5a6:	6822      	ldr	r2, [r4, #0]
 800d5a8:	6993      	ldr	r3, [r2, #24]
 800d5aa:	4033      	ands	r3, r6
 800d5ac:	1b9b      	subs	r3, r3, r6
 800d5ae:	4259      	negs	r1, r3
 800d5b0:	414b      	adcs	r3, r1
 800d5b2:	42bb      	cmp	r3, r7
 800d5b4:	d001      	beq.n	800d5ba <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e017      	b.n	800d5ea <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800d5ba:	1c6b      	adds	r3, r5, #1
 800d5bc:	d0f4      	beq.n	800d5a8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5be:	f7ff f86d 	bl	800c69c <HAL_GetTick>
 800d5c2:	9b06      	ldr	r3, [sp, #24]
 800d5c4:	1ac0      	subs	r0, r0, r3
 800d5c6:	42a8      	cmp	r0, r5
 800d5c8:	d801      	bhi.n	800d5ce <I2C_WaitOnFlagUntilTimeout+0x32>
 800d5ca:	2d00      	cmp	r5, #0
 800d5cc:	d1eb      	bne.n	800d5a6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d5ce:	2220      	movs	r2, #32
 800d5d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d5d2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d5d8:	0023      	movs	r3, r4
 800d5da:	3341      	adds	r3, #65	; 0x41
 800d5dc:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5de:	0022      	movs	r2, r4
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800d5e4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5e6:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d5e8:	7023      	strb	r3, [r4, #0]
}
 800d5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5ec <I2C_RequestMemoryWrite>:
{
 800d5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5ee:	0014      	movs	r4, r2
 800d5f0:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	4b16      	ldr	r3, [pc, #88]	; (800d650 <I2C_RequestMemoryWrite+0x64>)
{
 800d5f6:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	2380      	movs	r3, #128	; 0x80
{
 800d5fc:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d5fe:	045b      	lsls	r3, r3, #17
 800d600:	f7ff fee6 	bl	800d3d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d604:	0039      	movs	r1, r7
 800d606:	0028      	movs	r0, r5
 800d608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d60a:	f7ff ff5d 	bl	800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d001      	beq.n	800d616 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800d612:	2001      	movs	r0, #1
}
 800d614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d616:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d618:	2e01      	cmp	r6, #1
 800d61a:	d10d      	bne.n	800d638 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d61c:	b2e4      	uxtb	r4, r4
 800d61e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d622:	2200      	movs	r2, #0
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	2180      	movs	r1, #128	; 0x80
 800d628:	003b      	movs	r3, r7
 800d62a:	0028      	movs	r0, r5
 800d62c:	f7ff ffb6 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800d630:	1e43      	subs	r3, r0, #1
 800d632:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800d634:	b2c0      	uxtb	r0, r0
 800d636:	e7ed      	b.n	800d614 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d638:	0a22      	lsrs	r2, r4, #8
 800d63a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d63c:	0039      	movs	r1, r7
 800d63e:	0028      	movs	r0, r5
 800d640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d642:	f7ff ff41 	bl	800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d646:	2800      	cmp	r0, #0
 800d648:	d1e3      	bne.n	800d612 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d64a:	682b      	ldr	r3, [r5, #0]
 800d64c:	e7e6      	b.n	800d61c <I2C_RequestMemoryWrite+0x30>
 800d64e:	46c0      	nop			; (mov r8, r8)
 800d650:	80002000 	.word	0x80002000

0800d654 <I2C_RequestMemoryRead>:
{
 800d654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d656:	0005      	movs	r5, r0
 800d658:	0014      	movs	r4, r2
 800d65a:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	4b15      	ldr	r3, [pc, #84]	; (800d6b4 <I2C_RequestMemoryRead+0x60>)
{
 800d660:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	2300      	movs	r3, #0
 800d666:	f7ff feb3 	bl	800d3d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d66a:	0039      	movs	r1, r7
 800d66c:	0028      	movs	r0, r5
 800d66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d670:	f7ff ff2a 	bl	800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d674:	2800      	cmp	r0, #0
 800d676:	d001      	beq.n	800d67c <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 800d678:	2001      	movs	r0, #1
}
 800d67a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d67c:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d67e:	2e01      	cmp	r6, #1
 800d680:	d10d      	bne.n	800d69e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d682:	b2e4      	uxtb	r4, r4
 800d684:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d688:	2200      	movs	r2, #0
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	2140      	movs	r1, #64	; 0x40
 800d68e:	003b      	movs	r3, r7
 800d690:	0028      	movs	r0, r5
 800d692:	f7ff ff83 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800d696:	1e43      	subs	r3, r0, #1
 800d698:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800d69a:	b2c0      	uxtb	r0, r0
 800d69c:	e7ed      	b.n	800d67a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d69e:	0a22      	lsrs	r2, r4, #8
 800d6a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6a2:	0039      	movs	r1, r7
 800d6a4:	0028      	movs	r0, r5
 800d6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6a8:	f7ff ff0e 	bl	800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d1e3      	bne.n	800d678 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	e7e6      	b.n	800d682 <I2C_RequestMemoryRead+0x2e>
 800d6b4:	80002000 	.word	0x80002000

0800d6b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	0004      	movs	r4, r0
 800d6bc:	000d      	movs	r5, r1
 800d6be:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d6c0:	2720      	movs	r7, #32
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	699b      	ldr	r3, [r3, #24]
 800d6c6:	423b      	tst	r3, r7
 800d6c8:	d001      	beq.n	800d6ce <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800d6ca:	2000      	movs	r0, #0
}
 800d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6ce:	0032      	movs	r2, r6
 800d6d0:	0029      	movs	r1, r5
 800d6d2:	0020      	movs	r0, r4
 800d6d4:	f7ff feb4 	bl	800d440 <I2C_IsAcknowledgeFailed>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d113      	bne.n	800d704 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6dc:	f7fe ffde 	bl	800c69c <HAL_GetTick>
 800d6e0:	1b80      	subs	r0, r0, r6
 800d6e2:	42a8      	cmp	r0, r5
 800d6e4:	d801      	bhi.n	800d6ea <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800d6e6:	2d00      	cmp	r5, #0
 800d6e8:	d1eb      	bne.n	800d6c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6ea:	2220      	movs	r2, #32
 800d6ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d6f2:	0023      	movs	r3, r4
 800d6f4:	3341      	adds	r3, #65	; 0x41
 800d6f6:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6f8:	0022      	movs	r2, r4
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800d6fe:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d700:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800d702:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800d704:	2001      	movs	r0, #1
 800d706:	e7e1      	b.n	800d6cc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800d708 <HAL_I2C_Init>:
{
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800d70c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800d70e:	2c00      	cmp	r4, #0
 800d710:	d03f      	beq.n	800d792 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d712:	0025      	movs	r5, r4
 800d714:	3541      	adds	r5, #65	; 0x41
 800d716:	782b      	ldrb	r3, [r5, #0]
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d105      	bne.n	800d72a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800d71e:	0023      	movs	r3, r4
 800d720:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d722:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800d724:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800d726:	f003 fac7 	bl	8010cb8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d72a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800d72c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d72e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800d730:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d732:	481d      	ldr	r0, [pc, #116]	; (800d7a8 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800d734:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d736:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800d738:	438a      	bics	r2, r1
 800d73a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d73c:	6861      	ldr	r1, [r4, #4]
 800d73e:	4a1b      	ldr	r2, [pc, #108]	; (800d7ac <HAL_I2C_Init+0xa4>)
 800d740:	400a      	ands	r2, r1
 800d742:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d744:	689a      	ldr	r2, [r3, #8]
 800d746:	4002      	ands	r2, r0
 800d748:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d74a:	68e2      	ldr	r2, [r4, #12]
 800d74c:	2a01      	cmp	r2, #1
 800d74e:	d121      	bne.n	800d794 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d750:	2180      	movs	r1, #128	; 0x80
 800d752:	0209      	lsls	r1, r1, #8
 800d754:	4331      	orrs	r1, r6
 800d756:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d758:	685a      	ldr	r2, [r3, #4]
 800d75a:	4915      	ldr	r1, [pc, #84]	; (800d7b0 <HAL_I2C_Init+0xa8>)
 800d75c:	4311      	orrs	r1, r2
 800d75e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d760:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d762:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d764:	4002      	ands	r2, r0
 800d766:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d768:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d76a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d76c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d76e:	69a1      	ldr	r1, [r4, #24]
 800d770:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d772:	430a      	orrs	r2, r1
 800d774:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d776:	6a21      	ldr	r1, [r4, #32]
 800d778:	69e2      	ldr	r2, [r4, #28]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d77e:	2201      	movs	r2, #1
 800d780:	6819      	ldr	r1, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800d786:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d788:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d78a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d78c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d78e:	3442      	adds	r4, #66	; 0x42
 800d790:	7020      	strb	r0, [r4, #0]
}
 800d792:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d794:	2184      	movs	r1, #132	; 0x84
 800d796:	0209      	lsls	r1, r1, #8
 800d798:	4331      	orrs	r1, r6
 800d79a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d79c:	2a02      	cmp	r2, #2
 800d79e:	d1db      	bne.n	800d758 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d7a0:	2280      	movs	r2, #128	; 0x80
 800d7a2:	0112      	lsls	r2, r2, #4
 800d7a4:	605a      	str	r2, [r3, #4]
 800d7a6:	e7d7      	b.n	800d758 <HAL_I2C_Init+0x50>
 800d7a8:	ffff7fff 	.word	0xffff7fff
 800d7ac:	f0ffffff 	.word	0xf0ffffff
 800d7b0:	02008000 	.word	0x02008000

0800d7b4 <HAL_I2C_Master_Transmit>:
{
 800d7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b6:	b087      	sub	sp, #28
 800d7b8:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7ba:	0003      	movs	r3, r0
 800d7bc:	3341      	adds	r3, #65	; 0x41
{
 800d7be:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7c0:	9303      	str	r3, [sp, #12]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
{
 800d7c4:	0004      	movs	r4, r0
 800d7c6:	000f      	movs	r7, r1
    return HAL_BUSY;
 800d7c8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7ca:	2b20      	cmp	r3, #32
 800d7cc:	d114      	bne.n	800d7f8 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800d7ce:	0023      	movs	r3, r4
 800d7d0:	3340      	adds	r3, #64	; 0x40
 800d7d2:	781a      	ldrb	r2, [r3, #0]
 800d7d4:	2a01      	cmp	r2, #1
 800d7d6:	d00f      	beq.n	800d7f8 <HAL_I2C_Master_Transmit+0x44>
 800d7d8:	2601      	movs	r6, #1
 800d7da:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800d7dc:	f7fe ff5e 	bl	800c69c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d7e0:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800d7e2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d7e4:	9000      	str	r0, [sp, #0]
 800d7e6:	2319      	movs	r3, #25
 800d7e8:	0032      	movs	r2, r6
 800d7ea:	0020      	movs	r0, r4
 800d7ec:	0209      	lsls	r1, r1, #8
 800d7ee:	f7ff fed5 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d002      	beq.n	800d7fc <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 800d7f6:	2001      	movs	r0, #1
}
 800d7f8:	b007      	add	sp, #28
 800d7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d7fc:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d7fe:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d800:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d802:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d804:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d806:	3b11      	subs	r3, #17
 800d808:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800d80a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d80c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800d80e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800d810:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800d812:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800d814:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d816:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d818:	4b2d      	ldr	r3, [pc, #180]	; (800d8d0 <HAL_I2C_Master_Transmit+0x11c>)
 800d81a:	2aff      	cmp	r2, #255	; 0xff
 800d81c:	d920      	bls.n	800d860 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d81e:	22ff      	movs	r2, #255	; 0xff
 800d820:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	2380      	movs	r3, #128	; 0x80
 800d826:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d828:	0039      	movs	r1, r7
 800d82a:	0020      	movs	r0, r4
 800d82c:	f7ff fdd0 	bl	800d3d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d830:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d832:	002a      	movs	r2, r5
 800d834:	0020      	movs	r0, r4
 800d836:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d119      	bne.n	800d870 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d83c:	f7ff ff3c 	bl	800d6b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d840:	2800      	cmp	r0, #0
 800d842:	d1d8      	bne.n	800d7f6 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d844:	2120      	movs	r1, #32
 800d846:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800d848:	4d22      	ldr	r5, [pc, #136]	; (800d8d4 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d84a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	402a      	ands	r2, r5
 800d850:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d852:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800d854:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800d856:	3341      	adds	r3, #65	; 0x41
 800d858:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d85a:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 800d85c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800d85e:	e7cb      	b.n	800d7f8 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800d860:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d862:	b292      	uxth	r2, r2
 800d864:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d866:	b2d2      	uxtb	r2, r2
 800d868:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d86a:	2380      	movs	r3, #128	; 0x80
 800d86c:	049b      	lsls	r3, r3, #18
 800d86e:	e7db      	b.n	800d828 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d870:	f7ff fe2a 	bl	800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d874:	2800      	cmp	r0, #0
 800d876:	d1be      	bne.n	800d7f6 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d87a:	6822      	ldr	r2, [r4, #0]
 800d87c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800d87e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d880:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d882:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d886:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d888:	3b01      	subs	r3, #1
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d88e:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d892:	b292      	uxth	r2, r2
 800d894:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0ca      	beq.n	800d830 <HAL_I2C_Master_Transmit+0x7c>
 800d89a:	2a00      	cmp	r2, #0
 800d89c:	d1c8      	bne.n	800d830 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d89e:	2180      	movs	r1, #128	; 0x80
 800d8a0:	0020      	movs	r0, r4
 800d8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8a4:	9500      	str	r5, [sp, #0]
 800d8a6:	f7ff fe79 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d1a3      	bne.n	800d7f6 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d8ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d8b0:	2bff      	cmp	r3, #255	; 0xff
 800d8b2:	d906      	bls.n	800d8c2 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d8b4:	23ff      	movs	r3, #255	; 0xff
 800d8b6:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d8b8:	2380      	movs	r3, #128	; 0x80
 800d8ba:	22ff      	movs	r2, #255	; 0xff
 800d8bc:	9000      	str	r0, [sp, #0]
 800d8be:	045b      	lsls	r3, r3, #17
 800d8c0:	e7b2      	b.n	800d828 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800d8c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d8c4:	b292      	uxth	r2, r2
 800d8c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8c8:	b2d2      	uxtb	r2, r2
 800d8ca:	9000      	str	r0, [sp, #0]
 800d8cc:	e7cd      	b.n	800d86a <HAL_I2C_Master_Transmit+0xb6>
 800d8ce:	46c0      	nop			; (mov r8, r8)
 800d8d0:	80002000 	.word	0x80002000
 800d8d4:	fe00e800 	.word	0xfe00e800

0800d8d8 <HAL_I2C_Master_Receive>:
{
 800d8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8de:	0003      	movs	r3, r0
 800d8e0:	3341      	adds	r3, #65	; 0x41
{
 800d8e2:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8e4:	9303      	str	r3, [sp, #12]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
{
 800d8e8:	0004      	movs	r4, r0
 800d8ea:	000f      	movs	r7, r1
    return HAL_BUSY;
 800d8ec:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8ee:	2b20      	cmp	r3, #32
 800d8f0:	d114      	bne.n	800d91c <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800d8f2:	0023      	movs	r3, r4
 800d8f4:	3340      	adds	r3, #64	; 0x40
 800d8f6:	781a      	ldrb	r2, [r3, #0]
 800d8f8:	2a01      	cmp	r2, #1
 800d8fa:	d00f      	beq.n	800d91c <HAL_I2C_Master_Receive+0x44>
 800d8fc:	2601      	movs	r6, #1
 800d8fe:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800d900:	f7fe fecc 	bl	800c69c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d904:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800d906:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d908:	9000      	str	r0, [sp, #0]
 800d90a:	2319      	movs	r3, #25
 800d90c:	0032      	movs	r2, r6
 800d90e:	0020      	movs	r0, r4
 800d910:	0209      	lsls	r1, r1, #8
 800d912:	f7ff fe43 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800d916:	2800      	cmp	r0, #0
 800d918:	d002      	beq.n	800d920 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 800d91a:	2001      	movs	r0, #1
}
 800d91c:	b007      	add	sp, #28
 800d91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d920:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d922:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d924:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d926:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d928:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d92a:	3b12      	subs	r3, #18
 800d92c:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800d92e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d930:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800d932:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800d934:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800d936:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800d938:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d93a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d93c:	4b2d      	ldr	r3, [pc, #180]	; (800d9f4 <HAL_I2C_Master_Receive+0x11c>)
 800d93e:	2aff      	cmp	r2, #255	; 0xff
 800d940:	d920      	bls.n	800d984 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d942:	22ff      	movs	r2, #255	; 0xff
 800d944:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	2380      	movs	r3, #128	; 0x80
 800d94a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d94c:	0039      	movs	r1, r7
 800d94e:	0020      	movs	r0, r4
 800d950:	f7ff fd3e 	bl	800d3d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d956:	002a      	movs	r2, r5
 800d958:	0020      	movs	r0, r4
 800d95a:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d119      	bne.n	800d994 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d960:	f7ff feaa 	bl	800d6b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d964:	2800      	cmp	r0, #0
 800d966:	d1d8      	bne.n	800d91a <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d968:	2120      	movs	r1, #32
 800d96a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800d96c:	4d22      	ldr	r5, [pc, #136]	; (800d9f8 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d96e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	402a      	ands	r2, r5
 800d974:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d976:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800d978:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800d97a:	3341      	adds	r3, #65	; 0x41
 800d97c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d97e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 800d980:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800d982:	e7cb      	b.n	800d91c <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800d984:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d986:	b292      	uxth	r2, r2
 800d988:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d98e:	2380      	movs	r3, #128	; 0x80
 800d990:	049b      	lsls	r3, r3, #18
 800d992:	e7db      	b.n	800d94c <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d994:	f7ff fdc2 	bl	800d51c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d1be      	bne.n	800d91a <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d99c:	6823      	ldr	r3, [r4, #0]
 800d99e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800d9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d9a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d9ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d9ae:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d9b8:	b292      	uxth	r2, r2
 800d9ba:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d0c9      	beq.n	800d954 <HAL_I2C_Master_Receive+0x7c>
 800d9c0:	2a00      	cmp	r2, #0
 800d9c2:	d1c7      	bne.n	800d954 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d9c4:	2180      	movs	r1, #128	; 0x80
 800d9c6:	0020      	movs	r0, r4
 800d9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ca:	9500      	str	r5, [sp, #0]
 800d9cc:	f7ff fde6 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d1a2      	bne.n	800d91a <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d9d6:	2bff      	cmp	r3, #255	; 0xff
 800d9d8:	d906      	bls.n	800d9e8 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d9da:	23ff      	movs	r3, #255	; 0xff
 800d9dc:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d9de:	2380      	movs	r3, #128	; 0x80
 800d9e0:	22ff      	movs	r2, #255	; 0xff
 800d9e2:	9000      	str	r0, [sp, #0]
 800d9e4:	045b      	lsls	r3, r3, #17
 800d9e6:	e7b1      	b.n	800d94c <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800d9e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d9ea:	b292      	uxth	r2, r2
 800d9ec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d9ee:	b2d2      	uxtb	r2, r2
 800d9f0:	9000      	str	r0, [sp, #0]
 800d9f2:	e7cc      	b.n	800d98e <HAL_I2C_Master_Receive+0xb6>
 800d9f4:	80002400 	.word	0x80002400
 800d9f8:	fe00e800 	.word	0xfe00e800

0800d9fc <HAL_I2C_Mem_Write>:
{
 800d9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9fe:	b089      	sub	sp, #36	; 0x24
 800da00:	9307      	str	r3, [sp, #28]
 800da02:	ab0e      	add	r3, sp, #56	; 0x38
 800da04:	9206      	str	r2, [sp, #24]
 800da06:	cb04      	ldmia	r3!, {r2}
 800da08:	0004      	movs	r4, r0
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	9203      	str	r2, [sp, #12]
 800da0e:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800da10:	0003      	movs	r3, r0
 800da12:	3341      	adds	r3, #65	; 0x41
 800da14:	9305      	str	r3, [sp, #20]
 800da16:	781b      	ldrb	r3, [r3, #0]
{
 800da18:	000f      	movs	r7, r1
    return HAL_BUSY;
 800da1a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800da1c:	2b20      	cmp	r3, #32
 800da1e:	d108      	bne.n	800da32 <HAL_I2C_Mem_Write+0x36>
    if ((pData == NULL) || (Size == 0U))
 800da20:	2a00      	cmp	r2, #0
 800da22:	d002      	beq.n	800da2a <HAL_I2C_Mem_Write+0x2e>
 800da24:	9b04      	ldr	r3, [sp, #16]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <HAL_I2C_Mem_Write+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800da2a:	2380      	movs	r3, #128	; 0x80
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800da30:	2001      	movs	r0, #1
}
 800da32:	b009      	add	sp, #36	; 0x24
 800da34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800da36:	0023      	movs	r3, r4
 800da38:	3340      	adds	r3, #64	; 0x40
 800da3a:	9302      	str	r3, [sp, #8]
 800da3c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800da3e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800da40:	2b01      	cmp	r3, #1
 800da42:	d0f6      	beq.n	800da32 <HAL_I2C_Mem_Write+0x36>
 800da44:	2201      	movs	r2, #1
 800da46:	9b02      	ldr	r3, [sp, #8]
 800da48:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800da4a:	f7fe fe27 	bl	800c69c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800da4e:	2180      	movs	r1, #128	; 0x80
 800da50:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800da52:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800da54:	2319      	movs	r3, #25
 800da56:	2201      	movs	r2, #1
 800da58:	0020      	movs	r0, r4
 800da5a:	0209      	lsls	r1, r1, #8
 800da5c:	f7ff fd9e 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800da60:	1e06      	subs	r6, r0, #0
 800da62:	d1e5      	bne.n	800da30 <HAL_I2C_Mem_Write+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800da64:	2321      	movs	r3, #33	; 0x21
 800da66:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800da68:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800da6a:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800da6c:	0023      	movs	r3, r4
 800da6e:	3342      	adds	r3, #66	; 0x42
 800da70:	9305      	str	r3, [sp, #20]
 800da72:	2340      	movs	r3, #64	; 0x40
 800da74:	9a05      	ldr	r2, [sp, #20]
 800da76:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800da78:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da7a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800da7c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800da7e:	9b04      	ldr	r3, [sp, #16]
    hi2c->XferISR   = NULL;
 800da80:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800da82:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800da84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da86:	0020      	movs	r0, r4
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	9a06      	ldr	r2, [sp, #24]
 800da8c:	9b07      	ldr	r3, [sp, #28]
 800da8e:	9501      	str	r5, [sp, #4]
 800da90:	f7ff fdac 	bl	800d5ec <I2C_RequestMemoryWrite>
 800da94:	2800      	cmp	r0, #0
 800da96:	d002      	beq.n	800da9e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800da98:	9b02      	ldr	r3, [sp, #8]
 800da9a:	701e      	strb	r6, [r3, #0]
 800da9c:	e7c8      	b.n	800da30 <HAL_I2C_Mem_Write+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800daa0:	2bff      	cmp	r3, #255	; 0xff
 800daa2:	d954      	bls.n	800db4e <HAL_I2C_Mem_Write+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800daa4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800daa6:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800daa8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800daaa:	045b      	lsls	r3, r3, #17
 800daac:	9000      	str	r0, [sp, #0]
 800daae:	0039      	movs	r1, r7
 800dab0:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dab2:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dab4:	f7ff fc8c 	bl	800d3d0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dab8:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800daba:	002a      	movs	r2, r5
 800dabc:	0020      	movs	r0, r4
 800dabe:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dac0:	f7ff fd02 	bl	800d4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d1b3      	bne.n	800da30 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800dace:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dad0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800dad2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800dad4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dad6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800dad8:	3b01      	subs	r3, #1
 800dada:	b29b      	uxth	r3, r3
 800dadc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dade:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dae2:	b292      	uxth	r2, r2
 800dae4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d017      	beq.n	800db1a <HAL_I2C_Mem_Write+0x11e>
 800daea:	2a00      	cmp	r2, #0
 800daec:	d115      	bne.n	800db1a <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800daee:	2180      	movs	r1, #128	; 0x80
 800daf0:	0020      	movs	r0, r4
 800daf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daf4:	9500      	str	r5, [sp, #0]
 800daf6:	f7ff fd51 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d000      	beq.n	800db00 <HAL_I2C_Mem_Write+0x104>
 800dafe:	e797      	b.n	800da30 <HAL_I2C_Mem_Write+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800db02:	2bff      	cmp	r3, #255	; 0xff
 800db04:	d92b      	bls.n	800db5e <HAL_I2C_Mem_Write+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db06:	23ff      	movs	r3, #255	; 0xff
 800db08:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800db0a:	2380      	movs	r3, #128	; 0x80
 800db0c:	22ff      	movs	r2, #255	; 0xff
 800db0e:	9000      	str	r0, [sp, #0]
 800db10:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800db12:	0039      	movs	r1, r7
 800db14:	0020      	movs	r0, r4
 800db16:	f7ff fc5b 	bl	800d3d0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800db1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1cc      	bne.n	800daba <HAL_I2C_Mem_Write+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db20:	002a      	movs	r2, r5
 800db22:	0020      	movs	r0, r4
 800db24:	9910      	ldr	r1, [sp, #64]	; 0x40
 800db26:	f7ff fdc7 	bl	800d6b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d000      	beq.n	800db30 <HAL_I2C_Mem_Write+0x134>
 800db2e:	e77f      	b.n	800da30 <HAL_I2C_Mem_Write+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db30:	2120      	movs	r1, #32
 800db32:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800db34:	4d0d      	ldr	r5, [pc, #52]	; (800db6c <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db36:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	402a      	ands	r2, r5
 800db3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800db3e:	0023      	movs	r3, r4
 800db40:	3341      	adds	r3, #65	; 0x41
 800db42:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800db44:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 800db46:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800db48:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800db4a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800db4c:	e771      	b.n	800da32 <HAL_I2C_Mem_Write+0x36>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db4e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800db50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db52:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800db54:	b292      	uxth	r2, r2
 800db56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db58:	b2d2      	uxtb	r2, r2
 800db5a:	9000      	str	r0, [sp, #0]
 800db5c:	e7a7      	b.n	800daae <HAL_I2C_Mem_Write+0xb2>
          hi2c->XferSize = hi2c->XferCount;
 800db5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800db60:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800db62:	b292      	uxth	r2, r2
 800db64:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800db66:	b2d2      	uxtb	r2, r2
 800db68:	9000      	str	r0, [sp, #0]
 800db6a:	e7d2      	b.n	800db12 <HAL_I2C_Mem_Write+0x116>
 800db6c:	fe00e800 	.word	0xfe00e800

0800db70 <HAL_I2C_Mem_Read>:
{
 800db70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db72:	b08b      	sub	sp, #44	; 0x2c
 800db74:	9309      	str	r3, [sp, #36]	; 0x24
 800db76:	ab10      	add	r3, sp, #64	; 0x40
 800db78:	9208      	str	r2, [sp, #32]
 800db7a:	cb04      	ldmia	r3!, {r2}
 800db7c:	0004      	movs	r4, r0
 800db7e:	881b      	ldrh	r3, [r3, #0]
 800db80:	9205      	str	r2, [sp, #20]
 800db82:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db84:	0003      	movs	r3, r0
 800db86:	3341      	adds	r3, #65	; 0x41
 800db88:	9307      	str	r3, [sp, #28]
 800db8a:	781b      	ldrb	r3, [r3, #0]
{
 800db8c:	000d      	movs	r5, r1
    return HAL_BUSY;
 800db8e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db90:	2b20      	cmp	r3, #32
 800db92:	d108      	bne.n	800dba6 <HAL_I2C_Mem_Read+0x36>
    if ((pData == NULL) || (Size == 0U))
 800db94:	2a00      	cmp	r2, #0
 800db96:	d002      	beq.n	800db9e <HAL_I2C_Mem_Read+0x2e>
 800db98:	9b06      	ldr	r3, [sp, #24]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d105      	bne.n	800dbaa <HAL_I2C_Mem_Read+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800db9e:	2380      	movs	r3, #128	; 0x80
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800dba4:	2001      	movs	r0, #1
}
 800dba6:	b00b      	add	sp, #44	; 0x2c
 800dba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800dbaa:	0023      	movs	r3, r4
 800dbac:	3340      	adds	r3, #64	; 0x40
 800dbae:	9304      	str	r3, [sp, #16]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800dbb2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d0f6      	beq.n	800dba6 <HAL_I2C_Mem_Read+0x36>
 800dbb8:	2701      	movs	r7, #1
 800dbba:	9b04      	ldr	r3, [sp, #16]
 800dbbc:	701f      	strb	r7, [r3, #0]
    tickstart = HAL_GetTick();
 800dbbe:	f7fe fd6d 	bl	800c69c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dbc2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800dbc4:	9003      	str	r0, [sp, #12]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dbc6:	9000      	str	r0, [sp, #0]
 800dbc8:	2319      	movs	r3, #25
 800dbca:	003a      	movs	r2, r7
 800dbcc:	0020      	movs	r0, r4
 800dbce:	0209      	lsls	r1, r1, #8
 800dbd0:	f7ff fce4 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800dbd4:	1e06      	subs	r6, r0, #0
 800dbd6:	d1e5      	bne.n	800dba4 <HAL_I2C_Mem_Read+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dbd8:	2322      	movs	r3, #34	; 0x22
 800dbda:	9a07      	ldr	r2, [sp, #28]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dbdc:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dbde:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dbe0:	0023      	movs	r3, r4
 800dbe2:	3342      	adds	r3, #66	; 0x42
 800dbe4:	9307      	str	r3, [sp, #28]
 800dbe6:	2340      	movs	r3, #64	; 0x40
 800dbe8:	9a07      	ldr	r2, [sp, #28]
 800dbea:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800dbec:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbee:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800dbf0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800dbf2:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 800dbf4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800dbf6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dbf8:	9b03      	ldr	r3, [sp, #12]
 800dbfa:	0020      	movs	r0, r4
 800dbfc:	9301      	str	r3, [sp, #4]
 800dbfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc00:	9a08      	ldr	r2, [sp, #32]
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc06:	f7ff fd25 	bl	800d654 <I2C_RequestMemoryRead>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d002      	beq.n	800dc14 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 800dc0e:	9b04      	ldr	r3, [sp, #16]
 800dc10:	701e      	strb	r6, [r3, #0]
      return HAL_ERROR;
 800dc12:	e7c7      	b.n	800dba4 <HAL_I2C_Mem_Read+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800dc16:	4b36      	ldr	r3, [pc, #216]	; (800dcf0 <HAL_I2C_Mem_Read+0x180>)
 800dc18:	2aff      	cmp	r2, #255	; 0xff
 800dc1a:	d959      	bls.n	800dcd0 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc1c:	22ff      	movs	r2, #255	; 0xff
 800dc1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	2380      	movs	r3, #128	; 0x80
 800dc24:	045b      	lsls	r3, r3, #17
 800dc26:	0029      	movs	r1, r5
 800dc28:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc2a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dc2c:	f7ff fbd0 	bl	800d3d0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc30:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc32:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dc34:	9b03      	ldr	r3, [sp, #12]
 800dc36:	2200      	movs	r2, #0
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	2104      	movs	r1, #4
 800dc3c:	0020      	movs	r0, r4
 800dc3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc40:	f7ff fcac 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	d1ad      	bne.n	800dba4 <HAL_I2C_Mem_Read+0x34>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800dc50:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800dc52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800dc54:	3301      	adds	r3, #1
 800dc56:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800dc58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dc5a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dc64:	b292      	uxth	r2, r2
 800dc66:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d017      	beq.n	800dc9c <HAL_I2C_Mem_Read+0x12c>
 800dc6c:	2a00      	cmp	r2, #0
 800dc6e:	d115      	bne.n	800dc9c <HAL_I2C_Mem_Read+0x12c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dc70:	9b03      	ldr	r3, [sp, #12]
 800dc72:	2180      	movs	r1, #128	; 0x80
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	0020      	movs	r0, r4
 800dc78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc7a:	f7ff fc8f 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d000      	beq.n	800dc84 <HAL_I2C_Mem_Read+0x114>
 800dc82:	e78f      	b.n	800dba4 <HAL_I2C_Mem_Read+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc86:	2bff      	cmp	r3, #255	; 0xff
 800dc88:	d92a      	bls.n	800dce0 <HAL_I2C_Mem_Read+0x170>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dc8a:	2380      	movs	r3, #128	; 0x80
 800dc8c:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc8e:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dc90:	045b      	lsls	r3, r3, #17
 800dc92:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc94:	0029      	movs	r1, r5
 800dc96:	0020      	movs	r0, r4
 800dc98:	f7ff fb9a 	bl	800d3d0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800dc9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1c8      	bne.n	800dc34 <HAL_I2C_Mem_Read+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dca2:	0020      	movs	r0, r4
 800dca4:	9a03      	ldr	r2, [sp, #12]
 800dca6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dca8:	f7ff fd06 	bl	800d6b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d000      	beq.n	800dcb2 <HAL_I2C_Mem_Read+0x142>
 800dcb0:	e778      	b.n	800dba4 <HAL_I2C_Mem_Read+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dcb2:	2120      	movs	r1, #32
 800dcb4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800dcb6:	4d0f      	ldr	r5, [pc, #60]	; (800dcf4 <HAL_I2C_Mem_Read+0x184>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dcb8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800dcba:	685a      	ldr	r2, [r3, #4]
 800dcbc:	402a      	ands	r2, r5
 800dcbe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dcc0:	0023      	movs	r3, r4
 800dcc2:	3341      	adds	r3, #65	; 0x41
 800dcc4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dcc6:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800dcc8:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dcca:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800dccc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800dcce:	e76a      	b.n	800dba6 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = hi2c->XferCount;
 800dcd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800dcd2:	b292      	uxth	r2, r2
 800dcd4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	2380      	movs	r3, #128	; 0x80
 800dcda:	b2d2      	uxtb	r2, r2
 800dcdc:	049b      	lsls	r3, r3, #18
 800dcde:	e7a2      	b.n	800dc26 <HAL_I2C_Mem_Read+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 800dce0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dce2:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800dce4:	b292      	uxth	r2, r2
 800dce6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dce8:	b2d2      	uxtb	r2, r2
 800dcea:	9000      	str	r0, [sp, #0]
 800dcec:	e7d2      	b.n	800dc94 <HAL_I2C_Mem_Read+0x124>
 800dcee:	46c0      	nop			; (mov r8, r8)
 800dcf0:	80002400 	.word	0x80002400
 800dcf4:	fe00e800 	.word	0xfe00e800

0800dcf8 <HAL_I2C_IsDeviceReady>:
{
 800dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfa:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 800dcfc:	2300      	movs	r3, #0
{
 800dcfe:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 800dd00:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd02:	0003      	movs	r3, r0
{
 800dd04:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd06:	3341      	adds	r3, #65	; 0x41
 800dd08:	781a      	ldrb	r2, [r3, #0]
{
 800dd0a:	0004      	movs	r4, r0
    return HAL_BUSY;
 800dd0c:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd0e:	2a20      	cmp	r2, #32
 800dd10:	d15b      	bne.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800dd12:	6802      	ldr	r2, [r0, #0]
 800dd14:	6997      	ldr	r7, [r2, #24]
 800dd16:	2280      	movs	r2, #128	; 0x80
 800dd18:	0038      	movs	r0, r7
 800dd1a:	0212      	lsls	r2, r2, #8
 800dd1c:	4010      	ands	r0, r2
 800dd1e:	4217      	tst	r7, r2
 800dd20:	d153      	bne.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 800dd22:	0022      	movs	r2, r4
 800dd24:	3240      	adds	r2, #64	; 0x40
 800dd26:	7817      	ldrb	r7, [r2, #0]
 800dd28:	2f01      	cmp	r7, #1
 800dd2a:	d04e      	beq.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
 800dd2c:	3d01      	subs	r5, #1
 800dd2e:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd30:	2224      	movs	r2, #36	; 0x24
 800dd32:	0589      	lsls	r1, r1, #22
 800dd34:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd36:	0d8b      	lsrs	r3, r1, #22
 800dd38:	6460      	str	r0, [r4, #68]	; 0x44
 800dd3a:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800dd3c:	68e3      	ldr	r3, [r4, #12]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d12b      	bne.n	800dd9a <HAL_I2C_IsDeviceReady+0xa2>
 800dd42:	4b3e      	ldr	r3, [pc, #248]	; (800de3c <HAL_I2C_IsDeviceReady+0x144>)
 800dd44:	9a04      	ldr	r2, [sp, #16]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	6822      	ldr	r2, [r4, #0]
 800dd4a:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800dd4c:	f7fe fca6 	bl	800c69c <HAL_GetTick>
 800dd50:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd52:	2201      	movs	r2, #1
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dd58:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd5a:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dd5c:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd5e:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dd60:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800dd62:	431d      	orrs	r5, r3
 800dd64:	d01c      	beq.n	800dda0 <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	2710      	movs	r7, #16
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	001a      	movs	r2, r3
 800dd6e:	403a      	ands	r2, r7
 800dd70:	423b      	tst	r3, r7
 800dd72:	d12d      	bne.n	800ddd0 <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800dd74:	9b03      	ldr	r3, [sp, #12]
 800dd76:	2120      	movs	r1, #32
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	0020      	movs	r0, r4
 800dd7c:	0033      	movs	r3, r6
 800dd7e:	f7ff fc0d 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d121      	bne.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd86:	2320      	movs	r3, #32
 800dd88:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 800dd8a:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd8c:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800dd8e:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 800dd90:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800dd92:	3241      	adds	r2, #65	; 0x41
 800dd94:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800dd96:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 800dd98:	e017      	b.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800dd9a:	23a0      	movs	r3, #160	; 0xa0
 800dd9c:	019b      	lsls	r3, r3, #6
 800dd9e:	e7d1      	b.n	800dd44 <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 800dda0:	1c73      	adds	r3, r6, #1
 800dda2:	d0d6      	beq.n	800dd52 <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dda4:	f7fe fc7a 	bl	800c69c <HAL_GetTick>
 800dda8:	9b03      	ldr	r3, [sp, #12]
 800ddaa:	1ac0      	subs	r0, r0, r3
 800ddac:	42b0      	cmp	r0, r6
 800ddae:	d801      	bhi.n	800ddb4 <HAL_I2C_IsDeviceReady+0xbc>
 800ddb0:	2e00      	cmp	r6, #0
 800ddb2:	d1ce      	bne.n	800dd52 <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 800ddb4:	0022      	movs	r2, r4
 800ddb6:	2320      	movs	r3, #32
 800ddb8:	3241      	adds	r2, #65	; 0x41
 800ddba:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ddbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 800ddbe:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	3440      	adds	r4, #64	; 0x40
 800ddc8:	7023      	strb	r3, [r4, #0]
}
 800ddca:	0028      	movs	r0, r5
 800ddcc:	b009      	add	sp, #36	; 0x24
 800ddce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ddd0:	9b03      	ldr	r3, [sp, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	2120      	movs	r1, #32
 800ddd8:	0033      	movs	r3, r6
 800ddda:	0020      	movs	r0, r4
 800dddc:	f7ff fbde 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800dde0:	1e02      	subs	r2, r0, #0
 800dde2:	d1f2      	bne.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dde4:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 800dde6:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dde8:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ddea:	2720      	movs	r7, #32
 800ddec:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 800ddee:	9907      	ldr	r1, [sp, #28]
 800ddf0:	4281      	cmp	r1, r0
 800ddf2:	d10f      	bne.n	800de14 <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ddf4:	2180      	movs	r1, #128	; 0x80
 800ddf6:	6858      	ldr	r0, [r3, #4]
 800ddf8:	01c9      	lsls	r1, r1, #7
 800ddfa:	4301      	orrs	r1, r0
 800ddfc:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	0039      	movs	r1, r7
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	0020      	movs	r0, r4
 800de06:	0033      	movs	r3, r6
 800de08:	f7ff fbc8 	bl	800d59c <I2C_WaitOnFlagUntilTimeout>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d1dc      	bne.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 800de14:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800de16:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 800de18:	3301      	adds	r3, #1
 800de1a:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800de1c:	9b07      	ldr	r3, [sp, #28]
 800de1e:	4293      	cmp	r3, r2
 800de20:	d200      	bcs.n	800de24 <HAL_I2C_IsDeviceReady+0x12c>
 800de22:	e78b      	b.n	800dd3c <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 800de24:	0022      	movs	r2, r4
 800de26:	2320      	movs	r3, #32
 800de28:	3241      	adds	r2, #65	; 0x41
 800de2a:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800de2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800de2e:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800de30:	4313      	orrs	r3, r2
 800de32:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 800de34:	2300      	movs	r3, #0
 800de36:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800de38:	e7c7      	b.n	800ddca <HAL_I2C_IsDeviceReady+0xd2>
 800de3a:	46c0      	nop			; (mov r8, r8)
 800de3c:	02002000 	.word	0x02002000

0800de40 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800de40:	6803      	ldr	r3, [r0, #0]
{
 800de42:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800de44:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800de46:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800de48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d000      	beq.n	800de50 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800de4e:	4798      	blx	r3
}
 800de50:	bd10      	pop	{r4, pc}

0800de52 <HAL_I2C_SlaveTxCpltCallback>:
 800de52:	4770      	bx	lr

0800de54 <HAL_I2C_SlaveRxCpltCallback>:
 800de54:	4770      	bx	lr
	...

0800de58 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800de58:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800de5a:	6803      	ldr	r3, [r0, #0]
{
 800de5c:	b510      	push	{r4, lr}
 800de5e:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800de60:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800de62:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800de64:	3142      	adds	r1, #66	; 0x42
 800de66:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800de68:	2101      	movs	r1, #1
 800de6a:	0450      	lsls	r0, r2, #17
 800de6c:	d518      	bpl.n	800dea0 <I2C_ITSlaveSeqCplt+0x48>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	4918      	ldr	r1, [pc, #96]	; (800ded4 <I2C_ITSlaveSeqCplt+0x7c>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800de72:	400a      	ands	r2, r1
 800de74:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800de76:	0023      	movs	r3, r4
 800de78:	3341      	adds	r3, #65	; 0x41
 800de7a:	781a      	ldrb	r2, [r3, #0]
 800de7c:	2a29      	cmp	r2, #41	; 0x29
 800de7e:	d115      	bne.n	800deac <I2C_ITSlaveSeqCplt+0x54>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800de80:	3a01      	subs	r2, #1
 800de82:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800de84:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800de86:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800de88:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800de8a:	2101      	movs	r1, #1
 800de8c:	f7ff fab4 	bl	800d3f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800de90:	0023      	movs	r3, r4
 800de92:	2200      	movs	r2, #0
 800de94:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800de96:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800de98:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800de9a:	f7ff ffda 	bl	800de52 <HAL_I2C_SlaveTxCpltCallback>
}
 800de9e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dea0:	0bd2      	lsrs	r2, r2, #15
 800dea2:	420a      	tst	r2, r1
 800dea4:	d0e7      	beq.n	800de76 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	490b      	ldr	r1, [pc, #44]	; (800ded8 <I2C_ITSlaveSeqCplt+0x80>)
 800deaa:	e7e2      	b.n	800de72 <I2C_ITSlaveSeqCplt+0x1a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800deac:	781a      	ldrb	r2, [r3, #0]
 800deae:	2a2a      	cmp	r2, #42	; 0x2a
 800deb0:	d1f5      	bne.n	800de9e <I2C_ITSlaveSeqCplt+0x46>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800deb2:	3a02      	subs	r2, #2
 800deb4:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800deb6:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800deb8:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800deba:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800debc:	2102      	movs	r1, #2
 800debe:	f7ff fa9b 	bl	800d3f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dec2:	0023      	movs	r3, r4
 800dec4:	2200      	movs	r2, #0
 800dec6:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dec8:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800deca:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800decc:	f7ff ffc2 	bl	800de54 <HAL_I2C_SlaveRxCpltCallback>
}
 800ded0:	e7e5      	b.n	800de9e <I2C_ITSlaveSeqCplt+0x46>
 800ded2:	46c0      	nop			; (mov r8, r8)
 800ded4:	ffffbfff 	.word	0xffffbfff
 800ded8:	ffff7fff 	.word	0xffff7fff

0800dedc <HAL_I2C_AddrCallback>:
}
 800dedc:	4770      	bx	lr

0800dede <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dede:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800dee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dee2:	2228      	movs	r2, #40	; 0x28
 800dee4:	3341      	adds	r3, #65	; 0x41
 800dee6:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800dee8:	0004      	movs	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 800deea:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800deec:	4013      	ands	r3, r2
 800deee:	4293      	cmp	r3, r2
 800def0:	d13c      	bne.n	800df6c <I2C_ITAddrCplt.constprop.0+0x8e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800def2:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 800def4:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800def6:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800def8:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800defa:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800defc:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800defe:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800df00:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800df02:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 800df04:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800df06:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800df08:	2a02      	cmp	r2, #2
 800df0a:	d125      	bne.n	800df58 <I2C_ITAddrCplt.constprop.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800df0c:	059b      	lsls	r3, r3, #22
 800df0e:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800df10:	0f5b      	lsrs	r3, r3, #29
 800df12:	405e      	eors	r6, r3
 800df14:	0030      	movs	r0, r6
 800df16:	2306      	movs	r3, #6
 800df18:	4018      	ands	r0, r3
 800df1a:	421e      	tst	r6, r3
 800df1c:	d110      	bne.n	800df40 <I2C_ITAddrCplt.constprop.0+0x62>
        hi2c->AddrEventCount++;
 800df1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df20:	3301      	adds	r3, #1
 800df22:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800df24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df26:	2b02      	cmp	r3, #2
 800df28:	d109      	bne.n	800df3e <I2C_ITAddrCplt.constprop.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800df2a:	3306      	adds	r3, #6
          hi2c->AddrEventCount = 0U;
 800df2c:	64a0      	str	r0, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800df2e:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 800df30:	0023      	movs	r3, r4
 800df32:	3340      	adds	r3, #64	; 0x40
 800df34:	7018      	strb	r0, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800df36:	0029      	movs	r1, r5
 800df38:	0020      	movs	r0, r4
 800df3a:	f7ff ffcf 	bl	800dedc <HAL_I2C_AddrCallback>
}
 800df3e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800df40:	2180      	movs	r1, #128	; 0x80
 800df42:	0020      	movs	r0, r4
 800df44:	0209      	lsls	r1, r1, #8
 800df46:	f7ff fa57 	bl	800d3f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800df4a:	0023      	movs	r3, r4
 800df4c:	2200      	movs	r2, #0
 800df4e:	3340      	adds	r3, #64	; 0x40
 800df50:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800df52:	9a01      	ldr	r2, [sp, #4]
 800df54:	403a      	ands	r2, r7
 800df56:	e7ee      	b.n	800df36 <I2C_ITAddrCplt.constprop.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800df58:	2180      	movs	r1, #128	; 0x80
 800df5a:	0209      	lsls	r1, r1, #8
 800df5c:	f7ff fa4c 	bl	800d3f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800df60:	0023      	movs	r3, r4
 800df62:	2200      	movs	r2, #0
 800df64:	3340      	adds	r3, #64	; 0x40
 800df66:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800df68:	0032      	movs	r2, r6
 800df6a:	e7e4      	b.n	800df36 <I2C_ITAddrCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800df6c:	2308      	movs	r3, #8
 800df6e:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 800df70:	2300      	movs	r3, #0
 800df72:	3440      	adds	r4, #64	; 0x40
 800df74:	7023      	strb	r3, [r4, #0]
}
 800df76:	e7e2      	b.n	800df3e <I2C_ITAddrCplt.constprop.0+0x60>

0800df78 <HAL_I2C_ListenCpltCallback>:
 800df78:	4770      	bx	lr
	...

0800df7c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800df7c:	4b18      	ldr	r3, [pc, #96]	; (800dfe0 <I2C_ITListenCplt+0x64>)
{
 800df7e:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800df80:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800df82:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800df84:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800df86:	6303      	str	r3, [r0, #48]	; 0x30
{
 800df88:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800df8a:	2020      	movs	r0, #32
 800df8c:	3241      	adds	r2, #65	; 0x41
 800df8e:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800df90:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 800df92:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800df94:	074b      	lsls	r3, r1, #29
 800df96:	d513      	bpl.n	800dfc0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800df98:	6823      	ldr	r3, [r4, #0]
 800df9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800df9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800dfa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800dfa6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d009      	beq.n	800dfc0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800dfac:	3b01      	subs	r3, #1
 800dfae:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800dfb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dfb8:	2304      	movs	r3, #4
 800dfba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dfc0:	0020      	movs	r0, r4
 800dfc2:	4908      	ldr	r1, [pc, #32]	; (800dfe4 <I2C_ITListenCplt+0x68>)
 800dfc4:	f7ff fa18 	bl	800d3f8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dfc8:	2210      	movs	r2, #16
 800dfca:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800dfcc:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dfce:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800dfd0:	0023      	movs	r3, r4
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	3340      	adds	r3, #64	; 0x40
 800dfd6:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800dfd8:	f7ff ffce 	bl	800df78 <HAL_I2C_ListenCpltCallback>
}
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	ffff0000 	.word	0xffff0000
 800dfe4:	00008003 	.word	0x00008003

0800dfe8 <HAL_I2C_ErrorCallback>:
 800dfe8:	4770      	bx	lr

0800dfea <HAL_I2C_AbortCpltCallback>:
 800dfea:	4770      	bx	lr

0800dfec <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dfec:	0001      	movs	r1, r0
 800dfee:	0002      	movs	r2, r0
{
 800dff0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dff2:	3141      	adds	r1, #65	; 0x41
 800dff4:	780c      	ldrb	r4, [r1, #0]
 800dff6:	2300      	movs	r3, #0
 800dff8:	3240      	adds	r2, #64	; 0x40
 800dffa:	2c60      	cmp	r4, #96	; 0x60
 800dffc:	d106      	bne.n	800e00c <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 800dffe:	3c40      	subs	r4, #64	; 0x40
 800e000:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e002:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e004:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800e006:	f7ff fff0 	bl	800dfea <HAL_I2C_AbortCpltCallback>
}
 800e00a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 800e00c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e00e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800e010:	f7ff ffea 	bl	800dfe8 <HAL_I2C_ErrorCallback>
}
 800e014:	e7f9      	b.n	800e00a <I2C_TreatErrorCallback+0x1e>
	...

0800e018 <I2C_ITError>:
{
 800e018:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e01a:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e01c:	0005      	movs	r5, r0
{
 800e01e:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e020:	2000      	movs	r0, #0
 800e022:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e024:	3541      	adds	r5, #65	; 0x41
 800e026:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e028:	7010      	strb	r0, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e02a:	4a32      	ldr	r2, [pc, #200]	; (800e0f4 <I2C_ITError+0xdc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e02c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e02e:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800e030:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800e032:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e034:	430a      	orrs	r2, r1
 800e036:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e038:	2b02      	cmp	r3, #2
 800e03a:	d82b      	bhi.n	800e094 <I2C_ITError+0x7c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e03c:	2103      	movs	r1, #3
 800e03e:	0020      	movs	r0, r4
 800e040:	f7ff f9da 	bl	800d3f8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e044:	2328      	movs	r3, #40	; 0x28
 800e046:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e048:	4b2b      	ldr	r3, [pc, #172]	; (800e0f8 <I2C_ITError+0xe0>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e04a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 800e04c:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800e04e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e050:	2800      	cmp	r0, #0
 800e052:	d02e      	beq.n	800e0b2 <I2C_ITError+0x9a>
 800e054:	001a      	movs	r2, r3
 800e056:	2110      	movs	r1, #16
 800e058:	3a11      	subs	r2, #17
 800e05a:	438a      	bics	r2, r1
 800e05c:	d129      	bne.n	800e0b2 <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	0452      	lsls	r2, r2, #17
 800e064:	d503      	bpl.n	800e06e <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	4924      	ldr	r1, [pc, #144]	; (800e0fc <I2C_ITError+0xe4>)
 800e06a:	400a      	ands	r2, r1
 800e06c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e06e:	f7fe ffcb 	bl	800d008 <HAL_DMA_GetState>
 800e072:	2801      	cmp	r0, #1
 800e074:	d019      	beq.n	800e0aa <I2C_ITError+0x92>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e076:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e078:	4b21      	ldr	r3, [pc, #132]	; (800e100 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 800e07a:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e07c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800e07e:	0023      	movs	r3, r4
 800e080:	3340      	adds	r3, #64	; 0x40
 800e082:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e084:	f7fe ff50 	bl	800cf28 <HAL_DMA_Abort_IT>
 800e088:	2800      	cmp	r0, #0
 800e08a:	d011      	beq.n	800e0b0 <I2C_ITError+0x98>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e08c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e08e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e090:	4798      	blx	r3
}
 800e092:	e00d      	b.n	800e0b0 <I2C_ITError+0x98>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e094:	0020      	movs	r0, r4
 800e096:	491b      	ldr	r1, [pc, #108]	; (800e104 <I2C_ITError+0xec>)
 800e098:	f7ff f9ae 	bl	800d3f8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e09c:	782b      	ldrb	r3, [r5, #0]
 800e09e:	2b60      	cmp	r3, #96	; 0x60
 800e0a0:	d001      	beq.n	800e0a6 <I2C_ITError+0x8e>
      hi2c->State         = HAL_I2C_STATE_READY;
 800e0a2:	2320      	movs	r3, #32
 800e0a4:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	e7cf      	b.n	800e04a <I2C_ITError+0x32>
      I2C_TreatErrorCallback(hi2c);
 800e0aa:	0020      	movs	r0, r4
 800e0ac:	f7ff ff9e 	bl	800dfec <I2C_TreatErrorCallback>
}
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e0b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d0f8      	beq.n	800e0aa <I2C_ITError+0x92>
 800e0b8:	2210      	movs	r2, #16
 800e0ba:	3b12      	subs	r3, #18
 800e0bc:	4393      	bics	r3, r2
 800e0be:	d1f4      	bne.n	800e0aa <I2C_ITError+0x92>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	0412      	lsls	r2, r2, #16
 800e0c6:	d503      	bpl.n	800e0d0 <I2C_ITError+0xb8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	490f      	ldr	r1, [pc, #60]	; (800e108 <I2C_ITError+0xf0>)
 800e0cc:	400a      	ands	r2, r1
 800e0ce:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e0d0:	f7fe ff9a 	bl	800d008 <HAL_DMA_GetState>
 800e0d4:	2801      	cmp	r0, #1
 800e0d6:	d0e8      	beq.n	800e0aa <I2C_ITError+0x92>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e0d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e0da:	4b09      	ldr	r3, [pc, #36]	; (800e100 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 800e0dc:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e0de:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800e0e0:	0023      	movs	r3, r4
 800e0e2:	3340      	adds	r3, #64	; 0x40
 800e0e4:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e0e6:	f7fe ff1f 	bl	800cf28 <HAL_DMA_Abort_IT>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0e0      	beq.n	800e0b0 <I2C_ITError+0x98>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e0ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e0f0:	e7cd      	b.n	800e08e <I2C_ITError+0x76>
 800e0f2:	46c0      	nop			; (mov r8, r8)
 800e0f4:	ffff0000 	.word	0xffff0000
 800e0f8:	0800e245 	.word	0x0800e245
 800e0fc:	ffffbfff 	.word	0xffffbfff
 800e100:	0800e3d7 	.word	0x0800e3d7
 800e104:	00008003 	.word	0x00008003
 800e108:	ffff7fff 	.word	0xffff7fff

0800e10c <I2C_ITSlaveCplt>:
{
 800e10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e10e:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e110:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e112:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e114:	3641      	adds	r6, #65	; 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e116:	9201      	str	r2, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e118:	2220      	movs	r2, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e11a:	7835      	ldrb	r5, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e11c:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e11e:	2308      	movs	r3, #8
{
 800e120:	0004      	movs	r4, r0
 800e122:	000f      	movs	r7, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e124:	439d      	bics	r5, r3
 800e126:	2d21      	cmp	r5, #33	; 0x21
 800e128:	d150      	bne.n	800e1cc <I2C_ITSlaveCplt+0xc0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e12a:	4940      	ldr	r1, [pc, #256]	; (800e22c <I2C_ITSlaveCplt+0x120>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e12c:	0020      	movs	r0, r4
 800e12e:	f7ff f963 	bl	800d3f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e132:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e134:	2280      	movs	r2, #128	; 0x80
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	0212      	lsls	r2, r2, #8
 800e13a:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800e13c:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e13e:	430a      	orrs	r2, r1
 800e140:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	493a      	ldr	r1, [pc, #232]	; (800e230 <I2C_ITSlaveCplt+0x124>)
 800e146:	400a      	ands	r2, r1
 800e148:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800e14a:	f7ff f933 	bl	800d3b4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e14e:	9b01      	ldr	r3, [sp, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	045b      	lsls	r3, r3, #17
 800e154:	d53e      	bpl.n	800e1d4 <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e156:	6822      	ldr	r2, [r4, #0]
 800e158:	4936      	ldr	r1, [pc, #216]	; (800e234 <I2C_ITSlaveCplt+0x128>)
 800e15a:	6813      	ldr	r3, [r2, #0]
 800e15c:	400b      	ands	r3, r1
 800e15e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800e160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800e162:	2b00      	cmp	r3, #0
 800e164:	d003      	beq.n	800e16e <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e16e:	077b      	lsls	r3, r7, #29
 800e170:	d511      	bpl.n	800e196 <I2C_ITSlaveCplt+0x8a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e172:	2304      	movs	r3, #4
 800e174:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800e17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e180:	3301      	adds	r3, #1
 800e182:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800e184:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e186:	2b00      	cmp	r3, #0
 800e188:	d005      	beq.n	800e196 <I2C_ITSlaveCplt+0x8a>
      hi2c->XferSize--;
 800e18a:	3b01      	subs	r3, #1
 800e18c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800e18e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e190:	3b01      	subs	r3, #1
 800e192:	b29b      	uxth	r3, r3
 800e194:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800e196:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d003      	beq.n	800e1a4 <I2C_ITSlaveCplt+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e19c:	2304      	movs	r3, #4
 800e19e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1a4:	0023      	movs	r3, r4
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	3342      	adds	r3, #66	; 0x42
 800e1aa:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e1ac:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800e1ae:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e1b0:	4295      	cmp	r5, r2
 800e1b2:	d01a      	beq.n	800e1ea <I2C_ITSlaveCplt+0xde>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e1b4:	0020      	movs	r0, r4
 800e1b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e1b8:	f7ff ff2e 	bl	800e018 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e1bc:	7833      	ldrb	r3, [r6, #0]
 800e1be:	2b28      	cmp	r3, #40	; 0x28
 800e1c0:	d103      	bne.n	800e1ca <I2C_ITSlaveCplt+0xbe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e1c2:	0039      	movs	r1, r7
 800e1c4:	0020      	movs	r0, r4
 800e1c6:	f7ff fed9 	bl	800df7c <I2C_ITListenCplt>
}
 800e1ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e1cc:	2d22      	cmp	r5, #34	; 0x22
 800e1ce:	d1b1      	bne.n	800e134 <I2C_ITSlaveCplt+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e1d0:	4919      	ldr	r1, [pc, #100]	; (800e238 <I2C_ITSlaveCplt+0x12c>)
 800e1d2:	e7ab      	b.n	800e12c <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e1d4:	9b01      	ldr	r3, [sp, #4]
 800e1d6:	0bdb      	lsrs	r3, r3, #15
 800e1d8:	4213      	tst	r3, r2
 800e1da:	d0c8      	beq.n	800e16e <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e1dc:	6822      	ldr	r2, [r4, #0]
 800e1de:	4917      	ldr	r1, [pc, #92]	; (800e23c <I2C_ITSlaveCplt+0x130>)
 800e1e0:	6813      	ldr	r3, [r2, #0]
 800e1e2:	400b      	ands	r3, r1
 800e1e4:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800e1e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e1e8:	e7bb      	b.n	800e162 <I2C_ITSlaveCplt+0x56>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e1ea:	0027      	movs	r7, r4
 800e1ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e1ee:	4a14      	ldr	r2, [pc, #80]	; (800e240 <I2C_ITSlaveCplt+0x134>)
 800e1f0:	3740      	adds	r7, #64	; 0x40
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00c      	beq.n	800e210 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 800e1f6:	0020      	movs	r0, r4
 800e1f8:	f7ff fe2e 	bl	800de58 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800e1fc:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e1fe:	4a10      	ldr	r2, [pc, #64]	; (800e240 <I2C_ITSlaveCplt+0x134>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800e200:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e202:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e204:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e206:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e208:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 800e20a:	f7ff feb5 	bl	800df78 <HAL_I2C_ListenCpltCallback>
 800e20e:	e7dc      	b.n	800e1ca <I2C_ITSlaveCplt+0xbe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e210:	2320      	movs	r3, #32
 800e212:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e214:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800e216:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e218:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e21a:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e21c:	2a22      	cmp	r2, #34	; 0x22
 800e21e:	d102      	bne.n	800e226 <I2C_ITSlaveCplt+0x11a>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e220:	f7ff fe18 	bl	800de54 <HAL_I2C_SlaveRxCpltCallback>
 800e224:	e7d1      	b.n	800e1ca <I2C_ITSlaveCplt+0xbe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e226:	f7ff fe14 	bl	800de52 <HAL_I2C_SlaveTxCpltCallback>
}
 800e22a:	e7ce      	b.n	800e1ca <I2C_ITSlaveCplt+0xbe>
 800e22c:	00008001 	.word	0x00008001
 800e230:	fe00e800 	.word	0xfe00e800
 800e234:	ffffbfff 	.word	0xffffbfff
 800e238:	00008002 	.word	0x00008002
 800e23c:	ffff7fff 	.word	0xffff7fff
 800e240:	ffff0000 	.word	0xffff0000

0800e244 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 800e244:	0003      	movs	r3, r0
{
 800e246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800e248:	3340      	adds	r3, #64	; 0x40
 800e24a:	9301      	str	r3, [sp, #4]
 800e24c:	781b      	ldrb	r3, [r3, #0]
{
 800e24e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800e250:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 800e252:	000e      	movs	r6, r1
 800e254:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 800e256:	2002      	movs	r0, #2
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d024      	beq.n	800e2a6 <I2C_Slave_ISR_IT+0x62>
 800e25c:	2301      	movs	r3, #1
 800e25e:	9a01      	ldr	r2, [sp, #4]
 800e260:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e262:	094a      	lsrs	r2, r1, #5
 800e264:	421a      	tst	r2, r3
 800e266:	d005      	beq.n	800e274 <I2C_Slave_ISR_IT+0x30>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e268:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e26a:	421a      	tst	r2, r3
 800e26c:	d002      	beq.n	800e274 <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e26e:	0020      	movs	r0, r4
 800e270:	f7ff ff4c 	bl	800e10c <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e274:	2301      	movs	r3, #1
 800e276:	06f2      	lsls	r2, r6, #27
 800e278:	d535      	bpl.n	800e2e6 <I2C_Slave_ISR_IT+0xa2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e27a:	092a      	lsrs	r2, r5, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e27c:	421a      	tst	r2, r3
 800e27e:	d032      	beq.n	800e2e6 <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 800e280:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e282:	2b00      	cmp	r3, #0
 800e284:	d120      	bne.n	800e2c8 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e286:	0023      	movs	r3, r4
 800e288:	3341      	adds	r3, #65	; 0x41
 800e28a:	781a      	ldrb	r2, [r3, #0]
 800e28c:	2a28      	cmp	r2, #40	; 0x28
 800e28e:	d10b      	bne.n	800e2a8 <I2C_Slave_ISR_IT+0x64>
 800e290:	2280      	movs	r2, #128	; 0x80
 800e292:	0492      	lsls	r2, r2, #18
 800e294:	4297      	cmp	r7, r2
 800e296:	d107      	bne.n	800e2a8 <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e298:	0031      	movs	r1, r6
 800e29a:	0020      	movs	r0, r4
 800e29c:	f7ff fe6e 	bl	800df7c <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	9b01      	ldr	r3, [sp, #4]
 800e2a4:	7018      	strb	r0, [r3, #0]
}
 800e2a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e2a8:	2210      	movs	r2, #16
 800e2aa:	7819      	ldrb	r1, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e2b0:	2929      	cmp	r1, #41	; 0x29
 800e2b2:	d1f5      	bne.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
 800e2b4:	492d      	ldr	r1, [pc, #180]	; (800e36c <I2C_Slave_ISR_IT+0x128>)
 800e2b6:	428f      	cmp	r7, r1
 800e2b8:	d0f2      	beq.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 800e2ba:	0020      	movs	r0, r4
 800e2bc:	f7ff f87a 	bl	800d3b4 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 800e2c0:	0020      	movs	r0, r4
 800e2c2:	f7ff fdc9 	bl	800de58 <I2C_ITSlaveSeqCplt>
 800e2c6:	e7eb      	b.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e2c8:	2210      	movs	r2, #16
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e2ce:	2304      	movs	r3, #4
 800e2d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e2d6:	4b26      	ldr	r3, [pc, #152]	; (800e370 <I2C_Slave_ISR_IT+0x12c>)
 800e2d8:	421f      	tst	r7, r3
 800e2da:	d1e1      	bne.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e2dc:	0020      	movs	r0, r4
 800e2de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e2e0:	f7ff fe9a 	bl	800e018 <I2C_ITError>
 800e2e4:	e7dc      	b.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	0772      	lsls	r2, r6, #29
 800e2ea:	d51a      	bpl.n	800e322 <I2C_Slave_ISR_IT+0xde>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e2ec:	08aa      	lsrs	r2, r5, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e2ee:	421a      	tst	r2, r3
 800e2f0:	d017      	beq.n	800e322 <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 800e2f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00d      	beq.n	800e314 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fe:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800e300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e302:	3301      	adds	r3, #1
 800e304:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800e306:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e308:	3b01      	subs	r3, #1
 800e30a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800e30c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e30e:	3b01      	subs	r3, #1
 800e310:	b29b      	uxth	r3, r3
 800e312:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800e314:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1c2      	bne.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
 800e31a:	4b14      	ldr	r3, [pc, #80]	; (800e36c <I2C_Slave_ISR_IT+0x128>)
 800e31c:	429f      	cmp	r7, r3
 800e31e:	d0bf      	beq.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
 800e320:	e7ce      	b.n	800e2c0 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e322:	2301      	movs	r3, #1
 800e324:	0732      	lsls	r2, r6, #28
 800e326:	d506      	bpl.n	800e336 <I2C_Slave_ISR_IT+0xf2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e328:	08ea      	lsrs	r2, r5, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e32a:	421a      	tst	r2, r3
 800e32c:	d003      	beq.n	800e336 <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e32e:	0020      	movs	r0, r4
 800e330:	f7ff fdd5 	bl	800dede <I2C_ITAddrCplt.constprop.0>
 800e334:	e7b4      	b.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e336:	2301      	movs	r3, #1
 800e338:	07b2      	lsls	r2, r6, #30
 800e33a:	d5b1      	bpl.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e33c:	40dd      	lsrs	r5, r3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e33e:	421d      	tst	r5, r3
 800e340:	d0ae      	beq.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 800e342:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00d      	beq.n	800e364 <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e34a:	6822      	ldr	r2, [r4, #0]
 800e34c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800e34e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e350:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800e352:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800e354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e356:	3b01      	subs	r3, #1
 800e358:	b29b      	uxth	r3, r3
 800e35a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800e35c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e35e:	3b01      	subs	r3, #1
 800e360:	8523      	strh	r3, [r4, #40]	; 0x28
 800e362:	e79d      	b.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e364:	4b02      	ldr	r3, [pc, #8]	; (800e370 <I2C_Slave_ISR_IT+0x12c>)
 800e366:	421f      	tst	r7, r3
 800e368:	d0aa      	beq.n	800e2c0 <I2C_Slave_ISR_IT+0x7c>
 800e36a:	e799      	b.n	800e2a0 <I2C_Slave_ISR_IT+0x5c>
 800e36c:	ffff0000 	.word	0xffff0000
 800e370:	feffffff 	.word	0xfeffffff

0800e374 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e374:	6803      	ldr	r3, [r0, #0]
{
 800e376:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e378:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800e37a:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800e37c:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800e37e:	05e5      	lsls	r5, r4, #23
 800e380:	d508      	bpl.n	800e394 <HAL_I2C_ER_IRQHandler+0x20>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e382:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800e384:	420d      	tst	r5, r1
 800e386:	d005      	beq.n	800e394 <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800e388:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800e38a:	4329      	orrs	r1, r5
 800e38c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e38e:	2180      	movs	r1, #128	; 0x80
 800e390:	0049      	lsls	r1, r1, #1
 800e392:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800e394:	2101      	movs	r1, #1
 800e396:	0565      	lsls	r5, r4, #21
 800e398:	d509      	bpl.n	800e3ae <HAL_I2C_ER_IRQHandler+0x3a>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e39a:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800e39c:	420d      	tst	r5, r1
 800e39e:	d006      	beq.n	800e3ae <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800e3a0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800e3a2:	3107      	adds	r1, #7
 800e3a4:	4329      	orrs	r1, r5
 800e3a6:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e3a8:	2180      	movs	r1, #128	; 0x80
 800e3aa:	00c9      	lsls	r1, r1, #3
 800e3ac:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	05a4      	lsls	r4, r4, #22
 800e3b2:	d509      	bpl.n	800e3c8 <HAL_I2C_ER_IRQHandler+0x54>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800e3b4:	09d2      	lsrs	r2, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800e3b6:	420a      	tst	r2, r1
 800e3b8:	d006      	beq.n	800e3c8 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e3c2:	2280      	movs	r2, #128	; 0x80
 800e3c4:	0092      	lsls	r2, r2, #2
 800e3c6:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800e3c8:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800e3ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800e3cc:	4219      	tst	r1, r3
 800e3ce:	d001      	beq.n	800e3d4 <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 800e3d0:	f7ff fe22 	bl	800e018 <I2C_ITError>
}
 800e3d4:	bd70      	pop	{r4, r5, r6, pc}

0800e3d6 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e3d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800e3d8:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 800e3da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800e3e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800e3ee:	f7ff fdfd 	bl	800dfec <I2C_TreatErrorCallback>
}
 800e3f2:	bd10      	pop	{r4, pc}

0800e3f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3f6:	0004      	movs	r4, r0
 800e3f8:	3441      	adds	r4, #65	; 0x41
 800e3fa:	7822      	ldrb	r2, [r4, #0]
{
 800e3fc:	0003      	movs	r3, r0
 800e3fe:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800e400:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e402:	b2d6      	uxtb	r6, r2
 800e404:	2a20      	cmp	r2, #32
 800e406:	d118      	bne.n	800e43a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800e408:	001d      	movs	r5, r3
 800e40a:	3540      	adds	r5, #64	; 0x40
 800e40c:	782a      	ldrb	r2, [r5, #0]
 800e40e:	2a01      	cmp	r2, #1
 800e410:	d013      	beq.n	800e43a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e412:	2224      	movs	r2, #36	; 0x24
 800e414:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	3a23      	subs	r2, #35	; 0x23
 800e41a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e41c:	4807      	ldr	r0, [pc, #28]	; (800e43c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800e41e:	4391      	bics	r1, r2
 800e420:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e422:	6819      	ldr	r1, [r3, #0]
 800e424:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800e426:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e428:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800e42a:	6819      	ldr	r1, [r3, #0]
 800e42c:	4339      	orrs	r1, r7
 800e42e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e430:	6819      	ldr	r1, [r3, #0]
 800e432:	430a      	orrs	r2, r1
 800e434:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800e436:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800e438:	7028      	strb	r0, [r5, #0]
  }
}
 800e43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43c:	ffffefff 	.word	0xffffefff

0800e440 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e440:	0002      	movs	r2, r0
{
 800e442:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e444:	3241      	adds	r2, #65	; 0x41
 800e446:	7814      	ldrb	r4, [r2, #0]
{
 800e448:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e44a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800e44c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e44e:	2c20      	cmp	r4, #32
 800e450:	d117      	bne.n	800e482 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800e452:	001c      	movs	r4, r3
 800e454:	3440      	adds	r4, #64	; 0x40
 800e456:	7826      	ldrb	r6, [r4, #0]
 800e458:	2e01      	cmp	r6, #1
 800e45a:	d012      	beq.n	800e482 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e45c:	3022      	adds	r0, #34	; 0x22
 800e45e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3823      	subs	r0, #35	; 0x23
 800e464:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800e466:	4f07      	ldr	r7, [pc, #28]	; (800e484 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800e468:	4386      	bics	r6, r0
 800e46a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800e46c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800e46e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800e470:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800e472:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800e474:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e476:	6819      	ldr	r1, [r3, #0]
 800e478:	4308      	orrs	r0, r1
 800e47a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800e47c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800e47e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800e480:	7020      	strb	r0, [r4, #0]
  }
}
 800e482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e484:	fffff0ff 	.word	0xfffff0ff

0800e488 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e488:	2201      	movs	r2, #1
 800e48a:	4904      	ldr	r1, [pc, #16]	; (800e49c <HAL_I2CEx_EnableFastModePlus+0x14>)
 800e48c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e48e:	431a      	orrs	r2, r3
 800e490:	634a      	str	r2, [r1, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 800e492:	4a03      	ldr	r2, [pc, #12]	; (800e4a0 <HAL_I2CEx_EnableFastModePlus+0x18>)
 800e494:	6853      	ldr	r3, [r2, #4]
 800e496:	4303      	orrs	r3, r0
 800e498:	6053      	str	r3, [r2, #4]
}
 800e49a:	4770      	bx	lr
 800e49c:	40021000 	.word	0x40021000
 800e4a0:	40010000 	.word	0x40010000

0800e4a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e4a4:	b570      	push	{r4, r5, r6, lr}
 800e4a6:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
  {
    return HAL_ERROR;
 800e4a8:	2001      	movs	r0, #1
  if (hiwdg == NULL)
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	d017      	beq.n	800e4de <HAL_IWDG_Init+0x3a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	4a12      	ldr	r2, [pc, #72]	; (800e4fc <HAL_IWDG_Init+0x58>)

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4b2:	2507      	movs	r5, #7
  __HAL_IWDG_START(hiwdg);
 800e4b4:	601a      	str	r2, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e4b6:	4a12      	ldr	r2, [pc, #72]	; (800e500 <HAL_IWDG_Init+0x5c>)
 800e4b8:	601a      	str	r2, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e4ba:	6862      	ldr	r2, [r4, #4]
 800e4bc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e4be:	68a2      	ldr	r2, [r4, #8]
 800e4c0:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800e4c2:	f7fe f8eb 	bl	800c69c <HAL_GetTick>
 800e4c6:	0006      	movs	r6, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	68da      	ldr	r2, [r3, #12]
 800e4cc:	0010      	movs	r0, r2
 800e4ce:	4028      	ands	r0, r5
 800e4d0:	422a      	tst	r2, r5
 800e4d2:	d105      	bne.n	800e4e0 <HAL_IWDG_Init+0x3c>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800e4d4:	6919      	ldr	r1, [r3, #16]
 800e4d6:	68e2      	ldr	r2, [r4, #12]
 800e4d8:	4291      	cmp	r1, r2
 800e4da:	d00c      	beq.n	800e4f6 <HAL_IWDG_Init+0x52>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800e4dc:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800e4de:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e4e0:	f7fe f8dc 	bl	800c69c <HAL_GetTick>
 800e4e4:	1b80      	subs	r0, r0, r6
 800e4e6:	282a      	cmp	r0, #42	; 0x2a
 800e4e8:	d9ee      	bls.n	800e4c8 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	422b      	tst	r3, r5
 800e4f0:	d0ea      	beq.n	800e4c8 <HAL_IWDG_Init+0x24>
        return HAL_TIMEOUT;
 800e4f2:	2003      	movs	r0, #3
 800e4f4:	e7f3      	b.n	800e4de <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e4f6:	4a03      	ldr	r2, [pc, #12]	; (800e504 <HAL_IWDG_Init+0x60>)
 800e4f8:	601a      	str	r2, [r3, #0]
 800e4fa:	e7f0      	b.n	800e4de <HAL_IWDG_Init+0x3a>
 800e4fc:	0000cccc 	.word	0x0000cccc
 800e500:	00005555 	.word	0x00005555
 800e504:	0000aaaa 	.word	0x0000aaaa

0800e508 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800e508:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <LPTIM_WaitForFlag+0x34>)
{
 800e50a:	b570      	push	{r4, r5, r6, lr}
 800e50c:	0005      	movs	r5, r0
 800e50e:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800e510:	6818      	ldr	r0, [r3, #0]
 800e512:	490b      	ldr	r1, [pc, #44]	; (800e540 <LPTIM_WaitForFlag+0x38>)
 800e514:	f7f1 fe28 	bl	8000168 <__udivsi3>
 800e518:	23fa      	movs	r3, #250	; 0xfa
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800e51e:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800e520:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800e522:	2503      	movs	r5, #3
    count--;
 800e524:	3b01      	subs	r3, #1
    if (count == 0UL)
 800e526:	2b00      	cmp	r3, #0
 800e528:	d100      	bne.n	800e52c <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800e52a:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800e52c:	680a      	ldr	r2, [r1, #0]
 800e52e:	4022      	ands	r2, r4
 800e530:	42a2      	cmp	r2, r4
 800e532:	d001      	beq.n	800e538 <LPTIM_WaitForFlag+0x30>
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1f5      	bne.n	800e524 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800e538:	bd70      	pop	{r4, r5, r6, pc}
 800e53a:	46c0      	nop			; (mov r8, r8)
 800e53c:	200001cc 	.word	0x200001cc
 800e540:	00004e20 	.word	0x00004e20

0800e544 <HAL_LPTIM_Init>:
{
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	0004      	movs	r4, r0
    return HAL_ERROR;
 800e548:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800e54a:	2c00      	cmp	r4, #0
 800e54c:	d042      	beq.n	800e5d4 <HAL_LPTIM_Init+0x90>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800e54e:	0025      	movs	r5, r4
 800e550:	352e      	adds	r5, #46	; 0x2e
 800e552:	782b      	ldrb	r3, [r5, #0]
 800e554:	b2da      	uxtb	r2, r3
 800e556:	2b00      	cmp	r3, #0
 800e558:	d105      	bne.n	800e566 <HAL_LPTIM_Init+0x22>
    hlptim->Lock = HAL_UNLOCKED;
 800e55a:	0023      	movs	r3, r4
 800e55c:	332d      	adds	r3, #45	; 0x2d
    HAL_LPTIM_MspInit(hlptim);
 800e55e:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 800e560:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 800e562:	f002 feb3 	bl	80112cc <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800e566:	2302      	movs	r3, #2
 800e568:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 800e56a:	6826      	ldr	r6, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800e56c:	6861      	ldr	r1, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800e56e:	68f3      	ldr	r3, [r6, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800e570:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800e572:	2901      	cmp	r1, #1
 800e574:	d003      	beq.n	800e57e <HAL_LPTIM_Init+0x3a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800e576:	2280      	movs	r2, #128	; 0x80
 800e578:	0412      	lsls	r2, r2, #16
 800e57a:	4290      	cmp	r0, r2
 800e57c:	d101      	bne.n	800e582 <HAL_LPTIM_Init+0x3e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800e57e:	221e      	movs	r2, #30
 800e580:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800e582:	6962      	ldr	r2, [r4, #20]
 800e584:	4f17      	ldr	r7, [pc, #92]	; (800e5e4 <HAL_LPTIM_Init+0xa0>)
 800e586:	42ba      	cmp	r2, r7
 800e588:	d001      	beq.n	800e58e <HAL_LPTIM_Init+0x4a>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800e58a:	4f17      	ldr	r7, [pc, #92]	; (800e5e8 <HAL_LPTIM_Init+0xa4>)
 800e58c:	403b      	ands	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800e58e:	4f17      	ldr	r7, [pc, #92]	; (800e5ec <HAL_LPTIM_Init+0xa8>)
 800e590:	401f      	ands	r7, r3
              hlptim->Init.UpdateMode      |
 800e592:	000b      	movs	r3, r1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800e594:	46bc      	mov	ip, r7
              hlptim->Init.UpdateMode      |
 800e596:	68a7      	ldr	r7, [r4, #8]
 800e598:	4303      	orrs	r3, r0
 800e59a:	433b      	orrs	r3, r7
 800e59c:	6a27      	ldr	r7, [r4, #32]
 800e59e:	433b      	orrs	r3, r7
 800e5a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800e5a2:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800e5a4:	4667      	mov	r7, ip
 800e5a6:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800e5a8:	2900      	cmp	r1, #0
 800e5aa:	d114      	bne.n	800e5d6 <HAL_LPTIM_Init+0x92>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800e5ac:	69e1      	ldr	r1, [r4, #28]
 800e5ae:	6927      	ldr	r7, [r4, #16]
 800e5b0:	4339      	orrs	r1, r7
 800e5b2:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800e5b4:	2180      	movs	r1, #128	; 0x80
 800e5b6:	0409      	lsls	r1, r1, #16
 800e5b8:	4288      	cmp	r0, r1
 800e5ba:	d00e      	beq.n	800e5da <HAL_LPTIM_Init+0x96>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800e5bc:	4909      	ldr	r1, [pc, #36]	; (800e5e4 <HAL_LPTIM_Init+0xa0>)
 800e5be:	428a      	cmp	r2, r1
 800e5c0:	d004      	beq.n	800e5cc <HAL_LPTIM_Init+0x88>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800e5c2:	69a1      	ldr	r1, [r4, #24]
 800e5c4:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 800e5c6:	69e1      	ldr	r1, [r4, #28]
 800e5c8:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800e5ca:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800e5cc:	60f3      	str	r3, [r6, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800e5ce:	2301      	movs	r3, #1
  return HAL_OK;
 800e5d0:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800e5d2:	702b      	strb	r3, [r5, #0]
}
 800e5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800e5d6:	2901      	cmp	r1, #1
 800e5d8:	d1ec      	bne.n	800e5b4 <HAL_LPTIM_Init+0x70>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800e5da:	68e1      	ldr	r1, [r4, #12]
 800e5dc:	6920      	ldr	r0, [r4, #16]
 800e5de:	4301      	orrs	r1, r0
 800e5e0:	430b      	orrs	r3, r1
 800e5e2:	e7eb      	b.n	800e5bc <HAL_LPTIM_Init+0x78>
 800e5e4:	0000ffff 	.word	0x0000ffff
 800e5e8:	ffff1f3f 	.word	0xffff1f3f
 800e5ec:	ff19f1fe 	.word	0xff19f1fe

0800e5f0 <HAL_LPTIM_CompareMatchCallback>:
 800e5f0:	4770      	bx	lr

0800e5f2 <HAL_LPTIM_TriggerCallback>:
 800e5f2:	4770      	bx	lr

0800e5f4 <HAL_LPTIM_CompareWriteCallback>:
 800e5f4:	4770      	bx	lr

0800e5f6 <HAL_LPTIM_AutoReloadWriteCallback>:
 800e5f6:	4770      	bx	lr

0800e5f8 <HAL_LPTIM_DirectionUpCallback>:
 800e5f8:	4770      	bx	lr

0800e5fa <HAL_LPTIM_DirectionDownCallback>:
 800e5fa:	4770      	bx	lr

0800e5fc <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	6803      	ldr	r3, [r0, #0]
{
 800e600:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800e602:	6819      	ldr	r1, [r3, #0]
{
 800e604:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800e606:	4211      	tst	r1, r2
 800e608:	d005      	beq.n	800e616 <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800e60a:	6899      	ldr	r1, [r3, #8]
 800e60c:	4211      	tst	r1, r2
 800e60e:	d002      	beq.n	800e616 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800e610:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800e612:	f7ff ffed 	bl	800e5f0 <HAL_LPTIM_CompareMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800e616:	2202      	movs	r2, #2
 800e618:	6823      	ldr	r3, [r4, #0]
 800e61a:	6819      	ldr	r1, [r3, #0]
 800e61c:	4211      	tst	r1, r2
 800e61e:	d006      	beq.n	800e62e <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800e620:	6899      	ldr	r1, [r3, #8]
 800e622:	4211      	tst	r1, r2
 800e624:	d003      	beq.n	800e62e <HAL_LPTIM_IRQHandler+0x32>
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800e626:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800e628:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800e62a:	f005 fee3 	bl	80143f4 <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800e62e:	2204      	movs	r2, #4
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	6819      	ldr	r1, [r3, #0]
 800e634:	4211      	tst	r1, r2
 800e636:	d006      	beq.n	800e646 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800e638:	6899      	ldr	r1, [r3, #8]
 800e63a:	4211      	tst	r1, r2
 800e63c:	d003      	beq.n	800e646 <HAL_LPTIM_IRQHandler+0x4a>
      HAL_LPTIM_TriggerCallback(hlptim);
 800e63e:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800e640:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800e642:	f7ff ffd6 	bl	800e5f2 <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800e646:	2208      	movs	r2, #8
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	6819      	ldr	r1, [r3, #0]
 800e64c:	4211      	tst	r1, r2
 800e64e:	d006      	beq.n	800e65e <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800e650:	6899      	ldr	r1, [r3, #8]
 800e652:	4211      	tst	r1, r2
 800e654:	d003      	beq.n	800e65e <HAL_LPTIM_IRQHandler+0x62>
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800e656:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800e658:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800e65a:	f7ff ffcb 	bl	800e5f4 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800e65e:	2210      	movs	r2, #16
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	6819      	ldr	r1, [r3, #0]
 800e664:	4211      	tst	r1, r2
 800e666:	d006      	beq.n	800e676 <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800e668:	6899      	ldr	r1, [r3, #8]
 800e66a:	4211      	tst	r1, r2
 800e66c:	d003      	beq.n	800e676 <HAL_LPTIM_IRQHandler+0x7a>
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800e66e:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e670:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800e672:	f7ff ffc0 	bl	800e5f6 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800e676:	2220      	movs	r2, #32
 800e678:	6823      	ldr	r3, [r4, #0]
 800e67a:	6819      	ldr	r1, [r3, #0]
 800e67c:	4211      	tst	r1, r2
 800e67e:	d006      	beq.n	800e68e <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800e680:	6899      	ldr	r1, [r3, #8]
 800e682:	4211      	tst	r1, r2
 800e684:	d003      	beq.n	800e68e <HAL_LPTIM_IRQHandler+0x92>
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800e686:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800e688:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800e68a:	f7ff ffb5 	bl	800e5f8 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800e68e:	2240      	movs	r2, #64	; 0x40
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	6819      	ldr	r1, [r3, #0]
 800e694:	4211      	tst	r1, r2
 800e696:	d006      	beq.n	800e6a6 <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800e698:	6899      	ldr	r1, [r3, #8]
 800e69a:	4211      	tst	r1, r2
 800e69c:	d003      	beq.n	800e6a6 <HAL_LPTIM_IRQHandler+0xaa>
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800e69e:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800e6a0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800e6a2:	f7ff ffaa 	bl	800e5fa <HAL_LPTIM_DirectionDownCallback>
}
 800e6a6:	bd10      	pop	{r4, pc}

0800e6a8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6aa:	0004      	movs	r4, r0
 800e6ac:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 800e6ae:	b672      	cpsid	i
  uint32_t tmpclksource = 0;
 800e6b0:	2200      	movs	r2, #0

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800e6b2:	6803      	ldr	r3, [r0, #0]
 800e6b4:	4e32      	ldr	r6, [pc, #200]	; (800e780 <LPTIM_Disable+0xd8>)
  uint32_t tmpclksource = 0;
 800e6b6:	9201      	str	r2, [sp, #4]
  switch ((uint32_t)hlptim->Instance)
 800e6b8:	42b3      	cmp	r3, r6
 800e6ba:	d105      	bne.n	800e6c8 <LPTIM_Disable+0x20>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e6bc:	4a31      	ldr	r2, [pc, #196]	; (800e784 <LPTIM_Disable+0xdc>)
 800e6be:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800e6c0:	22c0      	movs	r2, #192	; 0xc0
 800e6c2:	0312      	lsls	r2, r2, #12
 800e6c4:	4015      	ands	r5, r2
 800e6c6:	9501      	str	r5, [sp, #4]
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800e6c8:	689a      	ldr	r2, [r3, #8]
 800e6ca:	9202      	str	r2, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 800e6cc:	68da      	ldr	r2, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800e6ce:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 800e6d0:	9203      	str	r2, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 800e6d2:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800e6d4:	42b3      	cmp	r3, r6
 800e6d6:	d10b      	bne.n	800e6f0 <LPTIM_Disable+0x48>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800e6d8:	492a      	ldr	r1, [pc, #168]	; (800e784 <LPTIM_Disable+0xdc>)
 800e6da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800e6dc:	4694      	mov	ip, r2
 800e6de:	2280      	movs	r2, #128	; 0x80
 800e6e0:	4665      	mov	r5, ip
 800e6e2:	0612      	lsls	r2, r2, #24
 800e6e4:	432a      	orrs	r2, r5
 800e6e6:	628a      	str	r2, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800e6e8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800e6ea:	0052      	lsls	r2, r2, #1
 800e6ec:	0852      	lsrs	r2, r2, #1
 800e6ee:	628a      	str	r2, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800e6f0:	0002      	movs	r2, r0
 800e6f2:	433a      	orrs	r2, r7
 800e6f4:	d037      	beq.n	800e766 <LPTIM_Disable+0xbe>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800e6f6:	42b3      	cmp	r3, r6
 800e6f8:	d104      	bne.n	800e704 <LPTIM_Disable+0x5c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800e6fa:	4922      	ldr	r1, [pc, #136]	; (800e784 <LPTIM_Disable+0xdc>)
 800e6fc:	4d22      	ldr	r5, [pc, #136]	; (800e788 <LPTIM_Disable+0xe0>)
 800e6fe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800e700:	402a      	ands	r2, r5
 800e702:	64ca      	str	r2, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 800e704:	2800      	cmp	r0, #0
 800e706:	d010      	beq.n	800e72a <LPTIM_Disable+0x82>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800e708:	2201      	movs	r2, #1
 800e70a:	6919      	ldr	r1, [r3, #16]
 800e70c:	430a      	orrs	r2, r1
 800e70e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800e710:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 800e712:	6158      	str	r0, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800e714:	0020      	movs	r0, r4
 800e716:	f7ff fef7 	bl	800e508 <LPTIM_WaitForFlag>
 800e71a:	2803      	cmp	r0, #3
 800e71c:	d102      	bne.n	800e724 <LPTIM_Disable+0x7c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800e71e:	0023      	movs	r3, r4
 800e720:	332e      	adds	r3, #46	; 0x2e
 800e722:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800e724:	2208      	movs	r2, #8
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800e72a:	2f00      	cmp	r7, #0
 800e72c:	d011      	beq.n	800e752 <LPTIM_Disable+0xaa>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800e72e:	2201      	movs	r2, #1
 800e730:	6823      	ldr	r3, [r4, #0]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e732:	0020      	movs	r0, r4
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800e734:	6919      	ldr	r1, [r3, #16]
 800e736:	430a      	orrs	r2, r1
 800e738:	611a      	str	r2, [r3, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e73a:	2110      	movs	r1, #16
      hlptim->Instance->ARR = tmpARR;
 800e73c:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e73e:	f7ff fee3 	bl	800e508 <LPTIM_WaitForFlag>
 800e742:	2803      	cmp	r0, #3
 800e744:	d102      	bne.n	800e74c <LPTIM_Disable+0xa4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800e746:	0023      	movs	r3, r4
 800e748:	332e      	adds	r3, #46	; 0x2e
 800e74a:	7018      	strb	r0, [r3, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e74c:	2210      	movs	r2, #16
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800e752:	6823      	ldr	r3, [r4, #0]
 800e754:	42b3      	cmp	r3, r6
 800e756:	d106      	bne.n	800e766 <LPTIM_Disable+0xbe>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800e758:	4a0a      	ldr	r2, [pc, #40]	; (800e784 <LPTIM_Disable+0xdc>)
 800e75a:	490b      	ldr	r1, [pc, #44]	; (800e788 <LPTIM_Disable+0xe0>)
 800e75c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e75e:	9d01      	ldr	r5, [sp, #4]
 800e760:	400b      	ands	r3, r1
 800e762:	431d      	orrs	r5, r3
 800e764:	64d5      	str	r5, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800e766:	2101      	movs	r1, #1
 800e768:	6823      	ldr	r3, [r4, #0]
 800e76a:	691a      	ldr	r2, [r3, #16]
 800e76c:	438a      	bics	r2, r1
 800e76e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800e770:	9a02      	ldr	r2, [sp, #8]
 800e772:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800e774:	9a03      	ldr	r2, [sp, #12]
 800e776:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800e778:	b662      	cpsie	i

  __enable_irq();
}
 800e77a:	b005      	add	sp, #20
 800e77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	40007c00 	.word	0x40007c00
 800e784:	40021000 	.word	0x40021000
 800e788:	fff3ffff 	.word	0xfff3ffff

0800e78c <HAL_LPTIM_Counter_Start_IT>:
{
 800e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800e78e:	0006      	movs	r6, r0
 800e790:	2302      	movs	r3, #2
 800e792:	362e      	adds	r6, #46	; 0x2e
 800e794:	7033      	strb	r3, [r6, #0]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e796:	2380      	movs	r3, #128	; 0x80
{
 800e798:	0004      	movs	r4, r0
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e79a:	4a1c      	ldr	r2, [pc, #112]	; (800e80c <HAL_LPTIM_Counter_Start_IT+0x80>)
 800e79c:	059b      	lsls	r3, r3, #22
 800e79e:	6810      	ldr	r0, [r2, #0]
 800e7a0:	4303      	orrs	r3, r0
 800e7a2:	6013      	str	r3, [r2, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800e7a4:	6862      	ldr	r2, [r4, #4]
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800e7a6:	6823      	ldr	r3, [r4, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800e7a8:	2a01      	cmp	r2, #1
 800e7aa:	d008      	beq.n	800e7be <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800e7ac:	2280      	movs	r2, #128	; 0x80
 800e7ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e7b0:	0412      	lsls	r2, r2, #16
 800e7b2:	4290      	cmp	r0, r2
 800e7b4:	d103      	bne.n	800e7be <HAL_LPTIM_Counter_Start_IT+0x32>
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	4815      	ldr	r0, [pc, #84]	; (800e810 <HAL_LPTIM_Counter_Start_IT+0x84>)
 800e7ba:	4002      	ands	r2, r0
 800e7bc:	60da      	str	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 800e7be:	2701      	movs	r7, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e7c0:	2510      	movs	r5, #16
  __HAL_LPTIM_ENABLE(hlptim);
 800e7c2:	691a      	ldr	r2, [r3, #16]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e7c4:	0020      	movs	r0, r4
  __HAL_LPTIM_ENABLE(hlptim);
 800e7c6:	433a      	orrs	r2, r7
 800e7c8:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800e7ca:	605d      	str	r5, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800e7cc:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800e7ce:	0029      	movs	r1, r5
 800e7d0:	f7ff fe9a 	bl	800e508 <LPTIM_WaitForFlag>
 800e7d4:	2803      	cmp	r0, #3
 800e7d6:	d101      	bne.n	800e7dc <HAL_LPTIM_Counter_Start_IT+0x50>
    return HAL_TIMEOUT;
 800e7d8:	2003      	movs	r0, #3
}
 800e7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_DISABLE(hlptim);
 800e7dc:	0020      	movs	r0, r4
 800e7de:	f7ff ff63 	bl	800e6a8 <LPTIM_Disable>
  return hlptim->State;
 800e7e2:	7833      	ldrb	r3, [r6, #0]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d0f7      	beq.n	800e7d8 <HAL_LPTIM_Counter_Start_IT+0x4c>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800e7e8:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800e7ea:	2000      	movs	r0, #0
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800e7ec:	689a      	ldr	r2, [r3, #8]
 800e7ee:	4315      	orrs	r5, r2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800e7f0:	2202      	movs	r2, #2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800e7f2:	609d      	str	r5, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800e7f4:	6899      	ldr	r1, [r3, #8]
 800e7f6:	430a      	orrs	r2, r1
 800e7f8:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 800e7fa:	691a      	ldr	r2, [r3, #16]
 800e7fc:	433a      	orrs	r2, r7
 800e7fe:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800e800:	2204      	movs	r2, #4
 800e802:	6919      	ldr	r1, [r3, #16]
 800e804:	430a      	orrs	r2, r1
 800e806:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800e808:	7037      	strb	r7, [r6, #0]
  return HAL_OK;
 800e80a:	e7e6      	b.n	800e7da <HAL_LPTIM_Counter_Start_IT+0x4e>
 800e80c:	40010400 	.word	0x40010400
 800e810:	fffff1ff 	.word	0xfffff1ff

0800e814 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800e814:	2380      	movs	r3, #128	; 0x80
 800e816:	4a03      	ldr	r2, [pc, #12]	; (800e824 <HAL_PWR_EnableBkUpAccess+0x10>)
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	6811      	ldr	r1, [r2, #0]
 800e81c:	430b      	orrs	r3, r1
 800e81e:	6013      	str	r3, [r2, #0]
}
 800e820:	4770      	bx	lr
 800e822:	46c0      	nop			; (mov r8, r8)
 800e824:	40007000 	.word	0x40007000

0800e828 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e828:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800e82a:	4b1d      	ldr	r3, [pc, #116]	; (800e8a0 <HAL_RCC_GetSysClockFreq+0x78>)
{
 800e82c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800e82e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800e830:	4022      	ands	r2, r4
 800e832:	2a08      	cmp	r2, #8
 800e834:	d031      	beq.n	800e89a <HAL_RCC_GetSysClockFreq+0x72>
 800e836:	2a0c      	cmp	r2, #12
 800e838:	d009      	beq.n	800e84e <HAL_RCC_GetSysClockFreq+0x26>
 800e83a:	2a04      	cmp	r2, #4
 800e83c:	d125      	bne.n	800e88a <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e83e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800e840:	4b18      	ldr	r3, [pc, #96]	; (800e8a4 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e842:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800e844:	17c0      	asrs	r0, r0, #31
 800e846:	4018      	ands	r0, r3
 800e848:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <HAL_RCC_GetSysClockFreq+0x80>)
 800e84a:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800e84c:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e84e:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e850:	4816      	ldr	r0, [pc, #88]	; (800e8ac <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e852:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e854:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e856:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e858:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e85a:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e85c:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e85e:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e860:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e862:	4211      	tst	r1, r2
 800e864:	d009      	beq.n	800e87a <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e866:	4a12      	ldr	r2, [pc, #72]	; (800e8b0 <HAL_RCC_GetSysClockFreq+0x88>)
 800e868:	2300      	movs	r3, #0
 800e86a:	2100      	movs	r1, #0
 800e86c:	f7f1 fe5c 	bl	8000528 <__aeabi_lmul>
 800e870:	0022      	movs	r2, r4
 800e872:	2300      	movs	r3, #0
 800e874:	f7f1 fe38 	bl	80004e8 <__aeabi_uldivmod>
 800e878:	e7e8      	b.n	800e84c <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	2310      	movs	r3, #16
 800e87e:	421a      	tst	r2, r3
 800e880:	d001      	beq.n	800e886 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800e882:	4a0c      	ldr	r2, [pc, #48]	; (800e8b4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800e884:	e7f0      	b.n	800e868 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e886:	4a08      	ldr	r2, [pc, #32]	; (800e8a8 <HAL_RCC_GetSysClockFreq+0x80>)
 800e888:	e7ee      	b.n	800e868 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e88a:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e88c:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e88e:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e890:	041b      	lsls	r3, r3, #16
 800e892:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e894:	3301      	adds	r3, #1
 800e896:	4098      	lsls	r0, r3
      break;
 800e898:	e7d8      	b.n	800e84c <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800e89a:	4805      	ldr	r0, [pc, #20]	; (800e8b0 <HAL_RCC_GetSysClockFreq+0x88>)
 800e89c:	e7d6      	b.n	800e84c <HAL_RCC_GetSysClockFreq+0x24>
 800e89e:	46c0      	nop			; (mov r8, r8)
 800e8a0:	40021000 	.word	0x40021000
 800e8a4:	ff48e500 	.word	0xff48e500
 800e8a8:	00f42400 	.word	0x00f42400
 800e8ac:	0801aa8d 	.word	0x0801aa8d
 800e8b0:	007a1200 	.word	0x007a1200
 800e8b4:	003d0900 	.word	0x003d0900

0800e8b8 <HAL_RCC_OscConfig>:
{
 800e8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ba:	0005      	movs	r5, r0
 800e8bc:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d056      	beq.n	800e970 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8c2:	230c      	movs	r3, #12
 800e8c4:	4cb6      	ldr	r4, [pc, #728]	; (800eba0 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e8c6:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8c8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e8ca:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8cc:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e8ce:	2380      	movs	r3, #128	; 0x80
 800e8d0:	025b      	lsls	r3, r3, #9
 800e8d2:	0019      	movs	r1, r3
 800e8d4:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e8d6:	07d2      	lsls	r2, r2, #31
 800e8d8:	d43e      	bmi.n	800e958 <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e8da:	682b      	ldr	r3, [r5, #0]
 800e8dc:	079b      	lsls	r3, r3, #30
 800e8de:	d500      	bpl.n	800e8e2 <HAL_RCC_OscConfig+0x2a>
 800e8e0:	e087      	b.n	800e9f2 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e8e2:	682b      	ldr	r3, [r5, #0]
 800e8e4:	06db      	lsls	r3, r3, #27
 800e8e6:	d529      	bpl.n	800e93c <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	d000      	beq.n	800e8ee <HAL_RCC_OscConfig+0x36>
 800e8ec:	e0e0      	b.n	800eab0 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	059b      	lsls	r3, r3, #22
 800e8f2:	d502      	bpl.n	800e8fa <HAL_RCC_OscConfig+0x42>
 800e8f4:	69ab      	ldr	r3, [r5, #24]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d03a      	beq.n	800e970 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e8fa:	6862      	ldr	r2, [r4, #4]
 800e8fc:	49a9      	ldr	r1, [pc, #676]	; (800eba4 <HAL_RCC_OscConfig+0x2ec>)
 800e8fe:	6a2b      	ldr	r3, [r5, #32]
 800e900:	400a      	ands	r2, r1
 800e902:	431a      	orrs	r2, r3
 800e904:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e906:	6861      	ldr	r1, [r4, #4]
 800e908:	69ea      	ldr	r2, [r5, #28]
 800e90a:	0209      	lsls	r1, r1, #8
 800e90c:	0a09      	lsrs	r1, r1, #8
 800e90e:	0612      	lsls	r2, r2, #24
 800e910:	430a      	orrs	r2, r1
 800e912:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e914:	2280      	movs	r2, #128	; 0x80
 800e916:	0b5b      	lsrs	r3, r3, #13
 800e918:	3301      	adds	r3, #1
 800e91a:	0212      	lsls	r2, r2, #8
 800e91c:	409a      	lsls	r2, r3
 800e91e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e920:	68e1      	ldr	r1, [r4, #12]
 800e922:	060a      	lsls	r2, r1, #24
 800e924:	49a0      	ldr	r1, [pc, #640]	; (800eba8 <HAL_RCC_OscConfig+0x2f0>)
 800e926:	0f12      	lsrs	r2, r2, #28
 800e928:	5c8a      	ldrb	r2, [r1, r2]
 800e92a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e92c:	4a9f      	ldr	r2, [pc, #636]	; (800ebac <HAL_RCC_OscConfig+0x2f4>)
 800e92e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800e930:	4b9f      	ldr	r3, [pc, #636]	; (800ebb0 <HAL_RCC_OscConfig+0x2f8>)
 800e932:	6818      	ldr	r0, [r3, #0]
 800e934:	f7fd fe6e 	bl	800c614 <HAL_InitTick>
        if(status != HAL_OK)
 800e938:	2800      	cmp	r0, #0
 800e93a:	d130      	bne.n	800e99e <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e93c:	682b      	ldr	r3, [r5, #0]
 800e93e:	071b      	lsls	r3, r3, #28
 800e940:	d500      	bpl.n	800e944 <HAL_RCC_OscConfig+0x8c>
 800e942:	e0ec      	b.n	800eb1e <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	075b      	lsls	r3, r3, #29
 800e948:	d500      	bpl.n	800e94c <HAL_RCC_OscConfig+0x94>
 800e94a:	e10e      	b.n	800eb6a <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e94c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d000      	beq.n	800e954 <HAL_RCC_OscConfig+0x9c>
 800e952:	e192      	b.n	800ec7a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 800e954:	2000      	movs	r0, #0
 800e956:	e022      	b.n	800e99e <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e958:	2e08      	cmp	r6, #8
 800e95a:	d003      	beq.n	800e964 <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e95c:	2e0c      	cmp	r6, #12
 800e95e:	d109      	bne.n	800e974 <HAL_RCC_OscConfig+0xbc>
 800e960:	2f00      	cmp	r7, #0
 800e962:	d007      	beq.n	800e974 <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	039b      	lsls	r3, r3, #14
 800e968:	d5b7      	bpl.n	800e8da <HAL_RCC_OscConfig+0x22>
 800e96a:	686b      	ldr	r3, [r5, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1b4      	bne.n	800e8da <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 800e970:	2001      	movs	r0, #1
 800e972:	e014      	b.n	800e99e <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e974:	686a      	ldr	r2, [r5, #4]
 800e976:	428a      	cmp	r2, r1
 800e978:	d113      	bne.n	800e9a2 <HAL_RCC_OscConfig+0xea>
 800e97a:	6822      	ldr	r2, [r4, #0]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800e980:	f7fd fe8c 	bl	800c69c <HAL_GetTick>
 800e984:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e986:	2280      	movs	r2, #128	; 0x80
 800e988:	6823      	ldr	r3, [r4, #0]
 800e98a:	0292      	lsls	r2, r2, #10
 800e98c:	4213      	tst	r3, r2
 800e98e:	d1a4      	bne.n	800e8da <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e990:	f7fd fe84 	bl	800c69c <HAL_GetTick>
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	1ac0      	subs	r0, r0, r3
 800e998:	2864      	cmp	r0, #100	; 0x64
 800e99a:	d9f4      	bls.n	800e986 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 800e99c:	2003      	movs	r0, #3
}
 800e99e:	b005      	add	sp, #20
 800e9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9a2:	21a0      	movs	r1, #160	; 0xa0
 800e9a4:	02c9      	lsls	r1, r1, #11
 800e9a6:	428a      	cmp	r2, r1
 800e9a8:	d105      	bne.n	800e9b6 <HAL_RCC_OscConfig+0xfe>
 800e9aa:	2280      	movs	r2, #128	; 0x80
 800e9ac:	6821      	ldr	r1, [r4, #0]
 800e9ae:	02d2      	lsls	r2, r2, #11
 800e9b0:	430a      	orrs	r2, r1
 800e9b2:	6022      	str	r2, [r4, #0]
 800e9b4:	e7e1      	b.n	800e97a <HAL_RCC_OscConfig+0xc2>
 800e9b6:	6821      	ldr	r1, [r4, #0]
 800e9b8:	487e      	ldr	r0, [pc, #504]	; (800ebb4 <HAL_RCC_OscConfig+0x2fc>)
 800e9ba:	4001      	ands	r1, r0
 800e9bc:	6021      	str	r1, [r4, #0]
 800e9be:	6821      	ldr	r1, [r4, #0]
 800e9c0:	400b      	ands	r3, r1
 800e9c2:	9303      	str	r3, [sp, #12]
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	497c      	ldr	r1, [pc, #496]	; (800ebb8 <HAL_RCC_OscConfig+0x300>)
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	400b      	ands	r3, r1
 800e9cc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	d1d6      	bne.n	800e980 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 800e9d2:	f7fd fe63 	bl	800c69c <HAL_GetTick>
 800e9d6:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e9d8:	2280      	movs	r2, #128	; 0x80
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	0292      	lsls	r2, r2, #10
 800e9de:	4213      	tst	r3, r2
 800e9e0:	d100      	bne.n	800e9e4 <HAL_RCC_OscConfig+0x12c>
 800e9e2:	e77a      	b.n	800e8da <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9e4:	f7fd fe5a 	bl	800c69c <HAL_GetTick>
 800e9e8:	9b00      	ldr	r3, [sp, #0]
 800e9ea:	1ac0      	subs	r0, r0, r3
 800e9ec:	2864      	cmp	r0, #100	; 0x64
 800e9ee:	d9f3      	bls.n	800e9d8 <HAL_RCC_OscConfig+0x120>
 800e9f0:	e7d4      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e9f2:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800e9f4:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e9f6:	4213      	tst	r3, r2
 800e9f8:	d003      	beq.n	800ea02 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e9fa:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800e9fc:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e9fe:	4311      	orrs	r1, r2
 800ea00:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ea02:	2e04      	cmp	r6, #4
 800ea04:	d003      	beq.n	800ea0e <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ea06:	2e0c      	cmp	r6, #12
 800ea08:	d124      	bne.n	800ea54 <HAL_RCC_OscConfig+0x19c>
 800ea0a:	2f00      	cmp	r7, #0
 800ea0c:	d122      	bne.n	800ea54 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ea0e:	6822      	ldr	r2, [r4, #0]
 800ea10:	0752      	lsls	r2, r2, #29
 800ea12:	d501      	bpl.n	800ea18 <HAL_RCC_OscConfig+0x160>
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d0ab      	beq.n	800e970 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea18:	6861      	ldr	r1, [r4, #4]
 800ea1a:	692a      	ldr	r2, [r5, #16]
 800ea1c:	4867      	ldr	r0, [pc, #412]	; (800ebbc <HAL_RCC_OscConfig+0x304>)
 800ea1e:	0212      	lsls	r2, r2, #8
 800ea20:	4001      	ands	r1, r0
 800ea22:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ea24:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea26:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ea28:	6822      	ldr	r2, [r4, #0]
 800ea2a:	438a      	bics	r2, r1
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ea30:	f7ff fefa 	bl	800e828 <HAL_RCC_GetSysClockFreq>
 800ea34:	68e3      	ldr	r3, [r4, #12]
 800ea36:	4a5c      	ldr	r2, [pc, #368]	; (800eba8 <HAL_RCC_OscConfig+0x2f0>)
 800ea38:	061b      	lsls	r3, r3, #24
 800ea3a:	0f1b      	lsrs	r3, r3, #28
 800ea3c:	5cd3      	ldrb	r3, [r2, r3]
 800ea3e:	40d8      	lsrs	r0, r3
 800ea40:	4b5a      	ldr	r3, [pc, #360]	; (800ebac <HAL_RCC_OscConfig+0x2f4>)
 800ea42:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800ea44:	4b5a      	ldr	r3, [pc, #360]	; (800ebb0 <HAL_RCC_OscConfig+0x2f8>)
 800ea46:	6818      	ldr	r0, [r3, #0]
 800ea48:	f7fd fde4 	bl	800c614 <HAL_InitTick>
      if(status != HAL_OK)
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d100      	bne.n	800ea52 <HAL_RCC_OscConfig+0x19a>
 800ea50:	e747      	b.n	800e8e2 <HAL_RCC_OscConfig+0x2a>
 800ea52:	e7a4      	b.n	800e99e <HAL_RCC_OscConfig+0xe6>
      if(hsi_state != RCC_HSI_OFF)
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d019      	beq.n	800ea8c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ea58:	2109      	movs	r1, #9
 800ea5a:	6822      	ldr	r2, [r4, #0]
 800ea5c:	438a      	bics	r2, r1
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ea62:	f7fd fe1b 	bl	800c69c <HAL_GetTick>
 800ea66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea68:	2204      	movs	r2, #4
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	4213      	tst	r3, r2
 800ea6e:	d007      	beq.n	800ea80 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea70:	6862      	ldr	r2, [r4, #4]
 800ea72:	692b      	ldr	r3, [r5, #16]
 800ea74:	4951      	ldr	r1, [pc, #324]	; (800ebbc <HAL_RCC_OscConfig+0x304>)
 800ea76:	021b      	lsls	r3, r3, #8
 800ea78:	400a      	ands	r2, r1
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	6063      	str	r3, [r4, #4]
 800ea7e:	e730      	b.n	800e8e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea80:	f7fd fe0c 	bl	800c69c <HAL_GetTick>
 800ea84:	1bc0      	subs	r0, r0, r7
 800ea86:	2802      	cmp	r0, #2
 800ea88:	d9ee      	bls.n	800ea68 <HAL_RCC_OscConfig+0x1b0>
 800ea8a:	e787      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	4393      	bics	r3, r2
 800ea92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ea94:	f7fd fe02 	bl	800c69c <HAL_GetTick>
 800ea98:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	4213      	tst	r3, r2
 800eaa0:	d100      	bne.n	800eaa4 <HAL_RCC_OscConfig+0x1ec>
 800eaa2:	e71e      	b.n	800e8e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eaa4:	f7fd fdfa 	bl	800c69c <HAL_GetTick>
 800eaa8:	1bc0      	subs	r0, r0, r7
 800eaaa:	2802      	cmp	r0, #2
 800eaac:	d9f5      	bls.n	800ea9a <HAL_RCC_OscConfig+0x1e2>
 800eaae:	e775      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800eab0:	69ab      	ldr	r3, [r5, #24]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d020      	beq.n	800eaf8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 800eab6:	2380      	movs	r3, #128	; 0x80
 800eab8:	6822      	ldr	r2, [r4, #0]
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	4313      	orrs	r3, r2
 800eabe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800eac0:	f7fd fdec 	bl	800c69c <HAL_GetTick>
 800eac4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800eac6:	2280      	movs	r2, #128	; 0x80
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	0092      	lsls	r2, r2, #2
 800eacc:	4213      	tst	r3, r2
 800eace:	d00d      	beq.n	800eaec <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ead0:	6863      	ldr	r3, [r4, #4]
 800ead2:	4a34      	ldr	r2, [pc, #208]	; (800eba4 <HAL_RCC_OscConfig+0x2ec>)
 800ead4:	4013      	ands	r3, r2
 800ead6:	6a2a      	ldr	r2, [r5, #32]
 800ead8:	4313      	orrs	r3, r2
 800eada:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eadc:	6862      	ldr	r2, [r4, #4]
 800eade:	69eb      	ldr	r3, [r5, #28]
 800eae0:	0212      	lsls	r2, r2, #8
 800eae2:	061b      	lsls	r3, r3, #24
 800eae4:	0a12      	lsrs	r2, r2, #8
 800eae6:	4313      	orrs	r3, r2
 800eae8:	6063      	str	r3, [r4, #4]
 800eaea:	e727      	b.n	800e93c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eaec:	f7fd fdd6 	bl	800c69c <HAL_GetTick>
 800eaf0:	1bc0      	subs	r0, r0, r7
 800eaf2:	2802      	cmp	r0, #2
 800eaf4:	d9e7      	bls.n	800eac6 <HAL_RCC_OscConfig+0x20e>
 800eaf6:	e751      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 800eaf8:	6823      	ldr	r3, [r4, #0]
 800eafa:	4a31      	ldr	r2, [pc, #196]	; (800ebc0 <HAL_RCC_OscConfig+0x308>)
 800eafc:	4013      	ands	r3, r2
 800eafe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800eb00:	f7fd fdcc 	bl	800c69c <HAL_GetTick>
 800eb04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800eb06:	2280      	movs	r2, #128	; 0x80
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	0092      	lsls	r2, r2, #2
 800eb0c:	4213      	tst	r3, r2
 800eb0e:	d100      	bne.n	800eb12 <HAL_RCC_OscConfig+0x25a>
 800eb10:	e714      	b.n	800e93c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eb12:	f7fd fdc3 	bl	800c69c <HAL_GetTick>
 800eb16:	1bc0      	subs	r0, r0, r7
 800eb18:	2802      	cmp	r0, #2
 800eb1a:	d9f4      	bls.n	800eb06 <HAL_RCC_OscConfig+0x24e>
 800eb1c:	e73e      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eb1e:	696a      	ldr	r2, [r5, #20]
 800eb20:	2301      	movs	r3, #1
 800eb22:	2a00      	cmp	r2, #0
 800eb24:	d010      	beq.n	800eb48 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 800eb26:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800eb2c:	f7fd fdb6 	bl	800c69c <HAL_GetTick>
 800eb30:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eb32:	2202      	movs	r2, #2
 800eb34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb36:	4213      	tst	r3, r2
 800eb38:	d000      	beq.n	800eb3c <HAL_RCC_OscConfig+0x284>
 800eb3a:	e703      	b.n	800e944 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb3c:	f7fd fdae 	bl	800c69c <HAL_GetTick>
 800eb40:	1bc0      	subs	r0, r0, r7
 800eb42:	2802      	cmp	r0, #2
 800eb44:	d9f5      	bls.n	800eb32 <HAL_RCC_OscConfig+0x27a>
 800eb46:	e729      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 800eb48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb4a:	439a      	bics	r2, r3
 800eb4c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800eb4e:	f7fd fda5 	bl	800c69c <HAL_GetTick>
 800eb52:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eb54:	2202      	movs	r2, #2
 800eb56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb58:	4213      	tst	r3, r2
 800eb5a:	d100      	bne.n	800eb5e <HAL_RCC_OscConfig+0x2a6>
 800eb5c:	e6f2      	b.n	800e944 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb5e:	f7fd fd9d 	bl	800c69c <HAL_GetTick>
 800eb62:	1bc0      	subs	r0, r0, r7
 800eb64:	2802      	cmp	r0, #2
 800eb66:	d9f5      	bls.n	800eb54 <HAL_RCC_OscConfig+0x29c>
 800eb68:	e718      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb6a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800eb6c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eb70:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800eb72:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb74:	421a      	tst	r2, r3
 800eb76:	d104      	bne.n	800eb82 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb82:	2280      	movs	r2, #128	; 0x80
 800eb84:	4f0f      	ldr	r7, [pc, #60]	; (800ebc4 <HAL_RCC_OscConfig+0x30c>)
 800eb86:	0052      	lsls	r2, r2, #1
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	4213      	tst	r3, r2
 800eb8c:	d01c      	beq.n	800ebc8 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb8e:	2280      	movs	r2, #128	; 0x80
 800eb90:	68ab      	ldr	r3, [r5, #8]
 800eb92:	0052      	lsls	r2, r2, #1
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d12b      	bne.n	800ebf0 <HAL_RCC_OscConfig+0x338>
 800eb98:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	6523      	str	r3, [r4, #80]	; 0x50
 800eb9e:	e04c      	b.n	800ec3a <HAL_RCC_OscConfig+0x382>
 800eba0:	40021000 	.word	0x40021000
 800eba4:	ffff1fff 	.word	0xffff1fff
 800eba8:	0801aa7d 	.word	0x0801aa7d
 800ebac:	200001cc 	.word	0x200001cc
 800ebb0:	200000d8 	.word	0x200000d8
 800ebb4:	fffeffff 	.word	0xfffeffff
 800ebb8:	fffbffff 	.word	0xfffbffff
 800ebbc:	ffffe0ff 	.word	0xffffe0ff
 800ebc0:	fffffeff 	.word	0xfffffeff
 800ebc4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ebc8:	2280      	movs	r2, #128	; 0x80
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	0052      	lsls	r2, r2, #1
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800ebd2:	f7fd fd63 	bl	800c69c <HAL_GetTick>
 800ebd6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebd8:	2280      	movs	r2, #128	; 0x80
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	0052      	lsls	r2, r2, #1
 800ebde:	4213      	tst	r3, r2
 800ebe0:	d1d5      	bne.n	800eb8e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebe2:	f7fd fd5b 	bl	800c69c <HAL_GetTick>
 800ebe6:	9b01      	ldr	r3, [sp, #4]
 800ebe8:	1ac0      	subs	r0, r0, r3
 800ebea:	2864      	cmp	r0, #100	; 0x64
 800ebec:	d9f4      	bls.n	800ebd8 <HAL_RCC_OscConfig+0x320>
 800ebee:	e6d5      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d116      	bne.n	800ec22 <HAL_RCC_OscConfig+0x36a>
 800ebf4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ebf6:	4a51      	ldr	r2, [pc, #324]	; (800ed3c <HAL_RCC_OscConfig+0x484>)
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	6523      	str	r3, [r4, #80]	; 0x50
 800ebfc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ebfe:	4a50      	ldr	r2, [pc, #320]	; (800ed40 <HAL_RCC_OscConfig+0x488>)
 800ec00:	4013      	ands	r3, r2
 800ec02:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800ec04:	f7fd fd4a 	bl	800c69c <HAL_GetTick>
 800ec08:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec0a:	2280      	movs	r2, #128	; 0x80
 800ec0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec0e:	0092      	lsls	r2, r2, #2
 800ec10:	4213      	tst	r3, r2
 800ec12:	d01a      	beq.n	800ec4a <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec14:	f7fd fd42 	bl	800c69c <HAL_GetTick>
 800ec18:	4b4a      	ldr	r3, [pc, #296]	; (800ed44 <HAL_RCC_OscConfig+0x48c>)
 800ec1a:	1bc0      	subs	r0, r0, r7
 800ec1c:	4298      	cmp	r0, r3
 800ec1e:	d9f4      	bls.n	800ec0a <HAL_RCC_OscConfig+0x352>
 800ec20:	e6bc      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec22:	21a0      	movs	r1, #160	; 0xa0
 800ec24:	00c9      	lsls	r1, r1, #3
 800ec26:	428b      	cmp	r3, r1
 800ec28:	d118      	bne.n	800ec5c <HAL_RCC_OscConfig+0x3a4>
 800ec2a:	2380      	movs	r3, #128	; 0x80
 800ec2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	430b      	orrs	r3, r1
 800ec32:	6523      	str	r3, [r4, #80]	; 0x50
 800ec34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec36:	431a      	orrs	r2, r3
 800ec38:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800ec3a:	f7fd fd2f 	bl	800c69c <HAL_GetTick>
 800ec3e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec40:	2280      	movs	r2, #128	; 0x80
 800ec42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec44:	0092      	lsls	r2, r2, #2
 800ec46:	4213      	tst	r3, r2
 800ec48:	d010      	beq.n	800ec6c <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 800ec4a:	9b00      	ldr	r3, [sp, #0]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d000      	beq.n	800ec52 <HAL_RCC_OscConfig+0x39a>
 800ec50:	e67c      	b.n	800e94c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec54:	4a3c      	ldr	r2, [pc, #240]	; (800ed48 <HAL_RCC_OscConfig+0x490>)
 800ec56:	4013      	ands	r3, r2
 800ec58:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec5a:	e677      	b.n	800e94c <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec5e:	4a37      	ldr	r2, [pc, #220]	; (800ed3c <HAL_RCC_OscConfig+0x484>)
 800ec60:	4013      	ands	r3, r2
 800ec62:	6523      	str	r3, [r4, #80]	; 0x50
 800ec64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec66:	4a36      	ldr	r2, [pc, #216]	; (800ed40 <HAL_RCC_OscConfig+0x488>)
 800ec68:	4013      	ands	r3, r2
 800ec6a:	e797      	b.n	800eb9c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec6c:	f7fd fd16 	bl	800c69c <HAL_GetTick>
 800ec70:	4b34      	ldr	r3, [pc, #208]	; (800ed44 <HAL_RCC_OscConfig+0x48c>)
 800ec72:	1bc0      	subs	r0, r0, r7
 800ec74:	4298      	cmp	r0, r3
 800ec76:	d9e3      	bls.n	800ec40 <HAL_RCC_OscConfig+0x388>
 800ec78:	e690      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ec7a:	2e0c      	cmp	r6, #12
 800ec7c:	d043      	beq.n	800ed06 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec7e:	4a33      	ldr	r2, [pc, #204]	; (800ed4c <HAL_RCC_OscConfig+0x494>)
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d12e      	bne.n	800ece2 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 800ec84:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ec86:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800ec88:	4013      	ands	r3, r2
 800ec8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ec8c:	f7fd fd06 	bl	800c69c <HAL_GetTick>
 800ec90:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ec92:	04bf      	lsls	r7, r7, #18
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	423b      	tst	r3, r7
 800ec98:	d11d      	bne.n	800ecd6 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ec9a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800ec9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ec9e:	68e2      	ldr	r2, [r4, #12]
 800eca0:	430b      	orrs	r3, r1
 800eca2:	492b      	ldr	r1, [pc, #172]	; (800ed50 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800eca4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eca6:	400a      	ands	r2, r1
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ecac:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800ecb2:	2380      	movs	r3, #128	; 0x80
 800ecb4:	6822      	ldr	r2, [r4, #0]
 800ecb6:	045b      	lsls	r3, r3, #17
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ecbc:	f7fd fcee 	bl	800c69c <HAL_GetTick>
 800ecc0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	4233      	tst	r3, r6
 800ecc6:	d000      	beq.n	800ecca <HAL_RCC_OscConfig+0x412>
 800ecc8:	e644      	b.n	800e954 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecca:	f7fd fce7 	bl	800c69c <HAL_GetTick>
 800ecce:	1b40      	subs	r0, r0, r5
 800ecd0:	2802      	cmp	r0, #2
 800ecd2:	d9f6      	bls.n	800ecc2 <HAL_RCC_OscConfig+0x40a>
 800ecd4:	e662      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecd6:	f7fd fce1 	bl	800c69c <HAL_GetTick>
 800ecda:	1b80      	subs	r0, r0, r6
 800ecdc:	2802      	cmp	r0, #2
 800ecde:	d9d9      	bls.n	800ec94 <HAL_RCC_OscConfig+0x3dc>
 800ece0:	e65c      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 800ece2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ece4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800ece6:	4013      	ands	r3, r2
 800ece8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ecea:	f7fd fcd7 	bl	800c69c <HAL_GetTick>
 800ecee:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ecf0:	04b6      	lsls	r6, r6, #18
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	4233      	tst	r3, r6
 800ecf6:	d100      	bne.n	800ecfa <HAL_RCC_OscConfig+0x442>
 800ecf8:	e62c      	b.n	800e954 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecfa:	f7fd fccf 	bl	800c69c <HAL_GetTick>
 800ecfe:	1b40      	subs	r0, r0, r5
 800ed00:	2802      	cmp	r0, #2
 800ed02:	d9f6      	bls.n	800ecf2 <HAL_RCC_OscConfig+0x43a>
 800ed04:	e64a      	b.n	800e99c <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 800ed06:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d100      	bne.n	800ed0e <HAL_RCC_OscConfig+0x456>
 800ed0c:	e647      	b.n	800e99e <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed0e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800ed10:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed12:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800ed14:	0252      	lsls	r2, r2, #9
 800ed16:	401a      	ands	r2, r3
 800ed18:	428a      	cmp	r2, r1
 800ed1a:	d000      	beq.n	800ed1e <HAL_RCC_OscConfig+0x466>
 800ed1c:	e628      	b.n	800e970 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ed1e:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed20:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ed22:	0392      	lsls	r2, r2, #14
 800ed24:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed26:	428a      	cmp	r2, r1
 800ed28:	d000      	beq.n	800ed2c <HAL_RCC_OscConfig+0x474>
 800ed2a:	e621      	b.n	800e970 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ed2c:	22c0      	movs	r2, #192	; 0xc0
 800ed2e:	0412      	lsls	r2, r2, #16
 800ed30:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ed32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d100      	bne.n	800ed3a <HAL_RCC_OscConfig+0x482>
 800ed38:	e60c      	b.n	800e954 <HAL_RCC_OscConfig+0x9c>
 800ed3a:	e619      	b.n	800e970 <HAL_RCC_OscConfig+0xb8>
 800ed3c:	fffffeff 	.word	0xfffffeff
 800ed40:	fffffbff 	.word	0xfffffbff
 800ed44:	00001388 	.word	0x00001388
 800ed48:	efffffff 	.word	0xefffffff
 800ed4c:	feffffff 	.word	0xfeffffff
 800ed50:	ff02ffff 	.word	0xff02ffff

0800ed54 <HAL_RCC_ClockConfig>:
{
 800ed54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed56:	1e04      	subs	r4, r0, #0
 800ed58:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800ed5a:	d101      	bne.n	800ed60 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800ed5c:	2001      	movs	r0, #1
}
 800ed5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ed60:	2501      	movs	r5, #1
 800ed62:	4e5b      	ldr	r6, [pc, #364]	; (800eed0 <HAL_RCC_ClockConfig+0x17c>)
 800ed64:	9a01      	ldr	r2, [sp, #4]
 800ed66:	6833      	ldr	r3, [r6, #0]
 800ed68:	402b      	ands	r3, r5
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d331      	bcc.n	800edd2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed6e:	6822      	ldr	r2, [r4, #0]
 800ed70:	0793      	lsls	r3, r2, #30
 800ed72:	d443      	bmi.n	800edfc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ed74:	07d3      	lsls	r3, r2, #31
 800ed76:	d449      	bmi.n	800ee0c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ed78:	2501      	movs	r5, #1
 800ed7a:	6833      	ldr	r3, [r6, #0]
 800ed7c:	9a01      	ldr	r2, [sp, #4]
 800ed7e:	402b      	ands	r3, r5
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d909      	bls.n	800ed98 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed84:	6833      	ldr	r3, [r6, #0]
 800ed86:	43ab      	bics	r3, r5
 800ed88:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800ed8a:	f7fd fc87 	bl	800c69c <HAL_GetTick>
 800ed8e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed90:	6833      	ldr	r3, [r6, #0]
 800ed92:	422b      	tst	r3, r5
 800ed94:	d000      	beq.n	800ed98 <HAL_RCC_ClockConfig+0x44>
 800ed96:	e08c      	b.n	800eeb2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed98:	6822      	ldr	r2, [r4, #0]
 800ed9a:	4d4e      	ldr	r5, [pc, #312]	; (800eed4 <HAL_RCC_ClockConfig+0x180>)
 800ed9c:	0753      	lsls	r3, r2, #29
 800ed9e:	d500      	bpl.n	800eda2 <HAL_RCC_ClockConfig+0x4e>
 800eda0:	e08f      	b.n	800eec2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eda2:	0713      	lsls	r3, r2, #28
 800eda4:	d506      	bpl.n	800edb4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800eda6:	68e9      	ldr	r1, [r5, #12]
 800eda8:	6923      	ldr	r3, [r4, #16]
 800edaa:	4a4b      	ldr	r2, [pc, #300]	; (800eed8 <HAL_RCC_ClockConfig+0x184>)
 800edac:	00db      	lsls	r3, r3, #3
 800edae:	400a      	ands	r2, r1
 800edb0:	4313      	orrs	r3, r2
 800edb2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800edb4:	f7ff fd38 	bl	800e828 <HAL_RCC_GetSysClockFreq>
 800edb8:	68eb      	ldr	r3, [r5, #12]
 800edba:	4a48      	ldr	r2, [pc, #288]	; (800eedc <HAL_RCC_ClockConfig+0x188>)
 800edbc:	061b      	lsls	r3, r3, #24
 800edbe:	0f1b      	lsrs	r3, r3, #28
 800edc0:	5cd3      	ldrb	r3, [r2, r3]
 800edc2:	40d8      	lsrs	r0, r3
 800edc4:	4b46      	ldr	r3, [pc, #280]	; (800eee0 <HAL_RCC_ClockConfig+0x18c>)
 800edc6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800edc8:	4b46      	ldr	r3, [pc, #280]	; (800eee4 <HAL_RCC_ClockConfig+0x190>)
 800edca:	6818      	ldr	r0, [r3, #0]
 800edcc:	f7fd fc22 	bl	800c614 <HAL_InitTick>
  if(status != HAL_OK)
 800edd0:	e7c5      	b.n	800ed5e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edd2:	6833      	ldr	r3, [r6, #0]
 800edd4:	9a01      	ldr	r2, [sp, #4]
 800edd6:	43ab      	bics	r3, r5
 800edd8:	4313      	orrs	r3, r2
 800edda:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800eddc:	f7fd fc5e 	bl	800c69c <HAL_GetTick>
 800ede0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ede2:	6833      	ldr	r3, [r6, #0]
 800ede4:	9a01      	ldr	r2, [sp, #4]
 800ede6:	402b      	ands	r3, r5
 800ede8:	4293      	cmp	r3, r2
 800edea:	d0c0      	beq.n	800ed6e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800edec:	f7fd fc56 	bl	800c69c <HAL_GetTick>
 800edf0:	4b3d      	ldr	r3, [pc, #244]	; (800eee8 <HAL_RCC_ClockConfig+0x194>)
 800edf2:	1bc0      	subs	r0, r0, r7
 800edf4:	4298      	cmp	r0, r3
 800edf6:	d9f4      	bls.n	800ede2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800edf8:	2003      	movs	r0, #3
 800edfa:	e7b0      	b.n	800ed5e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800edfc:	20f0      	movs	r0, #240	; 0xf0
 800edfe:	4935      	ldr	r1, [pc, #212]	; (800eed4 <HAL_RCC_ClockConfig+0x180>)
 800ee00:	68cb      	ldr	r3, [r1, #12]
 800ee02:	4383      	bics	r3, r0
 800ee04:	68a0      	ldr	r0, [r4, #8]
 800ee06:	4303      	orrs	r3, r0
 800ee08:	60cb      	str	r3, [r1, #12]
 800ee0a:	e7b3      	b.n	800ed74 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee0c:	4d31      	ldr	r5, [pc, #196]	; (800eed4 <HAL_RCC_ClockConfig+0x180>)
 800ee0e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee10:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee12:	2a02      	cmp	r2, #2
 800ee14:	d118      	bne.n	800ee48 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee16:	039b      	lsls	r3, r3, #14
 800ee18:	d5a0      	bpl.n	800ed5c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ee1a:	2103      	movs	r1, #3
 800ee1c:	68eb      	ldr	r3, [r5, #12]
 800ee1e:	438b      	bics	r3, r1
 800ee20:	4313      	orrs	r3, r2
 800ee22:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800ee24:	f7fd fc3a 	bl	800c69c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee28:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800ee2a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d118      	bne.n	800ee62 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ee30:	220c      	movs	r2, #12
 800ee32:	68eb      	ldr	r3, [r5, #12]
 800ee34:	4013      	ands	r3, r2
 800ee36:	2b08      	cmp	r3, #8
 800ee38:	d09e      	beq.n	800ed78 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee3a:	f7fd fc2f 	bl	800c69c <HAL_GetTick>
 800ee3e:	4b2a      	ldr	r3, [pc, #168]	; (800eee8 <HAL_RCC_ClockConfig+0x194>)
 800ee40:	1bc0      	subs	r0, r0, r7
 800ee42:	4298      	cmp	r0, r3
 800ee44:	d9f4      	bls.n	800ee30 <HAL_RCC_ClockConfig+0xdc>
 800ee46:	e7d7      	b.n	800edf8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee48:	2a03      	cmp	r2, #3
 800ee4a:	d102      	bne.n	800ee52 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ee4c:	019b      	lsls	r3, r3, #6
 800ee4e:	d4e4      	bmi.n	800ee1a <HAL_RCC_ClockConfig+0xc6>
 800ee50:	e784      	b.n	800ed5c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ee52:	2a01      	cmp	r2, #1
 800ee54:	d102      	bne.n	800ee5c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ee56:	075b      	lsls	r3, r3, #29
 800ee58:	d4df      	bmi.n	800ee1a <HAL_RCC_ClockConfig+0xc6>
 800ee5a:	e77f      	b.n	800ed5c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ee5c:	059b      	lsls	r3, r3, #22
 800ee5e:	d4dc      	bmi.n	800ee1a <HAL_RCC_ClockConfig+0xc6>
 800ee60:	e77c      	b.n	800ed5c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d10b      	bne.n	800ee7e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ee66:	220c      	movs	r2, #12
 800ee68:	68eb      	ldr	r3, [r5, #12]
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d083      	beq.n	800ed78 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee70:	f7fd fc14 	bl	800c69c <HAL_GetTick>
 800ee74:	4b1c      	ldr	r3, [pc, #112]	; (800eee8 <HAL_RCC_ClockConfig+0x194>)
 800ee76:	1bc0      	subs	r0, r0, r7
 800ee78:	4298      	cmp	r0, r3
 800ee7a:	d9f4      	bls.n	800ee66 <HAL_RCC_ClockConfig+0x112>
 800ee7c:	e7bc      	b.n	800edf8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d011      	beq.n	800eea6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ee82:	220c      	movs	r2, #12
 800ee84:	68eb      	ldr	r3, [r5, #12]
 800ee86:	4213      	tst	r3, r2
 800ee88:	d100      	bne.n	800ee8c <HAL_RCC_ClockConfig+0x138>
 800ee8a:	e775      	b.n	800ed78 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee8c:	f7fd fc06 	bl	800c69c <HAL_GetTick>
 800ee90:	4b15      	ldr	r3, [pc, #84]	; (800eee8 <HAL_RCC_ClockConfig+0x194>)
 800ee92:	1bc0      	subs	r0, r0, r7
 800ee94:	4298      	cmp	r0, r3
 800ee96:	d9f4      	bls.n	800ee82 <HAL_RCC_ClockConfig+0x12e>
 800ee98:	e7ae      	b.n	800edf8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee9a:	f7fd fbff 	bl	800c69c <HAL_GetTick>
 800ee9e:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <HAL_RCC_ClockConfig+0x194>)
 800eea0:	1bc0      	subs	r0, r0, r7
 800eea2:	4298      	cmp	r0, r3
 800eea4:	d8a8      	bhi.n	800edf8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800eea6:	220c      	movs	r2, #12
 800eea8:	68eb      	ldr	r3, [r5, #12]
 800eeaa:	4013      	ands	r3, r2
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d1f4      	bne.n	800ee9a <HAL_RCC_ClockConfig+0x146>
 800eeb0:	e762      	b.n	800ed78 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eeb2:	f7fd fbf3 	bl	800c69c <HAL_GetTick>
 800eeb6:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <HAL_RCC_ClockConfig+0x194>)
 800eeb8:	1bc0      	subs	r0, r0, r7
 800eeba:	4298      	cmp	r0, r3
 800eebc:	d800      	bhi.n	800eec0 <HAL_RCC_ClockConfig+0x16c>
 800eebe:	e767      	b.n	800ed90 <HAL_RCC_ClockConfig+0x3c>
 800eec0:	e79a      	b.n	800edf8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eec2:	68eb      	ldr	r3, [r5, #12]
 800eec4:	4909      	ldr	r1, [pc, #36]	; (800eeec <HAL_RCC_ClockConfig+0x198>)
 800eec6:	400b      	ands	r3, r1
 800eec8:	68e1      	ldr	r1, [r4, #12]
 800eeca:	430b      	orrs	r3, r1
 800eecc:	60eb      	str	r3, [r5, #12]
 800eece:	e768      	b.n	800eda2 <HAL_RCC_ClockConfig+0x4e>
 800eed0:	40022000 	.word	0x40022000
 800eed4:	40021000 	.word	0x40021000
 800eed8:	ffffc7ff 	.word	0xffffc7ff
 800eedc:	0801aa7d 	.word	0x0801aa7d
 800eee0:	200001cc 	.word	0x200001cc
 800eee4:	200000d8 	.word	0x200000d8
 800eee8:	00001388 	.word	0x00001388
 800eeec:	fffff8ff 	.word	0xfffff8ff

0800eef0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800eef0:	6803      	ldr	r3, [r0, #0]
{
 800eef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eef4:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800eef6:	069b      	lsls	r3, r3, #26
 800eef8:	d53c      	bpl.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eefa:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800eefc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eefe:	4c5a      	ldr	r4, [pc, #360]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ef00:	055b      	lsls	r3, r3, #21
 800ef02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800ef04:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef06:	421a      	tst	r2, r3
 800ef08:	d104      	bne.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ef0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800ef10:	2301      	movs	r3, #1
 800ef12:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef14:	2780      	movs	r7, #128	; 0x80
 800ef16:	4e55      	ldr	r6, [pc, #340]	; (800f06c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800ef18:	007f      	lsls	r7, r7, #1
 800ef1a:	6833      	ldr	r3, [r6, #0]
 800ef1c:	423b      	tst	r3, r7
 800ef1e:	d062      	beq.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ef20:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800ef22:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ef24:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800ef26:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800ef28:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ef2a:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800ef2c:	029b      	lsls	r3, r3, #10
 800ef2e:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ef30:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800ef32:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ef34:	428a      	cmp	r2, r1
 800ef36:	d167      	bne.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800ef38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ef3a:	0011      	movs	r1, r2
 800ef3c:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800ef3e:	421a      	tst	r2, r3
 800ef40:	d16a      	bne.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ef42:	6869      	ldr	r1, [r5, #4]
 800ef44:	23c0      	movs	r3, #192	; 0xc0
 800ef46:	000a      	movs	r2, r1
 800ef48:	029b      	lsls	r3, r3, #10
 800ef4a:	401a      	ands	r2, r3
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d107      	bne.n	800ef60 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	4847      	ldr	r0, [pc, #284]	; (800f070 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800ef54:	4003      	ands	r3, r0
 800ef56:	20c0      	movs	r0, #192	; 0xc0
 800ef58:	0380      	lsls	r0, r0, #14
 800ef5a:	4001      	ands	r1, r0
 800ef5c:	430b      	orrs	r3, r1
 800ef5e:	6023      	str	r3, [r4, #0]
 800ef60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ef62:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ef64:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ef66:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d103      	bne.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef6e:	4a41      	ldr	r2, [pc, #260]	; (800f074 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800ef70:	4013      	ands	r3, r2
 800ef72:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ef74:	682b      	ldr	r3, [r5, #0]
 800ef76:	07da      	lsls	r2, r3, #31
 800ef78:	d506      	bpl.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ef7a:	2003      	movs	r0, #3
 800ef7c:	493a      	ldr	r1, [pc, #232]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ef7e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ef80:	4382      	bics	r2, r0
 800ef82:	68a8      	ldr	r0, [r5, #8]
 800ef84:	4302      	orrs	r2, r0
 800ef86:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ef88:	079a      	lsls	r2, r3, #30
 800ef8a:	d506      	bpl.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ef8c:	200c      	movs	r0, #12
 800ef8e:	4936      	ldr	r1, [pc, #216]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800ef90:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ef92:	4382      	bics	r2, r0
 800ef94:	68e8      	ldr	r0, [r5, #12]
 800ef96:	4302      	orrs	r2, r0
 800ef98:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ef9a:	075a      	lsls	r2, r3, #29
 800ef9c:	d506      	bpl.n	800efac <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ef9e:	4932      	ldr	r1, [pc, #200]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800efa0:	4835      	ldr	r0, [pc, #212]	; (800f078 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800efa2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800efa4:	4002      	ands	r2, r0
 800efa6:	6928      	ldr	r0, [r5, #16]
 800efa8:	4302      	orrs	r2, r0
 800efaa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800efac:	071a      	lsls	r2, r3, #28
 800efae:	d506      	bpl.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800efb0:	492d      	ldr	r1, [pc, #180]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800efb2:	4832      	ldr	r0, [pc, #200]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800efb4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800efb6:	4002      	ands	r2, r0
 800efb8:	6968      	ldr	r0, [r5, #20]
 800efba:	4302      	orrs	r2, r0
 800efbc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800efbe:	05da      	lsls	r2, r3, #23
 800efc0:	d506      	bpl.n	800efd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800efc2:	4929      	ldr	r1, [pc, #164]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800efc4:	482e      	ldr	r0, [pc, #184]	; (800f080 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800efc6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800efc8:	4002      	ands	r2, r0
 800efca:	69a8      	ldr	r0, [r5, #24]
 800efcc:	4302      	orrs	r2, r0
 800efce:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800efd0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800efd2:	061b      	lsls	r3, r3, #24
 800efd4:	d517      	bpl.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800efd6:	4a24      	ldr	r2, [pc, #144]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800efd8:	492a      	ldr	r1, [pc, #168]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800efda:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800efdc:	400b      	ands	r3, r1
 800efde:	69e9      	ldr	r1, [r5, #28]
 800efe0:	430b      	orrs	r3, r1
 800efe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800efe4:	e00f      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800efe6:	6833      	ldr	r3, [r6, #0]
 800efe8:	433b      	orrs	r3, r7
 800efea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800efec:	f7fd fb56 	bl	800c69c <HAL_GetTick>
 800eff0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eff2:	6833      	ldr	r3, [r6, #0]
 800eff4:	423b      	tst	r3, r7
 800eff6:	d193      	bne.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eff8:	f7fd fb50 	bl	800c69c <HAL_GetTick>
 800effc:	9b01      	ldr	r3, [sp, #4]
 800effe:	1ac0      	subs	r0, r0, r3
 800f000:	2864      	cmp	r0, #100	; 0x64
 800f002:	d9f6      	bls.n	800eff2 <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 800f004:	2003      	movs	r0, #3
}
 800f006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f008:	429e      	cmp	r6, r3
 800f00a:	d195      	bne.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f00c:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 800f00e:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f010:	0392      	lsls	r2, r2, #14
 800f012:	d400      	bmi.n	800f016 <HAL_RCCEx_PeriphCLKConfig+0x126>
 800f014:	e790      	b.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800f016:	e7f6      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f018:	42b1      	cmp	r1, r6
 800f01a:	d100      	bne.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800f01c:	e791      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f01e:	682b      	ldr	r3, [r5, #0]
 800f020:	069b      	lsls	r3, r3, #26
 800f022:	d400      	bmi.n	800f026 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f024:	e78d      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 800f026:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f028:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800f02a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f02c:	0312      	lsls	r2, r2, #12
 800f02e:	4302      	orrs	r2, r0
 800f030:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f032:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f034:	4b12      	ldr	r3, [pc, #72]	; (800f080 <HAL_RCCEx_PeriphCLKConfig+0x190>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f036:	4814      	ldr	r0, [pc, #80]	; (800f088 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f038:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f03a:	4002      	ands	r2, r0
 800f03c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800f03e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f040:	05cb      	lsls	r3, r1, #23
 800f042:	d400      	bmi.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x156>
 800f044:	e77d      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 800f046:	f7fd fb29 	bl	800c69c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f04a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800f04c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f04e:	00bf      	lsls	r7, r7, #2
 800f050:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f052:	423b      	tst	r3, r7
 800f054:	d000      	beq.n	800f058 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800f056:	e774      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f058:	f7fd fb20 	bl	800c69c <HAL_GetTick>
 800f05c:	4b0b      	ldr	r3, [pc, #44]	; (800f08c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800f05e:	1b80      	subs	r0, r0, r6
 800f060:	4298      	cmp	r0, r3
 800f062:	d9f5      	bls.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800f064:	e7ce      	b.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800f066:	46c0      	nop			; (mov r8, r8)
 800f068:	40021000 	.word	0x40021000
 800f06c:	40007000 	.word	0x40007000
 800f070:	ffcfffff 	.word	0xffcfffff
 800f074:	efffffff 	.word	0xefffffff
 800f078:	fffff3ff 	.word	0xfffff3ff
 800f07c:	ffffcfff 	.word	0xffffcfff
 800f080:	fffcffff 	.word	0xfffcffff
 800f084:	fff3ffff 	.word	0xfff3ffff
 800f088:	fff7ffff 	.word	0xfff7ffff
 800f08c:	00001388 	.word	0x00001388

0800f090 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800f090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f092:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f094:	1c45      	adds	r5, r0, #1
 800f096:	7feb      	ldrb	r3, [r5, #31]
{
 800f098:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800f09a:	0038      	movs	r0, r7
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d027      	beq.n	800f0f0 <HAL_RTC_DeactivateAlarm+0x60>
 800f0a0:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f0a2:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f0a4:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 800f0a6:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f0a8:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f0aa:	6823      	ldr	r3, [r4, #0]
 800f0ac:	625a      	str	r2, [r3, #36]	; 0x24
 800f0ae:	3a77      	subs	r2, #119	; 0x77
 800f0b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800f0b2:	32ad      	adds	r2, #173	; 0xad
 800f0b4:	4291      	cmp	r1, r2
 800f0b6:	d12a      	bne.n	800f10e <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f0b8:	689a      	ldr	r2, [r3, #8]
 800f0ba:	4922      	ldr	r1, [pc, #136]	; (800f144 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f0bc:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f0be:	400a      	ands	r2, r1
 800f0c0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800f0c2:	689a      	ldr	r2, [r3, #8]
 800f0c4:	4920      	ldr	r1, [pc, #128]	; (800f148 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f0c6:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800f0c8:	400a      	ands	r2, r1
 800f0ca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f0cc:	f7fd fae6 	bl	800c69c <HAL_GetTick>
 800f0d0:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	6823      	ldr	r3, [r4, #0]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	401a      	ands	r2, r3
 800f0da:	9201      	str	r2, [sp, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	4213      	tst	r3, r2
 800f0e0:	d007      	beq.n	800f0f2 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0e2:	22ff      	movs	r2, #255	; 0xff
 800f0e4:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f0e6:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0e8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800f0ee:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 800f0f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f0f2:	f7fd fad3 	bl	800c69c <HAL_GetTick>
 800f0f6:	9b00      	ldr	r3, [sp, #0]
 800f0f8:	1ac0      	subs	r0, r0, r3
 800f0fa:	42b8      	cmp	r0, r7
 800f0fc:	d9e9      	bls.n	800f0d2 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0fe:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f100:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f106:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800f108:	9b01      	ldr	r3, [sp, #4]
 800f10a:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 800f10c:	e7f0      	b.n	800f0f0 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f10e:	689a      	ldr	r2, [r3, #8]
 800f110:	490e      	ldr	r1, [pc, #56]	; (800f14c <HAL_RTC_DeactivateAlarm+0xbc>)
 800f112:	400a      	ands	r2, r1
 800f114:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800f116:	689a      	ldr	r2, [r3, #8]
 800f118:	490d      	ldr	r1, [pc, #52]	; (800f150 <HAL_RTC_DeactivateAlarm+0xc0>)
 800f11a:	400a      	ands	r2, r1
 800f11c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f11e:	f7fd fabd 	bl	800c69c <HAL_GetTick>
 800f122:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	001a      	movs	r2, r3
 800f12a:	403a      	ands	r2, r7
 800f12c:	9201      	str	r2, [sp, #4]
 800f12e:	423b      	tst	r3, r7
 800f130:	d1d7      	bne.n	800f0e2 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f132:	f7fd fab3 	bl	800c69c <HAL_GetTick>
 800f136:	9b00      	ldr	r3, [sp, #0]
 800f138:	1ac0      	subs	r0, r0, r3
 800f13a:	23fa      	movs	r3, #250	; 0xfa
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	4298      	cmp	r0, r3
 800f140:	d9f0      	bls.n	800f124 <HAL_RTC_DeactivateAlarm+0x94>
 800f142:	e7dc      	b.n	800f0fe <HAL_RTC_DeactivateAlarm+0x6e>
 800f144:	fffffeff 	.word	0xfffffeff
 800f148:	ffffefff 	.word	0xffffefff
 800f14c:	fffffdff 	.word	0xfffffdff
 800f150:	ffffdfff 	.word	0xffffdfff

0800f154 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f154:	21a0      	movs	r1, #160	; 0xa0
 800f156:	6802      	ldr	r2, [r0, #0]
{
 800f158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f15a:	68d3      	ldr	r3, [r2, #12]
{
 800f15c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f15e:	438b      	bics	r3, r1
 800f160:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800f162:	f7fd fa9b 	bl	800c69c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f166:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 800f168:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f16a:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f16c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	4233      	tst	r3, r6
 800f174:	d001      	beq.n	800f17a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800f176:	2000      	movs	r0, #0
}
 800f178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f17a:	f7fd fa8f 	bl	800c69c <HAL_GetTick>
 800f17e:	1b40      	subs	r0, r0, r5
 800f180:	42b8      	cmp	r0, r7
 800f182:	d9f4      	bls.n	800f16e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800f184:	2003      	movs	r0, #3
 800f186:	e7f7      	b.n	800f178 <HAL_RTC_WaitForSynchro+0x24>

0800f188 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f18a:	2640      	movs	r6, #64	; 0x40
 800f18c:	6803      	ldr	r3, [r0, #0]
{
 800f18e:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f190:	68da      	ldr	r2, [r3, #12]
 800f192:	4232      	tst	r2, r6
 800f194:	d001      	beq.n	800f19a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800f196:	2000      	movs	r0, #0
}
 800f198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f19a:	2201      	movs	r2, #1
 800f19c:	4252      	negs	r2, r2
 800f19e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800f1a0:	f7fd fa7c 	bl	800c69c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f1a4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800f1a6:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f1a8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	4233      	tst	r3, r6
 800f1b0:	d1f1      	bne.n	800f196 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f1b2:	f7fd fa73 	bl	800c69c <HAL_GetTick>
 800f1b6:	1b40      	subs	r0, r0, r5
 800f1b8:	42b8      	cmp	r0, r7
 800f1ba:	d9f6      	bls.n	800f1aa <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800f1bc:	2003      	movs	r0, #3
 800f1be:	e7eb      	b.n	800f198 <RTC_EnterInitMode+0x10>

0800f1c0 <HAL_RTC_Init>:
{
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f1c4:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d01a      	beq.n	800f200 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f1ca:	1c86      	adds	r6, r0, #2
 800f1cc:	7ff3      	ldrb	r3, [r6, #31]
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d103      	bne.n	800f1dc <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800f1d4:	1943      	adds	r3, r0, r5
 800f1d6:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 800f1d8:	f004 fd20 	bl	8013c1c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f1dc:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f1de:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f1e0:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f1e2:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f1e4:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f1e6:	625a      	str	r2, [r3, #36]	; 0x24
 800f1e8:	3a77      	subs	r2, #119	; 0x77
 800f1ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f1ec:	f7ff ffcc 	bl	800f188 <RTC_EnterInitMode>
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	1e05      	subs	r5, r0, #0
 800f1f4:	d006      	beq.n	800f204 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1f6:	22ff      	movs	r2, #255	; 0xff
 800f1f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f1fa:	2304      	movs	r3, #4
 800f1fc:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800f1fe:	2501      	movs	r5, #1
}
 800f200:	0028      	movs	r0, r5
 800f202:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f204:	689a      	ldr	r2, [r3, #8]
 800f206:	491b      	ldr	r1, [pc, #108]	; (800f274 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f208:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f20a:	400a      	ands	r2, r1
 800f20c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f20e:	6862      	ldr	r2, [r4, #4]
 800f210:	6899      	ldr	r1, [r3, #8]
 800f212:	4302      	orrs	r2, r0
 800f214:	69a0      	ldr	r0, [r4, #24]
 800f216:	4302      	orrs	r2, r0
 800f218:	430a      	orrs	r2, r1
 800f21a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f21c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f21e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f220:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f222:	68a2      	ldr	r2, [r4, #8]
 800f224:	6919      	ldr	r1, [r3, #16]
 800f226:	0412      	lsls	r2, r2, #16
 800f228:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f22a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f22c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f22e:	68da      	ldr	r2, [r3, #12]
 800f230:	438a      	bics	r2, r1
 800f232:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f236:	397d      	subs	r1, #125	; 0x7d
 800f238:	438a      	bics	r2, r1
 800f23a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f23c:	69e2      	ldr	r2, [r4, #28]
 800f23e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f240:	4302      	orrs	r2, r0
 800f242:	430a      	orrs	r2, r1
 800f244:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	069b      	lsls	r3, r3, #26
 800f24a:	d40c      	bmi.n	800f266 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f24c:	0020      	movs	r0, r4
 800f24e:	f7ff ff81 	bl	800f154 <HAL_RTC_WaitForSynchro>
 800f252:	2800      	cmp	r0, #0
 800f254:	d007      	beq.n	800f266 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f256:	22ff      	movs	r2, #255	; 0xff
 800f258:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800f25a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f25c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f25e:	2304      	movs	r3, #4
 800f260:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800f262:	77e5      	strb	r5, [r4, #31]
 800f264:	e7cb      	b.n	800f1fe <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f266:	22ff      	movs	r2, #255	; 0xff
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800f26c:	2301      	movs	r3, #1
 800f26e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800f270:	e7c6      	b.n	800f200 <HAL_RTC_Init+0x40>
 800f272:	46c0      	nop			; (mov r8, r8)
 800f274:	ff8fffbf 	.word	0xff8fffbf

0800f278 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800f278:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 800f27a:	2809      	cmp	r0, #9
 800f27c:	d803      	bhi.n	800f286 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800f27e:	011b      	lsls	r3, r3, #4
 800f280:	4318      	orrs	r0, r3
 800f282:	b2c0      	uxtb	r0, r0
}
 800f284:	4770      	bx	lr
    Param -= 10U;
 800f286:	380a      	subs	r0, #10
    bcdhigh++;
 800f288:	3301      	adds	r3, #1
    Param -= 10U;
 800f28a:	b2c0      	uxtb	r0, r0
 800f28c:	e7f5      	b.n	800f27a <RTC_ByteToBcd2+0x2>
	...

0800f290 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800f290:	2302      	movs	r3, #2
{
 800f292:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f294:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800f296:	1c41      	adds	r1, r0, #1
 800f298:	7fce      	ldrb	r6, [r1, #31]
{
 800f29a:	0004      	movs	r4, r0
 800f29c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800f29e:	0018      	movs	r0, r3
 800f2a0:	2e01      	cmp	r6, #1
 800f2a2:	d100      	bne.n	800f2a6 <HAL_RTC_SetAlarm_IT+0x16>
 800f2a4:	e095      	b.n	800f3d2 <HAL_RTC_SetAlarm_IT+0x142>
 800f2a6:	3801      	subs	r0, #1
 800f2a8:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f2aa:	18e1      	adds	r1, r4, r3
 800f2ac:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800f2ae:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f2b0:	6826      	ldr	r6, [r4, #0]
 800f2b2:	9101      	str	r1, [sp, #4]
 800f2b4:	7828      	ldrb	r0, [r5, #0]
 800f2b6:	78af      	ldrb	r7, [r5, #2]
 800f2b8:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 800f2ba:	2a00      	cmp	r2, #0
 800f2bc:	d165      	bne.n	800f38a <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f2be:	68b2      	ldr	r2, [r6, #8]
 800f2c0:	0011      	movs	r1, r2
 800f2c2:	4019      	ands	r1, r3
 800f2c4:	421a      	tst	r2, r3
 800f2c6:	d100      	bne.n	800f2ca <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f2c8:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f2ca:	f7ff ffd5 	bl	800f278 <RTC_ByteToBcd2>
 800f2ce:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f2d0:	9801      	ldr	r0, [sp, #4]
 800f2d2:	f7ff ffd1 	bl	800f278 <RTC_ByteToBcd2>
 800f2d6:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f2d8:	0038      	movs	r0, r7
 800f2da:	f7ff ffcd 	bl	800f278 <RTC_ByteToBcd2>
 800f2de:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f2e0:	1c6b      	adds	r3, r5, #1
 800f2e2:	7fd8      	ldrb	r0, [r3, #31]
 800f2e4:	f7ff ffc8 	bl	800f278 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f2e8:	696a      	ldr	r2, [r5, #20]
 800f2ea:	69eb      	ldr	r3, [r5, #28]
 800f2ec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f2ee:	78ea      	ldrb	r2, [r5, #3]
 800f2f0:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	431f      	orrs	r7, r3
 800f2f6:	9b02      	ldr	r3, [sp, #8]
 800f2f8:	041b      	lsls	r3, r3, #16
 800f2fa:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f2fc:	9b01      	ldr	r3, [sp, #4]
 800f2fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f300:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f302:	69aa      	ldr	r2, [r5, #24]
 800f304:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f306:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f308:	4313      	orrs	r3, r2
 800f30a:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f30c:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f30e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f310:	6273      	str	r3, [r6, #36]	; 0x24
 800f312:	3b77      	subs	r3, #119	; 0x77
 800f314:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f316:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f318:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d15b      	bne.n	800f3d6 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f31e:	68b3      	ldr	r3, [r6, #8]
 800f320:	4a41      	ldr	r2, [pc, #260]	; (800f428 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f322:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f324:	4013      	ands	r3, r2
 800f326:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f328:	68f2      	ldr	r2, [r6, #12]
 800f32a:	4b40      	ldr	r3, [pc, #256]	; (800f42c <HAL_RTC_SetAlarm_IT+0x19c>)
 800f32c:	b2d2      	uxtb	r2, r2
 800f32e:	4313      	orrs	r3, r2
 800f330:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800f332:	f7fd f9b3 	bl	800c69c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f336:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 800f338:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f33a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	68da      	ldr	r2, [r3, #12]
 800f340:	0011      	movs	r1, r2
 800f342:	4029      	ands	r1, r5
 800f344:	9103      	str	r1, [sp, #12]
 800f346:	422a      	tst	r2, r5
 800f348:	d034      	beq.n	800f3b4 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f34a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f34c:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f34e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f350:	2280      	movs	r2, #128	; 0x80
 800f352:	6899      	ldr	r1, [r3, #8]
 800f354:	0052      	lsls	r2, r2, #1
 800f356:	430a      	orrs	r2, r1
 800f358:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800f35a:	2280      	movs	r2, #128	; 0x80
 800f35c:	6899      	ldr	r1, [r3, #8]
 800f35e:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800f360:	430a      	orrs	r2, r1
 800f362:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800f364:	2280      	movs	r2, #128	; 0x80
 800f366:	4b32      	ldr	r3, [pc, #200]	; (800f430 <HAL_RTC_SetAlarm_IT+0x1a0>)
 800f368:	0292      	lsls	r2, r2, #10
 800f36a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800f36c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800f36e:	4311      	orrs	r1, r2
 800f370:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800f372:	6899      	ldr	r1, [r3, #8]
 800f374:	430a      	orrs	r2, r1
 800f376:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f378:	22ff      	movs	r2, #255	; 0xff
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f37e:	3afe      	subs	r2, #254	; 0xfe
 800f380:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 800f382:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800f384:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 800f386:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 800f388:	e023      	b.n	800f3d2 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f38a:	68b2      	ldr	r2, [r6, #8]
 800f38c:	0011      	movs	r1, r2
 800f38e:	4019      	ands	r1, r3
 800f390:	421a      	tst	r2, r3
 800f392:	d100      	bne.n	800f396 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f394:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f396:	69eb      	ldr	r3, [r5, #28]
 800f398:	696a      	ldr	r2, [r5, #20]
 800f39a:	0400      	lsls	r0, r0, #16
 800f39c:	4313      	orrs	r3, r2
 800f39e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f3a0:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3a2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f3a4:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3a6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f3a8:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f3aa:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f3ac:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3ae:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f3b0:	7fd8      	ldrb	r0, [r3, #31]
 800f3b2:	e7a6      	b.n	800f302 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f3b4:	f7fd f972 	bl	800c69c <HAL_GetTick>
 800f3b8:	9b02      	ldr	r3, [sp, #8]
 800f3ba:	1ac0      	subs	r0, r0, r3
 800f3bc:	42b0      	cmp	r0, r6
 800f3be:	d9bd      	bls.n	800f33c <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3c0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f3c2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3c4:	6823      	ldr	r3, [r4, #0]
 800f3c6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f3c8:	1ca3      	adds	r3, r4, #2
 800f3ca:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800f3cc:	9b03      	ldr	r3, [sp, #12]
 800f3ce:	3401      	adds	r4, #1
 800f3d0:	77e3      	strb	r3, [r4, #31]
}
 800f3d2:	b005      	add	sp, #20
 800f3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f3d6:	68b3      	ldr	r3, [r6, #8]
 800f3d8:	4a16      	ldr	r2, [pc, #88]	; (800f434 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f3da:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f3dc:	4013      	ands	r3, r2
 800f3de:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f3e0:	68f2      	ldr	r2, [r6, #12]
 800f3e2:	4b15      	ldr	r3, [pc, #84]	; (800f438 <HAL_RTC_SetAlarm_IT+0x1a8>)
 800f3e4:	b2d2      	uxtb	r2, r2
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800f3ea:	f7fd f957 	bl	800c69c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f3ee:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 800f3f0:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f3f2:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	0011      	movs	r1, r2
 800f3fa:	4029      	ands	r1, r5
 800f3fc:	9103      	str	r1, [sp, #12]
 800f3fe:	422a      	tst	r2, r5
 800f400:	d00b      	beq.n	800f41a <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f402:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800f404:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f406:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800f408:	2280      	movs	r2, #128	; 0x80
 800f40a:	6899      	ldr	r1, [r3, #8]
 800f40c:	0092      	lsls	r2, r2, #2
 800f40e:	430a      	orrs	r2, r1
 800f410:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800f412:	2280      	movs	r2, #128	; 0x80
 800f414:	6899      	ldr	r1, [r3, #8]
 800f416:	0192      	lsls	r2, r2, #6
 800f418:	e7a2      	b.n	800f360 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f41a:	f7fd f93f 	bl	800c69c <HAL_GetTick>
 800f41e:	9b02      	ldr	r3, [sp, #8]
 800f420:	1ac0      	subs	r0, r0, r3
 800f422:	42b0      	cmp	r0, r6
 800f424:	d9e6      	bls.n	800f3f4 <HAL_RTC_SetAlarm_IT+0x164>
 800f426:	e7cb      	b.n	800f3c0 <HAL_RTC_SetAlarm_IT+0x130>
 800f428:	fffffeff 	.word	0xfffffeff
 800f42c:	fffffe7f 	.word	0xfffffe7f
 800f430:	40010400 	.word	0x40010400
 800f434:	fffffdff 	.word	0xfffffdff
 800f438:	fffffd7f 	.word	0xfffffd7f

0800f43c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f43c:	0902      	lsrs	r2, r0, #4
{
 800f43e:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f440:	200a      	movs	r0, #10
 800f442:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f444:	220f      	movs	r2, #15
 800f446:	4013      	ands	r3, r2
 800f448:	18c0      	adds	r0, r0, r3
 800f44a:	b2c0      	uxtb	r0, r0
}
 800f44c:	4770      	bx	lr
	...

0800f450 <HAL_RTC_GetTime>:
{
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f454:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f456:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f458:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800f45a:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f45c:	690b      	ldr	r3, [r1, #16]
 800f45e:	045b      	lsls	r3, r3, #17
 800f460:	0c5b      	lsrs	r3, r3, #17
 800f462:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f464:	680b      	ldr	r3, [r1, #0]
 800f466:	490e      	ldr	r1, [pc, #56]	; (800f4a0 <HAL_RTC_GetTime+0x50>)
 800f468:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f46a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f46c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f46e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f470:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f472:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f474:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f476:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f478:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f47a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f47c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f47e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 800f480:	2a00      	cmp	r2, #0
 800f482:	d10a      	bne.n	800f49a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f484:	f7ff ffda 	bl	800f43c <RTC_Bcd2ToByte>
 800f488:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f48a:	0030      	movs	r0, r6
 800f48c:	f7ff ffd6 	bl	800f43c <RTC_Bcd2ToByte>
 800f490:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f492:	0028      	movs	r0, r5
 800f494:	f7ff ffd2 	bl	800f43c <RTC_Bcd2ToByte>
 800f498:	70a0      	strb	r0, [r4, #2]
}
 800f49a:	2000      	movs	r0, #0
 800f49c:	bd70      	pop	{r4, r5, r6, pc}
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	007f7f7f 	.word	0x007f7f7f

0800f4a4 <HAL_RTC_GetDate>:
{
 800f4a4:	b570      	push	{r4, r5, r6, lr}
 800f4a6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f4a8:	6803      	ldr	r3, [r0, #0]
 800f4aa:	490e      	ldr	r1, [pc, #56]	; (800f4e4 <HAL_RTC_GetDate+0x40>)
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f4b0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f4b2:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f4b4:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f4b6:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f4b8:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f4ba:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f4bc:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f4be:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f4c0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f4c2:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	d10a      	bne.n	800f4de <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f4c8:	f7ff ffb8 	bl	800f43c <RTC_Bcd2ToByte>
 800f4cc:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f4ce:	0028      	movs	r0, r5
 800f4d0:	f7ff ffb4 	bl	800f43c <RTC_Bcd2ToByte>
 800f4d4:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f4d6:	0030      	movs	r0, r6
 800f4d8:	f7ff ffb0 	bl	800f43c <RTC_Bcd2ToByte>
 800f4dc:	70a0      	strb	r0, [r4, #2]
}
 800f4de:	2000      	movs	r0, #0
 800f4e0:	bd70      	pop	{r4, r5, r6, pc}
 800f4e2:	46c0      	nop			; (mov r8, r8)
 800f4e4:	00ffff3f 	.word	0x00ffff3f

0800f4e8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f4e8:	2302      	movs	r3, #2
{
 800f4ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ec:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800f4ee:	1c46      	adds	r6, r0, #1
{
 800f4f0:	9101      	str	r1, [sp, #4]
 800f4f2:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(hrtc);
 800f4f4:	7ff2      	ldrb	r2, [r6, #31]
{
 800f4f6:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800f4f8:	0018      	movs	r0, r3
 800f4fa:	2a01      	cmp	r2, #1
 800f4fc:	d05a      	beq.n	800f5b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 800f4fe:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f500:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 800f502:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f504:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f506:	6823      	ldr	r3, [r4, #0]
 800f508:	32c9      	adds	r2, #201	; 0xc9
 800f50a:	625a      	str	r2, [r3, #36]	; 0x24
 800f50c:	3a77      	subs	r2, #119	; 0x77
 800f50e:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	055b      	lsls	r3, r3, #21
 800f514:	d438      	bmi.n	800f588 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f516:	6823      	ldr	r3, [r4, #0]
 800f518:	492f      	ldr	r1, [pc, #188]	; (800f5d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 800f51a:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f51c:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f51e:	400a      	ands	r2, r1
 800f520:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800f522:	68d9      	ldr	r1, [r3, #12]
 800f524:	4a2d      	ldr	r2, [pc, #180]	; (800f5dc <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800f526:	b2c9      	uxtb	r1, r1
 800f528:	430a      	orrs	r2, r1
 800f52a:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800f52c:	f7fd f8b6 	bl	800c69c <HAL_GetTick>
 800f530:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	68da      	ldr	r2, [r3, #12]
 800f536:	0011      	movs	r1, r2
 800f538:	4029      	ands	r1, r5
 800f53a:	9103      	str	r1, [sp, #12]
 800f53c:	422a      	tst	r2, r5
 800f53e:	d03b      	beq.n	800f5b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f540:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800f542:	9a01      	ldr	r2, [sp, #4]
 800f544:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f546:	689a      	ldr	r2, [r3, #8]
 800f548:	438a      	bics	r2, r1
 800f54a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f54c:	689a      	ldr	r2, [r3, #8]
 800f54e:	9902      	ldr	r1, [sp, #8]
 800f550:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800f552:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f554:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800f556:	4a22      	ldr	r2, [pc, #136]	; (800f5e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 800f558:	0349      	lsls	r1, r1, #13
 800f55a:	6810      	ldr	r0, [r2, #0]
 800f55c:	4308      	orrs	r0, r1
 800f55e:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800f560:	6890      	ldr	r0, [r2, #8]
 800f562:	4301      	orrs	r1, r0
 800f564:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800f566:	2280      	movs	r2, #128	; 0x80
 800f568:	6899      	ldr	r1, [r3, #8]
 800f56a:	01d2      	lsls	r2, r2, #7
 800f56c:	430a      	orrs	r2, r1
 800f56e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800f570:	2280      	movs	r2, #128	; 0x80
 800f572:	6899      	ldr	r1, [r3, #8]
 800f574:	00d2      	lsls	r2, r2, #3
 800f576:	430a      	orrs	r2, r1
 800f578:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f57a:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f57c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f57e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f580:	2301      	movs	r3, #1
 800f582:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 800f584:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 800f586:	e015      	b.n	800f5b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    tickstart = HAL_GetTick();
 800f588:	f7fd f888 	bl	800c69c <HAL_GetTick>
 800f58c:	0005      	movs	r5, r0
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f58e:	2204      	movs	r2, #4
 800f590:	6823      	ldr	r3, [r4, #0]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	4213      	tst	r3, r2
 800f596:	d0be      	beq.n	800f516 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f598:	f7fd f880 	bl	800c69c <HAL_GetTick>
 800f59c:	23fa      	movs	r3, #250	; 0xfa
 800f59e:	1b40      	subs	r0, r0, r5
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4298      	cmp	r0, r3
 800f5a4:	d9f3      	bls.n	800f58e <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5a6:	22ff      	movs	r2, #255	; 0xff
 800f5a8:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f5aa:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5ac:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800f5ae:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f5b0:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 800f5b2:	77f3      	strb	r3, [r6, #31]
}
 800f5b4:	b005      	add	sp, #20
 800f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f5b8:	f7fd f870 	bl	800c69c <HAL_GetTick>
 800f5bc:	9b00      	ldr	r3, [sp, #0]
 800f5be:	1ac0      	subs	r0, r0, r3
 800f5c0:	23fa      	movs	r3, #250	; 0xfa
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4298      	cmp	r0, r3
 800f5c6:	d9b4      	bls.n	800f532 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5c8:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f5ca:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5cc:	6823      	ldr	r3, [r4, #0]
 800f5ce:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800f5d0:	9b03      	ldr	r3, [sp, #12]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f5d2:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 800f5d4:	e7ed      	b.n	800f5b2 <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	fffffbff 	.word	0xfffffbff
 800f5dc:	fffffb7f 	.word	0xfffffb7f
 800f5e0:	40010400 	.word	0x40010400

0800f5e4 <HAL_RTCEx_DeactivateWakeUpTimer>:
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f5e4:	2302      	movs	r3, #2
{
 800f5e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800f5e8:	1c45      	adds	r5, r0, #1
 800f5ea:	7fea      	ldrb	r2, [r5, #31]
{
 800f5ec:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	2a01      	cmp	r2, #1
 800f5f2:	d031      	beq.n	800f658 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
 800f5f4:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f5f6:	18e6      	adds	r6, r4, r3
  __HAL_LOCK(hrtc);
 800f5f8:	77ea      	strb	r2, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f5fa:	77f3      	strb	r3, [r6, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	32c9      	adds	r2, #201	; 0xc9
 800f600:	625a      	str	r2, [r3, #36]	; 0x24
 800f602:	3a77      	subs	r2, #119	; 0x77
 800f604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f606:	689a      	ldr	r2, [r3, #8]
 800f608:	4914      	ldr	r1, [pc, #80]	; (800f65c <HAL_RTCEx_DeactivateWakeUpTimer+0x78>)
  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);

  tickstart = HAL_GetTick();
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f60a:	2704      	movs	r7, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f60c:	400a      	ands	r2, r1
 800f60e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800f610:	689a      	ldr	r2, [r3, #8]
 800f612:	4913      	ldr	r1, [pc, #76]	; (800f660 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>)
 800f614:	400a      	ands	r2, r1
 800f616:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800f618:	f7fd f840 	bl	800c69c <HAL_GetTick>
 800f61c:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	68da      	ldr	r2, [r3, #12]
 800f622:	0011      	movs	r1, r2
 800f624:	4039      	ands	r1, r7
 800f626:	9101      	str	r1, [sp, #4]
 800f628:	423a      	tst	r2, r7
 800f62a:	d006      	beq.n	800f63a <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f62c:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f62e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f630:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f632:	2301      	movs	r3, #1
 800f634:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800f636:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
 800f638:	e00e      	b.n	800f658 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f63a:	f7fd f82f 	bl	800c69c <HAL_GetTick>
 800f63e:	9b00      	ldr	r3, [sp, #0]
 800f640:	1ac0      	subs	r0, r0, r3
 800f642:	23fa      	movs	r3, #250	; 0xfa
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	4298      	cmp	r0, r3
 800f648:	d9e9      	bls.n	800f61e <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f64a:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f64c:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800f652:	9b01      	ldr	r3, [sp, #4]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f654:	77f0      	strb	r0, [r6, #31]
      __HAL_UNLOCK(hrtc);
 800f656:	77eb      	strb	r3, [r5, #31]
}
 800f658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f65a:	46c0      	nop			; (mov r8, r8)
 800f65c:	fffffbff 	.word	0xfffffbff
 800f660:	ffffbfff 	.word	0xffffbfff

0800f664 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800f664:	6803      	ldr	r3, [r0, #0]
{
 800f666:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800f668:	68db      	ldr	r3, [r3, #12]
{
 800f66a:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800f66c:	055b      	lsls	r3, r3, #21
 800f66e:	d507      	bpl.n	800f680 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800f670:	f002 fc6a 	bl	8011f48 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800f674:	6821      	ldr	r1, [r4, #0]
 800f676:	4b06      	ldr	r3, [pc, #24]	; (800f690 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 800f678:	68ca      	ldr	r2, [r1, #12]
 800f67a:	b2d2      	uxtb	r2, r2
 800f67c:	4313      	orrs	r3, r2
 800f67e:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800f680:	2280      	movs	r2, #128	; 0x80
 800f682:	4b04      	ldr	r3, [pc, #16]	; (800f694 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800f684:	0352      	lsls	r2, r2, #13
 800f686:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f688:	2301      	movs	r3, #1
 800f68a:	3402      	adds	r4, #2
 800f68c:	77e3      	strb	r3, [r4, #31]
}
 800f68e:	bd10      	pop	{r4, pc}
 800f690:	fffffb7f 	.word	0xfffffb7f
 800f694:	40010400 	.word	0x40010400

0800f698 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f698:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800f69a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f69c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800f69e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800f6a0:	600a      	str	r2, [r1, #0]
}
 800f6a2:	4770      	bx	lr

0800f6a4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f6a4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800f6a6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800f6a8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800f6aa:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800f6ac:	6808      	ldr	r0, [r1, #0]
}
 800f6ae:	4770      	bx	lr

0800f6b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b2:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 800f6b4:	2001      	movs	r0, #1
  if (hspi == NULL)
 800f6b6:	2c00      	cmp	r4, #0
 800f6b8:	d054      	beq.n	800f764 <HAL_SPI_Init+0xb4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f6ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d152      	bne.n	800f766 <HAL_SPI_Init+0xb6>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f6c0:	2282      	movs	r2, #130	; 0x82
 800f6c2:	6861      	ldr	r1, [r4, #4]
 800f6c4:	0052      	lsls	r2, r2, #1
 800f6c6:	4291      	cmp	r1, r2
 800f6c8:	d000      	beq.n	800f6cc <HAL_SPI_Init+0x1c>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f6ca:	61e3      	str	r3, [r4, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6cc:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6ce:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6d0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6d2:	3551      	adds	r5, #81	; 0x51
 800f6d4:	782b      	ldrb	r3, [r5, #0]
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d105      	bne.n	800f6e8 <HAL_SPI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f6dc:	0023      	movs	r3, r4
 800f6de:	3350      	adds	r3, #80	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f6e0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800f6e2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800f6e4:	f004 fd52 	bl	801418c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f6e8:	2002      	movs	r0, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6ea:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800f6ec:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800f6ee:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f6f0:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800f6f2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f6f4:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800f6f6:	4393      	bics	r3, r2
 800f6f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f6fa:	2382      	movs	r3, #130	; 0x82
 800f6fc:	005b      	lsls	r3, r3, #1
 800f6fe:	4033      	ands	r3, r6
 800f700:	2684      	movs	r6, #132	; 0x84
 800f702:	0236      	lsls	r6, r6, #8
 800f704:	403e      	ands	r6, r7
 800f706:	4333      	orrs	r3, r6
 800f708:	2680      	movs	r6, #128	; 0x80
 800f70a:	68e7      	ldr	r7, [r4, #12]
 800f70c:	0136      	lsls	r6, r6, #4
 800f70e:	403e      	ands	r6, r7
 800f710:	4333      	orrs	r3, r6
 800f712:	6926      	ldr	r6, [r4, #16]
 800f714:	69a2      	ldr	r2, [r4, #24]
 800f716:	4030      	ands	r0, r6
 800f718:	2601      	movs	r6, #1
 800f71a:	4303      	orrs	r3, r0
 800f71c:	6960      	ldr	r0, [r4, #20]
 800f71e:	69e7      	ldr	r7, [r4, #28]
 800f720:	4030      	ands	r0, r6
 800f722:	4303      	orrs	r3, r0
 800f724:	2080      	movs	r0, #128	; 0x80
 800f726:	0080      	lsls	r0, r0, #2
 800f728:	4010      	ands	r0, r2
 800f72a:	4303      	orrs	r3, r0
 800f72c:	2038      	movs	r0, #56	; 0x38
 800f72e:	4038      	ands	r0, r7
 800f730:	4303      	orrs	r3, r0
 800f732:	2080      	movs	r0, #128	; 0x80
 800f734:	6a27      	ldr	r7, [r4, #32]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f736:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f738:	4038      	ands	r0, r7
 800f73a:	4303      	orrs	r3, r0
 800f73c:	2080      	movs	r0, #128	; 0x80
 800f73e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f740:	0180      	lsls	r0, r0, #6
 800f742:	4038      	ands	r0, r7
 800f744:	4303      	orrs	r3, r0
 800f746:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f748:	2304      	movs	r3, #4
 800f74a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f74c:	401a      	ands	r2, r3
 800f74e:	330c      	adds	r3, #12
 800f750:	4003      	ands	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f752:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f754:	431a      	orrs	r2, r3
 800f756:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f758:	69cb      	ldr	r3, [r1, #28]
 800f75a:	4a05      	ldr	r2, [pc, #20]	; (800f770 <HAL_SPI_Init+0xc0>)
 800f75c:	4013      	ands	r3, r2
 800f75e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f760:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f762:	702e      	strb	r6, [r5, #0]

  return HAL_OK;
}
 800f764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f766:	2300      	movs	r3, #0
 800f768:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f76a:	6163      	str	r3, [r4, #20]
 800f76c:	e7ae      	b.n	800f6cc <HAL_SPI_Init+0x1c>
 800f76e:	46c0      	nop			; (mov r8, r8)
 800f770:	fffff7ff 	.word	0xfffff7ff

0800f774 <HAL_SPI_ErrorCallback>:
 800f774:	4770      	bx	lr
	...

0800f778 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 800f778:	6803      	ldr	r3, [r0, #0]
{
 800f77a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f77c:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800f77e:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800f780:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f782:	2501      	movs	r5, #1
 800f784:	0991      	lsrs	r1, r2, #6
 800f786:	000f      	movs	r7, r1
{
 800f788:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f78a:	402f      	ands	r7, r5
 800f78c:	4229      	tst	r1, r5
 800f78e:	d109      	bne.n	800f7a4 <HAL_SPI_IRQHandler+0x2c>
 800f790:	422a      	tst	r2, r5
 800f792:	d007      	beq.n	800f7a4 <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f794:	0986      	lsrs	r6, r0, #6
 800f796:	422e      	tst	r6, r5
 800f798:	d004      	beq.n	800f7a4 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->RxISR(hspi);
 800f79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 800f79c:	0020      	movs	r0, r4
 800f79e:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 800f7a0:	b005      	add	sp, #20
 800f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f7a4:	2501      	movs	r5, #1
 800f7a6:	0796      	lsls	r6, r2, #30
 800f7a8:	d504      	bpl.n	800f7b4 <HAL_SPI_IRQHandler+0x3c>
 800f7aa:	09c6      	lsrs	r6, r0, #7
 800f7ac:	422e      	tst	r6, r5
 800f7ae:	d001      	beq.n	800f7b4 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 800f7b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7b2:	e7f3      	b.n	800f79c <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f7b4:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f7b6:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f7b8:	4331      	orrs	r1, r6
 800f7ba:	0a12      	lsrs	r2, r2, #8
 800f7bc:	402a      	ands	r2, r5
 800f7be:	4029      	ands	r1, r5
 800f7c0:	4311      	orrs	r1, r2
 800f7c2:	d0ed      	beq.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
 800f7c4:	0941      	lsrs	r1, r0, #5
 800f7c6:	4229      	tst	r1, r5
 800f7c8:	d0ea      	beq.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f7ca:	2f00      	cmp	r7, #0
 800f7cc:	d00f      	beq.n	800f7ee <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f7ce:	0021      	movs	r1, r4
 800f7d0:	3151      	adds	r1, #81	; 0x51
 800f7d2:	7809      	ldrb	r1, [r1, #0]
 800f7d4:	2903      	cmp	r1, #3
 800f7d6:	d050      	beq.n	800f87a <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f7d8:	2104      	movs	r1, #4
 800f7da:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800f7dc:	4329      	orrs	r1, r5
 800f7de:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	9100      	str	r1, [sp, #0]
 800f7e4:	68d9      	ldr	r1, [r3, #12]
 800f7e6:	9100      	str	r1, [sp, #0]
 800f7e8:	6899      	ldr	r1, [r3, #8]
 800f7ea:	9100      	str	r1, [sp, #0]
 800f7ec:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f7ee:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f7f0:	420e      	tst	r6, r1
 800f7f2:	d00b      	beq.n	800f80c <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f7f4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800f7f6:	4329      	orrs	r1, r5
 800f7f8:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	2540      	movs	r5, #64	; 0x40
 800f7fe:	9102      	str	r1, [sp, #8]
 800f800:	6899      	ldr	r1, [r3, #8]
 800f802:	9102      	str	r1, [sp, #8]
 800f804:	6819      	ldr	r1, [r3, #0]
 800f806:	43a9      	bics	r1, r5
 800f808:	6019      	str	r1, [r3, #0]
 800f80a:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f80c:	2a00      	cmp	r2, #0
 800f80e:	d008      	beq.n	800f822 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f810:	2208      	movs	r2, #8
 800f812:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f814:	430a      	orrs	r2, r1
 800f816:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f818:	2200      	movs	r2, #0
 800f81a:	9203      	str	r2, [sp, #12]
 800f81c:	689a      	ldr	r2, [r3, #8]
 800f81e:	9203      	str	r2, [sp, #12]
 800f820:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f822:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f824:	2a00      	cmp	r2, #0
 800f826:	d0bb      	beq.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f828:	21e0      	movs	r1, #224	; 0xe0
 800f82a:	685a      	ldr	r2, [r3, #4]
 800f82c:	438a      	bics	r2, r1
 800f82e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800f830:	0022      	movs	r2, r4
 800f832:	39df      	subs	r1, #223	; 0xdf
 800f834:	3251      	adds	r2, #81	; 0x51
 800f836:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f838:	3102      	adds	r1, #2
 800f83a:	4208      	tst	r0, r1
 800f83c:	d025      	beq.n	800f88a <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f83e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800f840:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f842:	438a      	bics	r2, r1
 800f844:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800f846:	2800      	cmp	r0, #0
 800f848:	d009      	beq.n	800f85e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f84a:	4b12      	ldr	r3, [pc, #72]	; (800f894 <HAL_SPI_IRQHandler+0x11c>)
 800f84c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f84e:	f7fd fb6b 	bl	800cf28 <HAL_DMA_Abort_IT>
 800f852:	2800      	cmp	r0, #0
 800f854:	d003      	beq.n	800f85e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f856:	2340      	movs	r3, #64	; 0x40
 800f858:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f85a:	4313      	orrs	r3, r2
 800f85c:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f85e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f860:	2800      	cmp	r0, #0
 800f862:	d09d      	beq.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f864:	4b0b      	ldr	r3, [pc, #44]	; (800f894 <HAL_SPI_IRQHandler+0x11c>)
 800f866:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f868:	f7fd fb5e 	bl	800cf28 <HAL_DMA_Abort_IT>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	d097      	beq.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f870:	2340      	movs	r3, #64	; 0x40
 800f872:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f874:	4313      	orrs	r3, r2
 800f876:	6563      	str	r3, [r4, #84]	; 0x54
 800f878:	e792      	b.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f87a:	2200      	movs	r2, #0
 800f87c:	9201      	str	r2, [sp, #4]
 800f87e:	68da      	ldr	r2, [r3, #12]
 800f880:	9201      	str	r2, [sp, #4]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	9301      	str	r3, [sp, #4]
 800f886:	9b01      	ldr	r3, [sp, #4]
        return;
 800f888:	e78a      	b.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 800f88a:	0020      	movs	r0, r4
 800f88c:	f7ff ff72 	bl	800f774 <HAL_SPI_ErrorCallback>
 800f890:	e786      	b.n	800f7a0 <HAL_SPI_IRQHandler+0x28>
 800f892:	46c0      	nop			; (mov r8, r8)
 800f894:	0800f899 	.word	0x0800f899

0800f898 <SPI_DMAAbortOnError>:
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 800f898:	2300      	movs	r3, #0
{
 800f89a:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f89c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800f89e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f8a0:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f8a2:	f7ff ff67 	bl	800f774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f8a6:	bd10      	pop	{r4, pc}

0800f8a8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800f8a8:	b573      	push	{r0, r1, r4, r5, r6, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f8aa:	2608      	movs	r6, #8
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	0032      	movs	r2, r6
 800f8b0:	4668      	mov	r0, sp
 800f8b2:	f006 fba4 	bl	8015ffe <memset>
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800f8b6:	2307      	movs	r3, #7
  hadc.Init.OversamplingMode = DISABLE;
 800f8b8:	4c17      	ldr	r4, [pc, #92]	; (800f918 <MX_ADC_Init+0x70>)
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f8ba:	2580      	movs	r5, #128	; 0x80
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800f8bc:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f8be:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.DMAContinuousRequests = ENABLE;
 800f8c0:	0021      	movs	r1, r4
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f8c2:	33ff      	adds	r3, #255	; 0xff
 800f8c4:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800f8c6:	3bc1      	subs	r3, #193	; 0xc1
 800f8c8:	3bff      	subs	r3, #255	; 0xff
 800f8ca:	312c      	adds	r1, #44	; 0x2c
 800f8cc:	700b      	strb	r3, [r1, #0]
  hadc.Instance = ADC1;
 800f8ce:	4913      	ldr	r1, [pc, #76]	; (800f91c <MX_ADC_Init+0x74>)
  hadc.Init.OversamplingMode = DISABLE;
 800f8d0:	2200      	movs	r2, #0
  hadc.Instance = ADC1;
 800f8d2:	6021      	str	r1, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f8d4:	2180      	movs	r1, #128	; 0x80
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f8d6:	016d      	lsls	r5, r5, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f8d8:	0609      	lsls	r1, r1, #24
  hadc.Init.LowPowerAutoWait = ENABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800f8da:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = ENABLE;
 800f8dc:	8423      	strh	r3, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 800f8de:	63e2      	str	r2, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f8e0:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f8e2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800f8e4:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f8e6:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800f8e8:	60a2      	str	r2, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f8ea:	60e2      	str	r2, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800f8ec:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800f8ee:	6166      	str	r6, [r4, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 800f8f0:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 800f8f2:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800f8f4:	f7fc ffb4 	bl	800c860 <HAL_ADC_Init>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d001      	beq.n	800f900 <MX_ADC_Init+0x58>
  {
    Error_Handler();
 800f8fc:	f002 fb56 	bl	8011fac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800f900:	4b07      	ldr	r3, [pc, #28]	; (800f920 <MX_ADC_Init+0x78>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800f902:	4669      	mov	r1, sp
 800f904:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800f906:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800f908:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800f90a:	f7fd f955 	bl	800cbb8 <HAL_ADC_ConfigChannel>
 800f90e:	2800      	cmp	r0, #0
 800f910:	d001      	beq.n	800f916 <MX_ADC_Init+0x6e>
  {
    Error_Handler();
 800f912:	f002 fb4b 	bl	8011fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800f916:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800f918:	20001784 	.word	0x20001784
 800f91c:	40012400 	.word	0x40012400
 800f920:	44020000 	.word	0x44020000

0800f924 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 800f924:	4b13      	ldr	r3, [pc, #76]	; (800f974 <HAL_ADC_MspInit+0x50>)
 800f926:	6802      	ldr	r2, [r0, #0]
{
 800f928:	b570      	push	{r4, r5, r6, lr}
 800f92a:	0005      	movs	r5, r0
  if(adcHandle->Instance==ADC1)
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d11f      	bne.n	800f970 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f930:	2380      	movs	r3, #128	; 0x80
 800f932:	4a11      	ldr	r2, [pc, #68]	; (800f978 <HAL_ADC_MspInit+0x54>)
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	6b51      	ldr	r1, [r2, #52]	; 0x34

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800f938:	4c10      	ldr	r4, [pc, #64]	; (800f97c <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f93a:	430b      	orrs	r3, r1
 800f93c:	6353      	str	r3, [r2, #52]	; 0x34
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800f93e:	2280      	movs	r2, #128	; 0x80
 800f940:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f942:	1892      	adds	r2, r2, r2
 800f944:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f946:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 800f948:	4b0d      	ldr	r3, [pc, #52]	; (800f980 <HAL_ADC_MspInit+0x5c>)
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f94a:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 800f94c:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f94e:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800f950:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800f952:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800f954:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800f956:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f958:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800f95a:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800f95c:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800f95e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800f960:	f7fd fa3e 	bl	800cde0 <HAL_DMA_Init>
 800f964:	2800      	cmp	r0, #0
 800f966:	d001      	beq.n	800f96c <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800f968:	f002 fb20 	bl	8011fac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800f96c:	64ec      	str	r4, [r5, #76]	; 0x4c
 800f96e:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800f970:	bd70      	pop	{r4, r5, r6, pc}
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	40012400 	.word	0x40012400
 800f978:	40021000 	.word	0x40021000
 800f97c:	200017e0 	.word	0x200017e0
 800f980:	40020008 	.word	0x40020008

0800f984 <hal_delay_ms>:

void atca_delay_10us(uint32_t delay) {
  HAL_Delay(delay / 100);
}

void atca_delay_ms(uint32_t delay) {
 800f984:	b510      	push	{r4, lr}
  HAL_Delay(delay);
 800f986:	f7fc fe8f 	bl	800c6a8 <HAL_Delay>
}
 800f98a:	bd10      	pop	{r4, pc}

0800f98c <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 800f98c:	b570      	push	{r4, r5, r6, lr}
    if (mbed_i2c_hal_first_init) {
 800f98e:	4e15      	ldr	r6, [pc, #84]	; (800f9e4 <hal_i2c_init+0x58>)
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 800f990:	0005      	movs	r5, r0
    if (mbed_i2c_hal_first_init) {
 800f992:	7833      	ldrb	r3, [r6, #0]
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 800f994:	000c      	movs	r4, r1
    if (mbed_i2c_hal_first_init) {
 800f996:	2b00      	cmp	r3, #0
 800f998:	d006      	beq.n	800f9a8 <hal_i2c_init+0x1c>
       // mbed_i2c = new I2C(MBED_CONF_CRYPTOAUTHLIB_I2C_SDA, MBED_CONF_CRYPTOAUTHLIB_I2C_SCL);
    	HAL_I2C_MspInit(&hi2c1);
 800f99a:	4813      	ldr	r0, [pc, #76]	; (800f9e8 <hal_i2c_init+0x5c>)
 800f99c:	f001 f98c 	bl	8010cb8 <HAL_I2C_MspInit>
        for (size_t ix = 0; ix < ATAC_HAL_MBED_MAX_I2C; ix++) {
            mbed_i2c_hal_data[ix].active = false;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	4a12      	ldr	r2, [pc, #72]	; (800f9ec <hal_i2c_init+0x60>)
        }
        mbed_i2c_hal_first_init = false;
 800f9a4:	7033      	strb	r3, [r6, #0]
            mbed_i2c_hal_data[ix].active = false;
 800f9a6:	7013      	strb	r3, [r2, #0]
    }

    if (cfg->iface_type != ATCA_I2C_IFACE) {
 800f9a8:	7820      	ldrb	r0, [r4, #0]
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d118      	bne.n	800f9e0 <hal_i2c_init+0x54>
    }

    // OK... Let's find an unused item...
    mbed_i2c_hal_data_t *hal_data = NULL;
    for (size_t ix = 0; ix < ATAC_HAL_MBED_MAX_I2C; ix++) {
        if (!mbed_i2c_hal_data[ix].active) {
 800f9ae:	4b0f      	ldr	r3, [pc, #60]	; (800f9ec <hal_i2c_init+0x60>)
 800f9b0:	781a      	ldrb	r2, [r3, #0]
 800f9b2:	2a00      	cmp	r2, #0
 800f9b4:	d004      	beq.n	800f9c0 <hal_i2c_init+0x34>
            break;
        }
    }

    if (!hal_data) {
    	DBG_PRINTF("Could not find unallocated mbed_i2c_hal_data_t structure");
 800f9b6:	490e      	ldr	r1, [pc, #56]	; (800f9f0 <hal_i2c_init+0x64>)
 800f9b8:	f7fc faed 	bl	800bf96 <SEGGER_RTT_printf>
        return ATCA_ALLOC_FAILURE;
 800f9bc:	20fb      	movs	r0, #251	; 0xfb
    hal_data->i2c = I2C1;

    ((ATCAHAL_t*)hal)->hal_data = hal_data;

    return ATCA_SUCCESS;
}
 800f9be:	bd70      	pop	{r4, r5, r6, pc}
    hal_data->active = true;
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	701a      	strb	r2, [r3, #0]
	hal_data->slave_address = cfg->atcai2c.slave_address;
 800f9c4:	7922      	ldrb	r2, [r4, #4]
 800f9c6:	705a      	strb	r2, [r3, #1]
    hal_data->bus = cfg->atcai2c.bus;
 800f9c8:	7962      	ldrb	r2, [r4, #5]
 800f9ca:	709a      	strb	r2, [r3, #2]
    hal_data->baud = cfg->atcai2c.baud;
 800f9cc:	68a2      	ldr	r2, [r4, #8]
 800f9ce:	605a      	str	r2, [r3, #4]
    hal_data->wake_delay = cfg->wake_delay;
 800f9d0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800f9d2:	811a      	strh	r2, [r3, #8]
    hal_data->rx_retries = cfg->rx_retries;
 800f9d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ((ATCAHAL_t*)hal)->hal_data = hal_data;
 800f9d6:	622b      	str	r3, [r5, #32]
    hal_data->rx_retries = cfg->rx_retries;
 800f9d8:	60da      	str	r2, [r3, #12]
    hal_data->i2c = I2C1;
 800f9da:	4a06      	ldr	r2, [pc, #24]	; (800f9f4 <hal_i2c_init+0x68>)
 800f9dc:	611a      	str	r2, [r3, #16]
    return ATCA_SUCCESS;
 800f9de:	e7ee      	b.n	800f9be <hal_i2c_init+0x32>
        return ATCA_BAD_PARAM;
 800f9e0:	20e2      	movs	r0, #226	; 0xe2
 800f9e2:	e7ec      	b.n	800f9be <hal_i2c_init+0x32>
 800f9e4:	200000dc 	.word	0x200000dc
 800f9e8:	20001898 	.word	0x20001898
 800f9ec:	20001828 	.word	0x20001828
 800f9f0:	08019845 	.word	0x08019845
 800f9f4:	40005400 	.word	0x40005400

0800f9f8 <hal_i2c_post_init>:

ATCA_STATUS hal_i2c_post_init(ATCAIface iface) {
  return ATCA_SUCCESS;
}
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	4770      	bx	lr

0800f9fc <hal_i2c_send>:
 * \param[in] iface     instance
 * \param[in] txdata    pointer to space to bytes to send
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t word_address, uint8_t *txdata, int txlength) {
 800f9fc:	b507      	push	{r0, r1, r2, lr}
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x3;    // insert the Word Address Value, Command token
 800f9fe:	2103      	movs	r1, #3
    txlength++;         // account for word address value byte.
 800fa00:	3301      	adds	r3, #1
    txdata[0] = 0x3;    // insert the Word Address Value, Command token
 800fa02:	7011      	strb	r1, [r2, #0]

//    int r = hal_data->i2c->write(hal_data->slave_address, (char*)txdata, txlength);
      int r;
    r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, txdata, txlength, 100);
 800fa04:	3161      	adds	r1, #97	; 0x61
 800fa06:	9100      	str	r1, [sp, #0]
 800fa08:	4804      	ldr	r0, [pc, #16]	; (800fa1c <hal_i2c_send+0x20>)
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	315c      	adds	r1, #92	; 0x5c
 800fa0e:	f7fd fed1 	bl	800d7b4 <HAL_I2C_Master_Transmit>
//    DBG_PRINTF("hal_i2c_send returned %x", r);
    if (r != 0) {
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d000      	beq.n	800fa18 <hal_i2c_send+0x1c>
        return ATCA_TX_FAIL;
 800fa16:	20f7      	movs	r0, #247	; 0xf7
    }
    return ATCA_SUCCESS;
}
 800fa18:	bd0e      	pop	{r1, r2, r3, pc}
 800fa1a:	46c0      	nop			; (mov r8, r8)
 800fa1c:	20001898 	.word	0x20001898

0800fa20 <hal_i2c_receive>:

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 800fa20:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);
 800fa22:	6a46      	ldr	r6, [r0, #36]	; 0x24
    // read procedure is:
    // 1. read 1 byte, this will be the length of the package
    // 2. read the rest of the package

    uint8_t lengthPackage[1] = { 0 };
    int r = -1;
 800fa24:	2001      	movs	r0, #1
    int retries = hal_data->rx_retries;
    while (--retries > 0 && r != 0) {
        //r = hal_data->i2c->read(hal_data->slave_address, lengthPackage, 1);
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, lengthPackage, 1, 100);
 800fa26:	2764      	movs	r7, #100	; 0x64
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 800fa28:	b087      	sub	sp, #28
 800fa2a:	9303      	str	r3, [sp, #12]
    uint8_t lengthPackage[1] = { 0 };
 800fa2c:	4b23      	ldr	r3, [pc, #140]	; (800fabc <hal_i2c_receive+0x9c>)
 800fa2e:	ad05      	add	r5, sp, #20
 800fa30:	781b      	ldrb	r3, [r3, #0]
    int retries = hal_data->rx_retries;
 800fa32:	68f4      	ldr	r4, [r6, #12]
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 800fa34:	9202      	str	r2, [sp, #8]
    uint8_t lengthPackage[1] = { 0 };
 800fa36:	702b      	strb	r3, [r5, #0]
    int r = -1;
 800fa38:	4240      	negs	r0, r0
    while (--retries > 0 && r != 0) {
 800fa3a:	3c01      	subs	r4, #1
 800fa3c:	2c00      	cmp	r4, #0
 800fa3e:	dd17      	ble.n	800fa70 <hal_i2c_receive+0x50>
 800fa40:	2800      	cmp	r0, #0
 800fa42:	d10d      	bne.n	800fa60 <hal_i2c_receive+0x40>

    if (r != 0) {
        return ATCA_RX_TIMEOUT;
    }

    uint8_t bytesToRead = lengthPackage[0] - 1;
 800fa44:	782f      	ldrb	r7, [r5, #0]

    if (bytesToRead > *rxlength) {
 800fa46:	9b03      	ldr	r3, [sp, #12]
    uint8_t bytesToRead = lengthPackage[0] - 1;
 800fa48:	1e7c      	subs	r4, r7, #1
    if (bytesToRead > *rxlength) {
 800fa4a:	881b      	ldrh	r3, [r3, #0]
    uint8_t bytesToRead = lengthPackage[0] - 1;
 800fa4c:	b2e2      	uxtb	r2, r4
    if (bytesToRead > *rxlength) {
 800fa4e:	b2e4      	uxtb	r4, r4
 800fa50:	429c      	cmp	r4, r3
 800fa52:	d912      	bls.n	800fa7a <hal_i2c_receive+0x5a>
    	DBG_PRINTF("hal_i2c_receive buffer too small, requested %u, but have %u", bytesToRead, *rxlength);
 800fa54:	2000      	movs	r0, #0
 800fa56:	491a      	ldr	r1, [pc, #104]	; (800fac0 <hal_i2c_receive+0xa0>)
 800fa58:	f7fc fa9d 	bl	800bf96 <SEGGER_RTT_printf>
        return ATCA_SMALL_BUFFER;
 800fa5c:	20ed      	movs	r0, #237	; 0xed
 800fa5e:	e00a      	b.n	800fa76 <hal_i2c_receive+0x56>
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, lengthPackage, 1, 100);
 800fa60:	2301      	movs	r3, #1
 800fa62:	002a      	movs	r2, r5
 800fa64:	21c0      	movs	r1, #192	; 0xc0
 800fa66:	9700      	str	r7, [sp, #0]
 800fa68:	4816      	ldr	r0, [pc, #88]	; (800fac4 <hal_i2c_receive+0xa4>)
 800fa6a:	f7fd ff35 	bl	800d8d8 <HAL_I2C_Master_Receive>
 800fa6e:	e7e4      	b.n	800fa3a <hal_i2c_receive+0x1a>
    if (r != 0) {
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d0e7      	beq.n	800fa44 <hal_i2c_receive+0x24>
        return ATCA_RX_TIMEOUT;
 800fa74:	20eb      	movs	r0, #235	; 0xeb
    }

    *rxlength = lengthPackage[0];

    return ATCA_SUCCESS;
}
 800fa76:	b007      	add	sp, #28
 800fa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(rxdata, 0, *rxlength);
 800fa7a:	001a      	movs	r2, r3
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	9802      	ldr	r0, [sp, #8]
 800fa80:	f006 fabd 	bl	8015ffe <memset>
    rxdata[0] = lengthPackage[0];
 800fa84:	9b02      	ldr	r3, [sp, #8]
    r = -1;
 800fa86:	2001      	movs	r0, #1
    rxdata[0] = lengthPackage[0];
 800fa88:	701f      	strb	r7, [r3, #0]
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, rxdata+1, bytesToRead, 100);
 800fa8a:	2764      	movs	r7, #100	; 0x64
    retries = hal_data->rx_retries;
 800fa8c:	68f6      	ldr	r6, [r6, #12]
    r = -1;
 800fa8e:	4240      	negs	r0, r0
    while (--retries > 0 && r != 0) {
 800fa90:	3e01      	subs	r6, #1
 800fa92:	2e00      	cmp	r6, #0
 800fa94:	dd0f      	ble.n	800fab6 <hal_i2c_receive+0x96>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d104      	bne.n	800faa4 <hal_i2c_receive+0x84>
    *rxlength = lengthPackage[0];
 800fa9a:	782b      	ldrb	r3, [r5, #0]
 800fa9c:	9a03      	ldr	r2, [sp, #12]
    return ATCA_SUCCESS;
 800fa9e:	2000      	movs	r0, #0
    *rxlength = lengthPackage[0];
 800faa0:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
 800faa2:	e7e8      	b.n	800fa76 <hal_i2c_receive+0x56>
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, rxdata+1, bytesToRead, 100);
 800faa4:	9b02      	ldr	r3, [sp, #8]
 800faa6:	21c0      	movs	r1, #192	; 0xc0
 800faa8:	1c5a      	adds	r2, r3, #1
 800faaa:	9700      	str	r7, [sp, #0]
 800faac:	0023      	movs	r3, r4
 800faae:	4805      	ldr	r0, [pc, #20]	; (800fac4 <hal_i2c_receive+0xa4>)
 800fab0:	f7fd ff12 	bl	800d8d8 <HAL_I2C_Master_Receive>
 800fab4:	e7ec      	b.n	800fa90 <hal_i2c_receive+0x70>
    if (r != 0) {
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d0ef      	beq.n	800fa9a <hal_i2c_receive+0x7a>
 800faba:	e7db      	b.n	800fa74 <hal_i2c_receive+0x54>
 800fabc:	080198bd 	.word	0x080198bd
 800fac0:	0801987e 	.word	0x0801987e
 800fac4:	20001898 	.word	0x20001898

0800fac8 <hal_i2c_wake>:


ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
 800fac8:	b507      	push	{r0, r1, r2, lr}
   HAL_I2C_Master_Transmit(&hi2c1, 0x00, 0x00, 1, 100);
 800faca:	2364      	movs	r3, #100	; 0x64
 800facc:	2200      	movs	r2, #0
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	0011      	movs	r1, r2
 800fad2:	4803      	ldr	r0, [pc, #12]	; (800fae0 <hal_i2c_wake+0x18>)
 800fad4:	3b63      	subs	r3, #99	; 0x63
 800fad6:	f7fd fe6d 	bl	800d7b4 <HAL_I2C_Master_Transmit>
   return ATCA_SUCCESS;
}
 800fada:	2000      	movs	r0, #0
 800fadc:	bd0e      	pop	{r1, r2, r3, pc}
 800fade:	46c0      	nop			; (mov r8, r8)
 800fae0:	20001898 	.word	0x20001898

0800fae4 <hal_i2c_idle>:

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
 800fae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);

	 uint8_t buffer[1] = { 0x2 }; // idle word address value
 800fae6:	4b07      	ldr	r3, [pc, #28]	; (800fb04 <hal_i2c_idle+0x20>)
 800fae8:	aa03      	add	r2, sp, #12
 800faea:	781b      	ldrb	r3, [r3, #0]
	 HAL_StatusTypeDef r;
     r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800faec:	21c0      	movs	r1, #192	; 0xc0
	 uint8_t buffer[1] = { 0x2 }; // idle word address value
 800faee:	7013      	strb	r3, [r2, #0]
     r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800faf0:	2364      	movs	r3, #100	; 0x64
 800faf2:	4805      	ldr	r0, [pc, #20]	; (800fb08 <hal_i2c_idle+0x24>)
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	3b63      	subs	r3, #99	; 0x63
 800faf8:	f7fd fe5c 	bl	800d7b4 <HAL_I2C_Master_Transmit>

    return ATCA_SUCCESS;
}
 800fafc:	2000      	movs	r0, #0
 800fafe:	b005      	add	sp, #20
 800fb00:	bd00      	pop	{pc}
 800fb02:	46c0      	nop			; (mov r8, r8)
 800fb04:	080198ba 	.word	0x080198ba
 800fb08:	20001898 	.word	0x20001898

0800fb0c <hal_i2c_sleep>:

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
 800fb0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);

	uint8_t buffer[1] = { 0x1 };  // sleep word address value
 800fb0e:	4b07      	ldr	r3, [pc, #28]	; (800fb2c <hal_i2c_sleep+0x20>)
 800fb10:	aa03      	add	r2, sp, #12
 800fb12:	781b      	ldrb	r3, [r3, #0]
	HAL_StatusTypeDef r;
	r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800fb14:	21c0      	movs	r1, #192	; 0xc0
	uint8_t buffer[1] = { 0x1 };  // sleep word address value
 800fb16:	7013      	strb	r3, [r2, #0]
	r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 800fb18:	2364      	movs	r3, #100	; 0x64
 800fb1a:	4805      	ldr	r0, [pc, #20]	; (800fb30 <hal_i2c_sleep+0x24>)
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	3b63      	subs	r3, #99	; 0x63
 800fb20:	f7fd fe48 	bl	800d7b4 <HAL_I2C_Master_Transmit>

    return ATCA_SUCCESS;
}
 800fb24:	2000      	movs	r0, #0
 800fb26:	b005      	add	sp, #20
 800fb28:	bd00      	pop	{pc}
 800fb2a:	46c0      	nop			; (mov r8, r8)
 800fb2c:	080198bc 	.word	0x080198bc
 800fb30:	20001898 	.word	0x20001898

0800fb34 <hal_i2c_release>:

ATCA_STATUS hal_i2c_release(void *hal_data) {
 800fb34:	0003      	movs	r3, r0
	mbed_i2c_hal_data_t *data = (mbed_i2c_hal_data_t*)hal_data;

	    if (data->i2c) {
	        // is now static, don't delete
	    }
	    data->active = false;
 800fb36:	2000      	movs	r0, #0
 800fb38:	7018      	strb	r0, [r3, #0]

    return ATCA_SUCCESS;
}
 800fb3a:	4770      	bx	lr

0800fb3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800fb3c:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fb3e:	2001      	movs	r0, #1
 800fb40:	4a0c      	ldr	r2, [pc, #48]	; (800fb74 <MX_DMA_Init+0x38>)
 800fb42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fb44:	4301      	orrs	r1, r0
 800fb46:	6311      	str	r1, [r2, #48]	; 0x30
 800fb48:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fb4a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fb4c:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fb4e:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fb50:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fb52:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fb54:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800fb56:	f7fd f8d7 	bl	800cd08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800fb5a:	2009      	movs	r0, #9
 800fb5c:	f7fd f8fe 	bl	800cd5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800fb60:	2200      	movs	r2, #0
 800fb62:	200a      	movs	r0, #10
 800fb64:	0011      	movs	r1, r2
 800fb66:	f7fd f8cf 	bl	800cd08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800fb6a:	200a      	movs	r0, #10
 800fb6c:	f7fd f8f6 	bl	800cd5c <HAL_NVIC_EnableIRQ>

}
 800fb70:	bd07      	pop	{r0, r1, r2, pc}
 800fb72:	46c0      	nop			; (mov r8, r8)
 800fb74:	40021000 	.word	0x40021000

0800fb78 <DebugArr>:
  .useSensor.sfh7776 = false,

#endif
};

static void DebugArr(const void *buf, size_t len) {
 800fb78:	b570      	push	{r4, r5, r6, lr}
 800fb7a:	0004      	movs	r4, r0
 800fb7c:	1845      	adds	r5, r0, r1
  for(size_t i = 0; i < len; i++) {
    DEBUG_PRINTF("%02x ", ((const uint8_t *)buf)[i]);
 800fb7e:	7822      	ldrb	r2, [r4, #0]
 800fb80:	2000      	movs	r0, #0
 800fb82:	4903      	ldr	r1, [pc, #12]	; (800fb90 <DebugArr+0x18>)
  for(size_t i = 0; i < len; i++) {
 800fb84:	3401      	adds	r4, #1
    DEBUG_PRINTF("%02x ", ((const uint8_t *)buf)[i]);
 800fb86:	f7fc fa06 	bl	800bf96 <SEGGER_RTT_printf>
  for(size_t i = 0; i < len; i++) {
 800fb8a:	42ac      	cmp	r4, r5
 800fb8c:	d1f7      	bne.n	800fb7e <DebugArr+0x6>
  }
}
 800fb8e:	bd70      	pop	{r4, r5, r6, pc}
 800fb90:	080198be 	.word	0x080198be

0800fb94 <DebugLE>:

static void DebugLE(const uint8_t *buf, uint16_t len) {
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	0005      	movs	r5, r0
  if(len) do {
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	d00b      	beq.n	800fbb4 <DebugLE+0x20>
 800fb9c:	3901      	subs	r1, #1
 800fb9e:	b28c      	uxth	r4, r1
 800fba0:	1904      	adds	r4, r0, r4
    DBG_PRINTF("%02x", buf[--len]);
 800fba2:	7822      	ldrb	r2, [r4, #0]
 800fba4:	2000      	movs	r0, #0
 800fba6:	4904      	ldr	r1, [pc, #16]	; (800fbb8 <DebugLE+0x24>)
 800fba8:	f7fc f9f5 	bl	800bf96 <SEGGER_RTT_printf>
  } while(len);
 800fbac:	0023      	movs	r3, r4
 800fbae:	3c01      	subs	r4, #1
 800fbb0:	429d      	cmp	r5, r3
 800fbb2:	d1f6      	bne.n	800fba2 <DebugLE+0xe>
}
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	46c0      	nop			; (mov r8, r8)
 800fbb8:	080198c4 	.word	0x080198c4

0800fbbc <EEPROM_CRC>:
  HW_ProgramEEPROM(EEPROM_APP, EEPROM_CRC(msg, size));
  HW_ProgramEEPROM(EEPROM_APP + 4, size);
  HW_WriteEEPROM((void*)(EEPROM_APP + 8), msg, size);
}

uint32_t EEPROM_CRC(const uint8_t *buf, size_t size) {
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	0005      	movs	r5, r0
 800fbc0:	000c      	movs	r4, r1
  return Crc32Finalize(Crc32Update(Crc32Init(), buf, size));
 800fbc2:	f7f4 ff01 	bl	80049c8 <Crc32Init>
 800fbc6:	0029      	movs	r1, r5
 800fbc8:	b2a2      	uxth	r2, r4
 800fbca:	f7f4 ff01 	bl	80049d0 <Crc32Update>
 800fbce:	f7f4 ff1b 	bl	8004a08 <Crc32Finalize>
}
 800fbd2:	bd70      	pop	{r4, r5, r6, pc}

0800fbd4 <EEPROM_Save>:
void EEPROM_Save(void) {
 800fbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  msg[0] = 0;
 800fbd6:	2400      	movs	r4, #0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fbd8:	2009      	movs	r0, #9
void EEPROM_Save(void) {
 800fbda:	b0c5      	sub	sp, #276	; 0x114
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fbdc:	4da5      	ldr	r5, [pc, #660]	; (800fe74 <EEPROM_Save+0x2a0>)
  msg[0] = 0;
 800fbde:	ae04      	add	r6, sp, #16
 800fbe0:	7034      	strb	r4, [r6, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fbe2:	792b      	ldrb	r3, [r5, #4]
 800fbe4:	2228      	movs	r2, #40	; 0x28
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	ab02      	add	r3, sp, #8
 800fbea:	18c0      	adds	r0, r0, r3
 800fbec:	21ff      	movs	r1, #255	; 0xff
 800fbee:	9401      	str	r4, [sp, #4]
 800fbf0:	f002 feaa 	bl	8012948 <PBEncodeField>
 800fbf4:	1c43      	adds	r3, r0, #1
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(DevCfg.devEui));
 800fbf6:	0027      	movs	r7, r4
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)DevCfg.isOtaa);
 800fbf8:	9303      	str	r3, [sp, #12]
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(DevCfg.devEui));
 800fbfa:	2bff      	cmp	r3, #255	; 0xff
 800fbfc:	d803      	bhi.n	800fc06 <EEPROM_Save+0x32>
 800fbfe:	3701      	adds	r7, #1
 800fc00:	37ff      	adds	r7, #255	; 0xff
 800fc02:	18f4      	adds	r4, r6, r3
 800fc04:	1aff      	subs	r7, r7, r3
 800fc06:	1d68      	adds	r0, r5, #5
 800fc08:	f002 fe78 	bl	80128fc <u64>
 800fc0c:	2231      	movs	r2, #49	; 0x31
 800fc0e:	9000      	str	r0, [sp, #0]
 800fc10:	9101      	str	r1, [sp, #4]
 800fc12:	0039      	movs	r1, r7
 800fc14:	0020      	movs	r0, r4
 800fc16:	f002 fe97 	bl	8012948 <PBEncodeField>
 800fc1a:	9b03      	ldr	r3, [sp, #12]
 800fc1c:	181f      	adds	r7, r3, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(DevCfg.appEui));
 800fc1e:	2300      	movs	r3, #0
 800fc20:	001c      	movs	r4, r3
 800fc22:	9303      	str	r3, [sp, #12]
 800fc24:	2fff      	cmp	r7, #255	; 0xff
 800fc26:	d804      	bhi.n	800fc32 <EEPROM_Save+0x5e>
 800fc28:	3401      	adds	r4, #1
 800fc2a:	19f3      	adds	r3, r6, r7
 800fc2c:	34ff      	adds	r4, #255	; 0xff
 800fc2e:	9303      	str	r3, [sp, #12]
 800fc30:	1be4      	subs	r4, r4, r7
 800fc32:	0028      	movs	r0, r5
 800fc34:	300d      	adds	r0, #13
 800fc36:	f002 fe61 	bl	80128fc <u64>
 800fc3a:	2239      	movs	r2, #57	; 0x39
 800fc3c:	9000      	str	r0, [sp, #0]
 800fc3e:	9101      	str	r1, [sp, #4]
 800fc40:	0021      	movs	r1, r4
 800fc42:	9803      	ldr	r0, [sp, #12]
 800fc44:	f002 fe80 	bl	8012948 <PBEncodeField>
 800fc48:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_KEY, PBMSG_BX_LORA_APP_KEY_SIZE, DevCfg.appKey);
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	0001      	movs	r1, r0
 800fc4e:	2fff      	cmp	r7, #255	; 0xff
 800fc50:	d803      	bhi.n	800fc5a <EEPROM_Save+0x86>
 800fc52:	3101      	adds	r1, #1
 800fc54:	31ff      	adds	r1, #255	; 0xff
 800fc56:	19f0      	adds	r0, r6, r7
 800fc58:	1bc9      	subs	r1, r1, r7
 800fc5a:	002b      	movs	r3, r5
 800fc5c:	3315      	adds	r3, #21
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	2242      	movs	r2, #66	; 0x42
 800fc62:	2310      	movs	r3, #16
 800fc64:	f002 fe70 	bl	8012948 <PBEncodeField>
 800fc68:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_ADDR, DevCfg.devAddr);
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	0001      	movs	r1, r0
 800fc6e:	2fff      	cmp	r7, #255	; 0xff
 800fc70:	d803      	bhi.n	800fc7a <EEPROM_Save+0xa6>
 800fc72:	3101      	adds	r1, #1
 800fc74:	31ff      	adds	r1, #255	; 0xff
 800fc76:	19f0      	adds	r0, r6, r7
 800fc78:	1bc9      	subs	r1, r1, r7
 800fc7a:	224d      	movs	r2, #77	; 0x4d
 800fc7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fc7e:	f002 fe63 	bl	8012948 <PBEncodeField>
 800fc82:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_MAC_NET_SESSION_KEY, PBMSG_BX_LORA_MAC_NET_SESSION_KEY_SIZE, DevCfg.nwkSKey);
 800fc84:	2000      	movs	r0, #0
 800fc86:	0001      	movs	r1, r0
 800fc88:	2fff      	cmp	r7, #255	; 0xff
 800fc8a:	d803      	bhi.n	800fc94 <EEPROM_Save+0xc0>
 800fc8c:	3101      	adds	r1, #1
 800fc8e:	31ff      	adds	r1, #255	; 0xff
 800fc90:	19f0      	adds	r0, r6, r7
 800fc92:	1bc9      	subs	r1, r1, r7
 800fc94:	002b      	movs	r3, r5
 800fc96:	332c      	adds	r3, #44	; 0x2c
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	2252      	movs	r2, #82	; 0x52
 800fc9c:	2310      	movs	r3, #16
 800fc9e:	f002 fe53 	bl	8012948 <PBEncodeField>
 800fca2:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_MAC_APP_SESSION_KEY, PBMSG_BX_LORA_MAC_APP_SESSION_KEY_SIZE, DevCfg.appSKey);
 800fca4:	2000      	movs	r0, #0
 800fca6:	0001      	movs	r1, r0
 800fca8:	2fff      	cmp	r7, #255	; 0xff
 800fcaa:	d803      	bhi.n	800fcb4 <EEPROM_Save+0xe0>
 800fcac:	3101      	adds	r1, #1
 800fcae:	31ff      	adds	r1, #255	; 0xff
 800fcb0:	19f0      	adds	r0, r6, r7
 800fcb2:	1bc9      	subs	r1, r1, r7
 800fcb4:	002b      	movs	r3, r5
 800fcb6:	333c      	adds	r3, #60	; 0x3c
 800fcb8:	9300      	str	r3, [sp, #0]
 800fcba:	225a      	movs	r2, #90	; 0x5a
 800fcbc:	2310      	movs	r3, #16
 800fcbe:	f002 fe43 	bl	8012948 <PBEncodeField>
 800fcc2:	183f      	adds	r7, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_FP, (uint64_t)(DevCfg.region == LORAMAC_REGION_EU868 ? PBENUM_FP_EU868 : PBENUM_FP_US915));
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	0001      	movs	r1, r0
 800fcc8:	2fff      	cmp	r7, #255	; 0xff
 800fcca:	d803      	bhi.n	800fcd4 <EEPROM_Save+0x100>
 800fccc:	3101      	adds	r1, #1
 800fcce:	31ff      	adds	r1, #255	; 0xff
 800fcd0:	19f0      	adds	r0, r6, r7
 800fcd2:	1bc9      	subs	r1, r1, r7
 800fcd4:	002b      	movs	r3, r5
 800fcd6:	334c      	adds	r3, #76	; 0x4c
 800fcd8:	781c      	ldrb	r4, [r3, #0]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	2300      	movs	r3, #0
 800fcde:	2c05      	cmp	r4, #5
 800fce0:	d001      	beq.n	800fce6 <EEPROM_Save+0x112>
 800fce2:	2202      	movs	r2, #2
 800fce4:	2300      	movs	r3, #0
 800fce6:	9200      	str	r2, [sp, #0]
 800fce8:	9301      	str	r3, [sp, #4]
 800fcea:	2268      	movs	r2, #104	; 0x68
 800fcec:	f002 fe2c 	bl	8012948 <PBEncodeField>
 800fcf0:	183c      	adds	r4, r7, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)DevCfg.txPort);
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	0001      	movs	r1, r0
 800fcf6:	2cff      	cmp	r4, #255	; 0xff
 800fcf8:	d803      	bhi.n	800fd02 <EEPROM_Save+0x12e>
 800fcfa:	3101      	adds	r1, #1
 800fcfc:	31ff      	adds	r1, #255	; 0xff
 800fcfe:	1930      	adds	r0, r6, r4
 800fd00:	1b09      	subs	r1, r1, r4
 800fd02:	002b      	movs	r3, r5
 800fd04:	2700      	movs	r7, #0
 800fd06:	334d      	adds	r3, #77	; 0x4d
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	2270      	movs	r2, #112	; 0x70
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	9701      	str	r7, [sp, #4]
 800fd10:	f002 fe1a 	bl	8012948 <PBEncodeField>
 800fd14:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)DevCfg.txPower);
 800fd16:	0039      	movs	r1, r7
 800fd18:	0038      	movs	r0, r7
 800fd1a:	2cff      	cmp	r4, #255	; 0xff
 800fd1c:	d803      	bhi.n	800fd26 <EEPROM_Save+0x152>
 800fd1e:	3101      	adds	r1, #1
 800fd20:	31ff      	adds	r1, #255	; 0xff
 800fd22:	1930      	adds	r0, r6, r4
 800fd24:	1b09      	subs	r1, r1, r4
 800fd26:	002b      	movs	r3, r5
 800fd28:	2700      	movs	r7, #0
 800fd2a:	334e      	adds	r3, #78	; 0x4e
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	2278      	movs	r2, #120	; 0x78
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	9701      	str	r7, [sp, #4]
 800fd34:	f002 fe08 	bl	8012948 <PBEncodeField>
 800fd38:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_SF, (uint64_t)DevCfg.sf);
 800fd3a:	0039      	movs	r1, r7
 800fd3c:	0038      	movs	r0, r7
 800fd3e:	2cff      	cmp	r4, #255	; 0xff
 800fd40:	d803      	bhi.n	800fd4a <EEPROM_Save+0x176>
 800fd42:	3101      	adds	r1, #1
 800fd44:	31ff      	adds	r1, #255	; 0xff
 800fd46:	1930      	adds	r0, r6, r4
 800fd48:	1b09      	subs	r1, r1, r4
 800fd4a:	002b      	movs	r3, r5
 800fd4c:	2700      	movs	r7, #0
 800fd4e:	334f      	adds	r3, #79	; 0x4f
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2280      	movs	r2, #128	; 0x80
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	9701      	str	r7, [sp, #4]
 800fd58:	f002 fdf6 	bl	8012948 <PBEncodeField>
 800fd5c:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_BW, (uint64_t)DevCfg.bw);
 800fd5e:	0039      	movs	r1, r7
 800fd60:	0038      	movs	r0, r7
 800fd62:	2cff      	cmp	r4, #255	; 0xff
 800fd64:	d803      	bhi.n	800fd6e <EEPROM_Save+0x19a>
 800fd66:	3101      	adds	r1, #1
 800fd68:	31ff      	adds	r1, #255	; 0xff
 800fd6a:	1930      	adds	r0, r6, r4
 800fd6c:	1b09      	subs	r1, r1, r4
 800fd6e:	002b      	movs	r3, r5
 800fd70:	2700      	movs	r7, #0
 800fd72:	3350      	adds	r3, #80	; 0x50
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	2288      	movs	r2, #136	; 0x88
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	9701      	str	r7, [sp, #4]
 800fd7c:	f002 fde4 	bl	8012948 <PBEncodeField>
 800fd80:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)DevCfg.confirmedMsgs);
 800fd82:	0039      	movs	r1, r7
 800fd84:	0038      	movs	r0, r7
 800fd86:	2cff      	cmp	r4, #255	; 0xff
 800fd88:	d803      	bhi.n	800fd92 <EEPROM_Save+0x1be>
 800fd8a:	3101      	adds	r1, #1
 800fd8c:	31ff      	adds	r1, #255	; 0xff
 800fd8e:	1930      	adds	r0, r6, r4
 800fd90:	1b09      	subs	r1, r1, r4
 800fd92:	002b      	movs	r3, r5
 800fd94:	2700      	movs	r7, #0
 800fd96:	3351      	adds	r3, #81	; 0x51
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	2290      	movs	r2, #144	; 0x90
 800fd9c:	9300      	str	r3, [sp, #0]
 800fd9e:	9701      	str	r7, [sp, #4]
 800fda0:	f002 fdd2 	bl	8012948 <PBEncodeField>
 800fda4:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_ADAPTIVE_DATA_RATE, (uint64_t)DevCfg.adaptiveDatarate);
 800fda6:	0039      	movs	r1, r7
 800fda8:	0038      	movs	r0, r7
 800fdaa:	2cff      	cmp	r4, #255	; 0xff
 800fdac:	d803      	bhi.n	800fdb6 <EEPROM_Save+0x1e2>
 800fdae:	3101      	adds	r1, #1
 800fdb0:	31ff      	adds	r1, #255	; 0xff
 800fdb2:	1930      	adds	r0, r6, r4
 800fdb4:	1b09      	subs	r1, r1, r4
 800fdb6:	002b      	movs	r3, r5
 800fdb8:	2700      	movs	r7, #0
 800fdba:	3352      	adds	r3, #82	; 0x52
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2298      	movs	r2, #152	; 0x98
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	9701      	str	r7, [sp, #4]
 800fdc4:	f002 fdc0 	bl	8012948 <PBEncodeField>
 800fdc8:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_RESPECT_DUTY_CYCLE, (uint64_t)DevCfg.dutyCycle);
 800fdca:	0039      	movs	r1, r7
 800fdcc:	0038      	movs	r0, r7
 800fdce:	2cff      	cmp	r4, #255	; 0xff
 800fdd0:	d803      	bhi.n	800fdda <EEPROM_Save+0x206>
 800fdd2:	3101      	adds	r1, #1
 800fdd4:	31ff      	adds	r1, #255	; 0xff
 800fdd6:	1930      	adds	r0, r6, r4
 800fdd8:	1b09      	subs	r1, r1, r4
 800fdda:	002b      	movs	r3, r5
 800fddc:	2700      	movs	r7, #0
 800fdde:	3353      	adds	r3, #83	; 0x53
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	22a0      	movs	r2, #160	; 0xa0
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	9701      	str	r7, [sp, #4]
 800fde8:	f002 fdae 	bl	8012948 <PBEncodeField>
 800fdec:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TIMEBASE, (uint64_t)DevCfg.sendInterval);
 800fdee:	0039      	movs	r1, r7
 800fdf0:	0038      	movs	r0, r7
 800fdf2:	2cff      	cmp	r4, #255	; 0xff
 800fdf4:	d803      	bhi.n	800fdfe <EEPROM_Save+0x22a>
 800fdf6:	3101      	adds	r1, #1
 800fdf8:	31ff      	adds	r1, #255	; 0xff
 800fdfa:	1930      	adds	r0, r6, r4
 800fdfc:	1b09      	subs	r1, r1, r4
 800fdfe:	2700      	movs	r7, #0
 800fe00:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fe02:	22a8      	movs	r2, #168	; 0xa8
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	9701      	str	r7, [sp, #4]
 800fe08:	f002 fd9e 	bl	8012948 <PBEncodeField>
 800fe0c:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_TRIGGER, (uint64_t)DevCfg.sendTrigger);
 800fe0e:	0039      	movs	r1, r7
 800fe10:	0038      	movs	r0, r7
 800fe12:	2cff      	cmp	r4, #255	; 0xff
 800fe14:	d803      	bhi.n	800fe1e <EEPROM_Save+0x24a>
 800fe16:	3101      	adds	r1, #1
 800fe18:	31ff      	adds	r1, #255	; 0xff
 800fe1a:	1930      	adds	r0, r6, r4
 800fe1c:	1b09      	subs	r1, r1, r4
 800fe1e:	002b      	movs	r3, r5
 800fe20:	2700      	movs	r7, #0
 800fe22:	3358      	adds	r3, #88	; 0x58
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	22b0      	movs	r2, #176	; 0xb0
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	9701      	str	r7, [sp, #4]
 800fe2c:	f002 fd8c 	bl	8012948 <PBEncodeField>
 800fe30:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 800fe32:	0039      	movs	r1, r7
 800fe34:	0038      	movs	r0, r7
 800fe36:	2cff      	cmp	r4, #255	; 0xff
 800fe38:	d803      	bhi.n	800fe42 <EEPROM_Save+0x26e>
 800fe3a:	3101      	adds	r1, #1
 800fe3c:	31ff      	adds	r1, #255	; 0xff
 800fe3e:	1930      	adds	r0, r6, r4
 800fe40:	1b09      	subs	r1, r1, r4
 800fe42:	002b      	movs	r3, r5
 800fe44:	3359      	adds	r3, #89	; 0x59
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	22b8      	movs	r2, #184	; 0xb8
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	9301      	str	r3, [sp, #4]
 800fe50:	f002 fd7a 	bl	8012948 <PBEncodeField>
  if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 800fe54:	002b      	movs	r3, r5
 800fe56:	336c      	adds	r3, #108	; 0x6c
 800fe58:	781b      	ldrb	r3, [r3, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 800fe5a:	1824      	adds	r4, r4, r0
  if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 800fe5c:	075b      	lsls	r3, r3, #29
 800fe5e:	d522      	bpl.n	800fea6 <EEPROM_Save+0x2d2>
 800fe60:	002b      	movs	r3, r5
 800fe62:	335a      	adds	r3, #90	; 0x5a
 800fe64:	7818      	ldrb	r0, [r3, #0]
 800fe66:	2803      	cmp	r0, #3
 800fe68:	d81d      	bhi.n	800fea6 <EEPROM_Save+0x2d2>
 800fe6a:	f7f0 f95f 	bl	800012c <__gnu_thumb1_case_uqi>
 800fe6e:	0582      	.short	0x0582
 800fe70:	95a8      	.short	0x95a8
 800fe72:	46c0      	nop			; (mov r8, r8)
 800fe74:	200000e0 	.word	0x200000e0
  case HDC2080_TEMPERATURE_HIGH:  size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold)); break;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	001f      	movs	r7, r3
 800fe7c:	9303      	str	r3, [sp, #12]
 800fe7e:	2cff      	cmp	r4, #255	; 0xff
 800fe80:	d804      	bhi.n	800fe8c <EEPROM_Save+0x2b8>
 800fe82:	3701      	adds	r7, #1
 800fe84:	1933      	adds	r3, r6, r4
 800fe86:	37ff      	adds	r7, #255	; 0xff
 800fe88:	9303      	str	r3, [sp, #12]
 800fe8a:	1b3f      	subs	r7, r7, r4
 800fe8c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800fe8e:	0018      	movs	r0, r3
 800fe90:	17d9      	asrs	r1, r3, #31
 800fe92:	f002 feb1 	bl	8012bf8 <PBEncodeSInt>
 800fe96:	22d0      	movs	r2, #208	; 0xd0
 800fe98:	9000      	str	r0, [sp, #0]
 800fe9a:	9101      	str	r1, [sp, #4]
  case HDC2080_HUMIDITY_HIGH:     size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));    break;
 800fe9c:	0039      	movs	r1, r7
 800fe9e:	9803      	ldr	r0, [sp, #12]
 800fea0:	f002 fd52 	bl	8012948 <PBEncodeField>
  case HDC2080_HUMIDITY_LOW:      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);                  break;
 800fea4:	1824      	adds	r4, r4, r0
  if(DevCfg.useSensor.sfh7776) {
 800fea6:	002b      	movs	r3, r5
 800fea8:	336c      	adds	r3, #108	; 0x6c
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	079b      	lsls	r3, r3, #30
 800feae:	d523      	bpl.n	800fef8 <EEPROM_Save+0x324>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_upper);
 800feb0:	2000      	movs	r0, #0
 800feb2:	0001      	movs	r1, r0
 800feb4:	2cff      	cmp	r4, #255	; 0xff
 800feb6:	d803      	bhi.n	800fec0 <EEPROM_Save+0x2ec>
 800feb8:	3101      	adds	r1, #1
 800feba:	31ff      	adds	r1, #255	; 0xff
 800febc:	1930      	adds	r0, r6, r4
 800febe:	1b09      	subs	r1, r1, r4
 800fec0:	002b      	movs	r3, r5
 800fec2:	2700      	movs	r7, #0
 800fec4:	3366      	adds	r3, #102	; 0x66
 800fec6:	881b      	ldrh	r3, [r3, #0]
 800fec8:	22e0      	movs	r2, #224	; 0xe0
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	9701      	str	r7, [sp, #4]
 800fece:	f002 fd3b 	bl	8012948 <PBEncodeField>
 800fed2:	1824      	adds	r4, r4, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_lower);
 800fed4:	0039      	movs	r1, r7
 800fed6:	0038      	movs	r0, r7
 800fed8:	2cff      	cmp	r4, #255	; 0xff
 800feda:	d803      	bhi.n	800fee4 <EEPROM_Save+0x310>
 800fedc:	3101      	adds	r1, #1
 800fede:	31ff      	adds	r1, #255	; 0xff
 800fee0:	1930      	adds	r0, r6, r4
 800fee2:	1b09      	subs	r1, r1, r4
 800fee4:	002b      	movs	r3, r5
 800fee6:	3368      	adds	r3, #104	; 0x68
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	22e8      	movs	r2, #232	; 0xe8
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	2300      	movs	r3, #0
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	f002 fd29 	bl	8012948 <PBEncodeField>
 800fef6:	1824      	adds	r4, r4, r0
  if(DevCfg.useSensor.bma400) {
 800fef8:	002b      	movs	r3, r5
 800fefa:	336c      	adds	r3, #108	; 0x6c
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	07db      	lsls	r3, r3, #31
 800ff00:	d520      	bpl.n	800ff44 <EEPROM_Save+0x370>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_THRESHOLD, (uint64_t)DevCfg.bma400_threshold);
 800ff02:	2000      	movs	r0, #0
 800ff04:	0001      	movs	r1, r0
 800ff06:	2cff      	cmp	r4, #255	; 0xff
 800ff08:	d803      	bhi.n	800ff12 <EEPROM_Save+0x33e>
 800ff0a:	3101      	adds	r1, #1
 800ff0c:	31ff      	adds	r1, #255	; 0xff
 800ff0e:	1930      	adds	r0, r6, r4
 800ff10:	1b09      	subs	r1, r1, r4
 800ff12:	2700      	movs	r7, #0
 800ff14:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800ff16:	22f0      	movs	r2, #240	; 0xf0
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	9701      	str	r7, [sp, #4]
 800ff1c:	f002 fd14 	bl	8012948 <PBEncodeField>
 800ff20:	1824      	adds	r4, r4, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_CONFIGURE, (uint64_t)DevCfg.bma400_config);
 800ff22:	0039      	movs	r1, r7
 800ff24:	0038      	movs	r0, r7
 800ff26:	2cff      	cmp	r4, #255	; 0xff
 800ff28:	d803      	bhi.n	800ff32 <EEPROM_Save+0x35e>
 800ff2a:	3101      	adds	r1, #1
 800ff2c:	31ff      	adds	r1, #255	; 0xff
 800ff2e:	1930      	adds	r0, r6, r4
 800ff30:	1b09      	subs	r1, r1, r4
 800ff32:	3564      	adds	r5, #100	; 0x64
 800ff34:	882b      	ldrh	r3, [r5, #0]
 800ff36:	22f8      	movs	r2, #248	; 0xf8
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	9301      	str	r3, [sp, #4]
 800ff3e:	f002 fd03 	bl	8012948 <PBEncodeField>
 800ff42:	1824      	adds	r4, r4, r0
  HW_ResetEEPROM((void*)(EEPROM_APP + 8), size);
 800ff44:	0021      	movs	r1, r4
 800ff46:	4824      	ldr	r0, [pc, #144]	; (800ffd8 <EEPROM_Save+0x404>)
 800ff48:	f000 fcda 	bl	8010900 <HW_ResetEEPROM>
  HW_ProgramEEPROM(EEPROM_APP, EEPROM_CRC(msg, size));
 800ff4c:	0021      	movs	r1, r4
 800ff4e:	0030      	movs	r0, r6
 800ff50:	f7ff fe34 	bl	800fbbc <EEPROM_CRC>
 800ff54:	0001      	movs	r1, r0
 800ff56:	4821      	ldr	r0, [pc, #132]	; (800ffdc <EEPROM_Save+0x408>)
 800ff58:	f000 fcbc 	bl	80108d4 <HW_ProgramEEPROM>
  HW_ProgramEEPROM(EEPROM_APP + 4, size);
 800ff5c:	0021      	movs	r1, r4
 800ff5e:	4820      	ldr	r0, [pc, #128]	; (800ffe0 <EEPROM_Save+0x40c>)
 800ff60:	f000 fcb8 	bl	80108d4 <HW_ProgramEEPROM>
  HW_WriteEEPROM((void*)(EEPROM_APP + 8), msg, size);
 800ff64:	0022      	movs	r2, r4
 800ff66:	0031      	movs	r1, r6
 800ff68:	481b      	ldr	r0, [pc, #108]	; (800ffd8 <EEPROM_Save+0x404>)
 800ff6a:	f000 fce7 	bl	801093c <HW_WriteEEPROM>
}
 800ff6e:	b045      	add	sp, #276	; 0x114
 800ff70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  case HDC2080_TEMPERATURE_LOW:   size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold)); break;
 800ff72:	2300      	movs	r3, #0
 800ff74:	001f      	movs	r7, r3
 800ff76:	9303      	str	r3, [sp, #12]
 800ff78:	2cff      	cmp	r4, #255	; 0xff
 800ff7a:	d804      	bhi.n	800ff86 <EEPROM_Save+0x3b2>
 800ff7c:	3701      	adds	r7, #1
 800ff7e:	1933      	adds	r3, r6, r4
 800ff80:	37ff      	adds	r7, #255	; 0xff
 800ff82:	9303      	str	r3, [sp, #12]
 800ff84:	1b3f      	subs	r7, r7, r4
 800ff86:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800ff88:	0018      	movs	r0, r3
 800ff8a:	17d9      	asrs	r1, r3, #31
 800ff8c:	f002 fe34 	bl	8012bf8 <PBEncodeSInt>
 800ff90:	22d8      	movs	r2, #216	; 0xd8
 800ff92:	9000      	str	r0, [sp, #0]
 800ff94:	9101      	str	r1, [sp, #4]
 800ff96:	e781      	b.n	800fe9c <EEPROM_Save+0x2c8>
  case HDC2080_HUMIDITY_HIGH:     size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));    break;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	001f      	movs	r7, r3
 800ff9c:	9303      	str	r3, [sp, #12]
 800ff9e:	2cff      	cmp	r4, #255	; 0xff
 800ffa0:	d804      	bhi.n	800ffac <EEPROM_Save+0x3d8>
 800ffa2:	3701      	adds	r7, #1
 800ffa4:	1933      	adds	r3, r6, r4
 800ffa6:	37ff      	adds	r7, #255	; 0xff
 800ffa8:	9303      	str	r3, [sp, #12]
 800ffaa:	1b3f      	subs	r7, r7, r4
 800ffac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800ffae:	0018      	movs	r0, r3
 800ffb0:	17d9      	asrs	r1, r3, #31
 800ffb2:	f002 fe21 	bl	8012bf8 <PBEncodeSInt>
 800ffb6:	22c0      	movs	r2, #192	; 0xc0
 800ffb8:	9000      	str	r0, [sp, #0]
 800ffba:	9101      	str	r1, [sp, #4]
 800ffbc:	e76e      	b.n	800fe9c <EEPROM_Save+0x2c8>
  case HDC2080_HUMIDITY_LOW:      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);                  break;
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	0001      	movs	r1, r0
 800ffc2:	2cff      	cmp	r4, #255	; 0xff
 800ffc4:	d803      	bhi.n	800ffce <EEPROM_Save+0x3fa>
 800ffc6:	3101      	adds	r1, #1
 800ffc8:	31ff      	adds	r1, #255	; 0xff
 800ffca:	1930      	adds	r0, r6, r4
 800ffcc:	1b09      	subs	r1, r1, r4
 800ffce:	22c8      	movs	r2, #200	; 0xc8
 800ffd0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800ffd2:	f002 fcb9 	bl	8012948 <PBEncodeField>
 800ffd6:	e765      	b.n	800fea4 <EEPROM_Save+0x2d0>
 800ffd8:	08081008 	.word	0x08081008
 800ffdc:	08081000 	.word	0x08081000
 800ffe0:	08081004 	.word	0x08081004

0800ffe4 <EEPROM_Load>:
void EEPROM_Load(void) {
 800ffe4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len = ((uint32_t*)EEPROM_APP)[1];
 800ffe6:	4cce      	ldr	r4, [pc, #824]	; (8010320 <EEPROM_Load+0x33c>)
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 800ffe8:	4bce      	ldr	r3, [pc, #824]	; (8010324 <EEPROM_Load+0x340>)
  uint32_t len = ((uint32_t*)EEPROM_APP)[1];
 800ffea:	6821      	ldr	r1, [r4, #0]
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 800ffec:	4dce      	ldr	r5, [pc, #824]	; (8010328 <EEPROM_Load+0x344>)
 800ffee:	000a      	movs	r2, r1
 800fff0:	3a0a      	subs	r2, #10
void EEPROM_Load(void) {
 800fff2:	b089      	sub	sp, #36	; 0x24
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d800      	bhi.n	800fffa <EEPROM_Load+0x16>
 800fff8:	e0a2      	b.n	8010140 <EEPROM_Load+0x15c>
    DEBUG_MSG("EEPROM ERR Missing. Saving defaults...\n");
 800fffa:	49cc      	ldr	r1, [pc, #816]	; (801032c <EEPROM_Load+0x348>)
 800fffc:	2000      	movs	r0, #0
 800fffe:	f7fb fdf7 	bl	800bbf0 <SEGGER_RTT_WriteString>
    BoardGetUniqueId(DevCfg.devEui);
 8010002:	48cb      	ldr	r0, [pc, #812]	; (8010330 <EEPROM_Load+0x34c>)
 8010004:	3005      	adds	r0, #5
 8010006:	f7f3 ff0d 	bl	8003e24 <BoardGetUniqueId>
    EEPROM_Save();
 801000a:	f7ff fde3 	bl	800fbd4 <EEPROM_Save>
  crc = ((uint32_t*)EEPROM_APP)[0];
 801000e:	682b      	ldr	r3, [r5, #0]
  pos++;
 8010010:	2501      	movs	r5, #1
  len = ((uint32_t*)EEPROM_APP)[1];
 8010012:	6827      	ldr	r7, [r4, #0]
  crc = ((uint32_t*)EEPROM_APP)[0];
 8010014:	9303      	str	r3, [sp, #12]
  while(pos != len) {
 8010016:	42bd      	cmp	r5, r7
 8010018:	d000      	beq.n	801001c <EEPROM_Load+0x38>
 801001a:	e09d      	b.n	8010158 <EEPROM_Load+0x174>
  memset(&DevCfg.changed, ~0, sizeof DevCfg.changed);
 801001c:	2301      	movs	r3, #1
 801001e:	4cc4      	ldr	r4, [pc, #784]	; (8010330 <EEPROM_Load+0x34c>)
 8010020:	425b      	negs	r3, r3
  DEBUG_PRINTF("EEPROM Loaded size:%3d crc32:0x%08x\n", len, crc);
 8010022:	002a      	movs	r2, r5
 8010024:	49c3      	ldr	r1, [pc, #780]	; (8010334 <EEPROM_Load+0x350>)
  memset(&DevCfg.changed, ~0, sizeof DevCfg.changed);
 8010026:	6023      	str	r3, [r4, #0]
  DEBUG_PRINTF("EEPROM Loaded size:%3d crc32:0x%08x\n", len, crc);
 8010028:	2000      	movs	r0, #0
 801002a:	9b03      	ldr	r3, [sp, #12]
 801002c:	f7fb ffb3 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.isOtaa            %x\n", DevCfg.isOtaa);
 8010030:	7922      	ldrb	r2, [r4, #4]
 8010032:	49c1      	ldr	r1, [pc, #772]	; (8010338 <EEPROM_Load+0x354>)
 8010034:	2000      	movs	r0, #0
 8010036:	f7fb ffae 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_MSG(   "EEPROM DevCfg.devEui            "), DebugArr(DevCfg.devEui, sizeof DevCfg.devEui), DEBUG_MSG("\n");
 801003a:	49c0      	ldr	r1, [pc, #768]	; (801033c <EEPROM_Load+0x358>)
 801003c:	2000      	movs	r0, #0
 801003e:	f7fb fdd7 	bl	800bbf0 <SEGGER_RTT_WriteString>
 8010042:	2108      	movs	r1, #8
 8010044:	1d60      	adds	r0, r4, #5
 8010046:	f7ff fd97 	bl	800fb78 <DebugArr>
 801004a:	4dbd      	ldr	r5, [pc, #756]	; (8010340 <EEPROM_Load+0x35c>)
 801004c:	2000      	movs	r0, #0
 801004e:	0029      	movs	r1, r5
 8010050:	f7fb fdce 	bl	800bbf0 <SEGGER_RTT_WriteString>
  DEBUG_MSG(   "EEPROM DevCfg.appEui            "), DebugArr(DevCfg.appEui, sizeof DevCfg.appEui), DEBUG_MSG("\n");
 8010054:	49bb      	ldr	r1, [pc, #748]	; (8010344 <EEPROM_Load+0x360>)
 8010056:	2000      	movs	r0, #0
 8010058:	f7fb fdca 	bl	800bbf0 <SEGGER_RTT_WriteString>
 801005c:	0020      	movs	r0, r4
 801005e:	2108      	movs	r1, #8
 8010060:	300d      	adds	r0, #13
 8010062:	f7ff fd89 	bl	800fb78 <DebugArr>
 8010066:	0029      	movs	r1, r5
 8010068:	2000      	movs	r0, #0
 801006a:	f7fb fdc1 	bl	800bbf0 <SEGGER_RTT_WriteString>
  DEBUG_MSG(   "EEPROM DevCfg.appKey            "), DebugArr(DevCfg.appKey, sizeof DevCfg.appKey), DEBUG_MSG("\n");
 801006e:	49b6      	ldr	r1, [pc, #728]	; (8010348 <EEPROM_Load+0x364>)
 8010070:	2000      	movs	r0, #0
 8010072:	f7fb fdbd 	bl	800bbf0 <SEGGER_RTT_WriteString>
 8010076:	0020      	movs	r0, r4
 8010078:	2110      	movs	r1, #16
 801007a:	3015      	adds	r0, #21
 801007c:	f7ff fd7c 	bl	800fb78 <DebugArr>
 8010080:	0029      	movs	r1, r5
 8010082:	2000      	movs	r0, #0
 8010084:	f7fb fdb4 	bl	800bbf0 <SEGGER_RTT_WriteString>
  DEBUG_PRINTF("EEPROM DevCfg.devAddr           0x%08x\n", DevCfg.devAddr);
 8010088:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801008a:	49b0      	ldr	r1, [pc, #704]	; (801034c <EEPROM_Load+0x368>)
 801008c:	2000      	movs	r0, #0
 801008e:	f7fb ff82 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_MSG(   "EEPROM DevCfg.nwkSKey           "), DebugArr(DevCfg.nwkSKey, sizeof DevCfg.nwkSKey), DEBUG_MSG("\n");
 8010092:	49af      	ldr	r1, [pc, #700]	; (8010350 <EEPROM_Load+0x36c>)
 8010094:	2000      	movs	r0, #0
 8010096:	f7fb fdab 	bl	800bbf0 <SEGGER_RTT_WriteString>
 801009a:	0020      	movs	r0, r4
 801009c:	2110      	movs	r1, #16
 801009e:	302c      	adds	r0, #44	; 0x2c
 80100a0:	f7ff fd6a 	bl	800fb78 <DebugArr>
 80100a4:	0029      	movs	r1, r5
 80100a6:	2000      	movs	r0, #0
 80100a8:	f7fb fda2 	bl	800bbf0 <SEGGER_RTT_WriteString>
  DEBUG_MSG(   "EEPROM DevCfg.appSKey           "), DebugArr(DevCfg.appSKey, sizeof DevCfg.appSKey), DEBUG_MSG("\n");
 80100ac:	49a9      	ldr	r1, [pc, #676]	; (8010354 <EEPROM_Load+0x370>)
 80100ae:	2000      	movs	r0, #0
 80100b0:	f7fb fd9e 	bl	800bbf0 <SEGGER_RTT_WriteString>
 80100b4:	0020      	movs	r0, r4
 80100b6:	2110      	movs	r1, #16
 80100b8:	303c      	adds	r0, #60	; 0x3c
 80100ba:	f7ff fd5d 	bl	800fb78 <DebugArr>
 80100be:	0029      	movs	r1, r5
 80100c0:	2000      	movs	r0, #0
 80100c2:	f7fb fd95 	bl	800bbf0 <SEGGER_RTT_WriteString>
  DEBUG_PRINTF("EEPROM DevCfg.region            %s\n", DevCfg.region == LORAMAC_REGION_EU868 ? "EU868" : "US915");
 80100c6:	0023      	movs	r3, r4
 80100c8:	334c      	adds	r3, #76	; 0x4c
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	4aa2      	ldr	r2, [pc, #648]	; (8010358 <EEPROM_Load+0x374>)
 80100ce:	2b05      	cmp	r3, #5
 80100d0:	d000      	beq.n	80100d4 <EEPROM_Load+0xf0>
 80100d2:	4aa2      	ldr	r2, [pc, #648]	; (801035c <EEPROM_Load+0x378>)
 80100d4:	49a2      	ldr	r1, [pc, #648]	; (8010360 <EEPROM_Load+0x37c>)
 80100d6:	2000      	movs	r0, #0
 80100d8:	f7fb ff5d 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.txPort            %d\n", DevCfg.txPort);
 80100dc:	0023      	movs	r3, r4
 80100de:	334d      	adds	r3, #77	; 0x4d
 80100e0:	781a      	ldrb	r2, [r3, #0]
 80100e2:	49a0      	ldr	r1, [pc, #640]	; (8010364 <EEPROM_Load+0x380>)
 80100e4:	2000      	movs	r0, #0
 80100e6:	f7fb ff56 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.txPower           %d dBm\n", DevCfg.txPower);
 80100ea:	0023      	movs	r3, r4
 80100ec:	334e      	adds	r3, #78	; 0x4e
 80100ee:	781a      	ldrb	r2, [r3, #0]
 80100f0:	499d      	ldr	r1, [pc, #628]	; (8010368 <EEPROM_Load+0x384>)
 80100f2:	2000      	movs	r0, #0
 80100f4:	f7fb ff4f 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.sf                %d\n", DevCfg.sf);
 80100f8:	0023      	movs	r3, r4
 80100fa:	334f      	adds	r3, #79	; 0x4f
 80100fc:	781a      	ldrb	r2, [r3, #0]
 80100fe:	499b      	ldr	r1, [pc, #620]	; (801036c <EEPROM_Load+0x388>)
 8010100:	2000      	movs	r0, #0
 8010102:	f7fb ff48 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.bw                %d\n", DevCfg.bw);
 8010106:	0023      	movs	r3, r4
 8010108:	3350      	adds	r3, #80	; 0x50
 801010a:	781a      	ldrb	r2, [r3, #0]
 801010c:	4998      	ldr	r1, [pc, #608]	; (8010370 <EEPROM_Load+0x38c>)
 801010e:	2000      	movs	r0, #0
 8010110:	f7fb ff41 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.confirmedMsgs     %x\n", DevCfg.confirmedMsgs);
 8010114:	0023      	movs	r3, r4
 8010116:	3351      	adds	r3, #81	; 0x51
 8010118:	781a      	ldrb	r2, [r3, #0]
 801011a:	4996      	ldr	r1, [pc, #600]	; (8010374 <EEPROM_Load+0x390>)
 801011c:	2000      	movs	r0, #0
 801011e:	f7fb ff3a 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.adaptiveDatarate  %x\n", DevCfg.adaptiveDatarate);
 8010122:	0023      	movs	r3, r4
 8010124:	3352      	adds	r3, #82	; 0x52
 8010126:	781a      	ldrb	r2, [r3, #0]
 8010128:	4993      	ldr	r1, [pc, #588]	; (8010378 <EEPROM_Load+0x394>)
  DEBUG_PRINTF("EEPROM DevCfg.dutyCycle         %x\n", DevCfg.dutyCycle);
 801012a:	3453      	adds	r4, #83	; 0x53
  DEBUG_PRINTF("EEPROM DevCfg.adaptiveDatarate  %x\n", DevCfg.adaptiveDatarate);
 801012c:	2000      	movs	r0, #0
 801012e:	f7fb ff32 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM DevCfg.dutyCycle         %x\n", DevCfg.dutyCycle);
 8010132:	7822      	ldrb	r2, [r4, #0]
 8010134:	4991      	ldr	r1, [pc, #580]	; (801037c <EEPROM_Load+0x398>)
 8010136:	2000      	movs	r0, #0
 8010138:	f7fb ff2d 	bl	800bf96 <SEGGER_RTT_printf>
}
 801013c:	b009      	add	sp, #36	; 0x24
 801013e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 8010140:	488f      	ldr	r0, [pc, #572]	; (8010380 <EEPROM_Load+0x39c>)
 8010142:	7803      	ldrb	r3, [r0, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d000      	beq.n	801014a <EEPROM_Load+0x166>
 8010148:	e757      	b.n	800fffa <EEPROM_Load+0x16>
  uint32_t crc = ((uint32_t*)EEPROM_APP)[0];
 801014a:	682e      	ldr	r6, [r5, #0]
  if(len > EEPROM_APP_END - EEPROM_APP - 8 || len < 10 || *msg || crc != EEPROM_CRC(msg, len)) {
 801014c:	f7ff fd36 	bl	800fbbc <EEPROM_CRC>
 8010150:	42b0      	cmp	r0, r6
 8010152:	d000      	beq.n	8010156 <EEPROM_Load+0x172>
 8010154:	e751      	b.n	800fffa <EEPROM_Load+0x16>
 8010156:	e75a      	b.n	801000e <EEPROM_Load+0x2a>
    uint8_t tagtype = msg[pos] & 0x7;
 8010158:	2207      	movs	r2, #7
 801015a:	4b89      	ldr	r3, [pc, #548]	; (8010380 <EEPROM_Load+0x39c>)
    uint64_t val_int = 0;
 801015c:	2100      	movs	r1, #0
    uint8_t tagtype = msg[pos] & 0x7;
 801015e:	18eb      	adds	r3, r5, r3
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	401a      	ands	r2, r3
 8010166:	9202      	str	r2, [sp, #8]
    uint32_t tagnr = 0;
 8010168:	2200      	movs	r2, #0
 801016a:	9205      	str	r2, [sp, #20]
    uint64_t val_int = 0;
 801016c:	2200      	movs	r2, #0
 801016e:	9106      	str	r1, [sp, #24]
 8010170:	9207      	str	r2, [sp, #28]
    if(msg[pos] & 0x80) {
 8010172:	b25a      	sxtb	r2, r3
 8010174:	2a00      	cmp	r2, #0
 8010176:	da43      	bge.n	8010200 <EEPROM_Load+0x21c>
      uint8_t tagnr_bitlimit = len - pos < 5 ? (len - pos) * 7 : 25;
 8010178:	1b7b      	subs	r3, r7, r5
 801017a:	3119      	adds	r1, #25
 801017c:	2b04      	cmp	r3, #4
 801017e:	d802      	bhi.n	8010186 <EEPROM_Load+0x1a2>
 8010180:	2207      	movs	r2, #7
 8010182:	4353      	muls	r3, r2
 8010184:	b2d9      	uxtb	r1, r3
      uint8_t tagnr_bytes = PBDecodeVarint(msg + pos + 1, tagnr_bitlimit, &tagnr);
 8010186:	4b7f      	ldr	r3, [pc, #508]	; (8010384 <EEPROM_Load+0x3a0>)
 8010188:	aa05      	add	r2, sp, #20
 801018a:	18e8      	adds	r0, r5, r3
 801018c:	f002 fcc8 	bl	8012b20 <PBDecodeVarint>
      if(!tagnr_bytes) {
 8010190:	2800      	cmp	r0, #0
 8010192:	d123      	bne.n	80101dc <EEPROM_Load+0x1f8>
        Breakpoint();
 8010194:	f000 fd60 	bl	8010c58 <Breakpoint>
        debug_msg = ", Out-of-bounds varint tagnr\n";
 8010198:	4c7b      	ldr	r4, [pc, #492]	; (8010388 <EEPROM_Load+0x3a4>)
  DEBUG_MSG("EEPROM ERR <RD Undefined 0x"), DebugLE(msg + debug_fieldpos, len - debug_fieldpos), DBG_PRINTF("%s", debug_msg);;
 801019a:	497c      	ldr	r1, [pc, #496]	; (801038c <EEPROM_Load+0x3a8>)
 801019c:	2000      	movs	r0, #0
 801019e:	f7fb fd27 	bl	800bbf0 <SEGGER_RTT_WriteString>
 80101a2:	1b79      	subs	r1, r7, r5
 80101a4:	9801      	ldr	r0, [sp, #4]
 80101a6:	b289      	uxth	r1, r1
 80101a8:	f7ff fcf4 	bl	800fb94 <DebugLE>
 80101ac:	0022      	movs	r2, r4
 80101ae:	4978      	ldr	r1, [pc, #480]	; (8010390 <EEPROM_Load+0x3ac>)
 80101b0:	2000      	movs	r0, #0
 80101b2:	f7fb fef0 	bl	800bf96 <SEGGER_RTT_printf>
  DEBUG_MSG("EEPROM Invalidating and rebooting.");
 80101b6:	4977      	ldr	r1, [pc, #476]	; (8010394 <EEPROM_Load+0x3b0>)
 80101b8:	2000      	movs	r0, #0
 80101ba:	f7fb fd19 	bl	800bbf0 <SEGGER_RTT_WriteString>
  HW_EraseEEPROM(EEPROM_APP);
 80101be:	485a      	ldr	r0, [pc, #360]	; (8010328 <EEPROM_Load+0x344>)
 80101c0:	f000 fb74 	bl	80108ac <HW_EraseEEPROM>
  HW_EraseEEPROM(EEPROM_APP + 4);
 80101c4:	4856      	ldr	r0, [pc, #344]	; (8010320 <EEPROM_Load+0x33c>)
 80101c6:	f000 fb71 	bl	80108ac <HW_EraseEEPROM>
  __ASM volatile ("dsb 0xF":::"memory");
 80101ca:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80101ce:	4b72      	ldr	r3, [pc, #456]	; (8010398 <EEPROM_Load+0x3b4>)
 80101d0:	4a72      	ldr	r2, [pc, #456]	; (801039c <EEPROM_Load+0x3b8>)
 80101d2:	60da      	str	r2, [r3, #12]
 80101d4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80101d8:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80101da:	e7fd      	b.n	80101d8 <EEPROM_Load+0x1f4>
      tagnr |= (msg[pos] & 0x78) >> 3;
 80101dc:	9b01      	ldr	r3, [sp, #4]
      tagnr <<= 4;
 80101de:	9a05      	ldr	r2, [sp, #20]
      tagnr |= (msg[pos] & 0x78) >> 3;
 80101e0:	781b      	ldrb	r3, [r3, #0]
      tagnr <<= 4;
 80101e2:	0112      	lsls	r2, r2, #4
      tagnr |= (msg[pos] & 0x78) >> 3;
 80101e4:	065b      	lsls	r3, r3, #25
 80101e6:	0f1b      	lsrs	r3, r3, #28
 80101e8:	4313      	orrs	r3, r2
 80101ea:	1c6c      	adds	r4, r5, #1
 80101ec:	9305      	str	r3, [sp, #20]
      pos += tagnr_bytes + 1;
 80101ee:	1824      	adds	r4, r4, r0
    if(!tagnr) {
 80101f0:	9b05      	ldr	r3, [sp, #20]
      pos += 1;
 80101f2:	b2e4      	uxtb	r4, r4
    if(!tagnr) {
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d107      	bne.n	8010208 <EEPROM_Load+0x224>
      Breakpoint();
 80101f8:	f000 fd2e 	bl	8010c58 <Breakpoint>
      debug_msg = ", Ill-formed tagnr\n";
 80101fc:	4c68      	ldr	r4, [pc, #416]	; (80103a0 <EEPROM_Load+0x3bc>)
      goto err;
 80101fe:	e7cc      	b.n	801019a <EEPROM_Load+0x1b6>
      tagnr = (msg[pos] & 0x78) >> 3;
 8010200:	10db      	asrs	r3, r3, #3
 8010202:	9305      	str	r3, [sp, #20]
      pos += 1;
 8010204:	1c6c      	adds	r4, r5, #1
 8010206:	e7f3      	b.n	80101f0 <EEPROM_Load+0x20c>
    if(!(len - pos)) {
 8010208:	42bc      	cmp	r4, r7
 801020a:	d100      	bne.n	801020e <EEPROM_Load+0x22a>
 801020c:	e18c      	b.n	8010528 <EEPROM_Load+0x544>
    switch(tagtype) {
 801020e:	9b02      	ldr	r3, [sp, #8]
 8010210:	2b05      	cmp	r3, #5
 8010212:	d852      	bhi.n	80102ba <EEPROM_Load+0x2d6>
 8010214:	0018      	movs	r0, r3
 8010216:	f7ef ff89 	bl	800012c <__gnu_thumb1_case_uqi>
 801021a:	1303      	.short	0x1303
 801021c:	4850502a 	.word	0x4850502a
      uint8_t varint_bitlimit = len - pos < 10 ? (len - pos) * 7 : 64;
 8010220:	2140      	movs	r1, #64	; 0x40
 8010222:	1b3b      	subs	r3, r7, r4
 8010224:	2b09      	cmp	r3, #9
 8010226:	d802      	bhi.n	801022e <EEPROM_Load+0x24a>
 8010228:	2207      	movs	r2, #7
 801022a:	4353      	muls	r3, r2
 801022c:	b2d9      	uxtb	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 801022e:	4b54      	ldr	r3, [pc, #336]	; (8010380 <EEPROM_Load+0x39c>)
 8010230:	aa06      	add	r2, sp, #24
 8010232:	18e0      	adds	r0, r4, r3
 8010234:	f002 fc74 	bl	8012b20 <PBDecodeVarint>
 8010238:	0006      	movs	r6, r0
    if(!val_rawbytes) {
 801023a:	2e00      	cmp	r6, #0
 801023c:	d107      	bne.n	801024e <EEPROM_Load+0x26a>
 801023e:	e022      	b.n	8010286 <EEPROM_Load+0x2a2>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8010240:	4b4f      	ldr	r3, [pc, #316]	; (8010380 <EEPROM_Load+0x39c>)
 8010242:	2208      	movs	r2, #8
 8010244:	18e1      	adds	r1, r4, r3
 8010246:	a806      	add	r0, sp, #24
 8010248:	f005 fed0 	bl	8015fec <memcpy>
      val_rawbytes = 8;
 801024c:	2608      	movs	r6, #8
    if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_OTAA) {
 801024e:	9b05      	ldr	r3, [sp, #20]
 8010250:	9a02      	ldr	r2, [sp, #8]
 8010252:	00db      	lsls	r3, r3, #3
 8010254:	4313      	orrs	r3, r2
 8010256:	2b28      	cmp	r3, #40	; 0x28
 8010258:	d133      	bne.n	80102c2 <EEPROM_Load+0x2de>
      DevCfg.isOtaa = val_int;
 801025a:	9a07      	ldr	r2, [sp, #28]
 801025c:	9b06      	ldr	r3, [sp, #24]
 801025e:	4313      	orrs	r3, r2
 8010260:	1e5a      	subs	r2, r3, #1
 8010262:	4193      	sbcs	r3, r2
 8010264:	4a32      	ldr	r2, [pc, #200]	; (8010330 <EEPROM_Load+0x34c>)
 8010266:	7113      	strb	r3, [r2, #4]
    pos += val_rawbytes;
 8010268:	19a4      	adds	r4, r4, r6
 801026a:	b2e5      	uxtb	r5, r4
 801026c:	e6d3      	b.n	8010016 <EEPROM_Load+0x32>
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 801026e:	1b39      	subs	r1, r7, r4
 8010270:	3901      	subs	r1, #1
 8010272:	1e4b      	subs	r3, r1, #1
 8010274:	4199      	sbcs	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8010276:	4b42      	ldr	r3, [pc, #264]	; (8010380 <EEPROM_Load+0x39c>)
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8010278:	3107      	adds	r1, #7
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 801027a:	aa06      	add	r2, sp, #24
 801027c:	18e0      	adds	r0, r4, r3
 801027e:	f002 fc4f 	bl	8012b20 <PBDecodeVarint>
      if(!val_rawbytes) break;
 8010282:	2800      	cmp	r0, #0
 8010284:	d103      	bne.n	801028e <EEPROM_Load+0x2aa>
      Breakpoint();
 8010286:	f000 fce7 	bl	8010c58 <Breakpoint>
      debug_msg = ", Ill-formed value\n";
 801028a:	4c46      	ldr	r4, [pc, #280]	; (80103a4 <EEPROM_Load+0x3c0>)
      goto err;
 801028c:	e785      	b.n	801019a <EEPROM_Load+0x1b6>
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 801028e:	9b07      	ldr	r3, [sp, #28]
 8010290:	9e06      	ldr	r6, [sp, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d1f7      	bne.n	8010286 <EEPROM_Load+0x2a2>
 8010296:	2efa      	cmp	r6, #250	; 0xfa
 8010298:	d8f5      	bhi.n	8010286 <EEPROM_Load+0x2a2>
      pos += val_rawbytes;
 801029a:	1824      	adds	r4, r4, r0
 801029c:	b2e4      	uxtb	r4, r4
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 801029e:	1b3b      	subs	r3, r7, r4
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	429e      	cmp	r6, r3
 80102a4:	d8ef      	bhi.n	8010286 <EEPROM_Load+0x2a2>
 80102a6:	b2f6      	uxtb	r6, r6
 80102a8:	e7c7      	b.n	801023a <EEPROM_Load+0x256>
      memcpy(&val_int, msg + pos, val_rawbytes);
 80102aa:	4b35      	ldr	r3, [pc, #212]	; (8010380 <EEPROM_Load+0x39c>)
 80102ac:	2204      	movs	r2, #4
 80102ae:	18e1      	adds	r1, r4, r3
 80102b0:	a806      	add	r0, sp, #24
 80102b2:	f005 fe9b 	bl	8015fec <memcpy>
      val_rawbytes = 4;
 80102b6:	2604      	movs	r6, #4
 80102b8:	e7c9      	b.n	801024e <EEPROM_Load+0x26a>
      Breakpoint();
 80102ba:	f000 fccd 	bl	8010c58 <Breakpoint>
      debug_msg = ", Ill-formed tagtype\n";
 80102be:	4c3a      	ldr	r4, [pc, #232]	; (80103a8 <EEPROM_Load+0x3c4>)
      goto err;
 80102c0:	e76b      	b.n	801019a <EEPROM_Load+0x1b6>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_EUI) {
 80102c2:	2b31      	cmp	r3, #49	; 0x31
 80102c4:	d106      	bne.n	80102d4 <EEPROM_Load+0x2f0>
      b64(DevCfg.devEui, val_int);
 80102c6:	9a06      	ldr	r2, [sp, #24]
 80102c8:	9b07      	ldr	r3, [sp, #28]
 80102ca:	4819      	ldr	r0, [pc, #100]	; (8010330 <EEPROM_Load+0x34c>)
 80102cc:	3005      	adds	r0, #5
      b64(DevCfg.appEui, val_int);
 80102ce:	f002 fb2c 	bl	801292a <b64>
 80102d2:	e7c9      	b.n	8010268 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_EUI) {
 80102d4:	2b39      	cmp	r3, #57	; 0x39
 80102d6:	d104      	bne.n	80102e2 <EEPROM_Load+0x2fe>
      b64(DevCfg.appEui, val_int);
 80102d8:	9a06      	ldr	r2, [sp, #24]
 80102da:	9b07      	ldr	r3, [sp, #28]
 80102dc:	4814      	ldr	r0, [pc, #80]	; (8010330 <EEPROM_Load+0x34c>)
 80102de:	300d      	adds	r0, #13
 80102e0:	e7f5      	b.n	80102ce <EEPROM_Load+0x2ea>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_KEY && val_rawbytes == sizeof DevCfg.appKey) {
 80102e2:	2b42      	cmp	r3, #66	; 0x42
 80102e4:	d10a      	bne.n	80102fc <EEPROM_Load+0x318>
 80102e6:	2e10      	cmp	r6, #16
 80102e8:	d000      	beq.n	80102ec <EEPROM_Load+0x308>
 80102ea:	e10d      	b.n	8010508 <EEPROM_Load+0x524>
      memcpy(DevCfg.appKey, msg + pos, val_rawbytes);
 80102ec:	0032      	movs	r2, r6
 80102ee:	4810      	ldr	r0, [pc, #64]	; (8010330 <EEPROM_Load+0x34c>)
 80102f0:	4b23      	ldr	r3, [pc, #140]	; (8010380 <EEPROM_Load+0x39c>)
 80102f2:	3015      	adds	r0, #21
 80102f4:	18e1      	adds	r1, r4, r3
      memcpy(DevCfg.nwkSKey, msg + pos, val_rawbytes);
 80102f6:	f005 fe79 	bl	8015fec <memcpy>
 80102fa:	e7b5      	b.n	8010268 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_ADDR) {
 80102fc:	2b4d      	cmp	r3, #77	; 0x4d
 80102fe:	d103      	bne.n	8010308 <EEPROM_Load+0x324>
      DevCfg.devAddr = val_int;
 8010300:	4b0b      	ldr	r3, [pc, #44]	; (8010330 <EEPROM_Load+0x34c>)
 8010302:	9a06      	ldr	r2, [sp, #24]
 8010304:	629a      	str	r2, [r3, #40]	; 0x28
 8010306:	e7af      	b.n	8010268 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_NET_SESSION_KEY && val_rawbytes == sizeof DevCfg.nwkSKey) {
 8010308:	2b52      	cmp	r3, #82	; 0x52
 801030a:	d14f      	bne.n	80103ac <EEPROM_Load+0x3c8>
 801030c:	2e10      	cmp	r6, #16
 801030e:	d000      	beq.n	8010312 <EEPROM_Load+0x32e>
 8010310:	e0fa      	b.n	8010508 <EEPROM_Load+0x524>
      memcpy(DevCfg.nwkSKey, msg + pos, val_rawbytes);
 8010312:	4807      	ldr	r0, [pc, #28]	; (8010330 <EEPROM_Load+0x34c>)
 8010314:	4b1a      	ldr	r3, [pc, #104]	; (8010380 <EEPROM_Load+0x39c>)
 8010316:	0032      	movs	r2, r6
 8010318:	18e1      	adds	r1, r4, r3
 801031a:	302c      	adds	r0, #44	; 0x2c
 801031c:	e7eb      	b.n	80102f6 <EEPROM_Load+0x312>
 801031e:	46c0      	nop			; (mov r8, r8)
 8010320:	08081004 	.word	0x08081004
 8010324:	000003ee 	.word	0x000003ee
 8010328:	08081000 	.word	0x08081000
 801032c:	08019950 	.word	0x08019950
 8010330:	200000e0 	.word	0x200000e0
 8010334:	080199e5 	.word	0x080199e5
 8010338:	08019a0a 	.word	0x08019a0a
 801033c:	08019a2e 	.word	0x08019a2e
 8010340:	080191ba 	.word	0x080191ba
 8010344:	08019a4f 	.word	0x08019a4f
 8010348:	08019a70 	.word	0x08019a70
 801034c:	08019a91 	.word	0x08019a91
 8010350:	08019ab9 	.word	0x08019ab9
 8010354:	08019ada 	.word	0x08019ada
 8010358:	08019944 	.word	0x08019944
 801035c:	0801994a 	.word	0x0801994a
 8010360:	08019afb 	.word	0x08019afb
 8010364:	08019b1f 	.word	0x08019b1f
 8010368:	08019b43 	.word	0x08019b43
 801036c:	08019b6b 	.word	0x08019b6b
 8010370:	08019b8f 	.word	0x08019b8f
 8010374:	08019bb3 	.word	0x08019bb3
 8010378:	08019bd7 	.word	0x08019bd7
 801037c:	08019bfb 	.word	0x08019bfb
 8010380:	08081008 	.word	0x08081008
 8010384:	08081009 	.word	0x08081009
 8010388:	080198c9 	.word	0x080198c9
 801038c:	08019978 	.word	0x08019978
 8010390:	080199bf 	.word	0x080199bf
 8010394:	080199c2 	.word	0x080199c2
 8010398:	e000ed00 	.word	0xe000ed00
 801039c:	05fa0004 	.word	0x05fa0004
 80103a0:	080198e7 	.word	0x080198e7
 80103a4:	080198fb 	.word	0x080198fb
 80103a8:	0801990f 	.word	0x0801990f
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_APP_SESSION_KEY && val_rawbytes == sizeof DevCfg.appSKey) {
 80103ac:	2b5a      	cmp	r3, #90	; 0x5a
 80103ae:	d108      	bne.n	80103c2 <EEPROM_Load+0x3de>
 80103b0:	2e10      	cmp	r6, #16
 80103b2:	d000      	beq.n	80103b6 <EEPROM_Load+0x3d2>
 80103b4:	e0a8      	b.n	8010508 <EEPROM_Load+0x524>
      memcpy(DevCfg.appSKey, msg + pos, val_rawbytes);
 80103b6:	485d      	ldr	r0, [pc, #372]	; (801052c <EEPROM_Load+0x548>)
 80103b8:	4b5d      	ldr	r3, [pc, #372]	; (8010530 <EEPROM_Load+0x54c>)
 80103ba:	0032      	movs	r2, r6
 80103bc:	18e1      	adds	r1, r4, r3
 80103be:	303c      	adds	r0, #60	; 0x3c
 80103c0:	e799      	b.n	80102f6 <EEPROM_Load+0x312>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_FP) {
 80103c2:	2b68      	cmp	r3, #104	; 0x68
 80103c4:	d10b      	bne.n	80103de <EEPROM_Load+0x3fa>
      DevCfg.region = val_int == PBENUM_FP_EU868 ? LORAMAC_REGION_EU868 : LORAMAC_REGION_US915;
 80103c6:	9b06      	ldr	r3, [sp, #24]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d103      	bne.n	80103d4 <EEPROM_Load+0x3f0>
 80103cc:	9b07      	ldr	r3, [sp, #28]
 80103ce:	2205      	movs	r2, #5
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d000      	beq.n	80103d6 <EEPROM_Load+0x3f2>
 80103d4:	2208      	movs	r2, #8
 80103d6:	4b55      	ldr	r3, [pc, #340]	; (801052c <EEPROM_Load+0x548>)
 80103d8:	334c      	adds	r3, #76	; 0x4c
      DevCfg.useSensor.bma400 = true;
 80103da:	701a      	strb	r2, [r3, #0]
 80103dc:	e744      	b.n	8010268 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_PORT) {
 80103de:	2b70      	cmp	r3, #112	; 0x70
 80103e0:	d103      	bne.n	80103ea <EEPROM_Load+0x406>
      DevCfg.txPort = val_int;
 80103e2:	4b52      	ldr	r3, [pc, #328]	; (801052c <EEPROM_Load+0x548>)
 80103e4:	334d      	adds	r3, #77	; 0x4d
      DevCfg.sendStrategy = val_int;
 80103e6:	9a06      	ldr	r2, [sp, #24]
 80103e8:	e7f7      	b.n	80103da <EEPROM_Load+0x3f6>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_TXP) {
 80103ea:	2b78      	cmp	r3, #120	; 0x78
 80103ec:	d102      	bne.n	80103f4 <EEPROM_Load+0x410>
      DevCfg.txPower = val_int;
 80103ee:	4b4f      	ldr	r3, [pc, #316]	; (801052c <EEPROM_Load+0x548>)
 80103f0:	334e      	adds	r3, #78	; 0x4e
 80103f2:	e7f8      	b.n	80103e6 <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_SF) {
 80103f4:	2b80      	cmp	r3, #128	; 0x80
 80103f6:	d102      	bne.n	80103fe <EEPROM_Load+0x41a>
      DevCfg.sf = val_int;
 80103f8:	4b4c      	ldr	r3, [pc, #304]	; (801052c <EEPROM_Load+0x548>)
 80103fa:	334f      	adds	r3, #79	; 0x4f
 80103fc:	e7f3      	b.n	80103e6 <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_BW) {
 80103fe:	2b88      	cmp	r3, #136	; 0x88
 8010400:	d102      	bne.n	8010408 <EEPROM_Load+0x424>
      DevCfg.bw = val_int;
 8010402:	4b4a      	ldr	r3, [pc, #296]	; (801052c <EEPROM_Load+0x548>)
 8010404:	3350      	adds	r3, #80	; 0x50
 8010406:	e7ee      	b.n	80103e6 <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_CONFIRMED_MESSAGES) {
 8010408:	2b90      	cmp	r3, #144	; 0x90
 801040a:	d108      	bne.n	801041e <EEPROM_Load+0x43a>
      DevCfg.confirmedMsgs = val_int;
 801040c:	9a07      	ldr	r2, [sp, #28]
 801040e:	9b06      	ldr	r3, [sp, #24]
 8010410:	4313      	orrs	r3, r2
 8010412:	1e5a      	subs	r2, r3, #1
 8010414:	4193      	sbcs	r3, r2
 8010416:	4a45      	ldr	r2, [pc, #276]	; (801052c <EEPROM_Load+0x548>)
 8010418:	3251      	adds	r2, #81	; 0x51
      DevCfg.dutyCycle = val_int;
 801041a:	7013      	strb	r3, [r2, #0]
 801041c:	e724      	b.n	8010268 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_ADAPTIVE_DATA_RATE) {
 801041e:	2b98      	cmp	r3, #152	; 0x98
 8010420:	d107      	bne.n	8010432 <EEPROM_Load+0x44e>
      DevCfg.adaptiveDatarate = val_int;
 8010422:	9a07      	ldr	r2, [sp, #28]
 8010424:	9b06      	ldr	r3, [sp, #24]
 8010426:	4313      	orrs	r3, r2
 8010428:	1e5a      	subs	r2, r3, #1
 801042a:	4193      	sbcs	r3, r2
 801042c:	4a3f      	ldr	r2, [pc, #252]	; (801052c <EEPROM_Load+0x548>)
 801042e:	3252      	adds	r2, #82	; 0x52
 8010430:	e7f3      	b.n	801041a <EEPROM_Load+0x436>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_RESPECT_DUTY_CYCLE) {
 8010432:	2ba0      	cmp	r3, #160	; 0xa0
 8010434:	d107      	bne.n	8010446 <EEPROM_Load+0x462>
      DevCfg.dutyCycle = val_int;
 8010436:	9a07      	ldr	r2, [sp, #28]
 8010438:	9b06      	ldr	r3, [sp, #24]
 801043a:	4313      	orrs	r3, r2
 801043c:	1e5a      	subs	r2, r3, #1
 801043e:	4193      	sbcs	r3, r2
 8010440:	4a3a      	ldr	r2, [pc, #232]	; (801052c <EEPROM_Load+0x548>)
 8010442:	3253      	adds	r2, #83	; 0x53
 8010444:	e7e9      	b.n	801041a <EEPROM_Load+0x436>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TIMEBASE) {
 8010446:	2ba8      	cmp	r3, #168	; 0xa8
 8010448:	d103      	bne.n	8010452 <EEPROM_Load+0x46e>
      DevCfg.sendInterval = val_int;
 801044a:	4b38      	ldr	r3, [pc, #224]	; (801052c <EEPROM_Load+0x548>)
 801044c:	9a06      	ldr	r2, [sp, #24]
 801044e:	655a      	str	r2, [r3, #84]	; 0x54
 8010450:	e70a      	b.n	8010268 <EEPROM_Load+0x284>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_TRIGGER) {
 8010452:	2bb0      	cmp	r3, #176	; 0xb0
 8010454:	d102      	bne.n	801045c <EEPROM_Load+0x478>
      DevCfg.sendTrigger = val_int;
 8010456:	4b35      	ldr	r3, [pc, #212]	; (801052c <EEPROM_Load+0x548>)
 8010458:	3358      	adds	r3, #88	; 0x58
 801045a:	e7c4      	b.n	80103e6 <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_STRATEGY) {
 801045c:	2bb8      	cmp	r3, #184	; 0xb8
 801045e:	d102      	bne.n	8010466 <EEPROM_Load+0x482>
      DevCfg.sendStrategy = val_int;
 8010460:	4b32      	ldr	r3, [pc, #200]	; (801052c <EEPROM_Load+0x548>)
 8010462:	3359      	adds	r3, #89	; 0x59
 8010464:	e7bf      	b.n	80103e6 <EEPROM_Load+0x402>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD) {
 8010466:	2bc0      	cmp	r3, #192	; 0xc0
 8010468:	d10b      	bne.n	8010482 <EEPROM_Load+0x49e>
      DevCfg.hdc2080_threshold = val_int;
 801046a:	4b30      	ldr	r3, [pc, #192]	; (801052c <EEPROM_Load+0x548>)
 801046c:	9a06      	ldr	r2, [sp, #24]
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_HIGH;
 801046e:	2103      	movs	r1, #3
      DevCfg.hdc2080_threshold = val_int;
 8010470:	65da      	str	r2, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_HIGH;
 8010472:	001a      	movs	r2, r3
 8010474:	325a      	adds	r2, #90	; 0x5a
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_LOW;
 8010476:	7011      	strb	r1, [r2, #0]
      DevCfg.useSensor.hdc2080 = true;
 8010478:	2204      	movs	r2, #4
 801047a:	336c      	adds	r3, #108	; 0x6c
 801047c:	7819      	ldrb	r1, [r3, #0]
      DevCfg.useSensor.bma400 = true;
 801047e:	430a      	orrs	r2, r1
 8010480:	e7ab      	b.n	80103da <EEPROM_Load+0x3f6>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD) {
 8010482:	2bc8      	cmp	r3, #200	; 0xc8
 8010484:	d106      	bne.n	8010494 <EEPROM_Load+0x4b0>
      DevCfg.hdc2080_threshold = val_int;
 8010486:	4b29      	ldr	r3, [pc, #164]	; (801052c <EEPROM_Load+0x548>)
 8010488:	9a06      	ldr	r2, [sp, #24]
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_LOW;
 801048a:	2102      	movs	r1, #2
      DevCfg.hdc2080_threshold = val_int;
 801048c:	65da      	str	r2, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_HUMIDITY_LOW;
 801048e:	001a      	movs	r2, r3
 8010490:	325a      	adds	r2, #90	; 0x5a
 8010492:	e7f0      	b.n	8010476 <EEPROM_Load+0x492>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD) {
 8010494:	2bd0      	cmp	r3, #208	; 0xd0
 8010496:	d109      	bne.n	80104ac <EEPROM_Load+0x4c8>
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 8010498:	9806      	ldr	r0, [sp, #24]
 801049a:	9907      	ldr	r1, [sp, #28]
 801049c:	f002 fbbb 	bl	8012c16 <PBDecodeSInt>
 80104a0:	4b22      	ldr	r3, [pc, #136]	; (801052c <EEPROM_Load+0x548>)
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_HIGH;
 80104a2:	2101      	movs	r1, #1
 80104a4:	001a      	movs	r2, r3
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 80104a6:	65d8      	str	r0, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_HIGH;
 80104a8:	325a      	adds	r2, #90	; 0x5a
 80104aa:	e7e4      	b.n	8010476 <EEPROM_Load+0x492>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD) {
 80104ac:	2bd8      	cmp	r3, #216	; 0xd8
 80104ae:	d109      	bne.n	80104c4 <EEPROM_Load+0x4e0>
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 80104b0:	9806      	ldr	r0, [sp, #24]
 80104b2:	9907      	ldr	r1, [sp, #28]
 80104b4:	f002 fbaf 	bl	8012c16 <PBDecodeSInt>
 80104b8:	4b1c      	ldr	r3, [pc, #112]	; (801052c <EEPROM_Load+0x548>)
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_LOW;
 80104ba:	2100      	movs	r1, #0
 80104bc:	001a      	movs	r2, r3
      DevCfg.hdc2080_threshold = PBDecodeSInt(val_int);
 80104be:	65d8      	str	r0, [r3, #92]	; 0x5c
      DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_LOW;
 80104c0:	325a      	adds	r2, #90	; 0x5a
 80104c2:	e7d8      	b.n	8010476 <EEPROM_Load+0x492>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD) {
 80104c4:	2be0      	cmp	r3, #224	; 0xe0
 80104c6:	d108      	bne.n	80104da <EEPROM_Load+0x4f6>
      DevCfg.sfh7776_threshold_upper = val_int;
 80104c8:	4b18      	ldr	r3, [pc, #96]	; (801052c <EEPROM_Load+0x548>)
 80104ca:	001a      	movs	r2, r3
 80104cc:	3266      	adds	r2, #102	; 0x66
      DevCfg.sfh7776_threshold_lower = val_int;
 80104ce:	9906      	ldr	r1, [sp, #24]
      DevCfg.useSensor.sfh7776 = true;
 80104d0:	336c      	adds	r3, #108	; 0x6c
      DevCfg.sfh7776_threshold_lower = val_int;
 80104d2:	8011      	strh	r1, [r2, #0]
      DevCfg.useSensor.sfh7776 = true;
 80104d4:	2202      	movs	r2, #2
 80104d6:	7819      	ldrb	r1, [r3, #0]
 80104d8:	e7d1      	b.n	801047e <EEPROM_Load+0x49a>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD) {
 80104da:	2be8      	cmp	r3, #232	; 0xe8
 80104dc:	d103      	bne.n	80104e6 <EEPROM_Load+0x502>
      DevCfg.sfh7776_threshold_lower = val_int;
 80104de:	4b13      	ldr	r3, [pc, #76]	; (801052c <EEPROM_Load+0x548>)
 80104e0:	001a      	movs	r2, r3
 80104e2:	3268      	adds	r2, #104	; 0x68
 80104e4:	e7f3      	b.n	80104ce <EEPROM_Load+0x4ea>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_THRESHOLD) {
 80104e6:	2bf0      	cmp	r3, #240	; 0xf0
 80104e8:	d106      	bne.n	80104f8 <EEPROM_Load+0x514>
      DevCfg.bma400_threshold = val_int;
 80104ea:	4b10      	ldr	r3, [pc, #64]	; (801052c <EEPROM_Load+0x548>)
 80104ec:	9a06      	ldr	r2, [sp, #24]
 80104ee:	661a      	str	r2, [r3, #96]	; 0x60
      DevCfg.useSensor.bma400 = true;
 80104f0:	336c      	adds	r3, #108	; 0x6c
 80104f2:	2201      	movs	r2, #1
 80104f4:	7819      	ldrb	r1, [r3, #0]
 80104f6:	e7c2      	b.n	801047e <EEPROM_Load+0x49a>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_CONFIGURE) {
 80104f8:	2bf8      	cmp	r3, #248	; 0xf8
 80104fa:	d105      	bne.n	8010508 <EEPROM_Load+0x524>
      DevCfg.bma400_config = val_int;
 80104fc:	4b0b      	ldr	r3, [pc, #44]	; (801052c <EEPROM_Load+0x548>)
 80104fe:	9906      	ldr	r1, [sp, #24]
 8010500:	001a      	movs	r2, r3
 8010502:	3264      	adds	r2, #100	; 0x64
 8010504:	8011      	strh	r1, [r2, #0]
 8010506:	e7f3      	b.n	80104f0 <EEPROM_Load+0x50c>
      DEBUG_MSG("EEPROM ERR <RD Undefined 0x"), DebugLE(msg + debug_fieldpos, len - debug_fieldpos);
 8010508:	490a      	ldr	r1, [pc, #40]	; (8010534 <EEPROM_Load+0x550>)
 801050a:	2000      	movs	r0, #0
 801050c:	f7fb fb70 	bl	800bbf0 <SEGGER_RTT_WriteString>
 8010510:	1b79      	subs	r1, r7, r5
 8010512:	9801      	ldr	r0, [sp, #4]
 8010514:	b289      	uxth	r1, r1
 8010516:	f7ff fb3d 	bl	800fb94 <DebugLE>
      DBG_PRINTF(", TAGNR %u, TAGTYPE %u, Unknown key-value\n", tagnr, tagtype);
 801051a:	9b02      	ldr	r3, [sp, #8]
 801051c:	9a05      	ldr	r2, [sp, #20]
 801051e:	4906      	ldr	r1, [pc, #24]	; (8010538 <EEPROM_Load+0x554>)
 8010520:	2000      	movs	r0, #0
 8010522:	f7fb fd38 	bl	800bf96 <SEGGER_RTT_printf>
 8010526:	e69f      	b.n	8010268 <EEPROM_Load+0x284>
      debug_msg = ", Out-of-bounds tag w/o value\n";
 8010528:	4c04      	ldr	r4, [pc, #16]	; (801053c <EEPROM_Load+0x558>)
 801052a:	e636      	b.n	801019a <EEPROM_Load+0x1b6>
 801052c:	200000e0 	.word	0x200000e0
 8010530:	08081008 	.word	0x08081008
 8010534:	08019978 	.word	0x08019978
 8010538:	08019994 	.word	0x08019994
 801053c:	08019925 	.word	0x08019925

08010540 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8010540:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010542:	2404      	movs	r4, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010544:	2501      	movs	r5, #1
{
 8010546:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010548:	2214      	movs	r2, #20
 801054a:	2100      	movs	r1, #0
 801054c:	a803      	add	r0, sp, #12
 801054e:	f005 fd56 	bl	8015ffe <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010552:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010554:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010556:	4b51      	ldr	r3, [pc, #324]	; (801069c <MX_GPIO_Init+0x15c>)
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010558:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801055a:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SX126x_Reset_Pin, GPIO_PIN_RESET);
 801055c:	4f50      	ldr	r7, [pc, #320]	; (80106a0 <MX_GPIO_Init+0x160>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801055e:	4322      	orrs	r2, r4
 8010560:	62da      	str	r2, [r3, #44]	; 0x2c
 8010562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010564:	0030      	movs	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010566:	4022      	ands	r2, r4
 8010568:	9200      	str	r2, [sp, #0]
 801056a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801056c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801056e:	432a      	orrs	r2, r5
 8010570:	62da      	str	r2, [r3, #44]	; 0x2c
 8010572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010574:	402a      	ands	r2, r5
 8010576:	9201      	str	r2, [sp, #4]
 8010578:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801057a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057c:	430a      	orrs	r2, r1
 801057e:	62da      	str	r2, [r3, #44]	; 0x2c
 8010580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010582:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010584:	400b      	ands	r3, r1
 8010586:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8010588:	4946      	ldr	r1, [pc, #280]	; (80106a4 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801058a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 801058c:	f7fc ff00 	bl	800d390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SX126x_Reset_Pin, GPIO_PIN_RESET);
 8010590:	2200      	movs	r2, #0
 8010592:	0038      	movs	r0, r7
 8010594:	2113      	movs	r1, #19
 8010596:	f7fc fefb 	bl	800d390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button0_Pin|Reed_Switch_Pin;
 801059a:	4b43      	ldr	r3, [pc, #268]	; (80106a8 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801059c:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = Button0_Pin|Reed_Switch_Pin;
 801059e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80105a0:	23c4      	movs	r3, #196	; 0xc4
 80105a2:	039b      	lsls	r3, r3, #14
 80105a4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105a6:	ab03      	add	r3, sp, #12
 80105a8:	0030      	movs	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80105aa:	9105      	str	r1, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105ac:	0019      	movs	r1, r3
 80105ae:	f7fc fe23 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NFC_Int_Pin|LIGHT_Int_Pin;
 80105b2:	4b3e      	ldr	r3, [pc, #248]	; (80106ac <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105b4:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = NFC_Int_Pin|LIGHT_Int_Pin;
 80105b6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80105b8:	2384      	movs	r3, #132	; 0x84
 80105ba:	039b      	lsls	r3, r3, #14
 80105bc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105be:	ab03      	add	r3, sp, #12
 80105c0:	0019      	movs	r1, r3
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80105c2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105c4:	f7fc fe18 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80105c8:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = RF_Switch_Pin;
 80105ca:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105cc:	2400      	movs	r4, #0
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 80105ce:	ab03      	add	r3, sp, #12
 80105d0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80105d2:	9105      	str	r1, [sp, #20]
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 80105d4:	0019      	movs	r1, r3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105d6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 80105da:	f7fc fe0d 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_Int_Pin;
 80105de:	2308      	movs	r3, #8
 80105e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80105e2:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 80105e4:	aa03      	add	r2, sp, #12
 80105e6:	0011      	movs	r1, r2
 80105e8:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80105ea:	035b      	lsls	r3, r3, #13
 80105ec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105ee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 80105f0:	f7fc fe02 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80105f4:	2102      	movs	r1, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105f6:	aa03      	add	r2, sp, #12
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
 80105f8:	4b2d      	ldr	r3, [pc, #180]	; (80106b0 <MX_GPIO_Init+0x170>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105fa:	0030      	movs	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80105fc:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105fe:	0011      	movs	r1, r2
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
 8010600:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010602:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010604:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010606:	f7fc fdf7 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801060a:	2102      	movs	r1, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 801060c:	0038      	movs	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801060e:	9105      	str	r1, [sp, #20]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8010610:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_1_Pin;
 8010612:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010614:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010616:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8010618:	f7fc fdee 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_2_Pin|SX126x_Reset_Pin;
 801061c:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801061e:	0038      	movs	r0, r7
 8010620:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_2_Pin|SX126x_Reset_Pin;
 8010622:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010624:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010626:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010628:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801062a:	f7fc fde5 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 801062e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 8010630:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 8010632:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 8010634:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 8010636:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010638:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801063a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801063c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 801063e:	f7fc fddb 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 8010642:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 8010644:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 8010646:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 8010648:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 801064a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801064c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801064e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 8010650:	f7fc fdd2 	bl	800d1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX126x_DIO1_Pin;
 8010654:	2320      	movs	r3, #32
 8010656:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010658:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 801065a:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801065c:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 801065e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010660:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010662:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 8010664:	f7fc fdc8 	bl	800d1f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8010668:	0022      	movs	r2, r4
 801066a:	2103      	movs	r1, #3
 801066c:	2005      	movs	r0, #5
 801066e:	f7fc fb4b 	bl	800cd08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8010672:	2005      	movs	r0, #5
 8010674:	f7fc fb72 	bl	800cd5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8010678:	0022      	movs	r2, r4
 801067a:	2103      	movs	r1, #3
 801067c:	2006      	movs	r0, #6
 801067e:	f7fc fb43 	bl	800cd08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8010682:	2006      	movs	r0, #6
 8010684:	f7fc fb6a 	bl	800cd5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8010688:	0022      	movs	r2, r4
 801068a:	0029      	movs	r1, r5
 801068c:	2007      	movs	r0, #7
 801068e:	f7fc fb3b 	bl	800cd08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8010692:	2007      	movs	r0, #7
 8010694:	f7fc fb62 	bl	800cd5c <HAL_NVIC_EnableIRQ>

}
 8010698:	b009      	add	sp, #36	; 0x24
 801069a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801069c:	40021000 	.word	0x40021000
 80106a0:	50000400 	.word	0x50000400
 80106a4:	00001114 	.word	0x00001114
 80106a8:	00000201 	.word	0x00000201
 80106ac:	00000402 	.word	0x00000402
 80106b0:	00001010 	.word	0x00001010

080106b4 <LEDBlinkTask>:
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, ledPin);
    HAL_Delay(1000);
  }
}

void LEDBlinkTask(void* info) {
 80106b4:	b570      	push	{r4, r5, r6, lr}
  } else {
    CLEAR_BIT(EXTI->IMR, EXTI_IMR_IM0);
  }
#endif

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80106b6:	2601      	movs	r6, #1
void LEDBlinkTask(void* info) {
 80106b8:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80106ba:	4d07      	ldr	r5, [pc, #28]	; (80106d8 <LEDBlinkTask+0x24>)
  uint8_t useGreenColor = (uint32_t) info >> 1 & 0x1;
 80106bc:	0842      	lsrs	r2, r0, #1
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80106be:	0031      	movs	r1, r6
 80106c0:	0028      	movs	r0, r5
 80106c2:	4032      	ands	r2, r6
 80106c4:	f7fc fe64 	bl	800d390 <HAL_GPIO_WritePin>
  uint8_t useRedColor = (uint32_t) info >> 2 & 0x1;
 80106c8:	08a2      	lsrs	r2, r4, #2
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, useRedColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80106ca:	0028      	movs	r0, r5
 80106cc:	4032      	ands	r2, r6
 80106ce:	2102      	movs	r1, #2
 80106d0:	f7fc fe5e 	bl	800d390 <HAL_GPIO_WritePin>
}
 80106d4:	bd70      	pop	{r4, r5, r6, pc}
 80106d6:	46c0      	nop			; (mov r8, r8)
 80106d8:	50000400 	.word	0x50000400

080106dc <I2C_Scan>:
uint32_t I2C_Scan(void) {
 80106dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  DEBUG_MSG("Scanning I2C bus:\n");
 80106de:	2402      	movs	r4, #2
 80106e0:	2000      	movs	r0, #0
  for(uint8_t k = 1; k < 128; k++) {
 80106e2:	2780      	movs	r7, #128	; 0x80
  DEBUG_MSG("Scanning I2C bus:\n");
 80106e4:	4910      	ldr	r1, [pc, #64]	; (8010728 <I2C_Scan+0x4c>)
 80106e6:	f7fb fa83 	bl	800bbf0 <SEGGER_RTT_WriteString>
  uint32_t device_count = 0;
 80106ea:	2500      	movs	r5, #0
    HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, k << 1, 2, 2);
 80106ec:	0026      	movs	r6, r4
  for(uint8_t k = 1; k < 128; k++) {
 80106ee:	007f      	lsls	r7, r7, #1
    HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, k << 1, 2, 2);
 80106f0:	0033      	movs	r3, r6
 80106f2:	0032      	movs	r2, r6
 80106f4:	480d      	ldr	r0, [pc, #52]	; (801072c <I2C_Scan+0x50>)
 80106f6:	b2a1      	uxth	r1, r4
 80106f8:	f7fd fafe 	bl	800dcf8 <HAL_I2C_IsDeviceReady>
    if (result == HAL_OK) {
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d10d      	bne.n	801071c <I2C_Scan+0x40>
      DEBUG_PRINTF("0x%02x\n", k << 1); // Received an ACK at that address
 8010700:	0022      	movs	r2, r4
 8010702:	490b      	ldr	r1, [pc, #44]	; (8010730 <I2C_Scan+0x54>)
 8010704:	f7fb fc47 	bl	800bf96 <SEGGER_RTT_printf>
      device_count++;
 8010708:	3501      	adds	r5, #1
  for(uint8_t k = 1; k < 128; k++) {
 801070a:	3402      	adds	r4, #2
 801070c:	42bc      	cmp	r4, r7
 801070e:	d1ef      	bne.n	80106f0 <I2C_Scan+0x14>
  DEBUG_MSG("\n");
 8010710:	4908      	ldr	r1, [pc, #32]	; (8010734 <I2C_Scan+0x58>)
 8010712:	2000      	movs	r0, #0
 8010714:	f7fb fa6c 	bl	800bbf0 <SEGGER_RTT_WriteString>
}
 8010718:	0028      	movs	r0, r5
 801071a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      DEBUG_MSG("."); // No ACK received at that address
 801071c:	4906      	ldr	r1, [pc, #24]	; (8010738 <I2C_Scan+0x5c>)
 801071e:	2000      	movs	r0, #0
 8010720:	f7fb fa66 	bl	800bbf0 <SEGGER_RTT_WriteString>
 8010724:	e7f1      	b.n	801070a <I2C_Scan+0x2e>
 8010726:	46c0      	nop			; (mov r8, r8)
 8010728:	08019c1f 	.word	0x08019c1f
 801072c:	20001898 	.word	0x20001898
 8010730:	0801a5ed 	.word	0x0801a5ed
 8010734:	080191ba 	.word	0x080191ba
 8010738:	080199e3 	.word	0x080199e3

0801073c <getBatteryVoltage>:
uint32_t getBatteryVoltage() {
 801073c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  while (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK);
 801073e:	4c18      	ldr	r4, [pc, #96]	; (80107a0 <getBatteryVoltage+0x64>)
 8010740:	2100      	movs	r1, #0
 8010742:	0020      	movs	r0, r4
 8010744:	f7fc fa8c 	bl	800cc60 <HAL_ADCEx_Calibration_Start>
 8010748:	2800      	cmp	r0, #0
 801074a:	d1f8      	bne.n	801073e <getBatteryVoltage+0x2>
  VREFINT_CAL = *p; // read the value at pointer address
 801074c:	4b15      	ldr	r3, [pc, #84]	; (80107a4 <getBatteryVoltage+0x68>)
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 801074e:	2202      	movs	r2, #2
  VREFINT_CAL = *p; // read the value at pointer address
 8010750:	881d      	ldrh	r5, [r3, #0]
  volatile uint16_t adc_value[2] = { 0, 0 };
 8010752:	ab01      	add	r3, sp, #4
 8010754:	8018      	strh	r0, [r3, #0]
 8010756:	8058      	strh	r0, [r3, #2]
 8010758:	9b01      	ldr	r3, [sp, #4]
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 801075a:	4669      	mov	r1, sp
 801075c:	0020      	movs	r0, r4
  volatile uint16_t adc_value[2] = { 0, 0 };
 801075e:	9300      	str	r3, [sp, #0]
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 8010760:	f7fc f958 	bl	800ca14 <HAL_ADC_Start_DMA>
  HAL_Delay(10);
 8010764:	200a      	movs	r0, #10
 8010766:	f7fb ff9f 	bl	800c6a8 <HAL_Delay>
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 801076a:	466b      	mov	r3, sp
  HAL_ADC_Stop_DMA(&hadc);
 801076c:	0020      	movs	r0, r4
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 801076e:	885e      	ldrh	r6, [r3, #2]
  HAL_ADC_Stop_DMA(&hadc);
 8010770:	f7fc f998 	bl	800caa4 <HAL_ADC_Stop_DMA>
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 8010774:	0028      	movs	r0, r5
 8010776:	f7f2 fa2d 	bl	8002bd4 <__aeabi_ui2d>
 801077a:	2200      	movs	r2, #0
 801077c:	4b0a      	ldr	r3, [pc, #40]	; (80107a8 <getBatteryVoltage+0x6c>)
 801077e:	f7f1 fbc5 	bl	8001f0c <__aeabi_dmul>
 8010782:	b2b6      	uxth	r6, r6
 8010784:	0004      	movs	r4, r0
 8010786:	0030      	movs	r0, r6
 8010788:	000d      	movs	r5, r1
 801078a:	f7f2 f9f3 	bl	8002b74 <__aeabi_i2d>
 801078e:	0002      	movs	r2, r0
 8010790:	000b      	movs	r3, r1
 8010792:	0020      	movs	r0, r4
 8010794:	0029      	movs	r1, r5
 8010796:	f7f0 ffb7 	bl	8001708 <__aeabi_ddiv>
 801079a:	f7ef fef3 	bl	8000584 <__aeabi_d2uiz>
}
 801079e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80107a0:	20001784 	.word	0x20001784
 80107a4:	1ff80078 	.word	0x1ff80078
 80107a8:	40a77000 	.word	0x40a77000

080107ac <LEDBlink>:
 *   to prevent input overlay and therefore ambiguity.
 *   Thus Performing blinks while Button is masked by LEDBlink, is undefined behaviour.
 */
uint32_t LEDBlink(enum LEDBlinkPattern pattern) {
  struct task t;
  uint32_t when = tasks_ticks + 1;
 80107ac:	4b3c      	ldr	r3, [pc, #240]	; (80108a0 <LEDBlink+0xf4>)
uint32_t LEDBlink(enum LEDBlinkPattern pattern) {
 80107ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t when = tasks_ticks + 1;
 80107b0:	681d      	ldr	r5, [r3, #0]
  t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 80107b2:	2302      	movs	r3, #2
uint32_t LEDBlink(enum LEDBlinkPattern pattern) {
 80107b4:	b085      	sub	sp, #20
  t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 80107b6:	9302      	str	r3, [sp, #8]
  t.when = when;
  t.cb = &LEDBlinkTask;
 80107b8:	4b3a      	ldr	r3, [pc, #232]	; (80108a4 <LEDBlink+0xf8>)
  uint32_t when = tasks_ticks + 1;
 80107ba:	1c6c      	adds	r4, r5, #1
  t.cb = &LEDBlinkTask;
 80107bc:	9303      	str	r3, [sp, #12]

  /* 1x Green Blinks 1s, Total 1s. */
  switch(pattern) {
 80107be:	2806      	cmp	r0, #6
 80107c0:	d825      	bhi.n	801080e <LEDBlink+0x62>
 80107c2:	002e      	movs	r6, r5
 80107c4:	360b      	adds	r6, #11
 80107c6:	f7ef fcb1 	bl	800012c <__gnu_thumb1_case_uqi>
 80107ca:	0b04      	.short	0x0b04
 80107cc:	4c494625 	.word	0x4c494625
 80107d0:	68          	.byte	0x68
 80107d1:	00          	.byte	0x00
  case BlinkPattern_G: {
    tasks_add(t);
 80107d2:	0020      	movs	r0, r4
 80107d4:	9902      	ldr	r1, [sp, #8]
    break;
  }
  /* 1x Orange Blinks 1s. Total 1s. */
  case BlinkPattern_B: {
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_RED | LEDBLINK_COLOR_GREEN);
    tasks_add(t);
 80107d6:	9a03      	ldr	r2, [sp, #12]
 80107d8:	f003 fdce 	bl	8014378 <tasks_add>
    t.arg = (void*) LEDBLINK_BUTTON_ENABLE;
    t.when = when + 10;
 80107dc:	0034      	movs	r4, r6
 80107de:	e011      	b.n	8010804 <LEDBlink+0x58>
    tasks_add(t);
 80107e0:	0020      	movs	r0, r4
 80107e2:	9902      	ldr	r1, [sp, #8]
    tasks_add(t);
 80107e4:	9a03      	ldr	r2, [sp, #12]
 80107e6:	f003 fdc7 	bl	8014378 <tasks_add>
    tasks_add(t);
 80107ea:	2100      	movs	r1, #0
 80107ec:	9a03      	ldr	r2, [sp, #12]
 80107ee:	0030      	movs	r0, r6
 80107f0:	f003 fdc2 	bl	8014378 <tasks_add>
    t.when = when + 20;
 80107f4:	0028      	movs	r0, r5
    tasks_add(t);
 80107f6:	2102      	movs	r1, #2
    t.when = when + 30;
 80107f8:	002c      	movs	r4, r5
    tasks_add(t);
 80107fa:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 80107fc:	3015      	adds	r0, #21
    tasks_add(t);
 80107fe:	f003 fdbb 	bl	8014378 <tasks_add>
    t.when = when + 30;
 8010802:	341f      	adds	r4, #31
    tasks_add(t);
 8010804:	0020      	movs	r0, r4
 8010806:	2101      	movs	r1, #1
 8010808:	9a03      	ldr	r2, [sp, #12]
 801080a:	f003 fdb5 	bl	8014378 <tasks_add>
    break;
  }
  }
  return t.when;
}
 801080e:	0020      	movs	r0, r4
 8010810:	b005      	add	sp, #20
 8010812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t.arg = (void*) LEDBLINK_BUTTON_DISABLE;
 8010814:	2700      	movs	r7, #0
    tasks_add(t);
 8010816:	0020      	movs	r0, r4
 8010818:	9902      	ldr	r1, [sp, #8]
 801081a:	9a03      	ldr	r2, [sp, #12]
 801081c:	f003 fdac 	bl	8014378 <tasks_add>
    tasks_add(t);
 8010820:	0039      	movs	r1, r7
 8010822:	9a03      	ldr	r2, [sp, #12]
 8010824:	0030      	movs	r0, r6
 8010826:	f003 fda7 	bl	8014378 <tasks_add>
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 801082a:	2402      	movs	r4, #2
    t.when = when + 20;
 801082c:	0028      	movs	r0, r5
    tasks_add(t);
 801082e:	0021      	movs	r1, r4
 8010830:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 8010832:	3015      	adds	r0, #21
    tasks_add(t);
 8010834:	f003 fda0 	bl	8014378 <tasks_add>
    t.when = when + 30;
 8010838:	0028      	movs	r0, r5
    tasks_add(t);
 801083a:	0039      	movs	r1, r7
 801083c:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 30;
 801083e:	301f      	adds	r0, #31
    tasks_add(t);
 8010840:	f003 fd9a 	bl	8014378 <tasks_add>
    t.when = when + 40;
 8010844:	0028      	movs	r0, r5
    tasks_add(t);
 8010846:	0021      	movs	r1, r4
    t.when = when + 40;
 8010848:	3029      	adds	r0, #41	; 0x29
    t.when = when + 50;
 801084a:	002c      	movs	r4, r5
    tasks_add(t);
 801084c:	9a03      	ldr	r2, [sp, #12]
 801084e:	f003 fd93 	bl	8014378 <tasks_add>
    t.when = when + 50;
 8010852:	3433      	adds	r4, #51	; 0x33
    tasks_add(t);
 8010854:	e7d6      	b.n	8010804 <LEDBlink+0x58>
    tasks_add(t);
 8010856:	0020      	movs	r0, r4
 8010858:	2104      	movs	r1, #4
 801085a:	e7bc      	b.n	80107d6 <LEDBlink+0x2a>
    tasks_add(t);
 801085c:	0020      	movs	r0, r4
 801085e:	2104      	movs	r1, #4
 8010860:	e7c0      	b.n	80107e4 <LEDBlink+0x38>
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_RED);
 8010862:	2704      	movs	r7, #4
    tasks_add(t);
 8010864:	0020      	movs	r0, r4
    t.arg = (void*) LEDBLINK_BUTTON_DISABLE;
 8010866:	2400      	movs	r4, #0
    tasks_add(t);
 8010868:	0039      	movs	r1, r7
 801086a:	9a03      	ldr	r2, [sp, #12]
 801086c:	f003 fd84 	bl	8014378 <tasks_add>
    tasks_add(t);
 8010870:	0021      	movs	r1, r4
 8010872:	9a03      	ldr	r2, [sp, #12]
 8010874:	0030      	movs	r0, r6
 8010876:	f003 fd7f 	bl	8014378 <tasks_add>
    t.when = when + 20;
 801087a:	0028      	movs	r0, r5
    tasks_add(t);
 801087c:	0039      	movs	r1, r7
 801087e:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 8010880:	3015      	adds	r0, #21
    tasks_add(t);
 8010882:	f003 fd79 	bl	8014378 <tasks_add>
    t.when = when + 30;
 8010886:	0028      	movs	r0, r5
    tasks_add(t);
 8010888:	0021      	movs	r1, r4
 801088a:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 30;
 801088c:	301f      	adds	r0, #31
    tasks_add(t);
 801088e:	f003 fd73 	bl	8014378 <tasks_add>
    t.when = when + 40;
 8010892:	0028      	movs	r0, r5
    tasks_add(t);
 8010894:	0039      	movs	r1, r7
    t.when = when + 40;
 8010896:	3029      	adds	r0, #41	; 0x29
 8010898:	e7d7      	b.n	801084a <LEDBlink+0x9e>
    tasks_add(t);
 801089a:	0020      	movs	r0, r4
 801089c:	2106      	movs	r1, #6
 801089e:	e79a      	b.n	80107d6 <LEDBlink+0x2a>
 80108a0:	20001b5c 	.word	0x20001b5c
 80108a4:	080106b5 	.word	0x080106b5

080108a8 <HW_EnterStopMode>:
  __HAL_RCC_PWR_CLK_ENABLE(); // Enable power control clock

  hwSlept = true;
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // | PWR_CR_CWUF
  HW_ExitStopMode();
}
 80108a8:	4770      	bx	lr
	...

080108ac <HW_EraseEEPROM>:
  ST25DV_SetMBEN_Dyn(&St25Dv_Obj);

  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
}

void HW_EraseEEPROM(uint32_t address) {
 80108ac:	b510      	push	{r4, lr}
 80108ae:	0004      	movs	r4, r0
  HAL_FLASHEx_DATAEEPROM_Unlock();
 80108b0:	f7fc fc44 	bl	800d13c <HAL_FLASHEx_DATAEEPROM_Unlock>
  if (HAL_FLASHEx_DATAEEPROM_Erase(address) != HAL_OK) {
 80108b4:	0020      	movs	r0, r4
 80108b6:	f7fc fc63 	bl	800d180 <HAL_FLASHEx_DATAEEPROM_Erase>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d004      	beq.n	80108c8 <HW_EraseEEPROM+0x1c>
    DBG_PRINTF("ERROR ERASING EEPROM: 0x%02X!\n", address);
 80108be:	0022      	movs	r2, r4
 80108c0:	2000      	movs	r0, #0
 80108c2:	4903      	ldr	r1, [pc, #12]	; (80108d0 <HW_EraseEEPROM+0x24>)
 80108c4:	f7fb fb67 	bl	800bf96 <SEGGER_RTT_printf>
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 80108c8:	f7fc fc50 	bl	800d16c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80108cc:	bd10      	pop	{r4, pc}
 80108ce:	46c0      	nop			; (mov r8, r8)
 80108d0:	08019c32 	.word	0x08019c32

080108d4 <HW_ProgramEEPROM>:

void HW_ProgramEEPROM(uint32_t address, uint32_t data) {
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	000d      	movs	r5, r1
 80108d8:	0004      	movs	r4, r0
  HAL_FLASHEx_DATAEEPROM_Unlock();
 80108da:	f7fc fc2f 	bl	800d13c <HAL_FLASHEx_DATAEEPROM_Unlock>
  if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, address, data)
 80108de:	002a      	movs	r2, r5
 80108e0:	0021      	movs	r1, r4
 80108e2:	2002      	movs	r0, #2
 80108e4:	f7fc fc5e 	bl	800d1a4 <HAL_FLASHEx_DATAEEPROM_Program>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d004      	beq.n	80108f6 <HW_ProgramEEPROM+0x22>
      != HAL_OK) {
    DBG_PRINTF("ERROR PROGRAMMING EEPROM: 0x%02X!\n", address);
 80108ec:	0022      	movs	r2, r4
 80108ee:	2000      	movs	r0, #0
 80108f0:	4902      	ldr	r1, [pc, #8]	; (80108fc <HW_ProgramEEPROM+0x28>)
 80108f2:	f7fb fb50 	bl	800bf96 <SEGGER_RTT_printf>
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 80108f6:	f7fc fc39 	bl	800d16c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80108fa:	bd70      	pop	{r4, r5, r6, pc}
 80108fc:	08019c51 	.word	0x08019c51

08010900 <HW_ResetEEPROM>:

void HW_ResetEEPROM(void *addr, size_t size) {
 8010900:	b570      	push	{r4, r5, r6, lr}
 8010902:	0005      	movs	r5, r0
 8010904:	000c      	movs	r4, r1
 8010906:	002e      	movs	r6, r5
  HAL_FLASHEx_DATAEEPROM_Unlock();
 8010908:	f7fc fc18 	bl	800d13c <HAL_FLASHEx_DATAEEPROM_Unlock>
  // (size + 3) / 4 is a method of rounding up integer division
  for(size_t i = 0; i < (size + 3) / 4; i++) {
 801090c:	3403      	adds	r4, #3
 801090e:	08a4      	lsrs	r4, r4, #2
 8010910:	00a4      	lsls	r4, r4, #2
 8010912:	1964      	adds	r4, r4, r5
 8010914:	42a6      	cmp	r6, r4
 8010916:	d102      	bne.n	801091e <HW_ResetEEPROM+0x1e>
    if (HAL_FLASHEx_DATAEEPROM_Erase((uint32_t)addr + i * 4) != HAL_OK) {
      DBG_PRINTF("ERROR CLEARING EEPROM: 0x%02X!\n", addr);
      Breakpoint();
    }
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 8010918:	f7fc fc28 	bl	800d16c <HAL_FLASHEx_DATAEEPROM_Lock>

}
 801091c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASHEx_DATAEEPROM_Erase((uint32_t)addr + i * 4) != HAL_OK) {
 801091e:	0030      	movs	r0, r6
 8010920:	f7fc fc2e 	bl	800d180 <HAL_FLASHEx_DATAEEPROM_Erase>
 8010924:	2800      	cmp	r0, #0
 8010926:	d005      	beq.n	8010934 <HW_ResetEEPROM+0x34>
      DBG_PRINTF("ERROR CLEARING EEPROM: 0x%02X!\n", addr);
 8010928:	002a      	movs	r2, r5
 801092a:	4903      	ldr	r1, [pc, #12]	; (8010938 <HW_ResetEEPROM+0x38>)
 801092c:	2000      	movs	r0, #0
 801092e:	f7fb fb32 	bl	800bf96 <SEGGER_RTT_printf>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds - 1, seconds - 1 <= UINT16_MAX ?
      RTC_WAKEUPCLOCK_CK_SPRE_16BITS : RTC_WAKEUPCLOCK_CK_SPRE_17BITS);
}

void Breakpoint(void) {
  asm("nop");
 8010932:	46c0      	nop			; (mov r8, r8)
  for(size_t i = 0; i < (size + 3) / 4; i++) {
 8010934:	3604      	adds	r6, #4
 8010936:	e7ed      	b.n	8010914 <HW_ResetEEPROM+0x14>
 8010938:	08019c74 	.word	0x08019c74

0801093c <HW_WriteEEPROM>:
void HW_WriteEEPROM(void *addr, const void *buf, size_t size) {
 801093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801093e:	b087      	sub	sp, #28
 8010940:	0004      	movs	r4, r0
 8010942:	0015      	movs	r5, r2
 8010944:	9102      	str	r1, [sp, #8]
  if(HAL_FLASHEx_DATAEEPROM_Unlock()) goto err;
 8010946:	f7fc fbf9 	bl	800d13c <HAL_FLASHEx_DATAEEPROM_Unlock>
 801094a:	2800      	cmp	r0, #0
 801094c:	d147      	bne.n	80109de <HW_WriteEEPROM+0xa2>
  if((uintptr_t)addr % 4) {
 801094e:	2303      	movs	r3, #3
 8010950:	0020      	movs	r0, r4
 8010952:	4018      	ands	r0, r3
 8010954:	421c      	tst	r4, r3
 8010956:	d01a      	beq.n	801098e <HW_WriteEEPROM+0x52>
    size_t off = (uintptr_t)addr % 4, len = 4 - off > size ? size : 4 - off;
 8010958:	2604      	movs	r6, #4
 801095a:	1a36      	subs	r6, r6, r0
 801095c:	42ae      	cmp	r6, r5
 801095e:	d900      	bls.n	8010962 <HW_WriteEEPROM+0x26>
 8010960:	002e      	movs	r6, r5
    uint32_t *prev = (uint32_t*)((uintptr_t)addr >> 2 << 2), word = *prev;
 8010962:	0027      	movs	r7, r4
 8010964:	439f      	bics	r7, r3
 8010966:	683b      	ldr	r3, [r7, #0]
    memcpy((char*)&word + off, buf, len);
 8010968:	0032      	movs	r2, r6
    uint32_t *prev = (uint32_t*)((uintptr_t)addr >> 2 << 2), word = *prev;
 801096a:	9305      	str	r3, [sp, #20]
    memcpy((char*)&word + off, buf, len);
 801096c:	ab05      	add	r3, sp, #20
 801096e:	9902      	ldr	r1, [sp, #8]
 8010970:	1818      	adds	r0, r3, r0
 8010972:	f005 fb3b 	bl	8015fec <memcpy>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)prev, word)) goto err;
 8010976:	0039      	movs	r1, r7
 8010978:	2002      	movs	r0, #2
 801097a:	9a05      	ldr	r2, [sp, #20]
 801097c:	f7fc fc12 	bl	800d1a4 <HAL_FLASHEx_DATAEEPROM_Program>
 8010980:	2800      	cmp	r0, #0
 8010982:	d12c      	bne.n	80109de <HW_WriteEEPROM+0xa2>
    addr = prev + 1, buf = (char*)buf + len, size -= len;
 8010984:	9b02      	ldr	r3, [sp, #8]
 8010986:	1d3c      	adds	r4, r7, #4
 8010988:	199b      	adds	r3, r3, r6
 801098a:	9302      	str	r3, [sp, #8]
 801098c:	1bad      	subs	r5, r5, r6
  assert((uintptr_t)addr % 4 == 0);
 801098e:	2703      	movs	r7, #3
 8010990:	0026      	movs	r6, r4
 8010992:	403e      	ands	r6, r7
 8010994:	423c      	tst	r4, r7
 8010996:	d01c      	beq.n	80109d2 <HW_WriteEEPROM+0x96>
 8010998:	21e0      	movs	r1, #224	; 0xe0
 801099a:	4b17      	ldr	r3, [pc, #92]	; (80109f8 <HW_WriteEEPROM+0xbc>)
 801099c:	4a17      	ldr	r2, [pc, #92]	; (80109fc <HW_WriteEEPROM+0xc0>)
 801099e:	4818      	ldr	r0, [pc, #96]	; (8010a00 <HW_WriteEEPROM+0xc4>)
 80109a0:	31ff      	adds	r1, #255	; 0xff
 80109a2:	f005 faaf 	bl	8015f04 <__assert_func>
    memcpy(&word, (char*)buf + i * 4, i * 4 + 4 > size ? (word = ((uint32_t*)addr)[i], size % 4) : 4);
 80109a6:	9b02      	ldr	r3, [sp, #8]
 80109a8:	2204      	movs	r2, #4
 80109aa:	1999      	adds	r1, r3, r6
 80109ac:	1d33      	adds	r3, r6, #4
 80109ae:	9303      	str	r3, [sp, #12]
 80109b0:	429d      	cmp	r5, r3
 80109b2:	d203      	bcs.n	80109bc <HW_WriteEEPROM+0x80>
 80109b4:	002a      	movs	r2, r5
 80109b6:	59a3      	ldr	r3, [r4, r6]
 80109b8:	403a      	ands	r2, r7
 80109ba:	9305      	str	r3, [sp, #20]
 80109bc:	a805      	add	r0, sp, #20
 80109be:	f005 fb15 	bl	8015fec <memcpy>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)addr + i * 4, word)) goto err;
 80109c2:	2002      	movs	r0, #2
 80109c4:	9a05      	ldr	r2, [sp, #20]
 80109c6:	19a1      	adds	r1, r4, r6
 80109c8:	f7fc fbec 	bl	800d1a4 <HAL_FLASHEx_DATAEEPROM_Program>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	d106      	bne.n	80109de <HW_WriteEEPROM+0xa2>
  for(size_t i = 0; i * 4 < size; i++) {
 80109d0:	9e03      	ldr	r6, [sp, #12]
 80109d2:	42b5      	cmp	r5, r6
 80109d4:	d8e7      	bhi.n	80109a6 <HW_WriteEEPROM+0x6a>
  if(HAL_FLASHEx_DATAEEPROM_Lock()) goto err;
 80109d6:	f7fc fbc9 	bl	800d16c <HAL_FLASHEx_DATAEEPROM_Lock>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d009      	beq.n	80109f2 <HW_WriteEEPROM+0xb6>
  DBG_PRINTF("EEPROM <WR ERR %p buf:%p size:%zu err:%" PRIx32 "\n", addr, buf, size, HAL_FLASH_GetError());
 80109de:	f7fc fb6d 	bl	800d0bc <HAL_FLASH_GetError>
 80109e2:	0022      	movs	r2, r4
 80109e4:	9001      	str	r0, [sp, #4]
 80109e6:	9b02      	ldr	r3, [sp, #8]
 80109e8:	2000      	movs	r0, #0
 80109ea:	4906      	ldr	r1, [pc, #24]	; (8010a04 <HW_WriteEEPROM+0xc8>)
 80109ec:	9500      	str	r5, [sp, #0]
 80109ee:	f7fb fad2 	bl	800bf96 <SEGGER_RTT_printf>
}
 80109f2:	b007      	add	sp, #28
 80109f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109f6:	46c0      	nop			; (mov r8, r8)
 80109f8:	08019c94 	.word	0x08019c94
 80109fc:	08019d06 	.word	0x08019d06
 8010a00:	08019cad 	.word	0x08019cad
 8010a04:	08019cbf 	.word	0x08019cbf

08010a08 <HW_ChangePW>:
void HW_ChangePW(uint32_t password) {
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	0004      	movs	r4, r0
  HW_EraseEEPROM(EEPROM_PW);
 8010a0c:	4e08      	ldr	r6, [pc, #32]	; (8010a30 <HW_ChangePW+0x28>)
  HW_EraseEEPROM(EEPROM_PW_COMPLEMENT);
 8010a0e:	4d09      	ldr	r5, [pc, #36]	; (8010a34 <HW_ChangePW+0x2c>)
  HW_EraseEEPROM(EEPROM_PW);
 8010a10:	0030      	movs	r0, r6
 8010a12:	f7ff ff4b 	bl	80108ac <HW_EraseEEPROM>
  HW_EraseEEPROM(EEPROM_PW_COMPLEMENT);
 8010a16:	0028      	movs	r0, r5
 8010a18:	f7ff ff48 	bl	80108ac <HW_EraseEEPROM>
  HW_ProgramEEPROM(EEPROM_PW,             password);
 8010a1c:	0030      	movs	r0, r6
 8010a1e:	0021      	movs	r1, r4
 8010a20:	f7ff ff58 	bl	80108d4 <HW_ProgramEEPROM>
  HW_ProgramEEPROM(EEPROM_PW_COMPLEMENT, ~password);
 8010a24:	0028      	movs	r0, r5
 8010a26:	43e1      	mvns	r1, r4
 8010a28:	f7ff ff54 	bl	80108d4 <HW_ProgramEEPROM>
}
 8010a2c:	bd70      	pop	{r4, r5, r6, pc}
 8010a2e:	46c0      	nop			; (mov r8, r8)
 8010a30:	08080008 	.word	0x08080008
 8010a34:	0808000c 	.word	0x0808000c

08010a38 <HW_RTCGetMsTime>:
uint32_t HW_RTCGetMsTime(void) {
 8010a38:	b570      	push	{r4, r5, r6, lr}
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010a3a:	4e16      	ldr	r6, [pc, #88]	; (8010a94 <HW_RTCGetMsTime+0x5c>)
uint32_t HW_RTCGetMsTime(void) {
 8010a3c:	b090      	sub	sp, #64	; 0x40
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010a3e:	ac02      	add	r4, sp, #8
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010a40:	ad01      	add	r5, sp, #4
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010a42:	0021      	movs	r1, r4
 8010a44:	2200      	movs	r2, #0
 8010a46:	0030      	movs	r0, r6
 8010a48:	f7fe fd02 	bl	800f450 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	0029      	movs	r1, r5
 8010a50:	0030      	movs	r0, r6
 8010a52:	f7fe fd27 	bl	800f4a4 <HAL_RTC_GetDate>
  timeinfo.tm_sec  = ts.Seconds;
 8010a56:	78a3      	ldrb	r3, [r4, #2]
  seconds = mktime(&timeinfo);
 8010a58:	a807      	add	r0, sp, #28
  timeinfo.tm_sec  = ts.Seconds;
 8010a5a:	9307      	str	r3, [sp, #28]
  timeinfo.tm_min  = ts.Minutes;
 8010a5c:	7863      	ldrb	r3, [r4, #1]
 8010a5e:	9308      	str	r3, [sp, #32]
  timeinfo.tm_hour = ts.Hours;
 8010a60:	7823      	ldrb	r3, [r4, #0]
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010a62:	24fa      	movs	r4, #250	; 0xfa
  timeinfo.tm_hour = ts.Hours;
 8010a64:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_mday = ds.Date;
 8010a66:	78ab      	ldrb	r3, [r5, #2]
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010a68:	00a4      	lsls	r4, r4, #2
  timeinfo.tm_mday = ds.Date;
 8010a6a:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_mon  = ds.Month - 1;
 8010a6c:	786b      	ldrb	r3, [r5, #1]
 8010a6e:	3b01      	subs	r3, #1
 8010a70:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_year = ds.Year + 70;
 8010a72:	78eb      	ldrb	r3, [r5, #3]
 8010a74:	3346      	adds	r3, #70	; 0x46
 8010a76:	930c      	str	r3, [sp, #48]	; 0x30
  seconds = mktime(&timeinfo);
 8010a78:	f005 fb94 	bl	80161a4 <mktime>
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010a7c:	9904      	ldr	r1, [sp, #16]
  seconds = mktime(&timeinfo);
 8010a7e:	0005      	movs	r5, r0
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 8010a80:	9803      	ldr	r0, [sp, #12]
 8010a82:	1a08      	subs	r0, r1, r0
 8010a84:	4360      	muls	r0, r4
 8010a86:	3101      	adds	r1, #1
 8010a88:	f7ef fb6e 	bl	8000168 <__udivsi3>
 8010a8c:	436c      	muls	r4, r5
 8010a8e:	1900      	adds	r0, r0, r4
}
 8010a90:	b010      	add	sp, #64	; 0x40
 8010a92:	bd70      	pop	{r4, r5, r6, pc}
 8010a94:	200019a4 	.word	0x200019a4

08010a98 <HW_RTCGetSTime>:
uint32_t HW_RTCGetSTime(void) {
 8010a98:	b570      	push	{r4, r5, r6, lr}
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010a9a:	4e10      	ldr	r6, [pc, #64]	; (8010adc <HW_RTCGetSTime+0x44>)
uint32_t HW_RTCGetSTime(void) {
 8010a9c:	b090      	sub	sp, #64	; 0x40
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010a9e:	ad02      	add	r5, sp, #8
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010aa0:	ac01      	add	r4, sp, #4
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8010aa2:	0029      	movs	r1, r5
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	0030      	movs	r0, r6
 8010aa8:	f7fe fcd2 	bl	800f450 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8010aac:	2200      	movs	r2, #0
 8010aae:	0021      	movs	r1, r4
 8010ab0:	0030      	movs	r0, r6
 8010ab2:	f7fe fcf7 	bl	800f4a4 <HAL_RTC_GetDate>
  timeinfo.tm_hour = ts.Hours;
 8010ab6:	782b      	ldrb	r3, [r5, #0]
  seconds = mktime(&timeinfo);
 8010ab8:	a807      	add	r0, sp, #28
  timeinfo.tm_hour = ts.Hours;
 8010aba:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_min  = ts.Minutes;
 8010abc:	786b      	ldrb	r3, [r5, #1]
 8010abe:	9308      	str	r3, [sp, #32]
  timeinfo.tm_sec  = ts.Seconds;
 8010ac0:	78ab      	ldrb	r3, [r5, #2]
 8010ac2:	9307      	str	r3, [sp, #28]
  timeinfo.tm_mday = ds.Date;
 8010ac4:	78a3      	ldrb	r3, [r4, #2]
 8010ac6:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_mon  = ds.Month - 1;
 8010ac8:	7863      	ldrb	r3, [r4, #1]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_year = ds.Year + 70;
 8010ace:	78e3      	ldrb	r3, [r4, #3]
 8010ad0:	3346      	adds	r3, #70	; 0x46
 8010ad2:	930c      	str	r3, [sp, #48]	; 0x30
  seconds = mktime(&timeinfo);
 8010ad4:	f005 fb66 	bl	80161a4 <mktime>
}
 8010ad8:	b010      	add	sp, #64	; 0x40
 8010ada:	bd70      	pop	{r4, r5, r6, pc}
 8010adc:	200019a4 	.word	0x200019a4

08010ae0 <HW_ExitStopMode>:
  if(!hwSlept)
 8010ae0:	4b21      	ldr	r3, [pc, #132]	; (8010b68 <HW_ExitStopMode+0x88>)
void HW_ExitStopMode() {
 8010ae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(!hwSlept)
 8010ae4:	781a      	ldrb	r2, [r3, #0]
 8010ae6:	2a00      	cmp	r2, #0
 8010ae8:	d03c      	beq.n	8010b64 <HW_ExitStopMode+0x84>
  hwSlept = false;
 8010aea:	2500      	movs	r5, #0
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8010aec:	2007      	movs	r0, #7
  hwSlept = false;
 8010aee:	701d      	strb	r5, [r3, #0]
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8010af0:	f7fc f968 	bl	800cdc4 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8010af4:	2005      	movs	r0, #5
 8010af6:	f7fc f965 	bl	800cdc4 <HAL_NVIC_ClearPendingIRQ>
  MX_GPIO_Init();
 8010afa:	f7ff fd21 	bl	8010540 <MX_GPIO_Init>
  DBG_PRINTF("WAKE UP! RTC:%d SysTick:%d\n", HW_RTCGetSTime(), HAL_GetTick());
 8010afe:	f7ff ffcb 	bl	8010a98 <HW_RTCGetSTime>
 8010b02:	0004      	movs	r4, r0
 8010b04:	f7fb fdca 	bl	800c69c <HAL_GetTick>
 8010b08:	0022      	movs	r2, r4
 8010b0a:	0003      	movs	r3, r0
 8010b0c:	4917      	ldr	r1, [pc, #92]	; (8010b6c <HW_ExitStopMode+0x8c>)
 8010b0e:	0028      	movs	r0, r5
 8010b10:	f7fb fa41 	bl	800bf96 <SEGGER_RTT_printf>
  HAL_GPIO_WritePin(DC_Conv_Mode_GPIO_Port, DC_Conv_Mode_Pin, GPIO_PIN_SET);
 8010b14:	2180      	movs	r1, #128	; 0x80
 8010b16:	20a0      	movs	r0, #160	; 0xa0
 8010b18:	2201      	movs	r2, #1
 8010b1a:	0049      	lsls	r1, r1, #1
 8010b1c:	05c0      	lsls	r0, r0, #23
 8010b1e:	f7fc fc37 	bl	800d390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_Switch_GPIO_Port, RF_Switch_Pin, GPIO_PIN_SET);
 8010b22:	20a0      	movs	r0, #160	; 0xa0
 8010b24:	2201      	movs	r2, #1
 8010b26:	2104      	movs	r1, #4
 8010b28:	05c0      	lsls	r0, r0, #23
 8010b2a:	f7fc fc31 	bl	800d390 <HAL_GPIO_WritePin>
  if(!I2C_Scan()) {
 8010b2e:	f7ff fdd5 	bl	80106dc <I2C_Scan>
 8010b32:	42a8      	cmp	r0, r5
 8010b34:	d103      	bne.n	8010b3e <HW_ExitStopMode+0x5e>
    MX_I2C1_Init();
 8010b36:	f000 f891 	bl	8010c5c <MX_I2C1_Init>
    I2C_Scan();
 8010b3a:	f7ff fdcf 	bl	80106dc <I2C_Scan>
  SX126xReset();
 8010b3e:	f7f3 fd61 	bl	8004604 <SX126xReset>
  SX126xIoRfSwitchInit();
 8010b42:	f7f3 fd4e 	bl	80045e2 <SX126xIoRfSwitchInit>
  Radio.SetPublicNetwork(true);
 8010b46:	4c0a      	ldr	r4, [pc, #40]	; (8010b70 <HW_ExitStopMode+0x90>)
 8010b48:	2001      	movs	r0, #1
 8010b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	4798      	blx	r3
  Radio.Sleep();
 8010b50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010b52:	9301      	str	r3, [sp, #4]
 8010b54:	4798      	blx	r3
  ST25DV_SetMBEN_Dyn(&St25Dv_Obj);
 8010b56:	4807      	ldr	r0, [pc, #28]	; (8010b74 <HW_ExitStopMode+0x94>)
 8010b58:	f7fb fbe5 	bl	800c326 <ST25DV_SetMBEN_Dyn>
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 8010b5c:	211a      	movs	r1, #26
 8010b5e:	4806      	ldr	r0, [pc, #24]	; (8010b78 <HW_ExitStopMode+0x98>)
 8010b60:	f7fd fe14 	bl	800e78c <HAL_LPTIM_Counter_Start_IT>
}
 8010b64:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8010b66:	46c0      	nop			; (mov r8, r8)
 8010b68:	2000183c 	.word	0x2000183c
 8010b6c:	08019cea 	.word	0x08019cea
 8010b70:	0801abc8 	.word	0x0801abc8
 8010b74:	20001978 	.word	0x20001978
 8010b78:	20001908 	.word	0x20001908

08010b7c <HW_RTCWUTSet>:
void HW_RTCWUTSet(uint32_t seconds) {
 8010b7c:	b510      	push	{r4, lr}
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds - 1, seconds - 1 <= UINT16_MAX ?
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	d100      	bne.n	8010b84 <HW_RTCWUTSet+0x8>
 8010b82:	3001      	adds	r0, #1
 8010b84:	2380      	movs	r3, #128	; 0x80
 8010b86:	1e41      	subs	r1, r0, #1
 8010b88:	2204      	movs	r2, #4
 8010b8a:	025b      	lsls	r3, r3, #9
 8010b8c:	4299      	cmp	r1, r3
 8010b8e:	d300      	bcc.n	8010b92 <HW_RTCWUTSet+0x16>
 8010b90:	3202      	adds	r2, #2
 8010b92:	4802      	ldr	r0, [pc, #8]	; (8010b9c <HW_RTCWUTSet+0x20>)
 8010b94:	f7fe fca8 	bl	800f4e8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8010b98:	bd10      	pop	{r4, pc}
 8010b9a:	46c0      	nop			; (mov r8, r8)
 8010b9c:	200019a4 	.word	0x200019a4

08010ba0 <PrepareWakeup>:
void PrepareWakeup(enum WakeUpReason reason, uint32_t duration) {
 8010ba0:	b570      	push	{r4, r5, r6, lr}
 8010ba2:	0005      	movs	r5, r0
 8010ba4:	000c      	movs	r4, r1
  uint32_t now = HW_RTCGetSTime();
 8010ba6:	f7ff ff77 	bl	8010a98 <HW_RTCGetSTime>
 8010baa:	4b29      	ldr	r3, [pc, #164]	; (8010c50 <PrepareWakeup+0xb0>)
 8010bac:	0002      	movs	r2, r0
  switch(reason) {
 8010bae:	2d03      	cmp	r5, #3
 8010bb0:	d808      	bhi.n	8010bc4 <PrepareWakeup+0x24>
 8010bb2:	0028      	movs	r0, r5
 8010bb4:	f7ef faba 	bl	800012c <__gnu_thumb1_case_uqi>
 8010bb8:	41373c02 	.word	0x41373c02
  case WAKEUP_LRW_NONE:      wuh.dutycycle_due = wuh.schedmsg_due = wuh.bsec_due = 0;  break;
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	60d9      	str	r1, [r3, #12]
 8010bc0:	6059      	str	r1, [r3, #4]
 8010bc2:	6099      	str	r1, [r3, #8]
  if(wuh.dutycycle_due && wuh.dutycycle_due < now) wuh.dutycycle_due = now;
 8010bc4:	6899      	ldr	r1, [r3, #8]
 8010bc6:	2900      	cmp	r1, #0
 8010bc8:	d002      	beq.n	8010bd0 <PrepareWakeup+0x30>
 8010bca:	4291      	cmp	r1, r2
 8010bcc:	d200      	bcs.n	8010bd0 <PrepareWakeup+0x30>
 8010bce:	609a      	str	r2, [r3, #8]
  if(wuh.schedmsg_due  && wuh.schedmsg_due  < now) wuh.schedmsg_due  = now;
 8010bd0:	6859      	ldr	r1, [r3, #4]
 8010bd2:	2900      	cmp	r1, #0
 8010bd4:	d002      	beq.n	8010bdc <PrepareWakeup+0x3c>
 8010bd6:	4291      	cmp	r1, r2
 8010bd8:	d200      	bcs.n	8010bdc <PrepareWakeup+0x3c>
 8010bda:	605a      	str	r2, [r3, #4]
  if(wuh.bsec_due      && wuh.bsec_due      < now) wuh.bsec_due      = now;
 8010bdc:	68d9      	ldr	r1, [r3, #12]
 8010bde:	2900      	cmp	r1, #0
 8010be0:	d002      	beq.n	8010be8 <PrepareWakeup+0x48>
 8010be2:	4291      	cmp	r1, r2
 8010be4:	d200      	bcs.n	8010be8 <PrepareWakeup+0x48>
 8010be6:	60da      	str	r2, [r3, #12]
  wuh.reason = WAKEUP_LRW_NONE;
 8010be8:	2100      	movs	r1, #0
  if(wuh.dutycycle_due) {
 8010bea:	6898      	ldr	r0, [r3, #8]
  wuh.reason = WAKEUP_LRW_NONE;
 8010bec:	7019      	strb	r1, [r3, #0]
  if(wuh.dutycycle_due) {
 8010bee:	4288      	cmp	r0, r1
 8010bf0:	d001      	beq.n	8010bf6 <PrepareWakeup+0x56>
    wuh.reason = WAKEUP_LRW_DUTYCYCLE;
 8010bf2:	3102      	adds	r1, #2
 8010bf4:	7019      	strb	r1, [r3, #0]
  if(wuh.schedmsg_due && (!due || wuh.schedmsg_due < due)) {
 8010bf6:	6859      	ldr	r1, [r3, #4]
 8010bf8:	2900      	cmp	r1, #0
 8010bfa:	d006      	beq.n	8010c0a <PrepareWakeup+0x6a>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d001      	beq.n	8010c04 <PrepareWakeup+0x64>
 8010c00:	4288      	cmp	r0, r1
 8010c02:	d902      	bls.n	8010c0a <PrepareWakeup+0x6a>
    wuh.reason = WAKEUP_LRW_SCHEDMSG;
 8010c04:	2001      	movs	r0, #1
 8010c06:	7018      	strb	r0, [r3, #0]
 8010c08:	0008      	movs	r0, r1
  if(wuh.bsec_due && (!due || wuh.bsec_due < due)) {
 8010c0a:	68d9      	ldr	r1, [r3, #12]
 8010c0c:	2900      	cmp	r1, #0
 8010c0e:	d019      	beq.n	8010c44 <PrepareWakeup+0xa4>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	d001      	beq.n	8010c18 <PrepareWakeup+0x78>
 8010c14:	4281      	cmp	r1, r0
 8010c16:	d202      	bcs.n	8010c1e <PrepareWakeup+0x7e>
    wuh.reason = WAKEUP_BSEC_SAMPLE;
 8010c18:	2003      	movs	r0, #3
 8010c1a:	7018      	strb	r0, [r3, #0]
 8010c1c:	0008      	movs	r0, r1
    HW_RTCWUTSet(due - now);
 8010c1e:	1a80      	subs	r0, r0, r2
 8010c20:	f7ff ffac 	bl	8010b7c <HW_RTCWUTSet>
}
 8010c24:	bd70      	pop	{r4, r5, r6, pc}
  case WAKEUP_LRW_DUTYCYCLE: wuh.dutycycle_due = duration ? now + duration : 0;        break;
 8010c26:	2c00      	cmp	r4, #0
 8010c28:	d000      	beq.n	8010c2c <PrepareWakeup+0x8c>
 8010c2a:	18a4      	adds	r4, r4, r2
 8010c2c:	609c      	str	r4, [r3, #8]
 8010c2e:	e7c9      	b.n	8010bc4 <PrepareWakeup+0x24>
  case WAKEUP_LRW_SCHEDMSG:  wuh.schedmsg_due  = duration ? now + duration : 0;        break;
 8010c30:	2c00      	cmp	r4, #0
 8010c32:	d000      	beq.n	8010c36 <PrepareWakeup+0x96>
 8010c34:	18a4      	adds	r4, r4, r2
 8010c36:	605c      	str	r4, [r3, #4]
 8010c38:	e7c4      	b.n	8010bc4 <PrepareWakeup+0x24>
  case WAKEUP_BSEC_SAMPLE:   wuh.bsec_due      = duration ? now + duration : 0;        break;
 8010c3a:	2c00      	cmp	r4, #0
 8010c3c:	d000      	beq.n	8010c40 <PrepareWakeup+0xa0>
 8010c3e:	18a4      	adds	r4, r4, r2
 8010c40:	60dc      	str	r4, [r3, #12]
 8010c42:	e7bf      	b.n	8010bc4 <PrepareWakeup+0x24>
  if(due) {
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d1ea      	bne.n	8010c1e <PrepareWakeup+0x7e>
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8010c48:	4802      	ldr	r0, [pc, #8]	; (8010c54 <PrepareWakeup+0xb4>)
 8010c4a:	f7fe fccb 	bl	800f5e4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8010c4e:	e7e9      	b.n	8010c24 <PrepareWakeup+0x84>
 8010c50:	20001840 	.word	0x20001840
 8010c54:	200019a4 	.word	0x200019a4

08010c58 <Breakpoint>:
  asm("nop");
 8010c58:	46c0      	nop			; (mov r8, r8)
  // asm("bkpt 0x44");
}
 8010c5a:	4770      	bx	lr

08010c5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010c5c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010c5e:	4b14      	ldr	r3, [pc, #80]	; (8010cb0 <MX_I2C1_Init+0x54>)
 8010c60:	4c14      	ldr	r4, [pc, #80]	; (8010cb4 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00000000;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010c62:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8010c64:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000000;
 8010c66:	2300      	movs	r3, #0
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010c68:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000000;
 8010c6a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010c6c:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010c6e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010c70:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010c72:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010c74:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010c76:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010c78:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010c7a:	f7fc fd45 	bl	800d708 <HAL_I2C_Init>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d001      	beq.n	8010c86 <MX_I2C1_Init+0x2a>
  {
    Error_Handler();
 8010c82:	f001 f993 	bl	8011fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010c86:	2100      	movs	r1, #0
 8010c88:	0020      	movs	r0, r4
 8010c8a:	f7fd fbb3 	bl	800e3f4 <HAL_I2CEx_ConfigAnalogFilter>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d001      	beq.n	8010c96 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
 8010c92:	f001 f98b 	bl	8011fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010c96:	2100      	movs	r1, #0
 8010c98:	0020      	movs	r0, r4
 8010c9a:	f7fd fbd1 	bl	800e440 <HAL_I2CEx_ConfigDigitalFilter>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d001      	beq.n	8010ca6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010ca2:	f001 f983 	bl	8011fac <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8010ca6:	2080      	movs	r0, #128	; 0x80
 8010ca8:	0140      	lsls	r0, r0, #5
 8010caa:	f7fd fbed 	bl	800e488 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010cae:	bd10      	pop	{r4, pc}
 8010cb0:	40005400 	.word	0x40005400
 8010cb4:	20001898 	.word	0x20001898

08010cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010cb8:	b530      	push	{r4, r5, lr}
 8010cba:	0005      	movs	r5, r0
 8010cbc:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cbe:	2214      	movs	r2, #20
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	a801      	add	r0, sp, #4
 8010cc4:	f005 f99b 	bl	8015ffe <memset>
  if(i2cHandle->Instance==I2C1)
 8010cc8:	4b1f      	ldr	r3, [pc, #124]	; (8010d48 <HAL_I2C_MspInit+0x90>)
 8010cca:	682a      	ldr	r2, [r5, #0]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d139      	bne.n	8010d44 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010cd0:	2102      	movs	r1, #2
 8010cd2:	4c1e      	ldr	r4, [pc, #120]	; (8010d4c <HAL_I2C_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cd4:	481e      	ldr	r0, [pc, #120]	; (8010d50 <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010cd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010cd8:	430a      	orrs	r2, r1
 8010cda:	62e2      	str	r2, [r4, #44]	; 0x2c
 8010cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cde:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ce0:	400b      	ands	r3, r1
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010ce6:	23c0      	movs	r3, #192	; 0xc0
 8010ce8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010cea:	3bae      	subs	r3, #174	; 0xae
 8010cec:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cee:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010cf0:	3b11      	subs	r3, #17
 8010cf2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cf4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8010cf6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cf8:	f7fc fa7e 	bl	800d1f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010cfc:	2380      	movs	r3, #128	; 0x80
 8010cfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010d00:	039b      	lsls	r3, r3, #14
 8010d02:	4313      	orrs	r3, r2
 8010d04:	63a3      	str	r3, [r4, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8010d06:	4c13      	ldr	r4, [pc, #76]	; (8010d54 <HAL_I2C_MspInit+0x9c>)
 8010d08:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <HAL_I2C_MspInit+0xa0>)
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010d0a:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8010d0c:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8010d0e:	2306      	movs	r3, #6
 8010d10:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010d12:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8010d14:	0020      	movs	r0, r4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010d16:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010d18:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010d1a:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010d1c:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010d1e:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8010d20:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010d22:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8010d24:	f7fc f85c 	bl	800cde0 <HAL_DMA_Init>
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	d001      	beq.n	8010d30 <HAL_I2C_MspInit+0x78>
    {
      Error_Handler();
 8010d2c:	f001 f93e 	bl	8011fac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8010d30:	2200      	movs	r2, #0
 8010d32:	2017      	movs	r0, #23
 8010d34:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8010d36:	63ec      	str	r4, [r5, #60]	; 0x3c
 8010d38:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8010d3a:	f7fb ffe5 	bl	800cd08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8010d3e:	2017      	movs	r0, #23
 8010d40:	f7fc f80c 	bl	800cd5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8010d44:	b007      	add	sp, #28
 8010d46:	bd30      	pop	{r4, r5, pc}
 8010d48:	40005400 	.word	0x40005400
 8010d4c:	40021000 	.word	0x40021000
 8010d50:	50000400 	.word	0x50000400
 8010d54:	20001850 	.word	0x20001850
 8010d58:	40020030 	.word	0x40020030

08010d5c <DBG_PrintBuffer>:
  return;

}
#endif

static void DBG_PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8010d5c:	b570      	push	{r4, r5, r6, lr}
 8010d5e:	0014      	movs	r4, r2
 8010d60:	000d      	movs	r5, r1
  DBG_PRINTF("%s0x", pre);
 8010d62:	0002      	movs	r2, r0
 8010d64:	490b      	ldr	r1, [pc, #44]	; (8010d94 <DBG_PrintBuffer+0x38>)
 8010d66:	2000      	movs	r0, #0
static void DBG_PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8010d68:	001e      	movs	r6, r3
  DBG_PRINTF("%s0x", pre);
 8010d6a:	f7fb f914 	bl	800bf96 <SEGGER_RTT_printf>
  if(len) do {
 8010d6e:	3c01      	subs	r4, #1
 8010d70:	b2a4      	uxth	r4, r4
 8010d72:	192c      	adds	r4, r5, r4
    DBG_PRINTF("%02x", buf[--len]);
 8010d74:	7822      	ldrb	r2, [r4, #0]
 8010d76:	2000      	movs	r0, #0
 8010d78:	4907      	ldr	r1, [pc, #28]	; (8010d98 <DBG_PrintBuffer+0x3c>)
 8010d7a:	f7fb f90c 	bl	800bf96 <SEGGER_RTT_printf>
  } while(len);
 8010d7e:	0023      	movs	r3, r4
 8010d80:	3c01      	subs	r4, #1
 8010d82:	429d      	cmp	r5, r3
 8010d84:	d1f6      	bne.n	8010d74 <DBG_PrintBuffer+0x18>
  DBG_PRINTF("%s", post);
 8010d86:	0032      	movs	r2, r6
 8010d88:	4904      	ldr	r1, [pc, #16]	; (8010d9c <DBG_PrintBuffer+0x40>)
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	f7fb f903 	bl	800bf96 <SEGGER_RTT_printf>
}
 8010d90:	bd70      	pop	{r4, r5, r6, pc}
 8010d92:	46c0      	nop			; (mov r8, r8)
 8010d94:	08019d15 	.word	0x08019d15
 8010d98:	080198c4 	.word	0x080198c4
 8010d9c:	080199bf 	.word	0x080199bf

08010da0 <ReedSwitchISR>:
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Reed_Switch_GPIO_Port, Reed_Switch_Pin);
 8010da0:	2180      	movs	r1, #128	; 0x80
 8010da2:	20a0      	movs	r0, #160	; 0xa0
void ReedSwitchISR() {
 8010da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Reed_Switch_GPIO_Port, Reed_Switch_Pin);
 8010da6:	0089      	lsls	r1, r1, #2
void ReedSwitchISR() {
 8010da8:	b089      	sub	sp, #36	; 0x24
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Reed_Switch_GPIO_Port, Reed_Switch_Pin);
 8010daa:	05c0      	lsls	r0, r0, #23
 8010dac:	f7fc faea 	bl	800d384 <HAL_GPIO_ReadPin>
 8010db0:	0004      	movs	r4, r0
  uint32_t hold, gap, now = HW_RTCGetMsTime();
 8010db2:	f7ff fe41 	bl	8010a38 <HW_RTCGetMsTime>
 8010db6:	0005      	movs	r5, r0
  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8010db8:	2c00      	cmp	r4, #0
 8010dba:	d106      	bne.n	8010dca <ReedSwitchISR+0x2a>
 8010dbc:	4b26      	ldr	r3, [pc, #152]	; (8010e58 <ReedSwitchISR+0xb8>)
 8010dbe:	681e      	ldr	r6, [r3, #0]
 8010dc0:	1b86      	subs	r6, r0, r6
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8010dc2:	4b25      	ldr	r3, [pc, #148]	; (8010e58 <ReedSwitchISR+0xb8>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	1b5b      	subs	r3, r3, r5
 8010dc8:	e005      	b.n	8010dd6 <ReedSwitchISR+0x36>
  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8010dca:	4b24      	ldr	r3, [pc, #144]	; (8010e5c <ReedSwitchISR+0xbc>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	1a1e      	subs	r6, r3, r0
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8010dd0:	1ac3      	subs	r3, r0, r3
 8010dd2:	2c01      	cmp	r4, #1
 8010dd4:	d1f5      	bne.n	8010dc2 <ReedSwitchISR+0x22>
 8010dd6:	9307      	str	r3, [sp, #28]
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8010dd8:	4b21      	ldr	r3, [pc, #132]	; (8010e60 <ReedSwitchISR+0xc0>)
 8010dda:	781a      	ldrb	r2, [r3, #0]
    debug_msg = ", DEBOUNCE";
 8010ddc:	4b21      	ldr	r3, [pc, #132]	; (8010e64 <ReedSwitchISR+0xc4>)
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8010dde:	42a2      	cmp	r2, r4
 8010de0:	d027      	beq.n	8010e32 <ReedSwitchISR+0x92>
 8010de2:	4f1d      	ldr	r7, [pc, #116]	; (8010e58 <ReedSwitchISR+0xb8>)
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	1a6a      	subs	r2, r5, r1
 8010de8:	2a64      	cmp	r2, #100	; 0x64
 8010dea:	d922      	bls.n	8010e32 <ReedSwitchISR+0x92>
 8010dec:	4b1b      	ldr	r3, [pc, #108]	; (8010e5c <ReedSwitchISR+0xbc>)
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	1aab      	subs	r3, r5, r2
 8010df2:	469c      	mov	ip, r3
 8010df4:	4660      	mov	r0, ip
    debug_msg = ", DEBOUNCE";
 8010df6:	4b1b      	ldr	r3, [pc, #108]	; (8010e64 <ReedSwitchISR+0xc4>)
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8010df8:	2864      	cmp	r0, #100	; 0x64
 8010dfa:	d91a      	bls.n	8010e32 <ReedSwitchISR+0x92>
  lastRise = currEdge == GPIO_PIN_SET   ? now : lastRise;
 8010dfc:	2c01      	cmp	r4, #1
 8010dfe:	d100      	bne.n	8010e02 <ReedSwitchISR+0x62>
 8010e00:	0029      	movs	r1, r5
 8010e02:	6039      	str	r1, [r7, #0]
  lastFall = currEdge == GPIO_PIN_RESET ? now : lastFall;
 8010e04:	2c00      	cmp	r4, #0
 8010e06:	d100      	bne.n	8010e0a <ReedSwitchISR+0x6a>
 8010e08:	002a      	movs	r2, r5
 8010e0a:	4b14      	ldr	r3, [pc, #80]	; (8010e5c <ReedSwitchISR+0xbc>)
 8010e0c:	601a      	str	r2, [r3, #0]
    debug_msg = ", GESTURE Undefined Press";
 8010e0e:	4b16      	ldr	r3, [pc, #88]	; (8010e68 <ReedSwitchISR+0xc8>)
  if(currEdge == GPIO_PIN_RESET && hold <= 1000) {
 8010e10:	2c00      	cmp	r4, #0
 8010e12:	d10e      	bne.n	8010e32 <ReedSwitchISR+0x92>
 8010e14:	22fa      	movs	r2, #250	; 0xfa
 8010e16:	0092      	lsls	r2, r2, #2
 8010e18:	4296      	cmp	r6, r2
 8010e1a:	d80a      	bhi.n	8010e32 <ReedSwitchISR+0x92>
    LEDBlink(BlinkPattern_G);
 8010e1c:	0020      	movs	r0, r4
 8010e1e:	f7ff fcc5 	bl	80107ac <LEDBlink>
    detectedGesture = 1, enqueueToSend(EVENT, LRW_B0_TRIGGER_REED_SWITCH);
 8010e22:	2201      	movs	r2, #1
 8010e24:	4b11      	ldr	r3, [pc, #68]	; (8010e6c <ReedSwitchISR+0xcc>)
 8010e26:	2108      	movs	r1, #8
 8010e28:	2002      	movs	r0, #2
 8010e2a:	701a      	strb	r2, [r3, #0]
 8010e2c:	f000 fee6 	bl	8011bfc <enqueueToSend>
    debug_msg = ", SCHEDULE Press";
 8010e30:	4b0f      	ldr	r3, [pc, #60]	; (8010e70 <ReedSwitchISR+0xd0>)
  DBG_PRINTF("EDGE %u->%u, HOLD %10u, GAP %10u, TS %10u, LPTIM %10u%s\n", lastEdge, currEdge, hold, gap, now, tasks_ticks, debug_msg);
 8010e32:	4a10      	ldr	r2, [pc, #64]	; (8010e74 <ReedSwitchISR+0xd4>)
 8010e34:	2000      	movs	r0, #0
 8010e36:	6811      	ldr	r1, [r2, #0]
 8010e38:	4a09      	ldr	r2, [pc, #36]	; (8010e60 <ReedSwitchISR+0xc0>)
 8010e3a:	7812      	ldrb	r2, [r2, #0]
 8010e3c:	9304      	str	r3, [sp, #16]
 8010e3e:	9b07      	ldr	r3, [sp, #28]
 8010e40:	9103      	str	r1, [sp, #12]
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	490c      	ldr	r1, [pc, #48]	; (8010e78 <ReedSwitchISR+0xd8>)
 8010e46:	0023      	movs	r3, r4
 8010e48:	9502      	str	r5, [sp, #8]
 8010e4a:	9600      	str	r6, [sp, #0]
 8010e4c:	f7fb f8a3 	bl	800bf96 <SEGGER_RTT_printf>
  lastEdge = currEdge;
 8010e50:	4b03      	ldr	r3, [pc, #12]	; (8010e60 <ReedSwitchISR+0xc0>)
 8010e52:	701c      	strb	r4, [r3, #0]
}
 8010e54:	b009      	add	sp, #36	; 0x24
 8010e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e58:	200018ec 	.word	0x200018ec
 8010e5c:	200018e8 	.word	0x200018e8
 8010e60:	200018e4 	.word	0x200018e4
 8010e64:	08019d60 	.word	0x08019d60
 8010e68:	08019d1a 	.word	0x08019d1a
 8010e6c:	20001971 	.word	0x20001971
 8010e70:	08019da4 	.word	0x08019da4
 8010e74:	20001b5c 	.word	0x20001b5c
 8010e78:	08019d6b 	.word	0x08019d6b

08010e7c <NFCISR>:
 *        NFC comms doc:
 *          /MESSAGE_FORMAT_NFC.md
 *        Bootldr commit log:
 *          664ec8186463d2e7f5d8676ce9745a5a89fdbd50 at /hw/stm32-update-bootloader
 */
void NFCISR(void) {
 8010e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e7e:	b0c7      	sub	sp, #284	; 0x11c
  struct NFC_State nfc;
  /* Password state */
  static bool pw_valid = false;
  static uint32_t pw_timestamp;

  nfc_activity = HAL_GetTick();
 8010e80:	f7fb fc0c 	bl	800c69c <HAL_GetTick>
 8010e84:	4bb3      	ldr	r3, [pc, #716]	; (8011154 <NFCISR+0x2d8>)

  /* Write default password, if no password preset */
  if(~*(uint32_t*)EEPROM_PW != *(uint32_t*)EEPROM_PW_COMPLEMENT) {
 8010e86:	4ab4      	ldr	r2, [pc, #720]	; (8011158 <NFCISR+0x2dc>)
  nfc_activity = HAL_GetTick();
 8010e88:	6018      	str	r0, [r3, #0]
  if(~*(uint32_t*)EEPROM_PW != *(uint32_t*)EEPROM_PW_COMPLEMENT) {
 8010e8a:	4bb4      	ldr	r3, [pc, #720]	; (801115c <NFCISR+0x2e0>)
 8010e8c:	6812      	ldr	r2, [r2, #0]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	43db      	mvns	r3, r3
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d002      	beq.n	8010e9c <NFCISR+0x20>
    HW_ChangePW(ST25DV_PASSWORD);
 8010e96:	48b2      	ldr	r0, [pc, #712]	; (8011160 <NFCISR+0x2e4>)
 8010e98:	f7ff fdb6 	bl	8010a08 <HW_ChangePW>
  }

  /* Timout privileged session */
  if(pw_valid && (HW_RTCGetMsTime() < pw_timestamp || HW_RTCGetMsTime() >= pw_timestamp + NFC_PWTIMEOUT)) pw_valid = false;
 8010e9c:	4eb1      	ldr	r6, [pc, #708]	; (8011164 <NFCISR+0x2e8>)
 8010e9e:	7833      	ldrb	r3, [r6, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d007      	beq.n	8010eb4 <NFCISR+0x38>
 8010ea4:	f7ff fdc8 	bl	8010a38 <HW_RTCGetMsTime>
 8010ea8:	4caf      	ldr	r4, [pc, #700]	; (8011168 <NFCISR+0x2ec>)
 8010eaa:	6823      	ldr	r3, [r4, #0]
 8010eac:	4298      	cmp	r0, r3
 8010eae:	d250      	bcs.n	8010f52 <NFCISR+0xd6>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	7033      	strb	r3, [r6, #0]
   * 2) mailbox length    3) mailbox 1st byte
   *
   * Describing the cause of interrupt, whether mailbox needs to be read,
   * and peek at first byte, in case its fw upload, precluding further readout.
   * */
  if(NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_ITSTS_DYN_REG, (void*)&nfc, 4)) return;
 8010eb4:	ac05      	add	r4, sp, #20
 8010eb6:	2304      	movs	r3, #4
 8010eb8:	0022      	movs	r2, r4
 8010eba:	20a6      	movs	r0, #166	; 0xa6
 8010ebc:	49ab      	ldr	r1, [pc, #684]	; (801116c <NFCISR+0x2f0>)
 8010ebe:	f001 fc21 	bl	8012704 <NFC_ReadReg>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d000      	beq.n	8010ec8 <NFCISR+0x4c>
 8010ec6:	e142      	b.n	801114e <NFCISR+0x2d2>
  DBG_PRINTF("NFC IRQ IT_STS:0x%02x MB_CTRL:0x%02x MB_LEN:0x%02x, Interrupt\n", nfc.it_sts, nfc.mb_ctrl, nfc.mb_len);
 8010ec8:	78a1      	ldrb	r1, [r4, #2]
 8010eca:	7863      	ldrb	r3, [r4, #1]
 8010ecc:	7822      	ldrb	r2, [r4, #0]
 8010ece:	9100      	str	r1, [sp, #0]
 8010ed0:	49a7      	ldr	r1, [pc, #668]	; (8011170 <NFCISR+0x2f4>)
 8010ed2:	f7fb f860 	bl	800bf96 <SEGGER_RTT_printf>

  /* Mailbox must have incoming data (put by RF) atleast 2 bytes */
  if(~nfc.it_sts & ST25DV_ITSTS_DYN_RFPUTMSG_MASK || !nfc.mb_len) return;
 8010ed6:	7823      	ldrb	r3, [r4, #0]
 8010ed8:	069b      	lsls	r3, r3, #26
 8010eda:	d400      	bmi.n	8010ede <NFCISR+0x62>
 8010edc:	e137      	b.n	801114e <NFCISR+0x2d2>
 8010ede:	78a3      	ldrb	r3, [r4, #2]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d100      	bne.n	8010ee6 <NFCISR+0x6a>
 8010ee4:	e133      	b.n	801114e <NFCISR+0x2d2>

  /* FW update triggers reboot to bootloader */
  if(pw_valid && nfc.mb[MB_FCTCODE] == MB_R2HFIRMWAREUPDATE) {
 8010ee6:	7833      	ldrb	r3, [r6, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d012      	beq.n	8010f12 <NFCISR+0x96>
 8010eec:	78e3      	ldrb	r3, [r4, #3]
 8010eee:	2b04      	cmp	r3, #4
 8010ef0:	d10f      	bne.n	8010f12 <NFCISR+0x96>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, 1, ", Firmware Update Message\n");
 8010ef2:	2117      	movs	r1, #23
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	4b9f      	ldr	r3, [pc, #636]	; (8011174 <NFCISR+0x2f8>)
 8010ef8:	4469      	add	r1, sp
 8010efa:	489f      	ldr	r0, [pc, #636]	; (8011178 <NFCISR+0x2fc>)
 8010efc:	f7ff ff2e 	bl	8010d5c <DBG_PrintBuffer>

    /* Tell bootloader to listen NFC for 2 minutes and not require password */
    HW_EraseEEPROM(EEPROM_BOOTMODE);
 8010f00:	489e      	ldr	r0, [pc, #632]	; (801117c <NFCISR+0x300>)
 8010f02:	f7ff fcd3 	bl	80108ac <HW_EraseEEPROM>
    HW_ProgramEEPROM(EEPROM_BOOTMODE, BOOTMODE_WAITNFC_MASK | BOOTMODE_PASSOK_MASK | BOOTMODE_KEEPNFC_MASK);
 8010f06:	2107      	movs	r1, #7
 8010f08:	489c      	ldr	r0, [pc, #624]	; (801117c <NFCISR+0x300>)
 8010f0a:	f7ff fce3 	bl	80108d4 <HW_ProgramEEPROM>


    /* Reboot, with mailbox blocking due partial read, thus retain ST25DV state across boot */
    HAL_NVIC_SystemReset();
 8010f0e:	f7fb ff31 	bl	800cd74 <HAL_NVIC_SystemReset>
  }

  /* Read Mailbox */
  if((r = NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG + 1, nfc.mb + 1, nfc.mb_len))) return;
 8010f12:	20a6      	movs	r0, #166	; 0xa6
 8010f14:	78a3      	ldrb	r3, [r4, #2]
 8010f16:	499a      	ldr	r1, [pc, #616]	; (8011180 <NFCISR+0x304>)
 8010f18:	aa06      	add	r2, sp, #24
 8010f1a:	f001 fbf3 	bl	8012704 <NFC_ReadReg>
 8010f1e:	1e07      	subs	r7, r0, #0
 8010f20:	d000      	beq.n	8010f24 <NFCISR+0xa8>
 8010f22:	e114      	b.n	801114e <NFCISR+0x2d2>
  /* Parse frame */
  switch(nfc.mb[MB_FCTCODE]) {
  case MB_R2HGETCONFIG:
  case MB_R2HGETSENSOR: {
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8010f24:	78a2      	ldrb	r2, [r4, #2]
  switch(nfc.mb[MB_FCTCODE]) {
 8010f26:	78e5      	ldrb	r5, [r4, #3]
 8010f28:	4893      	ldr	r0, [pc, #588]	; (8011178 <NFCISR+0x2fc>)
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8010f2a:	3201      	adds	r2, #1
  switch(nfc.mb[MB_FCTCODE]) {
 8010f2c:	2d21      	cmp	r5, #33	; 0x21
 8010f2e:	d100      	bne.n	8010f32 <NFCISR+0xb6>
 8010f30:	e0aa      	b.n	8011088 <NFCISR+0x20c>
 8010f32:	d816      	bhi.n	8010f62 <NFCISR+0xe6>
 8010f34:	2d10      	cmp	r5, #16
 8010f36:	d100      	bne.n	8010f3a <NFCISR+0xbe>
 8010f38:	e146      	b.n	80111c8 <NFCISR+0x34c>
 8010f3a:	2d20      	cmp	r5, #32
 8010f3c:	d05a      	beq.n	8010ff4 <NFCISR+0x178>
 8010f3e:	2d08      	cmp	r5, #8
 8010f40:	d100      	bne.n	8010f44 <NFCISR+0xc8>
 8010f42:	e0c3      	b.n	80110cc <NFCISR+0x250>

    /* Reset Firmware */
    HAL_NVIC_SystemReset();
  }
  default:
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Undefined Message\n");
 8010f44:	2117      	movs	r1, #23
 8010f46:	78a2      	ldrb	r2, [r4, #2]
 8010f48:	4b8e      	ldr	r3, [pc, #568]	; (8011184 <NFCISR+0x308>)
 8010f4a:	488b      	ldr	r0, [pc, #556]	; (8011178 <NFCISR+0x2fc>)
 8010f4c:	3201      	adds	r2, #1
 8010f4e:	4469      	add	r1, sp
 8010f50:	e097      	b.n	8011082 <NFCISR+0x206>
  if(pw_valid && (HW_RTCGetMsTime() < pw_timestamp || HW_RTCGetMsTime() >= pw_timestamp + NFC_PWTIMEOUT)) pw_valid = false;
 8010f52:	f7ff fd71 	bl	8010a38 <HW_RTCGetMsTime>
 8010f56:	6823      	ldr	r3, [r4, #0]
 8010f58:	4a8b      	ldr	r2, [pc, #556]	; (8011188 <NFCISR+0x30c>)
 8010f5a:	189b      	adds	r3, r3, r2
 8010f5c:	4298      	cmp	r0, r3
 8010f5e:	d2a7      	bcs.n	8010eb0 <NFCISR+0x34>
 8010f60:	e7a8      	b.n	8010eb4 <NFCISR+0x38>
  switch(nfc.mb[MB_FCTCODE]) {
 8010f62:	2d22      	cmp	r5, #34	; 0x22
 8010f64:	d04c      	beq.n	8011000 <NFCISR+0x184>
 8010f66:	2dff      	cmp	r5, #255	; 0xff
 8010f68:	d1ec      	bne.n	8010f44 <NFCISR+0xc8>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Factory Reset Message\n");
 8010f6a:	2117      	movs	r1, #23
 8010f6c:	4b87      	ldr	r3, [pc, #540]	; (801118c <NFCISR+0x310>)
 8010f6e:	4469      	add	r1, sp
 8010f70:	f7ff fef4 	bl	8010d5c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 5) break;
 8010f74:	78a3      	ldrb	r3, [r4, #2]
 8010f76:	2b04      	cmp	r3, #4
 8010f78:	d000      	beq.n	8010f7c <NFCISR+0x100>
 8010f7a:	e0e8      	b.n	801114e <NFCISR+0x2d2>
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HFACTORYRESET, MB_COMMAND, MB_NOERROR, MB_NOTCHAINED, 0x00}, 5)) break;
 8010f7c:	3313      	adds	r3, #19
 8010f7e:	ae03      	add	r6, sp, #12
 8010f80:	446b      	add	r3, sp
 8010f82:	2205      	movs	r2, #5
 8010f84:	0031      	movs	r1, r6
 8010f86:	0018      	movs	r0, r3
 8010f88:	7035      	strb	r5, [r6, #0]
 8010f8a:	7077      	strb	r7, [r6, #1]
 8010f8c:	70b7      	strb	r7, [r6, #2]
 8010f8e:	70f7      	strb	r7, [r6, #3]
 8010f90:	7137      	strb	r7, [r6, #4]
 8010f92:	f005 f81d 	bl	8015fd0 <memcmp>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d000      	beq.n	8010f9c <NFCISR+0x120>
 8010f9a:	e0d8      	b.n	801114e <NFCISR+0x2d2>
    for(size_t i = 0; i < 1536; i++) {
 8010f9c:	4d77      	ldr	r5, [pc, #476]	; (801117c <NFCISR+0x300>)
      HW_EraseEEPROM(DATA_EEPROM_BASE + i * 4);
 8010f9e:	0028      	movs	r0, r5
 8010fa0:	f7ff fc84 	bl	80108ac <HW_EraseEEPROM>
    for(size_t i = 0; i < 1536; i++) {
 8010fa4:	4b7a      	ldr	r3, [pc, #488]	; (8011190 <NFCISR+0x314>)
 8010fa6:	3504      	adds	r5, #4
 8010fa8:	429d      	cmp	r5, r3
 8010faa:	d1f8      	bne.n	8010f9e <NFCISR+0x122>
    const uint8_t response[5] = {MB_R2HFACTORYRESET, MB_RESPONSE, MB_NOERROR, MB_NOTCHAINED, 0x00};
 8010fac:	4979      	ldr	r1, [pc, #484]	; (8011194 <NFCISR+0x318>)
 8010fae:	2205      	movs	r2, #5
 8010fb0:	310a      	adds	r1, #10
 8010fb2:	0030      	movs	r0, r6
 8010fb4:	f005 f81a 	bl	8015fec <memcpy>
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8010fb8:	2305      	movs	r3, #5
 8010fba:	0032      	movs	r2, r6
 8010fbc:	20a6      	movs	r0, #166	; 0xa6
 8010fbe:	4976      	ldr	r1, [pc, #472]	; (8011198 <NFCISR+0x31c>)
 8010fc0:	f001 fc0c 	bl	80127dc <NFC_WriteReg>
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d105      	bne.n	8010fd4 <NFCISR+0x158>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Factory Reset Message\n");
 8010fc8:	2205      	movs	r2, #5
 8010fca:	4b70      	ldr	r3, [pc, #448]	; (801118c <NFCISR+0x310>)
 8010fcc:	4873      	ldr	r0, [pc, #460]	; (801119c <NFCISR+0x320>)
 8010fce:	a903      	add	r1, sp, #12
 8010fd0:	f7ff fec4 	bl	8010d5c <DBG_PrintBuffer>
    for(uint32_t t = HAL_GetTick() + 30000; HAL_GetTick() < t && ~nfc.it_sts & ST25DV_ITSTS_DYN_RFGETMSG_MASK;) {
 8010fd4:	f7fb fb62 	bl	800c69c <HAL_GetTick>
 8010fd8:	2640      	movs	r6, #64	; 0x40
 8010fda:	4b71      	ldr	r3, [pc, #452]	; (80111a0 <NFCISR+0x324>)
 8010fdc:	18c5      	adds	r5, r0, r3
 8010fde:	f7fb fb5d 	bl	800c69c <HAL_GetTick>
 8010fe2:	42a8      	cmp	r0, r5
 8010fe4:	d203      	bcs.n	8010fee <NFCISR+0x172>
 8010fe6:	7823      	ldrb	r3, [r4, #0]
 8010fe8:	4233      	tst	r3, r6
 8010fea:	d100      	bne.n	8010fee <NFCISR+0x172>
 8010fec:	e128      	b.n	8011240 <NFCISR+0x3c4>
    HAL_NVIC_SystemReset();
 8010fee:	f7fb fec1 	bl	800cd74 <HAL_NVIC_SystemReset>
 8010ff2:	e7a7      	b.n	8010f44 <NFCISR+0xc8>
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
 8010ff4:	79e3      	ldrb	r3, [r4, #7]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d031      	beq.n	801105e <NFCISR+0x1e2>
 8010ffa:	7a23      	ldrb	r3, [r4, #8]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d02e      	beq.n	801105e <NFCISR+0x1e2>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8011000:	4d68      	ldr	r5, [pc, #416]	; (80111a4 <NFCISR+0x328>)
 8011002:	2117      	movs	r1, #23
 8011004:	002b      	movs	r3, r5
 8011006:	4469      	add	r1, sp
 8011008:	f7ff fea8 	bl	8010d5c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 < MB_DATA) break;
 801100c:	78a3      	ldrb	r3, [r4, #2]
 801100e:	2b03      	cmp	r3, #3
 8011010:	d800      	bhi.n	8011014 <NFCISR+0x198>
 8011012:	e09c      	b.n	801114e <NFCISR+0x2d2>
    if(nfc.mb[MB_LENGTH] > 1) break;
 8011014:	79e3      	ldrb	r3, [r4, #7]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d900      	bls.n	801101c <NFCISR+0x1a0>
 801101a:	e098      	b.n	801114e <NFCISR+0x2d2>
    if(memcmp(nfc.mb + MB_CMDRESP, (uint8_t[3]){MB_COMMAND, MB_NOERROR, MB_NOTCHAINED}, 3)) break;
 801101c:	2300      	movs	r3, #0
 801101e:	a903      	add	r1, sp, #12
 8011020:	2203      	movs	r2, #3
 8011022:	700b      	strb	r3, [r1, #0]
 8011024:	704b      	strb	r3, [r1, #1]
 8011026:	708b      	strb	r3, [r1, #2]
 8011028:	a806      	add	r0, sp, #24
 801102a:	f004 ffd1 	bl	8015fd0 <memcmp>
 801102e:	2800      	cmp	r0, #0
 8011030:	d000      	beq.n	8011034 <NFCISR+0x1b8>
 8011032:	e08c      	b.n	801114e <NFCISR+0x2d2>
    nfc.mb[MB_LENGTH] = (is_conf ? PBEncodeMsg_DeviceConfiguration : PBEncodeMsg_DeviceSensors)(nfc.mb + MB_DATA, sizeof nfc.mb - MB_DATA, pw_valid);
 8011034:	4b5c      	ldr	r3, [pc, #368]	; (80111a8 <NFCISR+0x32c>)
 8011036:	2f00      	cmp	r7, #0
 8011038:	d100      	bne.n	801103c <NFCISR+0x1c0>
 801103a:	4b5c      	ldr	r3, [pc, #368]	; (80111ac <NFCISR+0x330>)
 801103c:	7832      	ldrb	r2, [r6, #0]
 801103e:	21fb      	movs	r1, #251	; 0xfb
 8011040:	a807      	add	r0, sp, #28
 8011042:	4798      	blx	r3
    nfc.mb[MB_CMDRESP] = MB_RESPONSE;
 8011044:	2201      	movs	r2, #1
    nfc.mb[MB_LENGTH] = (is_conf ? PBEncodeMsg_DeviceConfiguration : PBEncodeMsg_DeviceSensors)(nfc.mb + MB_DATA, sizeof nfc.mb - MB_DATA, pw_valid);
 8011046:	b2c3      	uxtb	r3, r0
 8011048:	71e3      	strb	r3, [r4, #7]
    nfc.mb[MB_CMDRESP] = MB_RESPONSE;
 801104a:	7122      	strb	r2, [r4, #4]
    assert(nfc.mb[MB_LENGTH] <= sizeof nfc.mb - MB_DATA);
 801104c:	2bfb      	cmp	r3, #251	; 0xfb
 801104e:	d909      	bls.n	8011064 <NFCISR+0x1e8>
 8011050:	2152      	movs	r1, #82	; 0x52
 8011052:	4b57      	ldr	r3, [pc, #348]	; (80111b0 <NFCISR+0x334>)
 8011054:	4a57      	ldr	r2, [pc, #348]	; (80111b4 <NFCISR+0x338>)
 8011056:	4858      	ldr	r0, [pc, #352]	; (80111b8 <NFCISR+0x33c>)
 8011058:	31ff      	adds	r1, #255	; 0xff
 801105a:	f004 ff53 	bl	8015f04 <__assert_func>
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
 801105e:	2701      	movs	r7, #1
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8011060:	4d56      	ldr	r5, [pc, #344]	; (80111bc <NFCISR+0x340>)
 8011062:	e7ce      	b.n	8011002 <NFCISR+0x186>
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, nfc.mb, nfc.mb[MB_LENGTH] + MB_DATA))
 8011064:	2217      	movs	r2, #23
 8011066:	20a6      	movs	r0, #166	; 0xa6
 8011068:	494b      	ldr	r1, [pc, #300]	; (8011198 <NFCISR+0x31c>)
 801106a:	3305      	adds	r3, #5
 801106c:	446a      	add	r2, sp
 801106e:	f001 fbb5 	bl	80127dc <NFC_WriteReg>
 8011072:	2800      	cmp	r0, #0
 8011074:	d16b      	bne.n	801114e <NFCISR+0x2d2>
      DBG_PrintBuffer("NFC >TX ", nfc.mb, nfc.mb[MB_LENGTH] + MB_DATA, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8011076:	2117      	movs	r1, #23
 8011078:	002b      	movs	r3, r5
 801107a:	79e2      	ldrb	r2, [r4, #7]
 801107c:	4469      	add	r1, sp
 801107e:	3205      	adds	r2, #5
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Set Configure Message\n");
 8011080:	4846      	ldr	r0, [pc, #280]	; (801119c <NFCISR+0x320>)
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Undefined Message\n");
 8011082:	f7ff fe6b 	bl	8010d5c <DBG_PrintBuffer>
    break;
 8011086:	e062      	b.n	801114e <NFCISR+0x2d2>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Set Configure Message\n");
 8011088:	2117      	movs	r1, #23
 801108a:	4b4d      	ldr	r3, [pc, #308]	; (80111c0 <NFCISR+0x344>)
 801108c:	4469      	add	r1, sp
 801108e:	f7ff fe65 	bl	8010d5c <DBG_PrintBuffer>
    PBDecodeMsg(nfc.mb + MB_DATA, nfc.mb_len + 1 - MB_DATA);
 8011092:	78a1      	ldrb	r1, [r4, #2]
 8011094:	a807      	add	r0, sp, #28
 8011096:	3904      	subs	r1, #4
 8011098:	b2c9      	uxtb	r1, r1
 801109a:	f001 fdc7 	bl	8012c2c <PBDecodeMsg>
    const uint8_t response[5] = {MB_R2HSETCONFIG, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 801109e:	2301      	movs	r3, #1
 80110a0:	7831      	ldrb	r1, [r6, #0]
 80110a2:	aa03      	add	r2, sp, #12
 80110a4:	7053      	strb	r3, [r2, #1]
 80110a6:	7015      	strb	r5, [r2, #0]
 80110a8:	003b      	movs	r3, r7
 80110aa:	2900      	cmp	r1, #0
 80110ac:	d100      	bne.n	80110b0 <NFCISR+0x234>
 80110ae:	2303      	movs	r3, #3
 80110b0:	7093      	strb	r3, [r2, #2]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 80110b2:	20a6      	movs	r0, #166	; 0xa6
 80110b4:	2305      	movs	r3, #5
 80110b6:	4938      	ldr	r1, [pc, #224]	; (8011198 <NFCISR+0x31c>)
    const uint8_t response[5] = {MB_R2HSETCONFIG, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 80110b8:	70d7      	strb	r7, [r2, #3]
 80110ba:	7117      	strb	r7, [r2, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 80110bc:	f001 fb8e 	bl	80127dc <NFC_WriteReg>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d144      	bne.n	801114e <NFCISR+0x2d2>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Set Configure Message\n");
 80110c4:	2205      	movs	r2, #5
 80110c6:	4b3e      	ldr	r3, [pc, #248]	; (80111c0 <NFCISR+0x344>)
 80110c8:	a903      	add	r1, sp, #12
 80110ca:	e7d9      	b.n	8011080 <NFCISR+0x204>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Password Message\n");
 80110cc:	2117      	movs	r1, #23
 80110ce:	4d3d      	ldr	r5, [pc, #244]	; (80111c4 <NFCISR+0x348>)
 80110d0:	4469      	add	r1, sp
 80110d2:	002b      	movs	r3, r5
 80110d4:	f7ff fe42 	bl	8010d5c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 9) break;
 80110d8:	78a3      	ldrb	r3, [r4, #2]
 80110da:	2b08      	cmp	r3, #8
 80110dc:	d137      	bne.n	801114e <NFCISR+0x2d2>
    if(nfc.mb[1] == MB_RESPONSE) nfc.mb[1] = MB_COMMAND; /* Compatibility with ST25DV App */
 80110de:	7923      	ldrb	r3, [r4, #4]
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d100      	bne.n	80110e6 <NFCISR+0x26a>
 80110e4:	7127      	strb	r7, [r4, #4]
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HPRESENTPASSWORD, MB_COMMAND, MB_NOERROR, MB_NOTCHAINED, 0x04}, 5)) break;
 80110e6:	ac03      	add	r4, sp, #12
 80110e8:	2205      	movs	r2, #5
 80110ea:	492a      	ldr	r1, [pc, #168]	; (8011194 <NFCISR+0x318>)
 80110ec:	0020      	movs	r0, r4
 80110ee:	f004 ff7d 	bl	8015fec <memcpy>
 80110f2:	2317      	movs	r3, #23
 80110f4:	446b      	add	r3, sp
 80110f6:	2205      	movs	r2, #5
 80110f8:	0021      	movs	r1, r4
 80110fa:	0018      	movs	r0, r3
 80110fc:	f004 ff68 	bl	8015fd0 <memcmp>
 8011100:	1e07      	subs	r7, r0, #0
 8011102:	d124      	bne.n	801114e <NFCISR+0x2d2>
    pw_valid = !memcmp((uint32_t*)EEPROM_PW, nfc.mb + MB_DATA, 4);
 8011104:	2204      	movs	r2, #4
 8011106:	4815      	ldr	r0, [pc, #84]	; (801115c <NFCISR+0x2e0>)
 8011108:	a907      	add	r1, sp, #28
 801110a:	f004 ff61 	bl	8015fd0 <memcmp>
 801110e:	4243      	negs	r3, r0
 8011110:	4143      	adcs	r3, r0
 8011112:	7033      	strb	r3, [r6, #0]
    const uint8_t response[5] = {MB_R2HPRESENTPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 8011114:	2308      	movs	r3, #8
 8011116:	7023      	strb	r3, [r4, #0]
 8011118:	3b07      	subs	r3, #7
 801111a:	7063      	strb	r3, [r4, #1]
 801111c:	003b      	movs	r3, r7
 801111e:	2800      	cmp	r0, #0
 8011120:	d000      	beq.n	8011124 <NFCISR+0x2a8>
 8011122:	3303      	adds	r3, #3
 8011124:	70a3      	strb	r3, [r4, #2]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8011126:	0022      	movs	r2, r4
 8011128:	2305      	movs	r3, #5
 801112a:	20a6      	movs	r0, #166	; 0xa6
 801112c:	491a      	ldr	r1, [pc, #104]	; (8011198 <NFCISR+0x31c>)
    const uint8_t response[5] = {MB_R2HPRESENTPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 801112e:	70e7      	strb	r7, [r4, #3]
 8011130:	7127      	strb	r7, [r4, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8011132:	f001 fb53 	bl	80127dc <NFC_WriteReg>
 8011136:	2800      	cmp	r0, #0
 8011138:	d105      	bne.n	8011146 <NFCISR+0x2ca>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Password Message\n");
 801113a:	002b      	movs	r3, r5
 801113c:	2205      	movs	r2, #5
 801113e:	4817      	ldr	r0, [pc, #92]	; (801119c <NFCISR+0x320>)
 8011140:	a903      	add	r1, sp, #12
 8011142:	f7ff fe0b 	bl	8010d5c <DBG_PrintBuffer>
    pw_timestamp = HW_RTCGetMsTime();
 8011146:	f7ff fc77 	bl	8010a38 <HW_RTCGetMsTime>
 801114a:	4b07      	ldr	r3, [pc, #28]	; (8011168 <NFCISR+0x2ec>)
 801114c:	6018      	str	r0, [r3, #0]
  }
}
 801114e:	b047      	add	sp, #284	; 0x11c
 8011150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011152:	46c0      	nop			; (mov r8, r8)
 8011154:	200019a0 	.word	0x200019a0
 8011158:	0808000c 	.word	0x0808000c
 801115c:	08080008 	.word	0x08080008
 8011160:	78563412 	.word	0x78563412
 8011164:	200018f4 	.word	0x200018f4
 8011168:	200018f0 	.word	0x200018f0
 801116c:	00002005 	.word	0x00002005
 8011170:	08019de4 	.word	0x08019de4
 8011174:	08019e23 	.word	0x08019e23
 8011178:	08019e3e 	.word	0x08019e3e
 801117c:	08080000 	.word	0x08080000
 8011180:	00002009 	.word	0x00002009
 8011184:	08019eeb 	.word	0x08019eeb
 8011188:	0001d4c0 	.word	0x0001d4c0
 801118c:	08019ed2 	.word	0x08019ed2
 8011190:	08081800 	.word	0x08081800
 8011194:	08018884 	.word	0x08018884
 8011198:	00002008 	.word	0x00002008
 801119c:	08019e81 	.word	0x08019e81
 80111a0:	00007530 	.word	0x00007530
 80111a4:	08019dce 	.word	0x08019dce
 80111a8:	080136c9 	.word	0x080136c9
 80111ac:	080134b5 	.word	0x080134b5
 80111b0:	08019e47 	.word	0x08019e47
 80111b4:	08019f00 	.word	0x08019f00
 80111b8:	08019e74 	.word	0x08019e74
 80111bc:	08019db5 	.word	0x08019db5
 80111c0:	08019e8a 	.word	0x08019e8a
 80111c4:	08019ea3 	.word	0x08019ea3
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Change Password Message\n");
 80111c8:	2117      	movs	r1, #23
 80111ca:	4f22      	ldr	r7, [pc, #136]	; (8011254 <NFCISR+0x3d8>)
 80111cc:	4469      	add	r1, sp
 80111ce:	003b      	movs	r3, r7
 80111d0:	f7ff fdc4 	bl	8010d5c <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 9) break;
 80111d4:	78a3      	ldrb	r3, [r4, #2]
 80111d6:	2b08      	cmp	r3, #8
 80111d8:	d1b9      	bne.n	801114e <NFCISR+0x2d2>
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HCHANGEPASSWORD, MB_COMMAND, MB_NOERROR, MB_NOTCHAINED, 0x04}, 5)) break;
 80111da:	2205      	movs	r2, #5
 80111dc:	491e      	ldr	r1, [pc, #120]	; (8011258 <NFCISR+0x3dc>)
 80111de:	ac03      	add	r4, sp, #12
 80111e0:	1889      	adds	r1, r1, r2
 80111e2:	0020      	movs	r0, r4
 80111e4:	f004 ff02 	bl	8015fec <memcpy>
 80111e8:	2317      	movs	r3, #23
 80111ea:	446b      	add	r3, sp
 80111ec:	2205      	movs	r2, #5
 80111ee:	0021      	movs	r1, r4
 80111f0:	0018      	movs	r0, r3
 80111f2:	f004 feed 	bl	8015fd0 <memcmp>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d1a9      	bne.n	801114e <NFCISR+0x2d2>
    const uint8_t response[5] = {MB_R2HCHANGEPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 80111fa:	2301      	movs	r3, #1
 80111fc:	7832      	ldrb	r2, [r6, #0]
 80111fe:	7063      	strb	r3, [r4, #1]
 8011200:	7025      	strb	r5, [r4, #0]
 8011202:	0003      	movs	r3, r0
 8011204:	2a00      	cmp	r2, #0
 8011206:	d100      	bne.n	801120a <NFCISR+0x38e>
 8011208:	3303      	adds	r3, #3
 801120a:	70a3      	strb	r3, [r4, #2]
 801120c:	70e0      	strb	r0, [r4, #3]
 801120e:	7120      	strb	r0, [r4, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 8011210:	2305      	movs	r3, #5
 8011212:	0022      	movs	r2, r4
 8011214:	20a6      	movs	r0, #166	; 0xa6
 8011216:	4911      	ldr	r1, [pc, #68]	; (801125c <NFCISR+0x3e0>)
 8011218:	f001 fae0 	bl	80127dc <NFC_WriteReg>
 801121c:	2800      	cmp	r0, #0
 801121e:	d105      	bne.n	801122c <NFCISR+0x3b0>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Change Password Message\n");
 8011220:	003b      	movs	r3, r7
 8011222:	2205      	movs	r2, #5
 8011224:	480e      	ldr	r0, [pc, #56]	; (8011260 <NFCISR+0x3e4>)
 8011226:	a903      	add	r1, sp, #12
 8011228:	f7ff fd98 	bl	8010d5c <DBG_PrintBuffer>
    if(!pw_valid) break;
 801122c:	7833      	ldrb	r3, [r6, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d100      	bne.n	8011234 <NFCISR+0x3b8>
 8011232:	e78c      	b.n	801114e <NFCISR+0x2d2>
    memcpy(&new_pw, nfc.mb + MB_DATA, sizeof new_pw);
 8011234:	9b07      	ldr	r3, [sp, #28]
    HW_ChangePW(new_pw);
 8011236:	0018      	movs	r0, r3
    memcpy(&new_pw, nfc.mb + MB_DATA, sizeof new_pw);
 8011238:	9302      	str	r3, [sp, #8]
    HW_ChangePW(new_pw);
 801123a:	f7ff fbe5 	bl	8010a08 <HW_ChangePW>
    break;
 801123e:	e786      	b.n	801114e <NFCISR+0x2d2>
      NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_ITSTS_DYN_REG, &nfc, 1);
 8011240:	2301      	movs	r3, #1
 8011242:	0022      	movs	r2, r4
 8011244:	4907      	ldr	r1, [pc, #28]	; (8011264 <NFCISR+0x3e8>)
 8011246:	20a6      	movs	r0, #166	; 0xa6
 8011248:	f001 fa5c 	bl	8012704 <NFC_ReadReg>
      HAL_Delay(100);
 801124c:	2064      	movs	r0, #100	; 0x64
 801124e:	f7fb fa2b 	bl	800c6a8 <HAL_Delay>
 8011252:	e6c4      	b.n	8010fde <NFCISR+0x162>
 8011254:	08019eb7 	.word	0x08019eb7
 8011258:	08018884 	.word	0x08018884
 801125c:	00002008 	.word	0x00002008
 8011260:	08019e81 	.word	0x08019e81
 8011264:	00002005 	.word	0x00002005

08011268 <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011268:	4807      	ldr	r0, [pc, #28]	; (8011288 <MX_IWDG_Init+0x20>)
 801126a:	4b08      	ldr	r3, [pc, #32]	; (801128c <MX_IWDG_Init+0x24>)
{
 801126c:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 801126e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011270:	2306      	movs	r3, #6
 8011272:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8011274:	4b06      	ldr	r3, [pc, #24]	; (8011290 <MX_IWDG_Init+0x28>)
 8011276:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8011278:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 801127a:	f7fd f913 	bl	800e4a4 <HAL_IWDG_Init>
 801127e:	2800      	cmp	r0, #0
 8011280:	d001      	beq.n	8011286 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 8011282:	f000 fe93 	bl	8011fac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011286:	bd10      	pop	{r4, pc}
 8011288:	200018f8 	.word	0x200018f8
 801128c:	40003000 	.word	0x40003000
 8011290:	00000fff 	.word	0x00000fff

08011294 <MX_LPTIM1_Init>:
  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8011294:	22e0      	movs	r2, #224	; 0xe0
  hlptim1.Instance = LPTIM1;
 8011296:	480a      	ldr	r0, [pc, #40]	; (80112c0 <MX_LPTIM1_Init+0x2c>)
 8011298:	4b0a      	ldr	r3, [pc, #40]	; (80112c4 <MX_LPTIM1_Init+0x30>)
{
 801129a:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 801129c:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801129e:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80112a0:	0112      	lsls	r2, r2, #4
 80112a2:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80112a4:	4a08      	ldr	r2, [pc, #32]	; (80112c8 <MX_LPTIM1_Init+0x34>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80112a6:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80112a8:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80112aa:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80112ac:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80112ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80112b0:	f7fd f948 	bl	800e544 <HAL_LPTIM_Init>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d001      	beq.n	80112bc <MX_LPTIM1_Init+0x28>
  {
    Error_Handler();
 80112b8:	f000 fe78 	bl	8011fac <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80112bc:	bd10      	pop	{r4, pc}
 80112be:	46c0      	nop			; (mov r8, r8)
 80112c0:	20001908 	.word	0x20001908
 80112c4:	40007c00 	.word	0x40007c00
 80112c8:	0000ffff 	.word	0x0000ffff

080112cc <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 80112cc:	4b09      	ldr	r3, [pc, #36]	; (80112f4 <HAL_LPTIM_MspInit+0x28>)
 80112ce:	6802      	ldr	r2, [r0, #0]
{
 80112d0:	b510      	push	{r4, lr}
  if(lptimHandle->Instance==LPTIM1)
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d10d      	bne.n	80112f2 <HAL_LPTIM_MspInit+0x26>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80112d6:	2380      	movs	r3, #128	; 0x80
 80112d8:	4a07      	ldr	r2, [pc, #28]	; (80112f8 <HAL_LPTIM_MspInit+0x2c>)
 80112da:	061b      	lsls	r3, r3, #24
 80112dc:	6b91      	ldr	r1, [r2, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 0);
 80112de:	200d      	movs	r0, #13
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80112e0:	430b      	orrs	r3, r1
 80112e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 0);
 80112e4:	2102      	movs	r1, #2
 80112e6:	2200      	movs	r2, #0
 80112e8:	f7fb fd0e 	bl	800cd08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80112ec:	200d      	movs	r0, #13
 80112ee:	f7fb fd35 	bl	800cd5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80112f2:	bd10      	pop	{r4, pc}
 80112f4:	40007c00 	.word	0x40007c00
 80112f8:	40021000 	.word	0x40021000

080112fc <OnMacProcessNotify>:
 *=============================================================================
 */

static void OnMacProcessNotify(void) {
  // IsMacProcessPending = 1;
}
 80112fc:	4770      	bx	lr
	...

08011300 <MlmeIndication>:
  default: break;
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication) {
  RxParams.IsMcpsIndication = 0;
 8011300:	2300      	movs	r3, #0
static void MlmeIndication(MlmeIndication_t *mlmeIndication) {
 8011302:	b510      	push	{r4, lr}
  RxParams.IsMcpsIndication = 0;
 8011304:	4904      	ldr	r1, [pc, #16]	; (8011318 <MlmeIndication+0x18>)
 8011306:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mlmeIndication->Status;
 8011308:	7842      	ldrb	r2, [r0, #1]
 801130a:	704a      	strb	r2, [r1, #1]
  if(RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED)
 801130c:	2a0d      	cmp	r2, #13
 801130e:	d002      	beq.n	8011316 <MlmeIndication+0x16>
  DisplayRxUpdate(appData, params);
 8011310:	0018      	movs	r0, r3
 8011312:	f7f3 fd41 	bl	8004d98 <DisplayRxUpdate>
  case MLME_SCHEDULE_UPLINK: IsUplinkTxPending = true; break;
  case MLME_BEACON_LOST: break;
  case MLME_BEACON: break;
  default: break;
  }
}
 8011316:	bd10      	pop	{r4, pc}
 8011318:	20000198 	.word	0x20000198

0801131c <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 801131c:	2301      	movs	r3, #1
static void McpsConfirm(McpsConfirm_t *mcpsConfirm) {
 801131e:	b570      	push	{r4, r5, r6, lr}
 8011320:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 8011322:	4d1b      	ldr	r5, [pc, #108]	; (8011390 <McpsConfirm+0x74>)
  DBG_PRINTF("LRW MCPS TxTimeOnAir:   %d\n", mcpsConfirm->TxTimeOnAir);
 8011324:	491b      	ldr	r1, [pc, #108]	; (8011394 <McpsConfirm+0x78>)
  TxParams.IsMcpsConfirm = 1;
 8011326:	702b      	strb	r3, [r5, #0]
  TxParams.Status = mcpsConfirm->Status;
 8011328:	7843      	ldrb	r3, [r0, #1]
 801132a:	706b      	strb	r3, [r5, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 801132c:	7883      	ldrb	r3, [r0, #2]
 801132e:	72ab      	strb	r3, [r5, #10]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8011330:	68c3      	ldr	r3, [r0, #12]
 8011332:	60eb      	str	r3, [r5, #12]
  TxParams.TxPower = mcpsConfirm->TxPower;
 8011334:	78c3      	ldrb	r3, [r0, #3]
 8011336:	762b      	strb	r3, [r5, #24]
  TxParams.Channel = mcpsConfirm->Channel;
 8011338:	6903      	ldr	r3, [r0, #16]
 801133a:	766b      	strb	r3, [r5, #25]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 801133c:	7903      	ldrb	r3, [r0, #4]
 801133e:	726b      	strb	r3, [r5, #9]
  DBG_PRINTF("LRW MCPS TxTimeOnAir:   %d\n", mcpsConfirm->TxTimeOnAir);
 8011340:	6882      	ldr	r2, [r0, #8]
 8011342:	2000      	movs	r0, #0
 8011344:	f7fa fe27 	bl	800bf96 <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS NbTrans:       %d\n", mcpsConfirm->NbTrans);
 8011348:	7962      	ldrb	r2, [r4, #5]
 801134a:	4913      	ldr	r1, [pc, #76]	; (8011398 <McpsConfirm+0x7c>)
 801134c:	2000      	movs	r0, #0
 801134e:	f7fa fe22 	bl	800bf96 <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS AckReceived:   %d\n", mcpsConfirm->AckReceived);
 8011352:	7922      	ldrb	r2, [r4, #4]
 8011354:	4911      	ldr	r1, [pc, #68]	; (801139c <McpsConfirm+0x80>)
 8011356:	2000      	movs	r0, #0
 8011358:	f7fa fe1d 	bl	800bf96 <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS UpLinkCounter: %d\n", mcpsConfirm->UpLinkCounter);
 801135c:	68e2      	ldr	r2, [r4, #12]
 801135e:	4910      	ldr	r1, [pc, #64]	; (80113a0 <McpsConfirm+0x84>)
 8011360:	2000      	movs	r0, #0
 8011362:	f7fa fe18 	bl	800bf96 <SEGGER_RTT_printf>
  DBG_PRINTF("LRW MCPS Channel:       %d\n", mcpsConfirm->Channel);
 8011366:	2000      	movs	r0, #0
 8011368:	6922      	ldr	r2, [r4, #16]
 801136a:	490e      	ldr	r1, [pc, #56]	; (80113a4 <McpsConfirm+0x88>)
 801136c:	f7fa fe13 	bl	800bf96 <SEGGER_RTT_printf>
  if(mcpsConfirm->AckReceived) {
 8011370:	7923      	ldrb	r3, [r4, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d007      	beq.n	8011386 <McpsConfirm+0x6a>
    lrw.queue[lrw.retrans_index].msg_type = 0;
 8011376:	220f      	movs	r2, #15
    lrw.retrans_left = 0;
 8011378:	2100      	movs	r1, #0
 801137a:	4b0b      	ldr	r3, [pc, #44]	; (80113a8 <McpsConfirm+0x8c>)
    lrw.queue[lrw.retrans_index].msg_type = 0;
 801137c:	7858      	ldrb	r0, [r3, #1]
    lrw.retrans_left = 0;
 801137e:	7019      	strb	r1, [r3, #0]
    lrw.queue[lrw.retrans_index].msg_type = 0;
 8011380:	4342      	muls	r2, r0
 8011382:	189b      	adds	r3, r3, r2
 8011384:	7099      	strb	r1, [r3, #2]
  DisplayTxUpdate(params);
 8011386:	0028      	movs	r0, r5
 8011388:	f7f3 fc3c 	bl	8004c04 <DisplayTxUpdate>
}
 801138c:	bd70      	pop	{r4, r5, r6, pc}
 801138e:	46c0      	nop			; (mov r8, r8)
 8011390:	200001ac 	.word	0x200001ac
 8011394:	08019f07 	.word	0x08019f07
 8011398:	08019f23 	.word	0x08019f23
 801139c:	08019f3f 	.word	0x08019f3f
 80113a0:	08019f5b 	.word	0x08019f5b
 80113a4:	08019f77 	.word	0x08019f77
 80113a8:	2000193c 	.word	0x2000193c

080113ac <McpsIndication>:
static void McpsIndication(McpsIndication_t *mcpsIndication) {
 80113ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RxParams.IsMcpsIndication = 1;
 80113ae:	2301      	movs	r3, #1
 80113b0:	490e      	ldr	r1, [pc, #56]	; (80113ec <McpsIndication+0x40>)
 80113b2:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 80113b4:	7843      	ldrb	r3, [r0, #1]
 80113b6:	704b      	strb	r3, [r1, #1]
  if(RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d114      	bne.n	80113e6 <McpsIndication+0x3a>
  RxParams.Datarate = mcpsIndication->RxDatarate;
 80113bc:	7903      	ldrb	r3, [r0, #4]
  appData.Port = mcpsIndication->Port;
 80113be:	aa02      	add	r2, sp, #8
  RxParams.Datarate = mcpsIndication->RxDatarate;
 80113c0:	720b      	strb	r3, [r1, #8]
  RxParams.Rssi = mcpsIndication->Rssi;
 80113c2:	89c3      	ldrh	r3, [r0, #14]
 80113c4:	724b      	strb	r3, [r1, #9]
  RxParams.Snr = mcpsIndication->Snr;
 80113c6:	7c03      	ldrb	r3, [r0, #16]
 80113c8:	728b      	strb	r3, [r1, #10]
  RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80113ca:	6943      	ldr	r3, [r0, #20]
 80113cc:	60cb      	str	r3, [r1, #12]
  RxParams.RxSlot = mcpsIndication->RxSlot;
 80113ce:	7c43      	ldrb	r3, [r0, #17]
 80113d0:	740b      	strb	r3, [r1, #16]
  appData.Port = mcpsIndication->Port;
 80113d2:	78c3      	ldrb	r3, [r0, #3]
 80113d4:	7013      	strb	r3, [r2, #0]
  appData.BufferSize = mcpsIndication->BufferSize;
 80113d6:	7b03      	ldrb	r3, [r0, #12]
 80113d8:	7053      	strb	r3, [r2, #1]
  appData.Buffer = mcpsIndication->Buffer;
 80113da:	6883      	ldr	r3, [r0, #8]
  DisplayRxUpdate(appData, params);
 80113dc:	0010      	movs	r0, r2
  appData.Buffer = mcpsIndication->Buffer;
 80113de:	9301      	str	r3, [sp, #4]
 80113e0:	9303      	str	r3, [sp, #12]
  DisplayRxUpdate(appData, params);
 80113e2:	f7f3 fcd9 	bl	8004d98 <DisplayRxUpdate>
}
 80113e6:	b005      	add	sp, #20
 80113e8:	bd00      	pop	{pc}
 80113ea:	46c0      	nop			; (mov r8, r8)
 80113ec:	20000198 	.word	0x20000198

080113f0 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 80113f0:	2300      	movs	r3, #0
static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm) {
 80113f2:	b570      	push	{r4, r5, r6, lr}
 80113f4:	0006      	movs	r6, r0
  TxParams.IsMcpsConfirm = 0;
 80113f6:	4812      	ldr	r0, [pc, #72]	; (8011440 <MlmeConfirm+0x50>)
static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm) {
 80113f8:	b08a      	sub	sp, #40	; 0x28
  TxParams.IsMcpsConfirm = 0;
 80113fa:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mlmeConfirm->Status;
 80113fc:	7873      	ldrb	r3, [r6, #1]
 80113fe:	7043      	strb	r3, [r0, #1]
  DisplayTxUpdate(params);
 8011400:	f7f3 fc00 	bl	8004c04 <DisplayTxUpdate>
  switch(mlmeConfirm->MlmeRequest) {
 8011404:	7833      	ldrb	r3, [r6, #0]
 8011406:	2b01      	cmp	r3, #1
 8011408:	d118      	bne.n	801143c <MlmeConfirm+0x4c>
    mibReq.Type = MIB_DEV_ADDR;
 801140a:	ac01      	add	r4, sp, #4
 801140c:	3306      	adds	r3, #6
    LoRaMacMibGetRequestConfirm(&mibReq);
 801140e:	0020      	movs	r0, r4
    mibReq.Type = MIB_DEV_ADDR;
 8011410:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8011412:	f7f5 ffe9 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    JoinParams.CommissioningParams->DevAddr = mibReq.Param.DevAddr;
 8011416:	4d0b      	ldr	r5, [pc, #44]	; (8011444 <MlmeConfirm+0x54>)
 8011418:	9a02      	ldr	r2, [sp, #8]
 801141a:	682b      	ldr	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 801141c:	0020      	movs	r0, r4
    JoinParams.CommissioningParams->DevAddr = mibReq.Param.DevAddr;
 801141e:	61da      	str	r2, [r3, #28]
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8011420:	232d      	movs	r3, #45	; 0x2d
 8011422:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8011424:	f7f5 ffe0 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    JoinParams.Datarate = mibReq.Param.ChannelsDatarate;
 8011428:	7923      	ldrb	r3, [r4, #4]
  DisplayJoinRequestUpdate(params);
 801142a:	0028      	movs	r0, r5
    JoinParams.Datarate = mibReq.Param.ChannelsDatarate;
 801142c:	712b      	strb	r3, [r5, #4]
    if(mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK) {
 801142e:	7873      	ldrb	r3, [r6, #1]
 8011430:	1e5a      	subs	r2, r3, #1
 8011432:	4193      	sbcs	r3, r2
 8011434:	425b      	negs	r3, r3
 8011436:	716b      	strb	r3, [r5, #5]
  DisplayJoinRequestUpdate(params);
 8011438:	f7f3 fba8 	bl	8004b8c <DisplayJoinRequestUpdate>
}
 801143c:	b00a      	add	sp, #40	; 0x28
 801143e:	bd70      	pop	{r4, r5, r6, pc}
 8011440:	200001ac 	.word	0x200001ac
 8011444:	20000170 	.word	0x20000170

08011448 <LRW_ToDatarate>:
uint8_t LRW_ToDatarate(uint8_t sf, uint8_t bw) {
 8011448:	b510      	push	{r4, lr}
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 801144a:	4a1b      	ldr	r2, [pc, #108]	; (80114b8 <LRW_ToDatarate+0x70>)
uint8_t LRW_ToDatarate(uint8_t sf, uint8_t bw) {
 801144c:	0003      	movs	r3, r0
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 801144e:	6812      	ldr	r2, [r2, #0]
 8011450:	324c      	adds	r2, #76	; 0x4c
 8011452:	7810      	ldrb	r0, [r2, #0]
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011454:	2808      	cmp	r0, #8
 8011456:	d10f      	bne.n	8011478 <LRW_ToDatarate+0x30>
 8011458:	3804      	subs	r0, #4
 801145a:	2903      	cmp	r1, #3
 801145c:	d00b      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf <= 7    ? DR_3 : // Max Payload: 242
 801145e:	2901      	cmp	r1, #1
 8011460:	d121      	bne.n	80114a6 <LRW_ToDatarate+0x5e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011462:	3801      	subs	r0, #1
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf <= 7    ? DR_3 : // Max Payload: 242
 8011464:	2b07      	cmp	r3, #7
 8011466:	d906      	bls.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011468:	3801      	subs	r0, #1
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf == 8    ? DR_2 : // Max Payload: 125
 801146a:	2b08      	cmp	r3, #8
 801146c:	d003      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_125 && sf == 9    ? DR_1 : // Max Payload:  53
 801146e:	3b09      	subs	r3, #9
 8011470:	425a      	negs	r2, r3
 8011472:	4153      	adcs	r3, r2
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011474:	b2d8      	uxtb	r0, r3
}
 8011476:	bd10      	pop	{r4, pc}
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011478:	2805      	cmp	r0, #5
 801147a:	d114      	bne.n	80114a6 <LRW_ToDatarate+0x5e>
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_250 /* sf =  7 */ ? DR_6 : // Max Payload: 242
 801147c:	2902      	cmp	r1, #2
 801147e:	d018      	beq.n	80114b2 <LRW_ToDatarate+0x6a>
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf <= 7    ? DR_5 : // Max Payload: 242
 8011480:	2901      	cmp	r1, #1
 8011482:	d110      	bne.n	80114a6 <LRW_ToDatarate+0x5e>
 8011484:	2b07      	cmp	r3, #7
 8011486:	d9f6      	bls.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011488:	3801      	subs	r0, #1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 8    ? DR_4 : // Max Payload: 242
 801148a:	2b08      	cmp	r3, #8
 801148c:	d0f3      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 801148e:	3801      	subs	r0, #1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 9    ? DR_3 : // Max Payload: 115
 8011490:	2b09      	cmp	r3, #9
 8011492:	d0f0      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 8011494:	3801      	subs	r0, #1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 10   ? DR_2 : // Max Payload:  51
 8011496:	2b0a      	cmp	r3, #10
 8011498:	d0ed      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 801149a:	0008      	movs	r0, r1
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 11   ? DR_1 : // Max Payload:  51
 801149c:	2b0b      	cmp	r3, #11
 801149e:	d0ea      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 80114a0:	2000      	movs	r0, #0
      region == LORAMAC_REGION_EU868 && bw == PBENUM_BW_125 && sf == 12   ? DR_0 : // Max Payload:  51
 80114a2:	2b0c      	cmp	r3, #12
 80114a4:	d0e7      	beq.n	8011476 <LRW_ToDatarate+0x2e>
      (DBG_PRINTF("LRW ERR Bad Value!\n"), DR_0);
 80114a6:	2000      	movs	r0, #0
 80114a8:	4904      	ldr	r1, [pc, #16]	; (80114bc <LRW_ToDatarate+0x74>)
 80114aa:	f7fa fd74 	bl	800bf96 <SEGGER_RTT_printf>
      region == LORAMAC_REGION_US915 && bw == PBENUM_BW_500 /* sf =  8 */ ? DR_4 : // Max Payload: 242
 80114ae:	2000      	movs	r0, #0
 80114b0:	e7e1      	b.n	8011476 <LRW_ToDatarate+0x2e>
 80114b2:	2006      	movs	r0, #6
 80114b4:	e7df      	b.n	8011476 <LRW_ToDatarate+0x2e>
 80114b6:	46c0      	nop			; (mov r8, r8)
 80114b8:	2000196c 	.word	0x2000196c
 80114bc:	08019f93 	.word	0x08019f93

080114c0 <LRW_ToTxPower>:
uint8_t LRW_ToTxPower(uint8_t dbm) {
 80114c0:	b510      	push	{r4, lr}
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 80114c2:	4b1a      	ldr	r3, [pc, #104]	; (801152c <LRW_ToTxPower+0x6c>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	334c      	adds	r3, #76	; 0x4c
 80114c8:	781c      	ldrb	r4, [r3, #0]
  dbm =
 80114ca:	2c05      	cmp	r4, #5
 80114cc:	d10f      	bne.n	80114ee <LRW_ToTxPower+0x2e>
    region == LORAMAC_REGION_EU868 && dbm >= 14 ?  14 : // TX_POWER_0  EU868_MAX_TX_POWER EU868_DEFAULT_TX_POWER EU868_DEFAULT_MAX_EIRP
 80114ce:	280d      	cmp	r0, #13
 80114d0:	d900      	bls.n	80114d4 <LRW_ToTxPower+0x14>
  dbm =
 80114d2:	200e      	movs	r0, #14
  dbm = (dbm / 2 + dbm % 2) * 2;
 80114d4:	2201      	movs	r2, #1
 80114d6:	0843      	lsrs	r3, r0, #1
 80114d8:	4010      	ands	r0, r2
 80114da:	1818      	adds	r0, r3, r0
 80114dc:	4090      	lsls	r0, r2
 80114de:	b2c3      	uxtb	r3, r0
    region == LORAMAC_REGION_EU868 ? (    EU868_MIN_TX_POWER * 2 - dbm) / 2 :
 80114e0:	2c05      	cmp	r4, #5
 80114e2:	d117      	bne.n	8011514 <LRW_ToTxPower+0x54>
 80114e4:	200e      	movs	r0, #14
 80114e6:	1ac0      	subs	r0, r0, r3
 80114e8:	4110      	asrs	r0, r2
 80114ea:	b2c0      	uxtb	r0, r0
}
 80114ec:	bd10      	pop	{r4, pc}
  dbm =
 80114ee:	2c08      	cmp	r4, #8
 80114f0:	d10a      	bne.n	8011508 <LRW_ToTxPower+0x48>
 80114f2:	1c03      	adds	r3, r0, #0
 80114f4:	2802      	cmp	r0, #2
 80114f6:	d202      	bcs.n	80114fe <LRW_ToTxPower+0x3e>
 80114f8:	2302      	movs	r3, #2
 80114fa:	b2d8      	uxtb	r0, r3
 80114fc:	e7ea      	b.n	80114d4 <LRW_ToTxPower+0x14>
 80114fe:	b2c2      	uxtb	r2, r0
 8011500:	2a1e      	cmp	r2, #30
 8011502:	d9fa      	bls.n	80114fa <LRW_ToTxPower+0x3a>
 8011504:	231e      	movs	r3, #30
 8011506:	e7f8      	b.n	80114fa <LRW_ToTxPower+0x3a>
    (DBG_PRINTF("LRW ERR Bad Value!\n"), 2);
 8011508:	2000      	movs	r0, #0
 801150a:	4909      	ldr	r1, [pc, #36]	; (8011530 <LRW_ToTxPower+0x70>)
 801150c:	f7fa fd43 	bl	800bf96 <SEGGER_RTT_printf>
  dbm =
 8011510:	2002      	movs	r0, #2
 8011512:	e7df      	b.n	80114d4 <LRW_ToTxPower+0x14>
    region == LORAMAC_REGION_EU868 ? (    EU868_MIN_TX_POWER * 2 - dbm) / 2 :
 8011514:	2c08      	cmp	r4, #8
 8011516:	d103      	bne.n	8011520 <LRW_ToTxPower+0x60>
    region == LORAMAC_REGION_US915 ? (2 + US915_MIN_TX_POWER * 2 - dbm) / 2 :
 8011518:	201e      	movs	r0, #30
 801151a:	1ac0      	subs	r0, r0, r3
 801151c:	1040      	asrs	r0, r0, #1
 801151e:	e7e4      	b.n	80114ea <LRW_ToTxPower+0x2a>
    (DBG_PRINTF("LRW ERR Bad Value!\n"), TX_POWER_0);
 8011520:	2000      	movs	r0, #0
 8011522:	4903      	ldr	r1, [pc, #12]	; (8011530 <LRW_ToTxPower+0x70>)
 8011524:	f7fa fd37 	bl	800bf96 <SEGGER_RTT_printf>
    region == LORAMAC_REGION_EU868 ? (    EU868_MIN_TX_POWER * 2 - dbm) / 2 :
 8011528:	2000      	movs	r0, #0
 801152a:	e7df      	b.n	80114ec <LRW_ToTxPower+0x2c>
 801152c:	2000196c 	.word	0x2000196c
 8011530:	08019f93 	.word	0x08019f93

08011534 <LRW_FromTxPower>:
uint8_t LRW_FromTxPower(uint8_t txp) {
 8011534:	b510      	push	{r4, lr}
  LoRaMacRegion_t region = pNvm->MacGroup2.Region;
 8011536:	4b0a      	ldr	r3, [pc, #40]	; (8011560 <LRW_FromTxPower+0x2c>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	334c      	adds	r3, #76	; 0x4c
 801153c:	781b      	ldrb	r3, [r3, #0]
      region == LORAMAC_REGION_EU868 ? 14 - txp * 2 :
 801153e:	2b05      	cmp	r3, #5
 8011540:	d104      	bne.n	801154c <LRW_FromTxPower+0x18>
 8011542:	3302      	adds	r3, #2
      region == LORAMAC_REGION_US915 ? 30 - txp * 2 :
 8011544:	1a18      	subs	r0, r3, r0
      region == LORAMAC_REGION_EU868 ? 14 - txp * 2 :
 8011546:	0040      	lsls	r0, r0, #1
 8011548:	b2c0      	uxtb	r0, r0
}
 801154a:	bd10      	pop	{r4, pc}
      region == LORAMAC_REGION_EU868 ? 14 - txp * 2 :
 801154c:	2b08      	cmp	r3, #8
 801154e:	d101      	bne.n	8011554 <LRW_FromTxPower+0x20>
      region == LORAMAC_REGION_US915 ? 30 - txp * 2 :
 8011550:	3307      	adds	r3, #7
 8011552:	e7f7      	b.n	8011544 <LRW_FromTxPower+0x10>
      (DBG_PRINTF("LRW ERR Bad Value!"), 2);
 8011554:	2000      	movs	r0, #0
 8011556:	4903      	ldr	r1, [pc, #12]	; (8011564 <LRW_FromTxPower+0x30>)
 8011558:	f7fa fd1d 	bl	800bf96 <SEGGER_RTT_printf>
 801155c:	2002      	movs	r0, #2
 801155e:	e7f4      	b.n	801154a <LRW_FromTxPower+0x16>
 8011560:	2000196c 	.word	0x2000196c
 8011564:	08019fa7 	.word	0x08019fa7

08011568 <LRW_Join>:
  mlmeReq.Type = MLME_JOIN;
 8011568:	2301      	movs	r3, #1
void LRW_Join(void) {
 801156a:	b530      	push	{r4, r5, lr}
  mlmeReq.Req.Join.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 801156c:	4d10      	ldr	r5, [pc, #64]	; (80115b0 <LRW_Join+0x48>)
void LRW_Join(void) {
 801156e:	b087      	sub	sp, #28
  mlmeReq.Type = MLME_JOIN;
 8011570:	ac01      	add	r4, sp, #4
 8011572:	7023      	strb	r3, [r4, #0]
  mlmeReq.Req.Join.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011574:	002b      	movs	r3, r5
 8011576:	3350      	adds	r3, #80	; 0x50
 8011578:	7819      	ldrb	r1, [r3, #0]
 801157a:	002b      	movs	r3, r5
 801157c:	334f      	adds	r3, #79	; 0x4f
 801157e:	7818      	ldrb	r0, [r3, #0]
 8011580:	f7ff ff62 	bl	8011448 <LRW_ToDatarate>
 8011584:	7160      	strb	r0, [r4, #5]
  mlmeReq.Req.Join.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_OTAA : ACTIVATION_TYPE_ABP;
 8011586:	792a      	ldrb	r2, [r5, #4]
  OnMacMlmeRequest(LoRaMacMlmeRequest(&mlmeReq), &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime);
 8011588:	0020      	movs	r0, r4
  mlmeReq.Req.Join.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_OTAA : ACTIVATION_TYPE_ABP;
 801158a:	0013      	movs	r3, r2
 801158c:	1e59      	subs	r1, r3, #1
 801158e:	418b      	sbcs	r3, r1
 8011590:	3301      	adds	r3, #1
 8011592:	7123      	strb	r3, [r4, #4]
  CommissioningParams.IsOtaaActivation = DevCfg.isOtaa;
 8011594:	4b07      	ldr	r3, [pc, #28]	; (80115b4 <LRW_Join+0x4c>)
 8011596:	701a      	strb	r2, [r3, #0]
  OnMacMlmeRequest(LoRaMacMlmeRequest(&mlmeReq), &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime);
 8011598:	f7f6 fa9c 	bl	8007ad4 <LoRaMacMlmeRequest>
    DisplayMacMlmeRequestUpdate(status, mlmeReq, nextTxIn);
 801159c:	9a05      	ldr	r2, [sp, #20]
 801159e:	0021      	movs	r1, r4
 80115a0:	f7f3 faa6 	bl	8004af0 <DisplayMacMlmeRequestUpdate>
  DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80115a4:	9a05      	ldr	r2, [sp, #20]
 80115a6:	4b04      	ldr	r3, [pc, #16]	; (80115b8 <LRW_Join+0x50>)
 80115a8:	601a      	str	r2, [r3, #0]
}
 80115aa:	b007      	add	sp, #28
 80115ac:	bd30      	pop	{r4, r5, pc}
 80115ae:	46c0      	nop			; (mov r8, r8)
 80115b0:	200000e0 	.word	0x200000e0
 80115b4:	20000150 	.word	0x20000150
 80115b8:	20001938 	.word	0x20001938

080115bc <LRW_IsJoined>:
bool LRW_IsJoined(void) {
 80115bc:	b510      	push	{r4, lr}
 80115be:	b08a      	sub	sp, #40	; 0x28
  MibRequestConfirm_t mibReq = {.Type = MIB_NETWORK_ACTIVATION};
 80115c0:	2224      	movs	r2, #36	; 0x24
 80115c2:	2100      	movs	r1, #0
 80115c4:	a801      	add	r0, sp, #4
 80115c6:	f004 fd1a 	bl	8015ffe <memset>
 80115ca:	2401      	movs	r4, #1
 80115cc:	466b      	mov	r3, sp
  return LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK ||
 80115ce:	a801      	add	r0, sp, #4
  MibRequestConfirm_t mibReq = {.Type = MIB_NETWORK_ACTIVATION};
 80115d0:	711c      	strb	r4, [r3, #4]
  return LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK ||
 80115d2:	f7f5 ff09 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
      mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE ? false : true;
 80115d6:	2300      	movs	r3, #0
 80115d8:	4298      	cmp	r0, r3
 80115da:	d103      	bne.n	80115e4 <LRW_IsJoined+0x28>
 80115dc:	466b      	mov	r3, sp
 80115de:	7a1b      	ldrb	r3, [r3, #8]
 80115e0:	1e5a      	subs	r2, r3, #1
 80115e2:	4193      	sbcs	r3, r2
 80115e4:	4023      	ands	r3, r4
 80115e6:	0018      	movs	r0, r3
}
 80115e8:	b00a      	add	sp, #40	; 0x28
 80115ea:	bd10      	pop	{r4, pc}

080115ec <LRW_TX>:
void LRW_TX(LmHandlerAppData_t *appData) {
 80115ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ee:	b087      	sub	sp, #28
 80115f0:	0005      	movs	r5, r0
  if(!LRW_IsJoined()) {
 80115f2:	f7ff ffe3 	bl	80115bc <LRW_IsJoined>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	d102      	bne.n	8011600 <LRW_TX+0x14>
    DEBUG_MSG("LRW ERR Can't send if not joined.\n");
 80115fa:	491e      	ldr	r1, [pc, #120]	; (8011674 <LRW_TX+0x88>)
 80115fc:	f7fa faf8 	bl	800bbf0 <SEGGER_RTT_WriteString>
  TxParams.MsgType = DevCfg.confirmedMsgs ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8011600:	4e1d      	ldr	r6, [pc, #116]	; (8011678 <LRW_TX+0x8c>)
 8011602:	4f1e      	ldr	r7, [pc, #120]	; (801167c <LRW_TX+0x90>)
 8011604:	0033      	movs	r3, r6
 8011606:	3351      	adds	r3, #81	; 0x51
 8011608:	781b      	ldrb	r3, [r3, #0]
  mcpsReq.Type = DevCfg.confirmedMsgs ? MCPS_CONFIRMED : MCPS_UNCONFIRMED;
 801160a:	ac01      	add	r4, sp, #4
  TxParams.MsgType = DevCfg.confirmedMsgs ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 801160c:	723b      	strb	r3, [r7, #8]
  mcpsReq.Type = DevCfg.confirmedMsgs ? MCPS_CONFIRMED : MCPS_UNCONFIRMED;
 801160e:	7023      	strb	r3, [r4, #0]
  mcpsReq.Req.Unconfirmed.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 8011610:	0033      	movs	r3, r6
 8011612:	3350      	adds	r3, #80	; 0x50
 8011614:	7819      	ldrb	r1, [r3, #0]
 8011616:	0033      	movs	r3, r6
 8011618:	334f      	adds	r3, #79	; 0x4f
 801161a:	7818      	ldrb	r0, [r3, #0]
 801161c:	f7ff ff14 	bl	8011448 <LRW_ToDatarate>
 8011620:	73a0      	strb	r0, [r4, #14]
  if(LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK) {
 8011622:	4669      	mov	r1, sp
 8011624:	7868      	ldrb	r0, [r5, #1]
 8011626:	f7f5 fe7b 	bl	8007320 <LoRaMacQueryTxPossible>
 801162a:	2800      	cmp	r0, #0
 801162c:	d01b      	beq.n	8011666 <LRW_TX+0x7a>
    mcpsReq.Type = MCPS_UNCONFIRMED;
 801162e:	2300      	movs	r3, #0
 8011630:	7023      	strb	r3, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8011632:	60a3      	str	r3, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8011634:	81a3      	strh	r3, [r4, #12]
  TxParams.AppData = *appData;
 8011636:	003b      	movs	r3, r7
 8011638:	3310      	adds	r3, #16
 801163a:	cd06      	ldmia	r5!, {r1, r2}
 801163c:	c306      	stmia	r3!, {r1, r2}
  TxParams.Datarate = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 801163e:	0033      	movs	r3, r6
 8011640:	364f      	adds	r6, #79	; 0x4f
 8011642:	3350      	adds	r3, #80	; 0x50
 8011644:	7819      	ldrb	r1, [r3, #0]
 8011646:	7830      	ldrb	r0, [r6, #0]
 8011648:	f7ff fefe 	bl	8011448 <LRW_ToDatarate>
 801164c:	72b8      	strb	r0, [r7, #10]
  LoRaMacStatus_t status = LoRaMacMcpsRequest(&mcpsReq);
 801164e:	0020      	movs	r0, r4
 8011650:	f7f6 fb22 	bl	8007c98 <LoRaMacMcpsRequest>
    DisplayMacMcpsRequestUpdate(status, mcpsReq, nextTxIn);
 8011654:	6922      	ldr	r2, [r4, #16]
 8011656:	0021      	movs	r1, r4
 8011658:	f7f3 fa0a 	bl	8004a70 <DisplayMacMcpsRequestUpdate>
  DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 801165c:	6922      	ldr	r2, [r4, #16]
 801165e:	4b08      	ldr	r3, [pc, #32]	; (8011680 <LRW_TX+0x94>)
 8011660:	601a      	str	r2, [r3, #0]
}
 8011662:	b007      	add	sp, #28
 8011664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8011666:	782b      	ldrb	r3, [r5, #0]
 8011668:	7123      	strb	r3, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 801166a:	786b      	ldrb	r3, [r5, #1]
 801166c:	81a3      	strh	r3, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 801166e:	686b      	ldr	r3, [r5, #4]
 8011670:	60a3      	str	r3, [r4, #8]
 8011672:	e7e0      	b.n	8011636 <LRW_TX+0x4a>
 8011674:	08019fba 	.word	0x08019fba
 8011678:	200000e0 	.word	0x200000e0
 801167c:	200001ac 	.word	0x200001ac
 8011680:	20001938 	.word	0x20001938

08011684 <LRW_Process>:
  Radio.IrqProcess && (Radio.IrqProcess(), 0);
 8011684:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <LRW_Process+0x20>)
void LRW_Process(void) {
 8011686:	b510      	push	{r4, lr}
  Radio.IrqProcess && (Radio.IrqProcess(), 0);
 8011688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801168a:	2b00      	cmp	r3, #0
 801168c:	d000      	beq.n	8011690 <LRW_Process+0xc>
 801168e:	4798      	blx	r3
  LoRaMacProcess();
 8011690:	f7f4 fef8 	bl	8006484 <LoRaMacProcess>
  (nvmBytes = NvmDataMgmtStore()) && (OnNvmDataChange(LORAMAC_HANDLER_NVM_STORE, nvmBytes), 0);
 8011694:	f7f3 fbf2 	bl	8004e7c <NvmDataMgmtStore>
 8011698:	1e01      	subs	r1, r0, #0
 801169a:	d002      	beq.n	80116a2 <LRW_Process+0x1e>
    DisplayNvmDataChange(state, size);
 801169c:	2001      	movs	r0, #1
 801169e:	f7f3 f9d3 	bl	8004a48 <DisplayNvmDataChange>
}
 80116a2:	bd10      	pop	{r4, pc}
 80116a4:	0801abc8 	.word	0x0801abc8

080116a8 <LRW_FromDevCfg>:
void LRW_FromDevCfg(void) {
 80116a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t dr = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 80116aa:	4b97      	ldr	r3, [pc, #604]	; (8011908 <LRW_FromDevCfg+0x260>)
void LRW_FromDevCfg(void) {
 80116ac:	b08f      	sub	sp, #60	; 0x3c
  uint8_t dr = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 80116ae:	3350      	adds	r3, #80	; 0x50
 80116b0:	7819      	ldrb	r1, [r3, #0]
 80116b2:	4b95      	ldr	r3, [pc, #596]	; (8011908 <LRW_FromDevCfg+0x260>)
 80116b4:	334f      	adds	r3, #79	; 0x4f
 80116b6:	7818      	ldrb	r0, [r3, #0]
 80116b8:	f7ff fec6 	bl	8011448 <LRW_ToDatarate>
  uint8_t txp = LRW_ToTxPower(DevCfg.txPower);
 80116bc:	4b92      	ldr	r3, [pc, #584]	; (8011908 <LRW_FromDevCfg+0x260>)
  uint8_t dr = LRW_ToDatarate(DevCfg.sf, DevCfg.bw);
 80116be:	9000      	str	r0, [sp, #0]
  uint8_t txp = LRW_ToTxPower(DevCfg.txPower);
 80116c0:	334e      	adds	r3, #78	; 0x4e
 80116c2:	7818      	ldrb	r0, [r3, #0]
 80116c4:	f7ff fefc 	bl	80114c0 <LRW_ToTxPower>
  if(DevCfg.region != pNvm->MacGroup2.Region) {
 80116c8:	4b8f      	ldr	r3, [pc, #572]	; (8011908 <LRW_FromDevCfg+0x260>)
 80116ca:	4e90      	ldr	r6, [pc, #576]	; (801190c <LRW_FromDevCfg+0x264>)
  uint8_t txp = LRW_ToTxPower(DevCfg.txPower);
 80116cc:	9001      	str	r0, [sp, #4]
  if(DevCfg.region != pNvm->MacGroup2.Region) {
 80116ce:	334c      	adds	r3, #76	; 0x4c
 80116d0:	781a      	ldrb	r2, [r3, #0]
 80116d2:	6833      	ldr	r3, [r6, #0]
 80116d4:	334c      	adds	r3, #76	; 0x4c
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	4293      	cmp	r3, r2
 80116da:	d00b      	beq.n	80116f4 <LRW_FromDevCfg+0x4c>
    if(LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, DevCfg.region) != LORAMAC_STATUS_OK)
 80116dc:	498c      	ldr	r1, [pc, #560]	; (8011910 <LRW_FromDevCfg+0x268>)
 80116de:	488d      	ldr	r0, [pc, #564]	; (8011914 <LRW_FromDevCfg+0x26c>)
 80116e0:	f7f5 fc44 	bl	8006f6c <LoRaMacInitialization>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	d005      	beq.n	80116f4 <LRW_FromDevCfg+0x4c>
      DBG_PRINTF("LRW Init Failed! %d\n", __LINE__);
 80116e8:	22c4      	movs	r2, #196	; 0xc4
 80116ea:	2000      	movs	r0, #0
 80116ec:	498a      	ldr	r1, [pc, #552]	; (8011918 <LRW_FromDevCfg+0x270>)
 80116ee:	0052      	lsls	r2, r2, #1
 80116f0:	f7fa fc51 	bl	800bf96 <SEGGER_RTT_printf>
  mibReq.Type = MIB_DEV_EUI;
 80116f4:	2302      	movs	r3, #2
 80116f6:	ac05      	add	r4, sp, #20
  LoRaMacMibGetRequestConfirm(&mibReq);
 80116f8:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_EUI;
 80116fa:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80116fc:	f7f5 fe74 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(!memcmp(DevCfg.devEui, (uint8_t[sizeof DevCfg.devEui]){0}, sizeof DevCfg.devEui)) {
 8011700:	2208      	movs	r2, #8
 8011702:	2100      	movs	r1, #0
 8011704:	a803      	add	r0, sp, #12
 8011706:	f004 fc7a 	bl	8015ffe <memset>
 801170a:	4d84      	ldr	r5, [pc, #528]	; (801191c <LRW_FromDevCfg+0x274>)
 801170c:	2208      	movs	r2, #8
 801170e:	0028      	movs	r0, r5
 8011710:	a903      	add	r1, sp, #12
 8011712:	f004 fc5d 	bl	8015fd0 <memcmp>
 8011716:	2800      	cmp	r0, #0
 8011718:	d102      	bne.n	8011720 <LRW_FromDevCfg+0x78>
    BoardGetUniqueId(DevCfg.devEui);
 801171a:	0028      	movs	r0, r5
 801171c:	f7f2 fb82 	bl	8003e24 <BoardGetUniqueId>
  if(memcmp(mibReq.Param.DevEui, DevCfg.devEui, sizeof DevCfg.devEui)) {
 8011720:	2208      	movs	r2, #8
 8011722:	0029      	movs	r1, r5
 8011724:	6860      	ldr	r0, [r4, #4]
 8011726:	f004 fc53 	bl	8015fd0 <memcmp>
  bool rejoin = false;
 801172a:	2700      	movs	r7, #0
  if(memcmp(mibReq.Param.DevEui, DevCfg.devEui, sizeof DevCfg.devEui)) {
 801172c:	42b8      	cmp	r0, r7
 801172e:	d004      	beq.n	801173a <LRW_FromDevCfg+0x92>
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011730:	0020      	movs	r0, r4
    mibReq.Param.DevEui = DevCfg.devEui;
 8011732:	6065      	str	r5, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011734:	f7f5 ff1e 	bl	8007574 <LoRaMacMibSetRequestConfirm>
    rejoin = true;
 8011738:	3701      	adds	r7, #1
  mibReq.Type = MIB_JOIN_EUI;
 801173a:	2303      	movs	r3, #3
 801173c:	ac05      	add	r4, sp, #20
  LoRaMacMibGetRequestConfirm(&mibReq);
 801173e:	0020      	movs	r0, r4
  mibReq.Type = MIB_JOIN_EUI;
 8011740:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011742:	f7f5 fe51 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(memcmp(mibReq.Param.JoinEui, DevCfg.appEui, sizeof DevCfg.appEui)) {
 8011746:	4d76      	ldr	r5, [pc, #472]	; (8011920 <LRW_FromDevCfg+0x278>)
 8011748:	2208      	movs	r2, #8
 801174a:	0029      	movs	r1, r5
 801174c:	6860      	ldr	r0, [r4, #4]
 801174e:	f004 fc3f 	bl	8015fd0 <memcmp>
 8011752:	2800      	cmp	r0, #0
 8011754:	d004      	beq.n	8011760 <LRW_FromDevCfg+0xb8>
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011756:	0020      	movs	r0, r4
    mibReq.Param.JoinEui = DevCfg.appEui;
 8011758:	6065      	str	r5, [r4, #4]
    rejoin = true;
 801175a:	2701      	movs	r7, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 801175c:	f7f5 ff0a 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[NWK_KEY].KeyValue, DevCfg.appKey, sizeof DevCfg.appKey)) {
 8011760:	6830      	ldr	r0, [r6, #0]
 8011762:	4d70      	ldr	r5, [pc, #448]	; (8011924 <LRW_FromDevCfg+0x27c>)
 8011764:	30cb      	adds	r0, #203	; 0xcb
 8011766:	2210      	movs	r2, #16
 8011768:	0029      	movs	r1, r5
 801176a:	30ff      	adds	r0, #255	; 0xff
 801176c:	f004 fc30 	bl	8015fd0 <memcmp>
 8011770:	2800      	cmp	r0, #0
 8011772:	d006      	beq.n	8011782 <LRW_FromDevCfg+0xda>
    mibReq.Type = MIB_NWK_KEY;
 8011774:	2309      	movs	r3, #9
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011776:	0020      	movs	r0, r4
    mibReq.Type = MIB_NWK_KEY;
 8011778:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NwkKey = DevCfg.appKey;
 801177a:	6065      	str	r5, [r4, #4]
    rejoin = true;
 801177c:	2701      	movs	r7, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 801177e:	f7f5 fef9 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011782:	2301      	movs	r3, #1
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011784:	0020      	movs	r0, r4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011786:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011788:	f7f5 fe2e 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(DevCfg.isOtaa != (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP) || rejoin) {
 801178c:	4b5e      	ldr	r3, [pc, #376]	; (8011908 <LRW_FromDevCfg+0x260>)
 801178e:	791d      	ldrb	r5, [r3, #4]
 8011790:	7923      	ldrb	r3, [r4, #4]
 8011792:	3b01      	subs	r3, #1
 8011794:	1e5a      	subs	r2, r3, #1
 8011796:	4193      	sbcs	r3, r2
 8011798:	42ab      	cmp	r3, r5
 801179a:	d101      	bne.n	80117a0 <LRW_FromDevCfg+0xf8>
 801179c:	2f00      	cmp	r7, #0
 801179e:	d017      	beq.n	80117d0 <LRW_FromDevCfg+0x128>
    if(!DevCfg.isOtaa) {
 80117a0:	2d00      	cmp	r5, #0
 80117a2:	d10c      	bne.n	80117be <LRW_FromDevCfg+0x116>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80117a4:	2335      	movs	r3, #53	; 0x35
 80117a6:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80117a8:	4b5f      	ldr	r3, [pc, #380]	; (8011928 <LRW_FromDevCfg+0x280>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 80117aa:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80117ac:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80117ae:	f7f5 fee1 	bl	8007574 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 80117b2:	2306      	movs	r3, #6
      LoRaMacMibSetRequestConfirm(&mibReq);
 80117b4:	0020      	movs	r0, r4
      mibReq.Type = MIB_NET_ID;
 80117b6:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80117b8:	6065      	str	r5, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80117ba:	f7f5 fedb 	bl	8007574 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80117be:	2301      	movs	r3, #1
    mibReq.Param.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_NONE : ACTIVATION_TYPE_ABP;
 80117c0:	4a51      	ldr	r2, [pc, #324]	; (8011908 <LRW_FromDevCfg+0x260>)
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80117c2:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_NONE : ACTIVATION_TYPE_ABP;
 80117c4:	7912      	ldrb	r2, [r2, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117c6:	0020      	movs	r0, r4
    mibReq.Param.NetworkActivation = DevCfg.isOtaa ? ACTIVATION_TYPE_NONE : ACTIVATION_TYPE_ABP;
 80117c8:	4053      	eors	r3, r2
 80117ca:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117cc:	f7f5 fed2 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_CHANNELS_DATARATE;
 80117d0:	272d      	movs	r7, #45	; 0x2d
  LoRaMacMibGetRequestConfirm(&mibReq);
 80117d2:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_DATARATE;
 80117d4:	7027      	strb	r7, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80117d6:	f7f5 fe07 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(mibReq.Param.ChannelsDatarate != dr) {
 80117da:	2304      	movs	r3, #4
 80117dc:	9a00      	ldr	r2, [sp, #0]
 80117de:	56e3      	ldrsb	r3, [r4, r3]
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d00d      	beq.n	8011800 <LRW_FromDevCfg+0x158>
    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80117e4:	232c      	movs	r3, #44	; 0x2c
    mibReq.Param.ChannelsDefaultDatarate = dr;
 80117e6:	2500      	movs	r5, #0
    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80117e8:	7023      	strb	r3, [r4, #0]
    mibReq.Param.ChannelsDefaultDatarate = dr;
 80117ea:	466b      	mov	r3, sp
 80117ec:	575d      	ldrsb	r5, [r3, r5]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117ee:	0020      	movs	r0, r4
    mibReq.Param.ChannelsDefaultDatarate = dr;
 80117f0:	7125      	strb	r5, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117f2:	f7f5 febf 	bl	8007574 <LoRaMacMibSetRequestConfirm>
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117f6:	0020      	movs	r0, r4
    mibReq.Type = MIB_CHANNELS_DATARATE;
 80117f8:	7027      	strb	r7, [r4, #0]
    mibReq.Param.ChannelsDatarate = dr;
 80117fa:	7125      	strb	r5, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80117fc:	f7f5 feba 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_CHANNELS_TX_POWER;
 8011800:	272e      	movs	r7, #46	; 0x2e
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011802:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_TX_POWER;
 8011804:	7027      	strb	r7, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011806:	f7f5 fdef 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(mibReq.Param.ChannelsTxPower != txp) {
 801180a:	2304      	movs	r3, #4
 801180c:	9a01      	ldr	r2, [sp, #4]
 801180e:	56e3      	ldrsb	r3, [r4, r3]
 8011810:	4293      	cmp	r3, r2
 8011812:	d00d      	beq.n	8011830 <LRW_FromDevCfg+0x188>
    mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8011814:	232f      	movs	r3, #47	; 0x2f
    mibReq.Param.ChannelsDefaultTxPower = txp;
 8011816:	2504      	movs	r5, #4
    mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8011818:	7023      	strb	r3, [r4, #0]
    mibReq.Param.ChannelsDefaultTxPower = txp;
 801181a:	466b      	mov	r3, sp
 801181c:	575d      	ldrsb	r5, [r3, r5]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801181e:	0020      	movs	r0, r4
    mibReq.Param.ChannelsDefaultTxPower = txp;
 8011820:	7125      	strb	r5, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011822:	f7f5 fea7 	bl	8007574 <LoRaMacMibSetRequestConfirm>
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011826:	0020      	movs	r0, r4
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8011828:	7027      	strb	r7, [r4, #0]
    mibReq.Param.ChannelsTxPower = txp;
 801182a:	7125      	strb	r5, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801182c:	f7f5 fea2 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEV_ADDR;
 8011830:	2307      	movs	r3, #7
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011832:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_ADDR;
 8011834:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011836:	f7f5 fdd7 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(mibReq.Param.DevAddr != DevCfg.devAddr) {
 801183a:	4b33      	ldr	r3, [pc, #204]	; (8011908 <LRW_FromDevCfg+0x260>)
 801183c:	6862      	ldr	r2, [r4, #4]
 801183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011840:	429a      	cmp	r2, r3
 8011842:	d003      	beq.n	801184c <LRW_FromDevCfg+0x1a4>
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011844:	0020      	movs	r0, r4
    mibReq.Param.DevAddr = DevCfg.devAddr;
 8011846:	6063      	str	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011848:	f7f5 fe94 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue, DevCfg.nwkSKey, sizeof DevCfg.nwkSKey)) {
 801184c:	6830      	ldr	r0, [r6, #0]
 801184e:	4f37      	ldr	r7, [pc, #220]	; (801192c <LRW_FromDevCfg+0x284>)
 8011850:	30fe      	adds	r0, #254	; 0xfe
 8011852:	2210      	movs	r2, #16
 8011854:	0039      	movs	r1, r7
 8011856:	30ff      	adds	r0, #255	; 0xff
 8011858:	f004 fbba 	bl	8015fd0 <memcmp>
 801185c:	ad05      	add	r5, sp, #20
 801185e:	2800      	cmp	r0, #0
 8011860:	d005      	beq.n	801186e <LRW_FromDevCfg+0x1c6>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8011862:	230c      	movs	r3, #12
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011864:	0028      	movs	r0, r5
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8011866:	702b      	strb	r3, [r5, #0]
    mibReq.Param.FNwkSIntKey = DevCfg.nwkSKey;
 8011868:	606f      	str	r7, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801186a:	f7f5 fe83 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[S_NWK_S_INT_KEY].KeyValue, DevCfg.nwkSKey, sizeof DevCfg.nwkSKey)) {
 801186e:	4a30      	ldr	r2, [pc, #192]	; (8011930 <LRW_FromDevCfg+0x288>)
 8011870:	6833      	ldr	r3, [r6, #0]
 8011872:	0039      	movs	r1, r7
 8011874:	1898      	adds	r0, r3, r2
 8011876:	3aff      	subs	r2, #255	; 0xff
 8011878:	3aff      	subs	r2, #255	; 0xff
 801187a:	f004 fba9 	bl	8015fd0 <memcmp>
 801187e:	2800      	cmp	r0, #0
 8011880:	d005      	beq.n	801188e <LRW_FromDevCfg+0x1e6>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8011882:	230d      	movs	r3, #13
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011884:	0028      	movs	r0, r5
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8011886:	702b      	strb	r3, [r5, #0]
    mibReq.Param.SNwkSIntKey = DevCfg.nwkSKey;
 8011888:	606f      	str	r7, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801188a:	f7f5 fe73 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[NWK_S_ENC_KEY].KeyValue, DevCfg.nwkSKey, sizeof DevCfg.nwkSKey)) {
 801188e:	4a29      	ldr	r2, [pc, #164]	; (8011934 <LRW_FromDevCfg+0x28c>)
 8011890:	6833      	ldr	r3, [r6, #0]
 8011892:	0039      	movs	r1, r7
 8011894:	1898      	adds	r0, r3, r2
 8011896:	2210      	movs	r2, #16
 8011898:	f004 fb9a 	bl	8015fd0 <memcmp>
 801189c:	2800      	cmp	r0, #0
 801189e:	d005      	beq.n	80118ac <LRW_FromDevCfg+0x204>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 80118a0:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118a2:	0028      	movs	r0, r5
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 80118a4:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NwkSEncKey = DevCfg.nwkSKey;
 80118a6:	606f      	str	r7, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118a8:	f7f5 fe64 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  if(memcmp(pNvm->SecureElement.KeyList[APP_S_KEY].KeyValue, DevCfg.appSKey, sizeof DevCfg.appSKey)) {
 80118ac:	238c      	movs	r3, #140	; 0x8c
 80118ae:	4f22      	ldr	r7, [pc, #136]	; (8011938 <LRW_FromDevCfg+0x290>)
 80118b0:	6830      	ldr	r0, [r6, #0]
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	2210      	movs	r2, #16
 80118b6:	0039      	movs	r1, r7
 80118b8:	18c0      	adds	r0, r0, r3
 80118ba:	f004 fb89 	bl	8015fd0 <memcmp>
 80118be:	2800      	cmp	r0, #0
 80118c0:	d005      	beq.n	80118ce <LRW_FromDevCfg+0x226>
    mibReq.Type = MIB_APP_S_KEY;
 80118c2:	230f      	movs	r3, #15
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118c4:	0028      	movs	r0, r5
    mibReq.Type = MIB_APP_S_KEY;
 80118c6:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AppSKey = DevCfg.appSKey;
 80118c8:	606f      	str	r7, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118ca:	f7f5 fe53 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  if(!!DevCfg.dutyCycle != !!pNvm->MacGroup2.DutyCycleOn) {
 80118ce:	4b0e      	ldr	r3, [pc, #56]	; (8011908 <LRW_FromDevCfg+0x260>)
 80118d0:	3353      	adds	r3, #83	; 0x53
 80118d2:	7818      	ldrb	r0, [r3, #0]
 80118d4:	4b0d      	ldr	r3, [pc, #52]	; (801190c <LRW_FromDevCfg+0x264>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	23c4      	movs	r3, #196	; 0xc4
 80118da:	005b      	lsls	r3, r3, #1
 80118dc:	5cd3      	ldrb	r3, [r2, r3]
 80118de:	4283      	cmp	r3, r0
 80118e0:	d001      	beq.n	80118e6 <LRW_FromDevCfg+0x23e>
    LoRaMacTestSetDutyCycleOn(DevCfg.dutyCycle);
 80118e2:	f7f6 fac7 	bl	8007e74 <LoRaMacTestSetDutyCycleOn>
  mibReq.Type = MIB_ADR;
 80118e6:	2305      	movs	r3, #5
  LoRaMacMibGetRequestConfirm(&mibReq);
 80118e8:	0020      	movs	r0, r4
  mibReq.Type = MIB_ADR;
 80118ea:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80118ec:	f7f5 fd7c 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  if(!!mibReq.Param.AdrEnable != !!DevCfg.adaptiveDatarate) {
 80118f0:	4b05      	ldr	r3, [pc, #20]	; (8011908 <LRW_FromDevCfg+0x260>)
 80118f2:	7922      	ldrb	r2, [r4, #4]
 80118f4:	3352      	adds	r3, #82	; 0x52
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d003      	beq.n	8011904 <LRW_FromDevCfg+0x25c>
    LoRaMacMibSetRequestConfirm(&mibReq);
 80118fc:	0020      	movs	r0, r4
    mibReq.Param.AdrEnable = DevCfg.adaptiveDatarate;
 80118fe:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8011900:	f7f5 fe38 	bl	8007574 <LoRaMacMibSetRequestConfirm>
}
 8011904:	b00f      	add	sp, #60	; 0x3c
 8011906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011908:	200000e0 	.word	0x200000e0
 801190c:	2000196c 	.word	0x2000196c
 8011910:	20000178 	.word	0x20000178
 8011914:	20000188 	.word	0x20000188
 8011918:	08019fdd 	.word	0x08019fdd
 801191c:	200000e5 	.word	0x200000e5
 8011920:	200000ed 	.word	0x200000ed
 8011924:	200000f5 	.word	0x200000f5
 8011928:	01000400 	.word	0x01000400
 801192c:	2000010c 	.word	0x2000010c
 8011930:	0000020e 	.word	0x0000020e
 8011934:	0000021f 	.word	0x0000021f
 8011938:	2000011c 	.word	0x2000011c

0801193c <LRW_Init>:
  SX126x.Spi.Mosi.pin = PA_7;
 801193c:	4b4e      	ldr	r3, [pc, #312]	; (8011a78 <LRW_Init+0x13c>)
 801193e:	2107      	movs	r1, #7
 8011940:	001a      	movs	r2, r3
 8011942:	3264      	adds	r2, #100	; 0x64
void LRW_Init(void) {
 8011944:	b570      	push	{r4, r5, r6, lr}
  SX126x.Spi.Mosi.pin = PA_7;
 8011946:	7011      	strb	r1, [r2, #0]
  SX126x.Spi.Mosi.pinIndex = 0x0080;
 8011948:	001a      	movs	r2, r3
 801194a:	3179      	adds	r1, #121	; 0x79
 801194c:	3266      	adds	r2, #102	; 0x66
 801194e:	8011      	strh	r1, [r2, #0]
  SX126x.Spi.Miso.pin = PA_6;
 8011950:	0019      	movs	r1, r3
 8011952:	2006      	movs	r0, #6
 8011954:	3178      	adds	r1, #120	; 0x78
 8011956:	7008      	strb	r0, [r1, #0]
  SX126x.Spi.Miso.pinIndex = 0x0040;
 8011958:	0019      	movs	r1, r3
 801195a:	303a      	adds	r0, #58	; 0x3a
 801195c:	317a      	adds	r1, #122	; 0x7a
 801195e:	8008      	strh	r0, [r1, #0]
  SX126x.Spi.Sclk.pin = PA_5;
 8011960:	0019      	movs	r1, r3
 8011962:	383b      	subs	r0, #59	; 0x3b
 8011964:	318c      	adds	r1, #140	; 0x8c
 8011966:	7008      	strb	r0, [r1, #0]
  SX126x.Spi.Sclk.pinIndex = 0x0020;
 8011968:	0018      	movs	r0, r3
 801196a:	2120      	movs	r1, #32
 801196c:	308e      	adds	r0, #142	; 0x8e
 801196e:	8001      	strh	r1, [r0, #0]
  SX126x.Spi.Mosi.port = GPIOA;
 8011970:	22a0      	movs	r2, #160	; 0xa0
  SX126x.Spi.Sclk.port = GPIOA;
 8011972:	0018      	movs	r0, r3
  SX126x.Spi.Mosi.port = GPIOA;
 8011974:	05d2      	lsls	r2, r2, #23
  SX126x.Spi.Sclk.port = GPIOA;
 8011976:	3090      	adds	r0, #144	; 0x90
 8011978:	6002      	str	r2, [r0, #0]
  SX126x.Spi.Nss.pin = PA_4;
 801197a:	0018      	movs	r0, r3
 801197c:	2404      	movs	r4, #4
 801197e:	30a0      	adds	r0, #160	; 0xa0
 8011980:	7004      	strb	r4, [r0, #0]
  SX126x.Spi.Nss.pinIndex = 0x0010;
 8011982:	001c      	movs	r4, r3
 8011984:	2010      	movs	r0, #16
 8011986:	34a2      	adds	r4, #162	; 0xa2
 8011988:	8020      	strh	r0, [r4, #0]
  SX126x.Spi.Nss.port = GPIOA;
 801198a:	001c      	movs	r4, r3
 801198c:	34a4      	adds	r4, #164	; 0xa4
 801198e:	6022      	str	r2, [r4, #0]
  SX126x.DIO1.pin = PB_5;
 8011990:	001c      	movs	r4, r3
 8011992:	2515      	movs	r5, #21
 8011994:	3428      	adds	r4, #40	; 0x28
 8011996:	7025      	strb	r5, [r4, #0]
  SX126x.DIO3.pin = PA_12;
 8011998:	001c      	movs	r4, r3
  SX126x.DIO1.pinIndex = 0x0020;
 801199a:	8559      	strh	r1, [r3, #42]	; 0x2a
  SX126x.DIO1.port = GPIOB;
 801199c:	4937      	ldr	r1, [pc, #220]	; (8011a7c <LRW_Init+0x140>)
  SX126x.DIO3.pin = PA_12;
 801199e:	3450      	adds	r4, #80	; 0x50
 80119a0:	3d09      	subs	r5, #9
 80119a2:	7025      	strb	r5, [r4, #0]
  SX126x.DIO1.port = GPIOB;
 80119a4:	62d9      	str	r1, [r3, #44]	; 0x2c
  SX126x.DIO3.pinIndex = 0x1000;
 80119a6:	001c      	movs	r4, r3
  SX126x.Reset.port = GPIOB;
 80119a8:	6059      	str	r1, [r3, #4]
  SX126x.DIO3.pinIndex = 0x1000;
 80119aa:	2580      	movs	r5, #128	; 0x80
  SX126x.BUSY.pin = PA_11;
 80119ac:	210b      	movs	r1, #11
  SX126x.DIO3.pinIndex = 0x1000;
 80119ae:	3452      	adds	r4, #82	; 0x52
  SX126x.BUSY.pin = PA_11;
 80119b0:	7519      	strb	r1, [r3, #20]
  SX126x.DIO3.pinIndex = 0x1000;
 80119b2:	016d      	lsls	r5, r5, #5
  SX126x.BUSY.pinIndex = 0x0800;
 80119b4:	2180      	movs	r1, #128	; 0x80
  SX126x.Spi.Mosi.port = GPIOA;
 80119b6:	669a      	str	r2, [r3, #104]	; 0x68
  SX126x.Spi.Miso.port = GPIOA;
 80119b8:	67da      	str	r2, [r3, #124]	; 0x7c
  SX126x.DIO3.pinIndex = 0x1000;
 80119ba:	8025      	strh	r5, [r4, #0]
  SX126x.DIO3.port = GPIOA;
 80119bc:	655a      	str	r2, [r3, #84]	; 0x54
  SX126x.BUSY.port = GPIOA;
 80119be:	619a      	str	r2, [r3, #24]
  SX126x.Reset.pin = PB_4;
 80119c0:	2414      	movs	r4, #20
  SX126x.BUSY.pull = PIN_PULL_UP;
 80119c2:	2201      	movs	r2, #1
  SX126x.BUSY.pinIndex = 0x0800;
 80119c4:	0109      	lsls	r1, r1, #4
  SX126x.Reset.pin = PB_4;
 80119c6:	701c      	strb	r4, [r3, #0]
  SX126x.Reset.pinIndex = 0x0010;
 80119c8:	8058      	strh	r0, [r3, #2]
  SX126x.BUSY.pinIndex = 0x0800;
 80119ca:	82d9      	strh	r1, [r3, #22]
  SX126x.BUSY.pull = PIN_PULL_UP;
 80119cc:	779a      	strb	r2, [r3, #30]
  if(LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, DevCfg.region) != LORAMAC_STATUS_OK)
 80119ce:	4b2c      	ldr	r3, [pc, #176]	; (8011a80 <LRW_Init+0x144>)
void LRW_Init(void) {
 80119d0:	b08a      	sub	sp, #40	; 0x28
  if(LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, DevCfg.region) != LORAMAC_STATUS_OK)
 80119d2:	334c      	adds	r3, #76	; 0x4c
 80119d4:	781a      	ldrb	r2, [r3, #0]
 80119d6:	492b      	ldr	r1, [pc, #172]	; (8011a84 <LRW_Init+0x148>)
 80119d8:	482b      	ldr	r0, [pc, #172]	; (8011a88 <LRW_Init+0x14c>)
 80119da:	f7f5 fac7 	bl	8006f6c <LoRaMacInitialization>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d004      	beq.n	80119ec <LRW_Init+0xb0>
    DBG_PRINTF("LRW Init Failed! %d\n", __LINE__);
 80119e2:	22f5      	movs	r2, #245	; 0xf5
 80119e4:	2000      	movs	r0, #0
 80119e6:	4929      	ldr	r1, [pc, #164]	; (8011a8c <LRW_Init+0x150>)
 80119e8:	f7fa fad5 	bl	800bf96 <SEGGER_RTT_printf>
  mibReq.Type = MIB_NVM_CTXS;
 80119ec:	2334      	movs	r3, #52	; 0x34
 80119ee:	ac01      	add	r4, sp, #4
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119f0:	0020      	movs	r0, r4
  mibReq.Type = MIB_NVM_CTXS;
 80119f2:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 80119f4:	f7f5 fcf8 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  pNvm = mibReq.Param.Contexts;
 80119f8:	4b25      	ldr	r3, [pc, #148]	; (8011a90 <LRW_Init+0x154>)
 80119fa:	6862      	ldr	r2, [r4, #4]
 80119fc:	601a      	str	r2, [r3, #0]
  if((nvmBytes = NvmDataMgmtRestore())) {
 80119fe:	f7f3 faa9 	bl	8004f54 <NvmDataMgmtRestore>
 8011a02:	1e01      	subs	r1, r0, #0
 8011a04:	d002      	beq.n	8011a0c <LRW_Init+0xd0>
    DisplayNvmDataChange(state, size);
 8011a06:	2000      	movs	r0, #0
 8011a08:	f7f3 f81e 	bl	8004a48 <DisplayNvmDataChange>
  LRW_FromDevCfg();
 8011a0c:	f7ff fe4c 	bl	80116a8 <LRW_FromDevCfg>
  mibReq.Type = MIB_DEV_EUI;
 8011a10:	2302      	movs	r3, #2
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a12:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_EUI;
 8011a14:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a16:	f7f5 fce7 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  memcpy(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 8011a1a:	4d1e      	ldr	r5, [pc, #120]	; (8011a94 <LRW_Init+0x158>)
 8011a1c:	6861      	ldr	r1, [r4, #4]
 8011a1e:	2208      	movs	r2, #8
 8011a20:	1c68      	adds	r0, r5, #1
 8011a22:	f004 fae3 	bl	8015fec <memcpy>
  mibReq.Type = MIB_JOIN_EUI;
 8011a26:	2303      	movs	r3, #3
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a28:	0020      	movs	r0, r4
  mibReq.Type = MIB_JOIN_EUI;
 8011a2a:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a2c:	f7f5 fcdc 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 8011a30:	0028      	movs	r0, r5
  mibReq.Type = MIB_SE_PIN;
 8011a32:	2604      	movs	r6, #4
  memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 8011a34:	6861      	ldr	r1, [r4, #4]
 8011a36:	2208      	movs	r2, #8
 8011a38:	3009      	adds	r0, #9
 8011a3a:	f7f2 ff8a 	bl	8004952 <memcpy1>
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a3e:	0020      	movs	r0, r4
  mibReq.Type = MIB_SE_PIN;
 8011a40:	7026      	strb	r6, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011a42:	f7f5 fcd1 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  memcpy(CommissioningParams.SePin, mibReq.Param.SePin, 4);
 8011a46:	0028      	movs	r0, r5
 8011a48:	0032      	movs	r2, r6
 8011a4a:	6861      	ldr	r1, [r4, #4]
 8011a4c:	3011      	adds	r0, #17
 8011a4e:	f004 facd 	bl	8015fec <memcpy>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8011a52:	231d      	movs	r3, #29
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a54:	0020      	movs	r0, r4
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8011a56:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnablePublicNetwork = true;
 8011a58:	3b1c      	subs	r3, #28
 8011a5a:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a5c:	f7f5 fd8a 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8011a60:	2330      	movs	r3, #48	; 0x30
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a62:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8011a64:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 100;
 8011a66:	3334      	adds	r3, #52	; 0x34
 8011a68:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8011a6a:	f7f5 fd83 	bl	8007574 <LoRaMacMibSetRequestConfirm>
  LoRaMacStart();
 8011a6e:	f7f5 fc3b 	bl	80072e8 <LoRaMacStart>
}
 8011a72:	b00a      	add	sp, #40	; 0x28
 8011a74:	bd70      	pop	{r4, r5, r6, pc}
 8011a76:	46c0      	nop			; (mov r8, r8)
 8011a78:	20001ca0 	.word	0x20001ca0
 8011a7c:	50000400 	.word	0x50000400
 8011a80:	200000e0 	.word	0x200000e0
 8011a84:	20000178 	.word	0x20000178
 8011a88:	20000188 	.word	0x20000188
 8011a8c:	08019fdd 	.word	0x08019fdd
 8011a90:	2000196c 	.word	0x2000196c
 8011a94:	20000150 	.word	0x20000150

08011a98 <LRW_ToDevCfg>:
  mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011a98:	232c      	movs	r3, #44	; 0x2c
void LRW_ToDevCfg(void) {
 8011a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a9c:	b091      	sub	sp, #68	; 0x44
  mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011a9e:	ac07      	add	r4, sp, #28
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011aa0:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8011aa2:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011aa4:	f7f5 fca0 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  datarate = mibReq.Param.ChannelsDefaultDatarate;
 8011aa8:	2304      	movs	r3, #4
 8011aaa:	56e3      	ldrsb	r3, [r4, r3]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011aac:	0020      	movs	r0, r4
  datarate = mibReq.Param.ChannelsDefaultDatarate;
 8011aae:	9301      	str	r3, [sp, #4]
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011ab4:	f7f5 fc98 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  DevCfg.isOtaa = mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP;
 8011ab8:	7923      	ldrb	r3, [r4, #4]
 8011aba:	4d3c      	ldr	r5, [pc, #240]	; (8011bac <LRW_ToDevCfg+0x114>)
 8011abc:	3b01      	subs	r3, #1
 8011abe:	1e5a      	subs	r2, r3, #1
 8011ac0:	4193      	sbcs	r3, r2
  memcpy(DevCfg.devEui, mibReq.Param.DevEui, sizeof DevCfg.devEui);
 8011ac2:	2608      	movs	r6, #8
  DevCfg.isOtaa = mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP;
 8011ac4:	712b      	strb	r3, [r5, #4]
  mibReq.Type = MIB_DEV_EUI;
 8011ac6:	2302      	movs	r3, #2
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011ac8:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_EUI;
 8011aca:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011acc:	f7f5 fc8c 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  memcpy(DevCfg.devEui, mibReq.Param.DevEui, sizeof DevCfg.devEui);
 8011ad0:	0032      	movs	r2, r6
 8011ad2:	6861      	ldr	r1, [r4, #4]
 8011ad4:	1d68      	adds	r0, r5, #5
 8011ad6:	f004 fa89 	bl	8015fec <memcpy>
  mibReq.Type = MIB_JOIN_EUI;
 8011ada:	2303      	movs	r3, #3
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011adc:	0020      	movs	r0, r4
  mibReq.Type = MIB_JOIN_EUI;
 8011ade:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011ae0:	f7f5 fc82 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  memcpy(DevCfg.appEui, mibReq.Param.JoinEui, sizeof DevCfg.appEui);
 8011ae4:	0028      	movs	r0, r5
 8011ae6:	0032      	movs	r2, r6
 8011ae8:	6861      	ldr	r1, [r4, #4]
 8011aea:	300d      	adds	r0, #13
 8011aec:	f004 fa7e 	bl	8015fec <memcpy>
  memcpy(DevCfg.appKey, pNvm->SecureElement.KeyList[NWK_KEY].KeyValue, sizeof DevCfg.appKey);
 8011af0:	0028      	movs	r0, r5
 8011af2:	4f2f      	ldr	r7, [pc, #188]	; (8011bb0 <LRW_ToDevCfg+0x118>)
 8011af4:	19b6      	adds	r6, r6, r6
 8011af6:	6839      	ldr	r1, [r7, #0]
 8011af8:	0032      	movs	r2, r6
 8011afa:	31cb      	adds	r1, #203	; 0xcb
 8011afc:	31ff      	adds	r1, #255	; 0xff
 8011afe:	3015      	adds	r0, #21
 8011b00:	f004 fa74 	bl	8015fec <memcpy>
  mibReq.Type = MIB_DEV_ADDR;
 8011b04:	2307      	movs	r3, #7
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b06:	0020      	movs	r0, r4
  mibReq.Type = MIB_DEV_ADDR;
 8011b08:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b0a:	f7f5 fc6d 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  DevCfg.devAddr = mibReq.Param.DevAddr;
 8011b0e:	6863      	ldr	r3, [r4, #4]
  memcpy(DevCfg.nwkSKey, pNvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue, sizeof DevCfg.nwkSKey);
 8011b10:	0028      	movs	r0, r5
  DevCfg.devAddr = mibReq.Param.DevAddr;
 8011b12:	62ab      	str	r3, [r5, #40]	; 0x28
  memcpy(DevCfg.nwkSKey, pNvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue, sizeof DevCfg.nwkSKey);
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	0032      	movs	r2, r6
 8011b18:	0019      	movs	r1, r3
 8011b1a:	31fe      	adds	r1, #254	; 0xfe
 8011b1c:	31ff      	adds	r1, #255	; 0xff
 8011b1e:	302c      	adds	r0, #44	; 0x2c
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	f004 fa63 	bl	8015fec <memcpy>
  memcpy(DevCfg.appSKey, pNvm->SecureElement.KeyList[APP_S_KEY].KeyValue, sizeof DevCfg.appSKey);
 8011b26:	238c      	movs	r3, #140	; 0x8c
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	469c      	mov	ip, r3
 8011b2c:	0028      	movs	r0, r5
 8011b2e:	9900      	ldr	r1, [sp, #0]
 8011b30:	0032      	movs	r2, r6
 8011b32:	4461      	add	r1, ip
 8011b34:	303c      	adds	r0, #60	; 0x3c
 8011b36:	f004 fa59 	bl	8015fec <memcpy>
  mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8011b3a:	232f      	movs	r3, #47	; 0x2f
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b3c:	0020      	movs	r0, r4
  mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8011b3e:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b40:	f7f5 fc52 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  DevCfg.txPower = LRW_FromTxPower(mibReq.Param.ChannelsDefaultTxPower);
 8011b44:	7920      	ldrb	r0, [r4, #4]
 8011b46:	f7ff fcf5 	bl	8011534 <LRW_FromTxPower>
 8011b4a:	002b      	movs	r3, r5
 8011b4c:	334e      	adds	r3, #78	; 0x4e
 8011b4e:	7018      	strb	r0, [r3, #0]
  getPhy.Attribute = PHY_SF_FROM_DR;
 8011b50:	2336      	movs	r3, #54	; 0x36
 8011b52:	ae05      	add	r6, sp, #20
 8011b54:	7033      	strb	r3, [r6, #0]
  getPhy.Datarate = datarate;
 8011b56:	9b01      	ldr	r3, [sp, #4]
  DevCfg.sf = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8011b58:	0031      	movs	r1, r6
  getPhy.Datarate = datarate;
 8011b5a:	7073      	strb	r3, [r6, #1]
  DevCfg.sf = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8011b5c:	4b15      	ldr	r3, [pc, #84]	; (8011bb4 <LRW_ToDevCfg+0x11c>)
 8011b5e:	7818      	ldrb	r0, [r3, #0]
 8011b60:	f7f7 f8c0 	bl	8008ce4 <RegionGetPhyParam>
 8011b64:	002b      	movs	r3, r5
 8011b66:	334f      	adds	r3, #79	; 0x4f
 8011b68:	7018      	strb	r0, [r3, #0]
  getPhy.Attribute = PHY_BW_FROM_DR;
 8011b6a:	2337      	movs	r3, #55	; 0x37
 8011b6c:	7033      	strb	r3, [r6, #0]
  getPhy.Datarate = datarate;
 8011b6e:	9b01      	ldr	r3, [sp, #4]
  DevCfg.sf = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8011b70:	9003      	str	r0, [sp, #12]
  getPhy.Datarate = datarate;
 8011b72:	7073      	strb	r3, [r6, #1]
  DevCfg.bw = RegionGetPhyParam(DevCfg.region, &getPhy).Value + 1;
 8011b74:	4b0f      	ldr	r3, [pc, #60]	; (8011bb4 <LRW_ToDevCfg+0x11c>)
 8011b76:	0031      	movs	r1, r6
 8011b78:	7818      	ldrb	r0, [r3, #0]
 8011b7a:	f7f7 f8b3 	bl	8008ce4 <RegionGetPhyParam>
 8011b7e:	002b      	movs	r3, r5
 8011b80:	9004      	str	r0, [sp, #16]
 8011b82:	3350      	adds	r3, #80	; 0x50
 8011b84:	3001      	adds	r0, #1
 8011b86:	7018      	strb	r0, [r3, #0]
  mibReq.Type = MIB_ADR;
 8011b88:	2305      	movs	r3, #5
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b8a:	0020      	movs	r0, r4
  mibReq.Type = MIB_ADR;
 8011b8c:	7023      	strb	r3, [r4, #0]
  LoRaMacMibGetRequestConfirm(&mibReq);
 8011b8e:	f7f5 fc2b 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
  DevCfg.adaptiveDatarate = mibReq.Param.AdrEnable;
 8011b92:	002b      	movs	r3, r5
 8011b94:	7922      	ldrb	r2, [r4, #4]
 8011b96:	3352      	adds	r3, #82	; 0x52
 8011b98:	701a      	strb	r2, [r3, #0]
  DevCfg.dutyCycle = pNvm->MacGroup2.DutyCycleOn;
 8011b9a:	23c4      	movs	r3, #196	; 0xc4
 8011b9c:	683a      	ldr	r2, [r7, #0]
 8011b9e:	005b      	lsls	r3, r3, #1
 8011ba0:	5cd3      	ldrb	r3, [r2, r3]
 8011ba2:	3553      	adds	r5, #83	; 0x53
 8011ba4:	702b      	strb	r3, [r5, #0]
}
 8011ba6:	b011      	add	sp, #68	; 0x44
 8011ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011baa:	46c0      	nop			; (mov r8, r8)
 8011bac:	200000e0 	.word	0x200000e0
 8011bb0:	2000196c 	.word	0x2000196c
 8011bb4:	2000012c 	.word	0x2000012c

08011bb8 <LRW_SaveNvm>:
static void LRW_SaveNvm(uint16_t notifyFlags) {
 8011bb8:	b510      	push	{r4, lr}
  NvmDataMgmtEvent(notifyFlags);
 8011bba:	f7f3 f959 	bl	8004e70 <NvmDataMgmtEvent>
  if(!DevCfg.changed.lrw) {
 8011bbe:	4b04      	ldr	r3, [pc, #16]	; (8011bd0 <LRW_SaveNvm+0x18>)
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	079b      	lsls	r3, r3, #30
 8011bc4:	d403      	bmi.n	8011bce <LRW_SaveNvm+0x16>
    LRW_ToDevCfg();
 8011bc6:	f7ff ff67 	bl	8011a98 <LRW_ToDevCfg>
    EEPROM_Save();
 8011bca:	f7fe f803 	bl	800fbd4 <EEPROM_Save>
}
 8011bce:	bd10      	pop	{r4, pc}
 8011bd0:	200000e0 	.word	0x200000e0

08011bd4 <LRW_IsBusy>:
bool LRW_IsBusy(void) {
 8011bd4:	b510      	push	{r4, lr}
  return LoRaMacIsBusy();
 8011bd6:	f7f4 f88b 	bl	8005cf0 <LoRaMacIsBusy>
}
 8011bda:	bd10      	pop	{r4, pc}

08011bdc <LRW_HasQueue>:

////////////////////////////////////////////////////

int32_t LRW_HasQueue(void) {
  for(size_t i = 0; i < LRW_QUEUE_LEN; i++) {
    if(lrw.queue[i].msg_type)
 8011bdc:	4b06      	ldr	r3, [pc, #24]	; (8011bf8 <LRW_HasQueue+0x1c>)
      return 1;
 8011bde:	2001      	movs	r0, #1
    if(lrw.queue[i].msg_type)
 8011be0:	789a      	ldrb	r2, [r3, #2]
 8011be2:	2a00      	cmp	r2, #0
 8011be4:	d106      	bne.n	8011bf4 <LRW_HasQueue+0x18>
 8011be6:	7c5a      	ldrb	r2, [r3, #17]
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	d103      	bne.n	8011bf4 <LRW_HasQueue+0x18>
 8011bec:	181b      	adds	r3, r3, r0
 8011bee:	7fd8      	ldrb	r0, [r3, #31]
      return 1;
 8011bf0:	1e43      	subs	r3, r0, #1
 8011bf2:	4198      	sbcs	r0, r3
  }
  return 0;
}
 8011bf4:	4770      	bx	lr
 8011bf6:	46c0      	nop			; (mov r8, r8)
 8011bf8:	2000193c 	.word	0x2000193c

08011bfc <enqueueToSend>:
 *        Either *irq* or *main* context may invoke `enqueueToSend`, no locking
 *        element needed as only *main* can pop, and *irq* only push.
 *        main:           Can't read once .msg_type is cleared.
 *        enqueueToSend:  Can't write once .msg_type is set.
 */
void enqueueToSend(enum MsgType msg_type, uint8_t trigger_type) {
 8011bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bfe:	0007      	movs	r7, r0
 8011c00:	9100      	str	r1, [sp, #0]
  size_t i = 0;

  /* Queue only if we're joined */
  if(!LRW_IsJoined()) {
 8011c02:	f7ff fcdb 	bl	80115bc <LRW_IsJoined>
    DEBUG_MSG("LRW ERR UNJOINED, Ignore Event!\n");
 8011c06:	4931      	ldr	r1, [pc, #196]	; (8011ccc <enqueueToSend+0xd0>)
  if(!LRW_IsJoined()) {
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d05c      	beq.n	8011cc6 <enqueueToSend+0xca>
    return;
  }

  /* Pick an empty buffer to use */
  while(lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011c0c:	4d30      	ldr	r5, [pc, #192]	; (8011cd0 <enqueueToSend+0xd4>)
 8011c0e:	78ab      	ldrb	r3, [r5, #2]
 8011c10:	b2de      	uxtb	r6, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00a      	beq.n	8011c2c <enqueueToSend+0x30>
 8011c16:	7c6b      	ldrb	r3, [r5, #17]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d006      	beq.n	8011c2a <enqueueToSend+0x2e>
 8011c1c:	1c6b      	adds	r3, r5, #1
 8011c1e:	7fdb      	ldrb	r3, [r3, #31]

  /* It appears there's no empty buffer */
  if(i >= LRW_QUEUE_LEN) {
    DEBUG_MSG("LRW ERR Queue full!\n");
 8011c20:	492c      	ldr	r1, [pc, #176]	; (8011cd4 <enqueueToSend+0xd8>)
  while(lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d14e      	bne.n	8011cc4 <enqueueToSend+0xc8>
 8011c26:	2602      	movs	r6, #2
 8011c28:	e000      	b.n	8011c2c <enqueueToSend+0x30>
 8011c2a:	2601      	movs	r6, #1
    return;
  }
  uint8_t *msg = lrw.queue[i].msg;

  /* Compose a message */
  switch(msg_type) {
 8011c2c:	1e7b      	subs	r3, r7, #1
    assert(0);
#endif
    break;
  }
  default: {
    DEBUG_MSG("LRW ERR None Event\n");
 8011c2e:	492a      	ldr	r1, [pc, #168]	; (8011cd8 <enqueueToSend+0xdc>)
  switch(msg_type) {
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d847      	bhi.n	8011cc4 <enqueueToSend+0xc8>
  uint8_t *msg = lrw.queue[i].msg;
 8011c34:	240f      	movs	r4, #15
 8011c36:	4374      	muls	r4, r6
      uint32_t v = getBatteryVoltage() / 10;
 8011c38:	f7fe fd80 	bl	801073c <getBatteryVoltage>
  uint8_t *msg = lrw.queue[i].msg;
 8011c3c:	3404      	adds	r4, #4
      uint32_t v = getBatteryVoltage() / 10;
 8011c3e:	210a      	movs	r1, #10
  uint8_t *msg = lrw.queue[i].msg;
 8011c40:	192c      	adds	r4, r5, r4
      uint32_t v = getBatteryVoltage() / 10;
 8011c42:	f7ee fa91 	bl	8000168 <__udivsi3>
      v = v < 201 ? 201 : v;
 8011c46:	28c9      	cmp	r0, #201	; 0xc9
 8011c48:	d200      	bcs.n	8011c4c <enqueueToSend+0x50>
 8011c4a:	20c9      	movs	r0, #201	; 0xc9
      v = v > 327 ? 327 : v;
 8011c4c:	23a4      	movs	r3, #164	; 0xa4
 8011c4e:	005b      	lsls	r3, r3, #1
 8011c50:	4298      	cmp	r0, r3
 8011c52:	d301      	bcc.n	8011c58 <enqueueToSend+0x5c>
 8011c54:	2048      	movs	r0, #72	; 0x48
 8011c56:	30ff      	adds	r0, #255	; 0xff
      msg[1] = (v - 200) & 0x7f;
 8011c58:	3038      	adds	r0, #56	; 0x38
 8011c5a:	7060      	strb	r0, [r4, #1]
      BMA400_Read();
 8011c5c:	f002 f8b4 	bl	8013dc8 <BMA400_Read>
      msg[2] = bma400.raw_x;
 8011c60:	4b1e      	ldr	r3, [pc, #120]	; (8011cdc <enqueueToSend+0xe0>)
 8011c62:	8a5a      	ldrh	r2, [r3, #18]
 8011c64:	70a2      	strb	r2, [r4, #2]
      msg[3] = bma400.raw_y;
 8011c66:	8a9a      	ldrh	r2, [r3, #20]
 8011c68:	70e2      	strb	r2, [r4, #3]
      msg[4] = bma400.raw_z;
 8011c6a:	8ada      	ldrh	r2, [r3, #22]
 8011c6c:	7122      	strb	r2, [r4, #4]
      msg[5] = bma400.raw_x_ref;
 8011c6e:	7e1a      	ldrb	r2, [r3, #24]
 8011c70:	7162      	strb	r2, [r4, #5]
      msg[6] = bma400.raw_y_ref;
 8011c72:	7e5a      	ldrb	r2, [r3, #25]
 8011c74:	71a2      	strb	r2, [r4, #6]
      msg[7] = bma400.raw_z_ref;
 8011c76:	7e9b      	ldrb	r3, [r3, #26]
 8011c78:	71e3      	strb	r3, [r4, #7]
      HDC2080_Read();
 8011c7a:	f002 fa33 	bl	80140e4 <HDC2080_Read>
      msg[8] = hdc2080.raw_temp >> 7 & 0xff;
 8011c7e:	4a18      	ldr	r2, [pc, #96]	; (8011ce0 <enqueueToSend+0xe4>)
 8011c80:	8813      	ldrh	r3, [r2, #0]
 8011c82:	09d9      	lsrs	r1, r3, #7
 8011c84:	7221      	strb	r1, [r4, #8]
      msg[9] = (hdc2080.raw_temp >> 8 & 0x80) | hdc2080.humid % 100;
 8011c86:	217f      	movs	r1, #127	; 0x7f
 8011c88:	0a1b      	lsrs	r3, r3, #8
 8011c8a:	438b      	bics	r3, r1
 8011c8c:	9301      	str	r3, [sp, #4]
 8011c8e:	7990      	ldrb	r0, [r2, #6]
 8011c90:	391b      	subs	r1, #27
 8011c92:	f7ee faef 	bl	8000274 <__aeabi_uidivmod>
 8011c96:	9b01      	ldr	r3, [sp, #4]
 8011c98:	4319      	orrs	r1, r3
 8011c9a:	7261      	strb	r1, [r4, #9]
      SFH7776_Read();
 8011c9c:	f002 f982 	bl	8013fa4 <SFH7776_Read>
    msg[0] = lrw.queue[i].trigger_type & 0xf;
 8011ca0:	220f      	movs	r2, #15
      msg[10] = sfh7776.lux;
 8011ca2:	4b10      	ldr	r3, [pc, #64]	; (8011ce4 <enqueueToSend+0xe8>)
    msg[0] = lrw.queue[i].trigger_type & 0xf;
 8011ca4:	4356      	muls	r6, r2
      msg[10] = sfh7776.lux;
 8011ca6:	88db      	ldrh	r3, [r3, #6]
    msg[0] = lrw.queue[i].trigger_type & 0xf;
 8011ca8:	19ad      	adds	r5, r5, r6
      msg[10] = sfh7776.lux;
 8011caa:	72a3      	strb	r3, [r4, #10]
      msg[11] = sfh7776.lux >> 8 & 0x3f;
 8011cac:	049b      	lsls	r3, r3, #18
 8011cae:	0e9b      	lsrs	r3, r3, #26
 8011cb0:	72e3      	strb	r3, [r4, #11]
    msg[0] = lrw.queue[i].trigger_type & 0xf;
 8011cb2:	7c2b      	ldrb	r3, [r5, #16]
 8011cb4:	4013      	ands	r3, r2
 8011cb6:	7023      	strb	r3, [r4, #0]
    lrw.queue[i].len = 12;
 8011cb8:	230c      	movs	r3, #12
 8011cba:	70eb      	strb	r3, [r5, #3]
  }
  }

  /* Queue request for sending message */
#if defined(STX)
  lrw.queue[i].trigger_type = trigger_type;
 8011cbc:	9b00      	ldr	r3, [sp, #0]
#endif
  lrw.queue[i].msg_type = msg_type;
 8011cbe:	70af      	strb	r7, [r5, #2]
  lrw.queue[i].trigger_type = trigger_type;
 8011cc0:	742b      	strb	r3, [r5, #16]
}
 8011cc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    DEBUG_MSG("LRW ERR None Event\n");
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	f7f9 ff93 	bl	800bbf0 <SEGGER_RTT_WriteString>
    return;
 8011cca:	e7fa      	b.n	8011cc2 <enqueueToSend+0xc6>
 8011ccc:	08019ff2 	.word	0x08019ff2
 8011cd0:	2000193c 	.word	0x2000193c
 8011cd4:	0801a013 	.word	0x0801a013
 8011cd8:	0801a028 	.word	0x0801a028
 8011cdc:	200019e4 	.word	0x200019e4
 8011ce0:	20001a00 	.word	0x20001a00
 8011ce4:	20001a08 	.word	0x20001a08

08011ce8 <LRW_Send>:
 *
 *    Automatic storage duration
 *        Make sure the SendPayload can take buffer from stack, currently it
 *        can as it copies it to an internal buffer.
 */
void LRW_Send(void) {
 8011ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
  size_t i = 0;
 8011cea:	2500      	movs	r5, #0
  LmHandlerAppData_t appData;

  /* Pick a queued message, if there is any */
  while(!lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011cec:	4c2e      	ldr	r4, [pc, #184]	; (8011da8 <LRW_Send+0xc0>)
void LRW_Send(void) {
 8011cee:	b085      	sub	sp, #20
  while(!lrw.queue[i].msg_type && ++i < LRW_QUEUE_LEN);
 8011cf0:	78a3      	ldrb	r3, [r4, #2]
 8011cf2:	42ab      	cmp	r3, r5
 8011cf4:	d108      	bne.n	8011d08 <LRW_Send+0x20>
 8011cf6:	7c63      	ldrb	r3, [r4, #17]
 8011cf8:	3501      	adds	r5, #1
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d104      	bne.n	8011d08 <LRW_Send+0x20>
 8011cfe:	1963      	adds	r3, r4, r5
 8011d00:	7fdd      	ldrb	r5, [r3, #31]
 8011d02:	426b      	negs	r3, r5
 8011d04:	415d      	adcs	r5, r3
 8011d06:	3502      	adds	r5, #2

  /* Pick ongoing message instead */
  i = lrw.retrans_left ? lrw.retrans_index : i;
 8011d08:	7823      	ldrb	r3, [r4, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d012      	beq.n	8011d34 <LRW_Send+0x4c>
 8011d0e:	7865      	ldrb	r5, [r4, #1]

  /* It appears there's none */
  if(i >= LRW_QUEUE_LEN) {
 8011d10:	2d02      	cmp	r5, #2
 8011d12:	d919      	bls.n	8011d48 <LRW_Send+0x60>
    lrw.retrans_left--;
  }
  if(!lrw.retrans_left) {
    lrw.queue[i].msg_type = 0;
  }
}
 8011d14:	b005      	add	sp, #20
 8011d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("%02x", lrw.queue[i].msg[--j]);
 8011d18:	9b01      	ldr	r3, [sp, #4]
 8011d1a:	3f01      	subs	r7, #1
 8011d1c:	5dda      	ldrb	r2, [r3, r7]
 8011d1e:	4923      	ldr	r1, [pc, #140]	; (8011dac <LRW_Send+0xc4>)
 8011d20:	2000      	movs	r0, #0
 8011d22:	f7fa f938 	bl	800bf96 <SEGGER_RTT_printf>
 8011d26:	e01c      	b.n	8011d62 <LRW_Send+0x7a>
    lrw.retrans_left--;
 8011d28:	3b01      	subs	r3, #1
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	7023      	strb	r3, [r4, #0]
  if(!lrw.retrans_left) {
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1f0      	bne.n	8011d14 <LRW_Send+0x2c>
 8011d32:	e032      	b.n	8011d9a <LRW_Send+0xb2>
  if(i >= LRW_QUEUE_LEN) {
 8011d34:	2d03      	cmp	r5, #3
 8011d36:	d0ed      	beq.n	8011d14 <LRW_Send+0x2c>
  if(!lrw.retrans_left && DevCfg.confirmedMsgs) {
 8011d38:	4b1d      	ldr	r3, [pc, #116]	; (8011db0 <LRW_Send+0xc8>)
 8011d3a:	3351      	adds	r3, #81	; 0x51
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <LRW_Send+0x60>
    lrw.retrans_left = 3;
 8011d42:	2303      	movs	r3, #3
    lrw.retrans_index = i;
 8011d44:	7065      	strb	r5, [r4, #1]
    lrw.retrans_left = 3;
 8011d46:	7023      	strb	r3, [r4, #0]
  DBG_PRINTF("LRW >TX retrans_left:%d [%u] 0x", lrw.retrans_left, lrw.queue[i].len);
 8011d48:	260f      	movs	r6, #15
 8011d4a:	436e      	muls	r6, r5
 8011d4c:	19a7      	adds	r7, r4, r6
 8011d4e:	78fb      	ldrb	r3, [r7, #3]
 8011d50:	2000      	movs	r0, #0
 8011d52:	7822      	ldrb	r2, [r4, #0]
 8011d54:	4917      	ldr	r1, [pc, #92]	; (8011db4 <LRW_Send+0xcc>)
 8011d56:	3604      	adds	r6, #4
 8011d58:	f7fa f91d 	bl	800bf96 <SEGGER_RTT_printf>
  for(size_t j = lrw.queue[i].len; j;) {
 8011d5c:	19a3      	adds	r3, r4, r6
 8011d5e:	78ff      	ldrb	r7, [r7, #3]
 8011d60:	9301      	str	r3, [sp, #4]
 8011d62:	2f00      	cmp	r7, #0
 8011d64:	d1d8      	bne.n	8011d18 <LRW_Send+0x30>
  DBG_PRINTF("\n");
 8011d66:	4914      	ldr	r1, [pc, #80]	; (8011db8 <LRW_Send+0xd0>)
 8011d68:	0038      	movs	r0, r7
 8011d6a:	f7fa f914 	bl	800bf96 <SEGGER_RTT_printf>
  appData.BufferSize = lrw.queue[i].len;
 8011d6e:	230f      	movs	r3, #15
 8011d70:	436b      	muls	r3, r5
 8011d72:	18e3      	adds	r3, r4, r3
 8011d74:	78db      	ldrb	r3, [r3, #3]
 8011d76:	aa02      	add	r2, sp, #8
 8011d78:	7053      	strb	r3, [r2, #1]
  appData.Port = DevCfg.txPort;
 8011d7a:	4b0d      	ldr	r3, [pc, #52]	; (8011db0 <LRW_Send+0xc8>)
  appData.Buffer = lrw.queue[i].msg;
 8011d7c:	19a6      	adds	r6, r4, r6
 8011d7e:	9603      	str	r6, [sp, #12]
  appData.Port = DevCfg.txPort;
 8011d80:	334d      	adds	r3, #77	; 0x4d
 8011d82:	781b      	ldrb	r3, [r3, #0]
  LRW_TX(&appData);
 8011d84:	0010      	movs	r0, r2
  appData.Port = DevCfg.txPort;
 8011d86:	7013      	strb	r3, [r2, #0]
  LRW_TX(&appData);
 8011d88:	f7ff fc30 	bl	80115ec <LRW_TX>
  if(DutyCycleWaitTime) {
 8011d8c:	4b0b      	ldr	r3, [pc, #44]	; (8011dbc <LRW_Send+0xd4>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d1bf      	bne.n	8011d14 <LRW_Send+0x2c>
  if(lrw.retrans_left) {
 8011d94:	7823      	ldrb	r3, [r4, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1c6      	bne.n	8011d28 <LRW_Send+0x40>
    lrw.queue[i].msg_type = 0;
 8011d9a:	230f      	movs	r3, #15
 8011d9c:	435d      	muls	r5, r3
 8011d9e:	2300      	movs	r3, #0
 8011da0:	1964      	adds	r4, r4, r5
 8011da2:	70a3      	strb	r3, [r4, #2]
 8011da4:	e7b6      	b.n	8011d14 <LRW_Send+0x2c>
 8011da6:	46c0      	nop			; (mov r8, r8)
 8011da8:	2000193c 	.word	0x2000193c
 8011dac:	080198c4 	.word	0x080198c4
 8011db0:	200000e0 	.word	0x200000e0
 8011db4:	0801a03c 	.word	0x0801a03c
 8011db8:	080191ba 	.word	0x080191ba
 8011dbc:	20001938 	.word	0x20001938

08011dc0 <HAL_GPIO_EXTI_Callback>:
 * NOTES
 *        Humorously the ISR acronym below happens to mean two different things:
 *        * Interrupt Sub-Routine      - Code triggered on interrupt event
 *        * Interrupt Status Register  - Cause of Interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	0004      	movs	r4, r0
 8011dc4:	b086      	sub	sp, #24
  uint8_t triggerType;
  switch(GPIO_Pin) {
 8011dc6:	2820      	cmp	r0, #32
 8011dc8:	d061      	beq.n	8011e8e <HAL_GPIO_EXTI_Callback+0xce>
 8011dca:	d808      	bhi.n	8011dde <HAL_GPIO_EXTI_Callback+0x1e>
 8011dcc:	2802      	cmp	r0, #2
 8011dce:	d065      	beq.n	8011e9c <HAL_GPIO_EXTI_Callback+0xdc>
 8011dd0:	2808      	cmp	r0, #8
 8011dd2:	d100      	bne.n	8011dd6 <HAL_GPIO_EXTI_Callback+0x16>
 8011dd4:	e067      	b.n	8011ea6 <HAL_GPIO_EXTI_Callback+0xe6>
 8011dd6:	2801      	cmp	r0, #1
 8011dd8:	d02a      	beq.n	8011e30 <HAL_GPIO_EXTI_Callback+0x70>
    enqueueToSend(EVENT, triggerType);
#endif
    break;
  }
  default:
    DEBUG_MSG("IRQ Unhandled\n");
 8011dda:	494d      	ldr	r1, [pc, #308]	; (8011f10 <HAL_GPIO_EXTI_Callback+0x150>)
 8011ddc:	e048      	b.n	8011e70 <HAL_GPIO_EXTI_Callback+0xb0>
  switch(GPIO_Pin) {
 8011dde:	2380      	movs	r3, #128	; 0x80
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	4298      	cmp	r0, r3
 8011de4:	d100      	bne.n	8011de8 <HAL_GPIO_EXTI_Callback+0x28>
 8011de6:	e082      	b.n	8011eee <HAL_GPIO_EXTI_Callback+0x12e>
 8011de8:	2380      	movs	r3, #128	; 0x80
 8011dea:	00db      	lsls	r3, r3, #3
 8011dec:	4298      	cmp	r0, r3
 8011dee:	d1f4      	bne.n	8011dda <HAL_GPIO_EXTI_Callback+0x1a>
    SFH7776_Read();
 8011df0:	f002 f8d8 	bl	8013fa4 <SFH7776_Read>
    triggerType = sfh7776.als_vis < sfh7776.als_vis_tl ? LRW_B0_TRIGGER_LIGHT_LOW : LRW_B0_TRIGGER_LIGHT_HIGH;
 8011df4:	4a47      	ldr	r2, [pc, #284]	; (8011f14 <HAL_GPIO_EXTI_Callback+0x154>)
    DEBUG_PRINTF("SEN SFH7776 IRQ trigger:%d ALS_VIS:0x%04x ALS_IR:0x%04x lux:%5d\n", triggerType, sfh7776.als_vis, sfh7776.als_ir, sfh7776.lux);
 8011df6:	2000      	movs	r0, #0
    triggerType = sfh7776.als_vis < sfh7776.als_vis_tl ? LRW_B0_TRIGGER_LIGHT_LOW : LRW_B0_TRIGGER_LIGHT_HIGH;
 8011df8:	8813      	ldrh	r3, [r2, #0]
 8011dfa:	8891      	ldrh	r1, [r2, #4]
 8011dfc:	428b      	cmp	r3, r1
 8011dfe:	4189      	sbcs	r1, r1
 8011e00:	424c      	negs	r4, r1
    DEBUG_PRINTF("SEN SFH7776 IRQ trigger:%d ALS_VIS:0x%04x ALS_IR:0x%04x lux:%5d\n", triggerType, sfh7776.als_vis, sfh7776.als_ir, sfh7776.lux);
 8011e02:	88d1      	ldrh	r1, [r2, #6]
    triggerType = sfh7776.als_vis < sfh7776.als_vis_tl ? LRW_B0_TRIGGER_LIGHT_LOW : LRW_B0_TRIGGER_LIGHT_HIGH;
 8011e04:	3402      	adds	r4, #2
    DEBUG_PRINTF("SEN SFH7776 IRQ trigger:%d ALS_VIS:0x%04x ALS_IR:0x%04x lux:%5d\n", triggerType, sfh7776.als_vis, sfh7776.als_ir, sfh7776.lux);
 8011e06:	9101      	str	r1, [sp, #4]
 8011e08:	8852      	ldrh	r2, [r2, #2]
 8011e0a:	4943      	ldr	r1, [pc, #268]	; (8011f18 <HAL_GPIO_EXTI_Callback+0x158>)
 8011e0c:	9200      	str	r2, [sp, #0]
 8011e0e:	0022      	movs	r2, r4
 8011e10:	f7fa f8c1 	bl	800bf96 <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011e14:	f7ff fbd2 	bl	80115bc <LRW_IsJoined>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d028      	beq.n	8011e6e <HAL_GPIO_EXTI_Callback+0xae>
    if(!DevCfg.useSensor.sfh7776) {
 8011e1c:	4b3f      	ldr	r3, [pc, #252]	; (8011f1c <HAL_GPIO_EXTI_Callback+0x15c>)
      DEBUG_MSG("SEN SHF7776 UNUSED, Ignore Event!\n");
 8011e1e:	4940      	ldr	r1, [pc, #256]	; (8011f20 <HAL_GPIO_EXTI_Callback+0x160>)
    if(!DevCfg.useSensor.sfh7776) {
 8011e20:	336c      	adds	r3, #108	; 0x6c
 8011e22:	781a      	ldrb	r2, [r3, #0]
 8011e24:	2302      	movs	r3, #2
 8011e26:	0010      	movs	r0, r2
 8011e28:	4018      	ands	r0, r3
 8011e2a:	421a      	tst	r2, r3
 8011e2c:	d05c      	beq.n	8011ee8 <HAL_GPIO_EXTI_Callback+0x128>
 8011e2e:	e029      	b.n	8011e84 <HAL_GPIO_EXTI_Callback+0xc4>
    BMA400_Read();
 8011e30:	f001 ffca 	bl	8013dc8 <BMA400_Read>
    DEBUG_PRINTF("SEN BMA400  IRQ trigger:%u X:%5d Y:%5d Z:%5d rX:%5d rY:%5d rZ:%5d IRQ:0x%04x\n",
 8011e34:	4a3b      	ldr	r2, [pc, #236]	; (8011f24 <HAL_GPIO_EXTI_Callback+0x164>)
 8011e36:	2106      	movs	r1, #6
 8011e38:	5e53      	ldrsh	r3, [r2, r1]
 8011e3a:	8891      	ldrh	r1, [r2, #4]
 8011e3c:	9105      	str	r1, [sp, #20]
 8011e3e:	2010      	movs	r0, #16
 8011e40:	5e11      	ldrsh	r1, [r2, r0]
 8011e42:	9104      	str	r1, [sp, #16]
 8011e44:	200e      	movs	r0, #14
 8011e46:	5e11      	ldrsh	r1, [r2, r0]
 8011e48:	9103      	str	r1, [sp, #12]
 8011e4a:	200c      	movs	r0, #12
 8011e4c:	5e11      	ldrsh	r1, [r2, r0]
 8011e4e:	9102      	str	r1, [sp, #8]
 8011e50:	200a      	movs	r0, #10
 8011e52:	5e11      	ldrsh	r1, [r2, r0]
 8011e54:	2000      	movs	r0, #0
 8011e56:	9101      	str	r1, [sp, #4]
 8011e58:	2108      	movs	r1, #8
 8011e5a:	5e52      	ldrsh	r2, [r2, r1]
 8011e5c:	4932      	ldr	r1, [pc, #200]	; (8011f28 <HAL_GPIO_EXTI_Callback+0x168>)
 8011e5e:	9200      	str	r2, [sp, #0]
 8011e60:	0022      	movs	r2, r4
 8011e62:	f7fa f898 	bl	800bf96 <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011e66:	f7ff fba9 	bl	80115bc <LRW_IsJoined>
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	d102      	bne.n	8011e74 <HAL_GPIO_EXTI_Callback+0xb4>
      DEBUG_MSG("LRW WARN  UNJOINED, Ignore Event!\n");
 8011e6e:	492f      	ldr	r1, [pc, #188]	; (8011f2c <HAL_GPIO_EXTI_Callback+0x16c>)
    DEBUG_MSG("IRQ Unhandled\n");
 8011e70:	2000      	movs	r0, #0
 8011e72:	e039      	b.n	8011ee8 <HAL_GPIO_EXTI_Callback+0x128>
    if(!DevCfg.useSensor.bma400) {
 8011e74:	4b29      	ldr	r3, [pc, #164]	; (8011f1c <HAL_GPIO_EXTI_Callback+0x15c>)
      DEBUG_MSG("SEN BMA400  UNUSED, Ignore Event!\n");
 8011e76:	492e      	ldr	r1, [pc, #184]	; (8011f30 <HAL_GPIO_EXTI_Callback+0x170>)
    if(!DevCfg.useSensor.bma400) {
 8011e78:	336c      	adds	r3, #108	; 0x6c
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	0018      	movs	r0, r3
 8011e7e:	4020      	ands	r0, r4
 8011e80:	4223      	tst	r3, r4
 8011e82:	d031      	beq.n	8011ee8 <HAL_GPIO_EXTI_Callback+0x128>
    enqueueToSend(EVENT, triggerType);
 8011e84:	0021      	movs	r1, r4
 8011e86:	2002      	movs	r0, #2
 8011e88:	f7ff feb8 	bl	8011bfc <enqueueToSend>
    break;
 8011e8c:	e004      	b.n	8011e98 <HAL_GPIO_EXTI_Callback+0xd8>
    GpioIrq[5]->IrqHandler(GpioIrq[5]->Context);
 8011e8e:	4b29      	ldr	r3, [pc, #164]	; (8011f34 <HAL_GPIO_EXTI_Callback+0x174>)
 8011e90:	695b      	ldr	r3, [r3, #20]
 8011e92:	691a      	ldr	r2, [r3, #16]
 8011e94:	68d8      	ldr	r0, [r3, #12]
 8011e96:	4790      	blx	r2
  }
}
 8011e98:	b006      	add	sp, #24
 8011e9a:	bd10      	pop	{r4, pc}
    HW_ExitStopMode();
 8011e9c:	f7fe fe20 	bl	8010ae0 <HW_ExitStopMode>
    NFCISR();
 8011ea0:	f7fe ffec 	bl	8010e7c <NFCISR>
    break;
 8011ea4:	e7f8      	b.n	8011e98 <HAL_GPIO_EXTI_Callback+0xd8>
    HDC2080_Read();
 8011ea6:	f002 f91d 	bl	80140e4 <HDC2080_Read>
      hdc2080.status & 0x40 ? LRW_B0_TRIGGER_TEMPERATURE_HIGH :
 8011eaa:	4b23      	ldr	r3, [pc, #140]	; (8011f38 <HAL_GPIO_EXTI_Callback+0x178>)
    triggerType =
 8011eac:	2404      	movs	r4, #4
      hdc2080.status & 0x40 ? LRW_B0_TRIGGER_TEMPERATURE_HIGH :
 8011eae:	79db      	ldrb	r3, [r3, #7]
    triggerType =
 8011eb0:	065a      	lsls	r2, r3, #25
 8011eb2:	d407      	bmi.n	8011ec4 <HAL_GPIO_EXTI_Callback+0x104>
 8011eb4:	3401      	adds	r4, #1
 8011eb6:	069a      	lsls	r2, r3, #26
 8011eb8:	d404      	bmi.n	8011ec4 <HAL_GPIO_EXTI_Callback+0x104>
 8011eba:	340b      	adds	r4, #11
 8011ebc:	401c      	ands	r4, r3
 8011ebe:	4262      	negs	r2, r4
 8011ec0:	4154      	adcs	r4, r2
 8011ec2:	3406      	adds	r4, #6
    DEBUG_PRINTF("SEN HDC2080 IRQ trigger:%u CONFIG:0x%02x\n", triggerType, hdc2080.status);
 8011ec4:	0022      	movs	r2, r4
 8011ec6:	491d      	ldr	r1, [pc, #116]	; (8011f3c <HAL_GPIO_EXTI_Callback+0x17c>)
 8011ec8:	2000      	movs	r0, #0
 8011eca:	f7fa f864 	bl	800bf96 <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011ece:	f7ff fb75 	bl	80115bc <LRW_IsJoined>
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d0cb      	beq.n	8011e6e <HAL_GPIO_EXTI_Callback+0xae>
    if(!DevCfg.useSensor.hdc2080) {
 8011ed6:	4b11      	ldr	r3, [pc, #68]	; (8011f1c <HAL_GPIO_EXTI_Callback+0x15c>)
      DEBUG_MSG("SEN HDC2080 UNUSED, Ignore Event!\n");
 8011ed8:	4919      	ldr	r1, [pc, #100]	; (8011f40 <HAL_GPIO_EXTI_Callback+0x180>)
    if(!DevCfg.useSensor.hdc2080) {
 8011eda:	336c      	adds	r3, #108	; 0x6c
 8011edc:	781a      	ldrb	r2, [r3, #0]
 8011ede:	2304      	movs	r3, #4
 8011ee0:	0010      	movs	r0, r2
 8011ee2:	4018      	ands	r0, r3
 8011ee4:	421a      	tst	r2, r3
 8011ee6:	d1cd      	bne.n	8011e84 <HAL_GPIO_EXTI_Callback+0xc4>
    DEBUG_MSG("IRQ Unhandled\n");
 8011ee8:	f7f9 fe82 	bl	800bbf0 <SEGGER_RTT_WriteString>
}
 8011eec:	e7d4      	b.n	8011e98 <HAL_GPIO_EXTI_Callback+0xd8>
    DEBUG_PRINTF("SEN Reed Switch IRQ trigger:%u\n", LRW_B0_TRIGGER_REED_SWITCH);
 8011eee:	2208      	movs	r2, #8
 8011ef0:	4914      	ldr	r1, [pc, #80]	; (8011f44 <HAL_GPIO_EXTI_Callback+0x184>)
 8011ef2:	2000      	movs	r0, #0
 8011ef4:	f7fa f84f 	bl	800bf96 <SEGGER_RTT_printf>
    if(!LRW_IsJoined()) {
 8011ef8:	f7ff fb60 	bl	80115bc <LRW_IsJoined>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d0b6      	beq.n	8011e6e <HAL_GPIO_EXTI_Callback+0xae>
    if(LRW_IsBusy())
 8011f00:	f7ff fe68 	bl	8011bd4 <LRW_IsBusy>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	d1c7      	bne.n	8011e98 <HAL_GPIO_EXTI_Callback+0xd8>
    ReedSwitchISR();
 8011f08:	f7fe ff4a 	bl	8010da0 <ReedSwitchISR>
    break;
 8011f0c:	e7c4      	b.n	8011e98 <HAL_GPIO_EXTI_Callback+0xd8>
 8011f0e:	46c0      	nop			; (mov r8, r8)
 8011f10:	0801a1c1 	.word	0x0801a1c1
 8011f14:	20001a08 	.word	0x20001a08
 8011f18:	0801a15d 	.word	0x0801a15d
 8011f1c:	200000e0 	.word	0x200000e0
 8011f20:	0801a19e 	.word	0x0801a19e
 8011f24:	200019e4 	.word	0x200019e4
 8011f28:	0801a05c 	.word	0x0801a05c
 8011f2c:	0801a0aa 	.word	0x0801a0aa
 8011f30:	0801a0cd 	.word	0x0801a0cd
 8011f34:	20000328 	.word	0x20000328
 8011f38:	20001a00 	.word	0x20001a00
 8011f3c:	0801a0f0 	.word	0x0801a0f0
 8011f40:	0801a11a 	.word	0x0801a11a
 8011f44:	0801a13d 	.word	0x0801a13d

08011f48 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* Wake-up timer (RTC) implementation */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8011f48:	b570      	push	{r4, r5, r6, lr}
  uint32_t now = HW_RTCGetSTime();
 8011f4a:	f7fe fda5 	bl	8010a98 <HW_RTCGetSTime>

  DEBUG_PRINTF("RTC WAKEUP now:%d reason:%d\n", now, wuh.reason);
 8011f4e:	4d14      	ldr	r5, [pc, #80]	; (8011fa0 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>)
 8011f50:	0002      	movs	r2, r0
 8011f52:	782b      	ldrb	r3, [r5, #0]
  uint32_t now = HW_RTCGetSTime();
 8011f54:	0004      	movs	r4, r0
  DEBUG_PRINTF("RTC WAKEUP now:%d reason:%d\n", now, wuh.reason);
 8011f56:	4913      	ldr	r1, [pc, #76]	; (8011fa4 <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>)
 8011f58:	2000      	movs	r0, #0
 8011f5a:	f7fa f81c 	bl	800bf96 <SEGGER_RTT_printf>

  if(wuh.dutycycle_due && wuh.dutycycle_due <= now) {
 8011f5e:	68ab      	ldr	r3, [r5, #8]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d005      	beq.n	8011f70 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
 8011f64:	42a3      	cmp	r3, r4
 8011f66:	d803      	bhi.n	8011f70 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
    PrepareWakeup(WAKEUP_LRW_DUTYCYCLE, 0);
 8011f68:	2100      	movs	r1, #0
 8011f6a:	2002      	movs	r0, #2
 8011f6c:	f7fe fe18 	bl	8010ba0 <PrepareWakeup>
  }
  if(wuh.schedmsg_due && wuh.schedmsg_due <= now) {
 8011f70:	686b      	ldr	r3, [r5, #4]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00a      	beq.n	8011f8c <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
 8011f76:	42a3      	cmp	r3, r4
 8011f78:	d808      	bhi.n	8011f8c <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
    PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
 8011f7a:	4b0b      	ldr	r3, [pc, #44]	; (8011fa8 <HAL_RTCEx_WakeUpTimerEventCallback+0x60>)
 8011f7c:	2001      	movs	r0, #1
 8011f7e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011f80:	f7fe fe0e 	bl	8010ba0 <PrepareWakeup>
    enqueueToSend(SCHEDULED, 0);
 8011f84:	2100      	movs	r1, #0
 8011f86:	2001      	movs	r0, #1
 8011f88:	f7ff fe38 	bl	8011bfc <enqueueToSend>
  }
  if(wuh.bsec_due && wuh.bsec_due <= now) {
 8011f8c:	68eb      	ldr	r3, [r5, #12]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d005      	beq.n	8011f9e <HAL_RTCEx_WakeUpTimerEventCallback+0x56>
 8011f92:	42a3      	cmp	r3, r4
 8011f94:	d803      	bhi.n	8011f9e <HAL_RTCEx_WakeUpTimerEventCallback+0x56>
    PrepareWakeup(WAKEUP_BSEC_SAMPLE, 0);
 8011f96:	2100      	movs	r1, #0
 8011f98:	2003      	movs	r0, #3
 8011f9a:	f7fe fe01 	bl	8010ba0 <PrepareWakeup>
  }
}
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}
 8011fa0:	20001840 	.word	0x20001840
 8011fa4:	0801a1d0 	.word	0x0801a1d0
 8011fa8:	200000e0 	.word	0x200000e0

08011fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011fac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  DBG_PRINTF("ERROR OCCURRED\n");
 8011fae:	490a      	ldr	r1, [pc, #40]	; (8011fd8 <Error_Handler+0x2c>)
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	f7f9 fff0 	bl	800bf96 <SEGGER_RTT_printf>
  HAL_Delay(10000);
 8011fb6:	4809      	ldr	r0, [pc, #36]	; (8011fdc <Error_Handler+0x30>)
 8011fb8:	f7fa fb76 	bl	800c6a8 <HAL_Delay>
  DBG_PRINTF("REBOOTING NOW...\n");
 8011fbc:	4908      	ldr	r1, [pc, #32]	; (8011fe0 <Error_Handler+0x34>)
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	f7f9 ffe9 	bl	800bf96 <SEGGER_RTT_printf>
 8011fc4:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011fc8:	4b06      	ldr	r3, [pc, #24]	; (8011fe4 <Error_Handler+0x38>)
 8011fca:	4a07      	ldr	r2, [pc, #28]	; (8011fe8 <Error_Handler+0x3c>)
 8011fcc:	60da      	str	r2, [r3, #12]
 8011fce:	f3bf 8f4f 	dsb	sy
    __NOP();
 8011fd2:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8011fd4:	e7fd      	b.n	8011fd2 <Error_Handler+0x26>
 8011fd6:	46c0      	nop			; (mov r8, r8)
 8011fd8:	0801a1ed 	.word	0x0801a1ed
 8011fdc:	00002710 	.word	0x00002710
 8011fe0:	0801a1fd 	.word	0x0801a1fd
 8011fe4:	e000ed00 	.word	0xe000ed00
 8011fe8:	05fa0004 	.word	0x05fa0004

08011fec <SystemClock_Config>:
{
 8011fec:	b510      	push	{r4, lr}
 8011fee:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011ff0:	2234      	movs	r2, #52	; 0x34
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	a80d      	add	r0, sp, #52	; 0x34
 8011ff6:	f004 f802 	bl	8015ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011ffa:	2214      	movs	r2, #20
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	4668      	mov	r0, sp
 8012000:	f003 fffd 	bl	8015ffe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012004:	2220      	movs	r2, #32
 8012006:	2100      	movs	r1, #0
 8012008:	a805      	add	r0, sp, #20
 801200a:	f003 fff8 	bl	8015ffe <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801200e:	2380      	movs	r3, #128	; 0x80
 8012010:	491d      	ldr	r1, [pc, #116]	; (8012088 <SystemClock_Config+0x9c>)
 8012012:	4c1e      	ldr	r4, [pc, #120]	; (801208c <SystemClock_Config+0xa0>)
 8012014:	680a      	ldr	r2, [r1, #0]
 8012016:	011b      	lsls	r3, r3, #4
 8012018:	4022      	ands	r2, r4
 801201a:	4313      	orrs	r3, r2
 801201c:	600b      	str	r3, [r1, #0]
  HAL_PWR_EnableBkUpAccess();
 801201e:	f7fc fbf9 	bl	800e814 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8012022:	4a1b      	ldr	r2, [pc, #108]	; (8012090 <SystemClock_Config+0xa4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012024:	a80d      	add	r0, sp, #52	; 0x34
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8012026:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8012028:	4023      	ands	r3, r4
 801202a:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 801202c:	231c      	movs	r3, #28
 801202e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8012030:	33e4      	adds	r3, #228	; 0xe4
 8012032:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8012034:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012036:	3bff      	subs	r3, #255	; 0xff
 8012038:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801203a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 801203c:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 801203e:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8012040:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8012042:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8012044:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012046:	f7fc fc37 	bl	800e8b8 <HAL_RCC_OscConfig>
 801204a:	1e01      	subs	r1, r0, #0
 801204c:	d001      	beq.n	8012052 <SystemClock_Config+0x66>
    Error_Handler();
 801204e:	f7ff ffad 	bl	8011fac <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012052:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8012054:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012056:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012058:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801205a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 801205c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801205e:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8012060:	f7fc fe78 	bl	800ed54 <HAL_RCC_ClockConfig>
 8012064:	2800      	cmp	r0, #0
 8012066:	d1f2      	bne.n	801204e <SystemClock_Config+0x62>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8012068:	23a8      	movs	r3, #168	; 0xa8
 801206a:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 801206c:	2380      	movs	r3, #128	; 0x80
 801206e:	025b      	lsls	r3, r3, #9
 8012070:	9306      	str	r3, [sp, #24]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012072:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012074:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012076:	031b      	lsls	r3, r3, #12
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012078:	a805      	add	r0, sp, #20
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801207a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801207c:	f7fc ff38 	bl	800eef0 <HAL_RCCEx_PeriphCLKConfig>
 8012080:	2800      	cmp	r0, #0
 8012082:	d1e4      	bne.n	801204e <SystemClock_Config+0x62>
}
 8012084:	b01a      	add	sp, #104	; 0x68
 8012086:	bd10      	pop	{r4, pc}
 8012088:	40007000 	.word	0x40007000
 801208c:	ffffe7ff 	.word	0xffffe7ff
 8012090:	40021000 	.word	0x40021000

08012094 <main>:
{
 8012094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012096:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8012098:	f7fa fae0 	bl	800c65c <HAL_Init>
  SystemClock_Config();
 801209c:	f7ff ffa6 	bl	8011fec <SystemClock_Config>
  MX_GPIO_Init();
 80120a0:	f7fe fa4e 	bl	8010540 <MX_GPIO_Init>
  MX_DMA_Init();
 80120a4:	f7fd fd4a 	bl	800fb3c <MX_DMA_Init>
  MX_ADC_Init();
 80120a8:	f7fd fbfe 	bl	800f8a8 <MX_ADC_Init>
  MX_I2C1_Init();
 80120ac:	f7fe fdd6 	bl	8010c5c <MX_I2C1_Init>
  MX_IWDG_Init();
 80120b0:	f7ff f8da 	bl	8011268 <MX_IWDG_Init>
  MX_LPTIM1_Init();
 80120b4:	f7ff f8ee 	bl	8011294 <MX_LPTIM1_Init>
  MX_RTC_Init();
 80120b8:	f001 fd8c 	bl	8013bd4 <MX_RTC_Init>
  MX_SPI1_Init();
 80120bc:	f002 f844 	bl	8014148 <MX_SPI1_Init>
  HAL_GPIO_WritePin(RF_Switch_GPIO_Port, RF_Switch_Pin, GPIO_PIN_SET);
 80120c0:	20a0      	movs	r0, #160	; 0xa0
 80120c2:	2201      	movs	r2, #1
 80120c4:	2104      	movs	r1, #4
 80120c6:	05c0      	lsls	r0, r0, #23
 80120c8:	f7fb f962 	bl	800d390 <HAL_GPIO_WritePin>
  DEBUG_PRINTF("BOOTED mainfw RTT@0x%08x\n", &_SEGGER_RTT);
 80120cc:	4ab6      	ldr	r2, [pc, #728]	; (80123a8 <main+0x314>)
 80120ce:	49b7      	ldr	r1, [pc, #732]	; (80123ac <main+0x318>)
 80120d0:	2000      	movs	r0, #0
 80120d2:	f7f9 ff60 	bl	800bf96 <SEGGER_RTT_printf>
  I2C_Scan();
 80120d6:	f7fe fb01 	bl	80106dc <I2C_Scan>
  EEPROM_Load();
 80120da:	f7fd ff83 	bl	800ffe4 <EEPROM_Load>
  HAL_GPIO_WritePin(DC_Conv_Mode_GPIO_Port, DC_Conv_Mode_Pin, GPIO_PIN_SET);
 80120de:	2180      	movs	r1, #128	; 0x80
 80120e0:	20a0      	movs	r0, #160	; 0xa0
 80120e2:	2201      	movs	r2, #1
 80120e4:	0049      	lsls	r1, r1, #1
 80120e6:	05c0      	lsls	r0, r0, #23
 80120e8:	f7fb f952 	bl	800d390 <HAL_GPIO_WritePin>
  LRW_Init();
 80120ec:	f7ff fc26 	bl	801193c <LRW_Init>
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 80120f0:	211a      	movs	r1, #26
 80120f2:	48af      	ldr	r0, [pc, #700]	; (80123b0 <main+0x31c>)
 80120f4:	f7fc fb4a 	bl	800e78c <HAL_LPTIM_Counter_Start_IT>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80120f8:	48ae      	ldr	r0, [pc, #696]	; (80123b4 <main+0x320>)
 80120fa:	f7fd fa73 	bl	800f5e4 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 80120fe:	2200      	movs	r2, #0
 8012100:	2103      	movs	r1, #3
 8012102:	2002      	movs	r0, #2
 8012104:	f7fa fe00 	bl	800cd08 <HAL_NVIC_SetPriority>
  if(LRW_IsJoined())
 8012108:	f7ff fa58 	bl	80115bc <LRW_IsJoined>
 801210c:	4caa      	ldr	r4, [pc, #680]	; (80123b8 <main+0x324>)
 801210e:	2800      	cmp	r0, #0
 8012110:	d003      	beq.n	801211a <main+0x86>
    PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
 8012112:	2001      	movs	r0, #1
 8012114:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012116:	f7fe fd43 	bl	8010ba0 <PrepareWakeup>
  NFC_Init();
 801211a:	f000 f987 	bl	801242c <NFC_Init>
ATECC_status = atcab_init(gCfg);
 801211e:	4ba7      	ldr	r3, [pc, #668]	; (80123bc <main+0x328>)
 8012120:	6818      	ldr	r0, [r3, #0]
 8012122:	f002 f9bb 	bl	801449c <atcab_init>
 8012126:	4ea6      	ldr	r6, [pc, #664]	; (80123c0 <main+0x32c>)
 8012128:	1e02      	subs	r2, r0, #0
 801212a:	7030      	strb	r0, [r6, #0]
if (ATECC_status != ATCA_SUCCESS ) {
 801212c:	d003      	beq.n	8012136 <main+0xa2>
  DBG_PRINTF("ATECC608a configuration failed: %x\n", ATECC_status);
 801212e:	2000      	movs	r0, #0
 8012130:	49a4      	ldr	r1, [pc, #656]	; (80123c4 <main+0x330>)
 8012132:	f7f9 ff30 	bl	800bf96 <SEGGER_RTT_printf>
ATECC_status = atcab_read_serial_number(serialnum);
 8012136:	4ba4      	ldr	r3, [pc, #656]	; (80123c8 <main+0x334>)
 8012138:	ad0b      	add	r5, sp, #44	; 0x2c
 801213a:	0029      	movs	r1, r5
 801213c:	6818      	ldr	r0, [r3, #0]
 801213e:	f002 fc09 	bl	8014954 <calib_read_serial_number>
 8012142:	7030      	strb	r0, [r6, #0]
if (ATECC_status != ATCA_SUCCESS) {
 8012144:	2800      	cmp	r0, #0
 8012146:	d100      	bne.n	801214a <main+0xb6>
 8012148:	e0c8      	b.n	80122dc <main+0x248>
  DBG_PRINTF("ATECC608A could not read serial number: %x\n", ATECC_status);
 801214a:	0002      	movs	r2, r0
 801214c:	499f      	ldr	r1, [pc, #636]	; (80123cc <main+0x338>)
 801214e:	2000      	movs	r0, #0
 8012150:	f7f9 ff21 	bl	800bf96 <SEGGER_RTT_printf>
    if(DevCfg.changed.any) {
 8012154:	2101      	movs	r1, #1
 8012156:	7823      	ldrb	r3, [r4, #0]
 8012158:	420b      	tst	r3, r1
 801215a:	d059      	beq.n	8012210 <main+0x17c>
      if(DevCfg.changed.bma400) {
 801215c:	2204      	movs	r2, #4
 801215e:	4213      	tst	r3, r2
 8012160:	d012      	beq.n	8012188 <main+0xf4>
        if(DevCfg.useSensor.bma400) {
 8012162:	0023      	movs	r3, r4
 8012164:	336c      	adds	r3, #108	; 0x6c
 8012166:	781a      	ldrb	r2, [r3, #0]
 8012168:	000d      	movs	r5, r1
 801216a:	0023      	movs	r3, r4
 801216c:	4015      	ands	r5, r2
 801216e:	3364      	adds	r3, #100	; 0x64
 8012170:	420a      	tst	r2, r1
 8012172:	d100      	bne.n	8012176 <main+0xe2>
 8012174:	e0c6      	b.n	8012304 <main+0x270>
          BMA400_Init(DevCfg.bma400_config, DevCfg.bma400_threshold);
 8012176:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012178:	8818      	ldrh	r0, [r3, #0]
 801217a:	b291      	uxth	r1, r2
 801217c:	f001 fd66 	bl	8013c4c <BMA400_Init>
          DEBUG_MSG("SEN BMA400  IRQ ON\n");
 8012180:	2000      	movs	r0, #0
 8012182:	4993      	ldr	r1, [pc, #588]	; (80123d0 <main+0x33c>)
          DEBUG_MSG("SEN BMA400  IRQ OFF\n");
 8012184:	f7f9 fd34 	bl	800bbf0 <SEGGER_RTT_WriteString>
      if(DevCfg.changed.sfh7776) {
 8012188:	7823      	ldrb	r3, [r4, #0]
 801218a:	06db      	lsls	r3, r3, #27
 801218c:	d514      	bpl.n	80121b8 <main+0x124>
        if(DevCfg.useSensor.sfh7776) {
 801218e:	0023      	movs	r3, r4
 8012190:	336c      	adds	r3, #108	; 0x6c
 8012192:	7818      	ldrb	r0, [r3, #0]
 8012194:	2102      	movs	r1, #2
 8012196:	0005      	movs	r5, r0
 8012198:	0023      	movs	r3, r4
 801219a:	0022      	movs	r2, r4
 801219c:	400d      	ands	r5, r1
 801219e:	3368      	adds	r3, #104	; 0x68
 80121a0:	3266      	adds	r2, #102	; 0x66
 80121a2:	4208      	tst	r0, r1
 80121a4:	d100      	bne.n	80121a8 <main+0x114>
 80121a6:	e0b6      	b.n	8012316 <main+0x282>
          SFH7776_Init(DevCfg.sfh7776_threshold_upper, DevCfg.sfh7776_threshold_lower);
 80121a8:	8819      	ldrh	r1, [r3, #0]
 80121aa:	8810      	ldrh	r0, [r2, #0]
 80121ac:	f001 fe6e 	bl	8013e8c <SFH7776_Init>
          DEBUG_MSG("SEN SFH7776 IRQ ON\n");
 80121b0:	2000      	movs	r0, #0
 80121b2:	4988      	ldr	r1, [pc, #544]	; (80123d4 <main+0x340>)
          DEBUG_MSG("SEN SFH7776 IRQ OFF\n");
 80121b4:	f7f9 fd1c 	bl	800bbf0 <SEGGER_RTT_WriteString>
      if(DevCfg.changed.hdc2080) {
 80121b8:	7823      	ldrb	r3, [r4, #0]
 80121ba:	071b      	lsls	r3, r3, #28
 80121bc:	d512      	bpl.n	80121e4 <main+0x150>
        if(DevCfg.useSensor.hdc2080) {
 80121be:	0023      	movs	r3, r4
 80121c0:	336c      	adds	r3, #108	; 0x6c
 80121c2:	781a      	ldrb	r2, [r3, #0]
 80121c4:	2504      	movs	r5, #4
 80121c6:	0023      	movs	r3, r4
 80121c8:	2104      	movs	r1, #4
 80121ca:	4015      	ands	r5, r2
 80121cc:	335a      	adds	r3, #90	; 0x5a
 80121ce:	420a      	tst	r2, r1
 80121d0:	d100      	bne.n	80121d4 <main+0x140>
 80121d2:	e0ab      	b.n	801232c <main+0x298>
          HDC2080_Init(DevCfg.hdc2080_mode, DevCfg.hdc2080_threshold);
 80121d4:	7818      	ldrb	r0, [r3, #0]
 80121d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80121d8:	f001 ff00 	bl	8013fdc <HDC2080_Init>
          DEBUG_MSG("SEN HDC2080 IRQ ON\n");
 80121dc:	2000      	movs	r0, #0
 80121de:	497e      	ldr	r1, [pc, #504]	; (80123d8 <main+0x344>)
          DEBUG_MSG("SEN HDC2080 IRQ OFF\n");
 80121e0:	f7f9 fd06 	bl	800bbf0 <SEGGER_RTT_WriteString>
      if(DevCfg.changed.lrw) {
 80121e4:	7823      	ldrb	r3, [r4, #0]
 80121e6:	079b      	lsls	r3, r3, #30
 80121e8:	d501      	bpl.n	80121ee <main+0x15a>
        LRW_FromDevCfg();
 80121ea:	f7ff fa5d 	bl	80116a8 <LRW_FromDevCfg>
      if(DevCfg.changed.lrw || DevCfg.changed.resched) {
 80121ee:	2322      	movs	r3, #34	; 0x22
 80121f0:	7822      	ldrb	r2, [r4, #0]
 80121f2:	421a      	tst	r2, r3
 80121f4:	d008      	beq.n	8012208 <main+0x174>
        PrepareWakeup(WAKEUP_LRW_SCHEDMSG, LRW_IsJoined() ? DevCfg.sendInterval : 0);
 80121f6:	f7ff f9e1 	bl	80115bc <LRW_IsJoined>
 80121fa:	2100      	movs	r1, #0
 80121fc:	4288      	cmp	r0, r1
 80121fe:	d000      	beq.n	8012202 <main+0x16e>
 8012200:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012202:	2001      	movs	r0, #1
 8012204:	f7fe fccc 	bl	8010ba0 <PrepareWakeup>
      EEPROM_Save();
 8012208:	f7fd fce4 	bl	800fbd4 <EEPROM_Save>
      memset(&DevCfg.changed, 0, sizeof DevCfg.changed);
 801220c:	2300      	movs	r3, #0
 801220e:	6023      	str	r3, [r4, #0]
    if(!LRW_IsJoined() && memcmp((char[16]){0}, DevCfg.appKey, 16)) {
 8012210:	f7ff f9d4 	bl	80115bc <LRW_IsJoined>
 8012214:	1e05      	subs	r5, r0, #0
 8012216:	d000      	beq.n	801221a <main+0x186>
 8012218:	e092      	b.n	8012340 <main+0x2ac>
 801221a:	0001      	movs	r1, r0
 801221c:	2210      	movs	r2, #16
 801221e:	a80e      	add	r0, sp, #56	; 0x38
 8012220:	f003 feed 	bl	8015ffe <memset>
 8012224:	2210      	movs	r2, #16
 8012226:	496d      	ldr	r1, [pc, #436]	; (80123dc <main+0x348>)
 8012228:	a80e      	add	r0, sp, #56	; 0x38
 801222a:	f003 fed1 	bl	8015fd0 <memcmp>
 801222e:	2800      	cmp	r0, #0
 8012230:	d100      	bne.n	8012234 <main+0x1a0>
 8012232:	e085      	b.n	8012340 <main+0x2ac>
      DEBUG_MSG("LRW JOINING...\n");
 8012234:	496a      	ldr	r1, [pc, #424]	; (80123e0 <main+0x34c>)
 8012236:	0028      	movs	r0, r5
 8012238:	f7f9 fcda 	bl	800bbf0 <SEGGER_RTT_WriteString>
      LRW_Join();
 801223c:	f7ff f994 	bl	8011568 <LRW_Join>
      if(!DutyCycleWaitTime) joinTrials++;
 8012240:	4b68      	ldr	r3, [pc, #416]	; (80123e4 <main+0x350>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d103      	bne.n	8012250 <main+0x1bc>
 8012248:	4a67      	ldr	r2, [pc, #412]	; (80123e8 <main+0x354>)
 801224a:	6813      	ldr	r3, [r2, #0]
 801224c:	3301      	adds	r3, #1
 801224e:	6013      	str	r3, [r2, #0]
    while(LRW_IsBusy()) {
 8012250:	f7ff fcc0 	bl	8011bd4 <LRW_IsBusy>
 8012254:	2800      	cmp	r0, #0
 8012256:	d17f      	bne.n	8012358 <main+0x2c4>
    if(!DutyCycleWaitTime) {
 8012258:	4d62      	ldr	r5, [pc, #392]	; (80123e4 <main+0x350>)
 801225a:	682f      	ldr	r7, [r5, #0]
 801225c:	2f00      	cmp	r7, #0
 801225e:	d118      	bne.n	8012292 <main+0x1fe>
      if(!LRW_IsJoined()) {
 8012260:	f7ff f9ac 	bl	80115bc <LRW_IsJoined>
 8012264:	4e60      	ldr	r6, [pc, #384]	; (80123e8 <main+0x354>)
 8012266:	9009      	str	r0, [sp, #36]	; 0x24
 8012268:	2800      	cmp	r0, #0
 801226a:	d17b      	bne.n	8012364 <main+0x2d0>
        DEBUG_MSG("LRW NOT JOINED\n");
 801226c:	495f      	ldr	r1, [pc, #380]	; (80123ec <main+0x358>)
 801226e:	f7f9 fcbf 	bl	800bbf0 <SEGGER_RTT_WriteString>
        if(joinTrials == 5) {
 8012272:	6837      	ldr	r7, [r6, #0]
 8012274:	2f05      	cmp	r7, #5
 8012276:	d10c      	bne.n	8012292 <main+0x1fe>
          joinTrials = 0;
 8012278:	9b09      	ldr	r3, [sp, #36]	; 0x24
          DEBUG_MSG("GIVING UP JOINING\n");
 801227a:	495d      	ldr	r1, [pc, #372]	; (80123f0 <main+0x35c>)
 801227c:	0018      	movs	r0, r3
          joinTrials = 0;
 801227e:	6033      	str	r3, [r6, #0]
          DEBUG_MSG("GIVING UP JOINING\n");
 8012280:	f7f9 fcb6 	bl	800bbf0 <SEGGER_RTT_WriteString>
          LEDBlink(BlinkPattern_RRR);
 8012284:	0038      	movs	r0, r7
 8012286:	f7fe fa91 	bl	80107ac <LEDBlink>
          while(tasks_has_pending() == -1) {};
 801228a:	f002 f89b 	bl	80143c4 <tasks_has_pending>
 801228e:	1c43      	adds	r3, r0, #1
 8012290:	d0fb      	beq.n	801228a <main+0x1f6>
  HAL_Delay(100);
 8012292:	2064      	movs	r0, #100	; 0x64
 8012294:	f7fa fa08 	bl	800c6a8 <HAL_Delay>
  if(tasks_has_pending())
 8012298:	f002 f894 	bl	80143c4 <tasks_has_pending>
 801229c:	2800      	cmp	r0, #0
 801229e:	d000      	beq.n	80122a2 <main+0x20e>
 80122a0:	e758      	b.n	8012154 <main+0xc0>
  if(NFC_HasActivity())
 80122a2:	f000 f9ad 	bl	8012600 <NFC_HasActivity>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d000      	beq.n	80122ac <main+0x218>
 80122aa:	e753      	b.n	8012154 <main+0xc0>
  if(LRW_IsBusy())
 80122ac:	f7ff fc92 	bl	8011bd4 <LRW_IsBusy>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d000      	beq.n	80122b6 <main+0x222>
 80122b4:	e74e      	b.n	8012154 <main+0xc0>
  if(DutyCycleWaitTime < 1000 && joinTrials)
 80122b6:	23fa      	movs	r3, #250	; 0xfa
 80122b8:	682a      	ldr	r2, [r5, #0]
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	429a      	cmp	r2, r3
 80122be:	d364      	bcc.n	801238a <main+0x2f6>
  if(DutyCycleWaitTime > 1000)
 80122c0:	21fa      	movs	r1, #250	; 0xfa
 80122c2:	6828      	ldr	r0, [r5, #0]
 80122c4:	0089      	lsls	r1, r1, #2
 80122c6:	4288      	cmp	r0, r1
 80122c8:	d905      	bls.n	80122d6 <main+0x242>
    PrepareWakeup(WAKEUP_LRW_DUTYCYCLE, DutyCycleWaitTime / 1000);
 80122ca:	f7ed ff4d 	bl	8000168 <__udivsi3>
 80122ce:	0001      	movs	r1, r0
 80122d0:	2002      	movs	r0, #2
 80122d2:	f7fe fc65 	bl	8010ba0 <PrepareWakeup>
  HW_EnterStopMode();
 80122d6:	f7fe fae7 	bl	80108a8 <HW_EnterStopMode>
 80122da:	e73b      	b.n	8012154 <main+0xc0>
  DBG_PRINTF("ATECC608A serial number: %d:%d:%d:%d:%d:%d:%d:%d:%d \n", serialnum[0],serialnum[1],serialnum[2],serialnum[3],serialnum[4],serialnum[5],serialnum[6],serialnum[7],serialnum[8]);
 80122dc:	7a29      	ldrb	r1, [r5, #8]
 80122de:	786b      	ldrb	r3, [r5, #1]
 80122e0:	782a      	ldrb	r2, [r5, #0]
 80122e2:	9106      	str	r1, [sp, #24]
 80122e4:	79e9      	ldrb	r1, [r5, #7]
 80122e6:	9105      	str	r1, [sp, #20]
 80122e8:	79a9      	ldrb	r1, [r5, #6]
 80122ea:	9104      	str	r1, [sp, #16]
 80122ec:	7969      	ldrb	r1, [r5, #5]
 80122ee:	9103      	str	r1, [sp, #12]
 80122f0:	7929      	ldrb	r1, [r5, #4]
 80122f2:	9102      	str	r1, [sp, #8]
 80122f4:	78e9      	ldrb	r1, [r5, #3]
 80122f6:	9101      	str	r1, [sp, #4]
 80122f8:	78a9      	ldrb	r1, [r5, #2]
 80122fa:	9100      	str	r1, [sp, #0]
 80122fc:	493d      	ldr	r1, [pc, #244]	; (80123f4 <main+0x360>)
 80122fe:	f7f9 fe4a 	bl	800bf96 <SEGGER_RTT_printf>
 8012302:	e727      	b.n	8012154 <main+0xc0>
          BMA400_Init(DevCfg.bma400_config = 0xf, DevCfg.bma400_threshold = 3907);
 8012304:	200f      	movs	r0, #15
 8012306:	493c      	ldr	r1, [pc, #240]	; (80123f8 <main+0x364>)
 8012308:	8018      	strh	r0, [r3, #0]
 801230a:	6621      	str	r1, [r4, #96]	; 0x60
 801230c:	f001 fc9e 	bl	8013c4c <BMA400_Init>
          DEBUG_MSG("SEN BMA400  IRQ OFF\n");
 8012310:	0028      	movs	r0, r5
 8012312:	493a      	ldr	r1, [pc, #232]	; (80123fc <main+0x368>)
 8012314:	e736      	b.n	8012184 <main+0xf0>
          SFH7776_Init(DevCfg.sfh7776_threshold_upper = UINT16_MAX, DevCfg.sfh7776_threshold_lower = 0);
 8012316:	2101      	movs	r1, #1
 8012318:	4249      	negs	r1, r1
 801231a:	4839      	ldr	r0, [pc, #228]	; (8012400 <main+0x36c>)
 801231c:	8011      	strh	r1, [r2, #0]
 801231e:	0029      	movs	r1, r5
 8012320:	801d      	strh	r5, [r3, #0]
 8012322:	f001 fdb3 	bl	8013e8c <SFH7776_Init>
          DEBUG_MSG("SEN SFH7776 IRQ OFF\n");
 8012326:	0028      	movs	r0, r5
 8012328:	4936      	ldr	r1, [pc, #216]	; (8012404 <main+0x370>)
 801232a:	e743      	b.n	80121b4 <main+0x120>
          HDC2080_Init(DevCfg.hdc2080_mode = HDC2080_TEMPERATURE_HIGH, DevCfg.hdc2080_threshold = 12499);
 801232c:	2201      	movs	r2, #1
 801232e:	4936      	ldr	r1, [pc, #216]	; (8012408 <main+0x374>)
 8012330:	0010      	movs	r0, r2
 8012332:	65e1      	str	r1, [r4, #92]	; 0x5c
 8012334:	701a      	strb	r2, [r3, #0]
 8012336:	f001 fe51 	bl	8013fdc <HDC2080_Init>
          DEBUG_MSG("SEN HDC2080 IRQ OFF\n");
 801233a:	0028      	movs	r0, r5
 801233c:	4933      	ldr	r1, [pc, #204]	; (801240c <main+0x378>)
 801233e:	e74f      	b.n	80121e0 <main+0x14c>
    } else if(!LRW_IsBusy() && !tasks_has_pending()) {
 8012340:	f7ff fc48 	bl	8011bd4 <LRW_IsBusy>
 8012344:	2800      	cmp	r0, #0
 8012346:	d183      	bne.n	8012250 <main+0x1bc>
 8012348:	f002 f83c 	bl	80143c4 <tasks_has_pending>
 801234c:	2800      	cmp	r0, #0
 801234e:	d000      	beq.n	8012352 <main+0x2be>
 8012350:	e77e      	b.n	8012250 <main+0x1bc>
      LRW_Send();
 8012352:	f7ff fcc9 	bl	8011ce8 <LRW_Send>
    while(LRW_IsBusy()) {
 8012356:	e77b      	b.n	8012250 <main+0x1bc>
      LRW_Process();
 8012358:	f7ff f994 	bl	8011684 <LRW_Process>
      HAL_Delay(100);
 801235c:	2064      	movs	r0, #100	; 0x64
 801235e:	f7fa f9a3 	bl	800c6a8 <HAL_Delay>
 8012362:	e775      	b.n	8012250 <main+0x1bc>
        if(joinTrials > 0) {
 8012364:	6833      	ldr	r3, [r6, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d093      	beq.n	8012292 <main+0x1fe>
          joinTrials = 0;
 801236a:	6037      	str	r7, [r6, #0]
          DEBUG_PRINTF("LRW JOINED %d\n", HW_RTCGetMsTime());
 801236c:	f7fe fb64 	bl	8010a38 <HW_RTCGetMsTime>
 8012370:	4927      	ldr	r1, [pc, #156]	; (8012410 <main+0x37c>)
 8012372:	0002      	movs	r2, r0
 8012374:	0038      	movs	r0, r7
 8012376:	f7f9 fe0e 	bl	800bf96 <SEGGER_RTT_printf>
          LEDBlink(BlinkPattern_RG);
 801237a:	2004      	movs	r0, #4
 801237c:	f7fe fa16 	bl	80107ac <LEDBlink>
          PrepareWakeup(WAKEUP_LRW_SCHEDMSG, DevCfg.sendInterval);
 8012380:	2001      	movs	r0, #1
 8012382:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012384:	f7fe fc0c 	bl	8010ba0 <PrepareWakeup>
 8012388:	e783      	b.n	8012292 <main+0x1fe>
  if(DutyCycleWaitTime < 1000 && joinTrials)
 801238a:	4b17      	ldr	r3, [pc, #92]	; (80123e8 <main+0x354>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d000      	beq.n	8012394 <main+0x300>
 8012392:	e6df      	b.n	8012154 <main+0xc0>
  if(DutyCycleWaitTime < 1000 && LRW_IsJoined() && LRW_HasQueue())
 8012394:	f7ff f912 	bl	80115bc <LRW_IsJoined>
 8012398:	2800      	cmp	r0, #0
 801239a:	d091      	beq.n	80122c0 <main+0x22c>
 801239c:	f7ff fc1e 	bl	8011bdc <LRW_HasQueue>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d08d      	beq.n	80122c0 <main+0x22c>
 80123a4:	e6d6      	b.n	8012154 <main+0xc0>
 80123a6:	46c0      	nop			; (mov r8, r8)
 80123a8:	200012b0 	.word	0x200012b0
 80123ac:	0801a20f 	.word	0x0801a20f
 80123b0:	20001908 	.word	0x20001908
 80123b4:	200019a4 	.word	0x200019a4
 80123b8:	200000e0 	.word	0x200000e0
 80123bc:	200001c8 	.word	0x200001c8
 80123c0:	20001970 	.word	0x20001970
 80123c4:	0801a229 	.word	0x0801a229
 80123c8:	20001b60 	.word	0x20001b60
 80123cc:	0801a24d 	.word	0x0801a24d
 80123d0:	0801a2af 	.word	0x0801a2af
 80123d4:	0801a2d8 	.word	0x0801a2d8
 80123d8:	0801a301 	.word	0x0801a301
 80123dc:	200000f5 	.word	0x200000f5
 80123e0:	0801a32a 	.word	0x0801a32a
 80123e4:	20001938 	.word	0x20001938
 80123e8:	20001974 	.word	0x20001974
 80123ec:	0801a33a 	.word	0x0801a33a
 80123f0:	0801a34a 	.word	0x0801a34a
 80123f4:	0801a279 	.word	0x0801a279
 80123f8:	00000f43 	.word	0x00000f43
 80123fc:	0801a2c3 	.word	0x0801a2c3
 8012400:	0000ffff 	.word	0x0000ffff
 8012404:	0801a2ec 	.word	0x0801a2ec
 8012408:	000030d3 	.word	0x000030d3
 801240c:	0801a315 	.word	0x0801a315
 8012410:	0801a35d 	.word	0x0801a35d

08012414 <nop>:
  ST25DV_PresentI2CPassword(&St25Dv_Obj, (ST25DV_PASSWD){0x12345678, 0x13245678});
}

static int32_t nop(void) {
  return 0;
}
 8012414:	2000      	movs	r0, #0
 8012416:	4770      	bx	lr

08012418 <NFC_IsReady>:

static int32_t NFC_IsReady(uint16_t DevAddr, const uint32_t Trials) {
 8012418:	b510      	push	{r4, lr}
 801241a:	000a      	movs	r2, r1
  return HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT);
 801241c:	0001      	movs	r1, r0
 801241e:	2364      	movs	r3, #100	; 0x64
 8012420:	4801      	ldr	r0, [pc, #4]	; (8012428 <NFC_IsReady+0x10>)
 8012422:	f7fb fc69 	bl	800dcf8 <HAL_I2C_IsDeviceReady>
}
 8012426:	bd10      	pop	{r4, pc}
 8012428:	20001898 	.word	0x20001898

0801242c <NFC_Init>:
int32_t NFC_Init(void) {
 801242c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ST25DV_I2CSSO_STATUS i2csso = ST25DV_SESSION_CLOSED;
 801242e:	2609      	movs	r6, #9
 8012430:	2300      	movs	r3, #0
int32_t NFC_Init(void) {
 8012432:	b08d      	sub	sp, #52	; 0x34
  ST25DV_I2CSSO_STATUS i2csso = ST25DV_SESSION_CLOSED;
 8012434:	446e      	add	r6, sp
 8012436:	7033      	strb	r3, [r6, #0]
  io.DeInit = NULL;
 8012438:	9307      	str	r3, [sp, #28]
  io.IsReady = NFC_IsReady;
 801243a:	4b68      	ldr	r3, [pc, #416]	; (80125dc <NFC_Init+0x1b0>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 801243c:	4d68      	ldr	r5, [pc, #416]	; (80125e0 <NFC_Init+0x1b4>)
  io.IsReady = NFC_IsReady;
 801243e:	9308      	str	r3, [sp, #32]
  io.Write = NFC_WriteReg;
 8012440:	4b68      	ldr	r3, [pc, #416]	; (80125e4 <NFC_Init+0x1b8>)
  io.Init = nop;
 8012442:	4a69      	ldr	r2, [pc, #420]	; (80125e8 <NFC_Init+0x1bc>)
  io.Write = NFC_WriteReg;
 8012444:	9309      	str	r3, [sp, #36]	; 0x24
  io.Read = NFC_ReadReg;
 8012446:	4b69      	ldr	r3, [pc, #420]	; (80125ec <NFC_Init+0x1c0>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8012448:	0028      	movs	r0, r5
  io.Read = NFC_ReadReg;
 801244a:	930a      	str	r3, [sp, #40]	; 0x28
  io.GetTick = (int32_t (*)(void))HAL_GetTick;
 801244c:	4b68      	ldr	r3, [pc, #416]	; (80125f0 <NFC_Init+0x1c4>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 801244e:	a906      	add	r1, sp, #24
  io.Init = nop;
 8012450:	9206      	str	r2, [sp, #24]
  io.GetTick = (int32_t (*)(void))HAL_GetTick;
 8012452:	930b      	str	r3, [sp, #44]	; 0x2c
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8012454:	f7f9 fe54 	bl	800c100 <ST25DV_RegisterBusIO>
 8012458:	1e04      	subs	r4, r0, #0
 801245a:	d000      	beq.n	801245e <NFC_Init+0x32>
 801245c:	e0a8      	b.n	80125b0 <NFC_Init+0x184>
  if((r = St25Dv_Drv.Init(&St25Dv_Obj))) {c = 0x2; goto err;};
 801245e:	4f65      	ldr	r7, [pc, #404]	; (80125f4 <NFC_Init+0x1c8>)
 8012460:	0028      	movs	r0, r5
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	4798      	blx	r3
 8012466:	2302      	movs	r3, #2
 8012468:	1e04      	subs	r4, r0, #0
 801246a:	d000      	beq.n	801246e <NFC_Init+0x42>
 801246c:	e0a1      	b.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x3; goto err;};
 801246e:	0031      	movs	r1, r6
 8012470:	0028      	movs	r0, r5
 8012472:	f7f9 ff34 	bl	800c2de <ST25DV_ReadI2CSecuritySession_Dyn>
 8012476:	1e04      	subs	r4, r0, #0
 8012478:	d000      	beq.n	801247c <NFC_Init+0x50>
 801247a:	e0a3      	b.n	80125c4 <NFC_Init+0x198>
  if(i2csso == ST25DV_SESSION_CLOSED)
 801247c:	7833      	ldrb	r3, [r6, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d10d      	bne.n	801249e <NFC_Init+0x72>
    if((r = ST25DV_PresentI2CPassword(&St25Dv_Obj, (ST25DV_PASSWD){0}))) {c = 0x4; goto err;};
 8012482:	0001      	movs	r1, r0
 8012484:	2208      	movs	r2, #8
 8012486:	a804      	add	r0, sp, #16
 8012488:	f003 fdb9 	bl	8015ffe <memset>
 801248c:	0028      	movs	r0, r5
 801248e:	9904      	ldr	r1, [sp, #16]
 8012490:	9a05      	ldr	r2, [sp, #20]
 8012492:	f7f9 fe98 	bl	800c1c6 <ST25DV_PresentI2CPassword>
 8012496:	2304      	movs	r3, #4
 8012498:	1e04      	subs	r4, r0, #0
 801249a:	d000      	beq.n	801249e <NFC_Init+0x72>
 801249c:	e089      	b.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x5; goto err;};
 801249e:	0031      	movs	r1, r6
 80124a0:	0028      	movs	r0, r5
 80124a2:	f7f9 ff1c 	bl	800c2de <ST25DV_ReadI2CSecuritySession_Dyn>
 80124a6:	1e04      	subs	r4, r0, #0
 80124a8:	d000      	beq.n	80124ac <NFC_Init+0x80>
 80124aa:	e08d      	b.n	80125c8 <NFC_Init+0x19c>
  if(i2csso == ST25DV_SESSION_CLOSED) {c = 0x6; goto err;};
 80124ac:	7833      	ldrb	r3, [r6, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d100      	bne.n	80124b4 <NFC_Init+0x88>
 80124b2:	e08b      	b.n	80125cc <NFC_Init+0x1a0>
  if((r = St25Dv_Drv.GetITStatus(&St25Dv_Obj, &v))) {c = 0x7; goto err;};
 80124b4:	0028      	movs	r0, r5
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	a904      	add	r1, sp, #16
 80124ba:	4798      	blx	r3
 80124bc:	1e04      	subs	r4, r0, #0
 80124be:	d000      	beq.n	80124c2 <NFC_Init+0x96>
 80124c0:	e086      	b.n	80125d0 <NFC_Init+0x1a4>
  if(v != (ST25DV_GPO_ALL_MASK))
 80124c2:	466b      	mov	r3, sp
 80124c4:	8a1b      	ldrh	r3, [r3, #16]
 80124c6:	2bff      	cmp	r3, #255	; 0xff
 80124c8:	d107      	bne.n	80124da <NFC_Init+0xae>
  if((r = ST25DV_ReadRFMngt(&St25Dv_Obj, &rfmngt))) {c = 0x9; goto err;};
 80124ca:	0028      	movs	r0, r5
 80124cc:	a903      	add	r1, sp, #12
 80124ce:	f7f9 febd 	bl	800c24c <ST25DV_ReadRFMngt>
 80124d2:	1e04      	subs	r4, r0, #0
 80124d4:	d009      	beq.n	80124ea <NFC_Init+0xbe>
 80124d6:	2309      	movs	r3, #9
 80124d8:	e06b      	b.n	80125b2 <NFC_Init+0x186>
    if((r = St25Dv_Drv.ConfigIT(&St25Dv_Obj, ST25DV_GPO_ALL_MASK))) {c = 0x8; goto err;};
 80124da:	21ff      	movs	r1, #255	; 0xff
 80124dc:	0028      	movs	r0, r5
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	4798      	blx	r3
 80124e2:	1e04      	subs	r4, r0, #0
 80124e4:	d0f1      	beq.n	80124ca <NFC_Init+0x9e>
 80124e6:	2308      	movs	r3, #8
 80124e8:	e063      	b.n	80125b2 <NFC_Init+0x186>
  if(rfmngt.RfDisable || rfmngt.RfSleep)
 80124ea:	466b      	mov	r3, sp
 80124ec:	466a      	mov	r2, sp
 80124ee:	7b1b      	ldrb	r3, [r3, #12]
 80124f0:	7b52      	ldrb	r2, [r2, #13]
 80124f2:	4313      	orrs	r3, r2
 80124f4:	d12b      	bne.n	801254e <NFC_Init+0x122>
  if((r = ST25DV_WriteRFMngt_Dyn(&St25Dv_Obj, 0))) {c = 0xb; goto err;};
 80124f6:	2100      	movs	r1, #0
 80124f8:	0028      	movs	r0, r5
 80124fa:	f7f9 ff0b 	bl	800c314 <ST25DV_WriteRFMngt_Dyn>
 80124fe:	230b      	movs	r3, #11
 8012500:	1e04      	subs	r4, r0, #0
 8012502:	d156      	bne.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadEHMode(&St25Dv_Obj, &ehmode))) {c = 0xc; goto err;}
 8012504:	260a      	movs	r6, #10
 8012506:	446e      	add	r6, sp
 8012508:	0031      	movs	r1, r6
 801250a:	0028      	movs	r0, r5
 801250c:	f7f9 fe83 	bl	800c216 <ST25DV_ReadEHMode>
 8012510:	1e04      	subs	r4, r0, #0
 8012512:	d15f      	bne.n	80125d4 <NFC_Init+0x1a8>
  if(ehmode == ST25DV_EH_ACTIVE_AFTER_BOOT)
 8012514:	7833      	ldrb	r3, [r6, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d021      	beq.n	801255e <NFC_Init+0x132>
  if((r = ST25DV_ResetEHENMode_Dyn(&St25Dv_Obj))) {c = 0xe; goto err;};
 801251a:	0028      	movs	r0, r5
 801251c:	f7f9 fef1 	bl	800c302 <ST25DV_ResetEHENMode_Dyn>
 8012520:	230e      	movs	r3, #14
 8012522:	1e04      	subs	r4, r0, #0
 8012524:	d145      	bne.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadMBWDG(&St25Dv_Obj, (uint8_t*)&v))) {c = 0xf; goto err;};
 8012526:	0028      	movs	r0, r5
 8012528:	a904      	add	r1, sp, #16
 801252a:	f7f9 feca 	bl	800c2c2 <ST25DV_ReadMBWDG>
 801252e:	1e04      	subs	r4, r0, #0
 8012530:	d152      	bne.n	80125d8 <NFC_Init+0x1ac>
  if((uint8_t)v)
 8012532:	466b      	mov	r3, sp
 8012534:	7c1b      	ldrb	r3, [r3, #16]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d119      	bne.n	801256e <NFC_Init+0x142>
  if((r = ST25DV_ReadMBMode(&St25Dv_Obj, &mbmode))) {c = 0x11; goto err;};
 801253a:	260b      	movs	r6, #11
 801253c:	446e      	add	r6, sp
 801253e:	0031      	movs	r1, r6
 8012540:	0028      	movs	r0, r5
 8012542:	f7f9 fea3 	bl	800c28c <ST25DV_ReadMBMode>
 8012546:	1e04      	subs	r4, r0, #0
 8012548:	d019      	beq.n	801257e <NFC_Init+0x152>
 801254a:	2311      	movs	r3, #17
 801254c:	e031      	b.n	80125b2 <NFC_Init+0x186>
    if((r = ST25DV_WriteRFMngt(&St25Dv_Obj, 0))) {c = 0xa; goto err;};
 801254e:	0001      	movs	r1, r0
 8012550:	0028      	movs	r0, r5
 8012552:	f7f9 fe92 	bl	800c27a <ST25DV_WriteRFMngt>
 8012556:	1e04      	subs	r4, r0, #0
 8012558:	d0cd      	beq.n	80124f6 <NFC_Init+0xca>
 801255a:	230a      	movs	r3, #10
 801255c:	e029      	b.n	80125b2 <NFC_Init+0x186>
    if((r = ST25DV_WriteEHMode(&St25Dv_Obj, ST25DV_EH_ON_DEMAND))) {c = 0xd; goto err;}
 801255e:	2101      	movs	r1, #1
 8012560:	0028      	movs	r0, r5
 8012562:	f7f9 fe6a 	bl	800c23a <ST25DV_WriteEHMode>
 8012566:	1e04      	subs	r4, r0, #0
 8012568:	d0d7      	beq.n	801251a <NFC_Init+0xee>
 801256a:	230d      	movs	r3, #13
 801256c:	e021      	b.n	80125b2 <NFC_Init+0x186>
    if((r = ST25DV_WriteMBWDG(&St25Dv_Obj, 0))) {c = 0x10; goto err;};
 801256e:	0001      	movs	r1, r0
 8012570:	0028      	movs	r0, r5
 8012572:	f7f9 feab 	bl	800c2cc <ST25DV_WriteMBWDG>
 8012576:	1e04      	subs	r4, r0, #0
 8012578:	d0df      	beq.n	801253a <NFC_Init+0x10e>
 801257a:	2310      	movs	r3, #16
 801257c:	e019      	b.n	80125b2 <NFC_Init+0x186>
  if(mbmode == ST25DV_DISABLE)
 801257e:	7833      	ldrb	r3, [r6, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00d      	beq.n	80125a0 <NFC_Init+0x174>
  if((r = ST25DV_ResetMBEN_Dyn(&St25Dv_Obj))) {c = 0x11; goto err;};
 8012584:	0028      	movs	r0, r5
 8012586:	f7f9 fed7 	bl	800c338 <ST25DV_ResetMBEN_Dyn>
 801258a:	2311      	movs	r3, #17
 801258c:	1e04      	subs	r4, r0, #0
 801258e:	d110      	bne.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_SetMBEN_Dyn(&St25Dv_Obj))) {c = 0x12; goto err;};
 8012590:	0028      	movs	r0, r5
 8012592:	f7f9 fec8 	bl	800c326 <ST25DV_SetMBEN_Dyn>
 8012596:	1e04      	subs	r4, r0, #0
 8012598:	d108      	bne.n	80125ac <NFC_Init+0x180>
}
 801259a:	0020      	movs	r0, r4
 801259c:	b00d      	add	sp, #52	; 0x34
 801259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((r = ST25DV_WriteMBMode(&St25Dv_Obj, ST25DV_ENABLE))) {c = 0x12; goto err;};
 80125a0:	2101      	movs	r1, #1
 80125a2:	0028      	movs	r0, r5
 80125a4:	f7f9 fe84 	bl	800c2b0 <ST25DV_WriteMBMode>
 80125a8:	1e04      	subs	r4, r0, #0
 80125aa:	d0eb      	beq.n	8012584 <NFC_Init+0x158>
 80125ac:	2312      	movs	r3, #18
 80125ae:	e000      	b.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 80125b0:	2301      	movs	r3, #1
  DBG_PRINTF("NFC ERR ST25DV ret:0x%x cond:0x%x err:0x%x Init Failed!\n", r, c, hi2c1.ErrorCode);
 80125b2:	4a11      	ldr	r2, [pc, #68]	; (80125f8 <NFC_Init+0x1cc>)
 80125b4:	4911      	ldr	r1, [pc, #68]	; (80125fc <NFC_Init+0x1d0>)
 80125b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80125b8:	2000      	movs	r0, #0
 80125ba:	9200      	str	r2, [sp, #0]
 80125bc:	0022      	movs	r2, r4
 80125be:	f7f9 fcea 	bl	800bf96 <SEGGER_RTT_printf>
  return r;
 80125c2:	e7ea      	b.n	801259a <NFC_Init+0x16e>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x3; goto err;};
 80125c4:	2303      	movs	r3, #3
 80125c6:	e7f4      	b.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x5; goto err;};
 80125c8:	2305      	movs	r3, #5
 80125ca:	e7f2      	b.n	80125b2 <NFC_Init+0x186>
  if(i2csso == ST25DV_SESSION_CLOSED) {c = 0x6; goto err;};
 80125cc:	2306      	movs	r3, #6
 80125ce:	e7f0      	b.n	80125b2 <NFC_Init+0x186>
  if((r = St25Dv_Drv.GetITStatus(&St25Dv_Obj, &v))) {c = 0x7; goto err;};
 80125d0:	2307      	movs	r3, #7
 80125d2:	e7ee      	b.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadEHMode(&St25Dv_Obj, &ehmode))) {c = 0xc; goto err;}
 80125d4:	230c      	movs	r3, #12
 80125d6:	e7ec      	b.n	80125b2 <NFC_Init+0x186>
  if((r = ST25DV_ReadMBWDG(&St25Dv_Obj, (uint8_t*)&v))) {c = 0xf; goto err;};
 80125d8:	230f      	movs	r3, #15
 80125da:	e7ea      	b.n	80125b2 <NFC_Init+0x186>
 80125dc:	08012419 	.word	0x08012419
 80125e0:	20001978 	.word	0x20001978
 80125e4:	080127dd 	.word	0x080127dd
 80125e8:	08012415 	.word	0x08012415
 80125ec:	08012705 	.word	0x08012705
 80125f0:	0800c69d 	.word	0x0800c69d
 80125f4:	200000b8 	.word	0x200000b8
 80125f8:	20001898 	.word	0x20001898
 80125fc:	0801a36c 	.word	0x0801a36c

08012600 <NFC_HasActivity>:

int32_t NFC_HasActivity(void) {
 8012600:	b510      	push	{r4, lr}
  //DEBUG_PRINTF("NFC ACT %10d %10d is %d\n", HAL_GetTick(), nfc_activity, HAL_GetTick() - nfc_activity < 2000U);
  return HAL_GetTick() - nfc_activity < 2000U;
 8012602:	f7fa f84b 	bl	800c69c <HAL_GetTick>
 8012606:	4b04      	ldr	r3, [pc, #16]	; (8012618 <NFC_HasActivity+0x18>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	1ac0      	subs	r0, r0, r3
 801260c:	23fa      	movs	r3, #250	; 0xfa
 801260e:	00db      	lsls	r3, r3, #3
 8012610:	4298      	cmp	r0, r3
 8012612:	4180      	sbcs	r0, r0
 8012614:	4240      	negs	r0, r0
}
 8012616:	bd10      	pop	{r4, pc}
 8012618:	200019a0 	.word	0x200019a0

0801261c <NFC_WaitACK>:
 *        Do you think compiler would reorder the hi2c->Lock assigns?
 *        There's sequence points, but no explicit dependency across them.
 */
int32_t NFC_WaitACK(uint32_t Timeout) {
  I2C_HandleTypeDef * const hi2c = &hi2c1;
  uint32_t tickstart = HAL_GetTick();
 801261c:	4673      	mov	r3, lr
int32_t NFC_WaitACK(uint32_t Timeout) {
 801261e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012620:	b085      	sub	sp, #20
 8012622:	9303      	str	r3, [sp, #12]
 8012624:	0006      	movs	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8012626:	f7fa f839 	bl	800c69c <HAL_GetTick>

  /* Grab I2C Handle */
  if(hi2c->State != HAL_I2C_STATE_READY)
 801262a:	4c33      	ldr	r4, [pc, #204]	; (80126f8 <NFC_WaitACK+0xdc>)
  uint32_t tickstart = HAL_GetTick();
 801262c:	0007      	movs	r7, r0
  if(hi2c->State != HAL_I2C_STATE_READY)
 801262e:	0023      	movs	r3, r4
 8012630:	3341      	adds	r3, #65	; 0x41
 8012632:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8012634:	2502      	movs	r5, #2
  if(hi2c->State != HAL_I2C_STATE_READY)
 8012636:	b2d1      	uxtb	r1, r2
 8012638:	9102      	str	r1, [sp, #8]
 801263a:	2a20      	cmp	r2, #32
 801263c:	d135      	bne.n	80126aa <NFC_WaitACK+0x8e>
  if(hi2c->Instance->ISR & I2C_ISR_BUSY)
 801263e:	6822      	ldr	r2, [r4, #0]
 8012640:	6991      	ldr	r1, [r2, #24]
 8012642:	2280      	movs	r2, #128	; 0x80
 8012644:	0008      	movs	r0, r1
 8012646:	0212      	lsls	r2, r2, #8
 8012648:	4010      	ands	r0, r2
 801264a:	4211      	tst	r1, r2
 801264c:	d12d      	bne.n	80126aa <NFC_WaitACK+0x8e>
    return HAL_BUSY;
  if(hi2c->Lock == HAL_LOCKED)
 801264e:	0022      	movs	r2, r4
 8012650:	3240      	adds	r2, #64	; 0x40
 8012652:	7811      	ldrb	r1, [r2, #0]
 8012654:	2901      	cmp	r1, #1
 8012656:	d028      	beq.n	80126aa <NFC_WaitACK+0x8e>
    return HAL_BUSY;
  else
    hi2c->Lock = HAL_LOCKED;
 8012658:	2101      	movs	r1, #1
 801265a:	7011      	strb	r1, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801265c:	2224      	movs	r2, #36	; 0x24
 801265e:	701a      	strb	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012660:	6460      	str	r0, [r4, #68]	; 0x44

  do {
    /* Generate Start */
    hi2c->Instance->CR2 = I2C_CR2_START | I2C_CR2_AUTOEND | (I2C_CR2_SADD & ST25DV_ADDR_DATA_I2C);
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	4a25      	ldr	r2, [pc, #148]	; (80126fc <NFC_WaitACK+0xe0>)
 8012666:	605a      	str	r2, [r3, #4]

    /* Wait till AUTOEND mode generates STOP, or timeout */
    while(~hi2c->Instance->ISR & I2C_ISR_STOPF)
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	699a      	ldr	r2, [r3, #24]
 801266c:	9d02      	ldr	r5, [sp, #8]
 801266e:	4395      	bics	r5, r2
 8012670:	d11e      	bne.n	80126b0 <NFC_WaitACK+0x94>
      if(Timeout != HAL_MAX_DELAY && (HAL_GetTick() - tickstart > Timeout || !Timeout))
        goto timeout;

    /* We've been ACK'ed, cleanup and go home */
    if(~hi2c->Instance->ISR & I2C_ISR_NACKF) {
 8012672:	2110      	movs	r1, #16
 8012674:	699a      	ldr	r2, [r3, #24]
 8012676:	4391      	bics	r1, r2
 8012678:	d032      	beq.n	80126e0 <NFC_WaitACK+0xc4>
      hi2c->Instance->ICR |= I2C_ISR_STOPF;
 801267a:	69da      	ldr	r2, [r3, #28]
 801267c:	9902      	ldr	r1, [sp, #8]
 801267e:	430a      	orrs	r2, r1
 8012680:	61da      	str	r2, [r3, #28]
      /* Release I2C_Handle */
      hi2c->State = HAL_I2C_STATE_READY;
 8012682:	0023      	movs	r3, r4
      hi2c->Lock = HAL_UNLOCKED;
 8012684:	3440      	adds	r4, #64	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8012686:	3341      	adds	r3, #65	; 0x41
 8012688:	7019      	strb	r1, [r3, #0]
      hi2c->Lock = HAL_UNLOCKED;
 801268a:	7025      	strb	r5, [r4, #0]
      if(HAL_GetTick() - tickstart > 100)
 801268c:	f7fa f806 	bl	800c69c <HAL_GetTick>
 8012690:	1bc0      	subs	r0, r0, r7
 8012692:	2864      	cmp	r0, #100	; 0x64
 8012694:	d909      	bls.n	80126aa <NFC_WaitACK+0x8e>
        DBG_PRINTF("NFC I2C WAIT INFO dur:%5d timeout:%5d caller:0x%p\n", HAL_GetTick() - tickstart, Timeout, __builtin_return_address(0));
 8012696:	f7fa f801 	bl	800c69c <HAL_GetTick>
 801269a:	9b03      	ldr	r3, [sp, #12]
 801269c:	1bc2      	subs	r2, r0, r7
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	0028      	movs	r0, r5
 80126a2:	0033      	movs	r3, r6
 80126a4:	4916      	ldr	r1, [pc, #88]	; (8012700 <NFC_WaitACK+0xe4>)
 80126a6:	f7f9 fc76 	bl	800bf96 <SEGGER_RTT_printf>
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  hi2c->Lock = HAL_UNLOCKED;
  return HAL_ERROR;
}
 80126aa:	0028      	movs	r0, r5
 80126ac:	b005      	add	sp, #20
 80126ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY && (HAL_GetTick() - tickstart > Timeout || !Timeout))
 80126b0:	1c72      	adds	r2, r6, #1
 80126b2:	d0da      	beq.n	801266a <NFC_WaitACK+0x4e>
 80126b4:	f7f9 fff2 	bl	800c69c <HAL_GetTick>
 80126b8:	1bc0      	subs	r0, r0, r7
 80126ba:	42b0      	cmp	r0, r6
 80126bc:	d801      	bhi.n	80126c2 <NFC_WaitACK+0xa6>
 80126be:	2e00      	cmp	r6, #0
 80126c0:	d1d2      	bne.n	8012668 <NFC_WaitACK+0x4c>
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80126c2:	2220      	movs	r2, #32
 80126c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return HAL_ERROR;
 80126c6:	2501      	movs	r5, #1
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80126c8:	4313      	orrs	r3, r2
 80126ca:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80126cc:	0023      	movs	r3, r4
 80126ce:	3341      	adds	r3, #65	; 0x41
 80126d0:	701a      	strb	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80126d2:	0022      	movs	r2, r4
 80126d4:	2300      	movs	r3, #0
 80126d6:	3242      	adds	r2, #66	; 0x42
  hi2c->Lock = HAL_UNLOCKED;
 80126d8:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80126da:	7013      	strb	r3, [r2, #0]
  hi2c->Lock = HAL_UNLOCKED;
 80126dc:	7023      	strb	r3, [r4, #0]
  return HAL_ERROR;
 80126de:	e7e4      	b.n	80126aa <NFC_WaitACK+0x8e>
    hi2c->Instance->ICR |= I2C_ISR_NACKF | I2C_ISR_STOPF;
 80126e0:	2230      	movs	r2, #48	; 0x30
 80126e2:	69d9      	ldr	r1, [r3, #28]
 80126e4:	430a      	orrs	r2, r1
 80126e6:	61da      	str	r2, [r3, #28]
  } while(Timeout == HAL_MAX_DELAY || (HAL_GetTick() - tickstart < Timeout && Timeout));
 80126e8:	1c73      	adds	r3, r6, #1
 80126ea:	d0ba      	beq.n	8012662 <NFC_WaitACK+0x46>
 80126ec:	f7f9 ffd6 	bl	800c69c <HAL_GetTick>
 80126f0:	1bc0      	subs	r0, r0, r7
 80126f2:	42b0      	cmp	r0, r6
 80126f4:	d3b5      	bcc.n	8012662 <NFC_WaitACK+0x46>
timeout:
 80126f6:	e7e4      	b.n	80126c2 <NFC_WaitACK+0xa6>
 80126f8:	20001898 	.word	0x20001898
 80126fc:	020020a6 	.word	0x020020a6
 8012700:	0801a3a5 	.word	0x0801a3a5

08012704 <NFC_ReadReg>:
int32_t NFC_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) {
 8012704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012706:	4674      	mov	r4, lr
 8012708:	b08d      	sub	sp, #52	; 0x34
 801270a:	000e      	movs	r6, r1
 801270c:	940b      	str	r4, [sp, #44]	; 0x2c
 801270e:	920a      	str	r2, [sp, #40]	; 0x28
 8012710:	9308      	str	r3, [sp, #32]
 8012712:	9007      	str	r0, [sp, #28]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 8012714:	f7f9 ffc2 	bl	800c69c <HAL_GetTick>
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 8012718:	2332      	movs	r3, #50	; 0x32
 801271a:	9302      	str	r3, [sp, #8]
 801271c:	9b08      	ldr	r3, [sp, #32]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 801271e:	9009      	str	r0, [sp, #36]	; 0x24
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 8012720:	9301      	str	r3, [sp, #4]
 8012722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012724:	0032      	movs	r2, r6
 8012726:	9300      	str	r3, [sp, #0]
 8012728:	9907      	ldr	r1, [sp, #28]
 801272a:	2302      	movs	r3, #2
 801272c:	4827      	ldr	r0, [pc, #156]	; (80127cc <NFC_ReadReg+0xc8>)
 801272e:	f7fb fa1f 	bl	800db70 <HAL_I2C_Mem_Read>
    return 0;
 8012732:	2400      	movs	r4, #0
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 8012734:	42a0      	cmp	r0, r4
 8012736:	d012      	beq.n	801275e <NFC_ReadReg+0x5a>
  NFC_WaitACK(5);
 8012738:	2005      	movs	r0, #5
 801273a:	f7ff ff6f 	bl	801261c <NFC_WaitACK>
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 801273e:	2503      	movs	r5, #3
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 8012740:	2332      	movs	r3, #50	; 0x32
 8012742:	9302      	str	r3, [sp, #8]
 8012744:	9b08      	ldr	r3, [sp, #32]
 8012746:	4f21      	ldr	r7, [pc, #132]	; (80127cc <NFC_ReadReg+0xc8>)
 8012748:	9301      	str	r3, [sp, #4]
 801274a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801274c:	0032      	movs	r2, r6
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	0038      	movs	r0, r7
 8012752:	2302      	movs	r3, #2
 8012754:	9907      	ldr	r1, [sp, #28]
 8012756:	f7fb fa0b 	bl	800db70 <HAL_I2C_Mem_Read>
 801275a:	1e04      	subs	r4, r0, #0
 801275c:	d102      	bne.n	8012764 <NFC_ReadReg+0x60>
}
 801275e:	0020      	movs	r0, r4
 8012760:	b00d      	add	sp, #52	; 0x34
 8012762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("NFC I2C <RX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 8012764:	f7f9 ff9a 	bl	800c69c <HAL_GetTick>
 8012768:	9908      	ldr	r1, [sp, #32]
 801276a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801276c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801276e:	9104      	str	r1, [sp, #16]
 8012770:	9907      	ldr	r1, [sp, #28]
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 8012772:	3d01      	subs	r5, #1
    DBG_PRINTF("NFC I2C <RX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 8012774:	1a82      	subs	r2, r0, r2
 8012776:	9102      	str	r1, [sp, #8]
 8012778:	9301      	str	r3, [sp, #4]
 801277a:	2000      	movs	r0, #0
 801277c:	002b      	movs	r3, r5
 801277e:	4914      	ldr	r1, [pc, #80]	; (80127d0 <NFC_ReadReg+0xcc>)
 8012780:	9603      	str	r6, [sp, #12]
 8012782:	9400      	str	r4, [sp, #0]
 8012784:	f7f9 fc07 	bl	800bf96 <SEGGER_RTT_printf>
 8012788:	2032      	movs	r0, #50	; 0x32
 801278a:	f7ff ff47 	bl	801261c <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 801278e:	2d00      	cmp	r5, #0
 8012790:	d1d6      	bne.n	8012740 <NFC_ReadReg+0x3c>
    DBG_PRINTF("NFC I2C <RX ERR dur:%3d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:0x%x caller:%p\n", HAL_GetTick() - ts, r, hi2c1.ErrorCode, DevAddr, Reg, Length, __builtin_return_address(0));
 8012792:	f7f9 ff83 	bl	800c69c <HAL_GetTick>
 8012796:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801279a:	9104      	str	r1, [sp, #16]
 801279c:	9908      	ldr	r1, [sp, #32]
 801279e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127a0:	9103      	str	r1, [sp, #12]
 80127a2:	9907      	ldr	r1, [sp, #28]
 80127a4:	1a82      	subs	r2, r0, r2
 80127a6:	9101      	str	r1, [sp, #4]
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	490a      	ldr	r1, [pc, #40]	; (80127d4 <NFC_ReadReg+0xd0>)
 80127ac:	0023      	movs	r3, r4
 80127ae:	0028      	movs	r0, r5
 80127b0:	9602      	str	r6, [sp, #8]
 80127b2:	f7f9 fbf0 	bl	800bf96 <SEGGER_RTT_printf>
    MX_I2C1_Init();
 80127b6:	f7fe fa51 	bl	8010c5c <MX_I2C1_Init>
    if(!I2C_Scan()) {
 80127ba:	f7fd ff8f 	bl	80106dc <I2C_Scan>
 80127be:	2800      	cmp	r0, #0
 80127c0:	d1cd      	bne.n	801275e <NFC_ReadReg+0x5a>
      DEBUG_MSG("NFC I2C <RX ERR Reinit Failed!\n");
 80127c2:	0028      	movs	r0, r5
 80127c4:	4904      	ldr	r1, [pc, #16]	; (80127d8 <NFC_ReadReg+0xd4>)
 80127c6:	f7f9 fa13 	bl	800bbf0 <SEGGER_RTT_WriteString>
  return r;
 80127ca:	e7c8      	b.n	801275e <NFC_ReadReg+0x5a>
 80127cc:	20001898 	.word	0x20001898
 80127d0:	0801a3d8 	.word	0x0801a3d8
 80127d4:	0801a448 	.word	0x0801a448
 80127d8:	0801a428 	.word	0x0801a428

080127dc <NFC_WriteReg>:
int32_t NFC_WriteReg(uint16_t DevAddr, uint16_t Reg, const uint8_t *pData, uint16_t Length) {
 80127dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127de:	4674      	mov	r4, lr
 80127e0:	b08d      	sub	sp, #52	; 0x34
 80127e2:	000e      	movs	r6, r1
 80127e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80127e6:	920a      	str	r2, [sp, #40]	; 0x28
 80127e8:	9308      	str	r3, [sp, #32]
 80127ea:	9007      	str	r0, [sp, #28]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80127ec:	f7f9 ff56 	bl	800c69c <HAL_GetTick>
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 80127f0:	2332      	movs	r3, #50	; 0x32
 80127f2:	9302      	str	r3, [sp, #8]
 80127f4:	9b08      	ldr	r3, [sp, #32]
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80127f6:	9009      	str	r0, [sp, #36]	; 0x24
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 80127f8:	9301      	str	r3, [sp, #4]
 80127fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127fc:	0032      	movs	r2, r6
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	9907      	ldr	r1, [sp, #28]
 8012802:	2302      	movs	r3, #2
 8012804:	4827      	ldr	r0, [pc, #156]	; (80128a4 <NFC_WriteReg+0xc8>)
 8012806:	f7fb f8f9 	bl	800d9fc <HAL_I2C_Mem_Write>
    return 0;
 801280a:	2400      	movs	r4, #0
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 801280c:	42a0      	cmp	r0, r4
 801280e:	d012      	beq.n	8012836 <NFC_WriteReg+0x5a>
  NFC_WaitACK(5);
 8012810:	2005      	movs	r0, #5
 8012812:	f7ff ff03 	bl	801261c <NFC_WaitACK>
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 8012816:	2503      	movs	r5, #3
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 8012818:	2332      	movs	r3, #50	; 0x32
 801281a:	9302      	str	r3, [sp, #8]
 801281c:	9b08      	ldr	r3, [sp, #32]
 801281e:	4f21      	ldr	r7, [pc, #132]	; (80128a4 <NFC_WriteReg+0xc8>)
 8012820:	9301      	str	r3, [sp, #4]
 8012822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012824:	0032      	movs	r2, r6
 8012826:	9300      	str	r3, [sp, #0]
 8012828:	0038      	movs	r0, r7
 801282a:	2302      	movs	r3, #2
 801282c:	9907      	ldr	r1, [sp, #28]
 801282e:	f7fb f8e5 	bl	800d9fc <HAL_I2C_Mem_Write>
 8012832:	1e04      	subs	r4, r0, #0
 8012834:	d102      	bne.n	801283c <NFC_WriteReg+0x60>
}
 8012836:	0020      	movs	r0, r4
 8012838:	b00d      	add	sp, #52	; 0x34
 801283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("NFC I2C >TX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801283c:	f7f9 ff2e 	bl	800c69c <HAL_GetTick>
 8012840:	9908      	ldr	r1, [sp, #32]
 8012842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012846:	9104      	str	r1, [sp, #16]
 8012848:	9907      	ldr	r1, [sp, #28]
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 801284a:	3d01      	subs	r5, #1
    DBG_PRINTF("NFC I2C >TX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801284c:	1a82      	subs	r2, r0, r2
 801284e:	9102      	str	r1, [sp, #8]
 8012850:	9301      	str	r3, [sp, #4]
 8012852:	2000      	movs	r0, #0
 8012854:	002b      	movs	r3, r5
 8012856:	4914      	ldr	r1, [pc, #80]	; (80128a8 <NFC_WriteReg+0xcc>)
 8012858:	9603      	str	r6, [sp, #12]
 801285a:	9400      	str	r4, [sp, #0]
 801285c:	f7f9 fb9b 	bl	800bf96 <SEGGER_RTT_printf>
 8012860:	2032      	movs	r0, #50	; 0x32
 8012862:	f7ff fedb 	bl	801261c <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 8012866:	2d00      	cmp	r5, #0
 8012868:	d1d6      	bne.n	8012818 <NFC_WriteReg+0x3c>
    DBG_PRINTF("NFC I2C >TX ERR dur:%3d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:0x%x caller:%p\n", HAL_GetTick() - ts, r, hi2c1.ErrorCode, DevAddr, Reg, Length, __builtin_return_address(0));
 801286a:	f7f9 ff17 	bl	800c69c <HAL_GetTick>
 801286e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012872:	9104      	str	r1, [sp, #16]
 8012874:	9908      	ldr	r1, [sp, #32]
 8012876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012878:	9103      	str	r1, [sp, #12]
 801287a:	9907      	ldr	r1, [sp, #28]
 801287c:	1a82      	subs	r2, r0, r2
 801287e:	9101      	str	r1, [sp, #4]
 8012880:	9300      	str	r3, [sp, #0]
 8012882:	490a      	ldr	r1, [pc, #40]	; (80128ac <NFC_WriteReg+0xd0>)
 8012884:	0023      	movs	r3, r4
 8012886:	0028      	movs	r0, r5
 8012888:	9602      	str	r6, [sp, #8]
 801288a:	f7f9 fb84 	bl	800bf96 <SEGGER_RTT_printf>
    MX_I2C1_Init();
 801288e:	f7fe f9e5 	bl	8010c5c <MX_I2C1_Init>
    if(!I2C_Scan()) {
 8012892:	f7fd ff23 	bl	80106dc <I2C_Scan>
 8012896:	2800      	cmp	r0, #0
 8012898:	d1cd      	bne.n	8012836 <NFC_WriteReg+0x5a>
      DEBUG_MSG("NFC I2C >RX ERR Reinit Failed!\n");
 801289a:	0028      	movs	r0, r5
 801289c:	4904      	ldr	r1, [pc, #16]	; (80128b0 <NFC_WriteReg+0xd4>)
 801289e:	f7f9 f9a7 	bl	800bbf0 <SEGGER_RTT_WriteString>
  return r;
 80128a2:	e7c8      	b.n	8012836 <NFC_WriteReg+0x5a>
 80128a4:	20001898 	.word	0x20001898
 80128a8:	0801a49c 	.word	0x0801a49c
 80128ac:	0801a50c 	.word	0x0801a50c
 80128b0:	0801a4ec 	.word	0x0801a4ec

080128b4 <PrintBuffer>:
/* Public functions ----------------------------------------------------------*/
/**
 * DESCRIPTION
 *        Shorthand to do unbuffered print of byte sequence.
 */
static void PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 80128b4:	b570      	push	{r4, r5, r6, lr}
 80128b6:	0014      	movs	r4, r2
 80128b8:	000d      	movs	r5, r1
  DBG_PRINTF("%s0x", pre);
 80128ba:	0002      	movs	r2, r0
 80128bc:	490c      	ldr	r1, [pc, #48]	; (80128f0 <PrintBuffer+0x3c>)
 80128be:	2000      	movs	r0, #0
static void PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 80128c0:	001e      	movs	r6, r3
  DBG_PRINTF("%s0x", pre);
 80128c2:	f7f9 fb68 	bl	800bf96 <SEGGER_RTT_printf>
  if(len) do {
 80128c6:	2c00      	cmp	r4, #0
 80128c8:	d00b      	beq.n	80128e2 <PrintBuffer+0x2e>
 80128ca:	3c01      	subs	r4, #1
 80128cc:	b2a4      	uxth	r4, r4
 80128ce:	192c      	adds	r4, r5, r4
    DBG_PRINTF("%02x", buf[--len]);
 80128d0:	7822      	ldrb	r2, [r4, #0]
 80128d2:	2000      	movs	r0, #0
 80128d4:	4907      	ldr	r1, [pc, #28]	; (80128f4 <PrintBuffer+0x40>)
 80128d6:	f7f9 fb5e 	bl	800bf96 <SEGGER_RTT_printf>
  } while(len);
 80128da:	0023      	movs	r3, r4
 80128dc:	3c01      	subs	r4, #1
 80128de:	429d      	cmp	r5, r3
 80128e0:	d1f6      	bne.n	80128d0 <PrintBuffer+0x1c>
  DBG_PRINTF("%s", post);
 80128e2:	0032      	movs	r2, r6
 80128e4:	4904      	ldr	r1, [pc, #16]	; (80128f8 <PrintBuffer+0x44>)
 80128e6:	2000      	movs	r0, #0
 80128e8:	f7f9 fb55 	bl	800bf96 <SEGGER_RTT_printf>
}
 80128ec:	bd70      	pop	{r4, r5, r6, pc}
 80128ee:	46c0      	nop			; (mov r8, r8)
 80128f0:	08019d15 	.word	0x08019d15
 80128f4:	080198c4 	.word	0x080198c4
 80128f8:	080199bf 	.word	0x080199bf

080128fc <u64>:
 *        0 1 2 3 --el-memcpy--> 3210 --proto--> 0 1 2 3
 *        0 1 2 3 --be-memcpy--> 0123 --proto--> 3 2 1 0
 *        0 1 2 3 --el-boolor--> 3210 --proto--> 0 1 2 3
 *        0 1 2 3 --be-boolor--> 3210 --proto--> 0 1 2 3
 */
uint64_t u64(uint8_t b[static 8]) {
 80128fc:	0003      	movs	r3, r0
 80128fe:	b510      	push	{r4, lr}
  return
      (uint64_t)b[7] << 56 | (uint64_t)b[6] << 48 |
      (uint64_t)b[5] << 40 | (uint64_t)b[4] << 32 |
      (uint64_t)b[3] << 24 | (uint64_t)b[2] << 16 |
      (uint64_t)b[1] << 8  | (uint64_t)b[0];
 8012900:	7842      	ldrb	r2, [r0, #1]
 8012902:	7801      	ldrb	r1, [r0, #0]
 8012904:	0212      	lsls	r2, r2, #8
 8012906:	7880      	ldrb	r0, [r0, #2]
 8012908:	4311      	orrs	r1, r2
 801290a:	78da      	ldrb	r2, [r3, #3]
 801290c:	0400      	lsls	r0, r0, #16
 801290e:	4308      	orrs	r0, r1
 8012910:	0612      	lsls	r2, r2, #24
 8012912:	4310      	orrs	r0, r2
 8012914:	795a      	ldrb	r2, [r3, #5]
 8012916:	7919      	ldrb	r1, [r3, #4]
 8012918:	799c      	ldrb	r4, [r3, #6]
 801291a:	0212      	lsls	r2, r2, #8
 801291c:	430a      	orrs	r2, r1
 801291e:	79d9      	ldrb	r1, [r3, #7]
 8012920:	0424      	lsls	r4, r4, #16
 8012922:	4322      	orrs	r2, r4
 8012924:	0609      	lsls	r1, r1, #24
 8012926:	4311      	orrs	r1, r2
}
 8012928:	bd10      	pop	{r4, pc}

0801292a <b64>:

void b64(uint8_t b[static 8], uint64_t v) {
  b[0] = v >>  0 & 0xFF;
  b[1] = v >>  8 & 0xFF;
 801292a:	0a11      	lsrs	r1, r2, #8
  b[0] = v >>  0 & 0xFF;
 801292c:	7002      	strb	r2, [r0, #0]
  b[1] = v >>  8 & 0xFF;
 801292e:	7041      	strb	r1, [r0, #1]
  b[2] = v >> 16 & 0xFF;
 8012930:	0c11      	lsrs	r1, r2, #16
  b[3] = v >> 24 & 0xFF;
 8012932:	0e12      	lsrs	r2, r2, #24
 8012934:	70c2      	strb	r2, [r0, #3]
  b[4] = v >> 32 & 0xFF;
  b[5] = v >> 40 & 0xFF;
 8012936:	0a1a      	lsrs	r2, r3, #8
  b[4] = v >> 32 & 0xFF;
 8012938:	7103      	strb	r3, [r0, #4]
  b[5] = v >> 40 & 0xFF;
 801293a:	7142      	strb	r2, [r0, #5]
  b[6] = v >> 48 & 0xFF;
 801293c:	0c1a      	lsrs	r2, r3, #16
  b[7] = v >> 56 & 0xFF;
 801293e:	0e1b      	lsrs	r3, r3, #24
  b[2] = v >> 16 & 0xFF;
 8012940:	7081      	strb	r1, [r0, #2]
  b[6] = v >> 48 & 0xFF;
 8012942:	7182      	strb	r2, [r0, #6]
  b[7] = v >> 56 & 0xFF;
 8012944:	71c3      	strb	r3, [r0, #7]
}
 8012946:	4770      	bx	lr

08012948 <PBEncodeField>:
 *
 * BUGS
 *        Heed perils of variable argument lists! If passing literals, cast!
 *        Else u32 value 3 becomes a u64 + UB, e.g. 0xb4dc0ded_00000003.
 */
size_t PBEncodeField(uint8_t * restrict out, size_t len, uint32_t key, ...) {
 8012948:	b40c      	push	{r2, r3}
 801294a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801294c:	0007      	movs	r7, r0
  va_list ap;
  size_t size = 0;
  const uint8_t type = key & 0x7;
 801294e:	2007      	movs	r0, #7
size_t PBEncodeField(uint8_t * restrict out, size_t len, uint32_t key, ...) {
 8012950:	b089      	sub	sp, #36	; 0x24
 8012952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const uint8_t type = key & 0x7;
 8012954:	b2da      	uxtb	r2, r3
 8012956:	4018      	ands	r0, r3
  const uint32_t id = key >> 3;
 8012958:	08dc      	lsrs	r4, r3, #3

  /* contract programming * preconditions */
  assert(type == 0 || type == 1 || type == 2 || type == 5);
 801295a:	2802      	cmp	r0, #2
 801295c:	d907      	bls.n	801296e <PBEncodeField+0x26>
 801295e:	2805      	cmp	r0, #5
 8012960:	d005      	beq.n	801296e <PBEncodeField+0x26>
 8012962:	216d      	movs	r1, #109	; 0x6d
 8012964:	4b69      	ldr	r3, [pc, #420]	; (8012b0c <PBEncodeField+0x1c4>)
 8012966:	4a6a      	ldr	r2, [pc, #424]	; (8012b10 <PBEncodeField+0x1c8>)
  assert(out || !len);
 8012968:	486a      	ldr	r0, [pc, #424]	; (8012b14 <PBEncodeField+0x1cc>)
 801296a:	f003 facb 	bl	8015f04 <__assert_func>
 801296e:	09db      	lsrs	r3, r3, #7
 8012970:	2f00      	cmp	r7, #0
 8012972:	d106      	bne.n	8012982 <PBEncodeField+0x3a>
 8012974:	2900      	cmp	r1, #0
 8012976:	d100      	bne.n	801297a <PBEncodeField+0x32>
 8012978:	e0c3      	b.n	8012b02 <PBEncodeField+0x1ba>
 801297a:	216e      	movs	r1, #110	; 0x6e
 801297c:	4b66      	ldr	r3, [pc, #408]	; (8012b18 <PBEncodeField+0x1d0>)
 801297e:	4a64      	ldr	r2, [pc, #400]	; (8012b10 <PBEncodeField+0x1c8>)
 8012980:	e7f2      	b.n	8012968 <PBEncodeField+0x20>
  assert(id);
 8012982:	2c00      	cmp	r4, #0
 8012984:	d103      	bne.n	801298e <PBEncodeField+0x46>
 8012986:	216f      	movs	r1, #111	; 0x6f
 8012988:	4b64      	ldr	r3, [pc, #400]	; (8012b1c <PBEncodeField+0x1d4>)
 801298a:	4a61      	ldr	r2, [pc, #388]	; (8012b10 <PBEncodeField+0x1c8>)
 801298c:	e7ec      	b.n	8012968 <PBEncodeField+0x20>

  /* Encode key */

  /* encode 1st byte of any key */
  if(size++ < len)
 801298e:	2900      	cmp	r1, #0
 8012990:	d007      	beq.n	80129a2 <PBEncodeField+0x5a>
    /* 3 type bits | 4 id bits | 8th continuation bit */
    out[size - 1] = (key & 0x7f) | (key >> 7 ? 0x80 : 0);
 8012992:	247f      	movs	r4, #127	; 0x7f
 8012994:	4022      	ands	r2, r4
 8012996:	001c      	movs	r4, r3
 8012998:	1e65      	subs	r5, r4, #1
 801299a:	41ac      	sbcs	r4, r5
 801299c:	01e4      	lsls	r4, r4, #7
 801299e:	4322      	orrs	r2, r4
 80129a0:	703a      	strb	r2, [r7, #0]

  /* for each 7-bits encode 1-byte (25-bits, 4-bytes total) */
  for(uint32_t i = id >> 4; i; i >>= 7)
    if(size++ < len)
      /* 7 id bits | 8th continuation bit */
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129a2:	227f      	movs	r2, #127	; 0x7f
  for(uint32_t i = id >> 4; i; i >>= 7)
 80129a4:	2401      	movs	r4, #1
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129a6:	4694      	mov	ip, r2
  for(uint32_t i = id >> 4; i; i >>= 7)
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d108      	bne.n	80129be <PBEncodeField+0x76>

  /* Encode value */

  va_start(ap, key);
 80129ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80129ae:	9305      	str	r3, [sp, #20]
  switch(type) {
 80129b0:	2805      	cmp	r0, #5
 80129b2:	d833      	bhi.n	8012a1c <PBEncodeField+0xd4>
 80129b4:	f7ed fbba 	bl	800012c <__gnu_thumb1_case_uqi>
 80129b8:	32763811 	.word	0x32763811
 80129bc:	5f32      	.short	0x5f32
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129be:	09da      	lsrs	r2, r3, #7
    if(size++ < len)
 80129c0:	428c      	cmp	r4, r1
 80129c2:	d207      	bcs.n	80129d4 <PBEncodeField+0x8c>
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 80129c4:	4665      	mov	r5, ip
 80129c6:	0016      	movs	r6, r2
 80129c8:	402b      	ands	r3, r5
 80129ca:	1e75      	subs	r5, r6, #1
 80129cc:	41ae      	sbcs	r6, r5
 80129ce:	01f6      	lsls	r6, r6, #7
 80129d0:	4333      	orrs	r3, r6
 80129d2:	553b      	strb	r3, [r7, r4]
 80129d4:	0013      	movs	r3, r2
 80129d6:	3401      	adds	r4, #1
 80129d8:	e7e6      	b.n	80129a8 <PBEncodeField+0x60>
  case PB_TAGTYPE_VARINT: {
    /* foreach 7-bits encode 1-byte (64-bits, 10-bytes total) */
    uint64_t in = va_arg(ap, uint64_t);
 80129da:	2207      	movs	r2, #7
 80129dc:	9b05      	ldr	r3, [sp, #20]
 80129de:	3307      	adds	r3, #7
 80129e0:	4393      	bics	r3, r2
 80129e2:	cb24      	ldmia	r3!, {r2, r5}
    do {
      if(size++ < len)
        out[size - 1] = (in & 0x7f) | (in >> 7 ? 0x80 : 0);
 80129e4:	066e      	lsls	r6, r5, #25
 80129e6:	0013      	movs	r3, r2
 80129e8:	09d2      	lsrs	r2, r2, #7
 80129ea:	4332      	orrs	r2, r6
 80129ec:	0016      	movs	r6, r2
 80129ee:	46a4      	mov	ip, r4
 80129f0:	09ed      	lsrs	r5, r5, #7
 80129f2:	432e      	orrs	r6, r5
      if(size++ < len)
 80129f4:	3401      	adds	r4, #1
 80129f6:	9601      	str	r6, [sp, #4]
 80129f8:	458c      	cmp	ip, r1
 80129fa:	d20c      	bcs.n	8012a16 <PBEncodeField+0xce>
        out[size - 1] = (in & 0x7f) | (in >> 7 ? 0x80 : 0);
 80129fc:	267f      	movs	r6, #127	; 0x7f
 80129fe:	401e      	ands	r6, r3
 8012a00:	9602      	str	r6, [sp, #8]
 8012a02:	9e01      	ldr	r6, [sp, #4]
 8012a04:	2380      	movs	r3, #128	; 0x80
 8012a06:	2e00      	cmp	r6, #0
 8012a08:	d100      	bne.n	8012a0c <PBEncodeField+0xc4>
 8012a0a:	0003      	movs	r3, r0
 8012a0c:	9e02      	ldr	r6, [sp, #8]
 8012a0e:	431e      	orrs	r6, r3
 8012a10:	0033      	movs	r3, r6
 8012a12:	4666      	mov	r6, ip
 8012a14:	55bb      	strb	r3, [r7, r6]
    } while(in >>= 7);
 8012a16:	9b01      	ldr	r3, [sp, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d1e3      	bne.n	80129e4 <PBEncodeField+0x9c>
  default: break;;
  }
  va_end(ap);

  return size;
}
 8012a1c:	0020      	movs	r0, r4
 8012a1e:	b009      	add	sp, #36	; 0x24
 8012a20:	bcf0      	pop	{r4, r5, r6, r7}
 8012a22:	bc08      	pop	{r3}
 8012a24:	b002      	add	sp, #8
 8012a26:	4718      	bx	r3
    uint64_t x = va_arg(ap, uint64_t);
 8012a28:	2207      	movs	r2, #7
 8012a2a:	9b05      	ldr	r3, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 8012a2c:	0025      	movs	r5, r4
    uint64_t x = va_arg(ap, uint64_t);
 8012a2e:	3307      	adds	r3, #7
 8012a30:	4393      	bics	r3, r2
 8012a32:	001a      	movs	r2, r3
 8012a34:	3208      	adds	r2, #8
 8012a36:	9205      	str	r2, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 8012a38:	3508      	adds	r5, #8
 8012a3a:	428c      	cmp	r4, r1
 8012a3c:	d817      	bhi.n	8012a6e <PBEncodeField+0x126>
 8012a3e:	42a9      	cmp	r1, r5
 8012a40:	d217      	bcs.n	8012a72 <PBEncodeField+0x12a>
 8012a42:	1b0a      	subs	r2, r1, r4
    if(cpylen)
 8012a44:	42a1      	cmp	r1, r4
 8012a46:	d012      	beq.n	8012a6e <PBEncodeField+0x126>
    uint64_t x = va_arg(ap, uint64_t);
 8012a48:	cb09      	ldmia	r3, {r0, r3}
      memcpy(out + size, (const uint8_t[8]){
 8012a4a:	a906      	add	r1, sp, #24
        x >>  0, x >>  8, x >> 16, x >> 24,
 8012a4c:	0a06      	lsrs	r6, r0, #8
      memcpy(out + size, (const uint8_t[8]){
 8012a4e:	7008      	strb	r0, [r1, #0]
 8012a50:	704e      	strb	r6, [r1, #1]
        x >>  0, x >>  8, x >> 16, x >> 24,
 8012a52:	0c06      	lsrs	r6, r0, #16
 8012a54:	0e00      	lsrs	r0, r0, #24
      memcpy(out + size, (const uint8_t[8]){
 8012a56:	70c8      	strb	r0, [r1, #3]
        x >> 32, x >> 40, x >> 48, x >> 56}, cpylen);
 8012a58:	0a18      	lsrs	r0, r3, #8
      memcpy(out + size, (const uint8_t[8]){
 8012a5a:	710b      	strb	r3, [r1, #4]
 8012a5c:	7148      	strb	r0, [r1, #5]
        x >> 32, x >> 40, x >> 48, x >> 56}, cpylen);
 8012a5e:	0c18      	lsrs	r0, r3, #16
 8012a60:	0e1b      	lsrs	r3, r3, #24
      memcpy(out + size, (const uint8_t[8]){
 8012a62:	708e      	strb	r6, [r1, #2]
 8012a64:	7188      	strb	r0, [r1, #6]
 8012a66:	71cb      	strb	r3, [r1, #7]
      memcpy(out + size, (const uint8_t[4]){
 8012a68:	1938      	adds	r0, r7, r4
 8012a6a:	f003 fabf 	bl	8015fec <memcpy>
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012a6e:	002c      	movs	r4, r5
    break;;
 8012a70:	e7d4      	b.n	8012a1c <PBEncodeField+0xd4>
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 8012a72:	2208      	movs	r2, #8
 8012a74:	e7e8      	b.n	8012a48 <PBEncodeField+0x100>
    uint32_t x = va_arg(ap, uint32_t);
 8012a76:	9b05      	ldr	r3, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012a78:	1d25      	adds	r5, r4, #4
    uint32_t x = va_arg(ap, uint32_t);
 8012a7a:	1d1a      	adds	r2, r3, #4
 8012a7c:	9205      	str	r2, [sp, #20]
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012a7e:	428c      	cmp	r4, r1
 8012a80:	d8f5      	bhi.n	8012a6e <PBEncodeField+0x126>
 8012a82:	42a9      	cmp	r1, r5
 8012a84:	d20c      	bcs.n	8012aa0 <PBEncodeField+0x158>
 8012a86:	1b0a      	subs	r2, r1, r4
    if(cpylen)
 8012a88:	42a1      	cmp	r1, r4
 8012a8a:	d0f0      	beq.n	8012a6e <PBEncodeField+0x126>
    uint32_t x = va_arg(ap, uint32_t);
 8012a8c:	681b      	ldr	r3, [r3, #0]
      memcpy(out + size, (const uint8_t[4]){
 8012a8e:	a906      	add	r1, sp, #24
        x >>  0, x >>  8, x >> 16, x >> 24}, cpylen);
 8012a90:	0a18      	lsrs	r0, r3, #8
      memcpy(out + size, (const uint8_t[4]){
 8012a92:	700b      	strb	r3, [r1, #0]
 8012a94:	7048      	strb	r0, [r1, #1]
        x >>  0, x >>  8, x >> 16, x >> 24}, cpylen);
 8012a96:	0c18      	lsrs	r0, r3, #16
 8012a98:	0e1b      	lsrs	r3, r3, #24
      memcpy(out + size, (const uint8_t[4]){
 8012a9a:	7088      	strb	r0, [r1, #2]
 8012a9c:	70cb      	strb	r3, [r1, #3]
 8012a9e:	e7e3      	b.n	8012a68 <PBEncodeField+0x120>
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8012aa0:	2204      	movs	r2, #4
 8012aa2:	e7f3      	b.n	8012a8c <PBEncodeField+0x144>
    const size_t buflen = va_arg(ap, size_t);
 8012aa4:	9b05      	ldr	r3, [sp, #20]
    uint64_t x = buflen;
 8012aa6:	2600      	movs	r6, #0
    const uint8_t *buf = va_arg(ap, uint8_t * restrict);
 8012aa8:	cb0c      	ldmia	r3, {r2, r3}
    uint64_t x = buflen;
 8012aaa:	0020      	movs	r0, r4
    const uint8_t *buf = va_arg(ap, uint8_t * restrict);
 8012aac:	469c      	mov	ip, r3
    uint64_t x = buflen;
 8012aae:	0015      	movs	r5, r2
      if(size++ < len)
 8012ab0:	002b      	movs	r3, r5
        out[size - 1] = (x & 0x7f) | (x >> 7 ? 0x80 : 0);
 8012ab2:	0675      	lsls	r5, r6, #25
 8012ab4:	09dc      	lsrs	r4, r3, #7
 8012ab6:	4325      	orrs	r5, r4
 8012ab8:	002c      	movs	r4, r5
 8012aba:	09f6      	lsrs	r6, r6, #7
 8012abc:	9001      	str	r0, [sp, #4]
 8012abe:	4334      	orrs	r4, r6
 8012ac0:	9402      	str	r4, [sp, #8]
      if(size++ < len)
 8012ac2:	9c01      	ldr	r4, [sp, #4]
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	428c      	cmp	r4, r1
 8012ac8:	d20a      	bcs.n	8012ae0 <PBEncodeField+0x198>
        out[size - 1] = (x & 0x7f) | (x >> 7 ? 0x80 : 0);
 8012aca:	247f      	movs	r4, #127	; 0x7f
 8012acc:	4023      	ands	r3, r4
 8012ace:	9c02      	ldr	r4, [sp, #8]
 8012ad0:	9303      	str	r3, [sp, #12]
 8012ad2:	1e63      	subs	r3, r4, #1
 8012ad4:	419c      	sbcs	r4, r3
 8012ad6:	9b03      	ldr	r3, [sp, #12]
 8012ad8:	01e4      	lsls	r4, r4, #7
 8012ada:	431c      	orrs	r4, r3
 8012adc:	9b01      	ldr	r3, [sp, #4]
 8012ade:	54fc      	strb	r4, [r7, r3]
    } while(x >>= 7);
 8012ae0:	9b02      	ldr	r3, [sp, #8]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d1e4      	bne.n	8012ab0 <PBEncodeField+0x168>
    const size_t cpylen = size > len ? 0 : size + buflen > len ? len - size : buflen;
 8012ae6:	1814      	adds	r4, r2, r0
 8012ae8:	4281      	cmp	r1, r0
 8012aea:	d397      	bcc.n	8012a1c <PBEncodeField+0xd4>
 8012aec:	428c      	cmp	r4, r1
 8012aee:	d900      	bls.n	8012af2 <PBEncodeField+0x1aa>
 8012af0:	1a0a      	subs	r2, r1, r0
    if(cpylen)
 8012af2:	2a00      	cmp	r2, #0
 8012af4:	d100      	bne.n	8012af8 <PBEncodeField+0x1b0>
 8012af6:	e791      	b.n	8012a1c <PBEncodeField+0xd4>
      memcpy(out + size, buf, cpylen);
 8012af8:	4661      	mov	r1, ip
 8012afa:	1838      	adds	r0, r7, r0
 8012afc:	f003 fa76 	bl	8015fec <memcpy>
  return size;
 8012b00:	e78c      	b.n	8012a1c <PBEncodeField+0xd4>
  assert(id);
 8012b02:	2c00      	cmp	r4, #0
 8012b04:	d000      	beq.n	8012b08 <PBEncodeField+0x1c0>
 8012b06:	e74c      	b.n	80129a2 <PBEncodeField+0x5a>
 8012b08:	e73d      	b.n	8012986 <PBEncodeField+0x3e>
 8012b0a:	46c0      	nop			; (mov r8, r8)
 8012b0c:	0801a560 	.word	0x0801a560
 8012b10:	0801a9a8 	.word	0x0801a9a8
 8012b14:	0801a591 	.word	0x0801a591
 8012b18:	0801a5a3 	.word	0x0801a5a3
 8012b1c:	08018c8e 	.word	0x08018c8e

08012b20 <PBDecodeVarint>:
 *
 */
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
  uint8_t destbytes, nextbits, bitmask, bits = 0;

  destbytes = maxbits / 8 + !!(maxbits % 8);
 8012b20:	2307      	movs	r3, #7
 8012b22:	400b      	ands	r3, r1
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8012b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b26:	0014      	movs	r4, r2
  destbytes = maxbits / 8 + !!(maxbits % 8);
 8012b28:	1e5a      	subs	r2, r3, #1
 8012b2a:	4193      	sbcs	r3, r2
 8012b2c:	08ca      	lsrs	r2, r1, #3
 8012b2e:	189b      	adds	r3, r3, r2
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8012b30:	0006      	movs	r6, r0
 8012b32:	000f      	movs	r7, r1
  destbytes =
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d922      	bls.n	8012b7e <PBDecodeVarint+0x5e>
 8012b38:	2b02      	cmp	r3, #2
 8012b3a:	d002      	beq.n	8012b42 <PBDecodeVarint+0x22>
 8012b3c:	2b04      	cmp	r3, #4
 8012b3e:	d920      	bls.n	8012b82 <PBDecodeVarint+0x62>
 8012b40:	2308      	movs	r3, #8
  uint8_t destbytes, nextbits, bitmask, bits = 0;
 8012b42:	2500      	movs	r5, #0
    nextbits = maxbits - bits;
    nextbits = nextbits > 7 ? 7 : nextbits;
    bitmask = ((uint8_t)1 << nextbits) - 1;

    /* Carve bits, affix to value */
    switch(destbytes) {
 8012b44:	3b01      	subs	r3, #1
 8012b46:	9301      	str	r3, [sp, #4]
    varint += !!bits;
 8012b48:	002b      	movs	r3, r5
 8012b4a:	1e5a      	subs	r2, r3, #1
 8012b4c:	4193      	sbcs	r3, r2
 8012b4e:	18f6      	adds	r6, r6, r3
    nextbits = maxbits - bits;
 8012b50:	1b7b      	subs	r3, r7, r5
 8012b52:	b2db      	uxtb	r3, r3
    nextbits = nextbits > 7 ? 7 : nextbits;
 8012b54:	1c1a      	adds	r2, r3, #0
 8012b56:	2b07      	cmp	r3, #7
 8012b58:	d900      	bls.n	8012b5c <PBDecodeVarint+0x3c>
 8012b5a:	2207      	movs	r2, #7
 8012b5c:	b2d3      	uxtb	r3, r2
 8012b5e:	9300      	str	r3, [sp, #0]
    bitmask = ((uint8_t)1 << nextbits) - 1;
 8012b60:	2301      	movs	r3, #1
 8012b62:	9a00      	ldr	r2, [sp, #0]
 8012b64:	4093      	lsls	r3, r2
    switch(destbytes) {
 8012b66:	9a01      	ldr	r2, [sp, #4]
    bitmask = ((uint8_t)1 << nextbits) - 1;
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	b2db      	uxtb	r3, r3
    switch(destbytes) {
 8012b6c:	2a07      	cmp	r2, #7
 8012b6e:	d818      	bhi.n	8012ba2 <PBDecodeVarint+0x82>
 8012b70:	0010      	movs	r0, r2
 8012b72:	f7ed fadb 	bl	800012c <__gnu_thumb1_case_uqi>
 8012b76:	1808      	.short	0x1808
 8012b78:	16161f16 	.word	0x16161f16
 8012b7c:	2616      	.short	0x2616
  destbytes =
 8012b7e:	2301      	movs	r3, #1
 8012b80:	e7df      	b.n	8012b42 <PBDecodeVarint+0x22>
 8012b82:	2304      	movs	r3, #4
 8012b84:	e7dd      	b.n	8012b42 <PBDecodeVarint+0x22>
    case 1: *(uint8_t *)value |= ((bitmask & *varint) + (uint8_t )0) << bits; break;
 8012b86:	7830      	ldrb	r0, [r6, #0]
 8012b88:	4003      	ands	r3, r0
 8012b8a:	40ab      	lsls	r3, r5
 8012b8c:	7820      	ldrb	r0, [r4, #0]
 8012b8e:	4303      	orrs	r3, r0
 8012b90:	7023      	strb	r3, [r4, #0]
    case 2: *(uint16_t*)value |= ((bitmask & *varint) + (uint16_t)0) << bits; break;
    case 4: *(uint32_t*)value |= ((bitmask & *varint) + (uint32_t)0) << bits; break;
    case 8: *(uint64_t*)value |= ((bitmask & *varint) + (uint64_t)0) << bits; break;
    default: return 0; break;
    }
    bits += nextbits;
 8012b92:	9b00      	ldr	r3, [sp, #0]
 8012b94:	18ed      	adds	r5, r5, r3

  /* Check continuation bit after taking value */
  } while(0x80 & *varint && bits < maxbits);
 8012b96:	7833      	ldrb	r3, [r6, #0]
    bits += nextbits;
 8012b98:	b2ed      	uxtb	r5, r5
  } while(0x80 & *varint && bits < maxbits);
 8012b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8012b9c:	d91e      	bls.n	8012bdc <PBDecodeVarint+0xbc>
 8012b9e:	42af      	cmp	r7, r5
 8012ba0:	d8d2      	bhi.n	8012b48 <PBDecodeVarint+0x28>
    switch(destbytes) {
 8012ba2:	2000      	movs	r0, #0

  /* Return input bytes read or 0 if too many continuation bits set */
  return *varint & 0x80 ? 0 : bits / 7 + !!(bits % 7);
}
 8012ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    case 2: *(uint16_t*)value |= ((bitmask & *varint) + (uint16_t)0) << bits; break;
 8012ba6:	7830      	ldrb	r0, [r6, #0]
 8012ba8:	4003      	ands	r3, r0
 8012baa:	40ab      	lsls	r3, r5
 8012bac:	8820      	ldrh	r0, [r4, #0]
 8012bae:	4303      	orrs	r3, r0
 8012bb0:	8023      	strh	r3, [r4, #0]
 8012bb2:	e7ee      	b.n	8012b92 <PBDecodeVarint+0x72>
    case 4: *(uint32_t*)value |= ((bitmask & *varint) + (uint32_t)0) << bits; break;
 8012bb4:	7830      	ldrb	r0, [r6, #0]
 8012bb6:	6822      	ldr	r2, [r4, #0]
 8012bb8:	4003      	ands	r3, r0
 8012bba:	40ab      	lsls	r3, r5
 8012bbc:	4313      	orrs	r3, r2
 8012bbe:	6023      	str	r3, [r4, #0]
 8012bc0:	e7e7      	b.n	8012b92 <PBDecodeVarint+0x72>
    case 8: *(uint64_t*)value |= ((bitmask & *varint) + (uint64_t)0) << bits; break;
 8012bc2:	7830      	ldrb	r0, [r6, #0]
 8012bc4:	002a      	movs	r2, r5
 8012bc6:	4018      	ands	r0, r3
 8012bc8:	2100      	movs	r1, #0
 8012bca:	f7ed fc43 	bl	8000454 <__aeabi_llsl>
 8012bce:	6823      	ldr	r3, [r4, #0]
 8012bd0:	4318      	orrs	r0, r3
 8012bd2:	6863      	ldr	r3, [r4, #4]
 8012bd4:	6020      	str	r0, [r4, #0]
 8012bd6:	4319      	orrs	r1, r3
 8012bd8:	6061      	str	r1, [r4, #4]
 8012bda:	e7da      	b.n	8012b92 <PBDecodeVarint+0x72>
  return *varint & 0x80 ? 0 : bits / 7 + !!(bits % 7);
 8012bdc:	2107      	movs	r1, #7
 8012bde:	0028      	movs	r0, r5
 8012be0:	f7ed fb48 	bl	8000274 <__aeabi_uidivmod>
 8012be4:	0028      	movs	r0, r5
 8012be6:	b2cc      	uxtb	r4, r1
 8012be8:	2107      	movs	r1, #7
 8012bea:	1e63      	subs	r3, r4, #1
 8012bec:	419c      	sbcs	r4, r3
 8012bee:	f7ed fabb 	bl	8000168 <__udivsi3>
 8012bf2:	1820      	adds	r0, r4, r0
 8012bf4:	b2c0      	uxtb	r0, r0
 8012bf6:	e7d5      	b.n	8012ba4 <PBDecodeVarint+0x84>

08012bf8 <PBEncodeSInt>:

uint64_t PBEncodeSInt(int64_t val) {
 8012bf8:	0002      	movs	r2, r0
 8012bfa:	000b      	movs	r3, r1
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8012bfc:	0fc8      	lsrs	r0, r1, #31
 8012bfe:	2100      	movs	r1, #0
uint64_t PBEncodeSInt(int64_t val) {
 8012c00:	b530      	push	{r4, r5, lr}
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8012c02:	2500      	movs	r5, #0
 8012c04:	4244      	negs	r4, r0
 8012c06:	418d      	sbcs	r5, r1
 8012c08:	1892      	adds	r2, r2, r2
 8012c0a:	415b      	adcs	r3, r3
 8012c0c:	0029      	movs	r1, r5
 8012c0e:	0020      	movs	r0, r4
 8012c10:	4059      	eors	r1, r3
 8012c12:	4050      	eors	r0, r2
}
 8012c14:	bd30      	pop	{r4, r5, pc}

08012c16 <PBDecodeSInt>:

int64_t PBDecodeSInt(uint64_t val) {
 8012c16:	0003      	movs	r3, r0
  return (int64_t)(val & 1 ? ~(val >> 1) : val >> 1);
 8012c18:	07ca      	lsls	r2, r1, #31
 8012c1a:	0840      	lsrs	r0, r0, #1
 8012c1c:	4310      	orrs	r0, r2
 8012c1e:	0849      	lsrs	r1, r1, #1
 8012c20:	07db      	lsls	r3, r3, #31
 8012c22:	d501      	bpl.n	8012c28 <PBDecodeSInt+0x12>
 8012c24:	43c0      	mvns	r0, r0
 8012c26:	43c9      	mvns	r1, r1
}
 8012c28:	4770      	bx	lr
	...

08012c2c <PBDecodeMsg>:
 *
 *            larger key  varint_length  payload
 *              82 80 40             05  aa bb cc dd ee
 *        bytes 131072 = {0xaa, 0xbb, 0xcc, 0xdd, 0xee}
 */
void PBDecodeMsg(const uint8_t *msg, uint8_t len) {
 8012c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c2e:	b097      	sub	sp, #92	; 0x5c
 8012c30:	9003      	str	r0, [sp, #12]
 8012c32:	9101      	str	r1, [sp, #4]
  const char *debug_msg = NULL;
  uint8_t debug_fieldpos = 0;
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;

  /* 1st byte always zero, to allow future (unlikely) breaking changes */
  if(len < 1 || msg[0]) {
 8012c34:	2900      	cmp	r1, #0
 8012c36:	d101      	bne.n	8012c3c <PBDecodeMsg+0x10>
 8012c38:	f000 fc14 	bl	8013464 <PBDecodeMsg+0x838>
 8012c3c:	7807      	ldrb	r7, [r0, #0]
 8012c3e:	2f00      	cmp	r7, #0
 8012c40:	d001      	beq.n	8012c46 <PBDecodeMsg+0x1a>
 8012c42:	f000 fc15 	bl	8013470 <PBDecodeMsg+0x844>
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 8012c46:	9704      	str	r7, [sp, #16]
    debug_msg = ", Unknown message version\n";
    goto abort;
  }
  if(len == 1) {
 8012c48:	2901      	cmp	r1, #1
 8012c4a:	d101      	bne.n	8012c50 <PBDecodeMsg+0x24>
 8012c4c:	f000 fc16 	bl	801347c <PBDecodeMsg+0x850>
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 8012c50:	9702      	str	r7, [sp, #8]
 8012c52:	9705      	str	r7, [sp, #20]
    debug_msg = ", Out-of-bounds\n";
    goto abort;
  }
  pos++;
 8012c54:	3701      	adds	r7, #1
  while(pos != len) {
    /*
     * Decode Key
     */
    uint8_t tagtype = msg[pos] & 0x7;
    uint32_t tagnr = 0;
 8012c56:	2200      	movs	r2, #0
    uint8_t val_rawbytes;
    uint64_t val_int = 0;
 8012c58:	2100      	movs	r1, #0
    uint32_t tagnr = 0;
 8012c5a:	9207      	str	r2, [sp, #28]
    uint64_t val_int = 0;
 8012c5c:	2200      	movs	r2, #0
    uint8_t tagtype = msg[pos] & 0x7;
 8012c5e:	2507      	movs	r5, #7
 8012c60:	9b03      	ldr	r3, [sp, #12]
    uint64_t val_int = 0;
 8012c62:	9108      	str	r1, [sp, #32]
 8012c64:	9209      	str	r2, [sp, #36]	; 0x24
    uint8_t tagtype = msg[pos] & 0x7;
 8012c66:	19de      	adds	r6, r3, r7
 8012c68:	5ddb      	ldrb	r3, [r3, r7]

    debug_fieldpos = pos;

    /* Continuation bit set, tag could be 2 to 5 bytes, values [16,2^29-1] */
    if(msg[pos] & 0x80) {
 8012c6a:	b25a      	sxtb	r2, r3
    uint8_t tagtype = msg[pos] & 0x7;
 8012c6c:	401d      	ands	r5, r3
    if(msg[pos] & 0x80) {
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	da35      	bge.n	8012cde <PBDecodeMsg+0xb2>
      /* Reuse code to decode subsequent 1 to 4 bytes. */
      uint8_t tagnr_bitlimit = len - pos < 5 ? (len - pos) * 7 : 25;
 8012c72:	9b01      	ldr	r3, [sp, #4]
 8012c74:	3119      	adds	r1, #25
 8012c76:	1bdb      	subs	r3, r3, r7
 8012c78:	2b04      	cmp	r3, #4
 8012c7a:	dc02      	bgt.n	8012c82 <PBDecodeMsg+0x56>
 8012c7c:	2207      	movs	r2, #7
 8012c7e:	4353      	muls	r3, r2
 8012c80:	b2d9      	uxtb	r1, r3
      uint8_t tagnr_bytes = PBDecodeVarint(msg + pos + 1, tagnr_bitlimit, &tagnr);
 8012c82:	9b03      	ldr	r3, [sp, #12]
 8012c84:	1c7c      	adds	r4, r7, #1
 8012c86:	1918      	adds	r0, r3, r4
 8012c88:	aa07      	add	r2, sp, #28
 8012c8a:	f7ff ff49 	bl	8012b20 <PBDecodeVarint>

      /* Prevent varint spill, i.e. continuation bit set in all *accessed* bytes */
      if(!tagnr_bytes) {
 8012c8e:	2800      	cmp	r0, #0
 8012c90:	d101      	bne.n	8012c96 <PBDecodeMsg+0x6a>
 8012c92:	f000 fbdf 	bl	8013454 <PBDecodeMsg+0x828>
        goto abort;
      }

      /* Merge value of 1st byte with value of subsequent 1 to 4 bytes. */
      tagnr <<= 4;
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012c96:	7833      	ldrb	r3, [r6, #0]
      tagnr <<= 4;
 8012c98:	9a07      	ldr	r2, [sp, #28]
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012c9a:	065b      	lsls	r3, r3, #25
 8012c9c:	0f1b      	lsrs	r3, r3, #28
      tagnr <<= 4;
 8012c9e:	0112      	lsls	r2, r2, #4
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012ca0:	4313      	orrs	r3, r2
      pos += tagnr_bytes + 1;
 8012ca2:	1824      	adds	r4, r4, r0
      tagnr |= (msg[pos] & 0x78) >> 3;
 8012ca4:	9307      	str	r3, [sp, #28]
      pos += tagnr_bytes + 1;
 8012ca6:	b2e3      	uxtb	r3, r4

    /* Continuation bit clear, tag is 1 byte, values [1,15] */
    } else {
      tagnr = (msg[pos] & 0x78) >> 3;
      pos += 1;
 8012ca8:	9300      	str	r3, [sp, #0]
    }

    /* Key being zero is ill-formed */
    if(!tagnr) {
 8012caa:	9b07      	ldr	r3, [sp, #28]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d101      	bne.n	8012cb4 <PBDecodeMsg+0x88>
 8012cb0:	f000 fbd2 	bl	8013458 <PBDecodeMsg+0x82c>
    /*
     * Decode Value
     */

    /* Key without value is ill-formed. */
    if(!(len - pos)) {
 8012cb4:	9b00      	ldr	r3, [sp, #0]
 8012cb6:	9a01      	ldr	r2, [sp, #4]
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d101      	bne.n	8012cc0 <PBDecodeMsg+0x94>
 8012cbc:	f000 fbce 	bl	801345c <PBDecodeMsg+0x830>
      debug_msg = ", Out-of-bounds tag w/o value\n";
      goto abort;
    }

    /* Need size in case to skip unknown field. */
    switch(tagtype) {
 8012cc0:	2d05      	cmp	r5, #5
 8012cc2:	d901      	bls.n	8012cc8 <PBDecodeMsg+0x9c>
 8012cc4:	f000 fbcc 	bl	8013460 <PBDecodeMsg+0x834>
 8012cc8:	0028      	movs	r0, r5
 8012cca:	f7ed fa43 	bl	8000154 <__gnu_thumb1_case_uhi>
 8012cce:	000d      	.short	0x000d
 8012cd0:	00480020 	.word	0x00480020
 8012cd4:	03c903c9 	.word	0x03c903c9
 8012cd8:	00ad      	.short	0x00ad
 8012cda:	0027      	movs	r7, r4
 8012cdc:	e7bb      	b.n	8012c56 <PBDecodeMsg+0x2a>
      tagnr = (msg[pos] & 0x78) >> 3;
 8012cde:	10db      	asrs	r3, r3, #3
      pos += 1;
 8012ce0:	1c78      	adds	r0, r7, #1
      tagnr = (msg[pos] & 0x78) >> 3;
 8012ce2:	9307      	str	r3, [sp, #28]
      pos += 1;
 8012ce4:	b2c3      	uxtb	r3, r0
 8012ce6:	e7df      	b.n	8012ca8 <PBDecodeMsg+0x7c>
    case PB_TAGTYPE_VARINT: {
      uint8_t varint_bitlimit = len - pos < 10 ? (len - pos) * 7 : 64;
 8012ce8:	9b01      	ldr	r3, [sp, #4]
 8012cea:	9a00      	ldr	r2, [sp, #0]
 8012cec:	2140      	movs	r1, #64	; 0x40
 8012cee:	1a9b      	subs	r3, r3, r2
 8012cf0:	2b09      	cmp	r3, #9
 8012cf2:	dc02      	bgt.n	8012cfa <PBDecodeMsg+0xce>
 8012cf4:	2207      	movs	r2, #7
 8012cf6:	4353      	muls	r3, r2
 8012cf8:	b2d9      	uxtb	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8012cfa:	9a00      	ldr	r2, [sp, #0]
 8012cfc:	9b03      	ldr	r3, [sp, #12]
 8012cfe:	1898      	adds	r0, r3, r2
 8012d00:	aa08      	add	r2, sp, #32
 8012d02:	f7ff ff0d 	bl	8012b20 <PBDecodeVarint>
 8012d06:	0004      	movs	r4, r0
      break;
    }
    }

    /* Value was too large or ill-formed */
    if(!val_rawbytes) {
 8012d08:	2c00      	cmp	r4, #0
 8012d0a:	d108      	bne.n	8012d1e <PBDecodeMsg+0xf2>
 8012d0c:	e035      	b.n	8012d7a <PBDecodeMsg+0x14e>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8012d0e:	9a00      	ldr	r2, [sp, #0]
 8012d10:	9b03      	ldr	r3, [sp, #12]
 8012d12:	a808      	add	r0, sp, #32
 8012d14:	1899      	adds	r1, r3, r2
 8012d16:	2208      	movs	r2, #8
 8012d18:	f003 f968 	bl	8015fec <memcpy>
      val_rawbytes = 8;
 8012d1c:	2408      	movs	r4, #8
     */

    /* LoRaWAN */

    /* rwr-  5:    bool   (TTN) Activation Method */
    if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_OTAA) {
 8012d1e:	9b07      	ldr	r3, [sp, #28]
 8012d20:	00db      	lsls	r3, r3, #3
 8012d22:	432b      	orrs	r3, r5
 8012d24:	2b28      	cmp	r3, #40	; 0x28
 8012d26:	d000      	beq.n	8012d2a <PBDecodeMsg+0xfe>
 8012d28:	e087      	b.n	8012e3a <PBDecodeMsg+0x20e>
      DBG_PRINTF("NFC <RX lora_otaa 0x%02x\n", val_int);
 8012d2a:	9a08      	ldr	r2, [sp, #32]
 8012d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d2e:	49c5      	ldr	r1, [pc, #788]	; (8013044 <PBDecodeMsg+0x418>)
 8012d30:	2000      	movs	r0, #0
 8012d32:	f7f9 f930 	bl	800bf96 <SEGGER_RTT_printf>
      val_int = !!val_int;
 8012d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d38:	9b08      	ldr	r3, [sp, #32]
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	1e5a      	subs	r2, r3, #1
 8012d3e:	4193      	sbcs	r3, r2
 8012d40:	2200      	movs	r2, #0
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	9209      	str	r2, [sp, #36]	; 0x24
      DEVCFG_SET(DevCfg.isOtaa, val_int) && (DevCfg.changed.lrw = true);
 8012d46:	4ac0      	ldr	r2, [pc, #768]	; (8013048 <PBDecodeMsg+0x41c>)
      val_int = !!val_int;
 8012d48:	9308      	str	r3, [sp, #32]
      DEVCFG_SET(DevCfg.isOtaa, val_int) && (DevCfg.changed.lrw = true);
 8012d4a:	7911      	ldrb	r1, [r2, #4]
 8012d4c:	428b      	cmp	r3, r1
 8012d4e:	d100      	bne.n	8012d52 <PBDecodeMsg+0x126>
 8012d50:	e093      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8012d52:	7113      	strb	r3, [r2, #4]

    /* rwr- 13: uint8_t LoRa Frequency Plan */
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_FP) {
      DBG_PRINTF("NFC <RX lora_fp 0x%02x\n", val_int);
      switch(val_int) {
      case PBENUM_FP_EU868: DEVCFG_SET(DevCfg.region, LORAMAC_REGION_EU868) && (DevCfg.changed.lrw = true); break;
 8012d54:	2303      	movs	r3, #3
 8012d56:	7811      	ldrb	r1, [r2, #0]

    /* rw-- 25:  uint8_t  Send LoRa Message on humidity lower threshold */
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD) {
      DBG_PRINTF("NFC <RX sensor_humidity_lower_threshold 0x%02x\n", val_int);
      DEVCFG_SET(DevCfg.hdc2080_threshold, val_int) && (DevCfg.changed.hdc2080 = true);
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 8012d58:	4399      	bics	r1, r3
 8012d5a:	430b      	orrs	r3, r1
 8012d5c:	e0c6      	b.n	8012eec <PBDecodeMsg+0x2c0>
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8012d5e:	9b01      	ldr	r3, [sp, #4]
 8012d60:	9a00      	ldr	r2, [sp, #0]
 8012d62:	1a99      	subs	r1, r3, r2
 8012d64:	3901      	subs	r1, #1
 8012d66:	1e4b      	subs	r3, r1, #1
 8012d68:	4199      	sbcs	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8012d6a:	9b03      	ldr	r3, [sp, #12]
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8012d6c:	3107      	adds	r1, #7
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8012d6e:	1898      	adds	r0, r3, r2
 8012d70:	aa08      	add	r2, sp, #32
 8012d72:	f7ff fed5 	bl	8012b20 <PBDecodeVarint>
      if(!val_rawbytes) break;
 8012d76:	2800      	cmp	r0, #0
 8012d78:	d144      	bne.n	8012e04 <PBDecodeMsg+0x1d8>
      debug_msg = ", Ill-formed value\n";
 8012d7a:	4bb4      	ldr	r3, [pc, #720]	; (801304c <PBDecodeMsg+0x420>)
    pos += val_rawbytes;
  }

abort:
#ifdef STX
  DEVCFG_SET(DevCfg.useSensor.bma400,  use_bma400)  && (DevCfg.changed.bma400  = true);
 8012d7c:	49b2      	ldr	r1, [pc, #712]	; (8013048 <PBDecodeMsg+0x41c>)
 8012d7e:	9d05      	ldr	r5, [sp, #20]
 8012d80:	0008      	movs	r0, r1
 8012d82:	306c      	adds	r0, #108	; 0x6c
 8012d84:	7802      	ldrb	r2, [r0, #0]
 8012d86:	07d4      	lsls	r4, r2, #31
 8012d88:	0fe4      	lsrs	r4, r4, #31
 8012d8a:	42ac      	cmp	r4, r5
 8012d8c:	d008      	beq.n	8012da0 <PBDecodeMsg+0x174>
 8012d8e:	2401      	movs	r4, #1
 8012d90:	43a2      	bics	r2, r4
 8012d92:	432a      	orrs	r2, r5
 8012d94:	7002      	strb	r2, [r0, #0]
 8012d96:	2205      	movs	r2, #5
 8012d98:	7808      	ldrb	r0, [r1, #0]
 8012d9a:	4390      	bics	r0, r2
 8012d9c:	4302      	orrs	r2, r0
 8012d9e:	700a      	strb	r2, [r1, #0]
  DEVCFG_SET(DevCfg.useSensor.sfh7776, use_sfh7776) && (DevCfg.changed.sfh7776 = true);
 8012da0:	48a9      	ldr	r0, [pc, #676]	; (8013048 <PBDecodeMsg+0x41c>)
 8012da2:	9d04      	ldr	r5, [sp, #16]
 8012da4:	0004      	movs	r4, r0
 8012da6:	346c      	adds	r4, #108	; 0x6c
 8012da8:	7821      	ldrb	r1, [r4, #0]
 8012daa:	078a      	lsls	r2, r1, #30
 8012dac:	0fd2      	lsrs	r2, r2, #31
 8012dae:	42aa      	cmp	r2, r5
 8012db0:	d009      	beq.n	8012dc6 <PBDecodeMsg+0x19a>
 8012db2:	006a      	lsls	r2, r5, #1
 8012db4:	2502      	movs	r5, #2
 8012db6:	43a9      	bics	r1, r5
 8012db8:	430a      	orrs	r2, r1
 8012dba:	7022      	strb	r2, [r4, #0]
 8012dbc:	2211      	movs	r2, #17
 8012dbe:	7801      	ldrb	r1, [r0, #0]
 8012dc0:	4391      	bics	r1, r2
 8012dc2:	430a      	orrs	r2, r1
 8012dc4:	7002      	strb	r2, [r0, #0]
  DEVCFG_SET(DevCfg.useSensor.hdc2080, use_hdc2080) && (DevCfg.changed.hdc2080 = true);
 8012dc6:	49a0      	ldr	r1, [pc, #640]	; (8013048 <PBDecodeMsg+0x41c>)
 8012dc8:	9d02      	ldr	r5, [sp, #8]
 8012dca:	0008      	movs	r0, r1
 8012dcc:	306c      	adds	r0, #108	; 0x6c
 8012dce:	7802      	ldrb	r2, [r0, #0]
 8012dd0:	0754      	lsls	r4, r2, #29
 8012dd2:	0fe4      	lsrs	r4, r4, #31
 8012dd4:	42ac      	cmp	r4, r5
 8012dd6:	d009      	beq.n	8012dec <PBDecodeMsg+0x1c0>
 8012dd8:	00ac      	lsls	r4, r5, #2
 8012dda:	2504      	movs	r5, #4
 8012ddc:	43aa      	bics	r2, r5
 8012dde:	4322      	orrs	r2, r4
 8012de0:	7002      	strb	r2, [r0, #0]
 8012de2:	2209      	movs	r2, #9
 8012de4:	7808      	ldrb	r0, [r1, #0]
 8012de6:	4390      	bics	r0, r2
 8012de8:	4302      	orrs	r2, r0
 8012dea:	700a      	strb	r2, [r1, #0]
#endif

  if(debug_msg) {
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d007      	beq.n	8012e00 <PBDecodeMsg+0x1d4>
    PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, debug_msg);
 8012df0:	9a01      	ldr	r2, [sp, #4]
 8012df2:	9903      	ldr	r1, [sp, #12]
 8012df4:	1bd2      	subs	r2, r2, r7
 8012df6:	4896      	ldr	r0, [pc, #600]	; (8013050 <PBDecodeMsg+0x424>)
 8012df8:	b292      	uxth	r2, r2
 8012dfa:	19c9      	adds	r1, r1, r7
 8012dfc:	f7ff fd5a 	bl	80128b4 <PrintBuffer>
  }
  return;
}
 8012e00:	b017      	add	sp, #92	; 0x5c
 8012e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8012e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e06:	9c08      	ldr	r4, [sp, #32]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1b6      	bne.n	8012d7a <PBDecodeMsg+0x14e>
 8012e0c:	2cfa      	cmp	r4, #250	; 0xfa
 8012e0e:	d8b4      	bhi.n	8012d7a <PBDecodeMsg+0x14e>
      pos += val_rawbytes;
 8012e10:	9b00      	ldr	r3, [sp, #0]
 8012e12:	1818      	adds	r0, r3, r0
 8012e14:	b2c3      	uxtb	r3, r0
 8012e16:	9300      	str	r3, [sp, #0]
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8012e18:	9a00      	ldr	r2, [sp, #0]
 8012e1a:	9b01      	ldr	r3, [sp, #4]
 8012e1c:	1a9b      	subs	r3, r3, r2
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	429c      	cmp	r4, r3
 8012e22:	d8aa      	bhi.n	8012d7a <PBDecodeMsg+0x14e>
 8012e24:	b2e4      	uxtb	r4, r4
 8012e26:	e76f      	b.n	8012d08 <PBDecodeMsg+0xdc>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8012e28:	9a00      	ldr	r2, [sp, #0]
 8012e2a:	9b03      	ldr	r3, [sp, #12]
 8012e2c:	a808      	add	r0, sp, #32
 8012e2e:	1899      	adds	r1, r3, r2
 8012e30:	2204      	movs	r2, #4
 8012e32:	f003 f8db 	bl	8015fec <memcpy>
      val_rawbytes = 4;
 8012e36:	2404      	movs	r4, #4
 8012e38:	e771      	b.n	8012d1e <PBDecodeMsg+0xf2>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_EUI) {
 8012e3a:	2b31      	cmp	r3, #49	; 0x31
 8012e3c:	d126      	bne.n	8012e8c <PBDecodeMsg+0x260>
      PrintBuffer("NFC <RX lora_dev_eui ", &val_int, sizeof val_int, "\n");
 8012e3e:	2208      	movs	r2, #8
 8012e40:	4b84      	ldr	r3, [pc, #528]	; (8013054 <PBDecodeMsg+0x428>)
 8012e42:	4885      	ldr	r0, [pc, #532]	; (8013058 <PBDecodeMsg+0x42c>)
 8012e44:	a908      	add	r1, sp, #32
 8012e46:	f7ff fd35 	bl	80128b4 <PrintBuffer>
      b64(deveui, val_int);
 8012e4a:	9a08      	ldr	r2, [sp, #32]
 8012e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e4e:	a80b      	add	r0, sp, #44	; 0x2c
 8012e50:	f7ff fd6b 	bl	801292a <b64>
      DEVCFG_MEMCPY(DevCfg.devEui, deveui, sizeof deveui) && (DevCfg.changed.lrw = true);
 8012e54:	4e81      	ldr	r6, [pc, #516]	; (801305c <PBDecodeMsg+0x430>)
      DEVCFG_MEMCPY(DevCfg.appEui, appeui, sizeof appeui) && (DevCfg.changed.lrw = true);
 8012e56:	2208      	movs	r2, #8
 8012e58:	0030      	movs	r0, r6
 8012e5a:	a90b      	add	r1, sp, #44	; 0x2c
 8012e5c:	f003 f8b8 	bl	8015fd0 <memcmp>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d00a      	beq.n	8012e7a <PBDecodeMsg+0x24e>
 8012e64:	2208      	movs	r2, #8
 8012e66:	0030      	movs	r0, r6
 8012e68:	a90b      	add	r1, sp, #44	; 0x2c
 8012e6a:	4d77      	ldr	r5, [pc, #476]	; (8013048 <PBDecodeMsg+0x41c>)
 8012e6c:	f003 f8be 	bl	8015fec <memcpy>
 8012e70:	2303      	movs	r3, #3
 8012e72:	782a      	ldrb	r2, [r5, #0]
 8012e74:	439a      	bics	r2, r3
 8012e76:	4313      	orrs	r3, r2
 8012e78:	702b      	strb	r3, [r5, #0]
    pos += val_rawbytes;
 8012e7a:	9b00      	ldr	r3, [sp, #0]
 8012e7c:	191c      	adds	r4, r3, r4
  while(pos != len) {
 8012e7e:	9b01      	ldr	r3, [sp, #4]
    pos += val_rawbytes;
 8012e80:	b2e4      	uxtb	r4, r4
  while(pos != len) {
 8012e82:	42a3      	cmp	r3, r4
 8012e84:	d000      	beq.n	8012e88 <PBDecodeMsg+0x25c>
 8012e86:	e728      	b.n	8012cda <PBDecodeMsg+0xae>
  const char *debug_msg = NULL;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	e777      	b.n	8012d7c <PBDecodeMsg+0x150>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_EUI) {
 8012e8c:	2b39      	cmp	r3, #57	; 0x39
 8012e8e:	d10c      	bne.n	8012eaa <PBDecodeMsg+0x27e>
      PrintBuffer("NFC <RX lora_app_eui ", &val_int, sizeof val_int, "\n");
 8012e90:	2208      	movs	r2, #8
 8012e92:	4b70      	ldr	r3, [pc, #448]	; (8013054 <PBDecodeMsg+0x428>)
 8012e94:	4872      	ldr	r0, [pc, #456]	; (8013060 <PBDecodeMsg+0x434>)
 8012e96:	a908      	add	r1, sp, #32
 8012e98:	f7ff fd0c 	bl	80128b4 <PrintBuffer>
      b64(appeui, val_int);
 8012e9c:	9a08      	ldr	r2, [sp, #32]
 8012e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea0:	a80b      	add	r0, sp, #44	; 0x2c
 8012ea2:	f7ff fd42 	bl	801292a <b64>
      DEVCFG_MEMCPY(DevCfg.appEui, appeui, sizeof appeui) && (DevCfg.changed.lrw = true);
 8012ea6:	4e6f      	ldr	r6, [pc, #444]	; (8013064 <PBDecodeMsg+0x438>)
 8012ea8:	e7d5      	b.n	8012e56 <PBDecodeMsg+0x22a>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_KEY && val_rawbytes == 16) {
 8012eaa:	2b42      	cmp	r3, #66	; 0x42
 8012eac:	d120      	bne.n	8012ef0 <PBDecodeMsg+0x2c4>
 8012eae:	2c10      	cmp	r4, #16
 8012eb0:	d000      	beq.n	8012eb4 <PBDecodeMsg+0x288>
 8012eb2:	e2c0      	b.n	8013436 <PBDecodeMsg+0x80a>
      PrintBuffer("NFC <RX lora_app_key ", msg + pos, val_rawbytes, "\n");
 8012eb4:	9b03      	ldr	r3, [sp, #12]
 8012eb6:	9a00      	ldr	r2, [sp, #0]
 8012eb8:	486b      	ldr	r0, [pc, #428]	; (8013068 <PBDecodeMsg+0x43c>)
 8012eba:	189d      	adds	r5, r3, r2
 8012ebc:	0029      	movs	r1, r5
 8012ebe:	0022      	movs	r2, r4
 8012ec0:	4b64      	ldr	r3, [pc, #400]	; (8013054 <PBDecodeMsg+0x428>)
 8012ec2:	f7ff fcf7 	bl	80128b4 <PrintBuffer>
      DEVCFG_MEMCPY(DevCfg.appKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012ec6:	4e69      	ldr	r6, [pc, #420]	; (801306c <PBDecodeMsg+0x440>)
      DEVCFG_MEMCPY(DevCfg.appSKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012ec8:	0022      	movs	r2, r4
 8012eca:	0029      	movs	r1, r5
 8012ecc:	0030      	movs	r0, r6
 8012ece:	f003 f87f 	bl	8015fd0 <memcmp>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d0d1      	beq.n	8012e7a <PBDecodeMsg+0x24e>
 8012ed6:	0022      	movs	r2, r4
 8012ed8:	0029      	movs	r1, r5
 8012eda:	0030      	movs	r0, r6
 8012edc:	f003 f886 	bl	8015fec <memcpy>
 8012ee0:	4b59      	ldr	r3, [pc, #356]	; (8013048 <PBDecodeMsg+0x41c>)
 8012ee2:	781a      	ldrb	r2, [r3, #0]
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	439a      	bics	r2, r3
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	4a57      	ldr	r2, [pc, #348]	; (8013048 <PBDecodeMsg+0x41c>)
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 8012eec:	7013      	strb	r3, [r2, #0]
 8012eee:	e7c4      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_ADDR) {
 8012ef0:	2b4d      	cmp	r3, #77	; 0x4d
 8012ef2:	d115      	bne.n	8012f20 <PBDecodeMsg+0x2f4>
      DBG_PRINTF("NFC <RX lora_dev_addr 0x%08x\n", val_int);
 8012ef4:	9a08      	ldr	r2, [sp, #32]
 8012ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ef8:	495d      	ldr	r1, [pc, #372]	; (8013070 <PBDecodeMsg+0x444>)
 8012efa:	2000      	movs	r0, #0
 8012efc:	f7f9 f84b 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.devAddr, val_int) && (DevCfg.changed.lrw = true);
 8012f00:	4b51      	ldr	r3, [pc, #324]	; (8013048 <PBDecodeMsg+0x41c>)
 8012f02:	9a08      	ldr	r2, [sp, #32]
 8012f04:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8012f06:	2000      	movs	r0, #0
 8012f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f0a:	4295      	cmp	r5, r2
 8012f0c:	d101      	bne.n	8012f12 <PBDecodeMsg+0x2e6>
 8012f0e:	4288      	cmp	r0, r1
 8012f10:	d0b3      	beq.n	8012e7a <PBDecodeMsg+0x24e>
 8012f12:	629a      	str	r2, [r3, #40]	; 0x28
      DEVCFG_SET(DevCfg.bw, val_int) && (DevCfg.changed.lrw = true);
 8012f14:	2203      	movs	r2, #3
 8012f16:	7819      	ldrb	r1, [r3, #0]
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 8012f18:	4391      	bics	r1, r2
 8012f1a:	430a      	orrs	r2, r1
 8012f1c:	701a      	strb	r2, [r3, #0]
 8012f1e:	e7ac      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_NET_SESSION_KEY && val_rawbytes == 16) {
 8012f20:	2b52      	cmp	r3, #82	; 0x52
 8012f22:	d10d      	bne.n	8012f40 <PBDecodeMsg+0x314>
 8012f24:	2c10      	cmp	r4, #16
 8012f26:	d000      	beq.n	8012f2a <PBDecodeMsg+0x2fe>
 8012f28:	e285      	b.n	8013436 <PBDecodeMsg+0x80a>
      PrintBuffer("NFC <RX lora_mac_net_session_key ", msg + pos, val_rawbytes, "\n");
 8012f2a:	9b03      	ldr	r3, [sp, #12]
 8012f2c:	9a00      	ldr	r2, [sp, #0]
 8012f2e:	4851      	ldr	r0, [pc, #324]	; (8013074 <PBDecodeMsg+0x448>)
 8012f30:	189d      	adds	r5, r3, r2
 8012f32:	0029      	movs	r1, r5
 8012f34:	0022      	movs	r2, r4
 8012f36:	4b47      	ldr	r3, [pc, #284]	; (8013054 <PBDecodeMsg+0x428>)
 8012f38:	f7ff fcbc 	bl	80128b4 <PrintBuffer>
      DEVCFG_MEMCPY(DevCfg.nwkSKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012f3c:	4e4e      	ldr	r6, [pc, #312]	; (8013078 <PBDecodeMsg+0x44c>)
 8012f3e:	e7c3      	b.n	8012ec8 <PBDecodeMsg+0x29c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_APP_SESSION_KEY && val_rawbytes == 16) {
 8012f40:	2b5a      	cmp	r3, #90	; 0x5a
 8012f42:	d10d      	bne.n	8012f60 <PBDecodeMsg+0x334>
 8012f44:	2c10      	cmp	r4, #16
 8012f46:	d000      	beq.n	8012f4a <PBDecodeMsg+0x31e>
 8012f48:	e275      	b.n	8013436 <PBDecodeMsg+0x80a>
      PrintBuffer("NFC <RX lora_mac_app_session_key ", msg + pos, val_rawbytes, "\n");
 8012f4a:	9b03      	ldr	r3, [sp, #12]
 8012f4c:	9a00      	ldr	r2, [sp, #0]
 8012f4e:	484b      	ldr	r0, [pc, #300]	; (801307c <PBDecodeMsg+0x450>)
 8012f50:	189d      	adds	r5, r3, r2
 8012f52:	0029      	movs	r1, r5
 8012f54:	0022      	movs	r2, r4
 8012f56:	4b3f      	ldr	r3, [pc, #252]	; (8013054 <PBDecodeMsg+0x428>)
 8012f58:	f7ff fcac 	bl	80128b4 <PrintBuffer>
      DEVCFG_MEMCPY(DevCfg.appSKey, msg + pos, val_rawbytes) && (DevCfg.changed.lrw = true);
 8012f5c:	4e48      	ldr	r6, [pc, #288]	; (8013080 <PBDecodeMsg+0x454>)
 8012f5e:	e7b3      	b.n	8012ec8 <PBDecodeMsg+0x29c>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_JOINED) {
 8012f60:	2b60      	cmp	r3, #96	; 0x60
 8012f62:	d115      	bne.n	8012f90 <PBDecodeMsg+0x364>
      DBG_PRINTF("NFC <RX lora_joined 0x%02x\n", val_int);
 8012f64:	9a08      	ldr	r2, [sp, #32]
 8012f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f68:	2000      	movs	r0, #0
 8012f6a:	4946      	ldr	r1, [pc, #280]	; (8013084 <PBDecodeMsg+0x458>)
 8012f6c:	f7f9 f813 	bl	800bf96 <SEGGER_RTT_printf>
      if(!val_int) {
 8012f70:	9b08      	ldr	r3, [sp, #32]
 8012f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f74:	4313      	orrs	r3, r2
 8012f76:	d000      	beq.n	8012f7a <PBDecodeMsg+0x34e>
 8012f78:	e77f      	b.n	8012e7a <PBDecodeMsg+0x24e>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	a906      	add	r1, sp, #24
 8012f7e:	770a      	strb	r2, [r1, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012f80:	000a      	movs	r2, r1
 8012f82:	2120      	movs	r1, #32
        LoRaMacMibSetRequestConfirm(&mibReq);
 8012f84:	a80d      	add	r0, sp, #52	; 0x34
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012f86:	1852      	adds	r2, r2, r1
 8012f88:	7013      	strb	r3, [r2, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8012f8a:	f7f4 faf3 	bl	8007574 <LoRaMacMibSetRequestConfirm>
 8012f8e:	e774      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_FP) {
 8012f90:	2b68      	cmp	r3, #104	; 0x68
 8012f92:	d127      	bne.n	8012fe4 <PBDecodeMsg+0x3b8>
      DBG_PRINTF("NFC <RX lora_fp 0x%02x\n", val_int);
 8012f94:	9a08      	ldr	r2, [sp, #32]
 8012f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f98:	2000      	movs	r0, #0
 8012f9a:	493b      	ldr	r1, [pc, #236]	; (8013088 <PBDecodeMsg+0x45c>)
 8012f9c:	f7f8 fffb 	bl	800bf96 <SEGGER_RTT_printf>
      switch(val_int) {
 8012fa0:	9a08      	ldr	r2, [sp, #32]
 8012fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fa4:	2a01      	cmp	r2, #1
 8012fa6:	d10b      	bne.n	8012fc0 <PBDecodeMsg+0x394>
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d116      	bne.n	8012fda <PBDecodeMsg+0x3ae>
      case PBENUM_FP_EU868: DEVCFG_SET(DevCfg.region, LORAMAC_REGION_EU868) && (DevCfg.changed.lrw = true); break;
 8012fac:	4a26      	ldr	r2, [pc, #152]	; (8013048 <PBDecodeMsg+0x41c>)
 8012fae:	0013      	movs	r3, r2
 8012fb0:	334c      	adds	r3, #76	; 0x4c
 8012fb2:	7819      	ldrb	r1, [r3, #0]
 8012fb4:	2905      	cmp	r1, #5
 8012fb6:	d100      	bne.n	8012fba <PBDecodeMsg+0x38e>
 8012fb8:	e75f      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8012fba:	2105      	movs	r1, #5
 8012fbc:	7019      	strb	r1, [r3, #0]
 8012fbe:	e6c9      	b.n	8012d54 <PBDecodeMsg+0x128>
      switch(val_int) {
 8012fc0:	2a02      	cmp	r2, #2
 8012fc2:	d10a      	bne.n	8012fda <PBDecodeMsg+0x3ae>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d108      	bne.n	8012fda <PBDecodeMsg+0x3ae>
      case PBENUM_FP_US915: DEVCFG_SET(DevCfg.region, LORAMAC_REGION_US915) && (DevCfg.changed.lrw = true); break;
 8012fc8:	4a1f      	ldr	r2, [pc, #124]	; (8013048 <PBDecodeMsg+0x41c>)
 8012fca:	0013      	movs	r3, r2
 8012fcc:	334c      	adds	r3, #76	; 0x4c
 8012fce:	7819      	ldrb	r1, [r3, #0]
 8012fd0:	2908      	cmp	r1, #8
 8012fd2:	d100      	bne.n	8012fd6 <PBDecodeMsg+0x3aa>
 8012fd4:	e751      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8012fd6:	2108      	movs	r1, #8
 8012fd8:	e7f0      	b.n	8012fbc <PBDecodeMsg+0x390>
      default: DEBUG_MSG("NFC Bad Value!\n");
 8012fda:	492c      	ldr	r1, [pc, #176]	; (801308c <PBDecodeMsg+0x460>)
 8012fdc:	2000      	movs	r0, #0
 8012fde:	f7f8 fe07 	bl	800bbf0 <SEGGER_RTT_WriteString>
 8012fe2:	e74a      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_PORT) {
 8012fe4:	2b70      	cmp	r3, #112	; 0x70
 8012fe6:	d115      	bne.n	8013014 <PBDecodeMsg+0x3e8>
      DBG_PRINTF("NFC <RX lora_port 0x%02x\n", val_int);
 8012fe8:	9a08      	ldr	r2, [sp, #32]
 8012fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fec:	4928      	ldr	r1, [pc, #160]	; (8013090 <PBDecodeMsg+0x464>)
 8012fee:	2000      	movs	r0, #0
 8012ff0:	f7f8 ffd1 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.txPort, val_int) && (DevCfg.changed.lrw = true);
 8012ff4:	4b14      	ldr	r3, [pc, #80]	; (8013048 <PBDecodeMsg+0x41c>)
 8012ff6:	9a08      	ldr	r2, [sp, #32]
 8012ff8:	0018      	movs	r0, r3
 8012ffa:	304d      	adds	r0, #77	; 0x4d
 8012ffc:	7805      	ldrb	r5, [r0, #0]
 8012ffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013000:	2000      	movs	r0, #0
 8013002:	4295      	cmp	r5, r2
 8013004:	d102      	bne.n	801300c <PBDecodeMsg+0x3e0>
 8013006:	4288      	cmp	r0, r1
 8013008:	d100      	bne.n	801300c <PBDecodeMsg+0x3e0>
 801300a:	e736      	b.n	8012e7a <PBDecodeMsg+0x24e>
 801300c:	0019      	movs	r1, r3
 801300e:	314d      	adds	r1, #77	; 0x4d
      DEVCFG_SET(DevCfg.bw, val_int) && (DevCfg.changed.lrw = true);
 8013010:	700a      	strb	r2, [r1, #0]
 8013012:	e77f      	b.n	8012f14 <PBDecodeMsg+0x2e8>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_TXP) {
 8013014:	2b78      	cmp	r3, #120	; 0x78
 8013016:	d13f      	bne.n	8013098 <PBDecodeMsg+0x46c>
      DBG_PRINTF("NFC <RX lora_txp 0x%02x\n", val_int);
 8013018:	9a08      	ldr	r2, [sp, #32]
 801301a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801301c:	491d      	ldr	r1, [pc, #116]	; (8013094 <PBDecodeMsg+0x468>)
 801301e:	2000      	movs	r0, #0
 8013020:	f7f8 ffb9 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.txPower, val_int) && (DevCfg.changed.lrw = true);
 8013024:	4b08      	ldr	r3, [pc, #32]	; (8013048 <PBDecodeMsg+0x41c>)
 8013026:	9a08      	ldr	r2, [sp, #32]
 8013028:	0018      	movs	r0, r3
 801302a:	304e      	adds	r0, #78	; 0x4e
 801302c:	7805      	ldrb	r5, [r0, #0]
 801302e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013030:	2000      	movs	r0, #0
 8013032:	4295      	cmp	r5, r2
 8013034:	d102      	bne.n	801303c <PBDecodeMsg+0x410>
 8013036:	4288      	cmp	r0, r1
 8013038:	d100      	bne.n	801303c <PBDecodeMsg+0x410>
 801303a:	e71e      	b.n	8012e7a <PBDecodeMsg+0x24e>
 801303c:	0019      	movs	r1, r3
 801303e:	314e      	adds	r1, #78	; 0x4e
 8013040:	e7e6      	b.n	8013010 <PBDecodeMsg+0x3e4>
 8013042:	46c0      	nop			; (mov r8, r8)
 8013044:	0801a5db 	.word	0x0801a5db
 8013048:	200000e0 	.word	0x200000e0
 801304c:	080198fb 	.word	0x080198fb
 8013050:	0801a995 	.word	0x0801a995
 8013054:	080191ba 	.word	0x080191ba
 8013058:	0801a5f5 	.word	0x0801a5f5
 801305c:	200000e5 	.word	0x200000e5
 8013060:	0801a60b 	.word	0x0801a60b
 8013064:	200000ed 	.word	0x200000ed
 8013068:	0801a621 	.word	0x0801a621
 801306c:	200000f5 	.word	0x200000f5
 8013070:	0801a637 	.word	0x0801a637
 8013074:	0801a655 	.word	0x0801a655
 8013078:	2000010c 	.word	0x2000010c
 801307c:	0801a677 	.word	0x0801a677
 8013080:	2000011c 	.word	0x2000011c
 8013084:	0801a699 	.word	0x0801a699
 8013088:	0801a6b5 	.word	0x0801a6b5
 801308c:	0801a6cd 	.word	0x0801a6cd
 8013090:	0801a6dd 	.word	0x0801a6dd
 8013094:	0801a6f7 	.word	0x0801a6f7
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_SF) {
 8013098:	2b80      	cmp	r3, #128	; 0x80
 801309a:	d114      	bne.n	80130c6 <PBDecodeMsg+0x49a>
      DBG_PRINTF("NFC <RX lora_sf 0x%02x\n", val_int);
 801309c:	9a08      	ldr	r2, [sp, #32]
 801309e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130a0:	49bd      	ldr	r1, [pc, #756]	; (8013398 <PBDecodeMsg+0x76c>)
 80130a2:	2000      	movs	r0, #0
 80130a4:	f7f8 ff77 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sf, val_int) && (DevCfg.changed.lrw = true);
 80130a8:	4bbc      	ldr	r3, [pc, #752]	; (801339c <PBDecodeMsg+0x770>)
 80130aa:	9a08      	ldr	r2, [sp, #32]
 80130ac:	0018      	movs	r0, r3
 80130ae:	304f      	adds	r0, #79	; 0x4f
 80130b0:	7805      	ldrb	r5, [r0, #0]
 80130b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130b4:	2000      	movs	r0, #0
 80130b6:	4295      	cmp	r5, r2
 80130b8:	d102      	bne.n	80130c0 <PBDecodeMsg+0x494>
 80130ba:	4288      	cmp	r0, r1
 80130bc:	d100      	bne.n	80130c0 <PBDecodeMsg+0x494>
 80130be:	e6dc      	b.n	8012e7a <PBDecodeMsg+0x24e>
 80130c0:	0019      	movs	r1, r3
 80130c2:	314f      	adds	r1, #79	; 0x4f
 80130c4:	e7a4      	b.n	8013010 <PBDecodeMsg+0x3e4>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_BW) {
 80130c6:	2b88      	cmp	r3, #136	; 0x88
 80130c8:	d114      	bne.n	80130f4 <PBDecodeMsg+0x4c8>
      DBG_PRINTF("NFC <RX lora_bw 0x%02x\n", val_int);
 80130ca:	9a08      	ldr	r2, [sp, #32]
 80130cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ce:	49b4      	ldr	r1, [pc, #720]	; (80133a0 <PBDecodeMsg+0x774>)
 80130d0:	2000      	movs	r0, #0
 80130d2:	f7f8 ff60 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.bw, val_int) && (DevCfg.changed.lrw = true);
 80130d6:	4bb1      	ldr	r3, [pc, #708]	; (801339c <PBDecodeMsg+0x770>)
 80130d8:	9a08      	ldr	r2, [sp, #32]
 80130da:	0018      	movs	r0, r3
 80130dc:	3050      	adds	r0, #80	; 0x50
 80130de:	7805      	ldrb	r5, [r0, #0]
 80130e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130e2:	2000      	movs	r0, #0
 80130e4:	4295      	cmp	r5, r2
 80130e6:	d102      	bne.n	80130ee <PBDecodeMsg+0x4c2>
 80130e8:	4288      	cmp	r0, r1
 80130ea:	d100      	bne.n	80130ee <PBDecodeMsg+0x4c2>
 80130ec:	e6c5      	b.n	8012e7a <PBDecodeMsg+0x24e>
 80130ee:	0019      	movs	r1, r3
 80130f0:	3150      	adds	r1, #80	; 0x50
 80130f2:	e78d      	b.n	8013010 <PBDecodeMsg+0x3e4>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_CONFIRMED_MESSAGES) {
 80130f4:	2b90      	cmp	r3, #144	; 0x90
 80130f6:	d117      	bne.n	8013128 <PBDecodeMsg+0x4fc>
      DBG_PRINTF("NFC <RX lora_confirmed_messages 0x%02x\n", val_int);
 80130f8:	9a08      	ldr	r2, [sp, #32]
 80130fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130fc:	49a9      	ldr	r1, [pc, #676]	; (80133a4 <PBDecodeMsg+0x778>)
 80130fe:	2000      	movs	r0, #0
 8013100:	f7f8 ff49 	bl	800bf96 <SEGGER_RTT_printf>
      val_int = !!val_int;
 8013104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013106:	9b08      	ldr	r3, [sp, #32]
 8013108:	4313      	orrs	r3, r2
 801310a:	1e5a      	subs	r2, r3, #1
 801310c:	4193      	sbcs	r3, r2
 801310e:	2200      	movs	r2, #0
 8013110:	9209      	str	r2, [sp, #36]	; 0x24
      DEVCFG_SET(DevCfg.confirmedMsgs, val_int) && (DevCfg.changed.lrw = true);
 8013112:	4aa2      	ldr	r2, [pc, #648]	; (801339c <PBDecodeMsg+0x770>)
      val_int = !!val_int;
 8013114:	b2db      	uxtb	r3, r3
      DEVCFG_SET(DevCfg.confirmedMsgs, val_int) && (DevCfg.changed.lrw = true);
 8013116:	0011      	movs	r1, r2
      val_int = !!val_int;
 8013118:	9308      	str	r3, [sp, #32]
      DEVCFG_SET(DevCfg.confirmedMsgs, val_int) && (DevCfg.changed.lrw = true);
 801311a:	3151      	adds	r1, #81	; 0x51
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 801311c:	7808      	ldrb	r0, [r1, #0]
 801311e:	4283      	cmp	r3, r0
 8013120:	d100      	bne.n	8013124 <PBDecodeMsg+0x4f8>
 8013122:	e6aa      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8013124:	700b      	strb	r3, [r1, #0]
 8013126:	e615      	b.n	8012d54 <PBDecodeMsg+0x128>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_ADAPTIVE_DATA_RATE) {
 8013128:	2b98      	cmp	r3, #152	; 0x98
 801312a:	d112      	bne.n	8013152 <PBDecodeMsg+0x526>
      DBG_PRINTF("NFC <RX lora_adaptive_data_rate 0x%02x\n", val_int);
 801312c:	9a08      	ldr	r2, [sp, #32]
 801312e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013130:	499d      	ldr	r1, [pc, #628]	; (80133a8 <PBDecodeMsg+0x77c>)
 8013132:	2000      	movs	r0, #0
 8013134:	f7f8 ff2f 	bl	800bf96 <SEGGER_RTT_printf>
      val_int = !!val_int;
 8013138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801313a:	9b08      	ldr	r3, [sp, #32]
 801313c:	4313      	orrs	r3, r2
 801313e:	1e5a      	subs	r2, r3, #1
 8013140:	4193      	sbcs	r3, r2
 8013142:	2200      	movs	r2, #0
 8013144:	9209      	str	r2, [sp, #36]	; 0x24
      DEVCFG_SET(DevCfg.adaptiveDatarate, val_int) && (DevCfg.changed.lrw = true);
 8013146:	4a95      	ldr	r2, [pc, #596]	; (801339c <PBDecodeMsg+0x770>)
      val_int = !!val_int;
 8013148:	b2db      	uxtb	r3, r3
      DEVCFG_SET(DevCfg.adaptiveDatarate, val_int) && (DevCfg.changed.lrw = true);
 801314a:	0011      	movs	r1, r2
      val_int = !!val_int;
 801314c:	9308      	str	r3, [sp, #32]
      DEVCFG_SET(DevCfg.adaptiveDatarate, val_int) && (DevCfg.changed.lrw = true);
 801314e:	3152      	adds	r1, #82	; 0x52
 8013150:	e7e4      	b.n	801311c <PBDecodeMsg+0x4f0>
    } else if((tagnr << 3 | tagtype) == PBMSG_TX_LORA_RESPECT_DUTY_CYCLE) {
 8013152:	2ba0      	cmp	r3, #160	; 0xa0
 8013154:	d112      	bne.n	801317c <PBDecodeMsg+0x550>
      DBG_PRINTF("NFC <RX lora_respect_duty_cycle 0x%02x\n", val_int);
 8013156:	9a08      	ldr	r2, [sp, #32]
 8013158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801315a:	4994      	ldr	r1, [pc, #592]	; (80133ac <PBDecodeMsg+0x780>)
 801315c:	2000      	movs	r0, #0
 801315e:	f7f8 ff1a 	bl	800bf96 <SEGGER_RTT_printf>
      val_int = !!val_int;
 8013162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013164:	9b08      	ldr	r3, [sp, #32]
 8013166:	4313      	orrs	r3, r2
 8013168:	1e5a      	subs	r2, r3, #1
 801316a:	4193      	sbcs	r3, r2
 801316c:	2200      	movs	r2, #0
 801316e:	9209      	str	r2, [sp, #36]	; 0x24
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 8013170:	4a8a      	ldr	r2, [pc, #552]	; (801339c <PBDecodeMsg+0x770>)
      val_int = !!val_int;
 8013172:	b2db      	uxtb	r3, r3
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 8013174:	0011      	movs	r1, r2
      val_int = !!val_int;
 8013176:	9308      	str	r3, [sp, #32]
      DEVCFG_SET(DevCfg.dutyCycle, val_int) && (DevCfg.changed.lrw = true);
 8013178:	3153      	adds	r1, #83	; 0x53
 801317a:	e7cf      	b.n	801311c <PBDecodeMsg+0x4f0>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TIMEBASE) {
 801317c:	2ba8      	cmp	r3, #168	; 0xa8
 801317e:	d113      	bne.n	80131a8 <PBDecodeMsg+0x57c>
      DBG_PRINTF("NFC <RX sensor_timebase 0x%02x\n", val_int);
 8013180:	9a08      	ldr	r2, [sp, #32]
 8013182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013184:	498a      	ldr	r1, [pc, #552]	; (80133b0 <PBDecodeMsg+0x784>)
 8013186:	2000      	movs	r0, #0
 8013188:	f7f8 ff05 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sendInterval, val_int) && (DevCfg.changed.resched = true);
 801318c:	4b83      	ldr	r3, [pc, #524]	; (801339c <PBDecodeMsg+0x770>)
 801318e:	9a08      	ldr	r2, [sp, #32]
 8013190:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8013192:	2000      	movs	r0, #0
 8013194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013196:	4295      	cmp	r5, r2
 8013198:	d102      	bne.n	80131a0 <PBDecodeMsg+0x574>
 801319a:	4288      	cmp	r0, r1
 801319c:	d100      	bne.n	80131a0 <PBDecodeMsg+0x574>
 801319e:	e66c      	b.n	8012e7a <PBDecodeMsg+0x24e>
 80131a0:	655a      	str	r2, [r3, #84]	; 0x54
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 80131a2:	2221      	movs	r2, #33	; 0x21
 80131a4:	7819      	ldrb	r1, [r3, #0]
 80131a6:	e6b7      	b.n	8012f18 <PBDecodeMsg+0x2ec>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_TRIGGER) {
 80131a8:	2bb0      	cmp	r3, #176	; 0xb0
 80131aa:	d115      	bne.n	80131d8 <PBDecodeMsg+0x5ac>
      DBG_PRINTF("NFC <RX sensor_send_trigger 0x%02x\n", val_int);
 80131ac:	9a08      	ldr	r2, [sp, #32]
 80131ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131b0:	4980      	ldr	r1, [pc, #512]	; (80133b4 <PBDecodeMsg+0x788>)
 80131b2:	2000      	movs	r0, #0
 80131b4:	f7f8 feef 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sendTrigger, val_int) && (DevCfg.changed.resched = true);
 80131b8:	4b78      	ldr	r3, [pc, #480]	; (801339c <PBDecodeMsg+0x770>)
 80131ba:	9a08      	ldr	r2, [sp, #32]
 80131bc:	0018      	movs	r0, r3
 80131be:	3058      	adds	r0, #88	; 0x58
 80131c0:	7805      	ldrb	r5, [r0, #0]
 80131c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131c4:	2000      	movs	r0, #0
 80131c6:	4295      	cmp	r5, r2
 80131c8:	d102      	bne.n	80131d0 <PBDecodeMsg+0x5a4>
 80131ca:	4288      	cmp	r0, r1
 80131cc:	d100      	bne.n	80131d0 <PBDecodeMsg+0x5a4>
 80131ce:	e654      	b.n	8012e7a <PBDecodeMsg+0x24e>
 80131d0:	0019      	movs	r1, r3
 80131d2:	3158      	adds	r1, #88	; 0x58
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 80131d4:	700a      	strb	r2, [r1, #0]
 80131d6:	e7e4      	b.n	80131a2 <PBDecodeMsg+0x576>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_SEND_STRATEGY) {
 80131d8:	2bb8      	cmp	r3, #184	; 0xb8
 80131da:	d114      	bne.n	8013206 <PBDecodeMsg+0x5da>
      DBG_PRINTF("NFC <RX sensor_send_strategy 0x%02x\n", val_int);
 80131dc:	9a08      	ldr	r2, [sp, #32]
 80131de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131e0:	4975      	ldr	r1, [pc, #468]	; (80133b8 <PBDecodeMsg+0x78c>)
 80131e2:	2000      	movs	r0, #0
 80131e4:	f7f8 fed7 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sendStrategy, val_int) && (DevCfg.changed.resched = true);
 80131e8:	4b6c      	ldr	r3, [pc, #432]	; (801339c <PBDecodeMsg+0x770>)
 80131ea:	9a08      	ldr	r2, [sp, #32]
 80131ec:	0018      	movs	r0, r3
 80131ee:	3059      	adds	r0, #89	; 0x59
 80131f0:	7805      	ldrb	r5, [r0, #0]
 80131f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131f4:	2000      	movs	r0, #0
 80131f6:	4295      	cmp	r5, r2
 80131f8:	d102      	bne.n	8013200 <PBDecodeMsg+0x5d4>
 80131fa:	4288      	cmp	r0, r1
 80131fc:	d100      	bne.n	8013200 <PBDecodeMsg+0x5d4>
 80131fe:	e63c      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8013200:	0019      	movs	r1, r3
 8013202:	3159      	adds	r1, #89	; 0x59
 8013204:	e7e6      	b.n	80131d4 <PBDecodeMsg+0x5a8>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD) {
 8013206:	2bc0      	cmp	r3, #192	; 0xc0
 8013208:	d122      	bne.n	8013250 <PBDecodeMsg+0x624>
      DBG_PRINTF("NFC <RX sensor_humidity_upper_threshold 0x%02x\n", val_int);
 801320a:	9a08      	ldr	r2, [sp, #32]
 801320c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801320e:	496b      	ldr	r1, [pc, #428]	; (80133bc <PBDecodeMsg+0x790>)
 8013210:	2000      	movs	r0, #0
 8013212:	f7f8 fec0 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.hdc2080_threshold, val_int) && (DevCfg.changed.hdc2080 = true);
 8013216:	4b61      	ldr	r3, [pc, #388]	; (801339c <PBDecodeMsg+0x770>)
 8013218:	9a08      	ldr	r2, [sp, #32]
 801321a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801321c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801321e:	17cd      	asrs	r5, r1, #31
 8013220:	4291      	cmp	r1, r2
 8013222:	d101      	bne.n	8013228 <PBDecodeMsg+0x5fc>
 8013224:	4285      	cmp	r5, r0
 8013226:	d005      	beq.n	8013234 <PBDecodeMsg+0x608>
 8013228:	65da      	str	r2, [r3, #92]	; 0x5c
 801322a:	2209      	movs	r2, #9
 801322c:	7819      	ldrb	r1, [r3, #0]
 801322e:	4391      	bics	r1, r2
 8013230:	430a      	orrs	r2, r1
 8013232:	701a      	strb	r2, [r3, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_HIGH) && (DevCfg.changed.hdc2080 = true);
 8013234:	4a59      	ldr	r2, [pc, #356]	; (801339c <PBDecodeMsg+0x770>)
      use_hdc2080 = true;
 8013236:	2001      	movs	r0, #1
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_HIGH) && (DevCfg.changed.hdc2080 = true);
 8013238:	0013      	movs	r3, r2
 801323a:	335a      	adds	r3, #90	; 0x5a
 801323c:	7819      	ldrb	r1, [r3, #0]
      use_hdc2080 = true;
 801323e:	9002      	str	r0, [sp, #8]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_HIGH) && (DevCfg.changed.hdc2080 = true);
 8013240:	2903      	cmp	r1, #3
 8013242:	d100      	bne.n	8013246 <PBDecodeMsg+0x61a>
 8013244:	e619      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8013246:	2103      	movs	r1, #3
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 8013248:	7019      	strb	r1, [r3, #0]
 801324a:	2309      	movs	r3, #9
 801324c:	7811      	ldrb	r1, [r2, #0]
 801324e:	e583      	b.n	8012d58 <PBDecodeMsg+0x12c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD) {
 8013250:	2bc8      	cmp	r3, #200	; 0xc8
 8013252:	d11f      	bne.n	8013294 <PBDecodeMsg+0x668>
      DBG_PRINTF("NFC <RX sensor_humidity_lower_threshold 0x%02x\n", val_int);
 8013254:	9a08      	ldr	r2, [sp, #32]
 8013256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013258:	4959      	ldr	r1, [pc, #356]	; (80133c0 <PBDecodeMsg+0x794>)
 801325a:	2000      	movs	r0, #0
 801325c:	f7f8 fe9b 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.hdc2080_threshold, val_int) && (DevCfg.changed.hdc2080 = true);
 8013260:	4b4e      	ldr	r3, [pc, #312]	; (801339c <PBDecodeMsg+0x770>)
 8013262:	9a08      	ldr	r2, [sp, #32]
 8013264:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013266:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013268:	17cd      	asrs	r5, r1, #31
 801326a:	4291      	cmp	r1, r2
 801326c:	d101      	bne.n	8013272 <PBDecodeMsg+0x646>
 801326e:	4285      	cmp	r5, r0
 8013270:	d005      	beq.n	801327e <PBDecodeMsg+0x652>
 8013272:	65da      	str	r2, [r3, #92]	; 0x5c
 8013274:	2209      	movs	r2, #9
 8013276:	7819      	ldrb	r1, [r3, #0]
 8013278:	4391      	bics	r1, r2
 801327a:	430a      	orrs	r2, r1
 801327c:	701a      	strb	r2, [r3, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 801327e:	4a47      	ldr	r2, [pc, #284]	; (801339c <PBDecodeMsg+0x770>)
      use_hdc2080 = true;
 8013280:	2001      	movs	r0, #1
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 8013282:	0013      	movs	r3, r2
 8013284:	335a      	adds	r3, #90	; 0x5a
 8013286:	7819      	ldrb	r1, [r3, #0]
      use_hdc2080 = true;
 8013288:	9002      	str	r0, [sp, #8]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_HUMIDITY_LOW) && (DevCfg.changed.hdc2080 = true);
 801328a:	2902      	cmp	r1, #2
 801328c:	d100      	bne.n	8013290 <PBDecodeMsg+0x664>
 801328e:	e5f4      	b.n	8012e7a <PBDecodeMsg+0x24e>
 8013290:	2102      	movs	r1, #2
 8013292:	e7d9      	b.n	8013248 <PBDecodeMsg+0x61c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD) {
 8013294:	2bd0      	cmp	r3, #208	; 0xd0
 8013296:	d127      	bne.n	80132e8 <PBDecodeMsg+0x6bc>
      DBG_PRINTF("NFC <RX sensor_temperature_upper_threshold 0x%02x\n", val_int);
 8013298:	9a08      	ldr	r2, [sp, #32]
 801329a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801329c:	4949      	ldr	r1, [pc, #292]	; (80133c4 <PBDecodeMsg+0x798>)
 801329e:	2000      	movs	r0, #0
 80132a0:	f7f8 fe79 	bl	800bf96 <SEGGER_RTT_printf>
      uint64_t v = PBDecodeSInt(val_int);
 80132a4:	9808      	ldr	r0, [sp, #32]
 80132a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132a8:	f7ff fcb5 	bl	8012c16 <PBDecodeSInt>
      DEVCFG_SET(DevCfg.hdc2080_threshold, v) && (DevCfg.changed.hdc2080 = true);
 80132ac:	4b3b      	ldr	r3, [pc, #236]	; (801339c <PBDecodeMsg+0x770>)
 80132ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80132b0:	17d5      	asrs	r5, r2, #31
 80132b2:	4282      	cmp	r2, r0
 80132b4:	d101      	bne.n	80132ba <PBDecodeMsg+0x68e>
 80132b6:	428d      	cmp	r5, r1
 80132b8:	d005      	beq.n	80132c6 <PBDecodeMsg+0x69a>
 80132ba:	2209      	movs	r2, #9
 80132bc:	7819      	ldrb	r1, [r3, #0]
 80132be:	65d8      	str	r0, [r3, #92]	; 0x5c
 80132c0:	4391      	bics	r1, r2
 80132c2:	430a      	orrs	r2, r1
 80132c4:	701a      	strb	r2, [r3, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_HIGH) && (DevCfg.changed.hdc2080 = true);
 80132c6:	4a35      	ldr	r2, [pc, #212]	; (801339c <PBDecodeMsg+0x770>)
 80132c8:	2001      	movs	r0, #1
 80132ca:	0013      	movs	r3, r2
 80132cc:	335a      	adds	r3, #90	; 0x5a
 80132ce:	7819      	ldrb	r1, [r3, #0]
      use_hdc2080 = true;
 80132d0:	9102      	str	r1, [sp, #8]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_HIGH) && (DevCfg.changed.hdc2080 = true);
 80132d2:	4281      	cmp	r1, r0
 80132d4:	d100      	bne.n	80132d8 <PBDecodeMsg+0x6ac>
 80132d6:	e5d0      	b.n	8012e7a <PBDecodeMsg+0x24e>
 80132d8:	7018      	strb	r0, [r3, #0]
 80132da:	2309      	movs	r3, #9
 80132dc:	7811      	ldrb	r1, [r2, #0]
      use_hdc2080 = true;
 80132de:	9002      	str	r0, [sp, #8]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_HIGH) && (DevCfg.changed.hdc2080 = true);
 80132e0:	4399      	bics	r1, r3
 80132e2:	430b      	orrs	r3, r1
 80132e4:	7013      	strb	r3, [r2, #0]
 80132e6:	e5c8      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD) {
 80132e8:	2bd8      	cmp	r3, #216	; 0xd8
 80132ea:	d121      	bne.n	8013330 <PBDecodeMsg+0x704>
      DBG_PRINTF("NFC <RX sensor_temperature_lowe_thresholdr 0x%02x\n", val_int);
 80132ec:	9a08      	ldr	r2, [sp, #32]
 80132ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f0:	4935      	ldr	r1, [pc, #212]	; (80133c8 <PBDecodeMsg+0x79c>)
 80132f2:	2000      	movs	r0, #0
 80132f4:	f7f8 fe4f 	bl	800bf96 <SEGGER_RTT_printf>
      uint64_t v = PBDecodeSInt(val_int);
 80132f8:	9808      	ldr	r0, [sp, #32]
 80132fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132fc:	f7ff fc8b 	bl	8012c16 <PBDecodeSInt>
      DEVCFG_SET(DevCfg.hdc2080_threshold, v) && (DevCfg.changed.hdc2080 = true);
 8013300:	4b26      	ldr	r3, [pc, #152]	; (801339c <PBDecodeMsg+0x770>)
 8013302:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013304:	17d5      	asrs	r5, r2, #31
 8013306:	4282      	cmp	r2, r0
 8013308:	d101      	bne.n	801330e <PBDecodeMsg+0x6e2>
 801330a:	428d      	cmp	r5, r1
 801330c:	d005      	beq.n	801331a <PBDecodeMsg+0x6ee>
 801330e:	2209      	movs	r2, #9
 8013310:	7819      	ldrb	r1, [r3, #0]
 8013312:	65d8      	str	r0, [r3, #92]	; 0x5c
 8013314:	4391      	bics	r1, r2
 8013316:	430a      	orrs	r2, r1
 8013318:	701a      	strb	r2, [r3, #0]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 801331a:	4a20      	ldr	r2, [pc, #128]	; (801339c <PBDecodeMsg+0x770>)
      use_hdc2080 = true;
 801331c:	2001      	movs	r0, #1
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 801331e:	0013      	movs	r3, r2
 8013320:	335a      	adds	r3, #90	; 0x5a
 8013322:	7819      	ldrb	r1, [r3, #0]
      use_hdc2080 = true;
 8013324:	9002      	str	r0, [sp, #8]
      DEVCFG_SET(DevCfg.hdc2080_mode, HDC2080_TEMPERATURE_LOW) && (DevCfg.changed.hdc2080 = true);
 8013326:	2900      	cmp	r1, #0
 8013328:	d100      	bne.n	801332c <PBDecodeMsg+0x700>
 801332a:	e5a6      	b.n	8012e7a <PBDecodeMsg+0x24e>
 801332c:	2100      	movs	r1, #0
 801332e:	e78b      	b.n	8013248 <PBDecodeMsg+0x61c>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD) {
 8013330:	2be0      	cmp	r3, #224	; 0xe0
 8013332:	d11b      	bne.n	801336c <PBDecodeMsg+0x740>
      DBG_PRINTF("NFC <RX sensor_luminance_upper_threshold 0x%02x\n", val_int);
 8013334:	9a08      	ldr	r2, [sp, #32]
 8013336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013338:	4924      	ldr	r1, [pc, #144]	; (80133cc <PBDecodeMsg+0x7a0>)
 801333a:	2000      	movs	r0, #0
 801333c:	f7f8 fe2b 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sfh7776_threshold_upper, val_int) && (DevCfg.changed.sfh7776 = true);
 8013340:	4b16      	ldr	r3, [pc, #88]	; (801339c <PBDecodeMsg+0x770>)
 8013342:	9a08      	ldr	r2, [sp, #32]
 8013344:	0018      	movs	r0, r3
 8013346:	3066      	adds	r0, #102	; 0x66
 8013348:	8805      	ldrh	r5, [r0, #0]
 801334a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801334c:	2000      	movs	r0, #0
 801334e:	4295      	cmp	r5, r2
 8013350:	d101      	bne.n	8013356 <PBDecodeMsg+0x72a>
 8013352:	4288      	cmp	r0, r1
 8013354:	d007      	beq.n	8013366 <PBDecodeMsg+0x73a>
 8013356:	0019      	movs	r1, r3
 8013358:	3166      	adds	r1, #102	; 0x66
      DEVCFG_SET(DevCfg.sfh7776_threshold_lower, val_int) && (DevCfg.changed.sfh7776 = true);
 801335a:	800a      	strh	r2, [r1, #0]
 801335c:	2211      	movs	r2, #17
 801335e:	7819      	ldrb	r1, [r3, #0]
 8013360:	4391      	bics	r1, r2
 8013362:	430a      	orrs	r2, r1
 8013364:	701a      	strb	r2, [r3, #0]
      use_sfh7776 = true;
 8013366:	2301      	movs	r3, #1
 8013368:	9304      	str	r3, [sp, #16]
 801336a:	e586      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD) {
 801336c:	2be8      	cmp	r3, #232	; 0xe8
 801336e:	d131      	bne.n	80133d4 <PBDecodeMsg+0x7a8>
      DBG_PRINTF("NFC <RX sensor_luminance_lower_threshold 0x%02x\n", val_int);
 8013370:	9a08      	ldr	r2, [sp, #32]
 8013372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013374:	4916      	ldr	r1, [pc, #88]	; (80133d0 <PBDecodeMsg+0x7a4>)
 8013376:	2000      	movs	r0, #0
 8013378:	f7f8 fe0d 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.sfh7776_threshold_lower, val_int) && (DevCfg.changed.sfh7776 = true);
 801337c:	4b07      	ldr	r3, [pc, #28]	; (801339c <PBDecodeMsg+0x770>)
 801337e:	9a08      	ldr	r2, [sp, #32]
 8013380:	0018      	movs	r0, r3
 8013382:	3068      	adds	r0, #104	; 0x68
 8013384:	8805      	ldrh	r5, [r0, #0]
 8013386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013388:	2000      	movs	r0, #0
 801338a:	4295      	cmp	r5, r2
 801338c:	d101      	bne.n	8013392 <PBDecodeMsg+0x766>
 801338e:	4288      	cmp	r0, r1
 8013390:	d0e9      	beq.n	8013366 <PBDecodeMsg+0x73a>
 8013392:	0019      	movs	r1, r3
 8013394:	3168      	adds	r1, #104	; 0x68
 8013396:	e7e0      	b.n	801335a <PBDecodeMsg+0x72e>
 8013398:	0801a710 	.word	0x0801a710
 801339c:	200000e0 	.word	0x200000e0
 80133a0:	0801a728 	.word	0x0801a728
 80133a4:	0801a740 	.word	0x0801a740
 80133a8:	0801a768 	.word	0x0801a768
 80133ac:	0801a790 	.word	0x0801a790
 80133b0:	0801a7b8 	.word	0x0801a7b8
 80133b4:	0801a7d8 	.word	0x0801a7d8
 80133b8:	0801a7fc 	.word	0x0801a7fc
 80133bc:	0801a821 	.word	0x0801a821
 80133c0:	0801a851 	.word	0x0801a851
 80133c4:	0801a881 	.word	0x0801a881
 80133c8:	0801a8b4 	.word	0x0801a8b4
 80133cc:	0801a8e7 	.word	0x0801a8e7
 80133d0:	0801a918 	.word	0x0801a918
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_THRESHOLD) {
 80133d4:	2bf0      	cmp	r3, #240	; 0xf0
 80133d6:	d117      	bne.n	8013408 <PBDecodeMsg+0x7dc>
      DBG_PRINTF("NFC <RX sensor_axis_threshold 0x%02x\n", val_int);
 80133d8:	9a08      	ldr	r2, [sp, #32]
 80133da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133dc:	4929      	ldr	r1, [pc, #164]	; (8013484 <PBDecodeMsg+0x858>)
 80133de:	2000      	movs	r0, #0
 80133e0:	f7f8 fdd9 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.bma400_threshold, val_int) && (DevCfg.changed.bma400 = true);
 80133e4:	4b28      	ldr	r3, [pc, #160]	; (8013488 <PBDecodeMsg+0x85c>)
 80133e6:	9a08      	ldr	r2, [sp, #32]
 80133e8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80133ea:	2000      	movs	r0, #0
 80133ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133ee:	4295      	cmp	r5, r2
 80133f0:	d101      	bne.n	80133f6 <PBDecodeMsg+0x7ca>
 80133f2:	4288      	cmp	r0, r1
 80133f4:	d005      	beq.n	8013402 <PBDecodeMsg+0x7d6>
 80133f6:	661a      	str	r2, [r3, #96]	; 0x60
      DEVCFG_SET(DevCfg.bma400_config, val_int) && (DevCfg.changed.bma400 = true);
 80133f8:	2205      	movs	r2, #5
 80133fa:	7819      	ldrb	r1, [r3, #0]
 80133fc:	4391      	bics	r1, r2
 80133fe:	430a      	orrs	r2, r1
 8013400:	701a      	strb	r2, [r3, #0]
      use_bma400 = true;
 8013402:	2301      	movs	r3, #1
 8013404:	9305      	str	r3, [sp, #20]
 8013406:	e538      	b.n	8012e7a <PBDecodeMsg+0x24e>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_SENSOR_AXIS_CONFIGURE) {
 8013408:	2bf8      	cmp	r3, #248	; 0xf8
 801340a:	d114      	bne.n	8013436 <PBDecodeMsg+0x80a>
      DBG_PRINTF("NFC <RX sensor_axis_configure 0x%02x\n", val_int);
 801340c:	9a08      	ldr	r2, [sp, #32]
 801340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013410:	491e      	ldr	r1, [pc, #120]	; (801348c <PBDecodeMsg+0x860>)
 8013412:	2000      	movs	r0, #0
 8013414:	f7f8 fdbf 	bl	800bf96 <SEGGER_RTT_printf>
      DEVCFG_SET(DevCfg.bma400_config, val_int) && (DevCfg.changed.bma400 = true);
 8013418:	4b1b      	ldr	r3, [pc, #108]	; (8013488 <PBDecodeMsg+0x85c>)
 801341a:	9a08      	ldr	r2, [sp, #32]
 801341c:	0018      	movs	r0, r3
 801341e:	3064      	adds	r0, #100	; 0x64
 8013420:	8805      	ldrh	r5, [r0, #0]
 8013422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013424:	2000      	movs	r0, #0
 8013426:	4295      	cmp	r5, r2
 8013428:	d101      	bne.n	801342e <PBDecodeMsg+0x802>
 801342a:	4288      	cmp	r0, r1
 801342c:	d0e9      	beq.n	8013402 <PBDecodeMsg+0x7d6>
 801342e:	0019      	movs	r1, r3
 8013430:	3164      	adds	r1, #100	; 0x64
 8013432:	800a      	strh	r2, [r1, #0]
 8013434:	e7e0      	b.n	80133f8 <PBDecodeMsg+0x7cc>
      PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, "");
 8013436:	9b01      	ldr	r3, [sp, #4]
 8013438:	0031      	movs	r1, r6
 801343a:	1bda      	subs	r2, r3, r7
 801343c:	4814      	ldr	r0, [pc, #80]	; (8013490 <PBDecodeMsg+0x864>)
 801343e:	4b15      	ldr	r3, [pc, #84]	; (8013494 <PBDecodeMsg+0x868>)
 8013440:	b292      	uxth	r2, r2
 8013442:	f7ff fa37 	bl	80128b4 <PrintBuffer>
      DBG_PRINTF(", TAGNR %u, TAGTYPE %u, Unknown key-value\n", tagnr, tagtype);
 8013446:	002b      	movs	r3, r5
 8013448:	9a07      	ldr	r2, [sp, #28]
 801344a:	4913      	ldr	r1, [pc, #76]	; (8013498 <PBDecodeMsg+0x86c>)
 801344c:	2000      	movs	r0, #0
 801344e:	f7f8 fda2 	bl	800bf96 <SEGGER_RTT_printf>
 8013452:	e512      	b.n	8012e7a <PBDecodeMsg+0x24e>
        debug_msg = ", Out-of-bounds varint tagnr\n";
 8013454:	4b11      	ldr	r3, [pc, #68]	; (801349c <PBDecodeMsg+0x870>)
 8013456:	e491      	b.n	8012d7c <PBDecodeMsg+0x150>
      debug_msg = ", Ill-formed tagnr\n";
 8013458:	4b11      	ldr	r3, [pc, #68]	; (80134a0 <PBDecodeMsg+0x874>)
 801345a:	e48f      	b.n	8012d7c <PBDecodeMsg+0x150>
      debug_msg = ", Out-of-bounds tag w/o value\n";
 801345c:	4b11      	ldr	r3, [pc, #68]	; (80134a4 <PBDecodeMsg+0x878>)
 801345e:	e48d      	b.n	8012d7c <PBDecodeMsg+0x150>
      debug_msg = ", Ill-formed tagtype\n";
 8013460:	4b11      	ldr	r3, [pc, #68]	; (80134a8 <PBDecodeMsg+0x87c>)
 8013462:	e48b      	b.n	8012d7c <PBDecodeMsg+0x150>
  uint8_t debug_fieldpos = 0;
 8013464:	9f01      	ldr	r7, [sp, #4]
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 8013466:	9704      	str	r7, [sp, #16]
 8013468:	9702      	str	r7, [sp, #8]
 801346a:	9705      	str	r7, [sp, #20]
    debug_msg = ", Unknown message version\n";
 801346c:	4b0f      	ldr	r3, [pc, #60]	; (80134ac <PBDecodeMsg+0x880>)
 801346e:	e485      	b.n	8012d7c <PBDecodeMsg+0x150>
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 8013470:	2300      	movs	r3, #0
  uint8_t debug_fieldpos = 0;
 8013472:	001f      	movs	r7, r3
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 8013474:	9304      	str	r3, [sp, #16]
 8013476:	9302      	str	r3, [sp, #8]
 8013478:	9305      	str	r3, [sp, #20]
 801347a:	e7f7      	b.n	801346c <PBDecodeMsg+0x840>
    debug_msg = ", Out-of-bounds\n";
 801347c:	4b0c      	ldr	r3, [pc, #48]	; (80134b0 <PBDecodeMsg+0x884>)
  bool use_bma400 = false, use_hdc2080 = false, use_sfh7776 = false;
 801347e:	9702      	str	r7, [sp, #8]
 8013480:	9705      	str	r7, [sp, #20]
 8013482:	e47b      	b.n	8012d7c <PBDecodeMsg+0x150>
 8013484:	0801a949 	.word	0x0801a949
 8013488:	200000e0 	.word	0x200000e0
 801348c:	0801a96f 	.word	0x0801a96f
 8013490:	0801a995 	.word	0x0801a995
 8013494:	080198bd 	.word	0x080198bd
 8013498:	08019994 	.word	0x08019994
 801349c:	080198c9 	.word	0x080198c9
 80134a0:	080198e7 	.word	0x080198e7
 80134a4:	08019925 	.word	0x08019925
 80134a8:	0801990f 	.word	0x0801990f
 80134ac:	0801a5af 	.word	0x0801a5af
 80134b0:	0801a5ca 	.word	0x0801a5ca

080134b4 <PBEncodeMsg_DeviceSensors>:

size_t PBEncodeMsg_DeviceSensors(uint8_t *msg, size_t len, bool pw_valid) {
 80134b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134b6:	b08b      	sub	sp, #44	; 0x2c
 80134b8:	9005      	str	r0, [sp, #20]
 80134ba:	9102      	str	r1, [sp, #8]
  size_t size = 0;
  uint32_t b;
  (void)pw_valid;

  /* discriminator byte specifies message DeviceSensors */
  if(size++ < len)
 80134bc:	2900      	cmp	r1, #0
 80134be:	d000      	beq.n	80134c2 <PBEncodeMsg_DeviceSensors+0xe>
 80134c0:	e0e5      	b.n	801368e <PBEncodeMsg_DeviceSensors+0x1da>
    msg[0] = PBMSGID_DEVICE_SENSORS;

  /* enum: Device Part Number */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 80134c2:	2000      	movs	r0, #0
 80134c4:	0001      	movs	r1, r0
 80134c6:	2300      	movs	r3, #0
 80134c8:	2202      	movs	r2, #2
 80134ca:	9200      	str	r2, [sp, #0]
 80134cc:	9301      	str	r3, [sp, #4]
 80134ce:	3206      	adds	r2, #6
 80134d0:	f7ff fa3a 	bl	8012948 <PBEncodeField>
      PBENUM_PARTNR_STA
#endif
  );

  /*  uint8_t: Device Battery Voltage */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 80134d4:	2600      	movs	r6, #0
 80134d6:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 80134d8:	1c44      	adds	r4, r0, #1
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 80134da:	0037      	movs	r7, r6
 80134dc:	42a3      	cmp	r3, r4
 80134de:	d903      	bls.n	80134e8 <PBEncodeMsg_DeviceSensors+0x34>
 80134e0:	9b05      	ldr	r3, [sp, #20]
 80134e2:	191e      	adds	r6, r3, r4
 80134e4:	9b02      	ldr	r3, [sp, #8]
 80134e6:	1b1f      	subs	r7, r3, r4
 80134e8:	f7fd f928 	bl	801073c <getBatteryVoltage>
 80134ec:	210a      	movs	r1, #10
 80134ee:	f7ec fe3b 	bl	8000168 <__udivsi3>
 80134f2:	2500      	movs	r5, #0
 80134f4:	0039      	movs	r1, r7
 80134f6:	2210      	movs	r2, #16
 80134f8:	9000      	str	r0, [sp, #0]
 80134fa:	9501      	str	r5, [sp, #4]
 80134fc:	0030      	movs	r0, r6
 80134fe:	f7ff fa23 	bl	8012948 <PBEncodeField>
 8013502:	1824      	adds	r4, r4, r0
  /*  uint8_t: Air Accuracy */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_AIR_ACCURACY, (uint64_t)bme680.bsec.acc);

#endif
#elif defined(STX)
  HDC2080_Read();
 8013504:	f000 fdee 	bl	80140e4 <HDC2080_Read>
  SFH7776_Read();
 8013508:	f000 fd4c 	bl	8013fa4 <SFH7776_Read>
  BMA400_Read();
 801350c:	f000 fc5c 	bl	8013dc8 <BMA400_Read>
  /*  int16_t: Temperature */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_TEMPERATURE, PBEncodeSInt(hdc2080.fix_temp));
 8013510:	9b02      	ldr	r3, [sp, #8]
 8013512:	0028      	movs	r0, r5
 8013514:	0029      	movs	r1, r5
 8013516:	42a3      	cmp	r3, r4
 8013518:	d903      	bls.n	8013522 <PBEncodeMsg_DeviceSensors+0x6e>
 801351a:	9b05      	ldr	r3, [sp, #20]
 801351c:	1918      	adds	r0, r3, r4
 801351e:	9b02      	ldr	r3, [sp, #8]
 8013520:	1b19      	subs	r1, r3, r4
 8013522:	4f65      	ldr	r7, [pc, #404]	; (80136b8 <PBEncodeMsg_DeviceSensors+0x204>)
 8013524:	2204      	movs	r2, #4
 8013526:	5ebb      	ldrsh	r3, [r7, r2]
 8013528:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 801352a:	0fdb      	lsrs	r3, r3, #31
 801352c:	9306      	str	r3, [sp, #24]
 801352e:	2300      	movs	r3, #0
 8013530:	9307      	str	r3, [sp, #28]
 8013532:	9d06      	ldr	r5, [sp, #24]
 8013534:	9e07      	ldr	r6, [sp, #28]
 8013536:	2300      	movs	r3, #0
 8013538:	426a      	negs	r2, r5
 801353a:	41b3      	sbcs	r3, r6
 801353c:	9208      	str	r2, [sp, #32]
 801353e:	9309      	str	r3, [sp, #36]	; 0x24
 8013540:	4662      	mov	r2, ip
 8013542:	17d3      	asrs	r3, r2, #31
 8013544:	1892      	adds	r2, r2, r2
 8013546:	415b      	adcs	r3, r3
 8013548:	001e      	movs	r6, r3
 801354a:	9b08      	ldr	r3, [sp, #32]
 801354c:	0015      	movs	r5, r2
 801354e:	001a      	movs	r2, r3
 8013550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013552:	406a      	eors	r2, r5
 8013554:	4073      	eors	r3, r6
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_TEMPERATURE, PBEncodeSInt(hdc2080.fix_temp));
 8013556:	9200      	str	r2, [sp, #0]
 8013558:	9301      	str	r3, [sp, #4]
 801355a:	2218      	movs	r2, #24
 801355c:	f7ff f9f4 	bl	8012948 <PBEncodeField>

  /* uint32_t: Humidity */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_HUMIDITY, (uint64_t)hdc2080.raw_humid * 100000 / 65536);
 8013560:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_TEMPERATURE, PBEncodeSInt(hdc2080.fix_temp));
 8013562:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_HUMIDITY, (uint64_t)hdc2080.raw_humid * 100000 / 65536);
 8013564:	42a3      	cmp	r3, r4
 8013566:	d800      	bhi.n	801356a <PBEncodeMsg_DeviceSensors+0xb6>
 8013568:	e09c      	b.n	80136a4 <PBEncodeMsg_DeviceSensors+0x1f0>
 801356a:	9b05      	ldr	r3, [sp, #20]
 801356c:	191d      	adds	r5, r3, r4
 801356e:	9b02      	ldr	r3, [sp, #8]
 8013570:	1b1e      	subs	r6, r3, r4
 8013572:	8878      	ldrh	r0, [r7, #2]
 8013574:	2300      	movs	r3, #0
 8013576:	4a51      	ldr	r2, [pc, #324]	; (80136bc <PBEncodeMsg_DeviceSensors+0x208>)
 8013578:	2100      	movs	r1, #0
 801357a:	f7ec ffd5 	bl	8000528 <__aeabi_lmul>
 801357e:	040b      	lsls	r3, r1, #16
 8013580:	0c00      	lsrs	r0, r0, #16
 8013582:	4318      	orrs	r0, r3
 8013584:	0c09      	lsrs	r1, r1, #16
 8013586:	9000      	str	r0, [sp, #0]
 8013588:	9101      	str	r1, [sp, #4]
 801358a:	2220      	movs	r2, #32
 801358c:	0031      	movs	r1, r6
 801358e:	0028      	movs	r0, r5
 8013590:	f7ff f9da 	bl	8012948 <PBEncodeField>
 8013594:	1824      	adds	r4, r4, r0

  /* uint16_t: Luminance */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_LUMINANCE, (uint64_t)sfh7776.lux);
 8013596:	2000      	movs	r0, #0
 8013598:	9b02      	ldr	r3, [sp, #8]
 801359a:	0001      	movs	r1, r0
 801359c:	42a3      	cmp	r3, r4
 801359e:	d903      	bls.n	80135a8 <PBEncodeMsg_DeviceSensors+0xf4>
 80135a0:	9b05      	ldr	r3, [sp, #20]
 80135a2:	1918      	adds	r0, r3, r4
 80135a4:	9b02      	ldr	r3, [sp, #8]
 80135a6:	1b19      	subs	r1, r3, r4
 80135a8:	2500      	movs	r5, #0
 80135aa:	4b45      	ldr	r3, [pc, #276]	; (80136c0 <PBEncodeMsg_DeviceSensors+0x20c>)
 80135ac:	2238      	movs	r2, #56	; 0x38
 80135ae:	88db      	ldrh	r3, [r3, #6]
 80135b0:	9501      	str	r5, [sp, #4]
 80135b2:	9300      	str	r3, [sp, #0]
 80135b4:	f7ff f9c8 	bl	8012948 <PBEncodeField>

  /*  int16_t: X-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135b8:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_LUMINANCE, (uint64_t)sfh7776.lux);
 80135ba:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135bc:	0029      	movs	r1, r5
 80135be:	0028      	movs	r0, r5
 80135c0:	42a3      	cmp	r3, r4
 80135c2:	d903      	bls.n	80135cc <PBEncodeMsg_DeviceSensors+0x118>
 80135c4:	9b05      	ldr	r3, [sp, #20]
 80135c6:	1918      	adds	r0, r3, r4
 80135c8:	9b02      	ldr	r3, [sp, #8]
 80135ca:	1b19      	subs	r1, r3, r4
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135cc:	2700      	movs	r7, #0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135ce:	4b3d      	ldr	r3, [pc, #244]	; (80136c4 <PBEncodeMsg_DeviceSensors+0x210>)
 80135d0:	2206      	movs	r2, #6
 80135d2:	5e9b      	ldrsh	r3, [r3, r2]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135d4:	0fde      	lsrs	r6, r3, #31
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135d6:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135d8:	2300      	movs	r3, #0
 80135da:	4272      	negs	r2, r6
 80135dc:	41bb      	sbcs	r3, r7
 80135de:	9206      	str	r2, [sp, #24]
 80135e0:	9307      	str	r3, [sp, #28]
 80135e2:	4662      	mov	r2, ip
 80135e4:	17d3      	asrs	r3, r2, #31
 80135e6:	1892      	adds	r2, r2, r2
 80135e8:	415b      	adcs	r3, r3
 80135ea:	9208      	str	r2, [sp, #32]
 80135ec:	9309      	str	r3, [sp, #36]	; 0x24
 80135ee:	9a08      	ldr	r2, [sp, #32]
 80135f0:	9b06      	ldr	r3, [sp, #24]
 80135f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80135f4:	405a      	eors	r2, r3
 80135f6:	9b07      	ldr	r3, [sp, #28]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135f8:	9200      	str	r2, [sp, #0]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 80135fa:	405d      	eors	r5, r3
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 80135fc:	2240      	movs	r2, #64	; 0x40
 80135fe:	9501      	str	r5, [sp, #4]
 8013600:	f7ff f9a2 	bl	8012948 <PBEncodeField>

  /*  int16_t: Y-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 8013604:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_X_AXIS, PBEncodeSInt(bma400.fix_x));
 8013606:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 8013608:	42a3      	cmp	r3, r4
 801360a:	d94e      	bls.n	80136aa <PBEncodeMsg_DeviceSensors+0x1f6>
 801360c:	9b05      	ldr	r3, [sp, #20]
 801360e:	1918      	adds	r0, r3, r4
 8013610:	9b02      	ldr	r3, [sp, #8]
 8013612:	1b19      	subs	r1, r3, r4
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013614:	2700      	movs	r7, #0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 8013616:	4b2b      	ldr	r3, [pc, #172]	; (80136c4 <PBEncodeMsg_DeviceSensors+0x210>)
 8013618:	2508      	movs	r5, #8
 801361a:	5f5d      	ldrsh	r5, [r3, r5]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 801361c:	0fee      	lsrs	r6, r5, #31
 801361e:	2300      	movs	r3, #0
 8013620:	4272      	negs	r2, r6
 8013622:	41bb      	sbcs	r3, r7
 8013624:	9206      	str	r2, [sp, #24]
 8013626:	9307      	str	r3, [sp, #28]
 8013628:	002a      	movs	r2, r5
 801362a:	17eb      	asrs	r3, r5, #31
 801362c:	1892      	adds	r2, r2, r2
 801362e:	415b      	adcs	r3, r3
 8013630:	9208      	str	r2, [sp, #32]
 8013632:	9309      	str	r3, [sp, #36]	; 0x24
 8013634:	9a08      	ldr	r2, [sp, #32]
 8013636:	9b06      	ldr	r3, [sp, #24]
 8013638:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801363a:	405a      	eors	r2, r3
 801363c:	9b07      	ldr	r3, [sp, #28]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 801363e:	9200      	str	r2, [sp, #0]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013640:	405d      	eors	r5, r3
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 8013642:	2248      	movs	r2, #72	; 0x48
 8013644:	9501      	str	r5, [sp, #4]
 8013646:	f7ff f97f 	bl	8012948 <PBEncodeField>

  /*  int16_t: Z-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 801364a:	9b02      	ldr	r3, [sp, #8]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 801364c:	1824      	adds	r4, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 801364e:	42a3      	cmp	r3, r4
 8013650:	d92e      	bls.n	80136b0 <PBEncodeMsg_DeviceSensors+0x1fc>
 8013652:	9b05      	ldr	r3, [sp, #20]
 8013654:	1918      	adds	r0, r3, r4
 8013656:	9b02      	ldr	r3, [sp, #8]
 8013658:	1b19      	subs	r1, r3, r4
 801365a:	4b1a      	ldr	r3, [pc, #104]	; (80136c4 <PBEncodeMsg_DeviceSensors+0x210>)
 801365c:	250a      	movs	r5, #10
 801365e:	5f5d      	ldrsh	r5, [r3, r5]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013660:	2300      	movs	r3, #0
 8013662:	0fea      	lsrs	r2, r5, #31
 8013664:	2700      	movs	r7, #0
 8013666:	4256      	negs	r6, r2
 8013668:	419f      	sbcs	r7, r3
 801366a:	002a      	movs	r2, r5
 801366c:	17eb      	asrs	r3, r5, #31
 801366e:	1892      	adds	r2, r2, r2
 8013670:	415b      	adcs	r3, r3
 8013672:	9202      	str	r2, [sp, #8]
 8013674:	9303      	str	r3, [sp, #12]
 8013676:	9a02      	ldr	r2, [sp, #8]
 8013678:	9b03      	ldr	r3, [sp, #12]
 801367a:	4072      	eors	r2, r6
 801367c:	407b      	eors	r3, r7
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 801367e:	9200      	str	r2, [sp, #0]
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	2250      	movs	r2, #80	; 0x50
 8013684:	f7ff f960 	bl	8012948 <PBEncodeField>
 8013688:	1820      	adds	r0, r4, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_DOUBLE_COUNT, (uint64_t)DevCfg.doubleCount);
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_LONG_COUNT, (uint64_t)DevCfg.longCount);
#endif

  return size;
}
 801368a:	b00b      	add	sp, #44	; 0x2c
 801368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    msg[0] = PBMSGID_DEVICE_SENSORS;
 801368e:	2301      	movs	r3, #1
 8013690:	9a05      	ldr	r2, [sp, #20]
 8013692:	7013      	strb	r3, [r2, #0]
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013694:	9b02      	ldr	r3, [sp, #8]
 8013696:	2b01      	cmp	r3, #1
 8013698:	d100      	bne.n	801369c <PBEncodeMsg_DeviceSensors+0x1e8>
 801369a:	e712      	b.n	80134c2 <PBEncodeMsg_DeviceSensors+0xe>
 801369c:	9b02      	ldr	r3, [sp, #8]
 801369e:	1c50      	adds	r0, r2, #1
 80136a0:	1e59      	subs	r1, r3, #1
 80136a2:	e710      	b.n	80134c6 <PBEncodeMsg_DeviceSensors+0x12>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_HUMIDITY, (uint64_t)hdc2080.raw_humid * 100000 / 65536);
 80136a4:	9d07      	ldr	r5, [sp, #28]
 80136a6:	002e      	movs	r6, r5
 80136a8:	e763      	b.n	8013572 <PBEncodeMsg_DeviceSensors+0xbe>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Y_AXIS, PBEncodeSInt(bma400.fix_y));
 80136aa:	0038      	movs	r0, r7
 80136ac:	0039      	movs	r1, r7
 80136ae:	e7b1      	b.n	8013614 <PBEncodeMsg_DeviceSensors+0x160>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(bma400.fix_z));
 80136b0:	0038      	movs	r0, r7
 80136b2:	0039      	movs	r1, r7
 80136b4:	e7d1      	b.n	801365a <PBEncodeMsg_DeviceSensors+0x1a6>
 80136b6:	46c0      	nop			; (mov r8, r8)
 80136b8:	20001a00 	.word	0x20001a00
 80136bc:	000186a0 	.word	0x000186a0
 80136c0:	20001a08 	.word	0x20001a08
 80136c4:	200019e4 	.word	0x200019e4

080136c8 <PBEncodeMsg_DeviceConfiguration>:

size_t PBEncodeMsg_DeviceConfiguration(uint8_t *msg, size_t len, bool pw_valid) {
 80136c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ca:	b097      	sub	sp, #92	; 0x5c
 80136cc:	000f      	movs	r7, r1
 80136ce:	0015      	movs	r5, r2
 80136d0:	9003      	str	r0, [sp, #12]
  size_t size = 0;

  /* discriminator byte specifies message DeviceConfiguration */
  if(size++ < len)
 80136d2:	2900      	cmp	r1, #0
 80136d4:	d000      	beq.n	80136d8 <PBEncodeMsg_DeviceConfiguration+0x10>
 80136d6:	e1cd      	b.n	8013a74 <PBEncodeMsg_DeviceConfiguration+0x3ac>

  /* Device Info
   * ----------- */

  /* enum: Device Part Number */
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_PART_NUMBER,
 80136d8:	2000      	movs	r0, #0
 80136da:	0001      	movs	r1, r0
 80136dc:	2202      	movs	r2, #2
 80136de:	2300      	movs	r3, #0
 80136e0:	9200      	str	r2, [sp, #0]
 80136e2:	9301      	str	r3, [sp, #4]
 80136e4:	3206      	adds	r2, #6
 80136e6:	f7ff f92f 	bl	8012948 <PBEncodeField>
 80136ea:	1c44      	adds	r4, r0, #1
#elif defined(STA)
      PBENUM_PARTNR_STA
#endif
  );
  /* v1.0 Release */
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_FW_VERSION, (uint64_t)FIRMWARE_VERSION);
 80136ec:	2000      	movs	r0, #0
 80136ee:	0001      	movs	r1, r0
 80136f0:	42a7      	cmp	r7, r4
 80136f2:	d902      	bls.n	80136fa <PBEncodeMsg_DeviceConfiguration+0x32>
 80136f4:	9b03      	ldr	r3, [sp, #12]
 80136f6:	1b39      	subs	r1, r7, r4
 80136f8:	1918      	adds	r0, r3, r4
 80136fa:	220a      	movs	r2, #10
 80136fc:	2300      	movs	r3, #0
 80136fe:	9200      	str	r2, [sp, #0]
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	3206      	adds	r2, #6
 8013704:	f7ff f920 	bl	8012948 <PBEncodeField>
 8013708:	1824      	adds	r4, r4, r0

  /* Development version is 0, and zero is implied implicitly. No need to
   * explicitly encode "Device Firmware Version" */

  if(pw_valid) {
 801370a:	2d00      	cmp	r5, #0
 801370c:	d100      	bne.n	8013710 <PBEncodeMsg_DeviceConfiguration+0x48>
 801370e:	e227      	b.n	8013b60 <PBEncodeMsg_DeviceConfiguration+0x498>
    LoRaMacNvmData_t *nvm;
    int8_t datarate;
    int8_t value;

    // Obtain direct access to low-level LoRaMac-node context, some things can't get any other way.
    mibReq.Type = MIB_NVM_CTXS;
 8013710:	2334      	movs	r3, #52	; 0x34
 8013712:	ad0d      	add	r5, sp, #52	; 0x34
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013714:	0028      	movs	r0, r5
    mibReq.Type = MIB_NVM_CTXS;
 8013716:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013718:	f7f3 fe66 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    nvm = mibReq.Param.Contexts;
 801371c:	686b      	ldr	r3, [r5, #4]

    mibReq.Type = MIB_CHANNELS_DATARATE;
    LoRaMacMibGetRequestConfirm(&mibReq);
 801371e:	0028      	movs	r0, r5
    nvm = mibReq.Param.Contexts;
 8013720:	9306      	str	r3, [sp, #24]
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8013722:	232d      	movs	r3, #45	; 0x2d
 8013724:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013726:	f7f3 fe5f 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    datarate = mibReq.Param.ChannelsDatarate;
 801372a:	2304      	movs	r3, #4
 801372c:	56eb      	ldrsb	r3, [r5, r3]
    /* LoRa Settings
     * ------------- */

    /* rw--  5:    bool   (TTN) Activation Method */
    mibReq.Type = MIB_NETWORK_ACTIVATION;
    LoRaMacMibGetRequestConfirm(&mibReq);
 801372e:	0028      	movs	r0, r5
    datarate = mibReq.Param.ChannelsDatarate;
 8013730:	9307      	str	r3, [sp, #28]
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8013732:	2301      	movs	r3, #1
 8013734:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013736:	f7f3 fe57 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)(mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP));
 801373a:	2000      	movs	r0, #0
 801373c:	0001      	movs	r1, r0
 801373e:	42a7      	cmp	r7, r4
 8013740:	d902      	bls.n	8013748 <PBEncodeMsg_DeviceConfiguration+0x80>
 8013742:	9b03      	ldr	r3, [sp, #12]
 8013744:	1b39      	subs	r1, r7, r4
 8013746:	1918      	adds	r0, r3, r4
 8013748:	792b      	ldrb	r3, [r5, #4]
 801374a:	2600      	movs	r6, #0
 801374c:	3b01      	subs	r3, #1
 801374e:	1e5a      	subs	r2, r3, #1
 8013750:	4193      	sbcs	r3, r2
 8013752:	9601      	str	r6, [sp, #4]
 8013754:	2228      	movs	r2, #40	; 0x28
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	f7ff f8f6 	bl	8012948 <PBEncodeField>

    /* rw--  6: char[8]   (TTN) Device EUI */
    mibReq.Type = MIB_DEV_EUI;
 801375c:	2302      	movs	r3, #2
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)(mibReq.Param.NetworkActivation != ACTIVATION_TYPE_ABP));
 801375e:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013760:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 8013762:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013764:	f7f3 fe40 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(mibReq.Param.DevEui));
 8013768:	9604      	str	r6, [sp, #16]
 801376a:	42a7      	cmp	r7, r4
 801376c:	d903      	bls.n	8013776 <PBEncodeMsg_DeviceConfiguration+0xae>
 801376e:	9b03      	ldr	r3, [sp, #12]
 8013770:	191e      	adds	r6, r3, r4
 8013772:	1b3b      	subs	r3, r7, r4
 8013774:	9304      	str	r3, [sp, #16]
 8013776:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013778:	f7ff f8c0 	bl	80128fc <u64>
 801377c:	2231      	movs	r2, #49	; 0x31
 801377e:	9000      	str	r0, [sp, #0]
 8013780:	9101      	str	r1, [sp, #4]
 8013782:	0030      	movs	r0, r6
 8013784:	9904      	ldr	r1, [sp, #16]
 8013786:	f7ff f8df 	bl	8012948 <PBEncodeField>

    /* rw--  7: char[8]   (TTN) Application EUI */
    mibReq.Type = MIB_JOIN_EUI;
    LoRaMacMibGetRequestConfirm(&mibReq);
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(mibReq.Param.JoinEui));
 801378a:	2600      	movs	r6, #0
    mibReq.Type = MIB_JOIN_EUI;
 801378c:	2303      	movs	r3, #3
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(mibReq.Param.DevEui));
 801378e:	ad0d      	add	r5, sp, #52	; 0x34
 8013790:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013792:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8013794:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8013796:	f7f3 fe27 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(mibReq.Param.JoinEui));
 801379a:	9604      	str	r6, [sp, #16]
 801379c:	42a7      	cmp	r7, r4
 801379e:	d903      	bls.n	80137a8 <PBEncodeMsg_DeviceConfiguration+0xe0>
 80137a0:	9b03      	ldr	r3, [sp, #12]
 80137a2:	191e      	adds	r6, r3, r4
 80137a4:	1b3b      	subs	r3, r7, r4
 80137a6:	9304      	str	r3, [sp, #16]
 80137a8:	6868      	ldr	r0, [r5, #4]
 80137aa:	f7ff f8a7 	bl	80128fc <u64>
 80137ae:	2239      	movs	r2, #57	; 0x39
 80137b0:	9000      	str	r0, [sp, #0]
 80137b2:	9101      	str	r1, [sp, #4]
 80137b4:	9904      	ldr	r1, [sp, #16]
 80137b6:	0030      	movs	r0, r6
 80137b8:	f7ff f8c6 	bl	8012948 <PBEncodeField>
 80137bc:	1824      	adds	r4, r4, r0

    /* rw--  8: char[16]  (TTN) App Key */
    size += PBEncodeMsgField(msg, len, size,
 80137be:	2000      	movs	r0, #0
 80137c0:	0001      	movs	r1, r0
 80137c2:	42a7      	cmp	r7, r4
 80137c4:	d902      	bls.n	80137cc <PBEncodeMsg_DeviceConfiguration+0x104>
 80137c6:	9b03      	ldr	r3, [sp, #12]
 80137c8:	1b39      	subs	r1, r7, r4
 80137ca:	1918      	adds	r0, r3, r4
 80137cc:	9b06      	ldr	r3, [sp, #24]
 80137ce:	2242      	movs	r2, #66	; 0x42
 80137d0:	33cb      	adds	r3, #203	; 0xcb
 80137d2:	33ff      	adds	r3, #255	; 0xff
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	2310      	movs	r3, #16
 80137d8:	f7ff f8b6 	bl	8012948 <PBEncodeField>
        PBMSG_BX_LORA_APP_KEY,
        PBMSG_BX_LORA_APP_KEY_SIZE, nvm->SecureElement.KeyList[NWK_KEY].KeyValue);

    /* rw--  9: uint32_t  (TTN) Device Address */
    mibReq.Type = MIB_DEV_ADDR;
 80137dc:	2307      	movs	r3, #7
 80137de:	ad0d      	add	r5, sp, #52	; 0x34
    size += PBEncodeMsgField(msg, len, size,
 80137e0:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 80137e2:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 80137e4:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80137e6:	f7f3 fdff 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_ADDR, mibReq.Param.DevAddr);
 80137ea:	2000      	movs	r0, #0
 80137ec:	0001      	movs	r1, r0
 80137ee:	42a7      	cmp	r7, r4
 80137f0:	d902      	bls.n	80137f8 <PBEncodeMsg_DeviceConfiguration+0x130>
 80137f2:	9b03      	ldr	r3, [sp, #12]
 80137f4:	1b39      	subs	r1, r7, r4
 80137f6:	1918      	adds	r0, r3, r4
 80137f8:	224d      	movs	r2, #77	; 0x4d
 80137fa:	686b      	ldr	r3, [r5, #4]
 80137fc:	f7ff f8a4 	bl	8012948 <PBEncodeField>
 8013800:	1824      	adds	r4, r4, r0

    /* rw-- 10: char[16]  (TTN) Network Session Key */
    size += PBEncodeMsgField(msg, len, size,
 8013802:	2000      	movs	r0, #0
 8013804:	0001      	movs	r1, r0
 8013806:	42a7      	cmp	r7, r4
 8013808:	d902      	bls.n	8013810 <PBEncodeMsg_DeviceConfiguration+0x148>
 801380a:	9b03      	ldr	r3, [sp, #12]
 801380c:	1b39      	subs	r1, r7, r4
 801380e:	1918      	adds	r0, r3, r4
 8013810:	9b06      	ldr	r3, [sp, #24]
 8013812:	2252      	movs	r2, #82	; 0x52
 8013814:	33fe      	adds	r3, #254	; 0xfe
 8013816:	33ff      	adds	r3, #255	; 0xff
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	2310      	movs	r3, #16
 801381c:	f7ff f894 	bl	8012948 <PBEncodeField>
 8013820:	1824      	adds	r4, r4, r0
        PBMSG_BX_LORA_MAC_NET_SESSION_KEY,
        PBMSG_BX_LORA_MAC_NET_SESSION_KEY_SIZE, nvm->SecureElement.KeyList[F_NWK_S_INT_KEY].KeyValue);

    /* rw-- 11: char[16]  (TTN) App Session Key */
    size += PBEncodeMsgField(msg, len, size,
 8013822:	2000      	movs	r0, #0
 8013824:	0001      	movs	r1, r0
 8013826:	42a7      	cmp	r7, r4
 8013828:	d902      	bls.n	8013830 <PBEncodeMsg_DeviceConfiguration+0x168>
 801382a:	9b03      	ldr	r3, [sp, #12]
 801382c:	1b39      	subs	r1, r7, r4
 801382e:	1918      	adds	r0, r3, r4
 8013830:	228c      	movs	r2, #140	; 0x8c
 8013832:	9b06      	ldr	r3, [sp, #24]
 8013834:	0092      	lsls	r2, r2, #2
 8013836:	189b      	adds	r3, r3, r2
 8013838:	3ad7      	subs	r2, #215	; 0xd7
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	3aff      	subs	r2, #255	; 0xff
 801383e:	2310      	movs	r3, #16
 8013840:	f7ff f882 	bl	8012948 <PBEncodeField>
        PBMSG_BX_LORA_MAC_APP_SESSION_KEY,
        PBMSG_BX_LORA_MAC_APP_SESSION_KEY_SIZE, nvm->SecureElement.KeyList[APP_S_KEY].KeyValue);

    /* rw-- 12:     bool  LoRa Join status */
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8013844:	2301      	movs	r3, #1
 8013846:	aa06      	add	r2, sp, #24
    size += PBEncodeMsgField(msg, len, size,
 8013848:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 801384a:	a80d      	add	r0, sp, #52	; 0x34
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 801384c:	7713      	strb	r3, [r2, #28]
    LoRaMacMibGetRequestConfirm(&mibReq);
 801384e:	f7f3 fdcb 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_JOINED, (uint64_t)(mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE));
 8013852:	2000      	movs	r0, #0
 8013854:	0001      	movs	r1, r0
 8013856:	42a7      	cmp	r7, r4
 8013858:	d902      	bls.n	8013860 <PBEncodeMsg_DeviceConfiguration+0x198>
 801385a:	9b03      	ldr	r3, [sp, #12]
 801385c:	1b39      	subs	r1, r7, r4
 801385e:	1918      	adds	r0, r3, r4
 8013860:	2220      	movs	r2, #32
 8013862:	ab06      	add	r3, sp, #24
 8013864:	189b      	adds	r3, r3, r2
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	2500      	movs	r5, #0
 801386a:	1e5a      	subs	r2, r3, #1
 801386c:	4193      	sbcs	r3, r2
 801386e:	9501      	str	r5, [sp, #4]
 8013870:	2260      	movs	r2, #96	; 0x60
 8013872:	9300      	str	r3, [sp, #0]
 8013874:	f7ff f868 	bl	8012948 <PBEncodeField>
 8013878:	1824      	adds	r4, r4, r0

    /* rw-- 13:  uint8_t  LoRa Frequency Plan */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_FP, (uint64_t)(DevCfg.region == LORAMAC_REGION_EU868 ? PBENUM_FP_EU868 : PBENUM_FP_US915));
 801387a:	0029      	movs	r1, r5
 801387c:	0028      	movs	r0, r5
 801387e:	42a7      	cmp	r7, r4
 8013880:	d902      	bls.n	8013888 <PBEncodeMsg_DeviceConfiguration+0x1c0>
 8013882:	9b03      	ldr	r3, [sp, #12]
 8013884:	1b39      	subs	r1, r7, r4
 8013886:	1918      	adds	r0, r3, r4
 8013888:	4bd1      	ldr	r3, [pc, #836]	; (8013bd0 <PBEncodeMsg_DeviceConfiguration+0x508>)
 801388a:	2201      	movs	r2, #1
 801388c:	334c      	adds	r3, #76	; 0x4c
 801388e:	781d      	ldrb	r5, [r3, #0]
 8013890:	2300      	movs	r3, #0
 8013892:	2d05      	cmp	r5, #5
 8013894:	d001      	beq.n	801389a <PBEncodeMsg_DeviceConfiguration+0x1d2>
 8013896:	2202      	movs	r2, #2
 8013898:	2300      	movs	r3, #0
 801389a:	9200      	str	r2, [sp, #0]
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	2268      	movs	r2, #104	; 0x68
 80138a0:	f7ff f852 	bl	8012948 <PBEncodeField>
 80138a4:	1824      	adds	r4, r4, r0

    /* rw-- 14:  uint8_t  LoRa Port */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)DevCfg.txPort);
 80138a6:	2000      	movs	r0, #0
 80138a8:	0001      	movs	r1, r0
 80138aa:	42a7      	cmp	r7, r4
 80138ac:	d902      	bls.n	80138b4 <PBEncodeMsg_DeviceConfiguration+0x1ec>
 80138ae:	9b03      	ldr	r3, [sp, #12]
 80138b0:	1b39      	subs	r1, r7, r4
 80138b2:	1918      	adds	r0, r3, r4
 80138b4:	2600      	movs	r6, #0
 80138b6:	4bc6      	ldr	r3, [pc, #792]	; (8013bd0 <PBEncodeMsg_DeviceConfiguration+0x508>)
 80138b8:	2270      	movs	r2, #112	; 0x70
 80138ba:	334d      	adds	r3, #77	; 0x4d
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	9601      	str	r6, [sp, #4]
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	f7ff f841 	bl	8012948 <PBEncodeField>

    /* rw-- 15:  uint8_t  LoRa Transmit Power */
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80138c6:	232e      	movs	r3, #46	; 0x2e
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)DevCfg.txPort);
 80138c8:	1824      	adds	r4, r4, r0
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80138ca:	a80d      	add	r0, sp, #52	; 0x34
 80138cc:	7003      	strb	r3, [r0, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)LRW_FromTxPower(mibReq.Param.ChannelsTxPower));
 80138ce:	0035      	movs	r5, r6
    LoRaMacMibGetRequestConfirm(&mibReq);
 80138d0:	f7f3 fd8a 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)LRW_FromTxPower(mibReq.Param.ChannelsTxPower));
 80138d4:	42a7      	cmp	r7, r4
 80138d6:	d902      	bls.n	80138de <PBEncodeMsg_DeviceConfiguration+0x216>
 80138d8:	9b03      	ldr	r3, [sp, #12]
 80138da:	1b3d      	subs	r5, r7, r4
 80138dc:	191e      	adds	r6, r3, r4
 80138de:	2220      	movs	r2, #32
 80138e0:	ab06      	add	r3, sp, #24
 80138e2:	189b      	adds	r3, r3, r2
 80138e4:	7818      	ldrb	r0, [r3, #0]
 80138e6:	f7fd fe25 	bl	8011534 <LRW_FromTxPower>
 80138ea:	2300      	movs	r3, #0
 80138ec:	2278      	movs	r2, #120	; 0x78
 80138ee:	0029      	movs	r1, r5
 80138f0:	9000      	str	r0, [sp, #0]
 80138f2:	9301      	str	r3, [sp, #4]
 80138f4:	0030      	movs	r0, r6
 80138f6:	f7ff f827 	bl	8012948 <PBEncodeField>

    /* rw-- 16:  uint8_t  LoRa Spreading Factor */
    getPhy.Attribute = PHY_SF_FROM_DR;
 80138fa:	2336      	movs	r3, #54	; 0x36
 80138fc:	aa06      	add	r2, sp, #24
 80138fe:	7513      	strb	r3, [r2, #20]
    getPhy.Datarate = datarate;
 8013900:	0013      	movs	r3, r2
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8013902:	4eb3      	ldr	r6, [pc, #716]	; (8013bd0 <PBEncodeMsg_DeviceConfiguration+0x508>)
    getPhy.Datarate = datarate;
 8013904:	9a07      	ldr	r2, [sp, #28]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8013906:	a90b      	add	r1, sp, #44	; 0x2c
    getPhy.Datarate = datarate;
 8013908:	755a      	strb	r2, [r3, #21]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 801390a:	0033      	movs	r3, r6
 801390c:	334c      	adds	r3, #76	; 0x4c
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)LRW_FromTxPower(mibReq.Param.ChannelsTxPower));
 801390e:	1824      	adds	r4, r4, r0
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8013910:	7818      	ldrb	r0, [r3, #0]
 8013912:	f7f5 f9e7 	bl	8008ce4 <RegionGetPhyParam>
 8013916:	9009      	str	r0, [sp, #36]	; 0x24
 8013918:	b243      	sxtb	r3, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_SF, (uint64_t)value);
 801391a:	2000      	movs	r0, #0
 801391c:	0001      	movs	r1, r0
 801391e:	42a7      	cmp	r7, r4
 8013920:	d902      	bls.n	8013928 <PBEncodeMsg_DeviceConfiguration+0x260>
 8013922:	9a03      	ldr	r2, [sp, #12]
 8013924:	1b39      	subs	r1, r7, r4
 8013926:	1910      	adds	r0, r2, r4
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	17db      	asrs	r3, r3, #31
 801392c:	2280      	movs	r2, #128	; 0x80
 801392e:	9301      	str	r3, [sp, #4]
 8013930:	f7ff f80a 	bl	8012948 <PBEncodeField>
 8013934:	1823      	adds	r3, r4, r0
 8013936:	9304      	str	r3, [sp, #16]

    /* rw-- 17:  uint8_t  LoRa Bandwidth */
    getPhy.Attribute = PHY_BW_FROM_DR;
 8013938:	2337      	movs	r3, #55	; 0x37
 801393a:	aa06      	add	r2, sp, #24
 801393c:	7513      	strb	r3, [r2, #20]
    getPhy.Datarate = datarate;
 801393e:	0013      	movs	r3, r2
 8013940:	9a07      	ldr	r2, [sp, #28]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8013942:	a90b      	add	r1, sp, #44	; 0x2c
    getPhy.Datarate = datarate;
 8013944:	755a      	strb	r2, [r3, #21]
    value = RegionGetPhyParam(DevCfg.region, &getPhy).Value;
 8013946:	0033      	movs	r3, r6
 8013948:	334c      	adds	r3, #76	; 0x4c
 801394a:	7818      	ldrb	r0, [r3, #0]
 801394c:	f7f5 f9ca 	bl	8008ce4 <RegionGetPhyParam>
 8013950:	900a      	str	r0, [sp, #40]	; 0x28
 8013952:	b243      	sxtb	r3, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_BW, (uint64_t)value + 1);
 8013954:	2000      	movs	r0, #0
 8013956:	9a04      	ldr	r2, [sp, #16]
 8013958:	0001      	movs	r1, r0
 801395a:	4297      	cmp	r7, r2
 801395c:	d903      	bls.n	8013966 <PBEncodeMsg_DeviceConfiguration+0x29e>
 801395e:	9904      	ldr	r1, [sp, #16]
 8013960:	9a03      	ldr	r2, [sp, #12]
 8013962:	1850      	adds	r0, r2, r1
 8013964:	1a79      	subs	r1, r7, r1
 8013966:	001c      	movs	r4, r3
 8013968:	17dd      	asrs	r5, r3, #31
 801396a:	2201      	movs	r2, #1
 801396c:	2300      	movs	r3, #0
 801396e:	1912      	adds	r2, r2, r4
 8013970:	416b      	adcs	r3, r5
 8013972:	9200      	str	r2, [sp, #0]
 8013974:	9301      	str	r3, [sp, #4]
 8013976:	2288      	movs	r2, #136	; 0x88
 8013978:	f7fe ffe6 	bl	8012948 <PBEncodeField>
 801397c:	9b04      	ldr	r3, [sp, #16]
 801397e:	181c      	adds	r4, r3, r0

    /* rw-- 18:     bool  LoRa Confirmed Messages */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)DevCfg.confirmedMsgs);
 8013980:	2000      	movs	r0, #0
 8013982:	0001      	movs	r1, r0
 8013984:	42a7      	cmp	r7, r4
 8013986:	d902      	bls.n	801398e <PBEncodeMsg_DeviceConfiguration+0x2c6>
 8013988:	9b03      	ldr	r3, [sp, #12]
 801398a:	1b39      	subs	r1, r7, r4
 801398c:	1918      	adds	r0, r3, r4
 801398e:	0033      	movs	r3, r6
 8013990:	2500      	movs	r5, #0
 8013992:	3351      	adds	r3, #81	; 0x51
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	2290      	movs	r2, #144	; 0x90
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	9501      	str	r5, [sp, #4]
 801399c:	f7fe ffd4 	bl	8012948 <PBEncodeField>

    /* rw-- 19:     bool  LoRa Adaptive Data Rate */
    mibReq.Type = MIB_ADR;
 80139a0:	2305      	movs	r3, #5
 80139a2:	aa06      	add	r2, sp, #24
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)DevCfg.confirmedMsgs);
 80139a4:	1824      	adds	r4, r4, r0
    LoRaMacMibGetRequestConfirm(&mibReq);
 80139a6:	a80d      	add	r0, sp, #52	; 0x34
    mibReq.Type = MIB_ADR;
 80139a8:	7713      	strb	r3, [r2, #28]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80139aa:	f7f3 fd1d 	bl	80073e8 <LoRaMacMibGetRequestConfirm>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_ADAPTIVE_DATA_RATE, (uint64_t)mibReq.Param.AdrEnable);
 80139ae:	0028      	movs	r0, r5
 80139b0:	0029      	movs	r1, r5
 80139b2:	42a7      	cmp	r7, r4
 80139b4:	d902      	bls.n	80139bc <PBEncodeMsg_DeviceConfiguration+0x2f4>
 80139b6:	9b03      	ldr	r3, [sp, #12]
 80139b8:	1b39      	subs	r1, r7, r4
 80139ba:	1918      	adds	r0, r3, r4
 80139bc:	2220      	movs	r2, #32
 80139be:	2500      	movs	r5, #0
 80139c0:	ab06      	add	r3, sp, #24
 80139c2:	189b      	adds	r3, r3, r2
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	3278      	adds	r2, #120	; 0x78
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	9501      	str	r5, [sp, #4]
 80139cc:	f7fe ffbc 	bl	8012948 <PBEncodeField>
 80139d0:	1824      	adds	r4, r4, r0

    /* rw-- 20:     bool  LoRa Respect Duty Cycle */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_RESPECT_DUTY_CYCLE, (uint64_t)nvm->MacGroup2.DutyCycleOn);
 80139d2:	0029      	movs	r1, r5
 80139d4:	0028      	movs	r0, r5
 80139d6:	42a7      	cmp	r7, r4
 80139d8:	d902      	bls.n	80139e0 <PBEncodeMsg_DeviceConfiguration+0x318>
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	1b39      	subs	r1, r7, r4
 80139de:	1918      	adds	r0, r3, r4
 80139e0:	23c4      	movs	r3, #196	; 0xc4
 80139e2:	2500      	movs	r5, #0
 80139e4:	9a06      	ldr	r2, [sp, #24]
 80139e6:	005b      	lsls	r3, r3, #1
 80139e8:	5cd3      	ldrb	r3, [r2, r3]
 80139ea:	22a0      	movs	r2, #160	; 0xa0
 80139ec:	9300      	str	r3, [sp, #0]
 80139ee:	9501      	str	r5, [sp, #4]
 80139f0:	f7fe ffaa 	bl	8012948 <PBEncodeField>
 80139f4:	1824      	adds	r4, r4, r0

    /* Sensor Settings
     * --------------- */

    /* uint32_t: Time Base */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TIMEBASE, (uint64_t)DevCfg.sendInterval);
 80139f6:	0029      	movs	r1, r5
 80139f8:	0028      	movs	r0, r5
 80139fa:	42a7      	cmp	r7, r4
 80139fc:	d902      	bls.n	8013a04 <PBEncodeMsg_DeviceConfiguration+0x33c>
 80139fe:	9b03      	ldr	r3, [sp, #12]
 8013a00:	1b39      	subs	r1, r7, r4
 8013a02:	1918      	adds	r0, r3, r4
 8013a04:	2500      	movs	r5, #0
 8013a06:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013a08:	22a8      	movs	r2, #168	; 0xa8
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	9501      	str	r5, [sp, #4]
 8013a0e:	f7fe ff9b 	bl	8012948 <PBEncodeField>
 8013a12:	1824      	adds	r4, r4, r0

    /*     bool: Send Trigger */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_TRIGGER, (uint64_t)DevCfg.sendTrigger);
 8013a14:	0029      	movs	r1, r5
 8013a16:	0028      	movs	r0, r5
 8013a18:	42a7      	cmp	r7, r4
 8013a1a:	d902      	bls.n	8013a22 <PBEncodeMsg_DeviceConfiguration+0x35a>
 8013a1c:	9b03      	ldr	r3, [sp, #12]
 8013a1e:	1b39      	subs	r1, r7, r4
 8013a20:	1918      	adds	r0, r3, r4
 8013a22:	0033      	movs	r3, r6
 8013a24:	2500      	movs	r5, #0
 8013a26:	3358      	adds	r3, #88	; 0x58
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	22b0      	movs	r2, #176	; 0xb0
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	9501      	str	r5, [sp, #4]
 8013a30:	f7fe ff8a 	bl	8012948 <PBEncodeField>
 8013a34:	1824      	adds	r4, r4, r0

    /*     bool: Send Strategy */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 8013a36:	0029      	movs	r1, r5
 8013a38:	0028      	movs	r0, r5
 8013a3a:	42a7      	cmp	r7, r4
 8013a3c:	d902      	bls.n	8013a44 <PBEncodeMsg_DeviceConfiguration+0x37c>
 8013a3e:	9b03      	ldr	r3, [sp, #12]
 8013a40:	1b39      	subs	r1, r7, r4
 8013a42:	1918      	adds	r0, r3, r4
 8013a44:	0033      	movs	r3, r6
 8013a46:	3359      	adds	r3, #89	; 0x59
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	22b8      	movs	r2, #184	; 0xb8
 8013a4c:	9300      	str	r3, [sp, #0]
 8013a4e:	2300      	movs	r3, #0
 8013a50:	9301      	str	r3, [sp, #4]
 8013a52:	f7fe ff79 	bl	8012948 <PBEncodeField>

#if defined(STE)
    // STE has no configuration
#elif defined(STX)
    if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 8013a56:	0033      	movs	r3, r6
 8013a58:	336c      	adds	r3, #108	; 0x6c
 8013a5a:	781b      	ldrb	r3, [r3, #0]
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_SEND_STRATEGY, (uint64_t)DevCfg.sendStrategy);
 8013a5c:	1824      	adds	r4, r4, r0
    if(DevCfg.useSensor.hdc2080) switch(DevCfg.hdc2080_mode) {
 8013a5e:	075b      	lsls	r3, r3, #29
 8013a60:	d532      	bpl.n	8013ac8 <PBEncodeMsg_DeviceConfiguration+0x400>
 8013a62:	365a      	adds	r6, #90	; 0x5a
 8013a64:	7830      	ldrb	r0, [r6, #0]
 8013a66:	2803      	cmp	r0, #3
 8013a68:	d82e      	bhi.n	8013ac8 <PBEncodeMsg_DeviceConfiguration+0x400>
 8013a6a:	4b59      	ldr	r3, [pc, #356]	; (8013bd0 <PBEncodeMsg_DeviceConfiguration+0x508>)
 8013a6c:	f7ec fb5e 	bl	800012c <__gnu_thumb1_case_uqi>
 8013a70:	99a50b7b 	.word	0x99a50b7b
    msg[0] = PBMSGID_DEVICE_CONFIGURATION;
 8013a74:	2300      	movs	r3, #0
 8013a76:	9a03      	ldr	r2, [sp, #12]
 8013a78:	7013      	strb	r3, [r2, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_PART_NUMBER,
 8013a7a:	2901      	cmp	r1, #1
 8013a7c:	d100      	bne.n	8013a80 <PBEncodeMsg_DeviceConfiguration+0x3b8>
 8013a7e:	e62b      	b.n	80136d8 <PBEncodeMsg_DeviceConfiguration+0x10>
 8013a80:	1c50      	adds	r0, r2, #1
 8013a82:	3901      	subs	r1, #1
 8013a84:	e62a      	b.n	80136dc <PBEncodeMsg_DeviceConfiguration+0x14>
    case HDC2080_TEMPERATURE_HIGH:
      /*  int32_t: Send LoRa Message on temperature upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a86:	2000      	movs	r0, #0
 8013a88:	9006      	str	r0, [sp, #24]
 8013a8a:	42a7      	cmp	r7, r4
 8013a8c:	d903      	bls.n	8013a96 <PBEncodeMsg_DeviceConfiguration+0x3ce>
 8013a8e:	9a03      	ldr	r2, [sp, #12]
 8013a90:	1910      	adds	r0, r2, r4
 8013a92:	1b3a      	subs	r2, r7, r4
 8013a94:	9206      	str	r2, [sp, #24]
 8013a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013a98:	0fda      	lsrs	r2, r3, #31
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013a9a:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013a9c:	0019      	movs	r1, r3
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	2600      	movs	r6, #0
 8013aa2:	4255      	negs	r5, r2
 8013aa4:	419e      	sbcs	r6, r3
 8013aa6:	4662      	mov	r2, ip
 8013aa8:	17cb      	asrs	r3, r1, #31
 8013aaa:	1892      	adds	r2, r2, r2
 8013aac:	415b      	adcs	r3, r3
 8013aae:	9204      	str	r2, [sp, #16]
 8013ab0:	9305      	str	r3, [sp, #20]
 8013ab2:	9a04      	ldr	r2, [sp, #16]
 8013ab4:	406a      	eors	r2, r5
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013ab6:	9200      	str	r2, [sp, #0]
 8013ab8:	22d0      	movs	r2, #208	; 0xd0
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013aba:	9d05      	ldr	r5, [sp, #20]
 8013abc:	4075      	eors	r5, r6
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_UPPER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013abe:	9501      	str	r5, [sp, #4]
      break;
    case HDC2080_TEMPERATURE_LOW:
      /*  int32_t: Send LoRa Message on temperature lower threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013ac0:	9906      	ldr	r1, [sp, #24]
 8013ac2:	f7fe ff41 	bl	8012948 <PBEncodeField>
      /*  int32_t: Send LoRa Message on temperature upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, DevCfg.hdc2080_threshold);
      break;
    case HDC2080_HUMIDITY_LOW:
      /*  int32_t: Send LoRa Message on temperature upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);
 8013ac6:	1824      	adds	r4, r4, r0
      break;
    }

    if(DevCfg.useSensor.sfh7776) {
 8013ac8:	4d41      	ldr	r5, [pc, #260]	; (8013bd0 <PBEncodeMsg_DeviceConfiguration+0x508>)
 8013aca:	002b      	movs	r3, r5
 8013acc:	336c      	adds	r3, #108	; 0x6c
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	079b      	lsls	r3, r3, #30
 8013ad2:	d521      	bpl.n	8013b18 <PBEncodeMsg_DeviceConfiguration+0x450>
      /*  int32_t: Send LoRa Message on luminance upper threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_UPPER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_upper);
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	0001      	movs	r1, r0
 8013ad8:	42bc      	cmp	r4, r7
 8013ada:	d202      	bcs.n	8013ae2 <PBEncodeMsg_DeviceConfiguration+0x41a>
 8013adc:	9b03      	ldr	r3, [sp, #12]
 8013ade:	1b39      	subs	r1, r7, r4
 8013ae0:	1918      	adds	r0, r3, r4
 8013ae2:	002b      	movs	r3, r5
 8013ae4:	2600      	movs	r6, #0
 8013ae6:	3366      	adds	r3, #102	; 0x66
 8013ae8:	881b      	ldrh	r3, [r3, #0]
 8013aea:	22e0      	movs	r2, #224	; 0xe0
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	9601      	str	r6, [sp, #4]
 8013af0:	f7fe ff2a 	bl	8012948 <PBEncodeField>
 8013af4:	1824      	adds	r4, r4, r0

      /*  int32_t: Send LoRa Message on luminance lower threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_LUMINANCE_LOWER_THRESHOLD, (uint64_t)DevCfg.sfh7776_threshold_lower);
 8013af6:	0031      	movs	r1, r6
 8013af8:	0030      	movs	r0, r6
 8013afa:	42a7      	cmp	r7, r4
 8013afc:	d902      	bls.n	8013b04 <PBEncodeMsg_DeviceConfiguration+0x43c>
 8013afe:	9b03      	ldr	r3, [sp, #12]
 8013b00:	1b39      	subs	r1, r7, r4
 8013b02:	1918      	adds	r0, r3, r4
 8013b04:	002b      	movs	r3, r5
 8013b06:	3368      	adds	r3, #104	; 0x68
 8013b08:	881b      	ldrh	r3, [r3, #0]
 8013b0a:	22e8      	movs	r2, #232	; 0xe8
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	9301      	str	r3, [sp, #4]
 8013b12:	f7fe ff19 	bl	8012948 <PBEncodeField>
 8013b16:	1824      	adds	r4, r4, r0
    }

    if(DevCfg.useSensor.bma400) {
 8013b18:	002b      	movs	r3, r5
 8013b1a:	336c      	adds	r3, #108	; 0x6c
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	07db      	lsls	r3, r3, #31
 8013b20:	d51e      	bpl.n	8013b60 <PBEncodeMsg_DeviceConfiguration+0x498>
      /*  int32_t: Send LoRa Message on axis acceleration above threshold */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_THRESHOLD, (uint64_t)DevCfg.bma400_threshold);
 8013b22:	2000      	movs	r0, #0
 8013b24:	0001      	movs	r1, r0
 8013b26:	42bc      	cmp	r4, r7
 8013b28:	d202      	bcs.n	8013b30 <PBEncodeMsg_DeviceConfiguration+0x468>
 8013b2a:	9b03      	ldr	r3, [sp, #12]
 8013b2c:	1b39      	subs	r1, r7, r4
 8013b2e:	1918      	adds	r0, r3, r4
 8013b30:	2600      	movs	r6, #0
 8013b32:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8013b34:	22f0      	movs	r2, #240	; 0xf0
 8013b36:	9300      	str	r3, [sp, #0]
 8013b38:	9601      	str	r6, [sp, #4]
 8013b3a:	f7fe ff05 	bl	8012948 <PBEncodeField>
 8013b3e:	1824      	adds	r4, r4, r0

      /*  int32_t: Send LoRa Message on axis acceleration configure */
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_AXIS_CONFIGURE, (uint64_t)DevCfg.bma400_config);
 8013b40:	0031      	movs	r1, r6
 8013b42:	0030      	movs	r0, r6
 8013b44:	42a7      	cmp	r7, r4
 8013b46:	d902      	bls.n	8013b4e <PBEncodeMsg_DeviceConfiguration+0x486>
 8013b48:	9b03      	ldr	r3, [sp, #12]
 8013b4a:	1b39      	subs	r1, r7, r4
 8013b4c:	1918      	adds	r0, r3, r4
 8013b4e:	3564      	adds	r5, #100	; 0x64
 8013b50:	882b      	ldrh	r3, [r5, #0]
 8013b52:	22f8      	movs	r2, #248	; 0xf8
 8013b54:	9300      	str	r3, [sp, #0]
 8013b56:	2300      	movs	r3, #0
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	f7fe fef5 	bl	8012948 <PBEncodeField>
 8013b5e:	1824      	adds	r4, r4, r0

#endif
  }

  return size;
}
 8013b60:	0020      	movs	r0, r4
 8013b62:	b017      	add	sp, #92	; 0x5c
 8013b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b66:	2000      	movs	r0, #0
 8013b68:	9006      	str	r0, [sp, #24]
 8013b6a:	42a7      	cmp	r7, r4
 8013b6c:	d903      	bls.n	8013b76 <PBEncodeMsg_DeviceConfiguration+0x4ae>
 8013b6e:	9a03      	ldr	r2, [sp, #12]
 8013b70:	1910      	adds	r0, r2, r4
 8013b72:	1b3a      	subs	r2, r7, r4
 8013b74:	9206      	str	r2, [sp, #24]
 8013b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013b78:	0fda      	lsrs	r2, r3, #31
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b7a:	469c      	mov	ip, r3
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013b7c:	0019      	movs	r1, r3
 8013b7e:	2300      	movs	r3, #0
 8013b80:	2600      	movs	r6, #0
 8013b82:	4255      	negs	r5, r2
 8013b84:	419e      	sbcs	r6, r3
 8013b86:	4662      	mov	r2, ip
 8013b88:	17cb      	asrs	r3, r1, #31
 8013b8a:	1892      	adds	r2, r2, r2
 8013b8c:	415b      	adcs	r3, r3
 8013b8e:	9204      	str	r2, [sp, #16]
 8013b90:	9305      	str	r3, [sp, #20]
 8013b92:	9a04      	ldr	r2, [sp, #16]
 8013b94:	406a      	eors	r2, r5
 8013b96:	9d05      	ldr	r5, [sp, #20]
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b98:	9200      	str	r2, [sp, #0]
	return (uint64_t)val << 1 ^ (val < 0 ? UINT64_MAX : 0);
 8013b9a:	4075      	eors	r5, r6
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_TEMPERATURE_LOWER_THRESHOLD, PBEncodeSInt(DevCfg.hdc2080_threshold));
 8013b9c:	22d8      	movs	r2, #216	; 0xd8
 8013b9e:	9501      	str	r5, [sp, #4]
 8013ba0:	e78e      	b.n	8013ac0 <PBEncodeMsg_DeviceConfiguration+0x3f8>
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_UPPER_THRESHOLD, DevCfg.hdc2080_threshold);
 8013ba2:	2000      	movs	r0, #0
 8013ba4:	0001      	movs	r1, r0
 8013ba6:	42a7      	cmp	r7, r4
 8013ba8:	d902      	bls.n	8013bb0 <PBEncodeMsg_DeviceConfiguration+0x4e8>
 8013baa:	9a03      	ldr	r2, [sp, #12]
 8013bac:	1b39      	subs	r1, r7, r4
 8013bae:	1910      	adds	r0, r2, r4
 8013bb0:	22c0      	movs	r2, #192	; 0xc0
 8013bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_HUMIDITY_LOWER_THRESHOLD, DevCfg.hdc2080_threshold);
 8013bb4:	f7fe fec8 	bl	8012948 <PBEncodeField>
 8013bb8:	e785      	b.n	8013ac6 <PBEncodeMsg_DeviceConfiguration+0x3fe>
 8013bba:	2000      	movs	r0, #0
 8013bbc:	0001      	movs	r1, r0
 8013bbe:	42a7      	cmp	r7, r4
 8013bc0:	d902      	bls.n	8013bc8 <PBEncodeMsg_DeviceConfiguration+0x500>
 8013bc2:	9a03      	ldr	r2, [sp, #12]
 8013bc4:	1b39      	subs	r1, r7, r4
 8013bc6:	1910      	adds	r0, r2, r4
 8013bc8:	22c8      	movs	r2, #200	; 0xc8
 8013bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bcc:	e7f2      	b.n	8013bb4 <PBEncodeMsg_DeviceConfiguration+0x4ec>
 8013bce:	46c0      	nop			; (mov r8, r8)
 8013bd0:	200000e0 	.word	0x200000e0

08013bd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8013bd4:	b510      	push	{r4, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8013bd6:	4b0f      	ldr	r3, [pc, #60]	; (8013c14 <MX_RTC_Init+0x40>)
 8013bd8:	4c0f      	ldr	r4, [pc, #60]	; (8013c18 <MX_RTC_Init+0x44>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8013bda:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8013bdc:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8013bde:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 127;
 8013be0:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8013be2:	0020      	movs	r0, r4
  hrtc.Init.SynchPrediv = 255;
 8013be4:	3280      	adds	r2, #128	; 0x80
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8013be6:	6063      	str	r3, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 8013be8:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8013bea:	6123      	str	r3, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8013bec:	6163      	str	r3, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8013bee:	61a3      	str	r3, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8013bf0:	61e3      	str	r3, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8013bf2:	f7fb fae5 	bl	800f1c0 <HAL_RTC_Init>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d001      	beq.n	8013bfe <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8013bfa:	f7fe f9d7 	bl	8011fac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8013bfe:	2206      	movs	r2, #6
 8013c00:	2100      	movs	r1, #0
 8013c02:	0020      	movs	r0, r4
 8013c04:	f7fb fc70 	bl	800f4e8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	d001      	beq.n	8013c10 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8013c0c:	f7fe f9ce 	bl	8011fac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8013c10:	bd10      	pop	{r4, pc}
 8013c12:	46c0      	nop			; (mov r8, r8)
 8013c14:	40002800 	.word	0x40002800
 8013c18:	200019a4 	.word	0x200019a4

08013c1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8013c1c:	4b09      	ldr	r3, [pc, #36]	; (8013c44 <HAL_RTC_MspInit+0x28>)
 8013c1e:	6802      	ldr	r2, [r0, #0]
{
 8013c20:	b510      	push	{r4, lr}
  if(rtcHandle->Instance==RTC)
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d10d      	bne.n	8013c42 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8013c26:	2380      	movs	r3, #128	; 0x80
 8013c28:	4a07      	ldr	r2, [pc, #28]	; (8013c48 <HAL_RTC_MspInit+0x2c>)
 8013c2a:	02db      	lsls	r3, r3, #11
 8013c2c:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8013c2e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8013c30:	430b      	orrs	r3, r1
 8013c32:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8013c34:	2200      	movs	r2, #0
 8013c36:	0011      	movs	r1, r2
 8013c38:	f7f9 f866 	bl	800cd08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8013c3c:	2002      	movs	r0, #2
 8013c3e:	f7f9 f88d 	bl	800cd5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8013c42:	bd10      	pop	{r4, pc}
 8013c44:	40002800 	.word	0x40002800
 8013c48:	40021000 	.word	0x40021000

08013c4c <BMA400_Init>:
 *    https://github.com/BoschSensortec/BMA400-API
 *        Upstream driver, contains examples (none for low power mode).
 *    https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bma400-ds000.pdf
 *        Datasheet.
 */
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t r, c;

  bma400.p = &bma;
 8013c4e:	4b53      	ldr	r3, [pc, #332]	; (8013d9c <BMA400_Init+0x150>)
 8013c50:	4c53      	ldr	r4, [pc, #332]	; (8013da0 <BMA400_Init+0x154>)

  /* Initialize BMA400 Driver */
  bma.dev_id = BMA400_I2C_ADDRESS_SDO_LOW; /* I2C device address is 0x80 */
  bma.intf = BMA400_I2C_INTF;              /* I2C interface used */
 8013c52:	2501      	movs	r5, #1
  bma400.p = &bma;
 8013c54:	601c      	str	r4, [r3, #0]
  bma.dev_id = BMA400_I2C_ADDRESS_SDO_LOW; /* I2C device address is 0x80 */
 8013c56:	2314      	movs	r3, #20
 8013c58:	7063      	strb	r3, [r4, #1]
  bma.intf_ptr = &hi2c1;      /* Hook I2C1 peripheral handle to driver */
 8013c5a:	4b52      	ldr	r3, [pc, #328]	; (8013da4 <BMA400_Init+0x158>)
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013c5c:	b08d      	sub	sp, #52	; 0x34
  bma.intf_ptr = &hi2c1;      /* Hook I2C1 peripheral handle to driver */
 8013c5e:	6063      	str	r3, [r4, #4]
  bma.delay_ms = delay_ms;    /* Hook HAL_Delay to driver */
 8013c60:	4b51      	ldr	r3, [pc, #324]	; (8013da8 <BMA400_Init+0x15c>)
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013c62:	0007      	movs	r7, r0
  bma.delay_ms = delay_ms;    /* Hook HAL_Delay to driver */
 8013c64:	6163      	str	r3, [r4, #20]
  bma.read = i2c_reg_read;    /* Hook HAL_I2C_Mem_Read to driver */
 8013c66:	4b51      	ldr	r3, [pc, #324]	; (8013dac <BMA400_Init+0x160>)
  bma.write = i2c_reg_write;  /* Hook HAL_I2C_Mem_Write to driver */

  if((r = bma400_init(&bma))) {c = 0x1; goto err;};
 8013c68:	0020      	movs	r0, r4
  bma.read = i2c_reg_read;    /* Hook HAL_I2C_Mem_Read to driver */
 8013c6a:	60e3      	str	r3, [r4, #12]
  bma.write = i2c_reg_write;  /* Hook HAL_I2C_Mem_Write to driver */
 8013c6c:	4b50      	ldr	r3, [pc, #320]	; (8013db0 <BMA400_Init+0x164>)
void BMA400_Init(uint16_t config, uint16_t threshold) {
 8013c6e:	9101      	str	r1, [sp, #4]
  bma.write = i2c_reg_write;  /* Hook HAL_I2C_Mem_Write to driver */
 8013c70:	6123      	str	r3, [r4, #16]
  bma.intf = BMA400_I2C_INTF;              /* I2C interface used */
 8013c72:	70a5      	strb	r5, [r4, #2]
  if((r = bma400_init(&bma))) {c = 0x1; goto err;};
 8013c74:	f7ef f8ce 	bl	8002e14 <bma400_init>
 8013c78:	002b      	movs	r3, r5
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d000      	beq.n	8013c80 <BMA400_Init+0x34>
 8013c7e:	e084      	b.n	8013d8a <BMA400_Init+0x13e>

  if((r = bma400_soft_reset(&bma))) {c = 0x2; goto err;};
 8013c80:	0020      	movs	r0, r4
 8013c82:	f7ef f937 	bl	8002ef4 <bma400_soft_reset>
 8013c86:	2302      	movs	r3, #2
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d000      	beq.n	8013c8e <BMA400_Init+0x42>
 8013c8c:	e07d      	b.n	8013d8a <BMA400_Init+0x13e>

  /* Configure Acceleration */
  struct bma400_sensor_conf sconf;
  sconf.type = BMA400_ACCEL;
 8013c8e:	ae07      	add	r6, sp, #28
 8013c90:	7030      	strb	r0, [r6, #0]

  if((r = bma400_get_sensor_conf(&sconf, 1, &bma))) {c = 0x3; goto err;};
 8013c92:	0022      	movs	r2, r4
 8013c94:	0029      	movs	r1, r5
 8013c96:	0030      	movs	r0, r6
 8013c98:	f7ef fc0c 	bl	80034b4 <bma400_get_sensor_conf>
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	d000      	beq.n	8013ca4 <BMA400_Init+0x58>
 8013ca2:	e072      	b.n	8013d8a <BMA400_Init+0x13e>

  sconf.param.accel.odr = BMA400_ODR_25HZ;
 8013ca4:	2206      	movs	r2, #6
 8013ca6:	8072      	strh	r2, [r6, #2]
  sconf.param.accel.range = BMA400_2G_RANGE;
  sconf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_1;
  sconf.param.accel.osr = (config & 0x300) >> 8;
 8013ca8:	123a      	asrs	r2, r7, #8
 8013caa:	4013      	ands	r3, r2
  sconf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_1;
 8013cac:	7130      	strb	r0, [r6, #4]

  if((r = bma400_set_sensor_conf(&sconf, 1, &bma))) {c = 0x4; goto err;};
 8013cae:	0022      	movs	r2, r4
 8013cb0:	0029      	movs	r1, r5
 8013cb2:	0030      	movs	r0, r6
  sconf.param.accel.osr = (config & 0x300) >> 8;
 8013cb4:	7173      	strb	r3, [r6, #5]
  if((r = bma400_set_sensor_conf(&sconf, 1, &bma))) {c = 0x4; goto err;};
 8013cb6:	f7ef f9cb 	bl	8003050 <bma400_set_sensor_conf>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d164      	bne.n	8013d88 <BMA400_Init+0x13c>
  bma.delay_ms(100);
 8013cbe:	6963      	ldr	r3, [r4, #20]
 8013cc0:	3064      	adds	r0, #100	; 0x64

  /* Configure Wake Up Interrupt */
  struct bma400_device_conf dconf;
  dconf.type = BMA400_AUTOWAKEUP_INT;
 8013cc2:	ae04      	add	r6, sp, #16
  bma.delay_ms(100);
 8013cc4:	4798      	blx	r3

  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x5; goto err;};
 8013cc6:	0022      	movs	r2, r4
 8013cc8:	0029      	movs	r1, r5
 8013cca:	0030      	movs	r0, r6
  dconf.type = BMA400_AUTOWAKEUP_INT;
 8013ccc:	7035      	strb	r5, [r6, #0]
  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x5; goto err;};
 8013cce:	f7ef fee7 	bl	8003aa0 <bma400_get_device_conf>
 8013cd2:	2305      	movs	r3, #5
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d158      	bne.n	8013d8a <BMA400_Init+0x13e>

  dconf.param.wakeup.int_wkup_threshold = round(threshold * 256 / 9.80665 / 4 / 100);                            /* Acceleration distance from reference on any X/Y/Z: N*0.153m/s^2 (15.6mg/lsb) */
 8013cd8:	9b01      	ldr	r3, [sp, #4]
 8013cda:	0218      	lsls	r0, r3, #8
 8013cdc:	f7ee ff4a 	bl	8002b74 <__aeabi_i2d>
 8013ce0:	4a34      	ldr	r2, [pc, #208]	; (8013db4 <BMA400_Init+0x168>)
 8013ce2:	4b35      	ldr	r3, [pc, #212]	; (8013db8 <BMA400_Init+0x16c>)
 8013ce4:	f7ed fd10 	bl	8001708 <__aeabi_ddiv>
 8013ce8:	2200      	movs	r2, #0
 8013cea:	4b34      	ldr	r3, [pc, #208]	; (8013dbc <BMA400_Init+0x170>)
 8013cec:	f7ee f90e 	bl	8001f0c <__aeabi_dmul>
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	4b33      	ldr	r3, [pc, #204]	; (8013dc0 <BMA400_Init+0x174>)
 8013cf4:	f7ed fd08 	bl	8001708 <__aeabi_ddiv>
 8013cf8:	f002 f8b6 	bl	8015e68 <round>
 8013cfc:	f7ec fc42 	bl	8000584 <__aeabi_d2uiz>
  dconf.param.wakeup.sample_count = (config & 0xe) >> 1;                                                  /* Acceleration lasts atleast duration: N*40ms (25Hz samples) */
 8013d00:	2107      	movs	r1, #7
 8013d02:	107b      	asrs	r3, r7, #1
 8013d04:	400b      	ands	r3, r1
 8013d06:	70f3      	strb	r3, [r6, #3]
  dconf.param.wakeup.wakeup_ref_update = config & 1 ? BMA400_EVERY_TIME_UPDATE : BMA400_ONE_TIME_UPDATE;  /* Wake-up on delta acceleration, ignore gravity & orientation. */
 8013d08:	003b      	movs	r3, r7
  dconf.param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
  dconf.param.wakeup.wakeup_axes_en = (config & 0x70) >> 4; /* abs((actX >> 4) - refX) > thres ||
 8013d0a:	113f      	asrs	r7, r7, #4
  dconf.param.wakeup.wakeup_ref_update = config & 1 ? BMA400_EVERY_TIME_UPDATE : BMA400_ONE_TIME_UPDATE;  /* Wake-up on delta acceleration, ignore gravity & orientation. */
 8013d0c:	402b      	ands	r3, r5
 8013d0e:	195b      	adds	r3, r3, r5
  dconf.param.wakeup.int_wkup_threshold = round(threshold * 256 / 9.80665 / 4 / 100);                            /* Acceleration distance from reference on any X/Y/Z: N*0.153m/s^2 (15.6mg/lsb) */
 8013d10:	7170      	strb	r0, [r6, #5]
  dconf.param.wakeup.wakeup_axes_en = (config & 0x70) >> 4; /* abs((actX >> 4) - refX) > thres ||
 8013d12:	400f      	ands	r7, r1
                                                               abs((actY >> 4) - refY) > thres ||
                                                               abs((actZ >> 4) - refZ) > thres */

  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x6; goto err;};
 8013d14:	0022      	movs	r2, r4
 8013d16:	0029      	movs	r1, r5
 8013d18:	0030      	movs	r0, r6
  dconf.param.wakeup.wakeup_ref_update = config & 1 ? BMA400_EVERY_TIME_UPDATE : BMA400_ONE_TIME_UPDATE;  /* Wake-up on delta acceleration, ignore gravity & orientation. */
 8013d1a:	70b3      	strb	r3, [r6, #2]
  dconf.param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8013d1c:	7275      	strb	r5, [r6, #9]
  dconf.param.wakeup.wakeup_axes_en = (config & 0x70) >> 4; /* abs((actX >> 4) - refX) > thres ||
 8013d1e:	7137      	strb	r7, [r6, #4]
  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x6; goto err;};
 8013d20:	f7ef fd22 	bl	8003768 <bma400_set_device_conf>
 8013d24:	2306      	movs	r3, #6
 8013d26:	2800      	cmp	r0, #0
 8013d28:	d12f      	bne.n	8013d8a <BMA400_Init+0x13e>

  /* Configure Auto Low Power */
  dconf.type = BMA400_AUTO_LOW_POWER;
 8013d2a:	2702      	movs	r7, #2

  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x7; goto err;};
 8013d2c:	0022      	movs	r2, r4
 8013d2e:	0029      	movs	r1, r5
 8013d30:	0030      	movs	r0, r6
  dconf.type = BMA400_AUTO_LOW_POWER;
 8013d32:	7037      	strb	r7, [r6, #0]
  if((r = bma400_get_device_conf(&dconf, 1, &bma))) {c = 0x7; goto err;};
 8013d34:	f7ef feb4 	bl	8003aa0 <bma400_get_device_conf>
 8013d38:	2307      	movs	r3, #7
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d125      	bne.n	8013d8a <BMA400_Init+0x13e>

  dconf.param.auto_lp.auto_low_power_trigger = BMA400_AUTO_LP_TIMEOUT_EN;
 8013d3e:	3b03      	subs	r3, #3
  dconf.param.auto_lp.auto_lp_timeout_threshold = 0;
 8013d40:	80b0      	strh	r0, [r6, #4]

  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x8; goto err;};
 8013d42:	0022      	movs	r2, r4
 8013d44:	0029      	movs	r1, r5
 8013d46:	0030      	movs	r0, r6
  dconf.param.auto_lp.auto_low_power_trigger = BMA400_AUTO_LP_TIMEOUT_EN;
 8013d48:	70b3      	strb	r3, [r6, #2]
  if((r = bma400_set_device_conf(&dconf, 1, &bma))) {c = 0x8; goto err;};
 8013d4a:	f7ef fd0d 	bl	8003768 <bma400_set_device_conf>
 8013d4e:	2308      	movs	r3, #8
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d11a      	bne.n	8013d8a <BMA400_Init+0x13e>

  /* Configure Interrupt Mappings */
  struct bma400_int_enable iconf[2];
  iconf[0].type = BMA400_LATCH_INT_EN;
  iconf[0].conf = BMA400_DISABLE;
 8013d54:	2300      	movs	r3, #0
  iconf[0].type = BMA400_LATCH_INT_EN;
 8013d56:	2206      	movs	r2, #6
 8013d58:	a803      	add	r0, sp, #12
  iconf[0].conf = BMA400_DISABLE;
 8013d5a:	7043      	strb	r3, [r0, #1]
  iconf[1].type = BMA400_AUTO_WAKEUP_EN;
 8013d5c:	330b      	adds	r3, #11
  iconf[0].type = BMA400_LATCH_INT_EN;
 8013d5e:	7002      	strb	r2, [r0, #0]
  iconf[1].conf = BMA400_ENABLE;

  if((r = bma400_enable_interrupt(iconf, 2, &bma))) {c = 0x9; goto err;};
 8013d60:	0039      	movs	r1, r7
 8013d62:	0022      	movs	r2, r4
  iconf[1].type = BMA400_AUTO_WAKEUP_EN;
 8013d64:	7083      	strb	r3, [r0, #2]
  iconf[1].conf = BMA400_ENABLE;
 8013d66:	70c5      	strb	r5, [r0, #3]
  if((r = bma400_enable_interrupt(iconf, 2, &bma))) {c = 0x9; goto err;};
 8013d68:	f7ef ff79 	bl	8003c5e <bma400_enable_interrupt>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d112      	bne.n	8013d96 <BMA400_Init+0x14a>
  bma.delay_ms(100);
 8013d70:	6963      	ldr	r3, [r4, #20]
 8013d72:	3064      	adds	r0, #100	; 0x64
 8013d74:	4798      	blx	r3

  /* Configure Power Mode */
  if((r = bma400_set_power_mode(BMA400_LOW_POWER_MODE, &bma))) {c = 0xa; goto err;};
 8013d76:	0021      	movs	r1, r4
 8013d78:	0028      	movs	r0, r5
 8013d7a:	f7ef f8dd 	bl	8002f38 <bma400_set_power_mode>
 8013d7e:	230a      	movs	r3, #10
 8013d80:	2800      	cmp	r0, #0
 8013d82:	d102      	bne.n	8013d8a <BMA400_Init+0x13e>

  return;
err:
  DEBUG_PRINTF("SEN BMA400 ERR ret:0x%x cond:0x%x Init Failed!\n", r, c);
  return;
}
 8013d84:	b00d      	add	sp, #52	; 0x34
 8013d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((r = bma400_set_sensor_conf(&sconf, 1, &bma))) {c = 0x4; goto err;};
 8013d88:	2304      	movs	r3, #4
  DEBUG_PRINTF("SEN BMA400 ERR ret:0x%x cond:0x%x Init Failed!\n", r, c);
 8013d8a:	0002      	movs	r2, r0
 8013d8c:	490d      	ldr	r1, [pc, #52]	; (8013dc4 <BMA400_Init+0x178>)
 8013d8e:	2000      	movs	r0, #0
 8013d90:	f7f8 f901 	bl	800bf96 <SEGGER_RTT_printf>
  return;
 8013d94:	e7f6      	b.n	8013d84 <BMA400_Init+0x138>
  if((r = bma400_enable_interrupt(iconf, 2, &bma))) {c = 0x9; goto err;};
 8013d96:	2309      	movs	r3, #9
 8013d98:	e7f7      	b.n	8013d8a <BMA400_Init+0x13e>
 8013d9a:	46c0      	nop			; (mov r8, r8)
 8013d9c:	200019e4 	.word	0x200019e4
 8013da0:	200019c8 	.word	0x200019c8
 8013da4:	20001898 	.word	0x20001898
 8013da8:	08003d77 	.word	0x08003d77
 8013dac:	08003da9 	.word	0x08003da9
 8013db0:	08003d81 	.word	0x08003d81
 8013db4:	3a92a305 	.word	0x3a92a305
 8013db8:	40239d01 	.word	0x40239d01
 8013dbc:	3fd00000 	.word	0x3fd00000
 8013dc0:	40590000 	.word	0x40590000
 8013dc4:	0801a9b6 	.word	0x0801a9b6

08013dc8 <BMA400_Read>:

void BMA400_Read(void) {
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	b086      	sub	sp, #24
  struct bma400_sensor_data data;
  struct bma400_device_conf conf;
  conf.type = BMA400_AUTOWAKEUP_INT;
 8013dcc:	466b      	mov	r3, sp
 8013dce:	2401      	movs	r4, #1

  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma);
 8013dd0:	4e2c      	ldr	r6, [pc, #176]	; (8013e84 <BMA400_Read+0xbc>)
 8013dd2:	ad03      	add	r5, sp, #12
 8013dd4:	0032      	movs	r2, r6
 8013dd6:	0029      	movs	r1, r5
 8013dd8:	2000      	movs	r0, #0
  conf.type = BMA400_AUTOWAKEUP_INT;
 8013dda:	701c      	strb	r4, [r3, #0]
  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma);
 8013ddc:	f7ef f8d6 	bl	8002f8c <bma400_get_accel_data>
  bma400_get_device_conf(&conf, 1, &bma);
 8013de0:	0032      	movs	r2, r6
 8013de2:	0021      	movs	r1, r4
 8013de4:	4668      	mov	r0, sp
 8013de6:	f7ef fe5b 	bl	8003aa0 <bma400_get_device_conf>
  bma400_get_interrupt_status(&bma400.status, &bma);
 8013dea:	4c27      	ldr	r4, [pc, #156]	; (8013e88 <BMA400_Read+0xc0>)
 8013dec:	0031      	movs	r1, r6
 8013dee:	1d20      	adds	r0, r4, #4
 8013df0:	f7ef ff1a 	bl	8003c28 <bma400_get_interrupt_status>

  bma400.raw_x = data.x;
 8013df4:	2300      	movs	r3, #0
 8013df6:	5ee8      	ldrsh	r0, [r5, r3]
  bma400.raw_y = data.y;
  bma400.raw_z = data.z;
  bma400.raw_x_ref = conf.param.wakeup.int_wkup_ref_x;
  bma400.raw_y_ref = conf.param.wakeup.int_wkup_ref_y;
  bma400.raw_z_ref = conf.param.wakeup.int_wkup_ref_z;
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013df8:	2208      	movs	r2, #8
  bma400.raw_x = data.x;
 8013dfa:	8260      	strh	r0, [r4, #18]
  bma400.raw_y = data.y;
 8013dfc:	886b      	ldrh	r3, [r5, #2]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013dfe:	1100      	asrs	r0, r0, #4
  bma400.raw_y = data.y;
 8013e00:	82a3      	strh	r3, [r4, #20]
  bma400.raw_z = data.z;
 8013e02:	88ab      	ldrh	r3, [r5, #4]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013e04:	2580      	movs	r5, #128	; 0x80
  bma400.raw_z = data.z;
 8013e06:	82e3      	strh	r3, [r4, #22]
  bma400.raw_x_ref = conf.param.wakeup.int_wkup_ref_x;
 8013e08:	466b      	mov	r3, sp
 8013e0a:	88db      	ldrh	r3, [r3, #6]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013e0c:	05ed      	lsls	r5, r5, #23
  bma400.raw_x_ref = conf.param.wakeup.int_wkup_ref_x;
 8013e0e:	8323      	strh	r3, [r4, #24]
  bma400.raw_z_ref = conf.param.wakeup.int_wkup_ref_z;
 8013e10:	466b      	mov	r3, sp
 8013e12:	7a1b      	ldrb	r3, [r3, #8]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013e14:	1c29      	adds	r1, r5, #0
  bma400.raw_z_ref = conf.param.wakeup.int_wkup_ref_z;
 8013e16:	76a3      	strb	r3, [r4, #26]
  bma400.fix_x = lsb_to_ms2(bma400.raw_x >> 4, 2, 8);
 8013e18:	f7ef ffda 	bl	8003dd0 <lsb_to_ms2>
 8013e1c:	f7ed f888 	bl	8000f30 <__aeabi_f2iz>
 8013e20:	80e0      	strh	r0, [r4, #6]
  bma400.fix_y = lsb_to_ms2(bma400.raw_y >> 4, 2, 8);
 8013e22:	2314      	movs	r3, #20
 8013e24:	5ee0      	ldrsh	r0, [r4, r3]
 8013e26:	1c29      	adds	r1, r5, #0
 8013e28:	2208      	movs	r2, #8
 8013e2a:	1100      	asrs	r0, r0, #4
 8013e2c:	f7ef ffd0 	bl	8003dd0 <lsb_to_ms2>
 8013e30:	f7ed f87e 	bl	8000f30 <__aeabi_f2iz>
 8013e34:	8120      	strh	r0, [r4, #8]
  bma400.fix_z = lsb_to_ms2(bma400.raw_z >> 4, 2, 8);
 8013e36:	2316      	movs	r3, #22
 8013e38:	5ee0      	ldrsh	r0, [r4, r3]
 8013e3a:	1c29      	adds	r1, r5, #0
 8013e3c:	2208      	movs	r2, #8
 8013e3e:	1100      	asrs	r0, r0, #4
 8013e40:	f7ef ffc6 	bl	8003dd0 <lsb_to_ms2>
 8013e44:	f7ed f874 	bl	8000f30 <__aeabi_f2iz>
 8013e48:	8160      	strh	r0, [r4, #10]
  bma400.fix_x_ref = lsb_to_ms2(bma400.raw_x_ref, 2, 8);
 8013e4a:	2018      	movs	r0, #24
 8013e4c:	1c29      	adds	r1, r5, #0
 8013e4e:	2208      	movs	r2, #8
 8013e50:	5620      	ldrsb	r0, [r4, r0]
 8013e52:	f7ef ffbd 	bl	8003dd0 <lsb_to_ms2>
 8013e56:	f7ed f86b 	bl	8000f30 <__aeabi_f2iz>
 8013e5a:	81a0      	strh	r0, [r4, #12]
  bma400.fix_y_ref = lsb_to_ms2(bma400.raw_y_ref, 2, 8);
 8013e5c:	2019      	movs	r0, #25
 8013e5e:	1c29      	adds	r1, r5, #0
 8013e60:	2208      	movs	r2, #8
 8013e62:	5620      	ldrsb	r0, [r4, r0]
 8013e64:	f7ef ffb4 	bl	8003dd0 <lsb_to_ms2>
 8013e68:	f7ed f862 	bl	8000f30 <__aeabi_f2iz>
 8013e6c:	81e0      	strh	r0, [r4, #14]
  bma400.fix_z_ref = lsb_to_ms2(bma400.raw_z_ref, 2, 8);
 8013e6e:	201a      	movs	r0, #26
 8013e70:	2208      	movs	r2, #8
 8013e72:	1c29      	adds	r1, r5, #0
 8013e74:	5620      	ldrsb	r0, [r4, r0]
 8013e76:	f7ef ffab 	bl	8003dd0 <lsb_to_ms2>
 8013e7a:	f7ed f859 	bl	8000f30 <__aeabi_f2iz>
 8013e7e:	8220      	strh	r0, [r4, #16]
}
 8013e80:	b006      	add	sp, #24
 8013e82:	bd70      	pop	{r4, r5, r6, pc}
 8013e84:	200019c8 	.word	0x200019c8
 8013e88:	200019e4 	.word	0x200019e4

08013e8c <SFH7776_Init>:
  int32_t r, c = 0;
  uint8_t val[4];
  uint32_t als_vis_th = fminf(roundf((uint32_t)GAIN_VIS * upper_thres / 8 / 4), UINT16_MAX);
  uint32_t als_vis_tl = fminf(roundf((uint32_t)GAIN_VIS * lower_thres / 8 / 4), UINT16_MAX);

  als_vis_th = GAIN_VIS * upper_thres / 8 / 4, als_vis_th = als_vis_th > UINT16_MAX ? UINT16_MAX : als_vis_th;
 8013e8c:	2380      	movs	r3, #128	; 0x80
void SFH7776_Init(uint16_t upper_thres, uint16_t lower_thres) {
 8013e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  als_vis_th = GAIN_VIS * upper_thres / 8 / 4, als_vis_th = als_vis_th > UINT16_MAX ? UINT16_MAX : als_vis_th;
 8013e90:	025b      	lsls	r3, r3, #9
void SFH7776_Init(uint16_t upper_thres, uint16_t lower_thres) {
 8013e92:	b089      	sub	sp, #36	; 0x24
  als_vis_th = GAIN_VIS * upper_thres / 8 / 4, als_vis_th = als_vis_th > UINT16_MAX ? UINT16_MAX : als_vis_th;
 8013e94:	0046      	lsls	r6, r0, #1
 8013e96:	429e      	cmp	r6, r3
 8013e98:	d300      	bcc.n	8013e9c <SFH7776_Init+0x10>
 8013e9a:	4e3d      	ldr	r6, [pc, #244]	; (8013f90 <SFH7776_Init+0x104>)
  als_vis_tl = GAIN_VIS * lower_thres / 8 / 4, als_vis_tl = als_vis_tl > UINT16_MAX ? UINT16_MAX : als_vis_tl;
 8013e9c:	004a      	lsls	r2, r1, #1
 8013e9e:	9205      	str	r2, [sp, #20]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d301      	bcc.n	8013ea8 <SFH7776_Init+0x1c>
 8013ea4:	4b3a      	ldr	r3, [pc, #232]	; (8013f90 <SFH7776_Init+0x104>)
 8013ea6:	9305      	str	r3, [sp, #20]

  /* Communicate via NFC that threshold was lowered to maximum */
  DevCfg.sfh7776_threshold_upper = 8 * 4 * als_vis_th / GAIN_VIS;
 8013ea8:	4b3a      	ldr	r3, [pc, #232]	; (8013f94 <SFH7776_Init+0x108>)
 8013eaa:	0872      	lsrs	r2, r6, #1
 8013eac:	0019      	movs	r1, r3
 8013eae:	3166      	adds	r1, #102	; 0x66
 8013eb0:	800a      	strh	r2, [r1, #0]
  DevCfg.sfh7776_threshold_lower = 8 * 4 * als_vis_tl / GAIN_VIS;
 8013eb2:	9a05      	ldr	r2, [sp, #20]
 8013eb4:	3368      	adds	r3, #104	; 0x68
 8013eb6:	0852      	lsrs	r2, r2, #1
 8013eb8:	801a      	strh	r2, [r3, #0]

  // SYSTEM_CONTROL: reset and check identity
  *val = 0x80;
 8013eba:	2380      	movs	r3, #128	; 0x80
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_SYSTEM_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x1; goto err;};
 8013ebc:	2701      	movs	r7, #1
  *val = 0x80;
 8013ebe:	ad07      	add	r5, sp, #28
 8013ec0:	702b      	strb	r3, [r5, #0]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_SYSTEM_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x1; goto err;};
 8013ec2:	3b1c      	subs	r3, #28
 8013ec4:	9302      	str	r3, [sp, #8]
 8013ec6:	2240      	movs	r2, #64	; 0x40
 8013ec8:	003b      	movs	r3, r7
 8013eca:	2172      	movs	r1, #114	; 0x72
 8013ecc:	4832      	ldr	r0, [pc, #200]	; (8013f98 <SFH7776_Init+0x10c>)
 8013ece:	9701      	str	r7, [sp, #4]
 8013ed0:	9500      	str	r5, [sp, #0]
 8013ed2:	f7f9 fd93 	bl	800d9fc <HAL_I2C_Mem_Write>
 8013ed6:	003b      	movs	r3, r7
 8013ed8:	1e04      	subs	r4, r0, #0
 8013eda:	d14d      	bne.n	8013f78 <SFH7776_Init+0xec>
  if((r = HAL_I2C_Mem_Read(&hi2c1, 0x72, SFH7776_SYSTEM_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x2; goto err;};
 8013edc:	3363      	adds	r3, #99	; 0x63
 8013ede:	9302      	str	r3, [sp, #8]
 8013ee0:	2240      	movs	r2, #64	; 0x40
 8013ee2:	003b      	movs	r3, r7
 8013ee4:	2172      	movs	r1, #114	; 0x72
 8013ee6:	482c      	ldr	r0, [pc, #176]	; (8013f98 <SFH7776_Init+0x10c>)
 8013ee8:	9701      	str	r7, [sp, #4]
 8013eea:	9500      	str	r5, [sp, #0]
 8013eec:	f7f9 fe40 	bl	800db70 <HAL_I2C_Mem_Read>
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	1e04      	subs	r4, r0, #0
 8013ef4:	d140      	bne.n	8013f78 <SFH7776_Init+0xec>
  HAL_Delay(100);
 8013ef6:	2064      	movs	r0, #100	; 0x64
 8013ef8:	f7f8 fbd6 	bl	800c6a8 <HAL_Delay>
  if(*val != 0x09) {c = 0x3; goto err;};
 8013efc:	782a      	ldrb	r2, [r5, #0]
 8013efe:	2303      	movs	r3, #3
 8013f00:	2a09      	cmp	r2, #9
 8013f02:	d139      	bne.n	8013f78 <SFH7776_Init+0xec>

  // MODE_CONTROL: PS disabled, ALS enabled and measure for 100ms every 400ms.
  // ALS_PS_CONTROL: ALS_VIS and ALS_IR use x64 gain.
  static_assert(T_INT_ALS == 100 && GAIN_VIS == 64 && GAIN_IR == 64, "");
  val[0] = 0x08, val[1] = 0x28;
 8013f04:	3305      	adds	r3, #5
 8013f06:	702b      	strb	r3, [r5, #0]
 8013f08:	3320      	adds	r3, #32
 8013f0a:	706b      	strb	r3, [r5, #1]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_MODE_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 2, 100))) {c = 0x4; goto err;};
 8013f0c:	333c      	adds	r3, #60	; 0x3c
 8013f0e:	9302      	str	r3, [sp, #8]
 8013f10:	3b62      	subs	r3, #98	; 0x62
 8013f12:	9301      	str	r3, [sp, #4]
 8013f14:	2172      	movs	r1, #114	; 0x72
 8013f16:	003b      	movs	r3, r7
 8013f18:	481f      	ldr	r0, [pc, #124]	; (8013f98 <SFH7776_Init+0x10c>)
 8013f1a:	9500      	str	r5, [sp, #0]
 8013f1c:	3238      	adds	r2, #56	; 0x38
 8013f1e:	f7f9 fd6d 	bl	800d9fc <HAL_I2C_Mem_Write>
 8013f22:	2304      	movs	r3, #4
 8013f24:	1e04      	subs	r4, r0, #0
 8013f26:	d127      	bne.n	8013f78 <SFH7776_Init+0xec>

  // ALS_VIS_TH: ALS upper threshold
  // ALS_VIS_TL: ALS lower threshold
  val[0] = als_vis_th, val[1] = als_vis_th >> 8, val[2] = als_vis_tl, val[3] = als_vis_tl >> 8;
 8013f28:	9905      	ldr	r1, [sp, #20]
 8013f2a:	702e      	strb	r6, [r5, #0]
 8013f2c:	0a0a      	lsrs	r2, r1, #8
 8013f2e:	70ea      	strb	r2, [r5, #3]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_ALS_VIS_TH_LSB, I2C_MEMADD_SIZE_8BIT, val, 4, 100))) {c = 0x5; goto err;};
 8013f30:	2264      	movs	r2, #100	; 0x64
  val[0] = als_vis_th, val[1] = als_vis_th >> 8, val[2] = als_vis_tl, val[3] = als_vis_tl >> 8;
 8013f32:	0a36      	lsrs	r6, r6, #8
 8013f34:	70a9      	strb	r1, [r5, #2]
 8013f36:	706e      	strb	r6, [r5, #1]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_ALS_VIS_TH_LSB, I2C_MEMADD_SIZE_8BIT, val, 4, 100))) {c = 0x5; goto err;};
 8013f38:	2172      	movs	r1, #114	; 0x72
 8013f3a:	9202      	str	r2, [sp, #8]
 8013f3c:	9301      	str	r3, [sp, #4]
 8013f3e:	4816      	ldr	r0, [pc, #88]	; (8013f98 <SFH7776_Init+0x10c>)
 8013f40:	003b      	movs	r3, r7
 8013f42:	9500      	str	r5, [sp, #0]
 8013f44:	3a15      	subs	r2, #21
 8013f46:	f7f9 fd59 	bl	800d9fc <HAL_I2C_Mem_Write>
 8013f4a:	2305      	movs	r3, #5
 8013f4c:	1e04      	subs	r4, r0, #0
 8013f4e:	d113      	bne.n	8013f78 <SFH7776_Init+0xec>

  // INTERRUPT_CONTROL: ALS only, non-latched.
  *val = 0x06;
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013f50:	2264      	movs	r2, #100	; 0x64
  *val = 0x06;
 8013f52:	2606      	movs	r6, #6
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013f54:	003b      	movs	r3, r7
  *val = 0x06;
 8013f56:	702e      	strb	r6, [r5, #0]
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013f58:	2172      	movs	r1, #114	; 0x72
 8013f5a:	9202      	str	r2, [sp, #8]
 8013f5c:	480e      	ldr	r0, [pc, #56]	; (8013f98 <SFH7776_Init+0x10c>)
 8013f5e:	9701      	str	r7, [sp, #4]
 8013f60:	9500      	str	r5, [sp, #0]
 8013f62:	3a1a      	subs	r2, #26
 8013f64:	f7f9 fd4a 	bl	800d9fc <HAL_I2C_Mem_Write>
 8013f68:	1e04      	subs	r4, r0, #0
 8013f6a:	d104      	bne.n	8013f76 <SFH7776_Init+0xea>

  sfh7776.als_vis_tl = als_vis_tl;
 8013f6c:	4b0b      	ldr	r3, [pc, #44]	; (8013f9c <SFH7776_Init+0x110>)
 8013f6e:	9a05      	ldr	r2, [sp, #20]
 8013f70:	809a      	strh	r2, [r3, #4]

  return;
err:
  DEBUG_PRINTF("SEN SFH7776 ERR ret:0x%x cond:0x%x val:0x%02x err:0x%x Init Failed!\n", r, c, *val, hi2c1.ErrorCode);
}
 8013f72:	b009      	add	sp, #36	; 0x24
 8013f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((r = HAL_I2C_Mem_Write(&hi2c1, 0x72, SFH7776_INTERRUPT_CONTROL, I2C_MEMADD_SIZE_8BIT, val, 1, 100))) {c = 0x6; goto err;};
 8013f76:	0033      	movs	r3, r6
  DEBUG_PRINTF("SEN SFH7776 ERR ret:0x%x cond:0x%x val:0x%02x err:0x%x Init Failed!\n", r, c, *val, hi2c1.ErrorCode);
 8013f78:	4a07      	ldr	r2, [pc, #28]	; (8013f98 <SFH7776_Init+0x10c>)
 8013f7a:	4909      	ldr	r1, [pc, #36]	; (8013fa0 <SFH7776_Init+0x114>)
 8013f7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013f7e:	2000      	movs	r0, #0
 8013f80:	9201      	str	r2, [sp, #4]
 8013f82:	aa07      	add	r2, sp, #28
 8013f84:	7812      	ldrb	r2, [r2, #0]
 8013f86:	9200      	str	r2, [sp, #0]
 8013f88:	0022      	movs	r2, r4
 8013f8a:	f7f8 f804 	bl	800bf96 <SEGGER_RTT_printf>
 8013f8e:	e7f0      	b.n	8013f72 <SFH7776_Init+0xe6>
 8013f90:	0000ffff 	.word	0x0000ffff
 8013f94:	200000e0 	.word	0x200000e0
 8013f98:	20001898 	.word	0x20001898
 8013f9c:	20001a08 	.word	0x20001a08
 8013fa0:	0801a9e6 	.word	0x0801a9e6

08013fa4 <SFH7776_Read>:
 */
void SFH7776_Read(void) {
  uint8_t buf[4];
  float lux;

  HAL_I2C_Mem_Read(&hi2c1, 0x72, 0x46, I2C_MEMADD_SIZE_8BIT, buf, sizeof buf, 100);
 8013fa4:	2364      	movs	r3, #100	; 0x64
void SFH7776_Read(void) {
 8013fa6:	b510      	push	{r4, lr}
 8013fa8:	b086      	sub	sp, #24
  HAL_I2C_Mem_Read(&hi2c1, 0x72, 0x46, I2C_MEMADD_SIZE_8BIT, buf, sizeof buf, 100);
 8013faa:	ac05      	add	r4, sp, #20
 8013fac:	9302      	str	r3, [sp, #8]
 8013fae:	3b60      	subs	r3, #96	; 0x60
 8013fb0:	9301      	str	r3, [sp, #4]
 8013fb2:	2246      	movs	r2, #70	; 0x46
 8013fb4:	2172      	movs	r1, #114	; 0x72
 8013fb6:	9400      	str	r4, [sp, #0]
 8013fb8:	3b03      	subs	r3, #3
 8013fba:	4806      	ldr	r0, [pc, #24]	; (8013fd4 <SFH7776_Read+0x30>)
 8013fbc:	f7f9 fdd8 	bl	800db70 <HAL_I2C_Mem_Read>
  const uint16_t ALS_VIS = buf[1] << 8 | buf[0];
 8013fc0:	8822      	ldrh	r2, [r4, #0]
  /*
   * gcc discards redundant calculations, like no floats invoked. Demonstrated by:
   * arm-none-eabi-objdump --visualize-jumps=extended-color -FCz --disassemble=SFH7776_Read ./stx-fw.elf
   */

  sfh7776.lux = 8 * 4 * ALS_VIS * 100 / T_INT_ALS / GAIN_VIS;
 8013fc2:	4b05      	ldr	r3, [pc, #20]	; (8013fd8 <SFH7776_Read+0x34>)
 8013fc4:	8861      	ldrh	r1, [r4, #2]
  lux = 8   * 4     * ALS_VIS / GAIN_VIS; // Trial & Error         (cover:236 lux; exposed: 2957 lux)
 8013fc6:	1050      	asrs	r0, r2, #1
  sfh7776.lux = 8 * 4 * ALS_VIS * 100 / T_INT_ALS / GAIN_VIS;
 8013fc8:	80d8      	strh	r0, [r3, #6]
  sfh7776.als_vis = ALS_VIS;
 8013fca:	801a      	strh	r2, [r3, #0]
  sfh7776.als_ir = ALS_IR;
 8013fcc:	8059      	strh	r1, [r3, #2]
}
 8013fce:	b006      	add	sp, #24
 8013fd0:	bd10      	pop	{r4, pc}
 8013fd2:	46c0      	nop			; (mov r8, r8)
 8013fd4:	20001898 	.word	0x20001898
 8013fd8:	20001a08 	.word	0x20001a08

08013fdc <HDC2080_Init>:
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
  int32_t r, c;
  uint8_t buf[6];

  /* Turn off Interrupt handler */
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013fdc:	2208      	movs	r2, #8
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013fde:	b5f0      	push	{r4, r5, r6, r7, lr}
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013fe0:	4e3c      	ldr	r6, [pc, #240]	; (80140d4 <HDC2080_Init+0xf8>)
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013fe2:	b089      	sub	sp, #36	; 0x24
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013fe4:	6833      	ldr	r3, [r6, #0]
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8013fe6:	9105      	str	r1, [sp, #20]
  CLEAR_BIT(EXTI->IMR, TEMP_Int_Pin);
 8013fe8:	4393      	bics	r3, r2
 8013fea:	6033      	str	r3, [r6, #0]

  // HDC2080_CONFIG: reset peripheral
  *buf = 0x80;
 8013fec:	2380      	movs	r3, #128	; 0x80
 8013fee:	ac06      	add	r4, sp, #24
 8013ff0:	7023      	strb	r3, [r4, #0]
  r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_CONFIG, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8013ff2:	4f39      	ldr	r7, [pc, #228]	; (80140d8 <HDC2080_Init+0xfc>)
 8013ff4:	3b4e      	subs	r3, #78	; 0x4e
 8013ff6:	9302      	str	r3, [sp, #8]
 8013ff8:	3b31      	subs	r3, #49	; 0x31
 8013ffa:	9301      	str	r3, [sp, #4]
 8013ffc:	2180      	movs	r1, #128	; 0x80
 8013ffe:	3206      	adds	r2, #6
void HDC2080_Init(enum HDC2080_Threshold type, int32_t thres) {
 8014000:	0005      	movs	r5, r0
  r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_CONFIG, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8014002:	9400      	str	r4, [sp, #0]
 8014004:	0038      	movs	r0, r7
 8014006:	f7f9 fcf9 	bl	800d9fc <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 801400a:	2001      	movs	r0, #1
 801400c:	f7f8 fb4c 	bl	800c6a8 <HAL_Delay>

  // HDC2080_INT_ENABLE: enable specific threshold interrupt
  *buf =
 8014010:	2320      	movs	r3, #32
 8014012:	2d00      	cmp	r5, #0
 8014014:	d006      	beq.n	8014024 <HDC2080_Init+0x48>
 8014016:	18db      	adds	r3, r3, r3
 8014018:	2d01      	cmp	r5, #1
 801401a:	d003      	beq.n	8014024 <HDC2080_Init+0x48>
 801401c:	3340      	adds	r3, #64	; 0x40
 801401e:	2d02      	cmp	r5, #2
 8014020:	d000      	beq.n	8014024 <HDC2080_Init+0x48>
 8014022:	3b70      	subs	r3, #112	; 0x70
 8014024:	7023      	strb	r3, [r4, #0]
    type == HDC2080_TEMPERATURE_LOW  ? 0x20 :
    type == HDC2080_TEMPERATURE_HIGH ? 0x40 :
    type == HDC2080_HUMIDITY_LOW  ? 0x80 :
    type == HDC2080_HUMIDITY_HIGH ? 0x10 : 0x10;
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, buf, 1, 50))) {c = 0x2; goto err;};
 8014026:	2332      	movs	r3, #50	; 0x32
 8014028:	9302      	str	r3, [sp, #8]
 801402a:	3b31      	subs	r3, #49	; 0x31
 801402c:	2207      	movs	r2, #7
 801402e:	2180      	movs	r1, #128	; 0x80
 8014030:	0038      	movs	r0, r7
 8014032:	9301      	str	r3, [sp, #4]
 8014034:	9400      	str	r4, [sp, #0]
 8014036:	f7f9 fce1 	bl	800d9fc <HAL_I2C_Mem_Write>
 801403a:	1e02      	subs	r2, r0, #0
 801403c:	d144      	bne.n	80140c8 <HDC2080_Init+0xec>

  // HDC2080_*_TL: Configure specific threshold
  buf[0] = type != HDC2080_TEMPERATURE_LOW  ? 0x00 : (thres + 4000) * 256 / 16500;
 801403e:	2d00      	cmp	r5, #0
 8014040:	d108      	bne.n	8014054 <HDC2080_Init+0x78>
 8014042:	22fa      	movs	r2, #250	; 0xfa
 8014044:	9b05      	ldr	r3, [sp, #20]
 8014046:	0112      	lsls	r2, r2, #4
 8014048:	1898      	adds	r0, r3, r2
 801404a:	4924      	ldr	r1, [pc, #144]	; (80140dc <HDC2080_Init+0x100>)
 801404c:	0200      	lsls	r0, r0, #8
 801404e:	f7ec f915 	bl	800027c <__divsi3>
 8014052:	b2c2      	uxtb	r2, r0
  buf[1] = type != HDC2080_TEMPERATURE_HIGH ? 0xff : (thres + 4000) * 256 / 16500;
 8014054:	20ff      	movs	r0, #255	; 0xff
  buf[0] = type != HDC2080_TEMPERATURE_LOW  ? 0x00 : (thres + 4000) * 256 / 16500;
 8014056:	7022      	strb	r2, [r4, #0]
  buf[1] = type != HDC2080_TEMPERATURE_HIGH ? 0xff : (thres + 4000) * 256 / 16500;
 8014058:	2d01      	cmp	r5, #1
 801405a:	d108      	bne.n	801406e <HDC2080_Init+0x92>
 801405c:	22fa      	movs	r2, #250	; 0xfa
 801405e:	9b05      	ldr	r3, [sp, #20]
 8014060:	0112      	lsls	r2, r2, #4
 8014062:	1898      	adds	r0, r3, r2
 8014064:	491d      	ldr	r1, [pc, #116]	; (80140dc <HDC2080_Init+0x100>)
 8014066:	0200      	lsls	r0, r0, #8
 8014068:	f7ec f908 	bl	800027c <__divsi3>
 801406c:	b2c0      	uxtb	r0, r0
 801406e:	7060      	strb	r0, [r4, #1]
  buf[2] = type != HDC2080_HUMIDITY_LOW     ? 0x00 : thres * 256 / 100;
 8014070:	2000      	movs	r0, #0
 8014072:	2d02      	cmp	r5, #2
 8014074:	d105      	bne.n	8014082 <HDC2080_Init+0xa6>
 8014076:	9b05      	ldr	r3, [sp, #20]
 8014078:	2164      	movs	r1, #100	; 0x64
 801407a:	0218      	lsls	r0, r3, #8
 801407c:	f7ec f8fe 	bl	800027c <__divsi3>
 8014080:	b2c0      	uxtb	r0, r0
 8014082:	70a0      	strb	r0, [r4, #2]
  buf[3] = type != HDC2080_HUMIDITY_HIGH    ? 0xff : thres * 256 / 100;
 8014084:	20ff      	movs	r0, #255	; 0xff
 8014086:	2d03      	cmp	r5, #3
 8014088:	d105      	bne.n	8014096 <HDC2080_Init+0xba>
 801408a:	9b05      	ldr	r3, [sp, #20]
 801408c:	2164      	movs	r1, #100	; 0x64
 801408e:	0218      	lsls	r0, r3, #8
 8014090:	f7ec f8f4 	bl	800027c <__divsi3>
 8014094:	b2c0      	uxtb	r0, r0

  // HDC2080_CONFIG: 1Hz Auto measure mode, Enable interrupt (non-latched; high active level)
  buf[4] = 0x01 | 0x02 | 0x04 | 0x50;
 8014096:	2357      	movs	r3, #87	; 0x57
 8014098:	7123      	strb	r3, [r4, #4]

  // HDC2080_MEASURE: Measure humidity and temperature with 9-bit resolution, Start Measurement.
  buf[5] = 0x80 | 0x20 | 0x01;
 801409a:	334a      	adds	r3, #74	; 0x4a
 801409c:	7163      	strb	r3, [r4, #5]
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP_TL, I2C_MEMADD_SIZE_8BIT, buf, 6, 50))) {c = 0x3; goto err;};
 801409e:	3b6f      	subs	r3, #111	; 0x6f
  buf[3] = type != HDC2080_HUMIDITY_HIGH    ? 0xff : thres * 256 / 100;
 80140a0:	70e0      	strb	r0, [r4, #3]
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP_TL, I2C_MEMADD_SIZE_8BIT, buf, 6, 50))) {c = 0x3; goto err;};
 80140a2:	9302      	str	r3, [sp, #8]
 80140a4:	3b2c      	subs	r3, #44	; 0x2c
 80140a6:	220a      	movs	r2, #10
 80140a8:	9301      	str	r3, [sp, #4]
 80140aa:	2180      	movs	r1, #128	; 0x80
 80140ac:	3b05      	subs	r3, #5
 80140ae:	0038      	movs	r0, r7
 80140b0:	9400      	str	r4, [sp, #0]
 80140b2:	f7f9 fca3 	bl	800d9fc <HAL_I2C_Mem_Write>
 80140b6:	2303      	movs	r3, #3
 80140b8:	1e02      	subs	r2, r0, #0
 80140ba:	d106      	bne.n	80140ca <HDC2080_Init+0xee>
  goto exit;
err:
  DEBUG_PRINTF("SEN HDC2080 ERR ret:0x%x cond:0x%x Init Failed\n", r, c);
exit:
  /* Enable Interrupt Handler */
  SET_BIT(EXTI->IMR, TEMP_Int_Pin);
 80140bc:	2308      	movs	r3, #8
 80140be:	6832      	ldr	r2, [r6, #0]
 80140c0:	4313      	orrs	r3, r2
 80140c2:	6033      	str	r3, [r6, #0]
}
 80140c4:	b009      	add	sp, #36	; 0x24
 80140c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((r = HAL_I2C_Mem_Write(&hi2c1, HDC2080_I2C_ADDR, HDC2080_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, buf, 1, 50))) {c = 0x2; goto err;};
 80140c8:	2302      	movs	r3, #2
  DEBUG_PRINTF("SEN HDC2080 ERR ret:0x%x cond:0x%x Init Failed\n", r, c);
 80140ca:	4905      	ldr	r1, [pc, #20]	; (80140e0 <HDC2080_Init+0x104>)
 80140cc:	2000      	movs	r0, #0
 80140ce:	f7f7 ff62 	bl	800bf96 <SEGGER_RTT_printf>
 80140d2:	e7f3      	b.n	80140bc <HDC2080_Init+0xe0>
 80140d4:	40010400 	.word	0x40010400
 80140d8:	20001898 	.word	0x20001898
 80140dc:	00004074 	.word	0x00004074
 80140e0:	0801aa2b 	.word	0x0801aa2b

080140e4 <HDC2080_Read>:

void HDC2080_Read(void) {
  int32_t r;
  uint8_t buf[5];
  if(r = HAL_I2C_Mem_Read(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP, I2C_MEMADD_SIZE_8BIT, buf, 5, 50), r != HAL_OK) {
 80140e4:	2332      	movs	r3, #50	; 0x32
void HDC2080_Read(void) {
 80140e6:	b510      	push	{r4, lr}
 80140e8:	b086      	sub	sp, #24
  if(r = HAL_I2C_Mem_Read(&hi2c1, HDC2080_I2C_ADDR, HDC2080_TEMP, I2C_MEMADD_SIZE_8BIT, buf, 5, 50), r != HAL_OK) {
 80140ea:	9302      	str	r3, [sp, #8]
 80140ec:	ac04      	add	r4, sp, #16
 80140ee:	3b2d      	subs	r3, #45	; 0x2d
 80140f0:	2200      	movs	r2, #0
 80140f2:	9301      	str	r3, [sp, #4]
 80140f4:	2180      	movs	r1, #128	; 0x80
 80140f6:	480f      	ldr	r0, [pc, #60]	; (8014134 <HDC2080_Read+0x50>)
 80140f8:	9400      	str	r4, [sp, #0]
 80140fa:	3b04      	subs	r3, #4
 80140fc:	f7f9 fd38 	bl	800db70 <HAL_I2C_Mem_Read>
 8014100:	1e02      	subs	r2, r0, #0
 8014102:	d005      	beq.n	8014110 <HDC2080_Read+0x2c>
    DEBUG_PRINTF("SEN HDC2080 I2C <RX ERR ret:0x%x\n", r);
 8014104:	2000      	movs	r0, #0
 8014106:	490c      	ldr	r1, [pc, #48]	; (8014138 <HDC2080_Read+0x54>)
 8014108:	f7f7 ff45 	bl	800bf96 <SEGGER_RTT_printf>
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
  hdc2080.raw_humid = buf[3] << 8 | buf[2];
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
  hdc2080.humid = hdc2080.raw_humid * 100 / 65536;
  hdc2080.status = buf[4];
}
 801410c:	b006      	add	sp, #24
 801410e:	bd10      	pop	{r4, pc}
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
 8014110:	8820      	ldrh	r0, [r4, #0]
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
 8014112:	4b0a      	ldr	r3, [pc, #40]	; (801413c <HDC2080_Read+0x58>)
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
 8014114:	4a0a      	ldr	r2, [pc, #40]	; (8014140 <HDC2080_Read+0x5c>)
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
 8014116:	4343      	muls	r3, r0
  hdc2080.raw_temp = buf[1] << 8 | buf[0];
 8014118:	8010      	strh	r0, [r2, #0]
  hdc2080.fix_temp = hdc2080.raw_temp * 165 * 100 / 65536 - 4000;
 801411a:	480a      	ldr	r0, [pc, #40]	; (8014144 <HDC2080_Read+0x60>)
 801411c:	141b      	asrs	r3, r3, #16
 801411e:	181b      	adds	r3, r3, r0
 8014120:	8093      	strh	r3, [r2, #4]
  hdc2080.humid = hdc2080.raw_humid * 100 / 65536;
 8014122:	2364      	movs	r3, #100	; 0x64
 8014124:	8861      	ldrh	r1, [r4, #2]
 8014126:	434b      	muls	r3, r1
 8014128:	141b      	asrs	r3, r3, #16
  hdc2080.raw_humid = buf[3] << 8 | buf[2];
 801412a:	8051      	strh	r1, [r2, #2]
  hdc2080.humid = hdc2080.raw_humid * 100 / 65536;
 801412c:	7193      	strb	r3, [r2, #6]
  hdc2080.status = buf[4];
 801412e:	7923      	ldrb	r3, [r4, #4]
 8014130:	71d3      	strb	r3, [r2, #7]
 8014132:	e7eb      	b.n	801410c <HDC2080_Read+0x28>
 8014134:	20001898 	.word	0x20001898
 8014138:	0801aa5b 	.word	0x0801aa5b
 801413c:	00004074 	.word	0x00004074
 8014140:	20001a00 	.word	0x20001a00
 8014144:	fffff060 	.word	0xfffff060

08014148 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8014148:	480e      	ldr	r0, [pc, #56]	; (8014184 <MX_SPI1_Init+0x3c>)
 801414a:	4b0f      	ldr	r3, [pc, #60]	; (8014188 <MX_SPI1_Init+0x40>)
{
 801414c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 801414e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8014150:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8014152:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8014154:	005b      	lsls	r3, r3, #1
 8014156:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8014158:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801415a:	0092      	lsls	r2, r2, #2
 801415c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801415e:	3ae9      	subs	r2, #233	; 0xe9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8014160:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8014162:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8014164:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8014166:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8014168:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801416a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801416c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801416e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8014170:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8014172:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8014174:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8014176:	f7fb fa9b 	bl	800f6b0 <HAL_SPI_Init>
 801417a:	2800      	cmp	r0, #0
 801417c:	d001      	beq.n	8014182 <MX_SPI1_Init+0x3a>
  {
    Error_Handler();
 801417e:	f7fd ff15 	bl	8011fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8014182:	bd10      	pop	{r4, pc}
 8014184:	20001a10 	.word	0x20001a10
 8014188:	40013000 	.word	0x40013000

0801418c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801418c:	b510      	push	{r4, lr}
 801418e:	0004      	movs	r4, r0
 8014190:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014192:	2214      	movs	r2, #20
 8014194:	2100      	movs	r1, #0
 8014196:	a801      	add	r0, sp, #4
 8014198:	f001 ff31 	bl	8015ffe <memset>
  if(spiHandle->Instance==SPI1)
 801419c:	4b13      	ldr	r3, [pc, #76]	; (80141ec <HAL_SPI_MspInit+0x60>)
 801419e:	6822      	ldr	r2, [r4, #0]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d120      	bne.n	80141e6 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80141a4:	2280      	movs	r2, #128	; 0x80
 80141a6:	4b12      	ldr	r3, [pc, #72]	; (80141f0 <HAL_SPI_MspInit+0x64>)
 80141a8:	0152      	lsls	r2, r2, #5
 80141aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = SX126x_SPI_SCK_Pin|SX126x_SPI_MISO_Pin|SX126x_SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141ac:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80141ae:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80141b0:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 80141b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80141b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141b6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80141b8:	430a      	orrs	r2, r1
 80141ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80141bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141be:	400b      	ands	r3, r1
 80141c0:	9300      	str	r3, [sp, #0]
 80141c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SX126x_SPI_SCK_Pin|SX126x_SPI_MISO_Pin|SX126x_SPI_MOSI_Pin;
 80141c4:	23e0      	movs	r3, #224	; 0xe0
 80141c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141c8:	3bde      	subs	r3, #222	; 0xde
 80141ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141cc:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141ce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141d2:	f7f9 f811 	bl	800d1f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80141d6:	2200      	movs	r2, #0
 80141d8:	2019      	movs	r0, #25
 80141da:	0011      	movs	r1, r2
 80141dc:	f7f8 fd94 	bl	800cd08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80141e0:	2019      	movs	r0, #25
 80141e2:	f7f8 fdbb 	bl	800cd5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80141e6:	b006      	add	sp, #24
 80141e8:	bd10      	pop	{r4, pc}
 80141ea:	46c0      	nop			; (mov r8, r8)
 80141ec:	40013000 	.word	0x40013000
 80141f0:	40021000 	.word	0x40021000

080141f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 80141f4:	480d      	ldr	r0, [pc, #52]	; (801422c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80141f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80141f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80141fa:	e003      	b.n	8014204 <LoopCopyDataInit>

080141fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80141fc:	4b0c      	ldr	r3, [pc, #48]	; (8014230 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80141fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014202:	3104      	adds	r1, #4

08014204 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8014204:	480b      	ldr	r0, [pc, #44]	; (8014234 <LoopForever+0xa>)
  ldr  r3, =_edata
 8014206:	4b0c      	ldr	r3, [pc, #48]	; (8014238 <LoopForever+0xe>)
  adds  r2, r0, r1
 8014208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801420a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801420c:	d3f6      	bcc.n	80141fc <CopyDataInit>
  ldr  r2, =_sbss
 801420e:	4a0b      	ldr	r2, [pc, #44]	; (801423c <LoopForever+0x12>)
  b  LoopFillZerobss
 8014210:	e002      	b.n	8014218 <LoopFillZerobss>

08014212 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8014212:	2300      	movs	r3, #0
  str  r3, [r2]
 8014214:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014216:	3204      	adds	r2, #4

08014218 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8014218:	4b09      	ldr	r3, [pc, #36]	; (8014240 <LoopForever+0x16>)
  cmp  r2, r3
 801421a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801421c:	d3f9      	bcc.n	8014212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 801421e:	f000 f87d 	bl	801431c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014222:	f001 fe9d 	bl	8015f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014226:	f7fd ff35 	bl	8012094 <main>

0801422a <LoopForever>:

LoopForever:
    b LoopForever
 801422a:	e7fe      	b.n	801422a <LoopForever>
   ldr   r0, =_estack
 801422c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8014230:	0801af30 	.word	0x0801af30
  ldr  r0, =_sdata
 8014234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014238:	2000030c 	.word	0x2000030c
  ldr  r2, =_sbss
 801423c:	2000030c 	.word	0x2000030c
  ldr  r3, = _ebss
 8014240:	20001df4 	.word	0x20001df4

08014244 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014244:	e7fe      	b.n	8014244 <ADC1_COMP_IRQHandler>
	...

08014248 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014248:	2201      	movs	r2, #1
 801424a:	4b09      	ldr	r3, [pc, #36]	; (8014270 <HAL_MspInit+0x28>)
{
 801424c:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801424e:	6b59      	ldr	r1, [r3, #52]	; 0x34

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8014250:	2004      	movs	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014252:	430a      	orrs	r2, r1
 8014254:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8014256:	2280      	movs	r2, #128	; 0x80
 8014258:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801425a:	0552      	lsls	r2, r2, #21
 801425c:	430a      	orrs	r2, r1
 801425e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8014260:	2200      	movs	r2, #0
 8014262:	0011      	movs	r1, r2
 8014264:	f7f8 fd50 	bl	800cd08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8014268:	2004      	movs	r0, #4
 801426a:	f7f8 fd77 	bl	800cd5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801426e:	bd10      	pop	{r4, pc}
 8014270:	40021000 	.word	0x40021000

08014274 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014274:	4770      	bx	lr

08014276 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014276:	e7fe      	b.n	8014276 <HardFault_Handler>

08014278 <SVC_Handler>:
 8014278:	4770      	bx	lr

0801427a <PendSV_Handler>:
 801427a:	4770      	bx	lr

0801427c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801427c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801427e:	f7f8 fa01 	bl	800c684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014282:	bd10      	pop	{r4, pc}

08014284 <RCC_IRQHandler>:
 8014284:	4770      	bx	lr

08014286 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8014286:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8014288:	2001      	movs	r0, #1
 801428a:	f7f9 f887 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 801428e:	2002      	movs	r0, #2
 8014290:	f7f9 f884 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8014294:	bd10      	pop	{r4, pc}

08014296 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8014296:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8014298:	2008      	movs	r0, #8
 801429a:	f7f9 f87f 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 801429e:	bd10      	pop	{r4, pc}

080142a0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80142a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80142a2:	2020      	movs	r0, #32
 80142a4:	f7f9 f87a 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80142a8:	2080      	movs	r0, #128	; 0x80
 80142aa:	0080      	lsls	r0, r0, #2
 80142ac:	f7f9 f876 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80142b0:	2080      	movs	r0, #128	; 0x80
 80142b2:	00c0      	lsls	r0, r0, #3
 80142b4:	f7f9 f872 	bl	800d39c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80142b8:	bd10      	pop	{r4, pc}
	...

080142bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80142bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80142be:	4802      	ldr	r0, [pc, #8]	; (80142c8 <DMA1_Channel1_IRQHandler+0xc>)
 80142c0:	f7f8 fe57 	bl	800cf72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80142c4:	bd10      	pop	{r4, pc}
 80142c6:	46c0      	nop			; (mov r8, r8)
 80142c8:	200017e0 	.word	0x200017e0

080142cc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80142cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80142ce:	4802      	ldr	r0, [pc, #8]	; (80142d8 <DMA1_Channel2_3_IRQHandler+0xc>)
 80142d0:	f7f8 fe4f 	bl	800cf72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80142d4:	bd10      	pop	{r4, pc}
 80142d6:	46c0      	nop			; (mov r8, r8)
 80142d8:	20001850 	.word	0x20001850

080142dc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80142dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80142de:	4802      	ldr	r0, [pc, #8]	; (80142e8 <LPTIM1_IRQHandler+0xc>)
 80142e0:	f7fa f98c 	bl	800e5fc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80142e4:	bd10      	pop	{r4, pc}
 80142e6:	46c0      	nop			; (mov r8, r8)
 80142e8:	20001908 	.word	0x20001908

080142ec <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80142ec:	4806      	ldr	r0, [pc, #24]	; (8014308 <I2C1_IRQHandler+0x1c>)
{
 80142ee:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80142f0:	6803      	ldr	r3, [r0, #0]
 80142f2:	699a      	ldr	r2, [r3, #24]
 80142f4:	23e0      	movs	r3, #224	; 0xe0
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	421a      	tst	r2, r3
 80142fa:	d002      	beq.n	8014302 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80142fc:	f7fa f83a 	bl	800e374 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8014300:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8014302:	f7f9 fd9d 	bl	800de40 <HAL_I2C_EV_IRQHandler>
}
 8014306:	e7fb      	b.n	8014300 <I2C1_IRQHandler+0x14>
 8014308:	20001898 	.word	0x20001898

0801430c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 801430c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */
  __NOP();
 801430e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8014310:	4801      	ldr	r0, [pc, #4]	; (8014318 <SPI1_IRQHandler+0xc>)
 8014312:	f7fb fa31 	bl	800f778 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8014316:	bd10      	pop	{r4, pc}
 8014318:	20001a10 	.word	0x20001a10

0801431c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 801431c:	2280      	movs	r2, #128	; 0x80
 801431e:	4b10      	ldr	r3, [pc, #64]	; (8014360 <SystemInit+0x44>)
 8014320:	0052      	lsls	r2, r2, #1
 8014322:	6819      	ldr	r1, [r3, #0]
 8014324:	430a      	orrs	r2, r1
 8014326:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8014328:	68da      	ldr	r2, [r3, #12]
 801432a:	490e      	ldr	r1, [pc, #56]	; (8014364 <SystemInit+0x48>)
 801432c:	400a      	ands	r2, r1
 801432e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8014330:	681a      	ldr	r2, [r3, #0]
 8014332:	490d      	ldr	r1, [pc, #52]	; (8014368 <SystemInit+0x4c>)
 8014334:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8014336:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8014338:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801433a:	689a      	ldr	r2, [r3, #8]
 801433c:	438a      	bics	r2, r1
 801433e:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8014340:	681a      	ldr	r2, [r3, #0]
 8014342:	490a      	ldr	r1, [pc, #40]	; (801436c <SystemInit+0x50>)
 8014344:	400a      	ands	r2, r1
 8014346:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8014348:	68da      	ldr	r2, [r3, #12]
 801434a:	4909      	ldr	r1, [pc, #36]	; (8014370 <SystemInit+0x54>)
 801434c:	400a      	ands	r2, r1
 801434e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8014350:	2200      	movs	r2, #0
 8014352:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014354:	2280      	movs	r2, #128	; 0x80
 8014356:	4b07      	ldr	r3, [pc, #28]	; (8014374 <SystemInit+0x58>)
 8014358:	0512      	lsls	r2, r2, #20
 801435a:	609a      	str	r2, [r3, #8]
#endif
}
 801435c:	4770      	bx	lr
 801435e:	46c0      	nop			; (mov r8, r8)
 8014360:	40021000 	.word	0x40021000
 8014364:	88ff400c 	.word	0x88ff400c
 8014368:	fef6fff6 	.word	0xfef6fff6
 801436c:	fffbffff 	.word	0xfffbffff
 8014370:	ff02ffff 	.word	0xff02ffff
 8014374:	e000ed00 	.word	0xe000ed00

08014378 <tasks_add>:
volatile uint32_t tasks_ticks = 0;

struct task *tasks_add(struct task t);
int tasks_has_pending(void);

struct task *tasks_add(struct task t) {
 8014378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801437a:	b085      	sub	sp, #20
 801437c:	9203      	str	r2, [sp, #12]
  uint8_t i = 0;

  do {
    if(tasks[i].when <= tasks_ticks) {
 801437e:	240c      	movs	r4, #12
struct task *tasks_add(struct task t) {
 8014380:	2200      	movs	r2, #0
 8014382:	9102      	str	r1, [sp, #8]
    if(tasks[i].when <= tasks_ticks) {
 8014384:	4d0c      	ldr	r5, [pc, #48]	; (80143b8 <tasks_add+0x40>)
 8014386:	490d      	ldr	r1, [pc, #52]	; (80143bc <tasks_add+0x44>)
struct task *tasks_add(struct task t) {
 8014388:	ab01      	add	r3, sp, #4
 801438a:	9001      	str	r0, [sp, #4]
    if(tasks[i].when <= tasks_ticks) {
 801438c:	0020      	movs	r0, r4
 801438e:	4350      	muls	r0, r2
 8014390:	1940      	adds	r0, r0, r5
 8014392:	680e      	ldr	r6, [r1, #0]
 8014394:	6807      	ldr	r7, [r0, #0]
 8014396:	42b7      	cmp	r7, r6
 8014398:	d804      	bhi.n	80143a4 <tasks_add+0x2c>
      tasks[i] = t;
 801439a:	0002      	movs	r2, r0
 801439c:	cb32      	ldmia	r3!, {r1, r4, r5}
 801439e:	c232      	stmia	r2!, {r1, r4, r5}
    }
  } while(++i % TASK_MAX != 0);

  DEBUG_MSG("Couldn't add task, no space left!\n");
  return NULL;
}
 80143a0:	b005      	add	sp, #20
 80143a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while(++i % TASK_MAX != 0);
 80143a4:	3201      	adds	r2, #1
 80143a6:	2a14      	cmp	r2, #20
 80143a8:	d1f0      	bne.n	801438c <tasks_add+0x14>
  DEBUG_MSG("Couldn't add task, no space left!\n");
 80143aa:	2000      	movs	r0, #0
 80143ac:	4904      	ldr	r1, [pc, #16]	; (80143c0 <tasks_add+0x48>)
 80143ae:	f7f7 fc1f 	bl	800bbf0 <SEGGER_RTT_WriteString>
  return NULL;
 80143b2:	2000      	movs	r0, #0
 80143b4:	e7f4      	b.n	80143a0 <tasks_add+0x28>
 80143b6:	46c0      	nop			; (mov r8, r8)
 80143b8:	20001a6c 	.word	0x20001a6c
 80143bc:	20001b5c 	.word	0x20001b5c
 80143c0:	0801aa96 	.word	0x0801aa96

080143c4 <tasks_has_pending>:
void tasks_del(struct task *t) {
  memset(t, 0, sizeof *t);
}

int tasks_has_pending(void) {
  for(size_t i = 0; i < TASK_MAX; i++) {
 80143c4:	2300      	movs	r3, #0
    if(tasks[i].when > tasks_ticks)
 80143c6:	210c      	movs	r1, #12
int tasks_has_pending(void) {
 80143c8:	b530      	push	{r4, r5, lr}
    if(tasks[i].when > tasks_ticks)
 80143ca:	4a08      	ldr	r2, [pc, #32]	; (80143ec <tasks_has_pending+0x28>)
 80143cc:	4808      	ldr	r0, [pc, #32]	; (80143f0 <tasks_has_pending+0x2c>)
 80143ce:	000d      	movs	r5, r1
 80143d0:	435d      	muls	r5, r3
 80143d2:	6814      	ldr	r4, [r2, #0]
 80143d4:	5945      	ldr	r5, [r0, r5]
 80143d6:	42a5      	cmp	r5, r4
 80143d8:	d804      	bhi.n	80143e4 <tasks_has_pending+0x20>
  for(size_t i = 0; i < TASK_MAX; i++) {
 80143da:	3301      	adds	r3, #1
 80143dc:	2b14      	cmp	r3, #20
 80143de:	d1f6      	bne.n	80143ce <tasks_has_pending+0xa>
      return -1;
  }
  return 0;
 80143e0:	2000      	movs	r0, #0
}
 80143e2:	bd30      	pop	{r4, r5, pc}
      return -1;
 80143e4:	2001      	movs	r0, #1
 80143e6:	4240      	negs	r0, r0
 80143e8:	e7fb      	b.n	80143e2 <tasks_has_pending+0x1e>
 80143ea:	46c0      	nop			; (mov r8, r8)
 80143ec:	20001b5c 	.word	0x20001b5c
 80143f0:	20001a6c 	.word	0x20001a6c

080143f4 <HAL_LPTIM_AutoReloadMatchCallback>:

volatile uint8_t processingRdyTasks = 0;
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim1) {
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tasks_ticks++;
 80143f6:	4f0f      	ldr	r7, [pc, #60]	; (8014434 <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
  if (processingRdyTasks) {
 80143f8:	4e0f      	ldr	r6, [pc, #60]	; (8014438 <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
  tasks_ticks++;
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	3301      	adds	r3, #1
 80143fe:	603b      	str	r3, [r7, #0]
  if (processingRdyTasks) {
 8014400:	7833      	ldrb	r3, [r6, #0]
 8014402:	b2dc      	uxtb	r4, r3
 8014404:	2b00      	cmp	r3, #0
 8014406:	d004      	beq.n	8014412 <HAL_LPTIM_AutoReloadMatchCallback+0x1e>
    DEBUG_MSG("Timer ticked before task processing done.\n");
 8014408:	2000      	movs	r0, #0
 801440a:	490c      	ldr	r1, [pc, #48]	; (801443c <HAL_LPTIM_AutoReloadMatchCallback+0x48>)
 801440c:	f7f7 fbf0 	bl	800bbf0 <SEGGER_RTT_WriteString>
        tasks[i].cb(tasks[i].arg); // execute task function
      }
    }
    processingRdyTasks = 0;
  }
}
 8014410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    processingRdyTasks = 1;
 8014412:	2301      	movs	r3, #1
 8014414:	4d0a      	ldr	r5, [pc, #40]	; (8014440 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
 8014416:	7033      	strb	r3, [r6, #0]
      if (tasks[i].when == tasks_ticks) { // Ready
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	682a      	ldr	r2, [r5, #0]
 801441c:	429a      	cmp	r2, r3
 801441e:	d102      	bne.n	8014426 <HAL_LPTIM_AutoReloadMatchCallback+0x32>
        tasks[i].cb(tasks[i].arg); // execute task function
 8014420:	6868      	ldr	r0, [r5, #4]
 8014422:	68ab      	ldr	r3, [r5, #8]
 8014424:	4798      	blx	r3
    for (size_t i = 0; i < TASK_MAX; ++i) {
 8014426:	3401      	adds	r4, #1
 8014428:	350c      	adds	r5, #12
 801442a:	2c14      	cmp	r4, #20
 801442c:	d1f4      	bne.n	8014418 <HAL_LPTIM_AutoReloadMatchCallback+0x24>
    processingRdyTasks = 0;
 801442e:	2300      	movs	r3, #0
 8014430:	7033      	strb	r3, [r6, #0]
}
 8014432:	e7ed      	b.n	8014410 <HAL_LPTIM_AutoReloadMatchCallback+0x1c>
 8014434:	20001b5c 	.word	0x20001b5c
 8014438:	20001a68 	.word	0x20001a68
 801443c:	0801aab9 	.word	0x0801aab9
 8014440:	20001a6c 	.word	0x20001a6c

08014444 <atcab_init_ext>:
 *  \param[in]  cfg    Logical interface configuration. Some predefined
 *                     configurations can be found in atca_cfgs.h
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_init_ext(ATCADevice* device, ATCAIfaceCfg *cfg)
{
 8014444:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014446:	0004      	movs	r4, r0
 8014448:	000e      	movs	r6, r1
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (device)
 801444a:	2800      	cmp	r0, #0
 801444c:	d101      	bne.n	8014452 <atcab_init_ext+0xe>
            (*device)->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
        }
#endif
    }

    return ATCA_SUCCESS;
 801444e:	2000      	movs	r0, #0
}
 8014450:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        if (*device)
 8014452:	6803      	ldr	r3, [r0, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d001      	beq.n	801445c <atcab_init_ext+0x18>
    {
        return status;
    }
    *device = NULL;
#else
    deleteATCADevice(device);
 8014458:	f000 f88a 	bl	8014570 <deleteATCADevice>
        *device = newATCADevice(cfg);
 801445c:	0030      	movs	r0, r6
 801445e:	f000 f84f 	bl	8014500 <newATCADevice>
 8014462:	0005      	movs	r5, r0
 8014464:	6020      	str	r0, [r4, #0]
            return ATCA_GEN_FAIL;
 8014466:	20e1      	movs	r0, #225	; 0xe1
        if (*device == NULL)
 8014468:	2d00      	cmp	r5, #0
 801446a:	d0f1      	beq.n	8014450 <atcab_init_ext+0xc>
        if (cfg->devtype == ATECC608)
 801446c:	7873      	ldrb	r3, [r6, #1]
 801446e:	2b03      	cmp	r3, #3
 8014470:	d1ed      	bne.n	801444e <atcab_init_ext+0xa>
            if ((status = calib_read_bytes_zone(*device, ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &(*device)->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
 8014472:	2200      	movs	r2, #0
 8014474:	3b02      	subs	r3, #2
 8014476:	9301      	str	r3, [sp, #4]
 8014478:	682b      	ldr	r3, [r5, #0]
 801447a:	0011      	movs	r1, r2
 801447c:	3301      	adds	r3, #1
 801447e:	9300      	str	r3, [sp, #0]
 8014480:	0028      	movs	r0, r5
 8014482:	2313      	movs	r3, #19
 8014484:	f000 fa8c 	bl	80149a0 <calib_read_bytes_zone>
 8014488:	2800      	cmp	r0, #0
 801448a:	d1e1      	bne.n	8014450 <atcab_init_ext+0xc>
            (*device)->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
 801448c:	2107      	movs	r1, #7
 801448e:	6823      	ldr	r3, [r4, #0]
 8014490:	681a      	ldr	r2, [r3, #0]
 8014492:	7853      	ldrb	r3, [r2, #1]
 8014494:	438b      	bics	r3, r1
 8014496:	7053      	strb	r3, [r2, #1]
 8014498:	e7da      	b.n	8014450 <atcab_init_ext+0xc>
	...

0801449c <atcab_init>:
{
 801449c:	b510      	push	{r4, lr}
 801449e:	0001      	movs	r1, r0
    return atcab_init_ext(&_gDevice, cfg);
 80144a0:	4801      	ldr	r0, [pc, #4]	; (80144a8 <atcab_init+0xc>)
 80144a2:	f7ff ffcf 	bl	8014444 <atcab_init_ext>
}
 80144a6:	bd10      	pop	{r4, pc}
 80144a8:	20001b60 	.word	0x20001b60

080144ac <initATCACommand>:
 *                         should be associated with this command object.
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
 80144ac:	0003      	movs	r3, r0
    if (ca_cmd == NULL)
    {
        return ATCA_BAD_PARAM;
 80144ae:	20e2      	movs	r0, #226	; 0xe2
    if (ca_cmd == NULL)
 80144b0:	2900      	cmp	r1, #0
 80144b2:	d002      	beq.n	80144ba <initATCACommand+0xe>
    }

    ca_cmd->dt = device_type;
    ca_cmd->clock_divider = 0;
 80144b4:	2000      	movs	r0, #0
    ca_cmd->dt = device_type;
 80144b6:	700b      	strb	r3, [r1, #0]
    ca_cmd->clock_divider = 0;
 80144b8:	7048      	strb	r0, [r1, #1]

    return ATCA_SUCCESS;
}
 80144ba:	4770      	bx	lr

080144bc <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
 80144bc:	b510      	push	{r4, lr}
 80144be:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
 80144c0:	d004      	beq.n	80144cc <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
 80144c2:	6800      	ldr	r0, [r0, #0]
 80144c4:	f001 fd7a 	bl	8015fbc <free>
    *ca_cmd = NULL;
 80144c8:	2300      	movs	r3, #0
 80144ca:	6023      	str	r3, [r4, #0]
}
 80144cc:	bd10      	pop	{r4, pc}

080144ce <atca_trace>:
}

ATCA_STATUS atca_trace(ATCA_STATUS status)
{
    return status;
}
 80144ce:	4770      	bx	lr

080144d0 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
 80144d0:	b570      	push	{r4, r5, r6, lr}
 80144d2:	0005      	movs	r5, r0
 80144d4:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    {
        return ATCA_BAD_PARAM;
 80144d6:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
 80144d8:	2d00      	cmp	r5, #0
 80144da:	d010      	beq.n	80144fe <initATCADevice+0x2e>
 80144dc:	2900      	cmp	r1, #0
 80144de:	d00e      	beq.n	80144fe <initATCADevice+0x2e>
 80144e0:	6809      	ldr	r1, [r1, #0]
 80144e2:	2900      	cmp	r1, #0
 80144e4:	d00b      	beq.n	80144fe <initATCADevice+0x2e>
 80144e6:	6863      	ldr	r3, [r4, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d008      	beq.n	80144fe <initATCADevice+0x2e>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
 80144ec:	7868      	ldrb	r0, [r5, #1]
 80144ee:	f7ff ffdd 	bl	80144ac <initATCACommand>
    if (status != ATCA_SUCCESS)
 80144f2:	2800      	cmp	r0, #0
 80144f4:	d103      	bne.n	80144fe <initATCADevice+0x2e>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
 80144f6:	0028      	movs	r0, r5
 80144f8:	6861      	ldr	r1, [r4, #4]
 80144fa:	f000 f876 	bl	80145ea <initATCAIface>
    {
        return status;
    }

    return ATCA_SUCCESS;
}
 80144fe:	bd70      	pop	{r4, r5, r6, pc}

08014500 <newATCADevice>:
{
 8014500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014502:	1e07      	subs	r7, r0, #0
    if (cfg == NULL)
 8014504:	d102      	bne.n	801450c <newATCADevice+0xc>
        return NULL;
 8014506:	2400      	movs	r4, #0
}
 8014508:	0020      	movs	r0, r4
 801450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
 801450c:	2018      	movs	r0, #24
 801450e:	f001 fd4b 	bl	8015fa8 <malloc>
 8014512:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
 8014514:	d0f7      	beq.n	8014506 <newATCADevice+0x6>
    memset(ca_dev, 0, sizeof(struct atca_device));
 8014516:	2210      	movs	r2, #16
 8014518:	2100      	movs	r1, #0
 801451a:	3008      	adds	r0, #8
 801451c:	f001 fd6f 	bl	8015ffe <memset>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
 8014520:	2004      	movs	r0, #4
 8014522:	f001 fd41 	bl	8015fa8 <malloc>
 8014526:	1e05      	subs	r5, r0, #0
 8014528:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
 801452a:	d103      	bne.n	8014534 <newATCADevice+0x34>
        free(ca_dev);
 801452c:	0020      	movs	r0, r4
 801452e:	f001 fd45 	bl	8015fbc <free>
 8014532:	e7e8      	b.n	8014506 <newATCADevice+0x6>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
 8014534:	2028      	movs	r0, #40	; 0x28
 8014536:	f001 fd37 	bl	8015fa8 <malloc>
 801453a:	0006      	movs	r6, r0
 801453c:	6060      	str	r0, [r4, #4]
        free(ca_dev->mCommands);
 801453e:	0028      	movs	r0, r5
    if (ca_dev->mIface == NULL)
 8014540:	2e00      	cmp	r6, #0
 8014542:	d009      	beq.n	8014558 <newATCADevice+0x58>
    status = initATCADevice(cfg, ca_dev);
 8014544:	0021      	movs	r1, r4
 8014546:	0038      	movs	r0, r7
 8014548:	f7ff ffc2 	bl	80144d0 <initATCADevice>
    if (status != ATCA_SUCCESS)
 801454c:	2800      	cmp	r0, #0
 801454e:	d0db      	beq.n	8014508 <newATCADevice+0x8>
        free(ca_dev->mIface);
 8014550:	6860      	ldr	r0, [r4, #4]
 8014552:	f001 fd33 	bl	8015fbc <free>
        free(ca_dev->mCommands);
 8014556:	6820      	ldr	r0, [r4, #0]
 8014558:	f001 fd30 	bl	8015fbc <free>
 801455c:	e7e6      	b.n	801452c <newATCADevice+0x2c>

0801455e <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
 801455e:	0003      	movs	r3, r0
 8014560:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
 8014562:	20e2      	movs	r0, #226	; 0xe2
    if (ca_dev == NULL)
 8014564:	2b00      	cmp	r3, #0
 8014566:	d002      	beq.n	801456e <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
 8014568:	6858      	ldr	r0, [r3, #4]
 801456a:	f000 f887 	bl	801467c <releaseATCAIface>
}
 801456e:	bd10      	pop	{r4, pc}

08014570 <deleteATCADevice>:
{
 8014570:	b510      	push	{r4, lr}
 8014572:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
 8014574:	d013      	beq.n	801459e <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
 8014576:	6800      	ldr	r0, [r0, #0]
 8014578:	f7ff fff1 	bl	801455e <releaseATCADevice>
    deleteATCACommand(&(*ca_dev)->mCommands);
 801457c:	6820      	ldr	r0, [r4, #0]
 801457e:	f7ff ff9d 	bl	80144bc <deleteATCACommand>
    if ((*ca_dev)->mIface)
 8014582:	6823      	ldr	r3, [r4, #0]
 8014584:	6858      	ldr	r0, [r3, #4]
 8014586:	2800      	cmp	r0, #0
 8014588:	d004      	beq.n	8014594 <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
 801458a:	f001 fd17 	bl	8015fbc <free>
        (*ca_dev)->mIface = NULL;
 801458e:	2200      	movs	r2, #0
 8014590:	6823      	ldr	r3, [r4, #0]
 8014592:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
 8014594:	6820      	ldr	r0, [r4, #0]
 8014596:	f001 fd11 	bl	8015fbc <free>
    *ca_dev = NULL;
 801459a:	2300      	movs	r3, #0
 801459c:	6023      	str	r3, [r4, #0]
}
 801459e:	bd10      	pop	{r4, pc}

080145a0 <atinit>:
 *         be called instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atinit(ATCAIface ca_iface)
{
 80145a0:	b513      	push	{r0, r1, r4, lr}
 80145a2:	0004      	movs	r4, r0
    ATCA_STATUS status = hal_iface_init(ca_iface->mIfaceCFG, hal);
 80145a4:	a901      	add	r1, sp, #4
 80145a6:	6840      	ldr	r0, [r0, #4]
 80145a8:	f000 fa74 	bl	8014a94 <hal_iface_init>
    if (ATCA_SUCCESS == status)
 80145ac:	2800      	cmp	r0, #0
 80145ae:	d11b      	bne.n	80145e8 <atinit+0x48>
        ca_iface->atinit     = (*hal)->halinit;
 80145b0:	9801      	ldr	r0, [sp, #4]

    status = _atinit(ca_iface, &hal);

    if (ATCA_SUCCESS == status)
    {
        status = ca_iface->atinit(hal, ca_iface->mIfaceCFG);
 80145b2:	6861      	ldr	r1, [r4, #4]
        ca_iface->atpostinit = (*hal)->halpostinit;
 80145b4:	6842      	ldr	r2, [r0, #4]
        ca_iface->atinit     = (*hal)->halinit;
 80145b6:	6803      	ldr	r3, [r0, #0]
        ca_iface->atpostinit = (*hal)->halpostinit;
 80145b8:	60e2      	str	r2, [r4, #12]
        ca_iface->atsend     = (*hal)->halsend;
 80145ba:	6882      	ldr	r2, [r0, #8]
        ca_iface->atinit     = (*hal)->halinit;
 80145bc:	60a3      	str	r3, [r4, #8]
        ca_iface->atsend     = (*hal)->halsend;
 80145be:	6122      	str	r2, [r4, #16]
        ca_iface->atreceive  = (*hal)->halreceive;
 80145c0:	68c2      	ldr	r2, [r0, #12]
 80145c2:	6162      	str	r2, [r4, #20]
        ca_iface->atwake     = (*hal)->halwake;
 80145c4:	6902      	ldr	r2, [r0, #16]
 80145c6:	61a2      	str	r2, [r4, #24]
        ca_iface->atsleep    = (*hal)->halsleep;
 80145c8:	6982      	ldr	r2, [r0, #24]
 80145ca:	6222      	str	r2, [r4, #32]
        ca_iface->atidle     = (*hal)->halidle;
 80145cc:	6942      	ldr	r2, [r0, #20]
 80145ce:	61e2      	str	r2, [r4, #28]
        ca_iface->hal_data   = (*hal)->hal_data;
 80145d0:	6a02      	ldr	r2, [r0, #32]
 80145d2:	6262      	str	r2, [r4, #36]	; 0x24
        status = ca_iface->atinit(hal, ca_iface->mIfaceCFG);
 80145d4:	4798      	blx	r3
    }
    if (status == ATCA_SUCCESS)
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d106      	bne.n	80145e8 <atinit+0x48>
    {
        ca_iface->hal_data = hal->hal_data;
 80145da:	9b01      	ldr	r3, [sp, #4]
 80145dc:	6a1a      	ldr	r2, [r3, #32]
 80145de:	6262      	str	r2, [r4, #36]	; 0x24
        hal->hal_data = NULL;
 80145e0:	6218      	str	r0, [r3, #32]

        // Perform the post init
        status = ca_iface->atpostinit(ca_iface);
 80145e2:	0020      	movs	r0, r4
 80145e4:	68e3      	ldr	r3, [r4, #12]
 80145e6:	4798      	blx	r3
    }

    return status;
}
 80145e8:	bd16      	pop	{r1, r2, r4, pc}

080145ea <initATCAIface>:
{
 80145ea:	0003      	movs	r3, r0
 80145ec:	b510      	push	{r4, lr}
        return ATCA_BAD_PARAM;
 80145ee:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d007      	beq.n	8014604 <initATCAIface+0x1a>
 80145f4:	2900      	cmp	r1, #0
 80145f6:	d005      	beq.n	8014604 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
 80145f8:	781a      	ldrb	r2, [r3, #0]
    status = atinit(ca_iface);
 80145fa:	0008      	movs	r0, r1
    ca_iface->mType = cfg->iface_type;
 80145fc:	700a      	strb	r2, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
 80145fe:	604b      	str	r3, [r1, #4]
    status = atinit(ca_iface);
 8014600:	f7ff ffce 	bl	80145a0 <atinit>
}
 8014604:	bd10      	pop	{r4, pc}

08014606 <atsend>:
 * \param[in] txdata         Data to be transmitted to the device.
 * \param[in] txlength       Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t word_address, uint8_t *txdata, int txlength)
{
 8014606:	b570      	push	{r4, r5, r6, lr}
 8014608:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 801460a:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 801460c:	2c00      	cmp	r4, #0
 801460e:	d005      	beq.n	801461c <atsend+0x16>
    }

    if (ca_iface->atsend)
 8014610:	6925      	ldr	r5, [r4, #16]
    {
        return ca_iface->atsend(ca_iface, word_address, txdata, txlength);
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 8014612:	301b      	adds	r0, #27
    if (ca_iface->atsend)
 8014614:	2d00      	cmp	r5, #0
 8014616:	d001      	beq.n	801461c <atsend+0x16>
        return ca_iface->atsend(ca_iface, word_address, txdata, txlength);
 8014618:	0020      	movs	r0, r4
 801461a:	47a8      	blx	r5
    }
}
 801461c:	bd70      	pop	{r4, r5, r6, pc}

0801461e <atreceive>:
 * \param[in,out] rxlength       As input, the size of the rxdata buffer.
 *                               As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength)
{
 801461e:	b570      	push	{r4, r5, r6, lr}
 8014620:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 8014622:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 8014624:	2c00      	cmp	r4, #0
 8014626:	d005      	beq.n	8014634 <atreceive+0x16>
    }

    if (ca_iface->atreceive)
 8014628:	6965      	ldr	r5, [r4, #20]
    {
        return ca_iface->atreceive(ca_iface, word_address, rxdata, rxlength);
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 801462a:	301b      	adds	r0, #27
    if (ca_iface->atreceive)
 801462c:	2d00      	cmp	r5, #0
 801462e:	d001      	beq.n	8014634 <atreceive+0x16>
        return ca_iface->atreceive(ca_iface, word_address, rxdata, rxlength);
 8014630:	0020      	movs	r0, r4
 8014632:	47a8      	blx	r5
    }
}
 8014634:	bd70      	pop	{r4, r5, r6, pc}

08014636 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
 8014636:	b510      	push	{r4, lr}
 8014638:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 801463a:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 801463c:	2c00      	cmp	r4, #0
 801463e:	d00d      	beq.n	801465c <atwake+0x26>
    }

    if (ca_iface->atwake)
 8014640:	69a3      	ldr	r3, [r4, #24]
        }
        return status;
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 8014642:	301b      	adds	r0, #27
    if (ca_iface->atwake)
 8014644:	2b00      	cmp	r3, #0
 8014646:	d009      	beq.n	801465c <atwake+0x26>
        ATCA_STATUS status = ca_iface->atwake(ca_iface);
 8014648:	0020      	movs	r0, r4
 801464a:	4798      	blx	r3
        if (ATCA_WAKE_FAILED == status)
 801464c:	28d0      	cmp	r0, #208	; 0xd0
 801464e:	d105      	bne.n	801465c <atwake+0x26>
            atca_delay_ms(ATCA_POST_DELAY_MSEC);
 8014650:	38b7      	subs	r0, #183	; 0xb7
 8014652:	f7fb f997 	bl	800f984 <hal_delay_ms>
            status = ca_iface->atwake(ca_iface);
 8014656:	0020      	movs	r0, r4
 8014658:	69a3      	ldr	r3, [r4, #24]
 801465a:	4798      	blx	r3
    }
}
 801465c:	bd10      	pop	{r4, pc}

0801465e <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
 801465e:	b510      	push	{r4, lr}
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 8014660:	24e2      	movs	r4, #226	; 0xe2
    if (!ca_iface)
 8014662:	2800      	cmp	r0, #0
 8014664:	d008      	beq.n	8014678 <atidle+0x1a>
    }

    if (ca_iface->atidle)
 8014666:	69c3      	ldr	r3, [r0, #28]
        atca_delay_ms(1);
        return status;
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 8014668:	341b      	adds	r4, #27
    if (ca_iface->atidle)
 801466a:	2b00      	cmp	r3, #0
 801466c:	d004      	beq.n	8014678 <atidle+0x1a>
        ATCA_STATUS status = ca_iface->atidle(ca_iface);
 801466e:	4798      	blx	r3
 8014670:	0004      	movs	r4, r0
        atca_delay_ms(1);
 8014672:	2001      	movs	r0, #1
 8014674:	f7fb f986 	bl	800f984 <hal_delay_ms>
    }
}
 8014678:	0020      	movs	r0, r4
 801467a:	bd10      	pop	{r4, pc}

0801467c <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
 801467c:	0003      	movs	r3, r0
 801467e:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
 8014680:	20e2      	movs	r0, #226	; 0xe2
    if (ca_iface == NULL)
 8014682:	2b00      	cmp	r3, #0
 8014684:	d003      	beq.n	801468e <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
 8014686:	7818      	ldrb	r0, [r3, #0]
 8014688:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801468a:	f000 fa15 	bl	8014ab8 <hal_iface_release>
}
 801468e:	bd10      	pop	{r4, pc}

08014690 <calib_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
 8014690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014692:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;
 8014694:	2003      	movs	r0, #3
{
 8014696:	9c06      	ldr	r4, [sp, #24]
    uint8_t mem_zone = zone & 0x03;
 8014698:	4028      	ands	r0, r5

    if (addr == NULL)
 801469a:	2c00      	cmp	r4, #0
 801469c:	d103      	bne.n	80146a6 <calib_get_addr+0x16>
    {
        return ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 801469e:	20e2      	movs	r0, #226	; 0xe2
 80146a0:	f7ff ff15 	bl	80144ce <atca_trace>
        }
    }
    while (0);

    return status;
}
 80146a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
 80146a6:	2803      	cmp	r0, #3
 80146a8:	d0f9      	beq.n	801469e <calib_get_addr+0xe>
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
 80146aa:	2602      	movs	r6, #2
 80146ac:	0028      	movs	r0, r5
            *addr |= offset;
 80146ae:	2707      	movs	r7, #7
 80146b0:	4030      	ands	r0, r6
 80146b2:	403b      	ands	r3, r7
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
 80146b4:	4235      	tst	r5, r6
 80146b6:	d103      	bne.n	80146c0 <calib_get_addr+0x30>
            *addr = block << 3;
 80146b8:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
 80146ba:	4313      	orrs	r3, r2
 80146bc:	8023      	strh	r3, [r4, #0]
 80146be:	e7f1      	b.n	80146a4 <calib_get_addr+0x14>
            *addr = slot << 3;
 80146c0:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
 80146c2:	430b      	orrs	r3, r1
            *addr |= block << 8;
 80146c4:	0212      	lsls	r2, r2, #8
 80146c6:	4313      	orrs	r3, r2
    return status;
 80146c8:	2000      	movs	r0, #0
            *addr |= block << 8;
 80146ca:	8023      	strh	r3, [r4, #0]
 80146cc:	e7ea      	b.n	80146a4 <calib_get_addr+0x14>

080146ce <calib_get_zone_size>:
 * \param[out] size    Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_get_zone_size(ATCADevice device, uint8_t zone, uint16_t slot, size_t* size)
{
 80146ce:	b510      	push	{r4, lr}
 80146d0:	0004      	movs	r4, r0
 80146d2:	0008      	movs	r0, r1
    ATCA_STATUS status = ATCA_SUCCESS;

    if ((device == NULL) || (size == NULL))
 80146d4:	2c00      	cmp	r4, #0
 80146d6:	d001      	beq.n	80146dc <calib_get_zone_size+0xe>
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d103      	bne.n	80146e4 <calib_get_zone_size+0x16>
        switch (zone)
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_TRACE(ATCA_BAD_PARAM, "Invalid zone received"); break;
 80146dc:	20e2      	movs	r0, #226	; 0xe2
 80146de:	f7ff fef6 	bl	80144ce <atca_trace>
        default: status = ATCA_TRACE(ATCA_BAD_PARAM, "Invalid zone received"); break;
        }
    }

    return status;
}
 80146e2:	bd10      	pop	{r4, pc}
    if (device->mIface->mIfaceCFG->devtype == ATSHA204A)
 80146e4:	6861      	ldr	r1, [r4, #4]
 80146e6:	6849      	ldr	r1, [r1, #4]
 80146e8:	7849      	ldrb	r1, [r1, #1]
 80146ea:	2900      	cmp	r1, #0
 80146ec:	d10d      	bne.n	801470a <calib_get_zone_size+0x3c>
        switch (zone)
 80146ee:	2801      	cmp	r0, #1
 80146f0:	d007      	beq.n	8014702 <calib_get_zone_size+0x34>
 80146f2:	2802      	cmp	r0, #2
 80146f4:	d007      	beq.n	8014706 <calib_get_zone_size+0x38>
        case ATCA_ZONE_CONFIG: *size = 88; break;
 80146f6:	2258      	movs	r2, #88	; 0x58
        switch (zone)
 80146f8:	2800      	cmp	r0, #0
 80146fa:	d1ef      	bne.n	80146dc <calib_get_zone_size+0xe>
    ATCA_STATUS status = ATCA_SUCCESS;
 80146fc:	2000      	movs	r0, #0
                *size = 72;
 80146fe:	601a      	str	r2, [r3, #0]
 8014700:	e7ef      	b.n	80146e2 <calib_get_zone_size+0x14>
        case ATCA_ZONE_OTP:    *size = 64; break;
 8014702:	2240      	movs	r2, #64	; 0x40
 8014704:	e7fa      	b.n	80146fc <calib_get_zone_size+0x2e>
        case ATCA_ZONE_DATA:   *size = 32; break;
 8014706:	2220      	movs	r2, #32
 8014708:	e7f8      	b.n	80146fc <calib_get_zone_size+0x2e>
    else if (device->mIface->mIfaceCFG->devtype == ATSHA206A)
 801470a:	2904      	cmp	r1, #4
 801470c:	d104      	bne.n	8014718 <calib_get_zone_size+0x4a>
        switch (zone)
 801470e:	2801      	cmp	r0, #1
 8014710:	d1ef      	bne.n	80146f2 <calib_get_zone_size+0x24>
        case ATCA_ZONE_OTP:    *size = 0; break;
 8014712:	2000      	movs	r0, #0
 8014714:	6018      	str	r0, [r3, #0]
 8014716:	e7e4      	b.n	80146e2 <calib_get_zone_size+0x14>
        switch (zone)
 8014718:	2801      	cmp	r0, #1
 801471a:	d0f2      	beq.n	8014702 <calib_get_zone_size+0x34>
 801471c:	2802      	cmp	r0, #2
 801471e:	d004      	beq.n	801472a <calib_get_zone_size+0x5c>
 8014720:	2800      	cmp	r0, #0
 8014722:	d1db      	bne.n	80146dc <calib_get_zone_size+0xe>
        case ATCA_ZONE_CONFIG: *size = 128; break;
 8014724:	2280      	movs	r2, #128	; 0x80
 8014726:	601a      	str	r2, [r3, #0]
 8014728:	e7db      	b.n	80146e2 <calib_get_zone_size+0x14>
            if (slot < 8)
 801472a:	2a07      	cmp	r2, #7
 801472c:	d801      	bhi.n	8014732 <calib_get_zone_size+0x64>
                *size = 36;
 801472e:	2224      	movs	r2, #36	; 0x24
 8014730:	e7e4      	b.n	80146fc <calib_get_zone_size+0x2e>
            else if (slot == 8)
 8014732:	2a08      	cmp	r2, #8
 8014734:	d102      	bne.n	801473c <calib_get_zone_size+0x6e>
                *size = 416;
 8014736:	3299      	adds	r2, #153	; 0x99
 8014738:	32ff      	adds	r2, #255	; 0xff
 801473a:	e7df      	b.n	80146fc <calib_get_zone_size+0x2e>
            else if (slot < 16)
 801473c:	2a0f      	cmp	r2, #15
 801473e:	d8cd      	bhi.n	80146dc <calib_get_zone_size+0xe>
                *size = 72;
 8014740:	2248      	movs	r2, #72	; 0x48
 8014742:	e7db      	b.n	80146fc <calib_get_zone_size+0x2e>

08014744 <atCRC>:
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
 8014744:	180b      	adds	r3, r1, r0
 8014746:	469c      	mov	ip, r3
    uint16_t crc_register = 0;
 8014748:	2300      	movs	r3, #0
{
 801474a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    for (counter = 0; counter < length; counter++)
 801474c:	458c      	cmp	ip, r1
 801474e:	d103      	bne.n	8014758 <atCRC+0x14>
            {
                crc_register ^= polynom;
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
 8014750:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
 8014752:	0a1b      	lsrs	r3, r3, #8
 8014754:	7053      	strb	r3, [r2, #1]
}
 8014756:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 8014758:	7808      	ldrb	r0, [r1, #0]
 801475a:	2408      	movs	r4, #8
 801475c:	9001      	str	r0, [sp, #4]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 801475e:	2001      	movs	r0, #1
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 8014760:	0005      	movs	r5, r0
 8014762:	9e01      	ldr	r6, [sp, #4]
            crc_bit = crc_register >> 15;
 8014764:	0bdf      	lsrs	r7, r3, #15
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 8014766:	4035      	ands	r5, r6
 8014768:	1e6e      	subs	r6, r5, #1
 801476a:	41b5      	sbcs	r5, r6
            crc_register <<= 1;
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	b29b      	uxth	r3, r3
            if (data_bit != crc_bit)
 8014770:	42bd      	cmp	r5, r7
 8014772:	d002      	beq.n	801477a <atCRC+0x36>
                crc_register ^= polynom;
 8014774:	4d04      	ldr	r5, [pc, #16]	; (8014788 <atCRC+0x44>)
 8014776:	406b      	eors	r3, r5
 8014778:	b29b      	uxth	r3, r3
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 801477a:	0040      	lsls	r0, r0, #1
 801477c:	3c01      	subs	r4, #1
 801477e:	b2c0      	uxtb	r0, r0
 8014780:	2c00      	cmp	r4, #0
 8014782:	d1ed      	bne.n	8014760 <atCRC+0x1c>
    for (counter = 0; counter < length; counter++)
 8014784:	3101      	adds	r1, #1
 8014786:	e7e1      	b.n	801474c <atCRC+0x8>
 8014788:	ffff8005 	.word	0xffff8005

0801478c <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
 801478c:	b510      	push	{r4, lr}

    packet->param2 = ATCA_UINT16_HOST_TO_LE(packet->param2);

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
 801478e:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
 8014790:	7840      	ldrb	r0, [r0, #1]
 8014792:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
 8014794:	b2c0      	uxtb	r0, r0
 8014796:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
 8014798:	f7ff ffd4 	bl	8014744 <atCRC>
}
 801479c:	bd10      	pop	{r4, pc}

0801479e <atRead>:
    packet->opcode = ATCA_READ;
 801479e:	2302      	movs	r3, #2
{
 80147a0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
 80147a2:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
 80147a4:	3305      	adds	r3, #5
{
 80147a6:	0008      	movs	r0, r1
    packet->txsize = READ_COUNT;
 80147a8:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
 80147aa:	f7ff ffef 	bl	801478c <atCalcCrc>
}
 80147ae:	2000      	movs	r0, #0
 80147b0:	bd10      	pop	{r4, pc}

080147b2 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
 80147b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
 80147b4:	7805      	ldrb	r5, [r0, #0]
{
 80147b6:	0004      	movs	r4, r0

    count -= ATCA_CRC_SIZE;
 80147b8:	3d02      	subs	r5, #2
    atCRC(count, response, crc);
 80147ba:	b2ed      	uxtb	r5, r5
 80147bc:	0001      	movs	r1, r0
 80147be:	aa01      	add	r2, sp, #4
 80147c0:	0028      	movs	r0, r5
 80147c2:	f7ff ffbf 	bl	8014744 <atCRC>

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
 80147c6:	466b      	mov	r3, sp
 80147c8:	791a      	ldrb	r2, [r3, #4]
 80147ca:	5d63      	ldrb	r3, [r4, r5]
 80147cc:	20e5      	movs	r0, #229	; 0xe5
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d106      	bne.n	80147e0 <atCheckCrc+0x2e>
 80147d2:	466b      	mov	r3, sp
 80147d4:	1964      	adds	r4, r4, r5
 80147d6:	795a      	ldrb	r2, [r3, #5]
 80147d8:	7863      	ldrb	r3, [r4, #1]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d100      	bne.n	80147e0 <atCheckCrc+0x2e>
 80147de:	2000      	movs	r0, #0
}
 80147e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080147e2 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
 80147e2:	b500      	push	{lr}
    if (data[0] == 0x04)        // error packets are always 4 bytes long
 80147e4:	7802      	ldrb	r2, [r0, #0]
{
 80147e6:	0003      	movs	r3, r0
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
 80147e8:	2000      	movs	r0, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
 80147ea:	2a04      	cmp	r2, #4
 80147ec:	d10e      	bne.n	801480c <isATCAError+0x2a>
        switch (data[1])
 80147ee:	7858      	ldrb	r0, [r3, #1]
 80147f0:	2811      	cmp	r0, #17
 80147f2:	d80c      	bhi.n	801480e <isATCAError+0x2c>
 80147f4:	f7eb fc9a 	bl	800012c <__gnu_thumb1_case_uqi>
 80147f8:	0f1b090a 	.word	0x0f1b090a
 80147fc:	131b111b 	.word	0x131b111b
 8014800:	1b1b1b15 	.word	0x1b1b1b15
 8014804:	171b1b1b 	.word	0x171b1b1b
 8014808:	191b      	.short	0x191b
 801480a:	20d1      	movs	r0, #209	; 0xd1
    }
}
 801480c:	bd00      	pop	{pc}
        switch (data[1])
 801480e:	28ff      	cmp	r0, #255	; 0xff
 8014810:	d10d      	bne.n	801482e <isATCAError+0x4c>
            return ATCA_STATUS_CRC;
 8014812:	382b      	subs	r0, #43	; 0x2b
 8014814:	e7fa      	b.n	801480c <isATCAError+0x2a>
            return ATCA_PARSE_ERROR;
 8014816:	20d2      	movs	r0, #210	; 0xd2
 8014818:	e7f8      	b.n	801480c <isATCAError+0x2a>
            return ATCA_STATUS_ECC;
 801481a:	20d6      	movs	r0, #214	; 0xd6
 801481c:	e7f6      	b.n	801480c <isATCAError+0x2a>
            return ATCA_STATUS_SELFTEST_ERROR;
 801481e:	20d7      	movs	r0, #215	; 0xd7
 8014820:	e7f4      	b.n	801480c <isATCAError+0x2a>
            return ATCA_HEALTH_TEST_ERROR;
 8014822:	20fa      	movs	r0, #250	; 0xfa
 8014824:	e7f2      	b.n	801480c <isATCAError+0x2a>
            return ATCA_EXECUTION_ERROR;
 8014826:	20f4      	movs	r0, #244	; 0xf4
 8014828:	e7f0      	b.n	801480c <isATCAError+0x2a>
            return ATCA_WAKE_SUCCESS;
 801482a:	20f3      	movs	r0, #243	; 0xf3
 801482c:	e7ee      	b.n	801480c <isATCAError+0x2a>
            return ATCA_GEN_FAIL;
 801482e:	20e1      	movs	r0, #225	; 0xe1
 8014830:	e7ec      	b.n	801480c <isATCAError+0x2a>
	...

08014834 <calib_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_execute_command(ATCAPacket* packet, ATCADevice device)
{
 8014834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014836:	0006      	movs	r6, r0
 8014838:	b085      	sub	sp, #20
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
 801483a:	6848      	ldr	r0, [r1, #4]
{
 801483c:	000d      	movs	r5, r1
        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
 801483e:	f7ff fefa 	bl	8014636 <atwake>
 8014842:	1e04      	subs	r4, r0, #0
 8014844:	d12a      	bne.n	801489c <calib_execute_command+0x68>
        {
            break;
        }

        if (ATCA_I2C_IFACE == device->mIface->mIfaceCFG->iface_type)
 8014846:	6868      	ldr	r0, [r5, #4]
    uint8_t word_address = 0xFF;
 8014848:	21ff      	movs	r1, #255	; 0xff
        if (ATCA_I2C_IFACE == device->mIface->mIfaceCFG->iface_type)
 801484a:	6843      	ldr	r3, [r0, #4]
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d100      	bne.n	8014854 <calib_execute_command+0x20>
        {
            word_address = 0x03; // insert the Word Address Value, Command token
 8014852:	39fc      	subs	r1, #252	; 0xfc
        }

        // send the command
        if ((status = atsend(device->mIface, word_address, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
 8014854:	0032      	movs	r2, r6
 8014856:	7873      	ldrb	r3, [r6, #1]
 8014858:	f7ff fed5 	bl	8014606 <atsend>
 801485c:	1e04      	subs	r4, r0, #0
 801485e:	d11d      	bne.n	801489c <calib_execute_command+0x68>
        {
            break;
        }

        // Delay for execution time or initial wait before polling
        atca_delay_ms(execution_or_wait_time);
 8014860:	2001      	movs	r0, #1
 8014862:	f7fb f88f 	bl	800f984 <hal_delay_ms>
 8014866:	4b19      	ldr	r3, [pc, #100]	; (80148cc <calib_execute_command+0x98>)
 8014868:	9301      	str	r3, [sp, #4]

        do
        {
            memset(packet->data, 0, sizeof(packet->data));
 801486a:	1db7      	adds	r7, r6, #6
 801486c:	22c0      	movs	r2, #192	; 0xc0
 801486e:	2100      	movs	r1, #0
 8014870:	0038      	movs	r0, r7
 8014872:	f001 fbc4 	bl	8015ffe <memset>
            // receive the response
            rxsize = sizeof(packet->data);
 8014876:	22c0      	movs	r2, #192	; 0xc0
 8014878:	ab02      	add	r3, sp, #8
 801487a:	80da      	strh	r2, [r3, #6]
            if ((status = atreceive(device->mIface, 0, packet->data, &rxsize)) == ATCA_SUCCESS)
 801487c:	2100      	movs	r1, #0
 801487e:	003a      	movs	r2, r7
 8014880:	6868      	ldr	r0, [r5, #4]
 8014882:	3306      	adds	r3, #6
 8014884:	f7ff fecb 	bl	801461e <atreceive>
 8014888:	1e04      	subs	r4, r0, #0
 801488a:	d011      	beq.n	80148b0 <calib_execute_command+0x7c>
                break;
            }

#ifndef ATCA_NO_POLL
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
 801488c:	2002      	movs	r0, #2
 801488e:	f7fb f879 	bl	800f984 <hal_delay_ms>
#endif
        }
        while (max_delay_count-- > 0);
 8014892:	9b01      	ldr	r3, [sp, #4]
 8014894:	3b01      	subs	r3, #1
 8014896:	9301      	str	r3, [sp, #4]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d1e6      	bne.n	801486a <calib_execute_command+0x36>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
 801489c:	6868      	ldr	r0, [r5, #4]
 801489e:	f7ff fede 	bl	801465e <atidle>
    return status;
 80148a2:	0020      	movs	r0, r4
 80148a4:	b005      	add	sp, #20
 80148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                status = ATCA_RX_NO_RESPONSE;
 80148a8:	4263      	negs	r3, r4
 80148aa:	415c      	adcs	r4, r3
 80148ac:	34e6      	adds	r4, #230	; 0xe6
 80148ae:	e7f5      	b.n	801489c <calib_execute_command+0x68>
        if (rxsize < 4)
 80148b0:	ab02      	add	r3, sp, #8
 80148b2:	88dc      	ldrh	r4, [r3, #6]
 80148b4:	2c03      	cmp	r4, #3
 80148b6:	d9f7      	bls.n	80148a8 <calib_execute_command+0x74>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
 80148b8:	0038      	movs	r0, r7
 80148ba:	f7ff ff7a 	bl	80147b2 <atCheckCrc>
 80148be:	1e04      	subs	r4, r0, #0
 80148c0:	d1ec      	bne.n	801489c <calib_execute_command+0x68>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
 80148c2:	0038      	movs	r0, r7
 80148c4:	f7ff ff8d 	bl	80147e2 <isATCAError>
 80148c8:	0004      	movs	r4, r0
 80148ca:	e7e7      	b.n	801489c <calib_execute_command+0x68>
 80148cc:	000004e3 	.word	0x000004e3

080148d0 <calib_read_zone>:
 *  \param[in]  len      Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_zone(ATCADevice device, uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
 80148d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148d2:	b0b7      	sub	sp, #220	; 0xdc
 80148d4:	0005      	movs	r5, r0
 80148d6:	000f      	movs	r7, r1
 80148d8:	a83e      	add	r0, sp, #248	; 0xf8
 80148da:	0011      	movs	r1, r2
 80148dc:	001a      	movs	r2, r3
 80148de:	ab3c      	add	r3, sp, #240	; 0xf0
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	7806      	ldrb	r6, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if ((device == NULL) || (data == NULL))
 80148e4:	2d00      	cmp	r5, #0
 80148e6:	d002      	beq.n	80148ee <calib_read_zone+0x1e>
 80148e8:	983d      	ldr	r0, [sp, #244]	; 0xf4
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d106      	bne.n	80148fc <calib_read_zone+0x2c>
        {
            status = ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 80148ee:	20e2      	movs	r0, #226	; 0xe2
 80148f0:	f7ff fded 	bl	80144ce <atca_trace>
 80148f4:	0004      	movs	r4, r0
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
 80148f6:	0020      	movs	r0, r4
 80148f8:	b037      	add	sp, #220	; 0xdc
 80148fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (len != 4 && len != 32)
 80148fc:	2e04      	cmp	r6, #4
 80148fe:	d001      	beq.n	8014904 <calib_read_zone+0x34>
 8014900:	2e20      	cmp	r6, #32
 8014902:	d1f4      	bne.n	80148ee <calib_read_zone+0x1e>
        if ((status = calib_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
 8014904:	200e      	movs	r0, #14
 8014906:	4468      	add	r0, sp
 8014908:	9000      	str	r0, [sp, #0]
 801490a:	0038      	movs	r0, r7
 801490c:	f7ff fec0 	bl	8014690 <calib_get_addr>
 8014910:	1e04      	subs	r4, r0, #0
 8014912:	d003      	beq.n	801491c <calib_read_zone+0x4c>
            ATCA_TRACE(status, "calib_read_zone - execution failed");
 8014914:	0020      	movs	r0, r4
 8014916:	f7ff fdda 	bl	80144ce <atca_trace>
            break;
 801491a:	e7ec      	b.n	80148f6 <calib_read_zone+0x26>
        if (len == ATCA_BLOCK_SIZE)
 801491c:	2e20      	cmp	r6, #32
 801491e:	d101      	bne.n	8014924 <calib_read_zone+0x54>
            zone = zone | ATCA_ZONE_READWRITE_32;
 8014920:	2380      	movs	r3, #128	; 0x80
 8014922:	431f      	orrs	r7, r3
        packet.param1 = zone;
 8014924:	466b      	mov	r3, sp
        packet.param2 = addr;
 8014926:	466a      	mov	r2, sp
        packet.param1 = zone;
 8014928:	74df      	strb	r7, [r3, #19]
        packet.param2 = addr;
 801492a:	89db      	ldrh	r3, [r3, #14]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
 801492c:	6828      	ldr	r0, [r5, #0]
 801492e:	a904      	add	r1, sp, #16
        packet.param2 = addr;
 8014930:	8293      	strh	r3, [r2, #20]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
 8014932:	f7ff ff34 	bl	801479e <atRead>
 8014936:	1e04      	subs	r4, r0, #0
 8014938:	d1ec      	bne.n	8014914 <calib_read_zone+0x44>
        if ((status = atca_execute_command(&packet, device)) != ATCA_SUCCESS)
 801493a:	0029      	movs	r1, r5
 801493c:	a804      	add	r0, sp, #16
 801493e:	f7ff ff79 	bl	8014834 <calib_execute_command>
 8014942:	1e04      	subs	r4, r0, #0
 8014944:	d1e6      	bne.n	8014914 <calib_read_zone+0x44>
        memcpy(data, &packet.data[1], len);
 8014946:	2117      	movs	r1, #23
 8014948:	0032      	movs	r2, r6
 801494a:	983d      	ldr	r0, [sp, #244]	; 0xf4
 801494c:	4469      	add	r1, sp
 801494e:	f001 fb4d 	bl	8015fec <memcpy>
    return status;
 8014952:	e7d0      	b.n	80148f6 <calib_read_zone+0x26>

08014954 <calib_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_serial_number(ATCADevice device, uint8_t* serial_number)
{
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	000d      	movs	r5, r1
 8014958:	b08c      	sub	sp, #48	; 0x30
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
 801495a:	2900      	cmp	r1, #0
 801495c:	d106      	bne.n	801496c <calib_read_serial_number+0x18>
    {
        return ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 801495e:	20e2      	movs	r0, #226	; 0xe2
 8014960:	f7ff fdb5 	bl	80144ce <atca_trace>
 8014964:	0004      	movs	r4, r0
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
 8014966:	0020      	movs	r0, r4
 8014968:	b00c      	add	sp, #48	; 0x30
 801496a:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = calib_read_zone(device, ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
 801496c:	2100      	movs	r1, #0
 801496e:	2320      	movs	r3, #32
 8014970:	ae04      	add	r6, sp, #16
 8014972:	9302      	str	r3, [sp, #8]
 8014974:	000a      	movs	r2, r1
 8014976:	000b      	movs	r3, r1
 8014978:	9601      	str	r6, [sp, #4]
 801497a:	9100      	str	r1, [sp, #0]
 801497c:	f7ff ffa8 	bl	80148d0 <calib_read_zone>
 8014980:	1e04      	subs	r4, r0, #0
 8014982:	d002      	beq.n	801498a <calib_read_serial_number+0x36>
            ATCA_TRACE(status, "calib_read_zone - failed");
 8014984:	f7ff fda3 	bl	80144ce <atca_trace>
            break;
 8014988:	e7ed      	b.n	8014966 <calib_read_serial_number+0x12>
        memcpy(&serial_number[0], &read_buf[0], 4);
 801498a:	0031      	movs	r1, r6
 801498c:	2204      	movs	r2, #4
 801498e:	0028      	movs	r0, r5
 8014990:	f001 fb2c 	bl	8015fec <memcpy>
        memcpy(&serial_number[4], &read_buf[8], 5);
 8014994:	2205      	movs	r2, #5
 8014996:	1d28      	adds	r0, r5, #4
 8014998:	a906      	add	r1, sp, #24
 801499a:	f001 fb27 	bl	8015fec <memcpy>
 801499e:	e7e2      	b.n	8014966 <calib_read_serial_number+0x12>

080149a0 <calib_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_bytes_zone(ATCADevice device, uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
 80149a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149a2:	b095      	sub	sp, #84	; 0x54
 80149a4:	9307      	str	r3, [sp, #28]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
 80149a6:	2300      	movs	r3, #0
{
 80149a8:	000f      	movs	r7, r1
 80149aa:	9009      	str	r0, [sp, #36]	; 0x24
 80149ac:	9208      	str	r2, [sp, #32]
    size_t zone_size = 0;
 80149ae:	930b      	str	r3, [sp, #44]	; 0x2c
    uint8_t read_size = ATCA_BLOCK_SIZE;
    size_t read_buf_idx = 0;
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
 80149b0:	2902      	cmp	r1, #2
 80149b2:	d906      	bls.n	80149c2 <calib_read_bytes_zone+0x22>
            ATCA_TRACE(status, "calib_get_zone_size - failed");
            break;
        }
        if (offset + length > zone_size)
        {
            return ATCA_TRACE(ATCA_BAD_PARAM, "Invalid parameter received"); // Can't read past the end of a zone
 80149b4:	20e2      	movs	r0, #226	; 0xe2
 80149b6:	f7ff fd8a 	bl	80144ce <atca_trace>
 80149ba:	0004      	movs	r4, r0
        }
    }
    while (false);

    return status;
}
 80149bc:	0020      	movs	r0, r4
 80149be:	b015      	add	sp, #84	; 0x54
 80149c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
 80149c2:	2902      	cmp	r1, #2
 80149c4:	d102      	bne.n	80149cc <calib_read_bytes_zone+0x2c>
 80149c6:	9b08      	ldr	r3, [sp, #32]
 80149c8:	2b0f      	cmp	r3, #15
 80149ca:	d8f3      	bhi.n	80149b4 <calib_read_bytes_zone+0x14>
    if (length == 0)
 80149cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d05b      	beq.n	8014a8a <calib_read_bytes_zone+0xea>
    if (data == NULL)
 80149d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d0ed      	beq.n	80149b4 <calib_read_bytes_zone+0x14>
        if (ATCA_SUCCESS != (status = calib_get_zone_size(device, zone, slot, &zone_size)))
 80149d8:	0039      	movs	r1, r7
 80149da:	9a08      	ldr	r2, [sp, #32]
 80149dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149de:	ab0b      	add	r3, sp, #44	; 0x2c
 80149e0:	f7ff fe75 	bl	80146ce <calib_get_zone_size>
 80149e4:	0004      	movs	r4, r0
 80149e6:	1e05      	subs	r5, r0, #0
 80149e8:	d003      	beq.n	80149f2 <calib_read_bytes_zone+0x52>
                ATCA_TRACE(status, "calib_read_zone - falied");
 80149ea:	0020      	movs	r0, r4
 80149ec:	f7ff fd6f 	bl	80144ce <atca_trace>
                break;
 80149f0:	e7e4      	b.n	80149bc <calib_read_bytes_zone+0x1c>
        if (offset + length > zone_size)
 80149f2:	9a07      	ldr	r2, [sp, #28]
 80149f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80149f6:	189b      	adds	r3, r3, r2
 80149f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149fa:	4293      	cmp	r3, r2
 80149fc:	d8da      	bhi.n	80149b4 <calib_read_bytes_zone+0x14>
        cur_block = offset / ATCA_BLOCK_SIZE;
 80149fe:	9b07      	ldr	r3, [sp, #28]
    size_t data_idx = 0;
 8014a00:	0006      	movs	r6, r0
        cur_block = offset / ATCA_BLOCK_SIZE;
 8014a02:	095b      	lsrs	r3, r3, #5
 8014a04:	9306      	str	r3, [sp, #24]
    uint8_t read_size = ATCA_BLOCK_SIZE;
 8014a06:	2320      	movs	r3, #32
 8014a08:	9305      	str	r3, [sp, #20]
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
 8014a0a:	9b05      	ldr	r3, [sp, #20]
 8014a0c:	2b20      	cmp	r3, #32
 8014a0e:	d10c      	bne.n	8014a2a <calib_read_bytes_zone+0x8a>
 8014a10:	9b06      	ldr	r3, [sp, #24]
 8014a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a14:	015b      	lsls	r3, r3, #5
 8014a16:	1ad3      	subs	r3, r2, r3
 8014a18:	2b1f      	cmp	r3, #31
 8014a1a:	d806      	bhi.n	8014a2a <calib_read_bytes_zone+0x8a>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
 8014a1c:	9b07      	ldr	r3, [sp, #28]
 8014a1e:	199d      	adds	r5, r3, r6
 8014a20:	2307      	movs	r3, #7
 8014a22:	08ad      	lsrs	r5, r5, #2
 8014a24:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
 8014a26:	3b03      	subs	r3, #3
 8014a28:	9305      	str	r3, [sp, #20]
            if (ATCA_SUCCESS != (status = calib_read_zone(device, zone, slot, (uint8_t)cur_block, (uint8_t)cur_offset, read_buf, read_size)))
 8014a2a:	466b      	mov	r3, sp
 8014a2c:	9a05      	ldr	r2, [sp, #20]
 8014a2e:	7e1b      	ldrb	r3, [r3, #24]
 8014a30:	9202      	str	r2, [sp, #8]
 8014a32:	aa0c      	add	r2, sp, #48	; 0x30
 8014a34:	9201      	str	r2, [sp, #4]
 8014a36:	b2ea      	uxtb	r2, r5
 8014a38:	0039      	movs	r1, r7
 8014a3a:	9200      	str	r2, [sp, #0]
 8014a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a3e:	9a08      	ldr	r2, [sp, #32]
 8014a40:	f7ff ff46 	bl	80148d0 <calib_read_zone>
 8014a44:	0004      	movs	r4, r0
 8014a46:	1e01      	subs	r1, r0, #0
 8014a48:	d1cf      	bne.n	80149ea <calib_read_bytes_zone+0x4a>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
 8014a4a:	9b06      	ldr	r3, [sp, #24]
            if (read_offset < offset)
 8014a4c:	9a07      	ldr	r2, [sp, #28]
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
 8014a4e:	00db      	lsls	r3, r3, #3
 8014a50:	195b      	adds	r3, r3, r5
 8014a52:	009b      	lsls	r3, r3, #2
            if (read_offset < offset)
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d900      	bls.n	8014a5a <calib_read_bytes_zone+0xba>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
 8014a58:	1ad1      	subs	r1, r2, r3
            if (length - data_idx < read_size - read_buf_idx)
 8014a5a:	9b05      	ldr	r3, [sp, #20]
 8014a5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014a5e:	1a5b      	subs	r3, r3, r1
 8014a60:	1b94      	subs	r4, r2, r6
 8014a62:	429c      	cmp	r4, r3
 8014a64:	d900      	bls.n	8014a68 <calib_read_bytes_zone+0xc8>
 8014a66:	001c      	movs	r4, r3
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
 8014a68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014a6a:	0022      	movs	r2, r4
 8014a6c:	1998      	adds	r0, r3, r6
 8014a6e:	ab0c      	add	r3, sp, #48	; 0x30
 8014a70:	1859      	adds	r1, r3, r1
 8014a72:	f001 fabb 	bl	8015fec <memcpy>
            if (read_size == ATCA_BLOCK_SIZE)
 8014a76:	9b05      	ldr	r3, [sp, #20]
            data_idx += copy_length;
 8014a78:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
 8014a7a:	2b20      	cmp	r3, #32
 8014a7c:	d107      	bne.n	8014a8e <calib_read_bytes_zone+0xee>
                cur_block += 1;
 8014a7e:	9b06      	ldr	r3, [sp, #24]
 8014a80:	3301      	adds	r3, #1
 8014a82:	9306      	str	r3, [sp, #24]
        while (data_idx < length)
 8014a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a86:	42b3      	cmp	r3, r6
 8014a88:	d8bf      	bhi.n	8014a0a <calib_read_bytes_zone+0x6a>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
 8014a8a:	2400      	movs	r4, #0
 8014a8c:	e796      	b.n	80149bc <calib_read_bytes_zone+0x1c>
                cur_offset += 1;
 8014a8e:	3501      	adds	r5, #1
 8014a90:	e7f8      	b.n	8014a84 <calib_read_bytes_zone+0xe4>
	...

08014a94 <hal_iface_init>:
 * \param[in] cfg pointer to ATCAIfaceCfg object
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t **hal)
{
 8014a94:	0003      	movs	r3, r0
    ATCA_STATUS status = ATCA_BAD_PARAM;
 8014a96:	20e2      	movs	r0, #226	; 0xe2

    if (cfg && hal)
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d009      	beq.n	8014ab0 <hal_iface_init+0x1c>
 8014a9c:	2900      	cmp	r1, #0
 8014a9e:	d007      	beq.n	8014ab0 <hal_iface_init+0x1c>
    {
        status = hal_iface_get_registered(cfg->iface_type, hal);
 8014aa0:	781b      	ldrb	r3, [r3, #0]
    if ((ATCA_UNKNOWN_IFACE > iface_type) && hal)
 8014aa2:	2b06      	cmp	r3, #6
 8014aa4:	d804      	bhi.n	8014ab0 <hal_iface_init+0x1c>
        status = ATCA_SUCCESS;
 8014aa6:	2000      	movs	r0, #0
        *hal = atca_registered_hal_list[iface_type];
 8014aa8:	4a02      	ldr	r2, [pc, #8]	; (8014ab4 <hal_iface_init+0x20>)
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	589b      	ldr	r3, [r3, r2]
 8014aae:	600b      	str	r3, [r1, #0]
        }
#endif
    }

    return status;
}
 8014ab0:	4770      	bx	lr
 8014ab2:	46c0      	nop			; (mov r8, r8)
 8014ab4:	20000200 	.word	0x20000200

08014ab8 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
 8014ab8:	0003      	movs	r3, r0
 8014aba:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_BAD_PARAM;
 8014abc:	20e2      	movs	r0, #226	; 0xe2
    if ((ATCA_UNKNOWN_IFACE > iface_type) && hal)
 8014abe:	2b06      	cmp	r3, #6
 8014ac0:	d807      	bhi.n	8014ad2 <hal_iface_release+0x1a>

    status = hal_iface_get_registered(iface_type, &hal);

    if (ATCA_SUCCESS == status)
    {
        status = hal->halrelease ? hal->halrelease(hal_data) : ATCA_BAD_PARAM;
 8014ac2:	4a04      	ldr	r2, [pc, #16]	; (8014ad4 <hal_iface_release+0x1c>)
        *hal = atca_registered_hal_list[iface_type];
 8014ac4:	009b      	lsls	r3, r3, #2
        status = hal->halrelease ? hal->halrelease(hal_data) : ATCA_BAD_PARAM;
 8014ac6:	589b      	ldr	r3, [r3, r2]
 8014ac8:	69db      	ldr	r3, [r3, #28]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d001      	beq.n	8014ad2 <hal_iface_release+0x1a>
 8014ace:	0008      	movs	r0, r1
 8014ad0:	4798      	blx	r3
    }

    return status;
}
 8014ad2:	bd10      	pop	{r4, pc}
 8014ad4:	20000200 	.word	0x20000200

08014ad8 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8014ad8:	2001      	movs	r0, #1
 8014ada:	4770      	bx	lr

08014adc <RadioOnTxTimeoutIrq>:
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014adc:	4b04      	ldr	r3, [pc, #16]	; (8014af0 <RadioOnTxTimeoutIrq+0x14>)
{
 8014ade:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d003      	beq.n	8014aee <RadioOnTxTimeoutIrq+0x12>
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d000      	beq.n	8014aee <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 8014aec:	4798      	blx	r3
    }
}
 8014aee:	bd10      	pop	{r4, pc}
 8014af0:	20001b68 	.word	0x20001b68

08014af4 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014af4:	4b04      	ldr	r3, [pc, #16]	; (8014b08 <RadioOnRxTimeoutIrq+0x14>)
{
 8014af6:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d003      	beq.n	8014b06 <RadioOnRxTimeoutIrq+0x12>
 8014afe:	68db      	ldr	r3, [r3, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d000      	beq.n	8014b06 <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 8014b04:	4798      	blx	r3
    }
}
 8014b06:	bd10      	pop	{r4, pc}
 8014b08:	20001b68 	.word	0x20001b68

08014b0c <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	4b01      	ldr	r3, [pc, #4]	; (8014b14 <RadioOnDioIrq+0x8>)
 8014b10:	701a      	strb	r2, [r3, #0]
}
 8014b12:	4770      	bx	lr
 8014b14:	20001b64 	.word	0x20001b64

08014b18 <RadioStandby>:
{
 8014b18:	b510      	push	{r4, lr}
    SX126xSetStandby( STDBY_RC );
 8014b1a:	2000      	movs	r0, #0
 8014b1c:	f000 fdd2 	bl	80156c4 <SX126xSetStandby>
}
 8014b20:	bd10      	pop	{r4, pc}
	...

08014b24 <RadioGetStatus>:
{
 8014b24:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 8014b26:	f7ef fd61 	bl	80045ec <SX126xGetOperatingMode>
 8014b2a:	1f03      	subs	r3, r0, #4
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	2000      	movs	r0, #0
 8014b30:	2b03      	cmp	r3, #3
 8014b32:	d801      	bhi.n	8014b38 <RadioGetStatus+0x14>
 8014b34:	4a01      	ldr	r2, [pc, #4]	; (8014b3c <RadioGetStatus+0x18>)
 8014b36:	5cd0      	ldrb	r0, [r2, r3]
}
 8014b38:	bd10      	pop	{r4, pc}
 8014b3a:	46c0      	nop			; (mov r8, r8)
 8014b3c:	0801ab14 	.word	0x0801ab14

08014b40 <RadioSetChannel>:
{
 8014b40:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 8014b42:	f000 ff35 	bl	80159b0 <SX126xSetRfFrequency>
}
 8014b46:	bd10      	pop	{r4, pc}

08014b48 <RadioRead>:
{
 8014b48:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 8014b4a:	b280      	uxth	r0, r0
 8014b4c:	f7ef fe68 	bl	8004820 <SX126xReadRegister>
}
 8014b50:	bd10      	pop	{r4, pc}

08014b52 <RadioWrite>:
{
 8014b52:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 8014b54:	b280      	uxth	r0, r0
 8014b56:	f7ef fe27 	bl	80047a8 <SX126xWriteRegister>
}
 8014b5a:	bd10      	pop	{r4, pc}

08014b5c <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8014b5c:	2300      	movs	r3, #0
{
 8014b5e:	b570      	push	{r4, r5, r6, lr}
 8014b60:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8014b62:	4910      	ldr	r1, [pc, #64]	; (8014ba4 <RadioSend+0x48>)
 8014b64:	001a      	movs	r2, r3
{
 8014b66:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8014b68:	0008      	movs	r0, r1
 8014b6a:	f000 fef9 	bl	8015960 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8014b6e:	f000 ff5b 	bl	8015a28 <SX126xGetPacketType>
 8014b72:	4b0d      	ldr	r3, [pc, #52]	; (8014ba8 <RadioSend+0x4c>)
 8014b74:	2801      	cmp	r0, #1
 8014b76:	d113      	bne.n	8014ba0 <RadioSend+0x44>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8014b78:	33c3      	adds	r3, #195	; 0xc3
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8014b7a:	701c      	strb	r4, [r3, #0]
    SX126xSetPacketParams( &SX126x.PacketParams );
 8014b7c:	480b      	ldr	r0, [pc, #44]	; (8014bac <RadioSend+0x50>)
 8014b7e:	f000 fff5 	bl	8015b6c <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 8014b82:	2200      	movs	r2, #0
 8014b84:	0028      	movs	r0, r5
 8014b86:	0021      	movs	r1, r4
 8014b88:	f000 fdd8 	bl	801573c <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8014b8c:	4c08      	ldr	r4, [pc, #32]	; (8014bb0 <RadioSend+0x54>)
 8014b8e:	4b09      	ldr	r3, [pc, #36]	; (8014bb4 <RadioSend+0x58>)
 8014b90:	0020      	movs	r0, r4
 8014b92:	6819      	ldr	r1, [r3, #0]
 8014b94:	f7f6 ff36 	bl	800ba04 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8014b98:	0020      	movs	r0, r4
 8014b9a:	f7f6 fe8d 	bl	800b8b8 <TimerStart>
}
 8014b9e:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8014ba0:	33bc      	adds	r3, #188	; 0xbc
 8014ba2:	e7ea      	b.n	8014b7a <RadioSend+0x1e>
 8014ba4:	00000201 	.word	0x00000201
 8014ba8:	20001ca0 	.word	0x20001ca0
 8014bac:	20001d54 	.word	0x20001d54
 8014bb0:	20001d94 	.word	0x20001d94
 8014bb4:	20001d90 	.word	0x20001d90

08014bb8 <RadioSleep>:
{
 8014bb8:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 8014bba:	2004      	movs	r0, #4
 8014bbc:	f000 fd68 	bl	8015690 <SX126xSetSleep>
    DelayMs( 2 );
 8014bc0:	2002      	movs	r0, #2
 8014bc2:	f7f6 fd17 	bl	800b5f4 <DelayMs>
}
 8014bc6:	bd10      	pop	{r4, pc}

08014bc8 <RadioSetRxDutyCycle>:
{
 8014bc8:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8014bca:	f000 fe21 	bl	8015810 <SX126xSetRxDutyCycle>
}
 8014bce:	bd10      	pop	{r4, pc}

08014bd0 <RadioReadBuffer>:
{
 8014bd0:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 8014bd2:	b280      	uxth	r0, r0
 8014bd4:	f7ef fdf2 	bl	80047bc <SX126xReadRegisters>
}
 8014bd8:	bd10      	pop	{r4, pc}

08014bda <RadioWriteBuffer>:
{
 8014bda:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 8014bdc:	b280      	uxth	r0, r0
 8014bde:	f7ef fdb5 	bl	800474c <SX126xWriteRegisters>
}
 8014be2:	bd10      	pop	{r4, pc}

08014be4 <RadioStartCad>:
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014be4:	20c0      	movs	r0, #192	; 0xc0
 8014be6:	2300      	movs	r3, #0
{
 8014be8:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014bea:	0040      	lsls	r0, r0, #1
 8014bec:	001a      	movs	r2, r3
 8014bee:	0001      	movs	r1, r0
 8014bf0:	f000 feb6 	bl	8015960 <SX126xSetDioIrqParams>
    SX126xSetCad( );
 8014bf4:	f000 fe21 	bl	801583a <SX126xSetCad>
}
 8014bf8:	bd10      	pop	{r4, pc}
	...

08014bfc <RadioSetTxContinuousWave>:
{
 8014bfc:	b570      	push	{r4, r5, r6, lr}
 8014bfe:	000d      	movs	r5, r1
 8014c00:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 8014c02:	f000 fed5 	bl	80159b0 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8014c06:	0028      	movs	r0, r5
 8014c08:	f7ef fe6c 	bl	80048e4 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 8014c0c:	f000 fe1f 	bl	801584e <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 8014c10:	21fa      	movs	r1, #250	; 0xfa
 8014c12:	0089      	lsls	r1, r1, #2
 8014c14:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014c16:	4c04      	ldr	r4, [pc, #16]	; (8014c28 <RadioSetTxContinuousWave+0x2c>)
 8014c18:	0020      	movs	r0, r4
 8014c1a:	f7f6 fef3 	bl	800ba04 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8014c1e:	0020      	movs	r0, r4
 8014c20:	f7f6 fe4a 	bl	800b8b8 <TimerStart>
}
 8014c24:	bd70      	pop	{r4, r5, r6, pc}
 8014c26:	46c0      	nop			; (mov r8, r8)
 8014c28:	20001d94 	.word	0x20001d94

08014c2c <RadioRssi>:
{
 8014c2c:	b510      	push	{r4, lr}
    return SX126xGetRssiInst( );
 8014c2e:	f001 f809 	bl	8015c44 <SX126xGetRssiInst>
 8014c32:	b200      	sxth	r0, r0
}
 8014c34:	bd10      	pop	{r4, pc}

08014c36 <RadioGetWakeupTime>:
{
 8014c36:	b510      	push	{r4, lr}
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8014c38:	f7ef fcd1 	bl	80045de <SX126xGetBoardTcxoWakeupTime>
 8014c3c:	3003      	adds	r0, #3
}
 8014c3e:	bd10      	pop	{r4, pc}

08014c40 <RadioGetFskBandwidthRegValue>:
{
 8014c40:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d011      	beq.n	8014c6a <RadioGetFskBandwidthRegValue+0x2a>
 8014c46:	4a0a      	ldr	r2, [pc, #40]	; (8014c70 <RadioGetFskBandwidthRegValue+0x30>)
 8014c48:	2301      	movs	r3, #1
 8014c4a:	0011      	movs	r1, r2
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8014c4c:	6814      	ldr	r4, [r2, #0]
 8014c4e:	42a0      	cmp	r0, r4
 8014c50:	d306      	bcc.n	8014c60 <RadioGetFskBandwidthRegValue+0x20>
 8014c52:	6894      	ldr	r4, [r2, #8]
 8014c54:	42a0      	cmp	r0, r4
 8014c56:	d203      	bcs.n	8014c60 <RadioGetFskBandwidthRegValue+0x20>
            return FskBandwidths[i+1].RegValue;
 8014c58:	00db      	lsls	r3, r3, #3
 8014c5a:	18cb      	adds	r3, r1, r3
 8014c5c:	7918      	ldrb	r0, [r3, #4]
}
 8014c5e:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8014c60:	3301      	adds	r3, #1
 8014c62:	3208      	adds	r2, #8
 8014c64:	2b16      	cmp	r3, #22
 8014c66:	d1f1      	bne.n	8014c4c <RadioGetFskBandwidthRegValue+0xc>
    while( 1 );
 8014c68:	e7fe      	b.n	8014c68 <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 8014c6a:	201f      	movs	r0, #31
 8014c6c:	e7f7      	b.n	8014c5e <RadioGetFskBandwidthRegValue+0x1e>
 8014c6e:	46c0      	nop			; (mov r8, r8)
 8014c70:	0801ab18 	.word	0x0801ab18

08014c74 <RadioSetMaxPayloadLength>:
{
 8014c74:	b510      	push	{r4, lr}
 8014c76:	4b0a      	ldr	r3, [pc, #40]	; (8014ca0 <RadioSetMaxPayloadLength+0x2c>)
    if( modem == MODEM_LORA )
 8014c78:	2801      	cmp	r0, #1
 8014c7a:	d107      	bne.n	8014c8c <RadioSetMaxPayloadLength+0x18>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8014c7c:	4a09      	ldr	r2, [pc, #36]	; (8014ca4 <RadioSetMaxPayloadLength+0x30>)
 8014c7e:	33c3      	adds	r3, #195	; 0xc3
 8014c80:	7011      	strb	r1, [r2, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8014c82:	4809      	ldr	r0, [pc, #36]	; (8014ca8 <RadioSetMaxPayloadLength+0x34>)
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014c84:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8014c86:	f000 ff71 	bl	8015b6c <SX126xSetPacketParams>
}
 8014c8a:	bd10      	pop	{r4, pc}
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8014c8c:	001a      	movs	r2, r3
 8014c8e:	32bb      	adds	r2, #187	; 0xbb
 8014c90:	7812      	ldrb	r2, [r2, #0]
 8014c92:	2a01      	cmp	r2, #1
 8014c94:	d1f9      	bne.n	8014c8a <RadioSetMaxPayloadLength+0x16>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014c96:	4a03      	ldr	r2, [pc, #12]	; (8014ca4 <RadioSetMaxPayloadLength+0x30>)
 8014c98:	33bc      	adds	r3, #188	; 0xbc
 8014c9a:	7011      	strb	r1, [r2, #0]
 8014c9c:	e7f1      	b.n	8014c82 <RadioSetMaxPayloadLength+0xe>
 8014c9e:	46c0      	nop			; (mov r8, r8)
 8014ca0:	20001ca0 	.word	0x20001ca0
 8014ca4:	20000240 	.word	0x20000240
 8014ca8:	20001d54 	.word	0x20001d54

08014cac <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014cac:	2300      	movs	r3, #0
 8014cae:	490e      	ldr	r1, [pc, #56]	; (8014ce8 <RadioRx+0x3c>)
{
 8014cb0:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014cb2:	001a      	movs	r2, r3
{
 8014cb4:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014cb6:	0008      	movs	r0, r1
 8014cb8:	f000 fe52 	bl	8015960 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8014cbc:	2c00      	cmp	r4, #0
 8014cbe:	d007      	beq.n	8014cd0 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014cc0:	4d0a      	ldr	r5, [pc, #40]	; (8014cec <RadioRx+0x40>)
 8014cc2:	0021      	movs	r1, r4
 8014cc4:	0028      	movs	r0, r5
 8014cc6:	f7f6 fe9d 	bl	800ba04 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8014cca:	0028      	movs	r0, r5
 8014ccc:	f7f6 fdf4 	bl	800b8b8 <TimerStart>
    if( RxContinuous == true )
 8014cd0:	4b07      	ldr	r3, [pc, #28]	; (8014cf0 <RadioRx+0x44>)
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d003      	beq.n	8014ce0 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8014cd8:	4806      	ldr	r0, [pc, #24]	; (8014cf4 <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 8014cda:	f000 fd37 	bl	801574c <SX126xSetRx>
}
 8014cde:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 8014ce0:	4b05      	ldr	r3, [pc, #20]	; (8014cf8 <RadioRx+0x4c>)
 8014ce2:	6818      	ldr	r0, [r3, #0]
 8014ce4:	0180      	lsls	r0, r0, #6
 8014ce6:	e7f8      	b.n	8014cda <RadioRx+0x2e>
 8014ce8:	0000ffff 	.word	0x0000ffff
 8014cec:	20001c88 	.word	0x20001c88
 8014cf0:	20001c81 	.word	0x20001c81
 8014cf4:	00ffffff 	.word	0x00ffffff
 8014cf8:	20001c84 	.word	0x20001c84

08014cfc <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	490e      	ldr	r1, [pc, #56]	; (8014d38 <RadioRxBoosted+0x3c>)
{
 8014d00:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014d02:	001a      	movs	r2, r3
{
 8014d04:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8014d06:	0008      	movs	r0, r1
 8014d08:	f000 fe2a 	bl	8015960 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8014d0c:	2c00      	cmp	r4, #0
 8014d0e:	d007      	beq.n	8014d20 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014d10:	4d0a      	ldr	r5, [pc, #40]	; (8014d3c <RadioRxBoosted+0x40>)
 8014d12:	0021      	movs	r1, r4
 8014d14:	0028      	movs	r0, r5
 8014d16:	f7f6 fe75 	bl	800ba04 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8014d1a:	0028      	movs	r0, r5
 8014d1c:	f7f6 fdcc 	bl	800b8b8 <TimerStart>
    if( RxContinuous == true )
 8014d20:	4b07      	ldr	r3, [pc, #28]	; (8014d40 <RadioRxBoosted+0x44>)
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d003      	beq.n	8014d30 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8014d28:	4806      	ldr	r0, [pc, #24]	; (8014d44 <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 8014d2a:	f000 fd5b 	bl	80157e4 <SX126xSetRxBoosted>
}
 8014d2e:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 8014d30:	4b05      	ldr	r3, [pc, #20]	; (8014d48 <RadioRxBoosted+0x4c>)
 8014d32:	6818      	ldr	r0, [r3, #0]
 8014d34:	0180      	lsls	r0, r0, #6
 8014d36:	e7f8      	b.n	8014d2a <RadioRxBoosted+0x2e>
 8014d38:	0000ffff 	.word	0x0000ffff
 8014d3c:	20001c88 	.word	0x20001c88
 8014d40:	20001c81 	.word	0x20001c81
 8014d44:	00ffffff 	.word	0x00ffffff
 8014d48:	20001c84 	.word	0x20001c84

08014d4c <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8014d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d4e:	b085      	sub	sp, #20
    CRITICAL_SECTION_BEGIN( );
 8014d50:	a802      	add	r0, sp, #8
 8014d52:	f7ef f85d 	bl	8003e10 <BoardCriticalSectionBegin>
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
    IrqFired = false;
 8014d56:	2300      	movs	r3, #0
    const bool isIrqFired = IrqFired;
 8014d58:	4d5a      	ldr	r5, [pc, #360]	; (8014ec4 <RadioIrqProcess+0x178>)
    CRITICAL_SECTION_END( );
 8014d5a:	a802      	add	r0, sp, #8
    const bool isIrqFired = IrqFired;
 8014d5c:	782c      	ldrb	r4, [r5, #0]
    IrqFired = false;
 8014d5e:	702b      	strb	r3, [r5, #0]
    CRITICAL_SECTION_END( );
 8014d60:	f7ef f85b 	bl	8003e1a <BoardCriticalSectionEnd>

    if( isIrqFired == true )
 8014d64:	2c00      	cmp	r4, #0
 8014d66:	d06e      	beq.n	8014e46 <RadioIrqProcess+0xfa>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 8014d68:	f000 fe0e 	bl	8015988 <SX126xGetIrqStatus>
 8014d6c:	0004      	movs	r4, r0
        SX126xClearIrqStatus( irqRegs );
 8014d6e:	f000 ffe5 	bl	8015d3c <SX126xClearIrqStatus>

        // Check if DIO1 pin is High. If it is the case revert IrqFired to true
        CRITICAL_SECTION_BEGIN( );
 8014d72:	a803      	add	r0, sp, #12
 8014d74:	f7ef f84c 	bl	8003e10 <BoardCriticalSectionBegin>
        if( SX126xGetDio1PinState( ) == 1 )
 8014d78:	f7ef fdbc 	bl	80048f4 <SX126xGetDio1PinState>
 8014d7c:	2801      	cmp	r0, #1
 8014d7e:	d100      	bne.n	8014d82 <RadioIrqProcess+0x36>
        {
            IrqFired = true;
 8014d80:	7028      	strb	r0, [r5, #0]
        }
        CRITICAL_SECTION_END( );

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8014d82:	2501      	movs	r5, #1
        CRITICAL_SECTION_END( );
 8014d84:	a803      	add	r0, sp, #12
 8014d86:	f7ef f848 	bl	8003e1a <BoardCriticalSectionEnd>
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8014d8a:	422c      	tst	r4, r5
 8014d8c:	d00d      	beq.n	8014daa <RadioIrqProcess+0x5e>
        {
            TimerStop( &TxTimeoutTimer );
 8014d8e:	484e      	ldr	r0, [pc, #312]	; (8014ec8 <RadioIrqProcess+0x17c>)
 8014d90:	f7f6 fe0a 	bl	800b9a8 <TimerStop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8014d94:	0028      	movs	r0, r5
 8014d96:	f7ef fc2f 	bl	80045f8 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8014d9a:	4b4c      	ldr	r3, [pc, #304]	; (8014ecc <RadioIrqProcess+0x180>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <RadioIrqProcess+0x5e>
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d000      	beq.n	8014daa <RadioIrqProcess+0x5e>
            {
                RadioEvents->TxDone( );
 8014da8:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8014daa:	2502      	movs	r5, #2
 8014dac:	422c      	tst	r4, r5
 8014dae:	d013      	beq.n	8014dd8 <RadioIrqProcess+0x8c>
        {
            TimerStop( &RxTimeoutTimer );
 8014db0:	4847      	ldr	r0, [pc, #284]	; (8014ed0 <RadioIrqProcess+0x184>)
 8014db2:	f7f6 fdf9 	bl	800b9a8 <TimerStop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8014db6:	4f45      	ldr	r7, [pc, #276]	; (8014ecc <RadioIrqProcess+0x180>)
 8014db8:	4b46      	ldr	r3, [pc, #280]	; (8014ed4 <RadioIrqProcess+0x188>)
 8014dba:	0662      	lsls	r2, r4, #25
 8014dbc:	d545      	bpl.n	8014e4a <RadioIrqProcess+0xfe>
            {
                if( RxContinuous == false )
 8014dbe:	781b      	ldrb	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d102      	bne.n	8014dca <RadioIrqProcess+0x7e>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8014dc4:	2001      	movs	r0, #1
 8014dc6:	f7ef fc17 	bl	80045f8 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d003      	beq.n	8014dd8 <RadioIrqProcess+0x8c>
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d000      	beq.n	8014dd8 <RadioIrqProcess+0x8c>
                {
                    RadioEvents->RxError( );
 8014dd6:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8014dd8:	0623      	lsls	r3, r4, #24
 8014dda:	d50c      	bpl.n	8014df6 <RadioIrqProcess+0xaa>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8014ddc:	2001      	movs	r0, #1
 8014dde:	f7ef fc0b 	bl	80045f8 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014de2:	4b3a      	ldr	r3, [pc, #232]	; (8014ecc <RadioIrqProcess+0x180>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d005      	beq.n	8014df6 <RadioIrqProcess+0xaa>
 8014dea:	699b      	ldr	r3, [r3, #24]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d002      	beq.n	8014df6 <RadioIrqProcess+0xaa>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8014df0:	05e0      	lsls	r0, r4, #23
 8014df2:	0fc0      	lsrs	r0, r0, #31
 8014df4:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8014df6:	05a3      	lsls	r3, r4, #22
 8014df8:	d511      	bpl.n	8014e1e <RadioIrqProcess+0xd2>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 8014dfa:	f7ef fbf7 	bl	80045ec <SX126xGetOperatingMode>
 8014dfe:	2804      	cmp	r0, #4
 8014e00:	d14f      	bne.n	8014ea2 <RadioIrqProcess+0x156>
            {
                TimerStop( &TxTimeoutTimer );
 8014e02:	4831      	ldr	r0, [pc, #196]	; (8014ec8 <RadioIrqProcess+0x17c>)
 8014e04:	f7f6 fdd0 	bl	800b9a8 <TimerStop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8014e08:	2001      	movs	r0, #1
 8014e0a:	f7ef fbf5 	bl	80045f8 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014e0e:	4b2f      	ldr	r3, [pc, #188]	; (8014ecc <RadioIrqProcess+0x180>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d003      	beq.n	8014e1e <RadioIrqProcess+0xd2>
 8014e16:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d000      	beq.n	8014e1e <RadioIrqProcess+0xd2>
                {
                    RadioEvents->RxTimeout( );
 8014e1c:	4798      	blx	r3
        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8014e1e:	06a3      	lsls	r3, r4, #26
 8014e20:	d511      	bpl.n	8014e46 <RadioIrqProcess+0xfa>
        {
            TimerStop( &RxTimeoutTimer );
 8014e22:	482b      	ldr	r0, [pc, #172]	; (8014ed0 <RadioIrqProcess+0x184>)
 8014e24:	f7f6 fdc0 	bl	800b9a8 <TimerStop>
            if( RxContinuous == false )
 8014e28:	4b2a      	ldr	r3, [pc, #168]	; (8014ed4 <RadioIrqProcess+0x188>)
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d102      	bne.n	8014e36 <RadioIrqProcess+0xea>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8014e30:	2001      	movs	r0, #1
 8014e32:	f7ef fbe1 	bl	80045f8 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014e36:	4b25      	ldr	r3, [pc, #148]	; (8014ecc <RadioIrqProcess+0x180>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d003      	beq.n	8014e46 <RadioIrqProcess+0xfa>
 8014e3e:	68db      	ldr	r3, [r3, #12]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d000      	beq.n	8014e46 <RadioIrqProcess+0xfa>
            {
                RadioEvents->RxTimeout( );
 8014e44:	4798      	blx	r3
            }
        }
    }
}
 8014e46:	b005      	add	sp, #20
 8014e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if( RxContinuous == false )
 8014e4a:	781e      	ldrb	r6, [r3, #0]
 8014e4c:	2e00      	cmp	r6, #0
 8014e4e:	d10e      	bne.n	8014e6e <RadioIrqProcess+0x122>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8014e50:	2001      	movs	r0, #1
 8014e52:	f7ef fbd1 	bl	80045f8 <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 8014e56:	0031      	movs	r1, r6
 8014e58:	481f      	ldr	r0, [pc, #124]	; (8014ed8 <RadioIrqProcess+0x18c>)
 8014e5a:	f7ef fca5 	bl	80047a8 <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 8014e5e:	481f      	ldr	r0, [pc, #124]	; (8014edc <RadioIrqProcess+0x190>)
 8014e60:	f7ef fcde 	bl	8004820 <SX126xReadRegister>
 8014e64:	4305      	orrs	r5, r0
 8014e66:	b2e9      	uxtb	r1, r5
 8014e68:	481c      	ldr	r0, [pc, #112]	; (8014edc <RadioIrqProcess+0x190>)
 8014e6a:	f7ef fc9d 	bl	80047a8 <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 8014e6e:	466b      	mov	r3, sp
 8014e70:	4e1b      	ldr	r6, [pc, #108]	; (8014ee0 <RadioIrqProcess+0x194>)
 8014e72:	1dd9      	adds	r1, r3, #7
 8014e74:	22ff      	movs	r2, #255	; 0xff
 8014e76:	0030      	movs	r0, r6
 8014e78:	f000 ff12 	bl	8015ca0 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 8014e7c:	4d19      	ldr	r5, [pc, #100]	; (8014ee4 <RadioIrqProcess+0x198>)
 8014e7e:	0028      	movs	r0, r5
 8014e80:	f000 ff24 	bl	8015ccc <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d0a6      	beq.n	8014dd8 <RadioIrqProcess+0x8c>
 8014e8a:	689f      	ldr	r7, [r3, #8]
 8014e8c:	2f00      	cmp	r7, #0
 8014e8e:	d0a3      	beq.n	8014dd8 <RadioIrqProcess+0x8c>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8014e90:	4669      	mov	r1, sp
 8014e92:	230d      	movs	r3, #13
 8014e94:	220c      	movs	r2, #12
 8014e96:	0030      	movs	r0, r6
 8014e98:	56eb      	ldrsb	r3, [r5, r3]
 8014e9a:	56aa      	ldrsb	r2, [r5, r2]
 8014e9c:	79c9      	ldrb	r1, [r1, #7]
 8014e9e:	47b8      	blx	r7
 8014ea0:	e79a      	b.n	8014dd8 <RadioIrqProcess+0x8c>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8014ea2:	f7ef fba3 	bl	80045ec <SX126xGetOperatingMode>
 8014ea6:	2805      	cmp	r0, #5
 8014ea8:	d1b9      	bne.n	8014e1e <RadioIrqProcess+0xd2>
                TimerStop( &RxTimeoutTimer );
 8014eaa:	4809      	ldr	r0, [pc, #36]	; (8014ed0 <RadioIrqProcess+0x184>)
 8014eac:	f7f6 fd7c 	bl	800b9a8 <TimerStop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8014eb0:	2001      	movs	r0, #1
 8014eb2:	f7ef fba1 	bl	80045f8 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014eb6:	4b05      	ldr	r3, [pc, #20]	; (8014ecc <RadioIrqProcess+0x180>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d0af      	beq.n	8014e1e <RadioIrqProcess+0xd2>
 8014ebe:	68db      	ldr	r3, [r3, #12]
 8014ec0:	e7aa      	b.n	8014e18 <RadioIrqProcess+0xcc>
 8014ec2:	46c0      	nop			; (mov r8, r8)
 8014ec4:	20001b64 	.word	0x20001b64
 8014ec8:	20001d94 	.word	0x20001d94
 8014ecc:	20001b68 	.word	0x20001b68
 8014ed0:	20001c88 	.word	0x20001c88
 8014ed4:	20001c81 	.word	0x20001c81
 8014ed8:	00000902 	.word	0x00000902
 8014edc:	00000944 	.word	0x00000944
 8014ee0:	20001b82 	.word	0x20001b82
 8014ee4:	20001b6c 	.word	0x20001b6c

08014ee8 <RadioTimeOnAir>:
{
 8014ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014eea:	0014      	movs	r4, r2
 8014eec:	aa08      	add	r2, sp, #32
 8014eee:	8816      	ldrh	r6, [r2, #0]
 8014ef0:	aa09      	add	r2, sp, #36	; 0x24
 8014ef2:	7817      	ldrb	r7, [r2, #0]
 8014ef4:	aa0a      	add	r2, sp, #40	; 0x28
 8014ef6:	7812      	ldrb	r2, [r2, #0]
 8014ef8:	000d      	movs	r5, r1
 8014efa:	a90b      	add	r1, sp, #44	; 0x2c
 8014efc:	4694      	mov	ip, r2
 8014efe:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 8014f00:	2800      	cmp	r0, #0
 8014f02:	d009      	beq.n	8014f18 <RadioTimeOnAir+0x30>
 8014f04:	2801      	cmp	r0, #1
 8014f06:	d017      	beq.n	8014f38 <RadioTimeOnAir+0x50>
 8014f08:	2401      	movs	r4, #1
 8014f0a:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8014f0c:	1900      	adds	r0, r0, r4
 8014f0e:	0021      	movs	r1, r4
 8014f10:	3801      	subs	r0, #1
 8014f12:	f7eb f929 	bl	8000168 <__udivsi3>
}
 8014f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
               ( ( crcOn == true ) ? 2 : 0 ) 
 8014f18:	1e4b      	subs	r3, r1, #1
 8014f1a:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8014f1c:	427b      	negs	r3, r7
 8014f1e:	415f      	adcs	r7, r3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8014f20:	0049      	lsls	r1, r1, #1
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8014f22:	000a      	movs	r2, r1
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8014f24:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8014f26:	19be      	adds	r6, r7, r6
    return ( preambleLen << 3 ) +
 8014f28:	00f6      	lsls	r6, r6, #3
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8014f2a:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8014f2c:	3618      	adds	r6, #24
               ) << 3 
 8014f2e:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8014f30:	1996      	adds	r6, r2, r6
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8014f32:	0080      	lsls	r0, r0, #2
 8014f34:	4370      	muls	r0, r6
        break;
 8014f36:	e7e9      	b.n	8014f0c <RadioTimeOnAir+0x24>
    int32_t crDenom           = coderate + 4;
 8014f38:	3304      	adds	r3, #4
 8014f3a:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8014f3c:	1f63      	subs	r3, r4, #5
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d804      	bhi.n	8014f4c <RadioTimeOnAir+0x64>
        if( preambleLen < 12 )
 8014f42:	1c33      	adds	r3, r6, #0
 8014f44:	2e0c      	cmp	r6, #12
 8014f46:	d200      	bcs.n	8014f4a <RadioTimeOnAir+0x62>
 8014f48:	230c      	movs	r3, #12
 8014f4a:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014f4c:	2d00      	cmp	r5, #0
 8014f4e:	d138      	bne.n	8014fc2 <RadioTimeOnAir+0xda>
 8014f50:	0023      	movs	r3, r4
 8014f52:	2001      	movs	r0, #1
 8014f54:	002a      	movs	r2, r5
 8014f56:	3b0b      	subs	r3, #11
 8014f58:	4298      	cmp	r0, r3
 8014f5a:	416a      	adcs	r2, r5
 8014f5c:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014f5e:	b2db      	uxtb	r3, r3
                            ( crcOn ? 16 : 0 ) -
 8014f60:	1e48      	subs	r0, r1, #1
 8014f62:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8014f64:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8014f66:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8014f68:	00d2      	lsls	r2, r2, #3
 8014f6a:	1810      	adds	r0, r2, r0
                            ( fixLen ? 0 : 20 );
 8014f6c:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 8014f6e:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8014f70:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 8014f72:	4297      	cmp	r7, r2
 8014f74:	d100      	bne.n	8014f78 <RadioTimeOnAir+0x90>
 8014f76:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 8014f78:	1880      	adds	r0, r0, r2
            ceilDenominator = 4 * ( datarate - 2 );
 8014f7a:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8014f7c:	2c06      	cmp	r4, #6
 8014f7e:	d903      	bls.n	8014f88 <RadioTimeOnAir+0xa0>
        ceilNumerator += 8;
 8014f80:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d000      	beq.n	8014f88 <RadioTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 8014f86:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8014f88:	43c3      	mvns	r3, r0
 8014f8a:	17db      	asrs	r3, r3, #31
 8014f8c:	4018      	ands	r0, r3
 8014f8e:	1840      	adds	r0, r0, r1
 8014f90:	3801      	subs	r0, #1
 8014f92:	f7eb f973 	bl	800027c <__divsi3>
 8014f96:	9b01      	ldr	r3, [sp, #4]
 8014f98:	4343      	muls	r3, r0
 8014f9a:	199e      	adds	r6, r3, r6
        intermediate += 2;
 8014f9c:	0032      	movs	r2, r6
 8014f9e:	320e      	adds	r2, #14
    if( datarate <= 6 )
 8014fa0:	2c06      	cmp	r4, #6
 8014fa2:	d900      	bls.n	8014fa6 <RadioTimeOnAir+0xbe>
    int32_t intermediate =
 8014fa4:	3a02      	subs	r2, #2
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8014fa6:	4b0b      	ldr	r3, [pc, #44]	; (8014fd4 <RadioTimeOnAir+0xec>)
 8014fa8:	5d5b      	ldrb	r3, [r3, r5]
    switch( bw )
 8014faa:	2b0a      	cmp	r3, #10
 8014fac:	d811      	bhi.n	8014fd2 <RadioTimeOnAir+0xea>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8014fae:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8014fb0:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8014fb2:	3201      	adds	r2, #1
 8014fb4:	40ba      	lsls	r2, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8014fb6:	0080      	lsls	r0, r0, #2
 8014fb8:	4350      	muls	r0, r2
 8014fba:	4a07      	ldr	r2, [pc, #28]	; (8014fd8 <RadioTimeOnAir+0xf0>)
 8014fbc:	009b      	lsls	r3, r3, #2
 8014fbe:	589c      	ldr	r4, [r3, r2]
 8014fc0:	e7a4      	b.n	8014f0c <RadioTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8014fc2:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014fc4:	2d01      	cmp	r5, #1
 8014fc6:	d1cb      	bne.n	8014f60 <RadioTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014fc8:	0023      	movs	r3, r4
 8014fca:	3b0c      	subs	r3, #12
 8014fcc:	4258      	negs	r0, r3
 8014fce:	4143      	adcs	r3, r0
 8014fd0:	e7c5      	b.n	8014f5e <RadioTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 8014fd2:	deff      	udf	#255	; 0xff
 8014fd4:	0801aae4 	.word	0x0801aae4
 8014fd8:	0801aae8 	.word	0x0801aae8

08014fdc <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8014fdc:	4b0c      	ldr	r3, [pc, #48]	; (8015010 <RadioSetPublicNetwork+0x34>)
{
 8014fde:	b510      	push	{r4, lr}
 8014fe0:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8014fe2:	7018      	strb	r0, [r3, #0]
 8014fe4:	7058      	strb	r0, [r3, #1]
    switch( modem )
 8014fe6:	f000 f817 	bl	8015018 <RadioSetModem.part.0>
    if( enable == true )
 8014fea:	2c00      	cmp	r4, #0
 8014fec:	d009      	beq.n	8015002 <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8014fee:	20e8      	movs	r0, #232	; 0xe8
 8014ff0:	2134      	movs	r1, #52	; 0x34
 8014ff2:	00c0      	lsls	r0, r0, #3
 8014ff4:	f7ef fbd8 	bl	80047a8 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8014ff8:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8014ffa:	4806      	ldr	r0, [pc, #24]	; (8015014 <RadioSetPublicNetwork+0x38>)
 8014ffc:	f7ef fbd4 	bl	80047a8 <SX126xWriteRegister>
}
 8015000:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8015002:	20e8      	movs	r0, #232	; 0xe8
 8015004:	2114      	movs	r1, #20
 8015006:	00c0      	lsls	r0, r0, #3
 8015008:	f7ef fbce 	bl	80047a8 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801500c:	2124      	movs	r1, #36	; 0x24
 801500e:	e7f4      	b.n	8014ffa <RadioSetPublicNetwork+0x1e>
 8015010:	20001b80 	.word	0x20001b80
 8015014:	00000741 	.word	0x00000741

08015018 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8015018:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 801501a:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 801501c:	f000 fcf6 	bl	8015a0c <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8015020:	4b04      	ldr	r3, [pc, #16]	; (8015034 <RadioSetModem.part.0+0x1c>)
 8015022:	7818      	ldrb	r0, [r3, #0]
 8015024:	785a      	ldrb	r2, [r3, #1]
 8015026:	4282      	cmp	r2, r0
 8015028:	d002      	beq.n	8015030 <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 801502a:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 801502c:	f7ff ffd6 	bl	8014fdc <RadioSetPublicNetwork>
}
 8015030:	bd10      	pop	{r4, pc}
 8015032:	46c0      	nop			; (mov r8, r8)
 8015034:	20001b80 	.word	0x20001b80

08015038 <RadioSetModem>:
{
 8015038:	b510      	push	{r4, lr}
    switch( modem )
 801503a:	2801      	cmp	r0, #1
 801503c:	d006      	beq.n	801504c <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 801503e:	2000      	movs	r0, #0
 8015040:	f000 fce4 	bl	8015a0c <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 8015044:	2200      	movs	r2, #0
 8015046:	4b03      	ldr	r3, [pc, #12]	; (8015054 <RadioSetModem+0x1c>)
 8015048:	705a      	strb	r2, [r3, #1]
}
 801504a:	bd10      	pop	{r4, pc}
 801504c:	f7ff ffe4 	bl	8015018 <RadioSetModem.part.0>
 8015050:	e7fb      	b.n	801504a <RadioSetModem+0x12>
 8015052:	46c0      	nop			; (mov r8, r8)
 8015054:	20001b80 	.word	0x20001b80

08015058 <RadioSetRxConfig>:
{
 8015058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801505a:	b089      	sub	sp, #36	; 0x24
 801505c:	9304      	str	r3, [sp, #16]
 801505e:	ab0f      	add	r3, sp, #60	; 0x3c
 8015060:	881b      	ldrh	r3, [r3, #0]
 8015062:	0015      	movs	r5, r2
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	ab10      	add	r3, sp, #64	; 0x40
 8015068:	881b      	ldrh	r3, [r3, #0]
 801506a:	000e      	movs	r6, r1
 801506c:	9300      	str	r3, [sp, #0]
 801506e:	ab11      	add	r3, sp, #68	; 0x44
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	a906      	add	r1, sp, #24
 8015074:	9302      	str	r3, [sp, #8]
 8015076:	ab12      	add	r3, sp, #72	; 0x48
 8015078:	781a      	ldrb	r2, [r3, #0]
 801507a:	ab13      	add	r3, sp, #76	; 0x4c
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	0007      	movs	r7, r0
 8015080:	9303      	str	r3, [sp, #12]
 8015082:	2321      	movs	r3, #33	; 0x21
 8015084:	185b      	adds	r3, r3, r1
 8015086:	7fdb      	ldrb	r3, [r3, #31]
 8015088:	9305      	str	r3, [sp, #20]
 801508a:	2325      	movs	r3, #37	; 0x25
 801508c:	185b      	adds	r3, r3, r1
 801508e:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 8015090:	4970      	ldr	r1, [pc, #448]	; (8015254 <RadioSetRxConfig+0x1fc>)
 8015092:	700b      	strb	r3, [r1, #0]
        symbTimeout = 0;
 8015094:	4259      	negs	r1, r3
 8015096:	414b      	adcs	r3, r1
 8015098:	9900      	ldr	r1, [sp, #0]
 801509a:	425b      	negs	r3, r3
 801509c:	4019      	ands	r1, r3
    if( fixLen == true )
 801509e:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 80150a0:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d100      	bne.n	80150a8 <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 80150a6:	22ff      	movs	r2, #255	; 0xff
 80150a8:	4b6b      	ldr	r3, [pc, #428]	; (8015258 <RadioSetRxConfig+0x200>)
 80150aa:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80150ac:	2f00      	cmp	r7, #0
 80150ae:	d003      	beq.n	80150b8 <RadioSetRxConfig+0x60>
 80150b0:	2f01      	cmp	r7, #1
 80150b2:	d05f      	beq.n	8015174 <RadioSetRxConfig+0x11c>
}
 80150b4:	b009      	add	sp, #36	; 0x24
 80150b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 80150b8:	0038      	movs	r0, r7
 80150ba:	f000 fbd2 	bl	8015862 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80150be:	4c67      	ldr	r4, [pc, #412]	; (801525c <RadioSetRxConfig+0x204>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80150c0:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80150c2:	0023      	movs	r3, r4
 80150c4:	33dc      	adds	r3, #220	; 0xdc
 80150c6:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 80150c8:	0023      	movs	r3, r4
 80150ca:	33e0      	adds	r3, #224	; 0xe0
 80150cc:	601d      	str	r5, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80150ce:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80150d0:	0070      	lsls	r0, r6, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80150d2:	33e8      	adds	r3, #232	; 0xe8
 80150d4:	701a      	strb	r2, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80150d6:	f7ff fdb3 	bl	8014c40 <RadioGetFskBandwidthRegValue>
 80150da:	0023      	movs	r3, r4
 80150dc:	33e9      	adds	r3, #233	; 0xe9
 80150de:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80150e0:	0023      	movs	r3, r4
 80150e2:	33b4      	adds	r3, #180	; 0xb4
 80150e4:	701f      	strb	r7, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80150e6:	9b01      	ldr	r3, [sp, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80150e8:	9902      	ldr	r1, [sp, #8]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80150ea:	00da      	lsls	r2, r3, #3
 80150ec:	0023      	movs	r3, r4
 80150ee:	33b6      	adds	r3, #182	; 0xb6
 80150f0:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80150f2:	0023      	movs	r3, r4
 80150f4:	4a5a      	ldr	r2, [pc, #360]	; (8015260 <RadioSetRxConfig+0x208>)
 80150f6:	33b8      	adds	r3, #184	; 0xb8
 80150f8:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80150fa:	0023      	movs	r3, r4
 80150fc:	33ba      	adds	r3, #186	; 0xba
 80150fe:	701f      	strb	r7, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015100:	2201      	movs	r2, #1
 8015102:	0023      	movs	r3, r4
 8015104:	4051      	eors	r1, r2
 8015106:	33bb      	adds	r3, #187	; 0xbb
 8015108:	7019      	strb	r1, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801510a:	0023      	movs	r3, r4
 801510c:	4952      	ldr	r1, [pc, #328]	; (8015258 <RadioSetRxConfig+0x200>)
 801510e:	33bc      	adds	r3, #188	; 0xbc
 8015110:	7809      	ldrb	r1, [r1, #0]
 8015112:	7019      	strb	r1, [r3, #0]
            if( crcOn == true )
 8015114:	9903      	ldr	r1, [sp, #12]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015116:	23f2      	movs	r3, #242	; 0xf2
            if( crcOn == true )
 8015118:	2900      	cmp	r1, #0
 801511a:	d100      	bne.n	801511e <RadioSetRxConfig+0xc6>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801511c:	0013      	movs	r3, r2
 801511e:	0022      	movs	r2, r4
 8015120:	32bd      	adds	r2, #189	; 0xbd
 8015122:	7013      	strb	r3, [r2, #0]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015124:	0023      	movs	r3, r4
 8015126:	2201      	movs	r2, #1
 8015128:	33be      	adds	r3, #190	; 0xbe
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801512a:	34dc      	adds	r4, #220	; 0xdc
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801512c:	701a      	strb	r2, [r3, #0]
            RadioStandby( );
 801512e:	f7ff fcf3 	bl	8014b18 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015132:	7820      	ldrb	r0, [r4, #0]
 8015134:	1e43      	subs	r3, r0, #1
 8015136:	4198      	sbcs	r0, r3
 8015138:	b2c0      	uxtb	r0, r0
 801513a:	f7ff ff7d 	bl	8015038 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 801513e:	0020      	movs	r0, r4
 8015140:	f000 fcbe 	bl	8015ac0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8015144:	4847      	ldr	r0, [pc, #284]	; (8015264 <RadioSetRxConfig+0x20c>)
 8015146:	f000 fd11 	bl	8015b6c <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801514a:	2208      	movs	r2, #8
 801514c:	4946      	ldr	r1, [pc, #280]	; (8015268 <RadioSetRxConfig+0x210>)
 801514e:	a806      	add	r0, sp, #24
 8015150:	f000 ff4c 	bl	8015fec <memcpy>
 8015154:	a806      	add	r0, sp, #24
 8015156:	f000 fa4b 	bl	80155f0 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 801515a:	4844      	ldr	r0, [pc, #272]	; (801526c <RadioSetRxConfig+0x214>)
 801515c:	f000 fa7a 	bl	8015654 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8015160:	20fa      	movs	r0, #250	; 0xfa
 8015162:	9b00      	ldr	r3, [sp, #0]
 8015164:	0140      	lsls	r0, r0, #5
 8015166:	4358      	muls	r0, r3
 8015168:	0029      	movs	r1, r5
 801516a:	f7ea fffd 	bl	8000168 <__udivsi3>
 801516e:	4b40      	ldr	r3, [pc, #256]	; (8015270 <RadioSetRxConfig+0x218>)
 8015170:	6018      	str	r0, [r3, #0]
            break;
 8015172:	e79f      	b.n	80150b4 <RadioSetRxConfig+0x5c>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8015174:	2000      	movs	r0, #0
 8015176:	f000 fb74 	bl	8015862 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801517a:	4c38      	ldr	r4, [pc, #224]	; (801525c <RadioSetRxConfig+0x204>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801517c:	493d      	ldr	r1, [pc, #244]	; (8015274 <RadioSetRxConfig+0x21c>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801517e:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8015180:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015182:	33dc      	adds	r3, #220	; 0xdc
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8015184:	32ec      	adds	r2, #236	; 0xec
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015186:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8015188:	b2eb      	uxtb	r3, r5
 801518a:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801518c:	0022      	movs	r2, r4
 801518e:	5d89      	ldrb	r1, [r1, r6]
 8015190:	32ed      	adds	r2, #237	; 0xed
 8015192:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8015194:	0022      	movs	r2, r4
 8015196:	9904      	ldr	r1, [sp, #16]
 8015198:	32ee      	adds	r2, #238	; 0xee
 801519a:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801519c:	2e00      	cmp	r6, #0
 801519e:	d148      	bne.n	8015232 <RadioSetRxConfig+0x1da>
 80151a0:	3d0b      	subs	r5, #11
 80151a2:	42af      	cmp	r7, r5
 80151a4:	4176      	adcs	r6, r6
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80151a6:	b2f1      	uxtb	r1, r6
 80151a8:	0022      	movs	r2, r4
 80151aa:	32ef      	adds	r2, #239	; 0xef
 80151ac:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80151ae:	0022      	movs	r2, r4
 80151b0:	2101      	movs	r1, #1
 80151b2:	32b4      	adds	r2, #180	; 0xb4
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80151b4:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80151b6:	7011      	strb	r1, [r2, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80151b8:	428b      	cmp	r3, r1
 80151ba:	d842      	bhi.n	8015242 <RadioSetRxConfig+0x1ea>
                if( preambleLen < 12 )
 80151bc:	9b01      	ldr	r3, [sp, #4]
 80151be:	2b0b      	cmp	r3, #11
 80151c0:	d83f      	bhi.n	8015242 <RadioSetRxConfig+0x1ea>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80151c2:	0023      	movs	r3, r4
 80151c4:	220c      	movs	r2, #12
 80151c6:	33c0      	adds	r3, #192	; 0xc0
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80151c8:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80151ca:	0023      	movs	r3, r4
 80151cc:	9a02      	ldr	r2, [sp, #8]
 80151ce:	33c2      	adds	r3, #194	; 0xc2
 80151d0:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80151d2:	0023      	movs	r3, r4
 80151d4:	4a20      	ldr	r2, [pc, #128]	; (8015258 <RadioSetRxConfig+0x200>)
 80151d6:	33c3      	adds	r3, #195	; 0xc3
 80151d8:	7812      	ldrb	r2, [r2, #0]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80151da:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80151dc:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80151de:	0023      	movs	r3, r4
 80151e0:	9a03      	ldr	r2, [sp, #12]
 80151e2:	33c4      	adds	r3, #196	; 0xc4
 80151e4:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80151e6:	9b05      	ldr	r3, [sp, #20]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80151e8:	34dc      	adds	r4, #220	; 0xdc
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80151ea:	35c5      	adds	r5, #197	; 0xc5
 80151ec:	702b      	strb	r3, [r5, #0]
            RadioStandby( );
 80151ee:	f7ff fc93 	bl	8014b18 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80151f2:	7820      	ldrb	r0, [r4, #0]
 80151f4:	1e43      	subs	r3, r0, #1
 80151f6:	4198      	sbcs	r0, r3
 80151f8:	b2c0      	uxtb	r0, r0
 80151fa:	f7ff ff1d 	bl	8015038 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80151fe:	0020      	movs	r0, r4
 8015200:	f000 fc5e 	bl	8015ac0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8015204:	4817      	ldr	r0, [pc, #92]	; (8015264 <RadioSetRxConfig+0x20c>)
 8015206:	f000 fcb1 	bl	8015b6c <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 801520a:	466b      	mov	r3, sp
 801520c:	7818      	ldrb	r0, [r3, #0]
 801520e:	f000 fb31 	bl	8015874 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8015212:	782b      	ldrb	r3, [r5, #0]
 8015214:	2404      	movs	r4, #4
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 8015216:	4818      	ldr	r0, [pc, #96]	; (8015278 <RadioSetRxConfig+0x220>)
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8015218:	2b01      	cmp	r3, #1
 801521a:	d116      	bne.n	801524a <RadioSetRxConfig+0x1f2>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 801521c:	f7ef fb00 	bl	8004820 <SX126xReadRegister>
 8015220:	43a0      	bics	r0, r4
 8015222:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8015224:	4814      	ldr	r0, [pc, #80]	; (8015278 <RadioSetRxConfig+0x220>)
 8015226:	f7ef fabf 	bl	80047a8 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 801522a:	4b11      	ldr	r3, [pc, #68]	; (8015270 <RadioSetRxConfig+0x218>)
 801522c:	4a13      	ldr	r2, [pc, #76]	; (801527c <RadioSetRxConfig+0x224>)
 801522e:	601a      	str	r2, [r3, #0]
}
 8015230:	e740      	b.n	80150b4 <RadioSetRxConfig+0x5c>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015232:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015234:	2e01      	cmp	r6, #1
 8015236:	d1b7      	bne.n	80151a8 <RadioSetRxConfig+0x150>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015238:	3d0c      	subs	r5, #12
 801523a:	426a      	negs	r2, r5
 801523c:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801523e:	b2e9      	uxtb	r1, r5
 8015240:	e7b2      	b.n	80151a8 <RadioSetRxConfig+0x150>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015242:	4b06      	ldr	r3, [pc, #24]	; (801525c <RadioSetRxConfig+0x204>)
 8015244:	9a01      	ldr	r2, [sp, #4]
 8015246:	33c0      	adds	r3, #192	; 0xc0
 8015248:	e7be      	b.n	80151c8 <RadioSetRxConfig+0x170>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 801524a:	f7ef fae9 	bl	8004820 <SX126xReadRegister>
 801524e:	4304      	orrs	r4, r0
 8015250:	b2e1      	uxtb	r1, r4
 8015252:	e7e7      	b.n	8015224 <RadioSetRxConfig+0x1cc>
 8015254:	20001c81 	.word	0x20001c81
 8015258:	20000240 	.word	0x20000240
 801525c:	20001ca0 	.word	0x20001ca0
 8015260:	00001804 	.word	0x00001804
 8015264:	20001d54 	.word	0x20001d54
 8015268:	08018893 	.word	0x08018893
 801526c:	000001ff 	.word	0x000001ff
 8015270:	20001c84 	.word	0x20001c84
 8015274:	0801aae4 	.word	0x0801aae4
 8015278:	00000736 	.word	0x00000736
 801527c:	0000ffff 	.word	0x0000ffff

08015280 <RadioSetTxConfig>:
{
 8015280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015282:	b087      	sub	sp, #28
 8015284:	9102      	str	r1, [sp, #8]
 8015286:	a90c      	add	r1, sp, #48	; 0x30
 8015288:	0017      	movs	r7, r2
 801528a:	c904      	ldmia	r1!, {r2}
 801528c:	0005      	movs	r5, r0
 801528e:	7809      	ldrb	r1, [r1, #0]
 8015290:	468c      	mov	ip, r1
 8015292:	a90e      	add	r1, sp, #56	; 0x38
 8015294:	880e      	ldrh	r6, [r1, #0]
 8015296:	a90f      	add	r1, sp, #60	; 0x3c
 8015298:	7809      	ldrb	r1, [r1, #0]
 801529a:	9100      	str	r1, [sp, #0]
 801529c:	a910      	add	r1, sp, #64	; 0x40
 801529e:	7809      	ldrb	r1, [r1, #0]
 80152a0:	9101      	str	r1, [sp, #4]
 80152a2:	a913      	add	r1, sp, #76	; 0x4c
 80152a4:	7809      	ldrb	r1, [r1, #0]
 80152a6:	9103      	str	r1, [sp, #12]
    switch( modem )
 80152a8:	2800      	cmp	r0, #0
 80152aa:	d008      	beq.n	80152be <RadioSetTxConfig+0x3e>
 80152ac:	2801      	cmp	r0, #1
 80152ae:	d055      	beq.n	801535c <RadioSetTxConfig+0xdc>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 80152b0:	485f      	ldr	r0, [pc, #380]	; (8015430 <RadioSetTxConfig+0x1b0>)
 80152b2:	f7ef fab5 	bl	8004820 <SX126xReadRegister>
 80152b6:	2104      	movs	r1, #4
 80152b8:	4301      	orrs	r1, r0
 80152ba:	b2c9      	uxtb	r1, r1
 80152bc:	e0a0      	b.n	8015400 <RadioSetTxConfig+0x180>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80152be:	4c5d      	ldr	r4, [pc, #372]	; (8015434 <RadioSetTxConfig+0x1b4>)
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80152c0:	00f6      	lsls	r6, r6, #3
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80152c2:	0021      	movs	r1, r4
 80152c4:	31dc      	adds	r1, #220	; 0xdc
 80152c6:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 80152c8:	0021      	movs	r1, r4
 80152ca:	31e0      	adds	r1, #224	; 0xe0
 80152cc:	600a      	str	r2, [r1, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80152ce:	0022      	movs	r2, r4
 80152d0:	210b      	movs	r1, #11
 80152d2:	32e8      	adds	r2, #232	; 0xe8
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80152d4:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80152d6:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80152d8:	f7ff fcb2 	bl	8014c40 <RadioGetFskBandwidthRegValue>
 80152dc:	0023      	movs	r3, r4
 80152de:	33e9      	adds	r3, #233	; 0xe9
 80152e0:	7018      	strb	r0, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 80152e2:	0023      	movs	r3, r4
 80152e4:	33e4      	adds	r3, #228	; 0xe4
 80152e6:	601f      	str	r7, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80152e8:	0023      	movs	r3, r4
 80152ea:	33b4      	adds	r3, #180	; 0xb4
 80152ec:	701d      	strb	r5, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80152ee:	0023      	movs	r3, r4
 80152f0:	33b6      	adds	r3, #182	; 0xb6
 80152f2:	801e      	strh	r6, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80152f4:	0023      	movs	r3, r4
 80152f6:	4a50      	ldr	r2, [pc, #320]	; (8015438 <RadioSetTxConfig+0x1b8>)
 80152f8:	33b8      	adds	r3, #184	; 0xb8
 80152fa:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80152fc:	0023      	movs	r3, r4
 80152fe:	33ba      	adds	r3, #186	; 0xba
 8015300:	701d      	strb	r5, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015302:	2201      	movs	r2, #1
 8015304:	0023      	movs	r3, r4
 8015306:	9900      	ldr	r1, [sp, #0]
 8015308:	33bb      	adds	r3, #187	; 0xbb
 801530a:	4051      	eors	r1, r2
 801530c:	7019      	strb	r1, [r3, #0]
            if( crcOn == true )
 801530e:	9901      	ldr	r1, [sp, #4]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015310:	23f2      	movs	r3, #242	; 0xf2
            if( crcOn == true )
 8015312:	2900      	cmp	r1, #0
 8015314:	d100      	bne.n	8015318 <RadioSetTxConfig+0x98>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015316:	0013      	movs	r3, r2
 8015318:	0022      	movs	r2, r4
 801531a:	32bd      	adds	r2, #189	; 0xbd
 801531c:	7013      	strb	r3, [r2, #0]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801531e:	0023      	movs	r3, r4
 8015320:	2201      	movs	r2, #1
 8015322:	33be      	adds	r3, #190	; 0xbe
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015324:	34dc      	adds	r4, #220	; 0xdc
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015326:	701a      	strb	r2, [r3, #0]
            RadioStandby( );
 8015328:	f7ff fbf6 	bl	8014b18 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801532c:	7820      	ldrb	r0, [r4, #0]
 801532e:	1e43      	subs	r3, r0, #1
 8015330:	4198      	sbcs	r0, r3
 8015332:	b2c0      	uxtb	r0, r0
 8015334:	f7ff fe80 	bl	8015038 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8015338:	0020      	movs	r0, r4
 801533a:	f000 fbc1 	bl	8015ac0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 801533e:	483f      	ldr	r0, [pc, #252]	; (801543c <RadioSetTxConfig+0x1bc>)
 8015340:	f000 fc14 	bl	8015b6c <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015344:	2208      	movs	r2, #8
 8015346:	493e      	ldr	r1, [pc, #248]	; (8015440 <RadioSetTxConfig+0x1c0>)
 8015348:	a804      	add	r0, sp, #16
 801534a:	f000 fe4f 	bl	8015fec <memcpy>
 801534e:	a804      	add	r0, sp, #16
 8015350:	f000 f94e 	bl	80155f0 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8015354:	483b      	ldr	r0, [pc, #236]	; (8015444 <RadioSetTxConfig+0x1c4>)
 8015356:	f000 f97d 	bl	8015654 <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801535a:	e7a9      	b.n	80152b0 <RadioSetTxConfig+0x30>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801535c:	4c35      	ldr	r4, [pc, #212]	; (8015434 <RadioSetTxConfig+0x1b4>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801535e:	4f3a      	ldr	r7, [pc, #232]	; (8015448 <RadioSetTxConfig+0x1c8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015360:	0021      	movs	r1, r4
 8015362:	31dc      	adds	r1, #220	; 0xdc
 8015364:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8015366:	0020      	movs	r0, r4
 8015368:	b2d1      	uxtb	r1, r2
 801536a:	30ec      	adds	r0, #236	; 0xec
 801536c:	7001      	strb	r1, [r0, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801536e:	0020      	movs	r0, r4
 8015370:	5cff      	ldrb	r7, [r7, r3]
 8015372:	30ed      	adds	r0, #237	; 0xed
 8015374:	7007      	strb	r7, [r0, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8015376:	0020      	movs	r0, r4
 8015378:	4667      	mov	r7, ip
 801537a:	30ee      	adds	r0, #238	; 0xee
 801537c:	7007      	strb	r7, [r0, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801537e:	2b00      	cmp	r3, #0
 8015380:	d149      	bne.n	8015416 <RadioSetTxConfig+0x196>
 8015382:	3a0b      	subs	r2, #11
 8015384:	4295      	cmp	r5, r2
 8015386:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015388:	b2d8      	uxtb	r0, r3
 801538a:	0023      	movs	r3, r4
 801538c:	33ef      	adds	r3, #239	; 0xef
 801538e:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015390:	0023      	movs	r3, r4
 8015392:	2201      	movs	r2, #1
 8015394:	33b4      	adds	r3, #180	; 0xb4
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015396:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015398:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801539a:	4291      	cmp	r1, r2
 801539c:	d843      	bhi.n	8015426 <RadioSetTxConfig+0x1a6>
                if( preambleLen < 12 )
 801539e:	2e0b      	cmp	r6, #11
 80153a0:	d841      	bhi.n	8015426 <RadioSetTxConfig+0x1a6>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80153a2:	0023      	movs	r3, r4
 80153a4:	320b      	adds	r2, #11
 80153a6:	33c0      	adds	r3, #192	; 0xc0
 80153a8:	801a      	strh	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80153aa:	0023      	movs	r3, r4
 80153ac:	9a00      	ldr	r2, [sp, #0]
 80153ae:	33c2      	adds	r3, #194	; 0xc2
 80153b0:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80153b2:	0023      	movs	r3, r4
 80153b4:	4a25      	ldr	r2, [pc, #148]	; (801544c <RadioSetTxConfig+0x1cc>)
 80153b6:	33c3      	adds	r3, #195	; 0xc3
 80153b8:	7812      	ldrb	r2, [r2, #0]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80153ba:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80153bc:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80153be:	0023      	movs	r3, r4
 80153c0:	9a01      	ldr	r2, [sp, #4]
 80153c2:	33c4      	adds	r3, #196	; 0xc4
 80153c4:	701a      	strb	r2, [r3, #0]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80153c6:	0023      	movs	r3, r4
 80153c8:	9a03      	ldr	r2, [sp, #12]
 80153ca:	33c5      	adds	r3, #197	; 0xc5
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80153cc:	35dc      	adds	r5, #220	; 0xdc
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80153ce:	701a      	strb	r2, [r3, #0]
            RadioStandby( );
 80153d0:	f7ff fba2 	bl	8014b18 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80153d4:	7828      	ldrb	r0, [r5, #0]
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80153d6:	34ed      	adds	r4, #237	; 0xed
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80153d8:	1e43      	subs	r3, r0, #1
 80153da:	4198      	sbcs	r0, r3
 80153dc:	b2c0      	uxtb	r0, r0
 80153de:	f7ff fe2b 	bl	8015038 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80153e2:	0028      	movs	r0, r5
 80153e4:	f000 fb6c 	bl	8015ac0 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80153e8:	4814      	ldr	r0, [pc, #80]	; (801543c <RadioSetTxConfig+0x1bc>)
 80153ea:	f000 fbbf 	bl	8015b6c <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80153ee:	7823      	ldrb	r3, [r4, #0]
 80153f0:	2b06      	cmp	r3, #6
 80153f2:	d000      	beq.n	80153f6 <RadioSetTxConfig+0x176>
 80153f4:	e75c      	b.n	80152b0 <RadioSetTxConfig+0x30>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 80153f6:	480e      	ldr	r0, [pc, #56]	; (8015430 <RadioSetTxConfig+0x1b0>)
 80153f8:	f7ef fa12 	bl	8004820 <SX126xReadRegister>
 80153fc:	21fb      	movs	r1, #251	; 0xfb
 80153fe:	4001      	ands	r1, r0
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8015400:	480b      	ldr	r0, [pc, #44]	; (8015430 <RadioSetTxConfig+0x1b0>)
 8015402:	f7ef f9d1 	bl	80047a8 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 8015406:	9802      	ldr	r0, [sp, #8]
 8015408:	f7ef fa6c 	bl	80048e4 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 801540c:	4b10      	ldr	r3, [pc, #64]	; (8015450 <RadioSetTxConfig+0x1d0>)
 801540e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015410:	601a      	str	r2, [r3, #0]
}
 8015412:	b007      	add	sp, #28
 8015414:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015416:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015418:	2b01      	cmp	r3, #1
 801541a:	d1b6      	bne.n	801538a <RadioSetTxConfig+0x10a>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801541c:	3a0c      	subs	r2, #12
 801541e:	4253      	negs	r3, r2
 8015420:	415a      	adcs	r2, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015422:	b2d0      	uxtb	r0, r2
 8015424:	e7b1      	b.n	801538a <RadioSetTxConfig+0x10a>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015426:	4b03      	ldr	r3, [pc, #12]	; (8015434 <RadioSetTxConfig+0x1b4>)
 8015428:	33c0      	adds	r3, #192	; 0xc0
 801542a:	801e      	strh	r6, [r3, #0]
 801542c:	e7bd      	b.n	80153aa <RadioSetTxConfig+0x12a>
 801542e:	46c0      	nop			; (mov r8, r8)
 8015430:	00000889 	.word	0x00000889
 8015434:	20001ca0 	.word	0x20001ca0
 8015438:	00001804 	.word	0x00001804
 801543c:	20001d54 	.word	0x20001d54
 8015440:	08018893 	.word	0x08018893
 8015444:	000001ff 	.word	0x000001ff
 8015448:	0801aae4 	.word	0x0801aae4
 801544c:	20000240 	.word	0x20000240
 8015450:	20001d90 	.word	0x20001d90

08015454 <RadioIsChannelFree>:
{
 8015454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015456:	0004      	movs	r4, r0
 8015458:	b08d      	sub	sp, #52	; 0x34
    RadioSetModem( MODEM_FSK );
 801545a:	2000      	movs	r0, #0
{
 801545c:	000d      	movs	r5, r1
 801545e:	0016      	movs	r6, r2
 8015460:	930b      	str	r3, [sp, #44]	; 0x2c
    RadioSetModem( MODEM_FSK );
 8015462:	f7ff fde9 	bl	8015038 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 8015466:	0020      	movs	r0, r4
 8015468:	f000 faa2 	bl	80159b0 <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801546c:	2400      	movs	r4, #0
 801546e:	2701      	movs	r7, #1
 8015470:	2303      	movs	r3, #3
 8015472:	2296      	movs	r2, #150	; 0x96
 8015474:	0029      	movs	r1, r5
 8015476:	0092      	lsls	r2, r2, #2
 8015478:	0020      	movs	r0, r4
 801547a:	9408      	str	r4, [sp, #32]
 801547c:	9407      	str	r4, [sp, #28]
 801547e:	9406      	str	r4, [sp, #24]
 8015480:	9405      	str	r4, [sp, #20]
 8015482:	9404      	str	r4, [sp, #16]
 8015484:	9403      	str	r4, [sp, #12]
 8015486:	9402      	str	r4, [sp, #8]
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	9709      	str	r7, [sp, #36]	; 0x24
 801548c:	0023      	movs	r3, r4
 801548e:	9500      	str	r5, [sp, #0]
 8015490:	f7ff fde2 	bl	8015058 <RadioSetRxConfig>
    RadioRx( 0 );
 8015494:	0020      	movs	r0, r4
 8015496:	f7ff fc09 	bl	8014cac <RadioRx>
    DelayMs( 1 );
 801549a:	0038      	movs	r0, r7
 801549c:	f7f6 f8aa 	bl	800b5f4 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 80154a0:	f7f6 fac1 	bl	800ba26 <TimerGetCurrentTime>
 80154a4:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80154a6:	0020      	movs	r0, r4
 80154a8:	f7f6 fac3 	bl	800ba32 <TimerGetElapsedTime>
 80154ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154ae:	4298      	cmp	r0, r3
 80154b0:	d305      	bcc.n	80154be <RadioIsChannelFree+0x6a>
    bool     status           = true;
 80154b2:	2401      	movs	r4, #1
    RadioSleep( );
 80154b4:	f7ff fb80 	bl	8014bb8 <RadioSleep>
}
 80154b8:	0020      	movs	r0, r4
 80154ba:	b00d      	add	sp, #52	; 0x34
 80154bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SX126xGetRssiInst( );
 80154be:	f000 fbc1 	bl	8015c44 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 80154c2:	b200      	sxth	r0, r0
 80154c4:	4286      	cmp	r6, r0
 80154c6:	daee      	bge.n	80154a6 <RadioIsChannelFree+0x52>
            status = false;
 80154c8:	2400      	movs	r4, #0
 80154ca:	e7f3      	b.n	80154b4 <RadioIsChannelFree+0x60>

080154cc <RadioRandom>:
{
 80154cc:	b510      	push	{r4, lr}
 80154ce:	f7ff fda3 	bl	8015018 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80154d2:	2300      	movs	r3, #0
 80154d4:	001a      	movs	r2, r3
 80154d6:	0019      	movs	r1, r3
 80154d8:	0018      	movs	r0, r3
 80154da:	f000 fa41 	bl	8015960 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 80154de:	f000 f94b 	bl	8015778 <SX126xGetRandom>
}
 80154e2:	bd10      	pop	{r4, pc}

080154e4 <RadioAddRegisterToRetentionList>:
{
 80154e4:	b530      	push	{r4, r5, lr}
 80154e6:	b085      	sub	sp, #20
 80154e8:	0004      	movs	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 80154ea:	2209      	movs	r2, #9
 80154ec:	4814      	ldr	r0, [pc, #80]	; (8015540 <RadioAddRegisterToRetentionList+0x5c>)
 80154ee:	a901      	add	r1, sp, #4
 80154f0:	f7ef f964 	bl	80047bc <SX126xReadRegisters>
    const uint8_t nbOfRegisters = buffer[0];
 80154f4:	466b      	mov	r3, sp
 80154f6:	791d      	ldrb	r5, [r3, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 80154f8:	2300      	movs	r3, #0
 80154fa:	a801      	add	r0, sp, #4
 80154fc:	42ab      	cmp	r3, r5
 80154fe:	d113      	bne.n	8015528 <RadioAddRegisterToRetentionList+0x44>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 8015500:	2b03      	cmp	r3, #3
 8015502:	d80f      	bhi.n	8015524 <RadioAddRegisterToRetentionList+0x40>
        buffer[0] += 1;
 8015504:	4669      	mov	r1, sp
 8015506:	1c5a      	adds	r2, r3, #1
 8015508:	710a      	strb	r2, [r1, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 801550a:	466a      	mov	r2, sp
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	0a21      	lsrs	r1, r4, #8
 8015510:	3205      	adds	r2, #5
 8015512:	54d1      	strb	r1, [r2, r3]
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8015514:	466a      	mov	r2, sp
 8015516:	3206      	adds	r2, #6
 8015518:	54d4      	strb	r4, [r2, r3]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 801551a:	4809      	ldr	r0, [pc, #36]	; (8015540 <RadioAddRegisterToRetentionList+0x5c>)
 801551c:	2209      	movs	r2, #9
 801551e:	a901      	add	r1, sp, #4
 8015520:	f7ef f914 	bl	800474c <SX126xWriteRegisters>
}
 8015524:	b005      	add	sp, #20
 8015526:	bd30      	pop	{r4, r5, pc}
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 8015528:	0001      	movs	r1, r0
 801552a:	7842      	ldrb	r2, [r0, #1]
 801552c:	7889      	ldrb	r1, [r1, #2]
 801552e:	0212      	lsls	r2, r2, #8
 8015530:	1852      	adds	r2, r2, r1
 8015532:	3002      	adds	r0, #2
 8015534:	4294      	cmp	r4, r2
 8015536:	d0f5      	beq.n	8015524 <RadioAddRegisterToRetentionList+0x40>
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 8015538:	3301      	adds	r3, #1
 801553a:	b2db      	uxtb	r3, r3
 801553c:	e7de      	b.n	80154fc <RadioAddRegisterToRetentionList+0x18>
 801553e:	46c0      	nop			; (mov r8, r8)
 8015540:	0000029f 	.word	0x0000029f

08015544 <RadioInit>:
    RadioEvents = events;
 8015544:	4b15      	ldr	r3, [pc, #84]	; (801559c <RadioInit+0x58>)
{
 8015546:	b510      	push	{r4, lr}
    RadioEvents = events;
 8015548:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 801554a:	4815      	ldr	r0, [pc, #84]	; (80155a0 <RadioInit+0x5c>)
 801554c:	f000 f8cc 	bl	80156e8 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 8015550:	2000      	movs	r0, #0
 8015552:	f000 f8b7 	bl	80156c4 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 8015556:	2001      	movs	r0, #1
 8015558:	f000 f9bc 	bl	80158d4 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 801555c:	2100      	movs	r1, #0
 801555e:	0008      	movs	r0, r1
 8015560:	f000 fb66 	bl	8015c30 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 8015564:	2104      	movs	r1, #4
 8015566:	2000      	movs	r0, #0
 8015568:	f000 fa64 	bl	8015a34 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801556c:	2300      	movs	r3, #0
 801556e:	480d      	ldr	r0, [pc, #52]	; (80155a4 <RadioInit+0x60>)
 8015570:	001a      	movs	r2, r3
 8015572:	0001      	movs	r1, r0
 8015574:	f000 f9f4 	bl	8015960 <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 8015578:	480b      	ldr	r0, [pc, #44]	; (80155a8 <RadioInit+0x64>)
 801557a:	f7ff ffb3 	bl	80154e4 <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 801557e:	480b      	ldr	r0, [pc, #44]	; (80155ac <RadioInit+0x68>)
 8015580:	f7ff ffb0 	bl	80154e4 <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8015584:	490a      	ldr	r1, [pc, #40]	; (80155b0 <RadioInit+0x6c>)
 8015586:	480b      	ldr	r0, [pc, #44]	; (80155b4 <RadioInit+0x70>)
 8015588:	f7f6 f98e 	bl	800b8a8 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801558c:	490a      	ldr	r1, [pc, #40]	; (80155b8 <RadioInit+0x74>)
 801558e:	480b      	ldr	r0, [pc, #44]	; (80155bc <RadioInit+0x78>)
 8015590:	f7f6 f98a 	bl	800b8a8 <TimerInit>
    IrqFired = false;
 8015594:	2200      	movs	r2, #0
 8015596:	4b0a      	ldr	r3, [pc, #40]	; (80155c0 <RadioInit+0x7c>)
 8015598:	701a      	strb	r2, [r3, #0]
}
 801559a:	bd10      	pop	{r4, pc}
 801559c:	20001b68 	.word	0x20001b68
 80155a0:	08014b0d 	.word	0x08014b0d
 80155a4:	0000ffff 	.word	0x0000ffff
 80155a8:	000008ac 	.word	0x000008ac
 80155ac:	00000889 	.word	0x00000889
 80155b0:	08014add 	.word	0x08014add
 80155b4:	20001d94 	.word	0x20001d94
 80155b8:	08014af5 	.word	0x08014af5
 80155bc:	20001c88 	.word	0x20001c88
 80155c0:	20001b64 	.word	0x20001b64

080155c4 <SX126xCheckDeviceReady>:

    SX126xSetOperatingMode( MODE_STDBY_RC );
}

void SX126xCheckDeviceReady( void )
{
 80155c4:	b510      	push	{r4, lr}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 80155c6:	f7ef f811 	bl	80045ec <SX126xGetOperatingMode>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d104      	bne.n	80155d8 <SX126xCheckDeviceReady+0x14>
    {
        SX126xWakeup( );
 80155ce:	f7ef f843 	bl	8004658 <SX126xWakeup>
    }
    SX126xWaitOnBusy( );
 80155d2:	f7ef f837 	bl	8004644 <SX126xWaitOnBusy>
}
 80155d6:	bd10      	pop	{r4, pc}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 80155d8:	f7ef f808 	bl	80045ec <SX126xGetOperatingMode>
 80155dc:	2806      	cmp	r0, #6
 80155de:	d1f8      	bne.n	80155d2 <SX126xCheckDeviceReady+0xe>
 80155e0:	e7f5      	b.n	80155ce <SX126xCheckDeviceReady+0xa>

080155e2 <SX126xSetPayload>:

void SX126xSetPayload( uint8_t *payload, uint8_t size )
{
 80155e2:	b510      	push	{r4, lr}
 80155e4:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 80155e6:	0001      	movs	r1, r0
 80155e8:	2000      	movs	r0, #0
 80155ea:	f7ef f923 	bl	8004834 <SX126xWriteBuffer>
}
 80155ee:	bd10      	pop	{r4, pc}

080155f0 <SX126xSetSyncWord>:
    SX126xSetPayload( payload, size );
    SX126xSetTx( timeout );
}

uint8_t SX126xSetSyncWord( uint8_t *syncWord )
{
 80155f0:	0001      	movs	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80155f2:	20d8      	movs	r0, #216	; 0xd8
{
 80155f4:	b510      	push	{r4, lr}
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80155f6:	00c0      	lsls	r0, r0, #3
 80155f8:	2208      	movs	r2, #8
 80155fa:	f7ef f8a7 	bl	800474c <SX126xWriteRegisters>
    return 0;
}
 80155fe:	2000      	movs	r0, #0
 8015600:	bd10      	pop	{r4, pc}
	...

08015604 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed( uint16_t seed )
{
 8015604:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8015606:	466a      	mov	r2, sp
 8015608:	0a03      	lsrs	r3, r0, #8
 801560a:	7113      	strb	r3, [r2, #4]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 801560c:	4b05      	ldr	r3, [pc, #20]	; (8015624 <SX126xSetCrcSeed+0x20>)
    buf[1] = ( uint8_t )( seed & 0xFF );
 801560e:	7150      	strb	r0, [r2, #5]
    switch( SX126xGetPacketType( ) )
 8015610:	781b      	ldrb	r3, [r3, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d104      	bne.n	8015620 <SX126xSetCrcSeed+0x1c>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8015616:	2202      	movs	r2, #2
 8015618:	4803      	ldr	r0, [pc, #12]	; (8015628 <SX126xSetCrcSeed+0x24>)
 801561a:	a901      	add	r1, sp, #4
 801561c:	f7ef f896 	bl	800474c <SX126xWriteRegisters>
}
 8015620:	bd07      	pop	{r0, r1, r2, pc}
 8015622:	46c0      	nop			; (mov r8, r8)
 8015624:	20001db2 	.word	0x20001db2
 8015628:	000006bc 	.word	0x000006bc

0801562c <SX126xSetCrcPolynomial>:
{
 801562c:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801562e:	466a      	mov	r2, sp
 8015630:	0a03      	lsrs	r3, r0, #8
 8015632:	7113      	strb	r3, [r2, #4]
    return PacketType;
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <SX126xSetCrcPolynomial+0x20>)
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8015636:	7150      	strb	r0, [r2, #5]
    switch( SX126xGetPacketType( ) )
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d104      	bne.n	8015648 <SX126xSetCrcPolynomial+0x1c>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801563e:	2202      	movs	r2, #2
 8015640:	4803      	ldr	r0, [pc, #12]	; (8015650 <SX126xSetCrcPolynomial+0x24>)
 8015642:	a901      	add	r1, sp, #4
 8015644:	f7ef f882 	bl	800474c <SX126xWriteRegisters>
}
 8015648:	bd07      	pop	{r0, r1, r2, pc}
 801564a:	46c0      	nop			; (mov r8, r8)
 801564c:	20001db2 	.word	0x20001db2
 8015650:	000006be 	.word	0x000006be

08015654 <SX126xSetWhiteningSeed>:
{
 8015654:	b510      	push	{r4, lr}
    return PacketType;
 8015656:	4b0c      	ldr	r3, [pc, #48]	; (8015688 <SX126xSetWhiteningSeed+0x34>)
{
 8015658:	0004      	movs	r4, r0
    switch( SX126xGetPacketType( ) )
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d111      	bne.n	8015684 <SX126xSetWhiteningSeed+0x30>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8015660:	20d7      	movs	r0, #215	; 0xd7
 8015662:	00c0      	lsls	r0, r0, #3
 8015664:	f7ef f8dc 	bl	8004820 <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8015668:	2301      	movs	r3, #1
 801566a:	0a21      	lsrs	r1, r4, #8
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801566c:	4398      	bics	r0, r3
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801566e:	4019      	ands	r1, r3
 8015670:	4301      	orrs	r1, r0
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8015672:	20d7      	movs	r0, #215	; 0xd7
 8015674:	b2c9      	uxtb	r1, r1
 8015676:	00c0      	lsls	r0, r0, #3
 8015678:	f7ef f896 	bl	80047a8 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 801567c:	4803      	ldr	r0, [pc, #12]	; (801568c <SX126xSetWhiteningSeed+0x38>)
 801567e:	b2e1      	uxtb	r1, r4
 8015680:	f7ef f892 	bl	80047a8 <SX126xWriteRegister>
}
 8015684:	bd10      	pop	{r4, pc}
 8015686:	46c0      	nop			; (mov r8, r8)
 8015688:	20001db2 	.word	0x20001db2
 801568c:	000006b9 	.word	0x000006b9

08015690 <SX126xSetSleep>:
{
 8015690:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8015692:	466b      	mov	r3, sp
 8015694:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8015696:	2306      	movs	r3, #6
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8015698:	07c2      	lsls	r2, r0, #31
 801569a:	0fd2      	lsrs	r2, r2, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801569c:	4003      	ands	r3, r0
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801569e:	4313      	orrs	r3, r2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80156a0:	700b      	strb	r3, [r1, #0]
    if( sleepConfig.Fields.WarmStart == 0 )
 80156a2:	2304      	movs	r3, #4
 80156a4:	001a      	movs	r2, r3
 80156a6:	4002      	ands	r2, r0
 80156a8:	4203      	tst	r3, r0
 80156aa:	d101      	bne.n	80156b0 <SX126xSetSleep+0x20>
        ImageCalibrated = false;
 80156ac:	4b04      	ldr	r3, [pc, #16]	; (80156c0 <SX126xSetSleep+0x30>)
 80156ae:	701a      	strb	r2, [r3, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80156b0:	2201      	movs	r2, #1
 80156b2:	2084      	movs	r0, #132	; 0x84
 80156b4:	f7ee fff6 	bl	80046a4 <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_SLEEP );
 80156b8:	2000      	movs	r0, #0
 80156ba:	f7ee ff9d 	bl	80045f8 <SX126xSetOperatingMode>
}
 80156be:	bd07      	pop	{r0, r1, r2, pc}
 80156c0:	20001db0 	.word	0x20001db0

080156c4 <SX126xSetStandby>:
{
 80156c4:	b507      	push	{r0, r1, r2, lr}
 80156c6:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80156c8:	2201      	movs	r2, #1
{
 80156ca:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80156cc:	1dd9      	adds	r1, r3, #7
 80156ce:	2080      	movs	r0, #128	; 0x80
 80156d0:	f7ee ffe8 	bl	80046a4 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 80156d4:	466b      	mov	r3, sp
 80156d6:	79db      	ldrb	r3, [r3, #7]
        SX126xSetOperatingMode( MODE_STDBY_RC );
 80156d8:	2001      	movs	r0, #1
    if( standbyConfig == STDBY_RC )
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d000      	beq.n	80156e0 <SX126xSetStandby+0x1c>
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 80156de:	2002      	movs	r0, #2
 80156e0:	f7ee ff8a 	bl	80045f8 <SX126xSetOperatingMode>
}
 80156e4:	bd07      	pop	{r0, r1, r2, pc}
	...

080156e8 <SX126xInit>:
{
 80156e8:	b510      	push	{r4, lr}
 80156ea:	0004      	movs	r4, r0
    SX126xReset( );
 80156ec:	f7ee ff8a 	bl	8004604 <SX126xReset>
    SX126xIoIrqInit( dioIrq );
 80156f0:	0020      	movs	r0, r4
 80156f2:	f7ee ff69 	bl	80045c8 <SX126xIoIrqInit>
    SX126xWakeup( );
 80156f6:	f7ee ffaf 	bl	8004658 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 80156fa:	2000      	movs	r0, #0
 80156fc:	f7ff ffe2 	bl	80156c4 <SX126xSetStandby>
    SX126xIoTcxoInit( );
 8015700:	f7ee ff6c 	bl	80045dc <SX126xIoTcxoInit>
    SX126xIoRfSwitchInit( );
 8015704:	f7ee ff6d 	bl	80045e2 <SX126xIoRfSwitchInit>
    ImageCalibrated = false;
 8015708:	2200      	movs	r2, #0
 801570a:	4b03      	ldr	r3, [pc, #12]	; (8015718 <SX126xInit+0x30>)
    SX126xSetOperatingMode( MODE_STDBY_RC );
 801570c:	2001      	movs	r0, #1
    ImageCalibrated = false;
 801570e:	701a      	strb	r2, [r3, #0]
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8015710:	f7ee ff72 	bl	80045f8 <SX126xSetOperatingMode>
}
 8015714:	bd10      	pop	{r4, pc}
 8015716:	46c0      	nop			; (mov r8, r8)
 8015718:	20001db0 	.word	0x20001db0

0801571c <SX126xSetTx>:
{
 801571c:	b513      	push	{r0, r1, r4, lr}
 801571e:	0004      	movs	r4, r0
    SX126xSetOperatingMode( MODE_TX );
 8015720:	2004      	movs	r0, #4
 8015722:	f7ee ff69 	bl	80045f8 <SX126xSetOperatingMode>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015726:	a901      	add	r1, sp, #4
 8015728:	0c23      	lsrs	r3, r4, #16
 801572a:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801572c:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 801572e:	2203      	movs	r2, #3
 8015730:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015732:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015734:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8015736:	f7ee ffb5 	bl	80046a4 <SX126xWriteCommand>
}
 801573a:	bd13      	pop	{r0, r1, r4, pc}

0801573c <SX126xSendPayload>:
{
 801573c:	b510      	push	{r4, lr}
 801573e:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 8015740:	f7ff ff4f 	bl	80155e2 <SX126xSetPayload>
    SX126xSetTx( timeout );
 8015744:	0020      	movs	r0, r4
 8015746:	f7ff ffe9 	bl	801571c <SX126xSetTx>
}
 801574a:	bd10      	pop	{r4, pc}

0801574c <SX126xSetRx>:
{
 801574c:	b513      	push	{r0, r1, r4, lr}
 801574e:	0004      	movs	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 8015750:	2005      	movs	r0, #5
 8015752:	f7ee ff51 	bl	80045f8 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 8015756:	2194      	movs	r1, #148	; 0x94
 8015758:	4806      	ldr	r0, [pc, #24]	; (8015774 <SX126xSetRx+0x28>)
 801575a:	f7ef f825 	bl	80047a8 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801575e:	a901      	add	r1, sp, #4
 8015760:	0c23      	lsrs	r3, r4, #16
 8015762:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015764:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8015766:	2203      	movs	r2, #3
 8015768:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801576a:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801576c:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 801576e:	f7ee ff99 	bl	80046a4 <SX126xWriteCommand>
}
 8015772:	bd13      	pop	{r0, r1, r4, pc}
 8015774:	000008ac 	.word	0x000008ac

08015778 <SX126xGetRandom>:
{
 8015778:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t number = 0;
 801577a:	2700      	movs	r7, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 801577c:	4e15      	ldr	r6, [pc, #84]	; (80157d4 <SX126xGetRandom+0x5c>)
{
 801577e:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8015780:	0030      	movs	r0, r6
    uint32_t number = 0;
 8015782:	9703      	str	r7, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8015784:	f7ef f84c 	bl	8004820 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8015788:	21fe      	movs	r1, #254	; 0xfe
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 801578a:	4d13      	ldr	r5, [pc, #76]	; (80157d8 <SX126xGetRandom+0x60>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801578c:	4001      	ands	r1, r0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 801578e:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8015790:	0030      	movs	r0, r6
 8015792:	f7ef f809 	bl	80047a8 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8015796:	0028      	movs	r0, r5
 8015798:	f7ef f842 	bl	8004820 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801579c:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 801579e:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80157a0:	4001      	ands	r1, r0
 80157a2:	0028      	movs	r0, r5
 80157a4:	f7ef f800 	bl	80047a8 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 80157a8:	480c      	ldr	r0, [pc, #48]	; (80157dc <SX126xGetRandom+0x64>)
 80157aa:	f7ff ffcf 	bl	801574c <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80157ae:	2204      	movs	r2, #4
 80157b0:	a903      	add	r1, sp, #12
 80157b2:	480b      	ldr	r0, [pc, #44]	; (80157e0 <SX126xGetRandom+0x68>)
 80157b4:	f7ef f802 	bl	80047bc <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 80157b8:	0038      	movs	r0, r7
 80157ba:	f7ff ff83 	bl	80156c4 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 80157be:	0021      	movs	r1, r4
 80157c0:	0030      	movs	r0, r6
 80157c2:	f7ee fff1 	bl	80047a8 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 80157c6:	0028      	movs	r0, r5
 80157c8:	9901      	ldr	r1, [sp, #4]
 80157ca:	f7ee ffed 	bl	80047a8 <SX126xWriteRegister>
}
 80157ce:	9803      	ldr	r0, [sp, #12]
 80157d0:	b005      	add	sp, #20
 80157d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157d4:	000008e2 	.word	0x000008e2
 80157d8:	000008e5 	.word	0x000008e5
 80157dc:	00ffffff 	.word	0x00ffffff
 80157e0:	00000819 	.word	0x00000819

080157e4 <SX126xSetRxBoosted>:
{
 80157e4:	b513      	push	{r0, r1, r4, lr}
 80157e6:	0004      	movs	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 80157e8:	2005      	movs	r0, #5
 80157ea:	f7ee ff05 	bl	80045f8 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80157ee:	2196      	movs	r1, #150	; 0x96
 80157f0:	4806      	ldr	r0, [pc, #24]	; (801580c <SX126xSetRxBoosted+0x28>)
 80157f2:	f7ee ffd9 	bl	80047a8 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80157f6:	a901      	add	r1, sp, #4
 80157f8:	0c23      	lsrs	r3, r4, #16
 80157fa:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80157fc:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80157fe:	2203      	movs	r2, #3
 8015800:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015802:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015804:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8015806:	f7ee ff4d 	bl	80046a4 <SX126xWriteCommand>
}
 801580a:	bd13      	pop	{r0, r1, r4, pc}
 801580c:	000008ac 	.word	0x000008ac

08015810 <SX126xSetRxDutyCycle>:
{
 8015810:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8015812:	466a      	mov	r2, sp
 8015814:	0c03      	lsrs	r3, r0, #16
 8015816:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8015818:	0a03      	lsrs	r3, r0, #8
 801581a:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801581c:	0c0b      	lsrs	r3, r1, #16
 801581e:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015820:	0a0b      	lsrs	r3, r1, #8
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8015822:	7090      	strb	r0, [r2, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015824:	7113      	strb	r3, [r2, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8015826:	7151      	strb	r1, [r2, #5]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8015828:	2094      	movs	r0, #148	; 0x94
 801582a:	2206      	movs	r2, #6
 801582c:	4669      	mov	r1, sp
 801582e:	f7ee ff39 	bl	80046a4 <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_RX_DC );
 8015832:	2006      	movs	r0, #6
 8015834:	f7ee fee0 	bl	80045f8 <SX126xSetOperatingMode>
}
 8015838:	bd07      	pop	{r0, r1, r2, pc}

0801583a <SX126xSetCad>:
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 801583a:	2200      	movs	r2, #0
{
 801583c:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 801583e:	0011      	movs	r1, r2
 8015840:	20c5      	movs	r0, #197	; 0xc5
 8015842:	f7ee ff2f 	bl	80046a4 <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_CAD );
 8015846:	2007      	movs	r0, #7
 8015848:	f7ee fed6 	bl	80045f8 <SX126xSetOperatingMode>
}
 801584c:	bd10      	pop	{r4, pc}

0801584e <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801584e:	2200      	movs	r2, #0
{
 8015850:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8015852:	0011      	movs	r1, r2
 8015854:	20d1      	movs	r0, #209	; 0xd1
 8015856:	f7ee ff25 	bl	80046a4 <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_TX );
 801585a:	2004      	movs	r0, #4
 801585c:	f7ee fecc 	bl	80045f8 <SX126xSetOperatingMode>
}
 8015860:	bd10      	pop	{r4, pc}

08015862 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 8015862:	b507      	push	{r0, r1, r2, lr}
 8015864:	466b      	mov	r3, sp
 8015866:	1dd9      	adds	r1, r3, #7
 8015868:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801586a:	2201      	movs	r2, #1
 801586c:	209f      	movs	r0, #159	; 0x9f
 801586e:	f7ee ff19 	bl	80046a4 <SX126xWriteCommand>
}
 8015872:	bd07      	pop	{r0, r1, r2, pc}

08015874 <SX126xSetLoRaSymbNumTimeout>:
{
 8015874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015876:	0005      	movs	r5, r0
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8015878:	1c04      	adds	r4, r0, #0
 801587a:	28f8      	cmp	r0, #248	; 0xf8
 801587c:	d901      	bls.n	8015882 <SX126xSetLoRaSymbNumTimeout+0xe>
 801587e:	4b13      	ldr	r3, [pc, #76]	; (80158cc <SX126xSetLoRaSymbNumTimeout+0x58>)
 8015880:	781c      	ldrb	r4, [r3, #0]
    uint8_t exp  = 0;
 8015882:	2600      	movs	r6, #0
                       symbNum ) + 1 ) >> 1;
 8015884:	3401      	adds	r4, #1
 8015886:	b2e4      	uxtb	r4, r4
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 8015888:	0864      	lsrs	r4, r4, #1
    while( mant > 31 )
 801588a:	2c1f      	cmp	r4, #31
 801588c:	d817      	bhi.n	80158be <SX126xSetLoRaSymbNumTimeout+0x4a>
    reg = mant << ( 2 * exp + 1 );
 801588e:	0022      	movs	r2, r4
 8015890:	0073      	lsls	r3, r6, #1
 8015892:	3301      	adds	r3, #1
 8015894:	409a      	lsls	r2, r3
 8015896:	0013      	movs	r3, r2
 8015898:	466a      	mov	r2, sp
 801589a:	71d3      	strb	r3, [r2, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 801589c:	466b      	mov	r3, sp
 801589e:	2201      	movs	r2, #1
 80158a0:	20a0      	movs	r0, #160	; 0xa0
 80158a2:	1dd9      	adds	r1, r3, #7
 80158a4:	f7ee fefe 	bl	80046a4 <SX126xWriteCommand>
    if( symbNum != 0 )
 80158a8:	2d00      	cmp	r5, #0
 80158aa:	d007      	beq.n	80158bc <SX126xSetLoRaSymbNumTimeout+0x48>
        reg = exp + ( mant << 3 );
 80158ac:	466b      	mov	r3, sp
 80158ae:	00e1      	lsls	r1, r4, #3
 80158b0:	1871      	adds	r1, r6, r1
 80158b2:	b2c9      	uxtb	r1, r1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80158b4:	4806      	ldr	r0, [pc, #24]	; (80158d0 <SX126xSetLoRaSymbNumTimeout+0x5c>)
        reg = exp + ( mant << 3 );
 80158b6:	71d9      	strb	r1, [r3, #7]
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80158b8:	f7ee ff76 	bl	80047a8 <SX126xWriteRegister>
}
 80158bc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        mant = ( mant + 3 ) >> 2;
 80158be:	3403      	adds	r4, #3
 80158c0:	10a4      	asrs	r4, r4, #2
        exp++;
 80158c2:	3601      	adds	r6, #1
        mant = ( mant + 3 ) >> 2;
 80158c4:	b2e4      	uxtb	r4, r4
        exp++;
 80158c6:	b2f6      	uxtb	r6, r6
 80158c8:	e7df      	b.n	801588a <SX126xSetLoRaSymbNumTimeout+0x16>
 80158ca:	46c0      	nop			; (mov r8, r8)
 80158cc:	0801ac34 	.word	0x0801ac34
 80158d0:	00000706 	.word	0x00000706

080158d4 <SX126xSetRegulatorMode>:
{
 80158d4:	b507      	push	{r0, r1, r2, lr}
 80158d6:	466b      	mov	r3, sp
 80158d8:	1dd9      	adds	r1, r3, #7
 80158da:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80158dc:	2201      	movs	r2, #1
 80158de:	2096      	movs	r0, #150	; 0x96
 80158e0:	f7ee fee0 	bl	80046a4 <SX126xWriteCommand>
}
 80158e4:	bd07      	pop	{r0, r1, r2, pc}
	...

080158e8 <SX126xCalibrateImage>:
{
 80158e8:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 80158ea:	4b12      	ldr	r3, [pc, #72]	; (8015934 <SX126xCalibrateImage+0x4c>)
 80158ec:	a901      	add	r1, sp, #4
 80158ee:	4298      	cmp	r0, r3
 80158f0:	d908      	bls.n	8015904 <SX126xCalibrateImage+0x1c>
        calFreq[0] = 0xE1;
 80158f2:	23e1      	movs	r3, #225	; 0xe1
 80158f4:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0xE9;
 80158f6:	3308      	adds	r3, #8
        calFreq[1] = 0x6F;
 80158f8:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80158fa:	2202      	movs	r2, #2
 80158fc:	2098      	movs	r0, #152	; 0x98
 80158fe:	f7ee fed1 	bl	80046a4 <SX126xWriteCommand>
}
 8015902:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 8015904:	4b0c      	ldr	r3, [pc, #48]	; (8015938 <SX126xCalibrateImage+0x50>)
 8015906:	4298      	cmp	r0, r3
 8015908:	d903      	bls.n	8015912 <SX126xCalibrateImage+0x2a>
        calFreq[0] = 0xD7;
 801590a:	23d7      	movs	r3, #215	; 0xd7
        calFreq[0] = 0x6B;
 801590c:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x6F;
 801590e:	3304      	adds	r3, #4
 8015910:	e7f2      	b.n	80158f8 <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 8015912:	4b0a      	ldr	r3, [pc, #40]	; (801593c <SX126xCalibrateImage+0x54>)
 8015914:	4298      	cmp	r0, r3
 8015916:	d901      	bls.n	801591c <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xC1;
 8015918:	23c1      	movs	r3, #193	; 0xc1
 801591a:	e7f7      	b.n	801590c <SX126xCalibrateImage+0x24>
    else if( freq > 460000000 )
 801591c:	4b08      	ldr	r3, [pc, #32]	; (8015940 <SX126xCalibrateImage+0x58>)
 801591e:	4298      	cmp	r0, r3
 8015920:	d903      	bls.n	801592a <SX126xCalibrateImage+0x42>
        calFreq[0] = 0x75;
 8015922:	2375      	movs	r3, #117	; 0x75
 8015924:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x81;
 8015926:	330c      	adds	r3, #12
 8015928:	e7e6      	b.n	80158f8 <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 801592a:	4b06      	ldr	r3, [pc, #24]	; (8015944 <SX126xCalibrateImage+0x5c>)
 801592c:	4298      	cmp	r0, r3
 801592e:	d9e4      	bls.n	80158fa <SX126xCalibrateImage+0x12>
        calFreq[0] = 0x6B;
 8015930:	236b      	movs	r3, #107	; 0x6b
 8015932:	e7eb      	b.n	801590c <SX126xCalibrateImage+0x24>
 8015934:	35a4e900 	.word	0x35a4e900
 8015938:	32a9f880 	.word	0x32a9f880
 801593c:	2de54480 	.word	0x2de54480
 8015940:	1b6b0b00 	.word	0x1b6b0b00
 8015944:	1954fc40 	.word	0x1954fc40

08015948 <SX126xSetPaConfig>:
{
 8015948:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 801594a:	ac01      	add	r4, sp, #4
 801594c:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 801594e:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 8015950:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8015952:	0021      	movs	r1, r4
 8015954:	2204      	movs	r2, #4
 8015956:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 8015958:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801595a:	f7ee fea3 	bl	80046a4 <SX126xWriteCommand>
}
 801595e:	bd13      	pop	{r0, r1, r4, pc}

08015960 <SX126xSetDioIrqParams>:
{
 8015960:	b537      	push	{r0, r1, r2, r4, r5, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8015962:	466d      	mov	r5, sp
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8015964:	7068      	strb	r0, [r5, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8015966:	70e9      	strb	r1, [r5, #3]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8015968:	716a      	strb	r2, [r5, #5]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801596a:	0a04      	lsrs	r4, r0, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801596c:	0a08      	lsrs	r0, r1, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801596e:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8015970:	0a1a      	lsrs	r2, r3, #8
 8015972:	71aa      	strb	r2, [r5, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8015974:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8015976:	70a8      	strb	r0, [r5, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8015978:	7129      	strb	r1, [r5, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801597a:	0010      	movs	r0, r2
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801597c:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801597e:	702c      	strb	r4, [r5, #0]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8015980:	71eb      	strb	r3, [r5, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8015982:	f7ee fe8f 	bl	80046a4 <SX126xWriteCommand>
}
 8015986:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08015988 <SX126xGetIrqStatus>:
{
 8015988:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 801598a:	ac01      	add	r4, sp, #4
 801598c:	2202      	movs	r2, #2
 801598e:	0021      	movs	r1, r4
 8015990:	2012      	movs	r0, #18
 8015992:	f7ee feaf 	bl	80046f4 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8015996:	8820      	ldrh	r0, [r4, #0]
 8015998:	ba40      	rev16	r0, r0
 801599a:	b280      	uxth	r0, r0
}
 801599c:	bd16      	pop	{r1, r2, r4, pc}

0801599e <SX126xSetDio2AsRfSwitchCtrl>:
{
 801599e:	b507      	push	{r0, r1, r2, lr}
 80159a0:	466b      	mov	r3, sp
 80159a2:	1dd9      	adds	r1, r3, #7
 80159a4:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 80159a6:	2201      	movs	r2, #1
 80159a8:	209d      	movs	r0, #157	; 0x9d
 80159aa:	f7ee fe7b 	bl	80046a4 <SX126xWriteCommand>
}
 80159ae:	bd07      	pop	{r0, r1, r2, pc}

080159b0 <SX126xSetRfFrequency>:
{
 80159b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 80159b2:	4c13      	ldr	r4, [pc, #76]	; (8015a00 <SX126xSetRfFrequency+0x50>)
{
 80159b4:	0005      	movs	r5, r0
    if( ImageCalibrated == false )
 80159b6:	7823      	ldrb	r3, [r4, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d103      	bne.n	80159c4 <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 80159bc:	f7ff ff94 	bl	80158e8 <SX126xCalibrateImage>
        ImageCalibrated = true;
 80159c0:	2301      	movs	r3, #1
 80159c2:	7023      	strb	r3, [r4, #0]
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
    stepsFrac = freqInHz - ( stepsInt * SX126X_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80159c4:	0028      	movs	r0, r5
 80159c6:	490f      	ldr	r1, [pc, #60]	; (8015a04 <SX126xSetRfFrequency+0x54>)
 80159c8:	f7ea fc54 	bl	8000274 <__aeabi_uidivmod>
 80159cc:	4b0e      	ldr	r3, [pc, #56]	; (8015a08 <SX126xSetRfFrequency+0x58>)
 80159ce:	0388      	lsls	r0, r1, #14
 80159d0:	18c0      	adds	r0, r0, r3
 80159d2:	490c      	ldr	r1, [pc, #48]	; (8015a04 <SX126xSetRfFrequency+0x54>)
 80159d4:	f7ea fbc8 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 80159d8:	490a      	ldr	r1, [pc, #40]	; (8015a04 <SX126xSetRfFrequency+0x54>)
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80159da:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 80159dc:	0028      	movs	r0, r5
 80159de:	f7ea fbc3 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 80159e2:	0380      	lsls	r0, r0, #14
 80159e4:	1820      	adds	r0, r4, r0
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 80159e6:	a901      	add	r1, sp, #4
 80159e8:	0e03      	lsrs	r3, r0, #24
 80159ea:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF );
 80159ec:	0c03      	lsrs	r3, r0, #16
 80159ee:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 80159f0:	0a03      	lsrs	r3, r0, #8
    buf[3] = ( uint8_t )( freqInPllSteps & 0xFF );
 80159f2:	70c8      	strb	r0, [r1, #3]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80159f4:	2204      	movs	r2, #4
 80159f6:	2086      	movs	r0, #134	; 0x86
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 80159f8:	708b      	strb	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80159fa:	f7ee fe53 	bl	80046a4 <SX126xWriteCommand>
}
 80159fe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8015a00:	20001db0 	.word	0x20001db0
 8015a04:	00003d09 	.word	0x00003d09
 8015a08:	00001e84 	.word	0x00001e84

08015a0c <SX126xSetPacketType>:
{
 8015a0c:	b507      	push	{r0, r1, r2, lr}
 8015a0e:	466b      	mov	r3, sp
 8015a10:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 8015a12:	4b04      	ldr	r3, [pc, #16]	; (8015a24 <SX126xSetPacketType+0x18>)
{
 8015a14:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 8015a16:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8015a18:	2201      	movs	r2, #1
 8015a1a:	208a      	movs	r0, #138	; 0x8a
 8015a1c:	f7ee fe42 	bl	80046a4 <SX126xWriteCommand>
}
 8015a20:	bd07      	pop	{r0, r1, r2, pc}
 8015a22:	46c0      	nop			; (mov r8, r8)
 8015a24:	20001db2 	.word	0x20001db2

08015a28 <SX126xGetPacketType>:
    return PacketType;
 8015a28:	4b01      	ldr	r3, [pc, #4]	; (8015a30 <SX126xGetPacketType+0x8>)
 8015a2a:	7818      	ldrb	r0, [r3, #0]
}
 8015a2c:	4770      	bx	lr
 8015a2e:	46c0      	nop			; (mov r8, r8)
 8015a30:	20001db2 	.word	0x20001db2

08015a34 <SX126xSetTxParams>:
{
 8015a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a36:	0005      	movs	r5, r0
 8015a38:	000c      	movs	r4, r1
    if( SX126xGetDeviceId( ) == SX1261 )
 8015a3a:	f7ee ff58 	bl	80048ee <SX126xGetDeviceId>
 8015a3e:	0002      	movs	r2, r0
 8015a40:	2801      	cmp	r0, #1
 8015a42:	d11e      	bne.n	8015a82 <SX126xSetTxParams+0x4e>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8015a44:	0003      	movs	r3, r0
 8015a46:	2100      	movs	r1, #0
        if( power == 15 )
 8015a48:	2d0f      	cmp	r5, #15
 8015a4a:	d111      	bne.n	8015a70 <SX126xSetTxParams+0x3c>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8015a4c:	2006      	movs	r0, #6
 8015a4e:	f7ff ff7b 	bl	8015948 <SX126xSetPaConfig>
 8015a52:	1c2b      	adds	r3, r5, #0
 8015a54:	b25a      	sxtb	r2, r3
 8015a56:	2a0e      	cmp	r2, #14
 8015a58:	dd00      	ble.n	8015a5c <SX126xSetTxParams+0x28>
 8015a5a:	230e      	movs	r3, #14
    buf[0] = power;
 8015a5c:	466a      	mov	r2, sp
 8015a5e:	b25b      	sxtb	r3, r3
 8015a60:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 8015a62:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8015a64:	208e      	movs	r0, #142	; 0x8e
 8015a66:	2202      	movs	r2, #2
 8015a68:	a901      	add	r1, sp, #4
 8015a6a:	f7ee fe1b 	bl	80046a4 <SX126xWriteCommand>
}
 8015a6e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8015a70:	2004      	movs	r0, #4
 8015a72:	f7ff ff69 	bl	8015948 <SX126xSetPaConfig>
        if( power >= 14 )
 8015a76:	1c2b      	adds	r3, r5, #0
 8015a78:	3511      	adds	r5, #17
 8015a7a:	daeb      	bge.n	8015a54 <SX126xSetTxParams+0x20>
 8015a7c:	4b0d      	ldr	r3, [pc, #52]	; (8015ab4 <SX126xSetTxParams+0x80>)
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	e7ec      	b.n	8015a5c <SX126xSetTxParams+0x28>
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 8015a82:	480d      	ldr	r0, [pc, #52]	; (8015ab8 <SX126xSetTxParams+0x84>)
 8015a84:	f7ee fecc 	bl	8004820 <SX126xReadRegister>
 8015a88:	211e      	movs	r1, #30
 8015a8a:	4301      	orrs	r1, r0
 8015a8c:	b2c9      	uxtb	r1, r1
 8015a8e:	480a      	ldr	r0, [pc, #40]	; (8015ab8 <SX126xSetTxParams+0x84>)
 8015a90:	f7ee fe8a 	bl	80047a8 <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8015a94:	2301      	movs	r3, #1
 8015a96:	2200      	movs	r2, #0
 8015a98:	2107      	movs	r1, #7
 8015a9a:	2004      	movs	r0, #4
 8015a9c:	f7ff ff54 	bl	8015948 <SX126xSetPaConfig>
        if( power > 22 )
 8015aa0:	1c2b      	adds	r3, r5, #0
 8015aa2:	3509      	adds	r5, #9
 8015aa4:	da01      	bge.n	8015aaa <SX126xSetTxParams+0x76>
 8015aa6:	4b05      	ldr	r3, [pc, #20]	; (8015abc <SX126xSetTxParams+0x88>)
 8015aa8:	e7e9      	b.n	8015a7e <SX126xSetTxParams+0x4a>
 8015aaa:	b25a      	sxtb	r2, r3
 8015aac:	2a16      	cmp	r2, #22
 8015aae:	ddd5      	ble.n	8015a5c <SX126xSetTxParams+0x28>
 8015ab0:	2316      	movs	r3, #22
 8015ab2:	e7d3      	b.n	8015a5c <SX126xSetTxParams+0x28>
 8015ab4:	0801ac35 	.word	0x0801ac35
 8015ab8:	000008d8 	.word	0x000008d8
 8015abc:	0801ac36 	.word	0x0801ac36

08015ac0 <SX126xSetModulationParams>:
{
 8015ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ac2:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015ac4:	2208      	movs	r2, #8
 8015ac6:	4668      	mov	r0, sp
 8015ac8:	4923      	ldr	r1, [pc, #140]	; (8015b58 <SX126xSetModulationParams+0x98>)
 8015aca:	f000 fa8f 	bl	8015fec <memcpy>
    if( PacketType != modulationParams->PacketType )
 8015ace:	4b23      	ldr	r3, [pc, #140]	; (8015b5c <SX126xSetModulationParams+0x9c>)
 8015ad0:	7820      	ldrb	r0, [r4, #0]
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	4283      	cmp	r3, r0
 8015ad6:	d001      	beq.n	8015adc <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 8015ad8:	f7ff ff98 	bl	8015a0c <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 8015adc:	7823      	ldrb	r3, [r4, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d002      	beq.n	8015ae8 <SX126xSetModulationParams+0x28>
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d02c      	beq.n	8015b40 <SX126xSetModulationParams+0x80>
}
 8015ae6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 8015ae8:	6861      	ldr	r1, [r4, #4]
 8015aea:	481d      	ldr	r0, [pc, #116]	; (8015b60 <SX126xSetModulationParams+0xa0>)
 8015aec:	f7ea fb3c 	bl	8000168 <__udivsi3>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015af0:	466a      	mov	r2, sp
 8015af2:	0c03      	lsrs	r3, r0, #16
 8015af4:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015af6:	0a03      	lsrs	r3, r0, #8
        buf[2] = tempVal & 0xFF;
 8015af8:	7090      	strb	r0, [r2, #2]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015afa:	7053      	strb	r3, [r2, #1]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015afc:	7b23      	ldrb	r3, [r4, #12]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 8015afe:	68a5      	ldr	r5, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015b00:	70d3      	strb	r3, [r2, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015b02:	7b63      	ldrb	r3, [r4, #13]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015b04:	0028      	movs	r0, r5
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015b06:	7113      	strb	r3, [r2, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015b08:	4916      	ldr	r1, [pc, #88]	; (8015b64 <SX126xSetModulationParams+0xa4>)
 8015b0a:	f7ea fbb3 	bl	8000274 <__aeabi_uidivmod>
 8015b0e:	4b16      	ldr	r3, [pc, #88]	; (8015b68 <SX126xSetModulationParams+0xa8>)
 8015b10:	0388      	lsls	r0, r1, #14
 8015b12:	18c0      	adds	r0, r0, r3
 8015b14:	4913      	ldr	r1, [pc, #76]	; (8015b64 <SX126xSetModulationParams+0xa4>)
 8015b16:	f7ea fb27 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 8015b1a:	4912      	ldr	r1, [pc, #72]	; (8015b64 <SX126xSetModulationParams+0xa4>)
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8015b1c:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
 8015b1e:	0028      	movs	r0, r5
 8015b20:	f7ea fb22 	bl	8000168 <__udivsi3>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015b24:	466a      	mov	r2, sp
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 8015b26:	0380      	lsls	r0, r0, #14
 8015b28:	1820      	adds	r0, r4, r0
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015b2a:	0c03      	lsrs	r3, r0, #16
 8015b2c:	7153      	strb	r3, [r2, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8015b2e:	0a03      	lsrs	r3, r0, #8
 8015b30:	7193      	strb	r3, [r2, #6]
        buf[7] = ( tempVal& 0xFF );
 8015b32:	71d0      	strb	r0, [r2, #7]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015b34:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015b36:	4669      	mov	r1, sp
 8015b38:	208b      	movs	r0, #139	; 0x8b
 8015b3a:	f7ee fdb3 	bl	80046a4 <SX126xWriteCommand>
        break;
 8015b3e:	e7d2      	b.n	8015ae6 <SX126xSetModulationParams+0x26>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8015b40:	466a      	mov	r2, sp
 8015b42:	7c23      	ldrb	r3, [r4, #16]
 8015b44:	7013      	strb	r3, [r2, #0]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8015b46:	7c63      	ldrb	r3, [r4, #17]
 8015b48:	7053      	strb	r3, [r2, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8015b4a:	7ca3      	ldrb	r3, [r4, #18]
 8015b4c:	7093      	strb	r3, [r2, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015b4e:	7ce3      	ldrb	r3, [r4, #19]
 8015b50:	70d3      	strb	r3, [r2, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015b52:	2204      	movs	r2, #4
 8015b54:	e7ef      	b.n	8015b36 <SX126xSetModulationParams+0x76>
 8015b56:	46c0      	nop			; (mov r8, r8)
 8015b58:	0801889b 	.word	0x0801889b
 8015b5c:	20001db2 	.word	0x20001db2
 8015b60:	3d090000 	.word	0x3d090000
 8015b64:	00003d09 	.word	0x00003d09
 8015b68:	00001e84 	.word	0x00001e84

08015b6c <SX126xSetPacketParams>:
{
 8015b6c:	b530      	push	{r4, r5, lr}
 8015b6e:	0005      	movs	r5, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015b70:	4928      	ldr	r1, [pc, #160]	; (8015c14 <SX126xSetPacketParams+0xa8>)
{
 8015b72:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015b74:	ac01      	add	r4, sp, #4
 8015b76:	2209      	movs	r2, #9
 8015b78:	0020      	movs	r0, r4
 8015b7a:	3108      	adds	r1, #8
 8015b7c:	f000 fa36 	bl	8015fec <memcpy>
    if( PacketType != packetParams->PacketType )
 8015b80:	4b25      	ldr	r3, [pc, #148]	; (8015c18 <SX126xSetPacketParams+0xac>)
 8015b82:	7828      	ldrb	r0, [r5, #0]
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	4283      	cmp	r3, r0
 8015b88:	d001      	beq.n	8015b8e <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 8015b8a:	f7ff ff3f 	bl	8015a0c <SX126xSetPacketType>
    switch( packetParams->PacketType )
 8015b8e:	782b      	ldrb	r3, [r5, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d003      	beq.n	8015b9c <SX126xSetPacketParams+0x30>
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d02d      	beq.n	8015bf4 <SX126xSetPacketParams+0x88>
}
 8015b98:	b005      	add	sp, #20
 8015b9a:	bd30      	pop	{r4, r5, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8015b9c:	7a6b      	ldrb	r3, [r5, #9]
 8015b9e:	2bf1      	cmp	r3, #241	; 0xf1
 8015ba0:	d11e      	bne.n	8015be0 <SX126xSetPacketParams+0x74>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8015ba2:	481e      	ldr	r0, [pc, #120]	; (8015c1c <SX126xSetPacketParams+0xb0>)
 8015ba4:	f7ff fd2e 	bl	8015604 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8015ba8:	481d      	ldr	r0, [pc, #116]	; (8015c20 <SX126xSetPacketParams+0xb4>)
 8015baa:	f7ff fd3f 	bl	801562c <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8015bae:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015bb0:	886a      	ldrh	r2, [r5, #2]
        buf[7] = crcVal;
 8015bb2:	71e3      	strb	r3, [r4, #7]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015bb4:	0a11      	lsrs	r1, r2, #8
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8015bb6:	7062      	strb	r2, [r4, #1]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015bb8:	792a      	ldrb	r2, [r5, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8015bba:	7aab      	ldrb	r3, [r5, #10]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015bbc:	70a2      	strb	r2, [r4, #2]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8015bbe:	796a      	ldrb	r2, [r5, #5]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015bc0:	7021      	strb	r1, [r4, #0]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8015bc2:	70e2      	strb	r2, [r4, #3]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015bc4:	79aa      	ldrb	r2, [r5, #6]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8015bc6:	7223      	strb	r3, [r4, #8]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015bc8:	7122      	strb	r2, [r4, #4]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8015bca:	79ea      	ldrb	r2, [r5, #7]
 8015bcc:	7162      	strb	r2, [r4, #5]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8015bce:	7a2a      	ldrb	r2, [r5, #8]
 8015bd0:	71a2      	strb	r2, [r4, #6]
        n = 9;
 8015bd2:	2209      	movs	r2, #9
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8015bd4:	0021      	movs	r1, r4
 8015bd6:	208c      	movs	r0, #140	; 0x8c
 8015bd8:	b292      	uxth	r2, r2
 8015bda:	f7ee fd63 	bl	80046a4 <SX126xWriteCommand>
 8015bde:	e7db      	b.n	8015b98 <SX126xSetPacketParams+0x2c>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8015be0:	2bf2      	cmp	r3, #242	; 0xf2
 8015be2:	d1e5      	bne.n	8015bb0 <SX126xSetPacketParams+0x44>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8015be4:	480f      	ldr	r0, [pc, #60]	; (8015c24 <SX126xSetPacketParams+0xb8>)
 8015be6:	f7ff fd0d 	bl	8015604 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8015bea:	480f      	ldr	r0, [pc, #60]	; (8015c28 <SX126xSetPacketParams+0xbc>)
 8015bec:	f7ff fd1e 	bl	801562c <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8015bf0:	2306      	movs	r3, #6
 8015bf2:	e7dd      	b.n	8015bb0 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8015bf4:	89ab      	ldrh	r3, [r5, #12]
 8015bf6:	0a1a      	lsrs	r2, r3, #8
 8015bf8:	7022      	strb	r2, [r4, #0]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8015bfa:	7063      	strb	r3, [r4, #1]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8015bfc:	4a0b      	ldr	r2, [pc, #44]	; (8015c2c <SX126xSetPacketParams+0xc0>)
 8015bfe:	7bab      	ldrb	r3, [r5, #14]
 8015c00:	7013      	strb	r3, [r2, #0]
 8015c02:	70a3      	strb	r3, [r4, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015c04:	7beb      	ldrb	r3, [r5, #15]
        n = 6;
 8015c06:	2206      	movs	r2, #6
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015c08:	70e3      	strb	r3, [r4, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8015c0a:	7c2b      	ldrb	r3, [r5, #16]
 8015c0c:	7123      	strb	r3, [r4, #4]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8015c0e:	7c6b      	ldrb	r3, [r5, #17]
 8015c10:	7163      	strb	r3, [r4, #5]
        break;
 8015c12:	e7df      	b.n	8015bd4 <SX126xSetPacketParams+0x68>
 8015c14:	0801889b 	.word	0x0801889b
 8015c18:	20001db2 	.word	0x20001db2
 8015c1c:	0000ffff 	.word	0x0000ffff
 8015c20:	00008005 	.word	0x00008005
 8015c24:	00001d0f 	.word	0x00001d0f
 8015c28:	00001021 	.word	0x00001021
 8015c2c:	20001db1 	.word	0x20001db1

08015c30 <SX126xSetBufferBaseAddress>:
{
 8015c30:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 8015c32:	466b      	mov	r3, sp
 8015c34:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 8015c36:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8015c38:	2202      	movs	r2, #2
 8015c3a:	208f      	movs	r0, #143	; 0x8f
 8015c3c:	a901      	add	r1, sp, #4
 8015c3e:	f7ee fd31 	bl	80046a4 <SX126xWriteCommand>
}
 8015c42:	bd07      	pop	{r0, r1, r2, pc}

08015c44 <SX126xGetRssiInst>:
{
 8015c44:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8015c46:	ac01      	add	r4, sp, #4
 8015c48:	2201      	movs	r2, #1
 8015c4a:	0021      	movs	r1, r4
 8015c4c:	2015      	movs	r0, #21
 8015c4e:	f7ee fd51 	bl	80046f4 <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 8015c52:	7820      	ldrb	r0, [r4, #0]
 8015c54:	4240      	negs	r0, r0
 8015c56:	1040      	asrs	r0, r0, #1
}
 8015c58:	bd16      	pop	{r1, r2, r4, pc}
	...

08015c5c <SX126xGetRxBufferStatus>:
{
 8015c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c5e:	0004      	movs	r4, r0
 8015c60:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8015c62:	2202      	movs	r2, #2
 8015c64:	2013      	movs	r0, #19
 8015c66:	a901      	add	r1, sp, #4
 8015c68:	f7ee fd44 	bl	80046f4 <SX126xReadCommand>
    return PacketType;
 8015c6c:	4b09      	ldr	r3, [pc, #36]	; (8015c94 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8015c6e:	781b      	ldrb	r3, [r3, #0]
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d10b      	bne.n	8015c8c <SX126xGetRxBufferStatus+0x30>
 8015c74:	4b08      	ldr	r3, [pc, #32]	; (8015c98 <SX126xGetRxBufferStatus+0x3c>)
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d107      	bne.n	8015c8c <SX126xGetRxBufferStatus+0x30>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 8015c7c:	4807      	ldr	r0, [pc, #28]	; (8015c9c <SX126xGetRxBufferStatus+0x40>)
 8015c7e:	f7ee fdcf 	bl	8004820 <SX126xReadRegister>
 8015c82:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 8015c84:	466b      	mov	r3, sp
 8015c86:	795b      	ldrb	r3, [r3, #5]
 8015c88:	702b      	strb	r3, [r5, #0]
}
 8015c8a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 8015c8c:	466b      	mov	r3, sp
 8015c8e:	791b      	ldrb	r3, [r3, #4]
 8015c90:	7023      	strb	r3, [r4, #0]
 8015c92:	e7f7      	b.n	8015c84 <SX126xGetRxBufferStatus+0x28>
 8015c94:	20001db2 	.word	0x20001db2
 8015c98:	20001db1 	.word	0x20001db1
 8015c9c:	00000702 	.word	0x00000702

08015ca0 <SX126xGetPayload>:
{
 8015ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ca2:	000c      	movs	r4, r1
    uint8_t offset = 0;
 8015ca4:	466b      	mov	r3, sp
 8015ca6:	2700      	movs	r7, #0
{
 8015ca8:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 8015caa:	1dd9      	adds	r1, r3, #7
 8015cac:	0020      	movs	r0, r4
{
 8015cae:	0016      	movs	r6, r2
    uint8_t offset = 0;
 8015cb0:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 8015cb2:	f7ff ffd3 	bl	8015c5c <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 8015cb6:	7822      	ldrb	r2, [r4, #0]
        return 1;
 8015cb8:	2001      	movs	r0, #1
    if( *size > maxSize )
 8015cba:	42b2      	cmp	r2, r6
 8015cbc:	d805      	bhi.n	8015cca <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 8015cbe:	466b      	mov	r3, sp
 8015cc0:	0029      	movs	r1, r5
 8015cc2:	79d8      	ldrb	r0, [r3, #7]
 8015cc4:	f7ee fde0 	bl	8004888 <SX126xReadBuffer>
    return 0;
 8015cc8:	0038      	movs	r0, r7
}
 8015cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08015ccc <SX126xGetPacketStatus>:
{
 8015ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cce:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8015cd0:	ad01      	add	r5, sp, #4
 8015cd2:	2203      	movs	r2, #3
 8015cd4:	0029      	movs	r1, r5
 8015cd6:	2014      	movs	r0, #20
 8015cd8:	f7ee fd0c 	bl	80046f4 <SX126xReadCommand>
    return PacketType;
 8015cdc:	4b15      	ldr	r3, [pc, #84]	; (8015d34 <SX126xGetPacketStatus+0x68>)
 8015cde:	781a      	ldrb	r2, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 8015ce0:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 8015ce2:	2a00      	cmp	r2, #0
 8015ce4:	d009      	beq.n	8015cfa <SX126xGetPacketStatus+0x2e>
 8015ce6:	2a01      	cmp	r2, #1
 8015ce8:	d013      	beq.n	8015d12 <SX126xGetPacketStatus+0x46>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015cea:	2214      	movs	r2, #20
 8015cec:	2100      	movs	r1, #0
 8015cee:	0020      	movs	r0, r4
 8015cf0:	f000 f985 	bl	8015ffe <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8015cf4:	230f      	movs	r3, #15
 8015cf6:	7023      	strb	r3, [r4, #0]
}
 8015cf8:	e00a      	b.n	8015d10 <SX126xGetPacketStatus+0x44>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015cfa:	782b      	ldrb	r3, [r5, #0]
            pktStatus->Params.Gfsk.FreqError = 0;
 8015cfc:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015cfe:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8015d00:	786b      	ldrb	r3, [r5, #1]
 8015d02:	425b      	negs	r3, r3
 8015d04:	105b      	asrs	r3, r3, #1
 8015d06:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8015d08:	78ab      	ldrb	r3, [r5, #2]
 8015d0a:	425b      	negs	r3, r3
 8015d0c:	105b      	asrs	r3, r3, #1
 8015d0e:	7163      	strb	r3, [r4, #5]
}
 8015d10:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8015d12:	782b      	ldrb	r3, [r5, #0]
 8015d14:	425b      	negs	r3, r3
 8015d16:	105b      	asrs	r3, r3, #1
 8015d18:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	56eb      	ldrsb	r3, [r5, r3]
 8015d1e:	3302      	adds	r3, #2
 8015d20:	109b      	asrs	r3, r3, #2
 8015d22:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8015d24:	78ab      	ldrb	r3, [r5, #2]
 8015d26:	425b      	negs	r3, r3
 8015d28:	105b      	asrs	r3, r3, #1
 8015d2a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8015d2c:	4b02      	ldr	r3, [pc, #8]	; (8015d38 <SX126xGetPacketStatus+0x6c>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	6123      	str	r3, [r4, #16]
            break;
 8015d32:	e7ed      	b.n	8015d10 <SX126xGetPacketStatus+0x44>
 8015d34:	20001db2 	.word	0x20001db2
 8015d38:	20001dac 	.word	0x20001dac

08015d3c <SX126xClearIrqStatus>:
{
 8015d3c:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8015d3e:	466a      	mov	r2, sp
 8015d40:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 8015d42:	7150      	strb	r0, [r2, #5]
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8015d44:	7113      	strb	r3, [r2, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8015d46:	2202      	movs	r2, #2
 8015d48:	a901      	add	r1, sp, #4
 8015d4a:	0010      	movs	r0, r2
 8015d4c:	f7ee fcaa 	bl	80046a4 <SX126xWriteCommand>
}
 8015d50:	bd07      	pop	{r0, r1, r2, pc}
	...

08015d54 <floor>:
 8015d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d56:	004b      	lsls	r3, r1, #1
 8015d58:	4a3d      	ldr	r2, [pc, #244]	; (8015e50 <floor+0xfc>)
 8015d5a:	0d5b      	lsrs	r3, r3, #21
 8015d5c:	189f      	adds	r7, r3, r2
 8015d5e:	4684      	mov	ip, r0
 8015d60:	000e      	movs	r6, r1
 8015d62:	000d      	movs	r5, r1
 8015d64:	0004      	movs	r4, r0
 8015d66:	9001      	str	r0, [sp, #4]
 8015d68:	2f13      	cmp	r7, #19
 8015d6a:	dc34      	bgt.n	8015dd6 <floor+0x82>
 8015d6c:	2f00      	cmp	r7, #0
 8015d6e:	da16      	bge.n	8015d9e <floor+0x4a>
 8015d70:	4a38      	ldr	r2, [pc, #224]	; (8015e54 <floor+0x100>)
 8015d72:	4b39      	ldr	r3, [pc, #228]	; (8015e58 <floor+0x104>)
 8015d74:	4660      	mov	r0, ip
 8015d76:	0031      	movs	r1, r6
 8015d78:	f7eb f98a 	bl	8001090 <__aeabi_dadd>
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	2300      	movs	r3, #0
 8015d80:	f7ea fb9e 	bl	80004c0 <__aeabi_dcmpgt>
 8015d84:	2800      	cmp	r0, #0
 8015d86:	d007      	beq.n	8015d98 <floor+0x44>
 8015d88:	2e00      	cmp	r6, #0
 8015d8a:	da5d      	bge.n	8015e48 <floor+0xf4>
 8015d8c:	0073      	lsls	r3, r6, #1
 8015d8e:	085b      	lsrs	r3, r3, #1
 8015d90:	431c      	orrs	r4, r3
 8015d92:	d001      	beq.n	8015d98 <floor+0x44>
 8015d94:	2400      	movs	r4, #0
 8015d96:	4d31      	ldr	r5, [pc, #196]	; (8015e5c <floor+0x108>)
 8015d98:	46a4      	mov	ip, r4
 8015d9a:	002e      	movs	r6, r5
 8015d9c:	e029      	b.n	8015df2 <floor+0x9e>
 8015d9e:	4b30      	ldr	r3, [pc, #192]	; (8015e60 <floor+0x10c>)
 8015da0:	413b      	asrs	r3, r7
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	400b      	ands	r3, r1
 8015da6:	4303      	orrs	r3, r0
 8015da8:	d023      	beq.n	8015df2 <floor+0x9e>
 8015daa:	4a2a      	ldr	r2, [pc, #168]	; (8015e54 <floor+0x100>)
 8015dac:	4b2a      	ldr	r3, [pc, #168]	; (8015e58 <floor+0x104>)
 8015dae:	4660      	mov	r0, ip
 8015db0:	0031      	movs	r1, r6
 8015db2:	f7eb f96d 	bl	8001090 <__aeabi_dadd>
 8015db6:	2200      	movs	r2, #0
 8015db8:	2300      	movs	r3, #0
 8015dba:	f7ea fb81 	bl	80004c0 <__aeabi_dcmpgt>
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	d0ea      	beq.n	8015d98 <floor+0x44>
 8015dc2:	2e00      	cmp	r6, #0
 8015dc4:	da03      	bge.n	8015dce <floor+0x7a>
 8015dc6:	2380      	movs	r3, #128	; 0x80
 8015dc8:	035b      	lsls	r3, r3, #13
 8015dca:	413b      	asrs	r3, r7
 8015dcc:	18f5      	adds	r5, r6, r3
 8015dce:	9b00      	ldr	r3, [sp, #0]
 8015dd0:	2400      	movs	r4, #0
 8015dd2:	439d      	bics	r5, r3
 8015dd4:	e7e0      	b.n	8015d98 <floor+0x44>
 8015dd6:	2f33      	cmp	r7, #51	; 0x33
 8015dd8:	dd0f      	ble.n	8015dfa <floor+0xa6>
 8015dda:	2380      	movs	r3, #128	; 0x80
 8015ddc:	00db      	lsls	r3, r3, #3
 8015dde:	429f      	cmp	r7, r3
 8015de0:	d107      	bne.n	8015df2 <floor+0x9e>
 8015de2:	0002      	movs	r2, r0
 8015de4:	000b      	movs	r3, r1
 8015de6:	4660      	mov	r0, ip
 8015de8:	0031      	movs	r1, r6
 8015dea:	f7eb f951 	bl	8001090 <__aeabi_dadd>
 8015dee:	4684      	mov	ip, r0
 8015df0:	000e      	movs	r6, r1
 8015df2:	4660      	mov	r0, ip
 8015df4:	0031      	movs	r1, r6
 8015df6:	b003      	add	sp, #12
 8015df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dfa:	4a1a      	ldr	r2, [pc, #104]	; (8015e64 <floor+0x110>)
 8015dfc:	189b      	adds	r3, r3, r2
 8015dfe:	2201      	movs	r2, #1
 8015e00:	4252      	negs	r2, r2
 8015e02:	40da      	lsrs	r2, r3
 8015e04:	9200      	str	r2, [sp, #0]
 8015e06:	4210      	tst	r0, r2
 8015e08:	d0f3      	beq.n	8015df2 <floor+0x9e>
 8015e0a:	4a12      	ldr	r2, [pc, #72]	; (8015e54 <floor+0x100>)
 8015e0c:	4b12      	ldr	r3, [pc, #72]	; (8015e58 <floor+0x104>)
 8015e0e:	4660      	mov	r0, ip
 8015e10:	0031      	movs	r1, r6
 8015e12:	f7eb f93d 	bl	8001090 <__aeabi_dadd>
 8015e16:	2200      	movs	r2, #0
 8015e18:	2300      	movs	r3, #0
 8015e1a:	f7ea fb51 	bl	80004c0 <__aeabi_dcmpgt>
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	d0ba      	beq.n	8015d98 <floor+0x44>
 8015e22:	2e00      	cmp	r6, #0
 8015e24:	da02      	bge.n	8015e2c <floor+0xd8>
 8015e26:	2f14      	cmp	r7, #20
 8015e28:	d103      	bne.n	8015e32 <floor+0xde>
 8015e2a:	3501      	adds	r5, #1
 8015e2c:	9b00      	ldr	r3, [sp, #0]
 8015e2e:	439c      	bics	r4, r3
 8015e30:	e7b2      	b.n	8015d98 <floor+0x44>
 8015e32:	2334      	movs	r3, #52	; 0x34
 8015e34:	1bdf      	subs	r7, r3, r7
 8015e36:	3b33      	subs	r3, #51	; 0x33
 8015e38:	40bb      	lsls	r3, r7
 8015e3a:	18e4      	adds	r4, r4, r3
 8015e3c:	9b01      	ldr	r3, [sp, #4]
 8015e3e:	429c      	cmp	r4, r3
 8015e40:	419b      	sbcs	r3, r3
 8015e42:	425b      	negs	r3, r3
 8015e44:	18f5      	adds	r5, r6, r3
 8015e46:	e7f1      	b.n	8015e2c <floor+0xd8>
 8015e48:	2400      	movs	r4, #0
 8015e4a:	0025      	movs	r5, r4
 8015e4c:	e7a4      	b.n	8015d98 <floor+0x44>
 8015e4e:	46c0      	nop			; (mov r8, r8)
 8015e50:	fffffc01 	.word	0xfffffc01
 8015e54:	8800759c 	.word	0x8800759c
 8015e58:	7e37e43c 	.word	0x7e37e43c
 8015e5c:	bff00000 	.word	0xbff00000
 8015e60:	000fffff 	.word	0x000fffff
 8015e64:	fffffbed 	.word	0xfffffbed

08015e68 <round>:
 8015e68:	b570      	push	{r4, r5, r6, lr}
 8015e6a:	000d      	movs	r5, r1
 8015e6c:	0006      	movs	r6, r0
 8015e6e:	0001      	movs	r1, r0
 8015e70:	006a      	lsls	r2, r5, #1
 8015e72:	4820      	ldr	r0, [pc, #128]	; (8015ef4 <round+0x8c>)
 8015e74:	0d52      	lsrs	r2, r2, #21
 8015e76:	1810      	adds	r0, r2, r0
 8015e78:	2813      	cmp	r0, #19
 8015e7a:	dc18      	bgt.n	8015eae <round+0x46>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	da09      	bge.n	8015e94 <round+0x2c>
 8015e80:	0feb      	lsrs	r3, r5, #31
 8015e82:	2200      	movs	r2, #0
 8015e84:	07db      	lsls	r3, r3, #31
 8015e86:	1c41      	adds	r1, r0, #1
 8015e88:	d101      	bne.n	8015e8e <round+0x26>
 8015e8a:	491b      	ldr	r1, [pc, #108]	; (8015ef8 <round+0x90>)
 8015e8c:	430b      	orrs	r3, r1
 8015e8e:	0019      	movs	r1, r3
 8015e90:	0010      	movs	r0, r2
 8015e92:	e018      	b.n	8015ec6 <round+0x5e>
 8015e94:	4c19      	ldr	r4, [pc, #100]	; (8015efc <round+0x94>)
 8015e96:	4104      	asrs	r4, r0
 8015e98:	0022      	movs	r2, r4
 8015e9a:	402a      	ands	r2, r5
 8015e9c:	4311      	orrs	r1, r2
 8015e9e:	d014      	beq.n	8015eca <round+0x62>
 8015ea0:	2280      	movs	r2, #128	; 0x80
 8015ea2:	0312      	lsls	r2, r2, #12
 8015ea4:	4102      	asrs	r2, r0
 8015ea6:	1953      	adds	r3, r2, r5
 8015ea8:	43a3      	bics	r3, r4
 8015eaa:	2200      	movs	r2, #0
 8015eac:	e7ef      	b.n	8015e8e <round+0x26>
 8015eae:	2833      	cmp	r0, #51	; 0x33
 8015eb0:	dd0e      	ble.n	8015ed0 <round+0x68>
 8015eb2:	2380      	movs	r3, #128	; 0x80
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	4298      	cmp	r0, r3
 8015eb8:	d107      	bne.n	8015eca <round+0x62>
 8015eba:	0032      	movs	r2, r6
 8015ebc:	002b      	movs	r3, r5
 8015ebe:	0030      	movs	r0, r6
 8015ec0:	0029      	movs	r1, r5
 8015ec2:	f7eb f8e5 	bl	8001090 <__aeabi_dadd>
 8015ec6:	0006      	movs	r6, r0
 8015ec8:	000d      	movs	r5, r1
 8015eca:	0030      	movs	r0, r6
 8015ecc:	0029      	movs	r1, r5
 8015ece:	bd70      	pop	{r4, r5, r6, pc}
 8015ed0:	4c0b      	ldr	r4, [pc, #44]	; (8015f00 <round+0x98>)
 8015ed2:	1912      	adds	r2, r2, r4
 8015ed4:	2401      	movs	r4, #1
 8015ed6:	4264      	negs	r4, r4
 8015ed8:	40d4      	lsrs	r4, r2
 8015eda:	4234      	tst	r4, r6
 8015edc:	d0f5      	beq.n	8015eca <round+0x62>
 8015ede:	2233      	movs	r2, #51	; 0x33
 8015ee0:	1a10      	subs	r0, r2, r0
 8015ee2:	3a32      	subs	r2, #50	; 0x32
 8015ee4:	4082      	lsls	r2, r0
 8015ee6:	1992      	adds	r2, r2, r6
 8015ee8:	42b2      	cmp	r2, r6
 8015eea:	4189      	sbcs	r1, r1
 8015eec:	4249      	negs	r1, r1
 8015eee:	186b      	adds	r3, r5, r1
 8015ef0:	43a2      	bics	r2, r4
 8015ef2:	e7cc      	b.n	8015e8e <round+0x26>
 8015ef4:	fffffc01 	.word	0xfffffc01
 8015ef8:	3ff00000 	.word	0x3ff00000
 8015efc:	000fffff 	.word	0x000fffff
 8015f00:	fffffbed 	.word	0xfffffbed

08015f04 <__assert_func>:
 8015f04:	b530      	push	{r4, r5, lr}
 8015f06:	0014      	movs	r4, r2
 8015f08:	001a      	movs	r2, r3
 8015f0a:	4b09      	ldr	r3, [pc, #36]	; (8015f30 <__assert_func+0x2c>)
 8015f0c:	0005      	movs	r5, r0
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	b085      	sub	sp, #20
 8015f12:	68d8      	ldr	r0, [r3, #12]
 8015f14:	4b07      	ldr	r3, [pc, #28]	; (8015f34 <__assert_func+0x30>)
 8015f16:	2c00      	cmp	r4, #0
 8015f18:	d101      	bne.n	8015f1e <__assert_func+0x1a>
 8015f1a:	4b07      	ldr	r3, [pc, #28]	; (8015f38 <__assert_func+0x34>)
 8015f1c:	001c      	movs	r4, r3
 8015f1e:	9301      	str	r3, [sp, #4]
 8015f20:	9100      	str	r1, [sp, #0]
 8015f22:	002b      	movs	r3, r5
 8015f24:	4905      	ldr	r1, [pc, #20]	; (8015f3c <__assert_func+0x38>)
 8015f26:	9402      	str	r4, [sp, #8]
 8015f28:	f000 f80a 	bl	8015f40 <fiprintf>
 8015f2c:	f001 fab4 	bl	8017498 <abort>
 8015f30:	20000244 	.word	0x20000244
 8015f34:	0801ac37 	.word	0x0801ac37
 8015f38:	080198bd 	.word	0x080198bd
 8015f3c:	0801ac44 	.word	0x0801ac44

08015f40 <fiprintf>:
 8015f40:	b40e      	push	{r1, r2, r3}
 8015f42:	b503      	push	{r0, r1, lr}
 8015f44:	0001      	movs	r1, r0
 8015f46:	ab03      	add	r3, sp, #12
 8015f48:	4804      	ldr	r0, [pc, #16]	; (8015f5c <fiprintf+0x1c>)
 8015f4a:	cb04      	ldmia	r3!, {r2}
 8015f4c:	6800      	ldr	r0, [r0, #0]
 8015f4e:	9301      	str	r3, [sp, #4]
 8015f50:	f000 fc00 	bl	8016754 <_vfiprintf_r>
 8015f54:	b002      	add	sp, #8
 8015f56:	bc08      	pop	{r3}
 8015f58:	b003      	add	sp, #12
 8015f5a:	4718      	bx	r3
 8015f5c:	20000244 	.word	0x20000244

08015f60 <__libc_init_array>:
 8015f60:	b570      	push	{r4, r5, r6, lr}
 8015f62:	2600      	movs	r6, #0
 8015f64:	4d0c      	ldr	r5, [pc, #48]	; (8015f98 <__libc_init_array+0x38>)
 8015f66:	4c0d      	ldr	r4, [pc, #52]	; (8015f9c <__libc_init_array+0x3c>)
 8015f68:	1b64      	subs	r4, r4, r5
 8015f6a:	10a4      	asrs	r4, r4, #2
 8015f6c:	42a6      	cmp	r6, r4
 8015f6e:	d109      	bne.n	8015f84 <__libc_init_array+0x24>
 8015f70:	2600      	movs	r6, #0
 8015f72:	f002 fc59 	bl	8018828 <_init>
 8015f76:	4d0a      	ldr	r5, [pc, #40]	; (8015fa0 <__libc_init_array+0x40>)
 8015f78:	4c0a      	ldr	r4, [pc, #40]	; (8015fa4 <__libc_init_array+0x44>)
 8015f7a:	1b64      	subs	r4, r4, r5
 8015f7c:	10a4      	asrs	r4, r4, #2
 8015f7e:	42a6      	cmp	r6, r4
 8015f80:	d105      	bne.n	8015f8e <__libc_init_array+0x2e>
 8015f82:	bd70      	pop	{r4, r5, r6, pc}
 8015f84:	00b3      	lsls	r3, r6, #2
 8015f86:	58eb      	ldr	r3, [r5, r3]
 8015f88:	4798      	blx	r3
 8015f8a:	3601      	adds	r6, #1
 8015f8c:	e7ee      	b.n	8015f6c <__libc_init_array+0xc>
 8015f8e:	00b3      	lsls	r3, r6, #2
 8015f90:	58eb      	ldr	r3, [r5, r3]
 8015f92:	4798      	blx	r3
 8015f94:	3601      	adds	r6, #1
 8015f96:	e7f2      	b.n	8015f7e <__libc_init_array+0x1e>
 8015f98:	0801af28 	.word	0x0801af28
 8015f9c:	0801af28 	.word	0x0801af28
 8015fa0:	0801af28 	.word	0x0801af28
 8015fa4:	0801af2c 	.word	0x0801af2c

08015fa8 <malloc>:
 8015fa8:	b510      	push	{r4, lr}
 8015faa:	4b03      	ldr	r3, [pc, #12]	; (8015fb8 <malloc+0x10>)
 8015fac:	0001      	movs	r1, r0
 8015fae:	6818      	ldr	r0, [r3, #0]
 8015fb0:	f000 fb32 	bl	8016618 <_malloc_r>
 8015fb4:	bd10      	pop	{r4, pc}
 8015fb6:	46c0      	nop			; (mov r8, r8)
 8015fb8:	20000244 	.word	0x20000244

08015fbc <free>:
 8015fbc:	b510      	push	{r4, lr}
 8015fbe:	4b03      	ldr	r3, [pc, #12]	; (8015fcc <free+0x10>)
 8015fc0:	0001      	movs	r1, r0
 8015fc2:	6818      	ldr	r0, [r3, #0]
 8015fc4:	f000 fabc 	bl	8016540 <_free_r>
 8015fc8:	bd10      	pop	{r4, pc}
 8015fca:	46c0      	nop			; (mov r8, r8)
 8015fcc:	20000244 	.word	0x20000244

08015fd0 <memcmp>:
 8015fd0:	b530      	push	{r4, r5, lr}
 8015fd2:	2400      	movs	r4, #0
 8015fd4:	3901      	subs	r1, #1
 8015fd6:	42a2      	cmp	r2, r4
 8015fd8:	d101      	bne.n	8015fde <memcmp+0xe>
 8015fda:	2000      	movs	r0, #0
 8015fdc:	e005      	b.n	8015fea <memcmp+0x1a>
 8015fde:	5d03      	ldrb	r3, [r0, r4]
 8015fe0:	3401      	adds	r4, #1
 8015fe2:	5d0d      	ldrb	r5, [r1, r4]
 8015fe4:	42ab      	cmp	r3, r5
 8015fe6:	d0f6      	beq.n	8015fd6 <memcmp+0x6>
 8015fe8:	1b58      	subs	r0, r3, r5
 8015fea:	bd30      	pop	{r4, r5, pc}

08015fec <memcpy>:
 8015fec:	2300      	movs	r3, #0
 8015fee:	b510      	push	{r4, lr}
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d100      	bne.n	8015ff6 <memcpy+0xa>
 8015ff4:	bd10      	pop	{r4, pc}
 8015ff6:	5ccc      	ldrb	r4, [r1, r3]
 8015ff8:	54c4      	strb	r4, [r0, r3]
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	e7f8      	b.n	8015ff0 <memcpy+0x4>

08015ffe <memset>:
 8015ffe:	0003      	movs	r3, r0
 8016000:	1882      	adds	r2, r0, r2
 8016002:	4293      	cmp	r3, r2
 8016004:	d100      	bne.n	8016008 <memset+0xa>
 8016006:	4770      	bx	lr
 8016008:	7019      	strb	r1, [r3, #0]
 801600a:	3301      	adds	r3, #1
 801600c:	e7f9      	b.n	8016002 <memset+0x4>
	...

08016010 <validate_structure>:
 8016010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016012:	6801      	ldr	r1, [r0, #0]
 8016014:	0004      	movs	r4, r0
 8016016:	293b      	cmp	r1, #59	; 0x3b
 8016018:	d90b      	bls.n	8016032 <validate_structure+0x22>
 801601a:	223c      	movs	r2, #60	; 0x3c
 801601c:	4668      	mov	r0, sp
 801601e:	f001 fa42 	bl	80174a6 <div>
 8016022:	6863      	ldr	r3, [r4, #4]
 8016024:	9900      	ldr	r1, [sp, #0]
 8016026:	9a01      	ldr	r2, [sp, #4]
 8016028:	185b      	adds	r3, r3, r1
 801602a:	6063      	str	r3, [r4, #4]
 801602c:	2a00      	cmp	r2, #0
 801602e:	db71      	blt.n	8016114 <validate_structure+0x104>
 8016030:	6022      	str	r2, [r4, #0]
 8016032:	6861      	ldr	r1, [r4, #4]
 8016034:	293b      	cmp	r1, #59	; 0x3b
 8016036:	d90b      	bls.n	8016050 <validate_structure+0x40>
 8016038:	223c      	movs	r2, #60	; 0x3c
 801603a:	4668      	mov	r0, sp
 801603c:	f001 fa33 	bl	80174a6 <div>
 8016040:	68a3      	ldr	r3, [r4, #8]
 8016042:	9900      	ldr	r1, [sp, #0]
 8016044:	9a01      	ldr	r2, [sp, #4]
 8016046:	185b      	adds	r3, r3, r1
 8016048:	60a3      	str	r3, [r4, #8]
 801604a:	2a00      	cmp	r2, #0
 801604c:	db67      	blt.n	801611e <validate_structure+0x10e>
 801604e:	6062      	str	r2, [r4, #4]
 8016050:	68a1      	ldr	r1, [r4, #8]
 8016052:	2917      	cmp	r1, #23
 8016054:	d90b      	bls.n	801606e <validate_structure+0x5e>
 8016056:	2218      	movs	r2, #24
 8016058:	4668      	mov	r0, sp
 801605a:	f001 fa24 	bl	80174a6 <div>
 801605e:	68e3      	ldr	r3, [r4, #12]
 8016060:	9900      	ldr	r1, [sp, #0]
 8016062:	9a01      	ldr	r2, [sp, #4]
 8016064:	185b      	adds	r3, r3, r1
 8016066:	60e3      	str	r3, [r4, #12]
 8016068:	2a00      	cmp	r2, #0
 801606a:	db5d      	blt.n	8016128 <validate_structure+0x118>
 801606c:	60a2      	str	r2, [r4, #8]
 801606e:	6921      	ldr	r1, [r4, #16]
 8016070:	290b      	cmp	r1, #11
 8016072:	d90b      	bls.n	801608c <validate_structure+0x7c>
 8016074:	220c      	movs	r2, #12
 8016076:	4668      	mov	r0, sp
 8016078:	f001 fa15 	bl	80174a6 <div>
 801607c:	6963      	ldr	r3, [r4, #20]
 801607e:	9900      	ldr	r1, [sp, #0]
 8016080:	9a01      	ldr	r2, [sp, #4]
 8016082:	185b      	adds	r3, r3, r1
 8016084:	6163      	str	r3, [r4, #20]
 8016086:	2a00      	cmp	r2, #0
 8016088:	db53      	blt.n	8016132 <validate_structure+0x122>
 801608a:	6122      	str	r2, [r4, #16]
 801608c:	6965      	ldr	r5, [r4, #20]
 801608e:	231c      	movs	r3, #28
 8016090:	07aa      	lsls	r2, r5, #30
 8016092:	d110      	bne.n	80160b6 <validate_structure+0xa6>
 8016094:	2164      	movs	r1, #100	; 0x64
 8016096:	0028      	movs	r0, r5
 8016098:	f7ea f9d6 	bl	8000448 <__aeabi_idivmod>
 801609c:	231d      	movs	r3, #29
 801609e:	2900      	cmp	r1, #0
 80160a0:	d109      	bne.n	80160b6 <validate_structure+0xa6>
 80160a2:	4b3c      	ldr	r3, [pc, #240]	; (8016194 <validate_structure+0x184>)
 80160a4:	3191      	adds	r1, #145	; 0x91
 80160a6:	18e8      	adds	r0, r5, r3
 80160a8:	31ff      	adds	r1, #255	; 0xff
 80160aa:	f7ea f9cd 	bl	8000448 <__aeabi_idivmod>
 80160ae:	424b      	negs	r3, r1
 80160b0:	4159      	adcs	r1, r3
 80160b2:	000b      	movs	r3, r1
 80160b4:	331c      	adds	r3, #28
 80160b6:	68e2      	ldr	r2, [r4, #12]
 80160b8:	271d      	movs	r7, #29
 80160ba:	2a00      	cmp	r2, #0
 80160bc:	dd65      	ble.n	801618a <validate_structure+0x17a>
 80160be:	2603      	movs	r6, #3
 80160c0:	271c      	movs	r7, #28
 80160c2:	6922      	ldr	r2, [r4, #16]
 80160c4:	0018      	movs	r0, r3
 80160c6:	68e1      	ldr	r1, [r4, #12]
 80160c8:	2a01      	cmp	r2, #1
 80160ca:	d002      	beq.n	80160d2 <validate_structure+0xc2>
 80160cc:	4d32      	ldr	r5, [pc, #200]	; (8016198 <validate_structure+0x188>)
 80160ce:	0090      	lsls	r0, r2, #2
 80160d0:	5940      	ldr	r0, [r0, r5]
 80160d2:	4281      	cmp	r1, r0
 80160d4:	dd5c      	ble.n	8016190 <validate_structure+0x180>
 80160d6:	1a09      	subs	r1, r1, r0
 80160d8:	3201      	adds	r2, #1
 80160da:	60e1      	str	r1, [r4, #12]
 80160dc:	6122      	str	r2, [r4, #16]
 80160de:	2a0c      	cmp	r2, #12
 80160e0:	d1ef      	bne.n	80160c2 <validate_structure+0xb2>
 80160e2:	2300      	movs	r3, #0
 80160e4:	6965      	ldr	r5, [r4, #20]
 80160e6:	6123      	str	r3, [r4, #16]
 80160e8:	1c68      	adds	r0, r5, #1
 80160ea:	003b      	movs	r3, r7
 80160ec:	6160      	str	r0, [r4, #20]
 80160ee:	4230      	tst	r0, r6
 80160f0:	d1e7      	bne.n	80160c2 <validate_structure+0xb2>
 80160f2:	2164      	movs	r1, #100	; 0x64
 80160f4:	f7ea f9a8 	bl	8000448 <__aeabi_idivmod>
 80160f8:	231d      	movs	r3, #29
 80160fa:	2900      	cmp	r1, #0
 80160fc:	d1e1      	bne.n	80160c2 <validate_structure+0xb2>
 80160fe:	4b27      	ldr	r3, [pc, #156]	; (801619c <validate_structure+0x18c>)
 8016100:	3191      	adds	r1, #145	; 0x91
 8016102:	18e8      	adds	r0, r5, r3
 8016104:	31ff      	adds	r1, #255	; 0xff
 8016106:	f7ea f99f 	bl	8000448 <__aeabi_idivmod>
 801610a:	424b      	negs	r3, r1
 801610c:	4159      	adcs	r1, r3
 801610e:	000b      	movs	r3, r1
 8016110:	331c      	adds	r3, #28
 8016112:	e7d6      	b.n	80160c2 <validate_structure+0xb2>
 8016114:	323c      	adds	r2, #60	; 0x3c
 8016116:	3b01      	subs	r3, #1
 8016118:	6022      	str	r2, [r4, #0]
 801611a:	6063      	str	r3, [r4, #4]
 801611c:	e789      	b.n	8016032 <validate_structure+0x22>
 801611e:	323c      	adds	r2, #60	; 0x3c
 8016120:	3b01      	subs	r3, #1
 8016122:	6062      	str	r2, [r4, #4]
 8016124:	60a3      	str	r3, [r4, #8]
 8016126:	e793      	b.n	8016050 <validate_structure+0x40>
 8016128:	3218      	adds	r2, #24
 801612a:	3b01      	subs	r3, #1
 801612c:	60a2      	str	r2, [r4, #8]
 801612e:	60e3      	str	r3, [r4, #12]
 8016130:	e79d      	b.n	801606e <validate_structure+0x5e>
 8016132:	320c      	adds	r2, #12
 8016134:	3b01      	subs	r3, #1
 8016136:	6122      	str	r2, [r4, #16]
 8016138:	6163      	str	r3, [r4, #20]
 801613a:	e7a7      	b.n	801608c <validate_structure+0x7c>
 801613c:	6922      	ldr	r2, [r4, #16]
 801613e:	3a01      	subs	r2, #1
 8016140:	6122      	str	r2, [r4, #16]
 8016142:	3201      	adds	r2, #1
 8016144:	d118      	bne.n	8016178 <validate_structure+0x168>
 8016146:	230b      	movs	r3, #11
 8016148:	2203      	movs	r2, #3
 801614a:	6965      	ldr	r5, [r4, #20]
 801614c:	6123      	str	r3, [r4, #16]
 801614e:	1e68      	subs	r0, r5, #1
 8016150:	6160      	str	r0, [r4, #20]
 8016152:	3311      	adds	r3, #17
 8016154:	4210      	tst	r0, r2
 8016156:	d10f      	bne.n	8016178 <validate_structure+0x168>
 8016158:	2164      	movs	r1, #100	; 0x64
 801615a:	f7ea f975 	bl	8000448 <__aeabi_idivmod>
 801615e:	003b      	movs	r3, r7
 8016160:	2900      	cmp	r1, #0
 8016162:	d109      	bne.n	8016178 <validate_structure+0x168>
 8016164:	4b0e      	ldr	r3, [pc, #56]	; (80161a0 <validate_structure+0x190>)
 8016166:	3191      	adds	r1, #145	; 0x91
 8016168:	18e8      	adds	r0, r5, r3
 801616a:	31ff      	adds	r1, #255	; 0xff
 801616c:	f7ea f96c 	bl	8000448 <__aeabi_idivmod>
 8016170:	424b      	negs	r3, r1
 8016172:	4159      	adcs	r1, r3
 8016174:	000b      	movs	r3, r1
 8016176:	331c      	adds	r3, #28
 8016178:	6921      	ldr	r1, [r4, #16]
 801617a:	001a      	movs	r2, r3
 801617c:	2901      	cmp	r1, #1
 801617e:	d002      	beq.n	8016186 <validate_structure+0x176>
 8016180:	4a05      	ldr	r2, [pc, #20]	; (8016198 <validate_structure+0x188>)
 8016182:	0089      	lsls	r1, r1, #2
 8016184:	588a      	ldr	r2, [r1, r2]
 8016186:	18b2      	adds	r2, r6, r2
 8016188:	60e2      	str	r2, [r4, #12]
 801618a:	68e6      	ldr	r6, [r4, #12]
 801618c:	2e00      	cmp	r6, #0
 801618e:	ddd5      	ble.n	801613c <validate_structure+0x12c>
 8016190:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016192:	46c0      	nop			; (mov r8, r8)
 8016194:	0000076c 	.word	0x0000076c
 8016198:	0801ad78 	.word	0x0801ad78
 801619c:	0000076d 	.word	0x0000076d
 80161a0:	0000076b 	.word	0x0000076b

080161a4 <mktime>:
 80161a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161a6:	b08f      	sub	sp, #60	; 0x3c
 80161a8:	0004      	movs	r4, r0
 80161aa:	f001 fba3 	bl	80178f4 <__gettzinfo>
 80161ae:	0007      	movs	r7, r0
 80161b0:	0020      	movs	r0, r4
 80161b2:	f7ff ff2d 	bl	8016010 <validate_structure>
 80161b6:	233c      	movs	r3, #60	; 0x3c
 80161b8:	6862      	ldr	r2, [r4, #4]
 80161ba:	68a1      	ldr	r1, [r4, #8]
 80161bc:	4353      	muls	r3, r2
 80161be:	6822      	ldr	r2, [r4, #0]
 80161c0:	6966      	ldr	r6, [r4, #20]
 80161c2:	189b      	adds	r3, r3, r2
 80161c4:	22e1      	movs	r2, #225	; 0xe1
 80161c6:	0112      	lsls	r2, r2, #4
 80161c8:	434a      	muls	r2, r1
 80161ca:	189b      	adds	r3, r3, r2
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	68e2      	ldr	r2, [r4, #12]
 80161d0:	17db      	asrs	r3, r3, #31
 80161d2:	9301      	str	r3, [sp, #4]
 80161d4:	6923      	ldr	r3, [r4, #16]
 80161d6:	1e50      	subs	r0, r2, #1
 80161d8:	4aaf      	ldr	r2, [pc, #700]	; (8016498 <mktime+0x2f4>)
 80161da:	0099      	lsls	r1, r3, #2
 80161dc:	588a      	ldr	r2, [r1, r2]
 80161de:	1882      	adds	r2, r0, r2
 80161e0:	9206      	str	r2, [sp, #24]
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	dd12      	ble.n	801620c <mktime+0x68>
 80161e6:	07b3      	lsls	r3, r6, #30
 80161e8:	d110      	bne.n	801620c <mktime+0x68>
 80161ea:	2164      	movs	r1, #100	; 0x64
 80161ec:	0030      	movs	r0, r6
 80161ee:	f7ea f92b 	bl	8000448 <__aeabi_idivmod>
 80161f2:	2900      	cmp	r1, #0
 80161f4:	d107      	bne.n	8016206 <mktime+0x62>
 80161f6:	4ba9      	ldr	r3, [pc, #676]	; (801649c <mktime+0x2f8>)
 80161f8:	3191      	adds	r1, #145	; 0x91
 80161fa:	31ff      	adds	r1, #255	; 0xff
 80161fc:	18f0      	adds	r0, r6, r3
 80161fe:	f7ea f923 	bl	8000448 <__aeabi_idivmod>
 8016202:	2900      	cmp	r1, #0
 8016204:	d102      	bne.n	801620c <mktime+0x68>
 8016206:	9b06      	ldr	r3, [sp, #24]
 8016208:	3301      	adds	r3, #1
 801620a:	9306      	str	r3, [sp, #24]
 801620c:	9b06      	ldr	r3, [sp, #24]
 801620e:	4aa4      	ldr	r2, [pc, #656]	; (80164a0 <mktime+0x2fc>)
 8016210:	61e3      	str	r3, [r4, #28]
 8016212:	4ba4      	ldr	r3, [pc, #656]	; (80164a4 <mktime+0x300>)
 8016214:	18f3      	adds	r3, r6, r3
 8016216:	4293      	cmp	r3, r2
 8016218:	d900      	bls.n	801621c <mktime+0x78>
 801621a:	e18b      	b.n	8016534 <mktime+0x390>
 801621c:	2e46      	cmp	r6, #70	; 0x46
 801621e:	dc00      	bgt.n	8016222 <mktime+0x7e>
 8016220:	e09c      	b.n	801635c <mktime+0x1b8>
 8016222:	2203      	movs	r2, #3
 8016224:	2346      	movs	r3, #70	; 0x46
 8016226:	4694      	mov	ip, r2
 8016228:	4661      	mov	r1, ip
 801622a:	4662      	mov	r2, ip
 801622c:	4019      	ands	r1, r3
 801622e:	4213      	tst	r3, r2
 8016230:	d000      	beq.n	8016234 <mktime+0x90>
 8016232:	e090      	b.n	8016356 <mktime+0x1b2>
 8016234:	2002      	movs	r0, #2
 8016236:	4d9c      	ldr	r5, [pc, #624]	; (80164a8 <mktime+0x304>)
 8016238:	4a9c      	ldr	r2, [pc, #624]	; (80164ac <mktime+0x308>)
 801623a:	435d      	muls	r5, r3
 801623c:	41c5      	rors	r5, r0
 801623e:	306d      	adds	r0, #109	; 0x6d
 8016240:	30ff      	adds	r0, #255	; 0xff
 8016242:	4295      	cmp	r5, r2
 8016244:	d80b      	bhi.n	801625e <mktime+0xba>
 8016246:	4a95      	ldr	r2, [pc, #596]	; (801649c <mktime+0x2f8>)
 8016248:	1898      	adds	r0, r3, r2
 801624a:	4a97      	ldr	r2, [pc, #604]	; (80164a8 <mktime+0x304>)
 801624c:	4342      	muls	r2, r0
 801624e:	2004      	movs	r0, #4
 8016250:	41c2      	rors	r2, r0
 8016252:	4897      	ldr	r0, [pc, #604]	; (80164b0 <mktime+0x30c>)
 8016254:	4290      	cmp	r0, r2
 8016256:	4149      	adcs	r1, r1
 8016258:	316e      	adds	r1, #110	; 0x6e
 801625a:	31ff      	adds	r1, #255	; 0xff
 801625c:	0008      	movs	r0, r1
 801625e:	9a06      	ldr	r2, [sp, #24]
 8016260:	3301      	adds	r3, #1
 8016262:	1812      	adds	r2, r2, r0
 8016264:	9206      	str	r2, [sp, #24]
 8016266:	429e      	cmp	r6, r3
 8016268:	d1de      	bne.n	8016228 <mktime+0x84>
 801626a:	9b06      	ldr	r3, [sp, #24]
 801626c:	4a91      	ldr	r2, [pc, #580]	; (80164b4 <mktime+0x310>)
 801626e:	9806      	ldr	r0, [sp, #24]
 8016270:	17d9      	asrs	r1, r3, #31
 8016272:	2300      	movs	r3, #0
 8016274:	f7ea f958 	bl	8000528 <__aeabi_lmul>
 8016278:	9a00      	ldr	r2, [sp, #0]
 801627a:	9b01      	ldr	r3, [sp, #4]
 801627c:	1812      	adds	r2, r2, r0
 801627e:	414b      	adcs	r3, r1
 8016280:	9200      	str	r2, [sp, #0]
 8016282:	9301      	str	r3, [sp, #4]
 8016284:	f000 fea0 	bl	8016fc8 <__tz_lock>
 8016288:	f000 feae 	bl	8016fe8 <_tzset_unlocked>
 801628c:	4b8a      	ldr	r3, [pc, #552]	; (80164b8 <mktime+0x314>)
 801628e:	681d      	ldr	r5, [r3, #0]
 8016290:	2d00      	cmp	r5, #0
 8016292:	d058      	beq.n	8016346 <mktime+0x1a2>
 8016294:	6963      	ldr	r3, [r4, #20]
 8016296:	4a81      	ldr	r2, [pc, #516]	; (801649c <mktime+0x2f8>)
 8016298:	1898      	adds	r0, r3, r2
 801629a:	6a23      	ldr	r3, [r4, #32]
 801629c:	9307      	str	r3, [sp, #28]
 801629e:	930b      	str	r3, [sp, #44]	; 0x2c
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	dd01      	ble.n	80162a8 <mktime+0x104>
 80162a4:	2301      	movs	r3, #1
 80162a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	4283      	cmp	r3, r0
 80162ac:	d000      	beq.n	80162b0 <mktime+0x10c>
 80162ae:	e093      	b.n	80163d8 <mktime+0x234>
 80162b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b2:	930a      	str	r3, [sp, #40]	; 0x28
 80162b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162b6:	9308      	str	r3, [sp, #32]
 80162b8:	17db      	asrs	r3, r3, #31
 80162ba:	9309      	str	r3, [sp, #36]	; 0x24
 80162bc:	9808      	ldr	r0, [sp, #32]
 80162be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162c0:	6a3a      	ldr	r2, [r7, #32]
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	1a12      	subs	r2, r2, r0
 80162c6:	418b      	sbcs	r3, r1
 80162c8:	9204      	str	r2, [sp, #16]
 80162ca:	9305      	str	r3, [sp, #20]
 80162cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80162ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162d0:	920c      	str	r2, [sp, #48]	; 0x30
 80162d2:	930d      	str	r3, [sp, #52]	; 0x34
 80162d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80162d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80162d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162da:	001a      	movs	r2, r3
 80162dc:	469c      	mov	ip, r3
 80162de:	17db      	asrs	r3, r3, #31
 80162e0:	1a80      	subs	r0, r0, r2
 80162e2:	4199      	sbcs	r1, r3
 80162e4:	9002      	str	r0, [sp, #8]
 80162e6:	9103      	str	r1, [sp, #12]
 80162e8:	9b03      	ldr	r3, [sp, #12]
 80162ea:	9901      	ldr	r1, [sp, #4]
 80162ec:	428b      	cmp	r3, r1
 80162ee:	dc11      	bgt.n	8016314 <mktime+0x170>
 80162f0:	d103      	bne.n	80162fa <mktime+0x156>
 80162f2:	9900      	ldr	r1, [sp, #0]
 80162f4:	9b02      	ldr	r3, [sp, #8]
 80162f6:	428b      	cmp	r3, r1
 80162f8:	d80c      	bhi.n	8016314 <mktime+0x170>
 80162fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80162fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80162fe:	9a08      	ldr	r2, [sp, #32]
 8016300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016302:	1a80      	subs	r0, r0, r2
 8016304:	4199      	sbcs	r1, r3
 8016306:	9d01      	ldr	r5, [sp, #4]
 8016308:	42a9      	cmp	r1, r5
 801630a:	dc6a      	bgt.n	80163e2 <mktime+0x23e>
 801630c:	d102      	bne.n	8016314 <mktime+0x170>
 801630e:	9d00      	ldr	r5, [sp, #0]
 8016310:	42a8      	cmp	r0, r5
 8016312:	d866      	bhi.n	80163e2 <mktime+0x23e>
 8016314:	6839      	ldr	r1, [r7, #0]
 8016316:	2900      	cmp	r1, #0
 8016318:	d065      	beq.n	80163e6 <mktime+0x242>
 801631a:	9905      	ldr	r1, [sp, #20]
 801631c:	9801      	ldr	r0, [sp, #4]
 801631e:	4281      	cmp	r1, r0
 8016320:	dc0d      	bgt.n	801633e <mktime+0x19a>
 8016322:	d103      	bne.n	801632c <mktime+0x188>
 8016324:	9904      	ldr	r1, [sp, #16]
 8016326:	9800      	ldr	r0, [sp, #0]
 8016328:	4281      	cmp	r1, r0
 801632a:	d808      	bhi.n	801633e <mktime+0x19a>
 801632c:	9901      	ldr	r1, [sp, #4]
 801632e:	9b03      	ldr	r3, [sp, #12]
 8016330:	428b      	cmp	r3, r1
 8016332:	dc61      	bgt.n	80163f8 <mktime+0x254>
 8016334:	d103      	bne.n	801633e <mktime+0x19a>
 8016336:	9900      	ldr	r1, [sp, #0]
 8016338:	9b02      	ldr	r3, [sp, #8]
 801633a:	428b      	cmp	r3, r1
 801633c:	d85c      	bhi.n	80163f8 <mktime+0x254>
 801633e:	2500      	movs	r5, #0
 8016340:	9b07      	ldr	r3, [sp, #28]
 8016342:	42ab      	cmp	r3, r5
 8016344:	da5c      	bge.n	8016400 <mktime+0x25c>
 8016346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016348:	001e      	movs	r6, r3
 801634a:	17df      	asrs	r7, r3, #31
 801634c:	9a00      	ldr	r2, [sp, #0]
 801634e:	9b01      	ldr	r3, [sp, #4]
 8016350:	18b6      	adds	r6, r6, r2
 8016352:	415f      	adcs	r7, r3
 8016354:	e0d5      	b.n	8016502 <mktime+0x35e>
 8016356:	206e      	movs	r0, #110	; 0x6e
 8016358:	30ff      	adds	r0, #255	; 0xff
 801635a:	e780      	b.n	801625e <mktime+0xba>
 801635c:	2545      	movs	r5, #69	; 0x45
 801635e:	2e46      	cmp	r6, #70	; 0x46
 8016360:	d100      	bne.n	8016364 <mktime+0x1c0>
 8016362:	e782      	b.n	801626a <mktime+0xc6>
 8016364:	2303      	movs	r3, #3
 8016366:	402b      	ands	r3, r5
 8016368:	42ae      	cmp	r6, r5
 801636a:	db15      	blt.n	8016398 <mktime+0x1f4>
 801636c:	2b00      	cmp	r3, #0
 801636e:	d12e      	bne.n	80163ce <mktime+0x22a>
 8016370:	2164      	movs	r1, #100	; 0x64
 8016372:	0030      	movs	r0, r6
 8016374:	f7ea f868 	bl	8000448 <__aeabi_idivmod>
 8016378:	2900      	cmp	r1, #0
 801637a:	d12a      	bne.n	80163d2 <mktime+0x22e>
 801637c:	4b47      	ldr	r3, [pc, #284]	; (801649c <mktime+0x2f8>)
 801637e:	3191      	adds	r1, #145	; 0x91
 8016380:	18f0      	adds	r0, r6, r3
 8016382:	31ff      	adds	r1, #255	; 0xff
 8016384:	f7ea f860 	bl	8000448 <__aeabi_idivmod>
 8016388:	424b      	negs	r3, r1
 801638a:	4159      	adcs	r1, r3
 801638c:	316e      	adds	r1, #110	; 0x6e
 801638e:	31ff      	adds	r1, #255	; 0xff
 8016390:	9b06      	ldr	r3, [sp, #24]
 8016392:	1a5b      	subs	r3, r3, r1
 8016394:	9306      	str	r3, [sp, #24]
 8016396:	e768      	b.n	801626a <mktime+0xc6>
 8016398:	2b00      	cmp	r3, #0
 801639a:	d116      	bne.n	80163ca <mktime+0x226>
 801639c:	2164      	movs	r1, #100	; 0x64
 801639e:	0028      	movs	r0, r5
 80163a0:	f7ea f852 	bl	8000448 <__aeabi_idivmod>
 80163a4:	23b7      	movs	r3, #183	; 0xb7
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	2900      	cmp	r1, #0
 80163aa:	d109      	bne.n	80163c0 <mktime+0x21c>
 80163ac:	4b3b      	ldr	r3, [pc, #236]	; (801649c <mktime+0x2f8>)
 80163ae:	3191      	adds	r1, #145	; 0x91
 80163b0:	18e8      	adds	r0, r5, r3
 80163b2:	31ff      	adds	r1, #255	; 0xff
 80163b4:	f7ea f848 	bl	8000448 <__aeabi_idivmod>
 80163b8:	424b      	negs	r3, r1
 80163ba:	414b      	adcs	r3, r1
 80163bc:	336e      	adds	r3, #110	; 0x6e
 80163be:	33ff      	adds	r3, #255	; 0xff
 80163c0:	9a06      	ldr	r2, [sp, #24]
 80163c2:	3d01      	subs	r5, #1
 80163c4:	1ad3      	subs	r3, r2, r3
 80163c6:	9306      	str	r3, [sp, #24]
 80163c8:	e7cc      	b.n	8016364 <mktime+0x1c0>
 80163ca:	236e      	movs	r3, #110	; 0x6e
 80163cc:	e7f7      	b.n	80163be <mktime+0x21a>
 80163ce:	216e      	movs	r1, #110	; 0x6e
 80163d0:	e7dd      	b.n	801638e <mktime+0x1ea>
 80163d2:	21b7      	movs	r1, #183	; 0xb7
 80163d4:	0049      	lsls	r1, r1, #1
 80163d6:	e7db      	b.n	8016390 <mktime+0x1ec>
 80163d8:	f000 fd3c 	bl	8016e54 <__tzcalc_limits>
 80163dc:	2800      	cmp	r0, #0
 80163de:	d000      	beq.n	80163e2 <mktime+0x23e>
 80163e0:	e766      	b.n	80162b0 <mktime+0x10c>
 80163e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80163e4:	e082      	b.n	80164ec <mktime+0x348>
 80163e6:	9905      	ldr	r1, [sp, #20]
 80163e8:	9801      	ldr	r0, [sp, #4]
 80163ea:	4281      	cmp	r1, r0
 80163ec:	dc9e      	bgt.n	801632c <mktime+0x188>
 80163ee:	d103      	bne.n	80163f8 <mktime+0x254>
 80163f0:	9904      	ldr	r1, [sp, #16]
 80163f2:	9800      	ldr	r0, [sp, #0]
 80163f4:	4281      	cmp	r1, r0
 80163f6:	d899      	bhi.n	801632c <mktime+0x188>
 80163f8:	9b07      	ldr	r3, [sp, #28]
 80163fa:	2501      	movs	r5, #1
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	db78      	blt.n	80164f2 <mktime+0x34e>
 8016400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016402:	406b      	eors	r3, r5
 8016404:	9302      	str	r3, [sp, #8]
 8016406:	2b01      	cmp	r3, #1
 8016408:	d170      	bne.n	80164ec <mktime+0x348>
 801640a:	4662      	mov	r2, ip
 801640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801640e:	1a9b      	subs	r3, r3, r2
 8016410:	2d00      	cmp	r5, #0
 8016412:	d002      	beq.n	801641a <mktime+0x276>
 8016414:	4663      	mov	r3, ip
 8016416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	0018      	movs	r0, r3
 801641c:	6822      	ldr	r2, [r4, #0]
 801641e:	17d9      	asrs	r1, r3, #31
 8016420:	18d2      	adds	r2, r2, r3
 8016422:	6022      	str	r2, [r4, #0]
 8016424:	9a00      	ldr	r2, [sp, #0]
 8016426:	9b01      	ldr	r3, [sp, #4]
 8016428:	1812      	adds	r2, r2, r0
 801642a:	414b      	adcs	r3, r1
 801642c:	9200      	str	r2, [sp, #0]
 801642e:	9301      	str	r3, [sp, #4]
 8016430:	68e3      	ldr	r3, [r4, #12]
 8016432:	0020      	movs	r0, r4
 8016434:	9304      	str	r3, [sp, #16]
 8016436:	f7ff fdeb 	bl	8016010 <validate_structure>
 801643a:	68e2      	ldr	r2, [r4, #12]
 801643c:	9b04      	ldr	r3, [sp, #16]
 801643e:	9904      	ldr	r1, [sp, #16]
 8016440:	1ad3      	subs	r3, r2, r3
 8016442:	428a      	cmp	r2, r1
 8016444:	d052      	beq.n	80164ec <mktime+0x348>
 8016446:	2b01      	cmp	r3, #1
 8016448:	dc1d      	bgt.n	8016486 <mktime+0x2e2>
 801644a:	1c5a      	adds	r2, r3, #1
 801644c:	da00      	bge.n	8016450 <mktime+0x2ac>
 801644e:	9b02      	ldr	r3, [sp, #8]
 8016450:	9a06      	ldr	r2, [sp, #24]
 8016452:	69e1      	ldr	r1, [r4, #28]
 8016454:	18d2      	adds	r2, r2, r3
 8016456:	9206      	str	r2, [sp, #24]
 8016458:	2203      	movs	r2, #3
 801645a:	18c9      	adds	r1, r1, r3
 801645c:	9102      	str	r1, [sp, #8]
 801645e:	d52f      	bpl.n	80164c0 <mktime+0x31c>
 8016460:	1e70      	subs	r0, r6, #1
 8016462:	4210      	tst	r0, r2
 8016464:	d112      	bne.n	801648c <mktime+0x2e8>
 8016466:	2164      	movs	r1, #100	; 0x64
 8016468:	f7e9 ffee 	bl	8000448 <__aeabi_idivmod>
 801646c:	2900      	cmp	r1, #0
 801646e:	d111      	bne.n	8016494 <mktime+0x2f0>
 8016470:	4b12      	ldr	r3, [pc, #72]	; (80164bc <mktime+0x318>)
 8016472:	3191      	adds	r1, #145	; 0x91
 8016474:	18f0      	adds	r0, r6, r3
 8016476:	31ff      	adds	r1, #255	; 0xff
 8016478:	f7e9 ffe6 	bl	8000448 <__aeabi_idivmod>
 801647c:	424b      	negs	r3, r1
 801647e:	4159      	adcs	r1, r3
 8016480:	316d      	adds	r1, #109	; 0x6d
 8016482:	31ff      	adds	r1, #255	; 0xff
 8016484:	e004      	b.n	8016490 <mktime+0x2ec>
 8016486:	2301      	movs	r3, #1
 8016488:	425b      	negs	r3, r3
 801648a:	e7e1      	b.n	8016450 <mktime+0x2ac>
 801648c:	21b6      	movs	r1, #182	; 0xb6
 801648e:	0049      	lsls	r1, r1, #1
 8016490:	61e1      	str	r1, [r4, #28]
 8016492:	e02b      	b.n	80164ec <mktime+0x348>
 8016494:	216e      	movs	r1, #110	; 0x6e
 8016496:	e7f4      	b.n	8016482 <mktime+0x2de>
 8016498:	0801ada8 	.word	0x0801ada8
 801649c:	0000076c 	.word	0x0000076c
 80164a0:	00004e20 	.word	0x00004e20
 80164a4:	00002710 	.word	0x00002710
 80164a8:	c28f5c29 	.word	0xc28f5c29
 80164ac:	028f5c28 	.word	0x028f5c28
 80164b0:	00a3d70a 	.word	0x00a3d70a
 80164b4:	00015180 	.word	0x00015180
 80164b8:	20001dd8 	.word	0x20001dd8
 80164bc:	0000076b 	.word	0x0000076b
 80164c0:	4216      	tst	r6, r2
 80164c2:	d12d      	bne.n	8016520 <mktime+0x37c>
 80164c4:	2164      	movs	r1, #100	; 0x64
 80164c6:	0030      	movs	r0, r6
 80164c8:	f7e9 ffbe 	bl	8000448 <__aeabi_idivmod>
 80164cc:	2900      	cmp	r1, #0
 80164ce:	d129      	bne.n	8016524 <mktime+0x380>
 80164d0:	4b1a      	ldr	r3, [pc, #104]	; (801653c <mktime+0x398>)
 80164d2:	3191      	adds	r1, #145	; 0x91
 80164d4:	18f0      	adds	r0, r6, r3
 80164d6:	31ff      	adds	r1, #255	; 0xff
 80164d8:	f7e9 ffb6 	bl	8000448 <__aeabi_idivmod>
 80164dc:	424b      	negs	r3, r1
 80164de:	4159      	adcs	r1, r3
 80164e0:	316e      	adds	r1, #110	; 0x6e
 80164e2:	31ff      	adds	r1, #255	; 0xff
 80164e4:	9b02      	ldr	r3, [sp, #8]
 80164e6:	428b      	cmp	r3, r1
 80164e8:	da1f      	bge.n	801652a <mktime+0x386>
 80164ea:	61e3      	str	r3, [r4, #28]
 80164ec:	2d01      	cmp	r5, #1
 80164ee:	d000      	beq.n	80164f2 <mktime+0x34e>
 80164f0:	e729      	b.n	8016346 <mktime+0x1a2>
 80164f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164f4:	2501      	movs	r5, #1
 80164f6:	001e      	movs	r6, r3
 80164f8:	17df      	asrs	r7, r3, #31
 80164fa:	9a00      	ldr	r2, [sp, #0]
 80164fc:	9b01      	ldr	r3, [sp, #4]
 80164fe:	18b6      	adds	r6, r6, r2
 8016500:	415f      	adcs	r7, r3
 8016502:	f000 fd69 	bl	8016fd8 <__tz_unlock>
 8016506:	9806      	ldr	r0, [sp, #24]
 8016508:	2107      	movs	r1, #7
 801650a:	6225      	str	r5, [r4, #32]
 801650c:	3004      	adds	r0, #4
 801650e:	f7e9 ff9b 	bl	8000448 <__aeabi_idivmod>
 8016512:	2900      	cmp	r1, #0
 8016514:	db0c      	blt.n	8016530 <mktime+0x38c>
 8016516:	61a1      	str	r1, [r4, #24]
 8016518:	0030      	movs	r0, r6
 801651a:	0039      	movs	r1, r7
 801651c:	b00f      	add	sp, #60	; 0x3c
 801651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016520:	216e      	movs	r1, #110	; 0x6e
 8016522:	e7de      	b.n	80164e2 <mktime+0x33e>
 8016524:	21b7      	movs	r1, #183	; 0xb7
 8016526:	0049      	lsls	r1, r1, #1
 8016528:	e7dc      	b.n	80164e4 <mktime+0x340>
 801652a:	9b02      	ldr	r3, [sp, #8]
 801652c:	1a59      	subs	r1, r3, r1
 801652e:	e7af      	b.n	8016490 <mktime+0x2ec>
 8016530:	3107      	adds	r1, #7
 8016532:	e7f0      	b.n	8016516 <mktime+0x372>
 8016534:	2601      	movs	r6, #1
 8016536:	4276      	negs	r6, r6
 8016538:	17f7      	asrs	r7, r6, #31
 801653a:	e7ed      	b.n	8016518 <mktime+0x374>
 801653c:	0000076c 	.word	0x0000076c

08016540 <_free_r>:
 8016540:	b570      	push	{r4, r5, r6, lr}
 8016542:	0005      	movs	r5, r0
 8016544:	2900      	cmp	r1, #0
 8016546:	d010      	beq.n	801656a <_free_r+0x2a>
 8016548:	1f0c      	subs	r4, r1, #4
 801654a:	6823      	ldr	r3, [r4, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	da00      	bge.n	8016552 <_free_r+0x12>
 8016550:	18e4      	adds	r4, r4, r3
 8016552:	0028      	movs	r0, r5
 8016554:	f001 fa50 	bl	80179f8 <__malloc_lock>
 8016558:	4a1d      	ldr	r2, [pc, #116]	; (80165d0 <_free_r+0x90>)
 801655a:	6813      	ldr	r3, [r2, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d105      	bne.n	801656c <_free_r+0x2c>
 8016560:	6063      	str	r3, [r4, #4]
 8016562:	6014      	str	r4, [r2, #0]
 8016564:	0028      	movs	r0, r5
 8016566:	f001 fa4f 	bl	8017a08 <__malloc_unlock>
 801656a:	bd70      	pop	{r4, r5, r6, pc}
 801656c:	42a3      	cmp	r3, r4
 801656e:	d908      	bls.n	8016582 <_free_r+0x42>
 8016570:	6821      	ldr	r1, [r4, #0]
 8016572:	1860      	adds	r0, r4, r1
 8016574:	4283      	cmp	r3, r0
 8016576:	d1f3      	bne.n	8016560 <_free_r+0x20>
 8016578:	6818      	ldr	r0, [r3, #0]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	1841      	adds	r1, r0, r1
 801657e:	6021      	str	r1, [r4, #0]
 8016580:	e7ee      	b.n	8016560 <_free_r+0x20>
 8016582:	001a      	movs	r2, r3
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d001      	beq.n	801658e <_free_r+0x4e>
 801658a:	42a3      	cmp	r3, r4
 801658c:	d9f9      	bls.n	8016582 <_free_r+0x42>
 801658e:	6811      	ldr	r1, [r2, #0]
 8016590:	1850      	adds	r0, r2, r1
 8016592:	42a0      	cmp	r0, r4
 8016594:	d10b      	bne.n	80165ae <_free_r+0x6e>
 8016596:	6820      	ldr	r0, [r4, #0]
 8016598:	1809      	adds	r1, r1, r0
 801659a:	1850      	adds	r0, r2, r1
 801659c:	6011      	str	r1, [r2, #0]
 801659e:	4283      	cmp	r3, r0
 80165a0:	d1e0      	bne.n	8016564 <_free_r+0x24>
 80165a2:	6818      	ldr	r0, [r3, #0]
 80165a4:	685b      	ldr	r3, [r3, #4]
 80165a6:	1841      	adds	r1, r0, r1
 80165a8:	6011      	str	r1, [r2, #0]
 80165aa:	6053      	str	r3, [r2, #4]
 80165ac:	e7da      	b.n	8016564 <_free_r+0x24>
 80165ae:	42a0      	cmp	r0, r4
 80165b0:	d902      	bls.n	80165b8 <_free_r+0x78>
 80165b2:	230c      	movs	r3, #12
 80165b4:	602b      	str	r3, [r5, #0]
 80165b6:	e7d5      	b.n	8016564 <_free_r+0x24>
 80165b8:	6821      	ldr	r1, [r4, #0]
 80165ba:	1860      	adds	r0, r4, r1
 80165bc:	4283      	cmp	r3, r0
 80165be:	d103      	bne.n	80165c8 <_free_r+0x88>
 80165c0:	6818      	ldr	r0, [r3, #0]
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	1841      	adds	r1, r0, r1
 80165c6:	6021      	str	r1, [r4, #0]
 80165c8:	6063      	str	r3, [r4, #4]
 80165ca:	6054      	str	r4, [r2, #4]
 80165cc:	e7ca      	b.n	8016564 <_free_r+0x24>
 80165ce:	46c0      	nop			; (mov r8, r8)
 80165d0:	20001db4 	.word	0x20001db4

080165d4 <sbrk_aligned>:
 80165d4:	b570      	push	{r4, r5, r6, lr}
 80165d6:	4e0f      	ldr	r6, [pc, #60]	; (8016614 <sbrk_aligned+0x40>)
 80165d8:	000d      	movs	r5, r1
 80165da:	6831      	ldr	r1, [r6, #0]
 80165dc:	0004      	movs	r4, r0
 80165de:	2900      	cmp	r1, #0
 80165e0:	d102      	bne.n	80165e8 <sbrk_aligned+0x14>
 80165e2:	f000 fc1d 	bl	8016e20 <_sbrk_r>
 80165e6:	6030      	str	r0, [r6, #0]
 80165e8:	0029      	movs	r1, r5
 80165ea:	0020      	movs	r0, r4
 80165ec:	f000 fc18 	bl	8016e20 <_sbrk_r>
 80165f0:	1c43      	adds	r3, r0, #1
 80165f2:	d00a      	beq.n	801660a <sbrk_aligned+0x36>
 80165f4:	2303      	movs	r3, #3
 80165f6:	1cc5      	adds	r5, r0, #3
 80165f8:	439d      	bics	r5, r3
 80165fa:	42a8      	cmp	r0, r5
 80165fc:	d007      	beq.n	801660e <sbrk_aligned+0x3a>
 80165fe:	1a29      	subs	r1, r5, r0
 8016600:	0020      	movs	r0, r4
 8016602:	f000 fc0d 	bl	8016e20 <_sbrk_r>
 8016606:	1c43      	adds	r3, r0, #1
 8016608:	d101      	bne.n	801660e <sbrk_aligned+0x3a>
 801660a:	2501      	movs	r5, #1
 801660c:	426d      	negs	r5, r5
 801660e:	0028      	movs	r0, r5
 8016610:	bd70      	pop	{r4, r5, r6, pc}
 8016612:	46c0      	nop			; (mov r8, r8)
 8016614:	20001db8 	.word	0x20001db8

08016618 <_malloc_r>:
 8016618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801661a:	2203      	movs	r2, #3
 801661c:	1ccb      	adds	r3, r1, #3
 801661e:	4393      	bics	r3, r2
 8016620:	3308      	adds	r3, #8
 8016622:	0006      	movs	r6, r0
 8016624:	001f      	movs	r7, r3
 8016626:	2b0c      	cmp	r3, #12
 8016628:	d232      	bcs.n	8016690 <_malloc_r+0x78>
 801662a:	270c      	movs	r7, #12
 801662c:	42b9      	cmp	r1, r7
 801662e:	d831      	bhi.n	8016694 <_malloc_r+0x7c>
 8016630:	0030      	movs	r0, r6
 8016632:	f001 f9e1 	bl	80179f8 <__malloc_lock>
 8016636:	4d32      	ldr	r5, [pc, #200]	; (8016700 <_malloc_r+0xe8>)
 8016638:	682b      	ldr	r3, [r5, #0]
 801663a:	001c      	movs	r4, r3
 801663c:	2c00      	cmp	r4, #0
 801663e:	d12e      	bne.n	801669e <_malloc_r+0x86>
 8016640:	0039      	movs	r1, r7
 8016642:	0030      	movs	r0, r6
 8016644:	f7ff ffc6 	bl	80165d4 <sbrk_aligned>
 8016648:	0004      	movs	r4, r0
 801664a:	1c43      	adds	r3, r0, #1
 801664c:	d11e      	bne.n	801668c <_malloc_r+0x74>
 801664e:	682c      	ldr	r4, [r5, #0]
 8016650:	0025      	movs	r5, r4
 8016652:	2d00      	cmp	r5, #0
 8016654:	d14a      	bne.n	80166ec <_malloc_r+0xd4>
 8016656:	6823      	ldr	r3, [r4, #0]
 8016658:	0029      	movs	r1, r5
 801665a:	18e3      	adds	r3, r4, r3
 801665c:	0030      	movs	r0, r6
 801665e:	9301      	str	r3, [sp, #4]
 8016660:	f000 fbde 	bl	8016e20 <_sbrk_r>
 8016664:	9b01      	ldr	r3, [sp, #4]
 8016666:	4283      	cmp	r3, r0
 8016668:	d143      	bne.n	80166f2 <_malloc_r+0xda>
 801666a:	6823      	ldr	r3, [r4, #0]
 801666c:	3703      	adds	r7, #3
 801666e:	1aff      	subs	r7, r7, r3
 8016670:	2303      	movs	r3, #3
 8016672:	439f      	bics	r7, r3
 8016674:	3708      	adds	r7, #8
 8016676:	2f0c      	cmp	r7, #12
 8016678:	d200      	bcs.n	801667c <_malloc_r+0x64>
 801667a:	270c      	movs	r7, #12
 801667c:	0039      	movs	r1, r7
 801667e:	0030      	movs	r0, r6
 8016680:	f7ff ffa8 	bl	80165d4 <sbrk_aligned>
 8016684:	1c43      	adds	r3, r0, #1
 8016686:	d034      	beq.n	80166f2 <_malloc_r+0xda>
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	19df      	adds	r7, r3, r7
 801668c:	6027      	str	r7, [r4, #0]
 801668e:	e013      	b.n	80166b8 <_malloc_r+0xa0>
 8016690:	2b00      	cmp	r3, #0
 8016692:	dacb      	bge.n	801662c <_malloc_r+0x14>
 8016694:	230c      	movs	r3, #12
 8016696:	2500      	movs	r5, #0
 8016698:	6033      	str	r3, [r6, #0]
 801669a:	0028      	movs	r0, r5
 801669c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801669e:	6822      	ldr	r2, [r4, #0]
 80166a0:	1bd1      	subs	r1, r2, r7
 80166a2:	d420      	bmi.n	80166e6 <_malloc_r+0xce>
 80166a4:	290b      	cmp	r1, #11
 80166a6:	d917      	bls.n	80166d8 <_malloc_r+0xc0>
 80166a8:	19e2      	adds	r2, r4, r7
 80166aa:	6027      	str	r7, [r4, #0]
 80166ac:	42a3      	cmp	r3, r4
 80166ae:	d111      	bne.n	80166d4 <_malloc_r+0xbc>
 80166b0:	602a      	str	r2, [r5, #0]
 80166b2:	6863      	ldr	r3, [r4, #4]
 80166b4:	6011      	str	r1, [r2, #0]
 80166b6:	6053      	str	r3, [r2, #4]
 80166b8:	0030      	movs	r0, r6
 80166ba:	0025      	movs	r5, r4
 80166bc:	f001 f9a4 	bl	8017a08 <__malloc_unlock>
 80166c0:	2207      	movs	r2, #7
 80166c2:	350b      	adds	r5, #11
 80166c4:	1d23      	adds	r3, r4, #4
 80166c6:	4395      	bics	r5, r2
 80166c8:	1aea      	subs	r2, r5, r3
 80166ca:	429d      	cmp	r5, r3
 80166cc:	d0e5      	beq.n	801669a <_malloc_r+0x82>
 80166ce:	1b5b      	subs	r3, r3, r5
 80166d0:	50a3      	str	r3, [r4, r2]
 80166d2:	e7e2      	b.n	801669a <_malloc_r+0x82>
 80166d4:	605a      	str	r2, [r3, #4]
 80166d6:	e7ec      	b.n	80166b2 <_malloc_r+0x9a>
 80166d8:	6862      	ldr	r2, [r4, #4]
 80166da:	42a3      	cmp	r3, r4
 80166dc:	d101      	bne.n	80166e2 <_malloc_r+0xca>
 80166de:	602a      	str	r2, [r5, #0]
 80166e0:	e7ea      	b.n	80166b8 <_malloc_r+0xa0>
 80166e2:	605a      	str	r2, [r3, #4]
 80166e4:	e7e8      	b.n	80166b8 <_malloc_r+0xa0>
 80166e6:	0023      	movs	r3, r4
 80166e8:	6864      	ldr	r4, [r4, #4]
 80166ea:	e7a7      	b.n	801663c <_malloc_r+0x24>
 80166ec:	002c      	movs	r4, r5
 80166ee:	686d      	ldr	r5, [r5, #4]
 80166f0:	e7af      	b.n	8016652 <_malloc_r+0x3a>
 80166f2:	230c      	movs	r3, #12
 80166f4:	0030      	movs	r0, r6
 80166f6:	6033      	str	r3, [r6, #0]
 80166f8:	f001 f986 	bl	8017a08 <__malloc_unlock>
 80166fc:	e7cd      	b.n	801669a <_malloc_r+0x82>
 80166fe:	46c0      	nop			; (mov r8, r8)
 8016700:	20001db4 	.word	0x20001db4

08016704 <__sfputc_r>:
 8016704:	6893      	ldr	r3, [r2, #8]
 8016706:	b510      	push	{r4, lr}
 8016708:	3b01      	subs	r3, #1
 801670a:	6093      	str	r3, [r2, #8]
 801670c:	2b00      	cmp	r3, #0
 801670e:	da04      	bge.n	801671a <__sfputc_r+0x16>
 8016710:	6994      	ldr	r4, [r2, #24]
 8016712:	42a3      	cmp	r3, r4
 8016714:	db07      	blt.n	8016726 <__sfputc_r+0x22>
 8016716:	290a      	cmp	r1, #10
 8016718:	d005      	beq.n	8016726 <__sfputc_r+0x22>
 801671a:	6813      	ldr	r3, [r2, #0]
 801671c:	1c58      	adds	r0, r3, #1
 801671e:	6010      	str	r0, [r2, #0]
 8016720:	7019      	strb	r1, [r3, #0]
 8016722:	0008      	movs	r0, r1
 8016724:	bd10      	pop	{r4, pc}
 8016726:	f000 fde9 	bl	80172fc <__swbuf_r>
 801672a:	0001      	movs	r1, r0
 801672c:	e7f9      	b.n	8016722 <__sfputc_r+0x1e>

0801672e <__sfputs_r>:
 801672e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016730:	0006      	movs	r6, r0
 8016732:	000f      	movs	r7, r1
 8016734:	0014      	movs	r4, r2
 8016736:	18d5      	adds	r5, r2, r3
 8016738:	42ac      	cmp	r4, r5
 801673a:	d101      	bne.n	8016740 <__sfputs_r+0x12>
 801673c:	2000      	movs	r0, #0
 801673e:	e007      	b.n	8016750 <__sfputs_r+0x22>
 8016740:	7821      	ldrb	r1, [r4, #0]
 8016742:	003a      	movs	r2, r7
 8016744:	0030      	movs	r0, r6
 8016746:	f7ff ffdd 	bl	8016704 <__sfputc_r>
 801674a:	3401      	adds	r4, #1
 801674c:	1c43      	adds	r3, r0, #1
 801674e:	d1f3      	bne.n	8016738 <__sfputs_r+0xa>
 8016750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016754 <_vfiprintf_r>:
 8016754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016756:	b0a1      	sub	sp, #132	; 0x84
 8016758:	0006      	movs	r6, r0
 801675a:	000c      	movs	r4, r1
 801675c:	001f      	movs	r7, r3
 801675e:	9203      	str	r2, [sp, #12]
 8016760:	2800      	cmp	r0, #0
 8016762:	d004      	beq.n	801676e <_vfiprintf_r+0x1a>
 8016764:	6983      	ldr	r3, [r0, #24]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d101      	bne.n	801676e <_vfiprintf_r+0x1a>
 801676a:	f000 ffe1 	bl	8017730 <__sinit>
 801676e:	4b8e      	ldr	r3, [pc, #568]	; (80169a8 <_vfiprintf_r+0x254>)
 8016770:	429c      	cmp	r4, r3
 8016772:	d11c      	bne.n	80167ae <_vfiprintf_r+0x5a>
 8016774:	6874      	ldr	r4, [r6, #4]
 8016776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016778:	07db      	lsls	r3, r3, #31
 801677a:	d405      	bmi.n	8016788 <_vfiprintf_r+0x34>
 801677c:	89a3      	ldrh	r3, [r4, #12]
 801677e:	059b      	lsls	r3, r3, #22
 8016780:	d402      	bmi.n	8016788 <_vfiprintf_r+0x34>
 8016782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016784:	f001 f8bc 	bl	8017900 <__retarget_lock_acquire_recursive>
 8016788:	89a3      	ldrh	r3, [r4, #12]
 801678a:	071b      	lsls	r3, r3, #28
 801678c:	d502      	bpl.n	8016794 <_vfiprintf_r+0x40>
 801678e:	6923      	ldr	r3, [r4, #16]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d11d      	bne.n	80167d0 <_vfiprintf_r+0x7c>
 8016794:	0021      	movs	r1, r4
 8016796:	0030      	movs	r0, r6
 8016798:	f000 fe06 	bl	80173a8 <__swsetup_r>
 801679c:	2800      	cmp	r0, #0
 801679e:	d017      	beq.n	80167d0 <_vfiprintf_r+0x7c>
 80167a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167a2:	07db      	lsls	r3, r3, #31
 80167a4:	d50d      	bpl.n	80167c2 <_vfiprintf_r+0x6e>
 80167a6:	2001      	movs	r0, #1
 80167a8:	4240      	negs	r0, r0
 80167aa:	b021      	add	sp, #132	; 0x84
 80167ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ae:	4b7f      	ldr	r3, [pc, #508]	; (80169ac <_vfiprintf_r+0x258>)
 80167b0:	429c      	cmp	r4, r3
 80167b2:	d101      	bne.n	80167b8 <_vfiprintf_r+0x64>
 80167b4:	68b4      	ldr	r4, [r6, #8]
 80167b6:	e7de      	b.n	8016776 <_vfiprintf_r+0x22>
 80167b8:	4b7d      	ldr	r3, [pc, #500]	; (80169b0 <_vfiprintf_r+0x25c>)
 80167ba:	429c      	cmp	r4, r3
 80167bc:	d1db      	bne.n	8016776 <_vfiprintf_r+0x22>
 80167be:	68f4      	ldr	r4, [r6, #12]
 80167c0:	e7d9      	b.n	8016776 <_vfiprintf_r+0x22>
 80167c2:	89a3      	ldrh	r3, [r4, #12]
 80167c4:	059b      	lsls	r3, r3, #22
 80167c6:	d4ee      	bmi.n	80167a6 <_vfiprintf_r+0x52>
 80167c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167ca:	f001 f89b 	bl	8017904 <__retarget_lock_release_recursive>
 80167ce:	e7ea      	b.n	80167a6 <_vfiprintf_r+0x52>
 80167d0:	2300      	movs	r3, #0
 80167d2:	ad08      	add	r5, sp, #32
 80167d4:	616b      	str	r3, [r5, #20]
 80167d6:	3320      	adds	r3, #32
 80167d8:	766b      	strb	r3, [r5, #25]
 80167da:	3310      	adds	r3, #16
 80167dc:	76ab      	strb	r3, [r5, #26]
 80167de:	9707      	str	r7, [sp, #28]
 80167e0:	9f03      	ldr	r7, [sp, #12]
 80167e2:	783b      	ldrb	r3, [r7, #0]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d001      	beq.n	80167ec <_vfiprintf_r+0x98>
 80167e8:	2b25      	cmp	r3, #37	; 0x25
 80167ea:	d14e      	bne.n	801688a <_vfiprintf_r+0x136>
 80167ec:	9b03      	ldr	r3, [sp, #12]
 80167ee:	1afb      	subs	r3, r7, r3
 80167f0:	9305      	str	r3, [sp, #20]
 80167f2:	9b03      	ldr	r3, [sp, #12]
 80167f4:	429f      	cmp	r7, r3
 80167f6:	d00d      	beq.n	8016814 <_vfiprintf_r+0xc0>
 80167f8:	9b05      	ldr	r3, [sp, #20]
 80167fa:	0021      	movs	r1, r4
 80167fc:	0030      	movs	r0, r6
 80167fe:	9a03      	ldr	r2, [sp, #12]
 8016800:	f7ff ff95 	bl	801672e <__sfputs_r>
 8016804:	1c43      	adds	r3, r0, #1
 8016806:	d100      	bne.n	801680a <_vfiprintf_r+0xb6>
 8016808:	e0b5      	b.n	8016976 <_vfiprintf_r+0x222>
 801680a:	696a      	ldr	r2, [r5, #20]
 801680c:	9b05      	ldr	r3, [sp, #20]
 801680e:	4694      	mov	ip, r2
 8016810:	4463      	add	r3, ip
 8016812:	616b      	str	r3, [r5, #20]
 8016814:	783b      	ldrb	r3, [r7, #0]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d100      	bne.n	801681c <_vfiprintf_r+0xc8>
 801681a:	e0ac      	b.n	8016976 <_vfiprintf_r+0x222>
 801681c:	2201      	movs	r2, #1
 801681e:	1c7b      	adds	r3, r7, #1
 8016820:	9303      	str	r3, [sp, #12]
 8016822:	2300      	movs	r3, #0
 8016824:	4252      	negs	r2, r2
 8016826:	606a      	str	r2, [r5, #4]
 8016828:	a904      	add	r1, sp, #16
 801682a:	3254      	adds	r2, #84	; 0x54
 801682c:	1852      	adds	r2, r2, r1
 801682e:	602b      	str	r3, [r5, #0]
 8016830:	60eb      	str	r3, [r5, #12]
 8016832:	60ab      	str	r3, [r5, #8]
 8016834:	7013      	strb	r3, [r2, #0]
 8016836:	65ab      	str	r3, [r5, #88]	; 0x58
 8016838:	9b03      	ldr	r3, [sp, #12]
 801683a:	2205      	movs	r2, #5
 801683c:	7819      	ldrb	r1, [r3, #0]
 801683e:	485d      	ldr	r0, [pc, #372]	; (80169b4 <_vfiprintf_r+0x260>)
 8016840:	f001 f8ce 	bl	80179e0 <memchr>
 8016844:	9b03      	ldr	r3, [sp, #12]
 8016846:	1c5f      	adds	r7, r3, #1
 8016848:	2800      	cmp	r0, #0
 801684a:	d120      	bne.n	801688e <_vfiprintf_r+0x13a>
 801684c:	682a      	ldr	r2, [r5, #0]
 801684e:	06d3      	lsls	r3, r2, #27
 8016850:	d504      	bpl.n	801685c <_vfiprintf_r+0x108>
 8016852:	2353      	movs	r3, #83	; 0x53
 8016854:	a904      	add	r1, sp, #16
 8016856:	185b      	adds	r3, r3, r1
 8016858:	2120      	movs	r1, #32
 801685a:	7019      	strb	r1, [r3, #0]
 801685c:	0713      	lsls	r3, r2, #28
 801685e:	d504      	bpl.n	801686a <_vfiprintf_r+0x116>
 8016860:	2353      	movs	r3, #83	; 0x53
 8016862:	a904      	add	r1, sp, #16
 8016864:	185b      	adds	r3, r3, r1
 8016866:	212b      	movs	r1, #43	; 0x2b
 8016868:	7019      	strb	r1, [r3, #0]
 801686a:	9b03      	ldr	r3, [sp, #12]
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	2b2a      	cmp	r3, #42	; 0x2a
 8016870:	d016      	beq.n	80168a0 <_vfiprintf_r+0x14c>
 8016872:	2100      	movs	r1, #0
 8016874:	68eb      	ldr	r3, [r5, #12]
 8016876:	9f03      	ldr	r7, [sp, #12]
 8016878:	783a      	ldrb	r2, [r7, #0]
 801687a:	1c78      	adds	r0, r7, #1
 801687c:	3a30      	subs	r2, #48	; 0x30
 801687e:	4684      	mov	ip, r0
 8016880:	2a09      	cmp	r2, #9
 8016882:	d94f      	bls.n	8016924 <_vfiprintf_r+0x1d0>
 8016884:	2900      	cmp	r1, #0
 8016886:	d111      	bne.n	80168ac <_vfiprintf_r+0x158>
 8016888:	e017      	b.n	80168ba <_vfiprintf_r+0x166>
 801688a:	3701      	adds	r7, #1
 801688c:	e7a9      	b.n	80167e2 <_vfiprintf_r+0x8e>
 801688e:	4b49      	ldr	r3, [pc, #292]	; (80169b4 <_vfiprintf_r+0x260>)
 8016890:	682a      	ldr	r2, [r5, #0]
 8016892:	1ac0      	subs	r0, r0, r3
 8016894:	2301      	movs	r3, #1
 8016896:	4083      	lsls	r3, r0
 8016898:	4313      	orrs	r3, r2
 801689a:	602b      	str	r3, [r5, #0]
 801689c:	9703      	str	r7, [sp, #12]
 801689e:	e7cb      	b.n	8016838 <_vfiprintf_r+0xe4>
 80168a0:	9b07      	ldr	r3, [sp, #28]
 80168a2:	1d19      	adds	r1, r3, #4
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	9107      	str	r1, [sp, #28]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	db01      	blt.n	80168b0 <_vfiprintf_r+0x15c>
 80168ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80168ae:	e004      	b.n	80168ba <_vfiprintf_r+0x166>
 80168b0:	425b      	negs	r3, r3
 80168b2:	60eb      	str	r3, [r5, #12]
 80168b4:	2302      	movs	r3, #2
 80168b6:	4313      	orrs	r3, r2
 80168b8:	602b      	str	r3, [r5, #0]
 80168ba:	783b      	ldrb	r3, [r7, #0]
 80168bc:	2b2e      	cmp	r3, #46	; 0x2e
 80168be:	d10a      	bne.n	80168d6 <_vfiprintf_r+0x182>
 80168c0:	787b      	ldrb	r3, [r7, #1]
 80168c2:	2b2a      	cmp	r3, #42	; 0x2a
 80168c4:	d137      	bne.n	8016936 <_vfiprintf_r+0x1e2>
 80168c6:	9b07      	ldr	r3, [sp, #28]
 80168c8:	3702      	adds	r7, #2
 80168ca:	1d1a      	adds	r2, r3, #4
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	9207      	str	r2, [sp, #28]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	db2d      	blt.n	8016930 <_vfiprintf_r+0x1dc>
 80168d4:	9309      	str	r3, [sp, #36]	; 0x24
 80168d6:	2203      	movs	r2, #3
 80168d8:	7839      	ldrb	r1, [r7, #0]
 80168da:	4837      	ldr	r0, [pc, #220]	; (80169b8 <_vfiprintf_r+0x264>)
 80168dc:	f001 f880 	bl	80179e0 <memchr>
 80168e0:	2800      	cmp	r0, #0
 80168e2:	d007      	beq.n	80168f4 <_vfiprintf_r+0x1a0>
 80168e4:	4b34      	ldr	r3, [pc, #208]	; (80169b8 <_vfiprintf_r+0x264>)
 80168e6:	682a      	ldr	r2, [r5, #0]
 80168e8:	1ac0      	subs	r0, r0, r3
 80168ea:	2340      	movs	r3, #64	; 0x40
 80168ec:	4083      	lsls	r3, r0
 80168ee:	4313      	orrs	r3, r2
 80168f0:	3701      	adds	r7, #1
 80168f2:	602b      	str	r3, [r5, #0]
 80168f4:	7839      	ldrb	r1, [r7, #0]
 80168f6:	1c7b      	adds	r3, r7, #1
 80168f8:	2206      	movs	r2, #6
 80168fa:	4830      	ldr	r0, [pc, #192]	; (80169bc <_vfiprintf_r+0x268>)
 80168fc:	9303      	str	r3, [sp, #12]
 80168fe:	7629      	strb	r1, [r5, #24]
 8016900:	f001 f86e 	bl	80179e0 <memchr>
 8016904:	2800      	cmp	r0, #0
 8016906:	d045      	beq.n	8016994 <_vfiprintf_r+0x240>
 8016908:	4b2d      	ldr	r3, [pc, #180]	; (80169c0 <_vfiprintf_r+0x26c>)
 801690a:	2b00      	cmp	r3, #0
 801690c:	d127      	bne.n	801695e <_vfiprintf_r+0x20a>
 801690e:	2207      	movs	r2, #7
 8016910:	9b07      	ldr	r3, [sp, #28]
 8016912:	3307      	adds	r3, #7
 8016914:	4393      	bics	r3, r2
 8016916:	3308      	adds	r3, #8
 8016918:	9307      	str	r3, [sp, #28]
 801691a:	696b      	ldr	r3, [r5, #20]
 801691c:	9a04      	ldr	r2, [sp, #16]
 801691e:	189b      	adds	r3, r3, r2
 8016920:	616b      	str	r3, [r5, #20]
 8016922:	e75d      	b.n	80167e0 <_vfiprintf_r+0x8c>
 8016924:	210a      	movs	r1, #10
 8016926:	434b      	muls	r3, r1
 8016928:	4667      	mov	r7, ip
 801692a:	189b      	adds	r3, r3, r2
 801692c:	3909      	subs	r1, #9
 801692e:	e7a3      	b.n	8016878 <_vfiprintf_r+0x124>
 8016930:	2301      	movs	r3, #1
 8016932:	425b      	negs	r3, r3
 8016934:	e7ce      	b.n	80168d4 <_vfiprintf_r+0x180>
 8016936:	2300      	movs	r3, #0
 8016938:	001a      	movs	r2, r3
 801693a:	3701      	adds	r7, #1
 801693c:	606b      	str	r3, [r5, #4]
 801693e:	7839      	ldrb	r1, [r7, #0]
 8016940:	1c78      	adds	r0, r7, #1
 8016942:	3930      	subs	r1, #48	; 0x30
 8016944:	4684      	mov	ip, r0
 8016946:	2909      	cmp	r1, #9
 8016948:	d903      	bls.n	8016952 <_vfiprintf_r+0x1fe>
 801694a:	2b00      	cmp	r3, #0
 801694c:	d0c3      	beq.n	80168d6 <_vfiprintf_r+0x182>
 801694e:	9209      	str	r2, [sp, #36]	; 0x24
 8016950:	e7c1      	b.n	80168d6 <_vfiprintf_r+0x182>
 8016952:	230a      	movs	r3, #10
 8016954:	435a      	muls	r2, r3
 8016956:	4667      	mov	r7, ip
 8016958:	1852      	adds	r2, r2, r1
 801695a:	3b09      	subs	r3, #9
 801695c:	e7ef      	b.n	801693e <_vfiprintf_r+0x1ea>
 801695e:	ab07      	add	r3, sp, #28
 8016960:	9300      	str	r3, [sp, #0]
 8016962:	0022      	movs	r2, r4
 8016964:	0029      	movs	r1, r5
 8016966:	0030      	movs	r0, r6
 8016968:	4b16      	ldr	r3, [pc, #88]	; (80169c4 <_vfiprintf_r+0x270>)
 801696a:	e000      	b.n	801696e <_vfiprintf_r+0x21a>
 801696c:	bf00      	nop
 801696e:	9004      	str	r0, [sp, #16]
 8016970:	9b04      	ldr	r3, [sp, #16]
 8016972:	3301      	adds	r3, #1
 8016974:	d1d1      	bne.n	801691a <_vfiprintf_r+0x1c6>
 8016976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016978:	07db      	lsls	r3, r3, #31
 801697a:	d405      	bmi.n	8016988 <_vfiprintf_r+0x234>
 801697c:	89a3      	ldrh	r3, [r4, #12]
 801697e:	059b      	lsls	r3, r3, #22
 8016980:	d402      	bmi.n	8016988 <_vfiprintf_r+0x234>
 8016982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016984:	f000 ffbe 	bl	8017904 <__retarget_lock_release_recursive>
 8016988:	89a3      	ldrh	r3, [r4, #12]
 801698a:	065b      	lsls	r3, r3, #25
 801698c:	d500      	bpl.n	8016990 <_vfiprintf_r+0x23c>
 801698e:	e70a      	b.n	80167a6 <_vfiprintf_r+0x52>
 8016990:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016992:	e70a      	b.n	80167aa <_vfiprintf_r+0x56>
 8016994:	ab07      	add	r3, sp, #28
 8016996:	9300      	str	r3, [sp, #0]
 8016998:	0022      	movs	r2, r4
 801699a:	0029      	movs	r1, r5
 801699c:	0030      	movs	r0, r6
 801699e:	4b09      	ldr	r3, [pc, #36]	; (80169c4 <_vfiprintf_r+0x270>)
 80169a0:	f000 f882 	bl	8016aa8 <_printf_i>
 80169a4:	e7e3      	b.n	801696e <_vfiprintf_r+0x21a>
 80169a6:	46c0      	nop			; (mov r8, r8)
 80169a8:	0801ae68 	.word	0x0801ae68
 80169ac:	0801ae88 	.word	0x0801ae88
 80169b0:	0801ae48 	.word	0x0801ae48
 80169b4:	0801add8 	.word	0x0801add8
 80169b8:	0801adde 	.word	0x0801adde
 80169bc:	0801ade2 	.word	0x0801ade2
 80169c0:	00000000 	.word	0x00000000
 80169c4:	0801672f 	.word	0x0801672f

080169c8 <_printf_common>:
 80169c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169ca:	0015      	movs	r5, r2
 80169cc:	9301      	str	r3, [sp, #4]
 80169ce:	688a      	ldr	r2, [r1, #8]
 80169d0:	690b      	ldr	r3, [r1, #16]
 80169d2:	000c      	movs	r4, r1
 80169d4:	9000      	str	r0, [sp, #0]
 80169d6:	4293      	cmp	r3, r2
 80169d8:	da00      	bge.n	80169dc <_printf_common+0x14>
 80169da:	0013      	movs	r3, r2
 80169dc:	0022      	movs	r2, r4
 80169de:	602b      	str	r3, [r5, #0]
 80169e0:	3243      	adds	r2, #67	; 0x43
 80169e2:	7812      	ldrb	r2, [r2, #0]
 80169e4:	2a00      	cmp	r2, #0
 80169e6:	d001      	beq.n	80169ec <_printf_common+0x24>
 80169e8:	3301      	adds	r3, #1
 80169ea:	602b      	str	r3, [r5, #0]
 80169ec:	6823      	ldr	r3, [r4, #0]
 80169ee:	069b      	lsls	r3, r3, #26
 80169f0:	d502      	bpl.n	80169f8 <_printf_common+0x30>
 80169f2:	682b      	ldr	r3, [r5, #0]
 80169f4:	3302      	adds	r3, #2
 80169f6:	602b      	str	r3, [r5, #0]
 80169f8:	6822      	ldr	r2, [r4, #0]
 80169fa:	2306      	movs	r3, #6
 80169fc:	0017      	movs	r7, r2
 80169fe:	401f      	ands	r7, r3
 8016a00:	421a      	tst	r2, r3
 8016a02:	d027      	beq.n	8016a54 <_printf_common+0x8c>
 8016a04:	0023      	movs	r3, r4
 8016a06:	3343      	adds	r3, #67	; 0x43
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	1e5a      	subs	r2, r3, #1
 8016a0c:	4193      	sbcs	r3, r2
 8016a0e:	6822      	ldr	r2, [r4, #0]
 8016a10:	0692      	lsls	r2, r2, #26
 8016a12:	d430      	bmi.n	8016a76 <_printf_common+0xae>
 8016a14:	0022      	movs	r2, r4
 8016a16:	9901      	ldr	r1, [sp, #4]
 8016a18:	9800      	ldr	r0, [sp, #0]
 8016a1a:	9e08      	ldr	r6, [sp, #32]
 8016a1c:	3243      	adds	r2, #67	; 0x43
 8016a1e:	47b0      	blx	r6
 8016a20:	1c43      	adds	r3, r0, #1
 8016a22:	d025      	beq.n	8016a70 <_printf_common+0xa8>
 8016a24:	2306      	movs	r3, #6
 8016a26:	6820      	ldr	r0, [r4, #0]
 8016a28:	682a      	ldr	r2, [r5, #0]
 8016a2a:	68e1      	ldr	r1, [r4, #12]
 8016a2c:	2500      	movs	r5, #0
 8016a2e:	4003      	ands	r3, r0
 8016a30:	2b04      	cmp	r3, #4
 8016a32:	d103      	bne.n	8016a3c <_printf_common+0x74>
 8016a34:	1a8d      	subs	r5, r1, r2
 8016a36:	43eb      	mvns	r3, r5
 8016a38:	17db      	asrs	r3, r3, #31
 8016a3a:	401d      	ands	r5, r3
 8016a3c:	68a3      	ldr	r3, [r4, #8]
 8016a3e:	6922      	ldr	r2, [r4, #16]
 8016a40:	4293      	cmp	r3, r2
 8016a42:	dd01      	ble.n	8016a48 <_printf_common+0x80>
 8016a44:	1a9b      	subs	r3, r3, r2
 8016a46:	18ed      	adds	r5, r5, r3
 8016a48:	2700      	movs	r7, #0
 8016a4a:	42bd      	cmp	r5, r7
 8016a4c:	d120      	bne.n	8016a90 <_printf_common+0xc8>
 8016a4e:	2000      	movs	r0, #0
 8016a50:	e010      	b.n	8016a74 <_printf_common+0xac>
 8016a52:	3701      	adds	r7, #1
 8016a54:	68e3      	ldr	r3, [r4, #12]
 8016a56:	682a      	ldr	r2, [r5, #0]
 8016a58:	1a9b      	subs	r3, r3, r2
 8016a5a:	42bb      	cmp	r3, r7
 8016a5c:	ddd2      	ble.n	8016a04 <_printf_common+0x3c>
 8016a5e:	0022      	movs	r2, r4
 8016a60:	2301      	movs	r3, #1
 8016a62:	9901      	ldr	r1, [sp, #4]
 8016a64:	9800      	ldr	r0, [sp, #0]
 8016a66:	9e08      	ldr	r6, [sp, #32]
 8016a68:	3219      	adds	r2, #25
 8016a6a:	47b0      	blx	r6
 8016a6c:	1c43      	adds	r3, r0, #1
 8016a6e:	d1f0      	bne.n	8016a52 <_printf_common+0x8a>
 8016a70:	2001      	movs	r0, #1
 8016a72:	4240      	negs	r0, r0
 8016a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a76:	2030      	movs	r0, #48	; 0x30
 8016a78:	18e1      	adds	r1, r4, r3
 8016a7a:	3143      	adds	r1, #67	; 0x43
 8016a7c:	7008      	strb	r0, [r1, #0]
 8016a7e:	0021      	movs	r1, r4
 8016a80:	1c5a      	adds	r2, r3, #1
 8016a82:	3145      	adds	r1, #69	; 0x45
 8016a84:	7809      	ldrb	r1, [r1, #0]
 8016a86:	18a2      	adds	r2, r4, r2
 8016a88:	3243      	adds	r2, #67	; 0x43
 8016a8a:	3302      	adds	r3, #2
 8016a8c:	7011      	strb	r1, [r2, #0]
 8016a8e:	e7c1      	b.n	8016a14 <_printf_common+0x4c>
 8016a90:	0022      	movs	r2, r4
 8016a92:	2301      	movs	r3, #1
 8016a94:	9901      	ldr	r1, [sp, #4]
 8016a96:	9800      	ldr	r0, [sp, #0]
 8016a98:	9e08      	ldr	r6, [sp, #32]
 8016a9a:	321a      	adds	r2, #26
 8016a9c:	47b0      	blx	r6
 8016a9e:	1c43      	adds	r3, r0, #1
 8016aa0:	d0e6      	beq.n	8016a70 <_printf_common+0xa8>
 8016aa2:	3701      	adds	r7, #1
 8016aa4:	e7d1      	b.n	8016a4a <_printf_common+0x82>
	...

08016aa8 <_printf_i>:
 8016aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aaa:	b08b      	sub	sp, #44	; 0x2c
 8016aac:	9206      	str	r2, [sp, #24]
 8016aae:	000a      	movs	r2, r1
 8016ab0:	3243      	adds	r2, #67	; 0x43
 8016ab2:	9307      	str	r3, [sp, #28]
 8016ab4:	9005      	str	r0, [sp, #20]
 8016ab6:	9204      	str	r2, [sp, #16]
 8016ab8:	7e0a      	ldrb	r2, [r1, #24]
 8016aba:	000c      	movs	r4, r1
 8016abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016abe:	2a78      	cmp	r2, #120	; 0x78
 8016ac0:	d807      	bhi.n	8016ad2 <_printf_i+0x2a>
 8016ac2:	2a62      	cmp	r2, #98	; 0x62
 8016ac4:	d809      	bhi.n	8016ada <_printf_i+0x32>
 8016ac6:	2a00      	cmp	r2, #0
 8016ac8:	d100      	bne.n	8016acc <_printf_i+0x24>
 8016aca:	e0c1      	b.n	8016c50 <_printf_i+0x1a8>
 8016acc:	2a58      	cmp	r2, #88	; 0x58
 8016ace:	d100      	bne.n	8016ad2 <_printf_i+0x2a>
 8016ad0:	e08c      	b.n	8016bec <_printf_i+0x144>
 8016ad2:	0026      	movs	r6, r4
 8016ad4:	3642      	adds	r6, #66	; 0x42
 8016ad6:	7032      	strb	r2, [r6, #0]
 8016ad8:	e022      	b.n	8016b20 <_printf_i+0x78>
 8016ada:	0010      	movs	r0, r2
 8016adc:	3863      	subs	r0, #99	; 0x63
 8016ade:	2815      	cmp	r0, #21
 8016ae0:	d8f7      	bhi.n	8016ad2 <_printf_i+0x2a>
 8016ae2:	f7e9 fb2d 	bl	8000140 <__gnu_thumb1_case_shi>
 8016ae6:	0016      	.short	0x0016
 8016ae8:	fff6001f 	.word	0xfff6001f
 8016aec:	fff6fff6 	.word	0xfff6fff6
 8016af0:	001ffff6 	.word	0x001ffff6
 8016af4:	fff6fff6 	.word	0xfff6fff6
 8016af8:	fff6fff6 	.word	0xfff6fff6
 8016afc:	003600a8 	.word	0x003600a8
 8016b00:	fff6009a 	.word	0xfff6009a
 8016b04:	00b9fff6 	.word	0x00b9fff6
 8016b08:	0036fff6 	.word	0x0036fff6
 8016b0c:	fff6fff6 	.word	0xfff6fff6
 8016b10:	009e      	.short	0x009e
 8016b12:	0026      	movs	r6, r4
 8016b14:	681a      	ldr	r2, [r3, #0]
 8016b16:	3642      	adds	r6, #66	; 0x42
 8016b18:	1d11      	adds	r1, r2, #4
 8016b1a:	6019      	str	r1, [r3, #0]
 8016b1c:	6813      	ldr	r3, [r2, #0]
 8016b1e:	7033      	strb	r3, [r6, #0]
 8016b20:	2301      	movs	r3, #1
 8016b22:	e0a7      	b.n	8016c74 <_printf_i+0x1cc>
 8016b24:	6808      	ldr	r0, [r1, #0]
 8016b26:	6819      	ldr	r1, [r3, #0]
 8016b28:	1d0a      	adds	r2, r1, #4
 8016b2a:	0605      	lsls	r5, r0, #24
 8016b2c:	d50b      	bpl.n	8016b46 <_printf_i+0x9e>
 8016b2e:	680d      	ldr	r5, [r1, #0]
 8016b30:	601a      	str	r2, [r3, #0]
 8016b32:	2d00      	cmp	r5, #0
 8016b34:	da03      	bge.n	8016b3e <_printf_i+0x96>
 8016b36:	232d      	movs	r3, #45	; 0x2d
 8016b38:	9a04      	ldr	r2, [sp, #16]
 8016b3a:	426d      	negs	r5, r5
 8016b3c:	7013      	strb	r3, [r2, #0]
 8016b3e:	4b61      	ldr	r3, [pc, #388]	; (8016cc4 <_printf_i+0x21c>)
 8016b40:	270a      	movs	r7, #10
 8016b42:	9303      	str	r3, [sp, #12]
 8016b44:	e01b      	b.n	8016b7e <_printf_i+0xd6>
 8016b46:	680d      	ldr	r5, [r1, #0]
 8016b48:	601a      	str	r2, [r3, #0]
 8016b4a:	0641      	lsls	r1, r0, #25
 8016b4c:	d5f1      	bpl.n	8016b32 <_printf_i+0x8a>
 8016b4e:	b22d      	sxth	r5, r5
 8016b50:	e7ef      	b.n	8016b32 <_printf_i+0x8a>
 8016b52:	680d      	ldr	r5, [r1, #0]
 8016b54:	6819      	ldr	r1, [r3, #0]
 8016b56:	1d08      	adds	r0, r1, #4
 8016b58:	6018      	str	r0, [r3, #0]
 8016b5a:	062e      	lsls	r6, r5, #24
 8016b5c:	d501      	bpl.n	8016b62 <_printf_i+0xba>
 8016b5e:	680d      	ldr	r5, [r1, #0]
 8016b60:	e003      	b.n	8016b6a <_printf_i+0xc2>
 8016b62:	066d      	lsls	r5, r5, #25
 8016b64:	d5fb      	bpl.n	8016b5e <_printf_i+0xb6>
 8016b66:	680d      	ldr	r5, [r1, #0]
 8016b68:	b2ad      	uxth	r5, r5
 8016b6a:	4b56      	ldr	r3, [pc, #344]	; (8016cc4 <_printf_i+0x21c>)
 8016b6c:	2708      	movs	r7, #8
 8016b6e:	9303      	str	r3, [sp, #12]
 8016b70:	2a6f      	cmp	r2, #111	; 0x6f
 8016b72:	d000      	beq.n	8016b76 <_printf_i+0xce>
 8016b74:	3702      	adds	r7, #2
 8016b76:	0023      	movs	r3, r4
 8016b78:	2200      	movs	r2, #0
 8016b7a:	3343      	adds	r3, #67	; 0x43
 8016b7c:	701a      	strb	r2, [r3, #0]
 8016b7e:	6863      	ldr	r3, [r4, #4]
 8016b80:	60a3      	str	r3, [r4, #8]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	db03      	blt.n	8016b8e <_printf_i+0xe6>
 8016b86:	2204      	movs	r2, #4
 8016b88:	6821      	ldr	r1, [r4, #0]
 8016b8a:	4391      	bics	r1, r2
 8016b8c:	6021      	str	r1, [r4, #0]
 8016b8e:	2d00      	cmp	r5, #0
 8016b90:	d102      	bne.n	8016b98 <_printf_i+0xf0>
 8016b92:	9e04      	ldr	r6, [sp, #16]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d00c      	beq.n	8016bb2 <_printf_i+0x10a>
 8016b98:	9e04      	ldr	r6, [sp, #16]
 8016b9a:	0028      	movs	r0, r5
 8016b9c:	0039      	movs	r1, r7
 8016b9e:	f7e9 fb69 	bl	8000274 <__aeabi_uidivmod>
 8016ba2:	9b03      	ldr	r3, [sp, #12]
 8016ba4:	3e01      	subs	r6, #1
 8016ba6:	5c5b      	ldrb	r3, [r3, r1]
 8016ba8:	7033      	strb	r3, [r6, #0]
 8016baa:	002b      	movs	r3, r5
 8016bac:	0005      	movs	r5, r0
 8016bae:	429f      	cmp	r7, r3
 8016bb0:	d9f3      	bls.n	8016b9a <_printf_i+0xf2>
 8016bb2:	2f08      	cmp	r7, #8
 8016bb4:	d109      	bne.n	8016bca <_printf_i+0x122>
 8016bb6:	6823      	ldr	r3, [r4, #0]
 8016bb8:	07db      	lsls	r3, r3, #31
 8016bba:	d506      	bpl.n	8016bca <_printf_i+0x122>
 8016bbc:	6863      	ldr	r3, [r4, #4]
 8016bbe:	6922      	ldr	r2, [r4, #16]
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	dc02      	bgt.n	8016bca <_printf_i+0x122>
 8016bc4:	2330      	movs	r3, #48	; 0x30
 8016bc6:	3e01      	subs	r6, #1
 8016bc8:	7033      	strb	r3, [r6, #0]
 8016bca:	9b04      	ldr	r3, [sp, #16]
 8016bcc:	1b9b      	subs	r3, r3, r6
 8016bce:	6123      	str	r3, [r4, #16]
 8016bd0:	9b07      	ldr	r3, [sp, #28]
 8016bd2:	0021      	movs	r1, r4
 8016bd4:	9300      	str	r3, [sp, #0]
 8016bd6:	9805      	ldr	r0, [sp, #20]
 8016bd8:	9b06      	ldr	r3, [sp, #24]
 8016bda:	aa09      	add	r2, sp, #36	; 0x24
 8016bdc:	f7ff fef4 	bl	80169c8 <_printf_common>
 8016be0:	1c43      	adds	r3, r0, #1
 8016be2:	d14c      	bne.n	8016c7e <_printf_i+0x1d6>
 8016be4:	2001      	movs	r0, #1
 8016be6:	4240      	negs	r0, r0
 8016be8:	b00b      	add	sp, #44	; 0x2c
 8016bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bec:	3145      	adds	r1, #69	; 0x45
 8016bee:	700a      	strb	r2, [r1, #0]
 8016bf0:	4a34      	ldr	r2, [pc, #208]	; (8016cc4 <_printf_i+0x21c>)
 8016bf2:	9203      	str	r2, [sp, #12]
 8016bf4:	681a      	ldr	r2, [r3, #0]
 8016bf6:	6821      	ldr	r1, [r4, #0]
 8016bf8:	ca20      	ldmia	r2!, {r5}
 8016bfa:	601a      	str	r2, [r3, #0]
 8016bfc:	0608      	lsls	r0, r1, #24
 8016bfe:	d516      	bpl.n	8016c2e <_printf_i+0x186>
 8016c00:	07cb      	lsls	r3, r1, #31
 8016c02:	d502      	bpl.n	8016c0a <_printf_i+0x162>
 8016c04:	2320      	movs	r3, #32
 8016c06:	4319      	orrs	r1, r3
 8016c08:	6021      	str	r1, [r4, #0]
 8016c0a:	2710      	movs	r7, #16
 8016c0c:	2d00      	cmp	r5, #0
 8016c0e:	d1b2      	bne.n	8016b76 <_printf_i+0xce>
 8016c10:	2320      	movs	r3, #32
 8016c12:	6822      	ldr	r2, [r4, #0]
 8016c14:	439a      	bics	r2, r3
 8016c16:	6022      	str	r2, [r4, #0]
 8016c18:	e7ad      	b.n	8016b76 <_printf_i+0xce>
 8016c1a:	2220      	movs	r2, #32
 8016c1c:	6809      	ldr	r1, [r1, #0]
 8016c1e:	430a      	orrs	r2, r1
 8016c20:	6022      	str	r2, [r4, #0]
 8016c22:	0022      	movs	r2, r4
 8016c24:	2178      	movs	r1, #120	; 0x78
 8016c26:	3245      	adds	r2, #69	; 0x45
 8016c28:	7011      	strb	r1, [r2, #0]
 8016c2a:	4a27      	ldr	r2, [pc, #156]	; (8016cc8 <_printf_i+0x220>)
 8016c2c:	e7e1      	b.n	8016bf2 <_printf_i+0x14a>
 8016c2e:	0648      	lsls	r0, r1, #25
 8016c30:	d5e6      	bpl.n	8016c00 <_printf_i+0x158>
 8016c32:	b2ad      	uxth	r5, r5
 8016c34:	e7e4      	b.n	8016c00 <_printf_i+0x158>
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	680d      	ldr	r5, [r1, #0]
 8016c3a:	1d10      	adds	r0, r2, #4
 8016c3c:	6949      	ldr	r1, [r1, #20]
 8016c3e:	6018      	str	r0, [r3, #0]
 8016c40:	6813      	ldr	r3, [r2, #0]
 8016c42:	062e      	lsls	r6, r5, #24
 8016c44:	d501      	bpl.n	8016c4a <_printf_i+0x1a2>
 8016c46:	6019      	str	r1, [r3, #0]
 8016c48:	e002      	b.n	8016c50 <_printf_i+0x1a8>
 8016c4a:	066d      	lsls	r5, r5, #25
 8016c4c:	d5fb      	bpl.n	8016c46 <_printf_i+0x19e>
 8016c4e:	8019      	strh	r1, [r3, #0]
 8016c50:	2300      	movs	r3, #0
 8016c52:	9e04      	ldr	r6, [sp, #16]
 8016c54:	6123      	str	r3, [r4, #16]
 8016c56:	e7bb      	b.n	8016bd0 <_printf_i+0x128>
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	1d11      	adds	r1, r2, #4
 8016c5c:	6019      	str	r1, [r3, #0]
 8016c5e:	6816      	ldr	r6, [r2, #0]
 8016c60:	2100      	movs	r1, #0
 8016c62:	0030      	movs	r0, r6
 8016c64:	6862      	ldr	r2, [r4, #4]
 8016c66:	f000 febb 	bl	80179e0 <memchr>
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	d001      	beq.n	8016c72 <_printf_i+0x1ca>
 8016c6e:	1b80      	subs	r0, r0, r6
 8016c70:	6060      	str	r0, [r4, #4]
 8016c72:	6863      	ldr	r3, [r4, #4]
 8016c74:	6123      	str	r3, [r4, #16]
 8016c76:	2300      	movs	r3, #0
 8016c78:	9a04      	ldr	r2, [sp, #16]
 8016c7a:	7013      	strb	r3, [r2, #0]
 8016c7c:	e7a8      	b.n	8016bd0 <_printf_i+0x128>
 8016c7e:	6923      	ldr	r3, [r4, #16]
 8016c80:	0032      	movs	r2, r6
 8016c82:	9906      	ldr	r1, [sp, #24]
 8016c84:	9805      	ldr	r0, [sp, #20]
 8016c86:	9d07      	ldr	r5, [sp, #28]
 8016c88:	47a8      	blx	r5
 8016c8a:	1c43      	adds	r3, r0, #1
 8016c8c:	d0aa      	beq.n	8016be4 <_printf_i+0x13c>
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	079b      	lsls	r3, r3, #30
 8016c92:	d415      	bmi.n	8016cc0 <_printf_i+0x218>
 8016c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c96:	68e0      	ldr	r0, [r4, #12]
 8016c98:	4298      	cmp	r0, r3
 8016c9a:	daa5      	bge.n	8016be8 <_printf_i+0x140>
 8016c9c:	0018      	movs	r0, r3
 8016c9e:	e7a3      	b.n	8016be8 <_printf_i+0x140>
 8016ca0:	0022      	movs	r2, r4
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	9906      	ldr	r1, [sp, #24]
 8016ca6:	9805      	ldr	r0, [sp, #20]
 8016ca8:	9e07      	ldr	r6, [sp, #28]
 8016caa:	3219      	adds	r2, #25
 8016cac:	47b0      	blx	r6
 8016cae:	1c43      	adds	r3, r0, #1
 8016cb0:	d098      	beq.n	8016be4 <_printf_i+0x13c>
 8016cb2:	3501      	adds	r5, #1
 8016cb4:	68e3      	ldr	r3, [r4, #12]
 8016cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cb8:	1a9b      	subs	r3, r3, r2
 8016cba:	42ab      	cmp	r3, r5
 8016cbc:	dcf0      	bgt.n	8016ca0 <_printf_i+0x1f8>
 8016cbe:	e7e9      	b.n	8016c94 <_printf_i+0x1ec>
 8016cc0:	2500      	movs	r5, #0
 8016cc2:	e7f7      	b.n	8016cb4 <_printf_i+0x20c>
 8016cc4:	0801ade9 	.word	0x0801ade9
 8016cc8:	0801adfa 	.word	0x0801adfa

08016ccc <iprintf>:
 8016ccc:	b40f      	push	{r0, r1, r2, r3}
 8016cce:	4b0b      	ldr	r3, [pc, #44]	; (8016cfc <iprintf+0x30>)
 8016cd0:	b513      	push	{r0, r1, r4, lr}
 8016cd2:	681c      	ldr	r4, [r3, #0]
 8016cd4:	2c00      	cmp	r4, #0
 8016cd6:	d005      	beq.n	8016ce4 <iprintf+0x18>
 8016cd8:	69a3      	ldr	r3, [r4, #24]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d102      	bne.n	8016ce4 <iprintf+0x18>
 8016cde:	0020      	movs	r0, r4
 8016ce0:	f000 fd26 	bl	8017730 <__sinit>
 8016ce4:	ab05      	add	r3, sp, #20
 8016ce6:	0020      	movs	r0, r4
 8016ce8:	9a04      	ldr	r2, [sp, #16]
 8016cea:	68a1      	ldr	r1, [r4, #8]
 8016cec:	9301      	str	r3, [sp, #4]
 8016cee:	f7ff fd31 	bl	8016754 <_vfiprintf_r>
 8016cf2:	bc16      	pop	{r1, r2, r4}
 8016cf4:	bc08      	pop	{r3}
 8016cf6:	b004      	add	sp, #16
 8016cf8:	4718      	bx	r3
 8016cfa:	46c0      	nop			; (mov r8, r8)
 8016cfc:	20000244 	.word	0x20000244

08016d00 <putchar>:
 8016d00:	4b08      	ldr	r3, [pc, #32]	; (8016d24 <putchar+0x24>)
 8016d02:	b570      	push	{r4, r5, r6, lr}
 8016d04:	681c      	ldr	r4, [r3, #0]
 8016d06:	0005      	movs	r5, r0
 8016d08:	2c00      	cmp	r4, #0
 8016d0a:	d005      	beq.n	8016d18 <putchar+0x18>
 8016d0c:	69a3      	ldr	r3, [r4, #24]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d102      	bne.n	8016d18 <putchar+0x18>
 8016d12:	0020      	movs	r0, r4
 8016d14:	f000 fd0c 	bl	8017730 <__sinit>
 8016d18:	0029      	movs	r1, r5
 8016d1a:	0020      	movs	r0, r4
 8016d1c:	68a2      	ldr	r2, [r4, #8]
 8016d1e:	f000 feab 	bl	8017a78 <_putc_r>
 8016d22:	bd70      	pop	{r4, r5, r6, pc}
 8016d24:	20000244 	.word	0x20000244

08016d28 <_puts_r>:
 8016d28:	b570      	push	{r4, r5, r6, lr}
 8016d2a:	0005      	movs	r5, r0
 8016d2c:	000e      	movs	r6, r1
 8016d2e:	2800      	cmp	r0, #0
 8016d30:	d004      	beq.n	8016d3c <_puts_r+0x14>
 8016d32:	6983      	ldr	r3, [r0, #24]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d101      	bne.n	8016d3c <_puts_r+0x14>
 8016d38:	f000 fcfa 	bl	8017730 <__sinit>
 8016d3c:	69ab      	ldr	r3, [r5, #24]
 8016d3e:	68ac      	ldr	r4, [r5, #8]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d102      	bne.n	8016d4a <_puts_r+0x22>
 8016d44:	0028      	movs	r0, r5
 8016d46:	f000 fcf3 	bl	8017730 <__sinit>
 8016d4a:	4b2d      	ldr	r3, [pc, #180]	; (8016e00 <_puts_r+0xd8>)
 8016d4c:	429c      	cmp	r4, r3
 8016d4e:	d122      	bne.n	8016d96 <_puts_r+0x6e>
 8016d50:	686c      	ldr	r4, [r5, #4]
 8016d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d54:	07db      	lsls	r3, r3, #31
 8016d56:	d405      	bmi.n	8016d64 <_puts_r+0x3c>
 8016d58:	89a3      	ldrh	r3, [r4, #12]
 8016d5a:	059b      	lsls	r3, r3, #22
 8016d5c:	d402      	bmi.n	8016d64 <_puts_r+0x3c>
 8016d5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d60:	f000 fdce 	bl	8017900 <__retarget_lock_acquire_recursive>
 8016d64:	89a3      	ldrh	r3, [r4, #12]
 8016d66:	071b      	lsls	r3, r3, #28
 8016d68:	d502      	bpl.n	8016d70 <_puts_r+0x48>
 8016d6a:	6923      	ldr	r3, [r4, #16]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d129      	bne.n	8016dc4 <_puts_r+0x9c>
 8016d70:	0021      	movs	r1, r4
 8016d72:	0028      	movs	r0, r5
 8016d74:	f000 fb18 	bl	80173a8 <__swsetup_r>
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	d023      	beq.n	8016dc4 <_puts_r+0x9c>
 8016d7c:	2501      	movs	r5, #1
 8016d7e:	426d      	negs	r5, r5
 8016d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d82:	07db      	lsls	r3, r3, #31
 8016d84:	d405      	bmi.n	8016d92 <_puts_r+0x6a>
 8016d86:	89a3      	ldrh	r3, [r4, #12]
 8016d88:	059b      	lsls	r3, r3, #22
 8016d8a:	d402      	bmi.n	8016d92 <_puts_r+0x6a>
 8016d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d8e:	f000 fdb9 	bl	8017904 <__retarget_lock_release_recursive>
 8016d92:	0028      	movs	r0, r5
 8016d94:	bd70      	pop	{r4, r5, r6, pc}
 8016d96:	4b1b      	ldr	r3, [pc, #108]	; (8016e04 <_puts_r+0xdc>)
 8016d98:	429c      	cmp	r4, r3
 8016d9a:	d101      	bne.n	8016da0 <_puts_r+0x78>
 8016d9c:	68ac      	ldr	r4, [r5, #8]
 8016d9e:	e7d8      	b.n	8016d52 <_puts_r+0x2a>
 8016da0:	4b19      	ldr	r3, [pc, #100]	; (8016e08 <_puts_r+0xe0>)
 8016da2:	429c      	cmp	r4, r3
 8016da4:	d1d5      	bne.n	8016d52 <_puts_r+0x2a>
 8016da6:	68ec      	ldr	r4, [r5, #12]
 8016da8:	e7d3      	b.n	8016d52 <_puts_r+0x2a>
 8016daa:	3601      	adds	r6, #1
 8016dac:	60a3      	str	r3, [r4, #8]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	da04      	bge.n	8016dbc <_puts_r+0x94>
 8016db2:	69a2      	ldr	r2, [r4, #24]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	dc16      	bgt.n	8016de6 <_puts_r+0xbe>
 8016db8:	290a      	cmp	r1, #10
 8016dba:	d014      	beq.n	8016de6 <_puts_r+0xbe>
 8016dbc:	6823      	ldr	r3, [r4, #0]
 8016dbe:	1c5a      	adds	r2, r3, #1
 8016dc0:	6022      	str	r2, [r4, #0]
 8016dc2:	7019      	strb	r1, [r3, #0]
 8016dc4:	68a3      	ldr	r3, [r4, #8]
 8016dc6:	7831      	ldrb	r1, [r6, #0]
 8016dc8:	3b01      	subs	r3, #1
 8016dca:	2900      	cmp	r1, #0
 8016dcc:	d1ed      	bne.n	8016daa <_puts_r+0x82>
 8016dce:	60a3      	str	r3, [r4, #8]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	da0f      	bge.n	8016df4 <_puts_r+0xcc>
 8016dd4:	0028      	movs	r0, r5
 8016dd6:	0022      	movs	r2, r4
 8016dd8:	310a      	adds	r1, #10
 8016dda:	f000 fa8f 	bl	80172fc <__swbuf_r>
 8016dde:	250a      	movs	r5, #10
 8016de0:	1c43      	adds	r3, r0, #1
 8016de2:	d1cd      	bne.n	8016d80 <_puts_r+0x58>
 8016de4:	e7ca      	b.n	8016d7c <_puts_r+0x54>
 8016de6:	0022      	movs	r2, r4
 8016de8:	0028      	movs	r0, r5
 8016dea:	f000 fa87 	bl	80172fc <__swbuf_r>
 8016dee:	1c43      	adds	r3, r0, #1
 8016df0:	d1e8      	bne.n	8016dc4 <_puts_r+0x9c>
 8016df2:	e7c3      	b.n	8016d7c <_puts_r+0x54>
 8016df4:	250a      	movs	r5, #10
 8016df6:	6823      	ldr	r3, [r4, #0]
 8016df8:	1c5a      	adds	r2, r3, #1
 8016dfa:	6022      	str	r2, [r4, #0]
 8016dfc:	701d      	strb	r5, [r3, #0]
 8016dfe:	e7bf      	b.n	8016d80 <_puts_r+0x58>
 8016e00:	0801ae68 	.word	0x0801ae68
 8016e04:	0801ae88 	.word	0x0801ae88
 8016e08:	0801ae48 	.word	0x0801ae48

08016e0c <puts>:
 8016e0c:	b510      	push	{r4, lr}
 8016e0e:	4b03      	ldr	r3, [pc, #12]	; (8016e1c <puts+0x10>)
 8016e10:	0001      	movs	r1, r0
 8016e12:	6818      	ldr	r0, [r3, #0]
 8016e14:	f7ff ff88 	bl	8016d28 <_puts_r>
 8016e18:	bd10      	pop	{r4, pc}
 8016e1a:	46c0      	nop			; (mov r8, r8)
 8016e1c:	20000244 	.word	0x20000244

08016e20 <_sbrk_r>:
 8016e20:	2300      	movs	r3, #0
 8016e22:	b570      	push	{r4, r5, r6, lr}
 8016e24:	4d06      	ldr	r5, [pc, #24]	; (8016e40 <_sbrk_r+0x20>)
 8016e26:	0004      	movs	r4, r0
 8016e28:	0008      	movs	r0, r1
 8016e2a:	602b      	str	r3, [r5, #0]
 8016e2c:	f001 fcea 	bl	8018804 <_sbrk>
 8016e30:	1c43      	adds	r3, r0, #1
 8016e32:	d103      	bne.n	8016e3c <_sbrk_r+0x1c>
 8016e34:	682b      	ldr	r3, [r5, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d000      	beq.n	8016e3c <_sbrk_r+0x1c>
 8016e3a:	6023      	str	r3, [r4, #0]
 8016e3c:	bd70      	pop	{r4, r5, r6, pc}
 8016e3e:	46c0      	nop			; (mov r8, r8)
 8016e40:	20001de8 	.word	0x20001de8

08016e44 <strcpy>:
 8016e44:	0003      	movs	r3, r0
 8016e46:	780a      	ldrb	r2, [r1, #0]
 8016e48:	3101      	adds	r1, #1
 8016e4a:	701a      	strb	r2, [r3, #0]
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	2a00      	cmp	r2, #0
 8016e50:	d1f9      	bne.n	8016e46 <strcpy+0x2>
 8016e52:	4770      	bx	lr

08016e54 <__tzcalc_limits>:
 8016e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e56:	b08d      	sub	sp, #52	; 0x34
 8016e58:	0004      	movs	r4, r0
 8016e5a:	f000 fd4b 	bl	80178f4 <__gettzinfo>
 8016e5e:	4b53      	ldr	r3, [pc, #332]	; (8016fac <__tzcalc_limits+0x158>)
 8016e60:	0005      	movs	r5, r0
 8016e62:	2000      	movs	r0, #0
 8016e64:	429c      	cmp	r4, r3
 8016e66:	dd6d      	ble.n	8016f44 <__tzcalc_limits+0xf0>
 8016e68:	266e      	movs	r6, #110	; 0x6e
 8016e6a:	2164      	movs	r1, #100	; 0x64
 8016e6c:	4b50      	ldr	r3, [pc, #320]	; (8016fb0 <__tzcalc_limits+0x15c>)
 8016e6e:	36ff      	adds	r6, #255	; 0xff
 8016e70:	18e0      	adds	r0, r4, r3
 8016e72:	4346      	muls	r6, r0
 8016e74:	4b4f      	ldr	r3, [pc, #316]	; (8016fb4 <__tzcalc_limits+0x160>)
 8016e76:	606c      	str	r4, [r5, #4]
 8016e78:	18e3      	adds	r3, r4, r3
 8016e7a:	109b      	asrs	r3, r3, #2
 8016e7c:	18f6      	adds	r6, r6, r3
 8016e7e:	4b4e      	ldr	r3, [pc, #312]	; (8016fb8 <__tzcalc_limits+0x164>)
 8016e80:	4249      	negs	r1, r1
 8016e82:	18e0      	adds	r0, r4, r3
 8016e84:	f7e9 f9fa 	bl	800027c <__divsi3>
 8016e88:	21c8      	movs	r1, #200	; 0xc8
 8016e8a:	4b4c      	ldr	r3, [pc, #304]	; (8016fbc <__tzcalc_limits+0x168>)
 8016e8c:	1836      	adds	r6, r6, r0
 8016e8e:	0049      	lsls	r1, r1, #1
 8016e90:	18e0      	adds	r0, r4, r3
 8016e92:	f7e9 f9f3 	bl	800027c <__divsi3>
 8016e96:	2164      	movs	r1, #100	; 0x64
 8016e98:	1833      	adds	r3, r6, r0
 8016e9a:	0020      	movs	r0, r4
 8016e9c:	9301      	str	r3, [sp, #4]
 8016e9e:	f7e9 fad3 	bl	8000448 <__aeabi_idivmod>
 8016ea2:	9102      	str	r1, [sp, #8]
 8016ea4:	21c8      	movs	r1, #200	; 0xc8
 8016ea6:	0020      	movs	r0, r4
 8016ea8:	0049      	lsls	r1, r1, #1
 8016eaa:	f7e9 facd 	bl	8000448 <__aeabi_idivmod>
 8016eae:	000b      	movs	r3, r1
 8016eb0:	2003      	movs	r0, #3
 8016eb2:	425a      	negs	r2, r3
 8016eb4:	415a      	adcs	r2, r3
 8016eb6:	002b      	movs	r3, r5
 8016eb8:	002e      	movs	r6, r5
 8016eba:	3358      	adds	r3, #88	; 0x58
 8016ebc:	4004      	ands	r4, r0
 8016ebe:	9103      	str	r1, [sp, #12]
 8016ec0:	920b      	str	r2, [sp, #44]	; 0x2c
 8016ec2:	3608      	adds	r6, #8
 8016ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8016ec6:	9409      	str	r4, [sp, #36]	; 0x24
 8016ec8:	7833      	ldrb	r3, [r6, #0]
 8016eca:	68f7      	ldr	r7, [r6, #12]
 8016ecc:	2b4a      	cmp	r3, #74	; 0x4a
 8016ece:	d13b      	bne.n	8016f48 <__tzcalc_limits+0xf4>
 8016ed0:	9b01      	ldr	r3, [sp, #4]
 8016ed2:	19d8      	adds	r0, r3, r7
 8016ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d102      	bne.n	8016ee0 <__tzcalc_limits+0x8c>
 8016eda:	9b02      	ldr	r3, [sp, #8]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d103      	bne.n	8016ee8 <__tzcalc_limits+0x94>
 8016ee0:	2400      	movs	r4, #0
 8016ee2:	9b03      	ldr	r3, [sp, #12]
 8016ee4:	42a3      	cmp	r3, r4
 8016ee6:	d103      	bne.n	8016ef0 <__tzcalc_limits+0x9c>
 8016ee8:	2401      	movs	r4, #1
 8016eea:	2f3b      	cmp	r7, #59	; 0x3b
 8016eec:	dc00      	bgt.n	8016ef0 <__tzcalc_limits+0x9c>
 8016eee:	2400      	movs	r4, #0
 8016ef0:	1900      	adds	r0, r0, r4
 8016ef2:	3801      	subs	r0, #1
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	4a32      	ldr	r2, [pc, #200]	; (8016fc0 <__tzcalc_limits+0x16c>)
 8016ef8:	17c1      	asrs	r1, r0, #31
 8016efa:	f7e9 fb15 	bl	8000528 <__aeabi_lmul>
 8016efe:	6933      	ldr	r3, [r6, #16]
 8016f00:	9304      	str	r3, [sp, #16]
 8016f02:	17db      	asrs	r3, r3, #31
 8016f04:	9305      	str	r3, [sp, #20]
 8016f06:	9b04      	ldr	r3, [sp, #16]
 8016f08:	9c05      	ldr	r4, [sp, #20]
 8016f0a:	18c0      	adds	r0, r0, r3
 8016f0c:	4161      	adcs	r1, r4
 8016f0e:	6a33      	ldr	r3, [r6, #32]
 8016f10:	9306      	str	r3, [sp, #24]
 8016f12:	17db      	asrs	r3, r3, #31
 8016f14:	9307      	str	r3, [sp, #28]
 8016f16:	9b06      	ldr	r3, [sp, #24]
 8016f18:	9c07      	ldr	r4, [sp, #28]
 8016f1a:	18c0      	adds	r0, r0, r3
 8016f1c:	4161      	adcs	r1, r4
 8016f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f20:	61b0      	str	r0, [r6, #24]
 8016f22:	61f1      	str	r1, [r6, #28]
 8016f24:	3628      	adds	r6, #40	; 0x28
 8016f26:	42b3      	cmp	r3, r6
 8016f28:	d1ce      	bne.n	8016ec8 <__tzcalc_limits+0x74>
 8016f2a:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8016f2c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016f2e:	2301      	movs	r3, #1
 8016f30:	4291      	cmp	r1, r2
 8016f32:	dc05      	bgt.n	8016f40 <__tzcalc_limits+0xec>
 8016f34:	d103      	bne.n	8016f3e <__tzcalc_limits+0xea>
 8016f36:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8016f38:	6a29      	ldr	r1, [r5, #32]
 8016f3a:	428a      	cmp	r2, r1
 8016f3c:	d800      	bhi.n	8016f40 <__tzcalc_limits+0xec>
 8016f3e:	2300      	movs	r3, #0
 8016f40:	2001      	movs	r0, #1
 8016f42:	602b      	str	r3, [r5, #0]
 8016f44:	b00d      	add	sp, #52	; 0x34
 8016f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f48:	2b44      	cmp	r3, #68	; 0x44
 8016f4a:	d102      	bne.n	8016f52 <__tzcalc_limits+0xfe>
 8016f4c:	9b01      	ldr	r3, [sp, #4]
 8016f4e:	19d8      	adds	r0, r3, r7
 8016f50:	e7d0      	b.n	8016ef4 <__tzcalc_limits+0xa0>
 8016f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f56:	2a00      	cmp	r2, #0
 8016f58:	d103      	bne.n	8016f62 <__tzcalc_limits+0x10e>
 8016f5a:	9a02      	ldr	r2, [sp, #8]
 8016f5c:	2a00      	cmp	r2, #0
 8016f5e:	d000      	beq.n	8016f62 <__tzcalc_limits+0x10e>
 8016f60:	2301      	movs	r3, #1
 8016f62:	2230      	movs	r2, #48	; 0x30
 8016f64:	4353      	muls	r3, r2
 8016f66:	2200      	movs	r2, #0
 8016f68:	4816      	ldr	r0, [pc, #88]	; (8016fc4 <__tzcalc_limits+0x170>)
 8016f6a:	3b04      	subs	r3, #4
 8016f6c:	6871      	ldr	r1, [r6, #4]
 8016f6e:	9c01      	ldr	r4, [sp, #4]
 8016f70:	181b      	adds	r3, r3, r0
 8016f72:	3201      	adds	r2, #1
 8016f74:	0090      	lsls	r0, r2, #2
 8016f76:	5818      	ldr	r0, [r3, r0]
 8016f78:	9008      	str	r0, [sp, #32]
 8016f7a:	4291      	cmp	r1, r2
 8016f7c:	dc10      	bgt.n	8016fa0 <__tzcalc_limits+0x14c>
 8016f7e:	2107      	movs	r1, #7
 8016f80:	1d20      	adds	r0, r4, #4
 8016f82:	f7e9 fa61 	bl	8000448 <__aeabi_idivmod>
 8016f86:	1a79      	subs	r1, r7, r1
 8016f88:	d500      	bpl.n	8016f8c <__tzcalc_limits+0x138>
 8016f8a:	3107      	adds	r1, #7
 8016f8c:	2007      	movs	r0, #7
 8016f8e:	68b3      	ldr	r3, [r6, #8]
 8016f90:	3b01      	subs	r3, #1
 8016f92:	4358      	muls	r0, r3
 8016f94:	1840      	adds	r0, r0, r1
 8016f96:	9b08      	ldr	r3, [sp, #32]
 8016f98:	4298      	cmp	r0, r3
 8016f9a:	da04      	bge.n	8016fa6 <__tzcalc_limits+0x152>
 8016f9c:	1820      	adds	r0, r4, r0
 8016f9e:	e7a9      	b.n	8016ef4 <__tzcalc_limits+0xa0>
 8016fa0:	9808      	ldr	r0, [sp, #32]
 8016fa2:	1824      	adds	r4, r4, r0
 8016fa4:	e7e5      	b.n	8016f72 <__tzcalc_limits+0x11e>
 8016fa6:	3807      	subs	r0, #7
 8016fa8:	e7f5      	b.n	8016f96 <__tzcalc_limits+0x142>
 8016faa:	46c0      	nop			; (mov r8, r8)
 8016fac:	000007b1 	.word	0x000007b1
 8016fb0:	fffff84e 	.word	0xfffff84e
 8016fb4:	fffff84f 	.word	0xfffff84f
 8016fb8:	fffff893 	.word	0xfffff893
 8016fbc:	fffff9bf 	.word	0xfffff9bf
 8016fc0:	00015180 	.word	0x00015180
 8016fc4:	0801aea8 	.word	0x0801aea8

08016fc8 <__tz_lock>:
 8016fc8:	b510      	push	{r4, lr}
 8016fca:	4802      	ldr	r0, [pc, #8]	; (8016fd4 <__tz_lock+0xc>)
 8016fcc:	f000 fc97 	bl	80178fe <__retarget_lock_acquire>
 8016fd0:	bd10      	pop	{r4, pc}
 8016fd2:	46c0      	nop			; (mov r8, r8)
 8016fd4:	20001de4 	.word	0x20001de4

08016fd8 <__tz_unlock>:
 8016fd8:	b510      	push	{r4, lr}
 8016fda:	4802      	ldr	r0, [pc, #8]	; (8016fe4 <__tz_unlock+0xc>)
 8016fdc:	f000 fc91 	bl	8017902 <__retarget_lock_release>
 8016fe0:	bd10      	pop	{r4, pc}
 8016fe2:	46c0      	nop			; (mov r8, r8)
 8016fe4:	20001de4 	.word	0x20001de4

08016fe8 <_tzset_unlocked>:
 8016fe8:	b510      	push	{r4, lr}
 8016fea:	4b02      	ldr	r3, [pc, #8]	; (8016ff4 <_tzset_unlocked+0xc>)
 8016fec:	6818      	ldr	r0, [r3, #0]
 8016fee:	f000 f803 	bl	8016ff8 <_tzset_unlocked_r>
 8016ff2:	bd10      	pop	{r4, pc}
 8016ff4:	20000244 	.word	0x20000244

08016ff8 <_tzset_unlocked_r>:
 8016ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ffa:	b08d      	sub	sp, #52	; 0x34
 8016ffc:	0006      	movs	r6, r0
 8016ffe:	f000 fc79 	bl	80178f4 <__gettzinfo>
 8017002:	49b1      	ldr	r1, [pc, #708]	; (80172c8 <_tzset_unlocked_r+0x2d0>)
 8017004:	0007      	movs	r7, r0
 8017006:	0030      	movs	r0, r6
 8017008:	f000 fc6e 	bl	80178e8 <_getenv_r>
 801700c:	4caf      	ldr	r4, [pc, #700]	; (80172cc <_tzset_unlocked_r+0x2d4>)
 801700e:	1e05      	subs	r5, r0, #0
 8017010:	d10d      	bne.n	801702e <_tzset_unlocked_r+0x36>
 8017012:	4baf      	ldr	r3, [pc, #700]	; (80172d0 <_tzset_unlocked_r+0x2d8>)
 8017014:	4aaf      	ldr	r2, [pc, #700]	; (80172d4 <_tzset_unlocked_r+0x2dc>)
 8017016:	6018      	str	r0, [r3, #0]
 8017018:	4baf      	ldr	r3, [pc, #700]	; (80172d8 <_tzset_unlocked_r+0x2e0>)
 801701a:	6018      	str	r0, [r3, #0]
 801701c:	4baf      	ldr	r3, [pc, #700]	; (80172dc <_tzset_unlocked_r+0x2e4>)
 801701e:	6820      	ldr	r0, [r4, #0]
 8017020:	601a      	str	r2, [r3, #0]
 8017022:	605a      	str	r2, [r3, #4]
 8017024:	f7fe ffca 	bl	8015fbc <free>
 8017028:	6025      	str	r5, [r4, #0]
 801702a:	b00d      	add	sp, #52	; 0x34
 801702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801702e:	6821      	ldr	r1, [r4, #0]
 8017030:	2900      	cmp	r1, #0
 8017032:	d159      	bne.n	80170e8 <_tzset_unlocked_r+0xf0>
 8017034:	6820      	ldr	r0, [r4, #0]
 8017036:	f7fe ffc1 	bl	8015fbc <free>
 801703a:	0028      	movs	r0, r5
 801703c:	f7e9 f864 	bl	8000108 <strlen>
 8017040:	1c41      	adds	r1, r0, #1
 8017042:	0030      	movs	r0, r6
 8017044:	f7ff fae8 	bl	8016618 <_malloc_r>
 8017048:	6020      	str	r0, [r4, #0]
 801704a:	2800      	cmp	r0, #0
 801704c:	d151      	bne.n	80170f2 <_tzset_unlocked_r+0xfa>
 801704e:	782b      	ldrb	r3, [r5, #0]
 8017050:	49a3      	ldr	r1, [pc, #652]	; (80172e0 <_tzset_unlocked_r+0x2e8>)
 8017052:	3b3a      	subs	r3, #58	; 0x3a
 8017054:	425a      	negs	r2, r3
 8017056:	4153      	adcs	r3, r2
 8017058:	18ed      	adds	r5, r5, r3
 801705a:	0028      	movs	r0, r5
 801705c:	4aa1      	ldr	r2, [pc, #644]	; (80172e4 <_tzset_unlocked_r+0x2ec>)
 801705e:	ab0a      	add	r3, sp, #40	; 0x28
 8017060:	f000 fd9e 	bl	8017ba0 <siscanf>
 8017064:	2800      	cmp	r0, #0
 8017066:	dde0      	ble.n	801702a <_tzset_unlocked_r+0x32>
 8017068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801706a:	18ec      	adds	r4, r5, r3
 801706c:	5ceb      	ldrb	r3, [r5, r3]
 801706e:	2b2d      	cmp	r3, #45	; 0x2d
 8017070:	d143      	bne.n	80170fa <_tzset_unlocked_r+0x102>
 8017072:	3b2e      	subs	r3, #46	; 0x2e
 8017074:	3401      	adds	r4, #1
 8017076:	9304      	str	r3, [sp, #16]
 8017078:	2616      	movs	r6, #22
 801707a:	ab02      	add	r3, sp, #8
 801707c:	18f6      	adds	r6, r6, r3
 801707e:	2300      	movs	r3, #0
 8017080:	ad08      	add	r5, sp, #32
 8017082:	8033      	strh	r3, [r6, #0]
 8017084:	802b      	strh	r3, [r5, #0]
 8017086:	ab0a      	add	r3, sp, #40	; 0x28
 8017088:	0020      	movs	r0, r4
 801708a:	4997      	ldr	r1, [pc, #604]	; (80172e8 <_tzset_unlocked_r+0x2f0>)
 801708c:	9303      	str	r3, [sp, #12]
 801708e:	9502      	str	r5, [sp, #8]
 8017090:	9301      	str	r3, [sp, #4]
 8017092:	9600      	str	r6, [sp, #0]
 8017094:	aa07      	add	r2, sp, #28
 8017096:	f000 fd83 	bl	8017ba0 <siscanf>
 801709a:	2800      	cmp	r0, #0
 801709c:	ddc5      	ble.n	801702a <_tzset_unlocked_r+0x32>
 801709e:	233c      	movs	r3, #60	; 0x3c
 80170a0:	8832      	ldrh	r2, [r6, #0]
 80170a2:	4e92      	ldr	r6, [pc, #584]	; (80172ec <_tzset_unlocked_r+0x2f4>)
 80170a4:	4353      	muls	r3, r2
 80170a6:	882a      	ldrh	r2, [r5, #0]
 80170a8:	4d8c      	ldr	r5, [pc, #560]	; (80172dc <_tzset_unlocked_r+0x2e4>)
 80170aa:	189b      	adds	r3, r3, r2
 80170ac:	aa02      	add	r2, sp, #8
 80170ae:	8a91      	ldrh	r1, [r2, #20]
 80170b0:	22e1      	movs	r2, #225	; 0xe1
 80170b2:	0112      	lsls	r2, r2, #4
 80170b4:	434a      	muls	r2, r1
 80170b6:	189b      	adds	r3, r3, r2
 80170b8:	9a04      	ldr	r2, [sp, #16]
 80170ba:	4989      	ldr	r1, [pc, #548]	; (80172e0 <_tzset_unlocked_r+0x2e8>)
 80170bc:	435a      	muls	r2, r3
 80170be:	4b89      	ldr	r3, [pc, #548]	; (80172e4 <_tzset_unlocked_r+0x2ec>)
 80170c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80170c2:	602b      	str	r3, [r5, #0]
 80170c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170c6:	0032      	movs	r2, r6
 80170c8:	18e4      	adds	r4, r4, r3
 80170ca:	0020      	movs	r0, r4
 80170cc:	ab0a      	add	r3, sp, #40	; 0x28
 80170ce:	f000 fd67 	bl	8017ba0 <siscanf>
 80170d2:	2800      	cmp	r0, #0
 80170d4:	dc18      	bgt.n	8017108 <_tzset_unlocked_r+0x110>
 80170d6:	682b      	ldr	r3, [r5, #0]
 80170d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170da:	606b      	str	r3, [r5, #4]
 80170dc:	4b7c      	ldr	r3, [pc, #496]	; (80172d0 <_tzset_unlocked_r+0x2d8>)
 80170de:	601a      	str	r2, [r3, #0]
 80170e0:	2200      	movs	r2, #0
 80170e2:	4b7d      	ldr	r3, [pc, #500]	; (80172d8 <_tzset_unlocked_r+0x2e0>)
 80170e4:	601a      	str	r2, [r3, #0]
 80170e6:	e7a0      	b.n	801702a <_tzset_unlocked_r+0x32>
 80170e8:	f7e9 f815 	bl	8000116 <strcmp>
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d1a1      	bne.n	8017034 <_tzset_unlocked_r+0x3c>
 80170f0:	e79b      	b.n	801702a <_tzset_unlocked_r+0x32>
 80170f2:	0029      	movs	r1, r5
 80170f4:	f7ff fea6 	bl	8016e44 <strcpy>
 80170f8:	e7a9      	b.n	801704e <_tzset_unlocked_r+0x56>
 80170fa:	2201      	movs	r2, #1
 80170fc:	3b2b      	subs	r3, #43	; 0x2b
 80170fe:	9204      	str	r2, [sp, #16]
 8017100:	425a      	negs	r2, r3
 8017102:	4153      	adcs	r3, r2
 8017104:	18e4      	adds	r4, r4, r3
 8017106:	e7b7      	b.n	8017078 <_tzset_unlocked_r+0x80>
 8017108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801710a:	606e      	str	r6, [r5, #4]
 801710c:	18e5      	adds	r5, r4, r3
 801710e:	5ce3      	ldrb	r3, [r4, r3]
 8017110:	2b2d      	cmp	r3, #45	; 0x2d
 8017112:	d000      	beq.n	8017116 <_tzset_unlocked_r+0x11e>
 8017114:	e093      	b.n	801723e <_tzset_unlocked_r+0x246>
 8017116:	3b2e      	subs	r3, #46	; 0x2e
 8017118:	3501      	adds	r5, #1
 801711a:	9304      	str	r3, [sp, #16]
 801711c:	2416      	movs	r4, #22
 801711e:	2300      	movs	r3, #0
 8017120:	aa02      	add	r2, sp, #8
 8017122:	18a4      	adds	r4, r4, r2
 8017124:	ae08      	add	r6, sp, #32
 8017126:	8293      	strh	r3, [r2, #20]
 8017128:	8023      	strh	r3, [r4, #0]
 801712a:	8033      	strh	r3, [r6, #0]
 801712c:	930a      	str	r3, [sp, #40]	; 0x28
 801712e:	ab0a      	add	r3, sp, #40	; 0x28
 8017130:	0028      	movs	r0, r5
 8017132:	496d      	ldr	r1, [pc, #436]	; (80172e8 <_tzset_unlocked_r+0x2f0>)
 8017134:	9303      	str	r3, [sp, #12]
 8017136:	9602      	str	r6, [sp, #8]
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	9400      	str	r4, [sp, #0]
 801713c:	aa07      	add	r2, sp, #28
 801713e:	f000 fd2f 	bl	8017ba0 <siscanf>
 8017142:	2800      	cmp	r0, #0
 8017144:	dd00      	ble.n	8017148 <_tzset_unlocked_r+0x150>
 8017146:	e081      	b.n	801724c <_tzset_unlocked_r+0x254>
 8017148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714a:	4a69      	ldr	r2, [pc, #420]	; (80172f0 <_tzset_unlocked_r+0x2f8>)
 801714c:	189c      	adds	r4, r3, r2
 801714e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017150:	653c      	str	r4, [r7, #80]	; 0x50
 8017152:	003c      	movs	r4, r7
 8017154:	18ed      	adds	r5, r5, r3
 8017156:	2300      	movs	r3, #0
 8017158:	3408      	adds	r4, #8
 801715a:	9305      	str	r3, [sp, #20]
 801715c:	782b      	ldrb	r3, [r5, #0]
 801715e:	3b2c      	subs	r3, #44	; 0x2c
 8017160:	425a      	negs	r2, r3
 8017162:	4153      	adcs	r3, r2
 8017164:	18ed      	adds	r5, r5, r3
 8017166:	782b      	ldrb	r3, [r5, #0]
 8017168:	9304      	str	r3, [sp, #16]
 801716a:	2b4d      	cmp	r3, #77	; 0x4d
 801716c:	d000      	beq.n	8017170 <_tzset_unlocked_r+0x178>
 801716e:	e07d      	b.n	801726c <_tzset_unlocked_r+0x274>
 8017170:	261a      	movs	r6, #26
 8017172:	ab02      	add	r3, sp, #8
 8017174:	18f6      	adds	r6, r6, r3
 8017176:	ab0a      	add	r3, sp, #40	; 0x28
 8017178:	9303      	str	r3, [sp, #12]
 801717a:	231e      	movs	r3, #30
 801717c:	aa02      	add	r2, sp, #8
 801717e:	189b      	adds	r3, r3, r2
 8017180:	9302      	str	r3, [sp, #8]
 8017182:	ab0a      	add	r3, sp, #40	; 0x28
 8017184:	9301      	str	r3, [sp, #4]
 8017186:	ab09      	add	r3, sp, #36	; 0x24
 8017188:	9300      	str	r3, [sp, #0]
 801718a:	0032      	movs	r2, r6
 801718c:	0028      	movs	r0, r5
 801718e:	4959      	ldr	r1, [pc, #356]	; (80172f4 <_tzset_unlocked_r+0x2fc>)
 8017190:	ab0a      	add	r3, sp, #40	; 0x28
 8017192:	f000 fd05 	bl	8017ba0 <siscanf>
 8017196:	2803      	cmp	r0, #3
 8017198:	d000      	beq.n	801719c <_tzset_unlocked_r+0x1a4>
 801719a:	e746      	b.n	801702a <_tzset_unlocked_r+0x32>
 801719c:	8831      	ldrh	r1, [r6, #0]
 801719e:	1e4b      	subs	r3, r1, #1
 80171a0:	2b0b      	cmp	r3, #11
 80171a2:	d900      	bls.n	80171a6 <_tzset_unlocked_r+0x1ae>
 80171a4:	e741      	b.n	801702a <_tzset_unlocked_r+0x32>
 80171a6:	ab02      	add	r3, sp, #8
 80171a8:	8b9a      	ldrh	r2, [r3, #28]
 80171aa:	1e53      	subs	r3, r2, #1
 80171ac:	2b04      	cmp	r3, #4
 80171ae:	d900      	bls.n	80171b2 <_tzset_unlocked_r+0x1ba>
 80171b0:	e73b      	b.n	801702a <_tzset_unlocked_r+0x32>
 80171b2:	ab02      	add	r3, sp, #8
 80171b4:	8bdb      	ldrh	r3, [r3, #30]
 80171b6:	2b06      	cmp	r3, #6
 80171b8:	d900      	bls.n	80171bc <_tzset_unlocked_r+0x1c4>
 80171ba:	e736      	b.n	801702a <_tzset_unlocked_r+0x32>
 80171bc:	9804      	ldr	r0, [sp, #16]
 80171be:	6061      	str	r1, [r4, #4]
 80171c0:	7020      	strb	r0, [r4, #0]
 80171c2:	60a2      	str	r2, [r4, #8]
 80171c4:	60e3      	str	r3, [r4, #12]
 80171c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171c8:	18eb      	adds	r3, r5, r3
 80171ca:	9304      	str	r3, [sp, #16]
 80171cc:	2302      	movs	r3, #2
 80171ce:	2616      	movs	r6, #22
 80171d0:	aa07      	add	r2, sp, #28
 80171d2:	8013      	strh	r3, [r2, #0]
 80171d4:	ab02      	add	r3, sp, #8
 80171d6:	18f6      	adds	r6, r6, r3
 80171d8:	2300      	movs	r3, #0
 80171da:	ad08      	add	r5, sp, #32
 80171dc:	8033      	strh	r3, [r6, #0]
 80171de:	802b      	strh	r3, [r5, #0]
 80171e0:	930a      	str	r3, [sp, #40]	; 0x28
 80171e2:	9b04      	ldr	r3, [sp, #16]
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	2b2f      	cmp	r3, #47	; 0x2f
 80171e8:	d108      	bne.n	80171fc <_tzset_unlocked_r+0x204>
 80171ea:	ab0a      	add	r3, sp, #40	; 0x28
 80171ec:	4942      	ldr	r1, [pc, #264]	; (80172f8 <_tzset_unlocked_r+0x300>)
 80171ee:	9804      	ldr	r0, [sp, #16]
 80171f0:	9303      	str	r3, [sp, #12]
 80171f2:	9502      	str	r5, [sp, #8]
 80171f4:	9301      	str	r3, [sp, #4]
 80171f6:	9600      	str	r6, [sp, #0]
 80171f8:	f000 fcd2 	bl	8017ba0 <siscanf>
 80171fc:	233c      	movs	r3, #60	; 0x3c
 80171fe:	8832      	ldrh	r2, [r6, #0]
 8017200:	4353      	muls	r3, r2
 8017202:	882a      	ldrh	r2, [r5, #0]
 8017204:	9d04      	ldr	r5, [sp, #16]
 8017206:	189b      	adds	r3, r3, r2
 8017208:	aa07      	add	r2, sp, #28
 801720a:	8811      	ldrh	r1, [r2, #0]
 801720c:	22e1      	movs	r2, #225	; 0xe1
 801720e:	0112      	lsls	r2, r2, #4
 8017210:	434a      	muls	r2, r1
 8017212:	189b      	adds	r3, r3, r2
 8017214:	6123      	str	r3, [r4, #16]
 8017216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017218:	3428      	adds	r4, #40	; 0x28
 801721a:	469c      	mov	ip, r3
 801721c:	9b05      	ldr	r3, [sp, #20]
 801721e:	4465      	add	r5, ip
 8017220:	2b01      	cmp	r3, #1
 8017222:	d121      	bne.n	8017268 <_tzset_unlocked_r+0x270>
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f7ff fe15 	bl	8016e54 <__tzcalc_limits>
 801722a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801722c:	4b28      	ldr	r3, [pc, #160]	; (80172d0 <_tzset_unlocked_r+0x2d8>)
 801722e:	601a      	str	r2, [r3, #0]
 8017230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017232:	1a9b      	subs	r3, r3, r2
 8017234:	1e5a      	subs	r2, r3, #1
 8017236:	4193      	sbcs	r3, r2
 8017238:	4a27      	ldr	r2, [pc, #156]	; (80172d8 <_tzset_unlocked_r+0x2e0>)
 801723a:	6013      	str	r3, [r2, #0]
 801723c:	e6f5      	b.n	801702a <_tzset_unlocked_r+0x32>
 801723e:	2201      	movs	r2, #1
 8017240:	3b2b      	subs	r3, #43	; 0x2b
 8017242:	9204      	str	r2, [sp, #16]
 8017244:	425a      	negs	r2, r3
 8017246:	4153      	adcs	r3, r2
 8017248:	18ed      	adds	r5, r5, r3
 801724a:	e767      	b.n	801711c <_tzset_unlocked_r+0x124>
 801724c:	233c      	movs	r3, #60	; 0x3c
 801724e:	8822      	ldrh	r2, [r4, #0]
 8017250:	9c04      	ldr	r4, [sp, #16]
 8017252:	4353      	muls	r3, r2
 8017254:	8832      	ldrh	r2, [r6, #0]
 8017256:	189b      	adds	r3, r3, r2
 8017258:	aa02      	add	r2, sp, #8
 801725a:	8a91      	ldrh	r1, [r2, #20]
 801725c:	22e1      	movs	r2, #225	; 0xe1
 801725e:	0112      	lsls	r2, r2, #4
 8017260:	434a      	muls	r2, r1
 8017262:	189b      	adds	r3, r3, r2
 8017264:	435c      	muls	r4, r3
 8017266:	e772      	b.n	801714e <_tzset_unlocked_r+0x156>
 8017268:	2301      	movs	r3, #1
 801726a:	e776      	b.n	801715a <_tzset_unlocked_r+0x162>
 801726c:	9b04      	ldr	r3, [sp, #16]
 801726e:	2644      	movs	r6, #68	; 0x44
 8017270:	2b4a      	cmp	r3, #74	; 0x4a
 8017272:	d101      	bne.n	8017278 <_tzset_unlocked_r+0x280>
 8017274:	001e      	movs	r6, r3
 8017276:	3501      	adds	r5, #1
 8017278:	220a      	movs	r2, #10
 801727a:	0028      	movs	r0, r5
 801727c:	a90b      	add	r1, sp, #44	; 0x2c
 801727e:	f000 fda5 	bl	8017dcc <strtoul>
 8017282:	231e      	movs	r3, #30
 8017284:	aa02      	add	r2, sp, #8
 8017286:	189b      	adds	r3, r3, r2
 8017288:	8018      	strh	r0, [r3, #0]
 801728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	42ab      	cmp	r3, r5
 8017290:	d116      	bne.n	80172c0 <_tzset_unlocked_r+0x2c8>
 8017292:	9b05      	ldr	r3, [sp, #20]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d108      	bne.n	80172aa <_tzset_unlocked_r+0x2b2>
 8017298:	334d      	adds	r3, #77	; 0x4d
 801729a:	723b      	strb	r3, [r7, #8]
 801729c:	3b4a      	subs	r3, #74	; 0x4a
 801729e:	60fb      	str	r3, [r7, #12]
 80172a0:	3b01      	subs	r3, #1
 80172a2:	613b      	str	r3, [r7, #16]
 80172a4:	9b05      	ldr	r3, [sp, #20]
 80172a6:	617b      	str	r3, [r7, #20]
 80172a8:	e790      	b.n	80171cc <_tzset_unlocked_r+0x1d4>
 80172aa:	003b      	movs	r3, r7
 80172ac:	224d      	movs	r2, #77	; 0x4d
 80172ae:	3330      	adds	r3, #48	; 0x30
 80172b0:	701a      	strb	r2, [r3, #0]
 80172b2:	230b      	movs	r3, #11
 80172b4:	637b      	str	r3, [r7, #52]	; 0x34
 80172b6:	3b0a      	subs	r3, #10
 80172b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80172ba:	2300      	movs	r3, #0
 80172bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80172be:	e785      	b.n	80171cc <_tzset_unlocked_r+0x1d4>
 80172c0:	b280      	uxth	r0, r0
 80172c2:	7026      	strb	r6, [r4, #0]
 80172c4:	60e0      	str	r0, [r4, #12]
 80172c6:	e781      	b.n	80171cc <_tzset_unlocked_r+0x1d4>
 80172c8:	0801ae0b 	.word	0x0801ae0b
 80172cc:	20001dd4 	.word	0x20001dd4
 80172d0:	20001ddc 	.word	0x20001ddc
 80172d4:	0801ae0e 	.word	0x0801ae0e
 80172d8:	20001dd8 	.word	0x20001dd8
 80172dc:	200002a8 	.word	0x200002a8
 80172e0:	0801ae12 	.word	0x0801ae12
 80172e4:	20001dc7 	.word	0x20001dc7
 80172e8:	0801ae35 	.word	0x0801ae35
 80172ec:	20001dbc 	.word	0x20001dbc
 80172f0:	fffff1f0 	.word	0xfffff1f0
 80172f4:	0801ae21 	.word	0x0801ae21
 80172f8:	0801ae34 	.word	0x0801ae34

080172fc <__swbuf_r>:
 80172fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172fe:	0005      	movs	r5, r0
 8017300:	000e      	movs	r6, r1
 8017302:	0014      	movs	r4, r2
 8017304:	2800      	cmp	r0, #0
 8017306:	d004      	beq.n	8017312 <__swbuf_r+0x16>
 8017308:	6983      	ldr	r3, [r0, #24]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d101      	bne.n	8017312 <__swbuf_r+0x16>
 801730e:	f000 fa0f 	bl	8017730 <__sinit>
 8017312:	4b22      	ldr	r3, [pc, #136]	; (801739c <__swbuf_r+0xa0>)
 8017314:	429c      	cmp	r4, r3
 8017316:	d12e      	bne.n	8017376 <__swbuf_r+0x7a>
 8017318:	686c      	ldr	r4, [r5, #4]
 801731a:	69a3      	ldr	r3, [r4, #24]
 801731c:	60a3      	str	r3, [r4, #8]
 801731e:	89a3      	ldrh	r3, [r4, #12]
 8017320:	071b      	lsls	r3, r3, #28
 8017322:	d532      	bpl.n	801738a <__swbuf_r+0x8e>
 8017324:	6923      	ldr	r3, [r4, #16]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d02f      	beq.n	801738a <__swbuf_r+0x8e>
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	6922      	ldr	r2, [r4, #16]
 801732e:	b2f7      	uxtb	r7, r6
 8017330:	1a98      	subs	r0, r3, r2
 8017332:	6963      	ldr	r3, [r4, #20]
 8017334:	b2f6      	uxtb	r6, r6
 8017336:	4283      	cmp	r3, r0
 8017338:	dc05      	bgt.n	8017346 <__swbuf_r+0x4a>
 801733a:	0021      	movs	r1, r4
 801733c:	0028      	movs	r0, r5
 801733e:	f000 f955 	bl	80175ec <_fflush_r>
 8017342:	2800      	cmp	r0, #0
 8017344:	d127      	bne.n	8017396 <__swbuf_r+0x9a>
 8017346:	68a3      	ldr	r3, [r4, #8]
 8017348:	3001      	adds	r0, #1
 801734a:	3b01      	subs	r3, #1
 801734c:	60a3      	str	r3, [r4, #8]
 801734e:	6823      	ldr	r3, [r4, #0]
 8017350:	1c5a      	adds	r2, r3, #1
 8017352:	6022      	str	r2, [r4, #0]
 8017354:	701f      	strb	r7, [r3, #0]
 8017356:	6963      	ldr	r3, [r4, #20]
 8017358:	4283      	cmp	r3, r0
 801735a:	d004      	beq.n	8017366 <__swbuf_r+0x6a>
 801735c:	89a3      	ldrh	r3, [r4, #12]
 801735e:	07db      	lsls	r3, r3, #31
 8017360:	d507      	bpl.n	8017372 <__swbuf_r+0x76>
 8017362:	2e0a      	cmp	r6, #10
 8017364:	d105      	bne.n	8017372 <__swbuf_r+0x76>
 8017366:	0021      	movs	r1, r4
 8017368:	0028      	movs	r0, r5
 801736a:	f000 f93f 	bl	80175ec <_fflush_r>
 801736e:	2800      	cmp	r0, #0
 8017370:	d111      	bne.n	8017396 <__swbuf_r+0x9a>
 8017372:	0030      	movs	r0, r6
 8017374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017376:	4b0a      	ldr	r3, [pc, #40]	; (80173a0 <__swbuf_r+0xa4>)
 8017378:	429c      	cmp	r4, r3
 801737a:	d101      	bne.n	8017380 <__swbuf_r+0x84>
 801737c:	68ac      	ldr	r4, [r5, #8]
 801737e:	e7cc      	b.n	801731a <__swbuf_r+0x1e>
 8017380:	4b08      	ldr	r3, [pc, #32]	; (80173a4 <__swbuf_r+0xa8>)
 8017382:	429c      	cmp	r4, r3
 8017384:	d1c9      	bne.n	801731a <__swbuf_r+0x1e>
 8017386:	68ec      	ldr	r4, [r5, #12]
 8017388:	e7c7      	b.n	801731a <__swbuf_r+0x1e>
 801738a:	0021      	movs	r1, r4
 801738c:	0028      	movs	r0, r5
 801738e:	f000 f80b 	bl	80173a8 <__swsetup_r>
 8017392:	2800      	cmp	r0, #0
 8017394:	d0c9      	beq.n	801732a <__swbuf_r+0x2e>
 8017396:	2601      	movs	r6, #1
 8017398:	4276      	negs	r6, r6
 801739a:	e7ea      	b.n	8017372 <__swbuf_r+0x76>
 801739c:	0801ae68 	.word	0x0801ae68
 80173a0:	0801ae88 	.word	0x0801ae88
 80173a4:	0801ae48 	.word	0x0801ae48

080173a8 <__swsetup_r>:
 80173a8:	4b37      	ldr	r3, [pc, #220]	; (8017488 <__swsetup_r+0xe0>)
 80173aa:	b570      	push	{r4, r5, r6, lr}
 80173ac:	681d      	ldr	r5, [r3, #0]
 80173ae:	0006      	movs	r6, r0
 80173b0:	000c      	movs	r4, r1
 80173b2:	2d00      	cmp	r5, #0
 80173b4:	d005      	beq.n	80173c2 <__swsetup_r+0x1a>
 80173b6:	69ab      	ldr	r3, [r5, #24]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d102      	bne.n	80173c2 <__swsetup_r+0x1a>
 80173bc:	0028      	movs	r0, r5
 80173be:	f000 f9b7 	bl	8017730 <__sinit>
 80173c2:	4b32      	ldr	r3, [pc, #200]	; (801748c <__swsetup_r+0xe4>)
 80173c4:	429c      	cmp	r4, r3
 80173c6:	d10f      	bne.n	80173e8 <__swsetup_r+0x40>
 80173c8:	686c      	ldr	r4, [r5, #4]
 80173ca:	230c      	movs	r3, #12
 80173cc:	5ee2      	ldrsh	r2, [r4, r3]
 80173ce:	b293      	uxth	r3, r2
 80173d0:	0711      	lsls	r1, r2, #28
 80173d2:	d42d      	bmi.n	8017430 <__swsetup_r+0x88>
 80173d4:	06d9      	lsls	r1, r3, #27
 80173d6:	d411      	bmi.n	80173fc <__swsetup_r+0x54>
 80173d8:	2309      	movs	r3, #9
 80173da:	2001      	movs	r0, #1
 80173dc:	6033      	str	r3, [r6, #0]
 80173de:	3337      	adds	r3, #55	; 0x37
 80173e0:	4313      	orrs	r3, r2
 80173e2:	81a3      	strh	r3, [r4, #12]
 80173e4:	4240      	negs	r0, r0
 80173e6:	bd70      	pop	{r4, r5, r6, pc}
 80173e8:	4b29      	ldr	r3, [pc, #164]	; (8017490 <__swsetup_r+0xe8>)
 80173ea:	429c      	cmp	r4, r3
 80173ec:	d101      	bne.n	80173f2 <__swsetup_r+0x4a>
 80173ee:	68ac      	ldr	r4, [r5, #8]
 80173f0:	e7eb      	b.n	80173ca <__swsetup_r+0x22>
 80173f2:	4b28      	ldr	r3, [pc, #160]	; (8017494 <__swsetup_r+0xec>)
 80173f4:	429c      	cmp	r4, r3
 80173f6:	d1e8      	bne.n	80173ca <__swsetup_r+0x22>
 80173f8:	68ec      	ldr	r4, [r5, #12]
 80173fa:	e7e6      	b.n	80173ca <__swsetup_r+0x22>
 80173fc:	075b      	lsls	r3, r3, #29
 80173fe:	d513      	bpl.n	8017428 <__swsetup_r+0x80>
 8017400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017402:	2900      	cmp	r1, #0
 8017404:	d008      	beq.n	8017418 <__swsetup_r+0x70>
 8017406:	0023      	movs	r3, r4
 8017408:	3344      	adds	r3, #68	; 0x44
 801740a:	4299      	cmp	r1, r3
 801740c:	d002      	beq.n	8017414 <__swsetup_r+0x6c>
 801740e:	0030      	movs	r0, r6
 8017410:	f7ff f896 	bl	8016540 <_free_r>
 8017414:	2300      	movs	r3, #0
 8017416:	6363      	str	r3, [r4, #52]	; 0x34
 8017418:	2224      	movs	r2, #36	; 0x24
 801741a:	89a3      	ldrh	r3, [r4, #12]
 801741c:	4393      	bics	r3, r2
 801741e:	81a3      	strh	r3, [r4, #12]
 8017420:	2300      	movs	r3, #0
 8017422:	6063      	str	r3, [r4, #4]
 8017424:	6923      	ldr	r3, [r4, #16]
 8017426:	6023      	str	r3, [r4, #0]
 8017428:	2308      	movs	r3, #8
 801742a:	89a2      	ldrh	r2, [r4, #12]
 801742c:	4313      	orrs	r3, r2
 801742e:	81a3      	strh	r3, [r4, #12]
 8017430:	6923      	ldr	r3, [r4, #16]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d10b      	bne.n	801744e <__swsetup_r+0xa6>
 8017436:	21a0      	movs	r1, #160	; 0xa0
 8017438:	2280      	movs	r2, #128	; 0x80
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	0089      	lsls	r1, r1, #2
 801743e:	0092      	lsls	r2, r2, #2
 8017440:	400b      	ands	r3, r1
 8017442:	4293      	cmp	r3, r2
 8017444:	d003      	beq.n	801744e <__swsetup_r+0xa6>
 8017446:	0021      	movs	r1, r4
 8017448:	0030      	movs	r0, r6
 801744a:	f000 fa85 	bl	8017958 <__smakebuf_r>
 801744e:	220c      	movs	r2, #12
 8017450:	5ea3      	ldrsh	r3, [r4, r2]
 8017452:	2001      	movs	r0, #1
 8017454:	001a      	movs	r2, r3
 8017456:	b299      	uxth	r1, r3
 8017458:	4002      	ands	r2, r0
 801745a:	4203      	tst	r3, r0
 801745c:	d00f      	beq.n	801747e <__swsetup_r+0xd6>
 801745e:	2200      	movs	r2, #0
 8017460:	60a2      	str	r2, [r4, #8]
 8017462:	6962      	ldr	r2, [r4, #20]
 8017464:	4252      	negs	r2, r2
 8017466:	61a2      	str	r2, [r4, #24]
 8017468:	2000      	movs	r0, #0
 801746a:	6922      	ldr	r2, [r4, #16]
 801746c:	4282      	cmp	r2, r0
 801746e:	d1ba      	bne.n	80173e6 <__swsetup_r+0x3e>
 8017470:	060a      	lsls	r2, r1, #24
 8017472:	d5b8      	bpl.n	80173e6 <__swsetup_r+0x3e>
 8017474:	2240      	movs	r2, #64	; 0x40
 8017476:	4313      	orrs	r3, r2
 8017478:	81a3      	strh	r3, [r4, #12]
 801747a:	3801      	subs	r0, #1
 801747c:	e7b3      	b.n	80173e6 <__swsetup_r+0x3e>
 801747e:	0788      	lsls	r0, r1, #30
 8017480:	d400      	bmi.n	8017484 <__swsetup_r+0xdc>
 8017482:	6962      	ldr	r2, [r4, #20]
 8017484:	60a2      	str	r2, [r4, #8]
 8017486:	e7ef      	b.n	8017468 <__swsetup_r+0xc0>
 8017488:	20000244 	.word	0x20000244
 801748c:	0801ae68 	.word	0x0801ae68
 8017490:	0801ae88 	.word	0x0801ae88
 8017494:	0801ae48 	.word	0x0801ae48

08017498 <abort>:
 8017498:	2006      	movs	r0, #6
 801749a:	b510      	push	{r4, lr}
 801749c:	f000 fb60 	bl	8017b60 <raise>
 80174a0:	2001      	movs	r0, #1
 80174a2:	f001 f9bf 	bl	8018824 <_exit>

080174a6 <div>:
 80174a6:	b570      	push	{r4, r5, r6, lr}
 80174a8:	000e      	movs	r6, r1
 80174aa:	0004      	movs	r4, r0
 80174ac:	0011      	movs	r1, r2
 80174ae:	0030      	movs	r0, r6
 80174b0:	0015      	movs	r5, r2
 80174b2:	f7e8 ffc9 	bl	8000448 <__aeabi_idivmod>
 80174b6:	2e00      	cmp	r6, #0
 80174b8:	db07      	blt.n	80174ca <div+0x24>
 80174ba:	2900      	cmp	r1, #0
 80174bc:	da01      	bge.n	80174c2 <div+0x1c>
 80174be:	3001      	adds	r0, #1
 80174c0:	1b49      	subs	r1, r1, r5
 80174c2:	6020      	str	r0, [r4, #0]
 80174c4:	6061      	str	r1, [r4, #4]
 80174c6:	0020      	movs	r0, r4
 80174c8:	bd70      	pop	{r4, r5, r6, pc}
 80174ca:	2900      	cmp	r1, #0
 80174cc:	ddf9      	ble.n	80174c2 <div+0x1c>
 80174ce:	3801      	subs	r0, #1
 80174d0:	1949      	adds	r1, r1, r5
 80174d2:	e7f6      	b.n	80174c2 <div+0x1c>

080174d4 <__sflush_r>:
 80174d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174d6:	898b      	ldrh	r3, [r1, #12]
 80174d8:	0005      	movs	r5, r0
 80174da:	000c      	movs	r4, r1
 80174dc:	071a      	lsls	r2, r3, #28
 80174de:	d45f      	bmi.n	80175a0 <__sflush_r+0xcc>
 80174e0:	684a      	ldr	r2, [r1, #4]
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	dc04      	bgt.n	80174f0 <__sflush_r+0x1c>
 80174e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80174e8:	2a00      	cmp	r2, #0
 80174ea:	dc01      	bgt.n	80174f0 <__sflush_r+0x1c>
 80174ec:	2000      	movs	r0, #0
 80174ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80174f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80174f2:	2f00      	cmp	r7, #0
 80174f4:	d0fa      	beq.n	80174ec <__sflush_r+0x18>
 80174f6:	2200      	movs	r2, #0
 80174f8:	2180      	movs	r1, #128	; 0x80
 80174fa:	682e      	ldr	r6, [r5, #0]
 80174fc:	602a      	str	r2, [r5, #0]
 80174fe:	001a      	movs	r2, r3
 8017500:	0149      	lsls	r1, r1, #5
 8017502:	400a      	ands	r2, r1
 8017504:	420b      	tst	r3, r1
 8017506:	d034      	beq.n	8017572 <__sflush_r+0x9e>
 8017508:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801750a:	89a3      	ldrh	r3, [r4, #12]
 801750c:	075b      	lsls	r3, r3, #29
 801750e:	d506      	bpl.n	801751e <__sflush_r+0x4a>
 8017510:	6863      	ldr	r3, [r4, #4]
 8017512:	1ac0      	subs	r0, r0, r3
 8017514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017516:	2b00      	cmp	r3, #0
 8017518:	d001      	beq.n	801751e <__sflush_r+0x4a>
 801751a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801751c:	1ac0      	subs	r0, r0, r3
 801751e:	0002      	movs	r2, r0
 8017520:	6a21      	ldr	r1, [r4, #32]
 8017522:	2300      	movs	r3, #0
 8017524:	0028      	movs	r0, r5
 8017526:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017528:	47b8      	blx	r7
 801752a:	89a1      	ldrh	r1, [r4, #12]
 801752c:	1c43      	adds	r3, r0, #1
 801752e:	d106      	bne.n	801753e <__sflush_r+0x6a>
 8017530:	682b      	ldr	r3, [r5, #0]
 8017532:	2b1d      	cmp	r3, #29
 8017534:	d831      	bhi.n	801759a <__sflush_r+0xc6>
 8017536:	4a2c      	ldr	r2, [pc, #176]	; (80175e8 <__sflush_r+0x114>)
 8017538:	40da      	lsrs	r2, r3
 801753a:	07d3      	lsls	r3, r2, #31
 801753c:	d52d      	bpl.n	801759a <__sflush_r+0xc6>
 801753e:	2300      	movs	r3, #0
 8017540:	6063      	str	r3, [r4, #4]
 8017542:	6923      	ldr	r3, [r4, #16]
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	04cb      	lsls	r3, r1, #19
 8017548:	d505      	bpl.n	8017556 <__sflush_r+0x82>
 801754a:	1c43      	adds	r3, r0, #1
 801754c:	d102      	bne.n	8017554 <__sflush_r+0x80>
 801754e:	682b      	ldr	r3, [r5, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d100      	bne.n	8017556 <__sflush_r+0x82>
 8017554:	6560      	str	r0, [r4, #84]	; 0x54
 8017556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017558:	602e      	str	r6, [r5, #0]
 801755a:	2900      	cmp	r1, #0
 801755c:	d0c6      	beq.n	80174ec <__sflush_r+0x18>
 801755e:	0023      	movs	r3, r4
 8017560:	3344      	adds	r3, #68	; 0x44
 8017562:	4299      	cmp	r1, r3
 8017564:	d002      	beq.n	801756c <__sflush_r+0x98>
 8017566:	0028      	movs	r0, r5
 8017568:	f7fe ffea 	bl	8016540 <_free_r>
 801756c:	2000      	movs	r0, #0
 801756e:	6360      	str	r0, [r4, #52]	; 0x34
 8017570:	e7bd      	b.n	80174ee <__sflush_r+0x1a>
 8017572:	2301      	movs	r3, #1
 8017574:	0028      	movs	r0, r5
 8017576:	6a21      	ldr	r1, [r4, #32]
 8017578:	47b8      	blx	r7
 801757a:	1c43      	adds	r3, r0, #1
 801757c:	d1c5      	bne.n	801750a <__sflush_r+0x36>
 801757e:	682b      	ldr	r3, [r5, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d0c2      	beq.n	801750a <__sflush_r+0x36>
 8017584:	2b1d      	cmp	r3, #29
 8017586:	d001      	beq.n	801758c <__sflush_r+0xb8>
 8017588:	2b16      	cmp	r3, #22
 801758a:	d101      	bne.n	8017590 <__sflush_r+0xbc>
 801758c:	602e      	str	r6, [r5, #0]
 801758e:	e7ad      	b.n	80174ec <__sflush_r+0x18>
 8017590:	2340      	movs	r3, #64	; 0x40
 8017592:	89a2      	ldrh	r2, [r4, #12]
 8017594:	4313      	orrs	r3, r2
 8017596:	81a3      	strh	r3, [r4, #12]
 8017598:	e7a9      	b.n	80174ee <__sflush_r+0x1a>
 801759a:	2340      	movs	r3, #64	; 0x40
 801759c:	430b      	orrs	r3, r1
 801759e:	e7fa      	b.n	8017596 <__sflush_r+0xc2>
 80175a0:	690f      	ldr	r7, [r1, #16]
 80175a2:	2f00      	cmp	r7, #0
 80175a4:	d0a2      	beq.n	80174ec <__sflush_r+0x18>
 80175a6:	680a      	ldr	r2, [r1, #0]
 80175a8:	600f      	str	r7, [r1, #0]
 80175aa:	1bd2      	subs	r2, r2, r7
 80175ac:	9201      	str	r2, [sp, #4]
 80175ae:	2200      	movs	r2, #0
 80175b0:	079b      	lsls	r3, r3, #30
 80175b2:	d100      	bne.n	80175b6 <__sflush_r+0xe2>
 80175b4:	694a      	ldr	r2, [r1, #20]
 80175b6:	60a2      	str	r2, [r4, #8]
 80175b8:	9b01      	ldr	r3, [sp, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	dc00      	bgt.n	80175c0 <__sflush_r+0xec>
 80175be:	e795      	b.n	80174ec <__sflush_r+0x18>
 80175c0:	003a      	movs	r2, r7
 80175c2:	0028      	movs	r0, r5
 80175c4:	9b01      	ldr	r3, [sp, #4]
 80175c6:	6a21      	ldr	r1, [r4, #32]
 80175c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175ca:	47b0      	blx	r6
 80175cc:	2800      	cmp	r0, #0
 80175ce:	dc06      	bgt.n	80175de <__sflush_r+0x10a>
 80175d0:	2340      	movs	r3, #64	; 0x40
 80175d2:	2001      	movs	r0, #1
 80175d4:	89a2      	ldrh	r2, [r4, #12]
 80175d6:	4240      	negs	r0, r0
 80175d8:	4313      	orrs	r3, r2
 80175da:	81a3      	strh	r3, [r4, #12]
 80175dc:	e787      	b.n	80174ee <__sflush_r+0x1a>
 80175de:	9b01      	ldr	r3, [sp, #4]
 80175e0:	183f      	adds	r7, r7, r0
 80175e2:	1a1b      	subs	r3, r3, r0
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	e7e7      	b.n	80175b8 <__sflush_r+0xe4>
 80175e8:	20400001 	.word	0x20400001

080175ec <_fflush_r>:
 80175ec:	690b      	ldr	r3, [r1, #16]
 80175ee:	b570      	push	{r4, r5, r6, lr}
 80175f0:	0005      	movs	r5, r0
 80175f2:	000c      	movs	r4, r1
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d102      	bne.n	80175fe <_fflush_r+0x12>
 80175f8:	2500      	movs	r5, #0
 80175fa:	0028      	movs	r0, r5
 80175fc:	bd70      	pop	{r4, r5, r6, pc}
 80175fe:	2800      	cmp	r0, #0
 8017600:	d004      	beq.n	801760c <_fflush_r+0x20>
 8017602:	6983      	ldr	r3, [r0, #24]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d101      	bne.n	801760c <_fflush_r+0x20>
 8017608:	f000 f892 	bl	8017730 <__sinit>
 801760c:	4b14      	ldr	r3, [pc, #80]	; (8017660 <_fflush_r+0x74>)
 801760e:	429c      	cmp	r4, r3
 8017610:	d11b      	bne.n	801764a <_fflush_r+0x5e>
 8017612:	686c      	ldr	r4, [r5, #4]
 8017614:	220c      	movs	r2, #12
 8017616:	5ea3      	ldrsh	r3, [r4, r2]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d0ed      	beq.n	80175f8 <_fflush_r+0xc>
 801761c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801761e:	07d2      	lsls	r2, r2, #31
 8017620:	d404      	bmi.n	801762c <_fflush_r+0x40>
 8017622:	059b      	lsls	r3, r3, #22
 8017624:	d402      	bmi.n	801762c <_fflush_r+0x40>
 8017626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017628:	f000 f96a 	bl	8017900 <__retarget_lock_acquire_recursive>
 801762c:	0028      	movs	r0, r5
 801762e:	0021      	movs	r1, r4
 8017630:	f7ff ff50 	bl	80174d4 <__sflush_r>
 8017634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017636:	0005      	movs	r5, r0
 8017638:	07db      	lsls	r3, r3, #31
 801763a:	d4de      	bmi.n	80175fa <_fflush_r+0xe>
 801763c:	89a3      	ldrh	r3, [r4, #12]
 801763e:	059b      	lsls	r3, r3, #22
 8017640:	d4db      	bmi.n	80175fa <_fflush_r+0xe>
 8017642:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017644:	f000 f95e 	bl	8017904 <__retarget_lock_release_recursive>
 8017648:	e7d7      	b.n	80175fa <_fflush_r+0xe>
 801764a:	4b06      	ldr	r3, [pc, #24]	; (8017664 <_fflush_r+0x78>)
 801764c:	429c      	cmp	r4, r3
 801764e:	d101      	bne.n	8017654 <_fflush_r+0x68>
 8017650:	68ac      	ldr	r4, [r5, #8]
 8017652:	e7df      	b.n	8017614 <_fflush_r+0x28>
 8017654:	4b04      	ldr	r3, [pc, #16]	; (8017668 <_fflush_r+0x7c>)
 8017656:	429c      	cmp	r4, r3
 8017658:	d1dc      	bne.n	8017614 <_fflush_r+0x28>
 801765a:	68ec      	ldr	r4, [r5, #12]
 801765c:	e7da      	b.n	8017614 <_fflush_r+0x28>
 801765e:	46c0      	nop			; (mov r8, r8)
 8017660:	0801ae68 	.word	0x0801ae68
 8017664:	0801ae88 	.word	0x0801ae88
 8017668:	0801ae48 	.word	0x0801ae48

0801766c <std>:
 801766c:	2300      	movs	r3, #0
 801766e:	b510      	push	{r4, lr}
 8017670:	0004      	movs	r4, r0
 8017672:	6003      	str	r3, [r0, #0]
 8017674:	6043      	str	r3, [r0, #4]
 8017676:	6083      	str	r3, [r0, #8]
 8017678:	8181      	strh	r1, [r0, #12]
 801767a:	6643      	str	r3, [r0, #100]	; 0x64
 801767c:	0019      	movs	r1, r3
 801767e:	81c2      	strh	r2, [r0, #14]
 8017680:	6103      	str	r3, [r0, #16]
 8017682:	6143      	str	r3, [r0, #20]
 8017684:	6183      	str	r3, [r0, #24]
 8017686:	2208      	movs	r2, #8
 8017688:	305c      	adds	r0, #92	; 0x5c
 801768a:	f7fe fcb8 	bl	8015ffe <memset>
 801768e:	4b05      	ldr	r3, [pc, #20]	; (80176a4 <std+0x38>)
 8017690:	6224      	str	r4, [r4, #32]
 8017692:	6263      	str	r3, [r4, #36]	; 0x24
 8017694:	4b04      	ldr	r3, [pc, #16]	; (80176a8 <std+0x3c>)
 8017696:	62a3      	str	r3, [r4, #40]	; 0x28
 8017698:	4b04      	ldr	r3, [pc, #16]	; (80176ac <std+0x40>)
 801769a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801769c:	4b04      	ldr	r3, [pc, #16]	; (80176b0 <std+0x44>)
 801769e:	6323      	str	r3, [r4, #48]	; 0x30
 80176a0:	bd10      	pop	{r4, pc}
 80176a2:	46c0      	nop			; (mov r8, r8)
 80176a4:	08017bf1 	.word	0x08017bf1
 80176a8:	08017c1d 	.word	0x08017c1d
 80176ac:	08017c55 	.word	0x08017c55
 80176b0:	08017c81 	.word	0x08017c81

080176b4 <_cleanup_r>:
 80176b4:	b510      	push	{r4, lr}
 80176b6:	4902      	ldr	r1, [pc, #8]	; (80176c0 <_cleanup_r+0xc>)
 80176b8:	f000 f8ba 	bl	8017830 <_fwalk_reent>
 80176bc:	bd10      	pop	{r4, pc}
 80176be:	46c0      	nop			; (mov r8, r8)
 80176c0:	080175ed 	.word	0x080175ed

080176c4 <__sfmoreglue>:
 80176c4:	b570      	push	{r4, r5, r6, lr}
 80176c6:	2568      	movs	r5, #104	; 0x68
 80176c8:	1e4a      	subs	r2, r1, #1
 80176ca:	4355      	muls	r5, r2
 80176cc:	000e      	movs	r6, r1
 80176ce:	0029      	movs	r1, r5
 80176d0:	3174      	adds	r1, #116	; 0x74
 80176d2:	f7fe ffa1 	bl	8016618 <_malloc_r>
 80176d6:	1e04      	subs	r4, r0, #0
 80176d8:	d008      	beq.n	80176ec <__sfmoreglue+0x28>
 80176da:	2100      	movs	r1, #0
 80176dc:	002a      	movs	r2, r5
 80176de:	6001      	str	r1, [r0, #0]
 80176e0:	6046      	str	r6, [r0, #4]
 80176e2:	300c      	adds	r0, #12
 80176e4:	60a0      	str	r0, [r4, #8]
 80176e6:	3268      	adds	r2, #104	; 0x68
 80176e8:	f7fe fc89 	bl	8015ffe <memset>
 80176ec:	0020      	movs	r0, r4
 80176ee:	bd70      	pop	{r4, r5, r6, pc}

080176f0 <__sfp_lock_acquire>:
 80176f0:	b510      	push	{r4, lr}
 80176f2:	4802      	ldr	r0, [pc, #8]	; (80176fc <__sfp_lock_acquire+0xc>)
 80176f4:	f000 f904 	bl	8017900 <__retarget_lock_acquire_recursive>
 80176f8:	bd10      	pop	{r4, pc}
 80176fa:	46c0      	nop			; (mov r8, r8)
 80176fc:	20001de2 	.word	0x20001de2

08017700 <__sfp_lock_release>:
 8017700:	b510      	push	{r4, lr}
 8017702:	4802      	ldr	r0, [pc, #8]	; (801770c <__sfp_lock_release+0xc>)
 8017704:	f000 f8fe 	bl	8017904 <__retarget_lock_release_recursive>
 8017708:	bd10      	pop	{r4, pc}
 801770a:	46c0      	nop			; (mov r8, r8)
 801770c:	20001de2 	.word	0x20001de2

08017710 <__sinit_lock_acquire>:
 8017710:	b510      	push	{r4, lr}
 8017712:	4802      	ldr	r0, [pc, #8]	; (801771c <__sinit_lock_acquire+0xc>)
 8017714:	f000 f8f4 	bl	8017900 <__retarget_lock_acquire_recursive>
 8017718:	bd10      	pop	{r4, pc}
 801771a:	46c0      	nop			; (mov r8, r8)
 801771c:	20001de3 	.word	0x20001de3

08017720 <__sinit_lock_release>:
 8017720:	b510      	push	{r4, lr}
 8017722:	4802      	ldr	r0, [pc, #8]	; (801772c <__sinit_lock_release+0xc>)
 8017724:	f000 f8ee 	bl	8017904 <__retarget_lock_release_recursive>
 8017728:	bd10      	pop	{r4, pc}
 801772a:	46c0      	nop			; (mov r8, r8)
 801772c:	20001de3 	.word	0x20001de3

08017730 <__sinit>:
 8017730:	b513      	push	{r0, r1, r4, lr}
 8017732:	0004      	movs	r4, r0
 8017734:	f7ff ffec 	bl	8017710 <__sinit_lock_acquire>
 8017738:	69a3      	ldr	r3, [r4, #24]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d002      	beq.n	8017744 <__sinit+0x14>
 801773e:	f7ff ffef 	bl	8017720 <__sinit_lock_release>
 8017742:	bd13      	pop	{r0, r1, r4, pc}
 8017744:	64a3      	str	r3, [r4, #72]	; 0x48
 8017746:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017748:	6523      	str	r3, [r4, #80]	; 0x50
 801774a:	4b13      	ldr	r3, [pc, #76]	; (8017798 <__sinit+0x68>)
 801774c:	4a13      	ldr	r2, [pc, #76]	; (801779c <__sinit+0x6c>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	62a2      	str	r2, [r4, #40]	; 0x28
 8017752:	9301      	str	r3, [sp, #4]
 8017754:	42a3      	cmp	r3, r4
 8017756:	d101      	bne.n	801775c <__sinit+0x2c>
 8017758:	2301      	movs	r3, #1
 801775a:	61a3      	str	r3, [r4, #24]
 801775c:	0020      	movs	r0, r4
 801775e:	f000 f81f 	bl	80177a0 <__sfp>
 8017762:	6060      	str	r0, [r4, #4]
 8017764:	0020      	movs	r0, r4
 8017766:	f000 f81b 	bl	80177a0 <__sfp>
 801776a:	60a0      	str	r0, [r4, #8]
 801776c:	0020      	movs	r0, r4
 801776e:	f000 f817 	bl	80177a0 <__sfp>
 8017772:	2200      	movs	r2, #0
 8017774:	2104      	movs	r1, #4
 8017776:	60e0      	str	r0, [r4, #12]
 8017778:	6860      	ldr	r0, [r4, #4]
 801777a:	f7ff ff77 	bl	801766c <std>
 801777e:	2201      	movs	r2, #1
 8017780:	2109      	movs	r1, #9
 8017782:	68a0      	ldr	r0, [r4, #8]
 8017784:	f7ff ff72 	bl	801766c <std>
 8017788:	2202      	movs	r2, #2
 801778a:	2112      	movs	r1, #18
 801778c:	68e0      	ldr	r0, [r4, #12]
 801778e:	f7ff ff6d 	bl	801766c <std>
 8017792:	2301      	movs	r3, #1
 8017794:	61a3      	str	r3, [r4, #24]
 8017796:	e7d2      	b.n	801773e <__sinit+0xe>
 8017798:	0801ad74 	.word	0x0801ad74
 801779c:	080176b5 	.word	0x080176b5

080177a0 <__sfp>:
 80177a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177a2:	0007      	movs	r7, r0
 80177a4:	f7ff ffa4 	bl	80176f0 <__sfp_lock_acquire>
 80177a8:	4b1f      	ldr	r3, [pc, #124]	; (8017828 <__sfp+0x88>)
 80177aa:	681e      	ldr	r6, [r3, #0]
 80177ac:	69b3      	ldr	r3, [r6, #24]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d102      	bne.n	80177b8 <__sfp+0x18>
 80177b2:	0030      	movs	r0, r6
 80177b4:	f7ff ffbc 	bl	8017730 <__sinit>
 80177b8:	3648      	adds	r6, #72	; 0x48
 80177ba:	68b4      	ldr	r4, [r6, #8]
 80177bc:	6873      	ldr	r3, [r6, #4]
 80177be:	3b01      	subs	r3, #1
 80177c0:	d504      	bpl.n	80177cc <__sfp+0x2c>
 80177c2:	6833      	ldr	r3, [r6, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d022      	beq.n	801780e <__sfp+0x6e>
 80177c8:	6836      	ldr	r6, [r6, #0]
 80177ca:	e7f6      	b.n	80177ba <__sfp+0x1a>
 80177cc:	220c      	movs	r2, #12
 80177ce:	5ea5      	ldrsh	r5, [r4, r2]
 80177d0:	2d00      	cmp	r5, #0
 80177d2:	d11a      	bne.n	801780a <__sfp+0x6a>
 80177d4:	0020      	movs	r0, r4
 80177d6:	4b15      	ldr	r3, [pc, #84]	; (801782c <__sfp+0x8c>)
 80177d8:	3058      	adds	r0, #88	; 0x58
 80177da:	60e3      	str	r3, [r4, #12]
 80177dc:	6665      	str	r5, [r4, #100]	; 0x64
 80177de:	f000 f88d 	bl	80178fc <__retarget_lock_init_recursive>
 80177e2:	f7ff ff8d 	bl	8017700 <__sfp_lock_release>
 80177e6:	0020      	movs	r0, r4
 80177e8:	2208      	movs	r2, #8
 80177ea:	0029      	movs	r1, r5
 80177ec:	6025      	str	r5, [r4, #0]
 80177ee:	60a5      	str	r5, [r4, #8]
 80177f0:	6065      	str	r5, [r4, #4]
 80177f2:	6125      	str	r5, [r4, #16]
 80177f4:	6165      	str	r5, [r4, #20]
 80177f6:	61a5      	str	r5, [r4, #24]
 80177f8:	305c      	adds	r0, #92	; 0x5c
 80177fa:	f7fe fc00 	bl	8015ffe <memset>
 80177fe:	6365      	str	r5, [r4, #52]	; 0x34
 8017800:	63a5      	str	r5, [r4, #56]	; 0x38
 8017802:	64a5      	str	r5, [r4, #72]	; 0x48
 8017804:	64e5      	str	r5, [r4, #76]	; 0x4c
 8017806:	0020      	movs	r0, r4
 8017808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801780a:	3468      	adds	r4, #104	; 0x68
 801780c:	e7d7      	b.n	80177be <__sfp+0x1e>
 801780e:	2104      	movs	r1, #4
 8017810:	0038      	movs	r0, r7
 8017812:	f7ff ff57 	bl	80176c4 <__sfmoreglue>
 8017816:	1e04      	subs	r4, r0, #0
 8017818:	6030      	str	r0, [r6, #0]
 801781a:	d1d5      	bne.n	80177c8 <__sfp+0x28>
 801781c:	f7ff ff70 	bl	8017700 <__sfp_lock_release>
 8017820:	230c      	movs	r3, #12
 8017822:	603b      	str	r3, [r7, #0]
 8017824:	e7ef      	b.n	8017806 <__sfp+0x66>
 8017826:	46c0      	nop			; (mov r8, r8)
 8017828:	0801ad74 	.word	0x0801ad74
 801782c:	ffff0001 	.word	0xffff0001

08017830 <_fwalk_reent>:
 8017830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017832:	0004      	movs	r4, r0
 8017834:	0006      	movs	r6, r0
 8017836:	2700      	movs	r7, #0
 8017838:	9101      	str	r1, [sp, #4]
 801783a:	3448      	adds	r4, #72	; 0x48
 801783c:	6863      	ldr	r3, [r4, #4]
 801783e:	68a5      	ldr	r5, [r4, #8]
 8017840:	9300      	str	r3, [sp, #0]
 8017842:	9b00      	ldr	r3, [sp, #0]
 8017844:	3b01      	subs	r3, #1
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	d504      	bpl.n	8017854 <_fwalk_reent+0x24>
 801784a:	6824      	ldr	r4, [r4, #0]
 801784c:	2c00      	cmp	r4, #0
 801784e:	d1f5      	bne.n	801783c <_fwalk_reent+0xc>
 8017850:	0038      	movs	r0, r7
 8017852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017854:	89ab      	ldrh	r3, [r5, #12]
 8017856:	2b01      	cmp	r3, #1
 8017858:	d908      	bls.n	801786c <_fwalk_reent+0x3c>
 801785a:	220e      	movs	r2, #14
 801785c:	5eab      	ldrsh	r3, [r5, r2]
 801785e:	3301      	adds	r3, #1
 8017860:	d004      	beq.n	801786c <_fwalk_reent+0x3c>
 8017862:	0029      	movs	r1, r5
 8017864:	0030      	movs	r0, r6
 8017866:	9b01      	ldr	r3, [sp, #4]
 8017868:	4798      	blx	r3
 801786a:	4307      	orrs	r7, r0
 801786c:	3568      	adds	r5, #104	; 0x68
 801786e:	e7e8      	b.n	8017842 <_fwalk_reent+0x12>

08017870 <_findenv_r>:
 8017870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017872:	000d      	movs	r5, r1
 8017874:	b085      	sub	sp, #20
 8017876:	0006      	movs	r6, r0
 8017878:	9203      	str	r2, [sp, #12]
 801787a:	f000 fad9 	bl	8017e30 <__env_lock>
 801787e:	4f19      	ldr	r7, [pc, #100]	; (80178e4 <_findenv_r+0x74>)
 8017880:	002b      	movs	r3, r5
 8017882:	683c      	ldr	r4, [r7, #0]
 8017884:	2c00      	cmp	r4, #0
 8017886:	d106      	bne.n	8017896 <_findenv_r+0x26>
 8017888:	0030      	movs	r0, r6
 801788a:	f000 fad9 	bl	8017e40 <__env_unlock>
 801788e:	2000      	movs	r0, #0
 8017890:	b005      	add	sp, #20
 8017892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017894:	3301      	adds	r3, #1
 8017896:	781a      	ldrb	r2, [r3, #0]
 8017898:	2a00      	cmp	r2, #0
 801789a:	d01f      	beq.n	80178dc <_findenv_r+0x6c>
 801789c:	2a3d      	cmp	r2, #61	; 0x3d
 801789e:	d1f9      	bne.n	8017894 <_findenv_r+0x24>
 80178a0:	e7f2      	b.n	8017888 <_findenv_r+0x18>
 80178a2:	3404      	adds	r4, #4
 80178a4:	6820      	ldr	r0, [r4, #0]
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d0ee      	beq.n	8017888 <_findenv_r+0x18>
 80178aa:	0029      	movs	r1, r5
 80178ac:	9a01      	ldr	r2, [sp, #4]
 80178ae:	f000 f9ed 	bl	8017c8c <strncmp>
 80178b2:	2800      	cmp	r0, #0
 80178b4:	d1f5      	bne.n	80178a2 <_findenv_r+0x32>
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	9a01      	ldr	r2, [sp, #4]
 80178ba:	189a      	adds	r2, r3, r2
 80178bc:	9202      	str	r2, [sp, #8]
 80178be:	9a01      	ldr	r2, [sp, #4]
 80178c0:	5c9b      	ldrb	r3, [r3, r2]
 80178c2:	2b3d      	cmp	r3, #61	; 0x3d
 80178c4:	d1ed      	bne.n	80178a2 <_findenv_r+0x32>
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	0030      	movs	r0, r6
 80178ca:	1ae4      	subs	r4, r4, r3
 80178cc:	9b03      	ldr	r3, [sp, #12]
 80178ce:	10a4      	asrs	r4, r4, #2
 80178d0:	601c      	str	r4, [r3, #0]
 80178d2:	f000 fab5 	bl	8017e40 <__env_unlock>
 80178d6:	9802      	ldr	r0, [sp, #8]
 80178d8:	3001      	adds	r0, #1
 80178da:	e7d9      	b.n	8017890 <_findenv_r+0x20>
 80178dc:	1b5b      	subs	r3, r3, r5
 80178de:	9301      	str	r3, [sp, #4]
 80178e0:	e7e0      	b.n	80178a4 <_findenv_r+0x34>
 80178e2:	46c0      	nop			; (mov r8, r8)
 80178e4:	20000308 	.word	0x20000308

080178e8 <_getenv_r>:
 80178e8:	b507      	push	{r0, r1, r2, lr}
 80178ea:	aa01      	add	r2, sp, #4
 80178ec:	f7ff ffc0 	bl	8017870 <_findenv_r>
 80178f0:	bd0e      	pop	{r1, r2, r3, pc}
	...

080178f4 <__gettzinfo>:
 80178f4:	4800      	ldr	r0, [pc, #0]	; (80178f8 <__gettzinfo+0x4>)
 80178f6:	4770      	bx	lr
 80178f8:	200002b0 	.word	0x200002b0

080178fc <__retarget_lock_init_recursive>:
 80178fc:	4770      	bx	lr

080178fe <__retarget_lock_acquire>:
 80178fe:	4770      	bx	lr

08017900 <__retarget_lock_acquire_recursive>:
 8017900:	4770      	bx	lr

08017902 <__retarget_lock_release>:
 8017902:	4770      	bx	lr

08017904 <__retarget_lock_release_recursive>:
 8017904:	4770      	bx	lr
	...

08017908 <__swhatbuf_r>:
 8017908:	b570      	push	{r4, r5, r6, lr}
 801790a:	000e      	movs	r6, r1
 801790c:	001d      	movs	r5, r3
 801790e:	230e      	movs	r3, #14
 8017910:	5ec9      	ldrsh	r1, [r1, r3]
 8017912:	0014      	movs	r4, r2
 8017914:	b096      	sub	sp, #88	; 0x58
 8017916:	2900      	cmp	r1, #0
 8017918:	da08      	bge.n	801792c <__swhatbuf_r+0x24>
 801791a:	220c      	movs	r2, #12
 801791c:	5eb3      	ldrsh	r3, [r6, r2]
 801791e:	2200      	movs	r2, #0
 8017920:	602a      	str	r2, [r5, #0]
 8017922:	061b      	lsls	r3, r3, #24
 8017924:	d411      	bmi.n	801794a <__swhatbuf_r+0x42>
 8017926:	2380      	movs	r3, #128	; 0x80
 8017928:	00db      	lsls	r3, r3, #3
 801792a:	e00f      	b.n	801794c <__swhatbuf_r+0x44>
 801792c:	466a      	mov	r2, sp
 801792e:	f000 fa8f 	bl	8017e50 <_fstat_r>
 8017932:	2800      	cmp	r0, #0
 8017934:	dbf1      	blt.n	801791a <__swhatbuf_r+0x12>
 8017936:	23f0      	movs	r3, #240	; 0xf0
 8017938:	9901      	ldr	r1, [sp, #4]
 801793a:	021b      	lsls	r3, r3, #8
 801793c:	4019      	ands	r1, r3
 801793e:	4b05      	ldr	r3, [pc, #20]	; (8017954 <__swhatbuf_r+0x4c>)
 8017940:	18c9      	adds	r1, r1, r3
 8017942:	424b      	negs	r3, r1
 8017944:	4159      	adcs	r1, r3
 8017946:	6029      	str	r1, [r5, #0]
 8017948:	e7ed      	b.n	8017926 <__swhatbuf_r+0x1e>
 801794a:	2340      	movs	r3, #64	; 0x40
 801794c:	2000      	movs	r0, #0
 801794e:	6023      	str	r3, [r4, #0]
 8017950:	b016      	add	sp, #88	; 0x58
 8017952:	bd70      	pop	{r4, r5, r6, pc}
 8017954:	ffffe000 	.word	0xffffe000

08017958 <__smakebuf_r>:
 8017958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801795a:	2602      	movs	r6, #2
 801795c:	898b      	ldrh	r3, [r1, #12]
 801795e:	0005      	movs	r5, r0
 8017960:	000c      	movs	r4, r1
 8017962:	4233      	tst	r3, r6
 8017964:	d006      	beq.n	8017974 <__smakebuf_r+0x1c>
 8017966:	0023      	movs	r3, r4
 8017968:	3347      	adds	r3, #71	; 0x47
 801796a:	6023      	str	r3, [r4, #0]
 801796c:	6123      	str	r3, [r4, #16]
 801796e:	2301      	movs	r3, #1
 8017970:	6163      	str	r3, [r4, #20]
 8017972:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017974:	466a      	mov	r2, sp
 8017976:	ab01      	add	r3, sp, #4
 8017978:	f7ff ffc6 	bl	8017908 <__swhatbuf_r>
 801797c:	9900      	ldr	r1, [sp, #0]
 801797e:	0007      	movs	r7, r0
 8017980:	0028      	movs	r0, r5
 8017982:	f7fe fe49 	bl	8016618 <_malloc_r>
 8017986:	2800      	cmp	r0, #0
 8017988:	d108      	bne.n	801799c <__smakebuf_r+0x44>
 801798a:	220c      	movs	r2, #12
 801798c:	5ea3      	ldrsh	r3, [r4, r2]
 801798e:	059a      	lsls	r2, r3, #22
 8017990:	d4ef      	bmi.n	8017972 <__smakebuf_r+0x1a>
 8017992:	2203      	movs	r2, #3
 8017994:	4393      	bics	r3, r2
 8017996:	431e      	orrs	r6, r3
 8017998:	81a6      	strh	r6, [r4, #12]
 801799a:	e7e4      	b.n	8017966 <__smakebuf_r+0xe>
 801799c:	4b0f      	ldr	r3, [pc, #60]	; (80179dc <__smakebuf_r+0x84>)
 801799e:	62ab      	str	r3, [r5, #40]	; 0x28
 80179a0:	2380      	movs	r3, #128	; 0x80
 80179a2:	89a2      	ldrh	r2, [r4, #12]
 80179a4:	6020      	str	r0, [r4, #0]
 80179a6:	4313      	orrs	r3, r2
 80179a8:	81a3      	strh	r3, [r4, #12]
 80179aa:	9b00      	ldr	r3, [sp, #0]
 80179ac:	6120      	str	r0, [r4, #16]
 80179ae:	6163      	str	r3, [r4, #20]
 80179b0:	9b01      	ldr	r3, [sp, #4]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d00d      	beq.n	80179d2 <__smakebuf_r+0x7a>
 80179b6:	0028      	movs	r0, r5
 80179b8:	230e      	movs	r3, #14
 80179ba:	5ee1      	ldrsh	r1, [r4, r3]
 80179bc:	f000 fa5a 	bl	8017e74 <_isatty_r>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	d006      	beq.n	80179d2 <__smakebuf_r+0x7a>
 80179c4:	2203      	movs	r2, #3
 80179c6:	89a3      	ldrh	r3, [r4, #12]
 80179c8:	4393      	bics	r3, r2
 80179ca:	001a      	movs	r2, r3
 80179cc:	2301      	movs	r3, #1
 80179ce:	4313      	orrs	r3, r2
 80179d0:	81a3      	strh	r3, [r4, #12]
 80179d2:	89a0      	ldrh	r0, [r4, #12]
 80179d4:	4307      	orrs	r7, r0
 80179d6:	81a7      	strh	r7, [r4, #12]
 80179d8:	e7cb      	b.n	8017972 <__smakebuf_r+0x1a>
 80179da:	46c0      	nop			; (mov r8, r8)
 80179dc:	080176b5 	.word	0x080176b5

080179e0 <memchr>:
 80179e0:	b2c9      	uxtb	r1, r1
 80179e2:	1882      	adds	r2, r0, r2
 80179e4:	4290      	cmp	r0, r2
 80179e6:	d101      	bne.n	80179ec <memchr+0xc>
 80179e8:	2000      	movs	r0, #0
 80179ea:	4770      	bx	lr
 80179ec:	7803      	ldrb	r3, [r0, #0]
 80179ee:	428b      	cmp	r3, r1
 80179f0:	d0fb      	beq.n	80179ea <memchr+0xa>
 80179f2:	3001      	adds	r0, #1
 80179f4:	e7f6      	b.n	80179e4 <memchr+0x4>
	...

080179f8 <__malloc_lock>:
 80179f8:	b510      	push	{r4, lr}
 80179fa:	4802      	ldr	r0, [pc, #8]	; (8017a04 <__malloc_lock+0xc>)
 80179fc:	f7ff ff80 	bl	8017900 <__retarget_lock_acquire_recursive>
 8017a00:	bd10      	pop	{r4, pc}
 8017a02:	46c0      	nop			; (mov r8, r8)
 8017a04:	20001de1 	.word	0x20001de1

08017a08 <__malloc_unlock>:
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	4802      	ldr	r0, [pc, #8]	; (8017a14 <__malloc_unlock+0xc>)
 8017a0c:	f7ff ff7a 	bl	8017904 <__retarget_lock_release_recursive>
 8017a10:	bd10      	pop	{r4, pc}
 8017a12:	46c0      	nop			; (mov r8, r8)
 8017a14:	20001de1 	.word	0x20001de1

08017a18 <_realloc_r>:
 8017a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a1a:	0007      	movs	r7, r0
 8017a1c:	000e      	movs	r6, r1
 8017a1e:	0014      	movs	r4, r2
 8017a20:	2900      	cmp	r1, #0
 8017a22:	d105      	bne.n	8017a30 <_realloc_r+0x18>
 8017a24:	0011      	movs	r1, r2
 8017a26:	f7fe fdf7 	bl	8016618 <_malloc_r>
 8017a2a:	0005      	movs	r5, r0
 8017a2c:	0028      	movs	r0, r5
 8017a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a30:	2a00      	cmp	r2, #0
 8017a32:	d103      	bne.n	8017a3c <_realloc_r+0x24>
 8017a34:	f7fe fd84 	bl	8016540 <_free_r>
 8017a38:	0025      	movs	r5, r4
 8017a3a:	e7f7      	b.n	8017a2c <_realloc_r+0x14>
 8017a3c:	f000 fa40 	bl	8017ec0 <_malloc_usable_size_r>
 8017a40:	9001      	str	r0, [sp, #4]
 8017a42:	4284      	cmp	r4, r0
 8017a44:	d803      	bhi.n	8017a4e <_realloc_r+0x36>
 8017a46:	0035      	movs	r5, r6
 8017a48:	0843      	lsrs	r3, r0, #1
 8017a4a:	42a3      	cmp	r3, r4
 8017a4c:	d3ee      	bcc.n	8017a2c <_realloc_r+0x14>
 8017a4e:	0021      	movs	r1, r4
 8017a50:	0038      	movs	r0, r7
 8017a52:	f7fe fde1 	bl	8016618 <_malloc_r>
 8017a56:	1e05      	subs	r5, r0, #0
 8017a58:	d0e8      	beq.n	8017a2c <_realloc_r+0x14>
 8017a5a:	9b01      	ldr	r3, [sp, #4]
 8017a5c:	0022      	movs	r2, r4
 8017a5e:	429c      	cmp	r4, r3
 8017a60:	d900      	bls.n	8017a64 <_realloc_r+0x4c>
 8017a62:	001a      	movs	r2, r3
 8017a64:	0031      	movs	r1, r6
 8017a66:	0028      	movs	r0, r5
 8017a68:	f7fe fac0 	bl	8015fec <memcpy>
 8017a6c:	0031      	movs	r1, r6
 8017a6e:	0038      	movs	r0, r7
 8017a70:	f7fe fd66 	bl	8016540 <_free_r>
 8017a74:	e7da      	b.n	8017a2c <_realloc_r+0x14>
	...

08017a78 <_putc_r>:
 8017a78:	b570      	push	{r4, r5, r6, lr}
 8017a7a:	0006      	movs	r6, r0
 8017a7c:	000d      	movs	r5, r1
 8017a7e:	0014      	movs	r4, r2
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d004      	beq.n	8017a8e <_putc_r+0x16>
 8017a84:	6983      	ldr	r3, [r0, #24]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d101      	bne.n	8017a8e <_putc_r+0x16>
 8017a8a:	f7ff fe51 	bl	8017730 <__sinit>
 8017a8e:	4b1c      	ldr	r3, [pc, #112]	; (8017b00 <_putc_r+0x88>)
 8017a90:	429c      	cmp	r4, r3
 8017a92:	d124      	bne.n	8017ade <_putc_r+0x66>
 8017a94:	6874      	ldr	r4, [r6, #4]
 8017a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a98:	07db      	lsls	r3, r3, #31
 8017a9a:	d405      	bmi.n	8017aa8 <_putc_r+0x30>
 8017a9c:	89a3      	ldrh	r3, [r4, #12]
 8017a9e:	059b      	lsls	r3, r3, #22
 8017aa0:	d402      	bmi.n	8017aa8 <_putc_r+0x30>
 8017aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017aa4:	f7ff ff2c 	bl	8017900 <__retarget_lock_acquire_recursive>
 8017aa8:	68a3      	ldr	r3, [r4, #8]
 8017aaa:	3b01      	subs	r3, #1
 8017aac:	60a3      	str	r3, [r4, #8]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	da05      	bge.n	8017abe <_putc_r+0x46>
 8017ab2:	69a2      	ldr	r2, [r4, #24]
 8017ab4:	4293      	cmp	r3, r2
 8017ab6:	db1c      	blt.n	8017af2 <_putc_r+0x7a>
 8017ab8:	b2eb      	uxtb	r3, r5
 8017aba:	2b0a      	cmp	r3, #10
 8017abc:	d019      	beq.n	8017af2 <_putc_r+0x7a>
 8017abe:	6823      	ldr	r3, [r4, #0]
 8017ac0:	1c5a      	adds	r2, r3, #1
 8017ac2:	6022      	str	r2, [r4, #0]
 8017ac4:	701d      	strb	r5, [r3, #0]
 8017ac6:	b2ed      	uxtb	r5, r5
 8017ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017aca:	07db      	lsls	r3, r3, #31
 8017acc:	d405      	bmi.n	8017ada <_putc_r+0x62>
 8017ace:	89a3      	ldrh	r3, [r4, #12]
 8017ad0:	059b      	lsls	r3, r3, #22
 8017ad2:	d402      	bmi.n	8017ada <_putc_r+0x62>
 8017ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ad6:	f7ff ff15 	bl	8017904 <__retarget_lock_release_recursive>
 8017ada:	0028      	movs	r0, r5
 8017adc:	bd70      	pop	{r4, r5, r6, pc}
 8017ade:	4b09      	ldr	r3, [pc, #36]	; (8017b04 <_putc_r+0x8c>)
 8017ae0:	429c      	cmp	r4, r3
 8017ae2:	d101      	bne.n	8017ae8 <_putc_r+0x70>
 8017ae4:	68b4      	ldr	r4, [r6, #8]
 8017ae6:	e7d6      	b.n	8017a96 <_putc_r+0x1e>
 8017ae8:	4b07      	ldr	r3, [pc, #28]	; (8017b08 <_putc_r+0x90>)
 8017aea:	429c      	cmp	r4, r3
 8017aec:	d1d3      	bne.n	8017a96 <_putc_r+0x1e>
 8017aee:	68f4      	ldr	r4, [r6, #12]
 8017af0:	e7d1      	b.n	8017a96 <_putc_r+0x1e>
 8017af2:	0029      	movs	r1, r5
 8017af4:	0022      	movs	r2, r4
 8017af6:	0030      	movs	r0, r6
 8017af8:	f7ff fc00 	bl	80172fc <__swbuf_r>
 8017afc:	0005      	movs	r5, r0
 8017afe:	e7e3      	b.n	8017ac8 <_putc_r+0x50>
 8017b00:	0801ae68 	.word	0x0801ae68
 8017b04:	0801ae88 	.word	0x0801ae88
 8017b08:	0801ae48 	.word	0x0801ae48

08017b0c <_raise_r>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	0004      	movs	r4, r0
 8017b10:	000d      	movs	r5, r1
 8017b12:	291f      	cmp	r1, #31
 8017b14:	d904      	bls.n	8017b20 <_raise_r+0x14>
 8017b16:	2316      	movs	r3, #22
 8017b18:	6003      	str	r3, [r0, #0]
 8017b1a:	2001      	movs	r0, #1
 8017b1c:	4240      	negs	r0, r0
 8017b1e:	bd70      	pop	{r4, r5, r6, pc}
 8017b20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d004      	beq.n	8017b30 <_raise_r+0x24>
 8017b26:	008a      	lsls	r2, r1, #2
 8017b28:	189b      	adds	r3, r3, r2
 8017b2a:	681a      	ldr	r2, [r3, #0]
 8017b2c:	2a00      	cmp	r2, #0
 8017b2e:	d108      	bne.n	8017b42 <_raise_r+0x36>
 8017b30:	0020      	movs	r0, r4
 8017b32:	f000 f831 	bl	8017b98 <_getpid_r>
 8017b36:	002a      	movs	r2, r5
 8017b38:	0001      	movs	r1, r0
 8017b3a:	0020      	movs	r0, r4
 8017b3c:	f000 f81a 	bl	8017b74 <_kill_r>
 8017b40:	e7ed      	b.n	8017b1e <_raise_r+0x12>
 8017b42:	2000      	movs	r0, #0
 8017b44:	2a01      	cmp	r2, #1
 8017b46:	d0ea      	beq.n	8017b1e <_raise_r+0x12>
 8017b48:	1c51      	adds	r1, r2, #1
 8017b4a:	d103      	bne.n	8017b54 <_raise_r+0x48>
 8017b4c:	2316      	movs	r3, #22
 8017b4e:	3001      	adds	r0, #1
 8017b50:	6023      	str	r3, [r4, #0]
 8017b52:	e7e4      	b.n	8017b1e <_raise_r+0x12>
 8017b54:	2400      	movs	r4, #0
 8017b56:	0028      	movs	r0, r5
 8017b58:	601c      	str	r4, [r3, #0]
 8017b5a:	4790      	blx	r2
 8017b5c:	0020      	movs	r0, r4
 8017b5e:	e7de      	b.n	8017b1e <_raise_r+0x12>

08017b60 <raise>:
 8017b60:	b510      	push	{r4, lr}
 8017b62:	4b03      	ldr	r3, [pc, #12]	; (8017b70 <raise+0x10>)
 8017b64:	0001      	movs	r1, r0
 8017b66:	6818      	ldr	r0, [r3, #0]
 8017b68:	f7ff ffd0 	bl	8017b0c <_raise_r>
 8017b6c:	bd10      	pop	{r4, pc}
 8017b6e:	46c0      	nop			; (mov r8, r8)
 8017b70:	20000244 	.word	0x20000244

08017b74 <_kill_r>:
 8017b74:	2300      	movs	r3, #0
 8017b76:	b570      	push	{r4, r5, r6, lr}
 8017b78:	4d06      	ldr	r5, [pc, #24]	; (8017b94 <_kill_r+0x20>)
 8017b7a:	0004      	movs	r4, r0
 8017b7c:	0008      	movs	r0, r1
 8017b7e:	0011      	movs	r1, r2
 8017b80:	602b      	str	r3, [r5, #0]
 8017b82:	f000 fe27 	bl	80187d4 <_kill>
 8017b86:	1c43      	adds	r3, r0, #1
 8017b88:	d103      	bne.n	8017b92 <_kill_r+0x1e>
 8017b8a:	682b      	ldr	r3, [r5, #0]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d000      	beq.n	8017b92 <_kill_r+0x1e>
 8017b90:	6023      	str	r3, [r4, #0]
 8017b92:	bd70      	pop	{r4, r5, r6, pc}
 8017b94:	20001de8 	.word	0x20001de8

08017b98 <_getpid_r>:
 8017b98:	b510      	push	{r4, lr}
 8017b9a:	f000 fe0b 	bl	80187b4 <_getpid>
 8017b9e:	bd10      	pop	{r4, pc}

08017ba0 <siscanf>:
 8017ba0:	b40e      	push	{r1, r2, r3}
 8017ba2:	b530      	push	{r4, r5, lr}
 8017ba4:	2381      	movs	r3, #129	; 0x81
 8017ba6:	b09c      	sub	sp, #112	; 0x70
 8017ba8:	466a      	mov	r2, sp
 8017baa:	ac1f      	add	r4, sp, #124	; 0x7c
 8017bac:	009b      	lsls	r3, r3, #2
 8017bae:	cc20      	ldmia	r4!, {r5}
 8017bb0:	8293      	strh	r3, [r2, #20]
 8017bb2:	9002      	str	r0, [sp, #8]
 8017bb4:	9006      	str	r0, [sp, #24]
 8017bb6:	f7e8 faa7 	bl	8000108 <strlen>
 8017bba:	4b0b      	ldr	r3, [pc, #44]	; (8017be8 <siscanf+0x48>)
 8017bbc:	466a      	mov	r2, sp
 8017bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	9003      	str	r0, [sp, #12]
 8017bc4:	9007      	str	r0, [sp, #28]
 8017bc6:	4809      	ldr	r0, [pc, #36]	; (8017bec <siscanf+0x4c>)
 8017bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8017bca:	9314      	str	r3, [sp, #80]	; 0x50
 8017bcc:	3b01      	subs	r3, #1
 8017bce:	82d3      	strh	r3, [r2, #22]
 8017bd0:	a902      	add	r1, sp, #8
 8017bd2:	0023      	movs	r3, r4
 8017bd4:	002a      	movs	r2, r5
 8017bd6:	6800      	ldr	r0, [r0, #0]
 8017bd8:	9401      	str	r4, [sp, #4]
 8017bda:	f000 f9d5 	bl	8017f88 <__ssvfiscanf_r>
 8017bde:	b01c      	add	sp, #112	; 0x70
 8017be0:	bc30      	pop	{r4, r5}
 8017be2:	bc08      	pop	{r3}
 8017be4:	b003      	add	sp, #12
 8017be6:	4718      	bx	r3
 8017be8:	08017c19 	.word	0x08017c19
 8017bec:	20000244 	.word	0x20000244

08017bf0 <__sread>:
 8017bf0:	b570      	push	{r4, r5, r6, lr}
 8017bf2:	000c      	movs	r4, r1
 8017bf4:	250e      	movs	r5, #14
 8017bf6:	5f49      	ldrsh	r1, [r1, r5]
 8017bf8:	f000 fca6 	bl	8018548 <_read_r>
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	db03      	blt.n	8017c08 <__sread+0x18>
 8017c00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8017c02:	181b      	adds	r3, r3, r0
 8017c04:	6563      	str	r3, [r4, #84]	; 0x54
 8017c06:	bd70      	pop	{r4, r5, r6, pc}
 8017c08:	89a3      	ldrh	r3, [r4, #12]
 8017c0a:	4a02      	ldr	r2, [pc, #8]	; (8017c14 <__sread+0x24>)
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	81a3      	strh	r3, [r4, #12]
 8017c10:	e7f9      	b.n	8017c06 <__sread+0x16>
 8017c12:	46c0      	nop			; (mov r8, r8)
 8017c14:	ffffefff 	.word	0xffffefff

08017c18 <__seofread>:
 8017c18:	2000      	movs	r0, #0
 8017c1a:	4770      	bx	lr

08017c1c <__swrite>:
 8017c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c1e:	001f      	movs	r7, r3
 8017c20:	898b      	ldrh	r3, [r1, #12]
 8017c22:	0005      	movs	r5, r0
 8017c24:	000c      	movs	r4, r1
 8017c26:	0016      	movs	r6, r2
 8017c28:	05db      	lsls	r3, r3, #23
 8017c2a:	d505      	bpl.n	8017c38 <__swrite+0x1c>
 8017c2c:	230e      	movs	r3, #14
 8017c2e:	5ec9      	ldrsh	r1, [r1, r3]
 8017c30:	2200      	movs	r2, #0
 8017c32:	2302      	movs	r3, #2
 8017c34:	f000 f930 	bl	8017e98 <_lseek_r>
 8017c38:	89a3      	ldrh	r3, [r4, #12]
 8017c3a:	4a05      	ldr	r2, [pc, #20]	; (8017c50 <__swrite+0x34>)
 8017c3c:	0028      	movs	r0, r5
 8017c3e:	4013      	ands	r3, r2
 8017c40:	81a3      	strh	r3, [r4, #12]
 8017c42:	0032      	movs	r2, r6
 8017c44:	230e      	movs	r3, #14
 8017c46:	5ee1      	ldrsh	r1, [r4, r3]
 8017c48:	003b      	movs	r3, r7
 8017c4a:	f000 f8cb 	bl	8017de4 <_write_r>
 8017c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c50:	ffffefff 	.word	0xffffefff

08017c54 <__sseek>:
 8017c54:	b570      	push	{r4, r5, r6, lr}
 8017c56:	000c      	movs	r4, r1
 8017c58:	250e      	movs	r5, #14
 8017c5a:	5f49      	ldrsh	r1, [r1, r5]
 8017c5c:	f000 f91c 	bl	8017e98 <_lseek_r>
 8017c60:	89a3      	ldrh	r3, [r4, #12]
 8017c62:	1c42      	adds	r2, r0, #1
 8017c64:	d103      	bne.n	8017c6e <__sseek+0x1a>
 8017c66:	4a05      	ldr	r2, [pc, #20]	; (8017c7c <__sseek+0x28>)
 8017c68:	4013      	ands	r3, r2
 8017c6a:	81a3      	strh	r3, [r4, #12]
 8017c6c:	bd70      	pop	{r4, r5, r6, pc}
 8017c6e:	2280      	movs	r2, #128	; 0x80
 8017c70:	0152      	lsls	r2, r2, #5
 8017c72:	4313      	orrs	r3, r2
 8017c74:	81a3      	strh	r3, [r4, #12]
 8017c76:	6560      	str	r0, [r4, #84]	; 0x54
 8017c78:	e7f8      	b.n	8017c6c <__sseek+0x18>
 8017c7a:	46c0      	nop			; (mov r8, r8)
 8017c7c:	ffffefff 	.word	0xffffefff

08017c80 <__sclose>:
 8017c80:	b510      	push	{r4, lr}
 8017c82:	230e      	movs	r3, #14
 8017c84:	5ec9      	ldrsh	r1, [r1, r3]
 8017c86:	f000 f8c1 	bl	8017e0c <_close_r>
 8017c8a:	bd10      	pop	{r4, pc}

08017c8c <strncmp>:
 8017c8c:	b530      	push	{r4, r5, lr}
 8017c8e:	0005      	movs	r5, r0
 8017c90:	1e10      	subs	r0, r2, #0
 8017c92:	d008      	beq.n	8017ca6 <strncmp+0x1a>
 8017c94:	2400      	movs	r4, #0
 8017c96:	3a01      	subs	r2, #1
 8017c98:	5d2b      	ldrb	r3, [r5, r4]
 8017c9a:	5d08      	ldrb	r0, [r1, r4]
 8017c9c:	4283      	cmp	r3, r0
 8017c9e:	d101      	bne.n	8017ca4 <strncmp+0x18>
 8017ca0:	4294      	cmp	r4, r2
 8017ca2:	d101      	bne.n	8017ca8 <strncmp+0x1c>
 8017ca4:	1a18      	subs	r0, r3, r0
 8017ca6:	bd30      	pop	{r4, r5, pc}
 8017ca8:	3401      	adds	r4, #1
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d1f4      	bne.n	8017c98 <strncmp+0xc>
 8017cae:	e7f9      	b.n	8017ca4 <strncmp+0x18>

08017cb0 <_strtoul_l.constprop.0>:
 8017cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cb2:	b087      	sub	sp, #28
 8017cb4:	9202      	str	r2, [sp, #8]
 8017cb6:	4a42      	ldr	r2, [pc, #264]	; (8017dc0 <_strtoul_l.constprop.0+0x110>)
 8017cb8:	001e      	movs	r6, r3
 8017cba:	9101      	str	r1, [sp, #4]
 8017cbc:	000b      	movs	r3, r1
 8017cbe:	4694      	mov	ip, r2
 8017cc0:	2108      	movs	r1, #8
 8017cc2:	9005      	str	r0, [sp, #20]
 8017cc4:	001a      	movs	r2, r3
 8017cc6:	4660      	mov	r0, ip
 8017cc8:	7814      	ldrb	r4, [r2, #0]
 8017cca:	3301      	adds	r3, #1
 8017ccc:	5d00      	ldrb	r0, [r0, r4]
 8017cce:	001d      	movs	r5, r3
 8017cd0:	0007      	movs	r7, r0
 8017cd2:	400f      	ands	r7, r1
 8017cd4:	4208      	tst	r0, r1
 8017cd6:	d1f5      	bne.n	8017cc4 <_strtoul_l.constprop.0+0x14>
 8017cd8:	2c2d      	cmp	r4, #45	; 0x2d
 8017cda:	d13a      	bne.n	8017d52 <_strtoul_l.constprop.0+0xa2>
 8017cdc:	2701      	movs	r7, #1
 8017cde:	781c      	ldrb	r4, [r3, #0]
 8017ce0:	1c95      	adds	r5, r2, #2
 8017ce2:	2e00      	cmp	r6, #0
 8017ce4:	d067      	beq.n	8017db6 <_strtoul_l.constprop.0+0x106>
 8017ce6:	2e10      	cmp	r6, #16
 8017ce8:	d109      	bne.n	8017cfe <_strtoul_l.constprop.0+0x4e>
 8017cea:	2c30      	cmp	r4, #48	; 0x30
 8017cec:	d107      	bne.n	8017cfe <_strtoul_l.constprop.0+0x4e>
 8017cee:	2220      	movs	r2, #32
 8017cf0:	782b      	ldrb	r3, [r5, #0]
 8017cf2:	4393      	bics	r3, r2
 8017cf4:	2b58      	cmp	r3, #88	; 0x58
 8017cf6:	d159      	bne.n	8017dac <_strtoul_l.constprop.0+0xfc>
 8017cf8:	2610      	movs	r6, #16
 8017cfa:	786c      	ldrb	r4, [r5, #1]
 8017cfc:	3502      	adds	r5, #2
 8017cfe:	2001      	movs	r0, #1
 8017d00:	0031      	movs	r1, r6
 8017d02:	4240      	negs	r0, r0
 8017d04:	f7e8 fa30 	bl	8000168 <__udivsi3>
 8017d08:	9003      	str	r0, [sp, #12]
 8017d0a:	2001      	movs	r0, #1
 8017d0c:	0031      	movs	r1, r6
 8017d0e:	4240      	negs	r0, r0
 8017d10:	f7e8 fab0 	bl	8000274 <__aeabi_uidivmod>
 8017d14:	2300      	movs	r3, #0
 8017d16:	9104      	str	r1, [sp, #16]
 8017d18:	2101      	movs	r1, #1
 8017d1a:	2201      	movs	r2, #1
 8017d1c:	0018      	movs	r0, r3
 8017d1e:	468c      	mov	ip, r1
 8017d20:	4252      	negs	r2, r2
 8017d22:	0021      	movs	r1, r4
 8017d24:	3930      	subs	r1, #48	; 0x30
 8017d26:	2909      	cmp	r1, #9
 8017d28:	d818      	bhi.n	8017d5c <_strtoul_l.constprop.0+0xac>
 8017d2a:	000c      	movs	r4, r1
 8017d2c:	42a6      	cmp	r6, r4
 8017d2e:	dd23      	ble.n	8017d78 <_strtoul_l.constprop.0+0xc8>
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	db1f      	blt.n	8017d74 <_strtoul_l.constprop.0+0xc4>
 8017d34:	9903      	ldr	r1, [sp, #12]
 8017d36:	0013      	movs	r3, r2
 8017d38:	4281      	cmp	r1, r0
 8017d3a:	d307      	bcc.n	8017d4c <_strtoul_l.constprop.0+0x9c>
 8017d3c:	d103      	bne.n	8017d46 <_strtoul_l.constprop.0+0x96>
 8017d3e:	9904      	ldr	r1, [sp, #16]
 8017d40:	0013      	movs	r3, r2
 8017d42:	42a1      	cmp	r1, r4
 8017d44:	db02      	blt.n	8017d4c <_strtoul_l.constprop.0+0x9c>
 8017d46:	4663      	mov	r3, ip
 8017d48:	4370      	muls	r0, r6
 8017d4a:	1820      	adds	r0, r4, r0
 8017d4c:	782c      	ldrb	r4, [r5, #0]
 8017d4e:	3501      	adds	r5, #1
 8017d50:	e7e7      	b.n	8017d22 <_strtoul_l.constprop.0+0x72>
 8017d52:	2c2b      	cmp	r4, #43	; 0x2b
 8017d54:	d1c5      	bne.n	8017ce2 <_strtoul_l.constprop.0+0x32>
 8017d56:	781c      	ldrb	r4, [r3, #0]
 8017d58:	1c95      	adds	r5, r2, #2
 8017d5a:	e7c2      	b.n	8017ce2 <_strtoul_l.constprop.0+0x32>
 8017d5c:	0021      	movs	r1, r4
 8017d5e:	3941      	subs	r1, #65	; 0x41
 8017d60:	2919      	cmp	r1, #25
 8017d62:	d801      	bhi.n	8017d68 <_strtoul_l.constprop.0+0xb8>
 8017d64:	3c37      	subs	r4, #55	; 0x37
 8017d66:	e7e1      	b.n	8017d2c <_strtoul_l.constprop.0+0x7c>
 8017d68:	0021      	movs	r1, r4
 8017d6a:	3961      	subs	r1, #97	; 0x61
 8017d6c:	2919      	cmp	r1, #25
 8017d6e:	d803      	bhi.n	8017d78 <_strtoul_l.constprop.0+0xc8>
 8017d70:	3c57      	subs	r4, #87	; 0x57
 8017d72:	e7db      	b.n	8017d2c <_strtoul_l.constprop.0+0x7c>
 8017d74:	0013      	movs	r3, r2
 8017d76:	e7e9      	b.n	8017d4c <_strtoul_l.constprop.0+0x9c>
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	da09      	bge.n	8017d90 <_strtoul_l.constprop.0+0xe0>
 8017d7c:	2322      	movs	r3, #34	; 0x22
 8017d7e:	2001      	movs	r0, #1
 8017d80:	9a05      	ldr	r2, [sp, #20]
 8017d82:	4240      	negs	r0, r0
 8017d84:	6013      	str	r3, [r2, #0]
 8017d86:	9b02      	ldr	r3, [sp, #8]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d109      	bne.n	8017da0 <_strtoul_l.constprop.0+0xf0>
 8017d8c:	b007      	add	sp, #28
 8017d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d90:	2f00      	cmp	r7, #0
 8017d92:	d000      	beq.n	8017d96 <_strtoul_l.constprop.0+0xe6>
 8017d94:	4240      	negs	r0, r0
 8017d96:	9a02      	ldr	r2, [sp, #8]
 8017d98:	2a00      	cmp	r2, #0
 8017d9a:	d0f7      	beq.n	8017d8c <_strtoul_l.constprop.0+0xdc>
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d001      	beq.n	8017da4 <_strtoul_l.constprop.0+0xf4>
 8017da0:	1e6b      	subs	r3, r5, #1
 8017da2:	9301      	str	r3, [sp, #4]
 8017da4:	9b02      	ldr	r3, [sp, #8]
 8017da6:	9a01      	ldr	r2, [sp, #4]
 8017da8:	601a      	str	r2, [r3, #0]
 8017daa:	e7ef      	b.n	8017d8c <_strtoul_l.constprop.0+0xdc>
 8017dac:	2430      	movs	r4, #48	; 0x30
 8017dae:	2e00      	cmp	r6, #0
 8017db0:	d1a5      	bne.n	8017cfe <_strtoul_l.constprop.0+0x4e>
 8017db2:	3608      	adds	r6, #8
 8017db4:	e7a3      	b.n	8017cfe <_strtoul_l.constprop.0+0x4e>
 8017db6:	2c30      	cmp	r4, #48	; 0x30
 8017db8:	d099      	beq.n	8017cee <_strtoul_l.constprop.0+0x3e>
 8017dba:	260a      	movs	r6, #10
 8017dbc:	e79f      	b.n	8017cfe <_strtoul_l.constprop.0+0x4e>
 8017dbe:	46c0      	nop			; (mov r8, r8)
 8017dc0:	0801ac74 	.word	0x0801ac74

08017dc4 <_strtoul_r>:
 8017dc4:	b510      	push	{r4, lr}
 8017dc6:	f7ff ff73 	bl	8017cb0 <_strtoul_l.constprop.0>
 8017dca:	bd10      	pop	{r4, pc}

08017dcc <strtoul>:
 8017dcc:	b510      	push	{r4, lr}
 8017dce:	0013      	movs	r3, r2
 8017dd0:	000a      	movs	r2, r1
 8017dd2:	0001      	movs	r1, r0
 8017dd4:	4802      	ldr	r0, [pc, #8]	; (8017de0 <strtoul+0x14>)
 8017dd6:	6800      	ldr	r0, [r0, #0]
 8017dd8:	f7ff ff6a 	bl	8017cb0 <_strtoul_l.constprop.0>
 8017ddc:	bd10      	pop	{r4, pc}
 8017dde:	46c0      	nop			; (mov r8, r8)
 8017de0:	20000244 	.word	0x20000244

08017de4 <_write_r>:
 8017de4:	b570      	push	{r4, r5, r6, lr}
 8017de6:	0004      	movs	r4, r0
 8017de8:	0008      	movs	r0, r1
 8017dea:	0011      	movs	r1, r2
 8017dec:	001a      	movs	r2, r3
 8017dee:	2300      	movs	r3, #0
 8017df0:	4d05      	ldr	r5, [pc, #20]	; (8017e08 <_write_r+0x24>)
 8017df2:	602b      	str	r3, [r5, #0]
 8017df4:	f7f3 ff08 	bl	800bc08 <_write>
 8017df8:	1c43      	adds	r3, r0, #1
 8017dfa:	d103      	bne.n	8017e04 <_write_r+0x20>
 8017dfc:	682b      	ldr	r3, [r5, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d000      	beq.n	8017e04 <_write_r+0x20>
 8017e02:	6023      	str	r3, [r4, #0]
 8017e04:	bd70      	pop	{r4, r5, r6, pc}
 8017e06:	46c0      	nop			; (mov r8, r8)
 8017e08:	20001de8 	.word	0x20001de8

08017e0c <_close_r>:
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	b570      	push	{r4, r5, r6, lr}
 8017e10:	4d06      	ldr	r5, [pc, #24]	; (8017e2c <_close_r+0x20>)
 8017e12:	0004      	movs	r4, r0
 8017e14:	0008      	movs	r0, r1
 8017e16:	602b      	str	r3, [r5, #0]
 8017e18:	f000 fcbc 	bl	8018794 <_close>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	d103      	bne.n	8017e28 <_close_r+0x1c>
 8017e20:	682b      	ldr	r3, [r5, #0]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d000      	beq.n	8017e28 <_close_r+0x1c>
 8017e26:	6023      	str	r3, [r4, #0]
 8017e28:	bd70      	pop	{r4, r5, r6, pc}
 8017e2a:	46c0      	nop			; (mov r8, r8)
 8017e2c:	20001de8 	.word	0x20001de8

08017e30 <__env_lock>:
 8017e30:	b510      	push	{r4, lr}
 8017e32:	4802      	ldr	r0, [pc, #8]	; (8017e3c <__env_lock+0xc>)
 8017e34:	f7ff fd64 	bl	8017900 <__retarget_lock_acquire_recursive>
 8017e38:	bd10      	pop	{r4, pc}
 8017e3a:	46c0      	nop			; (mov r8, r8)
 8017e3c:	20001de0 	.word	0x20001de0

08017e40 <__env_unlock>:
 8017e40:	b510      	push	{r4, lr}
 8017e42:	4802      	ldr	r0, [pc, #8]	; (8017e4c <__env_unlock+0xc>)
 8017e44:	f7ff fd5e 	bl	8017904 <__retarget_lock_release_recursive>
 8017e48:	bd10      	pop	{r4, pc}
 8017e4a:	46c0      	nop			; (mov r8, r8)
 8017e4c:	20001de0 	.word	0x20001de0

08017e50 <_fstat_r>:
 8017e50:	2300      	movs	r3, #0
 8017e52:	b570      	push	{r4, r5, r6, lr}
 8017e54:	4d06      	ldr	r5, [pc, #24]	; (8017e70 <_fstat_r+0x20>)
 8017e56:	0004      	movs	r4, r0
 8017e58:	0008      	movs	r0, r1
 8017e5a:	0011      	movs	r1, r2
 8017e5c:	602b      	str	r3, [r5, #0]
 8017e5e:	f000 fca1 	bl	80187a4 <_fstat>
 8017e62:	1c43      	adds	r3, r0, #1
 8017e64:	d103      	bne.n	8017e6e <_fstat_r+0x1e>
 8017e66:	682b      	ldr	r3, [r5, #0]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d000      	beq.n	8017e6e <_fstat_r+0x1e>
 8017e6c:	6023      	str	r3, [r4, #0]
 8017e6e:	bd70      	pop	{r4, r5, r6, pc}
 8017e70:	20001de8 	.word	0x20001de8

08017e74 <_isatty_r>:
 8017e74:	2300      	movs	r3, #0
 8017e76:	b570      	push	{r4, r5, r6, lr}
 8017e78:	4d06      	ldr	r5, [pc, #24]	; (8017e94 <_isatty_r+0x20>)
 8017e7a:	0004      	movs	r4, r0
 8017e7c:	0008      	movs	r0, r1
 8017e7e:	602b      	str	r3, [r5, #0]
 8017e80:	f000 fca0 	bl	80187c4 <_isatty>
 8017e84:	1c43      	adds	r3, r0, #1
 8017e86:	d103      	bne.n	8017e90 <_isatty_r+0x1c>
 8017e88:	682b      	ldr	r3, [r5, #0]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d000      	beq.n	8017e90 <_isatty_r+0x1c>
 8017e8e:	6023      	str	r3, [r4, #0]
 8017e90:	bd70      	pop	{r4, r5, r6, pc}
 8017e92:	46c0      	nop			; (mov r8, r8)
 8017e94:	20001de8 	.word	0x20001de8

08017e98 <_lseek_r>:
 8017e98:	b570      	push	{r4, r5, r6, lr}
 8017e9a:	0004      	movs	r4, r0
 8017e9c:	0008      	movs	r0, r1
 8017e9e:	0011      	movs	r1, r2
 8017ea0:	001a      	movs	r2, r3
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	4d05      	ldr	r5, [pc, #20]	; (8017ebc <_lseek_r+0x24>)
 8017ea6:	602b      	str	r3, [r5, #0]
 8017ea8:	f000 fc9c 	bl	80187e4 <_lseek>
 8017eac:	1c43      	adds	r3, r0, #1
 8017eae:	d103      	bne.n	8017eb8 <_lseek_r+0x20>
 8017eb0:	682b      	ldr	r3, [r5, #0]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d000      	beq.n	8017eb8 <_lseek_r+0x20>
 8017eb6:	6023      	str	r3, [r4, #0]
 8017eb8:	bd70      	pop	{r4, r5, r6, pc}
 8017eba:	46c0      	nop			; (mov r8, r8)
 8017ebc:	20001de8 	.word	0x20001de8

08017ec0 <_malloc_usable_size_r>:
 8017ec0:	1f0b      	subs	r3, r1, #4
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	1f18      	subs	r0, r3, #4
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	da01      	bge.n	8017ece <_malloc_usable_size_r+0xe>
 8017eca:	580b      	ldr	r3, [r1, r0]
 8017ecc:	18c0      	adds	r0, r0, r3
 8017ece:	4770      	bx	lr

08017ed0 <_sungetc_r>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	0014      	movs	r4, r2
 8017ed4:	1c4b      	adds	r3, r1, #1
 8017ed6:	d103      	bne.n	8017ee0 <_sungetc_r+0x10>
 8017ed8:	2501      	movs	r5, #1
 8017eda:	426d      	negs	r5, r5
 8017edc:	0028      	movs	r0, r5
 8017ede:	bd70      	pop	{r4, r5, r6, pc}
 8017ee0:	8993      	ldrh	r3, [r2, #12]
 8017ee2:	2220      	movs	r2, #32
 8017ee4:	4393      	bics	r3, r2
 8017ee6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017ee8:	81a3      	strh	r3, [r4, #12]
 8017eea:	b2ce      	uxtb	r6, r1
 8017eec:	6863      	ldr	r3, [r4, #4]
 8017eee:	b2cd      	uxtb	r5, r1
 8017ef0:	2a00      	cmp	r2, #0
 8017ef2:	d010      	beq.n	8017f16 <_sungetc_r+0x46>
 8017ef4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	dd07      	ble.n	8017f0a <_sungetc_r+0x3a>
 8017efa:	6823      	ldr	r3, [r4, #0]
 8017efc:	3b01      	subs	r3, #1
 8017efe:	6023      	str	r3, [r4, #0]
 8017f00:	701e      	strb	r6, [r3, #0]
 8017f02:	6863      	ldr	r3, [r4, #4]
 8017f04:	3301      	adds	r3, #1
 8017f06:	6063      	str	r3, [r4, #4]
 8017f08:	e7e8      	b.n	8017edc <_sungetc_r+0xc>
 8017f0a:	0021      	movs	r1, r4
 8017f0c:	f000 fbfe 	bl	801870c <__submore>
 8017f10:	2800      	cmp	r0, #0
 8017f12:	d0f2      	beq.n	8017efa <_sungetc_r+0x2a>
 8017f14:	e7e0      	b.n	8017ed8 <_sungetc_r+0x8>
 8017f16:	6921      	ldr	r1, [r4, #16]
 8017f18:	6822      	ldr	r2, [r4, #0]
 8017f1a:	2900      	cmp	r1, #0
 8017f1c:	d007      	beq.n	8017f2e <_sungetc_r+0x5e>
 8017f1e:	4291      	cmp	r1, r2
 8017f20:	d205      	bcs.n	8017f2e <_sungetc_r+0x5e>
 8017f22:	1e51      	subs	r1, r2, #1
 8017f24:	7808      	ldrb	r0, [r1, #0]
 8017f26:	42a8      	cmp	r0, r5
 8017f28:	d101      	bne.n	8017f2e <_sungetc_r+0x5e>
 8017f2a:	6021      	str	r1, [r4, #0]
 8017f2c:	e7ea      	b.n	8017f04 <_sungetc_r+0x34>
 8017f2e:	6423      	str	r3, [r4, #64]	; 0x40
 8017f30:	0023      	movs	r3, r4
 8017f32:	3344      	adds	r3, #68	; 0x44
 8017f34:	6363      	str	r3, [r4, #52]	; 0x34
 8017f36:	2303      	movs	r3, #3
 8017f38:	63a3      	str	r3, [r4, #56]	; 0x38
 8017f3a:	0023      	movs	r3, r4
 8017f3c:	3346      	adds	r3, #70	; 0x46
 8017f3e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017f40:	701e      	strb	r6, [r3, #0]
 8017f42:	6023      	str	r3, [r4, #0]
 8017f44:	2301      	movs	r3, #1
 8017f46:	e7de      	b.n	8017f06 <_sungetc_r+0x36>

08017f48 <__ssrefill_r>:
 8017f48:	b510      	push	{r4, lr}
 8017f4a:	000c      	movs	r4, r1
 8017f4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017f4e:	2900      	cmp	r1, #0
 8017f50:	d00e      	beq.n	8017f70 <__ssrefill_r+0x28>
 8017f52:	0023      	movs	r3, r4
 8017f54:	3344      	adds	r3, #68	; 0x44
 8017f56:	4299      	cmp	r1, r3
 8017f58:	d001      	beq.n	8017f5e <__ssrefill_r+0x16>
 8017f5a:	f7fe faf1 	bl	8016540 <_free_r>
 8017f5e:	2000      	movs	r0, #0
 8017f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017f62:	6360      	str	r0, [r4, #52]	; 0x34
 8017f64:	6063      	str	r3, [r4, #4]
 8017f66:	4283      	cmp	r3, r0
 8017f68:	d002      	beq.n	8017f70 <__ssrefill_r+0x28>
 8017f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017f6c:	6023      	str	r3, [r4, #0]
 8017f6e:	bd10      	pop	{r4, pc}
 8017f70:	6923      	ldr	r3, [r4, #16]
 8017f72:	2001      	movs	r0, #1
 8017f74:	6023      	str	r3, [r4, #0]
 8017f76:	2300      	movs	r3, #0
 8017f78:	89a2      	ldrh	r2, [r4, #12]
 8017f7a:	6063      	str	r3, [r4, #4]
 8017f7c:	3320      	adds	r3, #32
 8017f7e:	4313      	orrs	r3, r2
 8017f80:	81a3      	strh	r3, [r4, #12]
 8017f82:	4240      	negs	r0, r0
 8017f84:	e7f3      	b.n	8017f6e <__ssrefill_r+0x26>
	...

08017f88 <__ssvfiscanf_r>:
 8017f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f8a:	4cb8      	ldr	r4, [pc, #736]	; (801826c <__ssvfiscanf_r+0x2e4>)
 8017f8c:	0006      	movs	r6, r0
 8017f8e:	44a5      	add	sp, r4
 8017f90:	000c      	movs	r4, r1
 8017f92:	2100      	movs	r1, #0
 8017f94:	9146      	str	r1, [sp, #280]	; 0x118
 8017f96:	9147      	str	r1, [sp, #284]	; 0x11c
 8017f98:	a903      	add	r1, sp, #12
 8017f9a:	9148      	str	r1, [sp, #288]	; 0x120
 8017f9c:	21be      	movs	r1, #190	; 0xbe
 8017f9e:	48b4      	ldr	r0, [pc, #720]	; (8018270 <__ssvfiscanf_r+0x2e8>)
 8017fa0:	0049      	lsls	r1, r1, #1
 8017fa2:	ad43      	add	r5, sp, #268	; 0x10c
 8017fa4:	5068      	str	r0, [r5, r1]
 8017fa6:	25c0      	movs	r5, #192	; 0xc0
 8017fa8:	49b2      	ldr	r1, [pc, #712]	; (8018274 <__ssvfiscanf_r+0x2ec>)
 8017faa:	006d      	lsls	r5, r5, #1
 8017fac:	a843      	add	r0, sp, #268	; 0x10c
 8017fae:	5141      	str	r1, [r0, r5]
 8017fb0:	9302      	str	r3, [sp, #8]
 8017fb2:	7813      	ldrb	r3, [r2, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d100      	bne.n	8017fba <__ssvfiscanf_r+0x32>
 8017fb8:	e155      	b.n	8018266 <__ssvfiscanf_r+0x2de>
 8017fba:	49af      	ldr	r1, [pc, #700]	; (8018278 <__ssvfiscanf_r+0x2f0>)
 8017fbc:	2508      	movs	r5, #8
 8017fbe:	5cc8      	ldrb	r0, [r1, r3]
 8017fc0:	2108      	movs	r1, #8
 8017fc2:	1c57      	adds	r7, r2, #1
 8017fc4:	4001      	ands	r1, r0
 8017fc6:	4228      	tst	r0, r5
 8017fc8:	d020      	beq.n	801800c <__ssvfiscanf_r+0x84>
 8017fca:	6863      	ldr	r3, [r4, #4]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	dd12      	ble.n	8017ff6 <__ssvfiscanf_r+0x6e>
 8017fd0:	6823      	ldr	r3, [r4, #0]
 8017fd2:	49a9      	ldr	r1, [pc, #676]	; (8018278 <__ssvfiscanf_r+0x2f0>)
 8017fd4:	781a      	ldrb	r2, [r3, #0]
 8017fd6:	5c8a      	ldrb	r2, [r1, r2]
 8017fd8:	2108      	movs	r1, #8
 8017fda:	420a      	tst	r2, r1
 8017fdc:	d101      	bne.n	8017fe2 <__ssvfiscanf_r+0x5a>
 8017fde:	003a      	movs	r2, r7
 8017fe0:	e7e7      	b.n	8017fb2 <__ssvfiscanf_r+0x2a>
 8017fe2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	9200      	str	r2, [sp, #0]
 8017fe8:	3201      	adds	r2, #1
 8017fea:	9247      	str	r2, [sp, #284]	; 0x11c
 8017fec:	6862      	ldr	r2, [r4, #4]
 8017fee:	6023      	str	r3, [r4, #0]
 8017ff0:	3a01      	subs	r2, #1
 8017ff2:	6062      	str	r2, [r4, #4]
 8017ff4:	e7e9      	b.n	8017fca <__ssvfiscanf_r+0x42>
 8017ff6:	22c0      	movs	r2, #192	; 0xc0
 8017ff8:	ab43      	add	r3, sp, #268	; 0x10c
 8017ffa:	0052      	lsls	r2, r2, #1
 8017ffc:	589b      	ldr	r3, [r3, r2]
 8017ffe:	0021      	movs	r1, r4
 8018000:	0030      	movs	r0, r6
 8018002:	9300      	str	r3, [sp, #0]
 8018004:	4798      	blx	r3
 8018006:	2800      	cmp	r0, #0
 8018008:	d0e2      	beq.n	8017fd0 <__ssvfiscanf_r+0x48>
 801800a:	e7e8      	b.n	8017fde <__ssvfiscanf_r+0x56>
 801800c:	001d      	movs	r5, r3
 801800e:	2b25      	cmp	r3, #37	; 0x25
 8018010:	d164      	bne.n	80180dc <__ssvfiscanf_r+0x154>
 8018012:	9145      	str	r1, [sp, #276]	; 0x114
 8018014:	9143      	str	r1, [sp, #268]	; 0x10c
 8018016:	7853      	ldrb	r3, [r2, #1]
 8018018:	2b2a      	cmp	r3, #42	; 0x2a
 801801a:	d102      	bne.n	8018022 <__ssvfiscanf_r+0x9a>
 801801c:	3b1a      	subs	r3, #26
 801801e:	9343      	str	r3, [sp, #268]	; 0x10c
 8018020:	1c97      	adds	r7, r2, #2
 8018022:	003d      	movs	r5, r7
 8018024:	220a      	movs	r2, #10
 8018026:	7829      	ldrb	r1, [r5, #0]
 8018028:	1c6b      	adds	r3, r5, #1
 801802a:	9300      	str	r3, [sp, #0]
 801802c:	000b      	movs	r3, r1
 801802e:	3b30      	subs	r3, #48	; 0x30
 8018030:	2b09      	cmp	r3, #9
 8018032:	d91f      	bls.n	8018074 <__ssvfiscanf_r+0xec>
 8018034:	4f91      	ldr	r7, [pc, #580]	; (801827c <__ssvfiscanf_r+0x2f4>)
 8018036:	2203      	movs	r2, #3
 8018038:	0038      	movs	r0, r7
 801803a:	f7ff fcd1 	bl	80179e0 <memchr>
 801803e:	2800      	cmp	r0, #0
 8018040:	d007      	beq.n	8018052 <__ssvfiscanf_r+0xca>
 8018042:	2301      	movs	r3, #1
 8018044:	1bc0      	subs	r0, r0, r7
 8018046:	4083      	lsls	r3, r0
 8018048:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801804a:	9d00      	ldr	r5, [sp, #0]
 801804c:	4313      	orrs	r3, r2
 801804e:	9201      	str	r2, [sp, #4]
 8018050:	9343      	str	r3, [sp, #268]	; 0x10c
 8018052:	1c6f      	adds	r7, r5, #1
 8018054:	782d      	ldrb	r5, [r5, #0]
 8018056:	2d78      	cmp	r5, #120	; 0x78
 8018058:	d807      	bhi.n	801806a <__ssvfiscanf_r+0xe2>
 801805a:	2d57      	cmp	r5, #87	; 0x57
 801805c:	d812      	bhi.n	8018084 <__ssvfiscanf_r+0xfc>
 801805e:	2d25      	cmp	r5, #37	; 0x25
 8018060:	d03c      	beq.n	80180dc <__ssvfiscanf_r+0x154>
 8018062:	d836      	bhi.n	80180d2 <__ssvfiscanf_r+0x14a>
 8018064:	2d00      	cmp	r5, #0
 8018066:	d100      	bne.n	801806a <__ssvfiscanf_r+0xe2>
 8018068:	e0fa      	b.n	8018260 <__ssvfiscanf_r+0x2d8>
 801806a:	2303      	movs	r3, #3
 801806c:	9349      	str	r3, [sp, #292]	; 0x124
 801806e:	3307      	adds	r3, #7
 8018070:	9344      	str	r3, [sp, #272]	; 0x110
 8018072:	e06d      	b.n	8018150 <__ssvfiscanf_r+0x1c8>
 8018074:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018076:	9d00      	ldr	r5, [sp, #0]
 8018078:	9301      	str	r3, [sp, #4]
 801807a:	4353      	muls	r3, r2
 801807c:	3b30      	subs	r3, #48	; 0x30
 801807e:	185b      	adds	r3, r3, r1
 8018080:	9345      	str	r3, [sp, #276]	; 0x114
 8018082:	e7d0      	b.n	8018026 <__ssvfiscanf_r+0x9e>
 8018084:	0028      	movs	r0, r5
 8018086:	3858      	subs	r0, #88	; 0x58
 8018088:	2820      	cmp	r0, #32
 801808a:	d8ee      	bhi.n	801806a <__ssvfiscanf_r+0xe2>
 801808c:	f7e8 f858 	bl	8000140 <__gnu_thumb1_case_shi>
 8018090:	ffed0051 	.word	0xffed0051
 8018094:	0087ffed 	.word	0x0087ffed
 8018098:	ffedffed 	.word	0xffedffed
 801809c:	ffedffed 	.word	0xffedffed
 80180a0:	ffedffed 	.word	0xffedffed
 80180a4:	0095ffed 	.word	0x0095ffed
 80180a8:	0024007d 	.word	0x0024007d
 80180ac:	00240024 	.word	0x00240024
 80180b0:	007fffed 	.word	0x007fffed
 80180b4:	ffedffed 	.word	0xffedffed
 80180b8:	ffedffed 	.word	0xffedffed
 80180bc:	0083009f 	.word	0x0083009f
 80180c0:	ffed004b 	.word	0xffed004b
 80180c4:	009dffed 	.word	0x009dffed
 80180c8:	007dffed 	.word	0x007dffed
 80180cc:	ffedffed 	.word	0xffedffed
 80180d0:	0051      	.short	0x0051
 80180d2:	3d45      	subs	r5, #69	; 0x45
 80180d4:	2d02      	cmp	r5, #2
 80180d6:	d8c8      	bhi.n	801806a <__ssvfiscanf_r+0xe2>
 80180d8:	2305      	movs	r3, #5
 80180da:	e06c      	b.n	80181b6 <__ssvfiscanf_r+0x22e>
 80180dc:	6863      	ldr	r3, [r4, #4]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	dd0e      	ble.n	8018100 <__ssvfiscanf_r+0x178>
 80180e2:	6823      	ldr	r3, [r4, #0]
 80180e4:	781a      	ldrb	r2, [r3, #0]
 80180e6:	42aa      	cmp	r2, r5
 80180e8:	d000      	beq.n	80180ec <__ssvfiscanf_r+0x164>
 80180ea:	e0bc      	b.n	8018266 <__ssvfiscanf_r+0x2de>
 80180ec:	3301      	adds	r3, #1
 80180ee:	6862      	ldr	r2, [r4, #4]
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80180f4:	3a01      	subs	r2, #1
 80180f6:	9300      	str	r3, [sp, #0]
 80180f8:	3301      	adds	r3, #1
 80180fa:	6062      	str	r2, [r4, #4]
 80180fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80180fe:	e76e      	b.n	8017fde <__ssvfiscanf_r+0x56>
 8018100:	22c0      	movs	r2, #192	; 0xc0
 8018102:	ab43      	add	r3, sp, #268	; 0x10c
 8018104:	0052      	lsls	r2, r2, #1
 8018106:	589b      	ldr	r3, [r3, r2]
 8018108:	0021      	movs	r1, r4
 801810a:	0030      	movs	r0, r6
 801810c:	9300      	str	r3, [sp, #0]
 801810e:	4798      	blx	r3
 8018110:	2800      	cmp	r0, #0
 8018112:	d0e6      	beq.n	80180e2 <__ssvfiscanf_r+0x15a>
 8018114:	9846      	ldr	r0, [sp, #280]	; 0x118
 8018116:	2800      	cmp	r0, #0
 8018118:	d000      	beq.n	801811c <__ssvfiscanf_r+0x194>
 801811a:	e09d      	b.n	8018258 <__ssvfiscanf_r+0x2d0>
 801811c:	3801      	subs	r0, #1
 801811e:	23a5      	movs	r3, #165	; 0xa5
 8018120:	009b      	lsls	r3, r3, #2
 8018122:	449d      	add	sp, r3
 8018124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018126:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018128:	9300      	str	r3, [sp, #0]
 801812a:	2320      	movs	r3, #32
 801812c:	9a00      	ldr	r2, [sp, #0]
 801812e:	4313      	orrs	r3, r2
 8018130:	9343      	str	r3, [sp, #268]	; 0x10c
 8018132:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018134:	9300      	str	r3, [sp, #0]
 8018136:	2380      	movs	r3, #128	; 0x80
 8018138:	9a00      	ldr	r2, [sp, #0]
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	4313      	orrs	r3, r2
 801813e:	9343      	str	r3, [sp, #268]	; 0x10c
 8018140:	2310      	movs	r3, #16
 8018142:	9344      	str	r3, [sp, #272]	; 0x110
 8018144:	236e      	movs	r3, #110	; 0x6e
 8018146:	42ab      	cmp	r3, r5
 8018148:	41ad      	sbcs	r5, r5
 801814a:	426d      	negs	r5, r5
 801814c:	3503      	adds	r5, #3
 801814e:	9549      	str	r5, [sp, #292]	; 0x124
 8018150:	6863      	ldr	r3, [r4, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	dd4a      	ble.n	80181ec <__ssvfiscanf_r+0x264>
 8018156:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018158:	9300      	str	r3, [sp, #0]
 801815a:	065b      	lsls	r3, r3, #25
 801815c:	d406      	bmi.n	801816c <__ssvfiscanf_r+0x1e4>
 801815e:	6823      	ldr	r3, [r4, #0]
 8018160:	4945      	ldr	r1, [pc, #276]	; (8018278 <__ssvfiscanf_r+0x2f0>)
 8018162:	781a      	ldrb	r2, [r3, #0]
 8018164:	5c8a      	ldrb	r2, [r1, r2]
 8018166:	2108      	movs	r1, #8
 8018168:	420a      	tst	r2, r1
 801816a:	d14a      	bne.n	8018202 <__ssvfiscanf_r+0x27a>
 801816c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801816e:	2b02      	cmp	r3, #2
 8018170:	dc5e      	bgt.n	8018230 <__ssvfiscanf_r+0x2a8>
 8018172:	0022      	movs	r2, r4
 8018174:	0030      	movs	r0, r6
 8018176:	ab02      	add	r3, sp, #8
 8018178:	a943      	add	r1, sp, #268	; 0x10c
 801817a:	f000 f883 	bl	8018284 <_scanf_chars>
 801817e:	2801      	cmp	r0, #1
 8018180:	d071      	beq.n	8018266 <__ssvfiscanf_r+0x2de>
 8018182:	2802      	cmp	r0, #2
 8018184:	d000      	beq.n	8018188 <__ssvfiscanf_r+0x200>
 8018186:	e72a      	b.n	8017fde <__ssvfiscanf_r+0x56>
 8018188:	e7c4      	b.n	8018114 <__ssvfiscanf_r+0x18c>
 801818a:	230a      	movs	r3, #10
 801818c:	e7d9      	b.n	8018142 <__ssvfiscanf_r+0x1ba>
 801818e:	2300      	movs	r3, #0
 8018190:	2503      	movs	r5, #3
 8018192:	9344      	str	r3, [sp, #272]	; 0x110
 8018194:	e7db      	b.n	801814e <__ssvfiscanf_r+0x1c6>
 8018196:	2308      	movs	r3, #8
 8018198:	2504      	movs	r5, #4
 801819a:	9344      	str	r3, [sp, #272]	; 0x110
 801819c:	e7d7      	b.n	801814e <__ssvfiscanf_r+0x1c6>
 801819e:	0039      	movs	r1, r7
 80181a0:	a803      	add	r0, sp, #12
 80181a2:	f000 f9e5 	bl	8018570 <__sccl>
 80181a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80181a8:	0007      	movs	r7, r0
 80181aa:	9300      	str	r3, [sp, #0]
 80181ac:	2340      	movs	r3, #64	; 0x40
 80181ae:	9a00      	ldr	r2, [sp, #0]
 80181b0:	4313      	orrs	r3, r2
 80181b2:	9343      	str	r3, [sp, #268]	; 0x10c
 80181b4:	2301      	movs	r3, #1
 80181b6:	9349      	str	r3, [sp, #292]	; 0x124
 80181b8:	e7ca      	b.n	8018150 <__ssvfiscanf_r+0x1c8>
 80181ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80181bc:	9300      	str	r3, [sp, #0]
 80181be:	2340      	movs	r3, #64	; 0x40
 80181c0:	9a00      	ldr	r2, [sp, #0]
 80181c2:	4313      	orrs	r3, r2
 80181c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80181c6:	2300      	movs	r3, #0
 80181c8:	e7f5      	b.n	80181b6 <__ssvfiscanf_r+0x22e>
 80181ca:	2302      	movs	r3, #2
 80181cc:	e7f3      	b.n	80181b6 <__ssvfiscanf_r+0x22e>
 80181ce:	9843      	ldr	r0, [sp, #268]	; 0x10c
 80181d0:	06c3      	lsls	r3, r0, #27
 80181d2:	d500      	bpl.n	80181d6 <__ssvfiscanf_r+0x24e>
 80181d4:	e703      	b.n	8017fde <__ssvfiscanf_r+0x56>
 80181d6:	9b02      	ldr	r3, [sp, #8]
 80181d8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80181da:	1d19      	adds	r1, r3, #4
 80181dc:	9102      	str	r1, [sp, #8]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	07c5      	lsls	r5, r0, #31
 80181e2:	d501      	bpl.n	80181e8 <__ssvfiscanf_r+0x260>
 80181e4:	801a      	strh	r2, [r3, #0]
 80181e6:	e6fa      	b.n	8017fde <__ssvfiscanf_r+0x56>
 80181e8:	601a      	str	r2, [r3, #0]
 80181ea:	e6f8      	b.n	8017fde <__ssvfiscanf_r+0x56>
 80181ec:	22c0      	movs	r2, #192	; 0xc0
 80181ee:	ab43      	add	r3, sp, #268	; 0x10c
 80181f0:	0052      	lsls	r2, r2, #1
 80181f2:	589b      	ldr	r3, [r3, r2]
 80181f4:	0021      	movs	r1, r4
 80181f6:	0030      	movs	r0, r6
 80181f8:	9300      	str	r3, [sp, #0]
 80181fa:	4798      	blx	r3
 80181fc:	2800      	cmp	r0, #0
 80181fe:	d0aa      	beq.n	8018156 <__ssvfiscanf_r+0x1ce>
 8018200:	e788      	b.n	8018114 <__ssvfiscanf_r+0x18c>
 8018202:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8018204:	9200      	str	r2, [sp, #0]
 8018206:	3201      	adds	r2, #1
 8018208:	9247      	str	r2, [sp, #284]	; 0x11c
 801820a:	6862      	ldr	r2, [r4, #4]
 801820c:	3a01      	subs	r2, #1
 801820e:	6062      	str	r2, [r4, #4]
 8018210:	2a00      	cmp	r2, #0
 8018212:	dd02      	ble.n	801821a <__ssvfiscanf_r+0x292>
 8018214:	3301      	adds	r3, #1
 8018216:	6023      	str	r3, [r4, #0]
 8018218:	e7a1      	b.n	801815e <__ssvfiscanf_r+0x1d6>
 801821a:	22c0      	movs	r2, #192	; 0xc0
 801821c:	ab43      	add	r3, sp, #268	; 0x10c
 801821e:	0052      	lsls	r2, r2, #1
 8018220:	589b      	ldr	r3, [r3, r2]
 8018222:	0021      	movs	r1, r4
 8018224:	0030      	movs	r0, r6
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	4798      	blx	r3
 801822a:	2800      	cmp	r0, #0
 801822c:	d097      	beq.n	801815e <__ssvfiscanf_r+0x1d6>
 801822e:	e771      	b.n	8018114 <__ssvfiscanf_r+0x18c>
 8018230:	2b04      	cmp	r3, #4
 8018232:	dc06      	bgt.n	8018242 <__ssvfiscanf_r+0x2ba>
 8018234:	0022      	movs	r2, r4
 8018236:	0030      	movs	r0, r6
 8018238:	ab02      	add	r3, sp, #8
 801823a:	a943      	add	r1, sp, #268	; 0x10c
 801823c:	f000 f880 	bl	8018340 <_scanf_i>
 8018240:	e79d      	b.n	801817e <__ssvfiscanf_r+0x1f6>
 8018242:	4b0f      	ldr	r3, [pc, #60]	; (8018280 <__ssvfiscanf_r+0x2f8>)
 8018244:	2b00      	cmp	r3, #0
 8018246:	d100      	bne.n	801824a <__ssvfiscanf_r+0x2c2>
 8018248:	e6c9      	b.n	8017fde <__ssvfiscanf_r+0x56>
 801824a:	0022      	movs	r2, r4
 801824c:	0030      	movs	r0, r6
 801824e:	ab02      	add	r3, sp, #8
 8018250:	a943      	add	r1, sp, #268	; 0x10c
 8018252:	e000      	b.n	8018256 <__ssvfiscanf_r+0x2ce>
 8018254:	bf00      	nop
 8018256:	e792      	b.n	801817e <__ssvfiscanf_r+0x1f6>
 8018258:	89a3      	ldrh	r3, [r4, #12]
 801825a:	065b      	lsls	r3, r3, #25
 801825c:	d400      	bmi.n	8018260 <__ssvfiscanf_r+0x2d8>
 801825e:	e75e      	b.n	801811e <__ssvfiscanf_r+0x196>
 8018260:	2001      	movs	r0, #1
 8018262:	4240      	negs	r0, r0
 8018264:	e75b      	b.n	801811e <__ssvfiscanf_r+0x196>
 8018266:	9846      	ldr	r0, [sp, #280]	; 0x118
 8018268:	e759      	b.n	801811e <__ssvfiscanf_r+0x196>
 801826a:	46c0      	nop			; (mov r8, r8)
 801826c:	fffffd6c 	.word	0xfffffd6c
 8018270:	08017ed1 	.word	0x08017ed1
 8018274:	08017f49 	.word	0x08017f49
 8018278:	0801ac74 	.word	0x0801ac74
 801827c:	0801adde 	.word	0x0801adde
 8018280:	00000000 	.word	0x00000000

08018284 <_scanf_chars>:
 8018284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018286:	0015      	movs	r5, r2
 8018288:	688a      	ldr	r2, [r1, #8]
 801828a:	000c      	movs	r4, r1
 801828c:	9001      	str	r0, [sp, #4]
 801828e:	2a00      	cmp	r2, #0
 8018290:	d105      	bne.n	801829e <_scanf_chars+0x1a>
 8018292:	6989      	ldr	r1, [r1, #24]
 8018294:	3201      	adds	r2, #1
 8018296:	2900      	cmp	r1, #0
 8018298:	d000      	beq.n	801829c <_scanf_chars+0x18>
 801829a:	3a02      	subs	r2, #2
 801829c:	60a2      	str	r2, [r4, #8]
 801829e:	6822      	ldr	r2, [r4, #0]
 80182a0:	06d2      	lsls	r2, r2, #27
 80182a2:	d403      	bmi.n	80182ac <_scanf_chars+0x28>
 80182a4:	681a      	ldr	r2, [r3, #0]
 80182a6:	1d11      	adds	r1, r2, #4
 80182a8:	6019      	str	r1, [r3, #0]
 80182aa:	6817      	ldr	r7, [r2, #0]
 80182ac:	2600      	movs	r6, #0
 80182ae:	69a0      	ldr	r0, [r4, #24]
 80182b0:	2800      	cmp	r0, #0
 80182b2:	d013      	beq.n	80182dc <_scanf_chars+0x58>
 80182b4:	2801      	cmp	r0, #1
 80182b6:	d108      	bne.n	80182ca <_scanf_chars+0x46>
 80182b8:	682b      	ldr	r3, [r5, #0]
 80182ba:	6962      	ldr	r2, [r4, #20]
 80182bc:	781b      	ldrb	r3, [r3, #0]
 80182be:	5cd3      	ldrb	r3, [r2, r3]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d10b      	bne.n	80182dc <_scanf_chars+0x58>
 80182c4:	2e00      	cmp	r6, #0
 80182c6:	d038      	beq.n	801833a <_scanf_chars+0xb6>
 80182c8:	e026      	b.n	8018318 <_scanf_chars+0x94>
 80182ca:	2802      	cmp	r0, #2
 80182cc:	d124      	bne.n	8018318 <_scanf_chars+0x94>
 80182ce:	682b      	ldr	r3, [r5, #0]
 80182d0:	4a1a      	ldr	r2, [pc, #104]	; (801833c <_scanf_chars+0xb8>)
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	5cd3      	ldrb	r3, [r2, r3]
 80182d6:	2208      	movs	r2, #8
 80182d8:	4213      	tst	r3, r2
 80182da:	d11d      	bne.n	8018318 <_scanf_chars+0x94>
 80182dc:	2210      	movs	r2, #16
 80182de:	6823      	ldr	r3, [r4, #0]
 80182e0:	3601      	adds	r6, #1
 80182e2:	4213      	tst	r3, r2
 80182e4:	d103      	bne.n	80182ee <_scanf_chars+0x6a>
 80182e6:	682b      	ldr	r3, [r5, #0]
 80182e8:	781b      	ldrb	r3, [r3, #0]
 80182ea:	703b      	strb	r3, [r7, #0]
 80182ec:	3701      	adds	r7, #1
 80182ee:	682a      	ldr	r2, [r5, #0]
 80182f0:	686b      	ldr	r3, [r5, #4]
 80182f2:	3201      	adds	r2, #1
 80182f4:	602a      	str	r2, [r5, #0]
 80182f6:	68a2      	ldr	r2, [r4, #8]
 80182f8:	3b01      	subs	r3, #1
 80182fa:	3a01      	subs	r2, #1
 80182fc:	606b      	str	r3, [r5, #4]
 80182fe:	60a2      	str	r2, [r4, #8]
 8018300:	2a00      	cmp	r2, #0
 8018302:	d009      	beq.n	8018318 <_scanf_chars+0x94>
 8018304:	2b00      	cmp	r3, #0
 8018306:	dcd2      	bgt.n	80182ae <_scanf_chars+0x2a>
 8018308:	23c0      	movs	r3, #192	; 0xc0
 801830a:	005b      	lsls	r3, r3, #1
 801830c:	0029      	movs	r1, r5
 801830e:	58e3      	ldr	r3, [r4, r3]
 8018310:	9801      	ldr	r0, [sp, #4]
 8018312:	4798      	blx	r3
 8018314:	2800      	cmp	r0, #0
 8018316:	d0ca      	beq.n	80182ae <_scanf_chars+0x2a>
 8018318:	6822      	ldr	r2, [r4, #0]
 801831a:	2310      	movs	r3, #16
 801831c:	0011      	movs	r1, r2
 801831e:	4019      	ands	r1, r3
 8018320:	421a      	tst	r2, r3
 8018322:	d106      	bne.n	8018332 <_scanf_chars+0xae>
 8018324:	68e3      	ldr	r3, [r4, #12]
 8018326:	3301      	adds	r3, #1
 8018328:	60e3      	str	r3, [r4, #12]
 801832a:	69a3      	ldr	r3, [r4, #24]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d000      	beq.n	8018332 <_scanf_chars+0xae>
 8018330:	7039      	strb	r1, [r7, #0]
 8018332:	2000      	movs	r0, #0
 8018334:	6923      	ldr	r3, [r4, #16]
 8018336:	199e      	adds	r6, r3, r6
 8018338:	6126      	str	r6, [r4, #16]
 801833a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801833c:	0801ac74 	.word	0x0801ac74

08018340 <_scanf_i>:
 8018340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018342:	000c      	movs	r4, r1
 8018344:	b08d      	sub	sp, #52	; 0x34
 8018346:	9302      	str	r3, [sp, #8]
 8018348:	4b79      	ldr	r3, [pc, #484]	; (8018530 <_scanf_i+0x1f0>)
 801834a:	0016      	movs	r6, r2
 801834c:	9005      	str	r0, [sp, #20]
 801834e:	aa09      	add	r2, sp, #36	; 0x24
 8018350:	cb23      	ldmia	r3!, {r0, r1, r5}
 8018352:	c223      	stmia	r2!, {r0, r1, r5}
 8018354:	4b77      	ldr	r3, [pc, #476]	; (8018534 <_scanf_i+0x1f4>)
 8018356:	9306      	str	r3, [sp, #24]
 8018358:	69a3      	ldr	r3, [r4, #24]
 801835a:	2b03      	cmp	r3, #3
 801835c:	d001      	beq.n	8018362 <_scanf_i+0x22>
 801835e:	4b76      	ldr	r3, [pc, #472]	; (8018538 <_scanf_i+0x1f8>)
 8018360:	9306      	str	r3, [sp, #24]
 8018362:	22ae      	movs	r2, #174	; 0xae
 8018364:	2000      	movs	r0, #0
 8018366:	68a3      	ldr	r3, [r4, #8]
 8018368:	0052      	lsls	r2, r2, #1
 801836a:	1e59      	subs	r1, r3, #1
 801836c:	9004      	str	r0, [sp, #16]
 801836e:	4291      	cmp	r1, r2
 8018370:	d905      	bls.n	801837e <_scanf_i+0x3e>
 8018372:	3b5e      	subs	r3, #94	; 0x5e
 8018374:	3bff      	subs	r3, #255	; 0xff
 8018376:	9304      	str	r3, [sp, #16]
 8018378:	235e      	movs	r3, #94	; 0x5e
 801837a:	33ff      	adds	r3, #255	; 0xff
 801837c:	60a3      	str	r3, [r4, #8]
 801837e:	0023      	movs	r3, r4
 8018380:	331c      	adds	r3, #28
 8018382:	9301      	str	r3, [sp, #4]
 8018384:	23d0      	movs	r3, #208	; 0xd0
 8018386:	2700      	movs	r7, #0
 8018388:	6822      	ldr	r2, [r4, #0]
 801838a:	011b      	lsls	r3, r3, #4
 801838c:	4313      	orrs	r3, r2
 801838e:	6023      	str	r3, [r4, #0]
 8018390:	9b01      	ldr	r3, [sp, #4]
 8018392:	9303      	str	r3, [sp, #12]
 8018394:	6833      	ldr	r3, [r6, #0]
 8018396:	a809      	add	r0, sp, #36	; 0x24
 8018398:	7819      	ldrb	r1, [r3, #0]
 801839a:	00bb      	lsls	r3, r7, #2
 801839c:	2202      	movs	r2, #2
 801839e:	5818      	ldr	r0, [r3, r0]
 80183a0:	f7ff fb1e 	bl	80179e0 <memchr>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d02b      	beq.n	8018400 <_scanf_i+0xc0>
 80183a8:	2f01      	cmp	r7, #1
 80183aa:	d162      	bne.n	8018472 <_scanf_i+0x132>
 80183ac:	6863      	ldr	r3, [r4, #4]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d106      	bne.n	80183c0 <_scanf_i+0x80>
 80183b2:	3308      	adds	r3, #8
 80183b4:	6822      	ldr	r2, [r4, #0]
 80183b6:	6063      	str	r3, [r4, #4]
 80183b8:	33f9      	adds	r3, #249	; 0xf9
 80183ba:	33ff      	adds	r3, #255	; 0xff
 80183bc:	4313      	orrs	r3, r2
 80183be:	6023      	str	r3, [r4, #0]
 80183c0:	4b5e      	ldr	r3, [pc, #376]	; (801853c <_scanf_i+0x1fc>)
 80183c2:	6822      	ldr	r2, [r4, #0]
 80183c4:	4013      	ands	r3, r2
 80183c6:	6023      	str	r3, [r4, #0]
 80183c8:	68a3      	ldr	r3, [r4, #8]
 80183ca:	1e5a      	subs	r2, r3, #1
 80183cc:	60a2      	str	r2, [r4, #8]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d016      	beq.n	8018400 <_scanf_i+0xc0>
 80183d2:	6833      	ldr	r3, [r6, #0]
 80183d4:	1c5a      	adds	r2, r3, #1
 80183d6:	6032      	str	r2, [r6, #0]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	9a03      	ldr	r2, [sp, #12]
 80183dc:	7013      	strb	r3, [r2, #0]
 80183de:	6873      	ldr	r3, [r6, #4]
 80183e0:	1c55      	adds	r5, r2, #1
 80183e2:	3b01      	subs	r3, #1
 80183e4:	6073      	str	r3, [r6, #4]
 80183e6:	9503      	str	r5, [sp, #12]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	dc09      	bgt.n	8018400 <_scanf_i+0xc0>
 80183ec:	23c0      	movs	r3, #192	; 0xc0
 80183ee:	005b      	lsls	r3, r3, #1
 80183f0:	58e3      	ldr	r3, [r4, r3]
 80183f2:	0031      	movs	r1, r6
 80183f4:	9805      	ldr	r0, [sp, #20]
 80183f6:	9307      	str	r3, [sp, #28]
 80183f8:	4798      	blx	r3
 80183fa:	2800      	cmp	r0, #0
 80183fc:	d000      	beq.n	8018400 <_scanf_i+0xc0>
 80183fe:	e081      	b.n	8018504 <_scanf_i+0x1c4>
 8018400:	3701      	adds	r7, #1
 8018402:	2f03      	cmp	r7, #3
 8018404:	d1c6      	bne.n	8018394 <_scanf_i+0x54>
 8018406:	6863      	ldr	r3, [r4, #4]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d101      	bne.n	8018410 <_scanf_i+0xd0>
 801840c:	330a      	adds	r3, #10
 801840e:	6063      	str	r3, [r4, #4]
 8018410:	2110      	movs	r1, #16
 8018412:	2700      	movs	r7, #0
 8018414:	6863      	ldr	r3, [r4, #4]
 8018416:	6960      	ldr	r0, [r4, #20]
 8018418:	1ac9      	subs	r1, r1, r3
 801841a:	4b49      	ldr	r3, [pc, #292]	; (8018540 <_scanf_i+0x200>)
 801841c:	18c9      	adds	r1, r1, r3
 801841e:	f000 f8a7 	bl	8018570 <__sccl>
 8018422:	9d03      	ldr	r5, [sp, #12]
 8018424:	68a3      	ldr	r3, [r4, #8]
 8018426:	6822      	ldr	r2, [r4, #0]
 8018428:	9303      	str	r3, [sp, #12]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d041      	beq.n	80184b2 <_scanf_i+0x172>
 801842e:	6831      	ldr	r1, [r6, #0]
 8018430:	6963      	ldr	r3, [r4, #20]
 8018432:	7808      	ldrb	r0, [r1, #0]
 8018434:	5c1b      	ldrb	r3, [r3, r0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d03b      	beq.n	80184b2 <_scanf_i+0x172>
 801843a:	2830      	cmp	r0, #48	; 0x30
 801843c:	d129      	bne.n	8018492 <_scanf_i+0x152>
 801843e:	2380      	movs	r3, #128	; 0x80
 8018440:	011b      	lsls	r3, r3, #4
 8018442:	421a      	tst	r2, r3
 8018444:	d025      	beq.n	8018492 <_scanf_i+0x152>
 8018446:	9b04      	ldr	r3, [sp, #16]
 8018448:	3701      	adds	r7, #1
 801844a:	2b00      	cmp	r3, #0
 801844c:	d005      	beq.n	801845a <_scanf_i+0x11a>
 801844e:	001a      	movs	r2, r3
 8018450:	9b03      	ldr	r3, [sp, #12]
 8018452:	3a01      	subs	r2, #1
 8018454:	3301      	adds	r3, #1
 8018456:	9204      	str	r2, [sp, #16]
 8018458:	60a3      	str	r3, [r4, #8]
 801845a:	6873      	ldr	r3, [r6, #4]
 801845c:	3b01      	subs	r3, #1
 801845e:	6073      	str	r3, [r6, #4]
 8018460:	2b00      	cmp	r3, #0
 8018462:	dd1d      	ble.n	80184a0 <_scanf_i+0x160>
 8018464:	6833      	ldr	r3, [r6, #0]
 8018466:	3301      	adds	r3, #1
 8018468:	6033      	str	r3, [r6, #0]
 801846a:	68a3      	ldr	r3, [r4, #8]
 801846c:	3b01      	subs	r3, #1
 801846e:	60a3      	str	r3, [r4, #8]
 8018470:	e7d8      	b.n	8018424 <_scanf_i+0xe4>
 8018472:	2f02      	cmp	r7, #2
 8018474:	d1a8      	bne.n	80183c8 <_scanf_i+0x88>
 8018476:	21c0      	movs	r1, #192	; 0xc0
 8018478:	2380      	movs	r3, #128	; 0x80
 801847a:	6822      	ldr	r2, [r4, #0]
 801847c:	00c9      	lsls	r1, r1, #3
 801847e:	4011      	ands	r1, r2
 8018480:	009b      	lsls	r3, r3, #2
 8018482:	4299      	cmp	r1, r3
 8018484:	d1bf      	bne.n	8018406 <_scanf_i+0xc6>
 8018486:	3bf1      	subs	r3, #241	; 0xf1
 8018488:	3bff      	subs	r3, #255	; 0xff
 801848a:	6063      	str	r3, [r4, #4]
 801848c:	33f0      	adds	r3, #240	; 0xf0
 801848e:	4313      	orrs	r3, r2
 8018490:	e799      	b.n	80183c6 <_scanf_i+0x86>
 8018492:	4b2c      	ldr	r3, [pc, #176]	; (8018544 <_scanf_i+0x204>)
 8018494:	4013      	ands	r3, r2
 8018496:	6023      	str	r3, [r4, #0]
 8018498:	780b      	ldrb	r3, [r1, #0]
 801849a:	702b      	strb	r3, [r5, #0]
 801849c:	3501      	adds	r5, #1
 801849e:	e7dc      	b.n	801845a <_scanf_i+0x11a>
 80184a0:	23c0      	movs	r3, #192	; 0xc0
 80184a2:	005b      	lsls	r3, r3, #1
 80184a4:	58e3      	ldr	r3, [r4, r3]
 80184a6:	0031      	movs	r1, r6
 80184a8:	9805      	ldr	r0, [sp, #20]
 80184aa:	9303      	str	r3, [sp, #12]
 80184ac:	4798      	blx	r3
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d0db      	beq.n	801846a <_scanf_i+0x12a>
 80184b2:	6823      	ldr	r3, [r4, #0]
 80184b4:	05db      	lsls	r3, r3, #23
 80184b6:	d50e      	bpl.n	80184d6 <_scanf_i+0x196>
 80184b8:	9b01      	ldr	r3, [sp, #4]
 80184ba:	429d      	cmp	r5, r3
 80184bc:	d907      	bls.n	80184ce <_scanf_i+0x18e>
 80184be:	23be      	movs	r3, #190	; 0xbe
 80184c0:	3d01      	subs	r5, #1
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	0032      	movs	r2, r6
 80184c6:	7829      	ldrb	r1, [r5, #0]
 80184c8:	58e3      	ldr	r3, [r4, r3]
 80184ca:	9805      	ldr	r0, [sp, #20]
 80184cc:	4798      	blx	r3
 80184ce:	9b01      	ldr	r3, [sp, #4]
 80184d0:	2001      	movs	r0, #1
 80184d2:	429d      	cmp	r5, r3
 80184d4:	d029      	beq.n	801852a <_scanf_i+0x1ea>
 80184d6:	6821      	ldr	r1, [r4, #0]
 80184d8:	2310      	movs	r3, #16
 80184da:	000a      	movs	r2, r1
 80184dc:	401a      	ands	r2, r3
 80184de:	4219      	tst	r1, r3
 80184e0:	d11c      	bne.n	801851c <_scanf_i+0x1dc>
 80184e2:	702a      	strb	r2, [r5, #0]
 80184e4:	6863      	ldr	r3, [r4, #4]
 80184e6:	9901      	ldr	r1, [sp, #4]
 80184e8:	9805      	ldr	r0, [sp, #20]
 80184ea:	9e06      	ldr	r6, [sp, #24]
 80184ec:	47b0      	blx	r6
 80184ee:	9b02      	ldr	r3, [sp, #8]
 80184f0:	6821      	ldr	r1, [r4, #0]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	068a      	lsls	r2, r1, #26
 80184f6:	d507      	bpl.n	8018508 <_scanf_i+0x1c8>
 80184f8:	1d1a      	adds	r2, r3, #4
 80184fa:	9902      	ldr	r1, [sp, #8]
 80184fc:	600a      	str	r2, [r1, #0]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	6018      	str	r0, [r3, #0]
 8018502:	e008      	b.n	8018516 <_scanf_i+0x1d6>
 8018504:	2700      	movs	r7, #0
 8018506:	e7d4      	b.n	80184b2 <_scanf_i+0x172>
 8018508:	1d1a      	adds	r2, r3, #4
 801850a:	07ce      	lsls	r6, r1, #31
 801850c:	d5f5      	bpl.n	80184fa <_scanf_i+0x1ba>
 801850e:	9902      	ldr	r1, [sp, #8]
 8018510:	600a      	str	r2, [r1, #0]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	8018      	strh	r0, [r3, #0]
 8018516:	68e3      	ldr	r3, [r4, #12]
 8018518:	3301      	adds	r3, #1
 801851a:	60e3      	str	r3, [r4, #12]
 801851c:	2000      	movs	r0, #0
 801851e:	9b01      	ldr	r3, [sp, #4]
 8018520:	1aed      	subs	r5, r5, r3
 8018522:	6923      	ldr	r3, [r4, #16]
 8018524:	19ef      	adds	r7, r5, r7
 8018526:	19df      	adds	r7, r3, r7
 8018528:	6127      	str	r7, [r4, #16]
 801852a:	b00d      	add	sp, #52	; 0x34
 801852c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801852e:	46c0      	nop			; (mov r8, r8)
 8018530:	080188ac 	.word	0x080188ac
 8018534:	08018705 	.word	0x08018705
 8018538:	08017dc5 	.word	0x08017dc5
 801853c:	fffffaff 	.word	0xfffffaff
 8018540:	0801af0e 	.word	0x0801af0e
 8018544:	fffff6ff 	.word	0xfffff6ff

08018548 <_read_r>:
 8018548:	b570      	push	{r4, r5, r6, lr}
 801854a:	0004      	movs	r4, r0
 801854c:	0008      	movs	r0, r1
 801854e:	0011      	movs	r1, r2
 8018550:	001a      	movs	r2, r3
 8018552:	2300      	movs	r3, #0
 8018554:	4d05      	ldr	r5, [pc, #20]	; (801856c <_read_r+0x24>)
 8018556:	602b      	str	r3, [r5, #0]
 8018558:	f000 f94c 	bl	80187f4 <_read>
 801855c:	1c43      	adds	r3, r0, #1
 801855e:	d103      	bne.n	8018568 <_read_r+0x20>
 8018560:	682b      	ldr	r3, [r5, #0]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d000      	beq.n	8018568 <_read_r+0x20>
 8018566:	6023      	str	r3, [r4, #0]
 8018568:	bd70      	pop	{r4, r5, r6, pc}
 801856a:	46c0      	nop			; (mov r8, r8)
 801856c:	20001de8 	.word	0x20001de8

08018570 <__sccl>:
 8018570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018572:	780b      	ldrb	r3, [r1, #0]
 8018574:	0004      	movs	r4, r0
 8018576:	2b5e      	cmp	r3, #94	; 0x5e
 8018578:	d00c      	beq.n	8018594 <__sccl+0x24>
 801857a:	1c48      	adds	r0, r1, #1
 801857c:	2100      	movs	r1, #0
 801857e:	0022      	movs	r2, r4
 8018580:	1c65      	adds	r5, r4, #1
 8018582:	35ff      	adds	r5, #255	; 0xff
 8018584:	7011      	strb	r1, [r2, #0]
 8018586:	3201      	adds	r2, #1
 8018588:	42aa      	cmp	r2, r5
 801858a:	d1fb      	bne.n	8018584 <__sccl+0x14>
 801858c:	2b00      	cmp	r3, #0
 801858e:	d105      	bne.n	801859c <__sccl+0x2c>
 8018590:	3801      	subs	r0, #1
 8018592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018594:	784b      	ldrb	r3, [r1, #1]
 8018596:	1c88      	adds	r0, r1, #2
 8018598:	2101      	movs	r1, #1
 801859a:	e7f0      	b.n	801857e <__sccl+0xe>
 801859c:	2201      	movs	r2, #1
 801859e:	262d      	movs	r6, #45	; 0x2d
 80185a0:	4051      	eors	r1, r2
 80185a2:	0002      	movs	r2, r0
 80185a4:	54e1      	strb	r1, [r4, r3]
 80185a6:	7815      	ldrb	r5, [r2, #0]
 80185a8:	1c50      	adds	r0, r2, #1
 80185aa:	2d2d      	cmp	r5, #45	; 0x2d
 80185ac:	d009      	beq.n	80185c2 <__sccl+0x52>
 80185ae:	2d5d      	cmp	r5, #93	; 0x5d
 80185b0:	d0ef      	beq.n	8018592 <__sccl+0x22>
 80185b2:	2d00      	cmp	r5, #0
 80185b4:	d101      	bne.n	80185ba <__sccl+0x4a>
 80185b6:	0010      	movs	r0, r2
 80185b8:	e7eb      	b.n	8018592 <__sccl+0x22>
 80185ba:	002b      	movs	r3, r5
 80185bc:	e7f1      	b.n	80185a2 <__sccl+0x32>
 80185be:	0033      	movs	r3, r6
 80185c0:	e7ef      	b.n	80185a2 <__sccl+0x32>
 80185c2:	7855      	ldrb	r5, [r2, #1]
 80185c4:	2d5d      	cmp	r5, #93	; 0x5d
 80185c6:	d0fa      	beq.n	80185be <__sccl+0x4e>
 80185c8:	42ab      	cmp	r3, r5
 80185ca:	dcf8      	bgt.n	80185be <__sccl+0x4e>
 80185cc:	0018      	movs	r0, r3
 80185ce:	3202      	adds	r2, #2
 80185d0:	3001      	adds	r0, #1
 80185d2:	5421      	strb	r1, [r4, r0]
 80185d4:	4285      	cmp	r5, r0
 80185d6:	dcfb      	bgt.n	80185d0 <__sccl+0x60>
 80185d8:	2000      	movs	r0, #0
 80185da:	1c5f      	adds	r7, r3, #1
 80185dc:	42ab      	cmp	r3, r5
 80185de:	da01      	bge.n	80185e4 <__sccl+0x74>
 80185e0:	1ae8      	subs	r0, r5, r3
 80185e2:	3801      	subs	r0, #1
 80185e4:	183b      	adds	r3, r7, r0
 80185e6:	e7de      	b.n	80185a6 <__sccl+0x36>

080185e8 <_strtol_l.constprop.0>:
 80185e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ea:	b087      	sub	sp, #28
 80185ec:	001e      	movs	r6, r3
 80185ee:	9005      	str	r0, [sp, #20]
 80185f0:	9101      	str	r1, [sp, #4]
 80185f2:	9202      	str	r2, [sp, #8]
 80185f4:	2b01      	cmp	r3, #1
 80185f6:	d045      	beq.n	8018684 <_strtol_l.constprop.0+0x9c>
 80185f8:	000b      	movs	r3, r1
 80185fa:	2e24      	cmp	r6, #36	; 0x24
 80185fc:	d842      	bhi.n	8018684 <_strtol_l.constprop.0+0x9c>
 80185fe:	4a3f      	ldr	r2, [pc, #252]	; (80186fc <_strtol_l.constprop.0+0x114>)
 8018600:	2108      	movs	r1, #8
 8018602:	4694      	mov	ip, r2
 8018604:	001a      	movs	r2, r3
 8018606:	4660      	mov	r0, ip
 8018608:	7814      	ldrb	r4, [r2, #0]
 801860a:	3301      	adds	r3, #1
 801860c:	5d00      	ldrb	r0, [r0, r4]
 801860e:	001d      	movs	r5, r3
 8018610:	0007      	movs	r7, r0
 8018612:	400f      	ands	r7, r1
 8018614:	4208      	tst	r0, r1
 8018616:	d1f5      	bne.n	8018604 <_strtol_l.constprop.0+0x1c>
 8018618:	2c2d      	cmp	r4, #45	; 0x2d
 801861a:	d13a      	bne.n	8018692 <_strtol_l.constprop.0+0xaa>
 801861c:	2701      	movs	r7, #1
 801861e:	781c      	ldrb	r4, [r3, #0]
 8018620:	1c95      	adds	r5, r2, #2
 8018622:	2e00      	cmp	r6, #0
 8018624:	d065      	beq.n	80186f2 <_strtol_l.constprop.0+0x10a>
 8018626:	2e10      	cmp	r6, #16
 8018628:	d109      	bne.n	801863e <_strtol_l.constprop.0+0x56>
 801862a:	2c30      	cmp	r4, #48	; 0x30
 801862c:	d107      	bne.n	801863e <_strtol_l.constprop.0+0x56>
 801862e:	2220      	movs	r2, #32
 8018630:	782b      	ldrb	r3, [r5, #0]
 8018632:	4393      	bics	r3, r2
 8018634:	2b58      	cmp	r3, #88	; 0x58
 8018636:	d157      	bne.n	80186e8 <_strtol_l.constprop.0+0x100>
 8018638:	2610      	movs	r6, #16
 801863a:	786c      	ldrb	r4, [r5, #1]
 801863c:	3502      	adds	r5, #2
 801863e:	4b30      	ldr	r3, [pc, #192]	; (8018700 <_strtol_l.constprop.0+0x118>)
 8018640:	0031      	movs	r1, r6
 8018642:	18fb      	adds	r3, r7, r3
 8018644:	0018      	movs	r0, r3
 8018646:	9303      	str	r3, [sp, #12]
 8018648:	f7e7 fe14 	bl	8000274 <__aeabi_uidivmod>
 801864c:	2300      	movs	r3, #0
 801864e:	2201      	movs	r2, #1
 8018650:	4684      	mov	ip, r0
 8018652:	0018      	movs	r0, r3
 8018654:	9104      	str	r1, [sp, #16]
 8018656:	4252      	negs	r2, r2
 8018658:	0021      	movs	r1, r4
 801865a:	3930      	subs	r1, #48	; 0x30
 801865c:	2909      	cmp	r1, #9
 801865e:	d81d      	bhi.n	801869c <_strtol_l.constprop.0+0xb4>
 8018660:	000c      	movs	r4, r1
 8018662:	42a6      	cmp	r6, r4
 8018664:	dd28      	ble.n	80186b8 <_strtol_l.constprop.0+0xd0>
 8018666:	2b00      	cmp	r3, #0
 8018668:	db24      	blt.n	80186b4 <_strtol_l.constprop.0+0xcc>
 801866a:	0013      	movs	r3, r2
 801866c:	4584      	cmp	ip, r0
 801866e:	d306      	bcc.n	801867e <_strtol_l.constprop.0+0x96>
 8018670:	d102      	bne.n	8018678 <_strtol_l.constprop.0+0x90>
 8018672:	9904      	ldr	r1, [sp, #16]
 8018674:	42a1      	cmp	r1, r4
 8018676:	db02      	blt.n	801867e <_strtol_l.constprop.0+0x96>
 8018678:	2301      	movs	r3, #1
 801867a:	4370      	muls	r0, r6
 801867c:	1820      	adds	r0, r4, r0
 801867e:	782c      	ldrb	r4, [r5, #0]
 8018680:	3501      	adds	r5, #1
 8018682:	e7e9      	b.n	8018658 <_strtol_l.constprop.0+0x70>
 8018684:	f000 f880 	bl	8018788 <__errno>
 8018688:	2316      	movs	r3, #22
 801868a:	6003      	str	r3, [r0, #0]
 801868c:	2000      	movs	r0, #0
 801868e:	b007      	add	sp, #28
 8018690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018692:	2c2b      	cmp	r4, #43	; 0x2b
 8018694:	d1c5      	bne.n	8018622 <_strtol_l.constprop.0+0x3a>
 8018696:	781c      	ldrb	r4, [r3, #0]
 8018698:	1c95      	adds	r5, r2, #2
 801869a:	e7c2      	b.n	8018622 <_strtol_l.constprop.0+0x3a>
 801869c:	0021      	movs	r1, r4
 801869e:	3941      	subs	r1, #65	; 0x41
 80186a0:	2919      	cmp	r1, #25
 80186a2:	d801      	bhi.n	80186a8 <_strtol_l.constprop.0+0xc0>
 80186a4:	3c37      	subs	r4, #55	; 0x37
 80186a6:	e7dc      	b.n	8018662 <_strtol_l.constprop.0+0x7a>
 80186a8:	0021      	movs	r1, r4
 80186aa:	3961      	subs	r1, #97	; 0x61
 80186ac:	2919      	cmp	r1, #25
 80186ae:	d803      	bhi.n	80186b8 <_strtol_l.constprop.0+0xd0>
 80186b0:	3c57      	subs	r4, #87	; 0x57
 80186b2:	e7d6      	b.n	8018662 <_strtol_l.constprop.0+0x7a>
 80186b4:	0013      	movs	r3, r2
 80186b6:	e7e2      	b.n	801867e <_strtol_l.constprop.0+0x96>
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	da09      	bge.n	80186d0 <_strtol_l.constprop.0+0xe8>
 80186bc:	2322      	movs	r3, #34	; 0x22
 80186be:	9a05      	ldr	r2, [sp, #20]
 80186c0:	9803      	ldr	r0, [sp, #12]
 80186c2:	6013      	str	r3, [r2, #0]
 80186c4:	9b02      	ldr	r3, [sp, #8]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d0e1      	beq.n	801868e <_strtol_l.constprop.0+0xa6>
 80186ca:	1e6b      	subs	r3, r5, #1
 80186cc:	9301      	str	r3, [sp, #4]
 80186ce:	e007      	b.n	80186e0 <_strtol_l.constprop.0+0xf8>
 80186d0:	2f00      	cmp	r7, #0
 80186d2:	d000      	beq.n	80186d6 <_strtol_l.constprop.0+0xee>
 80186d4:	4240      	negs	r0, r0
 80186d6:	9a02      	ldr	r2, [sp, #8]
 80186d8:	2a00      	cmp	r2, #0
 80186da:	d0d8      	beq.n	801868e <_strtol_l.constprop.0+0xa6>
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d1f4      	bne.n	80186ca <_strtol_l.constprop.0+0xe2>
 80186e0:	9b02      	ldr	r3, [sp, #8]
 80186e2:	9a01      	ldr	r2, [sp, #4]
 80186e4:	601a      	str	r2, [r3, #0]
 80186e6:	e7d2      	b.n	801868e <_strtol_l.constprop.0+0xa6>
 80186e8:	2430      	movs	r4, #48	; 0x30
 80186ea:	2e00      	cmp	r6, #0
 80186ec:	d1a7      	bne.n	801863e <_strtol_l.constprop.0+0x56>
 80186ee:	3608      	adds	r6, #8
 80186f0:	e7a5      	b.n	801863e <_strtol_l.constprop.0+0x56>
 80186f2:	2c30      	cmp	r4, #48	; 0x30
 80186f4:	d09b      	beq.n	801862e <_strtol_l.constprop.0+0x46>
 80186f6:	260a      	movs	r6, #10
 80186f8:	e7a1      	b.n	801863e <_strtol_l.constprop.0+0x56>
 80186fa:	46c0      	nop			; (mov r8, r8)
 80186fc:	0801ac74 	.word	0x0801ac74
 8018700:	7fffffff 	.word	0x7fffffff

08018704 <_strtol_r>:
 8018704:	b510      	push	{r4, lr}
 8018706:	f7ff ff6f 	bl	80185e8 <_strtol_l.constprop.0>
 801870a:	bd10      	pop	{r4, pc}

0801870c <__submore>:
 801870c:	000b      	movs	r3, r1
 801870e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018710:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8018712:	3344      	adds	r3, #68	; 0x44
 8018714:	000c      	movs	r4, r1
 8018716:	429d      	cmp	r5, r3
 8018718:	d11c      	bne.n	8018754 <__submore+0x48>
 801871a:	2680      	movs	r6, #128	; 0x80
 801871c:	00f6      	lsls	r6, r6, #3
 801871e:	0031      	movs	r1, r6
 8018720:	f7fd ff7a 	bl	8016618 <_malloc_r>
 8018724:	2800      	cmp	r0, #0
 8018726:	d102      	bne.n	801872e <__submore+0x22>
 8018728:	2001      	movs	r0, #1
 801872a:	4240      	negs	r0, r0
 801872c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801872e:	0023      	movs	r3, r4
 8018730:	6360      	str	r0, [r4, #52]	; 0x34
 8018732:	63a6      	str	r6, [r4, #56]	; 0x38
 8018734:	3346      	adds	r3, #70	; 0x46
 8018736:	781a      	ldrb	r2, [r3, #0]
 8018738:	4b10      	ldr	r3, [pc, #64]	; (801877c <__submore+0x70>)
 801873a:	54c2      	strb	r2, [r0, r3]
 801873c:	0023      	movs	r3, r4
 801873e:	3345      	adds	r3, #69	; 0x45
 8018740:	781a      	ldrb	r2, [r3, #0]
 8018742:	4b0f      	ldr	r3, [pc, #60]	; (8018780 <__submore+0x74>)
 8018744:	54c2      	strb	r2, [r0, r3]
 8018746:	782a      	ldrb	r2, [r5, #0]
 8018748:	4b0e      	ldr	r3, [pc, #56]	; (8018784 <__submore+0x78>)
 801874a:	54c2      	strb	r2, [r0, r3]
 801874c:	18c0      	adds	r0, r0, r3
 801874e:	6020      	str	r0, [r4, #0]
 8018750:	2000      	movs	r0, #0
 8018752:	e7eb      	b.n	801872c <__submore+0x20>
 8018754:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8018756:	0029      	movs	r1, r5
 8018758:	0073      	lsls	r3, r6, #1
 801875a:	001a      	movs	r2, r3
 801875c:	9301      	str	r3, [sp, #4]
 801875e:	f7ff f95b 	bl	8017a18 <_realloc_r>
 8018762:	1e05      	subs	r5, r0, #0
 8018764:	d0e0      	beq.n	8018728 <__submore+0x1c>
 8018766:	1987      	adds	r7, r0, r6
 8018768:	0001      	movs	r1, r0
 801876a:	0032      	movs	r2, r6
 801876c:	0038      	movs	r0, r7
 801876e:	f7fd fc3d 	bl	8015fec <memcpy>
 8018772:	9b01      	ldr	r3, [sp, #4]
 8018774:	6027      	str	r7, [r4, #0]
 8018776:	6365      	str	r5, [r4, #52]	; 0x34
 8018778:	63a3      	str	r3, [r4, #56]	; 0x38
 801877a:	e7e9      	b.n	8018750 <__submore+0x44>
 801877c:	000003ff 	.word	0x000003ff
 8018780:	000003fe 	.word	0x000003fe
 8018784:	000003fd 	.word	0x000003fd

08018788 <__errno>:
 8018788:	4b01      	ldr	r3, [pc, #4]	; (8018790 <__errno+0x8>)
 801878a:	6818      	ldr	r0, [r3, #0]
 801878c:	4770      	bx	lr
 801878e:	46c0      	nop			; (mov r8, r8)
 8018790:	20000244 	.word	0x20000244

08018794 <_close>:
 8018794:	2258      	movs	r2, #88	; 0x58
 8018796:	2001      	movs	r0, #1
 8018798:	4b01      	ldr	r3, [pc, #4]	; (80187a0 <_close+0xc>)
 801879a:	4240      	negs	r0, r0
 801879c:	601a      	str	r2, [r3, #0]
 801879e:	4770      	bx	lr
 80187a0:	20001de8 	.word	0x20001de8

080187a4 <_fstat>:
 80187a4:	2258      	movs	r2, #88	; 0x58
 80187a6:	2001      	movs	r0, #1
 80187a8:	4b01      	ldr	r3, [pc, #4]	; (80187b0 <_fstat+0xc>)
 80187aa:	4240      	negs	r0, r0
 80187ac:	601a      	str	r2, [r3, #0]
 80187ae:	4770      	bx	lr
 80187b0:	20001de8 	.word	0x20001de8

080187b4 <_getpid>:
 80187b4:	2258      	movs	r2, #88	; 0x58
 80187b6:	2001      	movs	r0, #1
 80187b8:	4b01      	ldr	r3, [pc, #4]	; (80187c0 <_getpid+0xc>)
 80187ba:	4240      	negs	r0, r0
 80187bc:	601a      	str	r2, [r3, #0]
 80187be:	4770      	bx	lr
 80187c0:	20001de8 	.word	0x20001de8

080187c4 <_isatty>:
 80187c4:	2258      	movs	r2, #88	; 0x58
 80187c6:	4b02      	ldr	r3, [pc, #8]	; (80187d0 <_isatty+0xc>)
 80187c8:	2000      	movs	r0, #0
 80187ca:	601a      	str	r2, [r3, #0]
 80187cc:	4770      	bx	lr
 80187ce:	46c0      	nop			; (mov r8, r8)
 80187d0:	20001de8 	.word	0x20001de8

080187d4 <_kill>:
 80187d4:	2258      	movs	r2, #88	; 0x58
 80187d6:	2001      	movs	r0, #1
 80187d8:	4b01      	ldr	r3, [pc, #4]	; (80187e0 <_kill+0xc>)
 80187da:	4240      	negs	r0, r0
 80187dc:	601a      	str	r2, [r3, #0]
 80187de:	4770      	bx	lr
 80187e0:	20001de8 	.word	0x20001de8

080187e4 <_lseek>:
 80187e4:	2258      	movs	r2, #88	; 0x58
 80187e6:	2001      	movs	r0, #1
 80187e8:	4b01      	ldr	r3, [pc, #4]	; (80187f0 <_lseek+0xc>)
 80187ea:	4240      	negs	r0, r0
 80187ec:	601a      	str	r2, [r3, #0]
 80187ee:	4770      	bx	lr
 80187f0:	20001de8 	.word	0x20001de8

080187f4 <_read>:
 80187f4:	2258      	movs	r2, #88	; 0x58
 80187f6:	2001      	movs	r0, #1
 80187f8:	4b01      	ldr	r3, [pc, #4]	; (8018800 <_read+0xc>)
 80187fa:	4240      	negs	r0, r0
 80187fc:	601a      	str	r2, [r3, #0]
 80187fe:	4770      	bx	lr
 8018800:	20001de8 	.word	0x20001de8

08018804 <_sbrk>:
 8018804:	4a05      	ldr	r2, [pc, #20]	; (801881c <_sbrk+0x18>)
 8018806:	0003      	movs	r3, r0
 8018808:	6811      	ldr	r1, [r2, #0]
 801880a:	2900      	cmp	r1, #0
 801880c:	d101      	bne.n	8018812 <_sbrk+0xe>
 801880e:	4904      	ldr	r1, [pc, #16]	; (8018820 <_sbrk+0x1c>)
 8018810:	6011      	str	r1, [r2, #0]
 8018812:	6810      	ldr	r0, [r2, #0]
 8018814:	18c3      	adds	r3, r0, r3
 8018816:	6013      	str	r3, [r2, #0]
 8018818:	4770      	bx	lr
 801881a:	46c0      	nop			; (mov r8, r8)
 801881c:	20001df0 	.word	0x20001df0
 8018820:	20001df4 	.word	0x20001df4

08018824 <_exit>:
 8018824:	e7fe      	b.n	8018824 <_exit>
	...

08018828 <_init>:
 8018828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882a:	46c0      	nop			; (mov r8, r8)
 801882c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801882e:	bc08      	pop	{r3}
 8018830:	469e      	mov	lr, r3
 8018832:	4770      	bx	lr

08018834 <_fini>:
 8018834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018836:	46c0      	nop			; (mov r8, r8)
 8018838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801883a:	bc08      	pop	{r3}
 801883c:	469e      	mov	lr, r3
 801883e:	4770      	bx	lr
