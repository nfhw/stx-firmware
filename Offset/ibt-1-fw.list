
ibt-1-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa50  080080c0  080080c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002010  08017b10  08017b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019b20  08019b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08019b28  08019b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019b30  08019b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000814  20000000  08019b34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 NoInit        00000410  20000814  0801a348  00020814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000fd8  20000c28  0801a758  00020c28  2**3
                  ALLOC
  9 ._user_heap_stack 00000100  20001c00  0801a758  00021c00  2**0
                  ALLOC
 10 .ARM.attributes 00000028  00000000  00000000  00020c24  2**0
                  CONTENTS, READONLY
 11 .debug_info   0009580f  00000000  00000000  00020c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000c92e  00000000  00000000  000b645b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0002ce58  00000000  00000000  000c2d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000035d0  00000000  00000000  000efbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000047c8  00000000  00000000  000f31b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024086  00000000  00000000  000f7980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00033335  00000000  00000000  0011ba06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8f41  00000000  00000000  0014ed3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f7c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b624  00000000  00000000  001f7cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  0020331c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  002033d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080080c0 <__do_global_dtors_aux>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4c06      	ldr	r4, [pc, #24]	; (80080dc <__do_global_dtors_aux+0x1c>)
 80080c4:	7823      	ldrb	r3, [r4, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <__do_global_dtors_aux+0x1a>
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <__do_global_dtors_aux+0x20>)
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <__do_global_dtors_aux+0x24>)
 80080d2:	e000      	b.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d4:	bf00      	nop
 80080d6:	2301      	movs	r3, #1
 80080d8:	7023      	strb	r3, [r4, #0]
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	20000c28 	.word	0x20000c28
 80080e0:	00000000 	.word	0x00000000
 80080e4:	08017af8 	.word	0x08017af8

080080e8 <frame_dummy>:
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <frame_dummy+0x14>)
 80080ea:	b510      	push	{r4, lr}
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <frame_dummy+0x10>
 80080f0:	4903      	ldr	r1, [pc, #12]	; (8008100 <frame_dummy+0x18>)
 80080f2:	4804      	ldr	r0, [pc, #16]	; (8008104 <frame_dummy+0x1c>)
 80080f4:	e000      	b.n	80080f8 <frame_dummy+0x10>
 80080f6:	bf00      	nop
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	00000000 	.word	0x00000000
 8008100:	20000c2c 	.word	0x20000c2c
 8008104:	08017af8 	.word	0x08017af8

08008108 <strcmp>:
 8008108:	7802      	ldrb	r2, [r0, #0]
 800810a:	780b      	ldrb	r3, [r1, #0]
 800810c:	2a00      	cmp	r2, #0
 800810e:	d003      	beq.n	8008118 <strcmp+0x10>
 8008110:	3001      	adds	r0, #1
 8008112:	3101      	adds	r1, #1
 8008114:	429a      	cmp	r2, r3
 8008116:	d0f7      	beq.n	8008108 <strcmp>
 8008118:	1ad0      	subs	r0, r2, r3
 800811a:	4770      	bx	lr

0800811c <strlen>:
 800811c:	2300      	movs	r3, #0
 800811e:	5cc2      	ldrb	r2, [r0, r3]
 8008120:	3301      	adds	r3, #1
 8008122:	2a00      	cmp	r2, #0
 8008124:	d1fb      	bne.n	800811e <strlen+0x2>
 8008126:	1e58      	subs	r0, r3, #1
 8008128:	4770      	bx	lr
	...

0800812c <__gnu_thumb1_case_uqi>:
 800812c:	b402      	push	{r1}
 800812e:	4671      	mov	r1, lr
 8008130:	0849      	lsrs	r1, r1, #1
 8008132:	0049      	lsls	r1, r1, #1
 8008134:	5c09      	ldrb	r1, [r1, r0]
 8008136:	0049      	lsls	r1, r1, #1
 8008138:	448e      	add	lr, r1
 800813a:	bc02      	pop	{r1}
 800813c:	4770      	bx	lr
 800813e:	46c0      	nop			; (mov r8, r8)

08008140 <__gnu_thumb1_case_uhi>:
 8008140:	b403      	push	{r0, r1}
 8008142:	4671      	mov	r1, lr
 8008144:	0849      	lsrs	r1, r1, #1
 8008146:	0040      	lsls	r0, r0, #1
 8008148:	0049      	lsls	r1, r1, #1
 800814a:	5a09      	ldrh	r1, [r1, r0]
 800814c:	0049      	lsls	r1, r1, #1
 800814e:	448e      	add	lr, r1
 8008150:	bc03      	pop	{r0, r1}
 8008152:	4770      	bx	lr

08008154 <__udivsi3>:
 8008154:	2200      	movs	r2, #0
 8008156:	0843      	lsrs	r3, r0, #1
 8008158:	428b      	cmp	r3, r1
 800815a:	d374      	bcc.n	8008246 <__udivsi3+0xf2>
 800815c:	0903      	lsrs	r3, r0, #4
 800815e:	428b      	cmp	r3, r1
 8008160:	d35f      	bcc.n	8008222 <__udivsi3+0xce>
 8008162:	0a03      	lsrs	r3, r0, #8
 8008164:	428b      	cmp	r3, r1
 8008166:	d344      	bcc.n	80081f2 <__udivsi3+0x9e>
 8008168:	0b03      	lsrs	r3, r0, #12
 800816a:	428b      	cmp	r3, r1
 800816c:	d328      	bcc.n	80081c0 <__udivsi3+0x6c>
 800816e:	0c03      	lsrs	r3, r0, #16
 8008170:	428b      	cmp	r3, r1
 8008172:	d30d      	bcc.n	8008190 <__udivsi3+0x3c>
 8008174:	22ff      	movs	r2, #255	; 0xff
 8008176:	0209      	lsls	r1, r1, #8
 8008178:	ba12      	rev	r2, r2
 800817a:	0c03      	lsrs	r3, r0, #16
 800817c:	428b      	cmp	r3, r1
 800817e:	d302      	bcc.n	8008186 <__udivsi3+0x32>
 8008180:	1212      	asrs	r2, r2, #8
 8008182:	0209      	lsls	r1, r1, #8
 8008184:	d065      	beq.n	8008252 <__udivsi3+0xfe>
 8008186:	0b03      	lsrs	r3, r0, #12
 8008188:	428b      	cmp	r3, r1
 800818a:	d319      	bcc.n	80081c0 <__udivsi3+0x6c>
 800818c:	e000      	b.n	8008190 <__udivsi3+0x3c>
 800818e:	0a09      	lsrs	r1, r1, #8
 8008190:	0bc3      	lsrs	r3, r0, #15
 8008192:	428b      	cmp	r3, r1
 8008194:	d301      	bcc.n	800819a <__udivsi3+0x46>
 8008196:	03cb      	lsls	r3, r1, #15
 8008198:	1ac0      	subs	r0, r0, r3
 800819a:	4152      	adcs	r2, r2
 800819c:	0b83      	lsrs	r3, r0, #14
 800819e:	428b      	cmp	r3, r1
 80081a0:	d301      	bcc.n	80081a6 <__udivsi3+0x52>
 80081a2:	038b      	lsls	r3, r1, #14
 80081a4:	1ac0      	subs	r0, r0, r3
 80081a6:	4152      	adcs	r2, r2
 80081a8:	0b43      	lsrs	r3, r0, #13
 80081aa:	428b      	cmp	r3, r1
 80081ac:	d301      	bcc.n	80081b2 <__udivsi3+0x5e>
 80081ae:	034b      	lsls	r3, r1, #13
 80081b0:	1ac0      	subs	r0, r0, r3
 80081b2:	4152      	adcs	r2, r2
 80081b4:	0b03      	lsrs	r3, r0, #12
 80081b6:	428b      	cmp	r3, r1
 80081b8:	d301      	bcc.n	80081be <__udivsi3+0x6a>
 80081ba:	030b      	lsls	r3, r1, #12
 80081bc:	1ac0      	subs	r0, r0, r3
 80081be:	4152      	adcs	r2, r2
 80081c0:	0ac3      	lsrs	r3, r0, #11
 80081c2:	428b      	cmp	r3, r1
 80081c4:	d301      	bcc.n	80081ca <__udivsi3+0x76>
 80081c6:	02cb      	lsls	r3, r1, #11
 80081c8:	1ac0      	subs	r0, r0, r3
 80081ca:	4152      	adcs	r2, r2
 80081cc:	0a83      	lsrs	r3, r0, #10
 80081ce:	428b      	cmp	r3, r1
 80081d0:	d301      	bcc.n	80081d6 <__udivsi3+0x82>
 80081d2:	028b      	lsls	r3, r1, #10
 80081d4:	1ac0      	subs	r0, r0, r3
 80081d6:	4152      	adcs	r2, r2
 80081d8:	0a43      	lsrs	r3, r0, #9
 80081da:	428b      	cmp	r3, r1
 80081dc:	d301      	bcc.n	80081e2 <__udivsi3+0x8e>
 80081de:	024b      	lsls	r3, r1, #9
 80081e0:	1ac0      	subs	r0, r0, r3
 80081e2:	4152      	adcs	r2, r2
 80081e4:	0a03      	lsrs	r3, r0, #8
 80081e6:	428b      	cmp	r3, r1
 80081e8:	d301      	bcc.n	80081ee <__udivsi3+0x9a>
 80081ea:	020b      	lsls	r3, r1, #8
 80081ec:	1ac0      	subs	r0, r0, r3
 80081ee:	4152      	adcs	r2, r2
 80081f0:	d2cd      	bcs.n	800818e <__udivsi3+0x3a>
 80081f2:	09c3      	lsrs	r3, r0, #7
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d301      	bcc.n	80081fc <__udivsi3+0xa8>
 80081f8:	01cb      	lsls	r3, r1, #7
 80081fa:	1ac0      	subs	r0, r0, r3
 80081fc:	4152      	adcs	r2, r2
 80081fe:	0983      	lsrs	r3, r0, #6
 8008200:	428b      	cmp	r3, r1
 8008202:	d301      	bcc.n	8008208 <__udivsi3+0xb4>
 8008204:	018b      	lsls	r3, r1, #6
 8008206:	1ac0      	subs	r0, r0, r3
 8008208:	4152      	adcs	r2, r2
 800820a:	0943      	lsrs	r3, r0, #5
 800820c:	428b      	cmp	r3, r1
 800820e:	d301      	bcc.n	8008214 <__udivsi3+0xc0>
 8008210:	014b      	lsls	r3, r1, #5
 8008212:	1ac0      	subs	r0, r0, r3
 8008214:	4152      	adcs	r2, r2
 8008216:	0903      	lsrs	r3, r0, #4
 8008218:	428b      	cmp	r3, r1
 800821a:	d301      	bcc.n	8008220 <__udivsi3+0xcc>
 800821c:	010b      	lsls	r3, r1, #4
 800821e:	1ac0      	subs	r0, r0, r3
 8008220:	4152      	adcs	r2, r2
 8008222:	08c3      	lsrs	r3, r0, #3
 8008224:	428b      	cmp	r3, r1
 8008226:	d301      	bcc.n	800822c <__udivsi3+0xd8>
 8008228:	00cb      	lsls	r3, r1, #3
 800822a:	1ac0      	subs	r0, r0, r3
 800822c:	4152      	adcs	r2, r2
 800822e:	0883      	lsrs	r3, r0, #2
 8008230:	428b      	cmp	r3, r1
 8008232:	d301      	bcc.n	8008238 <__udivsi3+0xe4>
 8008234:	008b      	lsls	r3, r1, #2
 8008236:	1ac0      	subs	r0, r0, r3
 8008238:	4152      	adcs	r2, r2
 800823a:	0843      	lsrs	r3, r0, #1
 800823c:	428b      	cmp	r3, r1
 800823e:	d301      	bcc.n	8008244 <__udivsi3+0xf0>
 8008240:	004b      	lsls	r3, r1, #1
 8008242:	1ac0      	subs	r0, r0, r3
 8008244:	4152      	adcs	r2, r2
 8008246:	1a41      	subs	r1, r0, r1
 8008248:	d200      	bcs.n	800824c <__udivsi3+0xf8>
 800824a:	4601      	mov	r1, r0
 800824c:	4152      	adcs	r2, r2
 800824e:	4610      	mov	r0, r2
 8008250:	4770      	bx	lr
 8008252:	e7ff      	b.n	8008254 <__udivsi3+0x100>
 8008254:	b501      	push	{r0, lr}
 8008256:	2000      	movs	r0, #0
 8008258:	f000 f8f0 	bl	800843c <__aeabi_idiv0>
 800825c:	bd02      	pop	{r1, pc}
 800825e:	46c0      	nop			; (mov r8, r8)

08008260 <__aeabi_uidivmod>:
 8008260:	2900      	cmp	r1, #0
 8008262:	d0f7      	beq.n	8008254 <__udivsi3+0x100>
 8008264:	e776      	b.n	8008154 <__udivsi3>
 8008266:	4770      	bx	lr

08008268 <__divsi3>:
 8008268:	4603      	mov	r3, r0
 800826a:	430b      	orrs	r3, r1
 800826c:	d47f      	bmi.n	800836e <__divsi3+0x106>
 800826e:	2200      	movs	r2, #0
 8008270:	0843      	lsrs	r3, r0, #1
 8008272:	428b      	cmp	r3, r1
 8008274:	d374      	bcc.n	8008360 <__divsi3+0xf8>
 8008276:	0903      	lsrs	r3, r0, #4
 8008278:	428b      	cmp	r3, r1
 800827a:	d35f      	bcc.n	800833c <__divsi3+0xd4>
 800827c:	0a03      	lsrs	r3, r0, #8
 800827e:	428b      	cmp	r3, r1
 8008280:	d344      	bcc.n	800830c <__divsi3+0xa4>
 8008282:	0b03      	lsrs	r3, r0, #12
 8008284:	428b      	cmp	r3, r1
 8008286:	d328      	bcc.n	80082da <__divsi3+0x72>
 8008288:	0c03      	lsrs	r3, r0, #16
 800828a:	428b      	cmp	r3, r1
 800828c:	d30d      	bcc.n	80082aa <__divsi3+0x42>
 800828e:	22ff      	movs	r2, #255	; 0xff
 8008290:	0209      	lsls	r1, r1, #8
 8008292:	ba12      	rev	r2, r2
 8008294:	0c03      	lsrs	r3, r0, #16
 8008296:	428b      	cmp	r3, r1
 8008298:	d302      	bcc.n	80082a0 <__divsi3+0x38>
 800829a:	1212      	asrs	r2, r2, #8
 800829c:	0209      	lsls	r1, r1, #8
 800829e:	d065      	beq.n	800836c <__divsi3+0x104>
 80082a0:	0b03      	lsrs	r3, r0, #12
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d319      	bcc.n	80082da <__divsi3+0x72>
 80082a6:	e000      	b.n	80082aa <__divsi3+0x42>
 80082a8:	0a09      	lsrs	r1, r1, #8
 80082aa:	0bc3      	lsrs	r3, r0, #15
 80082ac:	428b      	cmp	r3, r1
 80082ae:	d301      	bcc.n	80082b4 <__divsi3+0x4c>
 80082b0:	03cb      	lsls	r3, r1, #15
 80082b2:	1ac0      	subs	r0, r0, r3
 80082b4:	4152      	adcs	r2, r2
 80082b6:	0b83      	lsrs	r3, r0, #14
 80082b8:	428b      	cmp	r3, r1
 80082ba:	d301      	bcc.n	80082c0 <__divsi3+0x58>
 80082bc:	038b      	lsls	r3, r1, #14
 80082be:	1ac0      	subs	r0, r0, r3
 80082c0:	4152      	adcs	r2, r2
 80082c2:	0b43      	lsrs	r3, r0, #13
 80082c4:	428b      	cmp	r3, r1
 80082c6:	d301      	bcc.n	80082cc <__divsi3+0x64>
 80082c8:	034b      	lsls	r3, r1, #13
 80082ca:	1ac0      	subs	r0, r0, r3
 80082cc:	4152      	adcs	r2, r2
 80082ce:	0b03      	lsrs	r3, r0, #12
 80082d0:	428b      	cmp	r3, r1
 80082d2:	d301      	bcc.n	80082d8 <__divsi3+0x70>
 80082d4:	030b      	lsls	r3, r1, #12
 80082d6:	1ac0      	subs	r0, r0, r3
 80082d8:	4152      	adcs	r2, r2
 80082da:	0ac3      	lsrs	r3, r0, #11
 80082dc:	428b      	cmp	r3, r1
 80082de:	d301      	bcc.n	80082e4 <__divsi3+0x7c>
 80082e0:	02cb      	lsls	r3, r1, #11
 80082e2:	1ac0      	subs	r0, r0, r3
 80082e4:	4152      	adcs	r2, r2
 80082e6:	0a83      	lsrs	r3, r0, #10
 80082e8:	428b      	cmp	r3, r1
 80082ea:	d301      	bcc.n	80082f0 <__divsi3+0x88>
 80082ec:	028b      	lsls	r3, r1, #10
 80082ee:	1ac0      	subs	r0, r0, r3
 80082f0:	4152      	adcs	r2, r2
 80082f2:	0a43      	lsrs	r3, r0, #9
 80082f4:	428b      	cmp	r3, r1
 80082f6:	d301      	bcc.n	80082fc <__divsi3+0x94>
 80082f8:	024b      	lsls	r3, r1, #9
 80082fa:	1ac0      	subs	r0, r0, r3
 80082fc:	4152      	adcs	r2, r2
 80082fe:	0a03      	lsrs	r3, r0, #8
 8008300:	428b      	cmp	r3, r1
 8008302:	d301      	bcc.n	8008308 <__divsi3+0xa0>
 8008304:	020b      	lsls	r3, r1, #8
 8008306:	1ac0      	subs	r0, r0, r3
 8008308:	4152      	adcs	r2, r2
 800830a:	d2cd      	bcs.n	80082a8 <__divsi3+0x40>
 800830c:	09c3      	lsrs	r3, r0, #7
 800830e:	428b      	cmp	r3, r1
 8008310:	d301      	bcc.n	8008316 <__divsi3+0xae>
 8008312:	01cb      	lsls	r3, r1, #7
 8008314:	1ac0      	subs	r0, r0, r3
 8008316:	4152      	adcs	r2, r2
 8008318:	0983      	lsrs	r3, r0, #6
 800831a:	428b      	cmp	r3, r1
 800831c:	d301      	bcc.n	8008322 <__divsi3+0xba>
 800831e:	018b      	lsls	r3, r1, #6
 8008320:	1ac0      	subs	r0, r0, r3
 8008322:	4152      	adcs	r2, r2
 8008324:	0943      	lsrs	r3, r0, #5
 8008326:	428b      	cmp	r3, r1
 8008328:	d301      	bcc.n	800832e <__divsi3+0xc6>
 800832a:	014b      	lsls	r3, r1, #5
 800832c:	1ac0      	subs	r0, r0, r3
 800832e:	4152      	adcs	r2, r2
 8008330:	0903      	lsrs	r3, r0, #4
 8008332:	428b      	cmp	r3, r1
 8008334:	d301      	bcc.n	800833a <__divsi3+0xd2>
 8008336:	010b      	lsls	r3, r1, #4
 8008338:	1ac0      	subs	r0, r0, r3
 800833a:	4152      	adcs	r2, r2
 800833c:	08c3      	lsrs	r3, r0, #3
 800833e:	428b      	cmp	r3, r1
 8008340:	d301      	bcc.n	8008346 <__divsi3+0xde>
 8008342:	00cb      	lsls	r3, r1, #3
 8008344:	1ac0      	subs	r0, r0, r3
 8008346:	4152      	adcs	r2, r2
 8008348:	0883      	lsrs	r3, r0, #2
 800834a:	428b      	cmp	r3, r1
 800834c:	d301      	bcc.n	8008352 <__divsi3+0xea>
 800834e:	008b      	lsls	r3, r1, #2
 8008350:	1ac0      	subs	r0, r0, r3
 8008352:	4152      	adcs	r2, r2
 8008354:	0843      	lsrs	r3, r0, #1
 8008356:	428b      	cmp	r3, r1
 8008358:	d301      	bcc.n	800835e <__divsi3+0xf6>
 800835a:	004b      	lsls	r3, r1, #1
 800835c:	1ac0      	subs	r0, r0, r3
 800835e:	4152      	adcs	r2, r2
 8008360:	1a41      	subs	r1, r0, r1
 8008362:	d200      	bcs.n	8008366 <__divsi3+0xfe>
 8008364:	4601      	mov	r1, r0
 8008366:	4152      	adcs	r2, r2
 8008368:	4610      	mov	r0, r2
 800836a:	4770      	bx	lr
 800836c:	e05d      	b.n	800842a <__divsi3+0x1c2>
 800836e:	0fca      	lsrs	r2, r1, #31
 8008370:	d000      	beq.n	8008374 <__divsi3+0x10c>
 8008372:	4249      	negs	r1, r1
 8008374:	1003      	asrs	r3, r0, #32
 8008376:	d300      	bcc.n	800837a <__divsi3+0x112>
 8008378:	4240      	negs	r0, r0
 800837a:	4053      	eors	r3, r2
 800837c:	2200      	movs	r2, #0
 800837e:	469c      	mov	ip, r3
 8008380:	0903      	lsrs	r3, r0, #4
 8008382:	428b      	cmp	r3, r1
 8008384:	d32d      	bcc.n	80083e2 <__divsi3+0x17a>
 8008386:	0a03      	lsrs	r3, r0, #8
 8008388:	428b      	cmp	r3, r1
 800838a:	d312      	bcc.n	80083b2 <__divsi3+0x14a>
 800838c:	22fc      	movs	r2, #252	; 0xfc
 800838e:	0189      	lsls	r1, r1, #6
 8008390:	ba12      	rev	r2, r2
 8008392:	0a03      	lsrs	r3, r0, #8
 8008394:	428b      	cmp	r3, r1
 8008396:	d30c      	bcc.n	80083b2 <__divsi3+0x14a>
 8008398:	0189      	lsls	r1, r1, #6
 800839a:	1192      	asrs	r2, r2, #6
 800839c:	428b      	cmp	r3, r1
 800839e:	d308      	bcc.n	80083b2 <__divsi3+0x14a>
 80083a0:	0189      	lsls	r1, r1, #6
 80083a2:	1192      	asrs	r2, r2, #6
 80083a4:	428b      	cmp	r3, r1
 80083a6:	d304      	bcc.n	80083b2 <__divsi3+0x14a>
 80083a8:	0189      	lsls	r1, r1, #6
 80083aa:	d03a      	beq.n	8008422 <__divsi3+0x1ba>
 80083ac:	1192      	asrs	r2, r2, #6
 80083ae:	e000      	b.n	80083b2 <__divsi3+0x14a>
 80083b0:	0989      	lsrs	r1, r1, #6
 80083b2:	09c3      	lsrs	r3, r0, #7
 80083b4:	428b      	cmp	r3, r1
 80083b6:	d301      	bcc.n	80083bc <__divsi3+0x154>
 80083b8:	01cb      	lsls	r3, r1, #7
 80083ba:	1ac0      	subs	r0, r0, r3
 80083bc:	4152      	adcs	r2, r2
 80083be:	0983      	lsrs	r3, r0, #6
 80083c0:	428b      	cmp	r3, r1
 80083c2:	d301      	bcc.n	80083c8 <__divsi3+0x160>
 80083c4:	018b      	lsls	r3, r1, #6
 80083c6:	1ac0      	subs	r0, r0, r3
 80083c8:	4152      	adcs	r2, r2
 80083ca:	0943      	lsrs	r3, r0, #5
 80083cc:	428b      	cmp	r3, r1
 80083ce:	d301      	bcc.n	80083d4 <__divsi3+0x16c>
 80083d0:	014b      	lsls	r3, r1, #5
 80083d2:	1ac0      	subs	r0, r0, r3
 80083d4:	4152      	adcs	r2, r2
 80083d6:	0903      	lsrs	r3, r0, #4
 80083d8:	428b      	cmp	r3, r1
 80083da:	d301      	bcc.n	80083e0 <__divsi3+0x178>
 80083dc:	010b      	lsls	r3, r1, #4
 80083de:	1ac0      	subs	r0, r0, r3
 80083e0:	4152      	adcs	r2, r2
 80083e2:	08c3      	lsrs	r3, r0, #3
 80083e4:	428b      	cmp	r3, r1
 80083e6:	d301      	bcc.n	80083ec <__divsi3+0x184>
 80083e8:	00cb      	lsls	r3, r1, #3
 80083ea:	1ac0      	subs	r0, r0, r3
 80083ec:	4152      	adcs	r2, r2
 80083ee:	0883      	lsrs	r3, r0, #2
 80083f0:	428b      	cmp	r3, r1
 80083f2:	d301      	bcc.n	80083f8 <__divsi3+0x190>
 80083f4:	008b      	lsls	r3, r1, #2
 80083f6:	1ac0      	subs	r0, r0, r3
 80083f8:	4152      	adcs	r2, r2
 80083fa:	d2d9      	bcs.n	80083b0 <__divsi3+0x148>
 80083fc:	0843      	lsrs	r3, r0, #1
 80083fe:	428b      	cmp	r3, r1
 8008400:	d301      	bcc.n	8008406 <__divsi3+0x19e>
 8008402:	004b      	lsls	r3, r1, #1
 8008404:	1ac0      	subs	r0, r0, r3
 8008406:	4152      	adcs	r2, r2
 8008408:	1a41      	subs	r1, r0, r1
 800840a:	d200      	bcs.n	800840e <__divsi3+0x1a6>
 800840c:	4601      	mov	r1, r0
 800840e:	4663      	mov	r3, ip
 8008410:	4152      	adcs	r2, r2
 8008412:	105b      	asrs	r3, r3, #1
 8008414:	4610      	mov	r0, r2
 8008416:	d301      	bcc.n	800841c <__divsi3+0x1b4>
 8008418:	4240      	negs	r0, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d500      	bpl.n	8008420 <__divsi3+0x1b8>
 800841e:	4249      	negs	r1, r1
 8008420:	4770      	bx	lr
 8008422:	4663      	mov	r3, ip
 8008424:	105b      	asrs	r3, r3, #1
 8008426:	d300      	bcc.n	800842a <__divsi3+0x1c2>
 8008428:	4240      	negs	r0, r0
 800842a:	b501      	push	{r0, lr}
 800842c:	2000      	movs	r0, #0
 800842e:	f000 f805 	bl	800843c <__aeabi_idiv0>
 8008432:	bd02      	pop	{r1, pc}

08008434 <__aeabi_idivmod>:
 8008434:	2900      	cmp	r1, #0
 8008436:	d0f8      	beq.n	800842a <__divsi3+0x1c2>
 8008438:	e716      	b.n	8008268 <__divsi3>
 800843a:	4770      	bx	lr

0800843c <__aeabi_idiv0>:
 800843c:	4770      	bx	lr
 800843e:	46c0      	nop			; (mov r8, r8)

08008440 <__aeabi_llsl>:
 8008440:	4091      	lsls	r1, r2
 8008442:	1c03      	adds	r3, r0, #0
 8008444:	4090      	lsls	r0, r2
 8008446:	469c      	mov	ip, r3
 8008448:	3a20      	subs	r2, #32
 800844a:	4093      	lsls	r3, r2
 800844c:	4319      	orrs	r1, r3
 800844e:	4252      	negs	r2, r2
 8008450:	4663      	mov	r3, ip
 8008452:	40d3      	lsrs	r3, r2
 8008454:	4319      	orrs	r1, r3
 8008456:	4770      	bx	lr

08008458 <__aeabi_cdrcmple>:
 8008458:	4684      	mov	ip, r0
 800845a:	1c10      	adds	r0, r2, #0
 800845c:	4662      	mov	r2, ip
 800845e:	468c      	mov	ip, r1
 8008460:	1c19      	adds	r1, r3, #0
 8008462:	4663      	mov	r3, ip
 8008464:	e000      	b.n	8008468 <__aeabi_cdcmpeq>
 8008466:	46c0      	nop			; (mov r8, r8)

08008468 <__aeabi_cdcmpeq>:
 8008468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800846a:	f001 f81b 	bl	80094a4 <__ledf2>
 800846e:	2800      	cmp	r0, #0
 8008470:	d401      	bmi.n	8008476 <__aeabi_cdcmpeq+0xe>
 8008472:	2100      	movs	r1, #0
 8008474:	42c8      	cmn	r0, r1
 8008476:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08008478 <__aeabi_dcmpeq>:
 8008478:	b510      	push	{r4, lr}
 800847a:	f000 ff73 	bl	8009364 <__eqdf2>
 800847e:	4240      	negs	r0, r0
 8008480:	3001      	adds	r0, #1
 8008482:	bd10      	pop	{r4, pc}

08008484 <__aeabi_dcmplt>:
 8008484:	b510      	push	{r4, lr}
 8008486:	f001 f80d 	bl	80094a4 <__ledf2>
 800848a:	2800      	cmp	r0, #0
 800848c:	db01      	blt.n	8008492 <__aeabi_dcmplt+0xe>
 800848e:	2000      	movs	r0, #0
 8008490:	bd10      	pop	{r4, pc}
 8008492:	2001      	movs	r0, #1
 8008494:	bd10      	pop	{r4, pc}
 8008496:	46c0      	nop			; (mov r8, r8)

08008498 <__aeabi_dcmple>:
 8008498:	b510      	push	{r4, lr}
 800849a:	f001 f803 	bl	80094a4 <__ledf2>
 800849e:	2800      	cmp	r0, #0
 80084a0:	dd01      	ble.n	80084a6 <__aeabi_dcmple+0xe>
 80084a2:	2000      	movs	r0, #0
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	2001      	movs	r0, #1
 80084a8:	bd10      	pop	{r4, pc}
 80084aa:	46c0      	nop			; (mov r8, r8)

080084ac <__aeabi_dcmpgt>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	f000 ff95 	bl	80093dc <__gedf2>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	dc01      	bgt.n	80084ba <__aeabi_dcmpgt+0xe>
 80084b6:	2000      	movs	r0, #0
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	2001      	movs	r0, #1
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	46c0      	nop			; (mov r8, r8)

080084c0 <__aeabi_dcmpge>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	f000 ff8b 	bl	80093dc <__gedf2>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	da01      	bge.n	80084ce <__aeabi_dcmpge+0xe>
 80084ca:	2000      	movs	r0, #0
 80084cc:	bd10      	pop	{r4, pc}
 80084ce:	2001      	movs	r0, #1
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	46c0      	nop			; (mov r8, r8)

080084d4 <__aeabi_uldivmod>:
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d111      	bne.n	80084fc <__aeabi_uldivmod+0x28>
 80084d8:	2a00      	cmp	r2, #0
 80084da:	d10f      	bne.n	80084fc <__aeabi_uldivmod+0x28>
 80084dc:	2900      	cmp	r1, #0
 80084de:	d100      	bne.n	80084e2 <__aeabi_uldivmod+0xe>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d002      	beq.n	80084ea <__aeabi_uldivmod+0x16>
 80084e4:	2100      	movs	r1, #0
 80084e6:	43c9      	mvns	r1, r1
 80084e8:	1c08      	adds	r0, r1, #0
 80084ea:	b407      	push	{r0, r1, r2}
 80084ec:	4802      	ldr	r0, [pc, #8]	; (80084f8 <__aeabi_uldivmod+0x24>)
 80084ee:	a102      	add	r1, pc, #8	; (adr r1, 80084f8 <__aeabi_uldivmod+0x24>)
 80084f0:	1840      	adds	r0, r0, r1
 80084f2:	9002      	str	r0, [sp, #8]
 80084f4:	bd03      	pop	{r0, r1, pc}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	ffffff45 	.word	0xffffff45
 80084fc:	b403      	push	{r0, r1}
 80084fe:	4668      	mov	r0, sp
 8008500:	b501      	push	{r0, lr}
 8008502:	9802      	ldr	r0, [sp, #8]
 8008504:	f000 f84e 	bl	80085a4 <__udivmoddi4>
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	469e      	mov	lr, r3
 800850c:	b002      	add	sp, #8
 800850e:	bc0c      	pop	{r2, r3}
 8008510:	4770      	bx	lr
 8008512:	46c0      	nop			; (mov r8, r8)

08008514 <__aeabi_lmul>:
 8008514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008516:	46ce      	mov	lr, r9
 8008518:	4647      	mov	r7, r8
 800851a:	0415      	lsls	r5, r2, #16
 800851c:	0c2d      	lsrs	r5, r5, #16
 800851e:	002e      	movs	r6, r5
 8008520:	b580      	push	{r7, lr}
 8008522:	0407      	lsls	r7, r0, #16
 8008524:	0c14      	lsrs	r4, r2, #16
 8008526:	0c3f      	lsrs	r7, r7, #16
 8008528:	4699      	mov	r9, r3
 800852a:	0c03      	lsrs	r3, r0, #16
 800852c:	437e      	muls	r6, r7
 800852e:	435d      	muls	r5, r3
 8008530:	4367      	muls	r7, r4
 8008532:	4363      	muls	r3, r4
 8008534:	197f      	adds	r7, r7, r5
 8008536:	0c34      	lsrs	r4, r6, #16
 8008538:	19e4      	adds	r4, r4, r7
 800853a:	469c      	mov	ip, r3
 800853c:	42a5      	cmp	r5, r4
 800853e:	d903      	bls.n	8008548 <__aeabi_lmul+0x34>
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	025b      	lsls	r3, r3, #9
 8008544:	4698      	mov	r8, r3
 8008546:	44c4      	add	ip, r8
 8008548:	464b      	mov	r3, r9
 800854a:	4343      	muls	r3, r0
 800854c:	4351      	muls	r1, r2
 800854e:	0c25      	lsrs	r5, r4, #16
 8008550:	0436      	lsls	r6, r6, #16
 8008552:	4465      	add	r5, ip
 8008554:	0c36      	lsrs	r6, r6, #16
 8008556:	0424      	lsls	r4, r4, #16
 8008558:	19a4      	adds	r4, r4, r6
 800855a:	195b      	adds	r3, r3, r5
 800855c:	1859      	adds	r1, r3, r1
 800855e:	0020      	movs	r0, r4
 8008560:	bc0c      	pop	{r2, r3}
 8008562:	4690      	mov	r8, r2
 8008564:	4699      	mov	r9, r3
 8008566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008568 <__aeabi_d2uiz>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	2200      	movs	r2, #0
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <__aeabi_d2uiz+0x38>)
 800856e:	0004      	movs	r4, r0
 8008570:	000d      	movs	r5, r1
 8008572:	f7ff ffa5 	bl	80084c0 <__aeabi_dcmpge>
 8008576:	2800      	cmp	r0, #0
 8008578:	d104      	bne.n	8008584 <__aeabi_d2uiz+0x1c>
 800857a:	0020      	movs	r0, r4
 800857c:	0029      	movs	r1, r5
 800857e:	f001 fdb3 	bl	800a0e8 <__aeabi_d2iz>
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <__aeabi_d2uiz+0x38>)
 8008586:	2200      	movs	r2, #0
 8008588:	0020      	movs	r0, r4
 800858a:	0029      	movs	r1, r5
 800858c:	f001 fa64 	bl	8009a58 <__aeabi_dsub>
 8008590:	f001 fdaa 	bl	800a0e8 <__aeabi_d2iz>
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	061b      	lsls	r3, r3, #24
 8008598:	469c      	mov	ip, r3
 800859a:	4460      	add	r0, ip
 800859c:	e7f1      	b.n	8008582 <__aeabi_d2uiz+0x1a>
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	41e00000 	.word	0x41e00000

080085a4 <__udivmoddi4>:
 80085a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a6:	464f      	mov	r7, r9
 80085a8:	4646      	mov	r6, r8
 80085aa:	46d6      	mov	lr, sl
 80085ac:	b5c0      	push	{r6, r7, lr}
 80085ae:	0004      	movs	r4, r0
 80085b0:	b082      	sub	sp, #8
 80085b2:	000d      	movs	r5, r1
 80085b4:	4691      	mov	r9, r2
 80085b6:	4698      	mov	r8, r3
 80085b8:	428b      	cmp	r3, r1
 80085ba:	d82f      	bhi.n	800861c <__udivmoddi4+0x78>
 80085bc:	d02c      	beq.n	8008618 <__udivmoddi4+0x74>
 80085be:	4641      	mov	r1, r8
 80085c0:	4648      	mov	r0, r9
 80085c2:	f001 fe51 	bl	800a268 <__clzdi2>
 80085c6:	0029      	movs	r1, r5
 80085c8:	0006      	movs	r6, r0
 80085ca:	0020      	movs	r0, r4
 80085cc:	f001 fe4c 	bl	800a268 <__clzdi2>
 80085d0:	1a33      	subs	r3, r6, r0
 80085d2:	469c      	mov	ip, r3
 80085d4:	3b20      	subs	r3, #32
 80085d6:	469a      	mov	sl, r3
 80085d8:	d500      	bpl.n	80085dc <__udivmoddi4+0x38>
 80085da:	e076      	b.n	80086ca <__udivmoddi4+0x126>
 80085dc:	464b      	mov	r3, r9
 80085de:	4652      	mov	r2, sl
 80085e0:	4093      	lsls	r3, r2
 80085e2:	001f      	movs	r7, r3
 80085e4:	464b      	mov	r3, r9
 80085e6:	4662      	mov	r2, ip
 80085e8:	4093      	lsls	r3, r2
 80085ea:	001e      	movs	r6, r3
 80085ec:	42af      	cmp	r7, r5
 80085ee:	d828      	bhi.n	8008642 <__udivmoddi4+0x9e>
 80085f0:	d025      	beq.n	800863e <__udivmoddi4+0x9a>
 80085f2:	4653      	mov	r3, sl
 80085f4:	1ba4      	subs	r4, r4, r6
 80085f6:	41bd      	sbcs	r5, r7
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	da00      	bge.n	80085fe <__udivmoddi4+0x5a>
 80085fc:	e07b      	b.n	80086f6 <__udivmoddi4+0x152>
 80085fe:	2200      	movs	r2, #0
 8008600:	2300      	movs	r3, #0
 8008602:	9200      	str	r2, [sp, #0]
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	2301      	movs	r3, #1
 8008608:	4652      	mov	r2, sl
 800860a:	4093      	lsls	r3, r2
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2301      	movs	r3, #1
 8008610:	4662      	mov	r2, ip
 8008612:	4093      	lsls	r3, r2
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	e018      	b.n	800864a <__udivmoddi4+0xa6>
 8008618:	4282      	cmp	r2, r0
 800861a:	d9d0      	bls.n	80085be <__udivmoddi4+0x1a>
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	9200      	str	r2, [sp, #0]
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <__udivmoddi4+0x8a>
 800862a:	601c      	str	r4, [r3, #0]
 800862c:	605d      	str	r5, [r3, #4]
 800862e:	9800      	ldr	r0, [sp, #0]
 8008630:	9901      	ldr	r1, [sp, #4]
 8008632:	b002      	add	sp, #8
 8008634:	bc1c      	pop	{r2, r3, r4}
 8008636:	4690      	mov	r8, r2
 8008638:	4699      	mov	r9, r3
 800863a:	46a2      	mov	sl, r4
 800863c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863e:	42a3      	cmp	r3, r4
 8008640:	d9d7      	bls.n	80085f2 <__udivmoddi4+0x4e>
 8008642:	2200      	movs	r2, #0
 8008644:	2300      	movs	r3, #0
 8008646:	9200      	str	r2, [sp, #0]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	4663      	mov	r3, ip
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0e9      	beq.n	8008624 <__udivmoddi4+0x80>
 8008650:	07fb      	lsls	r3, r7, #31
 8008652:	4698      	mov	r8, r3
 8008654:	4641      	mov	r1, r8
 8008656:	0872      	lsrs	r2, r6, #1
 8008658:	430a      	orrs	r2, r1
 800865a:	087b      	lsrs	r3, r7, #1
 800865c:	4666      	mov	r6, ip
 800865e:	e00e      	b.n	800867e <__udivmoddi4+0xda>
 8008660:	42ab      	cmp	r3, r5
 8008662:	d101      	bne.n	8008668 <__udivmoddi4+0xc4>
 8008664:	42a2      	cmp	r2, r4
 8008666:	d80c      	bhi.n	8008682 <__udivmoddi4+0xde>
 8008668:	1aa4      	subs	r4, r4, r2
 800866a:	419d      	sbcs	r5, r3
 800866c:	2001      	movs	r0, #1
 800866e:	1924      	adds	r4, r4, r4
 8008670:	416d      	adcs	r5, r5
 8008672:	2100      	movs	r1, #0
 8008674:	3e01      	subs	r6, #1
 8008676:	1824      	adds	r4, r4, r0
 8008678:	414d      	adcs	r5, r1
 800867a:	2e00      	cmp	r6, #0
 800867c:	d006      	beq.n	800868c <__udivmoddi4+0xe8>
 800867e:	42ab      	cmp	r3, r5
 8008680:	d9ee      	bls.n	8008660 <__udivmoddi4+0xbc>
 8008682:	3e01      	subs	r6, #1
 8008684:	1924      	adds	r4, r4, r4
 8008686:	416d      	adcs	r5, r5
 8008688:	2e00      	cmp	r6, #0
 800868a:	d1f8      	bne.n	800867e <__udivmoddi4+0xda>
 800868c:	9800      	ldr	r0, [sp, #0]
 800868e:	9901      	ldr	r1, [sp, #4]
 8008690:	4653      	mov	r3, sl
 8008692:	1900      	adds	r0, r0, r4
 8008694:	4169      	adcs	r1, r5
 8008696:	2b00      	cmp	r3, #0
 8008698:	db23      	blt.n	80086e2 <__udivmoddi4+0x13e>
 800869a:	002b      	movs	r3, r5
 800869c:	4652      	mov	r2, sl
 800869e:	40d3      	lsrs	r3, r2
 80086a0:	002a      	movs	r2, r5
 80086a2:	4664      	mov	r4, ip
 80086a4:	40e2      	lsrs	r2, r4
 80086a6:	001c      	movs	r4, r3
 80086a8:	4653      	mov	r3, sl
 80086aa:	0015      	movs	r5, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	db2d      	blt.n	800870c <__udivmoddi4+0x168>
 80086b0:	0026      	movs	r6, r4
 80086b2:	4657      	mov	r7, sl
 80086b4:	40be      	lsls	r6, r7
 80086b6:	0033      	movs	r3, r6
 80086b8:	0026      	movs	r6, r4
 80086ba:	4667      	mov	r7, ip
 80086bc:	40be      	lsls	r6, r7
 80086be:	0032      	movs	r2, r6
 80086c0:	1a80      	subs	r0, r0, r2
 80086c2:	4199      	sbcs	r1, r3
 80086c4:	9000      	str	r0, [sp, #0]
 80086c6:	9101      	str	r1, [sp, #4]
 80086c8:	e7ac      	b.n	8008624 <__udivmoddi4+0x80>
 80086ca:	4662      	mov	r2, ip
 80086cc:	2320      	movs	r3, #32
 80086ce:	1a9b      	subs	r3, r3, r2
 80086d0:	464a      	mov	r2, r9
 80086d2:	40da      	lsrs	r2, r3
 80086d4:	4661      	mov	r1, ip
 80086d6:	0013      	movs	r3, r2
 80086d8:	4642      	mov	r2, r8
 80086da:	408a      	lsls	r2, r1
 80086dc:	0017      	movs	r7, r2
 80086de:	431f      	orrs	r7, r3
 80086e0:	e780      	b.n	80085e4 <__udivmoddi4+0x40>
 80086e2:	4662      	mov	r2, ip
 80086e4:	2320      	movs	r3, #32
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	002a      	movs	r2, r5
 80086ea:	4666      	mov	r6, ip
 80086ec:	409a      	lsls	r2, r3
 80086ee:	0023      	movs	r3, r4
 80086f0:	40f3      	lsrs	r3, r6
 80086f2:	4313      	orrs	r3, r2
 80086f4:	e7d4      	b.n	80086a0 <__udivmoddi4+0xfc>
 80086f6:	4662      	mov	r2, ip
 80086f8:	2320      	movs	r3, #32
 80086fa:	2100      	movs	r1, #0
 80086fc:	1a9b      	subs	r3, r3, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	9100      	str	r1, [sp, #0]
 8008702:	9201      	str	r2, [sp, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	40da      	lsrs	r2, r3
 8008708:	9201      	str	r2, [sp, #4]
 800870a:	e780      	b.n	800860e <__udivmoddi4+0x6a>
 800870c:	2320      	movs	r3, #32
 800870e:	4662      	mov	r2, ip
 8008710:	0026      	movs	r6, r4
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	40de      	lsrs	r6, r3
 8008716:	002f      	movs	r7, r5
 8008718:	46b0      	mov	r8, r6
 800871a:	4666      	mov	r6, ip
 800871c:	40b7      	lsls	r7, r6
 800871e:	4646      	mov	r6, r8
 8008720:	003b      	movs	r3, r7
 8008722:	4333      	orrs	r3, r6
 8008724:	e7c8      	b.n	80086b8 <__udivmoddi4+0x114>
 8008726:	46c0      	nop			; (mov r8, r8)

08008728 <__aeabi_dadd>:
 8008728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872a:	464f      	mov	r7, r9
 800872c:	4646      	mov	r6, r8
 800872e:	46d6      	mov	lr, sl
 8008730:	000c      	movs	r4, r1
 8008732:	0309      	lsls	r1, r1, #12
 8008734:	b5c0      	push	{r6, r7, lr}
 8008736:	0a49      	lsrs	r1, r1, #9
 8008738:	0f47      	lsrs	r7, r0, #29
 800873a:	005e      	lsls	r6, r3, #1
 800873c:	4339      	orrs	r1, r7
 800873e:	031f      	lsls	r7, r3, #12
 8008740:	0fdb      	lsrs	r3, r3, #31
 8008742:	469c      	mov	ip, r3
 8008744:	0065      	lsls	r5, r4, #1
 8008746:	0a7b      	lsrs	r3, r7, #9
 8008748:	0f57      	lsrs	r7, r2, #29
 800874a:	431f      	orrs	r7, r3
 800874c:	0d6d      	lsrs	r5, r5, #21
 800874e:	0fe4      	lsrs	r4, r4, #31
 8008750:	0d76      	lsrs	r6, r6, #21
 8008752:	46a1      	mov	r9, r4
 8008754:	00c0      	lsls	r0, r0, #3
 8008756:	46b8      	mov	r8, r7
 8008758:	00d2      	lsls	r2, r2, #3
 800875a:	1bab      	subs	r3, r5, r6
 800875c:	4564      	cmp	r4, ip
 800875e:	d07b      	beq.n	8008858 <__aeabi_dadd+0x130>
 8008760:	2b00      	cmp	r3, #0
 8008762:	dd5f      	ble.n	8008824 <__aeabi_dadd+0xfc>
 8008764:	2e00      	cmp	r6, #0
 8008766:	d000      	beq.n	800876a <__aeabi_dadd+0x42>
 8008768:	e0a4      	b.n	80088b4 <__aeabi_dadd+0x18c>
 800876a:	003e      	movs	r6, r7
 800876c:	4316      	orrs	r6, r2
 800876e:	d100      	bne.n	8008772 <__aeabi_dadd+0x4a>
 8008770:	e112      	b.n	8008998 <__aeabi_dadd+0x270>
 8008772:	1e5e      	subs	r6, r3, #1
 8008774:	2e00      	cmp	r6, #0
 8008776:	d000      	beq.n	800877a <__aeabi_dadd+0x52>
 8008778:	e19e      	b.n	8008ab8 <__aeabi_dadd+0x390>
 800877a:	1a87      	subs	r7, r0, r2
 800877c:	4643      	mov	r3, r8
 800877e:	42b8      	cmp	r0, r7
 8008780:	4180      	sbcs	r0, r0
 8008782:	2501      	movs	r5, #1
 8008784:	1ac9      	subs	r1, r1, r3
 8008786:	4240      	negs	r0, r0
 8008788:	1a09      	subs	r1, r1, r0
 800878a:	020b      	lsls	r3, r1, #8
 800878c:	d400      	bmi.n	8008790 <__aeabi_dadd+0x68>
 800878e:	e131      	b.n	80089f4 <__aeabi_dadd+0x2cc>
 8008790:	0249      	lsls	r1, r1, #9
 8008792:	0a4e      	lsrs	r6, r1, #9
 8008794:	2e00      	cmp	r6, #0
 8008796:	d100      	bne.n	800879a <__aeabi_dadd+0x72>
 8008798:	e16e      	b.n	8008a78 <__aeabi_dadd+0x350>
 800879a:	0030      	movs	r0, r6
 800879c:	f001 fd46 	bl	800a22c <__clzsi2>
 80087a0:	0003      	movs	r3, r0
 80087a2:	3b08      	subs	r3, #8
 80087a4:	2b1f      	cmp	r3, #31
 80087a6:	dd00      	ble.n	80087aa <__aeabi_dadd+0x82>
 80087a8:	e161      	b.n	8008a6e <__aeabi_dadd+0x346>
 80087aa:	2220      	movs	r2, #32
 80087ac:	0039      	movs	r1, r7
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	409e      	lsls	r6, r3
 80087b2:	40d1      	lsrs	r1, r2
 80087b4:	409f      	lsls	r7, r3
 80087b6:	430e      	orrs	r6, r1
 80087b8:	429d      	cmp	r5, r3
 80087ba:	dd00      	ble.n	80087be <__aeabi_dadd+0x96>
 80087bc:	e151      	b.n	8008a62 <__aeabi_dadd+0x33a>
 80087be:	1b5d      	subs	r5, r3, r5
 80087c0:	1c6b      	adds	r3, r5, #1
 80087c2:	2b1f      	cmp	r3, #31
 80087c4:	dd00      	ble.n	80087c8 <__aeabi_dadd+0xa0>
 80087c6:	e17c      	b.n	8008ac2 <__aeabi_dadd+0x39a>
 80087c8:	2120      	movs	r1, #32
 80087ca:	1ac9      	subs	r1, r1, r3
 80087cc:	003d      	movs	r5, r7
 80087ce:	0030      	movs	r0, r6
 80087d0:	408f      	lsls	r7, r1
 80087d2:	4088      	lsls	r0, r1
 80087d4:	40dd      	lsrs	r5, r3
 80087d6:	1e79      	subs	r1, r7, #1
 80087d8:	418f      	sbcs	r7, r1
 80087da:	0031      	movs	r1, r6
 80087dc:	2207      	movs	r2, #7
 80087de:	4328      	orrs	r0, r5
 80087e0:	40d9      	lsrs	r1, r3
 80087e2:	2500      	movs	r5, #0
 80087e4:	4307      	orrs	r7, r0
 80087e6:	403a      	ands	r2, r7
 80087e8:	2a00      	cmp	r2, #0
 80087ea:	d009      	beq.n	8008800 <__aeabi_dadd+0xd8>
 80087ec:	230f      	movs	r3, #15
 80087ee:	403b      	ands	r3, r7
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d005      	beq.n	8008800 <__aeabi_dadd+0xd8>
 80087f4:	1d3b      	adds	r3, r7, #4
 80087f6:	42bb      	cmp	r3, r7
 80087f8:	41bf      	sbcs	r7, r7
 80087fa:	427f      	negs	r7, r7
 80087fc:	19c9      	adds	r1, r1, r7
 80087fe:	001f      	movs	r7, r3
 8008800:	020b      	lsls	r3, r1, #8
 8008802:	d400      	bmi.n	8008806 <__aeabi_dadd+0xde>
 8008804:	e226      	b.n	8008c54 <__aeabi_dadd+0x52c>
 8008806:	1c6a      	adds	r2, r5, #1
 8008808:	4bc6      	ldr	r3, [pc, #792]	; (8008b24 <__aeabi_dadd+0x3fc>)
 800880a:	0555      	lsls	r5, r2, #21
 800880c:	0d6d      	lsrs	r5, r5, #21
 800880e:	429a      	cmp	r2, r3
 8008810:	d100      	bne.n	8008814 <__aeabi_dadd+0xec>
 8008812:	e106      	b.n	8008a22 <__aeabi_dadd+0x2fa>
 8008814:	4ac4      	ldr	r2, [pc, #784]	; (8008b28 <__aeabi_dadd+0x400>)
 8008816:	08ff      	lsrs	r7, r7, #3
 8008818:	400a      	ands	r2, r1
 800881a:	0753      	lsls	r3, r2, #29
 800881c:	0252      	lsls	r2, r2, #9
 800881e:	433b      	orrs	r3, r7
 8008820:	0b12      	lsrs	r2, r2, #12
 8008822:	e08e      	b.n	8008942 <__aeabi_dadd+0x21a>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d000      	beq.n	800882a <__aeabi_dadd+0x102>
 8008828:	e0b8      	b.n	800899c <__aeabi_dadd+0x274>
 800882a:	1c6b      	adds	r3, r5, #1
 800882c:	055b      	lsls	r3, r3, #21
 800882e:	0d5b      	lsrs	r3, r3, #21
 8008830:	2b01      	cmp	r3, #1
 8008832:	dc00      	bgt.n	8008836 <__aeabi_dadd+0x10e>
 8008834:	e130      	b.n	8008a98 <__aeabi_dadd+0x370>
 8008836:	1a87      	subs	r7, r0, r2
 8008838:	4643      	mov	r3, r8
 800883a:	42b8      	cmp	r0, r7
 800883c:	41b6      	sbcs	r6, r6
 800883e:	1acb      	subs	r3, r1, r3
 8008840:	4276      	negs	r6, r6
 8008842:	1b9e      	subs	r6, r3, r6
 8008844:	0233      	lsls	r3, r6, #8
 8008846:	d500      	bpl.n	800884a <__aeabi_dadd+0x122>
 8008848:	e14c      	b.n	8008ae4 <__aeabi_dadd+0x3bc>
 800884a:	003b      	movs	r3, r7
 800884c:	4333      	orrs	r3, r6
 800884e:	d1a1      	bne.n	8008794 <__aeabi_dadd+0x6c>
 8008850:	2200      	movs	r2, #0
 8008852:	2400      	movs	r4, #0
 8008854:	2500      	movs	r5, #0
 8008856:	e070      	b.n	800893a <__aeabi_dadd+0x212>
 8008858:	2b00      	cmp	r3, #0
 800885a:	dc00      	bgt.n	800885e <__aeabi_dadd+0x136>
 800885c:	e0e5      	b.n	8008a2a <__aeabi_dadd+0x302>
 800885e:	2e00      	cmp	r6, #0
 8008860:	d100      	bne.n	8008864 <__aeabi_dadd+0x13c>
 8008862:	e083      	b.n	800896c <__aeabi_dadd+0x244>
 8008864:	4eaf      	ldr	r6, [pc, #700]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008866:	42b5      	cmp	r5, r6
 8008868:	d060      	beq.n	800892c <__aeabi_dadd+0x204>
 800886a:	2680      	movs	r6, #128	; 0x80
 800886c:	0436      	lsls	r6, r6, #16
 800886e:	4337      	orrs	r7, r6
 8008870:	46b8      	mov	r8, r7
 8008872:	2b38      	cmp	r3, #56	; 0x38
 8008874:	dc00      	bgt.n	8008878 <__aeabi_dadd+0x150>
 8008876:	e13e      	b.n	8008af6 <__aeabi_dadd+0x3ce>
 8008878:	4643      	mov	r3, r8
 800887a:	4313      	orrs	r3, r2
 800887c:	001f      	movs	r7, r3
 800887e:	1e7a      	subs	r2, r7, #1
 8008880:	4197      	sbcs	r7, r2
 8008882:	183f      	adds	r7, r7, r0
 8008884:	4287      	cmp	r7, r0
 8008886:	4180      	sbcs	r0, r0
 8008888:	4240      	negs	r0, r0
 800888a:	1809      	adds	r1, r1, r0
 800888c:	020b      	lsls	r3, r1, #8
 800888e:	d400      	bmi.n	8008892 <__aeabi_dadd+0x16a>
 8008890:	e0b0      	b.n	80089f4 <__aeabi_dadd+0x2cc>
 8008892:	4ba4      	ldr	r3, [pc, #656]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008894:	3501      	adds	r5, #1
 8008896:	429d      	cmp	r5, r3
 8008898:	d100      	bne.n	800889c <__aeabi_dadd+0x174>
 800889a:	e0c3      	b.n	8008a24 <__aeabi_dadd+0x2fc>
 800889c:	4aa2      	ldr	r2, [pc, #648]	; (8008b28 <__aeabi_dadd+0x400>)
 800889e:	087b      	lsrs	r3, r7, #1
 80088a0:	400a      	ands	r2, r1
 80088a2:	2101      	movs	r1, #1
 80088a4:	400f      	ands	r7, r1
 80088a6:	431f      	orrs	r7, r3
 80088a8:	0851      	lsrs	r1, r2, #1
 80088aa:	07d3      	lsls	r3, r2, #31
 80088ac:	2207      	movs	r2, #7
 80088ae:	431f      	orrs	r7, r3
 80088b0:	403a      	ands	r2, r7
 80088b2:	e799      	b.n	80087e8 <__aeabi_dadd+0xc0>
 80088b4:	4e9b      	ldr	r6, [pc, #620]	; (8008b24 <__aeabi_dadd+0x3fc>)
 80088b6:	42b5      	cmp	r5, r6
 80088b8:	d038      	beq.n	800892c <__aeabi_dadd+0x204>
 80088ba:	2680      	movs	r6, #128	; 0x80
 80088bc:	0436      	lsls	r6, r6, #16
 80088be:	4337      	orrs	r7, r6
 80088c0:	46b8      	mov	r8, r7
 80088c2:	2b38      	cmp	r3, #56	; 0x38
 80088c4:	dd00      	ble.n	80088c8 <__aeabi_dadd+0x1a0>
 80088c6:	e0dc      	b.n	8008a82 <__aeabi_dadd+0x35a>
 80088c8:	2b1f      	cmp	r3, #31
 80088ca:	dc00      	bgt.n	80088ce <__aeabi_dadd+0x1a6>
 80088cc:	e130      	b.n	8008b30 <__aeabi_dadd+0x408>
 80088ce:	001e      	movs	r6, r3
 80088d0:	4647      	mov	r7, r8
 80088d2:	3e20      	subs	r6, #32
 80088d4:	40f7      	lsrs	r7, r6
 80088d6:	46bc      	mov	ip, r7
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d004      	beq.n	80088e6 <__aeabi_dadd+0x1be>
 80088dc:	2640      	movs	r6, #64	; 0x40
 80088de:	1af3      	subs	r3, r6, r3
 80088e0:	4646      	mov	r6, r8
 80088e2:	409e      	lsls	r6, r3
 80088e4:	4332      	orrs	r2, r6
 80088e6:	0017      	movs	r7, r2
 80088e8:	4663      	mov	r3, ip
 80088ea:	1e7a      	subs	r2, r7, #1
 80088ec:	4197      	sbcs	r7, r2
 80088ee:	431f      	orrs	r7, r3
 80088f0:	e0cc      	b.n	8008a8c <__aeabi_dadd+0x364>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d100      	bne.n	80088f8 <__aeabi_dadd+0x1d0>
 80088f6:	e204      	b.n	8008d02 <__aeabi_dadd+0x5da>
 80088f8:	4643      	mov	r3, r8
 80088fa:	4313      	orrs	r3, r2
 80088fc:	d100      	bne.n	8008900 <__aeabi_dadd+0x1d8>
 80088fe:	e159      	b.n	8008bb4 <__aeabi_dadd+0x48c>
 8008900:	074b      	lsls	r3, r1, #29
 8008902:	08c0      	lsrs	r0, r0, #3
 8008904:	4318      	orrs	r0, r3
 8008906:	2380      	movs	r3, #128	; 0x80
 8008908:	08c9      	lsrs	r1, r1, #3
 800890a:	031b      	lsls	r3, r3, #12
 800890c:	4219      	tst	r1, r3
 800890e:	d008      	beq.n	8008922 <__aeabi_dadd+0x1fa>
 8008910:	4645      	mov	r5, r8
 8008912:	08ed      	lsrs	r5, r5, #3
 8008914:	421d      	tst	r5, r3
 8008916:	d104      	bne.n	8008922 <__aeabi_dadd+0x1fa>
 8008918:	4643      	mov	r3, r8
 800891a:	08d0      	lsrs	r0, r2, #3
 800891c:	0759      	lsls	r1, r3, #29
 800891e:	4308      	orrs	r0, r1
 8008920:	0029      	movs	r1, r5
 8008922:	0f42      	lsrs	r2, r0, #29
 8008924:	00c9      	lsls	r1, r1, #3
 8008926:	4d7f      	ldr	r5, [pc, #508]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008928:	4311      	orrs	r1, r2
 800892a:	00c0      	lsls	r0, r0, #3
 800892c:	074b      	lsls	r3, r1, #29
 800892e:	08ca      	lsrs	r2, r1, #3
 8008930:	497c      	ldr	r1, [pc, #496]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008932:	08c0      	lsrs	r0, r0, #3
 8008934:	4303      	orrs	r3, r0
 8008936:	428d      	cmp	r5, r1
 8008938:	d068      	beq.n	8008a0c <__aeabi_dadd+0x2e4>
 800893a:	0312      	lsls	r2, r2, #12
 800893c:	056d      	lsls	r5, r5, #21
 800893e:	0b12      	lsrs	r2, r2, #12
 8008940:	0d6d      	lsrs	r5, r5, #21
 8008942:	2100      	movs	r1, #0
 8008944:	0312      	lsls	r2, r2, #12
 8008946:	0018      	movs	r0, r3
 8008948:	0b13      	lsrs	r3, r2, #12
 800894a:	0d0a      	lsrs	r2, r1, #20
 800894c:	0512      	lsls	r2, r2, #20
 800894e:	431a      	orrs	r2, r3
 8008950:	4b76      	ldr	r3, [pc, #472]	; (8008b2c <__aeabi_dadd+0x404>)
 8008952:	052d      	lsls	r5, r5, #20
 8008954:	4013      	ands	r3, r2
 8008956:	432b      	orrs	r3, r5
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	07e4      	lsls	r4, r4, #31
 800895c:	085b      	lsrs	r3, r3, #1
 800895e:	4323      	orrs	r3, r4
 8008960:	0019      	movs	r1, r3
 8008962:	bc1c      	pop	{r2, r3, r4}
 8008964:	4690      	mov	r8, r2
 8008966:	4699      	mov	r9, r3
 8008968:	46a2      	mov	sl, r4
 800896a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896c:	003e      	movs	r6, r7
 800896e:	4316      	orrs	r6, r2
 8008970:	d012      	beq.n	8008998 <__aeabi_dadd+0x270>
 8008972:	1e5e      	subs	r6, r3, #1
 8008974:	2e00      	cmp	r6, #0
 8008976:	d000      	beq.n	800897a <__aeabi_dadd+0x252>
 8008978:	e100      	b.n	8008b7c <__aeabi_dadd+0x454>
 800897a:	1887      	adds	r7, r0, r2
 800897c:	4287      	cmp	r7, r0
 800897e:	4180      	sbcs	r0, r0
 8008980:	4441      	add	r1, r8
 8008982:	4240      	negs	r0, r0
 8008984:	1809      	adds	r1, r1, r0
 8008986:	2501      	movs	r5, #1
 8008988:	020b      	lsls	r3, r1, #8
 800898a:	d533      	bpl.n	80089f4 <__aeabi_dadd+0x2cc>
 800898c:	2502      	movs	r5, #2
 800898e:	e785      	b.n	800889c <__aeabi_dadd+0x174>
 8008990:	4664      	mov	r4, ip
 8008992:	0033      	movs	r3, r6
 8008994:	4641      	mov	r1, r8
 8008996:	0010      	movs	r0, r2
 8008998:	001d      	movs	r5, r3
 800899a:	e7c7      	b.n	800892c <__aeabi_dadd+0x204>
 800899c:	2d00      	cmp	r5, #0
 800899e:	d000      	beq.n	80089a2 <__aeabi_dadd+0x27a>
 80089a0:	e0da      	b.n	8008b58 <__aeabi_dadd+0x430>
 80089a2:	000c      	movs	r4, r1
 80089a4:	4304      	orrs	r4, r0
 80089a6:	d0f3      	beq.n	8008990 <__aeabi_dadd+0x268>
 80089a8:	1c5c      	adds	r4, r3, #1
 80089aa:	d100      	bne.n	80089ae <__aeabi_dadd+0x286>
 80089ac:	e19f      	b.n	8008cee <__aeabi_dadd+0x5c6>
 80089ae:	4c5d      	ldr	r4, [pc, #372]	; (8008b24 <__aeabi_dadd+0x3fc>)
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d100      	bne.n	80089b6 <__aeabi_dadd+0x28e>
 80089b4:	e12f      	b.n	8008c16 <__aeabi_dadd+0x4ee>
 80089b6:	43db      	mvns	r3, r3
 80089b8:	2b38      	cmp	r3, #56	; 0x38
 80089ba:	dd00      	ble.n	80089be <__aeabi_dadd+0x296>
 80089bc:	e166      	b.n	8008c8c <__aeabi_dadd+0x564>
 80089be:	2b1f      	cmp	r3, #31
 80089c0:	dd00      	ble.n	80089c4 <__aeabi_dadd+0x29c>
 80089c2:	e183      	b.n	8008ccc <__aeabi_dadd+0x5a4>
 80089c4:	2420      	movs	r4, #32
 80089c6:	0005      	movs	r5, r0
 80089c8:	1ae4      	subs	r4, r4, r3
 80089ca:	000f      	movs	r7, r1
 80089cc:	40dd      	lsrs	r5, r3
 80089ce:	40d9      	lsrs	r1, r3
 80089d0:	40a0      	lsls	r0, r4
 80089d2:	4643      	mov	r3, r8
 80089d4:	40a7      	lsls	r7, r4
 80089d6:	1a5b      	subs	r3, r3, r1
 80089d8:	1e44      	subs	r4, r0, #1
 80089da:	41a0      	sbcs	r0, r4
 80089dc:	4698      	mov	r8, r3
 80089de:	432f      	orrs	r7, r5
 80089e0:	4338      	orrs	r0, r7
 80089e2:	1a17      	subs	r7, r2, r0
 80089e4:	42ba      	cmp	r2, r7
 80089e6:	4192      	sbcs	r2, r2
 80089e8:	4643      	mov	r3, r8
 80089ea:	4252      	negs	r2, r2
 80089ec:	1a99      	subs	r1, r3, r2
 80089ee:	4664      	mov	r4, ip
 80089f0:	0035      	movs	r5, r6
 80089f2:	e6ca      	b.n	800878a <__aeabi_dadd+0x62>
 80089f4:	2207      	movs	r2, #7
 80089f6:	403a      	ands	r2, r7
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	d000      	beq.n	80089fe <__aeabi_dadd+0x2d6>
 80089fc:	e6f6      	b.n	80087ec <__aeabi_dadd+0xc4>
 80089fe:	074b      	lsls	r3, r1, #29
 8008a00:	08ca      	lsrs	r2, r1, #3
 8008a02:	4948      	ldr	r1, [pc, #288]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008a04:	08ff      	lsrs	r7, r7, #3
 8008a06:	433b      	orrs	r3, r7
 8008a08:	428d      	cmp	r5, r1
 8008a0a:	d196      	bne.n	800893a <__aeabi_dadd+0x212>
 8008a0c:	0019      	movs	r1, r3
 8008a0e:	4311      	orrs	r1, r2
 8008a10:	d100      	bne.n	8008a14 <__aeabi_dadd+0x2ec>
 8008a12:	e19e      	b.n	8008d52 <__aeabi_dadd+0x62a>
 8008a14:	2180      	movs	r1, #128	; 0x80
 8008a16:	0309      	lsls	r1, r1, #12
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	0312      	lsls	r2, r2, #12
 8008a1c:	0b12      	lsrs	r2, r2, #12
 8008a1e:	4d41      	ldr	r5, [pc, #260]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008a20:	e78f      	b.n	8008942 <__aeabi_dadd+0x21a>
 8008a22:	0015      	movs	r5, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	e78b      	b.n	8008942 <__aeabi_dadd+0x21a>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d000      	beq.n	8008a30 <__aeabi_dadd+0x308>
 8008a2e:	e0c7      	b.n	8008bc0 <__aeabi_dadd+0x498>
 8008a30:	1c6b      	adds	r3, r5, #1
 8008a32:	055f      	lsls	r7, r3, #21
 8008a34:	0d7f      	lsrs	r7, r7, #21
 8008a36:	2f01      	cmp	r7, #1
 8008a38:	dc00      	bgt.n	8008a3c <__aeabi_dadd+0x314>
 8008a3a:	e0f1      	b.n	8008c20 <__aeabi_dadd+0x4f8>
 8008a3c:	4d39      	ldr	r5, [pc, #228]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008a3e:	42ab      	cmp	r3, r5
 8008a40:	d100      	bne.n	8008a44 <__aeabi_dadd+0x31c>
 8008a42:	e0b9      	b.n	8008bb8 <__aeabi_dadd+0x490>
 8008a44:	1885      	adds	r5, r0, r2
 8008a46:	000a      	movs	r2, r1
 8008a48:	4285      	cmp	r5, r0
 8008a4a:	4189      	sbcs	r1, r1
 8008a4c:	4442      	add	r2, r8
 8008a4e:	4249      	negs	r1, r1
 8008a50:	1851      	adds	r1, r2, r1
 8008a52:	2207      	movs	r2, #7
 8008a54:	07cf      	lsls	r7, r1, #31
 8008a56:	086d      	lsrs	r5, r5, #1
 8008a58:	432f      	orrs	r7, r5
 8008a5a:	0849      	lsrs	r1, r1, #1
 8008a5c:	403a      	ands	r2, r7
 8008a5e:	001d      	movs	r5, r3
 8008a60:	e6c2      	b.n	80087e8 <__aeabi_dadd+0xc0>
 8008a62:	2207      	movs	r2, #7
 8008a64:	4930      	ldr	r1, [pc, #192]	; (8008b28 <__aeabi_dadd+0x400>)
 8008a66:	1aed      	subs	r5, r5, r3
 8008a68:	4031      	ands	r1, r6
 8008a6a:	403a      	ands	r2, r7
 8008a6c:	e6bc      	b.n	80087e8 <__aeabi_dadd+0xc0>
 8008a6e:	003e      	movs	r6, r7
 8008a70:	3828      	subs	r0, #40	; 0x28
 8008a72:	4086      	lsls	r6, r0
 8008a74:	2700      	movs	r7, #0
 8008a76:	e69f      	b.n	80087b8 <__aeabi_dadd+0x90>
 8008a78:	0038      	movs	r0, r7
 8008a7a:	f001 fbd7 	bl	800a22c <__clzsi2>
 8008a7e:	3020      	adds	r0, #32
 8008a80:	e68e      	b.n	80087a0 <__aeabi_dadd+0x78>
 8008a82:	4643      	mov	r3, r8
 8008a84:	4313      	orrs	r3, r2
 8008a86:	001f      	movs	r7, r3
 8008a88:	1e7a      	subs	r2, r7, #1
 8008a8a:	4197      	sbcs	r7, r2
 8008a8c:	1bc7      	subs	r7, r0, r7
 8008a8e:	42b8      	cmp	r0, r7
 8008a90:	4180      	sbcs	r0, r0
 8008a92:	4240      	negs	r0, r0
 8008a94:	1a09      	subs	r1, r1, r0
 8008a96:	e678      	b.n	800878a <__aeabi_dadd+0x62>
 8008a98:	000e      	movs	r6, r1
 8008a9a:	003b      	movs	r3, r7
 8008a9c:	4306      	orrs	r6, r0
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	d161      	bne.n	8008b68 <__aeabi_dadd+0x440>
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	d000      	beq.n	8008aaa <__aeabi_dadd+0x382>
 8008aa8:	e0f4      	b.n	8008c94 <__aeabi_dadd+0x56c>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d100      	bne.n	8008ab0 <__aeabi_dadd+0x388>
 8008aae:	e11b      	b.n	8008ce8 <__aeabi_dadd+0x5c0>
 8008ab0:	4664      	mov	r4, ip
 8008ab2:	0039      	movs	r1, r7
 8008ab4:	0010      	movs	r0, r2
 8008ab6:	e739      	b.n	800892c <__aeabi_dadd+0x204>
 8008ab8:	4f1a      	ldr	r7, [pc, #104]	; (8008b24 <__aeabi_dadd+0x3fc>)
 8008aba:	42bb      	cmp	r3, r7
 8008abc:	d07a      	beq.n	8008bb4 <__aeabi_dadd+0x48c>
 8008abe:	0033      	movs	r3, r6
 8008ac0:	e6ff      	b.n	80088c2 <__aeabi_dadd+0x19a>
 8008ac2:	0030      	movs	r0, r6
 8008ac4:	3d1f      	subs	r5, #31
 8008ac6:	40e8      	lsrs	r0, r5
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d003      	beq.n	8008ad4 <__aeabi_dadd+0x3ac>
 8008acc:	2140      	movs	r1, #64	; 0x40
 8008ace:	1acb      	subs	r3, r1, r3
 8008ad0:	409e      	lsls	r6, r3
 8008ad2:	4337      	orrs	r7, r6
 8008ad4:	1e7b      	subs	r3, r7, #1
 8008ad6:	419f      	sbcs	r7, r3
 8008ad8:	2207      	movs	r2, #7
 8008ada:	4307      	orrs	r7, r0
 8008adc:	403a      	ands	r2, r7
 8008ade:	2100      	movs	r1, #0
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	e789      	b.n	80089f8 <__aeabi_dadd+0x2d0>
 8008ae4:	1a17      	subs	r7, r2, r0
 8008ae6:	4643      	mov	r3, r8
 8008ae8:	42ba      	cmp	r2, r7
 8008aea:	41b6      	sbcs	r6, r6
 8008aec:	1a59      	subs	r1, r3, r1
 8008aee:	4276      	negs	r6, r6
 8008af0:	1b8e      	subs	r6, r1, r6
 8008af2:	4664      	mov	r4, ip
 8008af4:	e64e      	b.n	8008794 <__aeabi_dadd+0x6c>
 8008af6:	2b1f      	cmp	r3, #31
 8008af8:	dd00      	ble.n	8008afc <__aeabi_dadd+0x3d4>
 8008afa:	e0ad      	b.n	8008c58 <__aeabi_dadd+0x530>
 8008afc:	2620      	movs	r6, #32
 8008afe:	4647      	mov	r7, r8
 8008b00:	1af6      	subs	r6, r6, r3
 8008b02:	40b7      	lsls	r7, r6
 8008b04:	46b9      	mov	r9, r7
 8008b06:	0017      	movs	r7, r2
 8008b08:	46b2      	mov	sl, r6
 8008b0a:	40df      	lsrs	r7, r3
 8008b0c:	464e      	mov	r6, r9
 8008b0e:	433e      	orrs	r6, r7
 8008b10:	0037      	movs	r7, r6
 8008b12:	4656      	mov	r6, sl
 8008b14:	40b2      	lsls	r2, r6
 8008b16:	1e56      	subs	r6, r2, #1
 8008b18:	41b2      	sbcs	r2, r6
 8008b1a:	4317      	orrs	r7, r2
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	40da      	lsrs	r2, r3
 8008b20:	1889      	adds	r1, r1, r2
 8008b22:	e6ae      	b.n	8008882 <__aeabi_dadd+0x15a>
 8008b24:	000007ff 	.word	0x000007ff
 8008b28:	ff7fffff 	.word	0xff7fffff
 8008b2c:	800fffff 	.word	0x800fffff
 8008b30:	2620      	movs	r6, #32
 8008b32:	4647      	mov	r7, r8
 8008b34:	1af6      	subs	r6, r6, r3
 8008b36:	40b7      	lsls	r7, r6
 8008b38:	46b9      	mov	r9, r7
 8008b3a:	0017      	movs	r7, r2
 8008b3c:	46b2      	mov	sl, r6
 8008b3e:	40df      	lsrs	r7, r3
 8008b40:	464e      	mov	r6, r9
 8008b42:	433e      	orrs	r6, r7
 8008b44:	0037      	movs	r7, r6
 8008b46:	4656      	mov	r6, sl
 8008b48:	40b2      	lsls	r2, r6
 8008b4a:	1e56      	subs	r6, r2, #1
 8008b4c:	41b2      	sbcs	r2, r6
 8008b4e:	4317      	orrs	r7, r2
 8008b50:	4642      	mov	r2, r8
 8008b52:	40da      	lsrs	r2, r3
 8008b54:	1a89      	subs	r1, r1, r2
 8008b56:	e799      	b.n	8008a8c <__aeabi_dadd+0x364>
 8008b58:	4c7f      	ldr	r4, [pc, #508]	; (8008d58 <__aeabi_dadd+0x630>)
 8008b5a:	42a6      	cmp	r6, r4
 8008b5c:	d05b      	beq.n	8008c16 <__aeabi_dadd+0x4ee>
 8008b5e:	2480      	movs	r4, #128	; 0x80
 8008b60:	0424      	lsls	r4, r4, #16
 8008b62:	425b      	negs	r3, r3
 8008b64:	4321      	orrs	r1, r4
 8008b66:	e727      	b.n	80089b8 <__aeabi_dadd+0x290>
 8008b68:	2e00      	cmp	r6, #0
 8008b6a:	d10c      	bne.n	8008b86 <__aeabi_dadd+0x45e>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d100      	bne.n	8008b72 <__aeabi_dadd+0x44a>
 8008b70:	e0cb      	b.n	8008d0a <__aeabi_dadd+0x5e2>
 8008b72:	4664      	mov	r4, ip
 8008b74:	0039      	movs	r1, r7
 8008b76:	0010      	movs	r0, r2
 8008b78:	4d77      	ldr	r5, [pc, #476]	; (8008d58 <__aeabi_dadd+0x630>)
 8008b7a:	e6d7      	b.n	800892c <__aeabi_dadd+0x204>
 8008b7c:	4f76      	ldr	r7, [pc, #472]	; (8008d58 <__aeabi_dadd+0x630>)
 8008b7e:	42bb      	cmp	r3, r7
 8008b80:	d018      	beq.n	8008bb4 <__aeabi_dadd+0x48c>
 8008b82:	0033      	movs	r3, r6
 8008b84:	e675      	b.n	8008872 <__aeabi_dadd+0x14a>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d014      	beq.n	8008bb4 <__aeabi_dadd+0x48c>
 8008b8a:	074b      	lsls	r3, r1, #29
 8008b8c:	08c0      	lsrs	r0, r0, #3
 8008b8e:	4318      	orrs	r0, r3
 8008b90:	2380      	movs	r3, #128	; 0x80
 8008b92:	08c9      	lsrs	r1, r1, #3
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	4219      	tst	r1, r3
 8008b98:	d007      	beq.n	8008baa <__aeabi_dadd+0x482>
 8008b9a:	08fc      	lsrs	r4, r7, #3
 8008b9c:	421c      	tst	r4, r3
 8008b9e:	d104      	bne.n	8008baa <__aeabi_dadd+0x482>
 8008ba0:	0779      	lsls	r1, r7, #29
 8008ba2:	08d0      	lsrs	r0, r2, #3
 8008ba4:	4308      	orrs	r0, r1
 8008ba6:	46e1      	mov	r9, ip
 8008ba8:	0021      	movs	r1, r4
 8008baa:	464c      	mov	r4, r9
 8008bac:	0f42      	lsrs	r2, r0, #29
 8008bae:	00c9      	lsls	r1, r1, #3
 8008bb0:	4311      	orrs	r1, r2
 8008bb2:	00c0      	lsls	r0, r0, #3
 8008bb4:	4d68      	ldr	r5, [pc, #416]	; (8008d58 <__aeabi_dadd+0x630>)
 8008bb6:	e6b9      	b.n	800892c <__aeabi_dadd+0x204>
 8008bb8:	001d      	movs	r5, r3
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e6c0      	b.n	8008942 <__aeabi_dadd+0x21a>
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	d15b      	bne.n	8008c7c <__aeabi_dadd+0x554>
 8008bc4:	000d      	movs	r5, r1
 8008bc6:	4305      	orrs	r5, r0
 8008bc8:	d100      	bne.n	8008bcc <__aeabi_dadd+0x4a4>
 8008bca:	e6e2      	b.n	8008992 <__aeabi_dadd+0x26a>
 8008bcc:	1c5d      	adds	r5, r3, #1
 8008bce:	d100      	bne.n	8008bd2 <__aeabi_dadd+0x4aa>
 8008bd0:	e0b0      	b.n	8008d34 <__aeabi_dadd+0x60c>
 8008bd2:	4d61      	ldr	r5, [pc, #388]	; (8008d58 <__aeabi_dadd+0x630>)
 8008bd4:	42ae      	cmp	r6, r5
 8008bd6:	d01f      	beq.n	8008c18 <__aeabi_dadd+0x4f0>
 8008bd8:	43db      	mvns	r3, r3
 8008bda:	2b38      	cmp	r3, #56	; 0x38
 8008bdc:	dc71      	bgt.n	8008cc2 <__aeabi_dadd+0x59a>
 8008bde:	2b1f      	cmp	r3, #31
 8008be0:	dd00      	ble.n	8008be4 <__aeabi_dadd+0x4bc>
 8008be2:	e096      	b.n	8008d12 <__aeabi_dadd+0x5ea>
 8008be4:	2520      	movs	r5, #32
 8008be6:	000f      	movs	r7, r1
 8008be8:	1aed      	subs	r5, r5, r3
 8008bea:	40af      	lsls	r7, r5
 8008bec:	46b9      	mov	r9, r7
 8008bee:	0007      	movs	r7, r0
 8008bf0:	46aa      	mov	sl, r5
 8008bf2:	40df      	lsrs	r7, r3
 8008bf4:	464d      	mov	r5, r9
 8008bf6:	433d      	orrs	r5, r7
 8008bf8:	002f      	movs	r7, r5
 8008bfa:	4655      	mov	r5, sl
 8008bfc:	40a8      	lsls	r0, r5
 8008bfe:	40d9      	lsrs	r1, r3
 8008c00:	1e45      	subs	r5, r0, #1
 8008c02:	41a8      	sbcs	r0, r5
 8008c04:	4488      	add	r8, r1
 8008c06:	4307      	orrs	r7, r0
 8008c08:	18bf      	adds	r7, r7, r2
 8008c0a:	4297      	cmp	r7, r2
 8008c0c:	4192      	sbcs	r2, r2
 8008c0e:	4251      	negs	r1, r2
 8008c10:	4441      	add	r1, r8
 8008c12:	0035      	movs	r5, r6
 8008c14:	e63a      	b.n	800888c <__aeabi_dadd+0x164>
 8008c16:	4664      	mov	r4, ip
 8008c18:	0035      	movs	r5, r6
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	0010      	movs	r0, r2
 8008c1e:	e685      	b.n	800892c <__aeabi_dadd+0x204>
 8008c20:	000b      	movs	r3, r1
 8008c22:	4303      	orrs	r3, r0
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	d000      	beq.n	8008c2a <__aeabi_dadd+0x502>
 8008c28:	e663      	b.n	80088f2 <__aeabi_dadd+0x1ca>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0f5      	beq.n	8008c1a <__aeabi_dadd+0x4f2>
 8008c2e:	4643      	mov	r3, r8
 8008c30:	4313      	orrs	r3, r2
 8008c32:	d100      	bne.n	8008c36 <__aeabi_dadd+0x50e>
 8008c34:	e67a      	b.n	800892c <__aeabi_dadd+0x204>
 8008c36:	1887      	adds	r7, r0, r2
 8008c38:	4287      	cmp	r7, r0
 8008c3a:	4180      	sbcs	r0, r0
 8008c3c:	2207      	movs	r2, #7
 8008c3e:	4441      	add	r1, r8
 8008c40:	4240      	negs	r0, r0
 8008c42:	1809      	adds	r1, r1, r0
 8008c44:	403a      	ands	r2, r7
 8008c46:	020b      	lsls	r3, r1, #8
 8008c48:	d400      	bmi.n	8008c4c <__aeabi_dadd+0x524>
 8008c4a:	e6d5      	b.n	80089f8 <__aeabi_dadd+0x2d0>
 8008c4c:	4b43      	ldr	r3, [pc, #268]	; (8008d5c <__aeabi_dadd+0x634>)
 8008c4e:	3501      	adds	r5, #1
 8008c50:	4019      	ands	r1, r3
 8008c52:	e5c9      	b.n	80087e8 <__aeabi_dadd+0xc0>
 8008c54:	0038      	movs	r0, r7
 8008c56:	e669      	b.n	800892c <__aeabi_dadd+0x204>
 8008c58:	001e      	movs	r6, r3
 8008c5a:	4647      	mov	r7, r8
 8008c5c:	3e20      	subs	r6, #32
 8008c5e:	40f7      	lsrs	r7, r6
 8008c60:	46bc      	mov	ip, r7
 8008c62:	2b20      	cmp	r3, #32
 8008c64:	d004      	beq.n	8008c70 <__aeabi_dadd+0x548>
 8008c66:	2640      	movs	r6, #64	; 0x40
 8008c68:	1af3      	subs	r3, r6, r3
 8008c6a:	4646      	mov	r6, r8
 8008c6c:	409e      	lsls	r6, r3
 8008c6e:	4332      	orrs	r2, r6
 8008c70:	0017      	movs	r7, r2
 8008c72:	4663      	mov	r3, ip
 8008c74:	1e7a      	subs	r2, r7, #1
 8008c76:	4197      	sbcs	r7, r2
 8008c78:	431f      	orrs	r7, r3
 8008c7a:	e602      	b.n	8008882 <__aeabi_dadd+0x15a>
 8008c7c:	4d36      	ldr	r5, [pc, #216]	; (8008d58 <__aeabi_dadd+0x630>)
 8008c7e:	42ae      	cmp	r6, r5
 8008c80:	d0ca      	beq.n	8008c18 <__aeabi_dadd+0x4f0>
 8008c82:	2580      	movs	r5, #128	; 0x80
 8008c84:	042d      	lsls	r5, r5, #16
 8008c86:	425b      	negs	r3, r3
 8008c88:	4329      	orrs	r1, r5
 8008c8a:	e7a6      	b.n	8008bda <__aeabi_dadd+0x4b2>
 8008c8c:	4308      	orrs	r0, r1
 8008c8e:	1e41      	subs	r1, r0, #1
 8008c90:	4188      	sbcs	r0, r1
 8008c92:	e6a6      	b.n	80089e2 <__aeabi_dadd+0x2ba>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d100      	bne.n	8008c9a <__aeabi_dadd+0x572>
 8008c98:	e648      	b.n	800892c <__aeabi_dadd+0x204>
 8008c9a:	1a87      	subs	r7, r0, r2
 8008c9c:	4643      	mov	r3, r8
 8008c9e:	42b8      	cmp	r0, r7
 8008ca0:	41b6      	sbcs	r6, r6
 8008ca2:	1acb      	subs	r3, r1, r3
 8008ca4:	4276      	negs	r6, r6
 8008ca6:	1b9e      	subs	r6, r3, r6
 8008ca8:	0233      	lsls	r3, r6, #8
 8008caa:	d54b      	bpl.n	8008d44 <__aeabi_dadd+0x61c>
 8008cac:	1a17      	subs	r7, r2, r0
 8008cae:	4643      	mov	r3, r8
 8008cb0:	42ba      	cmp	r2, r7
 8008cb2:	4192      	sbcs	r2, r2
 8008cb4:	1a59      	subs	r1, r3, r1
 8008cb6:	4252      	negs	r2, r2
 8008cb8:	1a89      	subs	r1, r1, r2
 8008cba:	2207      	movs	r2, #7
 8008cbc:	4664      	mov	r4, ip
 8008cbe:	403a      	ands	r2, r7
 8008cc0:	e592      	b.n	80087e8 <__aeabi_dadd+0xc0>
 8008cc2:	4301      	orrs	r1, r0
 8008cc4:	000f      	movs	r7, r1
 8008cc6:	1e79      	subs	r1, r7, #1
 8008cc8:	418f      	sbcs	r7, r1
 8008cca:	e79d      	b.n	8008c08 <__aeabi_dadd+0x4e0>
 8008ccc:	001c      	movs	r4, r3
 8008cce:	000f      	movs	r7, r1
 8008cd0:	3c20      	subs	r4, #32
 8008cd2:	40e7      	lsrs	r7, r4
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d003      	beq.n	8008ce0 <__aeabi_dadd+0x5b8>
 8008cd8:	2440      	movs	r4, #64	; 0x40
 8008cda:	1ae3      	subs	r3, r4, r3
 8008cdc:	4099      	lsls	r1, r3
 8008cde:	4308      	orrs	r0, r1
 8008ce0:	1e41      	subs	r1, r0, #1
 8008ce2:	4188      	sbcs	r0, r1
 8008ce4:	4338      	orrs	r0, r7
 8008ce6:	e67c      	b.n	80089e2 <__aeabi_dadd+0x2ba>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2400      	movs	r4, #0
 8008cec:	e625      	b.n	800893a <__aeabi_dadd+0x212>
 8008cee:	1a17      	subs	r7, r2, r0
 8008cf0:	4643      	mov	r3, r8
 8008cf2:	42ba      	cmp	r2, r7
 8008cf4:	4192      	sbcs	r2, r2
 8008cf6:	1a59      	subs	r1, r3, r1
 8008cf8:	4252      	negs	r2, r2
 8008cfa:	1a89      	subs	r1, r1, r2
 8008cfc:	4664      	mov	r4, ip
 8008cfe:	0035      	movs	r5, r6
 8008d00:	e543      	b.n	800878a <__aeabi_dadd+0x62>
 8008d02:	4641      	mov	r1, r8
 8008d04:	0010      	movs	r0, r2
 8008d06:	4d14      	ldr	r5, [pc, #80]	; (8008d58 <__aeabi_dadd+0x630>)
 8008d08:	e610      	b.n	800892c <__aeabi_dadd+0x204>
 8008d0a:	2280      	movs	r2, #128	; 0x80
 8008d0c:	2400      	movs	r4, #0
 8008d0e:	0312      	lsls	r2, r2, #12
 8008d10:	e680      	b.n	8008a14 <__aeabi_dadd+0x2ec>
 8008d12:	001d      	movs	r5, r3
 8008d14:	000f      	movs	r7, r1
 8008d16:	3d20      	subs	r5, #32
 8008d18:	40ef      	lsrs	r7, r5
 8008d1a:	46bc      	mov	ip, r7
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d003      	beq.n	8008d28 <__aeabi_dadd+0x600>
 8008d20:	2540      	movs	r5, #64	; 0x40
 8008d22:	1aeb      	subs	r3, r5, r3
 8008d24:	4099      	lsls	r1, r3
 8008d26:	4308      	orrs	r0, r1
 8008d28:	0007      	movs	r7, r0
 8008d2a:	4663      	mov	r3, ip
 8008d2c:	1e78      	subs	r0, r7, #1
 8008d2e:	4187      	sbcs	r7, r0
 8008d30:	431f      	orrs	r7, r3
 8008d32:	e769      	b.n	8008c08 <__aeabi_dadd+0x4e0>
 8008d34:	1887      	adds	r7, r0, r2
 8008d36:	4297      	cmp	r7, r2
 8008d38:	419b      	sbcs	r3, r3
 8008d3a:	4441      	add	r1, r8
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	18c9      	adds	r1, r1, r3
 8008d40:	0035      	movs	r5, r6
 8008d42:	e5a3      	b.n	800888c <__aeabi_dadd+0x164>
 8008d44:	003b      	movs	r3, r7
 8008d46:	4333      	orrs	r3, r6
 8008d48:	d0ce      	beq.n	8008ce8 <__aeabi_dadd+0x5c0>
 8008d4a:	2207      	movs	r2, #7
 8008d4c:	0031      	movs	r1, r6
 8008d4e:	403a      	ands	r2, r7
 8008d50:	e652      	b.n	80089f8 <__aeabi_dadd+0x2d0>
 8008d52:	2300      	movs	r3, #0
 8008d54:	001a      	movs	r2, r3
 8008d56:	e5f4      	b.n	8008942 <__aeabi_dadd+0x21a>
 8008d58:	000007ff 	.word	0x000007ff
 8008d5c:	ff7fffff 	.word	0xff7fffff

08008d60 <__aeabi_ddiv>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	4657      	mov	r7, sl
 8008d64:	46de      	mov	lr, fp
 8008d66:	464e      	mov	r6, r9
 8008d68:	4645      	mov	r5, r8
 8008d6a:	b5e0      	push	{r5, r6, r7, lr}
 8008d6c:	4683      	mov	fp, r0
 8008d6e:	0007      	movs	r7, r0
 8008d70:	030e      	lsls	r6, r1, #12
 8008d72:	0048      	lsls	r0, r1, #1
 8008d74:	b085      	sub	sp, #20
 8008d76:	4692      	mov	sl, r2
 8008d78:	001c      	movs	r4, r3
 8008d7a:	0b36      	lsrs	r6, r6, #12
 8008d7c:	0d40      	lsrs	r0, r0, #21
 8008d7e:	0fcd      	lsrs	r5, r1, #31
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d100      	bne.n	8008d86 <__aeabi_ddiv+0x26>
 8008d84:	e09d      	b.n	8008ec2 <__aeabi_ddiv+0x162>
 8008d86:	4b95      	ldr	r3, [pc, #596]	; (8008fdc <__aeabi_ddiv+0x27c>)
 8008d88:	4298      	cmp	r0, r3
 8008d8a:	d039      	beq.n	8008e00 <__aeabi_ddiv+0xa0>
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	00f6      	lsls	r6, r6, #3
 8008d90:	041b      	lsls	r3, r3, #16
 8008d92:	431e      	orrs	r6, r3
 8008d94:	4a92      	ldr	r2, [pc, #584]	; (8008fe0 <__aeabi_ddiv+0x280>)
 8008d96:	0f7b      	lsrs	r3, r7, #29
 8008d98:	4333      	orrs	r3, r6
 8008d9a:	4699      	mov	r9, r3
 8008d9c:	4694      	mov	ip, r2
 8008d9e:	0003      	movs	r3, r0
 8008da0:	4463      	add	r3, ip
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	2600      	movs	r6, #0
 8008da8:	00ff      	lsls	r7, r7, #3
 8008daa:	9302      	str	r3, [sp, #8]
 8008dac:	0323      	lsls	r3, r4, #12
 8008dae:	0b1b      	lsrs	r3, r3, #12
 8008db0:	4698      	mov	r8, r3
 8008db2:	0063      	lsls	r3, r4, #1
 8008db4:	0fe4      	lsrs	r4, r4, #31
 8008db6:	4652      	mov	r2, sl
 8008db8:	0d5b      	lsrs	r3, r3, #21
 8008dba:	9401      	str	r4, [sp, #4]
 8008dbc:	d100      	bne.n	8008dc0 <__aeabi_ddiv+0x60>
 8008dbe:	e0b3      	b.n	8008f28 <__aeabi_ddiv+0x1c8>
 8008dc0:	4986      	ldr	r1, [pc, #536]	; (8008fdc <__aeabi_ddiv+0x27c>)
 8008dc2:	428b      	cmp	r3, r1
 8008dc4:	d100      	bne.n	8008dc8 <__aeabi_ddiv+0x68>
 8008dc6:	e09e      	b.n	8008f06 <__aeabi_ddiv+0x1a6>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	00d1      	lsls	r1, r2, #3
 8008dcc:	2280      	movs	r2, #128	; 0x80
 8008dce:	0412      	lsls	r2, r2, #16
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	4651      	mov	r1, sl
 8008dd4:	0f49      	lsrs	r1, r1, #29
 8008dd6:	4311      	orrs	r1, r2
 8008dd8:	468b      	mov	fp, r1
 8008dda:	4981      	ldr	r1, [pc, #516]	; (8008fe0 <__aeabi_ddiv+0x280>)
 8008ddc:	4652      	mov	r2, sl
 8008dde:	468c      	mov	ip, r1
 8008de0:	9900      	ldr	r1, [sp, #0]
 8008de2:	4463      	add	r3, ip
 8008de4:	1acb      	subs	r3, r1, r3
 8008de6:	2100      	movs	r1, #0
 8008de8:	00d2      	lsls	r2, r2, #3
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	002b      	movs	r3, r5
 8008dee:	4063      	eors	r3, r4
 8008df0:	469a      	mov	sl, r3
 8008df2:	2e0f      	cmp	r6, #15
 8008df4:	d900      	bls.n	8008df8 <__aeabi_ddiv+0x98>
 8008df6:	e105      	b.n	8009004 <__aeabi_ddiv+0x2a4>
 8008df8:	4b7a      	ldr	r3, [pc, #488]	; (8008fe4 <__aeabi_ddiv+0x284>)
 8008dfa:	00b6      	lsls	r6, r6, #2
 8008dfc:	599b      	ldr	r3, [r3, r6]
 8008dfe:	469f      	mov	pc, r3
 8008e00:	465b      	mov	r3, fp
 8008e02:	4333      	orrs	r3, r6
 8008e04:	4699      	mov	r9, r3
 8008e06:	d000      	beq.n	8008e0a <__aeabi_ddiv+0xaa>
 8008e08:	e0b8      	b.n	8008f7c <__aeabi_ddiv+0x21c>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	2608      	movs	r6, #8
 8008e0e:	2700      	movs	r7, #0
 8008e10:	9000      	str	r0, [sp, #0]
 8008e12:	9302      	str	r3, [sp, #8]
 8008e14:	e7ca      	b.n	8008dac <__aeabi_ddiv+0x4c>
 8008e16:	46cb      	mov	fp, r9
 8008e18:	003a      	movs	r2, r7
 8008e1a:	9902      	ldr	r1, [sp, #8]
 8008e1c:	9501      	str	r5, [sp, #4]
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	469a      	mov	sl, r3
 8008e22:	2902      	cmp	r1, #2
 8008e24:	d027      	beq.n	8008e76 <__aeabi_ddiv+0x116>
 8008e26:	2903      	cmp	r1, #3
 8008e28:	d100      	bne.n	8008e2c <__aeabi_ddiv+0xcc>
 8008e2a:	e280      	b.n	800932e <__aeabi_ddiv+0x5ce>
 8008e2c:	2901      	cmp	r1, #1
 8008e2e:	d044      	beq.n	8008eba <__aeabi_ddiv+0x15a>
 8008e30:	496d      	ldr	r1, [pc, #436]	; (8008fe8 <__aeabi_ddiv+0x288>)
 8008e32:	9b00      	ldr	r3, [sp, #0]
 8008e34:	468c      	mov	ip, r1
 8008e36:	4463      	add	r3, ip
 8008e38:	001c      	movs	r4, r3
 8008e3a:	2c00      	cmp	r4, #0
 8008e3c:	dd38      	ble.n	8008eb0 <__aeabi_ddiv+0x150>
 8008e3e:	0753      	lsls	r3, r2, #29
 8008e40:	d000      	beq.n	8008e44 <__aeabi_ddiv+0xe4>
 8008e42:	e213      	b.n	800926c <__aeabi_ddiv+0x50c>
 8008e44:	08d2      	lsrs	r2, r2, #3
 8008e46:	465b      	mov	r3, fp
 8008e48:	01db      	lsls	r3, r3, #7
 8008e4a:	d509      	bpl.n	8008e60 <__aeabi_ddiv+0x100>
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	4b67      	ldr	r3, [pc, #412]	; (8008fec <__aeabi_ddiv+0x28c>)
 8008e50:	4019      	ands	r1, r3
 8008e52:	468b      	mov	fp, r1
 8008e54:	2180      	movs	r1, #128	; 0x80
 8008e56:	00c9      	lsls	r1, r1, #3
 8008e58:	468c      	mov	ip, r1
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	4463      	add	r3, ip
 8008e5e:	001c      	movs	r4, r3
 8008e60:	4b63      	ldr	r3, [pc, #396]	; (8008ff0 <__aeabi_ddiv+0x290>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	dc07      	bgt.n	8008e76 <__aeabi_ddiv+0x116>
 8008e66:	465b      	mov	r3, fp
 8008e68:	0564      	lsls	r4, r4, #21
 8008e6a:	075f      	lsls	r7, r3, #29
 8008e6c:	025b      	lsls	r3, r3, #9
 8008e6e:	4317      	orrs	r7, r2
 8008e70:	0b1b      	lsrs	r3, r3, #12
 8008e72:	0d62      	lsrs	r2, r4, #21
 8008e74:	e002      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 8008e76:	2300      	movs	r3, #0
 8008e78:	2700      	movs	r7, #0
 8008e7a:	4a58      	ldr	r2, [pc, #352]	; (8008fdc <__aeabi_ddiv+0x27c>)
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	031b      	lsls	r3, r3, #12
 8008e80:	0b1c      	lsrs	r4, r3, #12
 8008e82:	0d0b      	lsrs	r3, r1, #20
 8008e84:	051b      	lsls	r3, r3, #20
 8008e86:	4323      	orrs	r3, r4
 8008e88:	0514      	lsls	r4, r2, #20
 8008e8a:	4a5a      	ldr	r2, [pc, #360]	; (8008ff4 <__aeabi_ddiv+0x294>)
 8008e8c:	0038      	movs	r0, r7
 8008e8e:	4013      	ands	r3, r2
 8008e90:	431c      	orrs	r4, r3
 8008e92:	4653      	mov	r3, sl
 8008e94:	0064      	lsls	r4, r4, #1
 8008e96:	07db      	lsls	r3, r3, #31
 8008e98:	0864      	lsrs	r4, r4, #1
 8008e9a:	431c      	orrs	r4, r3
 8008e9c:	0021      	movs	r1, r4
 8008e9e:	b005      	add	sp, #20
 8008ea0:	bc3c      	pop	{r2, r3, r4, r5}
 8008ea2:	4690      	mov	r8, r2
 8008ea4:	4699      	mov	r9, r3
 8008ea6:	46a2      	mov	sl, r4
 8008ea8:	46ab      	mov	fp, r5
 8008eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eac:	2201      	movs	r2, #1
 8008eae:	4252      	negs	r2, r2
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	1b1b      	subs	r3, r3, r4
 8008eb4:	2b38      	cmp	r3, #56	; 0x38
 8008eb6:	dc00      	bgt.n	8008eba <__aeabi_ddiv+0x15a>
 8008eb8:	e1ad      	b.n	8009216 <__aeabi_ddiv+0x4b6>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2700      	movs	r7, #0
 8008ec0:	e7dc      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 8008ec2:	465b      	mov	r3, fp
 8008ec4:	4333      	orrs	r3, r6
 8008ec6:	4699      	mov	r9, r3
 8008ec8:	d05e      	beq.n	8008f88 <__aeabi_ddiv+0x228>
 8008eca:	2e00      	cmp	r6, #0
 8008ecc:	d100      	bne.n	8008ed0 <__aeabi_ddiv+0x170>
 8008ece:	e18a      	b.n	80091e6 <__aeabi_ddiv+0x486>
 8008ed0:	0030      	movs	r0, r6
 8008ed2:	f001 f9ab 	bl	800a22c <__clzsi2>
 8008ed6:	0003      	movs	r3, r0
 8008ed8:	3b0b      	subs	r3, #11
 8008eda:	2b1c      	cmp	r3, #28
 8008edc:	dd00      	ble.n	8008ee0 <__aeabi_ddiv+0x180>
 8008ede:	e17b      	b.n	80091d8 <__aeabi_ddiv+0x478>
 8008ee0:	221d      	movs	r2, #29
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	465a      	mov	r2, fp
 8008ee6:	0001      	movs	r1, r0
 8008ee8:	40da      	lsrs	r2, r3
 8008eea:	3908      	subs	r1, #8
 8008eec:	408e      	lsls	r6, r1
 8008eee:	0013      	movs	r3, r2
 8008ef0:	465f      	mov	r7, fp
 8008ef2:	4333      	orrs	r3, r6
 8008ef4:	4699      	mov	r9, r3
 8008ef6:	408f      	lsls	r7, r1
 8008ef8:	4b3f      	ldr	r3, [pc, #252]	; (8008ff8 <__aeabi_ddiv+0x298>)
 8008efa:	2600      	movs	r6, #0
 8008efc:	1a1b      	subs	r3, r3, r0
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	9302      	str	r3, [sp, #8]
 8008f04:	e752      	b.n	8008dac <__aeabi_ddiv+0x4c>
 8008f06:	4641      	mov	r1, r8
 8008f08:	4653      	mov	r3, sl
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	493b      	ldr	r1, [pc, #236]	; (8008ffc <__aeabi_ddiv+0x29c>)
 8008f0e:	469b      	mov	fp, r3
 8008f10:	468c      	mov	ip, r1
 8008f12:	9b00      	ldr	r3, [sp, #0]
 8008f14:	4463      	add	r3, ip
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	465b      	mov	r3, fp
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d13b      	bne.n	8008f96 <__aeabi_ddiv+0x236>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	2200      	movs	r2, #0
 8008f22:	431e      	orrs	r6, r3
 8008f24:	2102      	movs	r1, #2
 8008f26:	e761      	b.n	8008dec <__aeabi_ddiv+0x8c>
 8008f28:	4643      	mov	r3, r8
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	469b      	mov	fp, r3
 8008f2e:	d037      	beq.n	8008fa0 <__aeabi_ddiv+0x240>
 8008f30:	4643      	mov	r3, r8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d100      	bne.n	8008f38 <__aeabi_ddiv+0x1d8>
 8008f36:	e162      	b.n	80091fe <__aeabi_ddiv+0x49e>
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f001 f977 	bl	800a22c <__clzsi2>
 8008f3e:	0003      	movs	r3, r0
 8008f40:	3b0b      	subs	r3, #11
 8008f42:	2b1c      	cmp	r3, #28
 8008f44:	dd00      	ble.n	8008f48 <__aeabi_ddiv+0x1e8>
 8008f46:	e153      	b.n	80091f0 <__aeabi_ddiv+0x490>
 8008f48:	0002      	movs	r2, r0
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	3a08      	subs	r2, #8
 8008f4e:	4091      	lsls	r1, r2
 8008f50:	4688      	mov	r8, r1
 8008f52:	211d      	movs	r1, #29
 8008f54:	1acb      	subs	r3, r1, r3
 8008f56:	4651      	mov	r1, sl
 8008f58:	40d9      	lsrs	r1, r3
 8008f5a:	000b      	movs	r3, r1
 8008f5c:	4641      	mov	r1, r8
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	469b      	mov	fp, r3
 8008f62:	4653      	mov	r3, sl
 8008f64:	4093      	lsls	r3, r2
 8008f66:	001a      	movs	r2, r3
 8008f68:	9b00      	ldr	r3, [sp, #0]
 8008f6a:	4925      	ldr	r1, [pc, #148]	; (8009000 <__aeabi_ddiv+0x2a0>)
 8008f6c:	469c      	mov	ip, r3
 8008f6e:	4460      	add	r0, ip
 8008f70:	0003      	movs	r3, r0
 8008f72:	468c      	mov	ip, r1
 8008f74:	4463      	add	r3, ip
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	e737      	b.n	8008dec <__aeabi_ddiv+0x8c>
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	46b1      	mov	r9, r6
 8008f80:	9000      	str	r0, [sp, #0]
 8008f82:	260c      	movs	r6, #12
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	e711      	b.n	8008dac <__aeabi_ddiv+0x4c>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	2604      	movs	r6, #4
 8008f90:	2700      	movs	r7, #0
 8008f92:	9302      	str	r3, [sp, #8]
 8008f94:	e70a      	b.n	8008dac <__aeabi_ddiv+0x4c>
 8008f96:	2303      	movs	r3, #3
 8008f98:	46c3      	mov	fp, r8
 8008f9a:	431e      	orrs	r6, r3
 8008f9c:	2103      	movs	r1, #3
 8008f9e:	e725      	b.n	8008dec <__aeabi_ddiv+0x8c>
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	431e      	orrs	r6, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	e720      	b.n	8008dec <__aeabi_ddiv+0x8c>
 8008faa:	2300      	movs	r3, #0
 8008fac:	469a      	mov	sl, r3
 8008fae:	2380      	movs	r3, #128	; 0x80
 8008fb0:	2700      	movs	r7, #0
 8008fb2:	031b      	lsls	r3, r3, #12
 8008fb4:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <__aeabi_ddiv+0x27c>)
 8008fb6:	e761      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 8008fb8:	2380      	movs	r3, #128	; 0x80
 8008fba:	4649      	mov	r1, r9
 8008fbc:	031b      	lsls	r3, r3, #12
 8008fbe:	4219      	tst	r1, r3
 8008fc0:	d100      	bne.n	8008fc4 <__aeabi_ddiv+0x264>
 8008fc2:	e0e2      	b.n	800918a <__aeabi_ddiv+0x42a>
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	4219      	tst	r1, r3
 8008fc8:	d000      	beq.n	8008fcc <__aeabi_ddiv+0x26c>
 8008fca:	e0de      	b.n	800918a <__aeabi_ddiv+0x42a>
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	031b      	lsls	r3, r3, #12
 8008fd0:	0017      	movs	r7, r2
 8008fd2:	0b1b      	lsrs	r3, r3, #12
 8008fd4:	46a2      	mov	sl, r4
 8008fd6:	4a01      	ldr	r2, [pc, #4]	; (8008fdc <__aeabi_ddiv+0x27c>)
 8008fd8:	e750      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	000007ff 	.word	0x000007ff
 8008fe0:	fffffc01 	.word	0xfffffc01
 8008fe4:	08017b24 	.word	0x08017b24
 8008fe8:	000003ff 	.word	0x000003ff
 8008fec:	feffffff 	.word	0xfeffffff
 8008ff0:	000007fe 	.word	0x000007fe
 8008ff4:	800fffff 	.word	0x800fffff
 8008ff8:	fffffc0d 	.word	0xfffffc0d
 8008ffc:	fffff801 	.word	0xfffff801
 8009000:	000003f3 	.word	0x000003f3
 8009004:	45d9      	cmp	r9, fp
 8009006:	d900      	bls.n	800900a <__aeabi_ddiv+0x2aa>
 8009008:	e0cb      	b.n	80091a2 <__aeabi_ddiv+0x442>
 800900a:	d100      	bne.n	800900e <__aeabi_ddiv+0x2ae>
 800900c:	e0c6      	b.n	800919c <__aeabi_ddiv+0x43c>
 800900e:	003c      	movs	r4, r7
 8009010:	4648      	mov	r0, r9
 8009012:	2700      	movs	r7, #0
 8009014:	9b00      	ldr	r3, [sp, #0]
 8009016:	3b01      	subs	r3, #1
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	465b      	mov	r3, fp
 800901c:	0e16      	lsrs	r6, r2, #24
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	431e      	orrs	r6, r3
 8009022:	0213      	lsls	r3, r2, #8
 8009024:	4698      	mov	r8, r3
 8009026:	0433      	lsls	r3, r6, #16
 8009028:	0c1b      	lsrs	r3, r3, #16
 800902a:	4699      	mov	r9, r3
 800902c:	0c31      	lsrs	r1, r6, #16
 800902e:	9101      	str	r1, [sp, #4]
 8009030:	f7ff f916 	bl	8008260 <__aeabi_uidivmod>
 8009034:	464a      	mov	r2, r9
 8009036:	4342      	muls	r2, r0
 8009038:	040b      	lsls	r3, r1, #16
 800903a:	0c21      	lsrs	r1, r4, #16
 800903c:	0005      	movs	r5, r0
 800903e:	4319      	orrs	r1, r3
 8009040:	428a      	cmp	r2, r1
 8009042:	d907      	bls.n	8009054 <__aeabi_ddiv+0x2f4>
 8009044:	1989      	adds	r1, r1, r6
 8009046:	3d01      	subs	r5, #1
 8009048:	428e      	cmp	r6, r1
 800904a:	d803      	bhi.n	8009054 <__aeabi_ddiv+0x2f4>
 800904c:	428a      	cmp	r2, r1
 800904e:	d901      	bls.n	8009054 <__aeabi_ddiv+0x2f4>
 8009050:	1e85      	subs	r5, r0, #2
 8009052:	1989      	adds	r1, r1, r6
 8009054:	1a88      	subs	r0, r1, r2
 8009056:	9901      	ldr	r1, [sp, #4]
 8009058:	f7ff f902 	bl	8008260 <__aeabi_uidivmod>
 800905c:	0409      	lsls	r1, r1, #16
 800905e:	468c      	mov	ip, r1
 8009060:	464a      	mov	r2, r9
 8009062:	0421      	lsls	r1, r4, #16
 8009064:	4664      	mov	r4, ip
 8009066:	4342      	muls	r2, r0
 8009068:	0c09      	lsrs	r1, r1, #16
 800906a:	0003      	movs	r3, r0
 800906c:	4321      	orrs	r1, r4
 800906e:	428a      	cmp	r2, r1
 8009070:	d904      	bls.n	800907c <__aeabi_ddiv+0x31c>
 8009072:	1989      	adds	r1, r1, r6
 8009074:	3b01      	subs	r3, #1
 8009076:	428e      	cmp	r6, r1
 8009078:	d800      	bhi.n	800907c <__aeabi_ddiv+0x31c>
 800907a:	e0f1      	b.n	8009260 <__aeabi_ddiv+0x500>
 800907c:	042d      	lsls	r5, r5, #16
 800907e:	431d      	orrs	r5, r3
 8009080:	46ab      	mov	fp, r5
 8009082:	4643      	mov	r3, r8
 8009084:	1a89      	subs	r1, r1, r2
 8009086:	4642      	mov	r2, r8
 8009088:	0c28      	lsrs	r0, r5, #16
 800908a:	0412      	lsls	r2, r2, #16
 800908c:	0c1d      	lsrs	r5, r3, #16
 800908e:	465b      	mov	r3, fp
 8009090:	0c14      	lsrs	r4, r2, #16
 8009092:	0022      	movs	r2, r4
 8009094:	041b      	lsls	r3, r3, #16
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	435a      	muls	r2, r3
 800909a:	9403      	str	r4, [sp, #12]
 800909c:	436b      	muls	r3, r5
 800909e:	4344      	muls	r4, r0
 80090a0:	9502      	str	r5, [sp, #8]
 80090a2:	4368      	muls	r0, r5
 80090a4:	191b      	adds	r3, r3, r4
 80090a6:	0c15      	lsrs	r5, r2, #16
 80090a8:	18eb      	adds	r3, r5, r3
 80090aa:	429c      	cmp	r4, r3
 80090ac:	d903      	bls.n	80090b6 <__aeabi_ddiv+0x356>
 80090ae:	2480      	movs	r4, #128	; 0x80
 80090b0:	0264      	lsls	r4, r4, #9
 80090b2:	46a4      	mov	ip, r4
 80090b4:	4460      	add	r0, ip
 80090b6:	0c1c      	lsrs	r4, r3, #16
 80090b8:	0415      	lsls	r5, r2, #16
 80090ba:	041b      	lsls	r3, r3, #16
 80090bc:	0c2d      	lsrs	r5, r5, #16
 80090be:	1820      	adds	r0, r4, r0
 80090c0:	195d      	adds	r5, r3, r5
 80090c2:	4281      	cmp	r1, r0
 80090c4:	d377      	bcc.n	80091b6 <__aeabi_ddiv+0x456>
 80090c6:	d073      	beq.n	80091b0 <__aeabi_ddiv+0x450>
 80090c8:	1a0c      	subs	r4, r1, r0
 80090ca:	4aa2      	ldr	r2, [pc, #648]	; (8009354 <__aeabi_ddiv+0x5f4>)
 80090cc:	1b7d      	subs	r5, r7, r5
 80090ce:	42af      	cmp	r7, r5
 80090d0:	41bf      	sbcs	r7, r7
 80090d2:	4694      	mov	ip, r2
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	427f      	negs	r7, r7
 80090d8:	4463      	add	r3, ip
 80090da:	1be0      	subs	r0, r4, r7
 80090dc:	001c      	movs	r4, r3
 80090de:	4286      	cmp	r6, r0
 80090e0:	d100      	bne.n	80090e4 <__aeabi_ddiv+0x384>
 80090e2:	e0db      	b.n	800929c <__aeabi_ddiv+0x53c>
 80090e4:	9901      	ldr	r1, [sp, #4]
 80090e6:	f7ff f8bb 	bl	8008260 <__aeabi_uidivmod>
 80090ea:	464a      	mov	r2, r9
 80090ec:	4342      	muls	r2, r0
 80090ee:	040b      	lsls	r3, r1, #16
 80090f0:	0c29      	lsrs	r1, r5, #16
 80090f2:	0007      	movs	r7, r0
 80090f4:	4319      	orrs	r1, r3
 80090f6:	428a      	cmp	r2, r1
 80090f8:	d907      	bls.n	800910a <__aeabi_ddiv+0x3aa>
 80090fa:	1989      	adds	r1, r1, r6
 80090fc:	3f01      	subs	r7, #1
 80090fe:	428e      	cmp	r6, r1
 8009100:	d803      	bhi.n	800910a <__aeabi_ddiv+0x3aa>
 8009102:	428a      	cmp	r2, r1
 8009104:	d901      	bls.n	800910a <__aeabi_ddiv+0x3aa>
 8009106:	1e87      	subs	r7, r0, #2
 8009108:	1989      	adds	r1, r1, r6
 800910a:	1a88      	subs	r0, r1, r2
 800910c:	9901      	ldr	r1, [sp, #4]
 800910e:	f7ff f8a7 	bl	8008260 <__aeabi_uidivmod>
 8009112:	0409      	lsls	r1, r1, #16
 8009114:	464a      	mov	r2, r9
 8009116:	4689      	mov	r9, r1
 8009118:	0429      	lsls	r1, r5, #16
 800911a:	464d      	mov	r5, r9
 800911c:	4342      	muls	r2, r0
 800911e:	0c09      	lsrs	r1, r1, #16
 8009120:	0003      	movs	r3, r0
 8009122:	4329      	orrs	r1, r5
 8009124:	428a      	cmp	r2, r1
 8009126:	d907      	bls.n	8009138 <__aeabi_ddiv+0x3d8>
 8009128:	1989      	adds	r1, r1, r6
 800912a:	3b01      	subs	r3, #1
 800912c:	428e      	cmp	r6, r1
 800912e:	d803      	bhi.n	8009138 <__aeabi_ddiv+0x3d8>
 8009130:	428a      	cmp	r2, r1
 8009132:	d901      	bls.n	8009138 <__aeabi_ddiv+0x3d8>
 8009134:	1e83      	subs	r3, r0, #2
 8009136:	1989      	adds	r1, r1, r6
 8009138:	043f      	lsls	r7, r7, #16
 800913a:	1a89      	subs	r1, r1, r2
 800913c:	003a      	movs	r2, r7
 800913e:	9f03      	ldr	r7, [sp, #12]
 8009140:	431a      	orrs	r2, r3
 8009142:	0038      	movs	r0, r7
 8009144:	0413      	lsls	r3, r2, #16
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	4358      	muls	r0, r3
 800914a:	4681      	mov	r9, r0
 800914c:	9802      	ldr	r0, [sp, #8]
 800914e:	0c15      	lsrs	r5, r2, #16
 8009150:	436f      	muls	r7, r5
 8009152:	4343      	muls	r3, r0
 8009154:	4345      	muls	r5, r0
 8009156:	4648      	mov	r0, r9
 8009158:	0c00      	lsrs	r0, r0, #16
 800915a:	4684      	mov	ip, r0
 800915c:	19db      	adds	r3, r3, r7
 800915e:	4463      	add	r3, ip
 8009160:	429f      	cmp	r7, r3
 8009162:	d903      	bls.n	800916c <__aeabi_ddiv+0x40c>
 8009164:	2080      	movs	r0, #128	; 0x80
 8009166:	0240      	lsls	r0, r0, #9
 8009168:	4684      	mov	ip, r0
 800916a:	4465      	add	r5, ip
 800916c:	4648      	mov	r0, r9
 800916e:	0c1f      	lsrs	r7, r3, #16
 8009170:	0400      	lsls	r0, r0, #16
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	0c00      	lsrs	r0, r0, #16
 8009176:	197d      	adds	r5, r7, r5
 8009178:	1818      	adds	r0, r3, r0
 800917a:	42a9      	cmp	r1, r5
 800917c:	d200      	bcs.n	8009180 <__aeabi_ddiv+0x420>
 800917e:	e084      	b.n	800928a <__aeabi_ddiv+0x52a>
 8009180:	d100      	bne.n	8009184 <__aeabi_ddiv+0x424>
 8009182:	e07f      	b.n	8009284 <__aeabi_ddiv+0x524>
 8009184:	2301      	movs	r3, #1
 8009186:	431a      	orrs	r2, r3
 8009188:	e657      	b.n	8008e3a <__aeabi_ddiv+0xda>
 800918a:	2380      	movs	r3, #128	; 0x80
 800918c:	464a      	mov	r2, r9
 800918e:	031b      	lsls	r3, r3, #12
 8009190:	4313      	orrs	r3, r2
 8009192:	031b      	lsls	r3, r3, #12
 8009194:	0b1b      	lsrs	r3, r3, #12
 8009196:	46aa      	mov	sl, r5
 8009198:	4a6f      	ldr	r2, [pc, #444]	; (8009358 <__aeabi_ddiv+0x5f8>)
 800919a:	e66f      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 800919c:	42ba      	cmp	r2, r7
 800919e:	d900      	bls.n	80091a2 <__aeabi_ddiv+0x442>
 80091a0:	e735      	b.n	800900e <__aeabi_ddiv+0x2ae>
 80091a2:	464b      	mov	r3, r9
 80091a4:	07dc      	lsls	r4, r3, #31
 80091a6:	0858      	lsrs	r0, r3, #1
 80091a8:	087b      	lsrs	r3, r7, #1
 80091aa:	431c      	orrs	r4, r3
 80091ac:	07ff      	lsls	r7, r7, #31
 80091ae:	e734      	b.n	800901a <__aeabi_ddiv+0x2ba>
 80091b0:	2400      	movs	r4, #0
 80091b2:	42af      	cmp	r7, r5
 80091b4:	d289      	bcs.n	80090ca <__aeabi_ddiv+0x36a>
 80091b6:	4447      	add	r7, r8
 80091b8:	4547      	cmp	r7, r8
 80091ba:	41a4      	sbcs	r4, r4
 80091bc:	465b      	mov	r3, fp
 80091be:	4264      	negs	r4, r4
 80091c0:	19a4      	adds	r4, r4, r6
 80091c2:	1864      	adds	r4, r4, r1
 80091c4:	3b01      	subs	r3, #1
 80091c6:	42a6      	cmp	r6, r4
 80091c8:	d21e      	bcs.n	8009208 <__aeabi_ddiv+0x4a8>
 80091ca:	42a0      	cmp	r0, r4
 80091cc:	d86d      	bhi.n	80092aa <__aeabi_ddiv+0x54a>
 80091ce:	d100      	bne.n	80091d2 <__aeabi_ddiv+0x472>
 80091d0:	e0b6      	b.n	8009340 <__aeabi_ddiv+0x5e0>
 80091d2:	1a24      	subs	r4, r4, r0
 80091d4:	469b      	mov	fp, r3
 80091d6:	e778      	b.n	80090ca <__aeabi_ddiv+0x36a>
 80091d8:	0003      	movs	r3, r0
 80091da:	465a      	mov	r2, fp
 80091dc:	3b28      	subs	r3, #40	; 0x28
 80091de:	409a      	lsls	r2, r3
 80091e0:	2700      	movs	r7, #0
 80091e2:	4691      	mov	r9, r2
 80091e4:	e688      	b.n	8008ef8 <__aeabi_ddiv+0x198>
 80091e6:	4658      	mov	r0, fp
 80091e8:	f001 f820 	bl	800a22c <__clzsi2>
 80091ec:	3020      	adds	r0, #32
 80091ee:	e672      	b.n	8008ed6 <__aeabi_ddiv+0x176>
 80091f0:	0003      	movs	r3, r0
 80091f2:	4652      	mov	r2, sl
 80091f4:	3b28      	subs	r3, #40	; 0x28
 80091f6:	409a      	lsls	r2, r3
 80091f8:	4693      	mov	fp, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	e6b4      	b.n	8008f68 <__aeabi_ddiv+0x208>
 80091fe:	4650      	mov	r0, sl
 8009200:	f001 f814 	bl	800a22c <__clzsi2>
 8009204:	3020      	adds	r0, #32
 8009206:	e69a      	b.n	8008f3e <__aeabi_ddiv+0x1de>
 8009208:	42a6      	cmp	r6, r4
 800920a:	d1e2      	bne.n	80091d2 <__aeabi_ddiv+0x472>
 800920c:	45b8      	cmp	r8, r7
 800920e:	d9dc      	bls.n	80091ca <__aeabi_ddiv+0x46a>
 8009210:	1a34      	subs	r4, r6, r0
 8009212:	469b      	mov	fp, r3
 8009214:	e759      	b.n	80090ca <__aeabi_ddiv+0x36a>
 8009216:	2b1f      	cmp	r3, #31
 8009218:	dc65      	bgt.n	80092e6 <__aeabi_ddiv+0x586>
 800921a:	4c50      	ldr	r4, [pc, #320]	; (800935c <__aeabi_ddiv+0x5fc>)
 800921c:	9900      	ldr	r1, [sp, #0]
 800921e:	46a4      	mov	ip, r4
 8009220:	465c      	mov	r4, fp
 8009222:	4461      	add	r1, ip
 8009224:	0008      	movs	r0, r1
 8009226:	408c      	lsls	r4, r1
 8009228:	0011      	movs	r1, r2
 800922a:	4082      	lsls	r2, r0
 800922c:	40d9      	lsrs	r1, r3
 800922e:	1e50      	subs	r0, r2, #1
 8009230:	4182      	sbcs	r2, r0
 8009232:	430c      	orrs	r4, r1
 8009234:	4314      	orrs	r4, r2
 8009236:	465a      	mov	r2, fp
 8009238:	40da      	lsrs	r2, r3
 800923a:	0013      	movs	r3, r2
 800923c:	0762      	lsls	r2, r4, #29
 800923e:	d009      	beq.n	8009254 <__aeabi_ddiv+0x4f4>
 8009240:	220f      	movs	r2, #15
 8009242:	4022      	ands	r2, r4
 8009244:	2a04      	cmp	r2, #4
 8009246:	d005      	beq.n	8009254 <__aeabi_ddiv+0x4f4>
 8009248:	0022      	movs	r2, r4
 800924a:	1d14      	adds	r4, r2, #4
 800924c:	4294      	cmp	r4, r2
 800924e:	4189      	sbcs	r1, r1
 8009250:	4249      	negs	r1, r1
 8009252:	185b      	adds	r3, r3, r1
 8009254:	021a      	lsls	r2, r3, #8
 8009256:	d562      	bpl.n	800931e <__aeabi_ddiv+0x5be>
 8009258:	2201      	movs	r2, #1
 800925a:	2300      	movs	r3, #0
 800925c:	2700      	movs	r7, #0
 800925e:	e60d      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 8009260:	428a      	cmp	r2, r1
 8009262:	d800      	bhi.n	8009266 <__aeabi_ddiv+0x506>
 8009264:	e70a      	b.n	800907c <__aeabi_ddiv+0x31c>
 8009266:	1e83      	subs	r3, r0, #2
 8009268:	1989      	adds	r1, r1, r6
 800926a:	e707      	b.n	800907c <__aeabi_ddiv+0x31c>
 800926c:	230f      	movs	r3, #15
 800926e:	4013      	ands	r3, r2
 8009270:	2b04      	cmp	r3, #4
 8009272:	d100      	bne.n	8009276 <__aeabi_ddiv+0x516>
 8009274:	e5e6      	b.n	8008e44 <__aeabi_ddiv+0xe4>
 8009276:	1d17      	adds	r7, r2, #4
 8009278:	4297      	cmp	r7, r2
 800927a:	4192      	sbcs	r2, r2
 800927c:	4253      	negs	r3, r2
 800927e:	449b      	add	fp, r3
 8009280:	08fa      	lsrs	r2, r7, #3
 8009282:	e5e0      	b.n	8008e46 <__aeabi_ddiv+0xe6>
 8009284:	2800      	cmp	r0, #0
 8009286:	d100      	bne.n	800928a <__aeabi_ddiv+0x52a>
 8009288:	e5d7      	b.n	8008e3a <__aeabi_ddiv+0xda>
 800928a:	1871      	adds	r1, r6, r1
 800928c:	1e53      	subs	r3, r2, #1
 800928e:	42b1      	cmp	r1, r6
 8009290:	d327      	bcc.n	80092e2 <__aeabi_ddiv+0x582>
 8009292:	42a9      	cmp	r1, r5
 8009294:	d315      	bcc.n	80092c2 <__aeabi_ddiv+0x562>
 8009296:	d058      	beq.n	800934a <__aeabi_ddiv+0x5ea>
 8009298:	001a      	movs	r2, r3
 800929a:	e773      	b.n	8009184 <__aeabi_ddiv+0x424>
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc00      	bgt.n	80092a2 <__aeabi_ddiv+0x542>
 80092a0:	e604      	b.n	8008eac <__aeabi_ddiv+0x14c>
 80092a2:	2301      	movs	r3, #1
 80092a4:	2200      	movs	r2, #0
 80092a6:	449b      	add	fp, r3
 80092a8:	e5cd      	b.n	8008e46 <__aeabi_ddiv+0xe6>
 80092aa:	2302      	movs	r3, #2
 80092ac:	4447      	add	r7, r8
 80092ae:	4547      	cmp	r7, r8
 80092b0:	4189      	sbcs	r1, r1
 80092b2:	425b      	negs	r3, r3
 80092b4:	469c      	mov	ip, r3
 80092b6:	4249      	negs	r1, r1
 80092b8:	1989      	adds	r1, r1, r6
 80092ba:	190c      	adds	r4, r1, r4
 80092bc:	44e3      	add	fp, ip
 80092be:	1a24      	subs	r4, r4, r0
 80092c0:	e703      	b.n	80090ca <__aeabi_ddiv+0x36a>
 80092c2:	4643      	mov	r3, r8
 80092c4:	005f      	lsls	r7, r3, #1
 80092c6:	4547      	cmp	r7, r8
 80092c8:	419b      	sbcs	r3, r3
 80092ca:	46b8      	mov	r8, r7
 80092cc:	425b      	negs	r3, r3
 80092ce:	199e      	adds	r6, r3, r6
 80092d0:	3a02      	subs	r2, #2
 80092d2:	1989      	adds	r1, r1, r6
 80092d4:	42a9      	cmp	r1, r5
 80092d6:	d000      	beq.n	80092da <__aeabi_ddiv+0x57a>
 80092d8:	e754      	b.n	8009184 <__aeabi_ddiv+0x424>
 80092da:	4540      	cmp	r0, r8
 80092dc:	d000      	beq.n	80092e0 <__aeabi_ddiv+0x580>
 80092de:	e751      	b.n	8009184 <__aeabi_ddiv+0x424>
 80092e0:	e5ab      	b.n	8008e3a <__aeabi_ddiv+0xda>
 80092e2:	001a      	movs	r2, r3
 80092e4:	e7f6      	b.n	80092d4 <__aeabi_ddiv+0x574>
 80092e6:	211f      	movs	r1, #31
 80092e8:	465f      	mov	r7, fp
 80092ea:	4249      	negs	r1, r1
 80092ec:	1b0c      	subs	r4, r1, r4
 80092ee:	40e7      	lsrs	r7, r4
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d007      	beq.n	8009304 <__aeabi_ddiv+0x5a4>
 80092f4:	491a      	ldr	r1, [pc, #104]	; (8009360 <__aeabi_ddiv+0x600>)
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	468c      	mov	ip, r1
 80092fa:	4463      	add	r3, ip
 80092fc:	0018      	movs	r0, r3
 80092fe:	465b      	mov	r3, fp
 8009300:	4083      	lsls	r3, r0
 8009302:	431a      	orrs	r2, r3
 8009304:	1e50      	subs	r0, r2, #1
 8009306:	4182      	sbcs	r2, r0
 8009308:	433a      	orrs	r2, r7
 800930a:	2707      	movs	r7, #7
 800930c:	2300      	movs	r3, #0
 800930e:	4017      	ands	r7, r2
 8009310:	d009      	beq.n	8009326 <__aeabi_ddiv+0x5c6>
 8009312:	210f      	movs	r1, #15
 8009314:	2300      	movs	r3, #0
 8009316:	4011      	ands	r1, r2
 8009318:	0014      	movs	r4, r2
 800931a:	2904      	cmp	r1, #4
 800931c:	d195      	bne.n	800924a <__aeabi_ddiv+0x4ea>
 800931e:	0022      	movs	r2, r4
 8009320:	075f      	lsls	r7, r3, #29
 8009322:	025b      	lsls	r3, r3, #9
 8009324:	0b1b      	lsrs	r3, r3, #12
 8009326:	08d2      	lsrs	r2, r2, #3
 8009328:	4317      	orrs	r7, r2
 800932a:	2200      	movs	r2, #0
 800932c:	e5a6      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	4659      	mov	r1, fp
 8009332:	031b      	lsls	r3, r3, #12
 8009334:	430b      	orrs	r3, r1
 8009336:	031b      	lsls	r3, r3, #12
 8009338:	0017      	movs	r7, r2
 800933a:	0b1b      	lsrs	r3, r3, #12
 800933c:	4a06      	ldr	r2, [pc, #24]	; (8009358 <__aeabi_ddiv+0x5f8>)
 800933e:	e59d      	b.n	8008e7c <__aeabi_ddiv+0x11c>
 8009340:	42bd      	cmp	r5, r7
 8009342:	d8b2      	bhi.n	80092aa <__aeabi_ddiv+0x54a>
 8009344:	469b      	mov	fp, r3
 8009346:	2400      	movs	r4, #0
 8009348:	e6bf      	b.n	80090ca <__aeabi_ddiv+0x36a>
 800934a:	4580      	cmp	r8, r0
 800934c:	d3b9      	bcc.n	80092c2 <__aeabi_ddiv+0x562>
 800934e:	001a      	movs	r2, r3
 8009350:	e7c3      	b.n	80092da <__aeabi_ddiv+0x57a>
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	000003ff 	.word	0x000003ff
 8009358:	000007ff 	.word	0x000007ff
 800935c:	0000041e 	.word	0x0000041e
 8009360:	0000043e 	.word	0x0000043e

08009364 <__eqdf2>:
 8009364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009366:	464f      	mov	r7, r9
 8009368:	4646      	mov	r6, r8
 800936a:	46d6      	mov	lr, sl
 800936c:	4684      	mov	ip, r0
 800936e:	b5c0      	push	{r6, r7, lr}
 8009370:	4680      	mov	r8, r0
 8009372:	4e19      	ldr	r6, [pc, #100]	; (80093d8 <__eqdf2+0x74>)
 8009374:	0318      	lsls	r0, r3, #12
 8009376:	030f      	lsls	r7, r1, #12
 8009378:	004d      	lsls	r5, r1, #1
 800937a:	0b00      	lsrs	r0, r0, #12
 800937c:	005c      	lsls	r4, r3, #1
 800937e:	4682      	mov	sl, r0
 8009380:	0b3f      	lsrs	r7, r7, #12
 8009382:	0d6d      	lsrs	r5, r5, #21
 8009384:	0fc9      	lsrs	r1, r1, #31
 8009386:	4691      	mov	r9, r2
 8009388:	0d64      	lsrs	r4, r4, #21
 800938a:	0fdb      	lsrs	r3, r3, #31
 800938c:	2001      	movs	r0, #1
 800938e:	42b5      	cmp	r5, r6
 8009390:	d00a      	beq.n	80093a8 <__eqdf2+0x44>
 8009392:	42b4      	cmp	r4, r6
 8009394:	d003      	beq.n	800939e <__eqdf2+0x3a>
 8009396:	42a5      	cmp	r5, r4
 8009398:	d101      	bne.n	800939e <__eqdf2+0x3a>
 800939a:	4557      	cmp	r7, sl
 800939c:	d00c      	beq.n	80093b8 <__eqdf2+0x54>
 800939e:	bc1c      	pop	{r2, r3, r4}
 80093a0:	4690      	mov	r8, r2
 80093a2:	4699      	mov	r9, r3
 80093a4:	46a2      	mov	sl, r4
 80093a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a8:	4666      	mov	r6, ip
 80093aa:	433e      	orrs	r6, r7
 80093ac:	d1f7      	bne.n	800939e <__eqdf2+0x3a>
 80093ae:	42ac      	cmp	r4, r5
 80093b0:	d1f5      	bne.n	800939e <__eqdf2+0x3a>
 80093b2:	4654      	mov	r4, sl
 80093b4:	4314      	orrs	r4, r2
 80093b6:	d1f2      	bne.n	800939e <__eqdf2+0x3a>
 80093b8:	2001      	movs	r0, #1
 80093ba:	45c8      	cmp	r8, r9
 80093bc:	d1ef      	bne.n	800939e <__eqdf2+0x3a>
 80093be:	4299      	cmp	r1, r3
 80093c0:	d007      	beq.n	80093d2 <__eqdf2+0x6e>
 80093c2:	2d00      	cmp	r5, #0
 80093c4:	d1eb      	bne.n	800939e <__eqdf2+0x3a>
 80093c6:	4663      	mov	r3, ip
 80093c8:	431f      	orrs	r7, r3
 80093ca:	0038      	movs	r0, r7
 80093cc:	1e47      	subs	r7, r0, #1
 80093ce:	41b8      	sbcs	r0, r7
 80093d0:	e7e5      	b.n	800939e <__eqdf2+0x3a>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e7e3      	b.n	800939e <__eqdf2+0x3a>
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	000007ff 	.word	0x000007ff

080093dc <__gedf2>:
 80093dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093de:	464f      	mov	r7, r9
 80093e0:	4646      	mov	r6, r8
 80093e2:	46d6      	mov	lr, sl
 80093e4:	004d      	lsls	r5, r1, #1
 80093e6:	b5c0      	push	{r6, r7, lr}
 80093e8:	030e      	lsls	r6, r1, #12
 80093ea:	0fc9      	lsrs	r1, r1, #31
 80093ec:	468a      	mov	sl, r1
 80093ee:	492c      	ldr	r1, [pc, #176]	; (80094a0 <__gedf2+0xc4>)
 80093f0:	031f      	lsls	r7, r3, #12
 80093f2:	005c      	lsls	r4, r3, #1
 80093f4:	4680      	mov	r8, r0
 80093f6:	0b36      	lsrs	r6, r6, #12
 80093f8:	0d6d      	lsrs	r5, r5, #21
 80093fa:	4691      	mov	r9, r2
 80093fc:	0b3f      	lsrs	r7, r7, #12
 80093fe:	0d64      	lsrs	r4, r4, #21
 8009400:	0fdb      	lsrs	r3, r3, #31
 8009402:	428d      	cmp	r5, r1
 8009404:	d01e      	beq.n	8009444 <__gedf2+0x68>
 8009406:	428c      	cmp	r4, r1
 8009408:	d016      	beq.n	8009438 <__gedf2+0x5c>
 800940a:	2d00      	cmp	r5, #0
 800940c:	d11e      	bne.n	800944c <__gedf2+0x70>
 800940e:	4330      	orrs	r0, r6
 8009410:	4684      	mov	ip, r0
 8009412:	2c00      	cmp	r4, #0
 8009414:	d101      	bne.n	800941a <__gedf2+0x3e>
 8009416:	433a      	orrs	r2, r7
 8009418:	d023      	beq.n	8009462 <__gedf2+0x86>
 800941a:	4662      	mov	r2, ip
 800941c:	2a00      	cmp	r2, #0
 800941e:	d01a      	beq.n	8009456 <__gedf2+0x7a>
 8009420:	459a      	cmp	sl, r3
 8009422:	d029      	beq.n	8009478 <__gedf2+0x9c>
 8009424:	4651      	mov	r1, sl
 8009426:	2002      	movs	r0, #2
 8009428:	3901      	subs	r1, #1
 800942a:	4008      	ands	r0, r1
 800942c:	3801      	subs	r0, #1
 800942e:	bc1c      	pop	{r2, r3, r4}
 8009430:	4690      	mov	r8, r2
 8009432:	4699      	mov	r9, r3
 8009434:	46a2      	mov	sl, r4
 8009436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009438:	0039      	movs	r1, r7
 800943a:	4311      	orrs	r1, r2
 800943c:	d0e5      	beq.n	800940a <__gedf2+0x2e>
 800943e:	2002      	movs	r0, #2
 8009440:	4240      	negs	r0, r0
 8009442:	e7f4      	b.n	800942e <__gedf2+0x52>
 8009444:	4330      	orrs	r0, r6
 8009446:	d1fa      	bne.n	800943e <__gedf2+0x62>
 8009448:	42ac      	cmp	r4, r5
 800944a:	d00f      	beq.n	800946c <__gedf2+0x90>
 800944c:	2c00      	cmp	r4, #0
 800944e:	d10f      	bne.n	8009470 <__gedf2+0x94>
 8009450:	433a      	orrs	r2, r7
 8009452:	d0e7      	beq.n	8009424 <__gedf2+0x48>
 8009454:	e00c      	b.n	8009470 <__gedf2+0x94>
 8009456:	2201      	movs	r2, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	4393      	bics	r3, r2
 800945c:	0018      	movs	r0, r3
 800945e:	3001      	adds	r0, #1
 8009460:	e7e5      	b.n	800942e <__gedf2+0x52>
 8009462:	4663      	mov	r3, ip
 8009464:	2000      	movs	r0, #0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0e1      	beq.n	800942e <__gedf2+0x52>
 800946a:	e7db      	b.n	8009424 <__gedf2+0x48>
 800946c:	433a      	orrs	r2, r7
 800946e:	d1e6      	bne.n	800943e <__gedf2+0x62>
 8009470:	459a      	cmp	sl, r3
 8009472:	d1d7      	bne.n	8009424 <__gedf2+0x48>
 8009474:	42a5      	cmp	r5, r4
 8009476:	dcd5      	bgt.n	8009424 <__gedf2+0x48>
 8009478:	42a5      	cmp	r5, r4
 800947a:	db05      	blt.n	8009488 <__gedf2+0xac>
 800947c:	42be      	cmp	r6, r7
 800947e:	d8d1      	bhi.n	8009424 <__gedf2+0x48>
 8009480:	d008      	beq.n	8009494 <__gedf2+0xb8>
 8009482:	2000      	movs	r0, #0
 8009484:	42be      	cmp	r6, r7
 8009486:	d2d2      	bcs.n	800942e <__gedf2+0x52>
 8009488:	4650      	mov	r0, sl
 800948a:	2301      	movs	r3, #1
 800948c:	3801      	subs	r0, #1
 800948e:	4398      	bics	r0, r3
 8009490:	3001      	adds	r0, #1
 8009492:	e7cc      	b.n	800942e <__gedf2+0x52>
 8009494:	45c8      	cmp	r8, r9
 8009496:	d8c5      	bhi.n	8009424 <__gedf2+0x48>
 8009498:	2000      	movs	r0, #0
 800949a:	45c8      	cmp	r8, r9
 800949c:	d3f4      	bcc.n	8009488 <__gedf2+0xac>
 800949e:	e7c6      	b.n	800942e <__gedf2+0x52>
 80094a0:	000007ff 	.word	0x000007ff

080094a4 <__ledf2>:
 80094a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094a6:	464f      	mov	r7, r9
 80094a8:	4646      	mov	r6, r8
 80094aa:	46d6      	mov	lr, sl
 80094ac:	004d      	lsls	r5, r1, #1
 80094ae:	b5c0      	push	{r6, r7, lr}
 80094b0:	030e      	lsls	r6, r1, #12
 80094b2:	0fc9      	lsrs	r1, r1, #31
 80094b4:	468a      	mov	sl, r1
 80094b6:	492e      	ldr	r1, [pc, #184]	; (8009570 <__ledf2+0xcc>)
 80094b8:	031f      	lsls	r7, r3, #12
 80094ba:	005c      	lsls	r4, r3, #1
 80094bc:	4680      	mov	r8, r0
 80094be:	0b36      	lsrs	r6, r6, #12
 80094c0:	0d6d      	lsrs	r5, r5, #21
 80094c2:	4691      	mov	r9, r2
 80094c4:	0b3f      	lsrs	r7, r7, #12
 80094c6:	0d64      	lsrs	r4, r4, #21
 80094c8:	0fdb      	lsrs	r3, r3, #31
 80094ca:	428d      	cmp	r5, r1
 80094cc:	d018      	beq.n	8009500 <__ledf2+0x5c>
 80094ce:	428c      	cmp	r4, r1
 80094d0:	d011      	beq.n	80094f6 <__ledf2+0x52>
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	d118      	bne.n	8009508 <__ledf2+0x64>
 80094d6:	4330      	orrs	r0, r6
 80094d8:	4684      	mov	ip, r0
 80094da:	2c00      	cmp	r4, #0
 80094dc:	d11e      	bne.n	800951c <__ledf2+0x78>
 80094de:	433a      	orrs	r2, r7
 80094e0:	d11c      	bne.n	800951c <__ledf2+0x78>
 80094e2:	4663      	mov	r3, ip
 80094e4:	2000      	movs	r0, #0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d030      	beq.n	800954c <__ledf2+0xa8>
 80094ea:	4651      	mov	r1, sl
 80094ec:	2002      	movs	r0, #2
 80094ee:	3901      	subs	r1, #1
 80094f0:	4008      	ands	r0, r1
 80094f2:	3801      	subs	r0, #1
 80094f4:	e02a      	b.n	800954c <__ledf2+0xa8>
 80094f6:	0039      	movs	r1, r7
 80094f8:	4311      	orrs	r1, r2
 80094fa:	d0ea      	beq.n	80094d2 <__ledf2+0x2e>
 80094fc:	2002      	movs	r0, #2
 80094fe:	e025      	b.n	800954c <__ledf2+0xa8>
 8009500:	4330      	orrs	r0, r6
 8009502:	d1fb      	bne.n	80094fc <__ledf2+0x58>
 8009504:	42ac      	cmp	r4, r5
 8009506:	d026      	beq.n	8009556 <__ledf2+0xb2>
 8009508:	2c00      	cmp	r4, #0
 800950a:	d126      	bne.n	800955a <__ledf2+0xb6>
 800950c:	433a      	orrs	r2, r7
 800950e:	d124      	bne.n	800955a <__ledf2+0xb6>
 8009510:	4651      	mov	r1, sl
 8009512:	2002      	movs	r0, #2
 8009514:	3901      	subs	r1, #1
 8009516:	4008      	ands	r0, r1
 8009518:	3801      	subs	r0, #1
 800951a:	e017      	b.n	800954c <__ledf2+0xa8>
 800951c:	4662      	mov	r2, ip
 800951e:	2a00      	cmp	r2, #0
 8009520:	d00f      	beq.n	8009542 <__ledf2+0x9e>
 8009522:	459a      	cmp	sl, r3
 8009524:	d1e1      	bne.n	80094ea <__ledf2+0x46>
 8009526:	42a5      	cmp	r5, r4
 8009528:	db05      	blt.n	8009536 <__ledf2+0x92>
 800952a:	42be      	cmp	r6, r7
 800952c:	d8dd      	bhi.n	80094ea <__ledf2+0x46>
 800952e:	d019      	beq.n	8009564 <__ledf2+0xc0>
 8009530:	2000      	movs	r0, #0
 8009532:	42be      	cmp	r6, r7
 8009534:	d20a      	bcs.n	800954c <__ledf2+0xa8>
 8009536:	4650      	mov	r0, sl
 8009538:	2301      	movs	r3, #1
 800953a:	3801      	subs	r0, #1
 800953c:	4398      	bics	r0, r3
 800953e:	3001      	adds	r0, #1
 8009540:	e004      	b.n	800954c <__ledf2+0xa8>
 8009542:	2201      	movs	r2, #1
 8009544:	3b01      	subs	r3, #1
 8009546:	4393      	bics	r3, r2
 8009548:	0018      	movs	r0, r3
 800954a:	3001      	adds	r0, #1
 800954c:	bc1c      	pop	{r2, r3, r4}
 800954e:	4690      	mov	r8, r2
 8009550:	4699      	mov	r9, r3
 8009552:	46a2      	mov	sl, r4
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009556:	433a      	orrs	r2, r7
 8009558:	d1d0      	bne.n	80094fc <__ledf2+0x58>
 800955a:	459a      	cmp	sl, r3
 800955c:	d1c5      	bne.n	80094ea <__ledf2+0x46>
 800955e:	42a5      	cmp	r5, r4
 8009560:	dcc3      	bgt.n	80094ea <__ledf2+0x46>
 8009562:	e7e0      	b.n	8009526 <__ledf2+0x82>
 8009564:	45c8      	cmp	r8, r9
 8009566:	d8c0      	bhi.n	80094ea <__ledf2+0x46>
 8009568:	2000      	movs	r0, #0
 800956a:	45c8      	cmp	r8, r9
 800956c:	d3e3      	bcc.n	8009536 <__ledf2+0x92>
 800956e:	e7ed      	b.n	800954c <__ledf2+0xa8>
 8009570:	000007ff 	.word	0x000007ff

08009574 <__aeabi_dmul>:
 8009574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009576:	4657      	mov	r7, sl
 8009578:	46de      	mov	lr, fp
 800957a:	464e      	mov	r6, r9
 800957c:	4645      	mov	r5, r8
 800957e:	b5e0      	push	{r5, r6, r7, lr}
 8009580:	4683      	mov	fp, r0
 8009582:	0006      	movs	r6, r0
 8009584:	030f      	lsls	r7, r1, #12
 8009586:	0048      	lsls	r0, r1, #1
 8009588:	b087      	sub	sp, #28
 800958a:	4692      	mov	sl, r2
 800958c:	001d      	movs	r5, r3
 800958e:	0b3f      	lsrs	r7, r7, #12
 8009590:	0d40      	lsrs	r0, r0, #21
 8009592:	0fcc      	lsrs	r4, r1, #31
 8009594:	2800      	cmp	r0, #0
 8009596:	d100      	bne.n	800959a <__aeabi_dmul+0x26>
 8009598:	e06f      	b.n	800967a <__aeabi_dmul+0x106>
 800959a:	4bde      	ldr	r3, [pc, #888]	; (8009914 <__aeabi_dmul+0x3a0>)
 800959c:	4298      	cmp	r0, r3
 800959e:	d038      	beq.n	8009612 <__aeabi_dmul+0x9e>
 80095a0:	2380      	movs	r3, #128	; 0x80
 80095a2:	00ff      	lsls	r7, r7, #3
 80095a4:	041b      	lsls	r3, r3, #16
 80095a6:	431f      	orrs	r7, r3
 80095a8:	0f73      	lsrs	r3, r6, #29
 80095aa:	433b      	orrs	r3, r7
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	4bda      	ldr	r3, [pc, #872]	; (8009918 <__aeabi_dmul+0x3a4>)
 80095b0:	2700      	movs	r7, #0
 80095b2:	4699      	mov	r9, r3
 80095b4:	2300      	movs	r3, #0
 80095b6:	469b      	mov	fp, r3
 80095b8:	00f6      	lsls	r6, r6, #3
 80095ba:	4481      	add	r9, r0
 80095bc:	032b      	lsls	r3, r5, #12
 80095be:	0069      	lsls	r1, r5, #1
 80095c0:	0b1b      	lsrs	r3, r3, #12
 80095c2:	4652      	mov	r2, sl
 80095c4:	4698      	mov	r8, r3
 80095c6:	0d49      	lsrs	r1, r1, #21
 80095c8:	0fed      	lsrs	r5, r5, #31
 80095ca:	2900      	cmp	r1, #0
 80095cc:	d100      	bne.n	80095d0 <__aeabi_dmul+0x5c>
 80095ce:	e085      	b.n	80096dc <__aeabi_dmul+0x168>
 80095d0:	4bd0      	ldr	r3, [pc, #832]	; (8009914 <__aeabi_dmul+0x3a0>)
 80095d2:	4299      	cmp	r1, r3
 80095d4:	d100      	bne.n	80095d8 <__aeabi_dmul+0x64>
 80095d6:	e073      	b.n	80096c0 <__aeabi_dmul+0x14c>
 80095d8:	4643      	mov	r3, r8
 80095da:	00da      	lsls	r2, r3, #3
 80095dc:	2380      	movs	r3, #128	; 0x80
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	4313      	orrs	r3, r2
 80095e2:	4652      	mov	r2, sl
 80095e4:	48cc      	ldr	r0, [pc, #816]	; (8009918 <__aeabi_dmul+0x3a4>)
 80095e6:	0f52      	lsrs	r2, r2, #29
 80095e8:	4684      	mov	ip, r0
 80095ea:	4313      	orrs	r3, r2
 80095ec:	4652      	mov	r2, sl
 80095ee:	2000      	movs	r0, #0
 80095f0:	4461      	add	r1, ip
 80095f2:	00d2      	lsls	r2, r2, #3
 80095f4:	4489      	add	r9, r1
 80095f6:	0021      	movs	r1, r4
 80095f8:	4069      	eors	r1, r5
 80095fa:	9100      	str	r1, [sp, #0]
 80095fc:	468c      	mov	ip, r1
 80095fe:	2101      	movs	r1, #1
 8009600:	4449      	add	r1, r9
 8009602:	468a      	mov	sl, r1
 8009604:	2f0f      	cmp	r7, #15
 8009606:	d900      	bls.n	800960a <__aeabi_dmul+0x96>
 8009608:	e090      	b.n	800972c <__aeabi_dmul+0x1b8>
 800960a:	49c4      	ldr	r1, [pc, #784]	; (800991c <__aeabi_dmul+0x3a8>)
 800960c:	00bf      	lsls	r7, r7, #2
 800960e:	59cf      	ldr	r7, [r1, r7]
 8009610:	46bf      	mov	pc, r7
 8009612:	465b      	mov	r3, fp
 8009614:	433b      	orrs	r3, r7
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	d000      	beq.n	800961c <__aeabi_dmul+0xa8>
 800961a:	e16a      	b.n	80098f2 <__aeabi_dmul+0x37e>
 800961c:	2302      	movs	r3, #2
 800961e:	2708      	movs	r7, #8
 8009620:	2600      	movs	r6, #0
 8009622:	4681      	mov	r9, r0
 8009624:	469b      	mov	fp, r3
 8009626:	e7c9      	b.n	80095bc <__aeabi_dmul+0x48>
 8009628:	0032      	movs	r2, r6
 800962a:	4658      	mov	r0, fp
 800962c:	9b01      	ldr	r3, [sp, #4]
 800962e:	4661      	mov	r1, ip
 8009630:	9100      	str	r1, [sp, #0]
 8009632:	2802      	cmp	r0, #2
 8009634:	d100      	bne.n	8009638 <__aeabi_dmul+0xc4>
 8009636:	e075      	b.n	8009724 <__aeabi_dmul+0x1b0>
 8009638:	2803      	cmp	r0, #3
 800963a:	d100      	bne.n	800963e <__aeabi_dmul+0xca>
 800963c:	e1fe      	b.n	8009a3c <__aeabi_dmul+0x4c8>
 800963e:	2801      	cmp	r0, #1
 8009640:	d000      	beq.n	8009644 <__aeabi_dmul+0xd0>
 8009642:	e12c      	b.n	800989e <__aeabi_dmul+0x32a>
 8009644:	2300      	movs	r3, #0
 8009646:	2700      	movs	r7, #0
 8009648:	2600      	movs	r6, #0
 800964a:	2500      	movs	r5, #0
 800964c:	033f      	lsls	r7, r7, #12
 800964e:	0d2a      	lsrs	r2, r5, #20
 8009650:	0b3f      	lsrs	r7, r7, #12
 8009652:	48b3      	ldr	r0, [pc, #716]	; (8009920 <__aeabi_dmul+0x3ac>)
 8009654:	0512      	lsls	r2, r2, #20
 8009656:	433a      	orrs	r2, r7
 8009658:	4002      	ands	r2, r0
 800965a:	051b      	lsls	r3, r3, #20
 800965c:	4313      	orrs	r3, r2
 800965e:	9a00      	ldr	r2, [sp, #0]
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	07d1      	lsls	r1, r2, #31
 8009664:	085b      	lsrs	r3, r3, #1
 8009666:	430b      	orrs	r3, r1
 8009668:	0030      	movs	r0, r6
 800966a:	0019      	movs	r1, r3
 800966c:	b007      	add	sp, #28
 800966e:	bc3c      	pop	{r2, r3, r4, r5}
 8009670:	4690      	mov	r8, r2
 8009672:	4699      	mov	r9, r3
 8009674:	46a2      	mov	sl, r4
 8009676:	46ab      	mov	fp, r5
 8009678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967a:	465b      	mov	r3, fp
 800967c:	433b      	orrs	r3, r7
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	d100      	bne.n	8009684 <__aeabi_dmul+0x110>
 8009682:	e12f      	b.n	80098e4 <__aeabi_dmul+0x370>
 8009684:	2f00      	cmp	r7, #0
 8009686:	d100      	bne.n	800968a <__aeabi_dmul+0x116>
 8009688:	e1a5      	b.n	80099d6 <__aeabi_dmul+0x462>
 800968a:	0038      	movs	r0, r7
 800968c:	f000 fdce 	bl	800a22c <__clzsi2>
 8009690:	0003      	movs	r3, r0
 8009692:	3b0b      	subs	r3, #11
 8009694:	2b1c      	cmp	r3, #28
 8009696:	dd00      	ble.n	800969a <__aeabi_dmul+0x126>
 8009698:	e196      	b.n	80099c8 <__aeabi_dmul+0x454>
 800969a:	221d      	movs	r2, #29
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	465a      	mov	r2, fp
 80096a0:	0001      	movs	r1, r0
 80096a2:	40da      	lsrs	r2, r3
 80096a4:	465e      	mov	r6, fp
 80096a6:	3908      	subs	r1, #8
 80096a8:	408f      	lsls	r7, r1
 80096aa:	0013      	movs	r3, r2
 80096ac:	408e      	lsls	r6, r1
 80096ae:	433b      	orrs	r3, r7
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	4b9c      	ldr	r3, [pc, #624]	; (8009924 <__aeabi_dmul+0x3b0>)
 80096b4:	2700      	movs	r7, #0
 80096b6:	1a1b      	subs	r3, r3, r0
 80096b8:	4699      	mov	r9, r3
 80096ba:	2300      	movs	r3, #0
 80096bc:	469b      	mov	fp, r3
 80096be:	e77d      	b.n	80095bc <__aeabi_dmul+0x48>
 80096c0:	4641      	mov	r1, r8
 80096c2:	4653      	mov	r3, sl
 80096c4:	430b      	orrs	r3, r1
 80096c6:	4993      	ldr	r1, [pc, #588]	; (8009914 <__aeabi_dmul+0x3a0>)
 80096c8:	468c      	mov	ip, r1
 80096ca:	44e1      	add	r9, ip
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d000      	beq.n	80096d2 <__aeabi_dmul+0x15e>
 80096d0:	e11a      	b.n	8009908 <__aeabi_dmul+0x394>
 80096d2:	2202      	movs	r2, #2
 80096d4:	2002      	movs	r0, #2
 80096d6:	4317      	orrs	r7, r2
 80096d8:	2200      	movs	r2, #0
 80096da:	e78c      	b.n	80095f6 <__aeabi_dmul+0x82>
 80096dc:	4313      	orrs	r3, r2
 80096de:	d100      	bne.n	80096e2 <__aeabi_dmul+0x16e>
 80096e0:	e10d      	b.n	80098fe <__aeabi_dmul+0x38a>
 80096e2:	4643      	mov	r3, r8
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d100      	bne.n	80096ea <__aeabi_dmul+0x176>
 80096e8:	e181      	b.n	80099ee <__aeabi_dmul+0x47a>
 80096ea:	4640      	mov	r0, r8
 80096ec:	f000 fd9e 	bl	800a22c <__clzsi2>
 80096f0:	0002      	movs	r2, r0
 80096f2:	3a0b      	subs	r2, #11
 80096f4:	2a1c      	cmp	r2, #28
 80096f6:	dd00      	ble.n	80096fa <__aeabi_dmul+0x186>
 80096f8:	e172      	b.n	80099e0 <__aeabi_dmul+0x46c>
 80096fa:	0001      	movs	r1, r0
 80096fc:	4643      	mov	r3, r8
 80096fe:	3908      	subs	r1, #8
 8009700:	408b      	lsls	r3, r1
 8009702:	4698      	mov	r8, r3
 8009704:	231d      	movs	r3, #29
 8009706:	1a9a      	subs	r2, r3, r2
 8009708:	4653      	mov	r3, sl
 800970a:	40d3      	lsrs	r3, r2
 800970c:	001a      	movs	r2, r3
 800970e:	4643      	mov	r3, r8
 8009710:	4313      	orrs	r3, r2
 8009712:	4652      	mov	r2, sl
 8009714:	408a      	lsls	r2, r1
 8009716:	4649      	mov	r1, r9
 8009718:	1a08      	subs	r0, r1, r0
 800971a:	4982      	ldr	r1, [pc, #520]	; (8009924 <__aeabi_dmul+0x3b0>)
 800971c:	4689      	mov	r9, r1
 800971e:	4481      	add	r9, r0
 8009720:	2000      	movs	r0, #0
 8009722:	e768      	b.n	80095f6 <__aeabi_dmul+0x82>
 8009724:	4b7b      	ldr	r3, [pc, #492]	; (8009914 <__aeabi_dmul+0x3a0>)
 8009726:	2700      	movs	r7, #0
 8009728:	2600      	movs	r6, #0
 800972a:	e78e      	b.n	800964a <__aeabi_dmul+0xd6>
 800972c:	0c14      	lsrs	r4, r2, #16
 800972e:	0412      	lsls	r2, r2, #16
 8009730:	0c12      	lsrs	r2, r2, #16
 8009732:	0011      	movs	r1, r2
 8009734:	0c37      	lsrs	r7, r6, #16
 8009736:	0436      	lsls	r6, r6, #16
 8009738:	0c35      	lsrs	r5, r6, #16
 800973a:	4379      	muls	r1, r7
 800973c:	0028      	movs	r0, r5
 800973e:	468c      	mov	ip, r1
 8009740:	002e      	movs	r6, r5
 8009742:	4360      	muls	r0, r4
 8009744:	4460      	add	r0, ip
 8009746:	4683      	mov	fp, r0
 8009748:	4356      	muls	r6, r2
 800974a:	0021      	movs	r1, r4
 800974c:	0c30      	lsrs	r0, r6, #16
 800974e:	4680      	mov	r8, r0
 8009750:	4658      	mov	r0, fp
 8009752:	4379      	muls	r1, r7
 8009754:	4440      	add	r0, r8
 8009756:	9102      	str	r1, [sp, #8]
 8009758:	4584      	cmp	ip, r0
 800975a:	d906      	bls.n	800976a <__aeabi_dmul+0x1f6>
 800975c:	4688      	mov	r8, r1
 800975e:	2180      	movs	r1, #128	; 0x80
 8009760:	0249      	lsls	r1, r1, #9
 8009762:	468c      	mov	ip, r1
 8009764:	44e0      	add	r8, ip
 8009766:	4641      	mov	r1, r8
 8009768:	9102      	str	r1, [sp, #8]
 800976a:	0436      	lsls	r6, r6, #16
 800976c:	0c01      	lsrs	r1, r0, #16
 800976e:	0c36      	lsrs	r6, r6, #16
 8009770:	0400      	lsls	r0, r0, #16
 8009772:	468b      	mov	fp, r1
 8009774:	1981      	adds	r1, r0, r6
 8009776:	0c1e      	lsrs	r6, r3, #16
 8009778:	041b      	lsls	r3, r3, #16
 800977a:	0c1b      	lsrs	r3, r3, #16
 800977c:	9103      	str	r1, [sp, #12]
 800977e:	0019      	movs	r1, r3
 8009780:	4379      	muls	r1, r7
 8009782:	468c      	mov	ip, r1
 8009784:	0028      	movs	r0, r5
 8009786:	4375      	muls	r5, r6
 8009788:	4465      	add	r5, ip
 800978a:	46a8      	mov	r8, r5
 800978c:	4358      	muls	r0, r3
 800978e:	0c05      	lsrs	r5, r0, #16
 8009790:	4445      	add	r5, r8
 8009792:	4377      	muls	r7, r6
 8009794:	42a9      	cmp	r1, r5
 8009796:	d903      	bls.n	80097a0 <__aeabi_dmul+0x22c>
 8009798:	2180      	movs	r1, #128	; 0x80
 800979a:	0249      	lsls	r1, r1, #9
 800979c:	468c      	mov	ip, r1
 800979e:	4467      	add	r7, ip
 80097a0:	0c29      	lsrs	r1, r5, #16
 80097a2:	468c      	mov	ip, r1
 80097a4:	0039      	movs	r1, r7
 80097a6:	0400      	lsls	r0, r0, #16
 80097a8:	0c00      	lsrs	r0, r0, #16
 80097aa:	042d      	lsls	r5, r5, #16
 80097ac:	182d      	adds	r5, r5, r0
 80097ae:	4461      	add	r1, ip
 80097b0:	44ab      	add	fp, r5
 80097b2:	9105      	str	r1, [sp, #20]
 80097b4:	4659      	mov	r1, fp
 80097b6:	9104      	str	r1, [sp, #16]
 80097b8:	9901      	ldr	r1, [sp, #4]
 80097ba:	040f      	lsls	r7, r1, #16
 80097bc:	0c3f      	lsrs	r7, r7, #16
 80097be:	0c08      	lsrs	r0, r1, #16
 80097c0:	0039      	movs	r1, r7
 80097c2:	4351      	muls	r1, r2
 80097c4:	4342      	muls	r2, r0
 80097c6:	4690      	mov	r8, r2
 80097c8:	0002      	movs	r2, r0
 80097ca:	468c      	mov	ip, r1
 80097cc:	0c09      	lsrs	r1, r1, #16
 80097ce:	468b      	mov	fp, r1
 80097d0:	4362      	muls	r2, r4
 80097d2:	437c      	muls	r4, r7
 80097d4:	4444      	add	r4, r8
 80097d6:	445c      	add	r4, fp
 80097d8:	45a0      	cmp	r8, r4
 80097da:	d903      	bls.n	80097e4 <__aeabi_dmul+0x270>
 80097dc:	2180      	movs	r1, #128	; 0x80
 80097de:	0249      	lsls	r1, r1, #9
 80097e0:	4688      	mov	r8, r1
 80097e2:	4442      	add	r2, r8
 80097e4:	0c21      	lsrs	r1, r4, #16
 80097e6:	4688      	mov	r8, r1
 80097e8:	4661      	mov	r1, ip
 80097ea:	0409      	lsls	r1, r1, #16
 80097ec:	0c09      	lsrs	r1, r1, #16
 80097ee:	468c      	mov	ip, r1
 80097f0:	0039      	movs	r1, r7
 80097f2:	4359      	muls	r1, r3
 80097f4:	4343      	muls	r3, r0
 80097f6:	4370      	muls	r0, r6
 80097f8:	437e      	muls	r6, r7
 80097fa:	0c0f      	lsrs	r7, r1, #16
 80097fc:	18f6      	adds	r6, r6, r3
 80097fe:	0424      	lsls	r4, r4, #16
 8009800:	19be      	adds	r6, r7, r6
 8009802:	4464      	add	r4, ip
 8009804:	4442      	add	r2, r8
 8009806:	468c      	mov	ip, r1
 8009808:	42b3      	cmp	r3, r6
 800980a:	d903      	bls.n	8009814 <__aeabi_dmul+0x2a0>
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	025b      	lsls	r3, r3, #9
 8009810:	4698      	mov	r8, r3
 8009812:	4440      	add	r0, r8
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	4661      	mov	r1, ip
 8009818:	4698      	mov	r8, r3
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	0437      	lsls	r7, r6, #16
 800981e:	4443      	add	r3, r8
 8009820:	469b      	mov	fp, r3
 8009822:	45ab      	cmp	fp, r5
 8009824:	41ad      	sbcs	r5, r5
 8009826:	426b      	negs	r3, r5
 8009828:	040d      	lsls	r5, r1, #16
 800982a:	9905      	ldr	r1, [sp, #20]
 800982c:	0c2d      	lsrs	r5, r5, #16
 800982e:	468c      	mov	ip, r1
 8009830:	197f      	adds	r7, r7, r5
 8009832:	4467      	add	r7, ip
 8009834:	18fd      	adds	r5, r7, r3
 8009836:	46a8      	mov	r8, r5
 8009838:	465d      	mov	r5, fp
 800983a:	192d      	adds	r5, r5, r4
 800983c:	42a5      	cmp	r5, r4
 800983e:	41a4      	sbcs	r4, r4
 8009840:	4693      	mov	fp, r2
 8009842:	4264      	negs	r4, r4
 8009844:	46a4      	mov	ip, r4
 8009846:	44c3      	add	fp, r8
 8009848:	44dc      	add	ip, fp
 800984a:	428f      	cmp	r7, r1
 800984c:	41bf      	sbcs	r7, r7
 800984e:	4598      	cmp	r8, r3
 8009850:	419b      	sbcs	r3, r3
 8009852:	4593      	cmp	fp, r2
 8009854:	4192      	sbcs	r2, r2
 8009856:	45a4      	cmp	ip, r4
 8009858:	41a4      	sbcs	r4, r4
 800985a:	425b      	negs	r3, r3
 800985c:	427f      	negs	r7, r7
 800985e:	431f      	orrs	r7, r3
 8009860:	0c36      	lsrs	r6, r6, #16
 8009862:	4252      	negs	r2, r2
 8009864:	4264      	negs	r4, r4
 8009866:	19bf      	adds	r7, r7, r6
 8009868:	4322      	orrs	r2, r4
 800986a:	18bf      	adds	r7, r7, r2
 800986c:	4662      	mov	r2, ip
 800986e:	1838      	adds	r0, r7, r0
 8009870:	0243      	lsls	r3, r0, #9
 8009872:	0dd2      	lsrs	r2, r2, #23
 8009874:	9903      	ldr	r1, [sp, #12]
 8009876:	4313      	orrs	r3, r2
 8009878:	026a      	lsls	r2, r5, #9
 800987a:	430a      	orrs	r2, r1
 800987c:	1e50      	subs	r0, r2, #1
 800987e:	4182      	sbcs	r2, r0
 8009880:	4661      	mov	r1, ip
 8009882:	0ded      	lsrs	r5, r5, #23
 8009884:	432a      	orrs	r2, r5
 8009886:	024e      	lsls	r6, r1, #9
 8009888:	4332      	orrs	r2, r6
 800988a:	01d9      	lsls	r1, r3, #7
 800988c:	d400      	bmi.n	8009890 <__aeabi_dmul+0x31c>
 800988e:	e0b3      	b.n	80099f8 <__aeabi_dmul+0x484>
 8009890:	2601      	movs	r6, #1
 8009892:	0850      	lsrs	r0, r2, #1
 8009894:	4032      	ands	r2, r6
 8009896:	4302      	orrs	r2, r0
 8009898:	07de      	lsls	r6, r3, #31
 800989a:	4332      	orrs	r2, r6
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	4c22      	ldr	r4, [pc, #136]	; (8009928 <__aeabi_dmul+0x3b4>)
 80098a0:	4454      	add	r4, sl
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	dd62      	ble.n	800996c <__aeabi_dmul+0x3f8>
 80098a6:	0751      	lsls	r1, r2, #29
 80098a8:	d009      	beq.n	80098be <__aeabi_dmul+0x34a>
 80098aa:	200f      	movs	r0, #15
 80098ac:	4010      	ands	r0, r2
 80098ae:	2804      	cmp	r0, #4
 80098b0:	d005      	beq.n	80098be <__aeabi_dmul+0x34a>
 80098b2:	1d10      	adds	r0, r2, #4
 80098b4:	4290      	cmp	r0, r2
 80098b6:	4192      	sbcs	r2, r2
 80098b8:	4252      	negs	r2, r2
 80098ba:	189b      	adds	r3, r3, r2
 80098bc:	0002      	movs	r2, r0
 80098be:	01d9      	lsls	r1, r3, #7
 80098c0:	d504      	bpl.n	80098cc <__aeabi_dmul+0x358>
 80098c2:	2480      	movs	r4, #128	; 0x80
 80098c4:	4819      	ldr	r0, [pc, #100]	; (800992c <__aeabi_dmul+0x3b8>)
 80098c6:	00e4      	lsls	r4, r4, #3
 80098c8:	4003      	ands	r3, r0
 80098ca:	4454      	add	r4, sl
 80098cc:	4818      	ldr	r0, [pc, #96]	; (8009930 <__aeabi_dmul+0x3bc>)
 80098ce:	4284      	cmp	r4, r0
 80098d0:	dd00      	ble.n	80098d4 <__aeabi_dmul+0x360>
 80098d2:	e727      	b.n	8009724 <__aeabi_dmul+0x1b0>
 80098d4:	075e      	lsls	r6, r3, #29
 80098d6:	025b      	lsls	r3, r3, #9
 80098d8:	08d2      	lsrs	r2, r2, #3
 80098da:	0b1f      	lsrs	r7, r3, #12
 80098dc:	0563      	lsls	r3, r4, #21
 80098de:	4316      	orrs	r6, r2
 80098e0:	0d5b      	lsrs	r3, r3, #21
 80098e2:	e6b2      	b.n	800964a <__aeabi_dmul+0xd6>
 80098e4:	2300      	movs	r3, #0
 80098e6:	4699      	mov	r9, r3
 80098e8:	3301      	adds	r3, #1
 80098ea:	2704      	movs	r7, #4
 80098ec:	2600      	movs	r6, #0
 80098ee:	469b      	mov	fp, r3
 80098f0:	e664      	b.n	80095bc <__aeabi_dmul+0x48>
 80098f2:	2303      	movs	r3, #3
 80098f4:	9701      	str	r7, [sp, #4]
 80098f6:	4681      	mov	r9, r0
 80098f8:	270c      	movs	r7, #12
 80098fa:	469b      	mov	fp, r3
 80098fc:	e65e      	b.n	80095bc <__aeabi_dmul+0x48>
 80098fe:	2201      	movs	r2, #1
 8009900:	2001      	movs	r0, #1
 8009902:	4317      	orrs	r7, r2
 8009904:	2200      	movs	r2, #0
 8009906:	e676      	b.n	80095f6 <__aeabi_dmul+0x82>
 8009908:	2303      	movs	r3, #3
 800990a:	2003      	movs	r0, #3
 800990c:	431f      	orrs	r7, r3
 800990e:	4643      	mov	r3, r8
 8009910:	e671      	b.n	80095f6 <__aeabi_dmul+0x82>
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	000007ff 	.word	0x000007ff
 8009918:	fffffc01 	.word	0xfffffc01
 800991c:	08017b64 	.word	0x08017b64
 8009920:	800fffff 	.word	0x800fffff
 8009924:	fffffc0d 	.word	0xfffffc0d
 8009928:	000003ff 	.word	0x000003ff
 800992c:	feffffff 	.word	0xfeffffff
 8009930:	000007fe 	.word	0x000007fe
 8009934:	2300      	movs	r3, #0
 8009936:	2780      	movs	r7, #128	; 0x80
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	033f      	lsls	r7, r7, #12
 800993c:	2600      	movs	r6, #0
 800993e:	4b43      	ldr	r3, [pc, #268]	; (8009a4c <__aeabi_dmul+0x4d8>)
 8009940:	e683      	b.n	800964a <__aeabi_dmul+0xd6>
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	0032      	movs	r2, r6
 8009946:	46a4      	mov	ip, r4
 8009948:	4658      	mov	r0, fp
 800994a:	e670      	b.n	800962e <__aeabi_dmul+0xba>
 800994c:	46ac      	mov	ip, r5
 800994e:	e66e      	b.n	800962e <__aeabi_dmul+0xba>
 8009950:	2780      	movs	r7, #128	; 0x80
 8009952:	9901      	ldr	r1, [sp, #4]
 8009954:	033f      	lsls	r7, r7, #12
 8009956:	4239      	tst	r1, r7
 8009958:	d02d      	beq.n	80099b6 <__aeabi_dmul+0x442>
 800995a:	423b      	tst	r3, r7
 800995c:	d12b      	bne.n	80099b6 <__aeabi_dmul+0x442>
 800995e:	431f      	orrs	r7, r3
 8009960:	033f      	lsls	r7, r7, #12
 8009962:	0b3f      	lsrs	r7, r7, #12
 8009964:	9500      	str	r5, [sp, #0]
 8009966:	0016      	movs	r6, r2
 8009968:	4b38      	ldr	r3, [pc, #224]	; (8009a4c <__aeabi_dmul+0x4d8>)
 800996a:	e66e      	b.n	800964a <__aeabi_dmul+0xd6>
 800996c:	2501      	movs	r5, #1
 800996e:	1b2d      	subs	r5, r5, r4
 8009970:	2d38      	cmp	r5, #56	; 0x38
 8009972:	dd00      	ble.n	8009976 <__aeabi_dmul+0x402>
 8009974:	e666      	b.n	8009644 <__aeabi_dmul+0xd0>
 8009976:	2d1f      	cmp	r5, #31
 8009978:	dc40      	bgt.n	80099fc <__aeabi_dmul+0x488>
 800997a:	4835      	ldr	r0, [pc, #212]	; (8009a50 <__aeabi_dmul+0x4dc>)
 800997c:	001c      	movs	r4, r3
 800997e:	4450      	add	r0, sl
 8009980:	0016      	movs	r6, r2
 8009982:	4082      	lsls	r2, r0
 8009984:	4084      	lsls	r4, r0
 8009986:	40ee      	lsrs	r6, r5
 8009988:	1e50      	subs	r0, r2, #1
 800998a:	4182      	sbcs	r2, r0
 800998c:	4334      	orrs	r4, r6
 800998e:	4314      	orrs	r4, r2
 8009990:	40eb      	lsrs	r3, r5
 8009992:	0762      	lsls	r2, r4, #29
 8009994:	d009      	beq.n	80099aa <__aeabi_dmul+0x436>
 8009996:	220f      	movs	r2, #15
 8009998:	4022      	ands	r2, r4
 800999a:	2a04      	cmp	r2, #4
 800999c:	d005      	beq.n	80099aa <__aeabi_dmul+0x436>
 800999e:	0022      	movs	r2, r4
 80099a0:	1d14      	adds	r4, r2, #4
 80099a2:	4294      	cmp	r4, r2
 80099a4:	4180      	sbcs	r0, r0
 80099a6:	4240      	negs	r0, r0
 80099a8:	181b      	adds	r3, r3, r0
 80099aa:	021a      	lsls	r2, r3, #8
 80099ac:	d53e      	bpl.n	8009a2c <__aeabi_dmul+0x4b8>
 80099ae:	2301      	movs	r3, #1
 80099b0:	2700      	movs	r7, #0
 80099b2:	2600      	movs	r6, #0
 80099b4:	e649      	b.n	800964a <__aeabi_dmul+0xd6>
 80099b6:	2780      	movs	r7, #128	; 0x80
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	033f      	lsls	r7, r7, #12
 80099bc:	431f      	orrs	r7, r3
 80099be:	033f      	lsls	r7, r7, #12
 80099c0:	0b3f      	lsrs	r7, r7, #12
 80099c2:	9400      	str	r4, [sp, #0]
 80099c4:	4b21      	ldr	r3, [pc, #132]	; (8009a4c <__aeabi_dmul+0x4d8>)
 80099c6:	e640      	b.n	800964a <__aeabi_dmul+0xd6>
 80099c8:	0003      	movs	r3, r0
 80099ca:	465a      	mov	r2, fp
 80099cc:	3b28      	subs	r3, #40	; 0x28
 80099ce:	409a      	lsls	r2, r3
 80099d0:	2600      	movs	r6, #0
 80099d2:	9201      	str	r2, [sp, #4]
 80099d4:	e66d      	b.n	80096b2 <__aeabi_dmul+0x13e>
 80099d6:	4658      	mov	r0, fp
 80099d8:	f000 fc28 	bl	800a22c <__clzsi2>
 80099dc:	3020      	adds	r0, #32
 80099de:	e657      	b.n	8009690 <__aeabi_dmul+0x11c>
 80099e0:	0003      	movs	r3, r0
 80099e2:	4652      	mov	r2, sl
 80099e4:	3b28      	subs	r3, #40	; 0x28
 80099e6:	409a      	lsls	r2, r3
 80099e8:	0013      	movs	r3, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	e693      	b.n	8009716 <__aeabi_dmul+0x1a2>
 80099ee:	4650      	mov	r0, sl
 80099f0:	f000 fc1c 	bl	800a22c <__clzsi2>
 80099f4:	3020      	adds	r0, #32
 80099f6:	e67b      	b.n	80096f0 <__aeabi_dmul+0x17c>
 80099f8:	46ca      	mov	sl, r9
 80099fa:	e750      	b.n	800989e <__aeabi_dmul+0x32a>
 80099fc:	201f      	movs	r0, #31
 80099fe:	001e      	movs	r6, r3
 8009a00:	4240      	negs	r0, r0
 8009a02:	1b04      	subs	r4, r0, r4
 8009a04:	40e6      	lsrs	r6, r4
 8009a06:	2d20      	cmp	r5, #32
 8009a08:	d003      	beq.n	8009a12 <__aeabi_dmul+0x49e>
 8009a0a:	4c12      	ldr	r4, [pc, #72]	; (8009a54 <__aeabi_dmul+0x4e0>)
 8009a0c:	4454      	add	r4, sl
 8009a0e:	40a3      	lsls	r3, r4
 8009a10:	431a      	orrs	r2, r3
 8009a12:	1e50      	subs	r0, r2, #1
 8009a14:	4182      	sbcs	r2, r0
 8009a16:	4332      	orrs	r2, r6
 8009a18:	2607      	movs	r6, #7
 8009a1a:	2700      	movs	r7, #0
 8009a1c:	4016      	ands	r6, r2
 8009a1e:	d009      	beq.n	8009a34 <__aeabi_dmul+0x4c0>
 8009a20:	200f      	movs	r0, #15
 8009a22:	2300      	movs	r3, #0
 8009a24:	4010      	ands	r0, r2
 8009a26:	0014      	movs	r4, r2
 8009a28:	2804      	cmp	r0, #4
 8009a2a:	d1b9      	bne.n	80099a0 <__aeabi_dmul+0x42c>
 8009a2c:	0022      	movs	r2, r4
 8009a2e:	075e      	lsls	r6, r3, #29
 8009a30:	025b      	lsls	r3, r3, #9
 8009a32:	0b1f      	lsrs	r7, r3, #12
 8009a34:	08d2      	lsrs	r2, r2, #3
 8009a36:	4316      	orrs	r6, r2
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e606      	b.n	800964a <__aeabi_dmul+0xd6>
 8009a3c:	2780      	movs	r7, #128	; 0x80
 8009a3e:	033f      	lsls	r7, r7, #12
 8009a40:	431f      	orrs	r7, r3
 8009a42:	033f      	lsls	r7, r7, #12
 8009a44:	0b3f      	lsrs	r7, r7, #12
 8009a46:	0016      	movs	r6, r2
 8009a48:	4b00      	ldr	r3, [pc, #0]	; (8009a4c <__aeabi_dmul+0x4d8>)
 8009a4a:	e5fe      	b.n	800964a <__aeabi_dmul+0xd6>
 8009a4c:	000007ff 	.word	0x000007ff
 8009a50:	0000041e 	.word	0x0000041e
 8009a54:	0000043e 	.word	0x0000043e

08009a58 <__aeabi_dsub>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	4657      	mov	r7, sl
 8009a5c:	464e      	mov	r6, r9
 8009a5e:	4645      	mov	r5, r8
 8009a60:	46de      	mov	lr, fp
 8009a62:	000c      	movs	r4, r1
 8009a64:	0309      	lsls	r1, r1, #12
 8009a66:	b5e0      	push	{r5, r6, r7, lr}
 8009a68:	0a49      	lsrs	r1, r1, #9
 8009a6a:	0f46      	lsrs	r6, r0, #29
 8009a6c:	005f      	lsls	r7, r3, #1
 8009a6e:	4331      	orrs	r1, r6
 8009a70:	031e      	lsls	r6, r3, #12
 8009a72:	0fdb      	lsrs	r3, r3, #31
 8009a74:	0a76      	lsrs	r6, r6, #9
 8009a76:	469b      	mov	fp, r3
 8009a78:	0f53      	lsrs	r3, r2, #29
 8009a7a:	4333      	orrs	r3, r6
 8009a7c:	4ec8      	ldr	r6, [pc, #800]	; (8009da0 <__aeabi_dsub+0x348>)
 8009a7e:	0065      	lsls	r5, r4, #1
 8009a80:	00c0      	lsls	r0, r0, #3
 8009a82:	0fe4      	lsrs	r4, r4, #31
 8009a84:	00d2      	lsls	r2, r2, #3
 8009a86:	0d6d      	lsrs	r5, r5, #21
 8009a88:	46a2      	mov	sl, r4
 8009a8a:	4681      	mov	r9, r0
 8009a8c:	0d7f      	lsrs	r7, r7, #21
 8009a8e:	469c      	mov	ip, r3
 8009a90:	4690      	mov	r8, r2
 8009a92:	42b7      	cmp	r7, r6
 8009a94:	d100      	bne.n	8009a98 <__aeabi_dsub+0x40>
 8009a96:	e0b9      	b.n	8009c0c <__aeabi_dsub+0x1b4>
 8009a98:	465b      	mov	r3, fp
 8009a9a:	2601      	movs	r6, #1
 8009a9c:	4073      	eors	r3, r6
 8009a9e:	469b      	mov	fp, r3
 8009aa0:	1bee      	subs	r6, r5, r7
 8009aa2:	45a3      	cmp	fp, r4
 8009aa4:	d100      	bne.n	8009aa8 <__aeabi_dsub+0x50>
 8009aa6:	e083      	b.n	8009bb0 <__aeabi_dsub+0x158>
 8009aa8:	2e00      	cmp	r6, #0
 8009aaa:	dd63      	ble.n	8009b74 <__aeabi_dsub+0x11c>
 8009aac:	2f00      	cmp	r7, #0
 8009aae:	d000      	beq.n	8009ab2 <__aeabi_dsub+0x5a>
 8009ab0:	e0b1      	b.n	8009c16 <__aeabi_dsub+0x1be>
 8009ab2:	4663      	mov	r3, ip
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	d100      	bne.n	8009aba <__aeabi_dsub+0x62>
 8009ab8:	e123      	b.n	8009d02 <__aeabi_dsub+0x2aa>
 8009aba:	1e73      	subs	r3, r6, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d000      	beq.n	8009ac2 <__aeabi_dsub+0x6a>
 8009ac0:	e1ba      	b.n	8009e38 <__aeabi_dsub+0x3e0>
 8009ac2:	1a86      	subs	r6, r0, r2
 8009ac4:	4663      	mov	r3, ip
 8009ac6:	42b0      	cmp	r0, r6
 8009ac8:	4180      	sbcs	r0, r0
 8009aca:	2501      	movs	r5, #1
 8009acc:	1ac9      	subs	r1, r1, r3
 8009ace:	4240      	negs	r0, r0
 8009ad0:	1a09      	subs	r1, r1, r0
 8009ad2:	020b      	lsls	r3, r1, #8
 8009ad4:	d400      	bmi.n	8009ad8 <__aeabi_dsub+0x80>
 8009ad6:	e147      	b.n	8009d68 <__aeabi_dsub+0x310>
 8009ad8:	0249      	lsls	r1, r1, #9
 8009ada:	0a4b      	lsrs	r3, r1, #9
 8009adc:	4698      	mov	r8, r3
 8009ade:	4643      	mov	r3, r8
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d100      	bne.n	8009ae6 <__aeabi_dsub+0x8e>
 8009ae4:	e189      	b.n	8009dfa <__aeabi_dsub+0x3a2>
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	f000 fba0 	bl	800a22c <__clzsi2>
 8009aec:	0003      	movs	r3, r0
 8009aee:	3b08      	subs	r3, #8
 8009af0:	2b1f      	cmp	r3, #31
 8009af2:	dd00      	ble.n	8009af6 <__aeabi_dsub+0x9e>
 8009af4:	e17c      	b.n	8009df0 <__aeabi_dsub+0x398>
 8009af6:	2220      	movs	r2, #32
 8009af8:	0030      	movs	r0, r6
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	4641      	mov	r1, r8
 8009afe:	40d0      	lsrs	r0, r2
 8009b00:	4099      	lsls	r1, r3
 8009b02:	0002      	movs	r2, r0
 8009b04:	409e      	lsls	r6, r3
 8009b06:	430a      	orrs	r2, r1
 8009b08:	429d      	cmp	r5, r3
 8009b0a:	dd00      	ble.n	8009b0e <__aeabi_dsub+0xb6>
 8009b0c:	e16a      	b.n	8009de4 <__aeabi_dsub+0x38c>
 8009b0e:	1b5d      	subs	r5, r3, r5
 8009b10:	1c6b      	adds	r3, r5, #1
 8009b12:	2b1f      	cmp	r3, #31
 8009b14:	dd00      	ble.n	8009b18 <__aeabi_dsub+0xc0>
 8009b16:	e194      	b.n	8009e42 <__aeabi_dsub+0x3ea>
 8009b18:	2120      	movs	r1, #32
 8009b1a:	0010      	movs	r0, r2
 8009b1c:	0035      	movs	r5, r6
 8009b1e:	1ac9      	subs	r1, r1, r3
 8009b20:	408e      	lsls	r6, r1
 8009b22:	40da      	lsrs	r2, r3
 8009b24:	4088      	lsls	r0, r1
 8009b26:	40dd      	lsrs	r5, r3
 8009b28:	1e71      	subs	r1, r6, #1
 8009b2a:	418e      	sbcs	r6, r1
 8009b2c:	0011      	movs	r1, r2
 8009b2e:	2207      	movs	r2, #7
 8009b30:	4328      	orrs	r0, r5
 8009b32:	2500      	movs	r5, #0
 8009b34:	4306      	orrs	r6, r0
 8009b36:	4032      	ands	r2, r6
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	d009      	beq.n	8009b50 <__aeabi_dsub+0xf8>
 8009b3c:	230f      	movs	r3, #15
 8009b3e:	4033      	ands	r3, r6
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d005      	beq.n	8009b50 <__aeabi_dsub+0xf8>
 8009b44:	1d33      	adds	r3, r6, #4
 8009b46:	42b3      	cmp	r3, r6
 8009b48:	41b6      	sbcs	r6, r6
 8009b4a:	4276      	negs	r6, r6
 8009b4c:	1989      	adds	r1, r1, r6
 8009b4e:	001e      	movs	r6, r3
 8009b50:	020b      	lsls	r3, r1, #8
 8009b52:	d400      	bmi.n	8009b56 <__aeabi_dsub+0xfe>
 8009b54:	e23d      	b.n	8009fd2 <__aeabi_dsub+0x57a>
 8009b56:	1c6a      	adds	r2, r5, #1
 8009b58:	4b91      	ldr	r3, [pc, #580]	; (8009da0 <__aeabi_dsub+0x348>)
 8009b5a:	0555      	lsls	r5, r2, #21
 8009b5c:	0d6d      	lsrs	r5, r5, #21
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d100      	bne.n	8009b64 <__aeabi_dsub+0x10c>
 8009b62:	e119      	b.n	8009d98 <__aeabi_dsub+0x340>
 8009b64:	4a8f      	ldr	r2, [pc, #572]	; (8009da4 <__aeabi_dsub+0x34c>)
 8009b66:	08f6      	lsrs	r6, r6, #3
 8009b68:	400a      	ands	r2, r1
 8009b6a:	0757      	lsls	r7, r2, #29
 8009b6c:	0252      	lsls	r2, r2, #9
 8009b6e:	4337      	orrs	r7, r6
 8009b70:	0b12      	lsrs	r2, r2, #12
 8009b72:	e09b      	b.n	8009cac <__aeabi_dsub+0x254>
 8009b74:	2e00      	cmp	r6, #0
 8009b76:	d000      	beq.n	8009b7a <__aeabi_dsub+0x122>
 8009b78:	e0c5      	b.n	8009d06 <__aeabi_dsub+0x2ae>
 8009b7a:	1c6e      	adds	r6, r5, #1
 8009b7c:	0576      	lsls	r6, r6, #21
 8009b7e:	0d76      	lsrs	r6, r6, #21
 8009b80:	2e01      	cmp	r6, #1
 8009b82:	dc00      	bgt.n	8009b86 <__aeabi_dsub+0x12e>
 8009b84:	e148      	b.n	8009e18 <__aeabi_dsub+0x3c0>
 8009b86:	4667      	mov	r7, ip
 8009b88:	1a86      	subs	r6, r0, r2
 8009b8a:	1bcb      	subs	r3, r1, r7
 8009b8c:	42b0      	cmp	r0, r6
 8009b8e:	41bf      	sbcs	r7, r7
 8009b90:	427f      	negs	r7, r7
 8009b92:	46b8      	mov	r8, r7
 8009b94:	001f      	movs	r7, r3
 8009b96:	4643      	mov	r3, r8
 8009b98:	1aff      	subs	r7, r7, r3
 8009b9a:	003b      	movs	r3, r7
 8009b9c:	46b8      	mov	r8, r7
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	d500      	bpl.n	8009ba4 <__aeabi_dsub+0x14c>
 8009ba2:	e15f      	b.n	8009e64 <__aeabi_dsub+0x40c>
 8009ba4:	4337      	orrs	r7, r6
 8009ba6:	d19a      	bne.n	8009ade <__aeabi_dsub+0x86>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2400      	movs	r4, #0
 8009bac:	2500      	movs	r5, #0
 8009bae:	e079      	b.n	8009ca4 <__aeabi_dsub+0x24c>
 8009bb0:	2e00      	cmp	r6, #0
 8009bb2:	dc00      	bgt.n	8009bb6 <__aeabi_dsub+0x15e>
 8009bb4:	e0fa      	b.n	8009dac <__aeabi_dsub+0x354>
 8009bb6:	2f00      	cmp	r7, #0
 8009bb8:	d100      	bne.n	8009bbc <__aeabi_dsub+0x164>
 8009bba:	e08d      	b.n	8009cd8 <__aeabi_dsub+0x280>
 8009bbc:	4b78      	ldr	r3, [pc, #480]	; (8009da0 <__aeabi_dsub+0x348>)
 8009bbe:	429d      	cmp	r5, r3
 8009bc0:	d067      	beq.n	8009c92 <__aeabi_dsub+0x23a>
 8009bc2:	2380      	movs	r3, #128	; 0x80
 8009bc4:	4667      	mov	r7, ip
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	431f      	orrs	r7, r3
 8009bca:	46bc      	mov	ip, r7
 8009bcc:	2e38      	cmp	r6, #56	; 0x38
 8009bce:	dc00      	bgt.n	8009bd2 <__aeabi_dsub+0x17a>
 8009bd0:	e152      	b.n	8009e78 <__aeabi_dsub+0x420>
 8009bd2:	4663      	mov	r3, ip
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	1e5a      	subs	r2, r3, #1
 8009bd8:	4193      	sbcs	r3, r2
 8009bda:	181e      	adds	r6, r3, r0
 8009bdc:	4286      	cmp	r6, r0
 8009bde:	4180      	sbcs	r0, r0
 8009be0:	4240      	negs	r0, r0
 8009be2:	1809      	adds	r1, r1, r0
 8009be4:	020b      	lsls	r3, r1, #8
 8009be6:	d400      	bmi.n	8009bea <__aeabi_dsub+0x192>
 8009be8:	e0be      	b.n	8009d68 <__aeabi_dsub+0x310>
 8009bea:	4b6d      	ldr	r3, [pc, #436]	; (8009da0 <__aeabi_dsub+0x348>)
 8009bec:	3501      	adds	r5, #1
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	d100      	bne.n	8009bf4 <__aeabi_dsub+0x19c>
 8009bf2:	e0d2      	b.n	8009d9a <__aeabi_dsub+0x342>
 8009bf4:	4a6b      	ldr	r2, [pc, #428]	; (8009da4 <__aeabi_dsub+0x34c>)
 8009bf6:	0873      	lsrs	r3, r6, #1
 8009bf8:	400a      	ands	r2, r1
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	400e      	ands	r6, r1
 8009bfe:	431e      	orrs	r6, r3
 8009c00:	0851      	lsrs	r1, r2, #1
 8009c02:	07d3      	lsls	r3, r2, #31
 8009c04:	2207      	movs	r2, #7
 8009c06:	431e      	orrs	r6, r3
 8009c08:	4032      	ands	r2, r6
 8009c0a:	e795      	b.n	8009b38 <__aeabi_dsub+0xe0>
 8009c0c:	001e      	movs	r6, r3
 8009c0e:	4316      	orrs	r6, r2
 8009c10:	d000      	beq.n	8009c14 <__aeabi_dsub+0x1bc>
 8009c12:	e745      	b.n	8009aa0 <__aeabi_dsub+0x48>
 8009c14:	e740      	b.n	8009a98 <__aeabi_dsub+0x40>
 8009c16:	4b62      	ldr	r3, [pc, #392]	; (8009da0 <__aeabi_dsub+0x348>)
 8009c18:	429d      	cmp	r5, r3
 8009c1a:	d03a      	beq.n	8009c92 <__aeabi_dsub+0x23a>
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	4667      	mov	r7, ip
 8009c20:	041b      	lsls	r3, r3, #16
 8009c22:	431f      	orrs	r7, r3
 8009c24:	46bc      	mov	ip, r7
 8009c26:	2e38      	cmp	r6, #56	; 0x38
 8009c28:	dd00      	ble.n	8009c2c <__aeabi_dsub+0x1d4>
 8009c2a:	e0eb      	b.n	8009e04 <__aeabi_dsub+0x3ac>
 8009c2c:	2e1f      	cmp	r6, #31
 8009c2e:	dc00      	bgt.n	8009c32 <__aeabi_dsub+0x1da>
 8009c30:	e13a      	b.n	8009ea8 <__aeabi_dsub+0x450>
 8009c32:	0033      	movs	r3, r6
 8009c34:	4667      	mov	r7, ip
 8009c36:	3b20      	subs	r3, #32
 8009c38:	40df      	lsrs	r7, r3
 8009c3a:	003b      	movs	r3, r7
 8009c3c:	2e20      	cmp	r6, #32
 8009c3e:	d005      	beq.n	8009c4c <__aeabi_dsub+0x1f4>
 8009c40:	2740      	movs	r7, #64	; 0x40
 8009c42:	1bbf      	subs	r7, r7, r6
 8009c44:	4666      	mov	r6, ip
 8009c46:	40be      	lsls	r6, r7
 8009c48:	4332      	orrs	r2, r6
 8009c4a:	4690      	mov	r8, r2
 8009c4c:	4646      	mov	r6, r8
 8009c4e:	1e72      	subs	r2, r6, #1
 8009c50:	4196      	sbcs	r6, r2
 8009c52:	4333      	orrs	r3, r6
 8009c54:	e0da      	b.n	8009e0c <__aeabi_dsub+0x3b4>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d100      	bne.n	8009c5c <__aeabi_dsub+0x204>
 8009c5a:	e214      	b.n	800a086 <__aeabi_dsub+0x62e>
 8009c5c:	4663      	mov	r3, ip
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	d100      	bne.n	8009c64 <__aeabi_dsub+0x20c>
 8009c62:	e168      	b.n	8009f36 <__aeabi_dsub+0x4de>
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	074e      	lsls	r6, r1, #29
 8009c68:	08c0      	lsrs	r0, r0, #3
 8009c6a:	08c9      	lsrs	r1, r1, #3
 8009c6c:	031b      	lsls	r3, r3, #12
 8009c6e:	4306      	orrs	r6, r0
 8009c70:	4219      	tst	r1, r3
 8009c72:	d008      	beq.n	8009c86 <__aeabi_dsub+0x22e>
 8009c74:	4660      	mov	r0, ip
 8009c76:	08c0      	lsrs	r0, r0, #3
 8009c78:	4218      	tst	r0, r3
 8009c7a:	d104      	bne.n	8009c86 <__aeabi_dsub+0x22e>
 8009c7c:	4663      	mov	r3, ip
 8009c7e:	0001      	movs	r1, r0
 8009c80:	08d2      	lsrs	r2, r2, #3
 8009c82:	075e      	lsls	r6, r3, #29
 8009c84:	4316      	orrs	r6, r2
 8009c86:	00f3      	lsls	r3, r6, #3
 8009c88:	4699      	mov	r9, r3
 8009c8a:	00c9      	lsls	r1, r1, #3
 8009c8c:	0f72      	lsrs	r2, r6, #29
 8009c8e:	4d44      	ldr	r5, [pc, #272]	; (8009da0 <__aeabi_dsub+0x348>)
 8009c90:	4311      	orrs	r1, r2
 8009c92:	464b      	mov	r3, r9
 8009c94:	08de      	lsrs	r6, r3, #3
 8009c96:	4b42      	ldr	r3, [pc, #264]	; (8009da0 <__aeabi_dsub+0x348>)
 8009c98:	074f      	lsls	r7, r1, #29
 8009c9a:	4337      	orrs	r7, r6
 8009c9c:	08ca      	lsrs	r2, r1, #3
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	d100      	bne.n	8009ca4 <__aeabi_dsub+0x24c>
 8009ca2:	e06e      	b.n	8009d82 <__aeabi_dsub+0x32a>
 8009ca4:	0312      	lsls	r2, r2, #12
 8009ca6:	056d      	lsls	r5, r5, #21
 8009ca8:	0b12      	lsrs	r2, r2, #12
 8009caa:	0d6d      	lsrs	r5, r5, #21
 8009cac:	2100      	movs	r1, #0
 8009cae:	0312      	lsls	r2, r2, #12
 8009cb0:	0b13      	lsrs	r3, r2, #12
 8009cb2:	0d0a      	lsrs	r2, r1, #20
 8009cb4:	0512      	lsls	r2, r2, #20
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	4b3b      	ldr	r3, [pc, #236]	; (8009da8 <__aeabi_dsub+0x350>)
 8009cba:	052d      	lsls	r5, r5, #20
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	432b      	orrs	r3, r5
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	07e4      	lsls	r4, r4, #31
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	4323      	orrs	r3, r4
 8009cc8:	0038      	movs	r0, r7
 8009cca:	0019      	movs	r1, r3
 8009ccc:	bc3c      	pop	{r2, r3, r4, r5}
 8009cce:	4690      	mov	r8, r2
 8009cd0:	4699      	mov	r9, r3
 8009cd2:	46a2      	mov	sl, r4
 8009cd4:	46ab      	mov	fp, r5
 8009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd8:	4663      	mov	r3, ip
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	d011      	beq.n	8009d02 <__aeabi_dsub+0x2aa>
 8009cde:	1e73      	subs	r3, r6, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d000      	beq.n	8009ce6 <__aeabi_dsub+0x28e>
 8009ce4:	e107      	b.n	8009ef6 <__aeabi_dsub+0x49e>
 8009ce6:	1886      	adds	r6, r0, r2
 8009ce8:	4286      	cmp	r6, r0
 8009cea:	4180      	sbcs	r0, r0
 8009cec:	4461      	add	r1, ip
 8009cee:	4240      	negs	r0, r0
 8009cf0:	1809      	adds	r1, r1, r0
 8009cf2:	2501      	movs	r5, #1
 8009cf4:	020b      	lsls	r3, r1, #8
 8009cf6:	d537      	bpl.n	8009d68 <__aeabi_dsub+0x310>
 8009cf8:	2502      	movs	r5, #2
 8009cfa:	e77b      	b.n	8009bf4 <__aeabi_dsub+0x19c>
 8009cfc:	003e      	movs	r6, r7
 8009cfe:	4661      	mov	r1, ip
 8009d00:	4691      	mov	r9, r2
 8009d02:	0035      	movs	r5, r6
 8009d04:	e7c5      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009d06:	465c      	mov	r4, fp
 8009d08:	2d00      	cmp	r5, #0
 8009d0a:	d000      	beq.n	8009d0e <__aeabi_dsub+0x2b6>
 8009d0c:	e0e1      	b.n	8009ed2 <__aeabi_dsub+0x47a>
 8009d0e:	000b      	movs	r3, r1
 8009d10:	4303      	orrs	r3, r0
 8009d12:	d0f3      	beq.n	8009cfc <__aeabi_dsub+0x2a4>
 8009d14:	1c73      	adds	r3, r6, #1
 8009d16:	d100      	bne.n	8009d1a <__aeabi_dsub+0x2c2>
 8009d18:	e1ac      	b.n	800a074 <__aeabi_dsub+0x61c>
 8009d1a:	4b21      	ldr	r3, [pc, #132]	; (8009da0 <__aeabi_dsub+0x348>)
 8009d1c:	429f      	cmp	r7, r3
 8009d1e:	d100      	bne.n	8009d22 <__aeabi_dsub+0x2ca>
 8009d20:	e13a      	b.n	8009f98 <__aeabi_dsub+0x540>
 8009d22:	43f3      	mvns	r3, r6
 8009d24:	2b38      	cmp	r3, #56	; 0x38
 8009d26:	dd00      	ble.n	8009d2a <__aeabi_dsub+0x2d2>
 8009d28:	e16f      	b.n	800a00a <__aeabi_dsub+0x5b2>
 8009d2a:	2b1f      	cmp	r3, #31
 8009d2c:	dd00      	ble.n	8009d30 <__aeabi_dsub+0x2d8>
 8009d2e:	e18c      	b.n	800a04a <__aeabi_dsub+0x5f2>
 8009d30:	2520      	movs	r5, #32
 8009d32:	000e      	movs	r6, r1
 8009d34:	1aed      	subs	r5, r5, r3
 8009d36:	40ae      	lsls	r6, r5
 8009d38:	46b0      	mov	r8, r6
 8009d3a:	0006      	movs	r6, r0
 8009d3c:	46aa      	mov	sl, r5
 8009d3e:	40de      	lsrs	r6, r3
 8009d40:	4645      	mov	r5, r8
 8009d42:	4335      	orrs	r5, r6
 8009d44:	002e      	movs	r6, r5
 8009d46:	4655      	mov	r5, sl
 8009d48:	40d9      	lsrs	r1, r3
 8009d4a:	40a8      	lsls	r0, r5
 8009d4c:	4663      	mov	r3, ip
 8009d4e:	1e45      	subs	r5, r0, #1
 8009d50:	41a8      	sbcs	r0, r5
 8009d52:	1a5b      	subs	r3, r3, r1
 8009d54:	469c      	mov	ip, r3
 8009d56:	4330      	orrs	r0, r6
 8009d58:	1a16      	subs	r6, r2, r0
 8009d5a:	42b2      	cmp	r2, r6
 8009d5c:	4192      	sbcs	r2, r2
 8009d5e:	4663      	mov	r3, ip
 8009d60:	4252      	negs	r2, r2
 8009d62:	1a99      	subs	r1, r3, r2
 8009d64:	003d      	movs	r5, r7
 8009d66:	e6b4      	b.n	8009ad2 <__aeabi_dsub+0x7a>
 8009d68:	2207      	movs	r2, #7
 8009d6a:	4032      	ands	r2, r6
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	d000      	beq.n	8009d72 <__aeabi_dsub+0x31a>
 8009d70:	e6e4      	b.n	8009b3c <__aeabi_dsub+0xe4>
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <__aeabi_dsub+0x348>)
 8009d74:	08f6      	lsrs	r6, r6, #3
 8009d76:	074f      	lsls	r7, r1, #29
 8009d78:	4337      	orrs	r7, r6
 8009d7a:	08ca      	lsrs	r2, r1, #3
 8009d7c:	429d      	cmp	r5, r3
 8009d7e:	d000      	beq.n	8009d82 <__aeabi_dsub+0x32a>
 8009d80:	e790      	b.n	8009ca4 <__aeabi_dsub+0x24c>
 8009d82:	003b      	movs	r3, r7
 8009d84:	4313      	orrs	r3, r2
 8009d86:	d100      	bne.n	8009d8a <__aeabi_dsub+0x332>
 8009d88:	e1a6      	b.n	800a0d8 <__aeabi_dsub+0x680>
 8009d8a:	2380      	movs	r3, #128	; 0x80
 8009d8c:	031b      	lsls	r3, r3, #12
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	0312      	lsls	r2, r2, #12
 8009d92:	0b12      	lsrs	r2, r2, #12
 8009d94:	4d02      	ldr	r5, [pc, #8]	; (8009da0 <__aeabi_dsub+0x348>)
 8009d96:	e789      	b.n	8009cac <__aeabi_dsub+0x254>
 8009d98:	0015      	movs	r5, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2700      	movs	r7, #0
 8009d9e:	e785      	b.n	8009cac <__aeabi_dsub+0x254>
 8009da0:	000007ff 	.word	0x000007ff
 8009da4:	ff7fffff 	.word	0xff7fffff
 8009da8:	800fffff 	.word	0x800fffff
 8009dac:	2e00      	cmp	r6, #0
 8009dae:	d000      	beq.n	8009db2 <__aeabi_dsub+0x35a>
 8009db0:	e0c7      	b.n	8009f42 <__aeabi_dsub+0x4ea>
 8009db2:	1c6b      	adds	r3, r5, #1
 8009db4:	055e      	lsls	r6, r3, #21
 8009db6:	0d76      	lsrs	r6, r6, #21
 8009db8:	2e01      	cmp	r6, #1
 8009dba:	dc00      	bgt.n	8009dbe <__aeabi_dsub+0x366>
 8009dbc:	e0f0      	b.n	8009fa0 <__aeabi_dsub+0x548>
 8009dbe:	4dc8      	ldr	r5, [pc, #800]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	d100      	bne.n	8009dc6 <__aeabi_dsub+0x36e>
 8009dc4:	e0b9      	b.n	8009f3a <__aeabi_dsub+0x4e2>
 8009dc6:	1885      	adds	r5, r0, r2
 8009dc8:	000a      	movs	r2, r1
 8009dca:	4285      	cmp	r5, r0
 8009dcc:	4189      	sbcs	r1, r1
 8009dce:	4462      	add	r2, ip
 8009dd0:	4249      	negs	r1, r1
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	2207      	movs	r2, #7
 8009dd6:	07ce      	lsls	r6, r1, #31
 8009dd8:	086d      	lsrs	r5, r5, #1
 8009dda:	432e      	orrs	r6, r5
 8009ddc:	0849      	lsrs	r1, r1, #1
 8009dde:	4032      	ands	r2, r6
 8009de0:	001d      	movs	r5, r3
 8009de2:	e6a9      	b.n	8009b38 <__aeabi_dsub+0xe0>
 8009de4:	49bf      	ldr	r1, [pc, #764]	; (800a0e4 <__aeabi_dsub+0x68c>)
 8009de6:	1aed      	subs	r5, r5, r3
 8009de8:	4011      	ands	r1, r2
 8009dea:	2207      	movs	r2, #7
 8009dec:	4032      	ands	r2, r6
 8009dee:	e6a3      	b.n	8009b38 <__aeabi_dsub+0xe0>
 8009df0:	0032      	movs	r2, r6
 8009df2:	3828      	subs	r0, #40	; 0x28
 8009df4:	4082      	lsls	r2, r0
 8009df6:	2600      	movs	r6, #0
 8009df8:	e686      	b.n	8009b08 <__aeabi_dsub+0xb0>
 8009dfa:	0030      	movs	r0, r6
 8009dfc:	f000 fa16 	bl	800a22c <__clzsi2>
 8009e00:	3020      	adds	r0, #32
 8009e02:	e673      	b.n	8009aec <__aeabi_dsub+0x94>
 8009e04:	4663      	mov	r3, ip
 8009e06:	4313      	orrs	r3, r2
 8009e08:	1e5a      	subs	r2, r3, #1
 8009e0a:	4193      	sbcs	r3, r2
 8009e0c:	1ac6      	subs	r6, r0, r3
 8009e0e:	42b0      	cmp	r0, r6
 8009e10:	4180      	sbcs	r0, r0
 8009e12:	4240      	negs	r0, r0
 8009e14:	1a09      	subs	r1, r1, r0
 8009e16:	e65c      	b.n	8009ad2 <__aeabi_dsub+0x7a>
 8009e18:	000e      	movs	r6, r1
 8009e1a:	4667      	mov	r7, ip
 8009e1c:	4306      	orrs	r6, r0
 8009e1e:	4317      	orrs	r7, r2
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	d15e      	bne.n	8009ee2 <__aeabi_dsub+0x48a>
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	d000      	beq.n	8009e2a <__aeabi_dsub+0x3d2>
 8009e28:	e0f3      	b.n	800a012 <__aeabi_dsub+0x5ba>
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	d100      	bne.n	8009e30 <__aeabi_dsub+0x3d8>
 8009e2e:	e11e      	b.n	800a06e <__aeabi_dsub+0x616>
 8009e30:	465c      	mov	r4, fp
 8009e32:	4661      	mov	r1, ip
 8009e34:	4691      	mov	r9, r2
 8009e36:	e72c      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009e38:	4fa9      	ldr	r7, [pc, #676]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009e3a:	42be      	cmp	r6, r7
 8009e3c:	d07b      	beq.n	8009f36 <__aeabi_dsub+0x4de>
 8009e3e:	001e      	movs	r6, r3
 8009e40:	e6f1      	b.n	8009c26 <__aeabi_dsub+0x1ce>
 8009e42:	0010      	movs	r0, r2
 8009e44:	3d1f      	subs	r5, #31
 8009e46:	40e8      	lsrs	r0, r5
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	d003      	beq.n	8009e54 <__aeabi_dsub+0x3fc>
 8009e4c:	2140      	movs	r1, #64	; 0x40
 8009e4e:	1acb      	subs	r3, r1, r3
 8009e50:	409a      	lsls	r2, r3
 8009e52:	4316      	orrs	r6, r2
 8009e54:	1e73      	subs	r3, r6, #1
 8009e56:	419e      	sbcs	r6, r3
 8009e58:	2207      	movs	r2, #7
 8009e5a:	4306      	orrs	r6, r0
 8009e5c:	4032      	ands	r2, r6
 8009e5e:	2100      	movs	r1, #0
 8009e60:	2500      	movs	r5, #0
 8009e62:	e783      	b.n	8009d6c <__aeabi_dsub+0x314>
 8009e64:	1a16      	subs	r6, r2, r0
 8009e66:	4663      	mov	r3, ip
 8009e68:	42b2      	cmp	r2, r6
 8009e6a:	4180      	sbcs	r0, r0
 8009e6c:	1a59      	subs	r1, r3, r1
 8009e6e:	4240      	negs	r0, r0
 8009e70:	1a0b      	subs	r3, r1, r0
 8009e72:	4698      	mov	r8, r3
 8009e74:	465c      	mov	r4, fp
 8009e76:	e632      	b.n	8009ade <__aeabi_dsub+0x86>
 8009e78:	2e1f      	cmp	r6, #31
 8009e7a:	dd00      	ble.n	8009e7e <__aeabi_dsub+0x426>
 8009e7c:	e0ab      	b.n	8009fd6 <__aeabi_dsub+0x57e>
 8009e7e:	2720      	movs	r7, #32
 8009e80:	1bbb      	subs	r3, r7, r6
 8009e82:	469a      	mov	sl, r3
 8009e84:	4663      	mov	r3, ip
 8009e86:	4657      	mov	r7, sl
 8009e88:	40bb      	lsls	r3, r7
 8009e8a:	4699      	mov	r9, r3
 8009e8c:	0013      	movs	r3, r2
 8009e8e:	464f      	mov	r7, r9
 8009e90:	40f3      	lsrs	r3, r6
 8009e92:	431f      	orrs	r7, r3
 8009e94:	003b      	movs	r3, r7
 8009e96:	4657      	mov	r7, sl
 8009e98:	40ba      	lsls	r2, r7
 8009e9a:	1e57      	subs	r7, r2, #1
 8009e9c:	41ba      	sbcs	r2, r7
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	4662      	mov	r2, ip
 8009ea2:	40f2      	lsrs	r2, r6
 8009ea4:	1889      	adds	r1, r1, r2
 8009ea6:	e698      	b.n	8009bda <__aeabi_dsub+0x182>
 8009ea8:	2720      	movs	r7, #32
 8009eaa:	1bbb      	subs	r3, r7, r6
 8009eac:	469a      	mov	sl, r3
 8009eae:	4663      	mov	r3, ip
 8009eb0:	4657      	mov	r7, sl
 8009eb2:	40bb      	lsls	r3, r7
 8009eb4:	4699      	mov	r9, r3
 8009eb6:	0013      	movs	r3, r2
 8009eb8:	464f      	mov	r7, r9
 8009eba:	40f3      	lsrs	r3, r6
 8009ebc:	431f      	orrs	r7, r3
 8009ebe:	003b      	movs	r3, r7
 8009ec0:	4657      	mov	r7, sl
 8009ec2:	40ba      	lsls	r2, r7
 8009ec4:	1e57      	subs	r7, r2, #1
 8009ec6:	41ba      	sbcs	r2, r7
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	4662      	mov	r2, ip
 8009ecc:	40f2      	lsrs	r2, r6
 8009ece:	1a89      	subs	r1, r1, r2
 8009ed0:	e79c      	b.n	8009e0c <__aeabi_dsub+0x3b4>
 8009ed2:	4b83      	ldr	r3, [pc, #524]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009ed4:	429f      	cmp	r7, r3
 8009ed6:	d05f      	beq.n	8009f98 <__aeabi_dsub+0x540>
 8009ed8:	2580      	movs	r5, #128	; 0x80
 8009eda:	042d      	lsls	r5, r5, #16
 8009edc:	4273      	negs	r3, r6
 8009ede:	4329      	orrs	r1, r5
 8009ee0:	e720      	b.n	8009d24 <__aeabi_dsub+0x2cc>
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	d10c      	bne.n	8009f00 <__aeabi_dsub+0x4a8>
 8009ee6:	2f00      	cmp	r7, #0
 8009ee8:	d100      	bne.n	8009eec <__aeabi_dsub+0x494>
 8009eea:	e0d0      	b.n	800a08e <__aeabi_dsub+0x636>
 8009eec:	465c      	mov	r4, fp
 8009eee:	4661      	mov	r1, ip
 8009ef0:	4691      	mov	r9, r2
 8009ef2:	4d7b      	ldr	r5, [pc, #492]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009ef4:	e6cd      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009ef6:	4f7a      	ldr	r7, [pc, #488]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009ef8:	42be      	cmp	r6, r7
 8009efa:	d01c      	beq.n	8009f36 <__aeabi_dsub+0x4de>
 8009efc:	001e      	movs	r6, r3
 8009efe:	e665      	b.n	8009bcc <__aeabi_dsub+0x174>
 8009f00:	2f00      	cmp	r7, #0
 8009f02:	d018      	beq.n	8009f36 <__aeabi_dsub+0x4de>
 8009f04:	08c0      	lsrs	r0, r0, #3
 8009f06:	074e      	lsls	r6, r1, #29
 8009f08:	4306      	orrs	r6, r0
 8009f0a:	2080      	movs	r0, #128	; 0x80
 8009f0c:	08c9      	lsrs	r1, r1, #3
 8009f0e:	0300      	lsls	r0, r0, #12
 8009f10:	4201      	tst	r1, r0
 8009f12:	d008      	beq.n	8009f26 <__aeabi_dsub+0x4ce>
 8009f14:	4663      	mov	r3, ip
 8009f16:	08dc      	lsrs	r4, r3, #3
 8009f18:	4204      	tst	r4, r0
 8009f1a:	d104      	bne.n	8009f26 <__aeabi_dsub+0x4ce>
 8009f1c:	0021      	movs	r1, r4
 8009f1e:	46da      	mov	sl, fp
 8009f20:	08d2      	lsrs	r2, r2, #3
 8009f22:	075e      	lsls	r6, r3, #29
 8009f24:	4316      	orrs	r6, r2
 8009f26:	00f3      	lsls	r3, r6, #3
 8009f28:	4699      	mov	r9, r3
 8009f2a:	2401      	movs	r4, #1
 8009f2c:	4653      	mov	r3, sl
 8009f2e:	00c9      	lsls	r1, r1, #3
 8009f30:	0f72      	lsrs	r2, r6, #29
 8009f32:	4311      	orrs	r1, r2
 8009f34:	401c      	ands	r4, r3
 8009f36:	4d6a      	ldr	r5, [pc, #424]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009f38:	e6ab      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009f3a:	001d      	movs	r5, r3
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2700      	movs	r7, #0
 8009f40:	e6b4      	b.n	8009cac <__aeabi_dsub+0x254>
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	d159      	bne.n	8009ffa <__aeabi_dsub+0x5a2>
 8009f46:	000b      	movs	r3, r1
 8009f48:	4303      	orrs	r3, r0
 8009f4a:	d100      	bne.n	8009f4e <__aeabi_dsub+0x4f6>
 8009f4c:	e6d6      	b.n	8009cfc <__aeabi_dsub+0x2a4>
 8009f4e:	1c73      	adds	r3, r6, #1
 8009f50:	d100      	bne.n	8009f54 <__aeabi_dsub+0x4fc>
 8009f52:	e0b2      	b.n	800a0ba <__aeabi_dsub+0x662>
 8009f54:	4b62      	ldr	r3, [pc, #392]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009f56:	429f      	cmp	r7, r3
 8009f58:	d01e      	beq.n	8009f98 <__aeabi_dsub+0x540>
 8009f5a:	43f3      	mvns	r3, r6
 8009f5c:	2b38      	cmp	r3, #56	; 0x38
 8009f5e:	dc6f      	bgt.n	800a040 <__aeabi_dsub+0x5e8>
 8009f60:	2b1f      	cmp	r3, #31
 8009f62:	dd00      	ble.n	8009f66 <__aeabi_dsub+0x50e>
 8009f64:	e097      	b.n	800a096 <__aeabi_dsub+0x63e>
 8009f66:	2520      	movs	r5, #32
 8009f68:	000e      	movs	r6, r1
 8009f6a:	1aed      	subs	r5, r5, r3
 8009f6c:	40ae      	lsls	r6, r5
 8009f6e:	46b0      	mov	r8, r6
 8009f70:	0006      	movs	r6, r0
 8009f72:	46aa      	mov	sl, r5
 8009f74:	40de      	lsrs	r6, r3
 8009f76:	4645      	mov	r5, r8
 8009f78:	4335      	orrs	r5, r6
 8009f7a:	002e      	movs	r6, r5
 8009f7c:	4655      	mov	r5, sl
 8009f7e:	40a8      	lsls	r0, r5
 8009f80:	40d9      	lsrs	r1, r3
 8009f82:	1e45      	subs	r5, r0, #1
 8009f84:	41a8      	sbcs	r0, r5
 8009f86:	448c      	add	ip, r1
 8009f88:	4306      	orrs	r6, r0
 8009f8a:	18b6      	adds	r6, r6, r2
 8009f8c:	4296      	cmp	r6, r2
 8009f8e:	4192      	sbcs	r2, r2
 8009f90:	4251      	negs	r1, r2
 8009f92:	4461      	add	r1, ip
 8009f94:	003d      	movs	r5, r7
 8009f96:	e625      	b.n	8009be4 <__aeabi_dsub+0x18c>
 8009f98:	003d      	movs	r5, r7
 8009f9a:	4661      	mov	r1, ip
 8009f9c:	4691      	mov	r9, r2
 8009f9e:	e678      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009fa0:	000b      	movs	r3, r1
 8009fa2:	4303      	orrs	r3, r0
 8009fa4:	2d00      	cmp	r5, #0
 8009fa6:	d000      	beq.n	8009faa <__aeabi_dsub+0x552>
 8009fa8:	e655      	b.n	8009c56 <__aeabi_dsub+0x1fe>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0f5      	beq.n	8009f9a <__aeabi_dsub+0x542>
 8009fae:	4663      	mov	r3, ip
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	d100      	bne.n	8009fb6 <__aeabi_dsub+0x55e>
 8009fb4:	e66d      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009fb6:	1886      	adds	r6, r0, r2
 8009fb8:	4286      	cmp	r6, r0
 8009fba:	4180      	sbcs	r0, r0
 8009fbc:	4461      	add	r1, ip
 8009fbe:	4240      	negs	r0, r0
 8009fc0:	1809      	adds	r1, r1, r0
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	020b      	lsls	r3, r1, #8
 8009fc6:	d400      	bmi.n	8009fca <__aeabi_dsub+0x572>
 8009fc8:	e6d0      	b.n	8009d6c <__aeabi_dsub+0x314>
 8009fca:	4b46      	ldr	r3, [pc, #280]	; (800a0e4 <__aeabi_dsub+0x68c>)
 8009fcc:	3501      	adds	r5, #1
 8009fce:	4019      	ands	r1, r3
 8009fd0:	e5b2      	b.n	8009b38 <__aeabi_dsub+0xe0>
 8009fd2:	46b1      	mov	r9, r6
 8009fd4:	e65d      	b.n	8009c92 <__aeabi_dsub+0x23a>
 8009fd6:	0033      	movs	r3, r6
 8009fd8:	4667      	mov	r7, ip
 8009fda:	3b20      	subs	r3, #32
 8009fdc:	40df      	lsrs	r7, r3
 8009fde:	003b      	movs	r3, r7
 8009fe0:	2e20      	cmp	r6, #32
 8009fe2:	d005      	beq.n	8009ff0 <__aeabi_dsub+0x598>
 8009fe4:	2740      	movs	r7, #64	; 0x40
 8009fe6:	1bbf      	subs	r7, r7, r6
 8009fe8:	4666      	mov	r6, ip
 8009fea:	40be      	lsls	r6, r7
 8009fec:	4332      	orrs	r2, r6
 8009fee:	4690      	mov	r8, r2
 8009ff0:	4646      	mov	r6, r8
 8009ff2:	1e72      	subs	r2, r6, #1
 8009ff4:	4196      	sbcs	r6, r2
 8009ff6:	4333      	orrs	r3, r6
 8009ff8:	e5ef      	b.n	8009bda <__aeabi_dsub+0x182>
 8009ffa:	4b39      	ldr	r3, [pc, #228]	; (800a0e0 <__aeabi_dsub+0x688>)
 8009ffc:	429f      	cmp	r7, r3
 8009ffe:	d0cb      	beq.n	8009f98 <__aeabi_dsub+0x540>
 800a000:	2580      	movs	r5, #128	; 0x80
 800a002:	042d      	lsls	r5, r5, #16
 800a004:	4273      	negs	r3, r6
 800a006:	4329      	orrs	r1, r5
 800a008:	e7a8      	b.n	8009f5c <__aeabi_dsub+0x504>
 800a00a:	4308      	orrs	r0, r1
 800a00c:	1e41      	subs	r1, r0, #1
 800a00e:	4188      	sbcs	r0, r1
 800a010:	e6a2      	b.n	8009d58 <__aeabi_dsub+0x300>
 800a012:	2f00      	cmp	r7, #0
 800a014:	d100      	bne.n	800a018 <__aeabi_dsub+0x5c0>
 800a016:	e63c      	b.n	8009c92 <__aeabi_dsub+0x23a>
 800a018:	4663      	mov	r3, ip
 800a01a:	1a86      	subs	r6, r0, r2
 800a01c:	1acf      	subs	r7, r1, r3
 800a01e:	42b0      	cmp	r0, r6
 800a020:	419b      	sbcs	r3, r3
 800a022:	425b      	negs	r3, r3
 800a024:	1afb      	subs	r3, r7, r3
 800a026:	4698      	mov	r8, r3
 800a028:	021b      	lsls	r3, r3, #8
 800a02a:	d54e      	bpl.n	800a0ca <__aeabi_dsub+0x672>
 800a02c:	1a16      	subs	r6, r2, r0
 800a02e:	4663      	mov	r3, ip
 800a030:	42b2      	cmp	r2, r6
 800a032:	4192      	sbcs	r2, r2
 800a034:	1a59      	subs	r1, r3, r1
 800a036:	4252      	negs	r2, r2
 800a038:	1a89      	subs	r1, r1, r2
 800a03a:	465c      	mov	r4, fp
 800a03c:	2200      	movs	r2, #0
 800a03e:	e57b      	b.n	8009b38 <__aeabi_dsub+0xe0>
 800a040:	4301      	orrs	r1, r0
 800a042:	000e      	movs	r6, r1
 800a044:	1e71      	subs	r1, r6, #1
 800a046:	418e      	sbcs	r6, r1
 800a048:	e79f      	b.n	8009f8a <__aeabi_dsub+0x532>
 800a04a:	001d      	movs	r5, r3
 800a04c:	000e      	movs	r6, r1
 800a04e:	3d20      	subs	r5, #32
 800a050:	40ee      	lsrs	r6, r5
 800a052:	46b0      	mov	r8, r6
 800a054:	2b20      	cmp	r3, #32
 800a056:	d004      	beq.n	800a062 <__aeabi_dsub+0x60a>
 800a058:	2540      	movs	r5, #64	; 0x40
 800a05a:	1aeb      	subs	r3, r5, r3
 800a05c:	4099      	lsls	r1, r3
 800a05e:	4308      	orrs	r0, r1
 800a060:	4681      	mov	r9, r0
 800a062:	4648      	mov	r0, r9
 800a064:	4643      	mov	r3, r8
 800a066:	1e41      	subs	r1, r0, #1
 800a068:	4188      	sbcs	r0, r1
 800a06a:	4318      	orrs	r0, r3
 800a06c:	e674      	b.n	8009d58 <__aeabi_dsub+0x300>
 800a06e:	2200      	movs	r2, #0
 800a070:	2400      	movs	r4, #0
 800a072:	e617      	b.n	8009ca4 <__aeabi_dsub+0x24c>
 800a074:	1a16      	subs	r6, r2, r0
 800a076:	4663      	mov	r3, ip
 800a078:	42b2      	cmp	r2, r6
 800a07a:	4192      	sbcs	r2, r2
 800a07c:	1a59      	subs	r1, r3, r1
 800a07e:	4252      	negs	r2, r2
 800a080:	1a89      	subs	r1, r1, r2
 800a082:	003d      	movs	r5, r7
 800a084:	e525      	b.n	8009ad2 <__aeabi_dsub+0x7a>
 800a086:	4661      	mov	r1, ip
 800a088:	4691      	mov	r9, r2
 800a08a:	4d15      	ldr	r5, [pc, #84]	; (800a0e0 <__aeabi_dsub+0x688>)
 800a08c:	e601      	b.n	8009c92 <__aeabi_dsub+0x23a>
 800a08e:	2280      	movs	r2, #128	; 0x80
 800a090:	2400      	movs	r4, #0
 800a092:	0312      	lsls	r2, r2, #12
 800a094:	e679      	b.n	8009d8a <__aeabi_dsub+0x332>
 800a096:	001d      	movs	r5, r3
 800a098:	000e      	movs	r6, r1
 800a09a:	3d20      	subs	r5, #32
 800a09c:	40ee      	lsrs	r6, r5
 800a09e:	46b0      	mov	r8, r6
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d004      	beq.n	800a0ae <__aeabi_dsub+0x656>
 800a0a4:	2540      	movs	r5, #64	; 0x40
 800a0a6:	1aeb      	subs	r3, r5, r3
 800a0a8:	4099      	lsls	r1, r3
 800a0aa:	4308      	orrs	r0, r1
 800a0ac:	4681      	mov	r9, r0
 800a0ae:	464e      	mov	r6, r9
 800a0b0:	4643      	mov	r3, r8
 800a0b2:	1e71      	subs	r1, r6, #1
 800a0b4:	418e      	sbcs	r6, r1
 800a0b6:	431e      	orrs	r6, r3
 800a0b8:	e767      	b.n	8009f8a <__aeabi_dsub+0x532>
 800a0ba:	1886      	adds	r6, r0, r2
 800a0bc:	4296      	cmp	r6, r2
 800a0be:	419b      	sbcs	r3, r3
 800a0c0:	4461      	add	r1, ip
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	18c9      	adds	r1, r1, r3
 800a0c6:	003d      	movs	r5, r7
 800a0c8:	e58c      	b.n	8009be4 <__aeabi_dsub+0x18c>
 800a0ca:	4647      	mov	r7, r8
 800a0cc:	4337      	orrs	r7, r6
 800a0ce:	d0ce      	beq.n	800a06e <__aeabi_dsub+0x616>
 800a0d0:	2207      	movs	r2, #7
 800a0d2:	4641      	mov	r1, r8
 800a0d4:	4032      	ands	r2, r6
 800a0d6:	e649      	b.n	8009d6c <__aeabi_dsub+0x314>
 800a0d8:	2700      	movs	r7, #0
 800a0da:	003a      	movs	r2, r7
 800a0dc:	e5e6      	b.n	8009cac <__aeabi_dsub+0x254>
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	000007ff 	.word	0x000007ff
 800a0e4:	ff7fffff 	.word	0xff7fffff

0800a0e8 <__aeabi_d2iz>:
 800a0e8:	b530      	push	{r4, r5, lr}
 800a0ea:	4d14      	ldr	r5, [pc, #80]	; (800a13c <__aeabi_d2iz+0x54>)
 800a0ec:	030a      	lsls	r2, r1, #12
 800a0ee:	004b      	lsls	r3, r1, #1
 800a0f0:	0b12      	lsrs	r2, r2, #12
 800a0f2:	0d5b      	lsrs	r3, r3, #21
 800a0f4:	0fc9      	lsrs	r1, r1, #31
 800a0f6:	2400      	movs	r4, #0
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	dd11      	ble.n	800a120 <__aeabi_d2iz+0x38>
 800a0fc:	4c10      	ldr	r4, [pc, #64]	; (800a140 <__aeabi_d2iz+0x58>)
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	dc10      	bgt.n	800a124 <__aeabi_d2iz+0x3c>
 800a102:	2480      	movs	r4, #128	; 0x80
 800a104:	0364      	lsls	r4, r4, #13
 800a106:	4322      	orrs	r2, r4
 800a108:	4c0e      	ldr	r4, [pc, #56]	; (800a144 <__aeabi_d2iz+0x5c>)
 800a10a:	1ae4      	subs	r4, r4, r3
 800a10c:	2c1f      	cmp	r4, #31
 800a10e:	dd0c      	ble.n	800a12a <__aeabi_d2iz+0x42>
 800a110:	480d      	ldr	r0, [pc, #52]	; (800a148 <__aeabi_d2iz+0x60>)
 800a112:	1ac3      	subs	r3, r0, r3
 800a114:	40da      	lsrs	r2, r3
 800a116:	0013      	movs	r3, r2
 800a118:	425c      	negs	r4, r3
 800a11a:	2900      	cmp	r1, #0
 800a11c:	d100      	bne.n	800a120 <__aeabi_d2iz+0x38>
 800a11e:	001c      	movs	r4, r3
 800a120:	0020      	movs	r0, r4
 800a122:	bd30      	pop	{r4, r5, pc}
 800a124:	4b09      	ldr	r3, [pc, #36]	; (800a14c <__aeabi_d2iz+0x64>)
 800a126:	18cc      	adds	r4, r1, r3
 800a128:	e7fa      	b.n	800a120 <__aeabi_d2iz+0x38>
 800a12a:	4d09      	ldr	r5, [pc, #36]	; (800a150 <__aeabi_d2iz+0x68>)
 800a12c:	40e0      	lsrs	r0, r4
 800a12e:	46ac      	mov	ip, r5
 800a130:	4463      	add	r3, ip
 800a132:	409a      	lsls	r2, r3
 800a134:	0013      	movs	r3, r2
 800a136:	4303      	orrs	r3, r0
 800a138:	e7ee      	b.n	800a118 <__aeabi_d2iz+0x30>
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	000003fe 	.word	0x000003fe
 800a140:	0000041d 	.word	0x0000041d
 800a144:	00000433 	.word	0x00000433
 800a148:	00000413 	.word	0x00000413
 800a14c:	7fffffff 	.word	0x7fffffff
 800a150:	fffffbed 	.word	0xfffffbed

0800a154 <__aeabi_i2d>:
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	2800      	cmp	r0, #0
 800a158:	d02d      	beq.n	800a1b6 <__aeabi_i2d+0x62>
 800a15a:	17c3      	asrs	r3, r0, #31
 800a15c:	18c5      	adds	r5, r0, r3
 800a15e:	405d      	eors	r5, r3
 800a160:	0fc4      	lsrs	r4, r0, #31
 800a162:	0028      	movs	r0, r5
 800a164:	f000 f862 	bl	800a22c <__clzsi2>
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <__aeabi_i2d+0x6c>)
 800a16a:	1a1b      	subs	r3, r3, r0
 800a16c:	055b      	lsls	r3, r3, #21
 800a16e:	0d5b      	lsrs	r3, r3, #21
 800a170:	280a      	cmp	r0, #10
 800a172:	dd15      	ble.n	800a1a0 <__aeabi_i2d+0x4c>
 800a174:	380b      	subs	r0, #11
 800a176:	4085      	lsls	r5, r0
 800a178:	2200      	movs	r2, #0
 800a17a:	032d      	lsls	r5, r5, #12
 800a17c:	0b2d      	lsrs	r5, r5, #12
 800a17e:	2100      	movs	r1, #0
 800a180:	0010      	movs	r0, r2
 800a182:	032d      	lsls	r5, r5, #12
 800a184:	0d0a      	lsrs	r2, r1, #20
 800a186:	0b2d      	lsrs	r5, r5, #12
 800a188:	0512      	lsls	r2, r2, #20
 800a18a:	432a      	orrs	r2, r5
 800a18c:	4d0d      	ldr	r5, [pc, #52]	; (800a1c4 <__aeabi_i2d+0x70>)
 800a18e:	051b      	lsls	r3, r3, #20
 800a190:	402a      	ands	r2, r5
 800a192:	4313      	orrs	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	07e4      	lsls	r4, r4, #31
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	4323      	orrs	r3, r4
 800a19c:	0019      	movs	r1, r3
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	0002      	movs	r2, r0
 800a1a2:	0029      	movs	r1, r5
 800a1a4:	3215      	adds	r2, #21
 800a1a6:	4091      	lsls	r1, r2
 800a1a8:	000a      	movs	r2, r1
 800a1aa:	210b      	movs	r1, #11
 800a1ac:	1a08      	subs	r0, r1, r0
 800a1ae:	40c5      	lsrs	r5, r0
 800a1b0:	032d      	lsls	r5, r5, #12
 800a1b2:	0b2d      	lsrs	r5, r5, #12
 800a1b4:	e7e3      	b.n	800a17e <__aeabi_i2d+0x2a>
 800a1b6:	2400      	movs	r4, #0
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	e7de      	b.n	800a17e <__aeabi_i2d+0x2a>
 800a1c0:	0000041e 	.word	0x0000041e
 800a1c4:	800fffff 	.word	0x800fffff

0800a1c8 <__aeabi_ui2d>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	1e04      	subs	r4, r0, #0
 800a1cc:	d025      	beq.n	800a21a <__aeabi_ui2d+0x52>
 800a1ce:	f000 f82d 	bl	800a22c <__clzsi2>
 800a1d2:	4b14      	ldr	r3, [pc, #80]	; (800a224 <__aeabi_ui2d+0x5c>)
 800a1d4:	1a1b      	subs	r3, r3, r0
 800a1d6:	055b      	lsls	r3, r3, #21
 800a1d8:	0d5b      	lsrs	r3, r3, #21
 800a1da:	280a      	cmp	r0, #10
 800a1dc:	dd12      	ble.n	800a204 <__aeabi_ui2d+0x3c>
 800a1de:	380b      	subs	r0, #11
 800a1e0:	4084      	lsls	r4, r0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	0324      	lsls	r4, r4, #12
 800a1e6:	0b24      	lsrs	r4, r4, #12
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	0010      	movs	r0, r2
 800a1ec:	0324      	lsls	r4, r4, #12
 800a1ee:	0d0a      	lsrs	r2, r1, #20
 800a1f0:	0b24      	lsrs	r4, r4, #12
 800a1f2:	0512      	lsls	r2, r2, #20
 800a1f4:	4322      	orrs	r2, r4
 800a1f6:	4c0c      	ldr	r4, [pc, #48]	; (800a228 <__aeabi_ui2d+0x60>)
 800a1f8:	051b      	lsls	r3, r3, #20
 800a1fa:	4022      	ands	r2, r4
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	0859      	lsrs	r1, r3, #1
 800a202:	bd10      	pop	{r4, pc}
 800a204:	0002      	movs	r2, r0
 800a206:	0021      	movs	r1, r4
 800a208:	3215      	adds	r2, #21
 800a20a:	4091      	lsls	r1, r2
 800a20c:	000a      	movs	r2, r1
 800a20e:	210b      	movs	r1, #11
 800a210:	1a08      	subs	r0, r1, r0
 800a212:	40c4      	lsrs	r4, r0
 800a214:	0324      	lsls	r4, r4, #12
 800a216:	0b24      	lsrs	r4, r4, #12
 800a218:	e7e6      	b.n	800a1e8 <__aeabi_ui2d+0x20>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2400      	movs	r4, #0
 800a21e:	2200      	movs	r2, #0
 800a220:	e7e2      	b.n	800a1e8 <__aeabi_ui2d+0x20>
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	0000041e 	.word	0x0000041e
 800a228:	800fffff 	.word	0x800fffff

0800a22c <__clzsi2>:
 800a22c:	211c      	movs	r1, #28
 800a22e:	2301      	movs	r3, #1
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	4298      	cmp	r0, r3
 800a234:	d301      	bcc.n	800a23a <__clzsi2+0xe>
 800a236:	0c00      	lsrs	r0, r0, #16
 800a238:	3910      	subs	r1, #16
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	4298      	cmp	r0, r3
 800a23e:	d301      	bcc.n	800a244 <__clzsi2+0x18>
 800a240:	0a00      	lsrs	r0, r0, #8
 800a242:	3908      	subs	r1, #8
 800a244:	091b      	lsrs	r3, r3, #4
 800a246:	4298      	cmp	r0, r3
 800a248:	d301      	bcc.n	800a24e <__clzsi2+0x22>
 800a24a:	0900      	lsrs	r0, r0, #4
 800a24c:	3904      	subs	r1, #4
 800a24e:	a202      	add	r2, pc, #8	; (adr r2, 800a258 <__clzsi2+0x2c>)
 800a250:	5c10      	ldrb	r0, [r2, r0]
 800a252:	1840      	adds	r0, r0, r1
 800a254:	4770      	bx	lr
 800a256:	46c0      	nop			; (mov r8, r8)
 800a258:	02020304 	.word	0x02020304
 800a25c:	01010101 	.word	0x01010101
	...

0800a268 <__clzdi2>:
 800a268:	b510      	push	{r4, lr}
 800a26a:	2900      	cmp	r1, #0
 800a26c:	d103      	bne.n	800a276 <__clzdi2+0xe>
 800a26e:	f7ff ffdd 	bl	800a22c <__clzsi2>
 800a272:	3020      	adds	r0, #32
 800a274:	e002      	b.n	800a27c <__clzdi2+0x14>
 800a276:	1c08      	adds	r0, r1, #0
 800a278:	f7ff ffd8 	bl	800a22c <__clzsi2>
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	46c0      	nop			; (mov r8, r8)

0800a280 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800a280:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 800a282:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 800a284:	4293      	cmp	r3, r2
 800a286:	d801      	bhi.n	800a28c <_GetAvailWriteSpace+0xc>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800a288:	6880      	ldr	r0, [r0, #8]
 800a28a:	181b      	adds	r3, r3, r0
  } else {
    r = RdOff - WrOff - 1u;
 800a28c:	3b01      	subs	r3, #1
 800a28e:	1a98      	subs	r0, r3, r2
  }
  return r;
}
 800a290:	4770      	bx	lr

0800a292 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  WrOff = pRing->WrOff;
 800a294:	68c3      	ldr	r3, [r0, #12]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a296:	0014      	movs	r4, r2
  WrOff = pRing->WrOff;
 800a298:	9301      	str	r3, [sp, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
 800a29a:	9a01      	ldr	r2, [sp, #4]
 800a29c:	6883      	ldr	r3, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a29e:	0005      	movs	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
 800a2a0:	1a9e      	subs	r6, r3, r2
 800a2a2:	6843      	ldr	r3, [r0, #4]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a2a4:	000f      	movs	r7, r1
 800a2a6:	1898      	adds	r0, r3, r2
  if (Rem > NumBytes) {
 800a2a8:	42a6      	cmp	r6, r4
 800a2aa:	d906      	bls.n	800a2ba <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800a2ac:	0022      	movs	r2, r4
 800a2ae:	f00b fa0c 	bl	80156ca <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	191c      	adds	r4, r3, r4
    pRing->WrOff = NumBytesAtOnce;
 800a2b6:	60ec      	str	r4, [r5, #12]
}
 800a2b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800a2ba:	0032      	movs	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
 800a2bc:	1ba4      	subs	r4, r4, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800a2be:	f00b fa04 	bl	80156ca <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800a2c2:	19b9      	adds	r1, r7, r6
 800a2c4:	0022      	movs	r2, r4
 800a2c6:	6868      	ldr	r0, [r5, #4]
 800a2c8:	f00b f9ff 	bl	80156ca <memcpy>
 800a2cc:	e7f3      	b.n	800a2b6 <_WriteNoCheck+0x24>

0800a2ce <_WriteBlocking>:
  NumBytesWritten = 0u;
 800a2ce:	2300      	movs	r3, #0
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800a2d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2d2:	0006      	movs	r6, r0
 800a2d4:	0017      	movs	r7, r2
  WrOff = pRing->WrOff;
 800a2d6:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800a2d8:	9101      	str	r1, [sp, #4]
  NumBytesWritten = 0u;
 800a2da:	9300      	str	r3, [sp, #0]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800a2dc:	6933      	ldr	r3, [r6, #16]
 800a2de:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	d21f      	bcs.n	800a324 <_WriteBlocking+0x56>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800a2e8:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800a2ea:	42bc      	cmp	r4, r7
 800a2ec:	d900      	bls.n	800a2f0 <_WriteBlocking+0x22>
 800a2ee:	003c      	movs	r4, r7
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	d900      	bls.n	800a2f6 <_WriteBlocking+0x28>
 800a2f4:	001c      	movs	r4, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800a2f6:	6873      	ldr	r3, [r6, #4]
 800a2f8:	0022      	movs	r2, r4
 800a2fa:	1958      	adds	r0, r3, r5
 800a2fc:	9901      	ldr	r1, [sp, #4]
 800a2fe:	f00b f9e4 	bl	80156ca <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800a302:	9b00      	ldr	r3, [sp, #0]
    WrOff           += NumBytesToWrite;
 800a304:	192d      	adds	r5, r5, r4
    NumBytesWritten += NumBytesToWrite;
 800a306:	191b      	adds	r3, r3, r4
 800a308:	9300      	str	r3, [sp, #0]
    pBuffer         += NumBytesToWrite;
 800a30a:	9b01      	ldr	r3, [sp, #4]
    NumBytes        -= NumBytesToWrite;
 800a30c:	1b3f      	subs	r7, r7, r4
    pBuffer         += NumBytesToWrite;
 800a30e:	191b      	adds	r3, r3, r4
 800a310:	9301      	str	r3, [sp, #4]
    if (WrOff == pRing->SizeOfBuffer) {
 800a312:	68b3      	ldr	r3, [r6, #8]
 800a314:	42ab      	cmp	r3, r5
 800a316:	d100      	bne.n	800a31a <_WriteBlocking+0x4c>
      WrOff = 0u;
 800a318:	2500      	movs	r5, #0
    pRing->WrOff = WrOff;
 800a31a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 800a31c:	2f00      	cmp	r7, #0
 800a31e:	d1dd      	bne.n	800a2dc <_WriteBlocking+0xe>
}
 800a320:	9800      	ldr	r0, [sp, #0]
 800a322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800a324:	191b      	adds	r3, r3, r4
 800a326:	e7dd      	b.n	800a2e4 <_WriteBlocking+0x16>

0800a328 <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a328:	2303      	movs	r3, #3
static void _DoInit(void) {
 800a32a:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a32c:	4c10      	ldr	r4, [pc, #64]	; (800a370 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
 800a32e:	4a11      	ldr	r2, [pc, #68]	; (800a374 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a330:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a332:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a334:	4b10      	ldr	r3, [pc, #64]	; (800a378 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
 800a336:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a338:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800a33a:	2380      	movs	r3, #128	; 0x80
  p->aDown[0].sName         = "Terminal";
 800a33c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a33e:	4a0f      	ldr	r2, [pc, #60]	; (800a37c <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800a340:	00db      	lsls	r3, r3, #3
 800a342:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a344:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
 800a346:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800a348:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 800a34a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800a34c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a34e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
 800a350:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800a352:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a354:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800a356:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
 800a358:	4909      	ldr	r1, [pc, #36]	; (800a380 <_DoInit+0x58>)
 800a35a:	480a      	ldr	r0, [pc, #40]	; (800a384 <_DoInit+0x5c>)
 800a35c:	f00c f804 	bl	8016368 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
 800a360:	4909      	ldr	r1, [pc, #36]	; (800a388 <_DoInit+0x60>)
 800a362:	0020      	movs	r0, r4
 800a364:	f00c f800 	bl	8016368 <strcpy>
  p->acID[6] = ' ';
 800a368:	2320      	movs	r3, #32
 800a36a:	71a3      	strb	r3, [r4, #6]
}
 800a36c:	bd10      	pop	{r4, pc}
 800a36e:	46c0      	nop			; (mov r8, r8)
 800a370:	20000410 	.word	0x20000410
 800a374:	08017ba4 	.word	0x08017ba4
 800a378:	20000010 	.word	0x20000010
 800a37c:	20000000 	.word	0x20000000
 800a380:	08017bad 	.word	0x08017bad
 800a384:	20000417 	.word	0x20000417
 800a388:	08017bb1 	.word	0x08017bb1

0800a38c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	0016      	movs	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800a390:	2218      	movs	r2, #24
 800a392:	1c45      	adds	r5, r0, #1
 800a394:	4355      	muls	r5, r2
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800a396:	4342      	muls	r2, r0
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800a398:	4b16      	ldr	r3, [pc, #88]	; (800a3f4 <SEGGER_RTT_WriteNoLock+0x68>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a39a:	000f      	movs	r7, r1
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800a39c:	18ed      	adds	r5, r5, r3
  switch (pRing->Flags) {
 800a39e:	189b      	adds	r3, r3, r2
 800a3a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a3a2:	2c01      	cmp	r4, #1
 800a3a4:	d012      	beq.n	800a3cc <SEGGER_RTT_WriteNoLock+0x40>
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	d003      	beq.n	800a3b2 <SEGGER_RTT_WriteNoLock+0x26>
 800a3aa:	2c02      	cmp	r4, #2
 800a3ac:	d01b      	beq.n	800a3e6 <SEGGER_RTT_WriteNoLock+0x5a>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
 800a3ae:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
 800a3b0:	e00a      	b.n	800a3c8 <SEGGER_RTT_WriteNoLock+0x3c>
    Avail = _GetAvailWriteSpace(pRing);
 800a3b2:	0028      	movs	r0, r5
 800a3b4:	f7ff ff64 	bl	800a280 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 800a3b8:	4286      	cmp	r6, r0
 800a3ba:	d805      	bhi.n	800a3c8 <SEGGER_RTT_WriteNoLock+0x3c>
      _WriteNoCheck(pRing, pData, NumBytes);
 800a3bc:	0032      	movs	r2, r6
 800a3be:	0039      	movs	r1, r7
 800a3c0:	0028      	movs	r0, r5
 800a3c2:	f7ff ff66 	bl	800a292 <_WriteNoCheck>
 800a3c6:	0034      	movs	r4, r6
}
 800a3c8:	0020      	movs	r0, r4
 800a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 800a3cc:	0028      	movs	r0, r5
 800a3ce:	f7ff ff57 	bl	800a280 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 800a3d2:	0034      	movs	r4, r6
 800a3d4:	4286      	cmp	r6, r0
 800a3d6:	d900      	bls.n	800a3da <SEGGER_RTT_WriteNoLock+0x4e>
 800a3d8:	0004      	movs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 800a3da:	0022      	movs	r2, r4
 800a3dc:	0039      	movs	r1, r7
 800a3de:	0028      	movs	r0, r5
 800a3e0:	f7ff ff57 	bl	800a292 <_WriteNoCheck>
    break;
 800a3e4:	e7f0      	b.n	800a3c8 <SEGGER_RTT_WriteNoLock+0x3c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800a3e6:	0032      	movs	r2, r6
 800a3e8:	0028      	movs	r0, r5
 800a3ea:	f7ff ff70 	bl	800a2ce <_WriteBlocking>
 800a3ee:	0004      	movs	r4, r0
    break;
 800a3f0:	e7ea      	b.n	800a3c8 <SEGGER_RTT_WriteNoLock+0x3c>
 800a3f2:	46c0      	nop			; (mov r8, r8)
 800a3f4:	20000410 	.word	0x20000410

0800a3f8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;
  //
  INIT();
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <SEGGER_RTT_Write+0x30>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a3fc:	0005      	movs	r5, r0
  INIT();
 800a3fe:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a400:	000e      	movs	r6, r1
 800a402:	0017      	movs	r7, r2
  INIT();
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <SEGGER_RTT_Write+0x14>
 800a408:	f7ff ff8e 	bl	800a328 <_DoInit>
  SEGGER_RTT_LOCK();
 800a40c:	f3ef 8410 	mrs	r4, PRIMASK
 800a410:	2101      	movs	r1, #1
 800a412:	f381 8810 	msr	PRIMASK, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800a416:	003a      	movs	r2, r7
 800a418:	0031      	movs	r1, r6
 800a41a:	0028      	movs	r0, r5
 800a41c:	f7ff ffb6 	bl	800a38c <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800a420:	f384 8810 	msr	PRIMASK, r4
  //
  return Status;
}
 800a424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a426:	46c0      	nop			; (mov r8, r8)
 800a428:	20000410 	.word	0x20000410

0800a42c <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	0005      	movs	r5, r0
  unsigned Len;

  Len = STRLEN(s);
 800a430:	0008      	movs	r0, r1
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 800a432:	000c      	movs	r4, r1
  Len = STRLEN(s);
 800a434:	f7fd fe72 	bl	800811c <strlen>
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800a438:	0021      	movs	r1, r4
  Len = STRLEN(s);
 800a43a:	0002      	movs	r2, r0
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800a43c:	0028      	movs	r0, r5
 800a43e:	f7ff ffdb 	bl	800a3f8 <SEGGER_RTT_Write>
}
 800a442:	bd70      	pop	{r4, r5, r6, pc}

0800a444 <_write>:
*   Low-level write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write(int file, char *ptr, int len) {
 800a444:	b510      	push	{r4, lr}
 800a446:	0014      	movs	r4, r2
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800a448:	2000      	movs	r0, #0
 800a44a:	f7ff ffd5 	bl	800a3f8 <SEGGER_RTT_Write>
  return len;
}
 800a44e:	0020      	movs	r0, r4
 800a450:	bd10      	pop	{r4, pc}

0800a452 <_StoreChar>:
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
  unsigned Cnt;

  Cnt = p->Cnt;
 800a452:	6882      	ldr	r2, [r0, #8]
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800a454:	b510      	push	{r4, lr}
 800a456:	0004      	movs	r4, r0
  if ((Cnt + 1u) <= p->BufferSize) {
 800a458:	6840      	ldr	r0, [r0, #4]
 800a45a:	1c53      	adds	r3, r2, #1
 800a45c:	4283      	cmp	r3, r0
 800a45e:	d805      	bhi.n	800a46c <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
 800a460:	6820      	ldr	r0, [r4, #0]
 800a462:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
 800a464:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	3301      	adds	r3, #1
 800a46a:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800a46c:	68a2      	ldr	r2, [r4, #8]
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d109      	bne.n	800a488 <_StoreChar+0x36>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800a474:	6821      	ldr	r1, [r4, #0]
 800a476:	6920      	ldr	r0, [r4, #16]
 800a478:	f7ff ffbe 	bl	800a3f8 <SEGGER_RTT_Write>
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	4298      	cmp	r0, r3
 800a480:	d003      	beq.n	800a48a <_StoreChar+0x38>
      p->ReturnValue = -1;
 800a482:	2301      	movs	r3, #1
 800a484:	425b      	negs	r3, r3
 800a486:	60e3      	str	r3, [r4, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800a488:	bd10      	pop	{r4, pc}
      p->Cnt = 0u;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60a3      	str	r3, [r4, #8]
}
 800a48e:	e7fb      	b.n	800a488 <_StoreChar+0x36>

0800a490 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a492:	0005      	movs	r5, r0
 800a494:	001f      	movs	r7, r3
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800a496:	0008      	movs	r0, r1
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
 800a498:	2601      	movs	r6, #1
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800a49a:	b085      	sub	sp, #20
 800a49c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a49e:	9102      	str	r1, [sp, #8]
 800a4a0:	9200      	str	r2, [sp, #0]
  while (Number >= Base) {
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	4298      	cmp	r0, r3
 800a4a6:	d21a      	bcs.n	800a4de <_PrintUnsigned+0x4e>
 800a4a8:	9601      	str	r6, [sp, #4]
 800a4aa:	42be      	cmp	r6, r7
 800a4ac:	d200      	bcs.n	800a4b0 <_PrintUnsigned+0x20>
 800a4ae:	9701      	str	r7, [sp, #4]
    Width = NumDigits;
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4b4:	401a      	ands	r2, r3
 800a4b6:	9203      	str	r2, [sp, #12]
 800a4b8:	d10c      	bne.n	800a4d4 <_PrintUnsigned+0x44>
    if (FieldWidth != 0u) {
 800a4ba:	2c00      	cmp	r4, #0
 800a4bc:	d00a      	beq.n	800a4d4 <_PrintUnsigned+0x44>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800a4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        c = '0';
      } else {
        c = ' ';
 800a4c0:	2620      	movs	r6, #32
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800a4c2:	079b      	lsls	r3, r3, #30
 800a4c4:	d503      	bpl.n	800a4ce <_PrintUnsigned+0x3e>
        c = '0';
 800a4c6:	3610      	adds	r6, #16
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800a4c8:	2f00      	cmp	r7, #0
 800a4ca:	d000      	beq.n	800a4ce <_PrintUnsigned+0x3e>
        c = ' ';
 800a4cc:	3e10      	subs	r6, #16
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	d309      	bcc.n	800a4e8 <_PrintUnsigned+0x58>
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800a4d4:	68eb      	ldr	r3, [r5, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	da10      	bge.n	800a4fc <_PrintUnsigned+0x6c>
          }
        }
      }
    }
  }
}
 800a4da:	b005      	add	sp, #20
 800a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Number = (Number / Base);
 800a4de:	9900      	ldr	r1, [sp, #0]
 800a4e0:	f7fd fe38 	bl	8008154 <__udivsi3>
    Width++;
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	e7dc      	b.n	800a4a2 <_PrintUnsigned+0x12>
        _StoreChar(pBufferDesc, c);
 800a4e8:	0031      	movs	r1, r6
 800a4ea:	0028      	movs	r0, r5
 800a4ec:	f7ff ffb1 	bl	800a452 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800a4f0:	68eb      	ldr	r3, [r5, #12]
        FieldWidth--;
 800a4f2:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dbed      	blt.n	800a4d4 <_PrintUnsigned+0x44>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a4f8:	2c00      	cmp	r4, #0
 800a4fa:	d1e8      	bne.n	800a4ce <_PrintUnsigned+0x3e>
        c = ' ';
 800a4fc:	2601      	movs	r6, #1
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800a4fe:	2f01      	cmp	r7, #1
 800a500:	d903      	bls.n	800a50a <_PrintUnsigned+0x7a>
        NumDigits--;
 800a502:	3f01      	subs	r7, #1
      Digit *= Base;
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	435e      	muls	r6, r3
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800a508:	e7f9      	b.n	800a4fe <_PrintUnsigned+0x6e>
        Div = v / Digit;
 800a50a:	0031      	movs	r1, r6
 800a50c:	9802      	ldr	r0, [sp, #8]
 800a50e:	f7fd fe21 	bl	8008154 <__udivsi3>
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800a512:	9b00      	ldr	r3, [sp, #0]
 800a514:	4283      	cmp	r3, r0
 800a516:	d9f5      	bls.n	800a504 <_PrintUnsigned+0x74>
 800a518:	9802      	ldr	r0, [sp, #8]
 800a51a:	0031      	movs	r1, r6
 800a51c:	f7fd fea0 	bl	8008260 <__aeabi_uidivmod>
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <_PrintUnsigned+0xd0>)
 800a522:	9102      	str	r1, [sp, #8]
 800a524:	5c19      	ldrb	r1, [r3, r0]
 800a526:	0028      	movs	r0, r5
 800a528:	f7ff ff93 	bl	800a452 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800a52c:	68eb      	ldr	r3, [r5, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	db05      	blt.n	800a53e <_PrintUnsigned+0xae>
      Digit /= Base;
 800a532:	0030      	movs	r0, r6
 800a534:	9900      	ldr	r1, [sp, #0]
 800a536:	f7fd fe0d 	bl	8008154 <__udivsi3>
 800a53a:	1e06      	subs	r6, r0, #0
    } while (Digit);
 800a53c:	d1ec      	bne.n	800a518 <_PrintUnsigned+0x88>
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0ca      	beq.n	800a4da <_PrintUnsigned+0x4a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a544:	2c00      	cmp	r4, #0
 800a546:	d0c8      	beq.n	800a4da <_PrintUnsigned+0x4a>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	d2c5      	bcs.n	800a4da <_PrintUnsigned+0x4a>
          _StoreChar(pBufferDesc, ' ');
 800a54e:	2120      	movs	r1, #32
 800a550:	0028      	movs	r0, r5
 800a552:	f7ff ff7e 	bl	800a452 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800a556:	68eb      	ldr	r3, [r5, #12]
          FieldWidth--;
 800a558:	3c01      	subs	r4, #1
          if (pBufferDesc->ReturnValue < 0) {
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	daf2      	bge.n	800a544 <_PrintUnsigned+0xb4>
 800a55e:	e7bc      	b.n	800a4da <_PrintUnsigned+0x4a>
 800a560:	08017bb8 	.word	0x08017bb8

0800a564 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800a564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a566:	b09f      	sub	sp, #124	; 0x7c
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800a568:	ab0e      	add	r3, sp, #56	; 0x38
 800a56a:	9309      	str	r3, [sp, #36]	; 0x24
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800a56c:	2340      	movs	r3, #64	; 0x40
 800a56e:	930a      	str	r3, [sp, #40]	; 0x28
  BufferDesc.Cnt            = 0u;
 800a570:	2300      	movs	r3, #0
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800a572:	000e      	movs	r6, r1
 800a574:	0015      	movs	r5, r2
 800a576:	9007      	str	r0, [sp, #28]
  BufferDesc.Cnt            = 0u;
 800a578:	930b      	str	r3, [sp, #44]	; 0x2c
  BufferDesc.RTTBufferIndex = BufferIndex;
 800a57a:	900d      	str	r0, [sp, #52]	; 0x34
  BufferDesc.ReturnValue    = 0;
 800a57c:	930c      	str	r3, [sp, #48]	; 0x30

  do {
    c = *sFormat;
 800a57e:	7831      	ldrb	r1, [r6, #0]
    sFormat++;
 800a580:	3601      	adds	r6, #1
    if (c == 0u) {
 800a582:	2900      	cmp	r1, #0
 800a584:	d057      	beq.n	800a636 <SEGGER_RTT_vprintf+0xd2>
      break;
    }
    if (c == '%') {
 800a586:	2925      	cmp	r1, #37	; 0x25
 800a588:	d147      	bne.n	800a61a <SEGGER_RTT_vprintf+0xb6>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800a58a:	2700      	movs	r7, #0
      v = 1;
      do {
        c = *sFormat;
        switch (c) {
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800a58c:	2002      	movs	r0, #2
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800a58e:	2208      	movs	r2, #8
 800a590:	e005      	b.n	800a59e <SEGGER_RTT_vprintf+0x3a>
        switch (c) {
 800a592:	2b2d      	cmp	r3, #45	; 0x2d
 800a594:	d017      	beq.n	800a5c6 <SEGGER_RTT_vprintf+0x62>
 800a596:	2b30      	cmp	r3, #48	; 0x30
 800a598:	d108      	bne.n	800a5ac <SEGGER_RTT_vprintf+0x48>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800a59a:	4307      	orrs	r7, r0
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800a59c:	000e      	movs	r6, r1
        switch (c) {
 800a59e:	7833      	ldrb	r3, [r6, #0]
 800a5a0:	1c71      	adds	r1, r6, #1
 800a5a2:	2b2b      	cmp	r3, #43	; 0x2b
 800a5a4:	d012      	beq.n	800a5cc <SEGGER_RTT_vprintf+0x68>
 800a5a6:	d8f4      	bhi.n	800a592 <SEGGER_RTT_vprintf+0x2e>
 800a5a8:	2b23      	cmp	r3, #35	; 0x23
 800a5aa:	d011      	beq.n	800a5d0 <SEGGER_RTT_vprintf+0x6c>
        }
      } while (v);
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800a5ac:	2400      	movs	r4, #0
        c = *sFormat;
        if ((c < '0') || (c > '9')) {
          break;
        }
        sFormat++;
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800a5ae:	210a      	movs	r1, #10
        c = *sFormat;
 800a5b0:	7833      	ldrb	r3, [r6, #0]
 800a5b2:	1c72      	adds	r2, r6, #1
        if ((c < '0') || (c > '9')) {
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	3830      	subs	r0, #48	; 0x30
 800a5b8:	2809      	cmp	r0, #9
 800a5ba:	d80b      	bhi.n	800a5d4 <SEGGER_RTT_vprintf+0x70>
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800a5bc:	434c      	muls	r4, r1
 800a5be:	3c30      	subs	r4, #48	; 0x30
 800a5c0:	191c      	adds	r4, r3, r4
        c = *sFormat;
 800a5c2:	0016      	movs	r6, r2
 800a5c4:	e7f4      	b.n	800a5b0 <SEGGER_RTT_vprintf+0x4c>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800a5c6:	2301      	movs	r3, #1
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800a5c8:	431f      	orrs	r7, r3
 800a5ca:	e7e7      	b.n	800a59c <SEGGER_RTT_vprintf+0x38>
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	e7fb      	b.n	800a5c8 <SEGGER_RTT_vprintf+0x64>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800a5d0:	4317      	orrs	r7, r2
 800a5d2:	e7e3      	b.n	800a59c <SEGGER_RTT_vprintf+0x38>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	9103      	str	r1, [sp, #12]
      c = *sFormat;
      if (c == '.') {
 800a5d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a5da:	d10e      	bne.n	800a5fa <SEGGER_RTT_vprintf+0x96>
 800a5dc:	0016      	movs	r6, r2
          c = *sFormat;
          if ((c < '0') || (c > '9')) {
            break;
          }
          sFormat++;
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800a5de:	200a      	movs	r0, #10
          c = *sFormat;
 800a5e0:	7832      	ldrb	r2, [r6, #0]
 800a5e2:	1c71      	adds	r1, r6, #1
          if ((c < '0') || (c > '9')) {
 800a5e4:	0013      	movs	r3, r2
 800a5e6:	3b30      	subs	r3, #48	; 0x30
 800a5e8:	2b09      	cmp	r3, #9
 800a5ea:	d806      	bhi.n	800a5fa <SEGGER_RTT_vprintf+0x96>
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800a5ec:	9b03      	ldr	r3, [sp, #12]
          sFormat++;
 800a5ee:	000e      	movs	r6, r1
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800a5f0:	4343      	muls	r3, r0
 800a5f2:	3b30      	subs	r3, #48	; 0x30
 800a5f4:	18d3      	adds	r3, r2, r3
 800a5f6:	9303      	str	r3, [sp, #12]
          c = *sFormat;
 800a5f8:	e7f2      	b.n	800a5e0 <SEGGER_RTT_vprintf+0x7c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800a5fa:	7831      	ldrb	r1, [r6, #0]
      do {
        if ((c == 'l') || (c == 'h')) {
 800a5fc:	2204      	movs	r2, #4
 800a5fe:	000b      	movs	r3, r1
 800a600:	3601      	adds	r6, #1
 800a602:	4393      	bics	r3, r2
 800a604:	2b68      	cmp	r3, #104	; 0x68
 800a606:	d0f8      	beq.n	800a5fa <SEGGER_RTT_vprintf+0x96>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800a608:	2964      	cmp	r1, #100	; 0x64
 800a60a:	d03d      	beq.n	800a688 <SEGGER_RTT_vprintf+0x124>
 800a60c:	d809      	bhi.n	800a622 <SEGGER_RTT_vprintf+0xbe>
 800a60e:	2958      	cmp	r1, #88	; 0x58
 800a610:	d02c      	beq.n	800a66c <SEGGER_RTT_vprintf+0x108>
 800a612:	2963      	cmp	r1, #99	; 0x63
 800a614:	d032      	beq.n	800a67c <SEGGER_RTT_vprintf+0x118>
 800a616:	2925      	cmp	r1, #37	; 0x25
 800a618:	d10a      	bne.n	800a630 <SEGGER_RTT_vprintf+0xcc>
      default:
        break;
      }
      sFormat++;
    } else {
      _StoreChar(&BufferDesc, c);
 800a61a:	a809      	add	r0, sp, #36	; 0x24
 800a61c:	f7ff ff19 	bl	800a452 <_StoreChar>
 800a620:	e006      	b.n	800a630 <SEGGER_RTT_vprintf+0xcc>
      switch (c) {
 800a622:	2973      	cmp	r1, #115	; 0x73
 800a624:	d100      	bne.n	800a628 <SEGGER_RTT_vprintf+0xc4>
 800a626:	e0a6      	b.n	800a776 <SEGGER_RTT_vprintf+0x212>
 800a628:	d81c      	bhi.n	800a664 <SEGGER_RTT_vprintf+0x100>
 800a62a:	2970      	cmp	r1, #112	; 0x70
 800a62c:	d100      	bne.n	800a630 <SEGGER_RTT_vprintf+0xcc>
 800a62e:	e0b3      	b.n	800a798 <SEGGER_RTT_vprintf+0x234>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800a630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a632:	2b00      	cmp	r3, #0
 800a634:	daa3      	bge.n	800a57e <SEGGER_RTT_vprintf+0x1a>

  if (BufferDesc.ReturnValue > 0) {
 800a636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a638:	9303      	str	r3, [sp, #12]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	dd0f      	ble.n	800a65e <SEGGER_RTT_vprintf+0xfa>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800a63e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a640:	2a00      	cmp	r2, #0
 800a642:	d003      	beq.n	800a64c <SEGGER_RTT_vprintf+0xe8>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800a644:	a90e      	add	r1, sp, #56	; 0x38
 800a646:	9807      	ldr	r0, [sp, #28]
 800a648:	f7ff fed6 	bl	800a3f8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800a64c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9a04      	ldr	r2, [sp, #16]
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	4694      	mov	ip, r2
 800a65a:	4463      	add	r3, ip
 800a65c:	930c      	str	r3, [sp, #48]	; 0x30
  }
  return BufferDesc.ReturnValue;
 800a65e:	980c      	ldr	r0, [sp, #48]	; 0x30
}
 800a660:	b01f      	add	sp, #124	; 0x7c
 800a662:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (c) {
 800a664:	2975      	cmp	r1, #117	; 0x75
 800a666:	d07d      	beq.n	800a764 <SEGGER_RTT_vprintf+0x200>
 800a668:	2978      	cmp	r1, #120	; 0x78
 800a66a:	d1e1      	bne.n	800a630 <SEGGER_RTT_vprintf+0xcc>
        v = va_arg(*pParamList, int);
 800a66c:	6829      	ldr	r1, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800a66e:	9701      	str	r7, [sp, #4]
        v = va_arg(*pParamList, int);
 800a670:	1d0b      	adds	r3, r1, #4
 800a672:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800a678:	2210      	movs	r2, #16
 800a67a:	e07a      	b.n	800a772 <SEGGER_RTT_vprintf+0x20e>
        v = va_arg(*pParamList, int);
 800a67c:	682b      	ldr	r3, [r5, #0]
        c0 = (char)v;
 800a67e:	6819      	ldr	r1, [r3, #0]
        v = va_arg(*pParamList, int);
 800a680:	1d1a      	adds	r2, r3, #4
 800a682:	602a      	str	r2, [r5, #0]
        _StoreChar(&BufferDesc, c0);
 800a684:	b2c9      	uxtb	r1, r1
 800a686:	e7c8      	b.n	800a61a <SEGGER_RTT_vprintf+0xb6>
        v = va_arg(*pParamList, int);
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	1d1a      	adds	r2, r3, #4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	602a      	str	r2, [r5, #0]
  Number = (v < 0) ? -v : v;
 800a690:	17da      	asrs	r2, r3, #31
 800a692:	1898      	adds	r0, r3, r2
        v = va_arg(*pParamList, int);
 800a694:	9304      	str	r3, [sp, #16]
  Width = 1u;
 800a696:	2301      	movs	r3, #1
  Number = (v < 0) ? -v : v;
 800a698:	4050      	eors	r0, r2
    Width++;
 800a69a:	9305      	str	r3, [sp, #20]
  while (Number >= (int)Base) {
 800a69c:	2809      	cmp	r0, #9
 800a69e:	dc48      	bgt.n	800a732 <SEGGER_RTT_vprintf+0x1ce>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	9a05      	ldr	r2, [sp, #20]
 800a6a4:	9306      	str	r3, [sp, #24]
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d200      	bcs.n	800a6ac <SEGGER_RTT_vprintf+0x148>
 800a6aa:	9206      	str	r2, [sp, #24]
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800a6ac:	2c00      	cmp	r4, #0
 800a6ae:	d006      	beq.n	800a6be <SEGGER_RTT_vprintf+0x15a>
 800a6b0:	9b04      	ldr	r3, [sp, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	db02      	blt.n	800a6bc <SEGGER_RTT_vprintf+0x158>
 800a6b6:	2304      	movs	r3, #4
 800a6b8:	421f      	tst	r7, r3
 800a6ba:	d000      	beq.n	800a6be <SEGGER_RTT_vprintf+0x15a>
    FieldWidth--;
 800a6bc:	3c01      	subs	r4, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800a6be:	07bb      	lsls	r3, r7, #30
 800a6c0:	d502      	bpl.n	800a6c8 <SEGGER_RTT_vprintf+0x164>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <SEGGER_RTT_vprintf+0x16e>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	421f      	tst	r7, r3
 800a6cc:	d101      	bne.n	800a6d2 <SEGGER_RTT_vprintf+0x16e>
    if (FieldWidth != 0u) {
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	d13f      	bne.n	800a752 <SEGGER_RTT_vprintf+0x1ee>
  if (pBufferDesc->ReturnValue >= 0) {
 800a6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dbab      	blt.n	800a630 <SEGGER_RTT_vprintf+0xcc>
    if (v < 0) {
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	da3d      	bge.n	800a75a <SEGGER_RTT_vprintf+0x1f6>
      _StoreChar(pBufferDesc, '-');
 800a6de:	212d      	movs	r1, #45	; 0x2d
      v = -v;
 800a6e0:	425b      	negs	r3, r3
 800a6e2:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '+');
 800a6e4:	a809      	add	r0, sp, #36	; 0x24
 800a6e6:	f7ff feb4 	bl	800a452 <_StoreChar>
    if (pBufferDesc->ReturnValue >= 0) {
 800a6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	db9f      	blt.n	800a630 <SEGGER_RTT_vprintf+0xcc>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	403b      	ands	r3, r7
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d10f      	bne.n	800a718 <SEGGER_RTT_vprintf+0x1b4>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10c      	bne.n	800a718 <SEGGER_RTT_vprintf+0x1b4>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a6fe:	2c00      	cmp	r4, #0
 800a700:	d052      	beq.n	800a7a8 <SEGGER_RTT_vprintf+0x244>
 800a702:	9b06      	ldr	r3, [sp, #24]
 800a704:	42a3      	cmp	r3, r4
 800a706:	d207      	bcs.n	800a718 <SEGGER_RTT_vprintf+0x1b4>
            _StoreChar(pBufferDesc, '0');
 800a708:	2130      	movs	r1, #48	; 0x30
 800a70a:	a809      	add	r0, sp, #36	; 0x24
 800a70c:	f7ff fea1 	bl	800a452 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800a710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            FieldWidth--;
 800a712:	3c01      	subs	r4, #1
            if (pBufferDesc->ReturnValue < 0) {
 800a714:	2b00      	cmp	r3, #0
 800a716:	daf2      	bge.n	800a6fe <SEGGER_RTT_vprintf+0x19a>
      if (pBufferDesc->ReturnValue >= 0) {
 800a718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da00      	bge.n	800a720 <SEGGER_RTT_vprintf+0x1bc>
 800a71e:	e787      	b.n	800a630 <SEGGER_RTT_vprintf+0xcc>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800a720:	220a      	movs	r2, #10
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	9904      	ldr	r1, [sp, #16]
 800a726:	9701      	str	r7, [sp, #4]
 800a728:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800a72a:	a809      	add	r0, sp, #36	; 0x24
 800a72c:	f7ff feb0 	bl	800a490 <_PrintUnsigned>
        break;
 800a730:	e77e      	b.n	800a630 <SEGGER_RTT_vprintf+0xcc>
    Number = (Number / (int)Base);
 800a732:	210a      	movs	r1, #10
 800a734:	f7fd fd98 	bl	8008268 <__divsi3>
    Width++;
 800a738:	9b05      	ldr	r3, [sp, #20]
 800a73a:	3301      	adds	r3, #1
 800a73c:	e7ad      	b.n	800a69a <SEGGER_RTT_vprintf+0x136>
        _StoreChar(pBufferDesc, ' ');
 800a73e:	2120      	movs	r1, #32
 800a740:	a809      	add	r0, sp, #36	; 0x24
 800a742:	f7ff fe86 	bl	800a452 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800a746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        FieldWidth--;
 800a748:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	dbc1      	blt.n	800a6d2 <SEGGER_RTT_vprintf+0x16e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a74e:	2c00      	cmp	r4, #0
 800a750:	d0c2      	beq.n	800a6d8 <SEGGER_RTT_vprintf+0x174>
 800a752:	9b06      	ldr	r3, [sp, #24]
 800a754:	42a3      	cmp	r3, r4
 800a756:	d3f2      	bcc.n	800a73e <SEGGER_RTT_vprintf+0x1da>
 800a758:	e7bb      	b.n	800a6d2 <SEGGER_RTT_vprintf+0x16e>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800a75a:	2304      	movs	r3, #4
 800a75c:	421f      	tst	r7, r3
 800a75e:	d0c4      	beq.n	800a6ea <SEGGER_RTT_vprintf+0x186>
      _StoreChar(pBufferDesc, '+');
 800a760:	212b      	movs	r1, #43	; 0x2b
 800a762:	e7bf      	b.n	800a6e4 <SEGGER_RTT_vprintf+0x180>
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a764:	220a      	movs	r2, #10
        v = va_arg(*pParamList, int);
 800a766:	6829      	ldr	r1, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a768:	9701      	str	r7, [sp, #4]
        v = va_arg(*pParamList, int);
 800a76a:	1d0b      	adds	r3, r1, #4
 800a76c:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	9400      	str	r4, [sp, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800a772:	6809      	ldr	r1, [r1, #0]
 800a774:	e7d9      	b.n	800a72a <SEGGER_RTT_vprintf+0x1c6>
          const char * s = va_arg(*pParamList, const char *);
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	602a      	str	r2, [r5, #0]
 800a77c:	681c      	ldr	r4, [r3, #0]
            c = *s;
 800a77e:	7821      	ldrb	r1, [r4, #0]
            s++;
 800a780:	3401      	adds	r4, #1
            if (c == '\0') {
 800a782:	2900      	cmp	r1, #0
 800a784:	d100      	bne.n	800a788 <SEGGER_RTT_vprintf+0x224>
 800a786:	e753      	b.n	800a630 <SEGGER_RTT_vprintf+0xcc>
           _StoreChar(&BufferDesc, c);
 800a788:	a809      	add	r0, sp, #36	; 0x24
 800a78a:	f7ff fe62 	bl	800a452 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800a78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	daf3      	bge.n	800a77e <SEGGER_RTT_vprintf+0x21a>
 800a796:	e74b      	b.n	800a630 <SEGGER_RTT_vprintf+0xcc>
        v = va_arg(*pParamList, int);
 800a798:	6829      	ldr	r1, [r5, #0]
 800a79a:	1d0b      	adds	r3, r1, #4
 800a79c:	602b      	str	r3, [r5, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	e767      	b.n	800a678 <SEGGER_RTT_vprintf+0x114>
  Width = 1u;
 800a7a8:	2400      	movs	r4, #0
 800a7aa:	e7b9      	b.n	800a720 <SEGGER_RTT_vprintf+0x1bc>

0800a7ac <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800a7ac:	b40e      	push	{r1, r2, r3}
 800a7ae:	b503      	push	{r0, r1, lr}
 800a7b0:	ab03      	add	r3, sp, #12
 800a7b2:	cb02      	ldmia	r3!, {r1}
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800a7b4:	aa01      	add	r2, sp, #4
  va_start(ParamList, sFormat);
 800a7b6:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800a7b8:	f7ff fed4 	bl	800a564 <SEGGER_RTT_vprintf>
  va_end(ParamList);
  return r;
}
 800a7bc:	b002      	add	sp, #8
 800a7be:	bc08      	pop	{r3}
 800a7c0:	b003      	add	sp, #12
 800a7c2:	4718      	bx	r3

0800a7c4 <ST25DV_IsDeviceReady>:
  *           This function determines if the ST25DV is ready to answer an I2C request. 
  * @param    Trials Max number of tentative.
  * @retval   int32_t enum status.
  */
int32_t ST25DV_IsDeviceReady(ST25DV_Object_t* pObj,  const uint32_t Trials )
{
 800a7c4:	b510      	push	{r4, lr}
  /* Test communication with device */
  return pObj->IO.IsReady(ST25DV_ADDR_DATA_I2C, Trials );
 800a7c6:	6883      	ldr	r3, [r0, #8]
 800a7c8:	20a6      	movs	r0, #166	; 0xa6
 800a7ca:	4798      	blx	r3
}
 800a7cc:	bd10      	pop	{r4, pc}

0800a7ce <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 800a7ce:	b570      	push	{r4, r5, r6, lr}
 800a7d0:	000d      	movs	r5, r1
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 800a7d2:	6904      	ldr	r4, [r0, #16]
{
 800a7d4:	0011      	movs	r1, r2
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 800a7d6:	20a6      	movs	r0, #166	; 0xa6
 800a7d8:	002a      	movs	r2, r5
 800a7da:	47a0      	blx	r4
}
 800a7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7e0 <ST25DV_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteData(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 800a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7e2:	0007      	movs	r7, r0
 800a7e4:	001e      	movs	r6, r3
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	9101      	str	r1, [sp, #4]
 800a7ea:	9202      	str	r2, [sp, #8]
 800a7ec:	2380      	movs	r3, #128	; 0x80
 800a7ee:	1c34      	adds	r4, r6, #0
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	429e      	cmp	r6, r3
 800a7f4:	d901      	bls.n	800a7fa <ST25DV_WriteData+0x1a>
 800a7f6:	4b19      	ldr	r3, [pc, #100]	; (800a85c <ST25DV_WriteData+0x7c>)
 800a7f8:	881c      	ldrh	r4, [r3, #0]
 800a7fa:	b2a4      	uxth	r4, r4
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
    }
    /* Write split_data_nb bytes in memory */
    ret = pObj->IO.Write( ST25DV_ADDR_DATA_I2C, mem_addr, pdata_index, split_data_nb);
 800a7fc:	68fd      	ldr	r5, [r7, #12]
 800a7fe:	0023      	movs	r3, r4
 800a800:	9a01      	ldr	r2, [sp, #4]
 800a802:	9902      	ldr	r1, [sp, #8]
 800a804:	20a6      	movs	r0, #166	; 0xa6
 800a806:	47a8      	blx	r5
 800a808:	1e05      	subs	r5, r0, #0

    if( ret == NFCTAG_OK )
 800a80a:	d111      	bne.n	800a830 <ST25DV_WriteData+0x50>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4798      	blx	r3
 800a810:	9003      	str	r0, [sp, #12]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800a812:	2101      	movs	r1, #1
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	20a6      	movs	r0, #166	; 0xa6
 800a818:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800a81a:	697b      	ldr	r3, [r7, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800a81c:	0005      	movs	r5, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800a81e:	4798      	blx	r3
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	1ac0      	subs	r0, r0, r3
 800a824:	2340      	movs	r3, #64	; 0x40
 800a826:	33ff      	adds	r3, #255	; 0xff
 800a828:	4298      	cmp	r0, r3
 800a82a:	d811      	bhi.n	800a850 <ST25DV_WriteData+0x70>
 800a82c:	2d00      	cmp	r5, #0
 800a82e:	d1f0      	bne.n	800a812 <ST25DV_WriteData+0x32>
        ret = NFCTAG_TIMEOUT;
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 800a830:	9b01      	ldr	r3, [sp, #4]
    mem_addr += split_data_nb;
    bytes_to_write -= split_data_nb;
 800a832:	1b36      	subs	r6, r6, r4
    pdata_index += split_data_nb;
 800a834:	191b      	adds	r3, r3, r4
 800a836:	9301      	str	r3, [sp, #4]
    mem_addr += split_data_nb;
 800a838:	9b02      	ldr	r3, [sp, #8]
    bytes_to_write -= split_data_nb;
 800a83a:	b2b6      	uxth	r6, r6
    mem_addr += split_data_nb;
 800a83c:	191b      	adds	r3, r3, r4
 800a83e:	b29b      	uxth	r3, r3
 800a840:	9302      	str	r3, [sp, #8]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800a842:	2e00      	cmp	r6, #0
 800a844:	d001      	beq.n	800a84a <ST25DV_WriteData+0x6a>
 800a846:	2d00      	cmp	r5, #0
 800a848:	d0d0      	beq.n	800a7ec <ST25DV_WriteData+0xc>
  
  return ret;
}
 800a84a:	0028      	movs	r0, r5
 800a84c:	b005      	add	sp, #20
 800a84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( pollstatus != NFCTAG_OK )
 800a850:	2d00      	cmp	r5, #0
 800a852:	d0ed      	beq.n	800a830 <ST25DV_WriteData+0x50>
        ret = NFCTAG_TIMEOUT;
 800a854:	2503      	movs	r5, #3
 800a856:	426d      	negs	r5, r5
 800a858:	e7ea      	b.n	800a830 <ST25DV_WriteData+0x50>
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	08017bc8 	.word	0x08017bc8

0800a860 <ST25DV_ReadID>:
{
 800a860:	b510      	push	{r4, lr}
  return ST25DV_GetICREF(&(pObj->Ctx), pICRef);
 800a862:	3018      	adds	r0, #24
 800a864:	f000 f98e 	bl	800ab84 <ST25DV_GetICREF>
}
 800a868:	bd10      	pop	{r4, pc}

0800a86a <ST25DV_Init>:
  if (pObj->IsInitialized == 0U)
 800a86a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800a86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a86e:	0004      	movs	r4, r0
  if (pObj->IsInitialized == 0U)
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10c      	bne.n	800a88e <ST25DV_Init+0x24>
    ST25DV_ReadID(pObj,&nfctag_id);
 800a874:	466b      	mov	r3, sp
 800a876:	1ddd      	adds	r5, r3, #7
 800a878:	0029      	movs	r1, r5
 800a87a:	f7ff fff1 	bl	800a860 <ST25DV_ReadID>
    if( (nfctag_id != I_AM_ST25DV04) && (nfctag_id != I_AM_ST25DV64) )
 800a87e:	2202      	movs	r2, #2
 800a880:	782b      	ldrb	r3, [r5, #0]
 800a882:	4393      	bics	r3, r2
 800a884:	2b24      	cmp	r3, #36	; 0x24
 800a886:	d002      	beq.n	800a88e <ST25DV_Init+0x24>
      return NFCTAG_ERROR;
 800a888:	2001      	movs	r0, #1
 800a88a:	4240      	negs	r0, r0
}
 800a88c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  pObj->IsInitialized = 1U;
 800a88e:	2301      	movs	r3, #1
  return NFCTAG_OK;
 800a890:	2000      	movs	r0, #0
  pObj->IsInitialized = 1U;
 800a892:	6263      	str	r3, [r4, #36]	; 0x24
  return NFCTAG_OK;
 800a894:	e7fa      	b.n	800a88c <ST25DV_Init+0x22>

0800a896 <ST25DV_GetGPOStatus>:
{
 800a896:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800a898:	466b      	mov	r3, sp
 800a89a:	1ddc      	adds	r4, r3, #7
{
 800a89c:	000d      	movs	r5, r1
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800a89e:	3018      	adds	r0, #24
 800a8a0:	0021      	movs	r1, r4
 800a8a2:	f000 f9f9 	bl	800ac98 <ST25DV_GetGPO_ALL>
  if( status != NFCTAG_OK )
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d101      	bne.n	800a8ae <ST25DV_GetGPOStatus+0x18>
  *pGPOStatus = (uint16_t)reg_value;
 800a8aa:	7823      	ldrb	r3, [r4, #0]
 800a8ac:	802b      	strh	r3, [r5, #0]
}
 800a8ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800a8b0 <ST25DV_ConfigureGPO>:
{
 800a8b0:	b507      	push	{r0, r1, r2, lr}
 800a8b2:	466b      	mov	r3, sp
 800a8b4:	80d9      	strh	r1, [r3, #6]
 800a8b6:	3306      	adds	r3, #6
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 800a8b8:	3018      	adds	r0, #24
 800a8ba:	0019      	movs	r1, r3
 800a8bc:	f000 f9f6 	bl	800acac <ST25DV_SetGPO_ALL>
}
 800a8c0:	bd0e      	pop	{r1, r2, r3, pc}

0800a8c2 <ReadRegWrap>:
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
}

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	6904      	ldr	r4, [r0, #16]
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800a8c6:	0488      	lsls	r0, r1, #18
 800a8c8:	d502      	bpl.n	800a8d0 <ReadRegWrap+0xe>
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800a8ca:	20a6      	movs	r0, #166	; 0xa6
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800a8cc:	47a0      	blx	r4
  }
}
 800a8ce:	bd10      	pop	{r4, pc}
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800a8d0:	20ae      	movs	r0, #174	; 0xae
 800a8d2:	e7fb      	b.n	800a8cc <ReadRegWrap+0xa>

0800a8d4 <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	0005      	movs	r5, r0
 800a8d8:	68c4      	ldr	r4, [r0, #12]
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800a8da:	0488      	lsls	r0, r1, #18
 800a8dc:	d504      	bpl.n	800a8e8 <WriteRegWrap+0x14>
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 800a8de:	20a6      	movs	r0, #166	; 0xa6
 800a8e0:	47a0      	blx	r4
 800a8e2:	0004      	movs	r4, r0
      ret = NFCTAG_TIMEOUT;
    }
  }

  return ret;
}
 800a8e4:	0020      	movs	r0, r4
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800a8e8:	20ae      	movs	r0, #174	; 0xae
 800a8ea:	47a0      	blx	r4
 800a8ec:	1e04      	subs	r4, r0, #0
  if( ret == NFCTAG_OK )
 800a8ee:	d1f9      	bne.n	800a8e4 <WriteRegWrap+0x10>
    int32_t tickstart = pObj->IO.GetTick();
 800a8f0:	696b      	ldr	r3, [r5, #20]
 800a8f2:	4798      	blx	r3
 800a8f4:	0006      	movs	r6, r0
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	68ab      	ldr	r3, [r5, #8]
 800a8fa:	20ae      	movs	r0, #174	; 0xae
 800a8fc:	4798      	blx	r3
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800a8fe:	696b      	ldr	r3, [r5, #20]
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 800a900:	0004      	movs	r4, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800a902:	4798      	blx	r3
 800a904:	2340      	movs	r3, #64	; 0x40
 800a906:	33ff      	adds	r3, #255	; 0xff
 800a908:	1b80      	subs	r0, r0, r6
 800a90a:	4298      	cmp	r0, r3
 800a90c:	d802      	bhi.n	800a914 <WriteRegWrap+0x40>
 800a90e:	2c00      	cmp	r4, #0
 800a910:	d1f1      	bne.n	800a8f6 <WriteRegWrap+0x22>
 800a912:	e7e7      	b.n	800a8e4 <WriteRegWrap+0x10>
    if( pollstatus != NFCTAG_OK )
 800a914:	2c00      	cmp	r4, #0
 800a916:	d0e5      	beq.n	800a8e4 <WriteRegWrap+0x10>
      ret = NFCTAG_TIMEOUT;
 800a918:	2403      	movs	r4, #3
 800a91a:	4264      	negs	r4, r4
 800a91c:	e7e2      	b.n	800a8e4 <WriteRegWrap+0x10>
	...

0800a920 <ST25DV_RegisterBusIO>:
{
 800a920:	b510      	push	{r4, lr}
  if (pObj == NULL)
 800a922:	2800      	cmp	r0, #0
 800a924:	d102      	bne.n	800a92c <ST25DV_RegisterBusIO+0xc>
    ret = NFCTAG_ERROR;
 800a926:	2001      	movs	r0, #1
    } else if (pObj->IO.Init() != 0) {
 800a928:	4240      	negs	r0, r0
}
 800a92a:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit      = pIO->DeInit;
 800a92c:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init        = pIO->Init;
 800a92e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 800a930:	6042      	str	r2, [r0, #4]
    pObj->IO.Write       = pIO->Write;
 800a932:	68ca      	ldr	r2, [r1, #12]
    pObj->IO.Init        = pIO->Init;
 800a934:	6003      	str	r3, [r0, #0]
    pObj->IO.Write       = pIO->Write;
 800a936:	60c2      	str	r2, [r0, #12]
    pObj->IO.Read        = pIO->Read;
 800a938:	690a      	ldr	r2, [r1, #16]
 800a93a:	6102      	str	r2, [r0, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 800a93c:	688a      	ldr	r2, [r1, #8]
 800a93e:	6082      	str	r2, [r0, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 800a940:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800a942:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick     = pIO->GetTick;
 800a944:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a946:	4a05      	ldr	r2, [pc, #20]	; (800a95c <ST25DV_RegisterBusIO+0x3c>)
 800a948:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a94a:	4a05      	ldr	r2, [pc, #20]	; (800a960 <ST25DV_RegisterBusIO+0x40>)
 800a94c:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init == NULL)
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0e9      	beq.n	800a926 <ST25DV_RegisterBusIO+0x6>
    } else if (pObj->IO.Init() != 0) {
 800a952:	4798      	blx	r3
 800a954:	1e43      	subs	r3, r0, #1
 800a956:	4198      	sbcs	r0, r3
 800a958:	e7e6      	b.n	800a928 <ST25DV_RegisterBusIO+0x8>
 800a95a:	46c0      	nop			; (mov r8, r8)
 800a95c:	0800a8c3 	.word	0x0800a8c3
 800a960:	0800a8d5 	.word	0x0800a8d5

0800a964 <ST25DV_WriteRegister>:
{ 
 800a964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a966:	0007      	movs	r7, r0
 800a968:	0015      	movs	r5, r2
 800a96a:	001e      	movs	r6, r3
 800a96c:	b085      	sub	sp, #20
 800a96e:	9101      	str	r1, [sp, #4]
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800a970:	2280      	movs	r2, #128	; 0x80
 800a972:	2300      	movs	r3, #0
 800a974:	0052      	lsls	r2, r2, #1
 800a976:	4296      	cmp	r6, r2
 800a978:	d800      	bhi.n	800a97c <ST25DV_WriteRegister+0x18>
 800a97a:	0033      	movs	r3, r6
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	9203      	str	r2, [sp, #12]
 800a980:	22ff      	movs	r2, #255	; 0xff
 800a982:	401a      	ands	r2, r3
 800a984:	9200      	str	r2, [sp, #0]
    ret = pObj->IO.Write( ST25DV_ADDR_SYST_I2C, mem_addr, pdata_index,  split_data_nb);
 800a986:	0013      	movs	r3, r2
 800a988:	68fc      	ldr	r4, [r7, #12]
 800a98a:	9a01      	ldr	r2, [sp, #4]
 800a98c:	0029      	movs	r1, r5
 800a98e:	20ae      	movs	r0, #174	; 0xae
 800a990:	47a0      	blx	r4
 800a992:	1e04      	subs	r4, r0, #0
    if( ret == NFCTAG_OK )
 800a994:	d111      	bne.n	800a9ba <ST25DV_WriteRegister+0x56>
      uint32_t tickstart = pObj->IO.GetTick();
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	4798      	blx	r3
 800a99a:	9002      	str	r0, [sp, #8]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800a99c:	2101      	movs	r1, #1
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	20a6      	movs	r0, #166	; 0xa6
 800a9a2:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800a9a4:	697b      	ldr	r3, [r7, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800a9a6:	0004      	movs	r4, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 800a9a8:	4798      	blx	r3
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	1ac0      	subs	r0, r0, r3
 800a9ae:	2340      	movs	r3, #64	; 0x40
 800a9b0:	33ff      	adds	r3, #255	; 0xff
 800a9b2:	4298      	cmp	r0, r3
 800a9b4:	d812      	bhi.n	800a9dc <ST25DV_WriteRegister+0x78>
 800a9b6:	2c00      	cmp	r4, #0
 800a9b8:	d1f0      	bne.n	800a99c <ST25DV_WriteRegister+0x38>
    pdata_index += split_data_nb;
 800a9ba:	9a03      	ldr	r2, [sp, #12]
 800a9bc:	9b01      	ldr	r3, [sp, #4]
 800a9be:	4694      	mov	ip, r2
 800a9c0:	4463      	add	r3, ip
 800a9c2:	9301      	str	r3, [sp, #4]
    mem_addr += split_data_nb;
 800a9c4:	9b00      	ldr	r3, [sp, #0]
    bytes_to_write -= split_data_nb;
 800a9c6:	1af6      	subs	r6, r6, r3
    mem_addr += split_data_nb;
 800a9c8:	18ed      	adds	r5, r5, r3
    bytes_to_write -= split_data_nb;
 800a9ca:	b2b6      	uxth	r6, r6
    mem_addr += split_data_nb;
 800a9cc:	b2ad      	uxth	r5, r5
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	d001      	beq.n	800a9d6 <ST25DV_WriteRegister+0x72>
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	d0cc      	beq.n	800a970 <ST25DV_WriteRegister+0xc>
}
 800a9d6:	0020      	movs	r0, r4
 800a9d8:	b005      	add	sp, #20
 800a9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( pollstatus != NFCTAG_OK )
 800a9dc:	2c00      	cmp	r4, #0
 800a9de:	d0ec      	beq.n	800a9ba <ST25DV_WriteRegister+0x56>
        ret = NFCTAG_TIMEOUT;
 800a9e0:	2403      	movs	r4, #3
 800a9e2:	4264      	negs	r4, r4
 800a9e4:	e7e9      	b.n	800a9ba <ST25DV_WriteRegister+0x56>

0800a9e6 <ST25DV_PresentI2CPassword>:
{
 800a9e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e8:	b089      	sub	sp, #36	; 0x24
  uint8_t ai2c_message[17] = {0};
 800a9ea:	ac03      	add	r4, sp, #12
{
 800a9ec:	000f      	movs	r7, r1
 800a9ee:	0016      	movs	r6, r2
  uint8_t ai2c_message[17] = {0};
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2211      	movs	r2, #17
{
 800a9f4:	0005      	movs	r5, r0
  uint8_t ai2c_message[17] = {0};
 800a9f6:	0020      	movs	r0, r4
 800a9f8:	f00a fe70 	bl	80156dc <memset>
  ai2c_message[8] = 0x09;
 800a9fc:	2309      	movs	r3, #9
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800a9fe:	0039      	movs	r1, r7
  ai2c_message[8] = 0x09;
 800aa00:	7223      	strb	r3, [r4, #8]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800aa02:	0032      	movs	r2, r6
 800aa04:	0023      	movs	r3, r4
 800aa06:	2018      	movs	r0, #24
 800aa08:	0016      	movs	r6, r2
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800aa0a:	000f      	movs	r7, r1
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800aa0c:	40c6      	lsrs	r6, r0
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800aa0e:	40c7      	lsrs	r7, r0
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800aa10:	b2f6      	uxtb	r6, r6
 800aa12:	3808      	subs	r0, #8
 800aa14:	711e      	strb	r6, [r3, #4]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 800aa16:	735e      	strb	r6, [r3, #13]
  for( i = 0; i < 4; i++ )
 800aa18:	0006      	movs	r6, r0
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800aa1a:	b2ff      	uxtb	r7, r7
 800aa1c:	701f      	strb	r7, [r3, #0]
    ai2c_message[i + 9] = ai2c_message[i];
 800aa1e:	725f      	strb	r7, [r3, #9]
 800aa20:	3301      	adds	r3, #1
  for( i = 0; i < 4; i++ )
 800aa22:	3608      	adds	r6, #8
 800aa24:	d1f0      	bne.n	800aa08 <ST25DV_PresentI2CPassword+0x22>
  return ST25DV_WriteRegister(pObj, ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 800aa26:	2290      	movs	r2, #144	; 0x90
 800aa28:	2311      	movs	r3, #17
 800aa2a:	0112      	lsls	r2, r2, #4
 800aa2c:	0021      	movs	r1, r4
 800aa2e:	0028      	movs	r0, r5
 800aa30:	f7ff ff98 	bl	800a964 <ST25DV_WriteRegister>
}
 800aa34:	b009      	add	sp, #36	; 0x24
 800aa36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa38 <ST25DV_ReadEHMode>:
{
 800aa38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetEH_MODE( &(pObj->Ctx), &reg_value);
 800aa3a:	466b      	mov	r3, sp
 800aa3c:	1ddd      	adds	r5, r3, #7
{
 800aa3e:	000c      	movs	r4, r1
  status = ST25DV_GetEH_MODE( &(pObj->Ctx), &reg_value);
 800aa40:	3018      	adds	r0, #24
 800aa42:	0029      	movs	r1, r5
 800aa44:	f000 f93c 	bl	800acc0 <ST25DV_GetEH_MODE>
  if( status != NFCTAG_OK )
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d104      	bne.n	800aa56 <ST25DV_ReadEHMode+0x1e>
  if( reg_value )
 800aa4c:	782b      	ldrb	r3, [r5, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <ST25DV_ReadEHMode+0x20>
    *pEH_mode = ST25DV_EH_ON_DEMAND;
 800aa52:	2301      	movs	r3, #1
 800aa54:	7023      	strb	r3, [r4, #0]
}
 800aa56:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pEH_mode = ST25DV_EH_ACTIVE_AFTER_BOOT;
 800aa58:	7020      	strb	r0, [r4, #0]
 800aa5a:	e7fc      	b.n	800aa56 <ST25DV_ReadEHMode+0x1e>

0800aa5c <ST25DV_WriteEHMode>:
{
 800aa5c:	b507      	push	{r0, r1, r2, lr}
  reg_value = (uint8_t)EH_mode;
 800aa5e:	466b      	mov	r3, sp
 800aa60:	71d9      	strb	r1, [r3, #7]
 800aa62:	3307      	adds	r3, #7
  return ST25DV_SetEH_MODE(&(pObj->Ctx), &reg_value);
 800aa64:	3018      	adds	r0, #24
 800aa66:	0019      	movs	r1, r3
 800aa68:	f000 f93b 	bl	800ace2 <ST25DV_SetEH_MODE>
}
 800aa6c:	bd0e      	pop	{r1, r2, r3, pc}

0800aa6e <ST25DV_ReadRFMngt>:
{
 800aa6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value = 0;
 800aa70:	466b      	mov	r3, sp
 800aa72:	1ddd      	adds	r5, r3, #7
 800aa74:	2300      	movs	r3, #0
{
 800aa76:	000c      	movs	r4, r1
  status = ST25DV_GetRF_MNGT_ALL(&(pObj->Ctx), &reg_value);
 800aa78:	3018      	adds	r0, #24
 800aa7a:	0029      	movs	r1, r5
  uint8_t reg_value = 0;
 800aa7c:	702b      	strb	r3, [r5, #0]
  status = ST25DV_GetRF_MNGT_ALL(&(pObj->Ctx), &reg_value);
 800aa7e:	f000 f96f 	bl	800ad60 <ST25DV_GetRF_MNGT_ALL>
  if( status == NFCTAG_OK )
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d109      	bne.n	800aa9a <ST25DV_ReadRFMngt+0x2c>
    if( (reg_value & ST25DV_RF_MNGT_RFDIS_MASK) == ST25DV_RF_MNGT_RFDIS_MASK )
 800aa86:	2201      	movs	r2, #1
 800aa88:	782b      	ldrb	r3, [r5, #0]
 800aa8a:	4213      	tst	r3, r2
 800aa8c:	d006      	beq.n	800aa9c <ST25DV_ReadRFMngt+0x2e>
      pRF_Mngt->RfDisable = ST25DV_ENABLE;
 800aa8e:	7022      	strb	r2, [r4, #0]
    if( (reg_value & ST25DV_RF_MNGT_RFSLEEP_MASK) == ST25DV_RF_MNGT_RFSLEEP_MASK )
 800aa90:	2202      	movs	r2, #2
 800aa92:	4013      	ands	r3, r2
 800aa94:	d000      	beq.n	800aa98 <ST25DV_ReadRFMngt+0x2a>
      pRF_Mngt->RfSleep = ST25DV_ENABLE;
 800aa96:	2301      	movs	r3, #1
      pRF_Mngt->RfSleep = ST25DV_DISABLE;
 800aa98:	7063      	strb	r3, [r4, #1]
}
 800aa9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
      pRF_Mngt->RfDisable = ST25DV_DISABLE;
 800aa9c:	7020      	strb	r0, [r4, #0]
 800aa9e:	e7f7      	b.n	800aa90 <ST25DV_ReadRFMngt+0x22>

0800aaa0 <ST25DV_WriteRFMngt>:
{
 800aaa0:	b507      	push	{r0, r1, r2, lr}
 800aaa2:	466b      	mov	r3, sp
 800aaa4:	71d9      	strb	r1, [r3, #7]
 800aaa6:	3307      	adds	r3, #7
  return ST25DV_SetRF_MNGT_ALL(&(pObj->Ctx), &Rfmngt);
 800aaa8:	3018      	adds	r0, #24
 800aaaa:	0019      	movs	r1, r3
 800aaac:	f000 f969 	bl	800ad82 <ST25DV_SetRF_MNGT_ALL>
}
 800aab0:	bd0e      	pop	{r1, r2, r3, pc}

0800aab2 <ST25DV_ReadMBMode>:
{
 800aab2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800aab4:	466b      	mov	r3, sp
 800aab6:	1ddd      	adds	r5, r3, #7
{
 800aab8:	000c      	movs	r4, r1
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800aaba:	3018      	adds	r0, #24
 800aabc:	0029      	movs	r1, r5
 800aabe:	f000 f86b 	bl	800ab98 <ST25DV_GetMB_MODE_RW>
  if( status != NFCTAG_OK )
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d104      	bne.n	800aad0 <ST25DV_ReadMBMode+0x1e>
  if( reg_value  )
 800aac6:	782b      	ldrb	r3, [r5, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <ST25DV_ReadMBMode+0x20>
    *pMB_mode = ST25DV_ENABLE;
 800aacc:	2301      	movs	r3, #1
 800aace:	7023      	strb	r3, [r4, #0]
}
 800aad0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pMB_mode = ST25DV_DISABLE;
 800aad2:	7020      	strb	r0, [r4, #0]
 800aad4:	e7fc      	b.n	800aad0 <ST25DV_ReadMBMode+0x1e>

0800aad6 <ST25DV_WriteMBMode>:
{
 800aad6:	b507      	push	{r0, r1, r2, lr}
  reg_value = (uint8_t)MB_mode;
 800aad8:	466b      	mov	r3, sp
 800aada:	71d9      	strb	r1, [r3, #7]
 800aadc:	3307      	adds	r3, #7
  status = ST25DV_SetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 800aade:	3018      	adds	r0, #24
 800aae0:	0019      	movs	r1, r3
 800aae2:	f000 f86a 	bl	800abba <ST25DV_SetMB_MODE_RW>
}
 800aae6:	bd0e      	pop	{r1, r2, r3, pc}

0800aae8 <ST25DV_ReadMBWDG>:
{
 800aae8:	b510      	push	{r4, lr}
  status = ST25DV_GetMB_WDG_DELAY(&(pObj->Ctx), pWdgDelay);
 800aaea:	3018      	adds	r0, #24
 800aaec:	f000 f8a4 	bl	800ac38 <ST25DV_GetMB_WDG_DELAY>
}
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <ST25DV_WriteMBWDG>:
{
 800aaf2:	b507      	push	{r0, r1, r2, lr}
 800aaf4:	466b      	mov	r3, sp
 800aaf6:	71d9      	strb	r1, [r3, #7]
 800aaf8:	3307      	adds	r3, #7
  return ST25DV_SetMB_WDG_DELAY(&(pObj->Ctx), &WdgDelay);
 800aafa:	3018      	adds	r0, #24
 800aafc:	0019      	movs	r1, r3
 800aafe:	f000 f8ac 	bl	800ac5a <ST25DV_SetMB_WDG_DELAY>
}
 800ab02:	bd0e      	pop	{r1, r2, r3, pc}

0800ab04 <ST25DV_ReadI2CSecuritySession_Dyn>:
{
 800ab04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetI2C_SSO_DYN_I2CSSO(&(pObj->Ctx), &reg_value);
 800ab06:	466b      	mov	r3, sp
 800ab08:	1ddd      	adds	r5, r3, #7
{
 800ab0a:	000c      	movs	r4, r1
  status = ST25DV_GetI2C_SSO_DYN_I2CSSO(&(pObj->Ctx), &reg_value);
 800ab0c:	3018      	adds	r0, #24
 800ab0e:	0029      	movs	r1, r5
 800ab10:	f000 f978 	bl	800ae04 <ST25DV_GetI2C_SSO_DYN_I2CSSO>
  if( status != NFCTAG_OK )
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d104      	bne.n	800ab22 <ST25DV_ReadI2CSecuritySession_Dyn+0x1e>
  if( reg_value )
 800ab18:	782b      	ldrb	r3, [r5, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <ST25DV_ReadI2CSecuritySession_Dyn+0x20>
    *pSession = ST25DV_SESSION_OPEN;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	7023      	strb	r3, [r4, #0]
}
 800ab22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    *pSession = ST25DV_SESSION_CLOSED;
 800ab24:	7020      	strb	r0, [r4, #0]
 800ab26:	e7fc      	b.n	800ab22 <ST25DV_ReadI2CSecuritySession_Dyn+0x1e>

0800ab28 <ST25DV_ResetEHENMode_Dyn>:
{
 800ab28:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 800ab2a:	466b      	mov	r3, sp
 800ab2c:	1dd9      	adds	r1, r3, #7
 800ab2e:	2300      	movs	r3, #0
  return ST25DV_SetEH_CTRL_DYN_EH_EN(&(pObj->Ctx), &reg_value);
 800ab30:	3018      	adds	r0, #24
  uint8_t reg_value = 0;
 800ab32:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetEH_CTRL_DYN_EH_EN(&(pObj->Ctx), &reg_value);
 800ab34:	f000 f8f4 	bl	800ad20 <ST25DV_SetEH_CTRL_DYN_EH_EN>
}
 800ab38:	bd0e      	pop	{r1, r2, r3, pc}

0800ab3a <ST25DV_WriteRFMngt_Dyn>:
{
 800ab3a:	b507      	push	{r0, r1, r2, lr}
 800ab3c:	466b      	mov	r3, sp
 800ab3e:	71d9      	strb	r1, [r3, #7]
 800ab40:	3307      	adds	r3, #7
  return ST25DV_SetRF_MNGT_DYN_ALL(&(pObj->Ctx), &RF_Mngt);
 800ab42:	3018      	adds	r0, #24
 800ab44:	0019      	movs	r1, r3
 800ab46:	f000 f93b 	bl	800adc0 <ST25DV_SetRF_MNGT_DYN_ALL>
}
 800ab4a:	bd0e      	pop	{r1, r2, r3, pc}

0800ab4c <ST25DV_SetMBEN_Dyn>:
{
 800ab4c:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 1;
 800ab4e:	466b      	mov	r3, sp
 800ab50:	1dd9      	adds	r1, r3, #7
 800ab52:	2301      	movs	r3, #1
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800ab54:	3018      	adds	r0, #24
  uint8_t reg_value = 1;
 800ab56:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800ab58:	f000 f84e 	bl	800abf8 <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800ab5c:	bd0e      	pop	{r1, r2, r3, pc}

0800ab5e <ST25DV_ResetMBEN_Dyn>:
{
 800ab5e:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 800ab60:	466b      	mov	r3, sp
 800ab62:	1dd9      	adds	r1, r3, #7
 800ab64:	2300      	movs	r3, #0
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800ab66:	3018      	adds	r0, #24
  uint8_t reg_value = 0;
 800ab68:	700b      	strb	r3, [r1, #0]
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 800ab6a:	f000 f845 	bl	800abf8 <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800ab6e:	bd0e      	pop	{r1, r2, r3, pc}

0800ab70 <ST25DV_ReadReg>:
#include "st25dv_reg.h"

int32_t ST25DV_ReadReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t* Data, uint16_t len)
{
 800ab70:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800ab72:	6844      	ldr	r4, [r0, #4]
 800ab74:	6880      	ldr	r0, [r0, #8]
 800ab76:	47a0      	blx	r4
}
 800ab78:	bd10      	pop	{r4, pc}

0800ab7a <ST25DV_WriteReg>:

int32_t ST25DV_WriteReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t const *Data, uint16_t len)
{
 800ab7a:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800ab7c:	6804      	ldr	r4, [r0, #0]
 800ab7e:	6880      	ldr	r0, [r0, #8]
 800ab80:	47a0      	blx	r4
}
 800ab82:	bd10      	pop	{r4, pc}

0800ab84 <ST25DV_GetICREF>:


/**** Copy generated code hereafter ****/
int32_t ST25DV_GetICREF (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800ab84:	b510      	push	{r4, lr}
 800ab86:	000a      	movs	r2, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 800ab88:	2301      	movs	r3, #1
 800ab8a:	2117      	movs	r1, #23
 800ab8c:	f7ff fff0 	bl	800ab70 <ST25DV_ReadReg>
 800ab90:	1e43      	subs	r3, r0, #1
 800ab92:	4198      	sbcs	r0, r3
 800ab94:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800ab96:	bd10      	pop	{r4, pc}

0800ab98 <ST25DV_GetMB_MODE_RW>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_MODE_RW (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800ab98:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 800ab9a:	000a      	movs	r2, r1
{
 800ab9c:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 800ab9e:	2301      	movs	r3, #1
 800aba0:	210d      	movs	r1, #13
 800aba2:	f7ff ffe5 	bl	800ab70 <ST25DV_ReadReg>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d104      	bne.n	800abb4 <ST25DV_GetMB_MODE_RW+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_MB_MODE_RW_MASK);
 800abaa:	2201      	movs	r2, #1
 800abac:	7823      	ldrb	r3, [r4, #0]
 800abae:	4013      	ands	r3, r2
 800abb0:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_MB_MODE_RW_SHIFT);
  return NFCTAG_OK;
}
 800abb2:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800abb4:	2001      	movs	r0, #1
 800abb6:	4240      	negs	r0, r0
 800abb8:	e7fb      	b.n	800abb2 <ST25DV_GetMB_MODE_RW+0x1a>

0800abba <ST25DV_SetMB_MODE_RW>:

int32_t ST25DV_SetMB_MODE_RW (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800abba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800abbc:	466b      	mov	r3, sp
 800abbe:	1ddc      	adds	r4, r3, #7
{
 800abc0:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800abc2:	2301      	movs	r3, #1
 800abc4:	0022      	movs	r2, r4
 800abc6:	210d      	movs	r1, #13
{
 800abc8:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800abca:	f7ff ffd1 	bl	800ab70 <ST25DV_ReadReg>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d10f      	bne.n	800abf2 <ST25DV_SetMB_MODE_RW+0x38>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800abd2:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800abd4:	7821      	ldrb	r1, [r4, #0]
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800abd6:	7832      	ldrb	r2, [r6, #0]
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 800abd8:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 800abda:	401a      	ands	r2, r3
 800abdc:	430a      	orrs	r2, r1
 800abde:	7022      	strb	r2, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 800abe0:	210d      	movs	r1, #13
 800abe2:	0022      	movs	r2, r4
 800abe4:	0028      	movs	r0, r5
 800abe6:	f7ff ffc8 	bl	800ab7a <ST25DV_WriteReg>
 800abea:	1e43      	subs	r3, r0, #1
 800abec:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800abee:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800abf0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800abf2:	2001      	movs	r0, #1
 800abf4:	e7fb      	b.n	800abee <ST25DV_SetMB_MODE_RW+0x34>
	...

0800abf8 <ST25DV_SetMB_CTRL_DYN_MBEN>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_MBEN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_CTRL_DYN_MBEN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800abf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800abfa:	466b      	mov	r3, sp
 800abfc:	1ddc      	adds	r4, r3, #7
{
 800abfe:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800ac00:	2301      	movs	r3, #1
 800ac02:	0022      	movs	r2, r4
 800ac04:	490b      	ldr	r1, [pc, #44]	; (800ac34 <ST25DV_SetMB_CTRL_DYN_MBEN+0x3c>)
{
 800ac06:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800ac08:	f7ff ffb2 	bl	800ab70 <ST25DV_ReadReg>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d10f      	bne.n	800ac30 <ST25DV_SetMB_CTRL_DYN_MBEN+0x38>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800ac10:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800ac12:	7821      	ldrb	r1, [r4, #0]
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800ac14:	7832      	ldrb	r2, [r6, #0]
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800ac16:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800ac18:	401a      	ands	r2, r3
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	7022      	strb	r2, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800ac1e:	4905      	ldr	r1, [pc, #20]	; (800ac34 <ST25DV_SetMB_CTRL_DYN_MBEN+0x3c>)
 800ac20:	0022      	movs	r2, r4
 800ac22:	0028      	movs	r0, r5
 800ac24:	f7ff ffa9 	bl	800ab7a <ST25DV_WriteReg>
 800ac28:	1e43      	subs	r3, r0, #1
 800ac2a:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800ac2c:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800ac2e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800ac30:	2001      	movs	r0, #1
 800ac32:	e7fb      	b.n	800ac2c <ST25DV_SetMB_CTRL_DYN_MBEN+0x34>
 800ac34:	00002006 	.word	0x00002006

0800ac38 <ST25DV_GetMB_WDG_DELAY>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800ac38:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), (uint8_t *)value, 1))
 800ac3a:	000a      	movs	r2, r1
{
 800ac3c:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), (uint8_t *)value, 1))
 800ac3e:	2301      	movs	r3, #1
 800ac40:	210e      	movs	r1, #14
 800ac42:	f7ff ff95 	bl	800ab70 <ST25DV_ReadReg>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d104      	bne.n	800ac54 <ST25DV_GetMB_WDG_DELAY+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_MB_WDG_DELAY_MASK);
 800ac4a:	2207      	movs	r2, #7
 800ac4c:	7823      	ldrb	r3, [r4, #0]
 800ac4e:	4013      	ands	r3, r2
 800ac50:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_MB_WDG_DELAY_SHIFT);
  return NFCTAG_OK;
}
 800ac52:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800ac54:	2001      	movs	r0, #1
 800ac56:	4240      	negs	r0, r0
 800ac58:	e7fb      	b.n	800ac52 <ST25DV_GetMB_WDG_DELAY+0x1a>

0800ac5a <ST25DV_SetMB_WDG_DELAY>:

int32_t ST25DV_SetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800ac5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800ac5c:	466b      	mov	r3, sp
 800ac5e:	1ddc      	adds	r4, r3, #7
{
 800ac60:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800ac62:	2301      	movs	r3, #1
 800ac64:	0022      	movs	r2, r4
 800ac66:	210e      	movs	r1, #14
{
 800ac68:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800ac6a:	f7ff ff81 	bl	800ab70 <ST25DV_ReadReg>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d110      	bne.n	800ac94 <ST25DV_SetMB_WDG_DELAY+0x3a>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800ac72:	2107      	movs	r1, #7
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800ac74:	7822      	ldrb	r2, [r4, #0]
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800ac76:	7833      	ldrb	r3, [r6, #0]
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 800ac78:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800ac7a:	400b      	ands	r3, r1
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	7023      	strb	r3, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800ac80:	0022      	movs	r2, r4
 800ac82:	2301      	movs	r3, #1
 800ac84:	1849      	adds	r1, r1, r1
 800ac86:	0028      	movs	r0, r5
 800ac88:	f7ff ff77 	bl	800ab7a <ST25DV_WriteReg>
 800ac8c:	1e43      	subs	r3, r0, #1
 800ac8e:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800ac90:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800ac92:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800ac94:	2001      	movs	r0, #1
 800ac96:	e7fb      	b.n	800ac90 <ST25DV_SetMB_WDG_DELAY+0x36>

0800ac98 <ST25DV_GetGPO_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	000a      	movs	r2, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f7ff ff66 	bl	800ab70 <ST25DV_ReadReg>
 800aca4:	1e43      	subs	r3, r0, #1
 800aca6:	4198      	sbcs	r0, r3
 800aca8:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800acaa:	bd10      	pop	{r4, pc}

0800acac <ST25DV_SetGPO_ALL>:

int32_t ST25DV_SetGPO_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800acac:	b510      	push	{r4, lr}
 800acae:	000a      	movs	r2, r1
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 800acb0:	2301      	movs	r3, #1
 800acb2:	2100      	movs	r1, #0
 800acb4:	f7ff ff61 	bl	800ab7a <ST25DV_WriteReg>
 800acb8:	1e43      	subs	r3, r0, #1
 800acba:	4198      	sbcs	r0, r3
 800acbc:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <ST25DV_GetEH_MODE>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetEH_MODE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800acc0:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800acc2:	000a      	movs	r2, r1
{
 800acc4:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800acc6:	2301      	movs	r3, #1
 800acc8:	2102      	movs	r1, #2
 800acca:	f7ff ff51 	bl	800ab70 <ST25DV_ReadReg>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d104      	bne.n	800acdc <ST25DV_GetEH_MODE+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_EH_MODE_MASK);
 800acd2:	2201      	movs	r2, #1
 800acd4:	7823      	ldrb	r3, [r4, #0]
 800acd6:	4013      	ands	r3, r2
 800acd8:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_EH_MODE_SHIFT);
  return NFCTAG_OK;
}
 800acda:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800acdc:	2001      	movs	r0, #1
 800acde:	4240      	negs	r0, r0
 800ace0:	e7fb      	b.n	800acda <ST25DV_GetEH_MODE+0x1a>

0800ace2 <ST25DV_SetEH_MODE>:

int32_t ST25DV_SetEH_MODE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800ace2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800ace4:	466b      	mov	r3, sp
 800ace6:	1ddc      	adds	r4, r3, #7
{
 800ace8:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800acea:	2301      	movs	r3, #1
 800acec:	0022      	movs	r2, r4
 800acee:	2102      	movs	r1, #2
{
 800acf0:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800acf2:	f7ff ff3d 	bl	800ab70 <ST25DV_ReadReg>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d10f      	bne.n	800ad1a <ST25DV_SetEH_MODE+0x38>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800acfa:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800acfc:	7821      	ldrb	r1, [r4, #0]
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800acfe:	7832      	ldrb	r2, [r6, #0]
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800ad00:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800ad02:	401a      	ands	r2, r3
 800ad04:	430a      	orrs	r2, r1
 800ad06:	7022      	strb	r2, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 800ad08:	2102      	movs	r1, #2
 800ad0a:	0022      	movs	r2, r4
 800ad0c:	0028      	movs	r0, r5
 800ad0e:	f7ff ff34 	bl	800ab7a <ST25DV_WriteReg>
 800ad12:	1e43      	subs	r3, r0, #1
 800ad14:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800ad16:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800ad18:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	e7fb      	b.n	800ad16 <ST25DV_SetEH_MODE+0x34>
	...

0800ad20 <ST25DV_SetEH_CTRL_DYN_EH_EN>:
  *value = *value >> (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetEH_CTRL_DYN_EH_EN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800ad20:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800ad22:	466b      	mov	r3, sp
 800ad24:	1ddc      	adds	r4, r3, #7
{
 800ad26:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800ad28:	2301      	movs	r3, #1
 800ad2a:	0022      	movs	r2, r4
 800ad2c:	490b      	ldr	r1, [pc, #44]	; (800ad5c <ST25DV_SetEH_CTRL_DYN_EH_EN+0x3c>)
{
 800ad2e:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800ad30:	f7ff ff1e 	bl	800ab70 <ST25DV_ReadReg>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d10f      	bne.n	800ad58 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x38>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800ad38:	2301      	movs	r3, #1
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800ad3a:	7821      	ldrb	r1, [r4, #0]
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800ad3c:	7832      	ldrb	r2, [r6, #0]
                (reg_value & ~(ST25DV_EH_CTRL_DYN_EH_EN_MASK));
 800ad3e:	4399      	bics	r1, r3
  reg_value = ( (*value << (ST25DV_EH_CTRL_DYN_EH_EN_SHIFT)) & (ST25DV_EH_CTRL_DYN_EH_EN_MASK)) |
 800ad40:	401a      	ands	r2, r3
 800ad42:	430a      	orrs	r2, r1
 800ad44:	7022      	strb	r2, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_CTRL_DYN_REG), &reg_value, 1))
 800ad46:	4905      	ldr	r1, [pc, #20]	; (800ad5c <ST25DV_SetEH_CTRL_DYN_EH_EN+0x3c>)
 800ad48:	0022      	movs	r2, r4
 800ad4a:	0028      	movs	r0, r5
 800ad4c:	f7ff ff15 	bl	800ab7a <ST25DV_WriteReg>
 800ad50:	1e43      	subs	r3, r0, #1
 800ad52:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800ad54:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800ad56:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800ad58:	2001      	movs	r0, #1
 800ad5a:	e7fb      	b.n	800ad54 <ST25DV_SetEH_CTRL_DYN_EH_EN+0x34>
 800ad5c:	00002002 	.word	0x00002002

0800ad60 <ST25DV_GetRF_MNGT_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetRF_MNGT_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800ad60:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), (uint8_t *)value, 1))
 800ad62:	000a      	movs	r2, r1
{
 800ad64:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), (uint8_t *)value, 1))
 800ad66:	2301      	movs	r3, #1
 800ad68:	2103      	movs	r1, #3
 800ad6a:	f7ff ff01 	bl	800ab70 <ST25DV_ReadReg>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d104      	bne.n	800ad7c <ST25DV_GetRF_MNGT_ALL+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_RF_MNGT_ALL_MASK);
 800ad72:	2203      	movs	r2, #3
 800ad74:	7823      	ldrb	r3, [r4, #0]
 800ad76:	4013      	ands	r3, r2
 800ad78:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_RF_MNGT_ALL_SHIFT);
  return NFCTAG_OK;
}
 800ad7a:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	4240      	negs	r0, r0
 800ad80:	e7fb      	b.n	800ad7a <ST25DV_GetRF_MNGT_ALL+0x1a>

0800ad82 <ST25DV_SetRF_MNGT_ALL>:

int32_t ST25DV_SetRF_MNGT_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800ad82:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800ad84:	466b      	mov	r3, sp
 800ad86:	1ddc      	adds	r4, r3, #7
{
 800ad88:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	0022      	movs	r2, r4
 800ad8e:	2103      	movs	r1, #3
{
 800ad90:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800ad92:	f7ff feed 	bl	800ab70 <ST25DV_ReadReg>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d10f      	bne.n	800adba <ST25DV_SetRF_MNGT_ALL+0x38>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800ad9a:	2103      	movs	r1, #3
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800ad9c:	7822      	ldrb	r2, [r4, #0]
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800ad9e:	7833      	ldrb	r3, [r6, #0]
                (reg_value & ~(ST25DV_RF_MNGT_ALL_MASK));
 800ada0:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_RF_MNGT_ALL_SHIFT)) & (ST25DV_RF_MNGT_ALL_MASK)) |
 800ada2:	400b      	ands	r3, r1
 800ada4:	4313      	orrs	r3, r2
 800ada6:	7023      	strb	r3, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_REG), &reg_value, 1))
 800ada8:	0022      	movs	r2, r4
 800adaa:	2301      	movs	r3, #1
 800adac:	0028      	movs	r0, r5
 800adae:	f7ff fee4 	bl	800ab7a <ST25DV_WriteReg>
 800adb2:	1e43      	subs	r3, r0, #1
 800adb4:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800adb6:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800adb8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800adba:	2001      	movs	r0, #1
 800adbc:	e7fb      	b.n	800adb6 <ST25DV_SetRF_MNGT_ALL+0x34>
	...

0800adc0 <ST25DV_SetRF_MNGT_DYN_ALL>:
  *value = *value >> (ST25DV_RF_MNGT_DYN_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRF_MNGT_DYN_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800adc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800adc2:	466b      	mov	r3, sp
 800adc4:	1ddc      	adds	r4, r3, #7
{
 800adc6:	000e      	movs	r6, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800adc8:	2301      	movs	r3, #1
 800adca:	0022      	movs	r2, r4
 800adcc:	490c      	ldr	r1, [pc, #48]	; (800ae00 <ST25DV_SetRF_MNGT_DYN_ALL+0x40>)
{
 800adce:	0005      	movs	r5, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800add0:	f7ff fece 	bl	800ab70 <ST25DV_ReadReg>
 800add4:	2800      	cmp	r0, #0
 800add6:	d110      	bne.n	800adfa <ST25DV_SetRF_MNGT_DYN_ALL+0x3a>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800add8:	2103      	movs	r1, #3
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800adda:	7822      	ldrb	r2, [r4, #0]
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800addc:	7833      	ldrb	r3, [r6, #0]
                (reg_value & ~(ST25DV_RF_MNGT_DYN_ALL_MASK));
 800adde:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_ALL_SHIFT)) & (ST25DV_RF_MNGT_DYN_ALL_MASK)) |
 800ade0:	400b      	ands	r3, r1
 800ade2:	4313      	orrs	r3, r2
 800ade4:	7023      	strb	r3, [r4, #0]

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 800ade6:	0022      	movs	r2, r4
 800ade8:	2301      	movs	r3, #1
 800adea:	4905      	ldr	r1, [pc, #20]	; (800ae00 <ST25DV_SetRF_MNGT_DYN_ALL+0x40>)
 800adec:	0028      	movs	r0, r5
 800adee:	f7ff fec4 	bl	800ab7a <ST25DV_WriteReg>
 800adf2:	1e43      	subs	r3, r0, #1
 800adf4:	4198      	sbcs	r0, r3
    return NFCTAG_ERROR;
 800adf6:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800adf8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800adfa:	2001      	movs	r0, #1
 800adfc:	e7fb      	b.n	800adf6 <ST25DV_SetRF_MNGT_DYN_ALL+0x36>
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	00002003 	.word	0x00002003

0800ae04 <ST25DV_GetI2C_SSO_DYN_I2CSSO>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetI2C_SSO_DYN_I2CSSO (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800ae04:	b510      	push	{r4, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_I2C_SSO_DYN_REG), (uint8_t *)value, 1))
 800ae06:	000a      	movs	r2, r1
{
 800ae08:	000c      	movs	r4, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_I2C_SSO_DYN_REG), (uint8_t *)value, 1))
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4906      	ldr	r1, [pc, #24]	; (800ae28 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x24>)
 800ae0e:	f7ff feaf 	bl	800ab70 <ST25DV_ReadReg>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d104      	bne.n	800ae20 <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x1c>
    return NFCTAG_ERROR;
  *value &= (ST25DV_I2C_SSO_DYN_I2CSSO_MASK);
 800ae16:	2201      	movs	r2, #1
 800ae18:	7823      	ldrb	r3, [r4, #0]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_I2C_SSO_DYN_I2CSSO_SHIFT);
  return NFCTAG_OK;
}
 800ae1e:	bd10      	pop	{r4, pc}
    return NFCTAG_ERROR;
 800ae20:	2001      	movs	r0, #1
 800ae22:	4240      	negs	r0, r0
 800ae24:	e7fb      	b.n	800ae1e <ST25DV_GetI2C_SSO_DYN_I2CSSO+0x1a>
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	00002004 	.word	0x00002004

0800ae2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ae30:	20fa      	movs	r0, #250	; 0xfa
 800ae32:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <HAL_InitTick+0x3c>)
 800ae34:	0080      	lsls	r0, r0, #2
 800ae36:	7819      	ldrb	r1, [r3, #0]
 800ae38:	f7fd f98c 	bl	8008154 <__udivsi3>
 800ae3c:	4b0b      	ldr	r3, [pc, #44]	; (800ae6c <HAL_InitTick+0x40>)
 800ae3e:	0001      	movs	r1, r0
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	f7fd f987 	bl	8008154 <__udivsi3>
 800ae46:	f000 fb8b 	bl	800b560 <HAL_SYSTICK_Config>
 800ae4a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800ae4c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	d109      	bne.n	800ae66 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae52:	2d03      	cmp	r5, #3
 800ae54:	d807      	bhi.n	800ae66 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ae56:	3802      	subs	r0, #2
 800ae58:	0022      	movs	r2, r4
 800ae5a:	0029      	movs	r1, r5
 800ae5c:	f000 fb3c 	bl	800b4d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ae60:	0020      	movs	r0, r4
 800ae62:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <HAL_InitTick+0x44>)
 800ae64:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	200004d4 	.word	0x200004d4
 800ae6c:	20000568 	.word	0x20000568
 800ae70:	200004d8 	.word	0x200004d8

0800ae74 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ae74:	2340      	movs	r3, #64	; 0x40
 800ae76:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <HAL_Init+0x24>)
{
 800ae78:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ae7a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ae7c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ae82:	f7ff ffd3 	bl	800ae2c <HAL_InitTick>
 800ae86:	1e04      	subs	r4, r0, #0
 800ae88:	d103      	bne.n	800ae92 <HAL_Init+0x1e>
    HAL_MspInit();
 800ae8a:	f009 fa89 	bl	80143a0 <HAL_MspInit>
}
 800ae8e:	0020      	movs	r0, r4
 800ae90:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800ae92:	2401      	movs	r4, #1
 800ae94:	e7fb      	b.n	800ae8e <HAL_Init+0x1a>
 800ae96:	46c0      	nop			; (mov r8, r8)
 800ae98:	40022000 	.word	0x40022000

0800ae9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800ae9c:	4a03      	ldr	r2, [pc, #12]	; (800aeac <HAL_IncTick+0x10>)
 800ae9e:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <HAL_IncTick+0x14>)
 800aea0:	6811      	ldr	r1, [r2, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	185b      	adds	r3, r3, r1
 800aea6:	6013      	str	r3, [r2, #0]
}
 800aea8:	4770      	bx	lr
 800aeaa:	46c0      	nop			; (mov r8, r8)
 800aeac:	20001b20 	.word	0x20001b20
 800aeb0:	200004d4 	.word	0x200004d4

0800aeb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800aeb4:	4b01      	ldr	r3, [pc, #4]	; (800aebc <HAL_GetTick+0x8>)
 800aeb6:	6818      	ldr	r0, [r3, #0]
}
 800aeb8:	4770      	bx	lr
 800aeba:	46c0      	nop			; (mov r8, r8)
 800aebc:	20001b20 	.word	0x20001b20

0800aec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800aec4:	f7ff fff6 	bl	800aeb4 <HAL_GetTick>
 800aec8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aeca:	1c63      	adds	r3, r4, #1
 800aecc:	d002      	beq.n	800aed4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800aece:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <HAL_Delay+0x20>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aed4:	f7ff ffee 	bl	800aeb4 <HAL_GetTick>
 800aed8:	1b40      	subs	r0, r0, r5
 800aeda:	42a0      	cmp	r0, r4
 800aedc:	d3fa      	bcc.n	800aed4 <HAL_Delay+0x14>
  {
  }
}
 800aede:	bd70      	pop	{r4, r5, r6, pc}
 800aee0:	200004d4 	.word	0x200004d4

0800aee4 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800aee4:	4b08      	ldr	r3, [pc, #32]	; (800af08 <ADC_DelayMicroSecond+0x24>)
{
 800aee6:	b513      	push	{r0, r1, r4, lr}
 800aee8:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800aeea:	4908      	ldr	r1, [pc, #32]	; (800af0c <ADC_DelayMicroSecond+0x28>)
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f7fd f931 	bl	8008154 <__udivsi3>
 800aef2:	4344      	muls	r4, r0
 800aef4:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d100      	bne.n	800aefe <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800aefc:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	3b01      	subs	r3, #1
 800af02:	9301      	str	r3, [sp, #4]
 800af04:	e7f7      	b.n	800aef6 <ADC_DelayMicroSecond+0x12>
 800af06:	46c0      	nop			; (mov r8, r8)
 800af08:	20000568 	.word	0x20000568
 800af0c:	000f4240 	.word	0x000f4240

0800af10 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800af10:	2103      	movs	r1, #3
 800af12:	6803      	ldr	r3, [r0, #0]
{
 800af14:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800af16:	689a      	ldr	r2, [r3, #8]
{
 800af18:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800af1a:	400a      	ands	r2, r1
 800af1c:	2a01      	cmp	r2, #1
 800af1e:	d104      	bne.n	800af2a <ADC_Enable+0x1a>
 800af20:	6819      	ldr	r1, [r3, #0]
 800af22:	4211      	tst	r1, r2
 800af24:	d001      	beq.n	800af2a <ADC_Enable+0x1a>
  return HAL_OK;
 800af26:	2000      	movs	r0, #0
}
 800af28:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800af2a:	6899      	ldr	r1, [r3, #8]
 800af2c:	4a13      	ldr	r2, [pc, #76]	; (800af7c <ADC_Enable+0x6c>)
 800af2e:	4211      	tst	r1, r2
 800af30:	d008      	beq.n	800af44 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af32:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af34:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800af38:	4313      	orrs	r3, r2
 800af3a:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af3e:	4303      	orrs	r3, r0
 800af40:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800af42:	e7f1      	b.n	800af28 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800af44:	2501      	movs	r5, #1
 800af46:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800af48:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800af4a:	432a      	orrs	r2, r5
 800af4c:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800af4e:	f7ff ffc9 	bl	800aee4 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800af52:	f7ff ffaf 	bl	800aeb4 <HAL_GetTick>
 800af56:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	422b      	tst	r3, r5
 800af5e:	d1e2      	bne.n	800af26 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800af60:	f7ff ffa8 	bl	800aeb4 <HAL_GetTick>
 800af64:	1b80      	subs	r0, r0, r6
 800af66:	280a      	cmp	r0, #10
 800af68:	d9f6      	bls.n	800af58 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af6a:	2310      	movs	r3, #16
 800af6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800af6e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af70:	4313      	orrs	r3, r2
 800af72:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af76:	431d      	orrs	r5, r3
 800af78:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800af7a:	e7d5      	b.n	800af28 <ADC_Enable+0x18>
 800af7c:	80000017 	.word	0x80000017

0800af80 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800af80:	2103      	movs	r1, #3
 800af82:	6803      	ldr	r3, [r0, #0]
{
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800af88:	6898      	ldr	r0, [r3, #8]
 800af8a:	4008      	ands	r0, r1
 800af8c:	2801      	cmp	r0, #1
 800af8e:	d001      	beq.n	800af94 <ADC_Disable+0x14>
  return HAL_OK;
 800af90:	2000      	movs	r0, #0
}
 800af92:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	4202      	tst	r2, r0
 800af98:	d0fa      	beq.n	800af90 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800af9a:	2205      	movs	r2, #5
 800af9c:	689d      	ldr	r5, [r3, #8]
 800af9e:	4015      	ands	r5, r2
 800afa0:	2d01      	cmp	r5, #1
 800afa2:	d119      	bne.n	800afd8 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 800afa4:	6898      	ldr	r0, [r3, #8]
 800afa6:	3a03      	subs	r2, #3
 800afa8:	4302      	orrs	r2, r0
 800afaa:	609a      	str	r2, [r3, #8]
 800afac:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800afae:	f7ff ff81 	bl	800aeb4 <HAL_GetTick>
 800afb2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	422b      	tst	r3, r5
 800afba:	d0e9      	beq.n	800af90 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800afbc:	f7ff ff7a 	bl	800aeb4 <HAL_GetTick>
 800afc0:	1b80      	subs	r0, r0, r6
 800afc2:	280a      	cmp	r0, #10
 800afc4:	d9f6      	bls.n	800afb4 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afc6:	2310      	movs	r3, #16
 800afc8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afcc:	4313      	orrs	r3, r2
 800afce:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afd2:	431d      	orrs	r5, r3
 800afd4:	65a5      	str	r5, [r4, #88]	; 0x58
 800afd6:	e7dc      	b.n	800af92 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afd8:	2310      	movs	r3, #16
 800afda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800afdc:	4313      	orrs	r3, r2
 800afde:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afe2:	4303      	orrs	r3, r0
 800afe4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800afe6:	e7d4      	b.n	800af92 <ADC_Disable+0x12>

0800afe8 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800afe8:	2204      	movs	r2, #4
 800afea:	6803      	ldr	r3, [r0, #0]
{
 800afec:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800afee:	6899      	ldr	r1, [r3, #8]
{
 800aff0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800aff2:	4211      	tst	r1, r2
 800aff4:	d101      	bne.n	800affa <ADC_ConversionStop+0x12>
  return HAL_OK;
 800aff6:	2000      	movs	r0, #0
}
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800affa:	6899      	ldr	r1, [r3, #8]
 800affc:	4211      	tst	r1, r2
 800affe:	d006      	beq.n	800b00e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800b000:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800b002:	0792      	lsls	r2, r2, #30
 800b004:	d403      	bmi.n	800b00e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800b006:	2210      	movs	r2, #16
 800b008:	6899      	ldr	r1, [r3, #8]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800b00e:	f7ff ff51 	bl	800aeb4 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800b012:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800b014:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	422b      	tst	r3, r5
 800b01c:	d0eb      	beq.n	800aff6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b01e:	f7ff ff49 	bl	800aeb4 <HAL_GetTick>
 800b022:	1b80      	subs	r0, r0, r6
 800b024:	280a      	cmp	r0, #10
 800b026:	d9f6      	bls.n	800b016 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b028:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b02a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b02c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b02e:	4313      	orrs	r3, r2
 800b030:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b034:	4303      	orrs	r3, r0
 800b036:	65a3      	str	r3, [r4, #88]	; 0x58
 800b038:	e7de      	b.n	800aff8 <ADC_ConversionStop+0x10>
	...

0800b03c <HAL_ADC_Init>:
{
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	0004      	movs	r4, r0
    return HAL_ERROR;
 800b040:	2001      	movs	r0, #1
  if(hadc == NULL)
 800b042:	2c00      	cmp	r4, #0
 800b044:	d019      	beq.n	800b07a <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b046:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d106      	bne.n	800b05a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800b04c:	0022      	movs	r2, r4
 800b04e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800b050:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800b052:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800b054:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800b056:	f006 fe11 	bl	8011c7c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800b05a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b05c:	06db      	lsls	r3, r3, #27
 800b05e:	d404      	bmi.n	800b06a <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800b060:	2204      	movs	r2, #4
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	6898      	ldr	r0, [r3, #8]
 800b066:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800b068:	d008      	beq.n	800b07c <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b06a:	2310      	movs	r3, #16
 800b06c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800b06e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b070:	4313      	orrs	r3, r2
 800b072:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800b074:	2300      	movs	r3, #0
 800b076:	3450      	adds	r4, #80	; 0x50
 800b078:	7023      	strb	r3, [r4, #0]
}
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800b07c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b07e:	4955      	ldr	r1, [pc, #340]	; (800b1d4 <HAL_ADC_Init+0x198>)
 800b080:	4011      	ands	r1, r2
 800b082:	2202      	movs	r2, #2
 800b084:	430a      	orrs	r2, r1
 800b086:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b088:	2203      	movs	r2, #3
 800b08a:	6899      	ldr	r1, [r3, #8]
 800b08c:	4011      	ands	r1, r2
 800b08e:	4a52      	ldr	r2, [pc, #328]	; (800b1d8 <HAL_ADC_Init+0x19c>)
 800b090:	2901      	cmp	r1, #1
 800b092:	d102      	bne.n	800b09a <HAL_ADC_Init+0x5e>
 800b094:	681d      	ldr	r5, [r3, #0]
 800b096:	420d      	tst	r5, r1
 800b098:	d119      	bne.n	800b0ce <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800b09a:	2680      	movs	r6, #128	; 0x80
 800b09c:	6861      	ldr	r1, [r4, #4]
 800b09e:	05f6      	lsls	r6, r6, #23
 800b0a0:	004d      	lsls	r5, r1, #1
 800b0a2:	086d      	lsrs	r5, r5, #1
 800b0a4:	42b5      	cmp	r5, r6
 800b0a6:	d003      	beq.n	800b0b0 <HAL_ADC_Init+0x74>
 800b0a8:	2580      	movs	r5, #128	; 0x80
 800b0aa:	062d      	lsls	r5, r5, #24
 800b0ac:	42a9      	cmp	r1, r5
 800b0ae:	d176      	bne.n	800b19e <HAL_ADC_Init+0x162>
 800b0b0:	691d      	ldr	r5, [r3, #16]
 800b0b2:	00ad      	lsls	r5, r5, #2
 800b0b4:	08ad      	lsrs	r5, r5, #2
 800b0b6:	611d      	str	r5, [r3, #16]
 800b0b8:	691d      	ldr	r5, [r3, #16]
 800b0ba:	4329      	orrs	r1, r5
 800b0bc:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800b0be:	2518      	movs	r5, #24
 800b0c0:	68d9      	ldr	r1, [r3, #12]
 800b0c2:	43a9      	bics	r1, r5
 800b0c4:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800b0c6:	68d9      	ldr	r1, [r3, #12]
 800b0c8:	68a5      	ldr	r5, [r4, #8]
 800b0ca:	4329      	orrs	r1, r5
 800b0cc:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800b0ce:	6811      	ldr	r1, [r2, #0]
 800b0d0:	4d42      	ldr	r5, [pc, #264]	; (800b1dc <HAL_ADC_Init+0x1a0>)
 800b0d2:	4029      	ands	r1, r5
 800b0d4:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800b0d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0d8:	6815      	ldr	r5, [r2, #0]
 800b0da:	0649      	lsls	r1, r1, #25
 800b0dc:	4329      	orrs	r1, r5
 800b0de:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800b0e0:	2280      	movs	r2, #128	; 0x80
 800b0e2:	6899      	ldr	r1, [r3, #8]
 800b0e4:	0552      	lsls	r2, r2, #21
 800b0e6:	4211      	tst	r1, r2
 800b0e8:	d102      	bne.n	800b0f0 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800b0ea:	6899      	ldr	r1, [r3, #8]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	493b      	ldr	r1, [pc, #236]	; (800b1e0 <HAL_ADC_Init+0x1a4>)
 800b0f4:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800b0f6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800b0f8:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b0fa:	68dd      	ldr	r5, [r3, #12]
 800b0fc:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800b0fe:	2902      	cmp	r1, #2
 800b100:	d100      	bne.n	800b104 <HAL_ADC_Init+0xc8>
 800b102:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b104:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b106:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b108:	4332      	orrs	r2, r6
 800b10a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800b10c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b10e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800b110:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b112:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800b114:	69e5      	ldr	r5, [r4, #28]
 800b116:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b118:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800b11a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b11c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800b11e:	0025      	movs	r5, r4
 800b120:	352c      	adds	r5, #44	; 0x2c
 800b122:	782d      	ldrb	r5, [r5, #0]
 800b124:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b126:	432a      	orrs	r2, r5
 800b128:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b12a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800b12c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b12e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b130:	30ff      	adds	r0, #255	; 0xff
 800b132:	4282      	cmp	r2, r0
 800b134:	d004      	beq.n	800b140 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800b136:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800b138:	68d8      	ldr	r0, [r3, #12]
 800b13a:	432a      	orrs	r2, r5
 800b13c:	4302      	orrs	r2, r0
 800b13e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b140:	1ca2      	adds	r2, r4, #2
 800b142:	7fd2      	ldrb	r2, [r2, #31]
 800b144:	2a01      	cmp	r2, #1
 800b146:	d106      	bne.n	800b156 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800b148:	2900      	cmp	r1, #0
 800b14a:	d134      	bne.n	800b1b6 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800b14c:	2280      	movs	r2, #128	; 0x80
 800b14e:	68d9      	ldr	r1, [r3, #12]
 800b150:	0252      	lsls	r2, r2, #9
 800b152:	430a      	orrs	r2, r1
 800b154:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800b156:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800b158:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800b15a:	2901      	cmp	r1, #1
 800b15c:	d133      	bne.n	800b1c6 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800b15e:	4821      	ldr	r0, [pc, #132]	; (800b1e4 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800b160:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800b162:	4002      	ands	r2, r0
 800b164:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800b166:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b168:	6918      	ldr	r0, [r3, #16]
 800b16a:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800b16c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800b16e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800b170:	4302      	orrs	r2, r0
 800b172:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800b174:	691a      	ldr	r2, [r3, #16]
 800b176:	4311      	orrs	r1, r2
 800b178:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800b17a:	2107      	movs	r1, #7
 800b17c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800b17e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800b180:	438a      	bics	r2, r1
 800b182:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800b184:	695a      	ldr	r2, [r3, #20]
 800b186:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b188:	430a      	orrs	r2, r1
 800b18a:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800b18c:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800b18e:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800b190:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b192:	4393      	bics	r3, r2
 800b194:	001a      	movs	r2, r3
 800b196:	2301      	movs	r3, #1
 800b198:	4313      	orrs	r3, r2
 800b19a:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800b19c:	e76d      	b.n	800b07a <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800b19e:	691d      	ldr	r5, [r3, #16]
 800b1a0:	4e11      	ldr	r6, [pc, #68]	; (800b1e8 <HAL_ADC_Init+0x1ac>)
 800b1a2:	00ad      	lsls	r5, r5, #2
 800b1a4:	08ad      	lsrs	r5, r5, #2
 800b1a6:	611d      	str	r5, [r3, #16]
 800b1a8:	6815      	ldr	r5, [r2, #0]
 800b1aa:	4035      	ands	r5, r6
 800b1ac:	6015      	str	r5, [r2, #0]
 800b1ae:	6815      	ldr	r5, [r2, #0]
 800b1b0:	4329      	orrs	r1, r5
 800b1b2:	6011      	str	r1, [r2, #0]
 800b1b4:	e783      	b.n	800b0be <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b1b6:	2120      	movs	r1, #32
 800b1b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1ba:	4301      	orrs	r1, r0
 800b1bc:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	65a2      	str	r2, [r4, #88]	; 0x58
 800b1c4:	e7c7      	b.n	800b156 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	420a      	tst	r2, r1
 800b1ca:	d0d6      	beq.n	800b17a <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800b1cc:	691a      	ldr	r2, [r3, #16]
 800b1ce:	438a      	bics	r2, r1
 800b1d0:	611a      	str	r2, [r3, #16]
 800b1d2:	e7d2      	b.n	800b17a <HAL_ADC_Init+0x13e>
 800b1d4:	fffffefd 	.word	0xfffffefd
 800b1d8:	40012708 	.word	0x40012708
 800b1dc:	fdffffff 	.word	0xfdffffff
 800b1e0:	fffe0219 	.word	0xfffe0219
 800b1e4:	fffffc03 	.word	0xfffffc03
 800b1e8:	ffc3ffff 	.word	0xffc3ffff

0800b1ec <HAL_ADC_Start_DMA>:
{
 800b1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ee:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b1f0:	6802      	ldr	r2, [r0, #0]
{
 800b1f2:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b1f4:	6893      	ldr	r3, [r2, #8]
{
 800b1f6:	000f      	movs	r7, r1
    tmp_hal_status = HAL_BUSY;
 800b1f8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b1fa:	075b      	lsls	r3, r3, #29
 800b1fc:	d42f      	bmi.n	800b25e <HAL_ADC_Start_DMA+0x72>
    __HAL_LOCK(hadc);
 800b1fe:	0026      	movs	r6, r4
 800b200:	3650      	adds	r6, #80	; 0x50
 800b202:	7833      	ldrb	r3, [r6, #0]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d02a      	beq.n	800b25e <HAL_ADC_Start_DMA+0x72>
 800b208:	2301      	movs	r3, #1
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800b20a:	68d1      	ldr	r1, [r2, #12]
    __HAL_LOCK(hadc);
 800b20c:	7033      	strb	r3, [r6, #0]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800b20e:	430b      	orrs	r3, r1
 800b210:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800b212:	69e3      	ldr	r3, [r4, #28]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d123      	bne.n	800b260 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State,
 800b218:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b21a:	4a14      	ldr	r2, [pc, #80]	; (800b26c <HAL_ADC_Start_DMA+0x80>)
      ADC_CLEAR_ERRORCODE(hadc);
 800b21c:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 800b21e:	401a      	ands	r2, r3
 800b220:	2380      	movs	r3, #128	; 0x80
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	4313      	orrs	r3, r2
 800b226:	6563      	str	r3, [r4, #84]	; 0x54
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b228:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b22a:	4b11      	ldr	r3, [pc, #68]	; (800b270 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 800b22c:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800b22e:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b230:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b232:	4b10      	ldr	r3, [pc, #64]	; (800b274 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b234:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b236:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b238:	4b0f      	ldr	r3, [pc, #60]	; (800b278 <HAL_ADC_Start_DMA+0x8c>)
 800b23a:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b23c:	231c      	movs	r3, #28
 800b23e:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b240:	684a      	ldr	r2, [r1, #4]
 800b242:	3b0c      	subs	r3, #12
 800b244:	4313      	orrs	r3, r2
 800b246:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b248:	003a      	movs	r2, r7
 800b24a:	3140      	adds	r1, #64	; 0x40
 800b24c:	9b01      	ldr	r3, [sp, #4]
 800b24e:	f000 f9f3 	bl	800b638 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800b252:	2304      	movs	r3, #4
 800b254:	0028      	movs	r0, r5
 800b256:	6822      	ldr	r2, [r4, #0]
 800b258:	6891      	ldr	r1, [r2, #8]
 800b25a:	430b      	orrs	r3, r1
 800b25c:	6093      	str	r3, [r2, #8]
}
 800b25e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800b260:	0020      	movs	r0, r4
 800b262:	f7ff fe55 	bl	800af10 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800b266:	2800      	cmp	r0, #0
 800b268:	d0d6      	beq.n	800b218 <HAL_ADC_Start_DMA+0x2c>
 800b26a:	e7f8      	b.n	800b25e <HAL_ADC_Start_DMA+0x72>
 800b26c:	fffff0fe 	.word	0xfffff0fe
 800b270:	0800b2f9 	.word	0x0800b2f9
 800b274:	0800b36b 	.word	0x0800b36b
 800b278:	0800b377 	.word	0x0800b377

0800b27c <HAL_ADC_Stop_DMA>:
{
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800b27e:	0006      	movs	r6, r0
 800b280:	3650      	adds	r6, #80	; 0x50
 800b282:	7833      	ldrb	r3, [r6, #0]
{
 800b284:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800b286:	2502      	movs	r5, #2
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d024      	beq.n	800b2d6 <HAL_ADC_Stop_DMA+0x5a>
 800b28c:	2701      	movs	r7, #1
 800b28e:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800b290:	f7ff feaa 	bl	800afe8 <ADC_ConversionStop>
 800b294:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800b296:	d11c      	bne.n	800b2d2 <HAL_ADC_Stop_DMA+0x56>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800b298:	6822      	ldr	r2, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b29a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800b29c:	68d3      	ldr	r3, [r2, #12]
 800b29e:	43bb      	bics	r3, r7
 800b2a0:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b2a2:	1d83      	adds	r3, r0, #6
 800b2a4:	7fdb      	ldrb	r3, [r3, #31]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d107      	bne.n	800b2ba <HAL_ADC_Stop_DMA+0x3e>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b2aa:	f000 fa05 	bl	800b6b8 <HAL_DMA_Abort>
 800b2ae:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 800b2b0:	d003      	beq.n	800b2ba <HAL_ADC_Stop_DMA+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b2b2:	2340      	movs	r3, #64	; 0x40
 800b2b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b2ba:	2110      	movs	r1, #16
 800b2bc:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 800b2be:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b2c0:	6853      	ldr	r3, [r2, #4]
 800b2c2:	438b      	bics	r3, r1
 800b2c4:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800b2c6:	2d00      	cmp	r5, #0
 800b2c8:	d107      	bne.n	800b2da <HAL_ADC_Stop_DMA+0x5e>
      tmp_hal_status = ADC_Disable(hadc);
 800b2ca:	f7ff fe59 	bl	800af80 <ADC_Disable>
 800b2ce:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 800b2d0:	d006      	beq.n	800b2e0 <HAL_ADC_Stop_DMA+0x64>
  __HAL_UNLOCK(hadc);
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	7033      	strb	r3, [r6, #0]
}
 800b2d6:	0028      	movs	r0, r5
 800b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 800b2da:	f7ff fe51 	bl	800af80 <ADC_Disable>
 800b2de:	e7f8      	b.n	800b2d2 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 800b2e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2e2:	4a03      	ldr	r2, [pc, #12]	; (800b2f0 <HAL_ADC_Stop_DMA+0x74>)
 800b2e4:	401a      	ands	r2, r3
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	6563      	str	r3, [r4, #84]	; 0x54
 800b2ec:	e7f1      	b.n	800b2d2 <HAL_ADC_Stop_DMA+0x56>
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	fffffefe 	.word	0xfffffefe

0800b2f4 <HAL_ADC_ConvCpltCallback>:
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b2f8:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b2fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800b2fc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b2fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b300:	4211      	tst	r1, r2
 800b302:	d12b      	bne.n	800b35c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b304:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b306:	32b1      	adds	r2, #177	; 0xb1
 800b308:	32ff      	adds	r2, #255	; 0xff
 800b30a:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b30c:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b30e:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	0109      	lsls	r1, r1, #4
 800b314:	68d0      	ldr	r0, [r2, #12]
 800b316:	4208      	tst	r0, r1
 800b318:	d113      	bne.n	800b342 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800b31a:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b31c:	7fc9      	ldrb	r1, [r1, #31]
 800b31e:	2900      	cmp	r1, #0
 800b320:	d10f      	bne.n	800b342 <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800b322:	6811      	ldr	r1, [r2, #0]
 800b324:	0709      	lsls	r1, r1, #28
 800b326:	d50c      	bpl.n	800b342 <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b328:	6891      	ldr	r1, [r2, #8]
 800b32a:	0749      	lsls	r1, r1, #29
 800b32c:	d40d      	bmi.n	800b34a <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800b32e:	200c      	movs	r0, #12
 800b330:	6851      	ldr	r1, [r2, #4]
 800b332:	4381      	bics	r1, r0
 800b334:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800b336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b338:	490a      	ldr	r1, [pc, #40]	; (800b364 <ADC_DMAConvCplt+0x6c>)
 800b33a:	4011      	ands	r1, r2
 800b33c:	2201      	movs	r2, #1
 800b33e:	430a      	orrs	r2, r1
 800b340:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800b342:	0018      	movs	r0, r3
 800b344:	f7ff ffd6 	bl	800b2f4 <HAL_ADC_ConvCpltCallback>
}
 800b348:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b34a:	2220      	movs	r2, #32
 800b34c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b34e:	430a      	orrs	r2, r1
 800b350:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b352:	2201      	movs	r2, #1
 800b354:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b356:	430a      	orrs	r2, r1
 800b358:	659a      	str	r2, [r3, #88]	; 0x58
 800b35a:	e7f2      	b.n	800b342 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800b35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b360:	4798      	blx	r3
}
 800b362:	e7f1      	b.n	800b348 <ADC_DMAConvCplt+0x50>
 800b364:	fffffefe 	.word	0xfffffefe

0800b368 <HAL_ADC_ConvHalfCpltCallback>:
 800b368:	4770      	bx	lr

0800b36a <ADC_DMAHalfConvCplt>:
{
 800b36a:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800b36c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b36e:	f7ff fffb 	bl	800b368 <HAL_ADC_ConvHalfCpltCallback>
}
 800b372:	bd10      	pop	{r4, pc}

0800b374 <HAL_ADC_ErrorCallback>:
 800b374:	4770      	bx	lr

0800b376 <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b376:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b378:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800b37a:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b37c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800b37e:	4313      	orrs	r3, r2
 800b380:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b382:	2304      	movs	r3, #4
 800b384:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b386:	4313      	orrs	r3, r2
 800b388:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 800b38a:	f7ff fff3 	bl	800b374 <HAL_ADC_ErrorCallback>
}
 800b38e:	bd10      	pop	{r4, pc}

0800b390 <HAL_ADC_ConfigChannel>:
{
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800b392:	0004      	movs	r4, r0
 800b394:	3450      	adds	r4, #80	; 0x50
 800b396:	7823      	ldrb	r3, [r4, #0]
{
 800b398:	0006      	movs	r6, r0
 800b39a:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800b39c:	2002      	movs	r0, #2
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d00b      	beq.n	800b3ba <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800b3a2:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 800b3a4:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800b3a6:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 800b3a8:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800b3aa:	074b      	lsls	r3, r1, #29
 800b3ac:	d506      	bpl.n	800b3bc <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	7022      	strb	r2, [r4, #0]
}
 800b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3bc:	2380      	movs	r3, #128	; 0x80
 800b3be:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800b3c0:	4e19      	ldr	r6, [pc, #100]	; (800b428 <HAL_ADC_ConfigChannel+0x98>)
 800b3c2:	686f      	ldr	r7, [r5, #4]
 800b3c4:	0341      	lsls	r1, r0, #13
 800b3c6:	02db      	lsls	r3, r3, #11
 800b3c8:	0b49      	lsrs	r1, r1, #13
 800b3ca:	4003      	ands	r3, r0
 800b3cc:	42b7      	cmp	r7, r6
 800b3ce:	d019      	beq.n	800b404 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800b3d0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800b3d2:	4301      	orrs	r1, r0
 800b3d4:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d008      	beq.n	800b3ec <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800b3da:	2380      	movs	r3, #128	; 0x80
 800b3dc:	4a13      	ldr	r2, [pc, #76]	; (800b42c <HAL_ADC_ConfigChannel+0x9c>)
 800b3de:	041b      	lsls	r3, r3, #16
 800b3e0:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800b3e2:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800b3e8:	f7ff fd7c 	bl	800aee4 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	039b      	lsls	r3, r3, #14
 800b3f0:	d505      	bpl.n	800b3fe <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800b3f2:	2380      	movs	r3, #128	; 0x80
 800b3f4:	4a0d      	ldr	r2, [pc, #52]	; (800b42c <HAL_ADC_ConfigChannel+0x9c>)
 800b3f6:	03db      	lsls	r3, r3, #15
 800b3f8:	6811      	ldr	r1, [r2, #0]
 800b3fa:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800b3fc:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800b3fe:	2000      	movs	r0, #0
 800b400:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800b402:	e7da      	b.n	800b3ba <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800b404:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800b406:	438d      	bics	r5, r1
 800b408:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d004      	beq.n	800b418 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800b40e:	4a07      	ldr	r2, [pc, #28]	; (800b42c <HAL_ADC_ConfigChannel+0x9c>)
 800b410:	4907      	ldr	r1, [pc, #28]	; (800b430 <HAL_ADC_ConfigChannel+0xa0>)
 800b412:	6813      	ldr	r3, [r2, #0]
 800b414:	400b      	ands	r3, r1
 800b416:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800b418:	0383      	lsls	r3, r0, #14
 800b41a:	d5f0      	bpl.n	800b3fe <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800b41c:	4a03      	ldr	r2, [pc, #12]	; (800b42c <HAL_ADC_ConfigChannel+0x9c>)
 800b41e:	4905      	ldr	r1, [pc, #20]	; (800b434 <HAL_ADC_ConfigChannel+0xa4>)
 800b420:	6813      	ldr	r3, [r2, #0]
 800b422:	400b      	ands	r3, r1
 800b424:	e7ea      	b.n	800b3fc <HAL_ADC_ConfigChannel+0x6c>
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	00001001 	.word	0x00001001
 800b42c:	40012708 	.word	0x40012708
 800b430:	ff7fffff 	.word	0xff7fffff
 800b434:	ffbfffff 	.word	0xffbfffff

0800b438 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b43a:	0005      	movs	r5, r0
 800b43c:	3550      	adds	r5, #80	; 0x50
 800b43e:	782b      	ldrb	r3, [r5, #0]
{
 800b440:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800b442:	2002      	movs	r0, #2
 800b444:	2b01      	cmp	r3, #1
 800b446:	d044      	beq.n	800b4d2 <HAL_ADCEx_Calibration_Start+0x9a>
 800b448:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b44a:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 800b44c:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	6898      	ldr	r0, [r3, #8]
 800b452:	4010      	ands	r0, r2
 800b454:	2801      	cmp	r0, #1
 800b456:	d109      	bne.n	800b46c <HAL_ADCEx_Calibration_Start+0x34>
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4202      	tst	r2, r0
 800b45c:	d006      	beq.n	800b46c <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b45e:	2320      	movs	r3, #32
 800b460:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b462:	4313      	orrs	r3, r2
 800b464:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b466:	2300      	movs	r3, #0
 800b468:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800b46a:	e032      	b.n	800b4d2 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 800b46c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b46e:	4919      	ldr	r1, [pc, #100]	; (800b4d4 <HAL_ADCEx_Calibration_Start+0x9c>)
 800b470:	4011      	ands	r1, r2
 800b472:	2202      	movs	r2, #2
 800b474:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800b476:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800b478:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800b47a:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	438a      	bics	r2, r1
 800b480:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800b482:	2280      	movs	r2, #128	; 0x80
 800b484:	6899      	ldr	r1, [r3, #8]
 800b486:	0612      	lsls	r2, r2, #24
 800b488:	430a      	orrs	r2, r1
 800b48a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800b48c:	f7ff fd12 	bl	800aeb4 <HAL_GetTick>
 800b490:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	689a      	ldr	r2, [r3, #8]
 800b496:	2a00      	cmp	r2, #0
 800b498:	db0c      	blt.n	800b4b4 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800b49a:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800b49c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800b49e:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800b4a0:	430e      	orrs	r6, r1
 800b4a2:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800b4a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b4a6:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800b4a8:	4393      	bics	r3, r2
 800b4aa:	001a      	movs	r2, r3
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	6563      	str	r3, [r4, #84]	; 0x54
 800b4b2:	e7d8      	b.n	800b466 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800b4b4:	f7ff fcfe 	bl	800aeb4 <HAL_GetTick>
 800b4b8:	1bc0      	subs	r0, r0, r7
 800b4ba:	280a      	cmp	r0, #10
 800b4bc:	d9e9      	bls.n	800b492 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800b4be:	2212      	movs	r2, #18
 800b4c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800b4c2:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800b4c4:	4393      	bics	r3, r2
 800b4c6:	001a      	movs	r2, r3
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	702b      	strb	r3, [r5, #0]
}
 800b4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d4:	fffffefd 	.word	0xfffffefd

0800b4d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b4d8:	b530      	push	{r4, r5, lr}
 800b4da:	25ff      	movs	r5, #255	; 0xff
 800b4dc:	2403      	movs	r4, #3
 800b4de:	002a      	movs	r2, r5
 800b4e0:	b2c3      	uxtb	r3, r0
 800b4e2:	401c      	ands	r4, r3
 800b4e4:	00e4      	lsls	r4, r4, #3
 800b4e6:	40a2      	lsls	r2, r4
 800b4e8:	0189      	lsls	r1, r1, #6
 800b4ea:	4029      	ands	r1, r5
 800b4ec:	43d2      	mvns	r2, r2
 800b4ee:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	db0a      	blt.n	800b50a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b4f4:	24c0      	movs	r4, #192	; 0xc0
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <HAL_NVIC_SetPriority+0x4c>)
 800b4f8:	0880      	lsrs	r0, r0, #2
 800b4fa:	0080      	lsls	r0, r0, #2
 800b4fc:	18c0      	adds	r0, r0, r3
 800b4fe:	00a4      	lsls	r4, r4, #2
 800b500:	5903      	ldr	r3, [r0, r4]
 800b502:	401a      	ands	r2, r3
 800b504:	4311      	orrs	r1, r2
 800b506:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800b508:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b50a:	200f      	movs	r0, #15
 800b50c:	4003      	ands	r3, r0
 800b50e:	3b08      	subs	r3, #8
 800b510:	4805      	ldr	r0, [pc, #20]	; (800b528 <HAL_NVIC_SetPriority+0x50>)
 800b512:	089b      	lsrs	r3, r3, #2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	181b      	adds	r3, r3, r0
 800b518:	69d8      	ldr	r0, [r3, #28]
 800b51a:	4002      	ands	r2, r0
 800b51c:	4311      	orrs	r1, r2
 800b51e:	61d9      	str	r1, [r3, #28]
 800b520:	e7f2      	b.n	800b508 <HAL_NVIC_SetPriority+0x30>
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	e000e100 	.word	0xe000e100
 800b528:	e000ed00 	.word	0xe000ed00

0800b52c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b52c:	2800      	cmp	r0, #0
 800b52e:	db05      	blt.n	800b53c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b530:	231f      	movs	r3, #31
 800b532:	4018      	ands	r0, r3
 800b534:	3b1e      	subs	r3, #30
 800b536:	4083      	lsls	r3, r0
 800b538:	4a01      	ldr	r2, [pc, #4]	; (800b540 <HAL_NVIC_EnableIRQ+0x14>)
 800b53a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b53c:	4770      	bx	lr
 800b53e:	46c0      	nop			; (mov r8, r8)
 800b540:	e000e100 	.word	0xe000e100

0800b544 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b544:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b548:	4b03      	ldr	r3, [pc, #12]	; (800b558 <HAL_NVIC_SystemReset+0x14>)
 800b54a:	4a04      	ldr	r2, [pc, #16]	; (800b55c <HAL_NVIC_SystemReset+0x18>)
 800b54c:	60da      	str	r2, [r3, #12]
 800b54e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b552:	46c0      	nop			; (mov r8, r8)
 800b554:	e7fd      	b.n	800b552 <HAL_NVIC_SystemReset+0xe>
 800b556:	46c0      	nop			; (mov r8, r8)
 800b558:	e000ed00 	.word	0xe000ed00
 800b55c:	05fa0004 	.word	0x05fa0004

0800b560 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b560:	4a09      	ldr	r2, [pc, #36]	; (800b588 <HAL_SYSTICK_Config+0x28>)
 800b562:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800b564:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b566:	4293      	cmp	r3, r2
 800b568:	d80d      	bhi.n	800b586 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b56a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b56c:	4a07      	ldr	r2, [pc, #28]	; (800b58c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b56e:	4808      	ldr	r0, [pc, #32]	; (800b590 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b570:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b572:	6a03      	ldr	r3, [r0, #32]
 800b574:	0609      	lsls	r1, r1, #24
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	0a1b      	lsrs	r3, r3, #8
 800b57a:	430b      	orrs	r3, r1
 800b57c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b57e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b580:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b582:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b584:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800b586:	4770      	bx	lr
 800b588:	00ffffff 	.word	0x00ffffff
 800b58c:	e000e010 	.word	0xe000e010
 800b590:	e000ed00 	.word	0xe000ed00

0800b594 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b594:	2800      	cmp	r0, #0
 800b596:	db07      	blt.n	800b5a8 <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b598:	231f      	movs	r3, #31
 800b59a:	22c0      	movs	r2, #192	; 0xc0
 800b59c:	4018      	ands	r0, r3
 800b59e:	3b1e      	subs	r3, #30
 800b5a0:	4083      	lsls	r3, r0
 800b5a2:	4902      	ldr	r1, [pc, #8]	; (800b5ac <HAL_NVIC_ClearPendingIRQ+0x18>)
 800b5a4:	0052      	lsls	r2, r2, #1
 800b5a6:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800b5a8:	4770      	bx	lr
 800b5aa:	46c0      	nop			; (mov r8, r8)
 800b5ac:	e000e100 	.word	0xe000e100

0800b5b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800b5b4:	2001      	movs	r0, #1
  if(hdma == NULL)
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	d035      	beq.n	800b626 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b5ba:	6825      	ldr	r5, [r4, #0]
 800b5bc:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <HAL_DMA_Init+0x78>)
 800b5be:	2114      	movs	r1, #20
 800b5c0:	18e8      	adds	r0, r5, r3
 800b5c2:	f7fc fdc7 	bl	8008154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800b5c6:	4b19      	ldr	r3, [pc, #100]	; (800b62c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b5c8:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800b5ca:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b5d0:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800b5d2:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b5d4:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b5d6:	4b16      	ldr	r3, [pc, #88]	; (800b630 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b5d8:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b5da:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 800b5dc:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5de:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800b5e0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5e2:	433b      	orrs	r3, r7
 800b5e4:	6967      	ldr	r7, [r4, #20]
 800b5e6:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5e8:	69a7      	ldr	r7, [r4, #24]
 800b5ea:	433b      	orrs	r3, r7
 800b5ec:	69e7      	ldr	r7, [r4, #28]
 800b5ee:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5f0:	6a27      	ldr	r7, [r4, #32]
 800b5f2:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800b5f4:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b5f6:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800b5f8:	2380      	movs	r3, #128	; 0x80
 800b5fa:	01db      	lsls	r3, r3, #7
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	d00c      	beq.n	800b61a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b600:	251c      	movs	r5, #28
 800b602:	4028      	ands	r0, r5
 800b604:	3d0d      	subs	r5, #13
 800b606:	4085      	lsls	r5, r0
 800b608:	490a      	ldr	r1, [pc, #40]	; (800b634 <HAL_DMA_Init+0x84>)
 800b60a:	680b      	ldr	r3, [r1, #0]
 800b60c:	43ab      	bics	r3, r5
 800b60e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	680d      	ldr	r5, [r1, #0]
 800b614:	4083      	lsls	r3, r0
 800b616:	432b      	orrs	r3, r5
 800b618:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b61a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b61c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b61e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b620:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800b622:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800b624:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800b626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b628:	bffdfff8 	.word	0xbffdfff8
 800b62c:	40020000 	.word	0x40020000
 800b630:	ffff800f 	.word	0xffff800f
 800b634:	400200a8 	.word	0x400200a8

0800b638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b63a:	1d44      	adds	r4, r0, #5
 800b63c:	7fe6      	ldrb	r6, [r4, #31]
{
 800b63e:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 800b640:	2002      	movs	r0, #2
 800b642:	2e01      	cmp	r6, #1
 800b644:	d02b      	beq.n	800b69e <HAL_DMA_Start_IT+0x66>
 800b646:	3801      	subs	r0, #1
 800b648:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 800b64a:	1da8      	adds	r0, r5, #6
 800b64c:	7fc6      	ldrb	r6, [r0, #31]
 800b64e:	4684      	mov	ip, r0
 800b650:	b2f6      	uxtb	r6, r6
 800b652:	2002      	movs	r0, #2
 800b654:	2700      	movs	r7, #0
 800b656:	2e01      	cmp	r6, #1
 800b658:	d12c      	bne.n	800b6b4 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b65a:	4664      	mov	r4, ip
 800b65c:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b65e:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b660:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800b662:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b664:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 800b666:	43b0      	bics	r0, r6
 800b668:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b66a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800b66c:	9001      	str	r0, [sp, #4]
 800b66e:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800b670:	4007      	ands	r7, r0
 800b672:	40be      	lsls	r6, r7
 800b674:	9801      	ldr	r0, [sp, #4]
 800b676:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b678:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b67a:	68ab      	ldr	r3, [r5, #8]
 800b67c:	6828      	ldr	r0, [r5, #0]
 800b67e:	2b10      	cmp	r3, #16
 800b680:	d10e      	bne.n	800b6a0 <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b682:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b684:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800b686:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00c      	beq.n	800b6a6 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b68c:	230e      	movs	r3, #14
 800b68e:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b690:	4313      	orrs	r3, r2
 800b692:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800b694:	2301      	movs	r3, #1
 800b696:	6802      	ldr	r2, [r0, #0]
 800b698:	4313      	orrs	r3, r2
 800b69a:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b69c:	2000      	movs	r0, #0
}
 800b69e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800b6a0:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800b6a2:	60e2      	str	r2, [r4, #12]
 800b6a4:	e7ef      	b.n	800b686 <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b6a6:	2204      	movs	r2, #4
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	4393      	bics	r3, r2
 800b6ac:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b6ae:	6822      	ldr	r2, [r4, #0]
 800b6b0:	230a      	movs	r3, #10
 800b6b2:	e7ed      	b.n	800b690 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 800b6b4:	77e7      	strb	r7, [r4, #31]
 800b6b6:	e7f2      	b.n	800b69e <HAL_DMA_Start_IT+0x66>

0800b6b8 <HAL_DMA_Abort>:
{
 800b6b8:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b6ba:	1d85      	adds	r5, r0, #6
 800b6bc:	7feb      	ldrb	r3, [r5, #31]
 800b6be:	1d44      	adds	r4, r0, #5
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d005      	beq.n	800b6d0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6c4:	2304      	movs	r3, #4
 800b6c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800b6c8:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b6ca:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800b6cc:	77e3      	strb	r3, [r4, #31]
}
 800b6ce:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b6d0:	210e      	movs	r1, #14
 800b6d2:	6803      	ldr	r3, [r0, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	438a      	bics	r2, r1
 800b6d8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800b6da:	2201      	movs	r2, #1
 800b6dc:	6819      	ldr	r1, [r3, #0]
 800b6de:	4391      	bics	r1, r2
 800b6e0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b6e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b6e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b6e6:	201c      	movs	r0, #28
 800b6e8:	4003      	ands	r3, r0
 800b6ea:	0010      	movs	r0, r2
 800b6ec:	4098      	lsls	r0, r3
 800b6ee:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800b6f0:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800b6f2:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 800b6f4:	77e0      	strb	r0, [r4, #31]
    return status;
 800b6f6:	e7ea      	b.n	800b6ce <HAL_DMA_Abort+0x16>

0800b6f8 <HAL_DMA_Abort_IT>:
{
 800b6f8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b6fa:	1d84      	adds	r4, r0, #6
 800b6fc:	7fe3      	ldrb	r3, [r4, #31]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d004      	beq.n	800b70c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b702:	2304      	movs	r3, #4
 800b704:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800b706:	3b03      	subs	r3, #3
}
 800b708:	0018      	movs	r0, r3
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b70c:	210e      	movs	r1, #14
 800b70e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b710:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	438a      	bics	r2, r1
 800b716:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800b718:	2201      	movs	r2, #1
 800b71a:	6819      	ldr	r1, [r3, #0]
 800b71c:	4391      	bics	r1, r2
 800b71e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b720:	231c      	movs	r3, #28
 800b722:	402b      	ands	r3, r5
 800b724:	0015      	movs	r5, r2
 800b726:	409d      	lsls	r5, r3
 800b728:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800b72a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b72c:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b72e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800b730:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 800b732:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800b734:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800b736:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800b738:	42a2      	cmp	r2, r4
 800b73a:	d0e5      	beq.n	800b708 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800b73c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800b73e:	0023      	movs	r3, r4
 800b740:	e7e2      	b.n	800b708 <HAL_DMA_Abort_IT+0x10>

0800b742 <HAL_DMA_IRQHandler>:
{
 800b742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800b744:	221c      	movs	r2, #28
 800b746:	2704      	movs	r7, #4
 800b748:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b74a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800b74c:	4032      	ands	r2, r6
 800b74e:	003e      	movs	r6, r7
 800b750:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b752:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b754:	6803      	ldr	r3, [r0, #0]
 800b756:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800b758:	4235      	tst	r5, r6
 800b75a:	d00d      	beq.n	800b778 <HAL_DMA_IRQHandler+0x36>
 800b75c:	423c      	tst	r4, r7
 800b75e:	d00b      	beq.n	800b778 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	0692      	lsls	r2, r2, #26
 800b764:	d402      	bmi.n	800b76c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	43ba      	bics	r2, r7
 800b76a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800b76c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800b76e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800b770:	2b00      	cmp	r3, #0
 800b772:	d019      	beq.n	800b7a8 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800b774:	4798      	blx	r3
  return;
 800b776:	e017      	b.n	800b7a8 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800b778:	2702      	movs	r7, #2
 800b77a:	003e      	movs	r6, r7
 800b77c:	4096      	lsls	r6, r2
 800b77e:	4235      	tst	r5, r6
 800b780:	d013      	beq.n	800b7aa <HAL_DMA_IRQHandler+0x68>
 800b782:	423c      	tst	r4, r7
 800b784:	d011      	beq.n	800b7aa <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	0692      	lsls	r2, r2, #26
 800b78a:	d406      	bmi.n	800b79a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b78c:	240a      	movs	r4, #10
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	43a2      	bics	r2, r4
 800b792:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b794:	2201      	movs	r2, #1
 800b796:	1d83      	adds	r3, r0, #6
 800b798:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800b79a:	2200      	movs	r2, #0
 800b79c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b79e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800b7a0:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800b7a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d1e5      	bne.n	800b774 <HAL_DMA_IRQHandler+0x32>
}
 800b7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800b7aa:	2608      	movs	r6, #8
 800b7ac:	0037      	movs	r7, r6
 800b7ae:	4097      	lsls	r7, r2
 800b7b0:	423d      	tst	r5, r7
 800b7b2:	d0f9      	beq.n	800b7a8 <HAL_DMA_IRQHandler+0x66>
 800b7b4:	4234      	tst	r4, r6
 800b7b6:	d0f7      	beq.n	800b7a8 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b7b8:	250e      	movs	r5, #14
 800b7ba:	681c      	ldr	r4, [r3, #0]
 800b7bc:	43ac      	bics	r4, r5
 800b7be:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	001c      	movs	r4, r3
 800b7c4:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800b7c6:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b7c8:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b7ca:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800b7cc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	1d43      	adds	r3, r0, #5
 800b7d2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800b7d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b7d6:	e7e5      	b.n	800b7a4 <HAL_DMA_IRQHandler+0x62>

0800b7d8 <HAL_DMA_GetState>:
  return hdma->State;
 800b7d8:	3006      	adds	r0, #6
 800b7da:	7fc0      	ldrb	r0, [r0, #31]
 800b7dc:	b2c0      	uxtb	r0, r0
}
 800b7de:	4770      	bx	lr

0800b7e0 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b7e0:	2180      	movs	r1, #128	; 0x80
 800b7e2:	4a27      	ldr	r2, [pc, #156]	; (800b880 <FLASH_SetErrorCode+0xa0>)
 800b7e4:	0049      	lsls	r1, r1, #1
 800b7e6:	6990      	ldr	r0, [r2, #24]
{
 800b7e8:	b530      	push	{r4, r5, lr}
  uint32_t flags = 0;
 800b7ea:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b7ec:	4208      	tst	r0, r1
 800b7ee:	d005      	beq.n	800b7fc <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b7f0:	4824      	ldr	r0, [pc, #144]	; (800b884 <FLASH_SetErrorCode+0xa4>)
 800b7f2:	3302      	adds	r3, #2
 800b7f4:	6944      	ldr	r4, [r0, #20]
 800b7f6:	4323      	orrs	r3, r4
 800b7f8:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800b7fa:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800b7fc:	2080      	movs	r0, #128	; 0x80
 800b7fe:	6991      	ldr	r1, [r2, #24]
 800b800:	0080      	lsls	r0, r0, #2
 800b802:	4201      	tst	r1, r0
 800b804:	d005      	beq.n	800b812 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b806:	2101      	movs	r1, #1
 800b808:	4c1e      	ldr	r4, [pc, #120]	; (800b884 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_PGAERR;
 800b80a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b80c:	6965      	ldr	r5, [r4, #20]
 800b80e:	4329      	orrs	r1, r5
 800b810:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800b812:	2080      	movs	r0, #128	; 0x80
 800b814:	6991      	ldr	r1, [r2, #24]
 800b816:	00c0      	lsls	r0, r0, #3
 800b818:	4201      	tst	r1, r0
 800b81a:	d005      	beq.n	800b828 <FLASH_SetErrorCode+0x48>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800b81c:	2108      	movs	r1, #8
 800b81e:	4c19      	ldr	r4, [pc, #100]	; (800b884 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_SIZERR;
 800b820:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800b822:	6965      	ldr	r5, [r4, #20]
 800b824:	4329      	orrs	r1, r5
 800b826:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b828:	2080      	movs	r0, #128	; 0x80
 800b82a:	6991      	ldr	r1, [r2, #24]
 800b82c:	0100      	lsls	r0, r0, #4
 800b82e:	4201      	tst	r1, r0
 800b830:	d005      	beq.n	800b83e <FLASH_SetErrorCode+0x5e>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b832:	2104      	movs	r1, #4
 800b834:	4c13      	ldr	r4, [pc, #76]	; (800b884 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_OPTVERR;
 800b836:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b838:	6965      	ldr	r5, [r4, #20]
 800b83a:	4329      	orrs	r1, r5
 800b83c:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800b83e:	2080      	movs	r0, #128	; 0x80
 800b840:	6991      	ldr	r1, [r2, #24]
 800b842:	0180      	lsls	r0, r0, #6
 800b844:	4201      	tst	r1, r0
 800b846:	d005      	beq.n	800b854 <FLASH_SetErrorCode+0x74>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b848:	2110      	movs	r1, #16
 800b84a:	4c0e      	ldr	r4, [pc, #56]	; (800b884 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_RDERR;
 800b84c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b84e:	6965      	ldr	r5, [r4, #20]
 800b850:	4329      	orrs	r1, r5
 800b852:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800b854:	6991      	ldr	r1, [r2, #24]
 800b856:	0389      	lsls	r1, r1, #14
 800b858:	d505      	bpl.n	800b866 <FLASH_SetErrorCode+0x86>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800b85a:	2020      	movs	r0, #32
 800b85c:	4c09      	ldr	r4, [pc, #36]	; (800b884 <FLASH_SetErrorCode+0xa4>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 800b85e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800b860:	6961      	ldr	r1, [r4, #20]
 800b862:	4301      	orrs	r1, r0
 800b864:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800b866:	2080      	movs	r0, #128	; 0x80
 800b868:	6991      	ldr	r1, [r2, #24]
 800b86a:	0240      	lsls	r0, r0, #9
 800b86c:	4201      	tst	r1, r0
 800b86e:	d005      	beq.n	800b87c <FLASH_SetErrorCode+0x9c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800b870:	2140      	movs	r1, #64	; 0x40
 800b872:	4c04      	ldr	r4, [pc, #16]	; (800b884 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_NOTZEROERR;
 800b874:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800b876:	6965      	ldr	r5, [r4, #20]
 800b878:	4329      	orrs	r1, r5
 800b87a:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b87c:	6193      	str	r3, [r2, #24]
}  
 800b87e:	bd30      	pop	{r4, r5, pc}
 800b880:	40022000 	.word	0x40022000
 800b884:	20001b24 	.word	0x20001b24

0800b888 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800b888:	4b01      	ldr	r3, [pc, #4]	; (800b890 <HAL_FLASH_GetError+0x8>)
 800b88a:	6958      	ldr	r0, [r3, #20]
}
 800b88c:	4770      	bx	lr
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	20001b24 	.word	0x20001b24

0800b894 <FLASH_WaitForLastOperation>:
{
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b898:	f7ff fb0c 	bl	800aeb4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b89c:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 800b89e:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b8a0:	4a18      	ldr	r2, [pc, #96]	; (800b904 <FLASH_WaitForLastOperation+0x70>)
 800b8a2:	0013      	movs	r3, r2
 800b8a4:	6991      	ldr	r1, [r2, #24]
 800b8a6:	4229      	tst	r1, r5
 800b8a8:	d11f      	bne.n	800b8ea <FLASH_WaitForLastOperation+0x56>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b8aa:	2102      	movs	r1, #2
 800b8ac:	6990      	ldr	r0, [r2, #24]
 800b8ae:	4208      	tst	r0, r1
 800b8b0:	d000      	beq.n	800b8b4 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b8b2:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b8b4:	699a      	ldr	r2, [r3, #24]
 800b8b6:	05d2      	lsls	r2, r2, #23
 800b8b8:	d413      	bmi.n	800b8e2 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b8ba:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b8bc:	0592      	lsls	r2, r2, #22
 800b8be:	d410      	bmi.n	800b8e2 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b8c0:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b8c2:	0552      	lsls	r2, r2, #21
 800b8c4:	d40d      	bmi.n	800b8e2 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b8c6:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b8c8:	0512      	lsls	r2, r2, #20
 800b8ca:	d40a      	bmi.n	800b8e2 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b8cc:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b8ce:	0492      	lsls	r2, r2, #18
 800b8d0:	d407      	bmi.n	800b8e2 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b8d2:	2280      	movs	r2, #128	; 0x80
 800b8d4:	6998      	ldr	r0, [r3, #24]
 800b8d6:	0292      	lsls	r2, r2, #10
 800b8d8:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b8da:	d102      	bne.n	800b8e2 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800b8dc:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b8de:	03db      	lsls	r3, r3, #15
 800b8e0:	d508      	bpl.n	800b8f4 <FLASH_WaitForLastOperation+0x60>
    FLASH_SetErrorCode();
 800b8e2:	f7ff ff7d 	bl	800b7e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	e004      	b.n	800b8f4 <FLASH_WaitForLastOperation+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800b8ea:	1c61      	adds	r1, r4, #1
 800b8ec:	d0da      	beq.n	800b8a4 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	d101      	bne.n	800b8f6 <FLASH_WaitForLastOperation+0x62>
        return HAL_TIMEOUT;
 800b8f2:	2003      	movs	r0, #3
}
 800b8f4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b8f6:	f7ff fadd 	bl	800aeb4 <HAL_GetTick>
 800b8fa:	1b80      	subs	r0, r0, r6
 800b8fc:	42a0      	cmp	r0, r4
 800b8fe:	d9cf      	bls.n	800b8a0 <FLASH_WaitForLastOperation+0xc>
 800b900:	e7f7      	b.n	800b8f2 <FLASH_WaitForLastOperation+0x5e>
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	40022000 	.word	0x40022000

0800b908 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b908:	2201      	movs	r2, #1
 800b90a:	4b08      	ldr	r3, [pc, #32]	; (800b92c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 800b90c:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b90e:	6859      	ldr	r1, [r3, #4]
 800b910:	4211      	tst	r1, r2
 800b912:	d00a      	beq.n	800b92a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b914:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b918:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800b91a:	4805      	ldr	r0, [pc, #20]	; (800b930 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 800b91c:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800b91e:	4805      	ldr	r0, [pc, #20]	; (800b934 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800b920:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b922:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b926:	6858      	ldr	r0, [r3, #4]
      return HAL_ERROR;
 800b928:	4010      	ands	r0, r2
}
 800b92a:	4770      	bx	lr
 800b92c:	40022000 	.word	0x40022000
 800b930:	89abcdef 	.word	0x89abcdef
 800b934:	02030405 	.word	0x02030405

0800b938 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b938:	2301      	movs	r3, #1
 800b93a:	4a03      	ldr	r2, [pc, #12]	; (800b948 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 800b93c:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b93e:	6851      	ldr	r1, [r2, #4]
 800b940:	430b      	orrs	r3, r1
 800b942:	6053      	str	r3, [r2, #4]
}
 800b944:	4770      	bx	lr
 800b946:	46c0      	nop			; (mov r8, r8)
 800b948:	40022000 	.word	0x40022000

0800b94c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b94c:	b510      	push	{r4, lr}
 800b94e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b950:	4805      	ldr	r0, [pc, #20]	; (800b968 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800b952:	f7ff ff9f 	bl	800b894 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800b956:	2800      	cmp	r0, #0
 800b958:	d105      	bne.n	800b966 <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b95a:	4b04      	ldr	r3, [pc, #16]	; (800b96c <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 800b95c:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b95e:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b960:	4801      	ldr	r0, [pc, #4]	; (800b968 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800b962:	f7ff ff97 	bl	800b894 <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800b966:	bd10      	pop	{r4, pc}
 800b968:	0000c350 	.word	0x0000c350
 800b96c:	20001b24 	.word	0x20001b24

0800b970 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b972:	4d12      	ldr	r5, [pc, #72]	; (800b9bc <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800b974:	0007      	movs	r7, r0
  __HAL_LOCK(&pFlash);
 800b976:	7c2b      	ldrb	r3, [r5, #16]
{
 800b978:	000e      	movs	r6, r1
 800b97a:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 800b97c:	2002      	movs	r0, #2
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d00c      	beq.n	800b99c <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 800b982:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b984:	480e      	ldr	r0, [pc, #56]	; (800b9c0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800b986:	742b      	strb	r3, [r5, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b988:	f7ff ff84 	bl	800b894 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d103      	bne.n	800b998 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b990:	6168      	str	r0, [r5, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b992:	2f02      	cmp	r7, #2
 800b994:	d103      	bne.n	800b99e <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b996:	6034      	str	r4, [r6, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b998:	2300      	movs	r3, #0
 800b99a:	742b      	strb	r3, [r5, #16]

  return status;
}
 800b99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b99e:	2f01      	cmp	r7, #1
 800b9a0:	d102      	bne.n	800b9a8 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b9a2:	b2a4      	uxth	r4, r4
 800b9a4:	8034      	strh	r4, [r6, #0]
 800b9a6:	e7f7      	b.n	800b998 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b9ac:	4804      	ldr	r0, [pc, #16]	; (800b9c0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800b9ae:	f7ff ff71 	bl	800b894 <FLASH_WaitForLastOperation>
 800b9b2:	e7f1      	b.n	800b998 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b9b4:	b2e4      	uxtb	r4, r4
 800b9b6:	7034      	strb	r4, [r6, #0]
 800b9b8:	e7ee      	b.n	800b998 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800b9ba:	46c0      	nop			; (mov r8, r8)
 800b9bc:	20001b24 	.word	0x20001b24
 800b9c0:	0000c350 	.word	0x0000c350

0800b9c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b9c6:	4a57      	ldr	r2, [pc, #348]	; (800bb24 <HAL_GPIO_Init+0x160>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800b9c8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b9ca:	1882      	adds	r2, r0, r2
 800b9cc:	1e54      	subs	r4, r2, #1
 800b9ce:	41a2      	sbcs	r2, r4
{
 800b9d0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 800b9d2:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 800b9d4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b9d6:	3205      	adds	r2, #5
 800b9d8:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b9da:	9a04      	ldr	r2, [sp, #16]
 800b9dc:	40da      	lsrs	r2, r3
 800b9de:	d101      	bne.n	800b9e4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800b9e0:	b007      	add	sp, #28
 800b9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b9e4:	2701      	movs	r7, #1
 800b9e6:	003a      	movs	r2, r7
 800b9e8:	409a      	lsls	r2, r3
 800b9ea:	9203      	str	r2, [sp, #12]
 800b9ec:	9c03      	ldr	r4, [sp, #12]
 800b9ee:	9a04      	ldr	r2, [sp, #16]
 800b9f0:	4022      	ands	r2, r4
 800b9f2:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 800b9f4:	d100      	bne.n	800b9f8 <HAL_GPIO_Init+0x34>
 800b9f6:	e092      	b.n	800bb1e <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b9f8:	684a      	ldr	r2, [r1, #4]
 800b9fa:	005c      	lsls	r4, r3, #1
 800b9fc:	4694      	mov	ip, r2
 800b9fe:	2210      	movs	r2, #16
 800ba00:	4666      	mov	r6, ip
 800ba02:	4396      	bics	r6, r2
 800ba04:	3a0d      	subs	r2, #13
 800ba06:	40a2      	lsls	r2, r4
 800ba08:	43d2      	mvns	r2, r2
 800ba0a:	9202      	str	r2, [sp, #8]
 800ba0c:	1e72      	subs	r2, r6, #1
 800ba0e:	42ba      	cmp	r2, r7
 800ba10:	d80f      	bhi.n	800ba32 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 800ba12:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ba14:	9a02      	ldr	r2, [sp, #8]
 800ba16:	4015      	ands	r5, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ba18:	68ca      	ldr	r2, [r1, #12]
 800ba1a:	40a2      	lsls	r2, r4
 800ba1c:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 800ba1e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800ba20:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ba22:	9a03      	ldr	r2, [sp, #12]
 800ba24:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ba26:	4662      	mov	r2, ip
 800ba28:	0912      	lsrs	r2, r2, #4
 800ba2a:	403a      	ands	r2, r7
 800ba2c:	409a      	lsls	r2, r3
 800ba2e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800ba30:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800ba32:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ba34:	9a02      	ldr	r2, [sp, #8]
 800ba36:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ba38:	688a      	ldr	r2, [r1, #8]
 800ba3a:	40a2      	lsls	r2, r4
 800ba3c:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 800ba3e:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ba40:	2e02      	cmp	r6, #2
 800ba42:	d10d      	bne.n	800ba60 <HAL_GPIO_Init+0x9c>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ba44:	2507      	movs	r5, #7
 800ba46:	270f      	movs	r7, #15
 800ba48:	401d      	ands	r5, r3
 800ba4a:	00ad      	lsls	r5, r5, #2
 800ba4c:	40af      	lsls	r7, r5
        temp = GPIOx->AFR[position >> 3U];
 800ba4e:	08da      	lsrs	r2, r3, #3
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	1882      	adds	r2, r0, r2
 800ba54:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ba56:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800ba58:	690f      	ldr	r7, [r1, #16]
 800ba5a:	40af      	lsls	r7, r5
 800ba5c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800ba5e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800ba60:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ba62:	9a02      	ldr	r2, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba64:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ba66:	402a      	ands	r2, r5
 800ba68:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba6a:	4662      	mov	r2, ip
 800ba6c:	4032      	ands	r2, r6
 800ba6e:	40a2      	lsls	r2, r4
 800ba70:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 800ba72:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ba74:	4662      	mov	r2, ip
 800ba76:	00d2      	lsls	r2, r2, #3
 800ba78:	d551      	bpl.n	800bb1e <HAL_GPIO_Init+0x15a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba7a:	2501      	movs	r5, #1
 800ba7c:	4c2a      	ldr	r4, [pc, #168]	; (800bb28 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800ba7e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba80:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ba82:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800ba84:	001d      	movs	r5, r3
 800ba86:	4035      	ands	r5, r6
 800ba88:	00ad      	lsls	r5, r5, #2
 800ba8a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba8c:	6362      	str	r2, [r4, #52]	; 0x34
 800ba8e:	4a27      	ldr	r2, [pc, #156]	; (800bb2c <HAL_GPIO_Init+0x168>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800ba90:	089c      	lsrs	r4, r3, #2
 800ba92:	00a4      	lsls	r4, r4, #2
 800ba94:	18a4      	adds	r4, r4, r2
 800ba96:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800ba98:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800ba9a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800ba9c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800ba9e:	05ff      	lsls	r7, r7, #23
 800baa0:	2200      	movs	r2, #0
 800baa2:	42b8      	cmp	r0, r7
 800baa4:	d010      	beq.n	800bac8 <HAL_GPIO_Init+0x104>
 800baa6:	4f22      	ldr	r7, [pc, #136]	; (800bb30 <HAL_GPIO_Init+0x16c>)
 800baa8:	3201      	adds	r2, #1
 800baaa:	42b8      	cmp	r0, r7
 800baac:	d00c      	beq.n	800bac8 <HAL_GPIO_Init+0x104>
 800baae:	4f21      	ldr	r7, [pc, #132]	; (800bb34 <HAL_GPIO_Init+0x170>)
 800bab0:	3201      	adds	r2, #1
 800bab2:	42b8      	cmp	r0, r7
 800bab4:	d008      	beq.n	800bac8 <HAL_GPIO_Init+0x104>
 800bab6:	4f20      	ldr	r7, [pc, #128]	; (800bb38 <HAL_GPIO_Init+0x174>)
 800bab8:	0032      	movs	r2, r6
 800baba:	42b8      	cmp	r0, r7
 800babc:	d004      	beq.n	800bac8 <HAL_GPIO_Init+0x104>
 800babe:	4e1f      	ldr	r6, [pc, #124]	; (800bb3c <HAL_GPIO_Init+0x178>)
 800bac0:	3201      	adds	r2, #1
 800bac2:	42b0      	cmp	r0, r6
 800bac4:	d000      	beq.n	800bac8 <HAL_GPIO_Init+0x104>
 800bac6:	9a05      	ldr	r2, [sp, #20]
 800bac8:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800baca:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800bacc:	9d02      	ldr	r5, [sp, #8]
 800bace:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bad0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800bad2:	4a1b      	ldr	r2, [pc, #108]	; (800bb40 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 800bad4:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800bad6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800bad8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 800bada:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800badc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bade:	03ff      	lsls	r7, r7, #15
 800bae0:	d401      	bmi.n	800bae6 <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 800bae2:	0035      	movs	r5, r6
 800bae4:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bae6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800bae8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800baea:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800baec:	9d01      	ldr	r5, [sp, #4]
 800baee:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800baf0:	03bf      	lsls	r7, r7, #14
 800baf2:	d401      	bmi.n	800baf8 <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 800baf4:	0035      	movs	r5, r6
 800baf6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800baf8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800bafa:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800bafc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800bafe:	9d01      	ldr	r5, [sp, #4]
 800bb00:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bb02:	02ff      	lsls	r7, r7, #11
 800bb04:	d401      	bmi.n	800bb0a <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 800bb06:	0035      	movs	r5, r6
 800bb08:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bb0a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800bb0c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800bb0e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800bb10:	9e01      	ldr	r6, [sp, #4]
 800bb12:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bb14:	02bf      	lsls	r7, r7, #10
 800bb16:	d401      	bmi.n	800bb1c <HAL_GPIO_Init+0x158>
        temp &= ~((uint32_t)iocurrent);
 800bb18:	4025      	ands	r5, r4
 800bb1a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800bb1c:	60d6      	str	r6, [r2, #12]
    position++;
 800bb1e:	3301      	adds	r3, #1
 800bb20:	e75b      	b.n	800b9da <HAL_GPIO_Init+0x16>
 800bb22:	46c0      	nop			; (mov r8, r8)
 800bb24:	afffe400 	.word	0xafffe400
 800bb28:	40021000 	.word	0x40021000
 800bb2c:	40010000 	.word	0x40010000
 800bb30:	50000400 	.word	0x50000400
 800bb34:	50000800 	.word	0x50000800
 800bb38:	50000c00 	.word	0x50000c00
 800bb3c:	50001000 	.word	0x50001000
 800bb40:	40010400 	.word	0x40010400

0800bb44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bb44:	6900      	ldr	r0, [r0, #16]
 800bb46:	4008      	ands	r0, r1
 800bb48:	1e41      	subs	r1, r0, #1
 800bb4a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800bb4c:	b2c0      	uxtb	r0, r0
}
 800bb4e:	4770      	bx	lr

0800bb50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	d001      	beq.n	800bb58 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bb54:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800bb56:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800bb58:	6281      	str	r1, [r0, #40]	; 0x28
}
 800bb5a:	e7fc      	b.n	800bb56 <HAL_GPIO_WritePin+0x6>

0800bb5c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bb5c:	4b04      	ldr	r3, [pc, #16]	; (800bb70 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800bb5e:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bb60:	695a      	ldr	r2, [r3, #20]
 800bb62:	4210      	tst	r0, r2
 800bb64:	d002      	beq.n	800bb6c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bb66:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bb68:	f007 f808 	bl	8012b7c <HAL_GPIO_EXTI_Callback>
  }
}
 800bb6c:	bd10      	pop	{r4, pc}
 800bb6e:	46c0      	nop			; (mov r8, r8)
 800bb70:	40010400 	.word	0x40010400

0800bb74 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bb74:	6803      	ldr	r3, [r0, #0]
 800bb76:	699a      	ldr	r2, [r3, #24]
 800bb78:	0792      	lsls	r2, r2, #30
 800bb7a:	d501      	bpl.n	800bb80 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb80:	2201      	movs	r2, #1
 800bb82:	6999      	ldr	r1, [r3, #24]
 800bb84:	4211      	tst	r1, r2
 800bb86:	d102      	bne.n	800bb8e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bb88:	6999      	ldr	r1, [r3, #24]
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	619a      	str	r2, [r3, #24]
  }
}
 800bb8e:	4770      	bx	lr

0800bb90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bb90:	b530      	push	{r4, r5, lr}
 800bb92:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bb94:	0412      	lsls	r2, r2, #16
 800bb96:	6800      	ldr	r0, [r0, #0]
 800bb98:	4322      	orrs	r2, r4
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	4a05      	ldr	r2, [pc, #20]	; (800bbb4 <I2C_TransferConfig+0x24>)
 800bb9e:	6845      	ldr	r5, [r0, #4]
 800bba0:	0589      	lsls	r1, r1, #22
 800bba2:	0d64      	lsrs	r4, r4, #21
 800bba4:	0d89      	lsrs	r1, r1, #22
 800bba6:	4314      	orrs	r4, r2
 800bba8:	43a5      	bics	r5, r4
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	432b      	orrs	r3, r5
 800bbae:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800bbb0:	bd30      	pop	{r4, r5, pc}
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	03ff63ff 	.word	0x03ff63ff

0800bbb8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bbb8:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 800bbba:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bbbc:	07ca      	lsls	r2, r1, #31
 800bbbe:	d508      	bpl.n	800bbd2 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bbc0:	0003      	movs	r3, r0
 800bbc2:	3341      	adds	r3, #65	; 0x41
 800bbc4:	781a      	ldrb	r2, [r3, #0]
 800bbc6:	2328      	movs	r3, #40	; 0x28
 800bbc8:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bbca:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bbcc:	2a28      	cmp	r2, #40	; 0x28
 800bbce:	d000      	beq.n	800bbd2 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbd0:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bbd2:	078a      	lsls	r2, r1, #30
 800bbd4:	d508      	bpl.n	800bbe8 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bbd6:	0002      	movs	r2, r0
 800bbd8:	2428      	movs	r4, #40	; 0x28
 800bbda:	3241      	adds	r2, #65	; 0x41
 800bbdc:	7812      	ldrb	r2, [r2, #0]
 800bbde:	4022      	ands	r2, r4
 800bbe0:	42a2      	cmp	r2, r4
 800bbe2:	d10b      	bne.n	800bbfc <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bbe4:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbe6:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bbe8:	b209      	sxth	r1, r1
 800bbea:	2900      	cmp	r1, #0
 800bbec:	da01      	bge.n	800bbf2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbee:	22b8      	movs	r2, #184	; 0xb8
 800bbf0:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bbf2:	6801      	ldr	r1, [r0, #0]
 800bbf4:	680a      	ldr	r2, [r1, #0]
 800bbf6:	439a      	bics	r2, r3
 800bbf8:	600a      	str	r2, [r1, #0]
}
 800bbfa:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbfc:	22f4      	movs	r2, #244	; 0xf4
 800bbfe:	e7f2      	b.n	800bbe6 <I2C_Disable_IRQ+0x2e>

0800bc00 <I2C_IsAcknowledgeFailed>:
{
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc02:	6803      	ldr	r3, [r0, #0]
{
 800bc04:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc06:	6998      	ldr	r0, [r3, #24]
 800bc08:	2310      	movs	r3, #16
{
 800bc0a:	000e      	movs	r6, r1
 800bc0c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc0e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc10:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d118      	bne.n	800bc48 <I2C_IsAcknowledgeFailed+0x48>
}
 800bc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 800bc18:	1c72      	adds	r2, r6, #1
 800bc1a:	d016      	beq.n	800bc4a <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1c:	f7ff f94a 	bl	800aeb4 <HAL_GetTick>
 800bc20:	1bc0      	subs	r0, r0, r7
 800bc22:	42b0      	cmp	r0, r6
 800bc24:	d801      	bhi.n	800bc2a <I2C_IsAcknowledgeFailed+0x2a>
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	d10e      	bne.n	800bc48 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc2a:	2220      	movs	r2, #32
 800bc2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bc32:	0023      	movs	r3, r4
 800bc34:	3341      	adds	r3, #65	; 0x41
 800bc36:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc38:	0022      	movs	r2, r4
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800bc3e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc40:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800bc42:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800bc44:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800bc46:	e7e6      	b.n	800bc16 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	699a      	ldr	r2, [r3, #24]
 800bc4c:	422a      	tst	r2, r5
 800bc4e:	d0e3      	beq.n	800bc18 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc50:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800bc52:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc54:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc56:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800bc58:	f7ff ff8c 	bl	800bb74 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800bc5c:	6822      	ldr	r2, [r4, #0]
 800bc5e:	4906      	ldr	r1, [pc, #24]	; (800bc78 <I2C_IsAcknowledgeFailed+0x78>)
 800bc60:	6853      	ldr	r3, [r2, #4]
 800bc62:	400b      	ands	r3, r1
 800bc64:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc66:	2304      	movs	r3, #4
 800bc68:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bc6e:	0023      	movs	r3, r4
 800bc70:	3341      	adds	r3, #65	; 0x41
 800bc72:	701d      	strb	r5, [r3, #0]
 800bc74:	e7e0      	b.n	800bc38 <I2C_IsAcknowledgeFailed+0x38>
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	fe00e800 	.word	0xfe00e800

0800bc7c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	0004      	movs	r4, r0
 800bc80:	000d      	movs	r5, r1
 800bc82:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc84:	2604      	movs	r6, #4
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	4233      	tst	r3, r6
 800bc8c:	d111      	bne.n	800bcb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc8e:	003a      	movs	r2, r7
 800bc90:	0029      	movs	r1, r5
 800bc92:	0020      	movs	r0, r4
 800bc94:	f7ff ffb4 	bl	800bc00 <I2C_IsAcknowledgeFailed>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d11a      	bne.n	800bcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc9c:	2120      	movs	r1, #32
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	420a      	tst	r2, r1
 800bca4:	d017      	beq.n	800bcd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bca6:	699a      	ldr	r2, [r3, #24]
 800bca8:	4232      	tst	r2, r6
 800bcaa:	d004      	beq.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800bcac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	d001      	beq.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 800bcb2:	2000      	movs	r0, #0
}
 800bcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcb6:	2120      	movs	r1, #32
 800bcb8:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	480e      	ldr	r0, [pc, #56]	; (800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 800bcbe:	4002      	ands	r2, r0
 800bcc0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800bcc2:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcc4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800bcc6:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcc8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bcca:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800bccc:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcce:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 800bcd0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	e7ee      	b.n	800bcb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcd6:	f7ff f8ed 	bl	800aeb4 <HAL_GetTick>
 800bcda:	1bc0      	subs	r0, r0, r7
 800bcdc:	42a8      	cmp	r0, r5
 800bcde:	d801      	bhi.n	800bce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 800bce0:	2d00      	cmp	r5, #0
 800bce2:	d1d0      	bne.n	800bc86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bce4:	2220      	movs	r2, #32
 800bce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bce8:	4313      	orrs	r3, r2
 800bcea:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bcec:	0023      	movs	r3, r4
 800bcee:	3341      	adds	r3, #65	; 0x41
 800bcf0:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800bcf2:	3440      	adds	r4, #64	; 0x40
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e7eb      	b.n	800bcd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800bcf8:	fe00e800 	.word	0xfe00e800

0800bcfc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	0004      	movs	r4, r0
 800bd00:	000d      	movs	r5, r1
 800bd02:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd04:	2720      	movs	r7, #32
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	423b      	tst	r3, r7
 800bd0c:	d001      	beq.n	800bd12 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800bd0e:	2000      	movs	r0, #0
}
 800bd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd12:	0032      	movs	r2, r6
 800bd14:	0029      	movs	r1, r5
 800bd16:	0020      	movs	r0, r4
 800bd18:	f7ff ff72 	bl	800bc00 <I2C_IsAcknowledgeFailed>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d113      	bne.n	800bd48 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd20:	f7ff f8c8 	bl	800aeb4 <HAL_GetTick>
 800bd24:	1b80      	subs	r0, r0, r6
 800bd26:	42a8      	cmp	r0, r5
 800bd28:	d801      	bhi.n	800bd2e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800bd2a:	2d00      	cmp	r5, #0
 800bd2c:	d1eb      	bne.n	800bd06 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd2e:	2220      	movs	r2, #32
 800bd30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bd32:	4313      	orrs	r3, r2
 800bd34:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bd36:	0023      	movs	r3, r4
 800bd38:	3341      	adds	r3, #65	; 0x41
 800bd3a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd3c:	0022      	movs	r2, r4
 800bd3e:	2300      	movs	r3, #0
 800bd40:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800bd42:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd44:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800bd46:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800bd48:	2001      	movs	r0, #1
 800bd4a:	e7e1      	b.n	800bd10 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800bd4c <I2C_WaitOnFlagUntilTimeout>:
{
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	0004      	movs	r4, r0
 800bd50:	000e      	movs	r6, r1
 800bd52:	0017      	movs	r7, r2
 800bd54:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	6993      	ldr	r3, [r2, #24]
 800bd5a:	4033      	ands	r3, r6
 800bd5c:	1b9b      	subs	r3, r3, r6
 800bd5e:	4259      	negs	r1, r3
 800bd60:	414b      	adcs	r3, r1
 800bd62:	42bb      	cmp	r3, r7
 800bd64:	d001      	beq.n	800bd6a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800bd66:	2000      	movs	r0, #0
 800bd68:	e017      	b.n	800bd9a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800bd6a:	1c6b      	adds	r3, r5, #1
 800bd6c:	d0f4      	beq.n	800bd58 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd6e:	f7ff f8a1 	bl	800aeb4 <HAL_GetTick>
 800bd72:	9b06      	ldr	r3, [sp, #24]
 800bd74:	1ac0      	subs	r0, r0, r3
 800bd76:	42a8      	cmp	r0, r5
 800bd78:	d801      	bhi.n	800bd7e <I2C_WaitOnFlagUntilTimeout+0x32>
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	d1eb      	bne.n	800bd56 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd7e:	2220      	movs	r2, #32
 800bd80:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800bd82:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd84:	4313      	orrs	r3, r2
 800bd86:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bd88:	0023      	movs	r3, r4
 800bd8a:	3341      	adds	r3, #65	; 0x41
 800bd8c:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd8e:	0022      	movs	r2, r4
 800bd90:	2300      	movs	r3, #0
 800bd92:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800bd94:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd96:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800bd98:	7023      	strb	r3, [r4, #0]
}
 800bd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd9c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	0004      	movs	r4, r0
 800bda0:	000d      	movs	r5, r1
 800bda2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bda4:	2702      	movs	r7, #2
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	423b      	tst	r3, r7
 800bdac:	d001      	beq.n	800bdb2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800bdae:	2000      	movs	r0, #0
}
 800bdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdb2:	0032      	movs	r2, r6
 800bdb4:	0029      	movs	r1, r5
 800bdb6:	0020      	movs	r0, r4
 800bdb8:	f7ff ff22 	bl	800bc00 <I2C_IsAcknowledgeFailed>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d115      	bne.n	800bdec <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800bdc0:	1c6b      	adds	r3, r5, #1
 800bdc2:	d0f0      	beq.n	800bda6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdc4:	f7ff f876 	bl	800aeb4 <HAL_GetTick>
 800bdc8:	1b80      	subs	r0, r0, r6
 800bdca:	42a8      	cmp	r0, r5
 800bdcc:	d801      	bhi.n	800bdd2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	d1e9      	bne.n	800bda6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bdda:	0023      	movs	r3, r4
 800bddc:	3341      	adds	r3, #65	; 0x41
 800bdde:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bde0:	0022      	movs	r2, r4
 800bde2:	2300      	movs	r3, #0
 800bde4:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800bde6:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bde8:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800bdea:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800bdec:	2001      	movs	r0, #1
 800bdee:	e7df      	b.n	800bdb0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800bdf0 <I2C_RequestMemoryWrite>:
{
 800bdf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdf2:	0014      	movs	r4, r2
 800bdf4:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	4b15      	ldr	r3, [pc, #84]	; (800be50 <I2C_RequestMemoryWrite+0x60>)
{
 800bdfa:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2380      	movs	r3, #128	; 0x80
 800be00:	045b      	lsls	r3, r3, #17
 800be02:	f7ff fec5 	bl	800bb90 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be06:	9a07      	ldr	r2, [sp, #28]
 800be08:	9906      	ldr	r1, [sp, #24]
 800be0a:	0028      	movs	r0, r5
 800be0c:	f7ff ffc6 	bl	800bd9c <I2C_WaitOnTXISFlagUntilTimeout>
 800be10:	2800      	cmp	r0, #0
 800be12:	d001      	beq.n	800be18 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 800be14:	2001      	movs	r0, #1
}
 800be16:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800be18:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be1a:	2e01      	cmp	r6, #1
 800be1c:	d10d      	bne.n	800be3a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be1e:	b2e4      	uxtb	r4, r4
 800be20:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800be22:	9b07      	ldr	r3, [sp, #28]
 800be24:	2200      	movs	r2, #0
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	2180      	movs	r1, #128	; 0x80
 800be2a:	9b06      	ldr	r3, [sp, #24]
 800be2c:	0028      	movs	r0, r5
 800be2e:	f7ff ff8d 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800be32:	1e43      	subs	r3, r0, #1
 800be34:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800be36:	b2c0      	uxtb	r0, r0
 800be38:	e7ed      	b.n	800be16 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be3a:	0a22      	lsrs	r2, r4, #8
 800be3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be3e:	9906      	ldr	r1, [sp, #24]
 800be40:	9a07      	ldr	r2, [sp, #28]
 800be42:	0028      	movs	r0, r5
 800be44:	f7ff ffaa 	bl	800bd9c <I2C_WaitOnTXISFlagUntilTimeout>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d1e3      	bne.n	800be14 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	e7e6      	b.n	800be1e <I2C_RequestMemoryWrite+0x2e>
 800be50:	80002000 	.word	0x80002000

0800be54 <I2C_RequestMemoryRead>:
{
 800be54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be56:	0005      	movs	r5, r0
 800be58:	0014      	movs	r4, r2
 800be5a:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	4b15      	ldr	r3, [pc, #84]	; (800beb4 <I2C_RequestMemoryRead+0x60>)
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	2300      	movs	r3, #0
 800be64:	f7ff fe94 	bl	800bb90 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be68:	9a07      	ldr	r2, [sp, #28]
 800be6a:	9906      	ldr	r1, [sp, #24]
 800be6c:	0028      	movs	r0, r5
 800be6e:	f7ff ff95 	bl	800bd9c <I2C_WaitOnTXISFlagUntilTimeout>
 800be72:	2800      	cmp	r0, #0
 800be74:	d001      	beq.n	800be7a <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 800be76:	2001      	movs	r0, #1
}
 800be78:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800be7a:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be7c:	2e01      	cmp	r6, #1
 800be7e:	d10d      	bne.n	800be9c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be80:	b2e4      	uxtb	r4, r4
 800be82:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800be84:	9b07      	ldr	r3, [sp, #28]
 800be86:	2200      	movs	r2, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2140      	movs	r1, #64	; 0x40
 800be8c:	9b06      	ldr	r3, [sp, #24]
 800be8e:	0028      	movs	r0, r5
 800be90:	f7ff ff5c 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800be94:	1e43      	subs	r3, r0, #1
 800be96:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800be98:	b2c0      	uxtb	r0, r0
 800be9a:	e7ed      	b.n	800be78 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be9c:	0a22      	lsrs	r2, r4, #8
 800be9e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bea0:	9906      	ldr	r1, [sp, #24]
 800bea2:	9a07      	ldr	r2, [sp, #28]
 800bea4:	0028      	movs	r0, r5
 800bea6:	f7ff ff79 	bl	800bd9c <I2C_WaitOnTXISFlagUntilTimeout>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d1e3      	bne.n	800be76 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800beae:	682b      	ldr	r3, [r5, #0]
 800beb0:	e7e6      	b.n	800be80 <I2C_RequestMemoryRead+0x2c>
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	80002000 	.word	0x80002000

0800beb8 <HAL_I2C_Init>:
{
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	0004      	movs	r4, r0
    return HAL_ERROR;
 800bebc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800bebe:	2c00      	cmp	r4, #0
 800bec0:	d03f      	beq.n	800bf42 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bec2:	0025      	movs	r5, r4
 800bec4:	3541      	adds	r5, #65	; 0x41
 800bec6:	782b      	ldrb	r3, [r5, #0]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d105      	bne.n	800beda <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800bece:	0022      	movs	r2, r4
 800bed0:	3240      	adds	r2, #64	; 0x40
 800bed2:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 800bed4:	0020      	movs	r0, r4
 800bed6:	f006 fb03 	bl	80124e0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800beda:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800bedc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bede:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800bee0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bee2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	68a6      	ldr	r6, [r4, #8]
 800bee8:	438a      	bics	r2, r1
 800beea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800beec:	6861      	ldr	r1, [r4, #4]
 800beee:	4a1a      	ldr	r2, [pc, #104]	; (800bf58 <HAL_I2C_Init+0xa0>)
 800bef0:	400a      	ands	r2, r1
 800bef2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bef4:	6899      	ldr	r1, [r3, #8]
 800bef6:	4a19      	ldr	r2, [pc, #100]	; (800bf5c <HAL_I2C_Init+0xa4>)
 800bef8:	4011      	ands	r1, r2
 800befa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800befc:	2801      	cmp	r0, #1
 800befe:	d121      	bne.n	800bf44 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bf00:	2180      	movs	r1, #128	; 0x80
 800bf02:	0209      	lsls	r1, r1, #8
 800bf04:	4331      	orrs	r1, r6
 800bf06:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bf08:	6858      	ldr	r0, [r3, #4]
 800bf0a:	4915      	ldr	r1, [pc, #84]	; (800bf60 <HAL_I2C_Init+0xa8>)
 800bf0c:	4301      	orrs	r1, r0
 800bf0e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bf10:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf12:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bf14:	400a      	ands	r2, r1
 800bf16:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bf18:	6961      	ldr	r1, [r4, #20]
 800bf1a:	6922      	ldr	r2, [r4, #16]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	69a1      	ldr	r1, [r4, #24]
 800bf20:	0209      	lsls	r1, r1, #8
 800bf22:	430a      	orrs	r2, r1
 800bf24:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bf26:	6a21      	ldr	r1, [r4, #32]
 800bf28:	69e2      	ldr	r2, [r4, #28]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800bf2e:	2201      	movs	r2, #1
 800bf30:	6819      	ldr	r1, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800bf36:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf38:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bf3a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf3c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf3e:	3442      	adds	r4, #66	; 0x42
 800bf40:	7020      	strb	r0, [r4, #0]
}
 800bf42:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bf44:	2184      	movs	r1, #132	; 0x84
 800bf46:	0209      	lsls	r1, r1, #8
 800bf48:	4331      	orrs	r1, r6
 800bf4a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bf4c:	2802      	cmp	r0, #2
 800bf4e:	d1db      	bne.n	800bf08 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bf50:	2180      	movs	r1, #128	; 0x80
 800bf52:	0109      	lsls	r1, r1, #4
 800bf54:	6059      	str	r1, [r3, #4]
 800bf56:	e7d7      	b.n	800bf08 <HAL_I2C_Init+0x50>
 800bf58:	f0ffffff 	.word	0xf0ffffff
 800bf5c:	ffff7fff 	.word	0xffff7fff
 800bf60:	02008000 	.word	0x02008000

0800bf64 <HAL_I2C_Master_Transmit>:
{
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf66:	0005      	movs	r5, r0
{
 800bf68:	b087      	sub	sp, #28
 800bf6a:	9103      	str	r1, [sp, #12]
 800bf6c:	9204      	str	r2, [sp, #16]
 800bf6e:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf70:	3541      	adds	r5, #65	; 0x41
 800bf72:	782b      	ldrb	r3, [r5, #0]
{
 800bf74:	0004      	movs	r4, r0
    return HAL_BUSY;
 800bf76:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf78:	2b20      	cmp	r3, #32
 800bf7a:	d114      	bne.n	800bfa6 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 800bf7c:	0023      	movs	r3, r4
 800bf7e:	3340      	adds	r3, #64	; 0x40
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	2a01      	cmp	r2, #1
 800bf84:	d00f      	beq.n	800bfa6 <HAL_I2C_Master_Transmit+0x42>
 800bf86:	2601      	movs	r6, #1
 800bf88:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800bf8a:	f7fe ff93 	bl	800aeb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf8e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800bf90:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf92:	9000      	str	r0, [sp, #0]
 800bf94:	2319      	movs	r3, #25
 800bf96:	0032      	movs	r2, r6
 800bf98:	0209      	lsls	r1, r1, #8
 800bf9a:	0020      	movs	r0, r4
 800bf9c:	f7ff fed6 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d002      	beq.n	800bfaa <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 800bfa4:	2001      	movs	r0, #1
}
 800bfa6:	b007      	add	sp, #28
 800bfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfaa:	2321      	movs	r3, #33	; 0x21
 800bfac:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bfae:	0025      	movs	r5, r4
 800bfb0:	3b11      	subs	r3, #17
 800bfb2:	3542      	adds	r5, #66	; 0x42
 800bfb4:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 800bfb6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfb8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800bfba:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800bfbc:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800bfbe:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800bfc0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bfc4:	4b30      	ldr	r3, [pc, #192]	; (800c088 <HAL_I2C_Master_Transmit+0x124>)
 800bfc6:	2aff      	cmp	r2, #255	; 0xff
 800bfc8:	d921      	bls.n	800c00e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfca:	22ff      	movs	r2, #255	; 0xff
 800bfcc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800bfd4:	9903      	ldr	r1, [sp, #12]
 800bfd6:	0020      	movs	r0, r4
 800bfd8:	f7ff fdda 	bl	800bb90 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfdc:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800bfde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfe0:	003a      	movs	r2, r7
 800bfe2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfe4:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d119      	bne.n	800c01e <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfea:	f7ff fe87 	bl	800bcfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d1d8      	bne.n	800bfa4 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bff2:	2120      	movs	r1, #32
 800bff4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800bff6:	4e25      	ldr	r6, [pc, #148]	; (800c08c <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bff8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	4032      	ands	r2, r6
 800bffe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c000:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800c002:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800c004:	3341      	adds	r3, #65	; 0x41
 800c006:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c008:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800c00a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800c00c:	e7cb      	b.n	800bfa6 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800c00e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c010:	b292      	uxth	r2, r2
 800c012:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	2380      	movs	r3, #128	; 0x80
 800c018:	b2d2      	uxtb	r2, r2
 800c01a:	049b      	lsls	r3, r3, #18
 800c01c:	e7da      	b.n	800bfd4 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c01e:	f7ff febd 	bl	800bd9c <I2C_WaitOnTXISFlagUntilTimeout>
 800c022:	2800      	cmp	r0, #0
 800c024:	d1be      	bne.n	800bfa4 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c028:	6822      	ldr	r2, [r4, #0]
 800c02a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800c02c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c02e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c030:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c034:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c036:	3b01      	subs	r3, #1
 800c038:	b29b      	uxth	r3, r3
 800c03a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c03c:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c03e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c040:	b292      	uxth	r2, r2
 800c042:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c044:	2b00      	cmp	r3, #0
 800c046:	d0ca      	beq.n	800bfde <HAL_I2C_Master_Transmit+0x7a>
 800c048:	2a00      	cmp	r2, #0
 800c04a:	d1c8      	bne.n	800bfde <HAL_I2C_Master_Transmit+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c04c:	9700      	str	r7, [sp, #0]
 800c04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c050:	2180      	movs	r1, #128	; 0x80
 800c052:	0020      	movs	r0, r4
 800c054:	f7ff fe7a 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d1a3      	bne.n	800bfa4 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c05c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c05e:	2bff      	cmp	r3, #255	; 0xff
 800c060:	d909      	bls.n	800c076 <HAL_I2C_Master_Transmit+0x112>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c062:	2380      	movs	r3, #128	; 0x80
 800c064:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c066:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c068:	045b      	lsls	r3, r3, #17
 800c06a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c06c:	9903      	ldr	r1, [sp, #12]
 800c06e:	0020      	movs	r0, r4
 800c070:	f7ff fd8e 	bl	800bb90 <I2C_TransferConfig>
 800c074:	e7b3      	b.n	800bfde <HAL_I2C_Master_Transmit+0x7a>
 800c076:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800c078:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c07a:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800c07c:	b292      	uxth	r2, r2
 800c07e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c080:	b2d2      	uxtb	r2, r2
 800c082:	9000      	str	r0, [sp, #0]
 800c084:	e7f2      	b.n	800c06c <HAL_I2C_Master_Transmit+0x108>
 800c086:	46c0      	nop			; (mov r8, r8)
 800c088:	80002000 	.word	0x80002000
 800c08c:	fe00e800 	.word	0xfe00e800

0800c090 <HAL_I2C_Master_Receive>:
{
 800c090:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c092:	0005      	movs	r5, r0
{
 800c094:	b087      	sub	sp, #28
 800c096:	9103      	str	r1, [sp, #12]
 800c098:	9204      	str	r2, [sp, #16]
 800c09a:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c09c:	3541      	adds	r5, #65	; 0x41
 800c09e:	782b      	ldrb	r3, [r5, #0]
{
 800c0a0:	0004      	movs	r4, r0
    return HAL_BUSY;
 800c0a2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0a4:	2b20      	cmp	r3, #32
 800c0a6:	d114      	bne.n	800c0d2 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 800c0a8:	0023      	movs	r3, r4
 800c0aa:	3340      	adds	r3, #64	; 0x40
 800c0ac:	781a      	ldrb	r2, [r3, #0]
 800c0ae:	2a01      	cmp	r2, #1
 800c0b0:	d00f      	beq.n	800c0d2 <HAL_I2C_Master_Receive+0x42>
 800c0b2:	2601      	movs	r6, #1
 800c0b4:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800c0b6:	f7fe fefd 	bl	800aeb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c0ba:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800c0bc:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c0be:	9000      	str	r0, [sp, #0]
 800c0c0:	2319      	movs	r3, #25
 800c0c2:	0032      	movs	r2, r6
 800c0c4:	0209      	lsls	r1, r1, #8
 800c0c6:	0020      	movs	r0, r4
 800c0c8:	f7ff fe40 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	d002      	beq.n	800c0d6 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 800c0d0:	2001      	movs	r0, #1
}
 800c0d2:	b007      	add	sp, #28
 800c0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0d6:	2322      	movs	r3, #34	; 0x22
 800c0d8:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c0da:	0025      	movs	r5, r4
 800c0dc:	3b12      	subs	r3, #18
 800c0de:	3542      	adds	r5, #66	; 0x42
 800c0e0:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 800c0e2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0e4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800c0e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800c0e8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800c0ea:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800c0ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c0f0:	4b30      	ldr	r3, [pc, #192]	; (800c1b4 <HAL_I2C_Master_Receive+0x124>)
 800c0f2:	2aff      	cmp	r2, #255	; 0xff
 800c0f4:	d921      	bls.n	800c13a <HAL_I2C_Master_Receive+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0f6:	22ff      	movs	r2, #255	; 0xff
 800c0f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	2380      	movs	r3, #128	; 0x80
 800c0fe:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c100:	9903      	ldr	r1, [sp, #12]
 800c102:	0020      	movs	r0, r4
 800c104:	f7ff fd44 	bl	800bb90 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c108:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800c10a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c10c:	003a      	movs	r2, r7
 800c10e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c110:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 800c112:	2b00      	cmp	r3, #0
 800c114:	d119      	bne.n	800c14a <HAL_I2C_Master_Receive+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c116:	f7ff fdf1 	bl	800bcfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1d8      	bne.n	800c0d0 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c11e:	2120      	movs	r1, #32
 800c120:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800c122:	4e25      	ldr	r6, [pc, #148]	; (800c1b8 <HAL_I2C_Master_Receive+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c124:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	4032      	ands	r2, r6
 800c12a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c12c:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800c12e:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800c130:	3341      	adds	r3, #65	; 0x41
 800c132:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c134:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800c136:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800c138:	e7cb      	b.n	800c0d2 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800c13a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c13c:	b292      	uxth	r2, r2
 800c13e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	2380      	movs	r3, #128	; 0x80
 800c144:	b2d2      	uxtb	r2, r2
 800c146:	049b      	lsls	r3, r3, #18
 800c148:	e7da      	b.n	800c100 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c14a:	f7ff fd97 	bl	800bc7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d1be      	bne.n	800c0d0 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800c15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c15c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c15e:	3301      	adds	r3, #1
 800c160:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c162:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c164:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800c166:	3b01      	subs	r3, #1
 800c168:	b29b      	uxth	r3, r3
 800c16a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c16c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c16e:	b292      	uxth	r2, r2
 800c170:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0c9      	beq.n	800c10a <HAL_I2C_Master_Receive+0x7a>
 800c176:	2a00      	cmp	r2, #0
 800c178:	d1c7      	bne.n	800c10a <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c17a:	9700      	str	r7, [sp, #0]
 800c17c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c17e:	2180      	movs	r1, #128	; 0x80
 800c180:	0020      	movs	r0, r4
 800c182:	f7ff fde3 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c186:	2800      	cmp	r0, #0
 800c188:	d1a2      	bne.n	800c0d0 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c18a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c18c:	2bff      	cmp	r3, #255	; 0xff
 800c18e:	d909      	bls.n	800c1a4 <HAL_I2C_Master_Receive+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c190:	2380      	movs	r3, #128	; 0x80
 800c192:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c194:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c196:	045b      	lsls	r3, r3, #17
 800c198:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c19a:	9903      	ldr	r1, [sp, #12]
 800c19c:	0020      	movs	r0, r4
 800c19e:	f7ff fcf7 	bl	800bb90 <I2C_TransferConfig>
 800c1a2:	e7b2      	b.n	800c10a <HAL_I2C_Master_Receive+0x7a>
 800c1a4:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800c1a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c1a8:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800c1aa:	b292      	uxth	r2, r2
 800c1ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c1ae:	b2d2      	uxtb	r2, r2
 800c1b0:	9000      	str	r0, [sp, #0]
 800c1b2:	e7f2      	b.n	800c19a <HAL_I2C_Master_Receive+0x10a>
 800c1b4:	80002400 	.word	0x80002400
 800c1b8:	fe00e800 	.word	0xfe00e800

0800c1bc <HAL_I2C_Mem_Write>:
{
 800c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1be:	0007      	movs	r7, r0
{
 800c1c0:	b089      	sub	sp, #36	; 0x24
 800c1c2:	9307      	str	r3, [sp, #28]
 800c1c4:	ab0e      	add	r3, sp, #56	; 0x38
 800c1c6:	9206      	str	r2, [sp, #24]
 800c1c8:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1ca:	3741      	adds	r7, #65	; 0x41
{
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	9204      	str	r2, [sp, #16]
 800c1d0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1d2:	783b      	ldrb	r3, [r7, #0]
{
 800c1d4:	0004      	movs	r4, r0
 800c1d6:	000d      	movs	r5, r1
    return HAL_BUSY;
 800c1d8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1da:	2b20      	cmp	r3, #32
 800c1dc:	d108      	bne.n	800c1f0 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	d002      	beq.n	800c1e8 <HAL_I2C_Mem_Write+0x2c>
 800c1e2:	9b05      	ldr	r3, [sp, #20]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d105      	bne.n	800c1f4 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c1e8:	2380      	movs	r3, #128	; 0x80
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800c1ee:	2001      	movs	r0, #1
}
 800c1f0:	b009      	add	sp, #36	; 0x24
 800c1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800c1f4:	0023      	movs	r3, r4
 800c1f6:	3340      	adds	r3, #64	; 0x40
 800c1f8:	9303      	str	r3, [sp, #12]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d0f7      	beq.n	800c1f0 <HAL_I2C_Mem_Write+0x34>
 800c200:	2201      	movs	r2, #1
 800c202:	9b03      	ldr	r3, [sp, #12]
 800c204:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c206:	f7fe fe55 	bl	800aeb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c20a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800c20c:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c20e:	9000      	str	r0, [sp, #0]
 800c210:	2319      	movs	r3, #25
 800c212:	2201      	movs	r2, #1
 800c214:	0209      	lsls	r1, r1, #8
 800c216:	0020      	movs	r0, r4
 800c218:	f7ff fd98 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c21c:	1e06      	subs	r6, r0, #0
 800c21e:	d1e6      	bne.n	800c1ee <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c220:	2321      	movs	r3, #33	; 0x21
 800c222:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c224:	0027      	movs	r7, r4
 800c226:	331f      	adds	r3, #31
 800c228:	3742      	adds	r7, #66	; 0x42
 800c22a:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 800c22c:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c22e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800c230:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800c232:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800c234:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800c236:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c238:	9b02      	ldr	r3, [sp, #8]
 800c23a:	9a06      	ldr	r2, [sp, #24]
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c240:	0029      	movs	r1, r5
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	0020      	movs	r0, r4
 800c246:	9b07      	ldr	r3, [sp, #28]
 800c248:	f7ff fdd2 	bl	800bdf0 <I2C_RequestMemoryWrite>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d002      	beq.n	800c256 <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 800c250:	9b03      	ldr	r3, [sp, #12]
 800c252:	701e      	strb	r6, [r3, #0]
 800c254:	e7cb      	b.n	800c1ee <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c256:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c258:	2bff      	cmp	r3, #255	; 0xff
 800c25a:	d953      	bls.n	800c304 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c25c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c25e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c260:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c262:	045b      	lsls	r3, r3, #17
 800c264:	9000      	str	r0, [sp, #0]
 800c266:	0029      	movs	r1, r5
 800c268:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c26a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c26c:	f7ff fc90 	bl	800bb90 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c270:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c272:	9a02      	ldr	r2, [sp, #8]
 800c274:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c276:	0020      	movs	r0, r4
 800c278:	f7ff fd90 	bl	800bd9c <I2C_WaitOnTXISFlagUntilTimeout>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d1b6      	bne.n	800c1ee <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800c286:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c288:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c28a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c28c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c28e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c290:	3b01      	subs	r3, #1
 800c292:	b29b      	uxth	r3, r3
 800c294:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c296:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c298:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c29a:	b292      	uxth	r2, r2
 800c29c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d017      	beq.n	800c2d2 <HAL_I2C_Mem_Write+0x116>
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d115      	bne.n	800c2d2 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c2a6:	9b02      	ldr	r3, [sp, #8]
 800c2a8:	2180      	movs	r1, #128	; 0x80
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	0020      	movs	r0, r4
 800c2ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2b0:	f7ff fd4c 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d19a      	bne.n	800c1ee <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c2ba:	2bff      	cmp	r3, #255	; 0xff
 800c2bc:	d92a      	bls.n	800c314 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2be:	23ff      	movs	r3, #255	; 0xff
 800c2c0:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c2c2:	2380      	movs	r3, #128	; 0x80
 800c2c4:	22ff      	movs	r2, #255	; 0xff
 800c2c6:	9000      	str	r0, [sp, #0]
 800c2c8:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c2ca:	0029      	movs	r1, r5
 800c2cc:	0020      	movs	r0, r4
 800c2ce:	f7ff fc5f 	bl	800bb90 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c2d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1cc      	bne.n	800c272 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c2d8:	9a02      	ldr	r2, [sp, #8]
 800c2da:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c2dc:	0020      	movs	r0, r4
 800c2de:	f7ff fd0d 	bl	800bcfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d000      	beq.n	800c2e8 <HAL_I2C_Mem_Write+0x12c>
 800c2e6:	e782      	b.n	800c1ee <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2e8:	2120      	movs	r1, #32
 800c2ea:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800c2ec:	4d0d      	ldr	r5, [pc, #52]	; (800c324 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	402a      	ands	r2, r5
 800c2f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c2f6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800c2f8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800c2fa:	3341      	adds	r3, #65	; 0x41
 800c2fc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c2fe:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 800c300:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800c302:	e775      	b.n	800c1f0 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c304:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800c306:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c308:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800c30a:	b292      	uxth	r2, r2
 800c30c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c30e:	b2d2      	uxtb	r2, r2
 800c310:	9000      	str	r0, [sp, #0]
 800c312:	e7a8      	b.n	800c266 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800c314:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c316:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800c318:	b292      	uxth	r2, r2
 800c31a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	9000      	str	r0, [sp, #0]
 800c320:	e7d3      	b.n	800c2ca <HAL_I2C_Mem_Write+0x10e>
 800c322:	46c0      	nop			; (mov r8, r8)
 800c324:	fe00e800 	.word	0xfe00e800

0800c328 <HAL_I2C_Mem_Read>:
{
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c32a:	0007      	movs	r7, r0
{
 800c32c:	b089      	sub	sp, #36	; 0x24
 800c32e:	9307      	str	r3, [sp, #28]
 800c330:	ab0e      	add	r3, sp, #56	; 0x38
 800c332:	9206      	str	r2, [sp, #24]
 800c334:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c336:	3741      	adds	r7, #65	; 0x41
{
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	9204      	str	r2, [sp, #16]
 800c33c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c33e:	783b      	ldrb	r3, [r7, #0]
{
 800c340:	0004      	movs	r4, r0
 800c342:	000d      	movs	r5, r1
    return HAL_BUSY;
 800c344:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c346:	2b20      	cmp	r3, #32
 800c348:	d108      	bne.n	800c35c <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	d002      	beq.n	800c354 <HAL_I2C_Mem_Read+0x2c>
 800c34e:	9b05      	ldr	r3, [sp, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d105      	bne.n	800c360 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c354:	2380      	movs	r3, #128	; 0x80
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800c35a:	2001      	movs	r0, #1
}
 800c35c:	b009      	add	sp, #36	; 0x24
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800c360:	0023      	movs	r3, r4
 800c362:	3340      	adds	r3, #64	; 0x40
 800c364:	9303      	str	r3, [sp, #12]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d0f7      	beq.n	800c35c <HAL_I2C_Mem_Read+0x34>
 800c36c:	2201      	movs	r2, #1
 800c36e:	9b03      	ldr	r3, [sp, #12]
 800c370:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c372:	f7fe fd9f 	bl	800aeb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c376:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800c378:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c37a:	9000      	str	r0, [sp, #0]
 800c37c:	2319      	movs	r3, #25
 800c37e:	2201      	movs	r2, #1
 800c380:	0209      	lsls	r1, r1, #8
 800c382:	0020      	movs	r0, r4
 800c384:	f7ff fce2 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c388:	1e06      	subs	r6, r0, #0
 800c38a:	d1e6      	bne.n	800c35a <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c38c:	2322      	movs	r3, #34	; 0x22
 800c38e:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c390:	0027      	movs	r7, r4
 800c392:	331e      	adds	r3, #30
 800c394:	3742      	adds	r7, #66	; 0x42
 800c396:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 800c398:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c39a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800c39c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800c39e:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800c3a0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800c3a2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c3a4:	9b02      	ldr	r3, [sp, #8]
 800c3a6:	9a06      	ldr	r2, [sp, #24]
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ac:	0029      	movs	r1, r5
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	0020      	movs	r0, r4
 800c3b2:	9b07      	ldr	r3, [sp, #28]
 800c3b4:	f7ff fd4e 	bl	800be54 <I2C_RequestMemoryRead>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d002      	beq.n	800c3c2 <HAL_I2C_Mem_Read+0x9a>
      __HAL_UNLOCK(hi2c);
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	701e      	strb	r6, [r3, #0]
 800c3c0:	e7cb      	b.n	800c35a <HAL_I2C_Mem_Read+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c3c4:	4b35      	ldr	r3, [pc, #212]	; (800c49c <HAL_I2C_Mem_Read+0x174>)
 800c3c6:	2aff      	cmp	r2, #255	; 0xff
 800c3c8:	d958      	bls.n	800c47c <HAL_I2C_Mem_Read+0x154>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3ca:	22ff      	movs	r2, #255	; 0xff
 800c3cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	2380      	movs	r3, #128	; 0x80
 800c3d2:	045b      	lsls	r3, r3, #17
 800c3d4:	0029      	movs	r1, r5
 800c3d6:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c3d8:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c3da:	f7ff fbd9 	bl	800bb90 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c3de:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	2104      	movs	r1, #4
 800c3e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ea:	0020      	movs	r0, r4
 800c3ec:	f7ff fcae 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d1b2      	bne.n	800c35a <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fa:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800c3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c3fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c400:	3301      	adds	r3, #1
 800c402:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c404:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c406:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c40e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c410:	b292      	uxth	r2, r2
 800c412:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c414:	2b00      	cmp	r3, #0
 800c416:	d018      	beq.n	800c44a <HAL_I2C_Mem_Read+0x122>
 800c418:	2a00      	cmp	r2, #0
 800c41a:	d116      	bne.n	800c44a <HAL_I2C_Mem_Read+0x122>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	2180      	movs	r1, #128	; 0x80
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	0020      	movs	r0, r4
 800c424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c426:	f7ff fc91 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d000      	beq.n	800c430 <HAL_I2C_Mem_Read+0x108>
 800c42e:	e794      	b.n	800c35a <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c430:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c432:	2bff      	cmp	r3, #255	; 0xff
 800c434:	d92a      	bls.n	800c48c <HAL_I2C_Mem_Read+0x164>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c436:	23ff      	movs	r3, #255	; 0xff
 800c438:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c43a:	2380      	movs	r3, #128	; 0x80
 800c43c:	22ff      	movs	r2, #255	; 0xff
 800c43e:	9000      	str	r0, [sp, #0]
 800c440:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c442:	0029      	movs	r1, r5
 800c444:	0020      	movs	r0, r4
 800c446:	f7ff fba3 	bl	800bb90 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c44a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1c7      	bne.n	800c3e0 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c450:	9a02      	ldr	r2, [sp, #8]
 800c452:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c454:	0020      	movs	r0, r4
 800c456:	f7ff fc51 	bl	800bcfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d000      	beq.n	800c460 <HAL_I2C_Mem_Read+0x138>
 800c45e:	e77c      	b.n	800c35a <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c460:	2120      	movs	r1, #32
 800c462:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800c464:	4d0e      	ldr	r5, [pc, #56]	; (800c4a0 <HAL_I2C_Mem_Read+0x178>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c466:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	402a      	ands	r2, r5
 800c46c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c46e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800c470:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800c472:	3341      	adds	r3, #65	; 0x41
 800c474:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c476:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 800c478:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800c47a:	e76f      	b.n	800c35c <HAL_I2C_Mem_Read+0x34>
      hi2c->XferSize = hi2c->XferCount;
 800c47c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c47e:	b292      	uxth	r2, r2
 800c480:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	2380      	movs	r3, #128	; 0x80
 800c486:	b2d2      	uxtb	r2, r2
 800c488:	049b      	lsls	r3, r3, #18
 800c48a:	e7a3      	b.n	800c3d4 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 800c48c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c48e:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800c490:	b292      	uxth	r2, r2
 800c492:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	9000      	str	r0, [sp, #0]
 800c498:	e7d3      	b.n	800c442 <HAL_I2C_Mem_Read+0x11a>
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	80002400 	.word	0x80002400
 800c4a0:	fe00e800 	.word	0xfe00e800

0800c4a4 <HAL_I2C_IsDeviceReady>:
{
 800c4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4a6:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800c4a8:	2300      	movs	r3, #0
{
 800c4aa:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 800c4ac:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4ae:	0003      	movs	r3, r0
 800c4b0:	3341      	adds	r3, #65	; 0x41
{
 800c4b2:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4b4:	9302      	str	r3, [sp, #8]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
{
 800c4b8:	0004      	movs	r4, r0
    return HAL_BUSY;
 800c4ba:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	d157      	bne.n	800c570 <HAL_I2C_IsDeviceReady+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	699a      	ldr	r2, [r3, #24]
 800c4c4:	2380      	movs	r3, #128	; 0x80
 800c4c6:	021b      	lsls	r3, r3, #8
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	d151      	bne.n	800c570 <HAL_I2C_IsDeviceReady+0xcc>
    __HAL_LOCK(hi2c);
 800c4cc:	0026      	movs	r6, r4
 800c4ce:	3640      	adds	r6, #64	; 0x40
 800c4d0:	7832      	ldrb	r2, [r6, #0]
 800c4d2:	2a01      	cmp	r2, #1
 800c4d4:	d04c      	beq.n	800c570 <HAL_I2C_IsDeviceReady+0xcc>
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	7032      	strb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4da:	9e02      	ldr	r6, [sp, #8]
 800c4dc:	3022      	adds	r0, #34	; 0x22
 800c4de:	0589      	lsls	r1, r1, #22
 800c4e0:	7030      	strb	r0, [r6, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4e2:	6463      	str	r3, [r4, #68]	; 0x44
 800c4e4:	0d8b      	lsrs	r3, r1, #22
 800c4e6:	9304      	str	r3, [sp, #16]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4e8:	9203      	str	r2, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c4ea:	68e3      	ldr	r3, [r4, #12]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d121      	bne.n	800c534 <HAL_I2C_IsDeviceReady+0x90>
 800c4f0:	4b34      	ldr	r3, [pc, #208]	; (800c5c4 <HAL_I2C_IsDeviceReady+0x120>)
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	6822      	ldr	r2, [r4, #0]
 800c4f8:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800c4fa:	f7fe fcdb 	bl	800aeb4 <HAL_GetTick>
 800c4fe:	0006      	movs	r6, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	9903      	ldr	r1, [sp, #12]
 800c504:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c506:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c508:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c50a:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c50c:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c50e:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c510:	4313      	orrs	r3, r2
 800c512:	d012      	beq.n	800c53a <HAL_I2C_IsDeviceReady+0x96>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c514:	2710      	movs	r7, #16
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c51a:	9600      	str	r6, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c51c:	403a      	ands	r2, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c51e:	002b      	movs	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c520:	2a00      	cmp	r2, #0
 800c522:	d127      	bne.n	800c574 <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c524:	2120      	movs	r1, #32
 800c526:	0020      	movs	r0, r4
 800c528:	f7ff fc10 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d017      	beq.n	800c560 <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_ERROR;
 800c530:	2001      	movs	r0, #1
 800c532:	e01d      	b.n	800c570 <HAL_I2C_IsDeviceReady+0xcc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c534:	23a0      	movs	r3, #160	; 0xa0
 800c536:	019b      	lsls	r3, r3, #6
 800c538:	e7db      	b.n	800c4f2 <HAL_I2C_IsDeviceReady+0x4e>
        if (Timeout != HAL_MAX_DELAY)
 800c53a:	1c6b      	adds	r3, r5, #1
 800c53c:	d0e0      	beq.n	800c500 <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c53e:	f7fe fcb9 	bl	800aeb4 <HAL_GetTick>
 800c542:	1b80      	subs	r0, r0, r6
 800c544:	42a8      	cmp	r0, r5
 800c546:	d801      	bhi.n	800c54c <HAL_I2C_IsDeviceReady+0xa8>
 800c548:	2d00      	cmp	r5, #0
 800c54a:	d1d9      	bne.n	800c500 <HAL_I2C_IsDeviceReady+0x5c>
    hi2c->State = HAL_I2C_STATE_READY;
 800c54c:	2320      	movs	r3, #32
 800c54e:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(hi2c);
 800c550:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800c552:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c554:	6862      	ldr	r2, [r4, #4]
 800c556:	4313      	orrs	r3, r2
 800c558:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 800c55a:	2300      	movs	r3, #0
 800c55c:	7023      	strb	r3, [r4, #0]
 800c55e:	e7e7      	b.n	800c530 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c560:	2320      	movs	r3, #32
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800c566:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 800c568:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800c56a:	3241      	adds	r2, #65	; 0x41
 800c56c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800c56e:	7020      	strb	r0, [r4, #0]
}
 800c570:	b009      	add	sp, #36	; 0x24
 800c572:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c574:	2200      	movs	r2, #0
 800c576:	2120      	movs	r1, #32
 800c578:	0020      	movs	r0, r4
 800c57a:	f7ff fbe7 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c57e:	1e02      	subs	r2, r0, #0
 800c580:	d1d6      	bne.n	800c530 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c582:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 800c584:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c586:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c588:	2720      	movs	r7, #32
 800c58a:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 800c58c:	9907      	ldr	r1, [sp, #28]
 800c58e:	4281      	cmp	r1, r0
 800c590:	d10e      	bne.n	800c5b0 <HAL_I2C_IsDeviceReady+0x10c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c592:	2180      	movs	r1, #128	; 0x80
 800c594:	6858      	ldr	r0, [r3, #4]
 800c596:	01c9      	lsls	r1, r1, #7
 800c598:	4301      	orrs	r1, r0
 800c59a:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c59c:	0020      	movs	r0, r4
 800c59e:	9600      	str	r6, [sp, #0]
 800c5a0:	002b      	movs	r3, r5
 800c5a2:	0039      	movs	r1, r7
 800c5a4:	f7ff fbd2 	bl	800bd4c <I2C_WaitOnFlagUntilTimeout>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1c1      	bne.n	800c530 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 800c5b0:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800c5b2:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d200      	bcs.n	800c5c0 <HAL_I2C_IsDeviceReady+0x11c>
 800c5be:	e794      	b.n	800c4ea <HAL_I2C_IsDeviceReady+0x46>
 800c5c0:	e7c4      	b.n	800c54c <HAL_I2C_IsDeviceReady+0xa8>
 800c5c2:	46c0      	nop			; (mov r8, r8)
 800c5c4:	02002000 	.word	0x02002000

0800c5c8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c5c8:	6803      	ldr	r3, [r0, #0]
{
 800c5ca:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c5cc:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c5ce:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800c5d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d000      	beq.n	800c5d8 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800c5d6:	4798      	blx	r3
}
 800c5d8:	bd10      	pop	{r4, pc}

0800c5da <HAL_I2C_SlaveTxCpltCallback>:
 800c5da:	4770      	bx	lr

0800c5dc <HAL_I2C_SlaveRxCpltCallback>:
 800c5dc:	4770      	bx	lr
	...

0800c5e0 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5e0:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c5e2:	6803      	ldr	r3, [r0, #0]
{
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5e8:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c5ea:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ec:	3142      	adds	r1, #66	; 0x42
 800c5ee:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	0450      	lsls	r0, r2, #17
 800c5f4:	d518      	bpl.n	800c628 <I2C_ITSlaveSeqCplt+0x48>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	4918      	ldr	r1, [pc, #96]	; (800c65c <I2C_ITSlaveSeqCplt+0x7c>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c5fa:	400a      	ands	r2, r1
 800c5fc:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c5fe:	0023      	movs	r3, r4
 800c600:	3341      	adds	r3, #65	; 0x41
 800c602:	781a      	ldrb	r2, [r3, #0]
 800c604:	2a29      	cmp	r2, #41	; 0x29
 800c606:	d115      	bne.n	800c634 <I2C_ITSlaveSeqCplt+0x54>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c608:	3a01      	subs	r2, #1
 800c60a:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c60c:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c60e:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c610:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c612:	2101      	movs	r1, #1
 800c614:	f7ff fad0 	bl	800bbb8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c618:	0023      	movs	r3, r4
 800c61a:	2200      	movs	r2, #0
 800c61c:	3340      	adds	r3, #64	; 0x40
 800c61e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c620:	0020      	movs	r0, r4
 800c622:	f7ff ffda 	bl	800c5da <HAL_I2C_SlaveTxCpltCallback>
}
 800c626:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c628:	0bd2      	lsrs	r2, r2, #15
 800c62a:	420a      	tst	r2, r1
 800c62c:	d0e7      	beq.n	800c5fe <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	490b      	ldr	r1, [pc, #44]	; (800c660 <I2C_ITSlaveSeqCplt+0x80>)
 800c632:	e7e2      	b.n	800c5fa <I2C_ITSlaveSeqCplt+0x1a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c634:	781a      	ldrb	r2, [r3, #0]
 800c636:	2a2a      	cmp	r2, #42	; 0x2a
 800c638:	d1f5      	bne.n	800c626 <I2C_ITSlaveSeqCplt+0x46>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c63a:	3a02      	subs	r2, #2
 800c63c:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c63e:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c640:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c642:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c644:	2102      	movs	r1, #2
 800c646:	f7ff fab7 	bl	800bbb8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c64a:	0023      	movs	r3, r4
 800c64c:	2200      	movs	r2, #0
 800c64e:	3340      	adds	r3, #64	; 0x40
 800c650:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c652:	0020      	movs	r0, r4
 800c654:	f7ff ffc2 	bl	800c5dc <HAL_I2C_SlaveRxCpltCallback>
}
 800c658:	e7e5      	b.n	800c626 <I2C_ITSlaveSeqCplt+0x46>
 800c65a:	46c0      	nop			; (mov r8, r8)
 800c65c:	ffffbfff 	.word	0xffffbfff
 800c660:	ffff7fff 	.word	0xffff7fff

0800c664 <HAL_I2C_AddrCallback>:
}
 800c664:	4770      	bx	lr

0800c666 <I2C_ITAddrCplt.isra.9>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c666:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800c668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c66a:	2128      	movs	r1, #40	; 0x28
 800c66c:	3341      	adds	r3, #65	; 0x41
 800c66e:	781a      	ldrb	r2, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800c670:	0004      	movs	r4, r0
 800c672:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c674:	400a      	ands	r2, r1
 800c676:	428a      	cmp	r2, r1
 800c678:	d139      	bne.n	800c6ee <I2C_ITAddrCplt.isra.9+0x88>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c67a:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 800c67c:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c67e:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c680:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c682:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800c684:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c686:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c688:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c68a:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 800c68c:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c68e:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c690:	2902      	cmp	r1, #2
 800c692:	d122      	bne.n	800c6da <I2C_ITAddrCplt.isra.9+0x74>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c694:	0592      	lsls	r2, r2, #22
 800c696:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800c698:	09d1      	lsrs	r1, r2, #7
 800c69a:	404e      	eors	r6, r1
 800c69c:	2106      	movs	r1, #6
 800c69e:	400e      	ands	r6, r1
 800c6a0:	d110      	bne.n	800c6c4 <I2C_ITAddrCplt.isra.9+0x5e>
        hi2c->AddrEventCount++;
 800c6a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c6a4:	3101      	adds	r1, #1
 800c6a6:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c6a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c6aa:	2902      	cmp	r1, #2
 800c6ac:	d109      	bne.n	800c6c2 <I2C_ITAddrCplt.isra.9+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6ae:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800c6b0:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6b2:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	3340      	adds	r3, #64	; 0x40
 800c6b8:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6ba:	0029      	movs	r1, r5
 800c6bc:	0020      	movs	r0, r4
 800c6be:	f7ff ffd1 	bl	800c664 <HAL_I2C_AddrCallback>
}
 800c6c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6c4:	2180      	movs	r1, #128	; 0x80
 800c6c6:	0209      	lsls	r1, r1, #8
 800c6c8:	f7ff fa76 	bl	800bbb8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6cc:	0023      	movs	r3, r4
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	3340      	adds	r3, #64	; 0x40
 800c6d2:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6d4:	9a01      	ldr	r2, [sp, #4]
 800c6d6:	403a      	ands	r2, r7
 800c6d8:	e7ef      	b.n	800c6ba <I2C_ITAddrCplt.isra.9+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6da:	2180      	movs	r1, #128	; 0x80
 800c6dc:	0209      	lsls	r1, r1, #8
 800c6de:	f7ff fa6b 	bl	800bbb8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6e2:	0023      	movs	r3, r4
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	3340      	adds	r3, #64	; 0x40
 800c6e8:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6ea:	0032      	movs	r2, r6
 800c6ec:	e7e5      	b.n	800c6ba <I2C_ITAddrCplt.isra.9+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	3440      	adds	r4, #64	; 0x40
 800c6f6:	7023      	strb	r3, [r4, #0]
 800c6f8:	e7e3      	b.n	800c6c2 <I2C_ITAddrCplt.isra.9+0x5c>

0800c6fa <HAL_I2C_ListenCpltCallback>:
 800c6fa:	4770      	bx	lr

0800c6fc <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6fc:	4b18      	ldr	r3, [pc, #96]	; (800c760 <I2C_ITListenCplt+0x64>)
{
 800c6fe:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c700:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c702:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800c704:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800c706:	6303      	str	r3, [r0, #48]	; 0x30
{
 800c708:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800c70a:	2020      	movs	r0, #32
 800c70c:	3241      	adds	r2, #65	; 0x41
 800c70e:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c710:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 800c712:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c714:	074b      	lsls	r3, r1, #29
 800c716:	d513      	bpl.n	800c740 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800c720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c722:	3301      	adds	r3, #1
 800c724:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800c726:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d009      	beq.n	800c740 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800c72c:	3b01      	subs	r3, #1
 800c72e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c732:	3b01      	subs	r3, #1
 800c734:	b29b      	uxth	r3, r3
 800c736:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c738:	2304      	movs	r3, #4
 800c73a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c73c:	4313      	orrs	r3, r2
 800c73e:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c740:	4908      	ldr	r1, [pc, #32]	; (800c764 <I2C_ITListenCplt+0x68>)
 800c742:	0020      	movs	r0, r4
 800c744:	f7ff fa38 	bl	800bbb8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c748:	2210      	movs	r2, #16
 800c74a:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800c74c:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c74e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800c750:	0023      	movs	r3, r4
 800c752:	2200      	movs	r2, #0
 800c754:	3340      	adds	r3, #64	; 0x40
 800c756:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800c758:	f7ff ffcf 	bl	800c6fa <HAL_I2C_ListenCpltCallback>
}
 800c75c:	bd10      	pop	{r4, pc}
 800c75e:	46c0      	nop			; (mov r8, r8)
 800c760:	ffff0000 	.word	0xffff0000
 800c764:	00008003 	.word	0x00008003

0800c768 <HAL_I2C_ErrorCallback>:
 800c768:	4770      	bx	lr

0800c76a <HAL_I2C_AbortCpltCallback>:
 800c76a:	4770      	bx	lr

0800c76c <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c76c:	0001      	movs	r1, r0
 800c76e:	0002      	movs	r2, r0
{
 800c770:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c772:	3141      	adds	r1, #65	; 0x41
 800c774:	780c      	ldrb	r4, [r1, #0]
 800c776:	2300      	movs	r3, #0
 800c778:	3240      	adds	r2, #64	; 0x40
 800c77a:	2c60      	cmp	r4, #96	; 0x60
 800c77c:	d106      	bne.n	800c78c <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 800c77e:	3c40      	subs	r4, #64	; 0x40
 800c780:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c782:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c784:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800c786:	f7ff fff0 	bl	800c76a <HAL_I2C_AbortCpltCallback>
}
 800c78a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 800c78c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c78e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800c790:	f7ff ffea 	bl	800c768 <HAL_I2C_ErrorCallback>
}
 800c794:	e7f9      	b.n	800c78a <I2C_TreatErrorCallback+0x1e>
	...

0800c798 <I2C_ITError>:
{
 800c798:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c79a:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c79c:	2200      	movs	r2, #0
{
 800c79e:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c7a0:	3541      	adds	r5, #65	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c7a2:	3042      	adds	r0, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c7a4:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c7a6:	7002      	strb	r2, [r0, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c7a8:	4831      	ldr	r0, [pc, #196]	; (800c870 <I2C_ITError+0xd8>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c7aa:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c7ac:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c7ae:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800c7b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c7b2:	4311      	orrs	r1, r2
 800c7b4:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d82b      	bhi.n	800c812 <I2C_ITError+0x7a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c7ba:	2103      	movs	r1, #3
 800c7bc:	0020      	movs	r0, r4
 800c7be:	f7ff f9fb 	bl	800bbb8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c7c2:	2328      	movs	r3, #40	; 0x28
 800c7c4:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c7c6:	4b2b      	ldr	r3, [pc, #172]	; (800c874 <I2C_ITError+0xdc>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c7c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 800c7ca:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800c7cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d02e      	beq.n	800c830 <I2C_ITError+0x98>
 800c7d2:	001a      	movs	r2, r3
 800c7d4:	2110      	movs	r1, #16
 800c7d6:	3a11      	subs	r2, #17
 800c7d8:	438a      	bics	r2, r1
 800c7da:	d129      	bne.n	800c830 <I2C_ITError+0x98>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	0452      	lsls	r2, r2, #17
 800c7e2:	d503      	bpl.n	800c7ec <I2C_ITError+0x54>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4924      	ldr	r1, [pc, #144]	; (800c878 <I2C_ITError+0xe0>)
 800c7e8:	400a      	ands	r2, r1
 800c7ea:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c7ec:	f7fe fff4 	bl	800b7d8 <HAL_DMA_GetState>
 800c7f0:	2801      	cmp	r0, #1
 800c7f2:	d019      	beq.n	800c828 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c7f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c7f6:	4b21      	ldr	r3, [pc, #132]	; (800c87c <I2C_ITError+0xe4>)
      __HAL_UNLOCK(hi2c);
 800c7f8:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c7fa:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800c7fc:	0023      	movs	r3, r4
 800c7fe:	3340      	adds	r3, #64	; 0x40
 800c800:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c802:	f7fe ff79 	bl	800b6f8 <HAL_DMA_Abort_IT>
 800c806:	2800      	cmp	r0, #0
 800c808:	d011      	beq.n	800c82e <I2C_ITError+0x96>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c80a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c80c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c80e:	4798      	blx	r3
}
 800c810:	e00d      	b.n	800c82e <I2C_ITError+0x96>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c812:	491b      	ldr	r1, [pc, #108]	; (800c880 <I2C_ITError+0xe8>)
 800c814:	0020      	movs	r0, r4
 800c816:	f7ff f9cf 	bl	800bbb8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c81a:	782b      	ldrb	r3, [r5, #0]
 800c81c:	2b60      	cmp	r3, #96	; 0x60
 800c81e:	d001      	beq.n	800c824 <I2C_ITError+0x8c>
      hi2c->State         = HAL_I2C_STATE_READY;
 800c820:	2320      	movs	r3, #32
 800c822:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = NULL;
 800c824:	2300      	movs	r3, #0
 800c826:	e7cf      	b.n	800c7c8 <I2C_ITError+0x30>
      I2C_TreatErrorCallback(hi2c);
 800c828:	0020      	movs	r0, r4
 800c82a:	f7ff ff9f 	bl	800c76c <I2C_TreatErrorCallback>
}
 800c82e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c830:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c832:	2800      	cmp	r0, #0
 800c834:	d0f8      	beq.n	800c828 <I2C_ITError+0x90>
 800c836:	2210      	movs	r2, #16
 800c838:	3b12      	subs	r3, #18
 800c83a:	4393      	bics	r3, r2
 800c83c:	d1f4      	bne.n	800c828 <I2C_ITError+0x90>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	0412      	lsls	r2, r2, #16
 800c844:	d503      	bpl.n	800c84e <I2C_ITError+0xb6>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	490e      	ldr	r1, [pc, #56]	; (800c884 <I2C_ITError+0xec>)
 800c84a:	400a      	ands	r2, r1
 800c84c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c84e:	f7fe ffc3 	bl	800b7d8 <HAL_DMA_GetState>
 800c852:	2801      	cmp	r0, #1
 800c854:	d0e8      	beq.n	800c828 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c856:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c858:	4b08      	ldr	r3, [pc, #32]	; (800c87c <I2C_ITError+0xe4>)
      __HAL_UNLOCK(hi2c);
 800c85a:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c85c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800c85e:	0023      	movs	r3, r4
 800c860:	3340      	adds	r3, #64	; 0x40
 800c862:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c864:	f7fe ff48 	bl	800b6f8 <HAL_DMA_Abort_IT>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d0e0      	beq.n	800c82e <I2C_ITError+0x96>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c86c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c86e:	e7cd      	b.n	800c80c <I2C_ITError+0x74>
 800c870:	ffff0000 	.word	0xffff0000
 800c874:	0800c9c1 	.word	0x0800c9c1
 800c878:	ffffbfff 	.word	0xffffbfff
 800c87c:	0800cb53 	.word	0x0800cb53
 800c880:	00008003 	.word	0x00008003
 800c884:	ffff7fff 	.word	0xffff7fff

0800c888 <I2C_ITSlaveCplt>:
{
 800c888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c88a:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c88c:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c88e:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c890:	3641      	adds	r6, #65	; 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c892:	9201      	str	r2, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c894:	2220      	movs	r2, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c896:	7835      	ldrb	r5, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c898:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c89a:	2308      	movs	r3, #8
{
 800c89c:	0004      	movs	r4, r0
 800c89e:	000f      	movs	r7, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8a0:	439d      	bics	r5, r3
 800c8a2:	2d21      	cmp	r5, #33	; 0x21
 800c8a4:	d150      	bne.n	800c948 <I2C_ITSlaveCplt+0xc0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c8a6:	4940      	ldr	r1, [pc, #256]	; (800c9a8 <I2C_ITSlaveCplt+0x120>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c8a8:	0020      	movs	r0, r4
 800c8aa:	f7ff f985 	bl	800bbb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c8ae:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c8b0:	2280      	movs	r2, #128	; 0x80
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	0212      	lsls	r2, r2, #8
 800c8b6:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800c8b8:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	493a      	ldr	r1, [pc, #232]	; (800c9ac <I2C_ITSlaveCplt+0x124>)
 800c8c2:	400a      	ands	r2, r1
 800c8c4:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800c8c6:	f7ff f955 	bl	800bb74 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c8ca:	9b01      	ldr	r3, [sp, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	045b      	lsls	r3, r3, #17
 800c8d0:	d53e      	bpl.n	800c950 <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c8d2:	6822      	ldr	r2, [r4, #0]
 800c8d4:	4936      	ldr	r1, [pc, #216]	; (800c9b0 <I2C_ITSlaveCplt+0x128>)
 800c8d6:	6813      	ldr	r3, [r2, #0]
 800c8d8:	400b      	ands	r3, r1
 800c8da:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800c8dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c8ea:	077b      	lsls	r3, r7, #29
 800c8ec:	d511      	bpl.n	800c912 <I2C_ITSlaveCplt+0x8a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c8ee:	2304      	movs	r3, #4
 800c8f0:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f8:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800c8fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800c900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c902:	2b00      	cmp	r3, #0
 800c904:	d005      	beq.n	800c912 <I2C_ITSlaveCplt+0x8a>
      hi2c->XferSize--;
 800c906:	3b01      	subs	r3, #1
 800c908:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c90a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c90c:	3b01      	subs	r3, #1
 800c90e:	b29b      	uxth	r3, r3
 800c910:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800c912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c914:	2b00      	cmp	r3, #0
 800c916:	d003      	beq.n	800c920 <I2C_ITSlaveCplt+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c918:	2304      	movs	r3, #4
 800c91a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c91c:	4313      	orrs	r3, r2
 800c91e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c920:	0023      	movs	r3, r4
 800c922:	2200      	movs	r2, #0
 800c924:	3342      	adds	r3, #66	; 0x42
 800c926:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c928:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800c92a:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c92c:	4295      	cmp	r5, r2
 800c92e:	d01a      	beq.n	800c966 <I2C_ITSlaveCplt+0xde>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c930:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c932:	0020      	movs	r0, r4
 800c934:	f7ff ff30 	bl	800c798 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c938:	7833      	ldrb	r3, [r6, #0]
 800c93a:	2b28      	cmp	r3, #40	; 0x28
 800c93c:	d103      	bne.n	800c946 <I2C_ITSlaveCplt+0xbe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c93e:	0039      	movs	r1, r7
 800c940:	0020      	movs	r0, r4
 800c942:	f7ff fedb 	bl	800c6fc <I2C_ITListenCplt>
}
 800c946:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c948:	2d22      	cmp	r5, #34	; 0x22
 800c94a:	d1b1      	bne.n	800c8b0 <I2C_ITSlaveCplt+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c94c:	4919      	ldr	r1, [pc, #100]	; (800c9b4 <I2C_ITSlaveCplt+0x12c>)
 800c94e:	e7ab      	b.n	800c8a8 <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	0bdb      	lsrs	r3, r3, #15
 800c954:	4213      	tst	r3, r2
 800c956:	d0c8      	beq.n	800c8ea <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c958:	6822      	ldr	r2, [r4, #0]
 800c95a:	4917      	ldr	r1, [pc, #92]	; (800c9b8 <I2C_ITSlaveCplt+0x130>)
 800c95c:	6813      	ldr	r3, [r2, #0]
 800c95e:	400b      	ands	r3, r1
 800c960:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800c962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c964:	e7bb      	b.n	800c8de <I2C_ITSlaveCplt+0x56>
 800c966:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c96a:	4a14      	ldr	r2, [pc, #80]	; (800c9bc <I2C_ITSlaveCplt+0x134>)
 800c96c:	3740      	adds	r7, #64	; 0x40
 800c96e:	4293      	cmp	r3, r2
 800c970:	d00c      	beq.n	800c98c <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 800c972:	0020      	movs	r0, r4
 800c974:	f7ff fe34 	bl	800c5e0 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800c978:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c97a:	4a10      	ldr	r2, [pc, #64]	; (800c9bc <I2C_ITSlaveCplt+0x134>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800c97c:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c97e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c980:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c982:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c984:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 800c986:	f7ff feb8 	bl	800c6fa <HAL_I2C_ListenCpltCallback>
 800c98a:	e7dc      	b.n	800c946 <I2C_ITSlaveCplt+0xbe>
 800c98c:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c98e:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c990:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800c992:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c994:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c996:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c998:	2a22      	cmp	r2, #34	; 0x22
 800c99a:	d102      	bne.n	800c9a2 <I2C_ITSlaveCplt+0x11a>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c99c:	f7ff fe1e 	bl	800c5dc <HAL_I2C_SlaveRxCpltCallback>
 800c9a0:	e7d1      	b.n	800c946 <I2C_ITSlaveCplt+0xbe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c9a2:	f7ff fe1a 	bl	800c5da <HAL_I2C_SlaveTxCpltCallback>
}
 800c9a6:	e7ce      	b.n	800c946 <I2C_ITSlaveCplt+0xbe>
 800c9a8:	00008001 	.word	0x00008001
 800c9ac:	fe00e800 	.word	0xfe00e800
 800c9b0:	ffffbfff 	.word	0xffffbfff
 800c9b4:	00008002 	.word	0x00008002
 800c9b8:	ffff7fff 	.word	0xffff7fff
 800c9bc:	ffff0000 	.word	0xffff0000

0800c9c0 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 800c9c0:	0003      	movs	r3, r0
{
 800c9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800c9c4:	3340      	adds	r3, #64	; 0x40
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
{
 800c9ca:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800c9cc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 800c9ce:	000e      	movs	r6, r1
 800c9d0:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 800c9d2:	2002      	movs	r0, #2
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d024      	beq.n	800ca22 <I2C_Slave_ISR_IT+0x62>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	9a01      	ldr	r2, [sp, #4]
 800c9dc:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c9de:	094a      	lsrs	r2, r1, #5
 800c9e0:	421a      	tst	r2, r3
 800c9e2:	d005      	beq.n	800c9f0 <I2C_Slave_ISR_IT+0x30>
 800c9e4:	096a      	lsrs	r2, r5, #5
 800c9e6:	421a      	tst	r2, r3
 800c9e8:	d002      	beq.n	800c9f0 <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c9ea:	0020      	movs	r0, r4
 800c9ec:	f7ff ff4c 	bl	800c888 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	06f2      	lsls	r2, r6, #27
 800c9f4:	d535      	bpl.n	800ca62 <I2C_Slave_ISR_IT+0xa2>
 800c9f6:	092a      	lsrs	r2, r5, #4
 800c9f8:	421a      	tst	r2, r3
 800c9fa:	d032      	beq.n	800ca62 <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 800c9fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d120      	bne.n	800ca44 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ca02:	0023      	movs	r3, r4
 800ca04:	3341      	adds	r3, #65	; 0x41
 800ca06:	781a      	ldrb	r2, [r3, #0]
 800ca08:	2a28      	cmp	r2, #40	; 0x28
 800ca0a:	d10b      	bne.n	800ca24 <I2C_Slave_ISR_IT+0x64>
 800ca0c:	2280      	movs	r2, #128	; 0x80
 800ca0e:	0492      	lsls	r2, r2, #18
 800ca10:	4297      	cmp	r7, r2
 800ca12:	d107      	bne.n	800ca24 <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ca14:	0031      	movs	r1, r6
 800ca16:	0020      	movs	r0, r4
 800ca18:	f7ff fe70 	bl	800c6fc <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	9b01      	ldr	r3, [sp, #4]
 800ca20:	7018      	strb	r0, [r3, #0]
}
 800ca22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca24:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ca26:	7819      	ldrb	r1, [r3, #0]
 800ca28:	6823      	ldr	r3, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca2a:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ca2c:	2929      	cmp	r1, #41	; 0x29
 800ca2e:	d1f5      	bne.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
 800ca30:	492d      	ldr	r1, [pc, #180]	; (800cae8 <I2C_Slave_ISR_IT+0x128>)
 800ca32:	428f      	cmp	r7, r1
 800ca34:	d0f2      	beq.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 800ca36:	0020      	movs	r0, r4
 800ca38:	f7ff f89c 	bl	800bb74 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 800ca3c:	0020      	movs	r0, r4
 800ca3e:	f7ff fdcf 	bl	800c5e0 <I2C_ITSlaveSeqCplt>
 800ca42:	e7eb      	b.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca44:	2210      	movs	r2, #16
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ca4a:	2304      	movs	r3, #4
 800ca4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ca52:	4b26      	ldr	r3, [pc, #152]	; (800caec <I2C_Slave_ISR_IT+0x12c>)
 800ca54:	421f      	tst	r7, r3
 800ca56:	d1e1      	bne.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca58:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ca5a:	0020      	movs	r0, r4
 800ca5c:	f7ff fe9c 	bl	800c798 <I2C_ITError>
 800ca60:	e7dc      	b.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ca62:	2301      	movs	r3, #1
 800ca64:	0772      	lsls	r2, r6, #29
 800ca66:	d51a      	bpl.n	800ca9e <I2C_Slave_ISR_IT+0xde>
 800ca68:	08aa      	lsrs	r2, r5, #2
 800ca6a:	421a      	tst	r2, r3
 800ca6c:	d017      	beq.n	800ca9e <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 800ca6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00d      	beq.n	800ca90 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ca78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800ca7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca7e:	3301      	adds	r3, #1
 800ca80:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800ca82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ca84:	3b01      	subs	r3, #1
 800ca86:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800ca88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800ca90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1c2      	bne.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
 800ca96:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <I2C_Slave_ISR_IT+0x128>)
 800ca98:	429f      	cmp	r7, r3
 800ca9a:	d0bf      	beq.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
 800ca9c:	e7ce      	b.n	800ca3c <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ca9e:	2301      	movs	r3, #1
 800caa0:	0732      	lsls	r2, r6, #28
 800caa2:	d506      	bpl.n	800cab2 <I2C_Slave_ISR_IT+0xf2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800caa4:	08ea      	lsrs	r2, r5, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800caa6:	421a      	tst	r2, r3
 800caa8:	d003      	beq.n	800cab2 <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800caaa:	0020      	movs	r0, r4
 800caac:	f7ff fddb 	bl	800c666 <I2C_ITAddrCplt.isra.9>
 800cab0:	e7b4      	b.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800cab2:	2301      	movs	r3, #1
 800cab4:	07b2      	lsls	r2, r6, #30
 800cab6:	d5b1      	bpl.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
 800cab8:	40dd      	lsrs	r5, r3
 800caba:	421d      	tst	r5, r3
 800cabc:	d0ae      	beq.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 800cabe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00d      	beq.n	800cae0 <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac6:	6822      	ldr	r2, [r4, #0]
 800cac8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800caca:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cacc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800cace:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800cad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cad2:	3b01      	subs	r3, #1
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800cad8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cada:	3b01      	subs	r3, #1
 800cadc:	8523      	strh	r3, [r4, #40]	; 0x28
 800cade:	e79d      	b.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800cae0:	4b02      	ldr	r3, [pc, #8]	; (800caec <I2C_Slave_ISR_IT+0x12c>)
 800cae2:	421f      	tst	r7, r3
 800cae4:	d0aa      	beq.n	800ca3c <I2C_Slave_ISR_IT+0x7c>
 800cae6:	e799      	b.n	800ca1c <I2C_Slave_ISR_IT+0x5c>
 800cae8:	ffff0000 	.word	0xffff0000
 800caec:	feffffff 	.word	0xfeffffff

0800caf0 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800caf0:	6803      	ldr	r3, [r0, #0]
{
 800caf2:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800caf4:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800caf6:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800caf8:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cafa:	05e5      	lsls	r5, r4, #23
 800cafc:	d508      	bpl.n	800cb10 <HAL_I2C_ER_IRQHandler+0x20>
 800cafe:	09d5      	lsrs	r5, r2, #7
 800cb00:	420d      	tst	r5, r1
 800cb02:	d005      	beq.n	800cb10 <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800cb04:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800cb06:	4329      	orrs	r1, r5
 800cb08:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cb0a:	2180      	movs	r1, #128	; 0x80
 800cb0c:	0049      	lsls	r1, r1, #1
 800cb0e:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cb10:	2101      	movs	r1, #1
 800cb12:	0565      	lsls	r5, r4, #21
 800cb14:	d509      	bpl.n	800cb2a <HAL_I2C_ER_IRQHandler+0x3a>
 800cb16:	09d5      	lsrs	r5, r2, #7
 800cb18:	420d      	tst	r5, r1
 800cb1a:	d006      	beq.n	800cb2a <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800cb1c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800cb1e:	3107      	adds	r1, #7
 800cb20:	4329      	orrs	r1, r5
 800cb22:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cb24:	2180      	movs	r1, #128	; 0x80
 800cb26:	00c9      	lsls	r1, r1, #3
 800cb28:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	05a4      	lsls	r4, r4, #22
 800cb2e:	d509      	bpl.n	800cb44 <HAL_I2C_ER_IRQHandler+0x54>
 800cb30:	09d2      	lsrs	r2, r2, #7
 800cb32:	420a      	tst	r2, r1
 800cb34:	d006      	beq.n	800cb44 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800cb36:	2202      	movs	r2, #2
 800cb38:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cb3e:	2280      	movs	r2, #128	; 0x80
 800cb40:	0092      	lsls	r2, r2, #2
 800cb42:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cb44:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800cb46:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cb48:	4219      	tst	r1, r3
 800cb4a:	d001      	beq.n	800cb50 <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 800cb4c:	f7ff fe24 	bl	800c798 <I2C_ITError>
}
 800cb50:	bd70      	pop	{r4, r5, r6, pc}

0800cb52 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cb52:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800cb54:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 800cb56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800cb60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cb66:	2200      	movs	r2, #0
 800cb68:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800cb6a:	f7ff fdff 	bl	800c76c <I2C_TreatErrorCallback>
}
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb72:	0004      	movs	r4, r0
 800cb74:	3441      	adds	r4, #65	; 0x41
 800cb76:	7822      	ldrb	r2, [r4, #0]
{
 800cb78:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb7a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800cb7c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb7e:	2a20      	cmp	r2, #32
 800cb80:	d118      	bne.n	800cbb4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800cb82:	001d      	movs	r5, r3
 800cb84:	3540      	adds	r5, #64	; 0x40
 800cb86:	782e      	ldrb	r6, [r5, #0]
 800cb88:	2e01      	cmp	r6, #1
 800cb8a:	d013      	beq.n	800cbb4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 800cb8c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb8e:	3022      	adds	r0, #34	; 0x22
 800cb90:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800cb92:	681e      	ldr	r6, [r3, #0]
 800cb94:	3823      	subs	r0, #35	; 0x23
 800cb96:	4386      	bics	r6, r0
 800cb98:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cb9a:	681e      	ldr	r6, [r3, #0]
 800cb9c:	4f06      	ldr	r7, [pc, #24]	; (800cbb8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800cb9e:	403e      	ands	r6, r7
 800cba0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800cba2:	681e      	ldr	r6, [r3, #0]
 800cba4:	4331      	orrs	r1, r6
 800cba6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800cba8:	6819      	ldr	r1, [r3, #0]
 800cbaa:	4308      	orrs	r0, r1
 800cbac:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800cbae:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800cbb0:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800cbb2:	7028      	strb	r0, [r5, #0]
  }
}
 800cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb6:	46c0      	nop			; (mov r8, r8)
 800cbb8:	ffffefff 	.word	0xffffefff

0800cbbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cbbc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbbe:	0005      	movs	r5, r0
 800cbc0:	3541      	adds	r5, #65	; 0x41
 800cbc2:	782a      	ldrb	r2, [r5, #0]
{
 800cbc4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbc6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800cbc8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbca:	2a20      	cmp	r2, #32
 800cbcc:	d117      	bne.n	800cbfe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800cbce:	001c      	movs	r4, r3
 800cbd0:	3440      	adds	r4, #64	; 0x40
 800cbd2:	7826      	ldrb	r6, [r4, #0]
 800cbd4:	2e01      	cmp	r6, #1
 800cbd6:	d012      	beq.n	800cbfe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 800cbd8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800cbda:	3022      	adds	r0, #34	; 0x22
 800cbdc:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 800cbde:	681e      	ldr	r6, [r3, #0]
 800cbe0:	3823      	subs	r0, #35	; 0x23
 800cbe2:	4386      	bics	r6, r0
 800cbe4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800cbe6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800cbe8:	4f05      	ldr	r7, [pc, #20]	; (800cc00 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800cbea:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800cbec:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800cbee:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800cbf0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	4308      	orrs	r0, r1
 800cbf6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800cbf8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800cbfa:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800cbfc:	7020      	strb	r0, [r4, #0]
  }
}
 800cbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc00:	fffff0ff 	.word	0xfffff0ff

0800cc04 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc04:	2301      	movs	r3, #1
 800cc06:	4a04      	ldr	r2, [pc, #16]	; (800cc18 <HAL_I2CEx_EnableFastModePlus+0x14>)
 800cc08:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800cc0a:	430b      	orrs	r3, r1
 800cc0c:	6353      	str	r3, [r2, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 800cc0e:	4a03      	ldr	r2, [pc, #12]	; (800cc1c <HAL_I2CEx_EnableFastModePlus+0x18>)
 800cc10:	6853      	ldr	r3, [r2, #4]
 800cc12:	4318      	orrs	r0, r3
 800cc14:	6050      	str	r0, [r2, #4]
}
 800cc16:	4770      	bx	lr
 800cc18:	40021000 	.word	0x40021000
 800cc1c:	40010000 	.word	0x40010000

0800cc20 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <LPTIM_WaitForFlag+0x34>)
{
 800cc22:	b570      	push	{r4, r5, r6, lr}
 800cc24:	0005      	movs	r5, r0
 800cc26:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800cc28:	6818      	ldr	r0, [r3, #0]
 800cc2a:	490b      	ldr	r1, [pc, #44]	; (800cc58 <LPTIM_WaitForFlag+0x38>)
 800cc2c:	f7fb fa92 	bl	8008154 <__udivsi3>
 800cc30:	23fa      	movs	r3, #250	; 0xfa
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800cc36:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800cc38:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800cc3a:	2503      	movs	r5, #3
    count--;
 800cc3c:	3b01      	subs	r3, #1
    if (count == 0UL)
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d100      	bne.n	800cc44 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800cc42:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800cc44:	680a      	ldr	r2, [r1, #0]
 800cc46:	4022      	ands	r2, r4
 800cc48:	42a2      	cmp	r2, r4
 800cc4a:	d001      	beq.n	800cc50 <LPTIM_WaitForFlag+0x30>
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1f5      	bne.n	800cc3c <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	46c0      	nop			; (mov r8, r8)
 800cc54:	20000568 	.word	0x20000568
 800cc58:	00004e20 	.word	0x00004e20

0800cc5c <HAL_LPTIM_Init>:
{
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	0004      	movs	r4, r0
    return HAL_ERROR;
 800cc60:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	d039      	beq.n	800ccda <HAL_LPTIM_Init+0x7e>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800cc66:	0025      	movs	r5, r4
 800cc68:	352e      	adds	r5, #46	; 0x2e
 800cc6a:	782b      	ldrb	r3, [r5, #0]
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <HAL_LPTIM_Init+0x22>
    hlptim->Lock = HAL_UNLOCKED;
 800cc72:	0022      	movs	r2, r4
 800cc74:	322d      	adds	r2, #45	; 0x2d
 800cc76:	7013      	strb	r3, [r2, #0]
    HAL_LPTIM_MspInit(hlptim);
 800cc78:	0020      	movs	r0, r4
 800cc7a:	f005 ff1b 	bl	8012ab4 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800cc7e:	2302      	movs	r3, #2
  tmpcfgr = hlptim->Instance->CFGR;
 800cc80:	6820      	ldr	r0, [r4, #0]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800cc82:	6861      	ldr	r1, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800cc84:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 800cc86:	68c3      	ldr	r3, [r0, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800cc88:	2901      	cmp	r1, #1
 800cc8a:	d101      	bne.n	800cc90 <HAL_LPTIM_Init+0x34>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 800cc8c:	2206      	movs	r2, #6
 800cc8e:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800cc90:	4e14      	ldr	r6, [pc, #80]	; (800cce4 <HAL_LPTIM_Init+0x88>)
 800cc92:	6962      	ldr	r2, [r4, #20]
 800cc94:	46b4      	mov	ip, r6
 800cc96:	42b2      	cmp	r2, r6
 800cc98:	d001      	beq.n	800cc9e <HAL_LPTIM_Init+0x42>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 800cc9a:	4f13      	ldr	r7, [pc, #76]	; (800cce8 <HAL_LPTIM_Init+0x8c>)
 800cc9c:	403b      	ands	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800cc9e:	2900      	cmp	r1, #0
 800cca0:	d101      	bne.n	800cca6 <HAL_LPTIM_Init+0x4a>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 800cca2:	27d8      	movs	r7, #216	; 0xd8
 800cca4:	43bb      	bics	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800cca6:	4f11      	ldr	r7, [pc, #68]	; (800ccec <HAL_LPTIM_Init+0x90>)
              hlptim->Init.Clock.Prescaler |
 800cca8:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800ccaa:	401f      	ands	r7, r3
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ccac:	68a3      	ldr	r3, [r4, #8]
 800ccae:	430b      	orrs	r3, r1
              hlptim->Init.Clock.Prescaler |
 800ccb0:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800ccb2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ccb4:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 800ccb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccb8:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ccba:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	d10d      	bne.n	800ccdc <HAL_LPTIM_Init+0x80>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800ccc0:	69e1      	ldr	r1, [r4, #28]
 800ccc2:	6926      	ldr	r6, [r4, #16]
 800ccc4:	4331      	orrs	r1, r6
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800ccc6:	430b      	orrs	r3, r1
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800ccc8:	4562      	cmp	r2, ip
 800ccca:	d002      	beq.n	800ccd2 <HAL_LPTIM_Init+0x76>
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800cccc:	69a1      	ldr	r1, [r4, #24]
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800ccd2:	60c3      	str	r3, [r0, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ccd4:	2301      	movs	r3, #1
  return HAL_OK;
 800ccd6:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ccd8:	702b      	strb	r3, [r5, #0]
}
 800ccda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800ccdc:	2901      	cmp	r1, #1
 800ccde:	d1f3      	bne.n	800ccc8 <HAL_LPTIM_Init+0x6c>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800cce0:	68e1      	ldr	r1, [r4, #12]
 800cce2:	e7f0      	b.n	800ccc6 <HAL_LPTIM_Init+0x6a>
 800cce4:	0000ffff 	.word	0x0000ffff
 800cce8:	ffff1fff 	.word	0xffff1fff
 800ccec:	ff19f1f8 	.word	0xff19f1f8

0800ccf0 <HAL_LPTIM_TriggerCallback>:
 800ccf0:	4770      	bx	lr

0800ccf2 <HAL_LPTIM_CompareWriteCallback>:
 800ccf2:	4770      	bx	lr

0800ccf4 <HAL_LPTIM_AutoReloadWriteCallback>:
 800ccf4:	4770      	bx	lr

0800ccf6 <HAL_LPTIM_DirectionUpCallback>:
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_LPTIM_DirectionDownCallback>:
 800ccf8:	4770      	bx	lr

0800ccfa <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	6803      	ldr	r3, [r0, #0]
{
 800ccfe:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800cd00:	6819      	ldr	r1, [r3, #0]
{
 800cd02:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800cd04:	4211      	tst	r1, r2
 800cd06:	d005      	beq.n	800cd14 <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800cd08:	6899      	ldr	r1, [r3, #8]
 800cd0a:	4211      	tst	r1, r2
 800cd0c:	d002      	beq.n	800cd14 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800cd0e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800cd10:	f001 f998 	bl	800e044 <HAL_LPTIM_CompareMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800cd14:	2202      	movs	r2, #2
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	6819      	ldr	r1, [r3, #0]
 800cd1a:	4211      	tst	r1, r2
 800cd1c:	d006      	beq.n	800cd2c <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800cd1e:	6899      	ldr	r1, [r3, #8]
 800cd20:	4211      	tst	r1, r2
 800cd22:	d003      	beq.n	800cd2c <HAL_LPTIM_IRQHandler+0x32>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800cd24:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800cd26:	0020      	movs	r0, r4
 800cd28:	f007 fc18 	bl	801455c <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800cd2c:	2204      	movs	r2, #4
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	6819      	ldr	r1, [r3, #0]
 800cd32:	4211      	tst	r1, r2
 800cd34:	d006      	beq.n	800cd44 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800cd36:	6899      	ldr	r1, [r3, #8]
 800cd38:	4211      	tst	r1, r2
 800cd3a:	d003      	beq.n	800cd44 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800cd3c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800cd3e:	0020      	movs	r0, r4
 800cd40:	f7ff ffd6 	bl	800ccf0 <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800cd44:	2208      	movs	r2, #8
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	6819      	ldr	r1, [r3, #0]
 800cd4a:	4211      	tst	r1, r2
 800cd4c:	d006      	beq.n	800cd5c <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800cd4e:	6899      	ldr	r1, [r3, #8]
 800cd50:	4211      	tst	r1, r2
 800cd52:	d003      	beq.n	800cd5c <HAL_LPTIM_IRQHandler+0x62>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800cd54:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800cd56:	0020      	movs	r0, r4
 800cd58:	f7ff ffcb 	bl	800ccf2 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800cd5c:	2210      	movs	r2, #16
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	6819      	ldr	r1, [r3, #0]
 800cd62:	4211      	tst	r1, r2
 800cd64:	d006      	beq.n	800cd74 <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800cd66:	6899      	ldr	r1, [r3, #8]
 800cd68:	4211      	tst	r1, r2
 800cd6a:	d003      	beq.n	800cd74 <HAL_LPTIM_IRQHandler+0x7a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800cd6c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800cd6e:	0020      	movs	r0, r4
 800cd70:	f7ff ffc0 	bl	800ccf4 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800cd74:	2220      	movs	r2, #32
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	6819      	ldr	r1, [r3, #0]
 800cd7a:	4211      	tst	r1, r2
 800cd7c:	d006      	beq.n	800cd8c <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800cd7e:	6899      	ldr	r1, [r3, #8]
 800cd80:	4211      	tst	r1, r2
 800cd82:	d003      	beq.n	800cd8c <HAL_LPTIM_IRQHandler+0x92>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800cd84:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800cd86:	0020      	movs	r0, r4
 800cd88:	f7ff ffb5 	bl	800ccf6 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800cd8c:	2240      	movs	r2, #64	; 0x40
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	6819      	ldr	r1, [r3, #0]
 800cd92:	4211      	tst	r1, r2
 800cd94:	d006      	beq.n	800cda4 <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800cd96:	6899      	ldr	r1, [r3, #8]
 800cd98:	4211      	tst	r1, r2
 800cd9a:	d003      	beq.n	800cda4 <HAL_LPTIM_IRQHandler+0xaa>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800cd9c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800cd9e:	0020      	movs	r0, r4
 800cda0:	f7ff ffaa 	bl	800ccf8 <HAL_LPTIM_DirectionDownCallback>
}
 800cda4:	bd10      	pop	{r4, pc}
	...

0800cda8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800cda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdaa:	0004      	movs	r4, r0
 800cdac:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 800cdae:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800cdb0:	4e33      	ldr	r6, [pc, #204]	; (800ce80 <LPTIM_Disable+0xd8>)
 800cdb2:	6803      	ldr	r3, [r0, #0]
 800cdb4:	42b3      	cmp	r3, r6
 800cdb6:	d160      	bne.n	800ce7a <LPTIM_Disable+0xd2>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cdb8:	4a32      	ldr	r2, [pc, #200]	; (800ce84 <LPTIM_Disable+0xdc>)
 800cdba:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800cdbc:	22c0      	movs	r2, #192	; 0xc0
 800cdbe:	0312      	lsls	r2, r2, #12
 800cdc0:	4015      	ands	r5, r2
 800cdc2:	9501      	str	r5, [sp, #4]
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800cdc4:	689a      	ldr	r2, [r3, #8]
 800cdc6:	9202      	str	r2, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 800cdc8:	68da      	ldr	r2, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800cdca:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 800cdcc:	9203      	str	r2, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 800cdce:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800cdd0:	42b3      	cmp	r3, r6
 800cdd2:	d10b      	bne.n	800cdec <LPTIM_Disable+0x44>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800cdd4:	492b      	ldr	r1, [pc, #172]	; (800ce84 <LPTIM_Disable+0xdc>)
 800cdd6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800cdd8:	4694      	mov	ip, r2
 800cdda:	2280      	movs	r2, #128	; 0x80
 800cddc:	4665      	mov	r5, ip
 800cdde:	0612      	lsls	r2, r2, #24
 800cde0:	432a      	orrs	r2, r5
 800cde2:	628a      	str	r2, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800cde4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800cde6:	0052      	lsls	r2, r2, #1
 800cde8:	0852      	lsrs	r2, r2, #1
 800cdea:	628a      	str	r2, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800cdec:	0002      	movs	r2, r0
 800cdee:	433a      	orrs	r2, r7
 800cdf0:	d037      	beq.n	800ce62 <LPTIM_Disable+0xba>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800cdf2:	42b3      	cmp	r3, r6
 800cdf4:	d104      	bne.n	800ce00 <LPTIM_Disable+0x58>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800cdf6:	4923      	ldr	r1, [pc, #140]	; (800ce84 <LPTIM_Disable+0xdc>)
 800cdf8:	4d23      	ldr	r5, [pc, #140]	; (800ce88 <LPTIM_Disable+0xe0>)
 800cdfa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800cdfc:	402a      	ands	r2, r5
 800cdfe:	64ca      	str	r2, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d010      	beq.n	800ce26 <LPTIM_Disable+0x7e>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800ce04:	2201      	movs	r2, #1
 800ce06:	6919      	ldr	r1, [r3, #16]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800ce0c:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 800ce0e:	6158      	str	r0, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800ce10:	0020      	movs	r0, r4
 800ce12:	f7ff ff05 	bl	800cc20 <LPTIM_WaitForFlag>
 800ce16:	2803      	cmp	r0, #3
 800ce18:	d102      	bne.n	800ce20 <LPTIM_Disable+0x78>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800ce1a:	0023      	movs	r3, r4
 800ce1c:	332e      	adds	r3, #46	; 0x2e
 800ce1e:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800ce20:	2208      	movs	r2, #8
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800ce26:	2f00      	cmp	r7, #0
 800ce28:	d011      	beq.n	800ce4e <LPTIM_Disable+0xa6>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	6823      	ldr	r3, [r4, #0]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800ce2e:	0020      	movs	r0, r4
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800ce30:	6919      	ldr	r1, [r3, #16]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	611a      	str	r2, [r3, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800ce36:	2110      	movs	r1, #16
      hlptim->Instance->ARR = tmpARR;
 800ce38:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800ce3a:	f7ff fef1 	bl	800cc20 <LPTIM_WaitForFlag>
 800ce3e:	2803      	cmp	r0, #3
 800ce40:	d102      	bne.n	800ce48 <LPTIM_Disable+0xa0>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800ce42:	0023      	movs	r3, r4
 800ce44:	332e      	adds	r3, #46	; 0x2e
 800ce46:	7018      	strb	r0, [r3, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800ce48:	2210      	movs	r2, #16
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	42b3      	cmp	r3, r6
 800ce52:	d106      	bne.n	800ce62 <LPTIM_Disable+0xba>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800ce54:	4a0b      	ldr	r2, [pc, #44]	; (800ce84 <LPTIM_Disable+0xdc>)
 800ce56:	490c      	ldr	r1, [pc, #48]	; (800ce88 <LPTIM_Disable+0xe0>)
 800ce58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ce5a:	9d01      	ldr	r5, [sp, #4]
 800ce5c:	400b      	ands	r3, r1
 800ce5e:	431d      	orrs	r5, r3
 800ce60:	64d5      	str	r5, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800ce62:	2101      	movs	r1, #1
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	691a      	ldr	r2, [r3, #16]
 800ce68:	438a      	bics	r2, r1
 800ce6a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800ce6c:	9a02      	ldr	r2, [sp, #8]
 800ce6e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800ce70:	9a03      	ldr	r2, [sp, #12]
 800ce72:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800ce74:	b662      	cpsie	i

  __enable_irq();
}
 800ce76:	b005      	add	sp, #20
 800ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t tmpclksource = 0;
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	9201      	str	r2, [sp, #4]
 800ce7e:	e7a1      	b.n	800cdc4 <LPTIM_Disable+0x1c>
 800ce80:	40007c00 	.word	0x40007c00
 800ce84:	40021000 	.word	0x40021000
 800ce88:	fff3ffff 	.word	0xfff3ffff

0800ce8c <HAL_LPTIM_TimeOut_Stop>:
{
 800ce8c:	b570      	push	{r4, r5, r6, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800ce8e:	0004      	movs	r4, r0
 800ce90:	2302      	movs	r3, #2
 800ce92:	342e      	adds	r4, #46	; 0x2e
 800ce94:	7023      	strb	r3, [r4, #0]
{
 800ce96:	0005      	movs	r5, r0
  __HAL_LPTIM_DISABLE(hlptim);
 800ce98:	f7ff ff86 	bl	800cda8 <LPTIM_Disable>
  return hlptim->State;
 800ce9c:	7823      	ldrb	r3, [r4, #0]
 800ce9e:	b2db      	uxtb	r3, r3
    return HAL_TIMEOUT;
 800cea0:	0018      	movs	r0, r3
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800cea2:	2b03      	cmp	r3, #3
 800cea4:	d007      	beq.n	800ceb6 <HAL_LPTIM_TimeOut_Stop+0x2a>
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 800cea6:	682a      	ldr	r2, [r5, #0]
 800cea8:	4903      	ldr	r1, [pc, #12]	; (800ceb8 <HAL_LPTIM_TimeOut_Stop+0x2c>)
 800ceaa:	68d3      	ldr	r3, [r2, #12]
  return HAL_OK;
 800ceac:	2000      	movs	r0, #0
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 800ceae:	400b      	ands	r3, r1
 800ceb0:	60d3      	str	r3, [r2, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	7023      	strb	r3, [r4, #0]
}
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	fff7ffff 	.word	0xfff7ffff

0800cebc <HAL_LPTIM_Counter_Start_IT>:
{
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800cebe:	0005      	movs	r5, r0
 800cec0:	2302      	movs	r3, #2
 800cec2:	352e      	adds	r5, #46	; 0x2e
 800cec4:	702b      	strb	r3, [r5, #0]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cec6:	2380      	movs	r3, #128	; 0x80
{
 800cec8:	0007      	movs	r7, r0
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ceca:	4a1c      	ldr	r2, [pc, #112]	; (800cf3c <HAL_LPTIM_Counter_Start_IT+0x80>)
 800cecc:	059b      	lsls	r3, r3, #22
 800cece:	6810      	ldr	r0, [r2, #0]
 800ced0:	4303      	orrs	r3, r0
 800ced2:	6013      	str	r3, [r2, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2a01      	cmp	r2, #1
 800ceda:	d008      	beq.n	800ceee <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800cedc:	2280      	movs	r2, #128	; 0x80
 800cede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cee0:	0412      	lsls	r2, r2, #16
 800cee2:	4290      	cmp	r0, r2
 800cee4:	d103      	bne.n	800ceee <HAL_LPTIM_Counter_Start_IT+0x32>
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800cee6:	68da      	ldr	r2, [r3, #12]
 800cee8:	4815      	ldr	r0, [pc, #84]	; (800cf40 <HAL_LPTIM_Counter_Start_IT+0x84>)
 800ceea:	4002      	ands	r2, r0
 800ceec:	60da      	str	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 800ceee:	2601      	movs	r6, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800cef0:	2410      	movs	r4, #16
  __HAL_LPTIM_ENABLE(hlptim);
 800cef2:	691a      	ldr	r2, [r3, #16]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800cef4:	0038      	movs	r0, r7
  __HAL_LPTIM_ENABLE(hlptim);
 800cef6:	4332      	orrs	r2, r6
 800cef8:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800cefa:	605c      	str	r4, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800cefc:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800cefe:	0021      	movs	r1, r4
 800cf00:	f7ff fe8e 	bl	800cc20 <LPTIM_WaitForFlag>
 800cf04:	2803      	cmp	r0, #3
 800cf06:	d101      	bne.n	800cf0c <HAL_LPTIM_Counter_Start_IT+0x50>
    return HAL_TIMEOUT;
 800cf08:	2003      	movs	r0, #3
}
 800cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_DISABLE(hlptim);
 800cf0c:	0038      	movs	r0, r7
 800cf0e:	f7ff ff4b 	bl	800cda8 <LPTIM_Disable>
  return hlptim->State;
 800cf12:	782b      	ldrb	r3, [r5, #0]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800cf14:	2b03      	cmp	r3, #3
 800cf16:	d0f7      	beq.n	800cf08 <HAL_LPTIM_Counter_Start_IT+0x4c>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800cf18:	683b      	ldr	r3, [r7, #0]
  return HAL_OK;
 800cf1a:	2000      	movs	r0, #0
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800cf1c:	689a      	ldr	r2, [r3, #8]
 800cf1e:	4314      	orrs	r4, r2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800cf20:	2202      	movs	r2, #2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800cf22:	609c      	str	r4, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800cf24:	6899      	ldr	r1, [r3, #8]
 800cf26:	430a      	orrs	r2, r1
 800cf28:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 800cf2a:	691a      	ldr	r2, [r3, #16]
 800cf2c:	4332      	orrs	r2, r6
 800cf2e:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800cf30:	2204      	movs	r2, #4
 800cf32:	6919      	ldr	r1, [r3, #16]
 800cf34:	430a      	orrs	r2, r1
 800cf36:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800cf38:	702e      	strb	r6, [r5, #0]
  return HAL_OK;
 800cf3a:	e7e6      	b.n	800cf0a <HAL_LPTIM_Counter_Start_IT+0x4e>
 800cf3c:	40010400 	.word	0x40010400
 800cf40:	fffff1ff 	.word	0xfffff1ff

0800cf44 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf44:	2380      	movs	r3, #128	; 0x80
 800cf46:	4a03      	ldr	r2, [pc, #12]	; (800cf54 <HAL_PWR_EnableBkUpAccess+0x10>)
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	6811      	ldr	r1, [r2, #0]
 800cf4c:	430b      	orrs	r3, r1
 800cf4e:	6013      	str	r3, [r2, #0]
}
 800cf50:	4770      	bx	lr
 800cf52:	46c0      	nop			; (mov r8, r8)
 800cf54:	40007000 	.word	0x40007000

0800cf58 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800cf58:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800cf5a:	4a1e      	ldr	r2, [pc, #120]	; (800cfd4 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800cf5c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800cf5e:	68d4      	ldr	r4, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800cf60:	4023      	ands	r3, r4
 800cf62:	2b08      	cmp	r3, #8
 800cf64:	d034      	beq.n	800cfd0 <HAL_RCC_GetSysClockFreq+0x78>
 800cf66:	2b0c      	cmp	r3, #12
 800cf68:	d00c      	beq.n	800cf84 <HAL_RCC_GetSysClockFreq+0x2c>
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d128      	bne.n	800cfc0 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800cf6e:	6810      	ldr	r0, [r2, #0]
 800cf70:	330c      	adds	r3, #12
 800cf72:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800cf74:	4243      	negs	r3, r0
 800cf76:	4158      	adcs	r0, r3
 800cf78:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <HAL_RCC_GetSysClockFreq+0x80>)
 800cf7a:	4240      	negs	r0, r0
 800cf7c:	4018      	ands	r0, r3
 800cf7e:	4b17      	ldr	r3, [pc, #92]	; (800cfdc <HAL_RCC_GetSysClockFreq+0x84>)
 800cf80:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800cf82:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800cf84:	02a3      	lsls	r3, r4, #10
 800cf86:	4916      	ldr	r1, [pc, #88]	; (800cfe0 <HAL_RCC_GetSysClockFreq+0x88>)
 800cf88:	0f1b      	lsrs	r3, r3, #28
 800cf8a:	5cc8      	ldrb	r0, [r1, r3]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cf8c:	2380      	movs	r3, #128	; 0x80
 800cf8e:	68d5      	ldr	r5, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800cf90:	0224      	lsls	r4, r4, #8
 800cf92:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cf94:	025b      	lsls	r3, r3, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800cf96:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cf98:	401d      	ands	r5, r3
 800cf9a:	d009      	beq.n	800cfb0 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800cf9c:	4a11      	ldr	r2, [pc, #68]	; (800cfe4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	f7fb fab7 	bl	8008514 <__aeabi_lmul>
 800cfa6:	0022      	movs	r2, r4
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f7fb fa93 	bl	80084d4 <__aeabi_uldivmod>
 800cfae:	e7e8      	b.n	800cf82 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	6816      	ldr	r6, [r2, #0]
 800cfb4:	401e      	ands	r6, r3
 800cfb6:	d001      	beq.n	800cfbc <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800cfb8:	4a08      	ldr	r2, [pc, #32]	; (800cfdc <HAL_RCC_GetSysClockFreq+0x84>)
 800cfba:	e7f0      	b.n	800cf9e <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800cfbc:	4a0a      	ldr	r2, [pc, #40]	; (800cfe8 <HAL_RCC_GetSysClockFreq+0x90>)
 800cfbe:	e7ee      	b.n	800cf9e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800cfc0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800cfc2:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800cfc4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800cfc6:	041b      	lsls	r3, r3, #16
 800cfc8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800cfca:	3301      	adds	r3, #1
 800cfcc:	4098      	lsls	r0, r3
 800cfce:	e7d8      	b.n	800cf82 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800cfd0:	4804      	ldr	r0, [pc, #16]	; (800cfe4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800cfd2:	e7d6      	b.n	800cf82 <HAL_RCC_GetSysClockFreq+0x2a>
 800cfd4:	40021000 	.word	0x40021000
 800cfd8:	00b71b00 	.word	0x00b71b00
 800cfdc:	003d0900 	.word	0x003d0900
 800cfe0:	080197d2 	.word	0x080197d2
 800cfe4:	007a1200 	.word	0x007a1200
 800cfe8:	00f42400 	.word	0x00f42400

0800cfec <HAL_RCC_OscConfig>:
{
 800cfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfee:	0005      	movs	r5, r0
 800cff0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d102      	bne.n	800cffc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800cff6:	2001      	movs	r0, #1
}
 800cff8:	b007      	add	sp, #28
 800cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cffc:	230c      	movs	r3, #12
 800cffe:	4cc1      	ldr	r4, [pc, #772]	; (800d304 <HAL_RCC_OscConfig+0x318>)
 800d000:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d002:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d004:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d006:	2380      	movs	r3, #128	; 0x80
 800d008:	025b      	lsls	r3, r3, #9
 800d00a:	401a      	ands	r2, r3
 800d00c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d00e:	6802      	ldr	r2, [r0, #0]
 800d010:	07d2      	lsls	r2, r2, #31
 800d012:	d43e      	bmi.n	800d092 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	079b      	lsls	r3, r3, #30
 800d018:	d500      	bpl.n	800d01c <HAL_RCC_OscConfig+0x30>
 800d01a:	e084      	b.n	800d126 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	06db      	lsls	r3, r3, #27
 800d020:	d529      	bpl.n	800d076 <HAL_RCC_OscConfig+0x8a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d022:	2e00      	cmp	r6, #0
 800d024:	d000      	beq.n	800d028 <HAL_RCC_OscConfig+0x3c>
 800d026:	e0df      	b.n	800d1e8 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	059b      	lsls	r3, r3, #22
 800d02c:	d502      	bpl.n	800d034 <HAL_RCC_OscConfig+0x48>
 800d02e:	69ab      	ldr	r3, [r5, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d0e0      	beq.n	800cff6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d034:	6862      	ldr	r2, [r4, #4]
 800d036:	49b4      	ldr	r1, [pc, #720]	; (800d308 <HAL_RCC_OscConfig+0x31c>)
 800d038:	6a2b      	ldr	r3, [r5, #32]
 800d03a:	400a      	ands	r2, r1
 800d03c:	431a      	orrs	r2, r3
 800d03e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d040:	6861      	ldr	r1, [r4, #4]
 800d042:	69ea      	ldr	r2, [r5, #28]
 800d044:	0209      	lsls	r1, r1, #8
 800d046:	0a09      	lsrs	r1, r1, #8
 800d048:	0612      	lsls	r2, r2, #24
 800d04a:	430a      	orrs	r2, r1
 800d04c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800d04e:	2280      	movs	r2, #128	; 0x80
 800d050:	0b5b      	lsrs	r3, r3, #13
 800d052:	3301      	adds	r3, #1
 800d054:	0212      	lsls	r2, r2, #8
 800d056:	409a      	lsls	r2, r3
 800d058:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800d05a:	68e1      	ldr	r1, [r4, #12]
 800d05c:	060a      	lsls	r2, r1, #24
 800d05e:	49ab      	ldr	r1, [pc, #684]	; (800d30c <HAL_RCC_OscConfig+0x320>)
 800d060:	0f12      	lsrs	r2, r2, #28
 800d062:	5c8a      	ldrb	r2, [r1, r2]
 800d064:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800d066:	4aaa      	ldr	r2, [pc, #680]	; (800d310 <HAL_RCC_OscConfig+0x324>)
 800d068:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800d06a:	4baa      	ldr	r3, [pc, #680]	; (800d314 <HAL_RCC_OscConfig+0x328>)
 800d06c:	6818      	ldr	r0, [r3, #0]
 800d06e:	f7fd fedd 	bl	800ae2c <HAL_InitTick>
        if(status != HAL_OK)
 800d072:	2800      	cmp	r0, #0
 800d074:	d1c0      	bne.n	800cff8 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d076:	682b      	ldr	r3, [r5, #0]
 800d078:	071b      	lsls	r3, r3, #28
 800d07a:	d500      	bpl.n	800d07e <HAL_RCC_OscConfig+0x92>
 800d07c:	e0eb      	b.n	800d256 <HAL_RCC_OscConfig+0x26a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	075b      	lsls	r3, r3, #29
 800d082:	d500      	bpl.n	800d086 <HAL_RCC_OscConfig+0x9a>
 800d084:	e10d      	b.n	800d2a2 <HAL_RCC_OscConfig+0x2b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d000      	beq.n	800d08e <HAL_RCC_OscConfig+0xa2>
 800d08c:	e194      	b.n	800d3b8 <HAL_RCC_OscConfig+0x3cc>
  return HAL_OK;
 800d08e:	2000      	movs	r0, #0
 800d090:	e7b2      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d092:	2e08      	cmp	r6, #8
 800d094:	d004      	beq.n	800d0a0 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d096:	2e0c      	cmp	r6, #12
 800d098:	d109      	bne.n	800d0ae <HAL_RCC_OscConfig+0xc2>
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	2a00      	cmp	r2, #0
 800d09e:	d006      	beq.n	800d0ae <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	039b      	lsls	r3, r3, #14
 800d0a4:	d5b6      	bpl.n	800d014 <HAL_RCC_OscConfig+0x28>
 800d0a6:	686b      	ldr	r3, [r5, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1b3      	bne.n	800d014 <HAL_RCC_OscConfig+0x28>
 800d0ac:	e7a3      	b.n	800cff6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0ae:	686a      	ldr	r2, [r5, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d111      	bne.n	800d0d8 <HAL_RCC_OscConfig+0xec>
 800d0b4:	6822      	ldr	r2, [r4, #0]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d0ba:	f7fd fefb 	bl	800aeb4 <HAL_GetTick>
 800d0be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d0c0:	2280      	movs	r2, #128	; 0x80
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	0292      	lsls	r2, r2, #10
 800d0c6:	4213      	tst	r3, r2
 800d0c8:	d1a4      	bne.n	800d014 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0ca:	f7fd fef3 	bl	800aeb4 <HAL_GetTick>
 800d0ce:	1bc0      	subs	r0, r0, r7
 800d0d0:	2864      	cmp	r0, #100	; 0x64
 800d0d2:	d9f5      	bls.n	800d0c0 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 800d0d4:	2003      	movs	r0, #3
 800d0d6:	e78f      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0d8:	21a0      	movs	r1, #160	; 0xa0
 800d0da:	02c9      	lsls	r1, r1, #11
 800d0dc:	428a      	cmp	r2, r1
 800d0de:	d105      	bne.n	800d0ec <HAL_RCC_OscConfig+0x100>
 800d0e0:	2280      	movs	r2, #128	; 0x80
 800d0e2:	6821      	ldr	r1, [r4, #0]
 800d0e4:	02d2      	lsls	r2, r2, #11
 800d0e6:	430a      	orrs	r2, r1
 800d0e8:	6022      	str	r2, [r4, #0]
 800d0ea:	e7e3      	b.n	800d0b4 <HAL_RCC_OscConfig+0xc8>
 800d0ec:	6821      	ldr	r1, [r4, #0]
 800d0ee:	488a      	ldr	r0, [pc, #552]	; (800d318 <HAL_RCC_OscConfig+0x32c>)
 800d0f0:	4001      	ands	r1, r0
 800d0f2:	6021      	str	r1, [r4, #0]
 800d0f4:	6821      	ldr	r1, [r4, #0]
 800d0f6:	400b      	ands	r3, r1
 800d0f8:	9305      	str	r3, [sp, #20]
 800d0fa:	9b05      	ldr	r3, [sp, #20]
 800d0fc:	4987      	ldr	r1, [pc, #540]	; (800d31c <HAL_RCC_OscConfig+0x330>)
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	400b      	ands	r3, r1
 800d102:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d104:	2a00      	cmp	r2, #0
 800d106:	d1d8      	bne.n	800d0ba <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 800d108:	f7fd fed4 	bl	800aeb4 <HAL_GetTick>
 800d10c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d10e:	2280      	movs	r2, #128	; 0x80
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	0292      	lsls	r2, r2, #10
 800d114:	4213      	tst	r3, r2
 800d116:	d100      	bne.n	800d11a <HAL_RCC_OscConfig+0x12e>
 800d118:	e77c      	b.n	800d014 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d11a:	f7fd fecb 	bl	800aeb4 <HAL_GetTick>
 800d11e:	1bc0      	subs	r0, r0, r7
 800d120:	2864      	cmp	r0, #100	; 0x64
 800d122:	d9f4      	bls.n	800d10e <HAL_RCC_OscConfig+0x122>
 800d124:	e7d6      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800d126:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800d128:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800d12a:	4213      	tst	r3, r2
 800d12c:	d003      	beq.n	800d136 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800d12e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800d130:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800d132:	4311      	orrs	r1, r2
 800d134:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d136:	2e04      	cmp	r6, #4
 800d138:	d004      	beq.n	800d144 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d13a:	2e0c      	cmp	r6, #12
 800d13c:	d126      	bne.n	800d18c <HAL_RCC_OscConfig+0x1a0>
 800d13e:	9a01      	ldr	r2, [sp, #4]
 800d140:	2a00      	cmp	r2, #0
 800d142:	d123      	bne.n	800d18c <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800d144:	6822      	ldr	r2, [r4, #0]
 800d146:	0752      	lsls	r2, r2, #29
 800d148:	d502      	bpl.n	800d150 <HAL_RCC_OscConfig+0x164>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d100      	bne.n	800d150 <HAL_RCC_OscConfig+0x164>
 800d14e:	e752      	b.n	800cff6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d150:	6861      	ldr	r1, [r4, #4]
 800d152:	692a      	ldr	r2, [r5, #16]
 800d154:	4872      	ldr	r0, [pc, #456]	; (800d320 <HAL_RCC_OscConfig+0x334>)
 800d156:	0212      	lsls	r2, r2, #8
 800d158:	4001      	ands	r1, r0
 800d15a:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800d15c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d15e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	438a      	bics	r2, r1
 800d164:	4313      	orrs	r3, r2
 800d166:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d168:	f7ff fef6 	bl	800cf58 <HAL_RCC_GetSysClockFreq>
 800d16c:	68e3      	ldr	r3, [r4, #12]
 800d16e:	4a67      	ldr	r2, [pc, #412]	; (800d30c <HAL_RCC_OscConfig+0x320>)
 800d170:	061b      	lsls	r3, r3, #24
 800d172:	0f1b      	lsrs	r3, r3, #28
 800d174:	5cd3      	ldrb	r3, [r2, r3]
 800d176:	40d8      	lsrs	r0, r3
 800d178:	4b65      	ldr	r3, [pc, #404]	; (800d310 <HAL_RCC_OscConfig+0x324>)
 800d17a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800d17c:	4b65      	ldr	r3, [pc, #404]	; (800d314 <HAL_RCC_OscConfig+0x328>)
 800d17e:	6818      	ldr	r0, [r3, #0]
 800d180:	f7fd fe54 	bl	800ae2c <HAL_InitTick>
      if(status != HAL_OK)
 800d184:	2800      	cmp	r0, #0
 800d186:	d100      	bne.n	800d18a <HAL_RCC_OscConfig+0x19e>
 800d188:	e748      	b.n	800d01c <HAL_RCC_OscConfig+0x30>
 800d18a:	e735      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d019      	beq.n	800d1c4 <HAL_RCC_OscConfig+0x1d8>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800d190:	2109      	movs	r1, #9
 800d192:	6822      	ldr	r2, [r4, #0]
 800d194:	438a      	bics	r2, r1
 800d196:	4313      	orrs	r3, r2
 800d198:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d19a:	f7fd fe8b 	bl	800aeb4 <HAL_GetTick>
 800d19e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	4213      	tst	r3, r2
 800d1a6:	d007      	beq.n	800d1b8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1a8:	6862      	ldr	r2, [r4, #4]
 800d1aa:	692b      	ldr	r3, [r5, #16]
 800d1ac:	495c      	ldr	r1, [pc, #368]	; (800d320 <HAL_RCC_OscConfig+0x334>)
 800d1ae:	021b      	lsls	r3, r3, #8
 800d1b0:	400a      	ands	r2, r1
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	6063      	str	r3, [r4, #4]
 800d1b6:	e731      	b.n	800d01c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d1b8:	f7fd fe7c 	bl	800aeb4 <HAL_GetTick>
 800d1bc:	1bc0      	subs	r0, r0, r7
 800d1be:	2802      	cmp	r0, #2
 800d1c0:	d9ee      	bls.n	800d1a0 <HAL_RCC_OscConfig+0x1b4>
 800d1c2:	e787      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI_DISABLE();
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	4393      	bics	r3, r2
 800d1ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d1cc:	f7fd fe72 	bl	800aeb4 <HAL_GetTick>
 800d1d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d1d2:	2204      	movs	r2, #4
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	4213      	tst	r3, r2
 800d1d8:	d100      	bne.n	800d1dc <HAL_RCC_OscConfig+0x1f0>
 800d1da:	e71f      	b.n	800d01c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d1dc:	f7fd fe6a 	bl	800aeb4 <HAL_GetTick>
 800d1e0:	1bc0      	subs	r0, r0, r7
 800d1e2:	2802      	cmp	r0, #2
 800d1e4:	d9f5      	bls.n	800d1d2 <HAL_RCC_OscConfig+0x1e6>
 800d1e6:	e775      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d1e8:	69ab      	ldr	r3, [r5, #24]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d020      	beq.n	800d230 <HAL_RCC_OscConfig+0x244>
        __HAL_RCC_MSI_ENABLE();
 800d1ee:	2380      	movs	r3, #128	; 0x80
 800d1f0:	6822      	ldr	r2, [r4, #0]
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d1f8:	f7fd fe5c 	bl	800aeb4 <HAL_GetTick>
 800d1fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d1fe:	2280      	movs	r2, #128	; 0x80
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	0092      	lsls	r2, r2, #2
 800d204:	4213      	tst	r3, r2
 800d206:	d00d      	beq.n	800d224 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d208:	6863      	ldr	r3, [r4, #4]
 800d20a:	4a3f      	ldr	r2, [pc, #252]	; (800d308 <HAL_RCC_OscConfig+0x31c>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	6a2a      	ldr	r2, [r5, #32]
 800d210:	4313      	orrs	r3, r2
 800d212:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d214:	6862      	ldr	r2, [r4, #4]
 800d216:	69eb      	ldr	r3, [r5, #28]
 800d218:	0212      	lsls	r2, r2, #8
 800d21a:	061b      	lsls	r3, r3, #24
 800d21c:	0a12      	lsrs	r2, r2, #8
 800d21e:	4313      	orrs	r3, r2
 800d220:	6063      	str	r3, [r4, #4]
 800d222:	e728      	b.n	800d076 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d224:	f7fd fe46 	bl	800aeb4 <HAL_GetTick>
 800d228:	1bc0      	subs	r0, r0, r7
 800d22a:	2802      	cmp	r0, #2
 800d22c:	d9e7      	bls.n	800d1fe <HAL_RCC_OscConfig+0x212>
 800d22e:	e751      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_MSI_DISABLE();
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	4a3c      	ldr	r2, [pc, #240]	; (800d324 <HAL_RCC_OscConfig+0x338>)
 800d234:	4013      	ands	r3, r2
 800d236:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d238:	f7fd fe3c 	bl	800aeb4 <HAL_GetTick>
 800d23c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800d23e:	2280      	movs	r2, #128	; 0x80
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	0092      	lsls	r2, r2, #2
 800d244:	4213      	tst	r3, r2
 800d246:	d100      	bne.n	800d24a <HAL_RCC_OscConfig+0x25e>
 800d248:	e715      	b.n	800d076 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d24a:	f7fd fe33 	bl	800aeb4 <HAL_GetTick>
 800d24e:	1bc0      	subs	r0, r0, r7
 800d250:	2802      	cmp	r0, #2
 800d252:	d9f4      	bls.n	800d23e <HAL_RCC_OscConfig+0x252>
 800d254:	e73e      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d256:	696a      	ldr	r2, [r5, #20]
 800d258:	2301      	movs	r3, #1
 800d25a:	2a00      	cmp	r2, #0
 800d25c:	d010      	beq.n	800d280 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 800d25e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d260:	4313      	orrs	r3, r2
 800d262:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d264:	f7fd fe26 	bl	800aeb4 <HAL_GetTick>
 800d268:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d26a:	2202      	movs	r2, #2
 800d26c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d26e:	4213      	tst	r3, r2
 800d270:	d000      	beq.n	800d274 <HAL_RCC_OscConfig+0x288>
 800d272:	e704      	b.n	800d07e <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d274:	f7fd fe1e 	bl	800aeb4 <HAL_GetTick>
 800d278:	1bc0      	subs	r0, r0, r7
 800d27a:	2802      	cmp	r0, #2
 800d27c:	d9f5      	bls.n	800d26a <HAL_RCC_OscConfig+0x27e>
 800d27e:	e729      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_LSI_DISABLE();
 800d280:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d282:	439a      	bics	r2, r3
 800d284:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d286:	f7fd fe15 	bl	800aeb4 <HAL_GetTick>
 800d28a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d28c:	2202      	movs	r2, #2
 800d28e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d290:	4213      	tst	r3, r2
 800d292:	d100      	bne.n	800d296 <HAL_RCC_OscConfig+0x2aa>
 800d294:	e6f3      	b.n	800d07e <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d296:	f7fd fe0d 	bl	800aeb4 <HAL_GetTick>
 800d29a:	1bc0      	subs	r0, r0, r7
 800d29c:	2802      	cmp	r0, #2
 800d29e:	d9f5      	bls.n	800d28c <HAL_RCC_OscConfig+0x2a0>
 800d2a0:	e718      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d2a2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800d2a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d2a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d2a8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800d2aa:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d2ac:	421a      	tst	r2, r3
 800d2ae:	d104      	bne.n	800d2ba <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2ba:	2280      	movs	r2, #128	; 0x80
 800d2bc:	4f1a      	ldr	r7, [pc, #104]	; (800d328 <HAL_RCC_OscConfig+0x33c>)
 800d2be:	0052      	lsls	r2, r2, #1
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	4213      	tst	r3, r2
 800d2c4:	d008      	beq.n	800d2d8 <HAL_RCC_OscConfig+0x2ec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2c6:	2280      	movs	r2, #128	; 0x80
 800d2c8:	68ab      	ldr	r3, [r5, #8]
 800d2ca:	0052      	lsls	r2, r2, #1
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d12d      	bne.n	800d32c <HAL_RCC_OscConfig+0x340>
 800d2d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	6523      	str	r3, [r4, #80]	; 0x50
 800d2d6:	e04e      	b.n	800d376 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d2d8:	2280      	movs	r2, #128	; 0x80
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	0052      	lsls	r2, r2, #1
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800d2e2:	f7fd fde7 	bl	800aeb4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2e6:	2380      	movs	r3, #128	; 0x80
 800d2e8:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800d2ea:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2ec:	9303      	str	r3, [sp, #12]
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	9a03      	ldr	r2, [sp, #12]
 800d2f2:	4213      	tst	r3, r2
 800d2f4:	d1e7      	bne.n	800d2c6 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d2f6:	f7fd fddd 	bl	800aeb4 <HAL_GetTick>
 800d2fa:	9b02      	ldr	r3, [sp, #8]
 800d2fc:	1ac0      	subs	r0, r0, r3
 800d2fe:	2864      	cmp	r0, #100	; 0x64
 800d300:	d9f5      	bls.n	800d2ee <HAL_RCC_OscConfig+0x302>
 800d302:	e6e7      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
 800d304:	40021000 	.word	0x40021000
 800d308:	ffff1fff 	.word	0xffff1fff
 800d30c:	080197c2 	.word	0x080197c2
 800d310:	20000568 	.word	0x20000568
 800d314:	200004d8 	.word	0x200004d8
 800d318:	fffeffff 	.word	0xfffeffff
 800d31c:	fffbffff 	.word	0xfffbffff
 800d320:	ffffe0ff 	.word	0xffffe0ff
 800d324:	fffffeff 	.word	0xfffffeff
 800d328:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d116      	bne.n	800d35e <HAL_RCC_OscConfig+0x372>
 800d330:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d332:	4a53      	ldr	r2, [pc, #332]	; (800d480 <HAL_RCC_OscConfig+0x494>)
 800d334:	4013      	ands	r3, r2
 800d336:	6523      	str	r3, [r4, #80]	; 0x50
 800d338:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d33a:	4a52      	ldr	r2, [pc, #328]	; (800d484 <HAL_RCC_OscConfig+0x498>)
 800d33c:	4013      	ands	r3, r2
 800d33e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d340:	f7fd fdb8 	bl	800aeb4 <HAL_GetTick>
 800d344:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d346:	2280      	movs	r2, #128	; 0x80
 800d348:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d34a:	0092      	lsls	r2, r2, #2
 800d34c:	4213      	tst	r3, r2
 800d34e:	d02a      	beq.n	800d3a6 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d350:	f7fd fdb0 	bl	800aeb4 <HAL_GetTick>
 800d354:	4b4c      	ldr	r3, [pc, #304]	; (800d488 <HAL_RCC_OscConfig+0x49c>)
 800d356:	1bc0      	subs	r0, r0, r7
 800d358:	4298      	cmp	r0, r3
 800d35a:	d9f4      	bls.n	800d346 <HAL_RCC_OscConfig+0x35a>
 800d35c:	e6ba      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d35e:	21a0      	movs	r1, #160	; 0xa0
 800d360:	00c9      	lsls	r1, r1, #3
 800d362:	428b      	cmp	r3, r1
 800d364:	d10b      	bne.n	800d37e <HAL_RCC_OscConfig+0x392>
 800d366:	2380      	movs	r3, #128	; 0x80
 800d368:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d36a:	00db      	lsls	r3, r3, #3
 800d36c:	430b      	orrs	r3, r1
 800d36e:	6523      	str	r3, [r4, #80]	; 0x50
 800d370:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d372:	431a      	orrs	r2, r3
 800d374:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d376:	f7fd fd9d 	bl	800aeb4 <HAL_GetTick>
 800d37a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d37c:	e00e      	b.n	800d39c <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d37e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d380:	4a3f      	ldr	r2, [pc, #252]	; (800d480 <HAL_RCC_OscConfig+0x494>)
 800d382:	4013      	ands	r3, r2
 800d384:	6523      	str	r3, [r4, #80]	; 0x50
 800d386:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d388:	4a3e      	ldr	r2, [pc, #248]	; (800d484 <HAL_RCC_OscConfig+0x498>)
 800d38a:	4013      	ands	r3, r2
 800d38c:	e7a2      	b.n	800d2d4 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d38e:	f7fd fd91 	bl	800aeb4 <HAL_GetTick>
 800d392:	4b3d      	ldr	r3, [pc, #244]	; (800d488 <HAL_RCC_OscConfig+0x49c>)
 800d394:	1bc0      	subs	r0, r0, r7
 800d396:	4298      	cmp	r0, r3
 800d398:	d900      	bls.n	800d39c <HAL_RCC_OscConfig+0x3b0>
 800d39a:	e69b      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d39c:	2280      	movs	r2, #128	; 0x80
 800d39e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d3a0:	0092      	lsls	r2, r2, #2
 800d3a2:	4213      	tst	r3, r2
 800d3a4:	d0f3      	beq.n	800d38e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 800d3a6:	9b01      	ldr	r3, [sp, #4]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d000      	beq.n	800d3ae <HAL_RCC_OscConfig+0x3c2>
 800d3ac:	e66b      	b.n	800d086 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3b0:	4a36      	ldr	r2, [pc, #216]	; (800d48c <HAL_RCC_OscConfig+0x4a0>)
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d3b6:	e666      	b.n	800d086 <HAL_RCC_OscConfig+0x9a>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d3b8:	2e0c      	cmp	r6, #12
 800d3ba:	d043      	beq.n	800d444 <HAL_RCC_OscConfig+0x458>
 800d3bc:	4a34      	ldr	r2, [pc, #208]	; (800d490 <HAL_RCC_OscConfig+0x4a4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d12e      	bne.n	800d420 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_PLL_DISABLE();
 800d3c2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d3c4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d3ca:	f7fd fd73 	bl	800aeb4 <HAL_GetTick>
 800d3ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d3d0:	04b6      	lsls	r6, r6, #18
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	4233      	tst	r3, r6
 800d3d6:	d11d      	bne.n	800d414 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d3d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800d3da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d3dc:	68e2      	ldr	r2, [r4, #12]
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	492c      	ldr	r1, [pc, #176]	; (800d494 <HAL_RCC_OscConfig+0x4a8>)
 800d3e2:	400a      	ands	r2, r1
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800d3e8:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800d3ee:	2380      	movs	r3, #128	; 0x80
 800d3f0:	6822      	ldr	r2, [r4, #0]
 800d3f2:	045b      	lsls	r3, r3, #17
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d3f8:	f7fd fd5c 	bl	800aeb4 <HAL_GetTick>
 800d3fc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800d3fe:	04ad      	lsls	r5, r5, #18
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	422b      	tst	r3, r5
 800d404:	d000      	beq.n	800d408 <HAL_RCC_OscConfig+0x41c>
 800d406:	e642      	b.n	800d08e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d408:	f7fd fd54 	bl	800aeb4 <HAL_GetTick>
 800d40c:	1b80      	subs	r0, r0, r6
 800d40e:	2802      	cmp	r0, #2
 800d410:	d9f6      	bls.n	800d400 <HAL_RCC_OscConfig+0x414>
 800d412:	e65f      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d414:	f7fd fd4e 	bl	800aeb4 <HAL_GetTick>
 800d418:	1bc0      	subs	r0, r0, r7
 800d41a:	2802      	cmp	r0, #2
 800d41c:	d9d9      	bls.n	800d3d2 <HAL_RCC_OscConfig+0x3e6>
 800d41e:	e659      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_PLL_DISABLE();
 800d420:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d422:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800d424:	4013      	ands	r3, r2
 800d426:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d428:	f7fd fd44 	bl	800aeb4 <HAL_GetTick>
 800d42c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d42e:	04ad      	lsls	r5, r5, #18
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	422b      	tst	r3, r5
 800d434:	d100      	bne.n	800d438 <HAL_RCC_OscConfig+0x44c>
 800d436:	e62a      	b.n	800d08e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d438:	f7fd fd3c 	bl	800aeb4 <HAL_GetTick>
 800d43c:	1b80      	subs	r0, r0, r6
 800d43e:	2802      	cmp	r0, #2
 800d440:	d9f6      	bls.n	800d430 <HAL_RCC_OscConfig+0x444>
 800d442:	e647      	b.n	800d0d4 <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 800d444:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d446:	2b01      	cmp	r3, #1
 800d448:	d100      	bne.n	800d44c <HAL_RCC_OscConfig+0x460>
 800d44a:	e5d5      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d44c:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800d44e:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d450:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800d452:	0252      	lsls	r2, r2, #9
 800d454:	401a      	ands	r2, r3
        return HAL_ERROR;
 800d456:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d458:	428a      	cmp	r2, r1
 800d45a:	d000      	beq.n	800d45e <HAL_RCC_OscConfig+0x472>
 800d45c:	e5cc      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d45e:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d460:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d462:	0392      	lsls	r2, r2, #14
 800d464:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d466:	428a      	cmp	r2, r1
 800d468:	d000      	beq.n	800d46c <HAL_RCC_OscConfig+0x480>
 800d46a:	e5c5      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800d46c:	20c0      	movs	r0, #192	; 0xc0
 800d46e:	0400      	lsls	r0, r0, #16
 800d470:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d472:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800d474:	1a18      	subs	r0, r3, r0
 800d476:	1e43      	subs	r3, r0, #1
 800d478:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800d47a:	b2c0      	uxtb	r0, r0
 800d47c:	e5bc      	b.n	800cff8 <HAL_RCC_OscConfig+0xc>
 800d47e:	46c0      	nop			; (mov r8, r8)
 800d480:	fffffeff 	.word	0xfffffeff
 800d484:	fffffbff 	.word	0xfffffbff
 800d488:	00001388 	.word	0x00001388
 800d48c:	efffffff 	.word	0xefffffff
 800d490:	feffffff 	.word	0xfeffffff
 800d494:	ff02ffff 	.word	0xff02ffff

0800d498 <HAL_RCC_ClockConfig>:
{
 800d498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d49a:	1e06      	subs	r6, r0, #0
 800d49c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800d49e:	d101      	bne.n	800d4a4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800d4a0:	2001      	movs	r0, #1
}
 800d4a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d4a4:	2501      	movs	r5, #1
 800d4a6:	4c5b      	ldr	r4, [pc, #364]	; (800d614 <HAL_RCC_ClockConfig+0x17c>)
 800d4a8:	9a01      	ldr	r2, [sp, #4]
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	402b      	ands	r3, r5
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d331      	bcc.n	800d516 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4b2:	6832      	ldr	r2, [r6, #0]
 800d4b4:	0793      	lsls	r3, r2, #30
 800d4b6:	d443      	bmi.n	800d540 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d4b8:	07d3      	lsls	r3, r2, #31
 800d4ba:	d449      	bmi.n	800d550 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d4bc:	2501      	movs	r5, #1
 800d4be:	6823      	ldr	r3, [r4, #0]
 800d4c0:	9a01      	ldr	r2, [sp, #4]
 800d4c2:	402b      	ands	r3, r5
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d909      	bls.n	800d4dc <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	43ab      	bics	r3, r5
 800d4cc:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800d4ce:	f7fd fcf1 	bl	800aeb4 <HAL_GetTick>
 800d4d2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4d4:	6823      	ldr	r3, [r4, #0]
 800d4d6:	422b      	tst	r3, r5
 800d4d8:	d000      	beq.n	800d4dc <HAL_RCC_ClockConfig+0x44>
 800d4da:	e08c      	b.n	800d5f6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4dc:	6832      	ldr	r2, [r6, #0]
 800d4de:	4c4e      	ldr	r4, [pc, #312]	; (800d618 <HAL_RCC_ClockConfig+0x180>)
 800d4e0:	0753      	lsls	r3, r2, #29
 800d4e2:	d500      	bpl.n	800d4e6 <HAL_RCC_ClockConfig+0x4e>
 800d4e4:	e08f      	b.n	800d606 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4e6:	0713      	lsls	r3, r2, #28
 800d4e8:	d506      	bpl.n	800d4f8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d4ea:	68e2      	ldr	r2, [r4, #12]
 800d4ec:	6933      	ldr	r3, [r6, #16]
 800d4ee:	494b      	ldr	r1, [pc, #300]	; (800d61c <HAL_RCC_ClockConfig+0x184>)
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	400a      	ands	r2, r1
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d4f8:	f7ff fd2e 	bl	800cf58 <HAL_RCC_GetSysClockFreq>
 800d4fc:	68e3      	ldr	r3, [r4, #12]
 800d4fe:	4a48      	ldr	r2, [pc, #288]	; (800d620 <HAL_RCC_ClockConfig+0x188>)
 800d500:	061b      	lsls	r3, r3, #24
 800d502:	0f1b      	lsrs	r3, r3, #28
 800d504:	5cd3      	ldrb	r3, [r2, r3]
 800d506:	40d8      	lsrs	r0, r3
 800d508:	4b46      	ldr	r3, [pc, #280]	; (800d624 <HAL_RCC_ClockConfig+0x18c>)
 800d50a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800d50c:	4b46      	ldr	r3, [pc, #280]	; (800d628 <HAL_RCC_ClockConfig+0x190>)
 800d50e:	6818      	ldr	r0, [r3, #0]
 800d510:	f7fd fc8c 	bl	800ae2c <HAL_InitTick>
 800d514:	e7c5      	b.n	800d4a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	9a01      	ldr	r2, [sp, #4]
 800d51a:	43ab      	bics	r3, r5
 800d51c:	4313      	orrs	r3, r2
 800d51e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800d520:	f7fd fcc8 	bl	800aeb4 <HAL_GetTick>
 800d524:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	9a01      	ldr	r2, [sp, #4]
 800d52a:	402b      	ands	r3, r5
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d0c0      	beq.n	800d4b2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d530:	f7fd fcc0 	bl	800aeb4 <HAL_GetTick>
 800d534:	4b3d      	ldr	r3, [pc, #244]	; (800d62c <HAL_RCC_ClockConfig+0x194>)
 800d536:	1bc0      	subs	r0, r0, r7
 800d538:	4298      	cmp	r0, r3
 800d53a:	d9f4      	bls.n	800d526 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800d53c:	2003      	movs	r0, #3
 800d53e:	e7b0      	b.n	800d4a2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d540:	20f0      	movs	r0, #240	; 0xf0
 800d542:	4935      	ldr	r1, [pc, #212]	; (800d618 <HAL_RCC_ClockConfig+0x180>)
 800d544:	68cb      	ldr	r3, [r1, #12]
 800d546:	4383      	bics	r3, r0
 800d548:	68b0      	ldr	r0, [r6, #8]
 800d54a:	4303      	orrs	r3, r0
 800d54c:	60cb      	str	r3, [r1, #12]
 800d54e:	e7b3      	b.n	800d4b8 <HAL_RCC_ClockConfig+0x20>
 800d550:	4d31      	ldr	r5, [pc, #196]	; (800d618 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d552:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d554:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d556:	2a02      	cmp	r2, #2
 800d558:	d118      	bne.n	800d58c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d55a:	039b      	lsls	r3, r3, #14
 800d55c:	d5a0      	bpl.n	800d4a0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d55e:	2103      	movs	r1, #3
 800d560:	68eb      	ldr	r3, [r5, #12]
 800d562:	438b      	bics	r3, r1
 800d564:	4313      	orrs	r3, r2
 800d566:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800d568:	f7fd fca4 	bl	800aeb4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d56c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800d56e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d570:	2b02      	cmp	r3, #2
 800d572:	d118      	bne.n	800d5a6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d574:	220c      	movs	r2, #12
 800d576:	68eb      	ldr	r3, [r5, #12]
 800d578:	4013      	ands	r3, r2
 800d57a:	2b08      	cmp	r3, #8
 800d57c:	d09e      	beq.n	800d4bc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d57e:	f7fd fc99 	bl	800aeb4 <HAL_GetTick>
 800d582:	4b2a      	ldr	r3, [pc, #168]	; (800d62c <HAL_RCC_ClockConfig+0x194>)
 800d584:	1bc0      	subs	r0, r0, r7
 800d586:	4298      	cmp	r0, r3
 800d588:	d9f4      	bls.n	800d574 <HAL_RCC_ClockConfig+0xdc>
 800d58a:	e7d7      	b.n	800d53c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d58c:	2a03      	cmp	r2, #3
 800d58e:	d102      	bne.n	800d596 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d590:	019b      	lsls	r3, r3, #6
 800d592:	d4e4      	bmi.n	800d55e <HAL_RCC_ClockConfig+0xc6>
 800d594:	e784      	b.n	800d4a0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d596:	2a01      	cmp	r2, #1
 800d598:	d102      	bne.n	800d5a0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d59a:	075b      	lsls	r3, r3, #29
 800d59c:	d4df      	bmi.n	800d55e <HAL_RCC_ClockConfig+0xc6>
 800d59e:	e77f      	b.n	800d4a0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d5a0:	059b      	lsls	r3, r3, #22
 800d5a2:	d4dc      	bmi.n	800d55e <HAL_RCC_ClockConfig+0xc6>
 800d5a4:	e77c      	b.n	800d4a0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d10b      	bne.n	800d5c2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5aa:	220c      	movs	r2, #12
 800d5ac:	68eb      	ldr	r3, [r5, #12]
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d083      	beq.n	800d4bc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5b4:	f7fd fc7e 	bl	800aeb4 <HAL_GetTick>
 800d5b8:	4b1c      	ldr	r3, [pc, #112]	; (800d62c <HAL_RCC_ClockConfig+0x194>)
 800d5ba:	1bc0      	subs	r0, r0, r7
 800d5bc:	4298      	cmp	r0, r3
 800d5be:	d9f4      	bls.n	800d5aa <HAL_RCC_ClockConfig+0x112>
 800d5c0:	e7bc      	b.n	800d53c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d011      	beq.n	800d5ea <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d5c6:	220c      	movs	r2, #12
 800d5c8:	68eb      	ldr	r3, [r5, #12]
 800d5ca:	4213      	tst	r3, r2
 800d5cc:	d100      	bne.n	800d5d0 <HAL_RCC_ClockConfig+0x138>
 800d5ce:	e775      	b.n	800d4bc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5d0:	f7fd fc70 	bl	800aeb4 <HAL_GetTick>
 800d5d4:	4b15      	ldr	r3, [pc, #84]	; (800d62c <HAL_RCC_ClockConfig+0x194>)
 800d5d6:	1bc0      	subs	r0, r0, r7
 800d5d8:	4298      	cmp	r0, r3
 800d5da:	d9f4      	bls.n	800d5c6 <HAL_RCC_ClockConfig+0x12e>
 800d5dc:	e7ae      	b.n	800d53c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5de:	f7fd fc69 	bl	800aeb4 <HAL_GetTick>
 800d5e2:	4b12      	ldr	r3, [pc, #72]	; (800d62c <HAL_RCC_ClockConfig+0x194>)
 800d5e4:	1bc0      	subs	r0, r0, r7
 800d5e6:	4298      	cmp	r0, r3
 800d5e8:	d8a8      	bhi.n	800d53c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d5ea:	220c      	movs	r2, #12
 800d5ec:	68eb      	ldr	r3, [r5, #12]
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	2b04      	cmp	r3, #4
 800d5f2:	d1f4      	bne.n	800d5de <HAL_RCC_ClockConfig+0x146>
 800d5f4:	e762      	b.n	800d4bc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5f6:	f7fd fc5d 	bl	800aeb4 <HAL_GetTick>
 800d5fa:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <HAL_RCC_ClockConfig+0x194>)
 800d5fc:	1bc0      	subs	r0, r0, r7
 800d5fe:	4298      	cmp	r0, r3
 800d600:	d800      	bhi.n	800d604 <HAL_RCC_ClockConfig+0x16c>
 800d602:	e767      	b.n	800d4d4 <HAL_RCC_ClockConfig+0x3c>
 800d604:	e79a      	b.n	800d53c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d606:	68e3      	ldr	r3, [r4, #12]
 800d608:	4909      	ldr	r1, [pc, #36]	; (800d630 <HAL_RCC_ClockConfig+0x198>)
 800d60a:	400b      	ands	r3, r1
 800d60c:	68f1      	ldr	r1, [r6, #12]
 800d60e:	430b      	orrs	r3, r1
 800d610:	60e3      	str	r3, [r4, #12]
 800d612:	e768      	b.n	800d4e6 <HAL_RCC_ClockConfig+0x4e>
 800d614:	40022000 	.word	0x40022000
 800d618:	40021000 	.word	0x40021000
 800d61c:	ffffc7ff 	.word	0xffffc7ff
 800d620:	080197c2 	.word	0x080197c2
 800d624:	20000568 	.word	0x20000568
 800d628:	200004d8 	.word	0x200004d8
 800d62c:	00001388 	.word	0x00001388
 800d630:	fffff8ff 	.word	0xfffff8ff

0800d634 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d634:	6803      	ldr	r3, [r0, #0]
{
 800d636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d638:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d63a:	069b      	lsls	r3, r3, #26
 800d63c:	d53b      	bpl.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d63e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800d640:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d642:	4c59      	ldr	r4, [pc, #356]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d644:	055b      	lsls	r3, r3, #21
 800d646:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800d648:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d64a:	421a      	tst	r2, r3
 800d64c:	d104      	bne.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d64e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d650:	4313      	orrs	r3, r2
 800d652:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800d654:	2301      	movs	r3, #1
 800d656:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d658:	2780      	movs	r7, #128	; 0x80
 800d65a:	4e54      	ldr	r6, [pc, #336]	; (800d7ac <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800d65c:	007f      	lsls	r7, r7, #1
 800d65e:	6833      	ldr	r3, [r6, #0]
 800d660:	423b      	tst	r3, r7
 800d662:	d061      	beq.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d664:	6868      	ldr	r0, [r5, #4]
 800d666:	23c0      	movs	r3, #192	; 0xc0
 800d668:	26c0      	movs	r6, #192	; 0xc0
 800d66a:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d66c:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d66e:	03b6      	lsls	r6, r6, #14
 800d670:	029b      	lsls	r3, r3, #10
 800d672:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d674:	4032      	ands	r2, r6
 800d676:	4019      	ands	r1, r3
 800d678:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d67a:	4290      	cmp	r0, r2
 800d67c:	d165      	bne.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x116>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800d67e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d680:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d682:	d16a      	bne.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x126>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d684:	6869      	ldr	r1, [r5, #4]
 800d686:	23c0      	movs	r3, #192	; 0xc0
 800d688:	000a      	movs	r2, r1
 800d68a:	029b      	lsls	r3, r3, #10
 800d68c:	401a      	ands	r2, r3
 800d68e:	429a      	cmp	r2, r3
 800d690:	d107      	bne.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	4846      	ldr	r0, [pc, #280]	; (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800d696:	4003      	ands	r3, r0
 800d698:	20c0      	movs	r0, #192	; 0xc0
 800d69a:	0380      	lsls	r0, r0, #14
 800d69c:	4001      	ands	r1, r0
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d6a4:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d6a6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d6a8:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d103      	bne.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6b0:	4a40      	ldr	r2, [pc, #256]	; (800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d6b6:	682b      	ldr	r3, [r5, #0]
 800d6b8:	07da      	lsls	r2, r3, #31
 800d6ba:	d506      	bpl.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d6bc:	2003      	movs	r0, #3
 800d6be:	493a      	ldr	r1, [pc, #232]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d6c0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d6c2:	4382      	bics	r2, r0
 800d6c4:	68a8      	ldr	r0, [r5, #8]
 800d6c6:	4302      	orrs	r2, r0
 800d6c8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d6ca:	079a      	lsls	r2, r3, #30
 800d6cc:	d506      	bpl.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d6ce:	200c      	movs	r0, #12
 800d6d0:	4935      	ldr	r1, [pc, #212]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d6d2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d6d4:	4382      	bics	r2, r0
 800d6d6:	68e8      	ldr	r0, [r5, #12]
 800d6d8:	4302      	orrs	r2, r0
 800d6da:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6dc:	075a      	lsls	r2, r3, #29
 800d6de:	d506      	bpl.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d6e0:	4931      	ldr	r1, [pc, #196]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d6e2:	4835      	ldr	r0, [pc, #212]	; (800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800d6e4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d6e6:	4002      	ands	r2, r0
 800d6e8:	6928      	ldr	r0, [r5, #16]
 800d6ea:	4302      	orrs	r2, r0
 800d6ec:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d6ee:	071a      	lsls	r2, r3, #28
 800d6f0:	d506      	bpl.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d6f2:	492d      	ldr	r1, [pc, #180]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d6f4:	4831      	ldr	r0, [pc, #196]	; (800d7bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800d6f6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d6f8:	4002      	ands	r2, r0
 800d6fa:	6968      	ldr	r0, [r5, #20]
 800d6fc:	4302      	orrs	r2, r0
 800d6fe:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d700:	05da      	lsls	r2, r3, #23
 800d702:	d506      	bpl.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d704:	4928      	ldr	r1, [pc, #160]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d706:	482e      	ldr	r0, [pc, #184]	; (800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d708:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d70a:	4002      	ands	r2, r0
 800d70c:	69a8      	ldr	r0, [r5, #24]
 800d70e:	4302      	orrs	r2, r0
 800d710:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800d712:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d714:	061b      	lsls	r3, r3, #24
 800d716:	d517      	bpl.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800d718:	4a23      	ldr	r2, [pc, #140]	; (800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800d71a:	492a      	ldr	r1, [pc, #168]	; (800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800d71c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d71e:	400b      	ands	r3, r1
 800d720:	69e9      	ldr	r1, [r5, #28]
 800d722:	430b      	orrs	r3, r1
 800d724:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d726:	e00f      	b.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x114>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d728:	6833      	ldr	r3, [r6, #0]
 800d72a:	433b      	orrs	r3, r7
 800d72c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d72e:	f7fd fbc1 	bl	800aeb4 <HAL_GetTick>
 800d732:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d734:	6833      	ldr	r3, [r6, #0]
 800d736:	423b      	tst	r3, r7
 800d738:	d194      	bne.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d73a:	f7fd fbbb 	bl	800aeb4 <HAL_GetTick>
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	1ac0      	subs	r0, r0, r3
 800d742:	2864      	cmp	r0, #100	; 0x64
 800d744:	d9f6      	bls.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0x100>
          return HAL_TIMEOUT;
 800d746:	2003      	movs	r0, #3
}
 800d748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800d74a:	4299      	cmp	r1, r3
 800d74c:	d197      	bne.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d74e:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 800d750:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d752:	039b      	lsls	r3, r3, #14
 800d754:	d400      	bmi.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800d756:	e792      	b.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800d758:	e7f6      	b.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d75a:	428b      	cmp	r3, r1
 800d75c:	d100      	bne.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800d75e:	e791      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	069b      	lsls	r3, r3, #26
 800d764:	d400      	bmi.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800d766:	e78d      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 800d768:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d76a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800d76c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d76e:	0312      	lsls	r2, r2, #12
 800d770:	4302      	orrs	r2, r0
 800d772:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d774:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d776:	4b12      	ldr	r3, [pc, #72]	; (800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d778:	4813      	ldr	r0, [pc, #76]	; (800d7c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d77a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d77c:	4002      	ands	r2, r0
 800d77e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800d780:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800d782:	05cb      	lsls	r3, r1, #23
 800d784:	d400      	bmi.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800d786:	e77d      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 800d788:	f7fd fb94 	bl	800aeb4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d78c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800d78e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d790:	00bf      	lsls	r7, r7, #2
 800d792:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d794:	423b      	tst	r3, r7
 800d796:	d000      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800d798:	e774      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d79a:	f7fd fb8b 	bl	800aeb4 <HAL_GetTick>
 800d79e:	4b0b      	ldr	r3, [pc, #44]	; (800d7cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800d7a0:	1b80      	subs	r0, r0, r6
 800d7a2:	4298      	cmp	r0, r3
 800d7a4:	d9f5      	bls.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800d7a6:	e7ce      	b.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800d7a8:	40021000 	.word	0x40021000
 800d7ac:	40007000 	.word	0x40007000
 800d7b0:	ffcfffff 	.word	0xffcfffff
 800d7b4:	efffffff 	.word	0xefffffff
 800d7b8:	fffff3ff 	.word	0xfffff3ff
 800d7bc:	ffffcfff 	.word	0xffffcfff
 800d7c0:	fffcffff 	.word	0xfffcffff
 800d7c4:	fff3ffff 	.word	0xfff3ffff
 800d7c8:	fff7ffff 	.word	0xfff7ffff
 800d7cc:	00001388 	.word	0x00001388

0800d7d0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d7d0:	21a0      	movs	r1, #160	; 0xa0
 800d7d2:	6802      	ldr	r2, [r0, #0]
{
 800d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d7d6:	68d3      	ldr	r3, [r2, #12]
{
 800d7d8:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d7da:	438b      	bics	r3, r1
 800d7dc:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d7de:	f7fd fb69 	bl	800aeb4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7e2:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 800d7e4:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7e6:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7e8:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	422b      	tst	r3, r5
 800d7f0:	d001      	beq.n	800d7f6 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800d7f2:	2000      	movs	r0, #0
}
 800d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7f6:	f7fd fb5d 	bl	800aeb4 <HAL_GetTick>
 800d7fa:	1b80      	subs	r0, r0, r6
 800d7fc:	42b8      	cmp	r0, r7
 800d7fe:	d9f4      	bls.n	800d7ea <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800d800:	2003      	movs	r0, #3
 800d802:	e7f7      	b.n	800d7f4 <HAL_RTC_WaitForSynchro+0x24>

0800d804 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d806:	2440      	movs	r4, #64	; 0x40
 800d808:	6803      	ldr	r3, [r0, #0]
{
 800d80a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d80c:	68da      	ldr	r2, [r3, #12]
 800d80e:	4222      	tst	r2, r4
 800d810:	d001      	beq.n	800d816 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800d812:	2000      	movs	r0, #0
}
 800d814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d816:	2201      	movs	r2, #1
 800d818:	4252      	negs	r2, r2
 800d81a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800d81c:	f7fd fb4a 	bl	800aeb4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d820:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800d822:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d824:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4223      	tst	r3, r4
 800d82c:	d1f1      	bne.n	800d812 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d82e:	f7fd fb41 	bl	800aeb4 <HAL_GetTick>
 800d832:	1b80      	subs	r0, r0, r6
 800d834:	42b8      	cmp	r0, r7
 800d836:	d9f6      	bls.n	800d826 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800d838:	2003      	movs	r0, #3
 800d83a:	e7eb      	b.n	800d814 <RTC_EnterInitMode+0x10>

0800d83c <HAL_RTC_Init>:
{
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	0004      	movs	r4, r0
    return HAL_ERROR;
 800d840:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800d842:	2800      	cmp	r0, #0
 800d844:	d01a      	beq.n	800d87c <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d846:	1c86      	adds	r6, r0, #2
 800d848:	7ff3      	ldrb	r3, [r6, #31]
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d103      	bne.n	800d858 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800d850:	1942      	adds	r2, r0, r5
 800d852:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 800d854:	f006 fd0c 	bl	8014270 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d858:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d85a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d85c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d85e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d860:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d862:	625a      	str	r2, [r3, #36]	; 0x24
 800d864:	3a77      	subs	r2, #119	; 0x77
 800d866:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d868:	f7ff ffcc 	bl	800d804 <RTC_EnterInitMode>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	1e05      	subs	r5, r0, #0
 800d870:	d006      	beq.n	800d880 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d872:	22ff      	movs	r2, #255	; 0xff
 800d874:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d876:	2304      	movs	r3, #4
 800d878:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800d87a:	2501      	movs	r5, #1
}
 800d87c:	0028      	movs	r0, r5
 800d87e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d880:	689a      	ldr	r2, [r3, #8]
 800d882:	491b      	ldr	r1, [pc, #108]	; (800d8f0 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d884:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d886:	400a      	ands	r2, r1
 800d888:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d88a:	6862      	ldr	r2, [r4, #4]
 800d88c:	6899      	ldr	r1, [r3, #8]
 800d88e:	4302      	orrs	r2, r0
 800d890:	69a0      	ldr	r0, [r4, #24]
 800d892:	4302      	orrs	r2, r0
 800d894:	430a      	orrs	r2, r1
 800d896:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d898:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d89a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d89c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d89e:	68a2      	ldr	r2, [r4, #8]
 800d8a0:	6919      	ldr	r1, [r3, #16]
 800d8a2:	0412      	lsls	r2, r2, #16
 800d8a4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d8a6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d8a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d8aa:	68da      	ldr	r2, [r3, #12]
 800d8ac:	438a      	bics	r2, r1
 800d8ae:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8b2:	397d      	subs	r1, #125	; 0x7d
 800d8b4:	438a      	bics	r2, r1
 800d8b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8b8:	69e2      	ldr	r2, [r4, #28]
 800d8ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d8bc:	4302      	orrs	r2, r0
 800d8be:	430a      	orrs	r2, r1
 800d8c0:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	069b      	lsls	r3, r3, #26
 800d8c6:	d40c      	bmi.n	800d8e2 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8c8:	0020      	movs	r0, r4
 800d8ca:	f7ff ff81 	bl	800d7d0 <HAL_RTC_WaitForSynchro>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d007      	beq.n	800d8e2 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8d2:	22ff      	movs	r2, #255	; 0xff
 800d8d4:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800d8d6:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8d8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d8da:	2304      	movs	r3, #4
 800d8dc:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800d8de:	77e5      	strb	r5, [r4, #31]
 800d8e0:	e7cb      	b.n	800d87a <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8e2:	22ff      	movs	r2, #255	; 0xff
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800d8ec:	e7c6      	b.n	800d87c <HAL_RTC_Init+0x40>
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	ff8fffbf 	.word	0xff8fffbf

0800d8f4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800d8f4:	230a      	movs	r3, #10
 800d8f6:	0902      	lsrs	r2, r0, #4
 800d8f8:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800d8fa:	220f      	movs	r2, #15
 800d8fc:	4010      	ands	r0, r2
 800d8fe:	1818      	adds	r0, r3, r0
 800d900:	b2c0      	uxtb	r0, r0
}
 800d902:	4770      	bx	lr

0800d904 <HAL_RTC_GetTime>:
{
 800d904:	b570      	push	{r4, r5, r6, lr}
 800d906:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d908:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d90a:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d90c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800d90e:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d910:	690b      	ldr	r3, [r1, #16]
 800d912:	045b      	lsls	r3, r3, #17
 800d914:	0c5b      	lsrs	r3, r3, #17
 800d916:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d918:	680b      	ldr	r3, [r1, #0]
 800d91a:	490e      	ldr	r1, [pc, #56]	; (800d954 <HAL_RTC_GetTime+0x50>)
 800d91c:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d91e:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800d920:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d922:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d924:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d926:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800d928:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d92a:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d92c:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800d92e:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d930:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d932:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 800d934:	2a00      	cmp	r2, #0
 800d936:	d10a      	bne.n	800d94e <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d938:	f7ff ffdc 	bl	800d8f4 <RTC_Bcd2ToByte>
 800d93c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d93e:	0030      	movs	r0, r6
 800d940:	f7ff ffd8 	bl	800d8f4 <RTC_Bcd2ToByte>
 800d944:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d946:	0028      	movs	r0, r5
 800d948:	f7ff ffd4 	bl	800d8f4 <RTC_Bcd2ToByte>
 800d94c:	70a0      	strb	r0, [r4, #2]
}
 800d94e:	2000      	movs	r0, #0
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	46c0      	nop			; (mov r8, r8)
 800d954:	007f7f7f 	.word	0x007f7f7f

0800d958 <HAL_RTC_GetDate>:
{
 800d958:	b570      	push	{r4, r5, r6, lr}
 800d95a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d95c:	6803      	ldr	r3, [r0, #0]
 800d95e:	490e      	ldr	r1, [pc, #56]	; (800d998 <HAL_RTC_GetDate+0x40>)
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d964:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d966:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d968:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800d96a:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d96c:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800d96e:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d970:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d972:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d974:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800d976:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800d978:	2a00      	cmp	r2, #0
 800d97a:	d10a      	bne.n	800d992 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d97c:	f7ff ffba 	bl	800d8f4 <RTC_Bcd2ToByte>
 800d980:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d982:	0028      	movs	r0, r5
 800d984:	f7ff ffb6 	bl	800d8f4 <RTC_Bcd2ToByte>
 800d988:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d98a:	0030      	movs	r0, r6
 800d98c:	f7ff ffb2 	bl	800d8f4 <RTC_Bcd2ToByte>
 800d990:	70a0      	strb	r0, [r4, #2]
}
 800d992:	2000      	movs	r0, #0
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	46c0      	nop			; (mov r8, r8)
 800d998:	00ffff3f 	.word	0x00ffff3f

0800d99c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d99c:	2302      	movs	r3, #2
 800d99e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a0:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9a2:	1c46      	adds	r6, r0, #1
{
 800d9a4:	9102      	str	r1, [sp, #8]
 800d9a6:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hrtc);
 800d9a8:	7ff2      	ldrb	r2, [r6, #31]
{
 800d9aa:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800d9ac:	0018      	movs	r0, r3
 800d9ae:	2a01      	cmp	r2, #1
 800d9b0:	d058      	beq.n	800da64 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
 800d9b2:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9b4:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 800d9b6:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9b8:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9ba:	6823      	ldr	r3, [r4, #0]
 800d9bc:	32c9      	adds	r2, #201	; 0xc9
 800d9be:	625a      	str	r2, [r3, #36]	; 0x24
 800d9c0:	3a77      	subs	r2, #119	; 0x77
 800d9c2:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	055b      	lsls	r3, r3, #21
 800d9c8:	d435      	bmi.n	800da36 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	492e      	ldr	r1, [pc, #184]	; (800da88 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800d9ce:	689a      	ldr	r2, [r3, #8]
 800d9d0:	400a      	ands	r2, r1
 800d9d2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d9d4:	68d9      	ldr	r1, [r3, #12]
 800d9d6:	4a2d      	ldr	r2, [pc, #180]	; (800da8c <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 800d9d8:	b2c9      	uxtb	r1, r1
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d9de:	f7fd fa69 	bl	800aeb4 <HAL_GetTick>
 800d9e2:	9001      	str	r0, [sp, #4]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	68dd      	ldr	r5, [r3, #12]
 800d9ea:	4015      	ands	r5, r2
 800d9ec:	d03c      	beq.n	800da68 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d9ee:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d9f0:	9a02      	ldr	r2, [sp, #8]
 800d9f2:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d9f4:	689a      	ldr	r2, [r3, #8]
 800d9f6:	438a      	bics	r2, r1
 800d9f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d9fa:	689a      	ldr	r2, [r3, #8]
 800d9fc:	9903      	ldr	r1, [sp, #12]
 800d9fe:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800da00:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800da02:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800da04:	4a22      	ldr	r2, [pc, #136]	; (800da90 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800da06:	0349      	lsls	r1, r1, #13
 800da08:	6810      	ldr	r0, [r2, #0]
 800da0a:	4308      	orrs	r0, r1
 800da0c:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800da0e:	6890      	ldr	r0, [r2, #8]
 800da10:	4301      	orrs	r1, r0
 800da12:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800da14:	2280      	movs	r2, #128	; 0x80
 800da16:	6899      	ldr	r1, [r3, #8]
 800da18:	01d2      	lsls	r2, r2, #7
 800da1a:	430a      	orrs	r2, r1
 800da1c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800da1e:	2280      	movs	r2, #128	; 0x80
 800da20:	6899      	ldr	r1, [r3, #8]
 800da22:	00d2      	lsls	r2, r2, #3
 800da24:	430a      	orrs	r2, r1
 800da26:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da28:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da2a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da2c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800da2e:	2301      	movs	r3, #1
 800da30:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 800da32:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 800da34:	e016      	b.n	800da64 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
    tickstart = HAL_GetTick();
 800da36:	f7fd fa3d 	bl	800aeb4 <HAL_GetTick>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800da3a:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800da3c:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	422b      	tst	r3, r5
 800da44:	d0c1      	beq.n	800d9ca <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da46:	f7fd fa35 	bl	800aeb4 <HAL_GetTick>
 800da4a:	9b01      	ldr	r3, [sp, #4]
 800da4c:	1ac0      	subs	r0, r0, r3
 800da4e:	23fa      	movs	r3, #250	; 0xfa
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4298      	cmp	r0, r3
 800da54:	d9f3      	bls.n	800da3e <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da56:	22ff      	movs	r2, #255	; 0xff
 800da58:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da5a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da5c:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800da5e:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da60:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 800da62:	77f3      	strb	r3, [r6, #31]
}
 800da64:	b005      	add	sp, #20
 800da66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da68:	f7fd fa24 	bl	800aeb4 <HAL_GetTick>
 800da6c:	9b01      	ldr	r3, [sp, #4]
 800da6e:	1ac0      	subs	r0, r0, r3
 800da70:	23fa      	movs	r3, #250	; 0xfa
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4298      	cmp	r0, r3
 800da76:	d9b5      	bls.n	800d9e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x48>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da78:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da7a:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da80:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 800da82:	77f5      	strb	r5, [r6, #31]
      return HAL_TIMEOUT;
 800da84:	e7ee      	b.n	800da64 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	fffffbff 	.word	0xfffffbff
 800da8c:	fffffb7f 	.word	0xfffffb7f
 800da90:	40010400 	.word	0x40010400

0800da94 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800da94:	2302      	movs	r3, #2
 800da96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da98:	1c45      	adds	r5, r0, #1
 800da9a:	7fea      	ldrb	r2, [r5, #31]
{
 800da9c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800da9e:	0018      	movs	r0, r3
 800daa0:	2a01      	cmp	r2, #1
 800daa2:	d02d      	beq.n	800db00 <HAL_RTCEx_DeactivateWakeUpTimer+0x6c>
 800daa4:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800daa6:	18e6      	adds	r6, r4, r3
  __HAL_LOCK(hrtc);
 800daa8:	77ea      	strb	r2, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800daaa:	77f3      	strb	r3, [r6, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	32c9      	adds	r2, #201	; 0xc9
 800dab0:	625a      	str	r2, [r3, #36]	; 0x24
 800dab2:	3a77      	subs	r2, #119	; 0x77
 800dab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dab6:	689a      	ldr	r2, [r3, #8]
 800dab8:	4912      	ldr	r1, [pc, #72]	; (800db04 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>)
 800daba:	400a      	ands	r2, r1
 800dabc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800dabe:	689a      	ldr	r2, [r3, #8]
 800dac0:	4911      	ldr	r1, [pc, #68]	; (800db08 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>)
 800dac2:	400a      	ands	r2, r1
 800dac4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800dac6:	f7fd f9f5 	bl	800aeb4 <HAL_GetTick>
 800daca:	9001      	str	r0, [sp, #4]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dacc:	2204      	movs	r2, #4
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	68df      	ldr	r7, [r3, #12]
 800dad2:	4017      	ands	r7, r2
 800dad4:	d006      	beq.n	800dae4 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dad6:	32fb      	adds	r2, #251	; 0xfb
 800dad8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dada:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800dadc:	2301      	movs	r3, #1
 800dade:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800dae0:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
 800dae2:	e00d      	b.n	800db00 <HAL_RTCEx_DeactivateWakeUpTimer+0x6c>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dae4:	f7fd f9e6 	bl	800aeb4 <HAL_GetTick>
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	1ac0      	subs	r0, r0, r3
 800daec:	23fa      	movs	r3, #250	; 0xfa
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4298      	cmp	r0, r3
 800daf2:	d9eb      	bls.n	800dacc <HAL_RTCEx_DeactivateWakeUpTimer+0x38>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daf4:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800daf6:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dafc:	77f0      	strb	r0, [r6, #31]
      __HAL_UNLOCK(hrtc);
 800dafe:	77ef      	strb	r7, [r5, #31]
}
 800db00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db02:	46c0      	nop			; (mov r8, r8)
 800db04:	fffffbff 	.word	0xfffffbff
 800db08:	ffffbfff 	.word	0xffffbfff

0800db0c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800db0c:	6803      	ldr	r3, [r0, #0]
{
 800db0e:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800db10:	68db      	ldr	r3, [r3, #12]
{
 800db12:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800db14:	055b      	lsls	r3, r3, #21
 800db16:	d507      	bpl.n	800db28 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800db18:	f005 f90a 	bl	8012d30 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800db1c:	6821      	ldr	r1, [r4, #0]
 800db1e:	4b06      	ldr	r3, [pc, #24]	; (800db38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 800db20:	68ca      	ldr	r2, [r1, #12]
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	4313      	orrs	r3, r2
 800db26:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800db28:	2280      	movs	r2, #128	; 0x80
 800db2a:	4b04      	ldr	r3, [pc, #16]	; (800db3c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800db2c:	0352      	lsls	r2, r2, #13
 800db2e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800db30:	2301      	movs	r3, #1
 800db32:	3402      	adds	r4, #2
 800db34:	77e3      	strb	r3, [r4, #31]
}
 800db36:	bd10      	pop	{r4, pc}
 800db38:	fffffb7f 	.word	0xfffffb7f
 800db3c:	40010400 	.word	0x40010400

0800db40 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db42:	001d      	movs	r5, r3
 800db44:	b085      	sub	sp, #20
 800db46:	0016      	movs	r6, r2
 800db48:	000f      	movs	r7, r1
 800db4a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800db4c:	f7fd f9b2 	bl	800aeb4 <HAL_GetTick>
 800db50:	19ad      	adds	r5, r5, r6
 800db52:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800db54:	f7fd f9ae 	bl	800aeb4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800db58:	4b25      	ldr	r3, [pc, #148]	; (800dbf0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800db5a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	015b      	lsls	r3, r3, #5
 800db60:	0d1b      	lsrs	r3, r3, #20
 800db62:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800db64:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800db66:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800db68:	6893      	ldr	r3, [r2, #8]
 800db6a:	403b      	ands	r3, r7
 800db6c:	429f      	cmp	r7, r3
 800db6e:	d001      	beq.n	800db74 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x34>
    }
  }

  return HAL_OK;
 800db70:	2000      	movs	r0, #0
 800db72:	e032      	b.n	800dbda <SPI_WaitFlagStateUntilTimeout.constprop.7+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 800db74:	1c73      	adds	r3, r6, #1
 800db76:	d0f7      	beq.n	800db68 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800db78:	f7fd f99c 	bl	800aeb4 <HAL_GetTick>
 800db7c:	9b01      	ldr	r3, [sp, #4]
 800db7e:	1ac0      	subs	r0, r0, r3
 800db80:	42a8      	cmp	r0, r5
 800db82:	d32c      	bcc.n	800dbde <SPI_WaitFlagStateUntilTimeout.constprop.7+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800db84:	21e0      	movs	r1, #224	; 0xe0
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	438a      	bics	r2, r1
 800db8c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db8e:	2282      	movs	r2, #130	; 0x82
 800db90:	6861      	ldr	r1, [r4, #4]
 800db92:	0052      	lsls	r2, r2, #1
 800db94:	4291      	cmp	r1, r2
 800db96:	d10c      	bne.n	800dbb2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x72>
 800db98:	2180      	movs	r1, #128	; 0x80
 800db9a:	68a2      	ldr	r2, [r4, #8]
 800db9c:	0209      	lsls	r1, r1, #8
 800db9e:	428a      	cmp	r2, r1
 800dba0:	d003      	beq.n	800dbaa <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dba2:	2180      	movs	r1, #128	; 0x80
 800dba4:	00c9      	lsls	r1, r1, #3
 800dba6:	428a      	cmp	r2, r1
 800dba8:	d103      	bne.n	800dbb2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x72>
          __HAL_SPI_DISABLE(hspi);
 800dbaa:	2140      	movs	r1, #64	; 0x40
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	438a      	bics	r2, r1
 800dbb0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dbb2:	2180      	movs	r1, #128	; 0x80
 800dbb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800dbb6:	0189      	lsls	r1, r1, #6
 800dbb8:	428a      	cmp	r2, r1
 800dbba:	d106      	bne.n	800dbca <SPI_WaitFlagStateUntilTimeout.constprop.7+0x8a>
          SPI_RESET_CRC(hspi);
 800dbbc:	6819      	ldr	r1, [r3, #0]
 800dbbe:	480d      	ldr	r0, [pc, #52]	; (800dbf4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xb4>)
 800dbc0:	4001      	ands	r1, r0
 800dbc2:	6019      	str	r1, [r3, #0]
 800dbc4:	6819      	ldr	r1, [r3, #0]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800dbca:	0023      	movs	r3, r4
 800dbcc:	2201      	movs	r2, #1
 800dbce:	3351      	adds	r3, #81	; 0x51
 800dbd0:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	2003      	movs	r0, #3
 800dbd6:	3450      	adds	r4, #80	; 0x50
 800dbd8:	7023      	strb	r3, [r4, #0]
}
 800dbda:	b005      	add	sp, #20
 800dbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800dbde:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800dbe0:	1e5a      	subs	r2, r3, #1
 800dbe2:	4193      	sbcs	r3, r2
 800dbe4:	425b      	negs	r3, r3
 800dbe6:	401d      	ands	r5, r3
      count--;
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	3b01      	subs	r3, #1
 800dbec:	e7ba      	b.n	800db64 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x24>
 800dbee:	46c0      	nop			; (mov r8, r8)
 800dbf0:	20000568 	.word	0x20000568
 800dbf4:	ffffdfff 	.word	0xffffdfff

0800dbf8 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dbf8:	4b16      	ldr	r3, [pc, #88]	; (800dc54 <SPI_EndRxTxTransaction+0x5c>)
{
 800dbfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbfc:	0004      	movs	r4, r0
 800dbfe:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dc00:	6818      	ldr	r0, [r3, #0]
 800dc02:	4915      	ldr	r1, [pc, #84]	; (800dc58 <SPI_EndRxTxTransaction+0x60>)
{
 800dc04:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dc06:	f7fa faa5 	bl	8008154 <__udivsi3>
 800dc0a:	23fa      	movs	r3, #250	; 0xfa
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4358      	muls	r0, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc10:	2382      	movs	r3, #130	; 0x82
 800dc12:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dc14:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc16:	005b      	lsls	r3, r3, #1
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dc18:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc1a:	4299      	cmp	r1, r3
 800dc1c:	d10d      	bne.n	800dc3a <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dc1e:	0033      	movs	r3, r6
 800dc20:	002a      	movs	r2, r5
 800dc22:	2180      	movs	r1, #128	; 0x80
 800dc24:	0020      	movs	r0, r4
 800dc26:	f7ff ff8b 	bl	800db40 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d00f      	beq.n	800dc4e <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc2e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800dc30:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800dc34:	4313      	orrs	r3, r2
 800dc36:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 800dc38:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 800dc3a:	9b01      	ldr	r3, [sp, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d006      	beq.n	800dc4e <SPI_EndRxTxTransaction+0x56>
      count--;
 800dc40:	9b01      	ldr	r3, [sp, #4]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	4213      	tst	r3, r2
 800dc4c:	d1f5      	bne.n	800dc3a <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e7f2      	b.n	800dc38 <SPI_EndRxTxTransaction+0x40>
 800dc52:	46c0      	nop			; (mov r8, r8)
 800dc54:	20000568 	.word	0x20000568
 800dc58:	016e3600 	.word	0x016e3600

0800dc5c <HAL_SPI_Init>:
{
 800dc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5e:	0004      	movs	r4, r0
    return HAL_ERROR;
 800dc60:	2001      	movs	r0, #1
  if (hspi == NULL)
 800dc62:	2c00      	cmp	r4, #0
 800dc64:	d054      	beq.n	800dd10 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dc66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d152      	bne.n	800dd12 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc6c:	2282      	movs	r2, #130	; 0x82
 800dc6e:	6861      	ldr	r1, [r4, #4]
 800dc70:	0052      	lsls	r2, r2, #1
 800dc72:	4291      	cmp	r1, r2
 800dc74:	d000      	beq.n	800dc78 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dc76:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc78:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc7a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc7c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc7e:	3551      	adds	r5, #81	; 0x51
 800dc80:	782b      	ldrb	r3, [r5, #0]
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d105      	bne.n	800dc94 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800dc88:	0022      	movs	r2, r4
 800dc8a:	3250      	adds	r2, #80	; 0x50
 800dc8c:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800dc8e:	0020      	movs	r0, r4
 800dc90:	f006 fb28 	bl	80142e4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800dc94:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 800dc96:	2240      	movs	r2, #64	; 0x40
 800dc98:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800dc9a:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800dc9c:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dc9e:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800dca0:	4393      	bics	r3, r2
 800dca2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dca4:	2382      	movs	r3, #130	; 0x82
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	4033      	ands	r3, r6
 800dcaa:	2684      	movs	r6, #132	; 0x84
 800dcac:	68a7      	ldr	r7, [r4, #8]
 800dcae:	0236      	lsls	r6, r6, #8
 800dcb0:	403e      	ands	r6, r7
 800dcb2:	4333      	orrs	r3, r6
 800dcb4:	2680      	movs	r6, #128	; 0x80
 800dcb6:	68e7      	ldr	r7, [r4, #12]
 800dcb8:	0136      	lsls	r6, r6, #4
 800dcba:	403e      	ands	r6, r7
 800dcbc:	4333      	orrs	r3, r6
 800dcbe:	6926      	ldr	r6, [r4, #16]
 800dcc0:	69a2      	ldr	r2, [r4, #24]
 800dcc2:	4030      	ands	r0, r6
 800dcc4:	2601      	movs	r6, #1
 800dcc6:	4303      	orrs	r3, r0
 800dcc8:	6960      	ldr	r0, [r4, #20]
 800dcca:	69e7      	ldr	r7, [r4, #28]
 800dccc:	4030      	ands	r0, r6
 800dcce:	4303      	orrs	r3, r0
 800dcd0:	2080      	movs	r0, #128	; 0x80
 800dcd2:	0080      	lsls	r0, r0, #2
 800dcd4:	4010      	ands	r0, r2
 800dcd6:	4303      	orrs	r3, r0
 800dcd8:	2038      	movs	r0, #56	; 0x38
 800dcda:	4038      	ands	r0, r7
 800dcdc:	4303      	orrs	r3, r0
 800dcde:	2080      	movs	r0, #128	; 0x80
 800dce0:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dce2:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dce4:	4038      	ands	r0, r7
 800dce6:	4303      	orrs	r3, r0
 800dce8:	2080      	movs	r0, #128	; 0x80
 800dcea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800dcec:	0180      	lsls	r0, r0, #6
 800dcee:	4038      	ands	r0, r7
 800dcf0:	4303      	orrs	r3, r0
 800dcf2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dcf4:	2304      	movs	r3, #4
 800dcf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dcf8:	401a      	ands	r2, r3
 800dcfa:	330c      	adds	r3, #12
 800dcfc:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dcfe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dd00:	431a      	orrs	r2, r3
 800dd02:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd04:	69cb      	ldr	r3, [r1, #28]
 800dd06:	4a05      	ldr	r2, [pc, #20]	; (800dd1c <HAL_SPI_Init+0xc0>)
 800dd08:	4013      	ands	r3, r2
 800dd0a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd0c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dd0e:	702e      	strb	r6, [r5, #0]
}
 800dd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd12:	2300      	movs	r3, #0
 800dd14:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dd16:	6163      	str	r3, [r4, #20]
 800dd18:	e7ae      	b.n	800dc78 <HAL_SPI_Init+0x1c>
 800dd1a:	46c0      	nop			; (mov r8, r8)
 800dd1c:	fffff7ff 	.word	0xfffff7ff

0800dd20 <HAL_SPI_TransmitReceive>:
{
 800dd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd22:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800dd24:	0003      	movs	r3, r0
 800dd26:	3350      	adds	r3, #80	; 0x50
{
 800dd28:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800dd2a:	781a      	ldrb	r2, [r3, #0]
{
 800dd2c:	0004      	movs	r4, r0
 800dd2e:	b085      	sub	sp, #20
 800dd30:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800dd32:	2002      	movs	r0, #2
 800dd34:	2a01      	cmp	r2, #1
 800dd36:	d100      	bne.n	800dd3a <HAL_SPI_TransmitReceive+0x1a>
 800dd38:	e099      	b.n	800de6e <HAL_SPI_TransmitReceive+0x14e>
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800dd3e:	f7fd f8b9 	bl	800aeb4 <HAL_GetTick>
  tmp_state           = hspi->State;
 800dd42:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800dd44:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800dd46:	3351      	adds	r3, #81	; 0x51
 800dd48:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800dd4a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800dd4c:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d00c      	beq.n	800dd6c <HAL_SPI_TransmitReceive+0x4c>
 800dd52:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 800dd54:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dd56:	0052      	lsls	r2, r2, #1
 800dd58:	4291      	cmp	r1, r2
 800dd5a:	d000      	beq.n	800dd5e <HAL_SPI_TransmitReceive+0x3e>
 800dd5c:	e080      	b.n	800de60 <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dd5e:	68a2      	ldr	r2, [r4, #8]
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	d000      	beq.n	800dd66 <HAL_SPI_TransmitReceive+0x46>
 800dd64:	e07c      	b.n	800de60 <HAL_SPI_TransmitReceive+0x140>
 800dd66:	2b04      	cmp	r3, #4
 800dd68:	d000      	beq.n	800dd6c <HAL_SPI_TransmitReceive+0x4c>
 800dd6a:	e079      	b.n	800de60 <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 800dd6c:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dd6e:	2d00      	cmp	r5, #0
 800dd70:	d076      	beq.n	800de60 <HAL_SPI_TransmitReceive+0x140>
 800dd72:	2f00      	cmp	r7, #0
 800dd74:	d074      	beq.n	800de60 <HAL_SPI_TransmitReceive+0x140>
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	d072      	beq.n	800de60 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dd7a:	0023      	movs	r3, r4
 800dd7c:	3351      	adds	r3, #81	; 0x51
 800dd7e:	781a      	ldrb	r2, [r3, #0]
 800dd80:	2a04      	cmp	r2, #4
 800dd82:	d001      	beq.n	800dd88 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dd84:	2205      	movs	r2, #5
 800dd86:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd88:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd8a:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd8c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800dd8e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dd90:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd92:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800dd94:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800dd96:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd98:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dd9a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800dd9c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dd9e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dda0:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dda2:	4210      	tst	r0, r2
 800dda4:	d102      	bne.n	800ddac <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 800dda6:	6818      	ldr	r0, [r3, #0]
 800dda8:	4302      	orrs	r2, r0
 800ddaa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ddac:	2280      	movs	r2, #128	; 0x80
 800ddae:	68e0      	ldr	r0, [r4, #12]
 800ddb0:	0112      	lsls	r2, r2, #4
 800ddb2:	4290      	cmp	r0, r2
 800ddb4:	d15d      	bne.n	800de72 <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	d001      	beq.n	800ddbe <HAL_SPI_TransmitReceive+0x9e>
 800ddba:	2e01      	cmp	r6, #1
 800ddbc:	d107      	bne.n	800ddce <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ddbe:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddc0:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ddc2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800ddc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddc6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800ddce:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ddd0:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddd2:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ddd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d115      	bne.n	800de06 <HAL_SPI_TransmitReceive+0xe6>
 800ddda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d112      	bne.n	800de06 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dde0:	9a01      	ldr	r2, [sp, #4]
 800dde2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dde4:	0020      	movs	r0, r4
 800dde6:	f7ff ff07 	bl	800dbf8 <SPI_EndRxTxTransaction>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d000      	beq.n	800ddf0 <HAL_SPI_TransmitReceive+0xd0>
 800ddee:	e086      	b.n	800defe <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ddf0:	68a3      	ldr	r3, [r4, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d134      	bne.n	800de60 <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddf6:	6823      	ldr	r3, [r4, #0]
 800ddf8:	9003      	str	r0, [sp, #12]
 800ddfa:	68da      	ldr	r2, [r3, #12]
 800ddfc:	9203      	str	r2, [sp, #12]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	9303      	str	r3, [sp, #12]
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	e02c      	b.n	800de60 <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	6893      	ldr	r3, [r2, #8]
 800de0a:	423b      	tst	r3, r7
 800de0c:	d00e      	beq.n	800de2c <HAL_SPI_TransmitReceive+0x10c>
 800de0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00b      	beq.n	800de2c <HAL_SPI_TransmitReceive+0x10c>
 800de14:	2d01      	cmp	r5, #1
 800de16:	d109      	bne.n	800de2c <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 800de18:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de1c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de1e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de20:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de22:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800de24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800de26:	3b01      	subs	r3, #1
 800de28:	b29b      	uxth	r3, r3
 800de2a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de2c:	6893      	ldr	r3, [r2, #8]
 800de2e:	4233      	tst	r3, r6
 800de30:	d00c      	beq.n	800de4c <HAL_SPI_TransmitReceive+0x12c>
 800de32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800de34:	2b00      	cmp	r3, #0
 800de36:	d009      	beq.n	800de4c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 800de38:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800de3a:	68d2      	ldr	r2, [r2, #12]
 800de3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de40:	3302      	adds	r3, #2
 800de42:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800de44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800de46:	3b01      	subs	r3, #1
 800de48:	b29b      	uxth	r3, r3
 800de4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800de4c:	f7fd f832 	bl	800aeb4 <HAL_GetTick>
 800de50:	9b01      	ldr	r3, [sp, #4]
 800de52:	1ac0      	subs	r0, r0, r3
 800de54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de56:	4283      	cmp	r3, r0
 800de58:	d8bc      	bhi.n	800ddd4 <HAL_SPI_TransmitReceive+0xb4>
 800de5a:	3301      	adds	r3, #1
 800de5c:	d0ba      	beq.n	800ddd4 <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 800de5e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800de60:	0023      	movs	r3, r4
 800de62:	2201      	movs	r2, #1
 800de64:	3351      	adds	r3, #81	; 0x51
 800de66:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800de68:	2300      	movs	r3, #0
 800de6a:	3450      	adds	r4, #80	; 0x50
 800de6c:	7023      	strb	r3, [r4, #0]
}
 800de6e:	b005      	add	sp, #20
 800de70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de72:	2900      	cmp	r1, #0
 800de74:	d001      	beq.n	800de7a <HAL_SPI_TransmitReceive+0x15a>
 800de76:	2e01      	cmp	r6, #1
 800de78:	d108      	bne.n	800de8c <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800de7a:	782a      	ldrb	r2, [r5, #0]
 800de7c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800de7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de80:	3301      	adds	r3, #1
 800de82:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800de84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800de86:	3b01      	subs	r3, #1
 800de88:	b29b      	uxth	r3, r3
 800de8a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800de8c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de8e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de90:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800de94:	2b00      	cmp	r3, #0
 800de96:	d102      	bne.n	800de9e <HAL_SPI_TransmitReceive+0x17e>
 800de98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d0a0      	beq.n	800dde0 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	423a      	tst	r2, r7
 800dea4:	d00f      	beq.n	800dec6 <HAL_SPI_TransmitReceive+0x1a6>
 800dea6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800dea8:	2a00      	cmp	r2, #0
 800deaa:	d00c      	beq.n	800dec6 <HAL_SPI_TransmitReceive+0x1a6>
 800deac:	2d01      	cmp	r5, #1
 800deae:	d10a      	bne.n	800dec6 <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 800deb0:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800deb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800deb4:	7812      	ldrb	r2, [r2, #0]
 800deb6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800deb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800deba:	3301      	adds	r3, #1
 800debc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800debe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800dec0:	3b01      	subs	r3, #1
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	689a      	ldr	r2, [r3, #8]
 800deca:	4232      	tst	r2, r6
 800decc:	d00d      	beq.n	800deea <HAL_SPI_TransmitReceive+0x1ca>
 800dece:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	d00a      	beq.n	800deea <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 800ded4:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800deda:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800dedc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dede:	3301      	adds	r3, #1
 800dee0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800dee2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dee4:	3b01      	subs	r3, #1
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800deea:	f7fc ffe3 	bl	800aeb4 <HAL_GetTick>
 800deee:	9b01      	ldr	r3, [sp, #4]
 800def0:	1ac0      	subs	r0, r0, r3
 800def2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def4:	4283      	cmp	r3, r0
 800def6:	d8cc      	bhi.n	800de92 <HAL_SPI_TransmitReceive+0x172>
 800def8:	3301      	adds	r3, #1
 800defa:	d0ca      	beq.n	800de92 <HAL_SPI_TransmitReceive+0x172>
 800defc:	e7af      	b.n	800de5e <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800defe:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800df00:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df02:	6563      	str	r3, [r4, #84]	; 0x54
 800df04:	e7ac      	b.n	800de60 <HAL_SPI_TransmitReceive+0x140>

0800df06 <HAL_SPI_ErrorCallback>:
 800df06:	4770      	bx	lr

0800df08 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800df08:	6803      	ldr	r3, [r0, #0]
{
 800df0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800df0c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800df0e:	689a      	ldr	r2, [r3, #8]
{
 800df10:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800df12:	0990      	lsrs	r0, r2, #6
 800df14:	2501      	movs	r5, #1
 800df16:	0006      	movs	r6, r0
{
 800df18:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800df1a:	402e      	ands	r6, r5
 800df1c:	d109      	bne.n	800df32 <HAL_SPI_IRQHandler+0x2a>
 800df1e:	422a      	tst	r2, r5
 800df20:	d007      	beq.n	800df32 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800df22:	098f      	lsrs	r7, r1, #6
 800df24:	422f      	tst	r7, r5
 800df26:	d004      	beq.n	800df32 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 800df28:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hspi->TxISR(hspi);
 800df2a:	0020      	movs	r0, r4
 800df2c:	4798      	blx	r3
}
 800df2e:	b005      	add	sp, #20
 800df30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800df32:	2501      	movs	r5, #1
 800df34:	0797      	lsls	r7, r2, #30
 800df36:	d504      	bpl.n	800df42 <HAL_SPI_IRQHandler+0x3a>
 800df38:	09cf      	lsrs	r7, r1, #7
 800df3a:	422f      	tst	r7, r5
 800df3c:	d001      	beq.n	800df42 <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 800df3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df40:	e7f3      	b.n	800df2a <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800df42:	2701      	movs	r7, #1
 800df44:	0955      	lsrs	r5, r2, #5
 800df46:	4328      	orrs	r0, r5
 800df48:	4238      	tst	r0, r7
 800df4a:	d102      	bne.n	800df52 <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800df4c:	0a10      	lsrs	r0, r2, #8
 800df4e:	4238      	tst	r0, r7
 800df50:	d0ed      	beq.n	800df2e <HAL_SPI_IRQHandler+0x26>
 800df52:	0688      	lsls	r0, r1, #26
 800df54:	d5eb      	bpl.n	800df2e <HAL_SPI_IRQHandler+0x26>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800df56:	2e00      	cmp	r6, #0
 800df58:	d00f      	beq.n	800df7a <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800df5a:	0020      	movs	r0, r4
 800df5c:	3051      	adds	r0, #81	; 0x51
 800df5e:	7800      	ldrb	r0, [r0, #0]
 800df60:	2803      	cmp	r0, #3
 800df62:	d050      	beq.n	800e006 <HAL_SPI_IRQHandler+0xfe>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df64:	2004      	movs	r0, #4
 800df66:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800df68:	4330      	orrs	r0, r6
 800df6a:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df6c:	2000      	movs	r0, #0
 800df6e:	9000      	str	r0, [sp, #0]
 800df70:	68d8      	ldr	r0, [r3, #12]
 800df72:	9000      	str	r0, [sp, #0]
 800df74:	6898      	ldr	r0, [r3, #8]
 800df76:	9000      	str	r0, [sp, #0]
 800df78:	9800      	ldr	r0, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800df7a:	2001      	movs	r0, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800df7c:	4205      	tst	r5, r0
 800df7e:	d00b      	beq.n	800df98 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df80:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800df82:	4328      	orrs	r0, r5
 800df84:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df86:	2000      	movs	r0, #0
 800df88:	2540      	movs	r5, #64	; 0x40
 800df8a:	9002      	str	r0, [sp, #8]
 800df8c:	6898      	ldr	r0, [r3, #8]
 800df8e:	9002      	str	r0, [sp, #8]
 800df90:	6818      	ldr	r0, [r3, #0]
 800df92:	43a8      	bics	r0, r5
 800df94:	6018      	str	r0, [r3, #0]
 800df96:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800df98:	05d2      	lsls	r2, r2, #23
 800df9a:	d508      	bpl.n	800dfae <HAL_SPI_IRQHandler+0xa6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df9c:	2208      	movs	r2, #8
 800df9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfa0:	4302      	orrs	r2, r0
 800dfa2:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	9203      	str	r2, [sp, #12]
 800dfa8:	689a      	ldr	r2, [r3, #8]
 800dfaa:	9203      	str	r2, [sp, #12]
 800dfac:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	d0bc      	beq.n	800df2e <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800dfb4:	20e0      	movs	r0, #224	; 0xe0
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	4382      	bics	r2, r0
 800dfba:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800dfbc:	0022      	movs	r2, r4
 800dfbe:	38df      	subs	r0, #223	; 0xdf
 800dfc0:	3251      	adds	r2, #81	; 0x51
 800dfc2:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800dfc4:	3002      	adds	r0, #2
 800dfc6:	4201      	tst	r1, r0
 800dfc8:	d025      	beq.n	800e016 <HAL_SPI_IRQHandler+0x10e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 800dfce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dfd0:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d009      	beq.n	800dfea <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dfd6:	4b12      	ldr	r3, [pc, #72]	; (800e020 <HAL_SPI_IRQHandler+0x118>)
 800dfd8:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dfda:	f7fd fb8d 	bl	800b6f8 <HAL_DMA_Abort_IT>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d003      	beq.n	800dfea <HAL_SPI_IRQHandler+0xe2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dfe2:	2340      	movs	r3, #64	; 0x40
 800dfe4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800dfea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d09e      	beq.n	800df2e <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dff0:	4b0b      	ldr	r3, [pc, #44]	; (800e020 <HAL_SPI_IRQHandler+0x118>)
 800dff2:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dff4:	f7fd fb80 	bl	800b6f8 <HAL_DMA_Abort_IT>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d098      	beq.n	800df2e <HAL_SPI_IRQHandler+0x26>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dffc:	2340      	movs	r3, #64	; 0x40
 800dffe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e000:	4313      	orrs	r3, r2
 800e002:	6563      	str	r3, [r4, #84]	; 0x54
 800e004:	e793      	b.n	800df2e <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e006:	2200      	movs	r2, #0
 800e008:	9201      	str	r2, [sp, #4]
 800e00a:	68da      	ldr	r2, [r3, #12]
 800e00c:	9201      	str	r2, [sp, #4]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	9b01      	ldr	r3, [sp, #4]
        return;
 800e014:	e78b      	b.n	800df2e <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 800e016:	0020      	movs	r0, r4
 800e018:	f7ff ff75 	bl	800df06 <HAL_SPI_ErrorCallback>
 800e01c:	e787      	b.n	800df2e <HAL_SPI_IRQHandler+0x26>
 800e01e:	46c0      	nop			; (mov r8, r8)
 800e020:	0800e025 	.word	0x0800e025

0800e024 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 800e024:	2300      	movs	r3, #0
{
 800e026:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e028:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800e02a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800e02c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800e02e:	f7ff ff6a 	bl	800df06 <HAL_SPI_ErrorCallback>
}
 800e032:	bd10      	pop	{r4, pc}

0800e034 <_Z14timerISRBridgePv>:
}
;
/******************************************************************************/
/*                             Mcu LOwPower timer Api                         */
/******************************************************************************/
void timerISRBridge(void *arg) {
 800e034:	b510      	push	{r4, lr}
  /*!
   *  timerISR
   * \remark    Do Not Modify
   */
  void timerISR(void) {
    Func(obj);
 800e036:	4b02      	ldr	r3, [pc, #8]	; (800e040 <_Z14timerISRBridgePv+0xc>)
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	6858      	ldr	r0, [r3, #4]
 800e03c:	4790      	blx	r2
  mcu.timerISR();
}
 800e03e:	bd10      	pop	{r4, pc}
 800e040:	20001988 	.word	0x20001988

0800e044 <HAL_LPTIM_CompareMatchCallback>:
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 800e044:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 800e046:	4c07      	ldr	r4, [pc, #28]	; (800e064 <HAL_LPTIM_CompareMatchCallback+0x20>)
 800e048:	4b07      	ldr	r3, [pc, #28]	; (800e068 <HAL_LPTIM_CompareMatchCallback+0x24>)
  HAL_LPTIM_IRQHandler(&hlptim1);
 800e04a:	0020      	movs	r0, r4
  hlptim1.Instance = LPTIM1;
 800e04c:	6023      	str	r3, [r4, #0]
  HAL_LPTIM_IRQHandler(&hlptim1);
 800e04e:	f7fe fe54 	bl	800ccfa <HAL_LPTIM_IRQHandler>
  HAL_LPTIM_TimeOut_Stop(&hlptim1);
 800e052:	0020      	movs	r0, r4
 800e054:	f7fe ff1a 	bl	800ce8c <HAL_LPTIM_TimeOut_Stop>
 800e058:	4b04      	ldr	r3, [pc, #16]	; (800e06c <HAL_LPTIM_CompareMatchCallback+0x28>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	6858      	ldr	r0, [r3, #4]
 800e05e:	4790      	blx	r2
}
 800e060:	bd10      	pop	{r4, pc}
 800e062:	46c0      	nop			; (mov r8, r8)
 800e064:	200018b0 	.word	0x200018b0
 800e068:	40007c00 	.word	0x40007c00
 800e06c:	20001988 	.word	0x20001988

0800e070 <_ZN12McuSTM32L0718Init_IrqE7PinName>:
void McuSTM32L071::Init_Irq(PinName pin) {}
 800e070:	4770      	bx	lr
	...

0800e074 <_ZN12McuSTM32L0718SpiWriteEi>:
uint8_t McuSTM32L071::SpiWrite(int outval) {
 800e074:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&outval, (uint8_t*)&rxData, 1, HAL_MAX_DELAY);
 800e076:	2301      	movs	r3, #1
  uint8_t rxData = 0;
 800e078:	2517      	movs	r5, #23
 800e07a:	2400      	movs	r4, #0
uint8_t McuSTM32L071::SpiWrite(int outval) {
 800e07c:	b087      	sub	sp, #28
  uint8_t rxData = 0;
 800e07e:	446d      	add	r5, sp
  HAL_StatusTypeDef ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&outval, (uint8_t*)&rxData, 1, HAL_MAX_DELAY);
 800e080:	425b      	negs	r3, r3
uint8_t McuSTM32L071::SpiWrite(int outval) {
 800e082:	9103      	str	r1, [sp, #12]
  uint8_t rxData = 0;
 800e084:	702c      	strb	r4, [r5, #0]
  HAL_StatusTypeDef ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&outval, (uint8_t*)&rxData, 1, HAL_MAX_DELAY);
 800e086:	002a      	movs	r2, r5
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	a903      	add	r1, sp, #12
 800e08c:	3302      	adds	r3, #2
 800e08e:	4804      	ldr	r0, [pc, #16]	; (800e0a0 <_ZN12McuSTM32L0718SpiWriteEi+0x2c>)
 800e090:	f7ff fe46 	bl	800dd20 <HAL_SPI_TransmitReceive>
  if(ret == HAL_OK) {
 800e094:	42a0      	cmp	r0, r4
 800e096:	d100      	bne.n	800e09a <_ZN12McuSTM32L0718SpiWriteEi+0x26>
    return (rxData);
 800e098:	782c      	ldrb	r4, [r5, #0]
}
 800e09a:	0020      	movs	r0, r4
 800e09c:	b007      	add	sp, #28
 800e09e:	bd30      	pop	{r4, r5, pc}
 800e0a0:	20001904 	.word	0x20001904

0800e0a4 <_ZN12McuSTM32L07114RestoreContextEPhmm>:
int McuSTM32L071::RestoreContext(uint8_t *buffer, uint32_t addr, uint32_t size) {
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	0010      	movs	r0, r2
  HW_ReadEEPROM((const void*)addr, buffer, size);
 800e0a8:	001a      	movs	r2, r3
 800e0aa:	f004 f959 	bl	8012360 <HW_ReadEEPROM>
}
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	bd10      	pop	{r4, pc}

0800e0b2 <_ZN12McuSTM32L07112StoreContextEPKvmm>:
int McuSTM32L071::StoreContext(const void *buffer, uint32_t addr, uint32_t size) {
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	0010      	movs	r0, r2
  HW_WriteEEPROM((void*)addr, buffer, size);
 800e0b6:	001a      	movs	r2, r3
 800e0b8:	f004 f8ec 	bl	8012294 <HW_WriteEEPROM>
}
 800e0bc:	2000      	movs	r0, #0
 800e0be:	bd10      	pop	{r4, pc}

0800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>:
uint32_t McuSTM32L071::RtcGetTimeSecond(void) {
 800e0c0:	b510      	push	{r4, lr}
  return HW_RTCGetSTime();
 800e0c2:	f004 f985 	bl	80123d0 <HW_RTCGetSTime>
};
 800e0c6:	bd10      	pop	{r4, pc}

0800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>:
uint32_t McuSTM32L071::RtcGetTimeMs(void) {
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  borkhrtc.Instance = RTC;
 800e0ca:	4f17      	ldr	r7, [pc, #92]	; (800e128 <_ZN12McuSTM32L07112RtcGetTimeMsEv+0x60>)
uint32_t McuSTM32L071::RtcGetTimeMs(void) {
 800e0cc:	b091      	sub	sp, #68	; 0x44
  HAL_RTC_GetTime(&borkhrtc, &timeStruct, FORMAT_BIN);
 800e0ce:	ad02      	add	r5, sp, #8
  borkhrtc.Instance = RTC;
 800e0d0:	4b16      	ldr	r3, [pc, #88]	; (800e12c <_ZN12McuSTM32L07112RtcGetTimeMsEv+0x64>)
  HAL_RTC_GetDate(&borkhrtc, &dateStruct, FORMAT_BIN);
 800e0d2:	ac01      	add	r4, sp, #4
  HAL_RTC_GetTime(&borkhrtc, &timeStruct, FORMAT_BIN);
 800e0d4:	0029      	movs	r1, r5
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	0038      	movs	r0, r7
  borkhrtc.Instance = RTC;
 800e0da:	603b      	str	r3, [r7, #0]
  HAL_RTC_GetTime(&borkhrtc, &timeStruct, FORMAT_BIN);
 800e0dc:	f7ff fc12 	bl	800d904 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&borkhrtc, &dateStruct, FORMAT_BIN);
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	0021      	movs	r1, r4
 800e0e4:	0038      	movs	r0, r7
 800e0e6:	f7ff fc37 	bl	800d958 <HAL_RTC_GetDate>
  timeinfo.tm_wday = dateStruct.WeekDay;
 800e0ea:	7823      	ldrb	r3, [r4, #0]
  time_t t = mktime(&timeinfo);
 800e0ec:	a807      	add	r0, sp, #28
  timeinfo.tm_wday = dateStruct.WeekDay;
 800e0ee:	930d      	str	r3, [sp, #52]	; 0x34
  timeinfo.tm_mon  = dateStruct.Month;
 800e0f0:	7863      	ldrb	r3, [r4, #1]
 800e0f2:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_mday = dateStruct.Date;
 800e0f4:	78a3      	ldrb	r3, [r4, #2]
 800e0f6:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_year = dateStruct.Year;
 800e0f8:	78e3      	ldrb	r3, [r4, #3]
  return ((t * 1000) + (999 - ((timeStruct.SubSeconds * 999) / borkhrtc.Init.SynchPrediv)));         // get time en ms
 800e0fa:	4c0d      	ldr	r4, [pc, #52]	; (800e130 <_ZN12McuSTM32L07112RtcGetTimeMsEv+0x68>)
  timeinfo.tm_year = dateStruct.Year;
 800e0fc:	930c      	str	r3, [sp, #48]	; 0x30
  timeinfo.tm_hour = timeStruct.Hours;
 800e0fe:	782b      	ldrb	r3, [r5, #0]
 800e100:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_min  = timeStruct.Minutes;
 800e102:	786b      	ldrb	r3, [r5, #1]
 800e104:	9308      	str	r3, [sp, #32]
  timeinfo.tm_sec  = timeStruct.Seconds;
 800e106:	78ab      	ldrb	r3, [r5, #2]
 800e108:	9307      	str	r3, [sp, #28]
  time_t t = mktime(&timeinfo);
 800e10a:	f007 fbb9 	bl	8015880 <mktime>
 800e10e:	0006      	movs	r6, r0
  return ((t * 1000) + (999 - ((timeStruct.SubSeconds * 999) / borkhrtc.Init.SynchPrediv)));         // get time en ms
 800e110:	6868      	ldr	r0, [r5, #4]
 800e112:	68f9      	ldr	r1, [r7, #12]
 800e114:	4360      	muls	r0, r4
 800e116:	f7fa f81d 	bl	8008154 <__udivsi3>
 800e11a:	1a20      	subs	r0, r4, r0
 800e11c:	3401      	adds	r4, #1
 800e11e:	4366      	muls	r6, r4
 800e120:	1980      	adds	r0, r0, r6
};
 800e122:	b011      	add	sp, #68	; 0x44
 800e124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e126:	46c0      	nop			; (mov r8, r8)
 800e128:	20000c44 	.word	0x20000c44
 800e12c:	40002800 	.word	0x40002800
 800e130:	000003e7 	.word	0x000003e7

0800e134 <_ZN12McuSTM32L07115GotoSleepSecondEi>:
void McuSTM32L071::GotoSleepSecond(int duration) {
 800e134:	b510      	push	{r4, lr}
 800e136:	000c      	movs	r4, r1
  while(cpt > (WATCH_DOG_PERIOD_RELEASE)) {
 800e138:	2c1e      	cmp	r4, #30
 800e13a:	dd04      	ble.n	800e146 <_ZN12McuSTM32L07115GotoSleepSecondEi+0x12>
    HAL_Delay(WATCH_DOG_PERIOD_RELEASE * 1000L);
 800e13c:	4805      	ldr	r0, [pc, #20]	; (800e154 <_ZN12McuSTM32L07115GotoSleepSecondEi+0x20>)
    cpt -= WATCH_DOG_PERIOD_RELEASE;
 800e13e:	3c1e      	subs	r4, #30
    HAL_Delay(WATCH_DOG_PERIOD_RELEASE * 1000L);
 800e140:	f7fc febe 	bl	800aec0 <HAL_Delay>
  while(cpt > (WATCH_DOG_PERIOD_RELEASE)) {
 800e144:	e7f8      	b.n	800e138 <_ZN12McuSTM32L07115GotoSleepSecondEi+0x4>
  HAL_Delay(cpt * 1000L);
 800e146:	20fa      	movs	r0, #250	; 0xfa
 800e148:	0080      	lsls	r0, r0, #2
 800e14a:	4360      	muls	r0, r4
 800e14c:	f7fc feb8 	bl	800aec0 <HAL_Delay>
}
 800e150:	bd10      	pop	{r4, pc}
 800e152:	46c0      	nop			; (mov r8, r8)
 800e154:	00007530 	.word	0x00007530

0800e158 <_ZN12McuSTM32L07116GotoSleepMSecondEi>:
void McuSTM32L071::GotoSleepMSecond(int duration) {
 800e158:	b510      	push	{r4, lr}
  HAL_Delay(duration);
 800e15a:	0008      	movs	r0, r1
 800e15c:	f7fc feb0 	bl	800aec0 <HAL_Delay>
}
 800e160:	bd10      	pop	{r4, pc}
	...

0800e164 <_ZN12McuSTM32L07117StartTimerMsecondEPFvPvES0_i>:
 * \param int delay in ms delay should be between 1ms and 16s.
 * \param [OUT] void
 * \remark the code  Func =  _Func ; and obj  = _obj; isn't mcu dependent
 * \remark starts the LoRaWAN dedicated timer and attaches the IRQ to the handling Interupt SErvice Routine in the LoRaWAN object.
 */
void McuSTM32L071::StartTimerMsecond(void (*_Func)(void *), void *_obj, int delay) {
 800e164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e166:	0015      	movs	r5, r2
  /* Solution using the application's task scheduler */
  uint32_t delayInSchedTicks = (delay / 100);
  DEBUG_PRINTF("---delay------------ %d\n", delay);
  DEBUG_PRINTF("---delayInSchedTicks------------ %d\n", delayInSchedTicks);
  struct task t;
  t.when = tasks_ticks + delayInSchedTicks;
 800e168:	4a08      	ldr	r2, [pc, #32]	; (800e18c <_ZN12McuSTM32L07117StartTimerMsecondEPFvPvES0_i+0x28>)
void McuSTM32L071::StartTimerMsecond(void (*_Func)(void *), void *_obj, int delay) {
 800e16a:	b085      	sub	sp, #20
 800e16c:	0004      	movs	r4, r0
 800e16e:	000e      	movs	r6, r1
  uint32_t delayInSchedTicks = (delay / 100);
 800e170:	0018      	movs	r0, r3
 800e172:	2164      	movs	r1, #100	; 0x64
  t.when = tasks_ticks + delayInSchedTicks;
 800e174:	6817      	ldr	r7, [r2, #0]
  uint32_t delayInSchedTicks = (delay / 100);
 800e176:	f7fa f877 	bl	8008268 <__divsi3>
  t.arg = NULL;
  t.cb = &timerISRBridge;
  tasks_add(t);
 800e17a:	2100      	movs	r1, #0
  t.when = tasks_ticks + delayInSchedTicks;
 800e17c:	19c0      	adds	r0, r0, r7
  tasks_add(t);
 800e17e:	4a04      	ldr	r2, [pc, #16]	; (800e190 <_ZN12McuSTM32L07117StartTimerMsecondEPFvPvES0_i+0x2c>)
 800e180:	f006 f9ae 	bl	80144e0 <tasks_add>

  Func =  _Func;
 800e184:	6026      	str	r6, [r4, #0]
  obj  = _obj;
 800e186:	6065      	str	r5, [r4, #4]
};
 800e188:	b005      	add	sp, #20
 800e18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e18c:	20001a98 	.word	0x20001a98
 800e190:	0800e035 	.word	0x0800e035

0800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>:
  return (int)HAL_GPIO_ReadPin(port, (Pin & 0xffffU));
};

GPIO_TypeDef *McuSTM32L071::ReslovePortForPin(PinName Pin) {
  GPIO_TypeDef *port = GPIOA;
  int isPortB = (Pin & 0x10000U);
 800e194:	2080      	movs	r0, #128	; 0x80
 800e196:	0240      	lsls	r0, r0, #9
 800e198:	4008      	ands	r0, r1
  if(isPortB > 0) {
    port = GPIOB;
 800e19a:	4243      	negs	r3, r0
 800e19c:	4158      	adcs	r0, r3
void McuSTM32L071::SetValueDigitalOutPin(PinName Pin, int Value) {
 800e19e:	b510      	push	{r4, lr}
    port = GPIOB;
 800e1a0:	4b04      	ldr	r3, [pc, #16]	; (800e1b4 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei+0x20>)
 800e1a2:	4240      	negs	r0, r0
 800e1a4:	0280      	lsls	r0, r0, #10
 800e1a6:	18c0      	adds	r0, r0, r3
  HAL_GPIO_WritePin(port, (Pin & 0xffffU), (GPIO_PinState) Value);
 800e1a8:	b2d2      	uxtb	r2, r2
 800e1aa:	b289      	uxth	r1, r1
 800e1ac:	f7fd fcd0 	bl	800bb50 <HAL_GPIO_WritePin>
};
 800e1b0:	bd10      	pop	{r4, pc}
 800e1b2:	46c0      	nop			; (mov r8, r8)
 800e1b4:	50000400 	.word	0x50000400

0800e1b8 <_ZN12McuSTM32L07120GetValueDigitalInPinE7PinName>:
  int isPortB = (Pin & 0x10000U);
 800e1b8:	2080      	movs	r0, #128	; 0x80
 800e1ba:	0240      	lsls	r0, r0, #9
 800e1bc:	4008      	ands	r0, r1
    port = GPIOB;
 800e1be:	4243      	negs	r3, r0
 800e1c0:	4158      	adcs	r0, r3
int McuSTM32L071::GetValueDigitalInPin(PinName Pin) {
 800e1c2:	b510      	push	{r4, lr}
    port = GPIOB;
 800e1c4:	4b03      	ldr	r3, [pc, #12]	; (800e1d4 <_ZN12McuSTM32L07120GetValueDigitalInPinE7PinName+0x1c>)
 800e1c6:	4240      	negs	r0, r0
 800e1c8:	0280      	lsls	r0, r0, #10
 800e1ca:	18c0      	adds	r0, r0, r3
  return (int)HAL_GPIO_ReadPin(port, (Pin & 0xffffU));
 800e1cc:	b289      	uxth	r1, r1
 800e1ce:	f7fd fcb9 	bl	800bb44 <HAL_GPIO_ReadPin>
};
 800e1d2:	bd10      	pop	{r4, pc}
 800e1d4:	50000400 	.word	0x50000400

0800e1d8 <_ZN12McuSTM32L07117AttachInterruptInEPFvPvES0_>:
};

void McuSTM32L071::AttachInterruptIn(void (*_Funcext)(void *), void *_objext) {
  Funcext = _Funcext;
  objext = _objext;
  userIt = 0;
 800e1d8:	2300      	movs	r3, #0
  Funcext = _Funcext;
 800e1da:	6081      	str	r1, [r0, #8]
  objext = _objext;
 800e1dc:	60c2      	str	r2, [r0, #12]
  userIt = 0;
 800e1de:	6143      	str	r3, [r0, #20]
};
 800e1e0:	4770      	bx	lr
	...

0800e1e4 <_Z17LoRaMacComputeMicPKhtS0_mhmPm>:
 * \param [IN]  sequenceCounter Frame sequence counter
 * \param [OUT] mic Computed MIC field
 */

void LoRaMacComputeMic(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic)
{
 800e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e6:	001e      	movs	r6, r3
 800e1e8:	000f      	movs	r7, r1
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	ab0a      	add	r3, sp, #40	; 0x28
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	9001      	str	r0, [sp, #4]
  InsertTrace(__COUNTER__, FileId);
 800e1f2:	2105      	movs	r1, #5
 800e1f4:	2000      	movs	r0, #0
{
 800e1f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e1f8:	9202      	str	r2, [sp, #8]
 800e1fa:	9303      	str	r3, [sp, #12]
  InsertTrace(__COUNTER__, FileId);
 800e1fc:	f003 fc46 	bl	8011a8c <_Z11InsertTracehh>
  MicBlockB0[5] = dir;
 800e200:	4c1b      	ldr	r4, [pc, #108]	; (800e270 <_Z17LoRaMacComputeMicPKhtS0_mhmPm+0x8c>)
 800e202:	9b03      	ldr	r3, [sp, #12]
  MicBlockB0[6] = (address) & 0xFF;
  MicBlockB0[7] = (address >> 8) & 0xFF;
  MicBlockB0[8] = (address >> 16) & 0xFF;
  MicBlockB0[9] = (address >> 24) & 0xFF;

  MicBlockB0[10] = (sequenceCounter) & 0xFF;
 800e204:	72a5      	strb	r5, [r4, #10]
  MicBlockB0[5] = dir;
 800e206:	7163      	strb	r3, [r4, #5]
  MicBlockB0[7] = (address >> 8) & 0xFF;
 800e208:	0a33      	lsrs	r3, r6, #8
 800e20a:	71e3      	strb	r3, [r4, #7]
  MicBlockB0[8] = (address >> 16) & 0xFF;
 800e20c:	0c33      	lsrs	r3, r6, #16
 800e20e:	7223      	strb	r3, [r4, #8]
  MicBlockB0[11] = (sequenceCounter >> 8) & 0xFF;
 800e210:	0a2b      	lsrs	r3, r5, #8
 800e212:	72e3      	strb	r3, [r4, #11]
  MicBlockB0[12] = (sequenceCounter >> 16) & 0xFF;
 800e214:	0c2b      	lsrs	r3, r5, #16
  MicBlockB0[13] = (sequenceCounter >> 24) & 0xFF;
 800e216:	0e2d      	lsrs	r5, r5, #24
 800e218:	7365      	strb	r5, [r4, #13]

  MicBlockB0[15] = size & 0xFF;

  AES_CMAC_Init(AesCmacCtx);
 800e21a:	4d16      	ldr	r5, [pc, #88]	; (800e274 <_Z17LoRaMacComputeMicPKhtS0_mhmPm+0x90>)
  MicBlockB0[6] = (address) & 0xFF;
 800e21c:	71a6      	strb	r6, [r4, #6]
  AES_CMAC_Init(AesCmacCtx);
 800e21e:	0028      	movs	r0, r5
  MicBlockB0[9] = (address >> 24) & 0xFF;
 800e220:	0e36      	lsrs	r6, r6, #24
  MicBlockB0[12] = (sequenceCounter >> 16) & 0xFF;
 800e222:	7323      	strb	r3, [r4, #12]
  MicBlockB0[9] = (address >> 24) & 0xFF;
 800e224:	7266      	strb	r6, [r4, #9]
  MicBlockB0[15] = size & 0xFF;
 800e226:	73e7      	strb	r7, [r4, #15]
  AES_CMAC_Init(AesCmacCtx);
 800e228:	f002 fad2 	bl	80107d0 <_Z13AES_CMAC_InitP13_AES_CMAC_CTX>

  AES_CMAC_SetKey(AesCmacCtx, key);
 800e22c:	9902      	ldr	r1, [sp, #8]
 800e22e:	0028      	movs	r0, r5
 800e230:	f002 fade 	bl	80107f0 <_Z15AES_CMAC_SetKeyP13_AES_CMAC_CTXPKh>

  AES_CMAC_Update(AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE);
 800e234:	0021      	movs	r1, r4
 800e236:	0028      	movs	r0, r5
 800e238:	2210      	movs	r2, #16
 800e23a:	f002 fae0 	bl	80107fe <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm>

  AES_CMAC_Update(AesCmacCtx, buffer, size & 0xFF);
 800e23e:	b2fa      	uxtb	r2, r7
 800e240:	9901      	ldr	r1, [sp, #4]
 800e242:	0028      	movs	r0, r5
 800e244:	f002 fadb 	bl	80107fe <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm>

  AES_CMAC_Final(Mic, AesCmacCtx);
 800e248:	4c0b      	ldr	r4, [pc, #44]	; (800e278 <_Z17LoRaMacComputeMicPKhtS0_mhmPm+0x94>)
 800e24a:	0029      	movs	r1, r5
 800e24c:	0020      	movs	r0, r4
 800e24e:	f002 fb3a 	bl	80108c6 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX>

  *mic = (uint32_t)((uint32_t)Mic[3] << 24 | (uint32_t)Mic[2] << 16 | (uint32_t)Mic[1] << 8 | (uint32_t)Mic[0]);
 800e252:	7862      	ldrb	r2, [r4, #1]
 800e254:	7823      	ldrb	r3, [r4, #0]
 800e256:	0212      	lsls	r2, r2, #8
 800e258:	431a      	orrs	r2, r3
 800e25a:	78a3      	ldrb	r3, [r4, #2]
 800e25c:	041b      	lsls	r3, r3, #16
 800e25e:	431a      	orrs	r2, r3
 800e260:	78e3      	ldrb	r3, [r4, #3]
 800e262:	061b      	lsls	r3, r3, #24
 800e264:	4313      	orrs	r3, r2
 800e266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e268:	6013      	str	r3, [r2, #0]
}
 800e26a:	b005      	add	sp, #20
 800e26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e26e:	46c0      	nop			; (mov r8, r8)
 800e270:	200004dc 	.word	0x200004dc
 800e274:	20000c68 	.word	0x20000c68
 800e278:	20000e71 	.word	0x20000e71

0800e27c <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh>:

void LoRaMacPayloadEncrypt(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer)
{
 800e27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e27e:	001d      	movs	r5, r3
 800e280:	b085      	sub	sp, #20
 800e282:	ab0a      	add	r3, sp, #40	; 0x28
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	9002      	str	r0, [sp, #8]
 800e288:	000e      	movs	r6, r1
  InsertTrace(__COUNTER__, FileId);
 800e28a:	2001      	movs	r0, #1
 800e28c:	2105      	movs	r1, #5
{
 800e28e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e290:	9303      	str	r3, [sp, #12]
 800e292:	9201      	str	r2, [sp, #4]
  InsertTrace(__COUNTER__, FileId);
 800e294:	f003 fbfa 	bl	8011a8c <_Z11InsertTracehh>
  uint16_t i;
  uint8_t bufferIndex = 0;
  uint16_t ctr = 1;

  memset1(AesContext.ksch, '\0', 240);
 800e298:	4f2e      	ldr	r7, [pc, #184]	; (800e354 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xd8>)
 800e29a:	22f0      	movs	r2, #240	; 0xf0
 800e29c:	2100      	movs	r1, #0
 800e29e:	0038      	movs	r0, r7
 800e2a0:	f003 fc48 	bl	8011b34 <_Z7memset1Phht>
  aes_set_key(key, 16, &AesContext);
 800e2a4:	003a      	movs	r2, r7
 800e2a6:	2110      	movs	r1, #16
 800e2a8:	9801      	ldr	r0, [sp, #4]
 800e2aa:	f002 f8c7 	bl	801043c <_Z11aes_set_keyPKhhP11aes_context>

  aBlock[5] = dir;
 800e2ae:	4b2a      	ldr	r3, [pc, #168]	; (800e358 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xdc>)
 800e2b0:	9a03      	ldr	r2, [sp, #12]

  aBlock[6] = (address) & 0xFF;
 800e2b2:	719d      	strb	r5, [r3, #6]
  aBlock[5] = dir;
 800e2b4:	715a      	strb	r2, [r3, #5]
  aBlock[7] = (address >> 8) & 0xFF;
 800e2b6:	0a2a      	lsrs	r2, r5, #8
 800e2b8:	71da      	strb	r2, [r3, #7]
  aBlock[8] = (address >> 16) & 0xFF;
 800e2ba:	0c2a      	lsrs	r2, r5, #16
  aBlock[9] = (address >> 24) & 0xFF;
 800e2bc:	0e2d      	lsrs	r5, r5, #24
 800e2be:	725d      	strb	r5, [r3, #9]

  aBlock[10] = (sequenceCounter) & 0xFF;
  aBlock[11] = (sequenceCounter >> 8) & 0xFF;
  aBlock[12] = (sequenceCounter >> 16) & 0xFF;
  aBlock[13] = (sequenceCounter >> 24) & 0xFF;
 800e2c0:	2500      	movs	r5, #0
  aBlock[8] = (address >> 16) & 0xFF;
 800e2c2:	721a      	strb	r2, [r3, #8]
  aBlock[11] = (sequenceCounter >> 8) & 0xFF;
 800e2c4:	0a22      	lsrs	r2, r4, #8
  aBlock[10] = (sequenceCounter) & 0xFF;
 800e2c6:	729c      	strb	r4, [r3, #10]
  aBlock[11] = (sequenceCounter >> 8) & 0xFF;
 800e2c8:	72da      	strb	r2, [r3, #11]
  aBlock[12] = (sequenceCounter >> 16) & 0xFF;
 800e2ca:	0c22      	lsrs	r2, r4, #16
  aBlock[13] = (sequenceCounter >> 24) & 0xFF;
 800e2cc:	0e24      	lsrs	r4, r4, #24
  aBlock[12] = (sequenceCounter >> 16) & 0xFF;
 800e2ce:	731a      	strb	r2, [r3, #12]
  aBlock[13] = (sequenceCounter >> 24) & 0xFF;
 800e2d0:	735c      	strb	r4, [r3, #13]
 800e2d2:	9601      	str	r6, [sp, #4]

  while(size >= 16)
 800e2d4:	9b01      	ldr	r3, [sp, #4]
 800e2d6:	012c      	lsls	r4, r5, #4
 800e2d8:	b2e4      	uxtb	r4, r4
 800e2da:	2b0f      	cmp	r3, #15
 800e2dc:	d919      	bls.n	800e312 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0x96>
  {
    aBlock[15] = ((ctr) & 0xFF);
    ctr++;
    aes_encrypt(aBlock, sBlock, &AesContext);
 800e2de:	4f1f      	ldr	r7, [pc, #124]	; (800e35c <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xe0>)
    aBlock[15] = ((ctr) & 0xFF);
 800e2e0:	481d      	ldr	r0, [pc, #116]	; (800e358 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xdc>)
 800e2e2:	3501      	adds	r5, #1
    aes_encrypt(aBlock, sBlock, &AesContext);
 800e2e4:	4a1b      	ldr	r2, [pc, #108]	; (800e354 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xd8>)
 800e2e6:	0039      	movs	r1, r7
 800e2e8:	b2ed      	uxtb	r5, r5
    aBlock[15] = ((ctr) & 0xFF);
 800e2ea:	73c5      	strb	r5, [r0, #15]
    aes_encrypt(aBlock, sBlock, &AesContext);
 800e2ec:	f002 f92a 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
 800e2f0:	0022      	movs	r2, r4
    for(i = 0; i < 16; i++)
    {
      encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800e2f2:	1b3f      	subs	r7, r7, r4
 800e2f4:	3210      	adds	r2, #16
 800e2f6:	9902      	ldr	r1, [sp, #8]
 800e2f8:	5d3b      	ldrb	r3, [r7, r4]
 800e2fa:	5d09      	ldrb	r1, [r1, r4]
 800e2fc:	404b      	eors	r3, r1
 800e2fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e300:	550b      	strb	r3, [r1, r4]
 800e302:	3401      	adds	r4, #1
    for(i = 0; i < 16; i++)
 800e304:	4294      	cmp	r4, r2
 800e306:	d1f6      	bne.n	800e2f6 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0x7a>
    }
    size -= 16;
 800e308:	9b01      	ldr	r3, [sp, #4]
 800e30a:	3b10      	subs	r3, #16
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	9301      	str	r3, [sp, #4]
  while(size >= 16)
 800e310:	e7e0      	b.n	800e2d4 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0x58>
 800e312:	2410      	movs	r4, #16
 800e314:	0933      	lsrs	r3, r6, #4
 800e316:	4264      	negs	r4, r4
 800e318:	435c      	muls	r4, r3
 800e31a:	1934      	adds	r4, r6, r4
 800e31c:	011d      	lsls	r5, r3, #4
 800e31e:	b2a4      	uxth	r4, r4
 800e320:	b2ed      	uxtb	r5, r5
 800e322:	3301      	adds	r3, #1
    bufferIndex += 16;
  }

  if(size > 0)
 800e324:	2c00      	cmp	r4, #0
 800e326:	d013      	beq.n	800e350 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xd4>
  {
    aBlock[15] = ((ctr) & 0xFF);
    aes_encrypt(aBlock, sBlock, &AesContext);
 800e328:	4f0c      	ldr	r7, [pc, #48]	; (800e35c <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xe0>)
    aBlock[15] = ((ctr) & 0xFF);
 800e32a:	480b      	ldr	r0, [pc, #44]	; (800e358 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xdc>)
    aes_encrypt(aBlock, sBlock, &AesContext);
 800e32c:	4a09      	ldr	r2, [pc, #36]	; (800e354 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xd8>)
 800e32e:	0039      	movs	r1, r7
    aBlock[15] = ((ctr) & 0xFF);
 800e330:	73c3      	strb	r3, [r0, #15]
    aes_encrypt(aBlock, sBlock, &AesContext);
 800e332:	f002 f907 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
 800e336:	2300      	movs	r3, #0
    for(i = 0; i < size; i++)
    {
      encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800e338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e33a:	1950      	adds	r0, r2, r5
 800e33c:	9a02      	ldr	r2, [sp, #8]
 800e33e:	1955      	adds	r5, r2, r5
 800e340:	5cea      	ldrb	r2, [r5, r3]
 800e342:	5cf9      	ldrb	r1, [r7, r3]
 800e344:	404a      	eors	r2, r1
 800e346:	54c2      	strb	r2, [r0, r3]
 800e348:	3301      	adds	r3, #1
    for(i = 0; i < size; i++)
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	42a2      	cmp	r2, r4
 800e34e:	d3f7      	bcc.n	800e340 <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh+0xc4>
    }
  }
}
 800e350:	b005      	add	sp, #20
 800e352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e354:	20000d80 	.word	0x20000d80
 800e358:	200004ec 	.word	0x200004ec
 800e35c:	20000e81 	.word	0x20000e81

0800e360 <_Z21LoRaMacPayloadDecryptPKhtS0_mhmPh>:

void LoRaMacPayloadDecrypt(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer)
{
 800e360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e362:	0004      	movs	r4, r0
 800e364:	000d      	movs	r5, r1
 800e366:	001e      	movs	r6, r3
 800e368:	b087      	sub	sp, #28
 800e36a:	ab0c      	add	r3, sp, #48	; 0x30
  InsertTrace(__COUNTER__, FileId);
 800e36c:	2105      	movs	r1, #5
 800e36e:	2002      	movs	r0, #2
{
 800e370:	781f      	ldrb	r7, [r3, #0]
 800e372:	9205      	str	r2, [sp, #20]
  InsertTrace(__COUNTER__, FileId);
 800e374:	f003 fb8a 	bl	8011a8c <_Z11InsertTracehh>
  LoRaMacPayloadEncrypt(buffer, size, key, address, dir, sequenceCounter, decBuffer);
 800e378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e37a:	9700      	str	r7, [sp, #0]
 800e37c:	9302      	str	r3, [sp, #8]
 800e37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e380:	9a05      	ldr	r2, [sp, #20]
 800e382:	9301      	str	r3, [sp, #4]
 800e384:	0029      	movs	r1, r5
 800e386:	0033      	movs	r3, r6
 800e388:	0020      	movs	r0, r4
 800e38a:	f7ff ff77 	bl	800e27c <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh>
}
 800e38e:	b007      	add	sp, #28
 800e390:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e394 <_Z21LoRaMacJoinComputeMicPKhtS0_Pm>:

void LoRaMacJoinComputeMic(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic)
{
 800e394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e396:	0017      	movs	r7, r2
 800e398:	000d      	movs	r5, r1
 800e39a:	001e      	movs	r6, r3
 800e39c:	9001      	str	r0, [sp, #4]
  InsertTrace(__COUNTER__, FileId);
 800e39e:	2105      	movs	r1, #5
 800e3a0:	2003      	movs	r0, #3
 800e3a2:	f003 fb73 	bl	8011a8c <_Z11InsertTracehh>
  AES_CMAC_Init(AesCmacCtx);
 800e3a6:	4c0f      	ldr	r4, [pc, #60]	; (800e3e4 <_Z21LoRaMacJoinComputeMicPKhtS0_Pm+0x50>)
 800e3a8:	0020      	movs	r0, r4
 800e3aa:	f002 fa11 	bl	80107d0 <_Z13AES_CMAC_InitP13_AES_CMAC_CTX>

  AES_CMAC_SetKey(AesCmacCtx, key);
 800e3ae:	0039      	movs	r1, r7
 800e3b0:	0020      	movs	r0, r4
 800e3b2:	f002 fa1d 	bl	80107f0 <_Z15AES_CMAC_SetKeyP13_AES_CMAC_CTXPKh>

  AES_CMAC_Update(AesCmacCtx, buffer, size & 0xFF);
 800e3b6:	b2ea      	uxtb	r2, r5
 800e3b8:	9901      	ldr	r1, [sp, #4]
 800e3ba:	0020      	movs	r0, r4
 800e3bc:	f002 fa1f 	bl	80107fe <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm>

  AES_CMAC_Final(Mic, AesCmacCtx);
 800e3c0:	4d09      	ldr	r5, [pc, #36]	; (800e3e8 <_Z21LoRaMacJoinComputeMicPKhtS0_Pm+0x54>)
 800e3c2:	0021      	movs	r1, r4
 800e3c4:	0028      	movs	r0, r5
 800e3c6:	f002 fa7e 	bl	80108c6 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX>

  *mic = (uint32_t)((uint32_t)Mic[3] << 24 | (uint32_t)Mic[2] << 16 | (uint32_t)Mic[1] << 8 | (uint32_t)Mic[0]);
 800e3ca:	786a      	ldrb	r2, [r5, #1]
 800e3cc:	782b      	ldrb	r3, [r5, #0]
 800e3ce:	0212      	lsls	r2, r2, #8
 800e3d0:	431a      	orrs	r2, r3
 800e3d2:	78ab      	ldrb	r3, [r5, #2]
 800e3d4:	041b      	lsls	r3, r3, #16
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	78eb      	ldrb	r3, [r5, #3]
 800e3da:	061b      	lsls	r3, r3, #24
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	6033      	str	r3, [r6, #0]
}
 800e3e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e3e2:	46c0      	nop			; (mov r8, r8)
 800e3e4:	20000c68 	.word	0x20000c68
 800e3e8:	20000e71 	.word	0x20000e71

0800e3ec <_Z18LoRaMacJoinDecryptPKhtS0_Ph>:

void LoRaMacJoinDecrypt(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer)
{
 800e3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3ee:	001d      	movs	r5, r3
 800e3f0:	0004      	movs	r4, r0
 800e3f2:	000f      	movs	r7, r1
  InsertTrace(__COUNTER__, FileId);
 800e3f4:	2004      	movs	r0, #4
 800e3f6:	2105      	movs	r1, #5
{
 800e3f8:	9201      	str	r2, [sp, #4]
  InsertTrace(__COUNTER__, FileId);
 800e3fa:	f003 fb47 	bl	8011a8c <_Z11InsertTracehh>
  memset1(AesContext.ksch, '\0', 240);
 800e3fe:	4e0d      	ldr	r6, [pc, #52]	; (800e434 <_Z18LoRaMacJoinDecryptPKhtS0_Ph+0x48>)
 800e400:	22f0      	movs	r2, #240	; 0xf0
 800e402:	2100      	movs	r1, #0
 800e404:	0030      	movs	r0, r6
 800e406:	f003 fb95 	bl	8011b34 <_Z7memset1Phht>
  aes_set_key(key, 16, &AesContext);
 800e40a:	0032      	movs	r2, r6
 800e40c:	2110      	movs	r1, #16
 800e40e:	9801      	ldr	r0, [sp, #4]
 800e410:	f002 f814 	bl	801043c <_Z11aes_set_keyPKhhP11aes_context>
  aes_encrypt(buffer, decBuffer, &AesContext);
 800e414:	0032      	movs	r2, r6
 800e416:	0029      	movs	r1, r5
 800e418:	0020      	movs	r0, r4
 800e41a:	f002 f893 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
  // Check if optional CFList is included
  if(size >= 16)
 800e41e:	2f0f      	cmp	r7, #15
 800e420:	d906      	bls.n	800e430 <_Z18LoRaMacJoinDecryptPKhtS0_Ph+0x44>
  {
    aes_encrypt(buffer + 16, decBuffer + 16, &AesContext);
 800e422:	0029      	movs	r1, r5
 800e424:	0020      	movs	r0, r4
 800e426:	3110      	adds	r1, #16
 800e428:	3010      	adds	r0, #16
 800e42a:	0032      	movs	r2, r6
 800e42c:	f002 f88a 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
  }
}
 800e430:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e432:	46c0      	nop			; (mov r8, r8)
 800e434:	20000d80 	.word	0x20000d80

0800e438 <_Z23LoRaMacJoinComputeSKeysPKhS0_tPhS1_>:

void LoRaMacJoinComputeSKeys(const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey)
{
 800e438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e43a:	000f      	movs	r7, r1
 800e43c:	b087      	sub	sp, #28
  InsertTrace(__COUNTER__, FileId);
 800e43e:	2105      	movs	r1, #5
{
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	466b      	mov	r3, sp
 800e444:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800e446:	0008      	movs	r0, r1
{
 800e448:	1d9e      	adds	r6, r3, #6
 800e44a:	80da      	strh	r2, [r3, #6]
  InsertTrace(__COUNTER__, FileId);
 800e44c:	f003 fb1e 	bl	8011a8c <_Z11InsertTracehh>
  uint8_t nonce[16];
  uint8_t *pDevNonce = (uint8_t *)&devNonce;

  memset1(AesContext.ksch, '\0', 240);
 800e450:	4d20      	ldr	r5, [pc, #128]	; (800e4d4 <_Z23LoRaMacJoinComputeSKeysPKhS0_tPhS1_+0x9c>)
 800e452:	22f0      	movs	r2, #240	; 0xf0
 800e454:	0028      	movs	r0, r5
 800e456:	2100      	movs	r1, #0
 800e458:	f003 fb6c 	bl	8011b34 <_Z7memset1Phht>
  aes_set_key(key, 16, &AesContext);
 800e45c:	002a      	movs	r2, r5
 800e45e:	2110      	movs	r1, #16
 800e460:	0020      	movs	r0, r4

  memset1(nonce, 0, sizeof(nonce));
 800e462:	ac02      	add	r4, sp, #8
  aes_set_key(key, 16, &AesContext);
 800e464:	f001 ffea 	bl	801043c <_Z11aes_set_keyPKhhP11aes_context>
  memset1(nonce, 0, sizeof(nonce));
 800e468:	0020      	movs	r0, r4
 800e46a:	2210      	movs	r2, #16
 800e46c:	2100      	movs	r1, #0
 800e46e:	f003 fb61 	bl	8011b34 <_Z7memset1Phht>
  nonce[0] = 0x01;
 800e472:	2301      	movs	r3, #1
 800e474:	7023      	strb	r3, [r4, #0]
  memcpy1(nonce + 1, appNonce, 6);
 800e476:	3308      	adds	r3, #8
 800e478:	446b      	add	r3, sp
 800e47a:	0039      	movs	r1, r7
 800e47c:	0018      	movs	r0, r3
 800e47e:	2206      	movs	r2, #6
 800e480:	f003 fb4f 	bl	8011b22 <_Z7memcpy1PhPKht>
  memcpy1(nonce + 7, pDevNonce, 2);
 800e484:	230f      	movs	r3, #15
 800e486:	446b      	add	r3, sp
 800e488:	0018      	movs	r0, r3
 800e48a:	0031      	movs	r1, r6
 800e48c:	2202      	movs	r2, #2
 800e48e:	f003 fb48 	bl	8011b22 <_Z7memcpy1PhPKht>
  aes_encrypt(nonce, nwkSKey, &AesContext);
 800e492:	002a      	movs	r2, r5
 800e494:	9900      	ldr	r1, [sp, #0]
 800e496:	0020      	movs	r0, r4
 800e498:	f002 f854 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>

  memset1(nonce, 0, sizeof(nonce));
 800e49c:	0020      	movs	r0, r4
 800e49e:	2210      	movs	r2, #16
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	f003 fb47 	bl	8011b34 <_Z7memset1Phht>
  nonce[0] = 0x02;
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	7023      	strb	r3, [r4, #0]
  memcpy1(nonce + 1, appNonce, 6);
 800e4aa:	2309      	movs	r3, #9
 800e4ac:	446b      	add	r3, sp
 800e4ae:	0039      	movs	r1, r7
 800e4b0:	0018      	movs	r0, r3
 800e4b2:	2206      	movs	r2, #6
 800e4b4:	f003 fb35 	bl	8011b22 <_Z7memcpy1PhPKht>
  memcpy1(nonce + 7, pDevNonce, 2);
 800e4b8:	230f      	movs	r3, #15
 800e4ba:	446b      	add	r3, sp
 800e4bc:	0018      	movs	r0, r3
 800e4be:	0031      	movs	r1, r6
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	f003 fb2e 	bl	8011b22 <_Z7memcpy1PhPKht>
  aes_encrypt(nonce, appSKey, &AesContext);
 800e4c6:	002a      	movs	r2, r5
 800e4c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e4ca:	0020      	movs	r0, r4
 800e4cc:	f002 f83a 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
}
 800e4d0:	b007      	add	sp, #28
 800e4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d4:	20000d80 	.word	0x20000d80

0800e4d8 <_Z23LoRaMacComputeAndAddMicPhtPKhmhm>:


void LoRaMacComputeAndAddMic(uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter)
{
 800e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4da:	0004      	movs	r4, r0
 800e4dc:	000e      	movs	r6, r1
 800e4de:	b089      	sub	sp, #36	; 0x24
 800e4e0:	9305      	str	r3, [sp, #20]
  InsertTrace(__COUNTER__, FileId);
 800e4e2:	2105      	movs	r1, #5
{
 800e4e4:	ab0e      	add	r3, sp, #56	; 0x38
  InsertTrace(__COUNTER__, FileId);
 800e4e6:	2006      	movs	r0, #6
{
 800e4e8:	781f      	ldrb	r7, [r3, #0]
 800e4ea:	9204      	str	r2, [sp, #16]
  InsertTrace(__COUNTER__, FileId);
 800e4ec:	f003 face 	bl	8011a8c <_Z11InsertTracehh>
  uint32_t mic;
  LoRaMacComputeMic(buffer, size, key, address, dir, sequenceCounter, &mic);
 800e4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4f2:	ad07      	add	r5, sp, #28
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	9a04      	ldr	r2, [sp, #16]
 800e4f8:	9b05      	ldr	r3, [sp, #20]
 800e4fa:	0031      	movs	r1, r6
 800e4fc:	0020      	movs	r0, r4
 800e4fe:	9502      	str	r5, [sp, #8]
 800e500:	9700      	str	r7, [sp, #0]
 800e502:	f7ff fe6f 	bl	800e1e4 <_Z17LoRaMacComputeMicPKhtS0_mhmPm>
  memcpy(&buffer[size], (uint8_t *)&mic, 4);
 800e506:	19a0      	adds	r0, r4, r6
 800e508:	2204      	movs	r2, #4
 800e50a:	0029      	movs	r1, r5
 800e50c:	f007 f8dd 	bl	80156ca <memcpy>
}
 800e510:	b009      	add	sp, #36	; 0x24
 800e512:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e514 <_Z15LoRaMacCheckMicPhtPKhmmm>:

int LoRaMacCheckMic(uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint32_t sequenceCounter, uint32_t micIn) {
 800e514:	b510      	push	{r4, lr}
 800e516:	b086      	sub	sp, #24
  uint32_t mic;
  int status = -1;
  LoRaMacComputeMic(buffer, size, key, address, 1, sequenceCounter, &mic);
 800e518:	ac05      	add	r4, sp, #20
 800e51a:	9402      	str	r4, [sp, #8]
 800e51c:	9c08      	ldr	r4, [sp, #32]
 800e51e:	9401      	str	r4, [sp, #4]
 800e520:	2401      	movs	r4, #1
 800e522:	9400      	str	r4, [sp, #0]
 800e524:	f7ff fe5e 	bl	800e1e4 <_Z17LoRaMacComputeMicPKhtS0_mhmPm>
  if(mic == micIn) {
 800e528:	9b05      	ldr	r3, [sp, #20]
 800e52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e52c:	1a98      	subs	r0, r3, r2
 800e52e:	1e43      	subs	r3, r0, #1
 800e530:	4198      	sbcs	r0, r3
 800e532:	4240      	negs	r0, r0
    status = 0;
  }
  return (status);
}
 800e534:	b006      	add	sp, #24
 800e536:	bd10      	pop	{r4, pc}

0800e538 <_Z19LoRaMacCheckJoinMicPKhtS0_m>:
int LoRaMacCheckJoinMic(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t micIn) {
 800e538:	b513      	push	{r0, r1, r4, lr}
 800e53a:	001c      	movs	r4, r3
  uint32_t mic;
  int status = -1;
  LoRaMacJoinComputeMic(buffer, size, key, &mic);
 800e53c:	ab01      	add	r3, sp, #4
 800e53e:	f7ff ff29 	bl	800e394 <_Z21LoRaMacJoinComputeMicPKhtS0_Pm>
  if(mic == micIn) {
 800e542:	9b01      	ldr	r3, [sp, #4]
 800e544:	1b18      	subs	r0, r3, r4
 800e546:	1e43      	subs	r3, r0, #1
 800e548:	4198      	sbcs	r0, r3
 800e54a:	4240      	negs	r0, r0
    status = 0;
  }
  return (status);
}
 800e54c:	bd16      	pop	{r1, r2, r4, pc}
	...

0800e550 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xEC1E12sLoRaWanKeysPS1_m>:
template class LoraWanObject<LoraRegionsEU, SX126x>;
template class LoraWanObject<LoraRegionsUS, SX1276>;
template class LoraWanObject<LoraRegionsUS, SX126x>;
template class LoraWanObject<LoraRegionsEU, SX1272>;
template class LoraWanObject<LoraRegionsUS, SX1272>;
template <template <class R> class T, class RADIOTYPE> LoraWanObject<T, RADIOTYPE>::LoraWanObject(sLoRaWanKeys LoRaWanKeys, RADIOTYPE *RadioUser, uint32_t FlashAdress): packet(LoRaWanKeys, RadioUser, FlashAdress) {
 800e550:	b084      	sub	sp, #16
 800e552:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e554:	b087      	sub	sp, #28
 800e556:	920e      	str	r2, [sp, #56]	; 0x38
 800e558:	0015      	movs	r5, r2
 800e55a:	466a      	mov	r2, sp
 800e55c:	0004      	movs	r4, r0
 800e55e:	469c      	mov	ip, r3
 800e560:	000e      	movs	r6, r1
 800e562:	930f      	str	r3, [sp, #60]	; 0x3c
 800e564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e566:	910d      	str	r1, [sp, #52]	; 0x34
 800e568:	9305      	str	r3, [sp, #20]
 800e56a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e56c:	9304      	str	r3, [sp, #16]
 800e56e:	ab10      	add	r3, sp, #64	; 0x40
 800e570:	cb83      	ldmia	r3!, {r0, r1, r7}
 800e572:	c283      	stmia	r2!, {r0, r1, r7}
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	0031      	movs	r1, r6
 800e578:	6013      	str	r3, [r2, #0]
 800e57a:	0020      	movs	r0, r4
 800e57c:	002a      	movs	r2, r5
 800e57e:	4663      	mov	r3, ip
 800e580:	f002 ff70 	bl	8011464 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m>
  StateLoraWanProcess = LWPSTATE_IDLE;
 800e584:	2300      	movs	r3, #0
 800e586:	4a07      	ldr	r2, [pc, #28]	; (800e5a4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xEC1E12sLoRaWanKeysPS1_m+0x54>)
  packet.MajorBits    = LORAWANR1;
  FlashAdress         = FlashAdress;
  ClassCActivated     = CLASS_C_NOT_ACTIVATED;
};
 800e588:	0020      	movs	r0, r4
  StateLoraWanProcess = LWPSTATE_IDLE;
 800e58a:	54a3      	strb	r3, [r4, r2]
  packet.MajorBits    = LORAWANR1;
 800e58c:	0022      	movs	r2, r4
 800e58e:	32ff      	adds	r2, #255	; 0xff
 800e590:	7713      	strb	r3, [r2, #28]
  ClassCActivated     = CLASS_C_NOT_ACTIVATED;
 800e592:	2201      	movs	r2, #1
 800e594:	4b04      	ldr	r3, [pc, #16]	; (800e5a8 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xEC1E12sLoRaWanKeysPS1_m+0x58>)
 800e596:	54e2      	strb	r2, [r4, r3]
};
 800e598:	b007      	add	sp, #28
 800e59a:	bcf0      	pop	{r4, r5, r6, r7}
 800e59c:	bc08      	pop	{r3}
 800e59e:	b004      	add	sp, #16
 800e5a0:	4718      	bx	r3
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	000008f4 	.word	0x000008f4
 800e5a8:	000008fc 	.word	0x000008fc

0800e5ac <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14ReceivePayloadEPhS3_S3_>:

/**************************************************/
/*        LoraWan  Receive  Method                */
/**************************************************/
template <template <class R> class T, class RADIOTYPE>
eStatusLoRaWan LoraWanObject <T, RADIOTYPE> ::ReceivePayload(uint8_t *UserRxFport, uint8_t *UserRxPayload, uint8_t *UserRxPayloadSize) {
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	0004      	movs	r4, r0
  eStatusLoRaWan status = OKLORAWAN;
  if(packet.AvailableRxPacketForUser == NO_LORA_RXPACKET_AVAILABLE) {
 800e5b0:	4d0c      	ldr	r5, [pc, #48]	; (800e5e4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14ReceivePayloadEPhS3_S3_+0x38>)
eStatusLoRaWan LoraWanObject <T, RADIOTYPE> ::ReceivePayload(uint8_t *UserRxFport, uint8_t *UserRxPayload, uint8_t *UserRxPayloadSize) {
 800e5b2:	0010      	movs	r0, r2
  if(packet.AvailableRxPacketForUser == NO_LORA_RXPACKET_AVAILABLE) {
 800e5b4:	5d62      	ldrb	r2, [r4, r5]
 800e5b6:	2a00      	cmp	r2, #0
 800e5b8:	d010      	beq.n	800e5dc <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14ReceivePayloadEPhS3_S3_+0x30>
    status = ERRORLORAWAN;
  } else {
    *UserRxPayloadSize = packet.MacRxPayloadSize;
 800e5ba:	22b3      	movs	r2, #179	; 0xb3
 800e5bc:	0052      	lsls	r2, r2, #1
 800e5be:	5ca6      	ldrb	r6, [r4, r2]
 800e5c0:	701e      	strb	r6, [r3, #0]
    *UserRxFport = packet.FportRx;
 800e5c2:	2366      	movs	r3, #102	; 0x66
 800e5c4:	33ff      	adds	r3, #255	; 0xff
 800e5c6:	5ce3      	ldrb	r3, [r4, r3]
 800e5c8:	700b      	strb	r3, [r1, #0]
    memcpy(UserRxPayload, &packet.MacRxPayload[0], packet.MacRxPayloadSize);
 800e5ca:	0021      	movs	r1, r4
 800e5cc:	3168      	adds	r1, #104	; 0x68
 800e5ce:	5ca2      	ldrb	r2, [r4, r2]
 800e5d0:	31ff      	adds	r1, #255	; 0xff
 800e5d2:	f007 f87a 	bl	80156ca <memcpy>
    packet.AvailableRxPacketForUser = NO_LORA_RXPACKET_AVAILABLE;
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	5560      	strb	r0, [r4, r5]
  }
  return(status);
};
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
    status = ERRORLORAWAN;
 800e5dc:	2001      	movs	r0, #1
 800e5de:	4240      	negs	r0, r0
 800e5e0:	e7fb      	b.n	800e5da <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14ReceivePayloadEPhS3_S3_+0x2e>
 800e5e2:	46c0      	nop			; (mov r8, r8)
 800e5e4:	00000266 	.word	0x00000266

0800e5e8 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv>:
eLoraWan_Process_States LoraWanObject <T, RADIOTYPE> ::Join(void) {
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	0004      	movs	r4, r0
  packet.Phy.LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 800e5ec:	4816      	ldr	r0, [pc, #88]	; (800e648 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x60>)
 800e5ee:	f7ff fd67 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 800e5f2:	23d8      	movs	r3, #216	; 0xd8
  if(StateLoraWanProcess != LWPSTATE_IDLE) {
 800e5f4:	4e15      	ldr	r6, [pc, #84]	; (800e64c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x64>)
  packet.Phy.LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 800e5f6:	00db      	lsls	r3, r3, #3
 800e5f8:	50e0      	str	r0, [r4, r3]
  if(StateLoraWanProcess != LWPSTATE_IDLE) {
 800e5fa:	5da0      	ldrb	r0, [r4, r6]
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d005      	beq.n	800e60c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x24>
    DEBUG_MSG(" ERROR : LP STATE NOT EQUAL TO IDLE \n");
 800e600:	2000      	movs	r0, #0
 800e602:	4913      	ldr	r1, [pc, #76]	; (800e650 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x68>)
    DEBUG_MSG(" ERROR : APB DEVICE CAN'T PROCCED A JOIN REQUEST \n");
 800e604:	f7fb ff12 	bl	800a42c <SEGGER_RTT_WriteString>
    return (LWPSTATE_ERROR);
 800e608:	2009      	movs	r0, #9
};
 800e60a:	bd70      	pop	{r4, r5, r6, pc}
  packet.RegionSetBadCrcInFlash();
}

template <template <class R> class T, class RADIOTYPE>
eDeviceTypeOTA_APB LoraWanObject <T, RADIOTYPE> ::GetIsOtaDevice(void) {
  return (eDeviceTypeOTA_APB)packet.otaDevice;
 800e60c:	0023      	movs	r3, r4
 800e60e:	33ff      	adds	r3, #255	; 0xff
  if(GetIsOtaDevice() == APB_DEVICE) {
 800e610:	7e5d      	ldrb	r5, [r3, #25]
 800e612:	2d00      	cmp	r5, #0
 800e614:	d001      	beq.n	800e61a <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x32>
    DEBUG_MSG(" ERROR : APB DEVICE CAN'T PROCCED A JOIN REQUEST \n");
 800e616:	490f      	ldr	r1, [pc, #60]	; (800e654 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x6c>)
 800e618:	e7f4      	b.n	800e604 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x1c>
  packet.Phy.JoinedStatus = NOT_JOINED;
 800e61a:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x70>)
  packet.RegionSetDataRateDistribution(JOIN_DR_DISTRIBUTION);
 800e61c:	2103      	movs	r1, #3
  packet.Phy.JoinedStatus = NOT_JOINED;
 800e61e:	54e5      	strb	r5, [r4, r3]
  packet.MacNbTransCpt = packet.MacNbTrans = 1;
 800e620:	2302      	movs	r3, #2
 800e622:	33ff      	adds	r3, #255	; 0xff
 800e624:	81a3      	strh	r3, [r4, #12]
  packet.RegionSetDataRateDistribution(JOIN_DR_DISTRIBUTION);
 800e626:	0020      	movs	r0, r4
 800e628:	f002 ffa2 	bl	8011570 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh>
  packet.RegionGiveNextDataRate();
 800e62c:	0020      	movs	r0, r4
 800e62e:	f003 f967 	bl	8011900 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv>
  packet.BuildJoinLoraFrame();
 800e632:	0020      	movs	r0, r4
 800e634:	f000 fca0 	bl	800ef78 <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv>
  packet.MacRx1Delay = packet.JOIN_ACCEPT_DELAY1;
 800e638:	0023      	movs	r3, r4
 800e63a:	2205      	movs	r2, #5
  StateLoraWanProcess = LWPSTATE_SEND;
 800e63c:	2001      	movs	r0, #1
  packet.MacRx1Delay = packet.JOIN_ACCEPT_DELAY1;
 800e63e:	33c8      	adds	r3, #200	; 0xc8
  packet.MacRx2DataRate = packet.RX2DR_INIT;
 800e640:	73a5      	strb	r5, [r4, #14]
  packet.MacRx1Delay = packet.JOIN_ACCEPT_DELAY1;
 800e642:	601a      	str	r2, [r3, #0]
  StateLoraWanProcess = LWPSTATE_SEND;
 800e644:	55a0      	strb	r0, [r4, r6]
  return(StateLoraWanProcess);
 800e646:	e7e0      	b.n	800e60a <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv+0x22>
 800e648:	20001988 	.word	0x20001988
 800e64c:	000008f4 	.word	0x000008f4
 800e650:	08017dba 	.word	0x08017dba
 800e654:	08017de0 	.word	0x08017de0
 800e658:	000006ad 	.word	0x000006ad

0800e65c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE8IsJoinedEv>:
  return (status);
 800e65c:	4b01      	ldr	r3, [pc, #4]	; (800e664 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE8IsJoinedEv+0x8>)
 800e65e:	5cc0      	ldrb	r0, [r0, r3]
}
 800e660:	4770      	bx	lr
 800e662:	46c0      	nop			; (mov r8, r8)
 800e664:	000006ad 	.word	0x000006ad

0800e668 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE19SetDataRateStrategyE17eDataRateStrategy>:
void LoraWanObject <T, RADIOTYPE> ::SetDataRateStrategy(eDataRateStrategy adrModeSelect) {
 800e668:	b510      	push	{r4, lr}
  packet.AdrModeSelect = adrModeSelect;
 800e66a:	4b02      	ldr	r3, [pc, #8]	; (800e674 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE19SetDataRateStrategyE17eDataRateStrategy+0xc>)
 800e66c:	54c1      	strb	r1, [r0, r3]
  packet.RegionSetDataRateDistribution(adrModeSelect);
 800e66e:	f002 ff7f 	bl	8011570 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh>
};
 800e672:	bd10      	pop	{r4, pc}
 800e674:	0000047a 	.word	0x0000047a

0800e678 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14RestoreContextEv>:
void LoraWanObject <T, RADIOTYPE> ::RestoreContext(void) {
 800e678:	b510      	push	{r4, lr}
  packet.RegionLoadFromFlash();
 800e67a:	f002 ffbf 	bl	80115fc <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv>
};
 800e67e:	bd10      	pop	{r4, pc}

0800e680 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE16SetProvisionningEv>:
void LoraWanObject <T, RADIOTYPE> ::SetProvisionning(void /*sLoRaWanKeys LoRaWanKeys*/) {
 800e680:	b510      	push	{r4, lr}
  packet.RegionSaveInFlash();
 800e682:	f002 fcd5 	bl	8011030 <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv>
}
 800e686:	bd10      	pop	{r4, pc}

0800e688 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14GetIsOtaDeviceEv>:
  return (eDeviceTypeOTA_APB)packet.otaDevice;
 800e688:	30ff      	adds	r0, #255	; 0xff
 800e68a:	7e40      	ldrb	r0, [r0, #25]
}
 800e68c:	4770      	bx	lr
	...

0800e690 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE7NewJoinEv>:
  packet.Phy.JoinedStatus = NOT_JOINED;
 800e690:	2200      	movs	r2, #0
 800e692:	4b01      	ldr	r3, [pc, #4]	; (800e698 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE7NewJoinEv+0x8>)
 800e694:	54c2      	strb	r2, [r0, r3]
}
 800e696:	4770      	bx	lr
 800e698:	000006ad 	.word	0x000006ad

0800e69c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE15CopyUserPayloadEPKhh>:
/************************************************************************************************/
/*                      Private  Methods                                                        */
/************************************************************************************************/
template <template <class R> class T, class RADIOTYPE>
void LoraWanObject <T, RADIOTYPE> ::CopyUserPayload(const uint8_t *dataIn, const uint8_t sizeIn) {
  memcpy(&packet.Phy.TxPhyPayload[FHDROFFSET + packet.FoptsTxLengthCurrent], dataIn, sizeIn);
 800e69c:	23a0      	movs	r3, #160	; 0xa0
void LoraWanObject <T, RADIOTYPE> ::CopyUserPayload(const uint8_t *dataIn, const uint8_t sizeIn) {
 800e69e:	b510      	push	{r4, lr}
  memcpy(&packet.Phy.TxPhyPayload[FHDROFFSET + packet.FoptsTxLengthCurrent], dataIn, sizeIn);
 800e6a0:	005b      	lsls	r3, r3, #1
 800e6a2:	5cc3      	ldrb	r3, [r0, r3]
 800e6a4:	4c02      	ldr	r4, [pc, #8]	; (800e6b0 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE15CopyUserPayloadEPKhh+0x14>)
 800e6a6:	191b      	adds	r3, r3, r4
 800e6a8:	18c0      	adds	r0, r0, r3
 800e6aa:	f007 f80e 	bl	80156ca <memcpy>
};
 800e6ae:	bd10      	pop	{r4, pc}
 800e6b0:	00000499 	.word	0x00000499

0800e6b4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE10RadioResetEv>:
template <template <class R> class T, class RADIOTYPE>
uint8_t LoraWanObject <T, RADIOTYPE> ::GetRadioIrqFlag(void) {
  return packet.Phy.RegIrqFlag;
};
template <template <class R> class T, class RADIOTYPE>
void LoraWanObject <T, RADIOTYPE> ::RadioReset(void) {
 800e6b4:	b510      	push	{r4, lr}
  packet.Phy.Radio->Reset();
 800e6b6:	4b02      	ldr	r3, [pc, #8]	; (800e6c0 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE10RadioResetEv+0xc>)
 800e6b8:	58c0      	ldr	r0, [r0, r3]
 800e6ba:	f006 facf 	bl	8014c5c <_ZN6SX126x5ResetEv>
}
 800e6be:	bd10      	pop	{r4, pc}
 800e6c0:	0000048c 	.word	0x0000048c

0800e6c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh>:
eLoraWan_Process_States LoraWanObject <T, RADIOTYPE> ::SendPayload(uint8_t fPort, const uint8_t *dataIn, const uint8_t sizeIn, uint8_t PacketType) {
 800e6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6c6:	0004      	movs	r4, r0
 800e6c8:	001f      	movs	r7, r3
  packet.Phy.LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 800e6ca:	4820      	ldr	r0, [pc, #128]	; (800e74c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x88>)
eLoraWan_Process_States LoraWanObject <T, RADIOTYPE> ::SendPayload(uint8_t fPort, const uint8_t *dataIn, const uint8_t sizeIn, uint8_t PacketType) {
 800e6cc:	ab08      	add	r3, sp, #32
 800e6ce:	9100      	str	r1, [sp, #0]
 800e6d0:	9201      	str	r2, [sp, #4]
 800e6d2:	781e      	ldrb	r6, [r3, #0]
  packet.Phy.LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 800e6d4:	f7ff fcf4 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 800e6d8:	23d8      	movs	r3, #216	; 0xd8
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	50e0      	str	r0, [r4, r3]
  packet.RegionGiveNextDataRate(); // both choose the next tx data rate but also compute the Sf and Bw (region)
 800e6de:	0020      	movs	r0, r4
 800e6e0:	f003 f90e 	bl	8011900 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv>
  status = packet.RegionMaxPayloadSize(sizeIn);
 800e6e4:	0039      	movs	r1, r7
 800e6e6:	0020      	movs	r0, r4
 800e6e8:	f002 ff2e 	bl	8011548 <_ZN13LoraRegionsEUI6SX126xE20RegionMaxPayloadSizeEh>
  if(status == ERRORLORAWAN) {
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d105      	bne.n	800e6fc <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x38>
    DEBUG_MSG(" ERROR : PAYLOAD SIZE TOO HIGH \n");
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	4917      	ldr	r1, [pc, #92]	; (800e750 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x8c>)
      DEBUG_MSG(" ERROR : OTA DEVICE NOT JOINED YET\n");
 800e6f4:	f7fb fe9a 	bl	800a42c <SEGGER_RTT_WriteString>
      return (LWPSTATE_INVALID);
 800e6f8:	2007      	movs	r0, #7
};
 800e6fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  return (eDeviceTypeOTA_APB)packet.otaDevice;
 800e6fc:	0025      	movs	r5, r4
 800e6fe:	35ff      	adds	r5, #255	; 0xff
  if(GetIsOtaDevice() == OTA_DEVICE) {
 800e700:	7e6b      	ldrb	r3, [r5, #25]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d105      	bne.n	800e712 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x4e>
    if(packet.Phy.JoinedStatus == NOT_JOINED) {
 800e706:	4b13      	ldr	r3, [pc, #76]	; (800e754 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x90>)
 800e708:	5ce0      	ldrb	r0, [r4, r3]
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d101      	bne.n	800e712 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x4e>
      DEBUG_MSG(" ERROR : OTA DEVICE NOT JOINED YET\n");
 800e70e:	4912      	ldr	r1, [pc, #72]	; (800e758 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x94>)
 800e710:	e7f0      	b.n	800e6f4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x30>
  RadioReset();
 800e712:	0020      	movs	r0, r4
 800e714:	f7ff ffce 	bl	800e6b4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE10RadioResetEv>
  CopyUserPayload(dataIn, sizeIn);
 800e718:	003a      	movs	r2, r7
 800e71a:	9901      	ldr	r1, [sp, #4]
 800e71c:	0020      	movs	r0, r4
 800e71e:	f7ff ffbd 	bl	800e69c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE15CopyUserPayloadEPKhh>
  packet.fPort = fPort;
 800e722:	9b00      	ldr	r3, [sp, #0]
  packet.BuildTxLoraFrame();
 800e724:	0020      	movs	r0, r4
  packet.UserPayloadSize = sizeIn;
 800e726:	77ef      	strb	r7, [r5, #31]
  packet.fPort = fPort;
 800e728:	76ab      	strb	r3, [r5, #26]
  packet.MType = PacketType;
 800e72a:	76ee      	strb	r6, [r5, #27]
  packet.BuildTxLoraFrame();
 800e72c:	f000 fcac 	bl	800f088 <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv>
  packet.EncryptTxFrame();
 800e730:	0020      	movs	r0, r4
 800e732:	f000 fa95 	bl	800ec60 <_ZN16LoraWanContainerILi16E6SX126xE14EncryptTxFrameEv>
  if(PacketType == CONF_DATA_UP) {
 800e736:	2e04      	cmp	r6, #4
 800e738:	d104      	bne.n	800e744 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x80>
    packet.MacNbTransCpt = MAX_CONFUP_MSG;
 800e73a:	7366      	strb	r6, [r4, #13]
  StateLoraWanProcess = LWPSTATE_SEND;
 800e73c:	2001      	movs	r0, #1
 800e73e:	4b07      	ldr	r3, [pc, #28]	; (800e75c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x98>)
 800e740:	54e0      	strb	r0, [r4, r3]
  return(StateLoraWanProcess);
 800e742:	e7da      	b.n	800e6fa <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x36>
    packet.MacNbTransCpt = packet.MacNbTrans;
 800e744:	7b23      	ldrb	r3, [r4, #12]
 800e746:	7363      	strb	r3, [r4, #13]
 800e748:	e7f8      	b.n	800e73c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh+0x78>
 800e74a:	46c0      	nop			; (mov r8, r8)
 800e74c:	20001988 	.word	0x20001988
 800e750:	08017c20 	.word	0x08017c20
 800e754:	000006ad 	.word	0x000006ad
 800e758:	08017c41 	.word	0x08017c41
 800e75c:	000008f4 	.word	0x000008f4

0800e760 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh>:
eLoraWan_Process_States LoraWanObject <T, RADIOTYPE> ::LoraWanProcess(uint8_t *AvailableRxPacket) {
 800e760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  *AvailableRxPacket = NO_LORA_RXPACKET_AVAILABLE;
 800e762:	2600      	movs	r6, #0
  if((mcu.RtcGetTimeSecond() - GetFailSafeTimestamp()) > 120) {
 800e764:	4fc0      	ldr	r7, [pc, #768]	; (800ea68 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x308>)
eLoraWan_Process_States LoraWanObject <T, RADIOTYPE> ::LoraWanProcess(uint8_t *AvailableRxPacket) {
 800e766:	0004      	movs	r4, r0
  *AvailableRxPacket = NO_LORA_RXPACKET_AVAILABLE;
 800e768:	700e      	strb	r6, [r1, #0]
  if((mcu.RtcGetTimeSecond() - GetFailSafeTimestamp()) > 120) {
 800e76a:	0038      	movs	r0, r7
eLoraWan_Process_States LoraWanObject <T, RADIOTYPE> ::LoraWanProcess(uint8_t *AvailableRxPacket) {
 800e76c:	9100      	str	r1, [sp, #0]
  if((mcu.RtcGetTimeSecond() - GetFailSafeTimestamp()) > 120) {
 800e76e:	f7ff fca7 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
  uint8_t                    ValidRxPacket;
  uint32_t                   RtcTargetTimer;
  void CopyUserPayload(const uint8_t *dataIn, const uint8_t sizeIn);
  uint8_t  GetStateTimer(void);
  uint32_t GetFailSafeTimestamp(void) {
    return packet.Phy.LastItTimeFailsafe;
 800e772:	23d8      	movs	r3, #216	; 0xd8
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	58e3      	ldr	r3, [r4, r3]
 800e778:	4dbc      	ldr	r5, [pc, #752]	; (800ea6c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x30c>)
 800e77a:	1ac0      	subs	r0, r0, r3
 800e77c:	2878      	cmp	r0, #120	; 0x78
 800e77e:	d908      	bls.n	800e792 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x32>
    RadioReset();
 800e780:	0020      	movs	r0, r4
 800e782:	f7ff ff97 	bl	800e6b4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE10RadioResetEv>
    StateLoraWanProcess = LWPSTATE_ERROR;
 800e786:	2309      	movs	r3, #9
    DEBUG_MSG("ERROR : FAILSAFE EVENT OCCUR \n");
 800e788:	49b9      	ldr	r1, [pc, #740]	; (800ea70 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x310>)
    StateLoraWanProcess = LWPSTATE_ERROR;
 800e78a:	5563      	strb	r3, [r4, r5]
    DEBUG_MSG("ERROR : FAILSAFE EVENT OCCUR \n");
 800e78c:	0030      	movs	r0, r6
 800e78e:	f7fb fe4d 	bl	800a42c <SEGGER_RTT_WriteString>
  switch(StateLoraWanProcess) {
 800e792:	5d60      	ldrb	r0, [r4, r5]
 800e794:	2808      	cmp	r0, #8
 800e796:	d900      	bls.n	800e79a <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x3a>
 800e798:	e160      	b.n	800ea5c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x2fc>
 800e79a:	f7f9 fcd1 	bl	8008140 <__gnu_thumb1_case_uhi>
 800e79e:	0013      	.short	0x0013
 800e7a0:	00420009 	.word	0x00420009
 800e7a4:	00b40084 	.word	0x00b40084
 800e7a8:	013500ce 	.word	0x013500ce
 800e7ac:	0148015f 	.word	0x0148015f
  return packet.Phy.GetRadioState();
 800e7b0:	4bb0      	ldr	r3, [pc, #704]	; (800ea74 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x314>)
 800e7b2:	18e7      	adds	r7, r4, r3
 800e7b4:	0038      	movs	r0, r7
 800e7b6:	f002 f9cf 	bl	8010b58 <_ZN14RadioContainerI6SX126xE13GetRadioStateEv>
    switch(GetRadioState()) {
 800e7ba:	b2c6      	uxtb	r6, r0
 800e7bc:	2e00      	cmp	r6, #0
 800e7be:	d003      	beq.n	800e7c8 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x68>
 800e7c0:	2e02      	cmp	r6, #2
 800e7c2:	d01c      	beq.n	800e7fe <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x9e>
  return (StateLoraWanProcess);
 800e7c4:	5d60      	ldrb	r0, [r4, r5]
}
 800e7c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      InsertTrace(__COUNTER__, FileId);
 800e7c8:	0031      	movs	r1, r6
 800e7ca:	0030      	movs	r0, r6
 800e7cc:	f003 f95e 	bl	8011a8c <_Z11InsertTracehh>
  };
  uint8_t  GetRadioIrqFlag(void);
  void RadioReset(void);
  void AttachRadioIsr(void) {
    packet.Phy.AttachIsr();
 800e7d0:	0038      	movs	r0, r7
 800e7d2:	f002 f9ab 	bl	8010b2c <_ZN14RadioContainerI6SX126xE9AttachIsrEv>
      packet.ConfigureRadioAndSend();
 800e7d6:	0020      	movs	r0, r4
 800e7d8:	f000 fa76 	bl	800ecc8 <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv>
      DEBUG_MSG("\n");
 800e7dc:	49a6      	ldr	r1, [pc, #664]	; (800ea78 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x318>)
 800e7de:	0030      	movs	r0, r6
 800e7e0:	f7fb fe24 	bl	800a42c <SEGGER_RTT_WriteString>
      DEBUG_MSG("  **************************\n ");
 800e7e4:	49a5      	ldr	r1, [pc, #660]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
 800e7e6:	0030      	movs	r0, r6
 800e7e8:	f7fb fe20 	bl	800a42c <SEGGER_RTT_WriteString>
      DEBUG_MSG(" *       Send Payload     *\n ");
 800e7ec:	49a4      	ldr	r1, [pc, #656]	; (800ea80 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x320>)
 800e7ee:	0030      	movs	r0, r6
 800e7f0:	f7fb fe1c 	bl	800a42c <SEGGER_RTT_WriteString>
      DEBUG_MSG(" **************************\n ");
 800e7f4:	49a3      	ldr	r1, [pc, #652]	; (800ea84 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x324>)
    DEBUG_MSG(" Illegal state in lorawan process\n ");
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f7fb fe18 	bl	800a42c <SEGGER_RTT_WriteString>
    break;
 800e7fc:	e7e2      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
      InsertTrace(__COUNTER__, FileId);
 800e7fe:	2100      	movs	r1, #0
 800e800:	2001      	movs	r0, #1
 800e802:	f003 f943 	bl	8011a8c <_Z11InsertTracehh>
      packet.ConfigureTimerForRx(RX1);
 800e806:	2100      	movs	r1, #0
 800e808:	0020      	movs	r0, r4
 800e80a:	f001 fad9 	bl	800fdc0 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType>
      if(ClassCActivated == CLASS_C_ACTIVATED) {
 800e80e:	4b9e      	ldr	r3, [pc, #632]	; (800ea88 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x328>)
 800e810:	5ce3      	ldrb	r3, [r4, r3]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xbc>
        packet.ConfigureRadioForRxClassC();
 800e816:	0020      	movs	r0, r4
 800e818:	f000 fac6 	bl	800eda8 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv>
      StateLoraWanProcess = LWPSTATE_RX1;
 800e81c:	2302      	movs	r3, #2
        StateLoraWanProcess = LWPSTATE_PROCESSDOWNLINK;
 800e81e:	5563      	strb	r3, [r4, r5]
 800e820:	e7d0      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
  return packet.Phy.GetRadioState();
 800e822:	4b94      	ldr	r3, [pc, #592]	; (800ea74 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x314>)
 800e824:	18e0      	adds	r0, r4, r3
 800e826:	f002 f997 	bl	8010b58 <_ZN14RadioContainerI6SX126xE13GetRadioStateEv>
    if(GetRadioState() == RADIOSTATE_RX1FINISHED) {
 800e82a:	b2c0      	uxtb	r0, r0
 800e82c:	2803      	cmp	r0, #3
 800e82e:	d1c9      	bne.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
  return packet.Phy.RegIrqFlag;
 800e830:	4b96      	ldr	r3, [pc, #600]	; (800ea8c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x32c>)
 800e832:	4f91      	ldr	r7, [pc, #580]	; (800ea78 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x318>)
      if(GetRadioIrqFlag() == RECEIVE_PACKET_IRQ_FLAG) {
 800e834:	5ce3      	ldrb	r3, [r4, r3]
 800e836:	4e91      	ldr	r6, [pc, #580]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
        InsertTrace(__COUNTER__, FileId);
 800e838:	2100      	movs	r1, #0
      if(GetRadioIrqFlag() == RECEIVE_PACKET_IRQ_FLAG) {
 800e83a:	2b40      	cmp	r3, #64	; 0x40
 800e83c:	d114      	bne.n	800e868 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x108>
        InsertTrace(__COUNTER__, FileId);
 800e83e:	3801      	subs	r0, #1
 800e840:	f003 f924 	bl	8011a8c <_Z11InsertTracehh>
        DEBUG_MSG("\n");
 800e844:	0039      	movs	r1, r7
 800e846:	2000      	movs	r0, #0
 800e848:	f7fb fdf0 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG("  **************************\n ");
 800e84c:	0031      	movs	r1, r6
 800e84e:	2000      	movs	r0, #0
 800e850:	f7fb fdec 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" * Receive a downlink RX1 *\n ");
 800e854:	498e      	ldr	r1, [pc, #568]	; (800ea90 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x330>)
 800e856:	2000      	movs	r0, #0
 800e858:	f7fb fde8 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" **************************\n ");
 800e85c:	4989      	ldr	r1, [pc, #548]	; (800ea84 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x324>)
 800e85e:	2000      	movs	r0, #0
 800e860:	f7fb fde4 	bl	800a42c <SEGGER_RTT_WriteString>
        StateLoraWanProcess = LWPSTATE_PROCESSDOWNLINK;
 800e864:	2304      	movs	r3, #4
 800e866:	e7da      	b.n	800e81e <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xbe>
        InsertTrace(__COUNTER__, FileId);
 800e868:	f003 f910 	bl	8011a8c <_Z11InsertTracehh>
        DEBUG_MSG("\n");
 800e86c:	0039      	movs	r1, r7
 800e86e:	2000      	movs	r0, #0
 800e870:	f7fb fddc 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG("  **************************\n ");
 800e874:	0031      	movs	r1, r6
 800e876:	2000      	movs	r0, #0
 800e878:	f7fb fdd8 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" *      RX1 Timeout       *\n ");
 800e87c:	4985      	ldr	r1, [pc, #532]	; (800ea94 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x334>)
 800e87e:	2000      	movs	r0, #0
 800e880:	f7fb fdd4 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" **************************\n ");
 800e884:	497f      	ldr	r1, [pc, #508]	; (800ea84 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x324>)
 800e886:	2000      	movs	r0, #0
 800e888:	f7fb fdd0 	bl	800a42c <SEGGER_RTT_WriteString>
        packet.ConfigureTimerForRx(RX2);
 800e88c:	2101      	movs	r1, #1
 800e88e:	0020      	movs	r0, r4
 800e890:	f001 fa96 	bl	800fdc0 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType>
        if(ClassCActivated == CLASS_C_ACTIVATED) {
 800e894:	4b7c      	ldr	r3, [pc, #496]	; (800ea88 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x328>)
 800e896:	5ce3      	ldrb	r3, [r4, r3]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d102      	bne.n	800e8a2 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x142>
          packet.ConfigureRadioForRxClassC();
 800e89c:	0020      	movs	r0, r4
 800e89e:	f000 fa83 	bl	800eda8 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv>
        StateLoraWanProcess = LWPSTATE_RX2;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	e7bb      	b.n	800e81e <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xbe>
  return packet.Phy.GetRadioState();
 800e8a6:	4b73      	ldr	r3, [pc, #460]	; (800ea74 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x314>)
 800e8a8:	18e0      	adds	r0, r4, r3
 800e8aa:	f002 f955 	bl	8010b58 <_ZN14RadioContainerI6SX126xE13GetRadioStateEv>
    if(GetRadioState() == RADIOSTATE_IDLE) {
 800e8ae:	b2c6      	uxtb	r6, r0
 800e8b0:	2e00      	cmp	r6, #0
 800e8b2:	d000      	beq.n	800e8b6 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x156>
 800e8b4:	e786      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
  return packet.Phy.RegIrqFlag;
 800e8b6:	4b75      	ldr	r3, [pc, #468]	; (800ea8c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x32c>)
 800e8b8:	4f6f      	ldr	r7, [pc, #444]	; (800ea78 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x318>)
      if(GetRadioIrqFlag() == RECEIVE_PACKET_IRQ_FLAG) {
 800e8ba:	5ce3      	ldrb	r3, [r4, r3]
        InsertTrace(__COUNTER__, FileId);
 800e8bc:	0031      	movs	r1, r6
      if(GetRadioIrqFlag() == RECEIVE_PACKET_IRQ_FLAG) {
 800e8be:	2b40      	cmp	r3, #64	; 0x40
 800e8c0:	d10c      	bne.n	800e8dc <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x17c>
        InsertTrace(__COUNTER__, FileId);
 800e8c2:	2004      	movs	r0, #4
 800e8c4:	f003 f8e2 	bl	8011a8c <_Z11InsertTracehh>
        DEBUG_MSG("\n");
 800e8c8:	0039      	movs	r1, r7
 800e8ca:	0030      	movs	r0, r6
 800e8cc:	f7fb fdae 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG("  **************************\n ");
 800e8d0:	496a      	ldr	r1, [pc, #424]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
 800e8d2:	0030      	movs	r0, r6
 800e8d4:	f7fb fdaa 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" * Receive a downlink RX2 *\n ");
 800e8d8:	496f      	ldr	r1, [pc, #444]	; (800ea98 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x338>)
 800e8da:	e7bc      	b.n	800e856 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xf6>
        InsertTrace(__COUNTER__, FileId);
 800e8dc:	2005      	movs	r0, #5
 800e8de:	f003 f8d5 	bl	8011a8c <_Z11InsertTracehh>
        DEBUG_MSG("\n");
 800e8e2:	0039      	movs	r1, r7
 800e8e4:	0030      	movs	r0, r6
 800e8e6:	f7fb fda1 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG("  **************************\n ");
 800e8ea:	4964      	ldr	r1, [pc, #400]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
 800e8ec:	0030      	movs	r0, r6
 800e8ee:	f7fb fd9d 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" *      RX2 Timeout       *\n ");
 800e8f2:	496a      	ldr	r1, [pc, #424]	; (800ea9c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x33c>)
 800e8f4:	0030      	movs	r0, r6
 800e8f6:	f7fb fd99 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" **************************\n ");
 800e8fa:	4962      	ldr	r1, [pc, #392]	; (800ea84 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x324>)
 800e8fc:	0030      	movs	r0, r6
 800e8fe:	f7fb fd95 	bl	800a42c <SEGGER_RTT_WriteString>
    StateLoraWanProcess = LWPSTATE_UPDATEMAC;
 800e902:	2305      	movs	r3, #5
 800e904:	e78b      	b.n	800e81e <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xbe>
    InsertTrace(__COUNTER__, FileId);
 800e906:	2100      	movs	r1, #0
 800e908:	2006      	movs	r0, #6
 800e90a:	f003 f8bf 	bl	8011a8c <_Z11InsertTracehh>
    DEBUG_MSG("\n");
 800e90e:	495a      	ldr	r1, [pc, #360]	; (800ea78 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x318>)
 800e910:	2000      	movs	r0, #0
 800e912:	f7fb fd8b 	bl	800a42c <SEGGER_RTT_WriteString>
    DEBUG_MSG("  **************************\n ");
 800e916:	4959      	ldr	r1, [pc, #356]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
 800e918:	2000      	movs	r0, #0
 800e91a:	f7fb fd87 	bl	800a42c <SEGGER_RTT_WriteString>
    DEBUG_MSG(" * Process Downlink       *\n ");
 800e91e:	4960      	ldr	r1, [pc, #384]	; (800eaa0 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x340>)
 800e920:	2000      	movs	r0, #0
 800e922:	f7fb fd83 	bl	800a42c <SEGGER_RTT_WriteString>
    DEBUG_MSG(" **************************\n ");
 800e926:	4957      	ldr	r1, [pc, #348]	; (800ea84 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x324>)
 800e928:	2000      	movs	r0, #0
 800e92a:	f7fb fd7f 	bl	800a42c <SEGGER_RTT_WriteString>
    ValidRxPacket = packet.DecodeRxFrame();  // return NOVALIDRXPACKET or  USERRX_FOPTSPACKET or NWKRXPACKET or JOIN_ACCEPT_PACKET.
 800e92e:	0020      	movs	r0, r4
 800e930:	f001 fb24 	bl	800ff7c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv>
 800e934:	4b5b      	ldr	r3, [pc, #364]	; (800eaa4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x344>)
 800e936:	54e0      	strb	r0, [r4, r3]
 800e938:	e7e3      	b.n	800e902 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x1a2>
    InsertTrace(__COUNTER__, FileId);
 800e93a:	2100      	movs	r1, #0
 800e93c:	2007      	movs	r0, #7
 800e93e:	f003 f8a5 	bl	8011a8c <_Z11InsertTracehh>
  };
  void DetachRadioIsr(void) {
    packet.Phy.DetachIsr();
 800e942:	4b4c      	ldr	r3, [pc, #304]	; (800ea74 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x314>)
    packet.Phy.StateRadioProcess = RADIOSTATE_IDLE;
 800e944:	2600      	movs	r6, #0
 800e946:	18e0      	adds	r0, r4, r3
 800e948:	f002 f900 	bl	8010b4c <_ZN14RadioContainerI6SX126xE9DetachIsrEv>
 800e94c:	23d6      	movs	r3, #214	; 0xd6
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	50e6      	str	r6, [r4, r3]
    DEBUG_MSG("\n");
 800e952:	4949      	ldr	r1, [pc, #292]	; (800ea78 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x318>)
 800e954:	0030      	movs	r0, r6
 800e956:	f7fb fd69 	bl	800a42c <SEGGER_RTT_WriteString>
    DEBUG_MSG("  **************************\n ");
 800e95a:	4948      	ldr	r1, [pc, #288]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
 800e95c:	0030      	movs	r0, r6
 800e95e:	f7fb fd65 	bl	800a42c <SEGGER_RTT_WriteString>
    DEBUG_MSG(" *       UpdateMac        *\n ");
 800e962:	4951      	ldr	r1, [pc, #324]	; (800eaa8 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x348>)
 800e964:	0030      	movs	r0, r6
 800e966:	f7fb fd61 	bl	800a42c <SEGGER_RTT_WriteString>
    DEBUG_MSG(" **************************\n ");
 800e96a:	4946      	ldr	r1, [pc, #280]	; (800ea84 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x324>)
 800e96c:	0030      	movs	r0, r6
 800e96e:	f7fb fd5d 	bl	800a42c <SEGGER_RTT_WriteString>
    if(ValidRxPacket == JOIN_ACCEPT_PACKET) {
 800e972:	4b4c      	ldr	r3, [pc, #304]	; (800eaa4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x344>)
 800e974:	5ce2      	ldrb	r2, [r4, r3]
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	2a04      	cmp	r2, #4
 800e97a:	d107      	bne.n	800e98c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x22c>
      packet.UpdateJoinProcedure();
 800e97c:	0020      	movs	r0, r4
 800e97e:	f000 fa2d 	bl	800eddc <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv>
      packet.RegionSetDataRateDistribution(packet.AdrModeSelect); //@note because datarate Distribution has been changed during join
 800e982:	4b4a      	ldr	r3, [pc, #296]	; (800eaac <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x34c>)
 800e984:	0020      	movs	r0, r4
 800e986:	5ce1      	ldrb	r1, [r4, r3]
 800e988:	f002 fdf2 	bl	8011570 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh>
    if((ValidRxPacket == NWKRXPACKET) || (ValidRxPacket == USERRX_FOPTSPACKET)) {
 800e98c:	9b01      	ldr	r3, [sp, #4]
 800e98e:	5ce3      	ldrb	r3, [r4, r3]
 800e990:	3b02      	subs	r3, #2
 800e992:	2b01      	cmp	r3, #1
 800e994:	d802      	bhi.n	800e99c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x23c>
      packet.ParseManagementPacket();
 800e996:	0020      	movs	r0, r4
 800e998:	f001 f8ec 	bl	800fb74 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv>
    if((packet.IsFrameToSend == NWKFRAME_TOSEND) || (packet.IsFrameToSend == USRFRAME_TORETRANSMIT)) { // @note ack send during the next tx|| ( packet.IsFrameToSend == USERACK_TOSEND ) ) {
 800e99c:	2602      	movs	r6, #2
    packet.UpdateMacLayer();
 800e99e:	0020      	movs	r0, r4
 800e9a0:	f000 fbb2 	bl	800f108 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv>
    *AvailableRxPacket = packet.AvailableRxPacketForUser;
 800e9a4:	4b42      	ldr	r3, [pc, #264]	; (800eab0 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x350>)
 800e9a6:	9a00      	ldr	r2, [sp, #0]
 800e9a8:	5ce3      	ldrb	r3, [r4, r3]
 800e9aa:	7013      	strb	r3, [r2, #0]
    if((packet.IsFrameToSend == NWKFRAME_TOSEND) || (packet.IsFrameToSend == USRFRAME_TORETRANSMIT)) { // @note ack send during the next tx|| ( packet.IsFrameToSend == USERACK_TOSEND ) ) {
 800e9ac:	7923      	ldrb	r3, [r4, #4]
 800e9ae:	43b3      	bics	r3, r6
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d113      	bne.n	800e9dc <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x27c>
      packet.IsFrameToSend = NOFRAME_TOSEND;
 800e9b4:	2300      	movs	r3, #0
      RtcTargetTimer = mcu.RtcGetTimeSecond() + randr(2, 6);
 800e9b6:	0038      	movs	r0, r7
      packet.IsFrameToSend = NOFRAME_TOSEND;
 800e9b8:	7123      	strb	r3, [r4, #4]
      RtcTargetTimer = mcu.RtcGetTimeSecond() + randr(2, 6);
 800e9ba:	f7ff fb81 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 800e9be:	2106      	movs	r1, #6
 800e9c0:	0007      	movs	r7, r0
 800e9c2:	0030      	movs	r0, r6
 800e9c4:	f003 f8a2 	bl	8011b0c <_Z5randrll>
 800e9c8:	2390      	movs	r3, #144	; 0x90
 800e9ca:	19c7      	adds	r7, r0, r7
 800e9cc:	011b      	lsls	r3, r3, #4
 800e9ce:	50e7      	str	r7, [r4, r3]
      StateLoraWanProcess = LWPSTATE_TXwait;
 800e9d0:	2306      	movs	r3, #6
        StateLoraWanProcess = LWPSTATE_RX_CLASSC;
 800e9d2:	5563      	strb	r3, [r4, r5]
    ValidRxPacket = NO_MORE_VALID_RX_PACKET;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	9a01      	ldr	r2, [sp, #4]
 800e9d8:	54a3      	strb	r3, [r4, r2]
    break;
 800e9da:	e6f3      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
      RadioReset();
 800e9dc:	0020      	movs	r0, r4
 800e9de:	f7ff fe69 	bl	800e6b4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE10RadioResetEv>
      if((ClassCActivated == CLASS_C_NOT_ACTIVATED) || (*AvailableRxPacket != NO_LORA_RXPACKET_AVAILABLE)) {
 800e9e2:	4b29      	ldr	r3, [pc, #164]	; (800ea88 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x328>)
 800e9e4:	5ce3      	ldrb	r3, [r4, r3]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d003      	beq.n	800e9f2 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x292>
 800e9ea:	9b00      	ldr	r3, [sp, #0]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x296>
        StateLoraWanProcess = LWPSTATE_IDLE;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	e7ed      	b.n	800e9d2 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x272>
        packet.Phy.StateRadioProcess = RADIOSTATE_RXC;
 800e9f6:	23d6      	movs	r3, #214	; 0xd6
 800e9f8:	2204      	movs	r2, #4
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	50e2      	str	r2, [r4, r3]
        packet.ConfigureRadioForRxClassC();
 800e9fe:	0020      	movs	r0, r4
 800ea00:	f000 f9d2 	bl	800eda8 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv>
        StateLoraWanProcess = LWPSTATE_RX_CLASSC;
 800ea04:	2308      	movs	r3, #8
 800ea06:	e7e4      	b.n	800e9d2 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x272>
    InsertTrace(__COUNTER__, FileId);
 800ea08:	2100      	movs	r1, #0
 800ea0a:	2008      	movs	r0, #8
 800ea0c:	f003 f83e 	bl	8011a8c <_Z11InsertTracehh>
    DEBUG_MSG(".");
 800ea10:	4928      	ldr	r1, [pc, #160]	; (800eab4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x354>)
 800ea12:	2000      	movs	r0, #0
 800ea14:	f7fb fd0a 	bl	800a42c <SEGGER_RTT_WriteString>
    if(mcu.RtcGetTimeSecond() > RtcTargetTimer) {
 800ea18:	0038      	movs	r0, r7
 800ea1a:	f7ff fb51 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 800ea1e:	2390      	movs	r3, #144	; 0x90
 800ea20:	011b      	lsls	r3, r3, #4
 800ea22:	58e3      	ldr	r3, [r4, r3]
 800ea24:	4298      	cmp	r0, r3
 800ea26:	d800      	bhi.n	800ea2a <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x2ca>
 800ea28:	e6cc      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
      StateLoraWanProcess = LWPSTATE_SEND; //@note the frame have already been prepare in Upadate Mac Layer
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e6f7      	b.n	800e81e <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xbe>
  return packet.Phy.GetRadioState();
 800ea2e:	4b11      	ldr	r3, [pc, #68]	; (800ea74 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x314>)
 800ea30:	18e0      	adds	r0, r4, r3
 800ea32:	f002 f891 	bl	8010b58 <_ZN14RadioContainerI6SX126xE13GetRadioStateEv>
    if(GetRadioState() == RADIOSTATE_IDLE) {
 800ea36:	b2c6      	uxtb	r6, r0
 800ea38:	2e00      	cmp	r6, #0
 800ea3a:	d000      	beq.n	800ea3e <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x2de>
 800ea3c:	e6c2      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
  return packet.Phy.RegIrqFlag;
 800ea3e:	4b13      	ldr	r3, [pc, #76]	; (800ea8c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x32c>)
      if(GetRadioIrqFlag() == RECEIVE_PACKET_IRQ_FLAG) {
 800ea40:	5ce3      	ldrb	r3, [r4, r3]
 800ea42:	2b40      	cmp	r3, #64	; 0x40
 800ea44:	d000      	beq.n	800ea48 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x2e8>
 800ea46:	e6bd      	b.n	800e7c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x64>
        DEBUG_MSG("\n");
 800ea48:	490b      	ldr	r1, [pc, #44]	; (800ea78 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x318>)
 800ea4a:	0030      	movs	r0, r6
 800ea4c:	f7fb fcee 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG("  **************************\n ");
 800ea50:	490a      	ldr	r1, [pc, #40]	; (800ea7c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x31c>)
 800ea52:	0030      	movs	r0, r6
 800ea54:	f7fb fcea 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_MSG(" * Receive a downlink RXC  *\n ");
 800ea58:	4917      	ldr	r1, [pc, #92]	; (800eab8 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x358>)
 800ea5a:	e6fc      	b.n	800e856 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0xf6>
    InsertTrace(__COUNTER__, FileId);
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	2009      	movs	r0, #9
 800ea60:	f003 f814 	bl	8011a8c <_Z11InsertTracehh>
    DEBUG_MSG(" Illegal state in lorawan process\n ");
 800ea64:	4915      	ldr	r1, [pc, #84]	; (800eabc <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x35c>)
 800ea66:	e6c6      	b.n	800e7f6 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh+0x96>
 800ea68:	20001988 	.word	0x20001988
 800ea6c:	000008f4 	.word	0x000008f4
 800ea70:	08017c65 	.word	0x08017c65
 800ea74:	0000048c 	.word	0x0000048c
 800ea78:	08018070 	.word	0x08018070
 800ea7c:	08017c84 	.word	0x08017c84
 800ea80:	08017ca3 	.word	0x08017ca3
 800ea84:	08017c85 	.word	0x08017c85
 800ea88:	000008fc 	.word	0x000008fc
 800ea8c:	000006ac 	.word	0x000006ac
 800ea90:	08017cc1 	.word	0x08017cc1
 800ea94:	08017cdf 	.word	0x08017cdf
 800ea98:	08017cfd 	.word	0x08017cfd
 800ea9c:	08017d1b 	.word	0x08017d1b
 800eaa0:	08017d39 	.word	0x08017d39
 800eaa4:	000008fd 	.word	0x000008fd
 800eaa8:	08017d57 	.word	0x08017d57
 800eaac:	0000047a 	.word	0x0000047a
 800eab0:	00000266 	.word	0x00000266
 800eab4:	08017d75 	.word	0x08017d75
 800eab8:	08017d77 	.word	0x08017d77
 800eabc:	08017d96 	.word	0x08017d96

0800eac0 <_ZN16LoraWanContainerILi16E6SX126xE19CallbackIsrTimerRx1EPv>:

  /* Timer */

  void         IsrTimerRx1(void);
  void         IsrTimerRx2(void);
  static void  CallbackIsrTimerRx1(void *obj) {
 800eac0:	b510      	push	{r4, lr}
    (reinterpret_cast<LoraWanContainer<NBCHANNEL, R>*>(obj))->IsrTimerRx1();
 800eac2:	f002 ffbd 	bl	8011a40 <_ZN16LoraWanContainerILi16E6SX126xE11IsrTimerRx1Ev>
  };
 800eac6:	bd10      	pop	{r4, pc}

0800eac8 <_ZN16LoraWanContainerILi16E6SX126xE19CallbackIsrTimerRx2EPv>:
  static void  CallbackIsrTimerRx2(void *obj) {
 800eac8:	b510      	push	{r4, lr}
    (reinterpret_cast<LoraWanContainer<NBCHANNEL, R>*>(obj))->IsrTimerRx2();
 800eaca:	f002 ffcc 	bl	8011a66 <_ZN16LoraWanContainerILi16E6SX126xE11IsrTimerRx2Ev>
  };
 800eace:	bd10      	pop	{r4, pc}

0800ead0 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m>:
template class LoraWanContainer <16, SX126x>;
template class LoraWanContainer <16, SX1272>;
template class LoraWanContainer <72, SX1272>;
template class LoraWanContainer <72, SX1276>;
template class LoraWanContainer <72, SX126x>;
template <int NBCHANNEL, class R> LoraWanContainer<NBCHANNEL, R>::LoraWanContainer(sLoRaWanKeys LoRaWanKeys, R *RadioUser, uint32_t FlashAdress): Phy(RadioUser) {
 800ead0:	b084      	sub	sp, #16
 800ead2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ead4:	0004      	movs	r4, r0
 800ead6:	0008      	movs	r0, r1
 800ead8:	930b      	str	r3, [sp, #44]	; 0x2c
 800eada:	4b4f      	ldr	r3, [pc, #316]	; (800ec18 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x148>)
 800eadc:	9109      	str	r1, [sp, #36]	; 0x24
 800eade:	6023      	str	r3, [r4, #0]
 800eae0:	4b4e      	ldr	r3, [pc, #312]	; (800ec1c <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x14c>)
 800eae2:	9000      	str	r0, [sp, #0]
 800eae4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eae6:	18e0      	adds	r0, r4, r3
 800eae8:	920a      	str	r2, [sp, #40]	; 0x28
 800eaea:	9201      	str	r2, [sp, #4]
 800eaec:	f001 ff9a 	bl	8010a24 <_ZN14RadioContainerI6SX126xEC1EPS0_>
  StateTimer = TIMERSTATE_SLEEP;
 800eaf0:	23db      	movs	r3, #219	; 0xdb
 800eaf2:	2500      	movs	r5, #0
  AvailableRxPacketForUser = NO_LORA_RXPACKET_AVAILABLE;
  memcpy(appSKey, LoRaWanKeys.LoRaMacAppSKey, 16);
 800eaf4:	2710      	movs	r7, #16
 800eaf6:	0020      	movs	r0, r4
  StateTimer = TIMERSTATE_SLEEP;
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	50e5      	str	r5, [r4, r3]
  AvailableRxPacketForUser = NO_LORA_RXPACKET_AVAILABLE;
 800eafc:	4b48      	ldr	r3, [pc, #288]	; (800ec20 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x150>)
  memcpy(appSKey, LoRaWanKeys.LoRaMacAppSKey, 16);
 800eafe:	003a      	movs	r2, r7
  AvailableRxPacketForUser = NO_LORA_RXPACKET_AVAILABLE;
 800eb00:	54e5      	strb	r5, [r4, r3]
  memcpy(appSKey, LoRaWanKeys.LoRaMacAppSKey, 16);
 800eb02:	9901      	ldr	r1, [sp, #4]
 800eb04:	30e8      	adds	r0, #232	; 0xe8
 800eb06:	f006 fde0 	bl	80156ca <memcpy>
  memcpy(nwkSKey, LoRaWanKeys.LoRaMacNwkSKey, 16);
 800eb0a:	0020      	movs	r0, r4
 800eb0c:	003a      	movs	r2, r7
 800eb0e:	9900      	ldr	r1, [sp, #0]
 800eb10:	30d8      	adds	r0, #216	; 0xd8
 800eb12:	f006 fdda 	bl	80156ca <memcpy>
  memcpy(appKey, LoRaWanKeys.LoRaMacAppKey, 16);
 800eb16:	0020      	movs	r0, r4
template <int NBCHANNEL, class R> LoraWanContainer<NBCHANNEL, R>::LoraWanContainer(sLoRaWanKeys LoRaWanKeys, R *RadioUser, uint32_t FlashAdress): Phy(RadioUser) {
 800eb18:	ae09      	add	r6, sp, #36	; 0x24
  memcpy(appKey, LoRaWanKeys.LoRaMacAppKey, 16);
 800eb1a:	003a      	movs	r2, r7
 800eb1c:	68b1      	ldr	r1, [r6, #8]
 800eb1e:	30f8      	adds	r0, #248	; 0xf8
 800eb20:	f006 fdd3 	bl	80156ca <memcpy>
  memcpy(devEui, LoRaWanKeys.DevEui, 8);
 800eb24:	0020      	movs	r0, r4
 800eb26:	3009      	adds	r0, #9
 800eb28:	6931      	ldr	r1, [r6, #16]
 800eb2a:	2208      	movs	r2, #8
 800eb2c:	30ff      	adds	r0, #255	; 0xff
 800eb2e:	f006 fdcc 	bl	80156ca <memcpy>
  memcpy(appEui, LoRaWanKeys.AppEui, 8);
 800eb32:	0020      	movs	r0, r4
 800eb34:	3011      	adds	r0, #17
 800eb36:	68f1      	ldr	r1, [r6, #12]
 800eb38:	2208      	movs	r2, #8
 800eb3a:	30ff      	adds	r0, #255	; 0xff
 800eb3c:	f006 fdc5 	bl	80156ca <memcpy>
  otaDevice              = LoRaWanKeys.OtaDevice;
 800eb40:	7e33      	ldrb	r3, [r6, #24]
  FcntUp                 = 0;
  FcntDwn                = 0xFFFFFFFF;
 800eb42:	2101      	movs	r1, #1
  otaDevice              = LoRaWanKeys.OtaDevice;
 800eb44:	1e5a      	subs	r2, r3, #1
 800eb46:	4193      	sbcs	r3, r2
 800eb48:	0022      	movs	r2, r4
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	32ff      	adds	r2, #255	; 0xff
 800eb4e:	7653      	strb	r3, [r2, #25]
  FcntDwn                = 0xFFFFFFFF;
 800eb50:	4249      	negs	r1, r1
  FcntUp                 = 0;
 800eb52:	3a33      	subs	r2, #51	; 0x33
  FcntDwn                = 0xFFFFFFFF;
 800eb54:	6051      	str	r1, [r2, #4]
    return (status);
  }
  return (status);
};
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::SetDevAddr(uint32_t address) {
  DevAddr        = address;
 800eb56:	0021      	movs	r1, r4
  FcntUp                 = 0;
 800eb58:	6015      	str	r5, [r2, #0]
  SetDevAddr(LoRaWanKeys.LoRaDevAddr);
 800eb5a:	6972      	ldr	r2, [r6, #20]
  DevAddr        = address;
 800eb5c:	31d4      	adds	r1, #212	; 0xd4
 800eb5e:	600a      	str	r2, [r1, #0]
  Phy.DevAddrIsr = address;
 800eb60:	4930      	ldr	r1, [pc, #192]	; (800ec24 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x154>)
  UserFlashAdress        = FlashAdress;
 800eb62:	9811      	ldr	r0, [sp, #68]	; 0x44
  Phy.DevAddrIsr = address;
 800eb64:	5062      	str	r2, [r4, r1]
  AdrAckCnt              = 0;
 800eb66:	4a30      	ldr	r2, [pc, #192]	; (800ec28 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x158>)
  RtcNextTimeJoinSecond  = 0;
 800eb68:	4930      	ldr	r1, [pc, #192]	; (800ec2c <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x15c>)
  AdrAckCnt              = 0;
 800eb6a:	50a5      	str	r5, [r4, r2]
  AdrAckReq              = 0;
 800eb6c:	320c      	adds	r2, #12
 800eb6e:	54a5      	strb	r5, [r4, r2]
  MacNbTrans             = 1;
 800eb70:	2201      	movs	r2, #1
  IsFrameToSend          = NOFRAME_TOSEND;
 800eb72:	7125      	strb	r5, [r4, #4]
  MacNbTrans             = 1;
 800eb74:	7322      	strb	r2, [r4, #12]
  RtcNextTimeJoinSecond  = 0;
 800eb76:	5065      	str	r5, [r4, r1]
  RetryJoinCpt           = 0;
 800eb78:	3104      	adds	r1, #4
 800eb7a:	5065      	str	r5, [r4, r1]
  FoptsTxLength          = 0;
 800eb7c:	2190      	movs	r1, #144	; 0x90
 800eb7e:	0049      	lsls	r1, r1, #1
 800eb80:	5465      	strb	r5, [r4, r1]
  FoptsTxLengthCurrent   = 0;
 800eb82:	3120      	adds	r1, #32
 800eb84:	5465      	strb	r5, [r4, r1]
  FoptsTxLengthSticky    = 0;
 800eb86:	3910      	subs	r1, #16
 800eb88:	5465      	strb	r5, [r4, r1]
  FirstDwn               = true;
 800eb8a:	4929      	ldr	r1, [pc, #164]	; (800ec30 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x160>)
 800eb8c:	5462      	strb	r2, [r4, r1]
  Phy.JoinedStatus       = (otaDevice == APB_DEVICE) ? JOINED : NOT_JOINED;
 800eb8e:	4a29      	ldr	r2, [pc, #164]	; (800ec34 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x164>)
  memcpy(appSKeyClassCG0, LoRaWanKeys.LoRaMacAppSKey, 16);
 800eb90:	9901      	ldr	r1, [sp, #4]
  Phy.JoinedStatus       = (otaDevice == APB_DEVICE) ? JOINED : NOT_JOINED;
 800eb92:	54a3      	strb	r3, [r4, r2]
  UserFlashAdress        = FlashAdress;
 800eb94:	23e7      	movs	r3, #231	; 0xe7
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	50e0      	str	r0, [r4, r3]
  MacNwkPayloadSize      = 0;
 800eb9a:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x168>)
  ClassCG1Enable         = CLASS_CG1_DISABLE;
 800eb9c:	4a27      	ldr	r2, [pc, #156]	; (800ec3c <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x16c>)
  MacNwkPayloadSize      = 0;
 800eb9e:	54e5      	strb	r5, [r4, r3]
  ClassCG0Enable         = CLASS_CG0_ENABLE;
 800eba0:	4b27      	ldr	r3, [pc, #156]	; (800ec40 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x170>)
 800eba2:	54e5      	strb	r5, [r4, r3]
  ClassCG1Enable         = CLASS_CG1_DISABLE;
 800eba4:	2303      	movs	r3, #3
 800eba6:	54a3      	strb	r3, [r4, r2]
  Phy.ClassCG0EnableIsr  = ClassCG0Enable;
 800eba8:	3a45      	subs	r2, #69	; 0x45
 800ebaa:	54a5      	strb	r5, [r4, r2]
  Phy.ClassCG1EnableIsr  = ClassCG1Enable;
 800ebac:	4a25      	ldr	r2, [pc, #148]	; (800ec44 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x174>)
 800ebae:	54a3      	strb	r3, [r4, r2]
  DevAddrClassCG0        = 0x11223344;
 800ebb0:	4b25      	ldr	r3, [pc, #148]	; (800ec48 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x178>)
 800ebb2:	3247      	adds	r2, #71	; 0x47
 800ebb4:	50a3      	str	r3, [r4, r2]
  Phy.DevAddrClassCG0Isr = DevAddrClassCG0;
 800ebb6:	4a25      	ldr	r2, [pc, #148]	; (800ec4c <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x17c>)
 800ebb8:	50a3      	str	r3, [r4, r2]
  DevAddrClassCG1        = 0x0;
 800ebba:	4a25      	ldr	r2, [pc, #148]	; (800ec50 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x180>)
 800ebbc:	50a5      	str	r5, [r4, r2]
  Phy.DevAddrClassCG1Isr = DevAddrClassCG0;
 800ebbe:	3a44      	subs	r2, #68	; 0x44
 800ebc0:	50a3      	str	r3, [r4, r2]
  memcpy(appSKeyClassCG0, LoRaWanKeys.LoRaMacAppSKey, 16);
 800ebc2:	23e1      	movs	r3, #225	; 0xe1
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	003a      	movs	r2, r7
 800ebc8:	18e0      	adds	r0, r4, r3
 800ebca:	f006 fd7e 	bl	80156ca <memcpy>
  memcpy(nwkSKeyClassCG0, LoRaWanKeys.LoRaMacNwkSKey, 16);
 800ebce:	23df      	movs	r3, #223	; 0xdf
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	003a      	movs	r2, r7
 800ebd4:	9900      	ldr	r1, [sp, #0]
 800ebd6:	18e0      	adds	r0, r4, r3
 800ebd8:	f006 fd77 	bl	80156ca <memcpy>
  memset(nwkSKeyClassCG1, 0, 16);
 800ebdc:	23e3      	movs	r3, #227	; 0xe3
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	003a      	movs	r2, r7
 800ebe2:	0029      	movs	r1, r5
 800ebe4:	18e0      	adds	r0, r4, r3
 800ebe6:	f006 fd79 	bl	80156dc <memset>
  memset(appSKeyClassCG1, 0, 16);
 800ebea:	23e5      	movs	r3, #229	; 0xe5
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	003a      	movs	r2, r7
 800ebf0:	0029      	movs	r1, r5
 800ebf2:	18e0      	adds	r0, r4, r3
 800ebf4:	f006 fd72 	bl	80156dc <memset>
  FcntDwnClassCG0         = 0xFFFFFFFF;
 800ebf8:	23de      	movs	r3, #222	; 0xde
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	4252      	negs	r2, r2
 800ec00:	50e2      	str	r2, [r4, r3]
  FcntDwnClassCG1         = 0xFFFFFFFF;
 800ec02:	4b14      	ldr	r3, [pc, #80]	; (800ec54 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x184>)
};
 800ec04:	0020      	movs	r0, r4
  FcntDwnClassCG1         = 0xFFFFFFFF;
 800ec06:	50e2      	str	r2, [r4, r3]
  MacTxModulationCurrent  = LORA;
 800ec08:	4b13      	ldr	r3, [pc, #76]	; (800ec58 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x188>)
 800ec0a:	54e5      	strb	r5, [r4, r3]
  MacRx2ModulationTypeCurrent = LORA;
 800ec0c:	4b13      	ldr	r3, [pc, #76]	; (800ec5c <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m+0x18c>)
 800ec0e:	54e5      	strb	r5, [r4, r3]
};
 800ec10:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
 800ec12:	bc08      	pop	{r3}
 800ec14:	b004      	add	sp, #16
 800ec16:	4718      	bx	r3
 800ec18:	08017e1c 	.word	0x08017e1c
 800ec1c:	0000048c 	.word	0x0000048c
 800ec20:	00000266 	.word	0x00000266
 800ec24:	0000069c 	.word	0x0000069c
 800ec28:	0000047c 	.word	0x0000047c
 800ec2c:	000006dc 	.word	0x000006dc
 800ec30:	000008ce 	.word	0x000008ce
 800ec34:	000006ad 	.word	0x000006ad
 800ec38:	00000379 	.word	0x00000379
 800ec3c:	000006e5 	.word	0x000006e5
 800ec40:	000006e4 	.word	0x000006e4
 800ec44:	000006a1 	.word	0x000006a1
 800ec48:	11223344 	.word	0x11223344
 800ec4c:	000006a4 	.word	0x000006a4
 800ec50:	000006ec 	.word	0x000006ec
 800ec54:	000006f4 	.word	0x000006f4
 800ec58:	0000073d 	.word	0x0000073d
 800ec5c:	0000073e 	.word	0x0000073e

0800ec60 <_ZN16LoraWanContainerILi16E6SX126xE14EncryptTxFrameEv>:
  LoRaMacPayloadEncrypt(&Phy.TxPhyPayload[FHDROFFSET + FoptsTxLengthCurrent], UserPayloadSize, (fPort == PORTNWK) ? nwkSKey : appSKey, DevAddr, UP_LINK, FcntUp, &Phy.TxPhyPayload[FHDROFFSET + FoptsTxLengthCurrent]);
 800ec60:	23a0      	movs	r3, #160	; 0xa0
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::EncryptTxFrame(void) {
 800ec62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec64:	0004      	movs	r4, r0
  LoRaMacPayloadEncrypt(&Phy.TxPhyPayload[FHDROFFSET + FoptsTxLengthCurrent], UserPayloadSize, (fPort == PORTNWK) ? nwkSKey : appSKey, DevAddr, UP_LINK, FcntUp, &Phy.TxPhyPayload[FHDROFFSET + FoptsTxLengthCurrent]);
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	5cc0      	ldrb	r0, [r0, r3]
 800ec6a:	4b16      	ldr	r3, [pc, #88]	; (800ecc4 <_ZN16LoraWanContainerILi16E6SX126xE14EncryptTxFrameEv+0x64>)
 800ec6c:	0022      	movs	r2, r4
 800ec6e:	18c0      	adds	r0, r0, r3
 800ec70:	0023      	movs	r3, r4
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::EncryptTxFrame(void) {
 800ec72:	b087      	sub	sp, #28
  LoRaMacPayloadEncrypt(&Phy.TxPhyPayload[FHDROFFSET + FoptsTxLengthCurrent], UserPayloadSize, (fPort == PORTNWK) ? nwkSKey : appSKey, DevAddr, UP_LINK, FcntUp, &Phy.TxPhyPayload[FHDROFFSET + FoptsTxLengthCurrent]);
 800ec74:	33ff      	adds	r3, #255	; 0xff
 800ec76:	32d8      	adds	r2, #216	; 0xd8
 800ec78:	7fd9      	ldrb	r1, [r3, #31]
 800ec7a:	9205      	str	r2, [sp, #20]
 800ec7c:	7e9b      	ldrb	r3, [r3, #26]
 800ec7e:	1820      	adds	r0, r4, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d000      	beq.n	800ec86 <_ZN16LoraWanContainerILi16E6SX126xE14EncryptTxFrameEv+0x26>
 800ec84:	3210      	adds	r2, #16
 800ec86:	0027      	movs	r7, r4
 800ec88:	9002      	str	r0, [sp, #8]
 800ec8a:	37cc      	adds	r7, #204	; 0xcc
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	0026      	movs	r6, r4
 800ec90:	9301      	str	r3, [sp, #4]
 800ec92:	2300      	movs	r3, #0
 800ec94:	36d4      	adds	r6, #212	; 0xd4
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	6833      	ldr	r3, [r6, #0]
 800ec9a:	f7ff faef 	bl	800e27c <_Z21LoRaMacPayloadEncryptPKhtS0_mhmPh>
  LoRaMacComputeAndAddMic(&Phy.TxPhyPayload[0], MacPayloadSize, nwkSKey, DevAddr, UP_LINK, FcntUp);
 800ec9e:	2292      	movs	r2, #146	; 0x92
 800eca0:	2300      	movs	r3, #0
 800eca2:	2520      	movs	r5, #32
 800eca4:	00d2      	lsls	r2, r2, #3
 800eca6:	18a0      	adds	r0, r4, r2
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	35ff      	adds	r5, #255	; 0xff
 800ecac:	9201      	str	r2, [sp, #4]
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	6833      	ldr	r3, [r6, #0]
 800ecb2:	5d61      	ldrb	r1, [r4, r5]
 800ecb4:	9a05      	ldr	r2, [sp, #20]
 800ecb6:	f7ff fc0f 	bl	800e4d8 <_Z23LoRaMacComputeAndAddMicPhtPKhmhm>
  MacPayloadSize = MacPayloadSize + 4;
 800ecba:	5d63      	ldrb	r3, [r4, r5]
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	5563      	strb	r3, [r4, r5]
};
 800ecc0:	b007      	add	sp, #28
 800ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc4:	00000499 	.word	0x00000499

0800ecc8 <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ConfigureRadioAndSend(void) {
 800ecc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecca:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800eccc:	2102      	movs	r1, #2
 800ecce:	2001      	movs	r0, #1
 800ecd0:	f002 fedc 	bl	8011a8c <_Z11InsertTracehh>
  RegionGiveNextChannel();
 800ecd4:	6823      	ldr	r3, [r4, #0]
 800ecd6:	0020      	movs	r0, r4
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4798      	blx	r3
  Phy.Send(MacTxModulationCurrent, MacTxFrequencyCurrent, MacTxPower, MacTxSfCurrent, MacTxBwCurrent, MacPayloadSize);
 800ecdc:	4a0c      	ldr	r2, [pc, #48]	; (800ed10 <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv+0x48>)
 800ecde:	7a23      	ldrb	r3, [r4, #8]
 800ece0:	5ca1      	ldrb	r1, [r4, r2]
 800ece2:	4a0c      	ldr	r2, [pc, #48]	; (800ed14 <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv+0x4c>)
 800ece4:	18a0      	adds	r0, r4, r2
 800ece6:	2220      	movs	r2, #32
 800ece8:	32ff      	adds	r2, #255	; 0xff
 800ecea:	5ca2      	ldrb	r2, [r4, r2]
 800ecec:	9202      	str	r2, [sp, #8]
 800ecee:	4a0a      	ldr	r2, [pc, #40]	; (800ed18 <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv+0x50>)
 800ecf0:	5ca2      	ldrb	r2, [r4, r2]
 800ecf2:	9201      	str	r2, [sp, #4]
 800ecf4:	4a09      	ldr	r2, [pc, #36]	; (800ed1c <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv+0x54>)
 800ecf6:	5ca2      	ldrb	r2, [r4, r2]
 800ecf8:	9200      	str	r2, [sp, #0]
 800ecfa:	22e8      	movs	r2, #232	; 0xe8
 800ecfc:	00d2      	lsls	r2, r2, #3
 800ecfe:	58a2      	ldr	r2, [r4, r2]
 800ed00:	f001 feae 	bl	8010a60 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht>
  AdrAckCnt++; // increment adr counter each uplink frame;
 800ed04:	4a06      	ldr	r2, [pc, #24]	; (800ed20 <_ZN16LoraWanContainerILi16E6SX126xE21ConfigureRadioAndSendEv+0x58>)
 800ed06:	58a3      	ldr	r3, [r4, r2]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	50a3      	str	r3, [r4, r2]
};
 800ed0c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800ed0e:	46c0      	nop			; (mov r8, r8)
 800ed10:	0000073d 	.word	0x0000073d
 800ed14:	0000048c 	.word	0x0000048c
 800ed18:	0000073f 	.word	0x0000073f
 800ed1c:	0000073c 	.word	0x0000073c
 800ed20:	0000047c 	.word	0x0000047c

0800ed24 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ConfigureRadioForRx1(void) {
 800ed24:	b513      	push	{r0, r1, r4, lr}
  InsertTrace(__COUNTER__, FileId);
 800ed26:	2102      	movs	r1, #2
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ConfigureRadioForRx1(void) {
 800ed28:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800ed2a:	0008      	movs	r0, r1
 800ed2c:	f002 feae 	bl	8011a8c <_Z11InsertTracehh>
  Phy.SetRxConfig(MacTxModulationCurrent, MacRx1FrequencyCurrent, MacRx1SfCurrent, MacRx1BwCurrent, MacRxWindowMs);
 800ed30:	23e9      	movs	r3, #233	; 0xe9
 800ed32:	4a08      	ldr	r2, [pc, #32]	; (800ed54 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev+0x30>)
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	5ca1      	ldrb	r1, [r4, r2]
 800ed38:	4a07      	ldr	r2, [pc, #28]	; (800ed58 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev+0x34>)
 800ed3a:	5ce3      	ldrb	r3, [r4, r3]
 800ed3c:	18a0      	adds	r0, r4, r2
 800ed3e:	4a07      	ldr	r2, [pc, #28]	; (800ed5c <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev+0x38>)
 800ed40:	58a2      	ldr	r2, [r4, r2]
 800ed42:	9201      	str	r2, [sp, #4]
 800ed44:	4a06      	ldr	r2, [pc, #24]	; (800ed60 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev+0x3c>)
 800ed46:	5ca2      	ldrb	r2, [r4, r2]
 800ed48:	9200      	str	r2, [sp, #0]
 800ed4a:	4a06      	ldr	r2, [pc, #24]	; (800ed64 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev+0x40>)
 800ed4c:	58a2      	ldr	r2, [r4, r2]
 800ed4e:	f001 ff0d 	bl	8010b6c <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm>
};
 800ed52:	bd13      	pop	{r0, r1, r4, pc}
 800ed54:	0000073d 	.word	0x0000073d
 800ed58:	0000048c 	.word	0x0000048c
 800ed5c:	000008d8 	.word	0x000008d8
 800ed60:	00000749 	.word	0x00000749
 800ed64:	00000744 	.word	0x00000744

0800ed68 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ConfigureRadioForRx2(void) {
 800ed68:	b513      	push	{r0, r1, r4, lr}
 800ed6a:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800ed6c:	2102      	movs	r1, #2
 800ed6e:	2003      	movs	r0, #3
 800ed70:	f002 fe8c 	bl	8011a8c <_Z11InsertTracehh>
  Phy.SetRxConfig(MacRx2ModulationTypeCurrent, MacRx2Frequency, MacRx2SfCurrent, MacRx2BwCurrent, MacRxWindowMs);
 800ed74:	4a07      	ldr	r2, [pc, #28]	; (800ed94 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev+0x2c>)
 800ed76:	4b08      	ldr	r3, [pc, #32]	; (800ed98 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev+0x30>)
 800ed78:	5ca1      	ldrb	r1, [r4, r2]
 800ed7a:	4a08      	ldr	r2, [pc, #32]	; (800ed9c <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev+0x34>)
 800ed7c:	5ce3      	ldrb	r3, [r4, r3]
 800ed7e:	18a0      	adds	r0, r4, r2
 800ed80:	4a07      	ldr	r2, [pc, #28]	; (800eda0 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev+0x38>)
 800ed82:	58a2      	ldr	r2, [r4, r2]
 800ed84:	9201      	str	r2, [sp, #4]
 800ed86:	4a07      	ldr	r2, [pc, #28]	; (800eda4 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev+0x3c>)
 800ed88:	5ca2      	ldrb	r2, [r4, r2]
 800ed8a:	9200      	str	r2, [sp, #0]
 800ed8c:	6922      	ldr	r2, [r4, #16]
 800ed8e:	f001 feed 	bl	8010b6c <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm>
};
 800ed92:	bd13      	pop	{r0, r1, r4, pc}
 800ed94:	0000073e 	.word	0x0000073e
 800ed98:	0000074a 	.word	0x0000074a
 800ed9c:	0000048c 	.word	0x0000048c
 800eda0:	000008d8 	.word	0x000008d8
 800eda4:	0000074b 	.word	0x0000074b

0800eda8 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ConfigureRadioForRxClassC(void) {
 800eda8:	b507      	push	{r0, r1, r2, lr}
 800edaa:	0002      	movs	r2, r0
  Phy.SetRxConfig(LORA, MacRx2Frequency, MacRx2SfCurrent - 5, MacRx2BwCurrent, 10000);
 800edac:	4907      	ldr	r1, [pc, #28]	; (800edcc <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv+0x24>)
 800edae:	4b08      	ldr	r3, [pc, #32]	; (800edd0 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv+0x28>)
 800edb0:	5cc3      	ldrb	r3, [r0, r3]
 800edb2:	1840      	adds	r0, r0, r1
 800edb4:	4907      	ldr	r1, [pc, #28]	; (800edd4 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv+0x2c>)
 800edb6:	3b05      	subs	r3, #5
 800edb8:	9101      	str	r1, [sp, #4]
 800edba:	4907      	ldr	r1, [pc, #28]	; (800edd8 <_ZN16LoraWanContainerILi16E6SX126xE25ConfigureRadioForRxClassCEv+0x30>)
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	5c51      	ldrb	r1, [r2, r1]
 800edc0:	9100      	str	r1, [sp, #0]
 800edc2:	6912      	ldr	r2, [r2, #16]
 800edc4:	2100      	movs	r1, #0
 800edc6:	f001 fed1 	bl	8010b6c <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm>
};
 800edca:	bd07      	pop	{r0, r1, r2, pc}
 800edcc:	0000048c 	.word	0x0000048c
 800edd0:	0000074a 	.word	0x0000074a
 800edd4:	00002710 	.word	0x00002710
 800edd8:	0000074b 	.word	0x0000074b

0800eddc <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::UpdateJoinProcedure(void) { // @note tbd add valid test
 800eddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edde:	0004      	movs	r4, r0
 800ede0:	b085      	sub	sp, #20
  InsertTrace(__COUNTER__, FileId);
 800ede2:	2102      	movs	r1, #2
 800ede4:	2012      	movs	r0, #18
 800ede6:	f002 fe51 	bl	8011a8c <_Z11InsertTracehh>
  memcpy(AppNonce, &MacRxPayload[1], 6);
 800edea:	0021      	movs	r1, r4
 800edec:	3169      	adds	r1, #105	; 0x69
 800edee:	31ff      	adds	r1, #255	; 0xff
 800edf0:	2206      	movs	r2, #6
 800edf2:	a802      	add	r0, sp, #8
 800edf4:	f006 fc69 	bl	80156ca <memcpy>
  LoRaMacJoinComputeSKeys(appKey, AppNonce, DevNonce, nwkSKey, appSKey);
 800edf8:	229a      	movs	r2, #154	; 0x9a
 800edfa:	0021      	movs	r1, r4
 800edfc:	0023      	movs	r3, r4
 800edfe:	0020      	movs	r0, r4
 800ee00:	31e8      	adds	r1, #232	; 0xe8
 800ee02:	0092      	lsls	r2, r2, #2
 800ee04:	33d8      	adds	r3, #216	; 0xd8
 800ee06:	9100      	str	r1, [sp, #0]
 800ee08:	5aa2      	ldrh	r2, [r4, r2]
 800ee0a:	30f8      	adds	r0, #248	; 0xf8
 800ee0c:	a902      	add	r1, sp, #8
 800ee0e:	f7ff fb13 	bl	800e438 <_Z23LoRaMacJoinComputeSKeysPKhS0_tPhS1_>
  if(MacRxPayloadSize > 13) { // cflist are presents
 800ee12:	23b3      	movs	r3, #179	; 0xb3
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	5ce3      	ldrb	r3, [r4, r3]
 800ee18:	2b0d      	cmp	r3, #13
 800ee1a:	d910      	bls.n	800ee3e <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x62>
 800ee1c:	0023      	movs	r3, r4
 800ee1e:	0022      	movs	r2, r4
 800ee20:	3375      	adds	r3, #117	; 0x75
 800ee22:	3285      	adds	r2, #133	; 0x85
 800ee24:	33ff      	adds	r3, #255	; 0xff
 800ee26:	32ff      	adds	r2, #255	; 0xff
      CFList[i] = MacRxPayload[13 + i];
 800ee28:	0019      	movs	r1, r3
 800ee2a:	7818      	ldrb	r0, [r3, #0]
 800ee2c:	31f6      	adds	r1, #246	; 0xf6
 800ee2e:	3301      	adds	r3, #1
 800ee30:	7008      	strb	r0, [r1, #0]
    for(i = 0; i < 16; i++) {
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d1f8      	bne.n	800ee28 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x4c>
    RegionGetCFList();
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	0020      	movs	r0, r4
 800ee3a:	695b      	ldr	r3, [r3, #20]
 800ee3c:	4798      	blx	r3
  SetDevAddr(MacRxPayload[7] + (MacRxPayload[8] << 8) + (MacRxPayload[9] << 16) + (MacRxPayload[10] << 24));
 800ee3e:	2370      	movs	r3, #112	; 0x70
 800ee40:	22b7      	movs	r2, #183	; 0xb7
 800ee42:	33ff      	adds	r3, #255	; 0xff
 800ee44:	5ce3      	ldrb	r3, [r4, r3]
 800ee46:	0052      	lsls	r2, r2, #1
 800ee48:	5ca2      	ldrb	r2, [r4, r2]
 800ee4a:	021b      	lsls	r3, r3, #8
 800ee4c:	189b      	adds	r3, r3, r2
 800ee4e:	22b8      	movs	r2, #184	; 0xb8
 800ee50:	0052      	lsls	r2, r2, #1
 800ee52:	5ca2      	ldrb	r2, [r4, r2]
  DevAddr        = address;
 800ee54:	0026      	movs	r6, r4
  SetDevAddr(MacRxPayload[7] + (MacRxPayload[8] << 8) + (MacRxPayload[9] << 16) + (MacRxPayload[10] << 24));
 800ee56:	0412      	lsls	r2, r2, #16
 800ee58:	189b      	adds	r3, r3, r2
 800ee5a:	2272      	movs	r2, #114	; 0x72
 800ee5c:	32ff      	adds	r2, #255	; 0xff
 800ee5e:	5ca2      	ldrb	r2, [r4, r2]
  DevAddr        = address;
 800ee60:	36d4      	adds	r6, #212	; 0xd4
  SetDevAddr(MacRxPayload[7] + (MacRxPayload[8] << 8) + (MacRxPayload[9] << 16) + (MacRxPayload[10] << 24));
 800ee62:	0612      	lsls	r2, r2, #24
 800ee64:	189b      	adds	r3, r3, r2
  Phy.DevAddrIsr = address;
 800ee66:	4a24      	ldr	r2, [pc, #144]	; (800eef8 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x11c>)
  DevAddr        = address;
 800ee68:	6033      	str	r3, [r6, #0]
  Phy.DevAddrIsr = address;
 800ee6a:	50a3      	str	r3, [r4, r2]
  MacRx1DataRateOffset = (MacRxPayload[11] & 0x70) >> 4;
 800ee6c:	23b9      	movs	r3, #185	; 0xb9
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	5ce3      	ldrb	r3, [r4, r3]
  MacRx1Delay          = MacRxPayload[12];
 800ee72:	0027      	movs	r7, r4
  MacRx1DataRateOffset = (MacRxPayload[11] & 0x70) >> 4;
 800ee74:	065a      	lsls	r2, r3, #25
 800ee76:	0f52      	lsrs	r2, r2, #29
 800ee78:	7522      	strb	r2, [r4, #20]
  MacRx2DataRate       = (MacRxPayload[11] & 0x0F);
 800ee7a:	220f      	movs	r2, #15
 800ee7c:	4013      	ands	r3, r2
 800ee7e:	73a3      	strb	r3, [r4, #14]
  MacRx1Delay          = MacRxPayload[12];
 800ee80:	2374      	movs	r3, #116	; 0x74
 800ee82:	33ff      	adds	r3, #255	; 0xff
 800ee84:	5ce3      	ldrb	r3, [r4, r3]
 800ee86:	37c8      	adds	r7, #200	; 0xc8
 800ee88:	603b      	str	r3, [r7, #0]
  Phy.JoinedStatus = JOINED;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4a1b      	ldr	r2, [pc, #108]	; (800eefc <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x120>)
  FcntUp = 0;
 800ee8e:	2500      	movs	r5, #0
  Phy.JoinedStatus = JOINED;
 800ee90:	54a3      	strb	r3, [r4, r2]
  FirstDwn = true;
 800ee92:	4a1b      	ldr	r2, [pc, #108]	; (800ef00 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x124>)
  BackUpFlash.lastPayloadSendTime = mcu.RtcGetTimeMs();
 800ee94:	481b      	ldr	r0, [pc, #108]	; (800ef04 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x128>)
  FirstDwn = true;
 800ee96:	54a3      	strb	r3, [r4, r2]
  FcntDwn = 0xffffffff;
 800ee98:	0023      	movs	r3, r4
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	33d0      	adds	r3, #208	; 0xd0
 800ee9e:	4252      	negs	r2, r2
 800eea0:	601a      	str	r2, [r3, #0]
  FcntUp = 0;
 800eea2:	3b04      	subs	r3, #4
 800eea4:	601d      	str	r5, [r3, #0]
  RetryJoinCpt = 0;
 800eea6:	23dc      	movs	r3, #220	; 0xdc
 800eea8:	00db      	lsls	r3, r3, #3
 800eeaa:	50e5      	str	r5, [r4, r3]
  BackUpFlash.lastPayloadSendTime = mcu.RtcGetTimeMs();
 800eeac:	f7ff f90c 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
 800eeb0:	4b15      	ldr	r3, [pc, #84]	; (800ef08 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x12c>)
 800eeb2:	50e0      	str	r0, [r4, r3]
  RegionSaveInFlash();
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	0020      	movs	r0, r4
 800eeb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeba:	4798      	blx	r3
  RegionSaveInFlash(); //@Note have to save twice in case of lowpower , have to understand why and remove this workaround
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	0020      	movs	r0, r4
 800eec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eec2:	4798      	blx	r3
  DEBUG_PRINTF(" DevAddr= %x\n", DevAddr);
 800eec4:	6832      	ldr	r2, [r6, #0]
 800eec6:	4911      	ldr	r1, [pc, #68]	; (800ef0c <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x130>)
 800eec8:	0028      	movs	r0, r5
 800eeca:	f7fb fc6f 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF(" MacRx1DataRateOffset= %d\n", MacRx1DataRateOffset);
 800eece:	7d22      	ldrb	r2, [r4, #20]
 800eed0:	490f      	ldr	r1, [pc, #60]	; (800ef10 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x134>)
 800eed2:	0028      	movs	r0, r5
 800eed4:	f7fb fc6a 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF(" MacRx2DataRate= %d\n", MacRx2DataRate);
 800eed8:	7ba2      	ldrb	r2, [r4, #14]
 800eeda:	490e      	ldr	r1, [pc, #56]	; (800ef14 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x138>)
 800eedc:	0028      	movs	r0, r5
 800eede:	f7fb fc65 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF(" MacRx1Delay= %d\n", MacRx1Delay);
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	490c      	ldr	r1, [pc, #48]	; (800ef18 <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x13c>)
 800eee6:	0028      	movs	r0, r5
 800eee8:	f7fb fc60 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_MSG(" Save In Flash After Join suceed \n");
 800eeec:	490b      	ldr	r1, [pc, #44]	; (800ef1c <_ZN16LoraWanContainerILi16E6SX126xE19UpdateJoinProcedureEv+0x140>)
 800eeee:	0028      	movs	r0, r5
 800eef0:	f7fb fa9c 	bl	800a42c <SEGGER_RTT_WriteString>
}
 800eef4:	b005      	add	sp, #20
 800eef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef8:	0000069c 	.word	0x0000069c
 800eefc:	000006ad 	.word	0x000006ad
 800ef00:	000008ce 	.word	0x000008ce
 800ef04:	20001988 	.word	0x20001988
 800ef08:	000008bc 	.word	0x000008bc
 800ef0c:	08018275 	.word	0x08018275
 800ef10:	08018283 	.word	0x08018283
 800ef14:	0801829e 	.word	0x0801829e
 800ef18:	080182b3 	.word	0x080182b3
 800ef1c:	080182c5 	.word	0x080182c5

0800ef20 <_ZN16LoraWanContainerILi16E6SX126xE10SetDevAddrEm>:
  DevAddr        = address;
 800ef20:	0003      	movs	r3, r0
 800ef22:	33d4      	adds	r3, #212	; 0xd4
 800ef24:	6019      	str	r1, [r3, #0]
  Phy.DevAddrIsr = address;
 800ef26:	4b01      	ldr	r3, [pc, #4]	; (800ef2c <_ZN16LoraWanContainerILi16E6SX126xE10SetDevAddrEm+0xc>)
 800ef28:	50c1      	str	r1, [r0, r3]
}
 800ef2a:	4770      	bx	lr
 800ef2c:	0000069c 	.word	0x0000069c

0800ef30 <_ZN16LoraWanContainerILi16E6SX126xE18FindEnabledChannelEh>:
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::FindEnabledChannel(uint8_t Index) {
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	000d      	movs	r5, r1
 800ef34:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800ef36:	2102      	movs	r1, #2
 800ef38:	2017      	movs	r0, #23
 800ef3a:	f002 fda7 	bl	8011a8c <_Z11InsertTracehh>
  for(i = 0; i < NUMBER_OF_CHANNEL; i++) {
 800ef3e:	2000      	movs	r0, #0
  int cpt = 0;
 800ef40:	0002      	movs	r2, r0
    if(cpt == (Index + 1)) {
 800ef42:	3501      	adds	r5, #1
    if(MacChannelIndexEnabled[i] == CHANNEL_ENABLED) {
 800ef44:	0003      	movs	r3, r0
 800ef46:	33b8      	adds	r3, #184	; 0xb8
 800ef48:	5ce3      	ldrb	r3, [r4, r3]
      cpt++;
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	4259      	negs	r1, r3
 800ef4e:	414b      	adcs	r3, r1
 800ef50:	18d2      	adds	r2, r2, r3
    if(cpt == (Index + 1)) {
 800ef52:	4295      	cmp	r5, r2
 800ef54:	d003      	beq.n	800ef5e <_ZN16LoraWanContainerILi16E6SX126xE18FindEnabledChannelEh+0x2e>
  for(i = 0; i < NUMBER_OF_CHANNEL; i++) {
 800ef56:	3001      	adds	r0, #1
 800ef58:	2810      	cmp	r0, #16
 800ef5a:	d1f3      	bne.n	800ef44 <_ZN16LoraWanContainerILi16E6SX126xE18FindEnabledChannelEh+0x14>
  return (-1); // for error case
 800ef5c:	3811      	subs	r0, #17
};
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}

0800ef60 <_ZN16LoraWanContainerILi16E6SX126xE12SetMacHeaderEv>:
  Phy.TxPhyPayload[0] = ((MType & 0x7) << 5) + (MajorBits & 0x3);
 800ef60:	0002      	movs	r2, r0
 800ef62:	2103      	movs	r1, #3
 800ef64:	32ff      	adds	r2, #255	; 0xff
 800ef66:	7ed3      	ldrb	r3, [r2, #27]
 800ef68:	7f12      	ldrb	r2, [r2, #28]
 800ef6a:	015b      	lsls	r3, r3, #5
 800ef6c:	400a      	ands	r2, r1
 800ef6e:	189b      	adds	r3, r3, r2
 800ef70:	2292      	movs	r2, #146	; 0x92
 800ef72:	00d2      	lsls	r2, r2, #3
 800ef74:	5483      	strb	r3, [r0, r2]
};
 800ef76:	4770      	bx	lr

0800ef78 <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::BuildJoinLoraFrame(void) {
 800ef78:	b573      	push	{r0, r1, r4, r5, r6, lr}
  DevNonce += 1;
 800ef7a:	259a      	movs	r5, #154	; 0x9a
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::BuildJoinLoraFrame(void) {
 800ef7c:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800ef7e:	2102      	movs	r1, #2
 800ef80:	2013      	movs	r0, #19
  DevNonce += 1;
 800ef82:	00ad      	lsls	r5, r5, #2
  InsertTrace(__COUNTER__, FileId);
 800ef84:	f002 fd82 	bl	8011a8c <_Z11InsertTracehh>
  DevNonce += 1;
 800ef88:	5b63      	ldrh	r3, [r4, r5]
  MType = JOINREQUEST;
 800ef8a:	2200      	movs	r2, #0
  DevNonce += 1;
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	5363      	strh	r3, [r4, r5]
  MType = JOINREQUEST;
 800ef90:	0023      	movs	r3, r4
 800ef92:	33ff      	adds	r3, #255	; 0xff
 800ef94:	76da      	strb	r2, [r3, #27]
  SetMacHeader();
 800ef96:	0020      	movs	r0, r4
 800ef98:	f7ff ffe2 	bl	800ef60 <_ZN16LoraWanContainerILi16E6SX126xE12SetMacHeaderEv>
 800ef9c:	0022      	movs	r2, r4
 800ef9e:	4b15      	ldr	r3, [pc, #84]	; (800eff4 <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv+0x7c>)
 800efa0:	4915      	ldr	r1, [pc, #84]	; (800eff8 <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv+0x80>)
 800efa2:	3210      	adds	r2, #16
 800efa4:	32ff      	adds	r2, #255	; 0xff
 800efa6:	18e3      	adds	r3, r4, r3
 800efa8:	1861      	adds	r1, r4, r1
    Phy.TxPhyPayload[1 + i] = appEui[7 - i];
 800efaa:	7a10      	ldrb	r0, [r2, #8]
 800efac:	3a01      	subs	r2, #1
 800efae:	7018      	strb	r0, [r3, #0]
    Phy.TxPhyPayload[9 + i] = devEui[7 - i];
 800efb0:	7850      	ldrb	r0, [r2, #1]
 800efb2:	3301      	adds	r3, #1
 800efb4:	71d8      	strb	r0, [r3, #7]
  for(int i = 0; i < 8; i++) {
 800efb6:	428b      	cmp	r3, r1
 800efb8:	d1f7      	bne.n	800efaa <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv+0x32>
  Phy.TxPhyPayload[17] = (uint8_t)((DevNonce & 0x00FF));
 800efba:	5b63      	ldrh	r3, [r4, r5]
 800efbc:	4a0f      	ldr	r2, [pc, #60]	; (800effc <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv+0x84>)
  MacPayloadSize = 19;
 800efbe:	2520      	movs	r5, #32
  Phy.TxPhyPayload[17] = (uint8_t)((DevNonce & 0x00FF));
 800efc0:	54a3      	strb	r3, [r4, r2]
  Phy.TxPhyPayload[18] = (uint8_t)((DevNonce & 0xFF00) >> 8);
 800efc2:	4a0f      	ldr	r2, [pc, #60]	; (800f000 <_ZN16LoraWanContainerILi16E6SX126xE18BuildJoinLoraFrameEv+0x88>)
 800efc4:	0a1b      	lsrs	r3, r3, #8
  LoRaMacJoinComputeMic(&Phy.TxPhyPayload[0], MacPayloadSize, appKey, &mic);
 800efc6:	2692      	movs	r6, #146	; 0x92
  Phy.TxPhyPayload[18] = (uint8_t)((DevNonce & 0xFF00) >> 8);
 800efc8:	54a3      	strb	r3, [r4, r2]
  MacPayloadSize = 19;
 800efca:	2113      	movs	r1, #19
  LoRaMacJoinComputeMic(&Phy.TxPhyPayload[0], MacPayloadSize, appKey, &mic);
 800efcc:	0022      	movs	r2, r4
  MacPayloadSize = 19;
 800efce:	35ff      	adds	r5, #255	; 0xff
  LoRaMacJoinComputeMic(&Phy.TxPhyPayload[0], MacPayloadSize, appKey, &mic);
 800efd0:	00f6      	lsls	r6, r6, #3
  MacPayloadSize = 19;
 800efd2:	5561      	strb	r1, [r4, r5]
  LoRaMacJoinComputeMic(&Phy.TxPhyPayload[0], MacPayloadSize, appKey, &mic);
 800efd4:	19a0      	adds	r0, r4, r6
 800efd6:	ab01      	add	r3, sp, #4
 800efd8:	32f8      	adds	r2, #248	; 0xf8
 800efda:	f7ff f9db 	bl	800e394 <_Z21LoRaMacJoinComputeMicPKhtS0_Pm>
  memcpy(&Phy.TxPhyPayload[MacPayloadSize], (uint8_t *)&mic, 4);
 800efde:	5d60      	ldrb	r0, [r4, r5]
 800efe0:	2204      	movs	r2, #4
 800efe2:	1980      	adds	r0, r0, r6
 800efe4:	1820      	adds	r0, r4, r0
 800efe6:	a901      	add	r1, sp, #4
 800efe8:	f006 fb6f 	bl	80156ca <memcpy>
  MacPayloadSize = MacPayloadSize + 4;
 800efec:	5d63      	ldrb	r3, [r4, r5]
 800efee:	3304      	adds	r3, #4
 800eff0:	5563      	strb	r3, [r4, r5]
}
 800eff2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800eff4:	00000491 	.word	0x00000491
 800eff8:	00000499 	.word	0x00000499
 800effc:	000004a1 	.word	0x000004a1
 800f000:	000004a2 	.word	0x000004a2

0800f004 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv>:
  Phy.TxPhyPayload[1] = (uint8_t)((DevAddr & 0x000000FF));
 800f004:	0003      	movs	r3, r0
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::SetFrameHeader() {
 800f006:	b570      	push	{r4, r5, r6, lr}
  Phy.TxPhyPayload[1] = (uint8_t)((DevAddr & 0x000000FF));
 800f008:	33d4      	adds	r3, #212	; 0xd4
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a16      	ldr	r2, [pc, #88]	; (800f068 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x64>)
  Phy.TxPhyPayload[2] = (uint8_t)((DevAddr & 0x0000FF00) >> 8);
 800f00e:	0a19      	lsrs	r1, r3, #8
  Phy.TxPhyPayload[1] = (uint8_t)((DevAddr & 0x000000FF));
 800f010:	5483      	strb	r3, [r0, r2]
  Phy.TxPhyPayload[2] = (uint8_t)((DevAddr & 0x0000FF00) >> 8);
 800f012:	4a16      	ldr	r2, [pc, #88]	; (800f06c <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x68>)
 800f014:	5481      	strb	r1, [r0, r2]
  Phy.TxPhyPayload[3] = (uint8_t)((DevAddr & 0x00FF0000) >> 16);
 800f016:	4a16      	ldr	r2, [pc, #88]	; (800f070 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x6c>)
 800f018:	0c19      	lsrs	r1, r3, #16
 800f01a:	5481      	strb	r1, [r0, r2]
  Phy.TxPhyPayload[4] = (uint8_t)((DevAddr & 0xFF000000) >> 24);
 800f01c:	4a15      	ldr	r2, [pc, #84]	; (800f074 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x70>)
 800f01e:	0e1b      	lsrs	r3, r3, #24
 800f020:	5483      	strb	r3, [r0, r2]
  Phy.TxPhyPayload[5] = Fctrl;
 800f022:	0002      	movs	r2, r0
 800f024:	32ff      	adds	r2, #255	; 0xff
 800f026:	7f51      	ldrb	r1, [r2, #29]
 800f028:	4b13      	ldr	r3, [pc, #76]	; (800f078 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x74>)
 800f02a:	54c1      	strb	r1, [r0, r3]
  Phy.TxPhyPayload[6] = (uint8_t)((FcntUp & 0x000000FF));
 800f02c:	0003      	movs	r3, r0
 800f02e:	33cc      	adds	r3, #204	; 0xcc
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4912      	ldr	r1, [pc, #72]	; (800f07c <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x78>)
 800f034:	5443      	strb	r3, [r0, r1]
  Phy.TxPhyPayload[7] = (uint8_t)((FcntUp & 0x0000FF00) >> 8);
 800f036:	4912      	ldr	r1, [pc, #72]	; (800f080 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x7c>)
 800f038:	0a1b      	lsrs	r3, r3, #8
 800f03a:	5443      	strb	r3, [r0, r1]
  for(int i = 0; i < FoptsTxLengthCurrent; i++) {
 800f03c:	23a0      	movs	r3, #160	; 0xa0
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	5cc1      	ldrb	r1, [r0, r3]
 800f042:	0003      	movs	r3, r0
 800f044:	3342      	adds	r3, #66	; 0x42
 800f046:	33ff      	adds	r3, #255	; 0xff
 800f048:	185e      	adds	r6, r3, r1
 800f04a:	42b3      	cmp	r3, r6
 800f04c:	d005      	beq.n	800f05a <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x56>
    Phy.TxPhyPayload[8 + i] = FoptsTxDataCurrent[i];
 800f04e:	4c0d      	ldr	r4, [pc, #52]	; (800f084 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x80>)
 800f050:	781d      	ldrb	r5, [r3, #0]
 800f052:	191c      	adds	r4, r3, r4
 800f054:	7025      	strb	r5, [r4, #0]
 800f056:	3301      	adds	r3, #1
  for(int i = 0; i < FoptsTxLengthCurrent; i++) {
 800f058:	e7f7      	b.n	800f04a <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv+0x46>
  Phy.TxPhyPayload[8 + FoptsTxLengthCurrent] = fPort;
 800f05a:	2393      	movs	r3, #147	; 0x93
 800f05c:	1840      	adds	r0, r0, r1
 800f05e:	00db      	lsls	r3, r3, #3
 800f060:	18c0      	adds	r0, r0, r3
 800f062:	7e93      	ldrb	r3, [r2, #26]
 800f064:	7003      	strb	r3, [r0, #0]
}
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	00000491 	.word	0x00000491
 800f06c:	00000492 	.word	0x00000492
 800f070:	00000493 	.word	0x00000493
 800f074:	00000494 	.word	0x00000494
 800f078:	00000495 	.word	0x00000495
 800f07c:	00000496 	.word	0x00000496
 800f080:	00000497 	.word	0x00000497
 800f084:	00000357 	.word	0x00000357

0800f088 <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::BuildTxLoraFrame(void) {
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FoptsTxLengthCurrent > 15) {
 800f08a:	25a0      	movs	r5, #160	; 0xa0
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::BuildTxLoraFrame(void) {
 800f08c:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800f08e:	2102      	movs	r1, #2
 800f090:	2000      	movs	r0, #0
  if(FoptsTxLengthCurrent > 15) {
 800f092:	006d      	lsls	r5, r5, #1
  InsertTrace(__COUNTER__, FileId);
 800f094:	f002 fcfa 	bl	8011a8c <_Z11InsertTracehh>
  if(FoptsTxLengthCurrent > 15) {
 800f098:	5d62      	ldrb	r2, [r4, r5]
 800f09a:	2a0f      	cmp	r2, #15
 800f09c:	d905      	bls.n	800f0aa <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv+0x22>
    DEBUG_PRINTF(" ERROR FOPTS TOO LONG =  %d \n", FoptsTxLengthCurrent);
 800f09e:	4917      	ldr	r1, [pc, #92]	; (800f0fc <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv+0x74>)
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	f7fb fb83 	bl	800a7ac <SEGGER_RTT_printf>
    FoptsTxLengthCurrent = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	5563      	strb	r3, [r4, r5]
  Fctrl = (AdrEnable << 7) + (AdrAckReq << 6) + (AckBitForTx << 5) + FoptsTxLengthCurrent;
 800f0aa:	2291      	movs	r2, #145	; 0x91
 800f0ac:	27a0      	movs	r7, #160	; 0xa0
 800f0ae:	0025      	movs	r5, r4
  AckBitForTx = 0;
 800f0b0:	2600      	movs	r6, #0
  Fctrl = (AdrEnable << 7) + (AdrAckReq << 6) + (AckBitForTx << 5) + FoptsTxLengthCurrent;
 800f0b2:	4b13      	ldr	r3, [pc, #76]	; (800f100 <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv+0x78>)
 800f0b4:	00d2      	lsls	r2, r2, #3
 800f0b6:	5ce3      	ldrb	r3, [r4, r3]
 800f0b8:	5ca2      	ldrb	r2, [r4, r2]
 800f0ba:	007f      	lsls	r7, r7, #1
 800f0bc:	0192      	lsls	r2, r2, #6
 800f0be:	01db      	lsls	r3, r3, #7
 800f0c0:	189b      	adds	r3, r3, r2
 800f0c2:	5de2      	ldrb	r2, [r4, r7]
 800f0c4:	35ff      	adds	r5, #255	; 0xff
 800f0c6:	189b      	adds	r3, r3, r2
 800f0c8:	7faa      	ldrb	r2, [r5, #30]
  SetMacHeader();
 800f0ca:	0020      	movs	r0, r4
  Fctrl = (AdrEnable << 7) + (AdrAckReq << 6) + (AckBitForTx << 5) + FoptsTxLengthCurrent;
 800f0cc:	0152      	lsls	r2, r2, #5
 800f0ce:	189b      	adds	r3, r3, r2
 800f0d0:	776b      	strb	r3, [r5, #29]
  AckBitForTx = 0;
 800f0d2:	77ae      	strb	r6, [r5, #30]
  SetMacHeader();
 800f0d4:	f7ff ff44 	bl	800ef60 <_ZN16LoraWanContainerILi16E6SX126xE12SetMacHeaderEv>
  SetFrameHeader();
 800f0d8:	0020      	movs	r0, r4
 800f0da:	f7ff ff93 	bl	800f004 <_ZN16LoraWanContainerILi16E6SX126xE14SetFrameHeaderEv>
  MacPayloadSize = UserPayloadSize + FHDROFFSET + FoptsTxLengthCurrent;
 800f0de:	5de2      	ldrb	r2, [r4, r7]
 800f0e0:	7feb      	ldrb	r3, [r5, #31]
  DEBUG_PRINTF("  Devaddr = %x\n", DevAddr);
 800f0e2:	0030      	movs	r0, r6
  MacPayloadSize = UserPayloadSize + FHDROFFSET + FoptsTxLengthCurrent;
 800f0e4:	189b      	adds	r3, r3, r2
 800f0e6:	2220      	movs	r2, #32
 800f0e8:	3309      	adds	r3, #9
 800f0ea:	32ff      	adds	r2, #255	; 0xff
 800f0ec:	54a3      	strb	r3, [r4, r2]
  DEBUG_PRINTF("  Devaddr = %x\n", DevAddr);
 800f0ee:	34d4      	adds	r4, #212	; 0xd4
 800f0f0:	6822      	ldr	r2, [r4, #0]
 800f0f2:	4904      	ldr	r1, [pc, #16]	; (800f104 <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv+0x7c>)
 800f0f4:	f7fb fb5a 	bl	800a7ac <SEGGER_RTT_printf>
};
 800f0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0fa:	46c0      	nop			; (mov r8, r8)
 800f0fc:	0801801e 	.word	0x0801801e
 800f100:	00000489 	.word	0x00000489
 800f104:	0801803c 	.word	0x0801803c

0800f108 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::UpdateMacLayer(void) {
 800f108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  AdrAckLimit = RegionGetAdrAckLimit();
 800f10a:	6803      	ldr	r3, [r0, #0]
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::UpdateMacLayer(void) {
 800f10c:	0004      	movs	r4, r0
  AdrAckLimit = RegionGetAdrAckLimit();
 800f10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f110:	4798      	blx	r3
 800f112:	2390      	movs	r3, #144	; 0x90
 800f114:	00db      	lsls	r3, r3, #3
 800f116:	50e0      	str	r0, [r4, r3]
  AdrAckDelay = RegionGetAdrAckDelay();
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	0020      	movs	r0, r4
 800f11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f11e:	4798      	blx	r3
 800f120:	4b4c      	ldr	r3, [pc, #304]	; (800f254 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x14c>)
  if(Phy.JoinedStatus == NOT_JOINED) {
 800f122:	4a4d      	ldr	r2, [pc, #308]	; (800f258 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x150>)
  AdrAckDelay = RegionGetAdrAckDelay();
 800f124:	50e0      	str	r0, [r4, r3]
  if(Phy.JoinedStatus == NOT_JOINED) {
 800f126:	5ca2      	ldrb	r2, [r4, r2]
 800f128:	9301      	str	r3, [sp, #4]
 800f12a:	2a00      	cmp	r2, #0
 800f12c:	d115      	bne.n	800f15a <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x52>
    RetryJoinCpt++; // reset when join ok
 800f12e:	22dc      	movs	r2, #220	; 0xdc
 800f130:	00d2      	lsls	r2, r2, #3
 800f132:	58a3      	ldr	r3, [r4, r2]
 800f134:	4849      	ldr	r0, [pc, #292]	; (800f25c <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x154>)
 800f136:	3301      	adds	r3, #1
 800f138:	50a3      	str	r3, [r4, r2]
 800f13a:	4d49      	ldr	r5, [pc, #292]	; (800f260 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x158>)
 800f13c:	4e49      	ldr	r6, [pc, #292]	; (800f264 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x15c>)
    if(RetryJoinCpt < MAX_RETRY_JOIN_DUTY_CYCLE_1000) {
 800f13e:	2b09      	cmp	r3, #9
 800f140:	d869      	bhi.n	800f216 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x10e>
      RtcNextTimeJoinSecond = mcu.RtcGetTimeSecond() + ((TIMEONAIR_JOIN_SF7_MS << (MacTxSfCurrent - 7))) / 10; // @note 1/100 duty cycle fix
 800f142:	f7fe ffbd 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 800f146:	0007      	movs	r7, r0
 800f148:	2041      	movs	r0, #65	; 0x41
 800f14a:	5da3      	ldrb	r3, [r4, r6]
 800f14c:	210a      	movs	r1, #10
 800f14e:	3b07      	subs	r3, #7
 800f150:	4098      	lsls	r0, r3
 800f152:	f7f9 f889 	bl	8008268 <__divsi3>
 800f156:	19c7      	adds	r7, r0, r7
 800f158:	5167      	str	r7, [r4, r5]
  if((AdrAckCnt >= AdrAckLimit) && (AdrAckCnt < (AdrAckLimit + AdrAckDelay))) {
 800f15a:	2690      	movs	r6, #144	; 0x90
 800f15c:	4d42      	ldr	r5, [pc, #264]	; (800f268 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x160>)
 800f15e:	9b01      	ldr	r3, [sp, #4]
 800f160:	00f6      	lsls	r6, r6, #3
 800f162:	59a1      	ldr	r1, [r4, r6]
 800f164:	58e3      	ldr	r3, [r4, r3]
 800f166:	5962      	ldr	r2, [r4, r5]
 800f168:	18cb      	adds	r3, r1, r3
 800f16a:	428a      	cmp	r2, r1
 800f16c:	db68      	blt.n	800f240 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x138>
 800f16e:	429a      	cmp	r2, r3
 800f170:	da68      	bge.n	800f244 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x13c>
    AdrAckReq = 1;
 800f172:	2391      	movs	r3, #145	; 0x91
 800f174:	2201      	movs	r2, #1
 800f176:	00db      	lsls	r3, r3, #3
 800f178:	54e2      	strb	r2, [r4, r3]
  if(AdrAckCnt < AdrAckLimit) {
 800f17a:	2390      	movs	r3, #144	; 0x90
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	5962      	ldr	r2, [r4, r5]
 800f180:	58e3      	ldr	r3, [r4, r3]
 800f182:	429a      	cmp	r2, r3
 800f184:	da03      	bge.n	800f18e <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x86>
    AdrAckReq = 0;
 800f186:	2391      	movs	r3, #145	; 0x91
 800f188:	2200      	movs	r2, #0
 800f18a:	00db      	lsls	r3, r3, #3
 800f18c:	54e2      	strb	r2, [r4, r3]
 800f18e:	0022      	movs	r2, r4
  if(MacNbTransCpt <= 1) { // could also be set to 1 if receive valid ans
 800f190:	7b63      	ldrb	r3, [r4, #13]
 800f192:	32cc      	adds	r2, #204	; 0xcc
 800f194:	2b01      	cmp	r3, #1
 800f196:	d847      	bhi.n	800f228 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x120>
    FcntUp++;
 800f198:	6813      	ldr	r3, [r2, #0]
 800f19a:	3301      	adds	r3, #1
 800f19c:	6013      	str	r3, [r2, #0]
    MacNbTransCpt = 1; // error case shouldn't exist
 800f19e:	2301      	movs	r3, #1
    MacNbTransCpt--;
 800f1a0:	7363      	strb	r3, [r4, #13]
  if((FcntUp % FLASH_UPDATE_PERIOD) == 0) {
 800f1a2:	6813      	ldr	r3, [r2, #0]
 800f1a4:	06db      	lsls	r3, r3, #27
 800f1a6:	d103      	bne.n	800f1b0 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0xa8>
    RegionSaveInFlash();
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	0020      	movs	r0, r4
 800f1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1ae:	4798      	blx	r3
  if(FoptsTxLength > FoptsTxLengthSticky) {
 800f1b0:	2590      	movs	r5, #144	; 0x90
 800f1b2:	2398      	movs	r3, #152	; 0x98
 800f1b4:	0020      	movs	r0, r4
 800f1b6:	005b      	lsls	r3, r3, #1
 800f1b8:	006d      	lsls	r5, r5, #1
 800f1ba:	5ce2      	ldrb	r2, [r4, r3]
 800f1bc:	5d61      	ldrb	r1, [r4, r5]
 800f1be:	3042      	adds	r0, #66	; 0x42
 800f1c0:	30ff      	adds	r0, #255	; 0xff
 800f1c2:	3310      	adds	r3, #16
 800f1c4:	4291      	cmp	r1, r2
 800f1c6:	d933      	bls.n	800f230 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x128>
    FoptsTxLengthCurrent = FoptsTxLength;
 800f1c8:	54e1      	strb	r1, [r4, r3]
    memcpy(FoptsTxDataCurrent, FoptsTxData, 15);
 800f1ca:	0021      	movs	r1, r4
 800f1cc:	3122      	adds	r1, #34	; 0x22
 800f1ce:	220f      	movs	r2, #15
 800f1d0:	31ff      	adds	r1, #255	; 0xff
 800f1d2:	f006 fa7a 	bl	80156ca <memcpy>
    FoptsTxLength = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	5563      	strb	r3, [r4, r5]
  switch(IsFrameToSend) {
 800f1da:	7923      	ldrb	r3, [r4, #4]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d119      	bne.n	800f214 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x10c>
    RegionGiveNextDataRate();
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	0020      	movs	r0, r4
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	4798      	blx	r3
    memcpy(&Phy.TxPhyPayload[FHDROFFSET], MacNwkAns, MacNwkAnsSize);
 800f1e8:	4b20      	ldr	r3, [pc, #128]	; (800f26c <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x164>)
 800f1ea:	5ce5      	ldrb	r5, [r4, r3]
 800f1ec:	4b20      	ldr	r3, [pc, #128]	; (800f270 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x168>)
 800f1ee:	002a      	movs	r2, r5
 800f1f0:	18e0      	adds	r0, r4, r3
 800f1f2:	4b20      	ldr	r3, [pc, #128]	; (800f274 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x16c>)
 800f1f4:	18e1      	adds	r1, r4, r3
 800f1f6:	f006 fa68 	bl	80156ca <memcpy>
    UserPayloadSize = MacNwkAnsSize;
 800f1fa:	0023      	movs	r3, r4
    fPort = PORTNWK;
 800f1fc:	2200      	movs	r2, #0
    UserPayloadSize = MacNwkAnsSize;
 800f1fe:	33ff      	adds	r3, #255	; 0xff
    fPort = PORTNWK;
 800f200:	769a      	strb	r2, [r3, #26]
    MType = UNCONF_DATA_UP; //@note Mtype have to be confirm
 800f202:	3202      	adds	r2, #2
    BuildTxLoraFrame();
 800f204:	0020      	movs	r0, r4
    UserPayloadSize = MacNwkAnsSize;
 800f206:	77dd      	strb	r5, [r3, #31]
    MType = UNCONF_DATA_UP; //@note Mtype have to be confirm
 800f208:	76da      	strb	r2, [r3, #27]
    BuildTxLoraFrame();
 800f20a:	f7ff ff3d 	bl	800f088 <_ZN16LoraWanContainerILi16E6SX126xE16BuildTxLoraFrameEv>
    EncryptTxFrame();
 800f20e:	0020      	movs	r0, r4
 800f210:	f7ff fd26 	bl	800ec60 <_ZN16LoraWanContainerILi16E6SX126xE14EncryptTxFrameEv>
}
 800f214:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      RtcNextTimeJoinSecond = mcu.RtcGetTimeSecond() + ((TIMEONAIR_JOIN_SF7_MS << (MacTxSfCurrent - 7))) / 1; // @note 1/1000 duty cycle fix
 800f216:	f7fe ff53 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 800f21a:	2341      	movs	r3, #65	; 0x41
 800f21c:	5da2      	ldrb	r2, [r4, r6]
 800f21e:	3a07      	subs	r2, #7
 800f220:	4093      	lsls	r3, r2
 800f222:	1818      	adds	r0, r3, r0
 800f224:	5160      	str	r0, [r4, r5]
 800f226:	e798      	b.n	800f15a <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x52>
    IsFrameToSend = USRFRAME_TORETRANSMIT;
 800f228:	2103      	movs	r1, #3
    MacNbTransCpt--;
 800f22a:	3b01      	subs	r3, #1
    IsFrameToSend = USRFRAME_TORETRANSMIT;
 800f22c:	7121      	strb	r1, [r4, #4]
 800f22e:	e7b7      	b.n	800f1a0 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x98>
    memcpy(FoptsTxDataCurrent, FoptsTxDataSticky, 15);
 800f230:	0021      	movs	r1, r4
 800f232:	3132      	adds	r1, #50	; 0x32
    FoptsTxLengthCurrent = FoptsTxLengthSticky;
 800f234:	54e2      	strb	r2, [r4, r3]
    memcpy(FoptsTxDataCurrent, FoptsTxDataSticky, 15);
 800f236:	31ff      	adds	r1, #255	; 0xff
 800f238:	220f      	movs	r2, #15
 800f23a:	f006 fa46 	bl	80156ca <memcpy>
 800f23e:	e7cc      	b.n	800f1da <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0xd2>
  if(AdrAckCnt >= (AdrAckLimit + AdrAckDelay)) {
 800f240:	429a      	cmp	r2, r3
 800f242:	dba0      	blt.n	800f186 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x7e>
    RegionDecreaseDataRate();
 800f244:	6823      	ldr	r3, [r4, #0]
 800f246:	0020      	movs	r0, r4
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	4798      	blx	r3
    AdrAckCnt = AdrAckLimit;
 800f24c:	59a3      	ldr	r3, [r4, r6]
 800f24e:	5163      	str	r3, [r4, r5]
 800f250:	e78f      	b.n	800f172 <_ZN16LoraWanContainerILi16E6SX126xE14UpdateMacLayerEv+0x6a>
 800f252:	46c0      	nop			; (mov r8, r8)
 800f254:	00000484 	.word	0x00000484
 800f258:	000006ad 	.word	0x000006ad
 800f25c:	20001988 	.word	0x20001988
 800f260:	000006dc 	.word	0x000006dc
 800f264:	0000073c 	.word	0x0000073c
 800f268:	0000047c 	.word	0x0000047c
 800f26c:	00000479 	.word	0x00000479
 800f270:	00000499 	.word	0x00000499
 800f274:	0000037a 	.word	0x0000037a

0800f278 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv>:
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::ExtractRxMhdr(void) {
 800f278:	b570      	push	{r4, r5, r6, lr}
  MtypeRx = Phy.RxPhyPayload[0] >> 5;
 800f27a:	2552      	movs	r5, #82	; 0x52
 800f27c:	4b10      	ldr	r3, [pc, #64]	; (800f2c0 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv+0x48>)
 800f27e:	35ff      	adds	r5, #255	; 0xff
 800f280:	5cc2      	ldrb	r2, [r0, r3]
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::ExtractRxMhdr(void) {
 800f282:	0004      	movs	r4, r0
  MtypeRx = Phy.RxPhyPayload[0] >> 5;
 800f284:	1151      	asrs	r1, r2, #5
 800f286:	b2cb      	uxtb	r3, r1
 800f288:	5543      	strb	r3, [r0, r5]
  MajorRx = Phy.RxPhyPayload[0] & 0x3;
 800f28a:	2003      	movs	r0, #3
 800f28c:	4002      	ands	r2, r0
 800f28e:	3050      	adds	r0, #80	; 0x50
 800f290:	30ff      	adds	r0, #255	; 0xff
 800f292:	5422      	strb	r2, [r4, r0]
  if((MtypeRx == JOINREQUEST) || (MtypeRx == UNCONF_DATA_UP) || (MtypeRx == CONF_DATA_UP) || (MtypeRx == REJOIN_REQUEST)) {
 800f294:	2900      	cmp	r1, #0
 800f296:	d006      	beq.n	800f2a6 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv+0x2e>
 800f298:	2204      	movs	r2, #4
 800f29a:	4393      	bics	r3, r2
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d002      	beq.n	800f2a6 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv+0x2e>
  int status = OKLORAWAN;
 800f2a0:	2000      	movs	r0, #0
  if((MtypeRx == JOINREQUEST) || (MtypeRx == UNCONF_DATA_UP) || (MtypeRx == CONF_DATA_UP) || (MtypeRx == REJOIN_REQUEST)) {
 800f2a2:	4291      	cmp	r1, r2
 800f2a4:	d105      	bne.n	800f2b2 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv+0x3a>
    DEBUG_MSG(" BAD RX MHDR\n ");
 800f2a6:	4907      	ldr	r1, [pc, #28]	; (800f2c4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv+0x4c>)
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	f7fb f8bf 	bl	800a42c <SEGGER_RTT_WriteString>
    status = ERRORLORAWAN;
 800f2ae:	2001      	movs	r0, #1
 800f2b0:	4240      	negs	r0, r0
  AckBitForTx = (MtypeRx == CONF_DATA_DOWN) ? 1 : 0;
 800f2b2:	5d63      	ldrb	r3, [r4, r5]
 800f2b4:	34ff      	adds	r4, #255	; 0xff
 800f2b6:	3b05      	subs	r3, #5
 800f2b8:	425a      	negs	r2, r3
 800f2ba:	4153      	adcs	r3, r2
 800f2bc:	77a3      	strb	r3, [r4, #30]
}
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	0000058f 	.word	0x0000058f
 800f2c4:	08017edf 	.word	0x08017edf

0800f2c8 <_ZN16LoraWanContainerILi16E6SX126xE20CheckRxPayloadLengthEv>:
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::CheckRxPayloadLength(void) {
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 800f2cc:	2102      	movs	r1, #2
 800f2ce:	2014      	movs	r0, #20
 800f2d0:	f002 fbdc 	bl	8011a8c <_Z11InsertTracehh>
  if(Phy.RxPhyPayloadSize < MIN_LORAWAN_PAYLOAD_SIZE) {
 800f2d4:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <_ZN16LoraWanContainerILi16E6SX126xE20CheckRxPayloadLengthEv+0x24>)
  return (status);
 800f2d6:	2000      	movs	r0, #0
  if(Phy.RxPhyPayloadSize < MIN_LORAWAN_PAYLOAD_SIZE) {
 800f2d8:	5ce2      	ldrb	r2, [r4, r3]
 800f2da:	2a0b      	cmp	r2, #11
 800f2dc:	d804      	bhi.n	800f2e8 <_ZN16LoraWanContainerILi16E6SX126xE20CheckRxPayloadLengthEv+0x20>
    DEBUG_PRINTF(" ERROR CheckRxPayloadLength = %d \n", Phy.RxPhyPayloadSize);
 800f2de:	4904      	ldr	r1, [pc, #16]	; (800f2f0 <_ZN16LoraWanContainerILi16E6SX126xE20CheckRxPayloadLengthEv+0x28>)
 800f2e0:	f7fb fa64 	bl	800a7ac <SEGGER_RTT_printf>
    return (status);
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	4240      	negs	r0, r0
}
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	46c0      	nop			; (mov r8, r8)
 800f2ec:	0000068e 	.word	0x0000068e
 800f2f0:	080182e8 	.word	0x080182e8

0800f2f4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm>:
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::ExtractRxFhdr(uint16_t *FcntDwnTmp, uint32_t devaddr) { // @note Not yet at all finalized have to initiate action on each field
 800f2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  DevAddrtmp = Phy.RxPhyPayload[1] + (Phy.RxPhyPayload[2] << 8) + (Phy.RxPhyPayload[3] << 16) + (Phy.RxPhyPayload[4] << 24);
 800f2f6:	4b27      	ldr	r3, [pc, #156]	; (800f394 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xa0>)
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::ExtractRxFhdr(uint16_t *FcntDwnTmp, uint32_t devaddr) { // @note Not yet at all finalized have to initiate action on each field
 800f2f8:	0017      	movs	r7, r2
  DevAddrtmp = Phy.RxPhyPayload[1] + (Phy.RxPhyPayload[2] << 8) + (Phy.RxPhyPayload[3] << 16) + (Phy.RxPhyPayload[4] << 24);
 800f2fa:	5cc5      	ldrb	r5, [r0, r3]
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	5cc3      	ldrb	r3, [r0, r3]
 800f300:	022d      	lsls	r5, r5, #8
 800f302:	18ed      	adds	r5, r5, r3
 800f304:	4b24      	ldr	r3, [pc, #144]	; (800f398 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xa4>)
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::ExtractRxFhdr(uint16_t *FcntDwnTmp, uint32_t devaddr) { // @note Not yet at all finalized have to initiate action on each field
 800f306:	0004      	movs	r4, r0
  DevAddrtmp = Phy.RxPhyPayload[1] + (Phy.RxPhyPayload[2] << 8) + (Phy.RxPhyPayload[3] << 16) + (Phy.RxPhyPayload[4] << 24);
 800f308:	5cc3      	ldrb	r3, [r0, r3]
 800f30a:	041b      	lsls	r3, r3, #16
 800f30c:	18ed      	adds	r5, r5, r3
 800f30e:	4b23      	ldr	r3, [pc, #140]	; (800f39c <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xa8>)
 800f310:	5cc3      	ldrb	r3, [r0, r3]
  FctrlRx = Phy.RxPhyPayload[5];
 800f312:	2054      	movs	r0, #84	; 0x54
  DevAddrtmp = Phy.RxPhyPayload[1] + (Phy.RxPhyPayload[2] << 8) + (Phy.RxPhyPayload[3] << 16) + (Phy.RxPhyPayload[4] << 24);
 800f314:	061b      	lsls	r3, r3, #24
 800f316:	18ed      	adds	r5, r5, r3
  status = (DevAddrtmp == devaddr) ? OKLORAWAN : ERRORLORAWAN;
 800f318:	1aab      	subs	r3, r5, r2
 800f31a:	1e5a      	subs	r2, r3, #1
 800f31c:	4193      	sbcs	r3, r2
 800f31e:	425b      	negs	r3, r3
 800f320:	9301      	str	r3, [sp, #4]
  FctrlRx = Phy.RxPhyPayload[5];
 800f322:	4b1f      	ldr	r3, [pc, #124]	; (800f3a0 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xac>)
 800f324:	30ff      	adds	r0, #255	; 0xff
 800f326:	5ce3      	ldrb	r3, [r4, r3]
 800f328:	5423      	strb	r3, [r4, r0]
  *FcntDwnTmp = Phy.RxPhyPayload[6] + (Phy.RxPhyPayload[7] << 8);
 800f32a:	4b1e      	ldr	r3, [pc, #120]	; (800f3a4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xb0>)
 800f32c:	5ce2      	ldrb	r2, [r4, r3]
 800f32e:	4b1e      	ldr	r3, [pc, #120]	; (800f3a8 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xb4>)
 800f330:	0212      	lsls	r2, r2, #8
 800f332:	5ce3      	ldrb	r3, [r4, r3]
 800f334:	189b      	adds	r3, r3, r2
 800f336:	800b      	strh	r3, [r1, #0]
  FoptsLength = FctrlRx & 0x0F;
 800f338:	230f      	movs	r3, #15
 800f33a:	5c26      	ldrb	r6, [r4, r0]
  memcpy(&Fopts[0], &Phy.RxPhyPayload[8], FoptsLength);
 800f33c:	0020      	movs	r0, r4
  FoptsLength = FctrlRx & 0x0F;
 800f33e:	401e      	ands	r6, r3
 800f340:	3346      	adds	r3, #70	; 0x46
 800f342:	33ff      	adds	r3, #255	; 0xff
 800f344:	54e6      	strb	r6, [r4, r3]
  memcpy(&Fopts[0], &Phy.RxPhyPayload[8], FoptsLength);
 800f346:	4b19      	ldr	r3, [pc, #100]	; (800f3ac <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xb8>)
 800f348:	3056      	adds	r0, #86	; 0x56
 800f34a:	18e1      	adds	r1, r4, r3
 800f34c:	0032      	movs	r2, r6
 800f34e:	30ff      	adds	r0, #255	; 0xff
 800f350:	f006 f9bb 	bl	80156ca <memcpy>
  if(Phy.RxPhyPayloadSize > 8 + MICSIZE + FoptsLength) {
 800f354:	0032      	movs	r2, r6
 800f356:	4b16      	ldr	r3, [pc, #88]	; (800f3b0 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xbc>)
 800f358:	320c      	adds	r2, #12
 800f35a:	5ce1      	ldrb	r1, [r4, r3]
 800f35c:	4b15      	ldr	r3, [pc, #84]	; (800f3b4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xc0>)
 800f35e:	4291      	cmp	r1, r2
 800f360:	dd11      	ble.n	800f386 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0x92>
    FportRx = Phy.RxPhyPayload[8 + FoptsLength];
 800f362:	4a12      	ldr	r2, [pc, #72]	; (800f3ac <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xb8>)
 800f364:	19a6      	adds	r6, r4, r6
 800f366:	18b6      	adds	r6, r6, r2
 800f368:	2266      	movs	r2, #102	; 0x66
 800f36a:	7831      	ldrb	r1, [r6, #0]
 800f36c:	32ff      	adds	r2, #255	; 0xff
 800f36e:	54a1      	strb	r1, [r4, r2]
    RxEmptyPayload = 0;
 800f370:	2200      	movs	r2, #0
 800f372:	54e2      	strb	r2, [r4, r3]
  if(status == ERRORLORAWAN) {
 800f374:	42bd      	cmp	r5, r7
 800f376:	d004      	beq.n	800f382 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0x8e>
    DEBUG_PRINTF(" ERROR %x\n ", DevAddrtmp);
 800f378:	002a      	movs	r2, r5
 800f37a:	490f      	ldr	r1, [pc, #60]	; (800f3b8 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xc4>)
 800f37c:	2000      	movs	r0, #0
 800f37e:	f7fb fa15 	bl	800a7ac <SEGGER_RTT_printf>
}
 800f382:	9801      	ldr	r0, [sp, #4]
 800f384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    RxEmptyPayload = 1;
 800f386:	2201      	movs	r2, #1
    DEBUG_MSG(" EMPTY MSG \n");
 800f388:	490c      	ldr	r1, [pc, #48]	; (800f3bc <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0xc8>)
    RxEmptyPayload = 1;
 800f38a:	54e2      	strb	r2, [r4, r3]
    DEBUG_MSG(" EMPTY MSG \n");
 800f38c:	2000      	movs	r0, #0
 800f38e:	f7fb f84d 	bl	800a42c <SEGGER_RTT_WriteString>
 800f392:	e7ef      	b.n	800f374 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm+0x80>
 800f394:	00000591 	.word	0x00000591
 800f398:	00000592 	.word	0x00000592
 800f39c:	00000593 	.word	0x00000593
 800f3a0:	00000594 	.word	0x00000594
 800f3a4:	00000596 	.word	0x00000596
 800f3a8:	00000595 	.word	0x00000595
 800f3ac:	00000597 	.word	0x00000597
 800f3b0:	0000068e 	.word	0x0000068e
 800f3b4:	000008cd 	.word	0x000008cd
 800f3b8:	08017ed3 	.word	0x08017ed3
 800f3bc:	08017ec6 	.word	0x08017ec6

0800f3c0 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm>:
template <int NBCHANNEL, class R> int LoraWanContainer<NBCHANNEL, R>::AcceptFcntDwn(uint16_t FcntDwnTmp, uint32_t *FcntLoraWan) {
 800f3c0:	b570      	push	{r4, r5, r6, lr}
 800f3c2:	0014      	movs	r4, r2
 800f3c4:	000d      	movs	r5, r1
  InsertTrace(__COUNTER__, FileId);
 800f3c6:	2015      	movs	r0, #21
 800f3c8:	2102      	movs	r1, #2
 800f3ca:	f002 fb5f 	bl	8011a8c <_Z11InsertTracehh>
  uint16_t FcntDwnLsb = (*FcntLoraWan & 0x0000FFFF);
 800f3ce:	6822      	ldr	r2, [r4, #0]
  if((FcntDwnTmp > FcntDwnLsb) || (*FcntLoraWan == 0xFFFFFFFF)) {
 800f3d0:	b293      	uxth	r3, r2
 800f3d2:	42ab      	cmp	r3, r5
 800f3d4:	d301      	bcc.n	800f3da <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm+0x1a>
 800f3d6:	1c53      	adds	r3, r2, #1
 800f3d8:	d102      	bne.n	800f3e0 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm+0x20>
    *FcntLoraWan = FcntDwnTmp;
 800f3da:	6025      	str	r5, [r4, #0]
  int status = OKLORAWAN;
 800f3dc:	2000      	movs	r0, #0
}
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
  } else if((FcntDwnLsb - FcntDwnTmp) > MAX_FCNT_GAP) {
 800f3e0:	2180      	movs	r1, #128	; 0x80
 800f3e2:	b293      	uxth	r3, r2
 800f3e4:	1b5b      	subs	r3, r3, r5
 800f3e6:	01c9      	lsls	r1, r1, #7
 800f3e8:	428b      	cmp	r3, r1
 800f3ea:	dd05      	ble.n	800f3f8 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm+0x38>
  uint16_t FcntDwnMsb = (*FcntLoraWan & 0xFFFF0000) >> 16;
 800f3ec:	0c13      	lsrs	r3, r2, #16
    *FcntLoraWan = ((FcntDwnMsb + 1) << 16) + FcntDwnTmp;
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	041b      	lsls	r3, r3, #16
 800f3f2:	195b      	adds	r3, r3, r5
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	e7f1      	b.n	800f3dc <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm+0x1c>
    DEBUG_PRINTF(" ERROR FcntDwn is not acceptable fcntDwnReceive = %d fcntLoraStack = %d\n", (*FcntLoraWan), FcntDwnTmp);
 800f3f8:	002b      	movs	r3, r5
 800f3fa:	4903      	ldr	r1, [pc, #12]	; (800f408 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm+0x48>)
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	f7fb f9d5 	bl	800a7ac <SEGGER_RTT_printf>
    status = ERRORLORAWAN;
 800f402:	2001      	movs	r0, #1
 800f404:	4240      	negs	r0, r0
  return (status);
 800f406:	e7ea      	b.n	800f3de <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm+0x1e>
 800f408:	08017e68 	.word	0x08017e68

0800f40c <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::SetAlarm(uint32_t alarmInMs, eRxWinType type) {
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	0004      	movs	r4, r0
 800f410:	000d      	movs	r5, r1
  InsertTrace(__COUNTER__, FileId);
 800f412:	2016      	movs	r0, #22
 800f414:	2102      	movs	r1, #2
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::SetAlarm(uint32_t alarmInMs, eRxWinType type) {
 800f416:	0016      	movs	r6, r2
  InsertTrace(__COUNTER__, FileId);
 800f418:	f002 fb38 	bl	8011a8c <_Z11InsertTracehh>
  StateTimer = TIMERSTATE_RUNNING;
 800f41c:	23db      	movs	r3, #219	; 0xdb
 800f41e:	2201      	movs	r2, #1
 800f420:	00db      	lsls	r3, r3, #3
 800f422:	50e2      	str	r2, [r4, r3]
 800f424:	4804      	ldr	r0, [pc, #16]	; (800f438 <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType+0x2c>)
    mcu.StartTimerMsecond(&LoraWanContainer<NBCHANNEL, R>::CallbackIsrTimerRx1, this, alarmInMs);
 800f426:	002b      	movs	r3, r5
 800f428:	0022      	movs	r2, r4
 800f42a:	4904      	ldr	r1, [pc, #16]	; (800f43c <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType+0x30>)
  if(type == RX1) {
 800f42c:	2e00      	cmp	r6, #0
 800f42e:	d000      	beq.n	800f432 <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType+0x26>
    mcu.StartTimerMsecond(&LoraWanContainer<NBCHANNEL, R>::CallbackIsrTimerRx2, this, alarmInMs);
 800f430:	4903      	ldr	r1, [pc, #12]	; (800f440 <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType+0x34>)
 800f432:	f7fe fe97 	bl	800e164 <_ZN12McuSTM32L07117StartTimerMsecondEPFvPvES0_i>
}
 800f436:	bd70      	pop	{r4, r5, r6, pc}
 800f438:	20001988 	.word	0x20001988
 800f43c:	0800eac1 	.word	0x0800eac1
 800f440:	0800eac9 	.word	0x0800eac9

0800f444 <_ZN16LoraWanContainerILi16E6SX126xE15LinkCheckParserEv>:
  DEBUG_PRINTF(" Margin = %d , GwCnt = %d \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2]);
 800f444:	239f      	movs	r3, #159	; 0x9f
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::LinkCheckParser(void) {
 800f446:	b570      	push	{r4, r5, r6, lr}
 800f448:	0004      	movs	r4, r0
  DEBUG_PRINTF(" Margin = %d , GwCnt = %d \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2]);
 800f44a:	4d08      	ldr	r5, [pc, #32]	; (800f46c <_ZN16LoraWanContainerILi16E6SX126xE15LinkCheckParserEv+0x28>)
 800f44c:	4908      	ldr	r1, [pc, #32]	; (800f470 <_ZN16LoraWanContainerILi16E6SX126xE15LinkCheckParserEv+0x2c>)
 800f44e:	5d42      	ldrb	r2, [r0, r5]
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	1882      	adds	r2, r0, r2
 800f454:	18d3      	adds	r3, r2, r3
 800f456:	1852      	adds	r2, r2, r1
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	7812      	ldrb	r2, [r2, #0]
 800f45c:	4905      	ldr	r1, [pc, #20]	; (800f474 <_ZN16LoraWanContainerILi16E6SX126xE15LinkCheckParserEv+0x30>)
 800f45e:	2000      	movs	r0, #0
 800f460:	f7fb f9a4 	bl	800a7ac <SEGGER_RTT_printf>
  NwkPayloadIndex += LINK_CHECK_ANS_SIZE;
 800f464:	5d63      	ldrb	r3, [r4, r5]
 800f466:	3303      	adds	r3, #3
 800f468:	5563      	strb	r3, [r4, r5]
}
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
 800f46c:	000008cc 	.word	0x000008cc
 800f470:	0000027b 	.word	0x0000027b
 800f474:	08018002 	.word	0x08018002

0800f478 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh>:
  DEBUG_PRINTF("Cmd LinkADRParser =  %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f478:	239f      	movs	r3, #159	; 0x9f
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::LinkADRParser(uint8_t NbMultiLinkAdrReq) {
 800f47a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47c:	0004      	movs	r4, r0
  for(i = 0; i <= NbMultiLinkAdrReq; i++) {
 800f47e:	2600      	movs	r6, #0
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::LinkADRParser(uint8_t NbMultiLinkAdrReq) {
 800f480:	b087      	sub	sp, #28
  DEBUG_PRINTF("Cmd LinkADRParser =  %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f482:	4f6c      	ldr	r7, [pc, #432]	; (800f634 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1bc>)
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::LinkADRParser(uint8_t NbMultiLinkAdrReq) {
 800f484:	9104      	str	r1, [sp, #16]
  DEBUG_PRINTF("Cmd LinkADRParser =  %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f486:	5dc1      	ldrb	r1, [r0, r7]
 800f488:	4a6b      	ldr	r2, [pc, #428]	; (800f638 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c0>)
 800f48a:	1841      	adds	r1, r0, r1
 800f48c:	486b      	ldr	r0, [pc, #428]	; (800f63c <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c4>)
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	1808      	adds	r0, r1, r0
 800f492:	7800      	ldrb	r0, [r0, #0]
 800f494:	18cb      	adds	r3, r1, r3
 800f496:	188a      	adds	r2, r1, r2
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	7812      	ldrb	r2, [r2, #0]
 800f49c:	9001      	str	r0, [sp, #4]
 800f49e:	4868      	ldr	r0, [pc, #416]	; (800f640 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c8>)
  uint16_t ChMaskTemp = 0;
 800f4a0:	0035      	movs	r5, r6
  DEBUG_PRINTF("Cmd LinkADRParser =  %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f4a2:	1809      	adds	r1, r1, r0
 800f4a4:	7809      	ldrb	r1, [r1, #0]
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	9100      	str	r1, [sp, #0]
 800f4aa:	4966      	ldr	r1, [pc, #408]	; (800f644 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1cc>)
 800f4ac:	f7fb f97e 	bl	800a7ac <SEGGER_RTT_printf>
  RegionInitChannelMask();
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	0020      	movs	r0, r4
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	4798      	blx	r3
  uint8_t StatusAns = 0x7; // initilised for ans answer ok
 800f4b8:	2307      	movs	r3, #7
  eStatusChannel statusChannel = OKCHANNEL;
 800f4ba:	9605      	str	r6, [sp, #20]
  uint8_t StatusAns = 0x7; // initilised for ans answer ok
 800f4bc:	9302      	str	r3, [sp, #8]
 800f4be:	9703      	str	r7, [sp, #12]
  for(i = 0; i <= NbMultiLinkAdrReq; i++) {
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	42b3      	cmp	r3, r6
 800f4c4:	db31      	blt.n	800f52a <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0xb2>
    DEBUG_PRINTF("MULTIPLE LINK ADR REQ , channel mask = 0x%x\n", ChMaskTemp);
 800f4c6:	4f60      	ldr	r7, [pc, #384]	; (800f648 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1d0>)
 800f4c8:	002a      	movs	r2, r5
 800f4ca:	0039      	movs	r1, r7
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	f7fb f96d 	bl	800a7ac <SEGGER_RTT_printf>
    ChMaskTemp = MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 2] + (MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 3] << 8);
 800f4d2:	2205      	movs	r2, #5
 800f4d4:	219f      	movs	r1, #159	; 0x9f
 800f4d6:	9b03      	ldr	r3, [sp, #12]
 800f4d8:	4372      	muls	r2, r6
 800f4da:	5ce3      	ldrb	r3, [r4, r3]
 800f4dc:	0089      	lsls	r1, r1, #2
 800f4de:	189b      	adds	r3, r3, r2
 800f4e0:	4a57      	ldr	r2, [pc, #348]	; (800f640 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c8>)
 800f4e2:	18e3      	adds	r3, r4, r3
 800f4e4:	189a      	adds	r2, r3, r2
 800f4e6:	1859      	adds	r1, r3, r1
 800f4e8:	7812      	ldrb	r2, [r2, #0]
 800f4ea:	780d      	ldrb	r5, [r1, #0]
 800f4ec:	0212      	lsls	r2, r2, #8
 800f4ee:	18ad      	adds	r5, r5, r2
    ChMAstCntlTemp = (MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 4] & 0x70) >> 4;
 800f4f0:	4a52      	ldr	r2, [pc, #328]	; (800f63c <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c4>)
    ChMaskTemp = MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 2] + (MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 3] << 8);
 800f4f2:	b2ad      	uxth	r5, r5
    ChMAstCntlTemp = (MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 4] & 0x70) >> 4;
 800f4f4:	189b      	adds	r3, r3, r2
 800f4f6:	7819      	ldrb	r1, [r3, #0]
    statusChannel = RegionBuildChannelMask(ChMAstCntlTemp, ChMaskTemp);
 800f4f8:	2307      	movs	r3, #7
    ChMAstCntlTemp = (MacNwkPayload[NwkPayloadIndex + (i * LINK_ADR_REQ_SIZE) + 4] & 0x70) >> 4;
 800f4fa:	1109      	asrs	r1, r1, #4
    statusChannel = RegionBuildChannelMask(ChMAstCntlTemp, ChMaskTemp);
 800f4fc:	4019      	ands	r1, r3
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	002a      	movs	r2, r5
 800f502:	6a1b      	ldr	r3, [r3, #32]
 800f504:	0020      	movs	r0, r4
 800f506:	4798      	blx	r3
    DEBUG_PRINTF("MULTIPLE LINK ADR REQ , channel mask = 0x%x\n", ChMaskTemp);
 800f508:	002a      	movs	r2, r5
    statusChannel = RegionBuildChannelMask(ChMAstCntlTemp, ChMaskTemp);
 800f50a:	9005      	str	r0, [sp, #20]
    DEBUG_PRINTF("MULTIPLE LINK ADR REQ , channel mask = 0x%x\n", ChMaskTemp);
 800f50c:	0039      	movs	r1, r7
 800f50e:	2000      	movs	r0, #0
 800f510:	f7fb f94c 	bl	800a7ac <SEGGER_RTT_printf>
    if(statusChannel == ERROR_CHANNEL_CNTL) {    // Test ChannelCNTL not defined
 800f514:	9b05      	ldr	r3, [sp, #20]
 800f516:	3302      	adds	r3, #2
 800f518:	d105      	bne.n	800f526 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0xae>
      DEBUG_MSG("INVALID CHANNEL CNTL \n");
 800f51a:	494c      	ldr	r1, [pc, #304]	; (800f64c <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1d4>)
 800f51c:	2000      	movs	r0, #0
 800f51e:	f7fa ff85 	bl	800a42c <SEGGER_RTT_WriteString>
      StatusAns &= 0x6;
 800f522:	2306      	movs	r3, #6
 800f524:	9302      	str	r3, [sp, #8]
  for(i = 0; i <= NbMultiLinkAdrReq; i++) {
 800f526:	3601      	adds	r6, #1
 800f528:	e7ca      	b.n	800f4c0 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x48>
  if(statusChannel == ERROR_CHANNEL_MASK) { // Test Channelmask enables a not defined channel or Channelmask = 0
 800f52a:	9b05      	ldr	r3, [sp, #20]
 800f52c:	3301      	adds	r3, #1
 800f52e:	d105      	bne.n	800f53c <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0xc4>
    DEBUG_MSG("INVALID CHANNEL MASK \n");
 800f530:	4947      	ldr	r1, [pc, #284]	; (800f650 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1d8>)
 800f532:	2000      	movs	r0, #0
 800f534:	f7fa ff7a 	bl	800a42c <SEGGER_RTT_WriteString>
    StatusAns &= 0x6;
 800f538:	2306      	movs	r3, #6
 800f53a:	9302      	str	r3, [sp, #8]
  DataRateTemp = ((MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 1 ] & 0xF0) >> 4);
 800f53c:	2605      	movs	r6, #5
 800f53e:	9d04      	ldr	r5, [sp, #16]
 800f540:	9b03      	ldr	r3, [sp, #12]
 800f542:	4375      	muls	r5, r6
 800f544:	5ce3      	ldrb	r3, [r4, r3]
 800f546:	1965      	adds	r5, r4, r5
 800f548:	4a3b      	ldr	r2, [pc, #236]	; (800f638 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c0>)
 800f54a:	18eb      	adds	r3, r5, r3
 800f54c:	189b      	adds	r3, r3, r2
 800f54e:	781b      	ldrb	r3, [r3, #0]
  status = RegionIsAcceptableDataRate(DataRateTemp);
 800f550:	0020      	movs	r0, r4
  DataRateTemp = ((MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 1 ] & 0xF0) >> 4);
 800f552:	091b      	lsrs	r3, r3, #4
 800f554:	9305      	str	r3, [sp, #20]
  status = RegionIsAcceptableDataRate(DataRateTemp);
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	9905      	ldr	r1, [sp, #20]
 800f55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f55c:	4798      	blx	r3
  if(status == ERRORLORAWAN) { // Test Channelmask enables a not defined channel
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	d106      	bne.n	800f570 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0xf8>
    StatusAns &= 0x5;
 800f562:	9b02      	ldr	r3, [sp, #8]
    DEBUG_MSG("INVALID DATARATE \n");
 800f564:	493b      	ldr	r1, [pc, #236]	; (800f654 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1dc>)
    StatusAns &= 0x5;
 800f566:	4033      	ands	r3, r6
    DEBUG_MSG("INVALID DATARATE \n");
 800f568:	2000      	movs	r0, #0
    StatusAns &= 0x5;
 800f56a:	9302      	str	r3, [sp, #8]
    DEBUG_MSG("INVALID DATARATE \n");
 800f56c:	f7fa ff5e 	bl	800a42c <SEGGER_RTT_WriteString>
  TxPowerTemp = (MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 1 ] & 0x0F);
 800f570:	270f      	movs	r7, #15
 800f572:	9b03      	ldr	r3, [sp, #12]
 800f574:	4a30      	ldr	r2, [pc, #192]	; (800f638 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c0>)
 800f576:	5ce3      	ldrb	r3, [r4, r3]
  status = RegionIsValidTxPower(TxPowerTemp);
 800f578:	0020      	movs	r0, r4
  TxPowerTemp = (MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 1 ] & 0x0F);
 800f57a:	18eb      	adds	r3, r5, r3
 800f57c:	189b      	adds	r3, r3, r2
 800f57e:	781e      	ldrb	r6, [r3, #0]
  status = RegionIsValidTxPower(TxPowerTemp);
 800f580:	6823      	ldr	r3, [r4, #0]
  TxPowerTemp = (MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 1 ] & 0x0F);
 800f582:	403e      	ands	r6, r7
  status = RegionIsValidTxPower(TxPowerTemp);
 800f584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f586:	0031      	movs	r1, r6
 800f588:	4798      	blx	r3
  if(status == ERRORLORAWAN) { // Test tx power
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	d12c      	bne.n	800f5e8 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x170>
    StatusAns &= 0x3;
 800f58e:	2303      	movs	r3, #3
 800f590:	9a02      	ldr	r2, [sp, #8]
    DEBUG_MSG("INVALID TXPOWER \n");
 800f592:	4931      	ldr	r1, [pc, #196]	; (800f658 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1e0>)
    StatusAns &= 0x3;
 800f594:	401a      	ands	r2, r3
    DEBUG_MSG("INVALID TXPOWER \n");
 800f596:	2000      	movs	r0, #0
    StatusAns &= 0x3;
 800f598:	9202      	str	r2, [sp, #8]
    DEBUG_MSG("INVALID TXPOWER \n");
 800f59a:	f7fa ff47 	bl	800a42c <SEGGER_RTT_WriteString>
    FoptsTxData[FoptsTxLength + (i * LINK_ADR_ANS_SIZE)] = LINK_ADR_ANS; // copy Cid
 800f59e:	2390      	movs	r3, #144	; 0x90
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	5ce1      	ldrb	r1, [r4, r3]
 800f5a4:	2003      	movs	r0, #3
 800f5a6:	000a      	movs	r2, r1
 800f5a8:	9b04      	ldr	r3, [sp, #16]
 800f5aa:	3222      	adds	r2, #34	; 0x22
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	18e3      	adds	r3, r4, r3
 800f5b0:	3324      	adds	r3, #36	; 0x24
 800f5b2:	32ff      	adds	r2, #255	; 0xff
 800f5b4:	33ff      	adds	r3, #255	; 0xff
 800f5b6:	18a2      	adds	r2, r4, r2
 800f5b8:	185b      	adds	r3, r3, r1
    FoptsTxData[FoptsTxLength + (i * LINK_ADR_ANS_SIZE) + 1] = StatusAns;
 800f5ba:	9d02      	ldr	r5, [sp, #8]
    FoptsTxData[FoptsTxLength + (i * LINK_ADR_ANS_SIZE)] = LINK_ADR_ANS; // copy Cid
 800f5bc:	7010      	strb	r0, [r2, #0]
    FoptsTxData[FoptsTxLength + (i * LINK_ADR_ANS_SIZE) + 1] = StatusAns;
 800f5be:	7055      	strb	r5, [r2, #1]
 800f5c0:	3202      	adds	r2, #2
  for(i = 0; i <= NbMultiLinkAdrReq; i++) {
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d1f9      	bne.n	800f5ba <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x142>
  NwkPayloadIndex += (NbMultiLinkAdrReq + 1) * LINK_ADR_REQ_SIZE;
 800f5c6:	2005      	movs	r0, #5
 800f5c8:	9b04      	ldr	r3, [sp, #16]
 800f5ca:	9a03      	ldr	r2, [sp, #12]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	4358      	muls	r0, r3
 800f5d2:	5ca2      	ldrb	r2, [r4, r2]
  FoptsTxLength   += (NbMultiLinkAdrReq + 1) * LINK_ADR_ANS_SIZE;
 800f5d4:	005b      	lsls	r3, r3, #1
  NwkPayloadIndex += (NbMultiLinkAdrReq + 1) * LINK_ADR_REQ_SIZE;
 800f5d6:	1812      	adds	r2, r2, r0
 800f5d8:	9803      	ldr	r0, [sp, #12]
  FoptsTxLength   += (NbMultiLinkAdrReq + 1) * LINK_ADR_ANS_SIZE;
 800f5da:	18cb      	adds	r3, r1, r3
  NwkPayloadIndex += (NbMultiLinkAdrReq + 1) * LINK_ADR_REQ_SIZE;
 800f5dc:	5422      	strb	r2, [r4, r0]
  FoptsTxLength   += (NbMultiLinkAdrReq + 1) * LINK_ADR_ANS_SIZE;
 800f5de:	2290      	movs	r2, #144	; 0x90
 800f5e0:	0052      	lsls	r2, r2, #1
 800f5e2:	54a3      	strb	r3, [r4, r2]
}
 800f5e4:	b007      	add	sp, #28
 800f5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(StatusAns == 0x7) {
 800f5e8:	9b02      	ldr	r3, [sp, #8]
 800f5ea:	2b07      	cmp	r3, #7
 800f5ec:	d1d7      	bne.n	800f59e <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x126>
  NbTransTemp = (MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 4] & 0x0F);
 800f5ee:	9b03      	ldr	r3, [sp, #12]
    RegionSetMask();
 800f5f0:	0020      	movs	r0, r4
  NbTransTemp = (MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq * LINK_ADR_REQ_SIZE) + 4] & 0x0F);
 800f5f2:	5ce3      	ldrb	r3, [r4, r3]
 800f5f4:	18ed      	adds	r5, r5, r3
 800f5f6:	4b11      	ldr	r3, [pc, #68]	; (800f63c <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1c4>)
 800f5f8:	18ed      	adds	r5, r5, r3
 800f5fa:	782b      	ldrb	r3, [r5, #0]
 800f5fc:	401f      	ands	r7, r3
    RegionSetMask();
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	4798      	blx	r3
    RegionSetPower(TxPowerTemp);
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	0031      	movs	r1, r6
 800f608:	0020      	movs	r0, r4
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	4798      	blx	r3
    MacTxDataRateAdr = DataRateTemp;
 800f60e:	9b05      	ldr	r3, [sp, #20]
    DEBUG_PRINTF("MacNbTrans = %d\n", MacNbTrans);
 800f610:	003a      	movs	r2, r7
    MacTxDataRateAdr = DataRateTemp;
 800f612:	71e3      	strb	r3, [r4, #7]
    MacNbTrans = NbTransTemp;
 800f614:	7327      	strb	r7, [r4, #12]
    DEBUG_PRINTF("MacNbTrans = %d\n", MacNbTrans);
 800f616:	4911      	ldr	r1, [pc, #68]	; (800f65c <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1e4>)
 800f618:	2000      	movs	r0, #0
 800f61a:	f7fb f8c7 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("MacTxDataRateAdr = %d\n", MacTxDataRateAdr);
 800f61e:	79e2      	ldrb	r2, [r4, #7]
 800f620:	490f      	ldr	r1, [pc, #60]	; (800f660 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1e8>)
 800f622:	2000      	movs	r0, #0
 800f624:	f7fb f8c2 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("MacRx2Frequency = %d\n", MacRx2Frequency);
 800f628:	6922      	ldr	r2, [r4, #16]
 800f62a:	490e      	ldr	r1, [pc, #56]	; (800f664 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x1ec>)
 800f62c:	2000      	movs	r0, #0
 800f62e:	f7fb f8bd 	bl	800a7ac <SEGGER_RTT_printf>
 800f632:	e7b4      	b.n	800f59e <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh+0x126>
 800f634:	000008cc 	.word	0x000008cc
 800f638:	0000027b 	.word	0x0000027b
 800f63c:	0000027e 	.word	0x0000027e
 800f640:	0000027d 	.word	0x0000027d
 800f644:	08017eee 	.word	0x08017eee
 800f648:	08017f11 	.word	0x08017f11
 800f64c:	08017f3e 	.word	0x08017f3e
 800f650:	08017f55 	.word	0x08017f55
 800f654:	08017f6c 	.word	0x08017f6c
 800f658:	08017f7f 	.word	0x08017f7f
 800f65c:	08017f91 	.word	0x08017f91
 800f660:	08017fa2 	.word	0x08017fa2
 800f664:	08017fb9 	.word	0x08017fb9

0800f668 <_ZN16LoraWanContainerILi16E6SX126xE15DutyCycleParserEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::DutyCycleParser(void) {
 800f668:	b570      	push	{r4, r5, r6, lr}
  DEBUG_PRINTF("Cmd DutyCycleParser %x \n", MacNwkPayload[NwkPayloadIndex + 1]);
 800f66a:	4d0c      	ldr	r5, [pc, #48]	; (800f69c <_ZN16LoraWanContainerILi16E6SX126xE15DutyCycleParserEv+0x34>)
 800f66c:	4a0c      	ldr	r2, [pc, #48]	; (800f6a0 <_ZN16LoraWanContainerILi16E6SX126xE15DutyCycleParserEv+0x38>)
 800f66e:	5d43      	ldrb	r3, [r0, r5]
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::DutyCycleParser(void) {
 800f670:	0004      	movs	r4, r0
  DEBUG_PRINTF("Cmd DutyCycleParser %x \n", MacNwkPayload[NwkPayloadIndex + 1]);
 800f672:	18c3      	adds	r3, r0, r3
 800f674:	189b      	adds	r3, r3, r2
 800f676:	781a      	ldrb	r2, [r3, #0]
 800f678:	490a      	ldr	r1, [pc, #40]	; (800f6a4 <_ZN16LoraWanContainerILi16E6SX126xE15DutyCycleParserEv+0x3c>)
 800f67a:	2000      	movs	r0, #0
 800f67c:	f7fb f896 	bl	800a7ac <SEGGER_RTT_printf>
  FoptsTxData[FoptsTxLength] = DUTY_CYCLE_ANS; // copy Cid
 800f680:	2190      	movs	r1, #144	; 0x90
 800f682:	2004      	movs	r0, #4
 800f684:	0049      	lsls	r1, r1, #1
 800f686:	5c63      	ldrb	r3, [r4, r1]
 800f688:	18e2      	adds	r2, r4, r3
 800f68a:	3222      	adds	r2, #34	; 0x22
 800f68c:	32ff      	adds	r2, #255	; 0xff
  FoptsTxLength += DUTY_CYCLE_ANS_SIZE;
 800f68e:	3301      	adds	r3, #1
  FoptsTxData[FoptsTxLength] = DUTY_CYCLE_ANS; // copy Cid
 800f690:	7010      	strb	r0, [r2, #0]
  FoptsTxLength += DUTY_CYCLE_ANS_SIZE;
 800f692:	5463      	strb	r3, [r4, r1]
  NwkPayloadIndex += DUTY_CYCLE_REQ_SIZE;
 800f694:	5d63      	ldrb	r3, [r4, r5]
 800f696:	3302      	adds	r3, #2
 800f698:	5563      	strb	r3, [r4, r5]
}
 800f69a:	bd70      	pop	{r4, r5, r6, pc}
 800f69c:	000008cc 	.word	0x000008cc
 800f6a0:	0000027b 	.word	0x0000027b
 800f6a4:	08017fe9 	.word	0x08017fe9

0800f6a8 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv>:
  DEBUG_PRINTF(" Cmd RXParamSetupParser = %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f6a8:	239f      	movs	r3, #159	; 0x9f
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::RXParamSetupParser(void) {
 800f6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ac:	0004      	movs	r4, r0
  DEBUG_PRINTF(" Cmd RXParamSetupParser = %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f6ae:	4e4a      	ldr	r6, [pc, #296]	; (800f7d8 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x130>)
 800f6b0:	4d4a      	ldr	r5, [pc, #296]	; (800f7dc <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x134>)
 800f6b2:	5d81      	ldrb	r1, [r0, r6]
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	1841      	adds	r1, r0, r1
 800f6b8:	4849      	ldr	r0, [pc, #292]	; (800f7e0 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x138>)
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::RXParamSetupParser(void) {
 800f6ba:	b085      	sub	sp, #20
  DEBUG_PRINTF(" Cmd RXParamSetupParser = %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800f6bc:	1808      	adds	r0, r1, r0
 800f6be:	7800      	ldrb	r0, [r0, #0]
 800f6c0:	194a      	adds	r2, r1, r5
 800f6c2:	18cb      	adds	r3, r1, r3
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	7812      	ldrb	r2, [r2, #0]
 800f6c8:	9001      	str	r0, [sp, #4]
 800f6ca:	4846      	ldr	r0, [pc, #280]	; (800f7e4 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x13c>)
 800f6cc:	1809      	adds	r1, r1, r0
 800f6ce:	7809      	ldrb	r1, [r1, #0]
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	9100      	str	r1, [sp, #0]
 800f6d4:	4944      	ldr	r1, [pc, #272]	; (800f7e8 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x140>)
 800f6d6:	f7fb f869 	bl	800a7ac <SEGGER_RTT_printf>
  MacRx1DataRateOffsetTemp = (MacNwkPayload[NwkPayloadIndex + 1] & 0x70) >> 4;
 800f6da:	5da3      	ldrb	r3, [r4, r6]
  status = RegionIsValidRx1DrOffset(MacRx1DataRateOffsetTemp);
 800f6dc:	0020      	movs	r0, r4
  MacRx1DataRateOffsetTemp = (MacNwkPayload[NwkPayloadIndex + 1] & 0x70) >> 4;
 800f6de:	18e3      	adds	r3, r4, r3
 800f6e0:	195b      	adds	r3, r3, r5
 800f6e2:	2507      	movs	r5, #7
 800f6e4:	781f      	ldrb	r7, [r3, #0]
  status = RegionIsValidRx1DrOffset(MacRx1DataRateOffsetTemp);
 800f6e6:	6823      	ldr	r3, [r4, #0]
  MacRx1DataRateOffsetTemp = (MacNwkPayload[NwkPayloadIndex + 1] & 0x70) >> 4;
 800f6e8:	113f      	asrs	r7, r7, #4
 800f6ea:	402f      	ands	r7, r5
  status = RegionIsValidRx1DrOffset(MacRx1DataRateOffsetTemp);
 800f6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ee:	0039      	movs	r1, r7
 800f6f0:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800f6f2:	1c43      	adds	r3, r0, #1
 800f6f4:	d104      	bne.n	800f700 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x58>
    DEBUG_MSG("INVALID RX1DROFFSET \n");
 800f6f6:	493d      	ldr	r1, [pc, #244]	; (800f7ec <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x144>)
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	f7fa fe97 	bl	800a42c <SEGGER_RTT_WriteString>
    StatusAns &= 0x6;
 800f6fe:	3d01      	subs	r5, #1
  MacRx2DataRateTemp = (MacNwkPayload[NwkPayloadIndex + 1] & 0x0F);
 800f700:	5da3      	ldrb	r3, [r4, r6]
 800f702:	4a36      	ldr	r2, [pc, #216]	; (800f7dc <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x134>)
 800f704:	18e3      	adds	r3, r4, r3
 800f706:	189b      	adds	r3, r3, r2
 800f708:	781a      	ldrb	r2, [r3, #0]
 800f70a:	230f      	movs	r3, #15
 800f70c:	401a      	ands	r2, r3
  status = RegionIsValidDataRate(MacRx2DataRateTemp);
 800f70e:	6823      	ldr	r3, [r4, #0]
  MacRx2DataRateTemp = (MacNwkPayload[NwkPayloadIndex + 1] & 0x0F);
 800f710:	9202      	str	r2, [sp, #8]
  status = RegionIsValidDataRate(MacRx2DataRateTemp);
 800f712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f714:	0011      	movs	r1, r2
 800f716:	0020      	movs	r0, r4
 800f718:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800f71a:	1c43      	adds	r3, r0, #1
 800f71c:	d105      	bne.n	800f72a <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x82>
    StatusAns &= 0x5;
 800f71e:	2305      	movs	r3, #5
    DEBUG_MSG("INVALID RX2DR \n");
 800f720:	4933      	ldr	r1, [pc, #204]	; (800f7f0 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x148>)
 800f722:	2000      	movs	r0, #0
    StatusAns &= 0x5;
 800f724:	401d      	ands	r5, r3
    DEBUG_MSG("INVALID RX2DR \n");
 800f726:	f7fa fe81 	bl	800a42c <SEGGER_RTT_WriteString>
  MacRx2FrequencyTemp = (MacNwkPayload[NwkPayloadIndex + 2]) + (MacNwkPayload[NwkPayloadIndex + 3] << 8) + (MacNwkPayload[NwkPayloadIndex + 4] << 16);
 800f72a:	219f      	movs	r1, #159	; 0x9f
 800f72c:	5da3      	ldrb	r3, [r4, r6]
 800f72e:	4a2d      	ldr	r2, [pc, #180]	; (800f7e4 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x13c>)
 800f730:	18e3      	adds	r3, r4, r3
 800f732:	189a      	adds	r2, r3, r2
 800f734:	0089      	lsls	r1, r1, #2
 800f736:	1859      	adds	r1, r3, r1
 800f738:	7812      	ldrb	r2, [r2, #0]
 800f73a:	7809      	ldrb	r1, [r1, #0]
 800f73c:	0212      	lsls	r2, r2, #8
 800f73e:	1852      	adds	r2, r2, r1
 800f740:	4927      	ldr	r1, [pc, #156]	; (800f7e0 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x138>)
  status = RegionIsValidMacRxFrequency(MacRx2FrequencyTemp);
 800f742:	0020      	movs	r0, r4
  MacRx2FrequencyTemp = (MacNwkPayload[NwkPayloadIndex + 2]) + (MacNwkPayload[NwkPayloadIndex + 3] << 8) + (MacNwkPayload[NwkPayloadIndex + 4] << 16);
 800f744:	185b      	adds	r3, r3, r1
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	041b      	lsls	r3, r3, #16
 800f74a:	18d3      	adds	r3, r2, r3
 800f74c:	9303      	str	r3, [sp, #12]
  status = RegionIsValidMacRxFrequency(MacRx2FrequencyTemp);
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	9903      	ldr	r1, [sp, #12]
 800f752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f754:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800f756:	1c43      	adds	r3, r0, #1
 800f758:	d124      	bne.n	800f7a4 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0xfc>
    StatusAns &= 0x3;
 800f75a:	2303      	movs	r3, #3
    DEBUG_MSG("INVALID RX2 FREQUENCY \n");
 800f75c:	4925      	ldr	r1, [pc, #148]	; (800f7f4 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x14c>)
 800f75e:	2000      	movs	r0, #0
    StatusAns &= 0x3;
 800f760:	401d      	ands	r5, r3
    DEBUG_MSG("INVALID RX2 FREQUENCY \n");
 800f762:	f7fa fe63 	bl	800a42c <SEGGER_RTT_WriteString>
  FoptsTxData[FoptsTxLength] = RXPARRAM_SETUP_ANS;
 800f766:	2090      	movs	r0, #144	; 0x90
 800f768:	0040      	lsls	r0, r0, #1
 800f76a:	5c23      	ldrb	r3, [r4, r0]
 800f76c:	2105      	movs	r1, #5
 800f76e:	18e2      	adds	r2, r4, r3
 800f770:	0017      	movs	r7, r2
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800f772:	3223      	adds	r2, #35	; 0x23
  FoptsTxData[FoptsTxLength] = RXPARRAM_SETUP_ANS;
 800f774:	3722      	adds	r7, #34	; 0x22
 800f776:	37ff      	adds	r7, #255	; 0xff
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800f778:	32ff      	adds	r2, #255	; 0xff
  FoptsTxLength = FoptsTxLength + RXPARRAM_SETUP_ANS_SIZE;
 800f77a:	3302      	adds	r3, #2
  FoptsTxData[FoptsTxLength] = RXPARRAM_SETUP_ANS;
 800f77c:	7039      	strb	r1, [r7, #0]
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800f77e:	7015      	strb	r5, [r2, #0]
  FoptsTxLength = FoptsTxLength + RXPARRAM_SETUP_ANS_SIZE;
 800f780:	5423      	strb	r3, [r4, r0]
  FoptsTxDataSticky[FoptsTxLengthSticky] = RXPARRAM_SETUP_ANS;
 800f782:	3010      	adds	r0, #16
 800f784:	5c23      	ldrb	r3, [r4, r0]
 800f786:	18e2      	adds	r2, r4, r3
 800f788:	0017      	movs	r7, r2
  FoptsTxDataSticky[FoptsTxLengthSticky + 1] = StatusAns;
 800f78a:	3233      	adds	r2, #51	; 0x33
  FoptsTxDataSticky[FoptsTxLengthSticky] = RXPARRAM_SETUP_ANS;
 800f78c:	3732      	adds	r7, #50	; 0x32
 800f78e:	37ff      	adds	r7, #255	; 0xff
  FoptsTxDataSticky[FoptsTxLengthSticky + 1] = StatusAns;
 800f790:	32ff      	adds	r2, #255	; 0xff
  FoptsTxLengthSticky += RXPARRAM_SETUP_ANS_SIZE;
 800f792:	3302      	adds	r3, #2
  FoptsTxDataSticky[FoptsTxLengthSticky] = RXPARRAM_SETUP_ANS;
 800f794:	7039      	strb	r1, [r7, #0]
  FoptsTxDataSticky[FoptsTxLengthSticky + 1] = StatusAns;
 800f796:	7015      	strb	r5, [r2, #0]
  FoptsTxLengthSticky += RXPARRAM_SETUP_ANS_SIZE;
 800f798:	5423      	strb	r3, [r4, r0]
  NwkPayloadIndex += RXPARRAM_SETUP_REQ_SIZE;
 800f79a:	5da3      	ldrb	r3, [r4, r6]
 800f79c:	185b      	adds	r3, r3, r1
 800f79e:	55a3      	strb	r3, [r4, r6]
}
 800f7a0:	b005      	add	sp, #20
 800f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(StatusAns == 0x7) {
 800f7a4:	2d07      	cmp	r5, #7
 800f7a6:	d1de      	bne.n	800f766 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0xbe>
    MacRx2DataRate       = MacRx2DataRateTemp;
 800f7a8:	9b02      	ldr	r3, [sp, #8]
    MacRx2Frequency      = MacRx2FrequencyTemp * 100;
 800f7aa:	9a03      	ldr	r2, [sp, #12]
    MacRx2DataRate       = MacRx2DataRateTemp;
 800f7ac:	73a3      	strb	r3, [r4, #14]
    MacRx2Frequency      = MacRx2FrequencyTemp * 100;
 800f7ae:	2364      	movs	r3, #100	; 0x64
 800f7b0:	4353      	muls	r3, r2
    MacRx1DataRateOffset = MacRx1DataRateOffsetTemp;
 800f7b2:	7527      	strb	r7, [r4, #20]
    MacRx2Frequency      = MacRx2FrequencyTemp * 100;
 800f7b4:	6123      	str	r3, [r4, #16]
    DEBUG_PRINTF("MacRx1DataRateOffset = %d\n", MacRx1DataRateOffset);
 800f7b6:	003a      	movs	r2, r7
 800f7b8:	490f      	ldr	r1, [pc, #60]	; (800f7f8 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x150>)
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f7fa fff6 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("MacRx2DataRate = %d\n", MacRx2DataRate);
 800f7c0:	7ba2      	ldrb	r2, [r4, #14]
 800f7c2:	490e      	ldr	r1, [pc, #56]	; (800f7fc <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x154>)
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	f7fa fff1 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("MacRx2Frequency = %d\n", MacRx2Frequency);
 800f7ca:	6922      	ldr	r2, [r4, #16]
 800f7cc:	490c      	ldr	r1, [pc, #48]	; (800f800 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0x158>)
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	f7fa ffec 	bl	800a7ac <SEGGER_RTT_printf>
 800f7d4:	e7c7      	b.n	800f766 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv+0xbe>
 800f7d6:	46c0      	nop			; (mov r8, r8)
 800f7d8:	000008cc 	.word	0x000008cc
 800f7dc:	0000027b 	.word	0x0000027b
 800f7e0:	0000027e 	.word	0x0000027e
 800f7e4:	0000027d 	.word	0x0000027d
 800f7e8:	08018181 	.word	0x08018181
 800f7ec:	080181a9 	.word	0x080181a9
 800f7f0:	080181bf 	.word	0x080181bf
 800f7f4:	080181cf 	.word	0x080181cf
 800f7f8:	080181e7 	.word	0x080181e7
 800f7fc:	08018202 	.word	0x08018202
 800f800:	08017fb9 	.word	0x08017fb9

0800f804 <_ZN16LoraWanContainerILi16E6SX126xE15DevStatusParserEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::DevStatusParser(void) {
 800f804:	b570      	push	{r4, r5, r6, lr}
  DEBUG_MSG("Receive a dev status req\n");
 800f806:	490e      	ldr	r1, [pc, #56]	; (800f840 <_ZN16LoraWanContainerILi16E6SX126xE15DevStatusParserEv+0x3c>)
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::DevStatusParser(void) {
 800f808:	0004      	movs	r4, r0
  DEBUG_MSG("Receive a dev status req\n");
 800f80a:	2000      	movs	r0, #0
 800f80c:	f7fa fe0e 	bl	800a42c <SEGGER_RTT_WriteString>
  FoptsTxData[FoptsTxLength] = DEV_STATUS_ANS; // copy Cid
 800f810:	2190      	movs	r1, #144	; 0x90
 800f812:	0049      	lsls	r1, r1, #1
 800f814:	5c62      	ldrb	r2, [r4, r1]
 800f816:	2506      	movs	r5, #6
 800f818:	18a3      	adds	r3, r4, r2
 800f81a:	0018      	movs	r0, r3
 800f81c:	3022      	adds	r0, #34	; 0x22
 800f81e:	30ff      	adds	r0, #255	; 0xff
 800f820:	7005      	strb	r5, [r0, #0]
  FoptsTxData[FoptsTxLength + 1] = 0;
 800f822:	001d      	movs	r5, r3
 800f824:	2000      	movs	r0, #0
 800f826:	3523      	adds	r5, #35	; 0x23
  FoptsTxData[FoptsTxLength + 2] = 0;
 800f828:	3324      	adds	r3, #36	; 0x24
  FoptsTxData[FoptsTxLength + 1] = 0;
 800f82a:	35ff      	adds	r5, #255	; 0xff
  FoptsTxData[FoptsTxLength + 2] = 0;
 800f82c:	33ff      	adds	r3, #255	; 0xff
  FoptsTxLength += DEV_STATUS_ANS_SIZE;
 800f82e:	3203      	adds	r2, #3
  FoptsTxData[FoptsTxLength + 1] = 0;
 800f830:	7028      	strb	r0, [r5, #0]
  FoptsTxData[FoptsTxLength + 2] = 0;
 800f832:	7018      	strb	r0, [r3, #0]
  FoptsTxLength += DEV_STATUS_ANS_SIZE;
 800f834:	5462      	strb	r2, [r4, r1]
  NwkPayloadIndex += DEV_STATUS_REQ_SIZE;
 800f836:	4a03      	ldr	r2, [pc, #12]	; (800f844 <_ZN16LoraWanContainerILi16E6SX126xE15DevStatusParserEv+0x40>)
 800f838:	5ca3      	ldrb	r3, [r4, r2]
 800f83a:	3301      	adds	r3, #1
 800f83c:	54a3      	strb	r3, [r4, r2]
}
 800f83e:	bd70      	pop	{r4, r5, r6, pc}
 800f840:	08017fcf 	.word	0x08017fcf
 800f844:	000008cc 	.word	0x000008cc

0800f848 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv>:
  DEBUG_PRINTF(" Cmd NewChannelParser = %x %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4], MacNwkPayload[NwkPayloadIndex + 5]);
 800f848:	239f      	movs	r3, #159	; 0x9f
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::NewChannelParser(void) {
 800f84a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f84c:	0004      	movs	r4, r0
  DEBUG_PRINTF(" Cmd NewChannelParser = %x %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4], MacNwkPayload[NwkPayloadIndex + 5]);
 800f84e:	4d62      	ldr	r5, [pc, #392]	; (800f9d8 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x190>)
 800f850:	4e62      	ldr	r6, [pc, #392]	; (800f9dc <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x194>)
 800f852:	5d41      	ldrb	r1, [r0, r5]
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	1841      	adds	r1, r0, r1
 800f858:	4861      	ldr	r0, [pc, #388]	; (800f9e0 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x198>)
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::NewChannelParser(void) {
 800f85a:	b089      	sub	sp, #36	; 0x24
  DEBUG_PRINTF(" Cmd NewChannelParser = %x %x %x %x %x \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4], MacNwkPayload[NwkPayloadIndex + 5]);
 800f85c:	1808      	adds	r0, r1, r0
 800f85e:	7800      	ldrb	r0, [r0, #0]
 800f860:	18cb      	adds	r3, r1, r3
 800f862:	198a      	adds	r2, r1, r6
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	7812      	ldrb	r2, [r2, #0]
 800f868:	9002      	str	r0, [sp, #8]
 800f86a:	485e      	ldr	r0, [pc, #376]	; (800f9e4 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x19c>)
 800f86c:	1808      	adds	r0, r1, r0
 800f86e:	7800      	ldrb	r0, [r0, #0]
 800f870:	9001      	str	r0, [sp, #4]
 800f872:	485d      	ldr	r0, [pc, #372]	; (800f9e8 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1a0>)
 800f874:	1809      	adds	r1, r1, r0
 800f876:	7809      	ldrb	r1, [r1, #0]
 800f878:	2000      	movs	r0, #0
 800f87a:	9100      	str	r1, [sp, #0]
 800f87c:	495b      	ldr	r1, [pc, #364]	; (800f9ec <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1a4>)
 800f87e:	f7fa ff95 	bl	800a7ac <SEGGER_RTT_printf>
  ChannelIndexTemp = MacNwkPayload[NwkPayloadIndex + 1];
 800f882:	5d63      	ldrb	r3, [r4, r5]
  status = RegionIsValidChannelIndex(ChannelIndexTemp);
 800f884:	0020      	movs	r0, r4
  ChannelIndexTemp = MacNwkPayload[NwkPayloadIndex + 1];
 800f886:	18e3      	adds	r3, r4, r3
 800f888:	199b      	adds	r3, r3, r6
 800f88a:	781f      	ldrb	r7, [r3, #0]
  status = RegionIsValidChannelIndex(ChannelIndexTemp);
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	0039      	movs	r1, r7
 800f890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f892:	4798      	blx	r3
 800f894:	9504      	str	r5, [sp, #16]
  uint8_t StatusAns = 0x3; // initilised for ans answer ok
 800f896:	2503      	movs	r5, #3
  if(status == ERRORLORAWAN) {
 800f898:	1c43      	adds	r3, r0, #1
 800f89a:	d104      	bne.n	800f8a6 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x5e>
    DEBUG_MSG("INVALID CHANNEL INDEX \n");
 800f89c:	4954      	ldr	r1, [pc, #336]	; (800f9f0 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1a8>)
 800f89e:	2000      	movs	r0, #0
 800f8a0:	f7fa fdc4 	bl	800a42c <SEGGER_RTT_WriteString>
    StatusAns &= 0x0;
 800f8a4:	2500      	movs	r5, #0
  FrequencyTemp = (MacNwkPayload[NwkPayloadIndex + 2]) + (MacNwkPayload[NwkPayloadIndex + 3] << 8) + (MacNwkPayload[NwkPayloadIndex + 4] << 16);
 800f8a6:	219f      	movs	r1, #159	; 0x9f
 800f8a8:	9b04      	ldr	r3, [sp, #16]
 800f8aa:	4a4f      	ldr	r2, [pc, #316]	; (800f9e8 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1a0>)
 800f8ac:	5ce3      	ldrb	r3, [r4, r3]
 800f8ae:	0089      	lsls	r1, r1, #2
 800f8b0:	18e3      	adds	r3, r4, r3
 800f8b2:	189a      	adds	r2, r3, r2
 800f8b4:	1859      	adds	r1, r3, r1
 800f8b6:	7812      	ldrb	r2, [r2, #0]
 800f8b8:	7809      	ldrb	r1, [r1, #0]
 800f8ba:	0212      	lsls	r2, r2, #8
 800f8bc:	1852      	adds	r2, r2, r1
 800f8be:	4949      	ldr	r1, [pc, #292]	; (800f9e4 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x19c>)
  status = RegionIsValidMacFrequency(FrequencyTemp);
 800f8c0:	0020      	movs	r0, r4
  FrequencyTemp = (MacNwkPayload[NwkPayloadIndex + 2]) + (MacNwkPayload[NwkPayloadIndex + 3] << 8) + (MacNwkPayload[NwkPayloadIndex + 4] << 16);
 800f8c2:	185b      	adds	r3, r3, r1
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	041b      	lsls	r3, r3, #16
 800f8c8:	18d3      	adds	r3, r2, r3
 800f8ca:	9305      	str	r3, [sp, #20]
  status = RegionIsValidMacFrequency(FrequencyTemp);
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	9905      	ldr	r1, [sp, #20]
 800f8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d2:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800f8d4:	1c43      	adds	r3, r0, #1
 800f8d6:	d105      	bne.n	800f8e4 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x9c>
    StatusAns &= 0x2;
 800f8d8:	2302      	movs	r3, #2
    DEBUG_MSG("INVALID FREQUENCY\n");
 800f8da:	4946      	ldr	r1, [pc, #280]	; (800f9f4 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1ac>)
 800f8dc:	2000      	movs	r0, #0
    StatusAns &= 0x2;
 800f8de:	401d      	ands	r5, r3
    DEBUG_MSG("INVALID FREQUENCY\n");
 800f8e0:	f7fa fda4 	bl	800a42c <SEGGER_RTT_WriteString>
  DataRateRangeMinTemp = MacNwkPayload[NwkPayloadIndex + 5] & 0xF;
 800f8e4:	9b04      	ldr	r3, [sp, #16]
 800f8e6:	4a3e      	ldr	r2, [pc, #248]	; (800f9e0 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x198>)
 800f8e8:	5ce3      	ldrb	r3, [r4, r3]
  status = RegionIsValidDataRate(DataRateRangeMinTemp);
 800f8ea:	0020      	movs	r0, r4
  DataRateRangeMinTemp = MacNwkPayload[NwkPayloadIndex + 5] & 0xF;
 800f8ec:	18e3      	adds	r3, r4, r3
 800f8ee:	189b      	adds	r3, r3, r2
 800f8f0:	781a      	ldrb	r2, [r3, #0]
 800f8f2:	230f      	movs	r3, #15
 800f8f4:	401a      	ands	r2, r3
  status = RegionIsValidDataRate(DataRateRangeMinTemp);
 800f8f6:	6823      	ldr	r3, [r4, #0]
  DataRateRangeMinTemp = MacNwkPayload[NwkPayloadIndex + 5] & 0xF;
 800f8f8:	9206      	str	r2, [sp, #24]
  status = RegionIsValidDataRate(DataRateRangeMinTemp);
 800f8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8fc:	0011      	movs	r1, r2
 800f8fe:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800f900:	1c43      	adds	r3, r0, #1
 800f902:	d105      	bne.n	800f910 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0xc8>
    StatusAns &= 0x1;
 800f904:	2301      	movs	r3, #1
    DEBUG_MSG("INVALID DR MIN \n");
 800f906:	493c      	ldr	r1, [pc, #240]	; (800f9f8 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1b0>)
 800f908:	2000      	movs	r0, #0
    StatusAns &= 0x1;
 800f90a:	401d      	ands	r5, r3
    DEBUG_MSG("INVALID DR MIN \n");
 800f90c:	f7fa fd8e 	bl	800a42c <SEGGER_RTT_WriteString>
  DataRateRangeMaxTemp = (MacNwkPayload[NwkPayloadIndex + 5] & 0xF0) >> 4;
 800f910:	9b04      	ldr	r3, [sp, #16]
 800f912:	4a33      	ldr	r2, [pc, #204]	; (800f9e0 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x198>)
 800f914:	5ce3      	ldrb	r3, [r4, r3]
  status = RegionIsValidDataRate(DataRateRangeMaxTemp);
 800f916:	0020      	movs	r0, r4
  DataRateRangeMaxTemp = (MacNwkPayload[NwkPayloadIndex + 5] & 0xF0) >> 4;
 800f918:	18e3      	adds	r3, r4, r3
 800f91a:	189b      	adds	r3, r3, r2
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	091b      	lsrs	r3, r3, #4
 800f920:	9307      	str	r3, [sp, #28]
  status = RegionIsValidDataRate(DataRateRangeMaxTemp);
 800f922:	6823      	ldr	r3, [r4, #0]
 800f924:	9907      	ldr	r1, [sp, #28]
 800f926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f928:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	d124      	bne.n	800f978 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x130>
    StatusAns &= 0x1;
 800f92e:	2301      	movs	r3, #1
    DEBUG_MSG("INVALID DR MAX \n");
 800f930:	4932      	ldr	r1, [pc, #200]	; (800f9fc <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1b4>)
 800f932:	2000      	movs	r0, #0
    StatusAns &= 0x1;
 800f934:	401d      	ands	r5, r3
    DEBUG_MSG("INVALID DR MAX \n");
 800f936:	f7fa fd79 	bl	800a42c <SEGGER_RTT_WriteString>
  if(DataRateRangeMaxTemp < DataRateRangeMinTemp) {
 800f93a:	9b06      	ldr	r3, [sp, #24]
 800f93c:	9a07      	ldr	r2, [sp, #28]
 800f93e:	4293      	cmp	r3, r2
 800f940:	d905      	bls.n	800f94e <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x106>
    StatusAns &= 0x1;
 800f942:	2301      	movs	r3, #1
    DEBUG_MSG("INVALID DR MAX < DR MIN \n");
 800f944:	492e      	ldr	r1, [pc, #184]	; (800fa00 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1b8>)
 800f946:	2000      	movs	r0, #0
    StatusAns &= 0x1;
 800f948:	401d      	ands	r5, r3
    DEBUG_MSG("INVALID DR MAX < DR MIN \n");
 800f94a:	f7fa fd6f 	bl	800a42c <SEGGER_RTT_WriteString>
  FoptsTxData[FoptsTxLength] = NEW_CHANNEL_ANS; // copy Cid
 800f94e:	2190      	movs	r1, #144	; 0x90
 800f950:	0049      	lsls	r1, r1, #1
 800f952:	5c63      	ldrb	r3, [r4, r1]
 800f954:	2607      	movs	r6, #7
 800f956:	18e2      	adds	r2, r4, r3
 800f958:	0010      	movs	r0, r2
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800f95a:	3223      	adds	r2, #35	; 0x23
  FoptsTxData[FoptsTxLength] = NEW_CHANNEL_ANS; // copy Cid
 800f95c:	3022      	adds	r0, #34	; 0x22
 800f95e:	30ff      	adds	r0, #255	; 0xff
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800f960:	32ff      	adds	r2, #255	; 0xff
  FoptsTxLength += NEW_CHANNEL_ANS_SIZE;
 800f962:	3302      	adds	r3, #2
  FoptsTxData[FoptsTxLength] = NEW_CHANNEL_ANS; // copy Cid
 800f964:	7006      	strb	r6, [r0, #0]
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800f966:	7015      	strb	r5, [r2, #0]
  FoptsTxLength += NEW_CHANNEL_ANS_SIZE;
 800f968:	5463      	strb	r3, [r4, r1]
  NwkPayloadIndex += NEW_CHANNEL_REQ_SIZE;
 800f96a:	9b04      	ldr	r3, [sp, #16]
 800f96c:	9a04      	ldr	r2, [sp, #16]
 800f96e:	5ce3      	ldrb	r3, [r4, r3]
 800f970:	3306      	adds	r3, #6
 800f972:	54a3      	strb	r3, [r4, r2]
}
 800f974:	b009      	add	sp, #36	; 0x24
 800f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(DataRateRangeMaxTemp < DataRateRangeMinTemp) {
 800f978:	9b06      	ldr	r3, [sp, #24]
 800f97a:	9a07      	ldr	r2, [sp, #28]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d8e0      	bhi.n	800f942 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0xfa>
  if(StatusAns == 0x3) {
 800f980:	2d03      	cmp	r5, #3
 800f982:	d1e4      	bne.n	800f94e <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x106>
    MacTxFrequency [ChannelIndexTemp] = 100 * FrequencyTemp;
 800f984:	2364      	movs	r3, #100	; 0x64
 800f986:	9a05      	ldr	r2, [sp, #20]
    MacMinDataRateChannel[ChannelIndexTemp] = DataRateRangeMinTemp;
 800f988:	19e6      	adds	r6, r4, r7
    MacTxFrequency [ChannelIndexTemp] = 100 * FrequencyTemp;
 800f98a:	4353      	muls	r3, r2
 800f98c:	00ba      	lsls	r2, r7, #2
 800f98e:	18a2      	adds	r2, r4, r2
 800f990:	6193      	str	r3, [r2, #24]
    MacRx1Frequency[ChannelIndexTemp] = 100 * FrequencyTemp;
 800f992:	6593      	str	r3, [r2, #88]	; 0x58
    MacMinDataRateChannel[ChannelIndexTemp] = DataRateRangeMinTemp;
 800f994:	0032      	movs	r2, r6
 800f996:	9906      	ldr	r1, [sp, #24]
 800f998:	3298      	adds	r2, #152	; 0x98
 800f99a:	7011      	strb	r1, [r2, #0]
    MacMaxDataRateChannel[ChannelIndexTemp] = DataRateRangeMaxTemp;
 800f99c:	9907      	ldr	r1, [sp, #28]
 800f99e:	7411      	strb	r1, [r2, #16]
    if(FrequencyTemp == 0) {
 800f9a0:	9905      	ldr	r1, [sp, #20]
 800f9a2:	3220      	adds	r2, #32
 800f9a4:	2900      	cmp	r1, #0
 800f9a6:	d115      	bne.n	800f9d4 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x18c>
      MacChannelIndexEnabled[ChannelIndexTemp] = CHANNEL_ENABLED;
 800f9a8:	7011      	strb	r1, [r2, #0]
    DEBUG_PRINTF("MacTxFrequency [ %d ] = %d\n", ChannelIndexTemp, MacTxFrequency[ChannelIndexTemp]);
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	003a      	movs	r2, r7
 800f9ae:	4915      	ldr	r1, [pc, #84]	; (800fa04 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1bc>)
 800f9b0:	f7fa fefc 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("MacMinDataRateChannel [ %d ] = %d\n", ChannelIndexTemp, MacMinDataRateChannel[ChannelIndexTemp]);
 800f9b4:	0033      	movs	r3, r6
 800f9b6:	3398      	adds	r3, #152	; 0x98
 800f9b8:	003a      	movs	r2, r7
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	4912      	ldr	r1, [pc, #72]	; (800fa08 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1c0>)
    DEBUG_PRINTF("MacMaxDataRateChannel [ %d ] = %d\n", ChannelIndexTemp, MacMaxDataRateChannel[ChannelIndexTemp]);
 800f9be:	36a8      	adds	r6, #168	; 0xa8
    DEBUG_PRINTF("MacMinDataRateChannel [ %d ] = %d\n", ChannelIndexTemp, MacMinDataRateChannel[ChannelIndexTemp]);
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	f7fa fef3 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("MacMaxDataRateChannel [ %d ] = %d\n", ChannelIndexTemp, MacMaxDataRateChannel[ChannelIndexTemp]);
 800f9c6:	7833      	ldrb	r3, [r6, #0]
 800f9c8:	003a      	movs	r2, r7
 800f9ca:	4910      	ldr	r1, [pc, #64]	; (800fa0c <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x1c4>)
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	f7fa feed 	bl	800a7ac <SEGGER_RTT_printf>
 800f9d2:	e7bc      	b.n	800f94e <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x106>
      MacChannelIndexEnabled[ChannelIndexTemp] = CHANNEL_ENABLED;
 800f9d4:	2101      	movs	r1, #1
 800f9d6:	e7e7      	b.n	800f9a8 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv+0x160>
 800f9d8:	000008cc 	.word	0x000008cc
 800f9dc:	0000027b 	.word	0x0000027b
 800f9e0:	0000027f 	.word	0x0000027f
 800f9e4:	0000027e 	.word	0x0000027e
 800f9e8:	0000027d 	.word	0x0000027d
 800f9ec:	0801808f 	.word	0x0801808f
 800f9f0:	080180b8 	.word	0x080180b8
 800f9f4:	080180d0 	.word	0x080180d0
 800f9f8:	080180e3 	.word	0x080180e3
 800f9fc:	080180f4 	.word	0x080180f4
 800fa00:	08018105 	.word	0x08018105
 800fa04:	0801811f 	.word	0x0801811f
 800fa08:	0801813b 	.word	0x0801813b
 800fa0c:	0801815e 	.word	0x0801815e

0800fa10 <_ZN16LoraWanContainerILi16E6SX126xE19RXTimingSetupParserEv>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::RXTimingSetupParser(void) {
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	0004      	movs	r4, r0
  DEBUG_PRINTF("Cmd RXTimingSetupParser = %x \n", MacNwkPayload[NwkPayloadIndex + 1]);
 800fa14:	4d13      	ldr	r5, [pc, #76]	; (800fa64 <_ZN16LoraWanContainerILi16E6SX126xE19RXTimingSetupParserEv+0x54>)
 800fa16:	4e14      	ldr	r6, [pc, #80]	; (800fa68 <_ZN16LoraWanContainerILi16E6SX126xE19RXTimingSetupParserEv+0x58>)
 800fa18:	5d43      	ldrb	r3, [r0, r5]
 800fa1a:	4914      	ldr	r1, [pc, #80]	; (800fa6c <_ZN16LoraWanContainerILi16E6SX126xE19RXTimingSetupParserEv+0x5c>)
 800fa1c:	18c3      	adds	r3, r0, r3
 800fa1e:	199b      	adds	r3, r3, r6
 800fa20:	781a      	ldrb	r2, [r3, #0]
 800fa22:	2000      	movs	r0, #0
 800fa24:	f7fa fec2 	bl	800a7ac <SEGGER_RTT_printf>
  MacRx1Delay = (MacNwkPayload[NwkPayloadIndex + 1] & 0xF);
 800fa28:	0021      	movs	r1, r4
 800fa2a:	200f      	movs	r0, #15
 800fa2c:	5d63      	ldrb	r3, [r4, r5]
 800fa2e:	31c8      	adds	r1, #200	; 0xc8
 800fa30:	18e2      	adds	r2, r4, r3
 800fa32:	1992      	adds	r2, r2, r6
 800fa34:	7812      	ldrb	r2, [r2, #0]
  FoptsTxData[FoptsTxLength] = RXTIMING_SETUP_ANS;
 800fa36:	3e5c      	subs	r6, #92	; 0x5c
  MacRx1Delay = (MacNwkPayload[NwkPayloadIndex + 1] & 0xF);
 800fa38:	4002      	ands	r2, r0
 800fa3a:	600a      	str	r2, [r1, #0]
  FoptsTxData[FoptsTxLength] = RXTIMING_SETUP_ANS;
 800fa3c:	3eff      	subs	r6, #255	; 0xff
 800fa3e:	5da2      	ldrb	r2, [r4, r6]
 800fa40:	3807      	subs	r0, #7
 800fa42:	18a1      	adds	r1, r4, r2
 800fa44:	3122      	adds	r1, #34	; 0x22
 800fa46:	31ff      	adds	r1, #255	; 0xff
  FoptsTxLength += RXTIMING_SETUP_ANS_SIZE;
 800fa48:	3201      	adds	r2, #1
  FoptsTxData[FoptsTxLength] = RXTIMING_SETUP_ANS;
 800fa4a:	7008      	strb	r0, [r1, #0]
  FoptsTxLength += RXTIMING_SETUP_ANS_SIZE;
 800fa4c:	55a2      	strb	r2, [r4, r6]
  FoptsTxDataSticky[FoptsTxLengthSticky] = RXTIMING_SETUP_ANS;
 800fa4e:	3610      	adds	r6, #16
 800fa50:	5da2      	ldrb	r2, [r4, r6]
  NwkPayloadIndex += RXTIMING_SETUP_REQ_SIZE;
 800fa52:	3302      	adds	r3, #2
  FoptsTxDataSticky[FoptsTxLengthSticky] = RXTIMING_SETUP_ANS;
 800fa54:	18a1      	adds	r1, r4, r2
 800fa56:	3132      	adds	r1, #50	; 0x32
 800fa58:	31ff      	adds	r1, #255	; 0xff
  FoptsTxLengthSticky += RXTIMING_SETUP_ANS_SIZE;
 800fa5a:	3201      	adds	r2, #1
  FoptsTxDataSticky[FoptsTxLengthSticky] = RXTIMING_SETUP_ANS;
 800fa5c:	7008      	strb	r0, [r1, #0]
  FoptsTxLengthSticky += RXTIMING_SETUP_ANS_SIZE;
 800fa5e:	55a2      	strb	r2, [r4, r6]
  NwkPayloadIndex += RXTIMING_SETUP_REQ_SIZE;
 800fa60:	5563      	strb	r3, [r4, r5]
}
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	000008cc 	.word	0x000008cc
 800fa68:	0000027b 	.word	0x0000027b
 800fa6c:	08018256 	.word	0x08018256

0800fa70 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv>:
  DEBUG_PRINTF("Cmd DicChannelParser = %x %x %x %x  \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800fa70:	239f      	movs	r3, #159	; 0x9f
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::DicChannelParser(void) {
 800fa72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa74:	0004      	movs	r4, r0
  DEBUG_PRINTF("Cmd DicChannelParser = %x %x %x %x  \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800fa76:	4d37      	ldr	r5, [pc, #220]	; (800fb54 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xe4>)
 800fa78:	4e37      	ldr	r6, [pc, #220]	; (800fb58 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xe8>)
 800fa7a:	5d41      	ldrb	r1, [r0, r5]
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	1841      	adds	r1, r0, r1
 800fa80:	4836      	ldr	r0, [pc, #216]	; (800fb5c <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xec>)
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::DicChannelParser(void) {
 800fa82:	b085      	sub	sp, #20
  DEBUG_PRINTF("Cmd DicChannelParser = %x %x %x %x  \n", MacNwkPayload[NwkPayloadIndex + 1], MacNwkPayload[NwkPayloadIndex + 2], MacNwkPayload[NwkPayloadIndex + 3], MacNwkPayload[NwkPayloadIndex + 4]);
 800fa84:	1808      	adds	r0, r1, r0
 800fa86:	7800      	ldrb	r0, [r0, #0]
 800fa88:	198a      	adds	r2, r1, r6
 800fa8a:	18cb      	adds	r3, r1, r3
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	7812      	ldrb	r2, [r2, #0]
 800fa90:	9001      	str	r0, [sp, #4]
 800fa92:	4833      	ldr	r0, [pc, #204]	; (800fb60 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xf0>)
 800fa94:	1809      	adds	r1, r1, r0
 800fa96:	7809      	ldrb	r1, [r1, #0]
 800fa98:	2000      	movs	r0, #0
 800fa9a:	9100      	str	r1, [sp, #0]
 800fa9c:	4931      	ldr	r1, [pc, #196]	; (800fb64 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xf4>)
 800fa9e:	f7fa fe85 	bl	800a7ac <SEGGER_RTT_printf>
  ChannelIndexTemp = MacNwkPayload[NwkPayloadIndex + 1];
 800faa2:	5d63      	ldrb	r3, [r4, r5]
 800faa4:	18e3      	adds	r3, r4, r3
 800faa6:	199b      	adds	r3, r3, r6
 800faa8:	781b      	ldrb	r3, [r3, #0]
  uint8_t StatusAns = 0x3; // initilised for ans answer ok
 800faaa:	2603      	movs	r6, #3
 800faac:	009f      	lsls	r7, r3, #2
 800faae:	19e7      	adds	r7, r4, r7
  if(MacTxFrequency[ChannelIndexTemp] == 0) {
 800fab0:	69b8      	ldr	r0, [r7, #24]
  ChannelIndexTemp = MacNwkPayload[NwkPayloadIndex + 1];
 800fab2:	9302      	str	r3, [sp, #8]
  if(MacTxFrequency[ChannelIndexTemp] == 0) {
 800fab4:	2800      	cmp	r0, #0
 800fab6:	d103      	bne.n	800fac0 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0x50>
    DEBUG_MSG("INVALID CHANNEL INDEX \n");
 800fab8:	492b      	ldr	r1, [pc, #172]	; (800fb68 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xf8>)
 800faba:	f7fa fcb7 	bl	800a42c <SEGGER_RTT_WriteString>
    StatusAns &= 0x1;
 800fabe:	3e02      	subs	r6, #2
  FrequencyTemp = (MacNwkPayload[NwkPayloadIndex + 2]) + (MacNwkPayload[NwkPayloadIndex + 3] << 8) + (MacNwkPayload[NwkPayloadIndex + 4] << 16);
 800fac0:	219f      	movs	r1, #159	; 0x9f
 800fac2:	5d62      	ldrb	r2, [r4, r5]
 800fac4:	4b26      	ldr	r3, [pc, #152]	; (800fb60 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xf0>)
 800fac6:	18a2      	adds	r2, r4, r2
 800fac8:	18d3      	adds	r3, r2, r3
 800faca:	0089      	lsls	r1, r1, #2
 800facc:	1851      	adds	r1, r2, r1
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	7809      	ldrb	r1, [r1, #0]
 800fad2:	021b      	lsls	r3, r3, #8
 800fad4:	185b      	adds	r3, r3, r1
 800fad6:	4921      	ldr	r1, [pc, #132]	; (800fb5c <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xec>)
  status = RegionIsValidMacRxFrequency(FrequencyTemp);
 800fad8:	0020      	movs	r0, r4
  FrequencyTemp = (MacNwkPayload[NwkPayloadIndex + 2]) + (MacNwkPayload[NwkPayloadIndex + 3] << 8) + (MacNwkPayload[NwkPayloadIndex + 4] << 16);
 800fada:	1852      	adds	r2, r2, r1
 800fadc:	7812      	ldrb	r2, [r2, #0]
 800fade:	0412      	lsls	r2, r2, #16
 800fae0:	189b      	adds	r3, r3, r2
 800fae2:	9303      	str	r3, [sp, #12]
  status = RegionIsValidMacRxFrequency(FrequencyTemp);
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	9903      	ldr	r1, [sp, #12]
 800fae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faea:	4798      	blx	r3
  if(status == ERRORLORAWAN) {
 800faec:	1c43      	adds	r3, r0, #1
 800faee:	d124      	bne.n	800fb3a <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xca>
    StatusAns &= 0x2;
 800faf0:	2302      	movs	r3, #2
    DEBUG_MSG("INVALID FREQUENCY\n");
 800faf2:	491e      	ldr	r1, [pc, #120]	; (800fb6c <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0xfc>)
 800faf4:	2000      	movs	r0, #0
    StatusAns &= 0x2;
 800faf6:	401e      	ands	r6, r3
    DEBUG_MSG("INVALID FREQUENCY\n");
 800faf8:	f7fa fc98 	bl	800a42c <SEGGER_RTT_WriteString>
  FoptsTxData[FoptsTxLength]     = DIC_CHANNEL_ANS;
 800fafc:	2090      	movs	r0, #144	; 0x90
 800fafe:	0040      	lsls	r0, r0, #1
 800fb00:	5c23      	ldrb	r3, [r4, r0]
 800fb02:	210a      	movs	r1, #10
 800fb04:	18e2      	adds	r2, r4, r3
 800fb06:	0017      	movs	r7, r2
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800fb08:	3223      	adds	r2, #35	; 0x23
  FoptsTxData[FoptsTxLength]     = DIC_CHANNEL_ANS;
 800fb0a:	3722      	adds	r7, #34	; 0x22
 800fb0c:	37ff      	adds	r7, #255	; 0xff
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800fb0e:	32ff      	adds	r2, #255	; 0xff
  FoptsTxLength += DIC_CHANNEL_ANS_SIZE;
 800fb10:	3302      	adds	r3, #2
  FoptsTxData[FoptsTxLength]     = DIC_CHANNEL_ANS;
 800fb12:	7039      	strb	r1, [r7, #0]
  FoptsTxData[FoptsTxLength + 1] = StatusAns;
 800fb14:	7016      	strb	r6, [r2, #0]
  FoptsTxLength += DIC_CHANNEL_ANS_SIZE;
 800fb16:	5423      	strb	r3, [r4, r0]
  FoptsTxDataSticky[FoptsTxLengthSticky]     = DIC_CHANNEL_ANS;
 800fb18:	3010      	adds	r0, #16
 800fb1a:	5c23      	ldrb	r3, [r4, r0]
 800fb1c:	18e2      	adds	r2, r4, r3
 800fb1e:	0017      	movs	r7, r2
  FoptsTxDataSticky[FoptsTxLengthSticky + 1] = StatusAns;
 800fb20:	3233      	adds	r2, #51	; 0x33
  FoptsTxDataSticky[FoptsTxLengthSticky]     = DIC_CHANNEL_ANS;
 800fb22:	3732      	adds	r7, #50	; 0x32
 800fb24:	37ff      	adds	r7, #255	; 0xff
  FoptsTxDataSticky[FoptsTxLengthSticky + 1] = StatusAns;
 800fb26:	32ff      	adds	r2, #255	; 0xff
  FoptsTxLengthSticky += DIC_CHANNEL_ANS_SIZE;
 800fb28:	3302      	adds	r3, #2
  FoptsTxDataSticky[FoptsTxLengthSticky]     = DIC_CHANNEL_ANS;
 800fb2a:	7039      	strb	r1, [r7, #0]
  FoptsTxDataSticky[FoptsTxLengthSticky + 1] = StatusAns;
 800fb2c:	7016      	strb	r6, [r2, #0]
  FoptsTxLengthSticky += DIC_CHANNEL_ANS_SIZE;
 800fb2e:	5423      	strb	r3, [r4, r0]
  NwkPayloadIndex += DIC_CHANNEL_REQ_SIZE;
 800fb30:	5d63      	ldrb	r3, [r4, r5]
 800fb32:	3305      	adds	r3, #5
 800fb34:	5563      	strb	r3, [r4, r5]
}
 800fb36:	b005      	add	sp, #20
 800fb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(StatusAns == 0x3) {
 800fb3a:	2e03      	cmp	r6, #3
 800fb3c:	d1de      	bne.n	800fafc <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0x8c>
    MacRx1Frequency[ChannelIndexTemp] = 100 * FrequencyTemp;
 800fb3e:	2364      	movs	r3, #100	; 0x64
 800fb40:	9a03      	ldr	r2, [sp, #12]
    DEBUG_PRINTF("MacRxAFrequency [ %d ] = %d\n", ChannelIndexTemp, MacRx1Frequency[ChannelIndexTemp]);
 800fb42:	490b      	ldr	r1, [pc, #44]	; (800fb70 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0x100>)
    MacRx1Frequency[ChannelIndexTemp] = 100 * FrequencyTemp;
 800fb44:	4353      	muls	r3, r2
    DEBUG_PRINTF("MacRxAFrequency [ %d ] = %d\n", ChannelIndexTemp, MacRx1Frequency[ChannelIndexTemp]);
 800fb46:	2000      	movs	r0, #0
    MacRx1Frequency[ChannelIndexTemp] = 100 * FrequencyTemp;
 800fb48:	65bb      	str	r3, [r7, #88]	; 0x58
    DEBUG_PRINTF("MacRxAFrequency [ %d ] = %d\n", ChannelIndexTemp, MacRx1Frequency[ChannelIndexTemp]);
 800fb4a:	9a02      	ldr	r2, [sp, #8]
 800fb4c:	f7fa fe2e 	bl	800a7ac <SEGGER_RTT_printf>
 800fb50:	e7d4      	b.n	800fafc <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv+0x8c>
 800fb52:	46c0      	nop			; (mov r8, r8)
 800fb54:	000008cc 	.word	0x000008cc
 800fb58:	0000027b 	.word	0x0000027b
 800fb5c:	0000027e 	.word	0x0000027e
 800fb60:	0000027d 	.word	0x0000027d
 800fb64:	0801804c 	.word	0x0801804c
 800fb68:	080180b8 	.word	0x080180b8
 800fb6c:	080180d0 	.word	0x080180d0
 800fb70:	08018072 	.word	0x08018072

0800fb74 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv>:
  NwkPayloadIndex = 0;
 800fb74:	2300      	movs	r3, #0
template <int NBCHANNEL, class R> eStatusLoRaWan LoraWanContainer<NBCHANNEL, R>::ParseManagementPacket(void) {
 800fb76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  MacNwkAnsSize = 0;
 800fb78:	4a44      	ldr	r2, [pc, #272]	; (800fc8c <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x118>)
  NwkPayloadIndex = 0;
 800fb7a:	4e45      	ldr	r6, [pc, #276]	; (800fc90 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x11c>)
template <int NBCHANNEL, class R> eStatusLoRaWan LoraWanContainer<NBCHANNEL, R>::ParseManagementPacket(void) {
 800fb7c:	0004      	movs	r4, r0
  NwkPayloadIndex = 0;
 800fb7e:	5583      	strb	r3, [r0, r6]
  MacNwkAnsSize = 0;
 800fb80:	5483      	strb	r3, [r0, r2]
  FoptsTxLength = 0;
 800fb82:	2290      	movs	r2, #144	; 0x90
  FoptsTxLengthSticky = 0;
 800fb84:	2510      	movs	r5, #16
  FoptsTxLength = 0;
 800fb86:	0052      	lsls	r2, r2, #1
 800fb88:	5483      	strb	r3, [r0, r2]
  FoptsTxLengthSticky = 0;
 800fb8a:	3210      	adds	r2, #16
 800fb8c:	5483      	strb	r3, [r0, r2]
  while((MacNwkPayloadSize > NwkPayloadIndex) && (MaxCmdNum > 0)) { //@note MacNwkPayloadSize and MacNwkPayload[0] are updated in Parser's method
 800fb8e:	4a41      	ldr	r2, [pc, #260]	; (800fc94 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x120>)
 800fb90:	5da3      	ldrb	r3, [r4, r6]
 800fb92:	5ca1      	ldrb	r1, [r4, r2]
 800fb94:	9201      	str	r2, [sp, #4]
 800fb96:	4299      	cmp	r1, r3
 800fb98:	d800      	bhi.n	800fb9c <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x28>
 800fb9a:	e075      	b.n	800fc88 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x114>
 800fb9c:	3d01      	subs	r5, #1
 800fb9e:	b2ed      	uxtb	r5, r5
    if(MaxCmdNum == 0) {
 800fba0:	2d00      	cmp	r5, #0
 800fba2:	d106      	bne.n	800fbb2 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x3e>
      InsertTrace(__COUNTER__, FileId);
 800fba4:	2007      	movs	r0, #7
 800fba6:	2102      	movs	r1, #2
 800fba8:	f001 ff70 	bl	8011a8c <_Z11InsertTracehh>
      return (ERRORLORAWAN);
 800fbac:	2001      	movs	r0, #1
 800fbae:	4240      	negs	r0, r0
}
 800fbb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    CmdIdentifier = MacNwkPayload[NwkPayloadIndex];
 800fbb2:	4a39      	ldr	r2, [pc, #228]	; (800fc98 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x124>)
 800fbb4:	18e3      	adds	r3, r4, r3
 800fbb6:	189b      	adds	r3, r3, r2
    switch(CmdIdentifier) {
 800fbb8:	7818      	ldrb	r0, [r3, #0]
      InsertTrace(__COUNTER__, FileId);
 800fbba:	2102      	movs	r1, #2
    switch(CmdIdentifier) {
 800fbbc:	3802      	subs	r0, #2
 800fbbe:	2808      	cmp	r0, #8
 800fbc0:	d85a      	bhi.n	800fc78 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x104>
 800fbc2:	f7f8 fab3 	bl	800812c <__gnu_thumb1_case_uqi>
 800fbc6:	0c05      	.short	0x0c05
 800fbc8:	443d322b 	.word	0x443d322b
 800fbcc:	594b      	.short	0x594b
 800fbce:	52          	.byte	0x52
 800fbcf:	00          	.byte	0x00
      InsertTrace(__COUNTER__, FileId);
 800fbd0:	2008      	movs	r0, #8
 800fbd2:	f001 ff5b 	bl	8011a8c <_Z11InsertTracehh>
      LinkCheckParser();
 800fbd6:	0020      	movs	r0, r4
 800fbd8:	f7ff fc34 	bl	800f444 <_ZN16LoraWanContainerILi16E6SX126xE15LinkCheckParserEv>
      break;
 800fbdc:	e7d7      	b.n	800fb8e <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x1a>
      InsertTrace(__COUNTER__, FileId);
 800fbde:	2009      	movs	r0, #9
 800fbe0:	f001 ff54 	bl	8011a8c <_Z11InsertTracehh>
      NbMultiLinkAdrReq = 0;
 800fbe4:	2700      	movs	r7, #0
      while((MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq + 1) * LINK_ADR_REQ_SIZE ] == LINK_ADR_REQ) && (NwkPayloadIndex + LINK_ADR_REQ_SIZE < MacNwkPayloadSize)) {
 800fbe6:	2305      	movs	r3, #5
 800fbe8:	1c79      	adds	r1, r7, #1
 800fbea:	434b      	muls	r3, r1
 800fbec:	5da2      	ldrb	r2, [r4, r6]
 800fbee:	18e3      	adds	r3, r4, r3
 800fbf0:	4829      	ldr	r0, [pc, #164]	; (800fc98 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x124>)
 800fbf2:	189b      	adds	r3, r3, r2
 800fbf4:	181b      	adds	r3, r3, r0
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	2b03      	cmp	r3, #3
 800fbfa:	d10a      	bne.n	800fc12 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x9e>
 800fbfc:	9b01      	ldr	r3, [sp, #4]
 800fbfe:	3205      	adds	r2, #5
 800fc00:	5ce3      	ldrb	r3, [r4, r3]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	da05      	bge.n	800fc12 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x9e>
        NbMultiLinkAdrReq++;
 800fc06:	b2cf      	uxtb	r7, r1
        InsertTrace(__COUNTER__, FileId);
 800fc08:	200a      	movs	r0, #10
 800fc0a:	2102      	movs	r1, #2
 800fc0c:	f001 ff3e 	bl	8011a8c <_Z11InsertTracehh>
      while((MacNwkPayload[NwkPayloadIndex + (NbMultiLinkAdrReq + 1) * LINK_ADR_REQ_SIZE ] == LINK_ADR_REQ) && (NwkPayloadIndex + LINK_ADR_REQ_SIZE < MacNwkPayloadSize)) {
 800fc10:	e7e9      	b.n	800fbe6 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x72>
      LinkADRParser(NbMultiLinkAdrReq);
 800fc12:	0039      	movs	r1, r7
 800fc14:	0020      	movs	r0, r4
 800fc16:	f7ff fc2f 	bl	800f478 <_ZN16LoraWanContainerILi16E6SX126xE13LinkADRParserEh>
      break;
 800fc1a:	e7b8      	b.n	800fb8e <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x1a>
      InsertTrace(__COUNTER__, FileId);
 800fc1c:	200b      	movs	r0, #11
 800fc1e:	f001 ff35 	bl	8011a8c <_Z11InsertTracehh>
      DutyCycleParser(); // @note send answer but do nothing
 800fc22:	0020      	movs	r0, r4
 800fc24:	f7ff fd20 	bl	800f668 <_ZN16LoraWanContainerILi16E6SX126xE15DutyCycleParserEv>
      break;
 800fc28:	e7b1      	b.n	800fb8e <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x1a>
      InsertTrace(__COUNTER__, FileId);
 800fc2a:	200c      	movs	r0, #12
 800fc2c:	f001 ff2e 	bl	8011a8c <_Z11InsertTracehh>
      RXParamSetupParser();
 800fc30:	0020      	movs	r0, r4
 800fc32:	f7ff fd39 	bl	800f6a8 <_ZN16LoraWanContainerILi16E6SX126xE18RXParamSetupParserEv>
      RegionSaveInFlash();
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	0020      	movs	r0, r4
 800fc3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc3c:	4798      	blx	r3
      break;
 800fc3e:	e7a6      	b.n	800fb8e <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x1a>
      InsertTrace(__COUNTER__, FileId);
 800fc40:	200d      	movs	r0, #13
 800fc42:	f001 ff23 	bl	8011a8c <_Z11InsertTracehh>
      DevStatusParser(); // @note  Done but margin have no sense tb implemented
 800fc46:	0020      	movs	r0, r4
 800fc48:	f7ff fddc 	bl	800f804 <_ZN16LoraWanContainerILi16E6SX126xE15DevStatusParserEv>
      break;
 800fc4c:	e79f      	b.n	800fb8e <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x1a>
      InsertTrace(__COUNTER__, FileId);
 800fc4e:	200e      	movs	r0, #14
 800fc50:	f001 ff1c 	bl	8011a8c <_Z11InsertTracehh>
      NewChannelParser();
 800fc54:	0020      	movs	r0, r4
 800fc56:	f7ff fdf7 	bl	800f848 <_ZN16LoraWanContainerILi16E6SX126xE16NewChannelParserEv>
 800fc5a:	e7ec      	b.n	800fc36 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0xc2>
      InsertTrace(__COUNTER__, FileId);
 800fc5c:	200f      	movs	r0, #15
 800fc5e:	f001 ff15 	bl	8011a8c <_Z11InsertTracehh>
      RXTimingSetupParser();
 800fc62:	0020      	movs	r0, r4
 800fc64:	f7ff fed4 	bl	800fa10 <_ZN16LoraWanContainerILi16E6SX126xE19RXTimingSetupParserEv>
 800fc68:	e7e5      	b.n	800fc36 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0xc2>
      InsertTrace(__COUNTER__, FileId);
 800fc6a:	2010      	movs	r0, #16
 800fc6c:	f001 ff0e 	bl	8011a8c <_Z11InsertTracehh>
      DicChannelParser();
 800fc70:	0020      	movs	r0, r4
 800fc72:	f7ff fefd 	bl	800fa70 <_ZN16LoraWanContainerILi16E6SX126xE16DicChannelParserEv>
 800fc76:	e7de      	b.n	800fc36 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0xc2>
      InsertTrace(__COUNTER__, FileId);
 800fc78:	2011      	movs	r0, #17
 800fc7a:	f001 ff07 	bl	8011a8c <_Z11InsertTracehh>
      DEBUG_MSG(" Illegal state in mac layer\n ");
 800fc7e:	4907      	ldr	r1, [pc, #28]	; (800fc9c <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x128>)
 800fc80:	2000      	movs	r0, #0
 800fc82:	f7fa fbd3 	bl	800a42c <SEGGER_RTT_WriteString>
      break;
 800fc86:	e782      	b.n	800fb8e <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x1a>
  return (status);
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e791      	b.n	800fbb0 <_ZN16LoraWanContainerILi16E6SX126xE21ParseManagementPacketEv+0x3c>
 800fc8c:	00000479 	.word	0x00000479
 800fc90:	000008cc 	.word	0x000008cc
 800fc94:	00000379 	.word	0x00000379
 800fc98:	0000027a 	.word	0x0000027a
 800fc9c:	0801830b 	.word	0x0801830b

0800fca0 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ComputeRxWindowParameters(uint8_t SF, eBandWidth BW, uint32_t ClockAccuracy, uint32_t RxDelayMs, uint8_t BoardDelayRxMs) {
 800fca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca2:	b085      	sub	sp, #20
 800fca4:	9301      	str	r3, [sp, #4]
 800fca6:	ab0a      	add	r3, sp, #40	; 0x28
 800fca8:	0014      	movs	r4, r2
 800fcaa:	cb04      	ldmia	r3!, {r2}
 800fcac:	9000      	str	r0, [sp, #0]
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	000e      	movs	r6, r1
  InsertTrace(__COUNTER__, FileId);
 800fcb2:	2018      	movs	r0, #24
 800fcb4:	2102      	movs	r1, #2
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ComputeRxWindowParameters(uint8_t SF, eBandWidth BW, uint32_t ClockAccuracy, uint32_t RxDelayMs, uint8_t BoardDelayRxMs) {
 800fcb6:	9202      	str	r2, [sp, #8]
 800fcb8:	9303      	str	r3, [sp, #12]
  InsertTrace(__COUNTER__, FileId);
 800fcba:	f001 fee7 	bl	8011a8c <_Z11InsertTracehh>
  if(MacTxModulationCurrent == LORA) {
 800fcbe:	4b3a      	ldr	r3, [pc, #232]	; (800fda8 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x108>)
 800fcc0:	9a00      	ldr	r2, [sp, #0]
 800fcc2:	5cd3      	ldrb	r3, [r2, r3]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d169      	bne.n	800fd9c <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0xfc>
    double tSymbol = (double)(1 << SF) / (double) bwTemp;
 800fcc8:	2001      	movs	r0, #1
    int bwTemp = 125 * (BW + 1);
 800fcca:	277d      	movs	r7, #125	; 0x7d
    double tSymbol = (double)(1 << SF) / (double) bwTemp;
 800fccc:	40b0      	lsls	r0, r6
 800fcce:	f7fa fa41 	bl	800a154 <__aeabi_i2d>
    int bwTemp = 125 * (BW + 1);
 800fcd2:	3401      	adds	r4, #1
 800fcd4:	4367      	muls	r7, r4
    double tSymbol = (double)(1 << SF) / (double) bwTemp;
 800fcd6:	0004      	movs	r4, r0
 800fcd8:	0038      	movs	r0, r7
 800fcda:	000d      	movs	r5, r1
 800fcdc:	f7fa fa3a 	bl	800a154 <__aeabi_i2d>
 800fce0:	0002      	movs	r2, r0
 800fce2:	000b      	movs	r3, r1
 800fce4:	0020      	movs	r0, r4
 800fce6:	0029      	movs	r1, r5
 800fce8:	f7f9 f83a 	bl	8008d60 <__aeabi_ddiv>
 800fcec:	000d      	movs	r5, r1
 800fcee:	0004      	movs	r4, r0
    Phy.SymbolDuration = (uint32_t)tSymbol;
 800fcf0:	f7f8 fc3a 	bl	8008568 <__aeabi_d2uiz>
  uint32_t RxErrorMs = (ClockAccuracy * RxDelayMs) / 1000; // for example with an clockaccuracy = 30 (3%) and a rx windows set to 5s => rxerror = 150 ms
 800fcf4:	21fa      	movs	r1, #250	; 0xfa
    Phy.SymbolDuration = (uint32_t)tSymbol;
 800fcf6:	4b2d      	ldr	r3, [pc, #180]	; (800fdac <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x10c>)
 800fcf8:	9a00      	ldr	r2, [sp, #0]
  uint32_t RxErrorMs = (ClockAccuracy * RxDelayMs) / 1000; // for example with an clockaccuracy = 30 (3%) and a rx windows set to 5s => rxerror = 150 ms
 800fcfa:	0089      	lsls	r1, r1, #2
    Phy.SymbolDuration = (uint32_t)tSymbol;
 800fcfc:	50d0      	str	r0, [r2, r3]
  uint32_t RxErrorMs = (ClockAccuracy * RxDelayMs) / 1000; // for example with an clockaccuracy = 30 (3%) and a rx windows set to 5s => rxerror = 150 ms
 800fcfe:	9b01      	ldr	r3, [sp, #4]
 800fd00:	9802      	ldr	r0, [sp, #8]
 800fd02:	4358      	muls	r0, r3
 800fd04:	f7f8 fa26 	bl	8008154 <__udivsi3>
 800fd08:	0003      	movs	r3, r0
    MacRxWindowSymb = (uint16_t)(MAX((2 * minRxSymbols - 8) + (2 * RxErrorMs * bwTemp >> SF) + 1, minRxSymbols));
 800fd0a:	0078      	lsls	r0, r7, #1
 800fd0c:	4358      	muls	r0, r3
 800fd0e:	40f0      	lsrs	r0, r6
 800fd10:	3005      	adds	r0, #5
 800fd12:	2806      	cmp	r0, #6
 800fd14:	d200      	bcs.n	800fd18 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x78>
 800fd16:	2006      	movs	r0, #6
 800fd18:	238d      	movs	r3, #141	; 0x8d
 800fd1a:	9a00      	ldr	r2, [sp, #0]
 800fd1c:	011b      	lsls	r3, r3, #4
 800fd1e:	52d0      	strh	r0, [r2, r3]
    RxOffsetMs = (int32_t)((ceil((4.0 * tSymbol) - ((MacRxWindowSymb * tSymbol) / 2.0) - BoardDelayRxMs)) * (-1));
 800fd20:	b280      	uxth	r0, r0
 800fd22:	f7fa fa17 	bl	800a154 <__aeabi_i2d>
 800fd26:	0022      	movs	r2, r4
 800fd28:	002b      	movs	r3, r5
 800fd2a:	f7f9 fc23 	bl	8009574 <__aeabi_dmul>
 800fd2e:	2200      	movs	r2, #0
 800fd30:	0006      	movs	r6, r0
 800fd32:	000f      	movs	r7, r1
 800fd34:	4b1e      	ldr	r3, [pc, #120]	; (800fdb0 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x110>)
 800fd36:	0020      	movs	r0, r4
 800fd38:	0029      	movs	r1, r5
 800fd3a:	f7f9 fc1b 	bl	8009574 <__aeabi_dmul>
 800fd3e:	2200      	movs	r2, #0
 800fd40:	0004      	movs	r4, r0
 800fd42:	000d      	movs	r5, r1
 800fd44:	4b1b      	ldr	r3, [pc, #108]	; (800fdb4 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x114>)
 800fd46:	0030      	movs	r0, r6
 800fd48:	0039      	movs	r1, r7
 800fd4a:	f7f9 fc13 	bl	8009574 <__aeabi_dmul>
 800fd4e:	0002      	movs	r2, r0
 800fd50:	000b      	movs	r3, r1
 800fd52:	0020      	movs	r0, r4
 800fd54:	0029      	movs	r1, r5
 800fd56:	f7f9 fe7f 	bl	8009a58 <__aeabi_dsub>
 800fd5a:	0004      	movs	r4, r0
 800fd5c:	9803      	ldr	r0, [sp, #12]
 800fd5e:	000d      	movs	r5, r1
 800fd60:	f7fa f9f8 	bl	800a154 <__aeabi_i2d>
 800fd64:	0002      	movs	r2, r0
 800fd66:	000b      	movs	r3, r1
 800fd68:	0020      	movs	r0, r4
 800fd6a:	0029      	movs	r1, r5
 800fd6c:	f7f9 fe74 	bl	8009a58 <__aeabi_dsub>
 800fd70:	f005 fb88 	bl	8015484 <ceil>
 800fd74:	0002      	movs	r2, r0
 800fd76:	2080      	movs	r0, #128	; 0x80
 800fd78:	0600      	lsls	r0, r0, #24
 800fd7a:	180b      	adds	r3, r1, r0
 800fd7c:	0019      	movs	r1, r3
 800fd7e:	0010      	movs	r0, r2
 800fd80:	f7fa f9b2 	bl	800a0e8 <__aeabi_d2iz>
 800fd84:	9b00      	ldr	r3, [sp, #0]
 800fd86:	4a0c      	ldr	r2, [pc, #48]	; (800fdb8 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x118>)
    MacRxWindowMs = MacRxWindowSymb * tSymbol;
 800fd88:	0039      	movs	r1, r7
    RxOffsetMs = (int32_t)((ceil((4.0 * tSymbol) - ((MacRxWindowSymb * tSymbol) / 2.0) - BoardDelayRxMs)) * (-1));
 800fd8a:	5098      	str	r0, [r3, r2]
    MacRxWindowMs = MacRxWindowSymb * tSymbol;
 800fd8c:	0030      	movs	r0, r6
 800fd8e:	f7f8 fbeb 	bl	8008568 <__aeabi_d2uiz>
 800fd92:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x11c>)
 800fd94:	9a00      	ldr	r2, [sp, #0]
 800fd96:	50d0      	str	r0, [r2, r3]
};
 800fd98:	b005      	add	sp, #20
 800fd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RxOffsetMs = 40;//BoardDelayRxMs + 25 + ( ( BoardDelayRxMs * ClockAccuracy ) / 1000 );
 800fd9c:	2328      	movs	r3, #40	; 0x28
 800fd9e:	9a00      	ldr	r2, [sp, #0]
 800fda0:	4905      	ldr	r1, [pc, #20]	; (800fdb8 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0x118>)
 800fda2:	5053      	str	r3, [r2, r1]
};
 800fda4:	e7f8      	b.n	800fd98 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh+0xf8>
 800fda6:	46c0      	nop			; (mov r8, r8)
 800fda8:	0000073d 	.word	0x0000073d
 800fdac:	000006bc 	.word	0x000006bc
 800fdb0:	40100000 	.word	0x40100000
 800fdb4:	3fe00000 	.word	0x3fe00000
 800fdb8:	000008d4 	.word	0x000008d4
 800fdbc:	000008d8 	.word	0x000008d8

0800fdc0 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType>:
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::ConfigureTimerForRx(eRxWinType type) {
 800fdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdc2:	0004      	movs	r4, r0
 800fdc4:	b085      	sub	sp, #20
 800fdc6:	9103      	str	r1, [sp, #12]
  InsertTrace(__COUNTER__, FileId);
 800fdc8:	2004      	movs	r0, #4
 800fdca:	2102      	movs	r1, #2
 800fdcc:	f001 fe5e 	bl	8011a8c <_Z11InsertTracehh>
  tCurrentMillisec = mcu.RtcGetTimeMs();
 800fdd0:	4849      	ldr	r0, [pc, #292]	; (800fef8 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x138>)
 800fdd2:	f7fe f979 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
 800fdd6:	0026      	movs	r6, r4
 800fdd8:	6823      	ldr	r3, [r4, #0]
  if(type == RX1) {
 800fdda:	9a03      	ldr	r2, [sp, #12]
  tCurrentMillisec = mcu.RtcGetTimeMs();
 800fddc:	9002      	str	r0, [sp, #8]
 800fdde:	36c8      	adds	r6, #200	; 0xc8
 800fde0:	4d46      	ldr	r5, [pc, #280]	; (800fefc <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x13c>)
 800fde2:	4f47      	ldr	r7, [pc, #284]	; (800ff00 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x140>)
    RegionSetRxConfig(RX1);
 800fde4:	685b      	ldr	r3, [r3, #4]
  if(type == RX1) {
 800fde6:	2a00      	cmp	r2, #0
 800fde8:	d144      	bne.n	800fe74 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0xb4>
    RegionSetRxConfig(RX1);
 800fdea:	0011      	movs	r1, r2
 800fdec:	0020      	movs	r0, r4
 800fdee:	4798      	blx	r3
    if(MacTxModulationCurrent == LORA) {
 800fdf0:	4b44      	ldr	r3, [pc, #272]	; (800ff04 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x144>)
 800fdf2:	5ce3      	ldrb	r3, [r4, r3]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d127      	bne.n	800fe48 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x88>
      ComputeRxWindowParameters(MacRx1SfCurrent, MacRx1BwCurrent, CRYSTAL_ERROR, MacRx1Delay * 1000, BOARD_DELAY_RX_SETTING_MS);
 800fdf8:	4b43      	ldr	r3, [pc, #268]	; (800ff08 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x148>)
 800fdfa:	5ce2      	ldrb	r2, [r4, r3]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	5ce1      	ldrb	r1, [r4, r3]
 800fe00:	2307      	movs	r3, #7
 800fe02:	9301      	str	r3, [sp, #4]
 800fe04:	23fa      	movs	r3, #250	; 0xfa
 800fe06:	6830      	ldr	r0, [r6, #0]
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4343      	muls	r3, r0
 800fe0c:	0020      	movs	r0, r4
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	2346      	movs	r3, #70	; 0x46
 800fe12:	f7ff ff45 	bl	800fca0 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh>
    tAlarmMillisec = ((MacRx1Delay * 1000) + Phy.TimestampRtcIsr) - tCurrentMillisec;
 800fe16:	22fa      	movs	r2, #250	; 0xfa
 800fe18:	6833      	ldr	r3, [r6, #0]
 800fe1a:	0092      	lsls	r2, r2, #2
 800fe1c:	435a      	muls	r2, r3
 800fe1e:	59e3      	ldr	r3, [r4, r7]
 800fe20:	18d2      	adds	r2, r2, r3
 800fe22:	9b02      	ldr	r3, [sp, #8]
 800fe24:	1ad3      	subs	r3, r2, r3
    if((int)(tAlarmMillisec - RxOffsetMs) < 0) { // too late to launch a timer
 800fe26:	5962      	ldr	r2, [r4, r5]
    tAlarmMillisec = ((MacRx1Delay * 1000) + Phy.TimestampRtcIsr) - tCurrentMillisec;
 800fe28:	9302      	str	r3, [sp, #8]
    if((int)(tAlarmMillisec - RxOffsetMs) < 0) { // too late to launch a timer
 800fe2a:	1a99      	subs	r1, r3, r2
 800fe2c:	d50f      	bpl.n	800fe4e <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x8e>
      Phy.StateRadioProcess = RADIOSTATE_RX1FINISHED;
 800fe2e:	23d6      	movs	r3, #214	; 0xd6
 800fe30:	2203      	movs	r2, #3
 800fe32:	00db      	lsls	r3, r3, #3
 800fe34:	50e2      	str	r2, [r4, r3]
  DEBUG_PRINTF(" Timer will expire in %d ms\n", (tAlarmMillisec - RxOffsetMs));
 800fe36:	5962      	ldr	r2, [r4, r5]
 800fe38:	9b02      	ldr	r3, [sp, #8]
 800fe3a:	4934      	ldr	r1, [pc, #208]	; (800ff0c <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x14c>)
 800fe3c:	1a9a      	subs	r2, r3, r2
 800fe3e:	2000      	movs	r0, #0
 800fe40:	f7fa fcb4 	bl	800a7ac <SEGGER_RTT_printf>
}
 800fe44:	b005      	add	sp, #20
 800fe46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RxOffsetMs = 50; // tb reduce
 800fe48:	2332      	movs	r3, #50	; 0x32
 800fe4a:	5163      	str	r3, [r4, r5]
 800fe4c:	e7e3      	b.n	800fe16 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x56>
      SetAlarm(tAlarmMillisec - RxOffsetMs, type);
 800fe4e:	2200      	movs	r2, #0
 800fe50:	0020      	movs	r0, r4
 800fe52:	f7ff fadb 	bl	800f40c <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType>
      Phy.LastTimeRxWindowsMs = ((MacRx1Delay * 1000) + Phy.TimestampRtcIsr) - RxOffsetMs + MacRxWindowMs; // timestamp of the end of rx1 windows
 800fe56:	4a2e      	ldr	r2, [pc, #184]	; (800ff10 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x150>)
 800fe58:	59e3      	ldr	r3, [r4, r7]
 800fe5a:	58a2      	ldr	r2, [r4, r2]
 800fe5c:	6837      	ldr	r7, [r6, #0]
 800fe5e:	189b      	adds	r3, r3, r2
 800fe60:	22fa      	movs	r2, #250	; 0xfa
 800fe62:	0092      	lsls	r2, r2, #2
 800fe64:	4357      	muls	r7, r2
 800fe66:	19df      	adds	r7, r3, r7
 800fe68:	5963      	ldr	r3, [r4, r5]
 800fe6a:	1aff      	subs	r7, r7, r3
      Phy.LastTimeRxWindowsMs = (MacRx1Delay * 1000) + 1000 + Phy.TimestampRtcIsr - RxOffsetMs + MacRxWindowMs; // timestamp of the end of rx2 windows
 800fe6c:	23d7      	movs	r3, #215	; 0xd7
 800fe6e:	00db      	lsls	r3, r3, #3
 800fe70:	50e7      	str	r7, [r4, r3]
 800fe72:	e7e0      	b.n	800fe36 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x76>
    RegionSetRxConfig(RX2);
 800fe74:	2101      	movs	r1, #1
 800fe76:	0020      	movs	r0, r4
 800fe78:	4798      	blx	r3
    if(MacRx2ModulationTypeCurrent == LORA) {
 800fe7a:	4b26      	ldr	r3, [pc, #152]	; (800ff14 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x154>)
 800fe7c:	5ce3      	ldrb	r3, [r4, r3]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d125      	bne.n	800fece <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x10e>
      ComputeRxWindowParameters(MacRx2SfCurrent, MacRx2BwCurrent, CRYSTAL_ERROR, MacRx1Delay * 1000 + 1000, BOARD_DELAY_RX_SETTING_MS);
 800fe82:	4b25      	ldr	r3, [pc, #148]	; (800ff18 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x158>)
 800fe84:	5ce2      	ldrb	r2, [r4, r3]
 800fe86:	4b25      	ldr	r3, [pc, #148]	; (800ff1c <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x15c>)
 800fe88:	5ce1      	ldrb	r1, [r4, r3]
 800fe8a:	2307      	movs	r3, #7
 800fe8c:	9301      	str	r3, [sp, #4]
 800fe8e:	6833      	ldr	r3, [r6, #0]
 800fe90:	1c58      	adds	r0, r3, #1
 800fe92:	23fa      	movs	r3, #250	; 0xfa
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	4343      	muls	r3, r0
 800fe98:	0020      	movs	r0, r4
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	2346      	movs	r3, #70	; 0x46
 800fe9e:	f7ff feff 	bl	800fca0 <_ZN16LoraWanContainerILi16E6SX126xE25ComputeRxWindowParametersEh10eBandWidthmmh>
    tAlarmMillisec = (MacRx1Delay * 1000) + 1000 + Phy.TimestampRtcIsr - tCurrentMillisec; // @note Rx2 Dalay is alway RX1DELAY + 1 second
 800fea2:	6833      	ldr	r3, [r6, #0]
 800fea4:	1c5a      	adds	r2, r3, #1
 800fea6:	23fa      	movs	r3, #250	; 0xfa
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	435a      	muls	r2, r3
 800feac:	59e3      	ldr	r3, [r4, r7]
 800feae:	18d2      	adds	r2, r2, r3
 800feb0:	9b02      	ldr	r3, [sp, #8]
 800feb2:	1ad3      	subs	r3, r2, r3
    if((int)(tAlarmMillisec - RxOffsetMs) < 0) { // too late to launch a timer
 800feb4:	5962      	ldr	r2, [r4, r5]
    tAlarmMillisec = (MacRx1Delay * 1000) + 1000 + Phy.TimestampRtcIsr - tCurrentMillisec; // @note Rx2 Dalay is alway RX1DELAY + 1 second
 800feb6:	9302      	str	r3, [sp, #8]
    if((int)(tAlarmMillisec - RxOffsetMs) < 0) { // too late to launch a timer
 800feb8:	1a99      	subs	r1, r3, r2
 800feba:	d50b      	bpl.n	800fed4 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x114>
      Phy.StateRadioProcess = RADIOSTATE_IDLE;
 800febc:	23d6      	movs	r3, #214	; 0xd6
 800febe:	2000      	movs	r0, #0
 800fec0:	00db      	lsls	r3, r3, #3
 800fec2:	50e0      	str	r0, [r4, r3]
      DEBUG_PRINTF(" error case negative Timer %d ms\n", tAlarmMillisec);
 800fec4:	9a02      	ldr	r2, [sp, #8]
 800fec6:	4916      	ldr	r1, [pc, #88]	; (800ff20 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x160>)
 800fec8:	f7fa fc70 	bl	800a7ac <SEGGER_RTT_printf>
 800fecc:	e7b3      	b.n	800fe36 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x76>
      RxOffsetMs = 50; // tb reduce
 800fece:	2332      	movs	r3, #50	; 0x32
 800fed0:	5163      	str	r3, [r4, r5]
 800fed2:	e7e6      	b.n	800fea2 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0xe2>
      SetAlarm(tAlarmMillisec - RxOffsetMs, type);
 800fed4:	9a03      	ldr	r2, [sp, #12]
 800fed6:	0020      	movs	r0, r4
 800fed8:	f7ff fa98 	bl	800f40c <_ZN16LoraWanContainerILi16E6SX126xE8SetAlarmEm10eRxWinType>
      Phy.LastTimeRxWindowsMs = (MacRx1Delay * 1000) + 1000 + Phy.TimestampRtcIsr - RxOffsetMs + MacRxWindowMs; // timestamp of the end of rx2 windows
 800fedc:	59e3      	ldr	r3, [r4, r7]
 800fede:	27fa      	movs	r7, #250	; 0xfa
 800fee0:	4a0b      	ldr	r2, [pc, #44]	; (800ff10 <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0x150>)
 800fee2:	00bf      	lsls	r7, r7, #2
 800fee4:	58a2      	ldr	r2, [r4, r2]
 800fee6:	189b      	adds	r3, r3, r2
 800fee8:	5962      	ldr	r2, [r4, r5]
 800feea:	1a9b      	subs	r3, r3, r2
 800feec:	6832      	ldr	r2, [r6, #0]
 800feee:	3201      	adds	r2, #1
 800fef0:	4357      	muls	r7, r2
 800fef2:	19df      	adds	r7, r3, r7
 800fef4:	e7ba      	b.n	800fe6c <_ZN16LoraWanContainerILi16E6SX126xE19ConfigureTimerForRxE10eRxWinType+0xac>
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	20001988 	.word	0x20001988
 800fefc:	000008d4 	.word	0x000008d4
 800ff00:	000006b4 	.word	0x000006b4
 800ff04:	0000073d 	.word	0x0000073d
 800ff08:	00000749 	.word	0x00000749
 800ff0c:	08018239 	.word	0x08018239
 800ff10:	000008d8 	.word	0x000008d8
 800ff14:	0000073e 	.word	0x0000073e
 800ff18:	0000074b 	.word	0x0000074b
 800ff1c:	0000074a 	.word	0x0000074a
 800ff20:	08018217 	.word	0x08018217

0800ff24 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv>:
template <int NBCHANNEL, class R> eStatusLoRaWan LoraWanContainer<NBCHANNEL, R>::CheckValidMulticastPayload(void) {
 800ff24:	b510      	push	{r4, lr}
  uint8_t MtypeRxTmp = Phy.RxPhyPayload[0] >> 5;
 800ff26:	4b0e      	ldr	r3, [pc, #56]	; (800ff60 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x3c>)
 800ff28:	5cc3      	ldrb	r3, [r0, r3]
 800ff2a:	115b      	asrs	r3, r3, #5
  if(MtypeRxTmp != UNCONF_DATA_DOWN) {
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d006      	beq.n	800ff3e <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x1a>
    DEBUG_MSG(" ERROR : BAD Mtype for Multicast downlink\n ");
 800ff30:	490c      	ldr	r1, [pc, #48]	; (800ff64 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x40>)
 800ff32:	2000      	movs	r0, #0
    DEBUG_MSG(" ERROR : Fport equal to 0 for a Multicast downlink\n ");
 800ff34:	f7fa fa7a 	bl	800a42c <SEGGER_RTT_WriteString>
    return (status);
 800ff38:	2001      	movs	r0, #1
 800ff3a:	4240      	negs	r0, r0
};
 800ff3c:	bd10      	pop	{r4, pc}
  if(FoptsLengthTmp != 0) {
 800ff3e:	220f      	movs	r2, #15
  uint8_t FctrlRxTmp = Phy.RxPhyPayload[5];
 800ff40:	4b09      	ldr	r3, [pc, #36]	; (800ff68 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x44>)
    DEBUG_MSG(" ERROR : Fopts field not equal to 0 for a Multicast downlink\n ");
 800ff42:	490a      	ldr	r1, [pc, #40]	; (800ff6c <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x48>)
  uint8_t FctrlRxTmp = Phy.RxPhyPayload[5];
 800ff44:	5cc3      	ldrb	r3, [r0, r3]
  if(FoptsLengthTmp != 0) {
 800ff46:	401a      	ands	r2, r3
 800ff48:	d1f3      	bne.n	800ff32 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0xe>
  if(AckBitDwnTmp == 0x20) {
 800ff4a:	2120      	movs	r1, #32
 800ff4c:	400b      	ands	r3, r1
    DEBUG_MSG(" ERROR : Ack Bit equal to 1 for a Multicast downlink\n ");
 800ff4e:	4908      	ldr	r1, [pc, #32]	; (800ff70 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x4c>)
  if(AckBitDwnTmp == 0x20) {
 800ff50:	d1ef      	bne.n	800ff32 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0xe>
  uint8_t FportRxTmp = Phy.RxPhyPayload[8];
 800ff52:	4a08      	ldr	r2, [pc, #32]	; (800ff74 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x50>)
  if(FportRxTmp == 0) {
 800ff54:	5c82      	ldrb	r2, [r0, r2]
  return (status);
 800ff56:	0018      	movs	r0, r3
  if(FportRxTmp == 0) {
 800ff58:	2a00      	cmp	r2, #0
 800ff5a:	d1ef      	bne.n	800ff3c <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x18>
    DEBUG_MSG(" ERROR : Fport equal to 0 for a Multicast downlink\n ");
 800ff5c:	4906      	ldr	r1, [pc, #24]	; (800ff78 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x54>)
 800ff5e:	e7e9      	b.n	800ff34 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv+0x10>
 800ff60:	0000058f 	.word	0x0000058f
 800ff64:	08018329 	.word	0x08018329
 800ff68:	00000594 	.word	0x00000594
 800ff6c:	08018355 	.word	0x08018355
 800ff70:	08018394 	.word	0x08018394
 800ff74:	00000597 	.word	0x00000597
 800ff78:	080183cb 	.word	0x080183cb

0800ff7c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv>:
template <int NBCHANNEL, class R> eRxPacketType LoraWanContainer<NBCHANNEL, R>::DecodeRxFrame(void) {
 800ff7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7e:	b089      	sub	sp, #36	; 0x24
 800ff80:	0004      	movs	r4, r0
  status += CheckRxPayloadLength();
 800ff82:	f7ff f9a1 	bl	800f2c8 <_ZN16LoraWanContainerILi16E6SX126xE20CheckRxPayloadLengthEv>
 800ff86:	0007      	movs	r7, r0
  status += ExtractRxMhdr();
 800ff88:	0020      	movs	r0, r4
 800ff8a:	f7ff f975 	bl	800f278 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxMhdrEv>
  if(Phy.CurrentDevaddrType == VALID_DEV_ADDR_MULTI_CAST_G0) {
 800ff8e:	4bd3      	ldr	r3, [pc, #844]	; (80102dc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x360>)
 800ff90:	5ce5      	ldrb	r5, [r4, r3]
 800ff92:	2d01      	cmp	r5, #1
 800ff94:	d165      	bne.n	8010062 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0xe6>
    uint16_t FcntDownTmp = 0;
 800ff96:	2712      	movs	r7, #18
    status += CheckValidMulticastPayload();
 800ff98:	0020      	movs	r0, r4
 800ff9a:	f7ff ffc3 	bl	800ff24 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv>
    uint16_t FcntDownTmp = 0;
 800ff9e:	ab02      	add	r3, sp, #8
 800ffa0:	18ff      	adds	r7, r7, r3
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	803b      	strh	r3, [r7, #0]
    status += ExtractRxFhdr(&FcntDownTmp, DevAddrClassCG0);
 800ffa6:	23dd      	movs	r3, #221	; 0xdd
 800ffa8:	00db      	lsls	r3, r3, #3
    status += CheckValidMulticastPayload();
 800ffaa:	0006      	movs	r6, r0
    status += ExtractRxFhdr(&FcntDownTmp, DevAddrClassCG0);
 800ffac:	58e2      	ldr	r2, [r4, r3]
 800ffae:	0039      	movs	r1, r7
 800ffb0:	0020      	movs	r0, r4
 800ffb2:	f7ff f99f 	bl	800f2f4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm>
 800ffb6:	1836      	adds	r6, r6, r0
    if(status == OKLORAWAN) {
 800ffb8:	2e00      	cmp	r6, #0
 800ffba:	d006      	beq.n	800ffca <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x4e>
  eRxPacketType RxPacketType = NO_MORE_VALID_RX_PACKET;
 800ffbc:	2500      	movs	r5, #0
  DEBUG_PRINTF(" RxPacketType = %d \n", RxPacketType);
 800ffbe:	002a      	movs	r2, r5
 800ffc0:	49c7      	ldr	r1, [pc, #796]	; (80102e0 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x364>)
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	f7fa fbf2 	bl	800a7ac <SEGGER_RTT_printf>
  return (RxPacketType);
 800ffc8:	e0e0      	b.n	801018c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x210>
      status = AcceptFcntDwn(FcntDownTmp, &FcntDwnClassCG0);
 800ffca:	23de      	movs	r3, #222	; 0xde
 800ffcc:	00db      	lsls	r3, r3, #3
 800ffce:	8839      	ldrh	r1, [r7, #0]
 800ffd0:	18e2      	adds	r2, r4, r3
 800ffd2:	0020      	movs	r0, r4
 800ffd4:	f7ff f9f4 	bl	800f3c0 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm>
    if(status == OKLORAWAN) {
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d1ef      	bne.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 800ffdc:	4bc1      	ldr	r3, [pc, #772]	; (80102e4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x368>)
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 800ffde:	4ac2      	ldr	r2, [pc, #776]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 800ffe0:	5ce6      	ldrb	r6, [r4, r3]
 800ffe2:	23b3      	movs	r3, #179	; 0xb3
 800ffe4:	3e04      	subs	r6, #4
 800ffe6:	b2f6      	uxtb	r6, r6
 800ffe8:	005b      	lsls	r3, r3, #1
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 800ffea:	18b1      	adds	r1, r6, r2
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 800ffec:	54e6      	strb	r6, [r4, r3]
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 800ffee:	1861      	adds	r1, r4, r1
 800fff0:	2204      	movs	r2, #4
 800fff2:	a807      	add	r0, sp, #28
 800fff4:	f005 fb69 	bl	80156ca <memcpy>
      status += LoRaMacCheckMic(&Phy.RxPhyPayload[0], MacRxPayloadSize, nwkSKeyClassCG0, DevAddrClassCG0, FcntDownTmp, micIn); // @note api discussion see at the end of this file
 800fff8:	b2b1      	uxth	r1, r6
 800fffa:	9e07      	ldr	r6, [sp, #28]
 800fffc:	48ba      	ldr	r0, [pc, #744]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
 800fffe:	9601      	str	r6, [sp, #4]
 8010000:	883b      	ldrh	r3, [r7, #0]
 8010002:	26dd      	movs	r6, #221	; 0xdd
 8010004:	27df      	movs	r7, #223	; 0xdf
 8010006:	00f6      	lsls	r6, r6, #3
 8010008:	00ff      	lsls	r7, r7, #3
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	19e2      	adds	r2, r4, r7
 801000e:	59a3      	ldr	r3, [r4, r6]
 8010010:	1820      	adds	r0, r4, r0
 8010012:	f7fe fa7f 	bl	800e514 <_Z15LoRaMacCheckMicPhtPKhmmm>
    if(status == OKLORAWAN) {
 8010016:	2800      	cmp	r0, #0
 8010018:	d1d0      	bne.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      status += CheckValidMulticastPayload();
 801001a:	0020      	movs	r0, r4
 801001c:	f7ff ff82 	bl	800ff24 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv>
    if(status == OKLORAWAN) {
 8010020:	2800      	cmp	r0, #0
 8010022:	d1cb      	bne.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      AdrAckCnt = 0; // reset adr counter, receive a valid frame.
 8010024:	4bb1      	ldr	r3, [pc, #708]	; (80102ec <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x370>)
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG0, DevAddrClassCG0, 1, FcntDwnClassCG0, &MacRxPayload[0]);
 8010026:	9500      	str	r5, [sp, #0]
      AdrAckCnt = 0; // reset adr counter, receive a valid frame.
 8010028:	50e0      	str	r0, [r4, r3]
      MacRxPayloadSize = MacRxPayloadSize - FHDROFFSET;
 801002a:	23b3      	movs	r3, #179	; 0xb3
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	5ce1      	ldrb	r1, [r4, r3]
 8010030:	3909      	subs	r1, #9
 8010032:	b2c9      	uxtb	r1, r1
 8010034:	54e1      	strb	r1, [r4, r3]
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG0, DevAddrClassCG0, 1, FcntDwnClassCG0, &MacRxPayload[0]);
 8010036:	23e1      	movs	r3, #225	; 0xe1
 8010038:	00db      	lsls	r3, r3, #3
 801003a:	18e2      	adds	r2, r4, r3
 801003c:	3b71      	subs	r3, #113	; 0x71
 801003e:	3bff      	subs	r3, #255	; 0xff
 8010040:	18e0      	adds	r0, r4, r3
 8010042:	0023      	movs	r3, r4
 8010044:	3368      	adds	r3, #104	; 0x68
 8010046:	33ff      	adds	r3, #255	; 0xff
 8010048:	9302      	str	r3, [sp, #8]
 801004a:	23de      	movs	r3, #222	; 0xde
 801004c:	00db      	lsls	r3, r3, #3
 801004e:	58e3      	ldr	r3, [r4, r3]
 8010050:	b289      	uxth	r1, r1
 8010052:	9301      	str	r3, [sp, #4]
 8010054:	59a3      	ldr	r3, [r4, r6]
 8010056:	f7fe f983 	bl	800e360 <_Z21LoRaMacPayloadDecryptPKhtS0_mhmPh>
      AvailableRxPacketForUser = MULTI_CAST_G0_RX_PACKET_AVAILABLE;
 801005a:	2202      	movs	r2, #2
 801005c:	4ba4      	ldr	r3, [pc, #656]	; (80102f0 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x374>)
        AvailableRxPacketForUser = LORA_RX_PACKET_AVAILABLE;
 801005e:	54e2      	strb	r2, [r4, r3]
 8010060:	e7ad      	b.n	800ffbe <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x42>
  if(Phy.CurrentDevaddrType == VALID_DEV_ADDR_MULTI_CAST_G1) {
 8010062:	2d02      	cmp	r5, #2
 8010064:	d15a      	bne.n	801011c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x1a0>
    uint16_t FcntDownTmp = 0;
 8010066:	2612      	movs	r6, #18
    status += CheckValidMulticastPayload();
 8010068:	0020      	movs	r0, r4
 801006a:	f7ff ff5b 	bl	800ff24 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv>
    uint16_t FcntDownTmp = 0;
 801006e:	ab02      	add	r3, sp, #8
 8010070:	18f6      	adds	r6, r6, r3
 8010072:	2300      	movs	r3, #0
 8010074:	8033      	strh	r3, [r6, #0]
    status += ExtractRxFhdr(&FcntDownTmp, DevAddrClassCG1);
 8010076:	4b9f      	ldr	r3, [pc, #636]	; (80102f4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x378>)
    status += CheckValidMulticastPayload();
 8010078:	0005      	movs	r5, r0
    status += ExtractRxFhdr(&FcntDownTmp, DevAddrClassCG1);
 801007a:	58e2      	ldr	r2, [r4, r3]
 801007c:	0031      	movs	r1, r6
 801007e:	0020      	movs	r0, r4
 8010080:	f7ff f938 	bl	800f2f4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm>
 8010084:	182d      	adds	r5, r5, r0
    if(status == OKLORAWAN) {
 8010086:	2d00      	cmp	r5, #0
 8010088:	d198      	bne.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      status = AcceptFcntDwn(FcntDownTmp, &FcntDwnClassCG1);
 801008a:	4b9b      	ldr	r3, [pc, #620]	; (80102f8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x37c>)
 801008c:	8831      	ldrh	r1, [r6, #0]
 801008e:	18e2      	adds	r2, r4, r3
 8010090:	0020      	movs	r0, r4
 8010092:	f7ff f995 	bl	800f3c0 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm>
    if(status == OKLORAWAN) {
 8010096:	2800      	cmp	r0, #0
 8010098:	d190      	bne.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 801009a:	27b3      	movs	r7, #179	; 0xb3
 801009c:	4b91      	ldr	r3, [pc, #580]	; (80102e4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x368>)
 801009e:	007f      	lsls	r7, r7, #1
 80100a0:	5ce5      	ldrb	r5, [r4, r3]
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 80100a2:	4b91      	ldr	r3, [pc, #580]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 80100a4:	3d04      	subs	r5, #4
 80100a6:	b2ed      	uxtb	r5, r5
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 80100a8:	18e9      	adds	r1, r5, r3
 80100aa:	1861      	adds	r1, r4, r1
 80100ac:	2204      	movs	r2, #4
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 80100ae:	55e5      	strb	r5, [r4, r7]
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 80100b0:	a807      	add	r0, sp, #28
 80100b2:	f005 fb0a 	bl	80156ca <memcpy>
      status += LoRaMacCheckMic(&Phy.RxPhyPayload[0], MacRxPayloadSize, nwkSKeyClassCG1, DevAddrClassCG1, FcntDownTmp, micIn); // @note api discussion see at the end of this file
 80100b6:	9a07      	ldr	r2, [sp, #28]
 80100b8:	488b      	ldr	r0, [pc, #556]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
 80100ba:	9201      	str	r2, [sp, #4]
 80100bc:	22e3      	movs	r2, #227	; 0xe3
 80100be:	8833      	ldrh	r3, [r6, #0]
 80100c0:	4e8c      	ldr	r6, [pc, #560]	; (80102f4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x378>)
 80100c2:	00d2      	lsls	r2, r2, #3
 80100c4:	9300      	str	r3, [sp, #0]
 80100c6:	b2a9      	uxth	r1, r5
 80100c8:	59a3      	ldr	r3, [r4, r6]
 80100ca:	18a2      	adds	r2, r4, r2
 80100cc:	1820      	adds	r0, r4, r0
 80100ce:	f7fe fa21 	bl	800e514 <_Z15LoRaMacCheckMicPhtPKhmmm>
    if(status == OKLORAWAN) {
 80100d2:	2800      	cmp	r0, #0
 80100d4:	d000      	beq.n	80100d8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x15c>
 80100d6:	e771      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      status += CheckValidMulticastPayload();
 80100d8:	0020      	movs	r0, r4
 80100da:	f7ff ff23 	bl	800ff24 <_ZN16LoraWanContainerILi16E6SX126xE26CheckValidMulticastPayloadEv>
    if(status == OKLORAWAN) {
 80100de:	2800      	cmp	r0, #0
 80100e0:	d000      	beq.n	80100e4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x168>
 80100e2:	e76b      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      AdrAckCnt = 0; // reset adr counter, receive a valid frame.
 80100e4:	4b81      	ldr	r3, [pc, #516]	; (80102ec <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x370>)
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG1, DevAddrClassCG1, 1, FcntDwnClassCG1, &MacRxPayload[0]);
 80100e6:	2501      	movs	r5, #1
      AdrAckCnt = 0; // reset adr counter, receive a valid frame.
 80100e8:	50e0      	str	r0, [r4, r3]
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG1, DevAddrClassCG1, 1, FcntDwnClassCG1, &MacRxPayload[0]);
 80100ea:	23e5      	movs	r3, #229	; 0xe5
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	18e2      	adds	r2, r4, r3
 80100f0:	3b91      	subs	r3, #145	; 0x91
 80100f2:	3bff      	subs	r3, #255	; 0xff
 80100f4:	18e0      	adds	r0, r4, r3
 80100f6:	0023      	movs	r3, r4
      MacRxPayloadSize = MacRxPayloadSize - FHDROFFSET;
 80100f8:	5de1      	ldrb	r1, [r4, r7]
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG1, DevAddrClassCG1, 1, FcntDwnClassCG1, &MacRxPayload[0]);
 80100fa:	3368      	adds	r3, #104	; 0x68
 80100fc:	33ff      	adds	r3, #255	; 0xff
      MacRxPayloadSize = MacRxPayloadSize - FHDROFFSET;
 80100fe:	3909      	subs	r1, #9
 8010100:	b2c9      	uxtb	r1, r1
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG1, DevAddrClassCG1, 1, FcntDwnClassCG1, &MacRxPayload[0]);
 8010102:	9302      	str	r3, [sp, #8]
 8010104:	4b7c      	ldr	r3, [pc, #496]	; (80102f8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x37c>)
      MacRxPayloadSize = MacRxPayloadSize - FHDROFFSET;
 8010106:	55e1      	strb	r1, [r4, r7]
      LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET], MacRxPayloadSize, appSKeyClassCG1, DevAddrClassCG1, 1, FcntDwnClassCG1, &MacRxPayload[0]);
 8010108:	58e3      	ldr	r3, [r4, r3]
 801010a:	b289      	uxth	r1, r1
 801010c:	9301      	str	r3, [sp, #4]
 801010e:	9500      	str	r5, [sp, #0]
 8010110:	59a3      	ldr	r3, [r4, r6]
 8010112:	f7fe f925 	bl	800e360 <_Z21LoRaMacPayloadDecryptPKhtS0_mhmPh>
      AvailableRxPacketForUser = MULTI_CAST_G1_RX_PACKET_AVAILABLE;
 8010116:	4b76      	ldr	r3, [pc, #472]	; (80102f0 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x374>)
 8010118:	2203      	movs	r2, #3
 801011a:	e7a0      	b.n	801005e <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0xe2>
  if(MtypeRx == JOINACCEPT) {
 801011c:	2352      	movs	r3, #82	; 0x52
 801011e:	33ff      	adds	r3, #255	; 0xff
 8010120:	5ce3      	ldrb	r3, [r4, r3]
  status += ExtractRxMhdr();
 8010122:	183f      	adds	r7, r7, r0
    InsertTrace(__COUNTER__, FileId);
 8010124:	2102      	movs	r1, #2
  if(MtypeRx == JOINACCEPT) {
 8010126:	2b01      	cmp	r3, #1
 8010128:	d133      	bne.n	8010192 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x216>
    InsertTrace(__COUNTER__, FileId);
 801012a:	2005      	movs	r0, #5
 801012c:	f001 fcae 	bl	8011a8c <_Z11InsertTracehh>
    LoRaMacJoinDecrypt(&Phy.RxPhyPayload[1], Phy.RxPhyPayloadSize - 1, appKey, &MacRxPayload[1]);
 8010130:	0026      	movs	r6, r4
 8010132:	0023      	movs	r3, r4
 8010134:	22b2      	movs	r2, #178	; 0xb2
 8010136:	4d6b      	ldr	r5, [pc, #428]	; (80102e4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x368>)
 8010138:	36f8      	adds	r6, #248	; 0xf8
 801013a:	5d61      	ldrb	r1, [r4, r5]
 801013c:	00d2      	lsls	r2, r2, #3
 801013e:	3369      	adds	r3, #105	; 0x69
 8010140:	3901      	subs	r1, #1
 8010142:	18a0      	adds	r0, r4, r2
 8010144:	33ff      	adds	r3, #255	; 0xff
 8010146:	b289      	uxth	r1, r1
 8010148:	0032      	movs	r2, r6
 801014a:	f7fe f94f 	bl	800e3ec <_Z18LoRaMacJoinDecryptPKhtS0_Ph>
    MacRxPayload[0] = Phy.RxPhyPayload[0];
 801014e:	4b66      	ldr	r3, [pc, #408]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
    memcpy((uint8_t *)&micIn, &MacRxPayload[MacRxPayloadSize], MICSIZE);
 8010150:	a807      	add	r0, sp, #28
    MacRxPayload[0] = Phy.RxPhyPayload[0];
 8010152:	5ce2      	ldrb	r2, [r4, r3]
 8010154:	2368      	movs	r3, #104	; 0x68
 8010156:	33ff      	adds	r3, #255	; 0xff
 8010158:	54e2      	strb	r2, [r4, r3]
    MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 801015a:	5d65      	ldrb	r5, [r4, r5]
 801015c:	3b01      	subs	r3, #1
 801015e:	3d04      	subs	r5, #4
 8010160:	b2ed      	uxtb	r5, r5
    memcpy((uint8_t *)&micIn, &MacRxPayload[MacRxPayloadSize], MICSIZE);
 8010162:	0029      	movs	r1, r5
 8010164:	3168      	adds	r1, #104	; 0x68
 8010166:	31ff      	adds	r1, #255	; 0xff
    MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 8010168:	54e5      	strb	r5, [r4, r3]
    memcpy((uint8_t *)&micIn, &MacRxPayload[MacRxPayloadSize], MICSIZE);
 801016a:	1861      	adds	r1, r4, r1
 801016c:	2204      	movs	r2, #4
 801016e:	f005 faac 	bl	80156ca <memcpy>
    status += LoRaMacCheckJoinMic(MacRxPayload, MacRxPayloadSize, appKey, micIn);
 8010172:	0020      	movs	r0, r4
 8010174:	3068      	adds	r0, #104	; 0x68
 8010176:	b2a9      	uxth	r1, r5
 8010178:	30ff      	adds	r0, #255	; 0xff
 801017a:	9b07      	ldr	r3, [sp, #28]
 801017c:	0032      	movs	r2, r6
 801017e:	f7fe f9db 	bl	800e538 <_Z19LoRaMacCheckJoinMicPKhtS0_m>
 8010182:	183f      	adds	r7, r7, r0
      return JOIN_ACCEPT_PACKET;
 8010184:	2504      	movs	r5, #4
    if(status == OKLORAWAN) {
 8010186:	2f00      	cmp	r7, #0
 8010188:	d000      	beq.n	801018c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x210>
 801018a:	e717      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
}
 801018c:	0028      	movs	r0, r5
 801018e:	b009      	add	sp, #36	; 0x24
 8010190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t FcntDownTmp = 0;
 8010192:	2612      	movs	r6, #18
    InsertTrace(__COUNTER__, FileId);
 8010194:	2006      	movs	r0, #6
    status += ExtractRxFhdr(&FcntDownTmp, DevAddr);
 8010196:	0025      	movs	r5, r4
    InsertTrace(__COUNTER__, FileId);
 8010198:	f001 fc78 	bl	8011a8c <_Z11InsertTracehh>
    uint16_t FcntDownTmp = 0;
 801019c:	ab02      	add	r3, sp, #8
 801019e:	18f6      	adds	r6, r6, r3
 80101a0:	2300      	movs	r3, #0
    status += ExtractRxFhdr(&FcntDownTmp, DevAddr);
 80101a2:	35d4      	adds	r5, #212	; 0xd4
 80101a4:	682a      	ldr	r2, [r5, #0]
 80101a6:	0031      	movs	r1, r6
 80101a8:	0020      	movs	r0, r4
    uint16_t FcntDownTmp = 0;
 80101aa:	8033      	strh	r3, [r6, #0]
    status += ExtractRxFhdr(&FcntDownTmp, DevAddr);
 80101ac:	f7ff f8a2 	bl	800f2f4 <_ZN16LoraWanContainerILi16E6SX126xE13ExtractRxFhdrEPtm>
 80101b0:	183f      	adds	r7, r7, r0
    if(status == OKLORAWAN) {
 80101b2:	2f00      	cmp	r7, #0
 80101b4:	d000      	beq.n	80101b8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x23c>
 80101b6:	e701      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      status = AcceptFcntDwn(FcntDownTmp, &FcntDwn);
 80101b8:	0022      	movs	r2, r4
 80101ba:	8831      	ldrh	r1, [r6, #0]
 80101bc:	32d0      	adds	r2, #208	; 0xd0
 80101be:	0020      	movs	r0, r4
 80101c0:	f7ff f8fe 	bl	800f3c0 <_ZN16LoraWanContainerILi16E6SX126xE13AcceptFcntDwnEtPm>
    if(status == OKLORAWAN) {
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d000      	beq.n	80101ca <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x24e>
 80101c8:	e6f8      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 80101ca:	4b46      	ldr	r3, [pc, #280]	; (80102e4 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x368>)
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 80101cc:	2204      	movs	r2, #4
      MacRxPayloadSize = Phy.RxPhyPayloadSize - MICSIZE;
 80101ce:	5ce1      	ldrb	r1, [r4, r3]
 80101d0:	23b3      	movs	r3, #179	; 0xb3
 80101d2:	3904      	subs	r1, #4
 80101d4:	b2cf      	uxtb	r7, r1
 80101d6:	005b      	lsls	r3, r3, #1
 80101d8:	54e7      	strb	r7, [r4, r3]
      memcpy((uint8_t *)&micIn, &Phy.RxPhyPayload[MacRxPayloadSize], MICSIZE);
 80101da:	4b43      	ldr	r3, [pc, #268]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
 80101dc:	a807      	add	r0, sp, #28
 80101de:	18f9      	adds	r1, r7, r3
 80101e0:	1861      	adds	r1, r4, r1
 80101e2:	f005 fa72 	bl	80156ca <memcpy>
      status += LoRaMacCheckMic(&Phy.RxPhyPayload[0], MacRxPayloadSize, nwkSKey, DevAddr, FcntDownTmp, micIn); // @note api discussion see at the end of this file
 80101e6:	0022      	movs	r2, r4
 80101e8:	32d8      	adds	r2, #216	; 0xd8
 80101ea:	9205      	str	r2, [sp, #20]
 80101ec:	9a07      	ldr	r2, [sp, #28]
 80101ee:	483e      	ldr	r0, [pc, #248]	; (80102e8 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x36c>)
 80101f0:	9201      	str	r2, [sp, #4]
 80101f2:	8833      	ldrh	r3, [r6, #0]
 80101f4:	b2b9      	uxth	r1, r7
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	682b      	ldr	r3, [r5, #0]
 80101fa:	9a05      	ldr	r2, [sp, #20]
 80101fc:	1820      	adds	r0, r4, r0
 80101fe:	f7fe f989 	bl	800e514 <_Z15LoRaMacCheckMicPhtPKhmmm>
    if(status == OKLORAWAN) {
 8010202:	2800      	cmp	r0, #0
 8010204:	d000      	beq.n	8010208 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x28c>
 8010206:	e6d9      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
      AdrAckCnt = 0; // reset adr counter, receive a valid frame.
 8010208:	4b38      	ldr	r3, [pc, #224]	; (80102ec <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x370>)
 801020a:	50e0      	str	r0, [r4, r3]
      if(Phy.IsReceiveOnRXC == NOT_RECEIVE_ON_RXC) {
 801020c:	4b3b      	ldr	r3, [pc, #236]	; (80102fc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x380>)
 801020e:	5ce3      	ldrb	r3, [r4, r3]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d104      	bne.n	801021e <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x2a2>
        MacNbTransCpt       = 1; // reset retransmission counter if received on RX1 or RX2
 8010214:	2201      	movs	r2, #1
 8010216:	7362      	strb	r2, [r4, #13]
        FoptsTxLengthSticky = 0; // reset the fopts of the sticky cmd receive a valide frame if received on RX1 or RX2
 8010218:	3230      	adds	r2, #48	; 0x30
 801021a:	32ff      	adds	r2, #255	; 0xff
 801021c:	54a3      	strb	r3, [r4, r2]
      MacRxPayloadSize = (RxEmptyPayload == 0) ? MacRxPayloadSize - FHDROFFSET - FoptsLength : 0;
 801021e:	4b38      	ldr	r3, [pc, #224]	; (8010300 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x384>)
 8010220:	2100      	movs	r1, #0
 8010222:	5ce7      	ldrb	r7, [r4, r3]
 8010224:	23aa      	movs	r3, #170	; 0xaa
 8010226:	005b      	lsls	r3, r3, #1
 8010228:	5ce6      	ldrb	r6, [r4, r3]
 801022a:	428f      	cmp	r7, r1
 801022c:	d104      	bne.n	8010238 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x2bc>
 801022e:	3312      	adds	r3, #18
 8010230:	5ce1      	ldrb	r1, [r4, r3]
 8010232:	3909      	subs	r1, #9
 8010234:	1b89      	subs	r1, r1, r6
 8010236:	b2c9      	uxtb	r1, r1
 8010238:	23b3      	movs	r3, #179	; 0xb3
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	54e1      	strb	r1, [r4, r3]
      if(RxEmptyPayload == 0) {
 801023e:	2f00      	cmp	r7, #0
 8010240:	d164      	bne.n	801030c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x390>
        if(FportRx == 0) {
 8010242:	2366      	movs	r3, #102	; 0x66
 8010244:	33ff      	adds	r3, #255	; 0xff
 8010246:	5ce3      	ldrb	r3, [r4, r3]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d11a      	bne.n	8010282 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x306>
          if(FoptsLength == 0) {
 801024c:	2e00      	cmp	r6, #0
 801024e:	d000      	beq.n	8010252 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x2d6>
 8010250:	e6b4      	b.n	800ffbc <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x40>
            LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET + FoptsLength], MacRxPayloadSize, nwkSKey, DevAddr, 1, FcntDwn, &MacNwkPayload[0]);
 8010252:	23b3      	movs	r3, #179	; 0xb3
 8010254:	00db      	lsls	r3, r3, #3
 8010256:	18e0      	adds	r0, r4, r3
 8010258:	4b2a      	ldr	r3, [pc, #168]	; (8010304 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x388>)
 801025a:	9a05      	ldr	r2, [sp, #20]
 801025c:	18e3      	adds	r3, r4, r3
 801025e:	9302      	str	r3, [sp, #8]
 8010260:	3bab      	subs	r3, #171	; 0xab
 8010262:	3bff      	subs	r3, #255	; 0xff
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	b289      	uxth	r1, r1
 8010268:	9301      	str	r3, [sp, #4]
 801026a:	2301      	movs	r3, #1
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	682b      	ldr	r3, [r5, #0]
 8010270:	f7fe f876 	bl	800e360 <_Z21LoRaMacPayloadDecryptPKhtS0_mhmPh>
            MacNwkPayloadSize = MacRxPayloadSize;
 8010274:	23b3      	movs	r3, #179	; 0xb3
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	5ce2      	ldrb	r2, [r4, r3]
 801027a:	4b23      	ldr	r3, [pc, #140]	; (8010308 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x38c>)
            RxPacketType = NWKRXPACKET;
 801027c:	2503      	movs	r5, #3
            MacNwkPayloadSize = MacRxPayloadSize;
 801027e:	54e2      	strb	r2, [r4, r3]
 8010280:	e69d      	b.n	800ffbe <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x42>
          LoRaMacPayloadDecrypt(&Phy.RxPhyPayload[FHDROFFSET + FoptsLength], MacRxPayloadSize, appSKey, DevAddr, 1, FcntDwn, &MacRxPayload[0]);
 8010282:	23b3      	movs	r3, #179	; 0xb3
 8010284:	00db      	lsls	r3, r3, #3
 8010286:	18f0      	adds	r0, r6, r3
 8010288:	0023      	movs	r3, r4
 801028a:	3368      	adds	r3, #104	; 0x68
 801028c:	33ff      	adds	r3, #255	; 0xff
 801028e:	9302      	str	r3, [sp, #8]
 8010290:	3b97      	subs	r3, #151	; 0x97
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	0022      	movs	r2, r4
 8010296:	9301      	str	r3, [sp, #4]
 8010298:	2301      	movs	r3, #1
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	682b      	ldr	r3, [r5, #0]
 801029e:	b289      	uxth	r1, r1
 80102a0:	1820      	adds	r0, r4, r0
 80102a2:	32e8      	adds	r2, #232	; 0xe8
 80102a4:	f7fe f85c 	bl	800e360 <_Z21LoRaMacPayloadDecryptPKhtS0_mhmPh>
          if(FoptsLength != 0) {
 80102a8:	23aa      	movs	r3, #170	; 0xaa
 80102aa:	005b      	lsls	r3, r3, #1
 80102ac:	5ce6      	ldrb	r6, [r4, r3]
  eRxPacketType RxPacketType = NO_MORE_VALID_RX_PACKET;
 80102ae:	003d      	movs	r5, r7
          if(FoptsLength != 0) {
 80102b0:	2e00      	cmp	r6, #0
 80102b2:	d00a      	beq.n	80102ca <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x34e>
            memcpy(MacNwkPayload, Fopts, FoptsLength);
 80102b4:	0021      	movs	r1, r4
            RxPacketType = USERRX_FOPTSPACKET;
 80102b6:	2502      	movs	r5, #2
            memcpy(MacNwkPayload, Fopts, FoptsLength);
 80102b8:	4b12      	ldr	r3, [pc, #72]	; (8010304 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x388>)
 80102ba:	3156      	adds	r1, #86	; 0x56
 80102bc:	18e0      	adds	r0, r4, r3
 80102be:	0032      	movs	r2, r6
 80102c0:	31ff      	adds	r1, #255	; 0xff
 80102c2:	f005 fa02 	bl	80156ca <memcpy>
            MacNwkPayloadSize = FoptsLength;
 80102c6:	4b10      	ldr	r3, [pc, #64]	; (8010308 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x38c>)
 80102c8:	54e6      	strb	r6, [r4, r3]
          if(MacRxPayloadSize > 0) {
 80102ca:	23b3      	movs	r3, #179	; 0xb3
 80102cc:	005b      	lsls	r3, r3, #1
 80102ce:	5ce3      	ldrb	r3, [r4, r3]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d100      	bne.n	80102d6 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x35a>
 80102d4:	e673      	b.n	800ffbe <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x42>
        AvailableRxPacketForUser = LORA_RX_PACKET_AVAILABLE;
 80102d6:	4b06      	ldr	r3, [pc, #24]	; (80102f0 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x374>)
 80102d8:	2201      	movs	r2, #1
 80102da:	e6c0      	b.n	801005e <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0xe2>
 80102dc:	000006c4 	.word	0x000006c4
 80102e0:	08017eb1 	.word	0x08017eb1
 80102e4:	0000068e 	.word	0x0000068e
 80102e8:	0000058f 	.word	0x0000058f
 80102ec:	0000047c 	.word	0x0000047c
 80102f0:	00000266 	.word	0x00000266
 80102f4:	000006ec 	.word	0x000006ec
 80102f8:	000006f4 	.word	0x000006f4
 80102fc:	000006c5 	.word	0x000006c5
 8010300:	000008cd 	.word	0x000008cd
 8010304:	0000027a 	.word	0x0000027a
 8010308:	00000379 	.word	0x00000379
          RxPacketType = USER_RX_PACKET;
 801030c:	2501      	movs	r5, #1
        if(FoptsLength != 0) {
 801030e:	2e00      	cmp	r6, #0
 8010310:	d0e1      	beq.n	80102d6 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x35a>
          memcpy(MacNwkPayload, Fopts, FoptsLength);
 8010312:	0021      	movs	r1, r4
 8010314:	4b05      	ldr	r3, [pc, #20]	; (801032c <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x3b0>)
 8010316:	3156      	adds	r1, #86	; 0x56
 8010318:	18e0      	adds	r0, r4, r3
 801031a:	0032      	movs	r2, r6
 801031c:	31ff      	adds	r1, #255	; 0xff
 801031e:	f005 f9d4 	bl	80156ca <memcpy>
          MacNwkPayloadSize = FoptsLength;
 8010322:	4b03      	ldr	r3, [pc, #12]	; (8010330 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x3b4>)
          RxPacketType = USERRX_FOPTSPACKET;
 8010324:	196d      	adds	r5, r5, r5
          MacNwkPayloadSize = FoptsLength;
 8010326:	54e6      	strb	r6, [r4, r3]
 8010328:	e7d5      	b.n	80102d6 <_ZN16LoraWanContainerILi16E6SX126xE13DecodeRxFrameEv+0x35a>
 801032a:	46c0      	nop			; (mov r8, r8)
 801032c:	0000027a 	.word	0x0000027a
 8010330:	00000379 	.word	0x00000379

08010334 <_ZL9xor_blockPvPKv>:
  ((uint32_t *)d)[ 0] ^= ((uint32_t *)s)[ 0];
  ((uint32_t *)d)[ 1] ^= ((uint32_t *)s)[ 1];
  ((uint32_t *)d)[ 2] ^= ((uint32_t *)s)[ 2];
  ((uint32_t *)d)[ 3] ^= ((uint32_t *)s)[ 3];
#else
  ((uint8_t *)d)[ 0] ^= ((uint8_t *)s)[ 0];
 8010334:	780a      	ldrb	r2, [r1, #0]
 8010336:	7803      	ldrb	r3, [r0, #0]
 8010338:	4053      	eors	r3, r2
 801033a:	7003      	strb	r3, [r0, #0]
  ((uint8_t *)d)[ 1] ^= ((uint8_t *)s)[ 1];
 801033c:	784a      	ldrb	r2, [r1, #1]
 801033e:	7843      	ldrb	r3, [r0, #1]
 8010340:	4053      	eors	r3, r2
 8010342:	7043      	strb	r3, [r0, #1]
  ((uint8_t *)d)[ 2] ^= ((uint8_t *)s)[ 2];
 8010344:	788a      	ldrb	r2, [r1, #2]
 8010346:	7883      	ldrb	r3, [r0, #2]
 8010348:	4053      	eors	r3, r2
 801034a:	7083      	strb	r3, [r0, #2]
  ((uint8_t *)d)[ 3] ^= ((uint8_t *)s)[ 3];
 801034c:	78ca      	ldrb	r2, [r1, #3]
 801034e:	78c3      	ldrb	r3, [r0, #3]
 8010350:	4053      	eors	r3, r2
 8010352:	70c3      	strb	r3, [r0, #3]
  ((uint8_t *)d)[ 4] ^= ((uint8_t *)s)[ 4];
 8010354:	790a      	ldrb	r2, [r1, #4]
 8010356:	7903      	ldrb	r3, [r0, #4]
 8010358:	4053      	eors	r3, r2
 801035a:	7103      	strb	r3, [r0, #4]
  ((uint8_t *)d)[ 5] ^= ((uint8_t *)s)[ 5];
 801035c:	794a      	ldrb	r2, [r1, #5]
 801035e:	7943      	ldrb	r3, [r0, #5]
 8010360:	4053      	eors	r3, r2
 8010362:	7143      	strb	r3, [r0, #5]
  ((uint8_t *)d)[ 6] ^= ((uint8_t *)s)[ 6];
 8010364:	798a      	ldrb	r2, [r1, #6]
 8010366:	7983      	ldrb	r3, [r0, #6]
 8010368:	4053      	eors	r3, r2
 801036a:	7183      	strb	r3, [r0, #6]
  ((uint8_t *)d)[ 7] ^= ((uint8_t *)s)[ 7];
 801036c:	79ca      	ldrb	r2, [r1, #7]
 801036e:	79c3      	ldrb	r3, [r0, #7]
 8010370:	4053      	eors	r3, r2
 8010372:	71c3      	strb	r3, [r0, #7]
  ((uint8_t *)d)[ 8] ^= ((uint8_t *)s)[ 8];
 8010374:	7a0a      	ldrb	r2, [r1, #8]
 8010376:	7a03      	ldrb	r3, [r0, #8]
 8010378:	4053      	eors	r3, r2
 801037a:	7203      	strb	r3, [r0, #8]
  ((uint8_t *)d)[ 9] ^= ((uint8_t *)s)[ 9];
 801037c:	7a4a      	ldrb	r2, [r1, #9]
 801037e:	7a43      	ldrb	r3, [r0, #9]
 8010380:	4053      	eors	r3, r2
 8010382:	7243      	strb	r3, [r0, #9]
  ((uint8_t *)d)[10] ^= ((uint8_t *)s)[10];
 8010384:	7a8a      	ldrb	r2, [r1, #10]
 8010386:	7a83      	ldrb	r3, [r0, #10]
 8010388:	4053      	eors	r3, r2
 801038a:	7283      	strb	r3, [r0, #10]
  ((uint8_t *)d)[11] ^= ((uint8_t *)s)[11];
 801038c:	7aca      	ldrb	r2, [r1, #11]
 801038e:	7ac3      	ldrb	r3, [r0, #11]
 8010390:	4053      	eors	r3, r2
 8010392:	72c3      	strb	r3, [r0, #11]
  ((uint8_t *)d)[12] ^= ((uint8_t *)s)[12];
 8010394:	7b0a      	ldrb	r2, [r1, #12]
 8010396:	7b03      	ldrb	r3, [r0, #12]
 8010398:	4053      	eors	r3, r2
 801039a:	7303      	strb	r3, [r0, #12]
  ((uint8_t *)d)[13] ^= ((uint8_t *)s)[13];
 801039c:	7b4a      	ldrb	r2, [r1, #13]
 801039e:	7b43      	ldrb	r3, [r0, #13]
 80103a0:	4053      	eors	r3, r2
 80103a2:	7343      	strb	r3, [r0, #13]
  ((uint8_t *)d)[14] ^= ((uint8_t *)s)[14];
 80103a4:	7b8a      	ldrb	r2, [r1, #14]
 80103a6:	7b83      	ldrb	r3, [r0, #14]
 80103a8:	4053      	eors	r3, r2
 80103aa:	7383      	strb	r3, [r0, #14]
  ((uint8_t *)d)[15] ^= ((uint8_t *)s)[15];
 80103ac:	7bca      	ldrb	r2, [r1, #15]
 80103ae:	7bc3      	ldrb	r3, [r0, #15]
 80103b0:	4053      	eors	r3, r2
 80103b2:	73c3      	strb	r3, [r0, #15]
#endif
}
 80103b4:	4770      	bx	lr

080103b6 <_ZL12copy_and_keyPvPKvS1_>:

static void copy_and_key(void *d, const void *s, const void *k)
{
 80103b6:	b510      	push	{r4, lr}
  ((uint32_t *)d)[ 0] = ((uint32_t *)s)[ 0] ^ ((uint32_t *)k)[ 0];
  ((uint32_t *)d)[ 1] = ((uint32_t *)s)[ 1] ^ ((uint32_t *)k)[ 1];
  ((uint32_t *)d)[ 2] = ((uint32_t *)s)[ 2] ^ ((uint32_t *)k)[ 2];
  ((uint32_t *)d)[ 3] = ((uint32_t *)s)[ 3] ^ ((uint32_t *)k)[ 3];
#elif 1
  ((uint8_t *)d)[ 0] = ((uint8_t *)s)[ 0] ^ ((uint8_t *)k)[ 0];
 80103b8:	780b      	ldrb	r3, [r1, #0]
 80103ba:	7814      	ldrb	r4, [r2, #0]
 80103bc:	4063      	eors	r3, r4
 80103be:	7003      	strb	r3, [r0, #0]
  ((uint8_t *)d)[ 1] = ((uint8_t *)s)[ 1] ^ ((uint8_t *)k)[ 1];
 80103c0:	7854      	ldrb	r4, [r2, #1]
 80103c2:	784b      	ldrb	r3, [r1, #1]
 80103c4:	4063      	eors	r3, r4
 80103c6:	7043      	strb	r3, [r0, #1]
  ((uint8_t *)d)[ 2] = ((uint8_t *)s)[ 2] ^ ((uint8_t *)k)[ 2];
 80103c8:	7894      	ldrb	r4, [r2, #2]
 80103ca:	788b      	ldrb	r3, [r1, #2]
 80103cc:	4063      	eors	r3, r4
 80103ce:	7083      	strb	r3, [r0, #2]
  ((uint8_t *)d)[ 3] = ((uint8_t *)s)[ 3] ^ ((uint8_t *)k)[ 3];
 80103d0:	78d4      	ldrb	r4, [r2, #3]
 80103d2:	78cb      	ldrb	r3, [r1, #3]
 80103d4:	4063      	eors	r3, r4
 80103d6:	70c3      	strb	r3, [r0, #3]
  ((uint8_t *)d)[ 4] = ((uint8_t *)s)[ 4] ^ ((uint8_t *)k)[ 4];
 80103d8:	7914      	ldrb	r4, [r2, #4]
 80103da:	790b      	ldrb	r3, [r1, #4]
 80103dc:	4063      	eors	r3, r4
 80103de:	7103      	strb	r3, [r0, #4]
  ((uint8_t *)d)[ 5] = ((uint8_t *)s)[ 5] ^ ((uint8_t *)k)[ 5];
 80103e0:	7954      	ldrb	r4, [r2, #5]
 80103e2:	794b      	ldrb	r3, [r1, #5]
 80103e4:	4063      	eors	r3, r4
 80103e6:	7143      	strb	r3, [r0, #5]
  ((uint8_t *)d)[ 6] = ((uint8_t *)s)[ 6] ^ ((uint8_t *)k)[ 6];
 80103e8:	7994      	ldrb	r4, [r2, #6]
 80103ea:	798b      	ldrb	r3, [r1, #6]
 80103ec:	4063      	eors	r3, r4
 80103ee:	7183      	strb	r3, [r0, #6]
  ((uint8_t *)d)[ 7] = ((uint8_t *)s)[ 7] ^ ((uint8_t *)k)[ 7];
 80103f0:	79d4      	ldrb	r4, [r2, #7]
 80103f2:	79cb      	ldrb	r3, [r1, #7]
 80103f4:	4063      	eors	r3, r4
 80103f6:	71c3      	strb	r3, [r0, #7]
  ((uint8_t *)d)[ 8] = ((uint8_t *)s)[ 8] ^ ((uint8_t *)k)[ 8];
 80103f8:	7a14      	ldrb	r4, [r2, #8]
 80103fa:	7a0b      	ldrb	r3, [r1, #8]
 80103fc:	4063      	eors	r3, r4
 80103fe:	7203      	strb	r3, [r0, #8]
  ((uint8_t *)d)[ 9] = ((uint8_t *)s)[ 9] ^ ((uint8_t *)k)[ 9];
 8010400:	7a4b      	ldrb	r3, [r1, #9]
 8010402:	7a54      	ldrb	r4, [r2, #9]
 8010404:	4063      	eors	r3, r4
 8010406:	7243      	strb	r3, [r0, #9]
  ((uint8_t *)d)[10] = ((uint8_t *)s)[10] ^ ((uint8_t *)k)[10];
 8010408:	7a8b      	ldrb	r3, [r1, #10]
 801040a:	7a94      	ldrb	r4, [r2, #10]
 801040c:	4063      	eors	r3, r4
 801040e:	7283      	strb	r3, [r0, #10]
  ((uint8_t *)d)[11] = ((uint8_t *)s)[11] ^ ((uint8_t *)k)[11];
 8010410:	7ad4      	ldrb	r4, [r2, #11]
 8010412:	7acb      	ldrb	r3, [r1, #11]
 8010414:	4063      	eors	r3, r4
 8010416:	72c3      	strb	r3, [r0, #11]
  ((uint8_t *)d)[12] = ((uint8_t *)s)[12] ^ ((uint8_t *)k)[12];
 8010418:	7b14      	ldrb	r4, [r2, #12]
 801041a:	7b0b      	ldrb	r3, [r1, #12]
 801041c:	4063      	eors	r3, r4
 801041e:	7303      	strb	r3, [r0, #12]
  ((uint8_t *)d)[13] = ((uint8_t *)s)[13] ^ ((uint8_t *)k)[13];
 8010420:	7b54      	ldrb	r4, [r2, #13]
 8010422:	7b4b      	ldrb	r3, [r1, #13]
 8010424:	4063      	eors	r3, r4
 8010426:	7343      	strb	r3, [r0, #13]
  ((uint8_t *)d)[14] = ((uint8_t *)s)[14] ^ ((uint8_t *)k)[14];
 8010428:	7b94      	ldrb	r4, [r2, #14]
 801042a:	7b8b      	ldrb	r3, [r1, #14]
 801042c:	4063      	eors	r3, r4
 801042e:	7383      	strb	r3, [r0, #14]
  ((uint8_t *)d)[15] = ((uint8_t *)s)[15] ^ ((uint8_t *)k)[15];
 8010430:	7bcb      	ldrb	r3, [r1, #15]
 8010432:	7bd2      	ldrb	r2, [r2, #15]
 8010434:	4053      	eors	r3, r2
 8010436:	73c3      	strb	r3, [r0, #15]
#else
  block_copy(d, s);
  xor_block(d, k);
#endif
}
 8010438:	bd10      	pop	{r4, pc}
	...

0801043c <_Z11aes_set_keyPKhhP11aes_context>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key(const uint8_t key[], length_type keylen, aes_context ctx[1])
{
 801043c:	000b      	movs	r3, r1
 801043e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010440:	3b10      	subs	r3, #16
 8010442:	b2db      	uxtb	r3, r3
 8010444:	b087      	sub	sp, #28
 8010446:	000f      	movs	r7, r1
 8010448:	0015      	movs	r5, r2
 801044a:	2b10      	cmp	r3, #16
 801044c:	d805      	bhi.n	801045a <_Z11aes_set_keyPKhhP11aes_context+0x1e>
 801044e:	2201      	movs	r2, #1
 8010450:	409a      	lsls	r2, r3
 8010452:	493a      	ldr	r1, [pc, #232]	; (801053c <_Z11aes_set_keyPKhhP11aes_context+0x100>)
    break;
  default:
    ctx->rnd = 0;
    return (uint8_t) -1;
  }
  block_copy_nn(ctx->ksch, key, keylen);
 8010454:	2300      	movs	r3, #0
 8010456:	420a      	tst	r2, r1
 8010458:	d105      	bne.n	8010466 <_Z11aes_set_keyPKhhP11aes_context+0x2a>
    ctx->rnd = 0;
 801045a:	2300      	movs	r3, #0
    return (uint8_t) -1;
 801045c:	20ff      	movs	r0, #255	; 0xff
    ctx->rnd = 0;
 801045e:	35f0      	adds	r5, #240	; 0xf0
 8010460:	702b      	strb	r3, [r5, #0]
    ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
    ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
    ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
  }
  return 0;
}
 8010462:	b007      	add	sp, #28
 8010464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *d++ = *s++;
 8010466:	5cc2      	ldrb	r2, [r0, r3]
 8010468:	54ea      	strb	r2, [r5, r3]
 801046a:	3301      	adds	r3, #1
  while(nn--)
 801046c:	429f      	cmp	r7, r3
 801046e:	d1fa      	bne.n	8010466 <_Z11aes_set_keyPKhhP11aes_context+0x2a>
  hi = (keylen + 28) << 2;
 8010470:	003b      	movs	r3, r7
  ctx->rnd = (hi >> 4) - 1;
 8010472:	002a      	movs	r2, r5
  hi = (keylen + 28) << 2;
 8010474:	331c      	adds	r3, #28
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	b2db      	uxtb	r3, r3
 801047a:	9305      	str	r3, [sp, #20]
  ctx->rnd = (hi >> 4) - 1;
 801047c:	111b      	asrs	r3, r3, #4
 801047e:	3b01      	subs	r3, #1
 8010480:	32f0      	adds	r2, #240	; 0xf0
 8010482:	7013      	strb	r3, [r2, #0]
  for(cc = keylen, rc = 1; cc < hi; cc += 4)
 8010484:	2301      	movs	r3, #1
  ctx->rnd = (hi >> 4) - 1;
 8010486:	003c      	movs	r4, r7
  for(cc = keylen, rc = 1; cc < hi; cc += 4)
 8010488:	9304      	str	r3, [sp, #16]
    t0 = ctx->ksch[cc - 4];
 801048a:	192b      	adds	r3, r5, r4
 801048c:	1f1a      	subs	r2, r3, #4
 801048e:	7816      	ldrb	r6, [r2, #0]
    t1 = ctx->ksch[cc - 3];
 8010490:	1eda      	subs	r2, r3, #3
 8010492:	7812      	ldrb	r2, [r2, #0]
    if(cc % keylen == 0)
 8010494:	0039      	movs	r1, r7
    t1 = ctx->ksch[cc - 3];
 8010496:	9201      	str	r2, [sp, #4]
    t2 = ctx->ksch[cc - 2];
 8010498:	1e9a      	subs	r2, r3, #2
    t3 = ctx->ksch[cc - 1];
 801049a:	3b01      	subs	r3, #1
    t2 = ctx->ksch[cc - 2];
 801049c:	7812      	ldrb	r2, [r2, #0]
    t3 = ctx->ksch[cc - 1];
 801049e:	781b      	ldrb	r3, [r3, #0]
    if(cc % keylen == 0)
 80104a0:	0020      	movs	r0, r4
    t2 = ctx->ksch[cc - 2];
 80104a2:	9202      	str	r2, [sp, #8]
    t3 = ctx->ksch[cc - 1];
 80104a4:	9303      	str	r3, [sp, #12]
    if(cc % keylen == 0)
 80104a6:	f7f7 fedb 	bl	8008260 <__aeabi_uidivmod>
 80104aa:	b2c9      	uxtb	r1, r1
 80104ac:	2900      	cmp	r1, #0
 80104ae:	d133      	bne.n	8010518 <_Z11aes_set_keyPKhhP11aes_context+0xdc>
      t0 = s_box(t1) ^ rc;
 80104b0:	4b23      	ldr	r3, [pc, #140]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 80104b2:	9a01      	ldr	r2, [sp, #4]
      t1 = s_box(t2);
 80104b4:	9902      	ldr	r1, [sp, #8]
      t0 = s_box(t1) ^ rc;
 80104b6:	5c9a      	ldrb	r2, [r3, r2]
 80104b8:	9b04      	ldr	r3, [sp, #16]
 80104ba:	405a      	eors	r2, r3
      t1 = s_box(t2);
 80104bc:	4b20      	ldr	r3, [pc, #128]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 80104be:	5c5b      	ldrb	r3, [r3, r1]
      t2 = s_box(t3);
 80104c0:	9903      	ldr	r1, [sp, #12]
      t1 = s_box(t2);
 80104c2:	9301      	str	r3, [sp, #4]
      t2 = s_box(t3);
 80104c4:	4b1e      	ldr	r3, [pc, #120]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 80104c6:	5c5b      	ldrb	r3, [r3, r1]
      rc = f2(rc);
 80104c8:	211b      	movs	r1, #27
      t2 = s_box(t3);
 80104ca:	9302      	str	r3, [sp, #8]
      t3 = s_box(tt);
 80104cc:	4b1c      	ldr	r3, [pc, #112]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 80104ce:	5d9b      	ldrb	r3, [r3, r6]
      t0 = s_box(t1) ^ rc;
 80104d0:	0016      	movs	r6, r2
      t3 = s_box(tt);
 80104d2:	9303      	str	r3, [sp, #12]
      rc = f2(rc);
 80104d4:	9b04      	ldr	r3, [sp, #16]
 80104d6:	09db      	lsrs	r3, r3, #7
 80104d8:	434b      	muls	r3, r1
 80104da:	9904      	ldr	r1, [sp, #16]
 80104dc:	0049      	lsls	r1, r1, #1
 80104de:	404b      	eors	r3, r1
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	9304      	str	r3, [sp, #16]
    ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80104e4:	1be3      	subs	r3, r4, r7
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	5cea      	ldrb	r2, [r5, r3]
    ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80104ea:	18eb      	adds	r3, r5, r3
    ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80104ec:	4056      	eors	r6, r2
 80104ee:	552e      	strb	r6, [r5, r4]
    ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80104f0:	785a      	ldrb	r2, [r3, #1]
 80104f2:	9801      	ldr	r0, [sp, #4]
 80104f4:	1929      	adds	r1, r5, r4
 80104f6:	4050      	eors	r0, r2
 80104f8:	7048      	strb	r0, [r1, #1]
    ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80104fa:	789a      	ldrb	r2, [r3, #2]
 80104fc:	9802      	ldr	r0, [sp, #8]
  for(cc = keylen, rc = 1; cc < hi; cc += 4)
 80104fe:	3404      	adds	r4, #4
    ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010500:	4050      	eors	r0, r2
 8010502:	7088      	strb	r0, [r1, #2]
    ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010504:	78db      	ldrb	r3, [r3, #3]
 8010506:	9a03      	ldr	r2, [sp, #12]
  for(cc = keylen, rc = 1; cc < hi; cc += 4)
 8010508:	b2e4      	uxtb	r4, r4
    ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801050a:	405a      	eors	r2, r3
  for(cc = keylen, rc = 1; cc < hi; cc += 4)
 801050c:	9b05      	ldr	r3, [sp, #20]
    ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801050e:	70ca      	strb	r2, [r1, #3]
  for(cc = keylen, rc = 1; cc < hi; cc += 4)
 8010510:	42a3      	cmp	r3, r4
 8010512:	d8ba      	bhi.n	801048a <_Z11aes_set_keyPKhhP11aes_context+0x4e>
  return 0;
 8010514:	2000      	movs	r0, #0
 8010516:	e7a4      	b.n	8010462 <_Z11aes_set_keyPKhhP11aes_context+0x26>
    else if(keylen > 24 && cc % keylen == 16)
 8010518:	2f18      	cmp	r7, #24
 801051a:	d9e3      	bls.n	80104e4 <_Z11aes_set_keyPKhhP11aes_context+0xa8>
 801051c:	2910      	cmp	r1, #16
 801051e:	d1e1      	bne.n	80104e4 <_Z11aes_set_keyPKhhP11aes_context+0xa8>
      t1 = s_box(t1);
 8010520:	9a01      	ldr	r2, [sp, #4]
      t0 = s_box(t0);
 8010522:	4b07      	ldr	r3, [pc, #28]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 8010524:	5d9e      	ldrb	r6, [r3, r6]
      t1 = s_box(t1);
 8010526:	5c9b      	ldrb	r3, [r3, r2]
      t2 = s_box(t2);
 8010528:	9a02      	ldr	r2, [sp, #8]
      t1 = s_box(t1);
 801052a:	9301      	str	r3, [sp, #4]
      t2 = s_box(t2);
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 801052e:	5c9b      	ldrb	r3, [r3, r2]
      t3 = s_box(t3);
 8010530:	9a03      	ldr	r2, [sp, #12]
      t2 = s_box(t2);
 8010532:	9302      	str	r3, [sp, #8]
      t3 = s_box(t3);
 8010534:	4b02      	ldr	r3, [pc, #8]	; (8010540 <_Z11aes_set_keyPKhhP11aes_context+0x104>)
 8010536:	5c9b      	ldrb	r3, [r3, r2]
 8010538:	9303      	str	r3, [sp, #12]
 801053a:	e7d3      	b.n	80104e4 <_Z11aes_set_keyPKhhP11aes_context+0xa8>
 801053c:	00010101 	.word	0x00010101
 8010540:	08018400 	.word	0x08018400

08010544 <_Z11aes_encryptPKhPhPK11aes_context>:

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt(const uint8_t in[N_BLOCK], uint8_t out[N_BLOCK], const aes_context ctx[1])
{
  if(ctx->rnd)
 8010544:	0013      	movs	r3, r2
{
 8010546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010548:	b0a5      	sub	sp, #148	; 0x94
  if(ctx->rnd)
 801054a:	33f0      	adds	r3, #240	; 0xf0
{
 801054c:	911f      	str	r1, [sp, #124]	; 0x7c
 801054e:	0016      	movs	r6, r2
  if(ctx->rnd)
 8010550:	781a      	ldrb	r2, [r3, #0]
#endif
    shift_sub_rows(s1);
    copy_and_key(out, s1, ctx->ksch + r * N_BLOCK);
  }
  else {
    return (uint8_t) -1;
 8010552:	23ff      	movs	r3, #255	; 0xff
  if(ctx->rnd)
 8010554:	2a00      	cmp	r2, #0
 8010556:	d100      	bne.n	801055a <_Z11aes_encryptPKhPhPK11aes_context+0x16>
 8010558:	e131      	b.n	80107be <_Z11aes_encryptPKhPhPK11aes_context+0x27a>
    copy_and_key(s1, in, ctx->ksch);
 801055a:	0001      	movs	r1, r0
 801055c:	0032      	movs	r2, r6
 801055e:	a820      	add	r0, sp, #128	; 0x80
 8010560:	f7ff ff29 	bl	80103b6 <_ZL12copy_and_keyPvPKvS1_>
    for(r = 1; r < ctx->rnd; ++r)
 8010564:	2501      	movs	r5, #1
 8010566:	012a      	lsls	r2, r5, #4
 8010568:	18b3      	adds	r3, r6, r2
 801056a:	931e      	str	r3, [sp, #120]	; 0x78
 801056c:	ab20      	add	r3, sp, #128	; 0x80
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	9301      	str	r3, [sp, #4]
 8010572:	ab20      	add	r3, sp, #128	; 0x80
 8010574:	795f      	ldrb	r7, [r3, #5]
 8010576:	7a9b      	ldrb	r3, [r3, #10]
 8010578:	9302      	str	r3, [sp, #8]
 801057a:	9a02      	ldr	r2, [sp, #8]
 801057c:	4b91      	ldr	r3, [pc, #580]	; (80107c4 <_Z11aes_encryptPKhPhPK11aes_context+0x280>)
 801057e:	5c9a      	ldrb	r2, [r3, r2]
 8010580:	9203      	str	r2, [sp, #12]
 8010582:	aa20      	add	r2, sp, #128	; 0x80
 8010584:	7bd2      	ldrb	r2, [r2, #15]
 8010586:	9204      	str	r2, [sp, #16]
 8010588:	5c9a      	ldrb	r2, [r3, r2]
 801058a:	9205      	str	r2, [sp, #20]
 801058c:	9a01      	ldr	r2, [sp, #4]
 801058e:	5c98      	ldrb	r0, [r3, r2]
 8010590:	5dda      	ldrb	r2, [r3, r7]
 8010592:	9206      	str	r2, [sp, #24]
 8010594:	aa20      	add	r2, sp, #128	; 0x80
 8010596:	7912      	ldrb	r2, [r2, #4]
 8010598:	9207      	str	r2, [sp, #28]
 801059a:	aa20      	add	r2, sp, #128	; 0x80
 801059c:	7a52      	ldrb	r2, [r2, #9]
 801059e:	9208      	str	r2, [sp, #32]
 80105a0:	aa20      	add	r2, sp, #128	; 0x80
 80105a2:	7b92      	ldrb	r2, [r2, #14]
 80105a4:	9209      	str	r2, [sp, #36]	; 0x24
 80105a6:	5c9a      	ldrb	r2, [r3, r2]
 80105a8:	920a      	str	r2, [sp, #40]	; 0x28
 80105aa:	aa20      	add	r2, sp, #128	; 0x80
 80105ac:	78d2      	ldrb	r2, [r2, #3]
 80105ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80105b0:	5c9a      	ldrb	r2, [r3, r2]
 80105b2:	4694      	mov	ip, r2
 80105b4:	9a07      	ldr	r2, [sp, #28]
 80105b6:	5c9a      	ldrb	r2, [r3, r2]
 80105b8:	920c      	str	r2, [sp, #48]	; 0x30
 80105ba:	9a08      	ldr	r2, [sp, #32]
 80105bc:	5c9a      	ldrb	r2, [r3, r2]
 80105be:	920d      	str	r2, [sp, #52]	; 0x34
 80105c0:	aa20      	add	r2, sp, #128	; 0x80
 80105c2:	7a12      	ldrb	r2, [r2, #8]
 80105c4:	920e      	str	r2, [sp, #56]	; 0x38
 80105c6:	aa20      	add	r2, sp, #128	; 0x80
 80105c8:	7b52      	ldrb	r2, [r2, #13]
 80105ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80105cc:	aa20      	add	r2, sp, #128	; 0x80
 80105ce:	7892      	ldrb	r2, [r2, #2]
 80105d0:	9210      	str	r2, [sp, #64]	; 0x40
 80105d2:	5c9a      	ldrb	r2, [r3, r2]
 80105d4:	9211      	str	r2, [sp, #68]	; 0x44
 80105d6:	aa20      	add	r2, sp, #128	; 0x80
 80105d8:	79d2      	ldrb	r2, [r2, #7]
 80105da:	9212      	str	r2, [sp, #72]	; 0x48
 80105dc:	5c9a      	ldrb	r2, [r3, r2]
 80105de:	9213      	str	r2, [sp, #76]	; 0x4c
 80105e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105e2:	5c9a      	ldrb	r2, [r3, r2]
 80105e4:	9214      	str	r2, [sp, #80]	; 0x50
 80105e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105e8:	5c9a      	ldrb	r2, [r3, r2]
 80105ea:	9215      	str	r2, [sp, #84]	; 0x54
 80105ec:	aa20      	add	r2, sp, #128	; 0x80
 80105ee:	7b12      	ldrb	r2, [r2, #12]
 80105f0:	9216      	str	r2, [sp, #88]	; 0x58
 80105f2:	aa20      	add	r2, sp, #128	; 0x80
 80105f4:	7852      	ldrb	r2, [r2, #1]
 80105f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80105f8:	aa20      	add	r2, sp, #128	; 0x80
 80105fa:	7992      	ldrb	r2, [r2, #6]
 80105fc:	9218      	str	r2, [sp, #96]	; 0x60
 80105fe:	5c9a      	ldrb	r2, [r3, r2]
 8010600:	9219      	str	r2, [sp, #100]	; 0x64
 8010602:	aa20      	add	r2, sp, #128	; 0x80
 8010604:	7ad2      	ldrb	r2, [r2, #11]
 8010606:	921a      	str	r2, [sp, #104]	; 0x68
 8010608:	5c9a      	ldrb	r2, [r3, r2]
 801060a:	921b      	str	r2, [sp, #108]	; 0x6c
 801060c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801060e:	5c9a      	ldrb	r2, [r3, r2]
 8010610:	921c      	str	r2, [sp, #112]	; 0x70
 8010612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010614:	5c9b      	ldrb	r3, [r3, r2]
 8010616:	931d      	str	r3, [sp, #116]	; 0x74
 8010618:	0033      	movs	r3, r6
 801061a:	33f0      	adds	r3, #240	; 0xf0
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	42ab      	cmp	r3, r5
 8010620:	d800      	bhi.n	8010624 <_Z11aes_encryptPKhPhPK11aes_context+0xe0>
 8010622:	e0a6      	b.n	8010772 <_Z11aes_encryptPKhPhPK11aes_context+0x22e>
  dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8010624:	4b68      	ldr	r3, [pc, #416]	; (80107c8 <_Z11aes_encryptPKhPhPK11aes_context+0x284>)
 8010626:	9c01      	ldr	r4, [sp, #4]
 8010628:	9905      	ldr	r1, [sp, #20]
 801062a:	9a03      	ldr	r2, [sp, #12]
 801062c:	5d1c      	ldrb	r4, [r3, r4]
 801062e:	404a      	eors	r2, r1
 8010630:	4054      	eors	r4, r2
 8010632:	4a66      	ldr	r2, [pc, #408]	; (80107cc <_Z11aes_encryptPKhPhPK11aes_context+0x288>)
    for(r = 1; r < ctx->rnd; ++r)
 8010634:	3501      	adds	r5, #1
  dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8010636:	5dd1      	ldrb	r1, [r2, r7]
    for(r = 1; r < ctx->rnd; ++r)
 8010638:	b2ed      	uxtb	r5, r5
  dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801063a:	404c      	eors	r4, r1
 801063c:	a920      	add	r1, sp, #128	; 0x80
 801063e:	700c      	strb	r4, [r1, #0]
  dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8010640:	9905      	ldr	r1, [sp, #20]
 8010642:	5ddc      	ldrb	r4, [r3, r7]
 8010644:	4041      	eors	r1, r0
 8010646:	4061      	eors	r1, r4
 8010648:	9c02      	ldr	r4, [sp, #8]
 801064a:	5d14      	ldrb	r4, [r2, r4]
 801064c:	4061      	eors	r1, r4
 801064e:	ac20      	add	r4, sp, #128	; 0x80
 8010650:	7061      	strb	r1, [r4, #1]
  dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8010652:	9906      	ldr	r1, [sp, #24]
 8010654:	4048      	eors	r0, r1
 8010656:	9902      	ldr	r1, [sp, #8]
 8010658:	5c59      	ldrb	r1, [r3, r1]
 801065a:	4048      	eors	r0, r1
 801065c:	9904      	ldr	r1, [sp, #16]
 801065e:	5c51      	ldrb	r1, [r2, r1]
 8010660:	4048      	eors	r0, r1
 8010662:	70a0      	strb	r0, [r4, #2]
  dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8010664:	9903      	ldr	r1, [sp, #12]
 8010666:	9806      	ldr	r0, [sp, #24]
 8010668:	4041      	eors	r1, r0
 801066a:	9801      	ldr	r0, [sp, #4]
 801066c:	5c10      	ldrb	r0, [r2, r0]
 801066e:	4041      	eors	r1, r0
 8010670:	9804      	ldr	r0, [sp, #16]
 8010672:	5c18      	ldrb	r0, [r3, r0]
 8010674:	4041      	eors	r1, r0
  dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8010676:	4660      	mov	r0, ip
  dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8010678:	70e1      	strb	r1, [r4, #3]
  dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801067a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801067c:	4041      	eors	r1, r0
 801067e:	9807      	ldr	r0, [sp, #28]
 8010680:	5c18      	ldrb	r0, [r3, r0]
 8010682:	4041      	eors	r1, r0
 8010684:	9808      	ldr	r0, [sp, #32]
 8010686:	5c10      	ldrb	r0, [r2, r0]
 8010688:	4041      	eors	r1, r0
 801068a:	7121      	strb	r1, [r4, #4]
  dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801068c:	4661      	mov	r1, ip
 801068e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010690:	4041      	eors	r1, r0
 8010692:	9808      	ldr	r0, [sp, #32]
 8010694:	5c18      	ldrb	r0, [r3, r0]
 8010696:	4041      	eors	r1, r0
 8010698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801069a:	5c10      	ldrb	r0, [r2, r0]
 801069c:	4041      	eors	r1, r0
 801069e:	7161      	strb	r1, [r4, #5]
  dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80106a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80106a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80106a4:	4041      	eors	r1, r0
 80106a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106a8:	5c18      	ldrb	r0, [r3, r0]
 80106aa:	4041      	eors	r1, r0
 80106ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80106ae:	5c10      	ldrb	r0, [r2, r0]
 80106b0:	4041      	eors	r1, r0
 80106b2:	71a1      	strb	r1, [r4, #6]
  dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80106b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80106b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80106b8:	4041      	eors	r1, r0
 80106ba:	9807      	ldr	r0, [sp, #28]
 80106bc:	5c10      	ldrb	r0, [r2, r0]
 80106be:	4041      	eors	r1, r0
 80106c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80106c2:	5c18      	ldrb	r0, [r3, r0]
 80106c4:	4041      	eors	r1, r0
 80106c6:	71e1      	strb	r1, [r4, #7]
  dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80106c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80106ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106cc:	4041      	eors	r1, r0
 80106ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80106d0:	5c18      	ldrb	r0, [r3, r0]
 80106d2:	4041      	eors	r1, r0
 80106d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80106d6:	5c10      	ldrb	r0, [r2, r0]
 80106d8:	4041      	eors	r1, r0
 80106da:	7221      	strb	r1, [r4, #8]
  dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80106dc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80106de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80106e0:	4041      	eors	r1, r0
 80106e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80106e4:	5c18      	ldrb	r0, [r3, r0]
 80106e6:	4041      	eors	r1, r0
 80106e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106ea:	5c10      	ldrb	r0, [r2, r0]
 80106ec:	4041      	eors	r1, r0
 80106ee:	7261      	strb	r1, [r4, #9]
  dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80106f0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80106f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80106f4:	4041      	eors	r1, r0
 80106f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106f8:	5c18      	ldrb	r0, [r3, r0]
 80106fa:	4041      	eors	r1, r0
 80106fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80106fe:	5c10      	ldrb	r0, [r2, r0]
 8010700:	4041      	eors	r1, r0
 8010702:	72a1      	strb	r1, [r4, #10]
  dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8010704:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010706:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010708:	4041      	eors	r1, r0
 801070a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801070c:	5c10      	ldrb	r0, [r2, r0]
 801070e:	4041      	eors	r1, r0
 8010710:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010712:	5c18      	ldrb	r0, [r3, r0]
 8010714:	4041      	eors	r1, r0
 8010716:	72e1      	strb	r1, [r4, #11]
  dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8010718:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801071a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801071c:	4041      	eors	r1, r0
 801071e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010720:	5c18      	ldrb	r0, [r3, r0]
 8010722:	4041      	eors	r1, r0
 8010724:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010726:	5c10      	ldrb	r0, [r2, r0]
 8010728:	4041      	eors	r1, r0
 801072a:	7321      	strb	r1, [r4, #12]
  dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801072c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801072e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010730:	4041      	eors	r1, r0
 8010732:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010734:	5c18      	ldrb	r0, [r3, r0]
 8010736:	4041      	eors	r1, r0
 8010738:	9818      	ldr	r0, [sp, #96]	; 0x60
 801073a:	5c10      	ldrb	r0, [r2, r0]
 801073c:	4041      	eors	r1, r0
 801073e:	7361      	strb	r1, [r4, #13]
  dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8010740:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010742:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010744:	4041      	eors	r1, r0
 8010746:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010748:	5c18      	ldrb	r0, [r3, r0]
 801074a:	4041      	eors	r1, r0
 801074c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801074e:	5c10      	ldrb	r0, [r2, r0]
 8010750:	4041      	eors	r1, r0
 8010752:	73a1      	strb	r1, [r4, #14]
  dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010754:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010756:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010758:	4041      	eors	r1, r0
 801075a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801075c:	5c12      	ldrb	r2, [r2, r0]
  xor_block(d, k);
 801075e:	0020      	movs	r0, r4
  dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010760:	404a      	eors	r2, r1
 8010762:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010764:	5c5b      	ldrb	r3, [r3, r1]
  xor_block(d, k);
 8010766:	991e      	ldr	r1, [sp, #120]	; 0x78
  dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010768:	4053      	eors	r3, r2
 801076a:	73e3      	strb	r3, [r4, #15]
  xor_block(d, k);
 801076c:	f7ff fde2 	bl	8010334 <_ZL9xor_blockPvPKv>
 8010770:	e6f9      	b.n	8010566 <_Z11aes_encryptPKhPhPK11aes_context+0x22>
  st[ 4] = s_box(st[ 4]);
 8010772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  st[ 0] = s_box(st[ 0]);
 8010774:	ab20      	add	r3, sp, #128	; 0x80
  st[ 4] = s_box(st[ 4]);
 8010776:	711a      	strb	r2, [r3, #4]
  st[ 8] = s_box(st[ 8]);
 8010778:	9a14      	ldr	r2, [sp, #80]	; 0x50
  st[ 0] = s_box(st[ 0]);
 801077a:	7018      	strb	r0, [r3, #0]
  st[ 8] = s_box(st[ 8]);
 801077c:	721a      	strb	r2, [r3, #8]
  st[12] = s_box(st[12]);
 801077e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    copy_and_key(out, s1, ctx->ksch + r * N_BLOCK);
 8010780:	0019      	movs	r1, r3
  st[12] = s_box(st[12]);
 8010782:	731a      	strb	r2, [r3, #12]
  st[ 1] = s_box(st[ 5]);
 8010784:	9a06      	ldr	r2, [sp, #24]
    copy_and_key(out, s1, ctx->ksch + r * N_BLOCK);
 8010786:	981f      	ldr	r0, [sp, #124]	; 0x7c
  st[ 1] = s_box(st[ 5]);
 8010788:	705a      	strb	r2, [r3, #1]
  st[ 5] = s_box(st[ 9]);
 801078a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801078c:	715a      	strb	r2, [r3, #5]
  st[ 9] = s_box(st[13]);
 801078e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010790:	725a      	strb	r2, [r3, #9]
  st[13] = s_box(tt);
 8010792:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010794:	735a      	strb	r2, [r3, #13]
  st[ 2] = s_box(st[10]);
 8010796:	9a03      	ldr	r2, [sp, #12]
 8010798:	709a      	strb	r2, [r3, #2]
  st[10] = s_box(tt);
 801079a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801079c:	729a      	strb	r2, [r3, #10]
  st[ 6] = s_box(st[14]);
 801079e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107a0:	719a      	strb	r2, [r3, #6]
  st[14] = s_box(tt);
 80107a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80107a4:	739a      	strb	r2, [r3, #14]
  st[15] = s_box(st[11]);
 80107a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80107a8:	73da      	strb	r2, [r3, #15]
  st[11] = s_box(st[ 7]);
 80107aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80107ac:	72da      	strb	r2, [r3, #11]
  st[ 7] = s_box(st[ 3]);
 80107ae:	4662      	mov	r2, ip
 80107b0:	71da      	strb	r2, [r3, #7]
  st[ 3] = s_box(tt);
 80107b2:	9a05      	ldr	r2, [sp, #20]
 80107b4:	70da      	strb	r2, [r3, #3]
    copy_and_key(out, s1, ctx->ksch + r * N_BLOCK);
 80107b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80107b8:	f7ff fdfd 	bl	80103b6 <_ZL12copy_and_keyPvPKvS1_>
 80107bc:	2300      	movs	r3, #0
  }
  return 0;
}
 80107be:	0018      	movs	r0, r3
 80107c0:	b025      	add	sp, #148	; 0x94
 80107c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c4:	08018400 	.word	0x08018400
 80107c8:	08018500 	.word	0x08018500
 80107cc:	08018600 	.word	0x08018600

080107d0 <_Z13AES_CMAC_InitP13_AES_CMAC_CTX>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 80107d0:	b510      	push	{r4, lr}
 80107d2:	0004      	movs	r4, r0
  memset1(ctx->X, 0, sizeof ctx->X);
 80107d4:	2210      	movs	r2, #16
 80107d6:	30f1      	adds	r0, #241	; 0xf1
 80107d8:	2100      	movs	r1, #0
 80107da:	f001 f9ab 	bl	8011b34 <_Z7memset1Phht>
  ctx->M_n = 0;
 80107de:	0023      	movs	r3, r4
 80107e0:	2100      	movs	r1, #0
 80107e2:	33fc      	adds	r3, #252	; 0xfc
 80107e4:	6199      	str	r1, [r3, #24]
  memset1(ctx->rijndael.ksch, '\0', 240);
 80107e6:	22f0      	movs	r2, #240	; 0xf0
 80107e8:	0020      	movs	r0, r4
 80107ea:	f001 f9a3 	bl	8011b34 <_Z7memset1Phht>
}
 80107ee:	bd10      	pop	{r4, pc}

080107f0 <_Z15AES_CMAC_SetKeyP13_AES_CMAC_CTXPKh>:

void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 80107f0:	b510      	push	{r4, lr}
 80107f2:	0002      	movs	r2, r0
 80107f4:	0008      	movs	r0, r1
  //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
  aes_set_key(key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 80107f6:	2110      	movs	r1, #16
 80107f8:	f7ff fe20 	bl	801043c <_Z11aes_set_keyPKhhP11aes_context>
}
 80107fc:	bd10      	pop	{r4, pc}

080107fe <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm>:
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
  uint32_t mlen;
  uint8_t in[16];

  if(ctx->M_n > 0) {
 80107fe:	0003      	movs	r3, r0
{
 8010800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010802:	0004      	movs	r4, r0
  if(ctx->M_n > 0) {
 8010804:	33fc      	adds	r3, #252	; 0xfc
 8010806:	6998      	ldr	r0, [r3, #24]
 8010808:	1ca3      	adds	r3, r4, #2
{
 801080a:	b087      	sub	sp, #28
 801080c:	33ff      	adds	r3, #255	; 0xff
 801080e:	000e      	movs	r6, r1
 8010810:	0015      	movs	r5, r2
 8010812:	9301      	str	r3, [sp, #4]
  if(ctx->M_n > 0) {
 8010814:	2800      	cmp	r0, #0
 8010816:	d02a      	beq.n	801086e <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0x70>
    mlen = MIN(16 - ctx->M_n, len);
 8010818:	2710      	movs	r7, #16
 801081a:	1a3f      	subs	r7, r7, r0
 801081c:	9700      	str	r7, [sp, #0]
 801081e:	4297      	cmp	r7, r2
 8010820:	d900      	bls.n	8010824 <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0x26>
 8010822:	9200      	str	r2, [sp, #0]
    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8010824:	466b      	mov	r3, sp
 8010826:	881a      	ldrh	r2, [r3, #0]
 8010828:	1ca3      	adds	r3, r4, #2
 801082a:	33ff      	adds	r3, #255	; 0xff
 801082c:	1818      	adds	r0, r3, r0
 801082e:	0031      	movs	r1, r6
 8010830:	f001 f977 	bl	8011b22 <_Z7memcpy1PhPKht>
    ctx->M_n += mlen;
 8010834:	0022      	movs	r2, r4
 8010836:	32fc      	adds	r2, #252	; 0xfc
 8010838:	6991      	ldr	r1, [r2, #24]
 801083a:	9b00      	ldr	r3, [sp, #0]
 801083c:	185b      	adds	r3, r3, r1
 801083e:	6193      	str	r3, [r2, #24]
    if(ctx->M_n < 16 || len == mlen) {
 8010840:	2b0f      	cmp	r3, #15
 8010842:	d93e      	bls.n	80108c2 <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0xc4>
 8010844:	42af      	cmp	r7, r5
 8010846:	d23c      	bcs.n	80108c2 <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0xc4>
 8010848:	0023      	movs	r3, r4
 801084a:	33f1      	adds	r3, #241	; 0xf1
 801084c:	0018      	movs	r0, r3
 801084e:	1ca1      	adds	r1, r4, #2
 8010850:	31ff      	adds	r1, #255	; 0xff
      return;
    }
    XOR(ctx->M_last, ctx->X);
 8010852:	781a      	ldrb	r2, [r3, #0]
 8010854:	7c1f      	ldrb	r7, [r3, #16]
 8010856:	407a      	eors	r2, r7
 8010858:	701a      	strb	r2, [r3, #0]
 801085a:	3301      	adds	r3, #1
 801085c:	428b      	cmp	r3, r1
 801085e:	d1f8      	bne.n	8010852 <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0x54>
    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
    aes_encrypt(ctx->X, ctx->X, &ctx->rijndael);
 8010860:	0022      	movs	r2, r4
 8010862:	0001      	movs	r1, r0
 8010864:	f7ff fe6e 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
    data += mlen;
 8010868:	9b00      	ldr	r3, [sp, #0]
 801086a:	18f6      	adds	r6, r6, r3
    len -= mlen;
 801086c:	1aed      	subs	r5, r5, r3
  }
  while(len > 16) {       /* not last block */
 801086e:	2d10      	cmp	r5, #16
 8010870:	d920      	bls.n	80108b4 <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0xb6>
 8010872:	0023      	movs	r3, r4
 8010874:	0032      	movs	r2, r6
 8010876:	1ca0      	adds	r0, r4, #2
 8010878:	33f1      	adds	r3, #241	; 0xf1
 801087a:	30ff      	adds	r0, #255	; 0xff

    XOR(data, ctx->X);
 801087c:	7819      	ldrb	r1, [r3, #0]
 801087e:	7817      	ldrb	r7, [r2, #0]
 8010880:	3201      	adds	r2, #1
 8010882:	4079      	eors	r1, r7
 8010884:	7019      	strb	r1, [r3, #0]
 8010886:	3301      	adds	r3, #1
 8010888:	4283      	cmp	r3, r0
 801088a:	d1f7      	bne.n	801087c <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0x7e>
    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 801088c:	0027      	movs	r7, r4
 801088e:	37f1      	adds	r7, #241	; 0xf1
 8010890:	2210      	movs	r2, #16
 8010892:	0039      	movs	r1, r7
 8010894:	a802      	add	r0, sp, #8
 8010896:	f001 f944 	bl	8011b22 <_Z7memcpy1PhPKht>
    aes_encrypt(in, in, &ctx->rijndael);
 801089a:	a902      	add	r1, sp, #8
 801089c:	0022      	movs	r2, r4
 801089e:	0008      	movs	r0, r1
 80108a0:	f7ff fe50 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
    memcpy1(&ctx->X[0], in, 16);
 80108a4:	2210      	movs	r2, #16
 80108a6:	a902      	add	r1, sp, #8
 80108a8:	0038      	movs	r0, r7
 80108aa:	f001 f93a 	bl	8011b22 <_Z7memcpy1PhPKht>

    data += 16;
 80108ae:	3610      	adds	r6, #16
    len -= 16;
 80108b0:	3d10      	subs	r5, #16
  while(len > 16) {       /* not last block */
 80108b2:	e7dc      	b.n	801086e <_Z15AES_CMAC_UpdateP13_AES_CMAC_CTXPKhm+0x70>
  }
  /* potential last block, save it */
  memcpy1(ctx->M_last, data, len);
 80108b4:	b2aa      	uxth	r2, r5
 80108b6:	0031      	movs	r1, r6
 80108b8:	9801      	ldr	r0, [sp, #4]
  ctx->M_n = len;
 80108ba:	34fc      	adds	r4, #252	; 0xfc
  memcpy1(ctx->M_last, data, len);
 80108bc:	f001 f931 	bl	8011b22 <_Z7memcpy1PhPKht>
  ctx->M_n = len;
 80108c0:	61a5      	str	r5, [r4, #24]
}
 80108c2:	b007      	add	sp, #28
 80108c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108c6 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX>:

void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 80108c6:	b570      	push	{r4, r5, r6, lr}
 80108c8:	000c      	movs	r4, r1
 80108ca:	b088      	sub	sp, #32
  uint8_t K[16];
  uint8_t in[16];
  /* generate subkey K1 */
  memset1(K, '\0', 16);
 80108cc:	2210      	movs	r2, #16
 80108ce:	2100      	movs	r1, #0
{
 80108d0:	0005      	movs	r5, r0
  memset1(K, '\0', 16);
 80108d2:	4668      	mov	r0, sp
 80108d4:	f001 f92e 	bl	8011b34 <_Z7memset1Phht>

  //rijndael_encrypt(&ctx->rijndael, K, K);

  aes_encrypt(K, K, &ctx->rijndael);
 80108d8:	0022      	movs	r2, r4
 80108da:	4669      	mov	r1, sp
 80108dc:	4668      	mov	r0, sp
 80108de:	f7ff fe31 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>

  if(K[0] & 0x80) {
 80108e2:	466b      	mov	r3, sp
 80108e4:	781a      	ldrb	r2, [r3, #0]
    LSHIFT(K, K);
    K[15] ^= 0x87;
  } else {
    LSHIFT(K, K);
 80108e6:	2300      	movs	r3, #0
  if(K[0] & 0x80) {
 80108e8:	2a7f      	cmp	r2, #127	; 0x7f
 80108ea:	d940      	bls.n	801096e <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0xa8>
    LSHIFT(K, K);
 80108ec:	466a      	mov	r2, sp
 80108ee:	4669      	mov	r1, sp
 80108f0:	5cd2      	ldrb	r2, [r2, r3]
 80108f2:	3301      	adds	r3, #1
 80108f4:	5cc9      	ldrb	r1, [r1, r3]
 80108f6:	0052      	lsls	r2, r2, #1
 80108f8:	11c9      	asrs	r1, r1, #7
 80108fa:	430a      	orrs	r2, r1
 80108fc:	4669      	mov	r1, sp
 80108fe:	1e58      	subs	r0, r3, #1
 8010900:	540a      	strb	r2, [r1, r0]
 8010902:	2b0f      	cmp	r3, #15
 8010904:	d1f2      	bne.n	80108ec <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x26>
    K[15] ^= 0x87;
 8010906:	2379      	movs	r3, #121	; 0x79
    LSHIFT(K, K);
 8010908:	7bca      	ldrb	r2, [r1, #15]
    K[15] ^= 0x87;
 801090a:	425b      	negs	r3, r3
    LSHIFT(K, K);
 801090c:	0052      	lsls	r2, r2, #1
    K[15] ^= 0x87;
 801090e:	4053      	eors	r3, r2
    LSHIFT(K, K);
 8010910:	466a      	mov	r2, sp
 8010912:	73d3      	strb	r3, [r2, #15]
  }


  if(ctx->M_n == 16) {
 8010914:	0023      	movs	r3, r4
 8010916:	33fc      	adds	r3, #252	; 0xfc
 8010918:	699a      	ldr	r2, [r3, #24]
 801091a:	2a10      	cmp	r2, #16
 801091c:	d137      	bne.n	801098e <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0xc8>
    /* last block was a complete block */
    XOR(K, ctx->M_last);
 801091e:	2300      	movs	r3, #0
 8010920:	1ca2      	adds	r2, r4, #2
 8010922:	32ff      	adds	r2, #255	; 0xff
 8010924:	4668      	mov	r0, sp
 8010926:	7811      	ldrb	r1, [r2, #0]
 8010928:	5cc0      	ldrb	r0, [r0, r3]
 801092a:	3301      	adds	r3, #1
 801092c:	4041      	eors	r1, r0
 801092e:	7011      	strb	r1, [r2, #0]
 8010930:	3201      	adds	r2, #1
 8010932:	2b10      	cmp	r3, #16
 8010934:	d1f6      	bne.n	8010924 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x5e>
 8010936:	0023      	movs	r3, r4
 8010938:	33f1      	adds	r3, #241	; 0xf1
 801093a:	0019      	movs	r1, r3
 801093c:	1ca0      	adds	r0, r4, #2
 801093e:	30ff      	adds	r0, #255	; 0xff

    XOR(K, ctx->M_last);


  }
  XOR(ctx->M_last, ctx->X);
 8010940:	781a      	ldrb	r2, [r3, #0]
 8010942:	7c1e      	ldrb	r6, [r3, #16]
 8010944:	4072      	eors	r2, r6
 8010946:	701a      	strb	r2, [r3, #0]
 8010948:	3301      	adds	r3, #1
 801094a:	4298      	cmp	r0, r3
 801094c:	d1f8      	bne.n	8010940 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x7a>

  //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

  memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 801094e:	a804      	add	r0, sp, #16
 8010950:	2210      	movs	r2, #16
 8010952:	f001 f8e6 	bl	8011b22 <_Z7memcpy1PhPKht>
  aes_encrypt(in, digest, &ctx->rijndael);
 8010956:	0022      	movs	r2, r4
 8010958:	0029      	movs	r1, r5
 801095a:	a804      	add	r0, sp, #16
 801095c:	f7ff fdf2 	bl	8010544 <_Z11aes_encryptPKhPhPK11aes_context>
  memset1(K, 0, sizeof K);
 8010960:	2210      	movs	r2, #16
 8010962:	2100      	movs	r1, #0
 8010964:	4668      	mov	r0, sp
 8010966:	f001 f8e5 	bl	8011b34 <_Z7memset1Phht>

}
 801096a:	b008      	add	sp, #32
 801096c:	bd70      	pop	{r4, r5, r6, pc}
    LSHIFT(K, K);
 801096e:	466a      	mov	r2, sp
 8010970:	4669      	mov	r1, sp
 8010972:	5cd2      	ldrb	r2, [r2, r3]
 8010974:	3301      	adds	r3, #1
 8010976:	5cc9      	ldrb	r1, [r1, r3]
 8010978:	0052      	lsls	r2, r2, #1
 801097a:	11c9      	asrs	r1, r1, #7
 801097c:	430a      	orrs	r2, r1
 801097e:	4669      	mov	r1, sp
 8010980:	1e58      	subs	r0, r3, #1
 8010982:	540a      	strb	r2, [r1, r0]
 8010984:	2b0f      	cmp	r3, #15
 8010986:	d1f2      	bne.n	801096e <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0xa8>
 8010988:	7bcb      	ldrb	r3, [r1, #15]
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	e7c0      	b.n	8010910 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x4a>
    if(K[0] & 0x80) {
 801098e:	466b      	mov	r3, sp
 8010990:	7819      	ldrb	r1, [r3, #0]
      LSHIFT(K, K);
 8010992:	2300      	movs	r3, #0
    if(K[0] & 0x80) {
 8010994:	297f      	cmp	r1, #127	; 0x7f
 8010996:	d921      	bls.n	80109dc <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x116>
      LSHIFT(K, K);
 8010998:	4669      	mov	r1, sp
 801099a:	4668      	mov	r0, sp
 801099c:	5cc9      	ldrb	r1, [r1, r3]
 801099e:	3301      	adds	r3, #1
 80109a0:	5cc0      	ldrb	r0, [r0, r3]
 80109a2:	0049      	lsls	r1, r1, #1
 80109a4:	11c0      	asrs	r0, r0, #7
 80109a6:	4301      	orrs	r1, r0
 80109a8:	4668      	mov	r0, sp
 80109aa:	1e5e      	subs	r6, r3, #1
 80109ac:	5581      	strb	r1, [r0, r6]
 80109ae:	2b0f      	cmp	r3, #15
 80109b0:	d1f2      	bne.n	8010998 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0xd2>
      K[15] ^= 0x87;
 80109b2:	2379      	movs	r3, #121	; 0x79
      LSHIFT(K, K);
 80109b4:	7bc1      	ldrb	r1, [r0, #15]
      K[15] ^= 0x87;
 80109b6:	425b      	negs	r3, r3
      LSHIFT(K, K);
 80109b8:	0049      	lsls	r1, r1, #1
      K[15] ^= 0x87;
 80109ba:	404b      	eors	r3, r1
      LSHIFT(K, K);
 80109bc:	4669      	mov	r1, sp
 80109be:	73cb      	strb	r3, [r1, #15]
    ctx->M_last[ctx->M_n] = 0x80;
 80109c0:	2180      	movs	r1, #128	; 0x80
 80109c2:	18a3      	adds	r3, r4, r2
 80109c4:	33ff      	adds	r3, #255	; 0xff
 80109c6:	7099      	strb	r1, [r3, #2]
 80109c8:	2100      	movs	r1, #0
    while(++ctx->M_n < 16) {
 80109ca:	1c53      	adds	r3, r2, #1
 80109cc:	2b0f      	cmp	r3, #15
 80109ce:	d815      	bhi.n	80109fc <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x136>
      ctx->M_last[ctx->M_n] = 0;
 80109d0:	3203      	adds	r2, #3
 80109d2:	32ff      	adds	r2, #255	; 0xff
 80109d4:	18a2      	adds	r2, r4, r2
 80109d6:	7011      	strb	r1, [r2, #0]
    while(++ctx->M_n < 16) {
 80109d8:	001a      	movs	r2, r3
 80109da:	e7f6      	b.n	80109ca <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x104>
      LSHIFT(K, K);
 80109dc:	4669      	mov	r1, sp
 80109de:	4668      	mov	r0, sp
 80109e0:	5cc9      	ldrb	r1, [r1, r3]
 80109e2:	3301      	adds	r3, #1
 80109e4:	5cc0      	ldrb	r0, [r0, r3]
 80109e6:	0049      	lsls	r1, r1, #1
 80109e8:	11c0      	asrs	r0, r0, #7
 80109ea:	4301      	orrs	r1, r0
 80109ec:	4668      	mov	r0, sp
 80109ee:	1e5e      	subs	r6, r3, #1
 80109f0:	5581      	strb	r1, [r0, r6]
 80109f2:	2b0f      	cmp	r3, #15
 80109f4:	d1f2      	bne.n	80109dc <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x116>
 80109f6:	7bc3      	ldrb	r3, [r0, #15]
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	e7df      	b.n	80109bc <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0xf6>
 80109fc:	0022      	movs	r2, r4
 80109fe:	32fc      	adds	r2, #252	; 0xfc
 8010a00:	6193      	str	r3, [r2, #24]
    XOR(K, ctx->M_last);
 8010a02:	2300      	movs	r3, #0
 8010a04:	1ca2      	adds	r2, r4, #2
 8010a06:	32ff      	adds	r2, #255	; 0xff
 8010a08:	4668      	mov	r0, sp
 8010a0a:	7811      	ldrb	r1, [r2, #0]
 8010a0c:	5cc0      	ldrb	r0, [r0, r3]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	4041      	eors	r1, r0
 8010a12:	7011      	strb	r1, [r2, #0]
 8010a14:	3201      	adds	r2, #1
 8010a16:	2b10      	cmp	r3, #16
 8010a18:	d1f6      	bne.n	8010a08 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x142>
 8010a1a:	e78c      	b.n	8010936 <_Z14AES_CMAC_FinalPhP13_AES_CMAC_CTX+0x70>

08010a1c <_ZN14RadioContainerI6SX126xE16CallbackIsrRadioEPv>:
  ~RadioContainer();
  R *Radio;
  void Send(eModulationType MacTxModulationCurrent, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac);
  void Receive(void);
  void IsrRadio(void);             // Isr routine implemented in IsrRoutine.cpp file
  static void CallbackIsrRadio(void *obj) {
 8010a1c:	b510      	push	{r4, lr}
    (reinterpret_cast<RadioContainer< R >*>(obj))->IsrRadio();
 8010a1e:	f000 f995 	bl	8010d4c <_ZN14RadioContainerI6SX126xE8IsrRadioEv>
  };
 8010a22:	bd10      	pop	{r4, pc}

08010a24 <_ZN14RadioContainerI6SX126xEC1EPS0_>:
template class RadioContainer<SX1276>;
template class RadioContainer<SX1272>;
template class RadioContainer<SX126x>;

template <class R> RadioContainer <R>::RadioContainer(R *RadioUser) {
  StateRadioProcess = RADIOSTATE_IDLE;
 8010a24:	2289      	movs	r2, #137	; 0x89
 8010a26:	2300      	movs	r3, #0
 8010a28:	0092      	lsls	r2, r2, #2
template <class R> RadioContainer <R>::RadioContainer(R *RadioUser) {
 8010a2a:	b510      	push	{r4, lr}
  StateRadioProcess = RADIOSTATE_IDLE;
 8010a2c:	5083      	str	r3, [r0, r2]
  TimestampRtcIsr = 0;
 8010a2e:	3204      	adds	r2, #4
 8010a30:	5083      	str	r3, [r0, r2]
  TxFrequency = 868100000;
 8010a32:	2391      	movs	r3, #145	; 0x91
 8010a34:	4a07      	ldr	r2, [pc, #28]	; (8010a54 <_ZN14RadioContainerI6SX126xEC1EPS0_+0x30>)
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	50c2      	str	r2, [r0, r3]
 8010a3a:	4a07      	ldr	r2, [pc, #28]	; (8010a58 <_ZN14RadioContainerI6SX126xEC1EPS0_+0x34>)
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	52c2      	strh	r2, [r0, r3]
template <class R> RadioContainer <R>::RadioContainer(R *RadioUser) {
 8010a40:	0004      	movs	r4, r0
  TxPower = 14;
  TxSf = 7;
  Radio = RadioUser;
 8010a42:	6001      	str	r1, [r0, #0]
  LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 8010a44:	4805      	ldr	r0, [pc, #20]	; (8010a5c <_ZN14RadioContainerI6SX126xEC1EPS0_+0x38>)
 8010a46:	f7fd fb3b 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 8010a4a:	238d      	movs	r3, #141	; 0x8d
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	50e0      	str	r0, [r4, r3]
};
 8010a50:	0020      	movs	r0, r4
 8010a52:	bd10      	pop	{r4, pc}
 8010a54:	33be27a0 	.word	0x33be27a0
 8010a58:	0000070e 	.word	0x0000070e
 8010a5c:	20001988 	.word	0x20001988

08010a60 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht>:
/*                      Public  Methods                                                         */
/************************************************************************************************/
//@note Partionning Public/private not yet finalized


template <class R> void RadioContainer <R>::Send(eModulationType TxModulation, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac) {   //@note could/should be merge with tx config
 8010a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  TxFrequency       = TxFrequencyMac;
 8010a62:	2691      	movs	r6, #145	; 0x91
template <class R> void RadioContainer <R>::Send(eModulationType TxModulation, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac) {   //@note could/should be merge with tx config
 8010a64:	0004      	movs	r4, r0
  TxFrequency       = TxFrequencyMac;
 8010a66:	00b6      	lsls	r6, r6, #2
 8010a68:	51a2      	str	r2, [r4, r6]
  TxPower           = TxPowerMac;
 8010a6a:	2292      	movs	r2, #146	; 0x92
template <class R> void RadioContainer <R>::Send(eModulationType TxModulation, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac) {   //@note could/should be merge with tx config
 8010a6c:	b087      	sub	sp, #28
 8010a6e:	9105      	str	r1, [sp, #20]
 8010a70:	a90c      	add	r1, sp, #48	; 0x30
 8010a72:	780d      	ldrb	r5, [r1, #0]
  TxPower           = TxPowerMac;
 8010a74:	0092      	lsls	r2, r2, #2
template <class R> void RadioContainer <R>::Send(eModulationType TxModulation, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac) {   //@note could/should be merge with tx config
 8010a76:	a90d      	add	r1, sp, #52	; 0x34
  TxPower           = TxPowerMac;
 8010a78:	54a3      	strb	r3, [r4, r2]
template <class R> void RadioContainer <R>::Send(eModulationType TxModulation, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac) {   //@note could/should be merge with tx config
 8010a7a:	7808      	ldrb	r0, [r1, #0]
  TxSf              = TxSfMac;
 8010a7c:	4b26      	ldr	r3, [pc, #152]	; (8010b18 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xb8>)
  TxBw              = TxBwMac;
 8010a7e:	4a27      	ldr	r2, [pc, #156]	; (8010b1c <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xbc>)
  TxPayloadSize     = TxPayloadSizeMac;
 8010a80:	2783      	movs	r7, #131	; 0x83
  TxSf              = TxSfMac;
 8010a82:	54e5      	strb	r5, [r4, r3]
  TxBw              = TxBwMac;
 8010a84:	54a0      	strb	r0, [r4, r2]
  StateRadioProcess = RADIOSTATE_TXON;
 8010a86:	2201      	movs	r2, #1
  CurrentMod        = TxModulation;
  Radio->Reset();
 8010a88:	0025      	movs	r5, r4
template <class R> void RadioContainer <R>::Send(eModulationType TxModulation, uint32_t TxFrequencyMac, uint8_t TxPowerMac, uint8_t TxSfMac, eBandWidth TxBwMac, uint16_t TxPayloadSizeMac) {   //@note could/should be merge with tx config
 8010a8a:	a90e      	add	r1, sp, #56	; 0x38
 8010a8c:	8809      	ldrh	r1, [r1, #0]
  StateRadioProcess = RADIOSTATE_TXON;
 8010a8e:	3b25      	subs	r3, #37	; 0x25
  TxPayloadSize     = TxPayloadSizeMac;
 8010a90:	00bf      	lsls	r7, r7, #2
 8010a92:	53e1      	strh	r1, [r4, r7]
  StateRadioProcess = RADIOSTATE_TXON;
 8010a94:	50e2      	str	r2, [r4, r3]
  CurrentMod        = TxModulation;
 8010a96:	9905      	ldr	r1, [sp, #20]
 8010a98:	4b21      	ldr	r3, [pc, #132]	; (8010b20 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xc0>)
 8010a9a:	54e1      	strb	r1, [r4, r3]
  Radio->Reset();
 8010a9c:	cd01      	ldmia	r5!, {r0}
 8010a9e:	f004 f8dd 	bl	8014c5c <_ZN6SX126x5ResetEv>
  if(TxModulation == LORA) {
 8010aa2:	9905      	ldr	r1, [sp, #20]
 8010aa4:	2900      	cmp	r1, #0
 8010aa6:	d124      	bne.n	8010af2 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0x92>
    InsertTrace(__COUNTER__, FileId);
 8010aa8:	3103      	adds	r1, #3
 8010aaa:	2002      	movs	r0, #2
 8010aac:	f000 ffee 	bl	8011a8c <_Z11InsertTracehh>
    DEBUG_PRINTF("  TxFrequency = %d, RxSf = %d , RxBw = %d PayloadSize = %d\n", TxFrequency, TxSf, TxBw, TxPayloadSize);
 8010ab0:	5be2      	ldrh	r2, [r4, r7]
 8010ab2:	4b19      	ldr	r3, [pc, #100]	; (8010b18 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xb8>)
 8010ab4:	9201      	str	r2, [sp, #4]
 8010ab6:	4a19      	ldr	r2, [pc, #100]	; (8010b1c <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xbc>)
 8010ab8:	5ce3      	ldrb	r3, [r4, r3]
 8010aba:	5ca2      	ldrb	r2, [r4, r2]
 8010abc:	4919      	ldr	r1, [pc, #100]	; (8010b24 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xc4>)
 8010abe:	9200      	str	r2, [sp, #0]
 8010ac0:	9805      	ldr	r0, [sp, #20]
 8010ac2:	59a2      	ldr	r2, [r4, r6]
 8010ac4:	f7f9 fe72 	bl	800a7ac <SEGGER_RTT_printf>
    Radio->SendLora(TxPhyPayload, TxPayloadSize, TxSf, TxBw, TxFrequency, TxPower);
 8010ac8:	2092      	movs	r0, #146	; 0x92
 8010aca:	0080      	lsls	r0, r0, #2
 8010acc:	5621      	ldrsb	r1, [r4, r0]
 8010ace:	4b12      	ldr	r3, [pc, #72]	; (8010b18 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xb8>)
 8010ad0:	9102      	str	r1, [sp, #8]
 8010ad2:	4912      	ldr	r1, [pc, #72]	; (8010b1c <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xbc>)
 8010ad4:	59a0      	ldr	r0, [r4, r6]
 8010ad6:	5c61      	ldrb	r1, [r4, r1]
 8010ad8:	9001      	str	r0, [sp, #4]
 8010ada:	9100      	str	r1, [sp, #0]
 8010adc:	5ce3      	ldrb	r3, [r4, r3]
 8010ade:	5de2      	ldrb	r2, [r4, r7]
 8010ae0:	0029      	movs	r1, r5
 8010ae2:	6820      	ldr	r0, [r4, #0]
 8010ae4:	f004 fbdc 	bl	80152a0 <_ZN6SX126x8SendLoraEPhhh10eBandWidthma>

/******************************************************************************/
/*                                MCU Wait API                                */
/******************************************************************************/
  void mwait_ms(int delayms) {
    HAL_Delay(delayms);
 8010ae8:	2001      	movs	r0, #1
 8010aea:	f7fa f9e9 	bl	800aec0 <HAL_Delay>
    InsertTrace(__COUNTER__, FileId);
    DEBUG_MSG("FSK TRANSMISSION \n");
    Radio->SendFsk(TxPhyPayload, TxPayloadSize, TxFrequency, TxPower);
  }
  mcu.mwait_ms(1);
};
 8010aee:	b007      	add	sp, #28
 8010af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    InsertTrace(__COUNTER__, FileId);
 8010af2:	2103      	movs	r1, #3
 8010af4:	0008      	movs	r0, r1
 8010af6:	f000 ffc9 	bl	8011a8c <_Z11InsertTracehh>
    DEBUG_MSG("FSK TRANSMISSION \n");
 8010afa:	490b      	ldr	r1, [pc, #44]	; (8010b28 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0xc8>)
 8010afc:	2000      	movs	r0, #0
 8010afe:	f7f9 fc95 	bl	800a42c <SEGGER_RTT_WriteString>
    Radio->SendFsk(TxPhyPayload, TxPayloadSize, TxFrequency, TxPower);
 8010b02:	2392      	movs	r3, #146	; 0x92
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	56e3      	ldrsb	r3, [r4, r3]
 8010b08:	5de2      	ldrb	r2, [r4, r7]
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	0029      	movs	r1, r5
 8010b0e:	59a3      	ldr	r3, [r4, r6]
 8010b10:	6820      	ldr	r0, [r4, #0]
 8010b12:	f004 fc37 	bl	8015384 <_ZN6SX126x7SendFskEPhhma>
 8010b16:	e7e7      	b.n	8010ae8 <_ZN14RadioContainerI6SX126xE4SendE15eModulationTypemhh10eBandWidtht+0x88>
 8010b18:	00000249 	.word	0x00000249
 8010b1c:	0000024a 	.word	0x0000024a
 8010b20:	00000243 	.word	0x00000243
 8010b24:	08018786 	.word	0x08018786
 8010b28:	080187c2 	.word	0x080187c2

08010b2c <_ZN14RadioContainerI6SX126xE9AttachIsrEv>:
template <class R> void RadioContainer <R>::AttachIsr(void) {
 8010b2c:	b510      	push	{r4, lr}
 8010b2e:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8010b30:	2103      	movs	r1, #3
 8010b32:	2000      	movs	r0, #0
 8010b34:	f000 ffaa 	bl	8011a8c <_Z11InsertTracehh>
  mcu.AttachInterruptIn(&RadioContainer< R >::CallbackIsrRadio, this);
 8010b38:	0022      	movs	r2, r4
 8010b3a:	4902      	ldr	r1, [pc, #8]	; (8010b44 <_ZN14RadioContainerI6SX126xE9AttachIsrEv+0x18>)
 8010b3c:	4802      	ldr	r0, [pc, #8]	; (8010b48 <_ZN14RadioContainerI6SX126xE9AttachIsrEv+0x1c>)
 8010b3e:	f7fd fb4b 	bl	800e1d8 <_ZN12McuSTM32L07117AttachInterruptInEPFvPvES0_>
}
 8010b42:	bd10      	pop	{r4, pc}
 8010b44:	08010a1d 	.word	0x08010a1d
 8010b48:	20001988 	.word	0x20001988

08010b4c <_ZN14RadioContainerI6SX126xE9DetachIsrEv>:
template <class R> void RadioContainer <R>::DetachIsr(void) {
 8010b4c:	b510      	push	{r4, lr}
  InsertTrace(__COUNTER__, FileId);
 8010b4e:	2103      	movs	r1, #3
 8010b50:	2001      	movs	r0, #1
 8010b52:	f000 ff9b 	bl	8011a8c <_Z11InsertTracehh>
}
 8010b56:	bd10      	pop	{r4, pc}

08010b58 <_ZN14RadioContainerI6SX126xE13GetRadioStateEv>:
    Radio->RxFsk(RxFrequency, RxWindowMs);
    DEBUG_PRINTF("  RxFrequency = %d, FSK \n", RxFrequency);
  }
}

template <class R>int RadioContainer<R>::GetRadioState(void) {
 8010b58:	b510      	push	{r4, lr}
  InsertTrace(__COUNTER__, FileId);
 8010b5a:	2103      	movs	r1, #3
template <class R>int RadioContainer<R>::GetRadioState(void) {
 8010b5c:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8010b5e:	2006      	movs	r0, #6
 8010b60:	f000 ff94 	bl	8011a8c <_Z11InsertTracehh>
  return StateRadioProcess;
 8010b64:	2389      	movs	r3, #137	; 0x89
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	58e0      	ldr	r0, [r4, r3]
};
 8010b6a:	bd10      	pop	{r4, pc}

08010b6c <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm>:
template <class R> void RadioContainer <R>::SetRxConfig(eModulationType RxModulation, uint32_t RxFrequencyMac, uint8_t RxSfMac, eBandWidth RxBwMac, uint32_t RxWindowMs) {
 8010b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  RxFrequency  = RxFrequencyMac;
 8010b6e:	258f      	movs	r5, #143	; 0x8f
 8010b70:	00ad      	lsls	r5, r5, #2
 8010b72:	5142      	str	r2, [r0, r5]
  RxBw         = RxBwMac;
 8010b74:	2290      	movs	r2, #144	; 0x90
template <class R> void RadioContainer <R>::SetRxConfig(eModulationType RxModulation, uint32_t RxFrequencyMac, uint8_t RxSfMac, eBandWidth RxBwMac, uint32_t RxWindowMs) {
 8010b76:	000e      	movs	r6, r1
 8010b78:	a908      	add	r1, sp, #32
 8010b7a:	7809      	ldrb	r1, [r1, #0]
  RxSf         = RxSfMac;
 8010b7c:	4f18      	ldr	r7, [pc, #96]	; (8010be0 <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x74>)
  RxBw         = RxBwMac;
 8010b7e:	0092      	lsls	r2, r2, #2
 8010b80:	5481      	strb	r1, [r0, r2]
  RxSf         = RxSfMac;
 8010b82:	55c3      	strb	r3, [r0, r7]
  RxMod        = RxModulation;
 8010b84:	4b17      	ldr	r3, [pc, #92]	; (8010be4 <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x78>)
template <class R> void RadioContainer <R>::SetRxConfig(eModulationType RxModulation, uint32_t RxFrequencyMac, uint8_t RxSfMac, eBandWidth RxBwMac, uint32_t RxWindowMs) {
 8010b86:	0004      	movs	r4, r0
  RxMod        = RxModulation;
 8010b88:	54c6      	strb	r6, [r0, r3]
  CurrentMod   = RxModulation;
 8010b8a:	4b17      	ldr	r3, [pc, #92]	; (8010be8 <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x7c>)
    InsertTrace(__COUNTER__, FileId);
 8010b8c:	2103      	movs	r1, #3
  CurrentMod   = RxModulation;
 8010b8e:	54c6      	strb	r6, [r0, r3]
  if(RxModulation == LORA) {
 8010b90:	2e00      	cmp	r6, #0
 8010b92:	d117      	bne.n	8010bc4 <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x58>
    InsertTrace(__COUNTER__, FileId);
 8010b94:	2004      	movs	r0, #4
 8010b96:	f000 ff79 	bl	8011a8c <_Z11InsertTracehh>
    Radio->RxLora(RxBw, RxSf, RxFrequency, RxWindowMs);
 8010b9a:	2390      	movs	r3, #144	; 0x90
 8010b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	5ce1      	ldrb	r1, [r4, r3]
 8010ba2:	5de2      	ldrb	r2, [r4, r7]
 8010ba4:	9000      	str	r0, [sp, #0]
 8010ba6:	5963      	ldr	r3, [r4, r5]
 8010ba8:	6820      	ldr	r0, [r4, #0]
 8010baa:	f004 faf1 	bl	8015190 <_ZN6SX126x6RxLoraE10eBandWidthhmm>
    DEBUG_PRINTF("  RxFrequency = %d, RxSf = %d , RxBw = %d \n", RxFrequency, RxSf, RxBw);
 8010bae:	2290      	movs	r2, #144	; 0x90
 8010bb0:	0092      	lsls	r2, r2, #2
 8010bb2:	5ca2      	ldrb	r2, [r4, r2]
 8010bb4:	5de3      	ldrb	r3, [r4, r7]
 8010bb6:	9200      	str	r2, [sp, #0]
 8010bb8:	490c      	ldr	r1, [pc, #48]	; (8010bec <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x80>)
 8010bba:	5962      	ldr	r2, [r4, r5]
 8010bbc:	0030      	movs	r0, r6
 8010bbe:	f7f9 fdf5 	bl	800a7ac <SEGGER_RTT_printf>
}
 8010bc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    InsertTrace(__COUNTER__, FileId);
 8010bc4:	2005      	movs	r0, #5
 8010bc6:	f000 ff61 	bl	8011a8c <_Z11InsertTracehh>
    Radio->RxFsk(RxFrequency, RxWindowMs);
 8010bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bcc:	5961      	ldr	r1, [r4, r5]
 8010bce:	6820      	ldr	r0, [r4, #0]
 8010bd0:	f004 fc20 	bl	8015414 <_ZN6SX126x5RxFskEmm>
    DEBUG_PRINTF("  RxFrequency = %d, FSK \n", RxFrequency);
 8010bd4:	5962      	ldr	r2, [r4, r5]
 8010bd6:	4906      	ldr	r1, [pc, #24]	; (8010bf0 <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x84>)
 8010bd8:	2000      	movs	r0, #0
 8010bda:	f7f9 fde7 	bl	800a7ac <SEGGER_RTT_printf>
}
 8010bde:	e7f0      	b.n	8010bc2 <_ZN14RadioContainerI6SX126xE11SetRxConfigE15eModulationTypemh10eBandWidthm+0x56>
 8010be0:	00000241 	.word	0x00000241
 8010be4:	00000242 	.word	0x00000242
 8010be8:	00000243 	.word	0x00000243
 8010bec:	08018700 	.word	0x08018700
 8010bf0:	0801872c 	.word	0x0801872c

08010bf4 <_ZN14RadioContainerI6SX126xE12CheckDevAddrEm>:
/********************************************************/
/*               Check is valid devaddr                 */
/********************************************************/
template <class R> eValidDevAddr RadioContainer<R>::CheckDevAddr(uint32_t devAddrToTest) {

  if(devAddrToTest == DevAddrIsr) {
 8010bf4:	2284      	movs	r2, #132	; 0x84
 8010bf6:	0092      	lsls	r2, r2, #2
 8010bf8:	5882      	ldr	r2, [r0, r2]
template <class R> eValidDevAddr RadioContainer<R>::CheckDevAddr(uint32_t devAddrToTest) {
 8010bfa:	0003      	movs	r3, r0
    return VALID_DEV_ADDR_UNICAST;
 8010bfc:	2000      	movs	r0, #0
  if(devAddrToTest == DevAddrIsr) {
 8010bfe:	428a      	cmp	r2, r1
 8010c00:	d017      	beq.n	8010c32 <_ZN14RadioContainerI6SX126xE12CheckDevAddrEm+0x3e>
  }
  if((devAddrToTest ==   DevAddrClassCG0Isr) && (ClassCG0EnableIsr == CLASS_CG0_ENABLE)) {
 8010c02:	2286      	movs	r2, #134	; 0x86
 8010c04:	0092      	lsls	r2, r2, #2
 8010c06:	589a      	ldr	r2, [r3, r2]
 8010c08:	4291      	cmp	r1, r2
 8010c0a:	d105      	bne.n	8010c18 <_ZN14RadioContainerI6SX126xE12CheckDevAddrEm+0x24>
 8010c0c:	2285      	movs	r2, #133	; 0x85
 8010c0e:	0092      	lsls	r2, r2, #2
 8010c10:	5c9a      	ldrb	r2, [r3, r2]
    return VALID_DEV_ADDR_MULTI_CAST_G0;
 8010c12:	3001      	adds	r0, #1
  if((devAddrToTest ==   DevAddrClassCG0Isr) && (ClassCG0EnableIsr == CLASS_CG0_ENABLE)) {
 8010c14:	2a00      	cmp	r2, #0
 8010c16:	d00c      	beq.n	8010c32 <_ZN14RadioContainerI6SX126xE12CheckDevAddrEm+0x3e>
  }
  if((devAddrToTest ==   DevAddrClassCG1Isr) && (ClassCG0EnableIsr == CLASS_CG1_ENABLE)) {
 8010c18:	2287      	movs	r2, #135	; 0x87
 8010c1a:	0092      	lsls	r2, r2, #2
 8010c1c:	589a      	ldr	r2, [r3, r2]
    return VALID_DEV_ADDR_MULTI_CAST_G1;
  }
  return(UNVALID_DEV_ADDR);
 8010c1e:	2003      	movs	r0, #3
  if((devAddrToTest ==   DevAddrClassCG1Isr) && (ClassCG0EnableIsr == CLASS_CG1_ENABLE)) {
 8010c20:	4291      	cmp	r1, r2
 8010c22:	d106      	bne.n	8010c32 <_ZN14RadioContainerI6SX126xE12CheckDevAddrEm+0x3e>
 8010c24:	2285      	movs	r2, #133	; 0x85
 8010c26:	0092      	lsls	r2, r2, #2
 8010c28:	5c98      	ldrb	r0, [r3, r2]
    return VALID_DEV_ADDR_MULTI_CAST_G1;
 8010c2a:	3802      	subs	r0, #2
 8010c2c:	1e43      	subs	r3, r0, #1
 8010c2e:	4198      	sbcs	r0, r3
 8010c30:	3002      	adds	r0, #2
}
 8010c32:	4770      	bx	lr

08010c34 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv>:


template <class R> int RadioContainer<R>::DumpRxPayloadAndMetadata(void) {
 8010c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c36:	0004      	movs	r4, r0
 8010c38:	250e      	movs	r5, #14
 8010c3a:	4b3e      	ldr	r3, [pc, #248]	; (8010d34 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x100>)
 8010c3c:	b085      	sub	sp, #20
 8010c3e:	18e1      	adds	r1, r4, r3
  int16_t snr;
  int16_t rssi;
  if(CurrentMod == LORA) {
 8010c40:	4b3d      	ldr	r3, [pc, #244]	; (8010d38 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x104>)
 8010c42:	1d22      	adds	r2, r4, #4
 8010c44:	5ce3      	ldrb	r3, [r4, r3]
 8010c46:	446d      	add	r5, sp
 8010c48:	6800      	ldr	r0, [r0, #0]
 8010c4a:	32ff      	adds	r2, #255	; 0xff
 8010c4c:	ae03      	add	r6, sp, #12
    Radio->FetchPayloadLora(&RxPhyPayloadSize, RxPhyPayload, &snr, &rssi);
 8010c4e:	9500      	str	r5, [sp, #0]
  if(CurrentMod == LORA) {
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d151      	bne.n	8010cf8 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xc4>
    Radio->FetchPayloadLora(&RxPhyPayloadSize, RxPhyPayload, &snr, &rssi);
 8010c54:	0033      	movs	r3, r6
 8010c56:	f004 f8de 	bl	8014e16 <_ZN6SX126x16FetchPayloadLoraEPhS0_PsS1_>
  } else {
    Radio->FetchPayloadFsk(&RxPhyPayloadSize, RxPhyPayload, &snr, &rssi);
  }
  RxPhyPayloadSnr = (int) snr;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	5ef2      	ldrsh	r2, [r6, r3]
 8010c5e:	2381      	movs	r3, #129	; 0x81
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	50e2      	str	r2, [r4, r3]
  RxPhyPayloadRssi = (int) rssi;
 8010c64:	2300      	movs	r3, #0
 8010c66:	5eea      	ldrsh	r2, [r5, r3]
 8010c68:	2382      	movs	r3, #130	; 0x82
  /* check Mtype */
  int status = OKLORAWAN;
  InsertTrace(__COUNTER__, FileId);
  uint8_t MtypeRxtmp = RxPhyPayload[0] >> 5;
 8010c6a:	0027      	movs	r7, r4
  RxPhyPayloadRssi = (int) rssi;
 8010c6c:	009b      	lsls	r3, r3, #2
 8010c6e:	50e2      	str	r2, [r4, r3]
  InsertTrace(__COUNTER__, FileId);
 8010c70:	2103      	movs	r1, #3
 8010c72:	2008      	movs	r0, #8
  uint8_t MtypeRxtmp = RxPhyPayload[0] >> 5;
 8010c74:	37ff      	adds	r7, #255	; 0xff
  InsertTrace(__COUNTER__, FileId);
 8010c76:	f000 ff09 	bl	8011a8c <_Z11InsertTracehh>
  uint8_t MtypeRxtmp = RxPhyPayload[0] >> 5;
 8010c7a:	793d      	ldrb	r5, [r7, #4]
 8010c7c:	116d      	asrs	r5, r5, #5
  if((MtypeRxtmp == JOINREQUEST) || (MtypeRxtmp == UNCONF_DATA_UP) || (MtypeRxtmp == CONF_DATA_UP) || (MtypeRxtmp == REJOIN_REQUEST)) {
 8010c7e:	d007      	beq.n	8010c90 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x5c>
 8010c80:	2304      	movs	r3, #4
 8010c82:	002a      	movs	r2, r5
 8010c84:	439a      	bics	r2, r3
 8010c86:	2a02      	cmp	r2, #2
 8010c88:	d002      	beq.n	8010c90 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x5c>
  int status = OKLORAWAN;
 8010c8a:	2600      	movs	r6, #0
  if((MtypeRxtmp == JOINREQUEST) || (MtypeRxtmp == UNCONF_DATA_UP) || (MtypeRxtmp == CONF_DATA_UP) || (MtypeRxtmp == REJOIN_REQUEST)) {
 8010c8c:	2d04      	cmp	r5, #4
 8010c8e:	d10a      	bne.n	8010ca6 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x72>
    status += ERRORLORAWAN;
    InsertTrace(__COUNTER__, FileId);
 8010c90:	2103      	movs	r1, #3
 8010c92:	2009      	movs	r0, #9
 8010c94:	f000 fefa 	bl	8011a8c <_Z11InsertTracehh>
    status += ERRORLORAWAN;
 8010c98:	2601      	movs	r6, #1
    DEBUG_PRINTF(" BAD Mtype = %d for RX Frame \n", MtypeRxtmp);
 8010c9a:	002a      	movs	r2, r5
 8010c9c:	4927      	ldr	r1, [pc, #156]	; (8010d3c <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x108>)
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f7f9 fd84 	bl	800a7ac <SEGGER_RTT_printf>
    status += ERRORLORAWAN;
 8010ca4:	4276      	negs	r6, r6
  }
  /* check devaddr */
  if(JoinedStatus == JOINED) {
 8010ca6:	4b26      	ldr	r3, [pc, #152]	; (8010d40 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x10c>)
 8010ca8:	5ce3      	ldrb	r3, [r4, r3]
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d139      	bne.n	8010d22 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xee>
    uint32_t DevAddrtmp = RxPhyPayload[1] + (RxPhyPayload[2] << 8) + (RxPhyPayload[3] << 16) + (RxPhyPayload[4] << 24);
 8010cae:	79bd      	ldrb	r5, [r7, #6]
 8010cb0:	797b      	ldrb	r3, [r7, #5]
 8010cb2:	022d      	lsls	r5, r5, #8
 8010cb4:	18ed      	adds	r5, r5, r3
 8010cb6:	79fb      	ldrb	r3, [r7, #7]
    CurrentDevaddrType = CheckDevAddr(DevAddrtmp);
 8010cb8:	0020      	movs	r0, r4
    uint32_t DevAddrtmp = RxPhyPayload[1] + (RxPhyPayload[2] << 8) + (RxPhyPayload[3] << 16) + (RxPhyPayload[4] << 24);
 8010cba:	041b      	lsls	r3, r3, #16
 8010cbc:	18ed      	adds	r5, r5, r3
 8010cbe:	7a3b      	ldrb	r3, [r7, #8]
 8010cc0:	061b      	lsls	r3, r3, #24
 8010cc2:	18ed      	adds	r5, r5, r3
    CurrentDevaddrType = CheckDevAddr(DevAddrtmp);
 8010cc4:	0029      	movs	r1, r5
 8010cc6:	f7ff ff95 	bl	8010bf4 <_ZN14RadioContainerI6SX126xE12CheckDevAddrEm>
 8010cca:	238e      	movs	r3, #142	; 0x8e
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	0001      	movs	r1, r0
 8010cd0:	54e0      	strb	r0, [r4, r3]
    if(CurrentDevaddrType == UNVALID_DEV_ADDR) {
 8010cd2:	2803      	cmp	r0, #3
 8010cd4:	d114      	bne.n	8010d00 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xcc>
      status += ERRORLORAWAN;
      InsertTrace(__COUNTER__, FileId);
 8010cd6:	200a      	movs	r0, #10
 8010cd8:	f000 fed8 	bl	8011a8c <_Z11InsertTracehh>
      DEBUG_PRINTF(" BAD DevAddr = %x for RX Frame \n", DevAddrtmp);
 8010cdc:	002a      	movs	r2, r5
 8010cde:	4919      	ldr	r1, [pc, #100]	; (8010d44 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x110>)
 8010ce0:	2000      	movs	r0, #0
      status += ERRORLORAWAN;
 8010ce2:	3e01      	subs	r6, #1
      DEBUG_PRINTF(" BAD DevAddr = %x for RX Frame \n", DevAddrtmp);
 8010ce4:	f7f9 fd62 	bl	800a7ac <SEGGER_RTT_printf>
    }
    if(status != OKLORAWAN) {
      RxPhyPayloadSize = 0;
 8010ce8:	2200      	movs	r2, #0
 8010cea:	4b12      	ldr	r3, [pc, #72]	; (8010d34 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x100>)
      InsertTrace(__COUNTER__, FileId);
 8010cec:	2103      	movs	r1, #3
      RxPhyPayloadSize = 0;
 8010cee:	54e2      	strb	r2, [r4, r3]
      InsertTrace(__COUNTER__, FileId);
 8010cf0:	200b      	movs	r0, #11
 8010cf2:	f000 fecb 	bl	8011a8c <_Z11InsertTracehh>
 8010cf6:	e00e      	b.n	8010d16 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xe2>
    Radio->FetchPayloadFsk(&RxPhyPayloadSize, RxPhyPayload, &snr, &rssi);
 8010cf8:	0033      	movs	r3, r6
 8010cfa:	f004 f8a7 	bl	8014e4c <_ZN6SX126x15FetchPayloadFskEPhS0_PsS1_>
 8010cfe:	e7ac      	b.n	8010c5a <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x26>
    if(status != OKLORAWAN) {
 8010d00:	2e00      	cmp	r6, #0
 8010d02:	d10b      	bne.n	8010d1c <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xe8>
    }
  } else {
    CurrentDevaddrType = VALID_DEV_ADDR_UNICAST;
  }
  if(status == OKLORAWAN) {
    IsReceiveOnRXC = (StateRadioProcess == RADIOSTATE_RXC) ? RECEIVE_ON_RXC : NOT_RECEIVE_ON_RXC;
 8010d04:	2389      	movs	r3, #137	; 0x89
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	58e3      	ldr	r3, [r4, r3]
 8010d0a:	2600      	movs	r6, #0
 8010d0c:	3b04      	subs	r3, #4
 8010d0e:	425a      	negs	r2, r3
 8010d10:	4153      	adcs	r3, r2
 8010d12:	4a0d      	ldr	r2, [pc, #52]	; (8010d48 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0x114>)
 8010d14:	54a3      	strb	r3, [r4, r2]
  }
  return (status);
}
 8010d16:	0030      	movs	r0, r6
 8010d18:	b005      	add	sp, #20
 8010d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d1c:	2601      	movs	r6, #1
 8010d1e:	4276      	negs	r6, r6
 8010d20:	e7e2      	b.n	8010ce8 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xb4>
    CurrentDevaddrType = VALID_DEV_ADDR_UNICAST;
 8010d22:	238e      	movs	r3, #142	; 0x8e
 8010d24:	2200      	movs	r2, #0
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	54e2      	strb	r2, [r4, r3]
  if(status == OKLORAWAN) {
 8010d2a:	4296      	cmp	r6, r2
 8010d2c:	d0ea      	beq.n	8010d04 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xd0>
 8010d2e:	2601      	movs	r6, #1
 8010d30:	4276      	negs	r6, r6
  return (status);
 8010d32:	e7f0      	b.n	8010d16 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv+0xe2>
 8010d34:	00000202 	.word	0x00000202
 8010d38:	00000243 	.word	0x00000243
 8010d3c:	08018746 	.word	0x08018746
 8010d40:	00000221 	.word	0x00000221
 8010d44:	08018765 	.word	0x08018765
 8010d48:	00000239 	.word	0x00000239

08010d4c <_ZN14RadioContainerI6SX126xE8IsrRadioEv>:


template class RadioContainer<SX1276>;
template class RadioContainer<SX1272>;
template class RadioContainer<SX126x>;
template <class R> void RadioContainer <R>::IsrRadio(void) {
 8010d4c:	b5f0      	push	{r4, r5, r6, r7, lr}


  int status = OKLORAWAN;
  uint32_t tCurrentMillisec;
  LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 8010d4e:	4e6f      	ldr	r6, [pc, #444]	; (8010f0c <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1c0>)
template <class R> void RadioContainer <R>::IsrRadio(void) {
 8010d50:	0004      	movs	r4, r0
 8010d52:	b085      	sub	sp, #20
  LastItTimeFailsafe = mcu.RtcGetTimeSecond();
 8010d54:	0030      	movs	r0, r6
 8010d56:	f7fd f9b3 	bl	800e0c0 <_ZN12McuSTM32L07116RtcGetTimeSecondEv>
 8010d5a:	238d      	movs	r3, #141	; 0x8d
 8010d5c:	2788      	movs	r7, #136	; 0x88
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	50e0      	str	r0, [r4, r3]
  if(this->CurrentMod == LORA) {
 8010d62:	4b6b      	ldr	r3, [pc, #428]	; (8010f10 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1c4>)
 8010d64:	00bf      	lsls	r7, r7, #2
 8010d66:	5ce3      	ldrb	r3, [r4, r3]
    RegIrqFlag = Radio->GetIrqFlagsLora();
 8010d68:	6820      	ldr	r0, [r4, #0]
  if(this->CurrentMod == LORA) {
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d111      	bne.n	8010d92 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x46>
    RegIrqFlag = Radio->GetIrqFlagsLora();
 8010d6e:	f004 f809 	bl	8014d84 <_ZN6SX126x15GetIrqFlagsLoraEv>
 8010d72:	55e0      	strb	r0, [r4, r7]
    Radio->ClearIrqFlagsLora();
 8010d74:	6820      	ldr	r0, [r4, #0]
 8010d76:	f004 f8f1 	bl	8014f5c <_ZN6SX126x17ClearIrqFlagsLoraEv>
  } else {
    RegIrqFlag = Radio->GetIrqFlagsFsk();
    Radio->ClearIrqFlagsFsk();
  }
  switch(RegIrqFlag) {
 8010d7a:	5de2      	ldrb	r2, [r4, r7]
 8010d7c:	2a40      	cmp	r2, #64	; 0x40
 8010d7e:	d033      	beq.n	8010de8 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x9c>
 8010d80:	d80e      	bhi.n	8010da0 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x54>
 8010d82:	2a20      	cmp	r2, #32
 8010d84:	d100      	bne.n	8010d88 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x3c>
 8010d86:	e087      	b.n	8010e98 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x14c>

  case BAD_PACKET_IRQ_FLAG:
    break;

  default:
    DEBUG_PRINTF("receive It radio error %x\n", RegIrqFlag);
 8010d88:	4962      	ldr	r1, [pc, #392]	; (8010f14 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1c8>)
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	f7f9 fd0e 	bl	800a7ac <SEGGER_RTT_printf>
    break;
 8010d90:	e082      	b.n	8010e98 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x14c>
    RegIrqFlag = Radio->GetIrqFlagsFsk();
 8010d92:	f004 f812 	bl	8014dba <_ZN6SX126x14GetIrqFlagsFskEv>
 8010d96:	55e0      	strb	r0, [r4, r7]
    Radio->ClearIrqFlagsFsk();
 8010d98:	6820      	ldr	r0, [r4, #0]
 8010d9a:	f004 f8e7 	bl	8014f6c <_ZN6SX126x16ClearIrqFlagsFskEv>
 8010d9e:	e7ec      	b.n	8010d7a <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x2e>
  switch(RegIrqFlag) {
 8010da0:	2a60      	cmp	r2, #96	; 0x60
 8010da2:	d100      	bne.n	8010da6 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x5a>
 8010da4:	e078      	b.n	8010e98 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x14c>
 8010da6:	2a80      	cmp	r2, #128	; 0x80
 8010da8:	d1ee      	bne.n	8010d88 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x3c>
    if(StateRadioProcess == RADIOSTATE_RXC) {
 8010daa:	2389      	movs	r3, #137	; 0x89
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	58e3      	ldr	r3, [r4, r3]
 8010db0:	2b04      	cmp	r3, #4
 8010db2:	d000      	beq.n	8010db6 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x6a>
 8010db4:	e070      	b.n	8010e98 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x14c>
      Radio->RxLora(RxBw, RxSf, RxFrequency, 10000);
 8010db6:	4b58      	ldr	r3, [pc, #352]	; (8010f18 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1cc>)
 8010db8:	6820      	ldr	r0, [r4, #0]
 8010dba:	5ce2      	ldrb	r2, [r4, r3]
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	5ce1      	ldrb	r1, [r4, r3]
 8010dc0:	4b56      	ldr	r3, [pc, #344]	; (8010f1c <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1d0>)
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	238f      	movs	r3, #143	; 0x8f
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	58e3      	ldr	r3, [r4, r3]
 8010dca:	f004 f9e1 	bl	8015190 <_ZN6SX126x6RxLoraE10eBandWidthhmm>
      DEBUG_MSG("  **************************\n ");
 8010dce:	4954      	ldr	r1, [pc, #336]	; (8010f20 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1d4>)
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	f7f9 fb2b 	bl	800a42c <SEGGER_RTT_WriteString>
      DEBUG_MSG(" *      RXC  Timeout       *\n ");
 8010dd6:	4953      	ldr	r1, [pc, #332]	; (8010f24 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1d8>)
 8010dd8:	2000      	movs	r0, #0
 8010dda:	f7f9 fb27 	bl	800a42c <SEGGER_RTT_WriteString>
      DEBUG_MSG(" ***************************\n ");
 8010dde:	4952      	ldr	r1, [pc, #328]	; (8010f28 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1dc>)
 8010de0:	2000      	movs	r0, #0
 8010de2:	f7f9 fb23 	bl	800a42c <SEGGER_RTT_WriteString>
      return;
 8010de6:	e048      	b.n	8010e7a <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x12e>
    InsertTrace(__COUNTER__, FileId);
 8010de8:	2106      	movs	r1, #6
 8010dea:	2000      	movs	r0, #0
 8010dec:	f000 fe4e 	bl	8011a8c <_Z11InsertTracehh>
    tCurrentMillisec =  mcu.RtcGetTimeMs();
 8010df0:	0030      	movs	r0, r6
 8010df2:	f7fd f969 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
    status = DumpRxPayloadAndMetadata();
 8010df6:	0020      	movs	r0, r4
 8010df8:	f7ff ff1c 	bl	8010c34 <_ZN14RadioContainerI6SX126xE24DumpRxPayloadAndMetadataEv>
    if(status != OKLORAWAN) {    // Case receive a packet but it isn't a valid packet
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d04b      	beq.n	8010e98 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x14c>
      InsertTrace(__COUNTER__, FileId);
 8010e00:	2106      	movs	r1, #6
 8010e02:	2001      	movs	r0, #1
 8010e04:	f000 fe42 	bl	8011a8c <_Z11InsertTracehh>
      tCurrentMillisec =  mcu.RtcGetTimeMs();
 8010e08:	0030      	movs	r0, r6
 8010e0a:	f7fd f95d 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
      uint32_t timeoutMs = LastTimeRxWindowsMs - tCurrentMillisec;
 8010e0e:	238b      	movs	r3, #139	; 0x8b
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	58e5      	ldr	r5, [r4, r3]
      if(((int)(LastTimeRxWindowsMs - tCurrentMillisec - 5 * SymbolDuration) > 0) || (StateRadioProcess == RADIOSTATE_RXC)) {
 8010e14:	238c      	movs	r3, #140	; 0x8c
 8010e16:	2205      	movs	r2, #5
 8010e18:	009b      	lsls	r3, r3, #2
 8010e1a:	58e3      	ldr	r3, [r4, r3]
      uint32_t timeoutMs = LastTimeRxWindowsMs - tCurrentMillisec;
 8010e1c:	1a2d      	subs	r5, r5, r0
      if(((int)(LastTimeRxWindowsMs - tCurrentMillisec - 5 * SymbolDuration) > 0) || (StateRadioProcess == RADIOSTATE_RXC)) {
 8010e1e:	4353      	muls	r3, r2
      tCurrentMillisec =  mcu.RtcGetTimeMs();
 8010e20:	9003      	str	r0, [sp, #12]
      if(((int)(LastTimeRxWindowsMs - tCurrentMillisec - 5 * SymbolDuration) > 0) || (StateRadioProcess == RADIOSTATE_RXC)) {
 8010e22:	1aeb      	subs	r3, r5, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	dc04      	bgt.n	8010e32 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0xe6>
 8010e28:	2389      	movs	r3, #137	; 0x89
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	58e3      	ldr	r3, [r4, r3]
 8010e2e:	2b04      	cmp	r3, #4
 8010e30:	d12c      	bne.n	8010e8c <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x140>
 8010e32:	238f      	movs	r3, #143	; 0x8f
        if(RxMod == LORA) {
 8010e34:	4a3d      	ldr	r2, [pc, #244]	; (8010f2c <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1e0>)
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	5ca2      	ldrb	r2, [r4, r2]
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	58e3      	ldr	r3, [r4, r3]
 8010e3e:	2a00      	cmp	r2, #0
 8010e40:	d11f      	bne.n	8010e82 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x136>
 8010e42:	2290      	movs	r2, #144	; 0x90
          if(StateRadioProcess == RADIOSTATE_RXC) {
 8010e44:	2689      	movs	r6, #137	; 0x89
 8010e46:	0092      	lsls	r2, r2, #2
 8010e48:	00b6      	lsls	r6, r6, #2
 8010e4a:	5ca1      	ldrb	r1, [r4, r2]
 8010e4c:	59a6      	ldr	r6, [r4, r6]
 8010e4e:	4a32      	ldr	r2, [pc, #200]	; (8010f18 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1cc>)
 8010e50:	5ca2      	ldrb	r2, [r4, r2]
 8010e52:	2e04      	cmp	r6, #4
 8010e54:	d113      	bne.n	8010e7e <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x132>
            Radio->RxLora(RxBw, RxSf, RxFrequency, 10000);
 8010e56:	4e31      	ldr	r6, [pc, #196]	; (8010f1c <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1d0>)
 8010e58:	9600      	str	r6, [sp, #0]
            Radio->RxLora(RxBw, RxSf, RxFrequency, timeoutMs);
 8010e5a:	f004 f999 	bl	8015190 <_ZN6SX126x6RxLoraE10eBandWidthhmm>
        DEBUG_MSG("Receive a packet But rejected\n");
 8010e5e:	4934      	ldr	r1, [pc, #208]	; (8010f30 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1e4>)
 8010e60:	2000      	movs	r0, #0
 8010e62:	f7f9 fae3 	bl	800a42c <SEGGER_RTT_WriteString>
        DEBUG_PRINTF("tcurrent %u timeout = %d, end time %u \n ", tCurrentMillisec, timeoutMs, LastTimeRxWindowsMs);
 8010e66:	238b      	movs	r3, #139	; 0x8b
 8010e68:	009b      	lsls	r3, r3, #2
 8010e6a:	58e3      	ldr	r3, [r4, r3]
 8010e6c:	9a03      	ldr	r2, [sp, #12]
 8010e6e:	9300      	str	r3, [sp, #0]
 8010e70:	4930      	ldr	r1, [pc, #192]	; (8010f34 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1e8>)
 8010e72:	002b      	movs	r3, r5
 8010e74:	2000      	movs	r0, #0
 8010e76:	f7f9 fc99 	bl	800a7ac <SEGGER_RTT_printf>
  default:
    InsertTrace(__COUNTER__, FileId);
    DEBUG_PRINTF("StateRadioProcess error %x\n", StateRadioProcess);
    break;
  }
};
 8010e7a:	b005      	add	sp, #20
 8010e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Radio->RxLora(RxBw, RxSf, RxFrequency, timeoutMs);
 8010e7e:	9500      	str	r5, [sp, #0]
 8010e80:	e7eb      	b.n	8010e5a <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x10e>
          Radio->RxFsk(RxFrequency, timeoutMs);
 8010e82:	002a      	movs	r2, r5
 8010e84:	0019      	movs	r1, r3
 8010e86:	f004 fac5 	bl	8015414 <_ZN6SX126x5RxFskEmm>
 8010e8a:	e7e8      	b.n	8010e5e <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x112>
      DEBUG_MSG("Receive a packet But rejected and too late to restart\n");
 8010e8c:	492a      	ldr	r1, [pc, #168]	; (8010f38 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1ec>)
 8010e8e:	2000      	movs	r0, #0
 8010e90:	f7f9 facc 	bl	800a42c <SEGGER_RTT_WriteString>
      RegIrqFlag = RXTIMEOUT_IRQ_FLAG;
 8010e94:	2380      	movs	r3, #128	; 0x80
 8010e96:	55e3      	strb	r3, [r4, r7]
  DEBUG_PRINTF("StateRadioProcess: %x\n", StateRadioProcess);
 8010e98:	2589      	movs	r5, #137	; 0x89
  Radio->Sleep(false);
 8010e9a:	2100      	movs	r1, #0
  DEBUG_PRINTF("StateRadioProcess: %x\n", StateRadioProcess);
 8010e9c:	00ad      	lsls	r5, r5, #2
  Radio->Sleep(false);
 8010e9e:	6820      	ldr	r0, [r4, #0]
 8010ea0:	f004 f82c 	bl	8014efc <_ZN6SX126x5SleepEb>
  DEBUG_PRINTF("StateRadioProcess: %x\n", StateRadioProcess);
 8010ea4:	5962      	ldr	r2, [r4, r5]
 8010ea6:	4925      	ldr	r1, [pc, #148]	; (8010f3c <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1f0>)
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	f7f9 fc7f 	bl	800a7ac <SEGGER_RTT_printf>
  switch(StateRadioProcess) {
 8010eae:	5963      	ldr	r3, [r4, r5]
 8010eb0:	002f      	movs	r7, r5
 8010eb2:	1e58      	subs	r0, r3, #1
 8010eb4:	2803      	cmp	r0, #3
 8010eb6:	d81e      	bhi.n	8010ef6 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1aa>
 8010eb8:	f7f7 f938 	bl	800812c <__gnu_thumb1_case_uqi>
 8010ebc:	1b171002 	.word	0x1b171002
    InsertTrace(__COUNTER__, FileId);
 8010ec0:	2106      	movs	r1, #6
 8010ec2:	2002      	movs	r0, #2
 8010ec4:	f000 fde2 	bl	8011a8c <_Z11InsertTracehh>
    TimestampRtcIsr = mcu.RtcGetTimeMs();   //@info Timestamp only on txdone it
 8010ec8:	0030      	movs	r0, r6
 8010eca:	f7fd f8fd 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
 8010ece:	238a      	movs	r3, #138	; 0x8a
    StateRadioProcess = RADIOSTATE_TXFINISHED;
 8010ed0:	2202      	movs	r2, #2
    TimestampRtcIsr = mcu.RtcGetTimeMs();   //@info Timestamp only on txdone it
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	50e0      	str	r0, [r4, r3]
    StateRadioProcess = RADIOSTATE_TXFINISHED;
 8010ed6:	3b04      	subs	r3, #4
 8010ed8:	50e2      	str	r2, [r4, r3]
    break;
 8010eda:	e7ce      	b.n	8010e7a <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x12e>
    InsertTrace(__COUNTER__, FileId);
 8010edc:	2106      	movs	r1, #6
 8010ede:	2003      	movs	r0, #3
 8010ee0:	f000 fdd4 	bl	8011a8c <_Z11InsertTracehh>
    StateRadioProcess = RADIOSTATE_RX1FINISHED;
 8010ee4:	2303      	movs	r3, #3
    StateRadioProcess = RADIOSTATE_IDLE;
 8010ee6:	51e3      	str	r3, [r4, r7]
    break;
 8010ee8:	e7c7      	b.n	8010e7a <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x12e>
    InsertTrace(__COUNTER__, FileId);
 8010eea:	2106      	movs	r1, #6
 8010eec:	2004      	movs	r0, #4
 8010eee:	f000 fdcd 	bl	8011a8c <_Z11InsertTracehh>
    StateRadioProcess = RADIOSTATE_IDLE;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	e7f7      	b.n	8010ee6 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x19a>
    InsertTrace(__COUNTER__, FileId);
 8010ef6:	2106      	movs	r1, #6
 8010ef8:	2005      	movs	r0, #5
 8010efa:	f000 fdc7 	bl	8011a8c <_Z11InsertTracehh>
    DEBUG_PRINTF("StateRadioProcess error %x\n", StateRadioProcess);
 8010efe:	5962      	ldr	r2, [r4, r5]
 8010f00:	490f      	ldr	r1, [pc, #60]	; (8010f40 <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x1f4>)
 8010f02:	2000      	movs	r0, #0
 8010f04:	f7f9 fc52 	bl	800a7ac <SEGGER_RTT_printf>
    break;
 8010f08:	e7b7      	b.n	8010e7a <_ZN14RadioContainerI6SX126xE8IsrRadioEv+0x12e>
 8010f0a:	46c0      	nop			; (mov r8, r8)
 8010f0c:	20001988 	.word	0x20001988
 8010f10:	00000243 	.word	0x00000243
 8010f14:	08018892 	.word	0x08018892
 8010f18:	00000241 	.word	0x00000241
 8010f1c:	00002710 	.word	0x00002710
 8010f20:	08017c84 	.word	0x08017c84
 8010f24:	08018854 	.word	0x08018854
 8010f28:	08018873 	.word	0x08018873
 8010f2c:	00000242 	.word	0x00000242
 8010f30:	080187d5 	.word	0x080187d5
 8010f34:	080187f4 	.word	0x080187f4
 8010f38:	0801881d 	.word	0x0801881d
 8010f3c:	080188ad 	.word	0x080188ad
 8010f40:	080188c4 	.word	0x080188c4

08010f44 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8010f44:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010f48:	4b03      	ldr	r3, [pc, #12]	; (8010f58 <__NVIC_SystemReset+0x14>)
 8010f4a:	4a04      	ldr	r2, [pc, #16]	; (8010f5c <__NVIC_SystemReset+0x18>)
 8010f4c:	60da      	str	r2, [r3, #12]
 8010f4e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8010f52:	46c0      	nop			; (mov r8, r8)
 8010f54:	e7fd      	b.n	8010f52 <__NVIC_SystemReset+0xe>
 8010f56:	46c0      	nop			; (mov r8, r8)
 8010f58:	e000ed00 	.word	0xe000ed00
 8010f5c:	05fa0004 	.word	0x05fa0004

08010f60 <_ZN13LoraRegionsEUI6SX126xE21RegionInitChannelMaskEv>:
  }
  return (status);
};

template < class R >void LoraRegionsEU<R>::RegionInitChannelMask(void) {
  UnwrappedChannelMask = 0xFFFF;
 8010f60:	238f      	movs	r3, #143	; 0x8f
 8010f62:	2201      	movs	r2, #1
 8010f64:	011b      	lsls	r3, r3, #4
 8010f66:	4252      	negs	r2, r2
 8010f68:	52c2      	strh	r2, [r0, r3]
};
 8010f6a:	4770      	bx	lr

08010f6c <_ZN13LoraRegionsEUI6SX126xE21RegionIsValidDataRateEh>:
}

template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsValidDataRate(uint8_t temp) {
  eStatusLoRaWan status;
  status = (temp > 7) ? ERRORLORAWAN : OKLORAWAN;
  return (status);
 8010f6c:	2007      	movs	r0, #7
 8010f6e:	4288      	cmp	r0, r1
 8010f70:	4180      	sbcs	r0, r0
}
 8010f72:	4770      	bx	lr

08010f74 <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidChannelIndexEh>:
  eStatusLoRaWan status = OKLORAWAN;
  if((ChannelIndex  < 3) || (ChannelIndex  > 15)) {
    status = ERRORLORAWAN;
  }

  return (status);
 8010f74:	200c      	movs	r0, #12
  if((ChannelIndex  < 3) || (ChannelIndex  > 15)) {
 8010f76:	3903      	subs	r1, #3
 8010f78:	b2c9      	uxtb	r1, r1
  return (status);
 8010f7a:	4288      	cmp	r0, r1
 8010f7c:	4180      	sbcs	r0, r0
};
 8010f7e:	4770      	bx	lr

08010f80 <_ZN13LoraRegionsEUI6SX126xE20RegionGetAdrAckLimitEv>:
  }
};

template < class R >uint8_t  LoraRegionsEU<R>::RegionGetAdrAckLimit(void) {
  return (ADR_ACK_LIMIT);
}
 8010f80:	2040      	movs	r0, #64	; 0x40
 8010f82:	4770      	bx	lr

08010f84 <_ZN13LoraRegionsEUI6SX126xE20RegionGetAdrAckDelayEv>:
template < class R >uint8_t  LoraRegionsEU<R>::RegionGetAdrAckDelay(void) {
  return (ADR_ACK_DELAY);
}
 8010f84:	2020      	movs	r0, #32
 8010f86:	4770      	bx	lr

08010f88 <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv>:
template < class R >void LoraRegionsEU<R>::RegionDecreaseDataRate(void) {
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8010f8c:	2101      	movs	r1, #1
 8010f8e:	2009      	movs	r0, #9
 8010f90:	0025      	movs	r5, r4
 8010f92:	f000 fd7b 	bl	8011a8c <_Z11InsertTracehh>
  uint8_t ValidTemp = 0;//@notereview boolfjerrek
 8010f96:	2100      	movs	r1, #0
 8010f98:	35c8      	adds	r5, #200	; 0xc8
  while((this->MacTxDataRateAdr > 0) && (ValidTemp == 0)) {
 8010f9a:	79e3      	ldrb	r3, [r4, #7]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d019      	beq.n	8010fd4 <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x4c>
 8010fa0:	2900      	cmp	r1, #0
 8010fa2:	d117      	bne.n	8010fd4 <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x4c>
 8010fa4:	0020      	movs	r0, r4
    this->MacTxDataRateAdr--;
 8010fa6:	3b01      	subs	r3, #1
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	71e2      	strb	r2, [r4, #7]
 8010fac:	30b8      	adds	r0, #184	; 0xb8
      if(this->MacChannelIndexEnabled [i] == CHANNEL_ENABLED) {
 8010fae:	7803      	ldrb	r3, [r0, #0]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d10b      	bne.n	8010fcc <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x44>
        if((this->MacTxDataRateAdr <= this->MacMaxDataRateChannel [i]) && (this->MacTxDataRateAdr >= this->MacMinDataRateChannel [i])) {
 8010fb4:	0003      	movs	r3, r0
 8010fb6:	3b10      	subs	r3, #16
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d306      	bcc.n	8010fcc <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x44>
 8010fbe:	0003      	movs	r3, r0
 8010fc0:	3b20      	subs	r3, #32
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d801      	bhi.n	8010fcc <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x44>
          ValidTemp++;
 8010fc8:	3101      	adds	r1, #1
 8010fca:	b2c9      	uxtb	r1, r1
 8010fcc:	3001      	adds	r0, #1
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 8010fce:	42a8      	cmp	r0, r5
 8010fd0:	d1ed      	bne.n	8010fae <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x26>
 8010fd2:	e7e2      	b.n	8010f9a <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x12>
  if((this->MacTxDataRateAdr == 0) && (ValidTemp == 0)) {
 8010fd4:	430b      	orrs	r3, r1
 8010fd6:	d107      	bne.n	8010fe8 <_ZN13LoraRegionsEUI6SX126xE22RegionDecreaseDataRateEv+0x60>
    this->MacChannelIndexEnabled [0] = CHANNEL_ENABLED;
 8010fd8:	0023      	movs	r3, r4
 8010fda:	2202      	movs	r2, #2
 8010fdc:	33b8      	adds	r3, #184	; 0xb8
 8010fde:	32ff      	adds	r2, #255	; 0xff
 8010fe0:	801a      	strh	r2, [r3, #0]
    this->MacChannelIndexEnabled [1] = CHANNEL_ENABLED;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	34ba      	adds	r4, #186	; 0xba
 8010fe6:	7023      	strb	r3, [r4, #0]
}
 8010fe8:	bd70      	pop	{r4, r5, r6, pc}

08010fea <_ZN13LoraRegionsEUI6SX126xE26RegionIsAcceptableDataRateEh>:
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsAcceptableDataRate(uint8_t DataRate) {
 8010fea:	b570      	push	{r4, r5, r6, lr}
 8010fec:	0004      	movs	r4, r0
 8010fee:	000d      	movs	r5, r1
  InsertTrace(__COUNTER__, FileId);
 8010ff0:	2005      	movs	r0, #5
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	f000 fd4a 	bl	8011a8c <_Z11InsertTracehh>
    if(((UnwrappedChannelMask >> i) & 0x1) == 1) {
 8010ff8:	238f      	movs	r3, #143	; 0x8f
 8010ffa:	011b      	lsls	r3, r3, #4
 8010ffc:	5ae1      	ldrh	r1, [r4, r3]
 8010ffe:	2001      	movs	r0, #1
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 8011000:	2300      	movs	r3, #0
    if(((UnwrappedChannelMask >> i) & 0x1) == 1) {
 8011002:	000a      	movs	r2, r1
 8011004:	411a      	asrs	r2, r3
 8011006:	4202      	tst	r2, r0
 8011008:	d009      	beq.n	801101e <_ZN13LoraRegionsEUI6SX126xE26RegionIsAcceptableDataRateEh+0x34>
 801100a:	18e2      	adds	r2, r4, r3
      if((DataRate >= this->MacMinDataRateChannel [i]) && (DataRate <= this->MacMaxDataRateChannel [i])) {
 801100c:	0016      	movs	r6, r2
 801100e:	3698      	adds	r6, #152	; 0x98
 8011010:	7836      	ldrb	r6, [r6, #0]
 8011012:	42ae      	cmp	r6, r5
 8011014:	d803      	bhi.n	801101e <_ZN13LoraRegionsEUI6SX126xE26RegionIsAcceptableDataRateEh+0x34>
 8011016:	32a8      	adds	r2, #168	; 0xa8
 8011018:	7812      	ldrb	r2, [r2, #0]
 801101a:	42aa      	cmp	r2, r5
 801101c:	d205      	bcs.n	801102a <_ZN13LoraRegionsEUI6SX126xE26RegionIsAcceptableDataRateEh+0x40>
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 801101e:	3301      	adds	r3, #1
 8011020:	2b10      	cmp	r3, #16
 8011022:	d1ee      	bne.n	8011002 <_ZN13LoraRegionsEUI6SX126xE26RegionIsAcceptableDataRateEh+0x18>
  return (status);
 8011024:	2001      	movs	r0, #1
 8011026:	4240      	negs	r0, r0
}
 8011028:	bd70      	pop	{r4, r5, r6, pc}
        return (OKLORAWAN);
 801102a:	2000      	movs	r0, #0
 801102c:	e7fc      	b.n	8011028 <_ZN13LoraRegionsEUI6SX126xE26RegionIsAcceptableDataRateEh+0x3e>
	...

08011030 <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv>:
    DEBUG_MSG("WRONG CRC \n");
    NVIC_SystemReset();
  }
}

template < class R >void LoraRegionsEU<R>::RegionSaveInFlash(void) {
 8011030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011032:	0005      	movs	r5, r0
  InsertTrace(__COUNTER__, FileId);
 8011034:	2101      	movs	r1, #1
 8011036:	200c      	movs	r0, #12
 8011038:	f000 fd28 	bl	8011a8c <_Z11InsertTracehh>
  uint32_t crcLow;
  uint32_t crcHigh;
  BackUpFlash.MacTxDataRate           = this->MacTxDataRate;
 801103c:	79ab      	ldrb	r3, [r5, #6]
 801103e:	4c4a      	ldr	r4, [pc, #296]	; (8011168 <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x138>)
  BackUpFlash.MacChMask               = this->MacChMask;
  BackUpFlash.MacNbTrans              = this->MacNbTrans;
  BackUpFlash.MacRx2Frequency         = this->MacRx2Frequency;
  BackUpFlash.MacRx2DataRate          = this->MacRx2DataRate;
  BackUpFlash.MacRx1DataRateOffset    = this->MacRx1DataRateOffset;
  BackUpFlash.MacRx1Delay             = this->MacRx1Delay;
 8011040:	002a      	movs	r2, r5
  BackUpFlash.MacTxDataRate           = this->MacTxDataRate;
 8011042:	7023      	strb	r3, [r4, #0]
  BackUpFlash.MacTxPower              = this->MacTxPower;
 8011044:	7a2b      	ldrb	r3, [r5, #8]
  BackUpFlash.MacRx1Delay             = this->MacRx1Delay;
 8011046:	32c8      	adds	r2, #200	; 0xc8
  BackUpFlash.MacTxPower              = this->MacTxPower;
 8011048:	7063      	strb	r3, [r4, #1]
  BackUpFlash.MacChMask               = this->MacChMask;
 801104a:	896b      	ldrh	r3, [r5, #10]
  BackUpFlash.MacRx1Delay             = this->MacRx1Delay;
 801104c:	6812      	ldr	r2, [r2, #0]
  BackUpFlash.MacChMask               = this->MacChMask;
 801104e:	8063      	strh	r3, [r4, #2]
  BackUpFlash.MacNbTrans              = this->MacNbTrans;
 8011050:	7b2b      	ldrb	r3, [r5, #12]
 8011052:	002f      	movs	r7, r5
 8011054:	7123      	strb	r3, [r4, #4]
  BackUpFlash.MacRx2Frequency         = this->MacRx2Frequency;
 8011056:	692b      	ldr	r3, [r5, #16]
  BackUpFlash.FcntUp                  = this->FcntUp;
  BackUpFlash.FcntDwn                 = this->FcntDwn;
  BackUpFlash.DevAddr                 = this->DevAddr;
  BackUpFlash.DevNonce                = this->DevNonce;
  BackUpFlash.JoinedStatus            = this->Phy.JoinedStatus;
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 8011058:	2600      	movs	r6, #0
  BackUpFlash.MacRx2Frequency         = this->MacRx2Frequency;
 801105a:	60a3      	str	r3, [r4, #8]
  BackUpFlash.MacRx2DataRate          = this->MacRx2DataRate;
 801105c:	7bab      	ldrb	r3, [r5, #14]
 801105e:	4843      	ldr	r0, [pc, #268]	; (801116c <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x13c>)
 8011060:	7323      	strb	r3, [r4, #12]
  BackUpFlash.MacRx1DataRateOffset    = this->MacRx1DataRateOffset;
 8011062:	7d2b      	ldrb	r3, [r5, #20]
 8011064:	3718      	adds	r7, #24
 8011066:	7363      	strb	r3, [r4, #13]
  BackUpFlash.MacRx1Delay             = this->MacRx1Delay;
 8011068:	0023      	movs	r3, r4
 801106a:	33c4      	adds	r3, #196	; 0xc4
 801106c:	601a      	str	r2, [r3, #0]
  BackUpFlash.FcntUp                  = this->FcntUp;
 801106e:	002a      	movs	r2, r5
 8011070:	0023      	movs	r3, r4
 8011072:	32cc      	adds	r2, #204	; 0xcc
 8011074:	6812      	ldr	r2, [r2, #0]
 8011076:	33c8      	adds	r3, #200	; 0xc8
 8011078:	601a      	str	r2, [r3, #0]
  BackUpFlash.FcntDwn                 = this->FcntDwn;
 801107a:	002a      	movs	r2, r5
 801107c:	0023      	movs	r3, r4
 801107e:	32d0      	adds	r2, #208	; 0xd0
 8011080:	6812      	ldr	r2, [r2, #0]
 8011082:	33cc      	adds	r3, #204	; 0xcc
 8011084:	601a      	str	r2, [r3, #0]
  BackUpFlash.DevAddr                 = this->DevAddr;
 8011086:	002a      	movs	r2, r5
 8011088:	0023      	movs	r3, r4
 801108a:	32d4      	adds	r2, #212	; 0xd4
 801108c:	6812      	ldr	r2, [r2, #0]
 801108e:	33d0      	adds	r3, #208	; 0xd0
 8011090:	601a      	str	r2, [r3, #0]
  BackUpFlash.DevNonce                = this->DevNonce;
 8011092:	239a      	movs	r3, #154	; 0x9a
 8011094:	009b      	lsls	r3, r3, #2
 8011096:	5aea      	ldrh	r2, [r5, r3]
 8011098:	3b2b      	subs	r3, #43	; 0x2b
 801109a:	3bff      	subs	r3, #255	; 0xff
 801109c:	52e2      	strh	r2, [r4, r3]
  BackUpFlash.JoinedStatus            = this->Phy.JoinedStatus;
 801109e:	4b34      	ldr	r3, [pc, #208]	; (8011170 <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x140>)
 80110a0:	5cea      	ldrb	r2, [r5, r3]
 80110a2:	239e      	movs	r3, #158	; 0x9e
 80110a4:	005b      	lsls	r3, r3, #1
 80110a6:	54e2      	strb	r2, [r4, r3]
 80110a8:	002b      	movs	r3, r5
 80110aa:	3398      	adds	r3, #152	; 0x98
    BackUpFlash.MacTxFrequency[i]         = this->MacTxFrequency[i];
 80110ac:	683a      	ldr	r2, [r7, #0]
    BackUpFlash.MacRx1Frequency[i]        = this->MacRx1Frequency[i];
    BackUpFlash.MacMaxDataRateChannel[i]  = this->MacMaxDataRateChannel[i];
 80110ae:	1931      	adds	r1, r6, r4
    BackUpFlash.MacTxFrequency[i]         = this->MacTxFrequency[i];
 80110b0:	6002      	str	r2, [r0, #0]
    BackUpFlash.MacRx1Frequency[i]        = this->MacRx1Frequency[i];
 80110b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    BackUpFlash.MacMaxDataRateChannel[i]  = this->MacMaxDataRateChannel[i];
 80110b4:	31a0      	adds	r1, #160	; 0xa0
    BackUpFlash.MacRx1Frequency[i]        = this->MacRx1Frequency[i];
 80110b6:	6402      	str	r2, [r0, #64]	; 0x40
    BackUpFlash.MacMaxDataRateChannel[i]  = this->MacMaxDataRateChannel[i];
 80110b8:	7c1a      	ldrb	r2, [r3, #16]
 80110ba:	3704      	adds	r7, #4
 80110bc:	700a      	strb	r2, [r1, #0]
    BackUpFlash.MacMinDataRateChannel[i]  = this->MacMinDataRateChannel[i];
 80110be:	781a      	ldrb	r2, [r3, #0]
 80110c0:	1931      	adds	r1, r6, r4
 80110c2:	3190      	adds	r1, #144	; 0x90
 80110c4:	700a      	strb	r2, [r1, #0]
    BackUpFlash.MacChannelIndexEnabled[i] = this->MacChannelIndexEnabled[i];
 80110c6:	0019      	movs	r1, r3
 80110c8:	3120      	adds	r1, #32
 80110ca:	1932      	adds	r2, r6, r4
 80110cc:	7809      	ldrb	r1, [r1, #0]
 80110ce:	32b0      	adds	r2, #176	; 0xb0
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80110d0:	3601      	adds	r6, #1
    BackUpFlash.MacChannelIndexEnabled[i] = this->MacChannelIndexEnabled[i];
 80110d2:	7011      	strb	r1, [r2, #0]
 80110d4:	3004      	adds	r0, #4
 80110d6:	3301      	adds	r3, #1
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80110d8:	2e10      	cmp	r6, #16
 80110da:	d1e7      	bne.n	80110ac <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x7c>
  }
  BackUpFlash.otaDevice = this->otaDevice;
 80110dc:	002b      	movs	r3, r5
 80110de:	33ff      	adds	r3, #255	; 0xff
 80110e0:	7e5a      	ldrb	r2, [r3, #25]
  memcpy(BackUpFlash.appKey, this->appKey, sizeof this->appKey);
 80110e2:	0020      	movs	r0, r4
  BackUpFlash.otaDevice = this->otaDevice;
 80110e4:	23a4      	movs	r3, #164	; 0xa4
  memcpy(BackUpFlash.appKey, this->appKey, sizeof this->appKey);
 80110e6:	0029      	movs	r1, r5
  BackUpFlash.otaDevice = this->otaDevice;
 80110e8:	005b      	lsls	r3, r3, #1
  memcpy(BackUpFlash.appKey, this->appKey, sizeof this->appKey);
 80110ea:	305a      	adds	r0, #90	; 0x5a
  BackUpFlash.otaDevice = this->otaDevice;
 80110ec:	54e2      	strb	r2, [r4, r3]
  memcpy(BackUpFlash.appKey, this->appKey, sizeof this->appKey);
 80110ee:	31f8      	adds	r1, #248	; 0xf8
 80110f0:	0032      	movs	r2, r6
 80110f2:	30ff      	adds	r0, #255	; 0xff
 80110f4:	f004 fae9 	bl	80156ca <memcpy>
  memcpy(BackUpFlash.appEui, this->appEui, sizeof this->appEui);
 80110f8:	0029      	movs	r1, r5
 80110fa:	0020      	movs	r0, r4
 80110fc:	3111      	adds	r1, #17
 80110fe:	3052      	adds	r0, #82	; 0x52
 8011100:	31ff      	adds	r1, #255	; 0xff
 8011102:	2208      	movs	r2, #8
 8011104:	30ff      	adds	r0, #255	; 0xff
 8011106:	f004 fae0 	bl	80156ca <memcpy>
  memcpy(BackUpFlash.devEui, this->devEui, sizeof this->appEui);
 801110a:	0029      	movs	r1, r5
 801110c:	0020      	movs	r0, r4
 801110e:	3109      	adds	r1, #9
 8011110:	304a      	adds	r0, #74	; 0x4a
 8011112:	31ff      	adds	r1, #255	; 0xff
 8011114:	2208      	movs	r2, #8
 8011116:	30ff      	adds	r0, #255	; 0xff
 8011118:	f004 fad7 	bl	80156ca <memcpy>
  memcpy(&BackUpFlash.nwkSKey[0], &this->nwkSKey[0], 16);
 801111c:	0029      	movs	r1, r5
 801111e:	0032      	movs	r2, r6
 8011120:	31d8      	adds	r1, #216	; 0xd8
 8011122:	4814      	ldr	r0, [pc, #80]	; (8011174 <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x144>)
 8011124:	f004 fad1 	bl	80156ca <memcpy>
  memcpy(&BackUpFlash.appSKey[0], &this->appSKey[0], 16);
 8011128:	0029      	movs	r1, r5
 801112a:	0032      	movs	r2, r6
 801112c:	31e8      	adds	r1, #232	; 0xe8
 801112e:	4812      	ldr	r0, [pc, #72]	; (8011178 <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x148>)
 8011130:	f004 facb 	bl	80156ca <memcpy>
  Crc64((uint8_t *)&BackUpFlash, offsetof(struct sBackUpFlash, CrcHigh), &crcLow, &crcHigh);
 8011134:	21bc      	movs	r1, #188	; 0xbc
 8011136:	ab01      	add	r3, sp, #4
 8011138:	466a      	mov	r2, sp
 801113a:	0020      	movs	r0, r4
 801113c:	0049      	lsls	r1, r1, #1
 801113e:	f000 fd05 	bl	8011b4c <_Z5Crc64PhiPmS0_>
  BackUpFlash.CrcLow  = crcLow;
 8011142:	23be      	movs	r3, #190	; 0xbe
 8011144:	9a00      	ldr	r2, [sp, #0]
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	50e2      	str	r2, [r4, r3]
  BackUpFlash.CrcHigh = crcHigh;
 801114a:	0023      	movs	r3, r4
 801114c:	9a01      	ldr	r2, [sp, #4]
 801114e:	33fc      	adds	r3, #252	; 0xfc
 8011150:	67da      	str	r2, [r3, #124]	; 0x7c

  mcu.StoreContext(&BackUpFlash, this->UserFlashAdress, sizeof BackUpFlash);
 8011152:	22e7      	movs	r2, #231	; 0xe7
 8011154:	23c0      	movs	r3, #192	; 0xc0
 8011156:	00d2      	lsls	r2, r2, #3
 8011158:	58aa      	ldr	r2, [r5, r2]
 801115a:	005b      	lsls	r3, r3, #1
 801115c:	0021      	movs	r1, r4
 801115e:	4807      	ldr	r0, [pc, #28]	; (801117c <_ZN13LoraRegionsEUI6SX126xE17RegionSaveInFlashEv+0x14c>)
 8011160:	f7fc ffa7 	bl	800e0b2 <_ZN12McuSTM32L07112StoreContextEPKvmm>
}
 8011164:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011166:	46c0      	nop			; (mov r8, r8)
 8011168:	200016cc 	.word	0x200016cc
 801116c:	200016dc 	.word	0x200016dc
 8011170:	000006ad 	.word	0x000006ad
 8011174:	200017a0 	.word	0x200017a0
 8011178:	200017b0 	.word	0x200017b0
 801117c:	20001988 	.word	0x20001988

08011180 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht>:
template < class R >eStatusChannel LoraRegionsEU<R>::RegionBuildChannelMask(uint8_t ChMaskCntl, uint16_t ChMask) {
 8011180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011182:	268f      	movs	r6, #143	; 0x8f
 8011184:	0005      	movs	r5, r0
 8011186:	000c      	movs	r4, r1
  InsertTrace(__COUNTER__, FileId);
 8011188:	2002      	movs	r0, #2
 801118a:	2101      	movs	r1, #1
template < class R >eStatusChannel LoraRegionsEU<R>::RegionBuildChannelMask(uint8_t ChMaskCntl, uint16_t ChMask) {
 801118c:	0017      	movs	r7, r2
 801118e:	0136      	lsls	r6, r6, #4
  InsertTrace(__COUNTER__, FileId);
 8011190:	f000 fc7c 	bl	8011a8c <_Z11InsertTracehh>
  switch(ChMaskCntl) {
 8011194:	2c00      	cmp	r4, #0
 8011196:	d004      	beq.n	80111a2 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x22>
 8011198:	2c06      	cmp	r4, #6
 801119a:	d025      	beq.n	80111e8 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x68>
    status = ERROR_CHANNEL_CNTL;
 801119c:	2002      	movs	r0, #2
 801119e:	4240      	negs	r0, r0
 80111a0:	e01a      	b.n	80111d8 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x58>
    UnwrappedChannelMask = UnwrappedChannelMask & ChMask;
 80111a2:	5baa      	ldrh	r2, [r5, r6]
    DEBUG_PRINTF("UnwrappedChannelMask = 0x%x, ChMask = 0x%x\n", UnwrappedChannelMask, ChMask);
 80111a4:	003b      	movs	r3, r7
    UnwrappedChannelMask = UnwrappedChannelMask & ChMask;
 80111a6:	403a      	ands	r2, r7
 80111a8:	53aa      	strh	r2, [r5, r6]
    DEBUG_PRINTF("UnwrappedChannelMask = 0x%x, ChMask = 0x%x\n", UnwrappedChannelMask, ChMask);
 80111aa:	4918      	ldr	r1, [pc, #96]	; (801120c <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x8c>)
 80111ac:	0020      	movs	r0, r4
 80111ae:	f7f9 fafd 	bl	800a7ac <SEGGER_RTT_printf>
      if((((UnwrappedChannelMask >> i) & 0x1) == 1) && (this->MacTxFrequency[i] == 0)) {
 80111b2:	5ba9      	ldrh	r1, [r5, r6]
        status = ERROR_CHANNEL_MASK; // this status is used only for the last multiple link adr req
 80111b4:	2601      	movs	r6, #1
  eStatusChannel status = OKCHANNEL;
 80111b6:	0020      	movs	r0, r4
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80111b8:	0023      	movs	r3, r4
      if((((UnwrappedChannelMask >> i) & 0x1) == 1) && (this->MacTxFrequency[i] == 0)) {
 80111ba:	2401      	movs	r4, #1
        status = ERROR_CHANNEL_MASK; // this status is used only for the last multiple link adr req
 80111bc:	4276      	negs	r6, r6
      if((((UnwrappedChannelMask >> i) & 0x1) == 1) && (this->MacTxFrequency[i] == 0)) {
 80111be:	000a      	movs	r2, r1
 80111c0:	411a      	asrs	r2, r3
 80111c2:	4222      	tst	r2, r4
 80111c4:	d005      	beq.n	80111d2 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x52>
 80111c6:	009a      	lsls	r2, r3, #2
 80111c8:	18aa      	adds	r2, r5, r2
 80111ca:	6992      	ldr	r2, [r2, #24]
 80111cc:	2a00      	cmp	r2, #0
 80111ce:	d100      	bne.n	80111d2 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x52>
        status = ERROR_CHANNEL_MASK; // this status is used only for the last multiple link adr req
 80111d0:	0030      	movs	r0, r6
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80111d2:	3301      	adds	r3, #1
 80111d4:	2b10      	cmp	r3, #16
 80111d6:	d1f2      	bne.n	80111be <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x3e>
  if(UnwrappedChannelMask == 0) {
 80111d8:	238f      	movs	r3, #143	; 0x8f
 80111da:	011b      	lsls	r3, r3, #4
 80111dc:	5aeb      	ldrh	r3, [r5, r3]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d101      	bne.n	80111e6 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x66>
    status = ERROR_CHANNEL_MASK;
 80111e2:	2001      	movs	r0, #1
 80111e4:	4240      	negs	r0, r0
};
 80111e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UnwrappedChannelMask = 0;
 80111e8:	2300      	movs	r3, #0
        UnwrappedChannelMask = UnwrappedChannelMask ^ (1 << i);
 80111ea:	2001      	movs	r0, #1
    UnwrappedChannelMask = 0;
 80111ec:	53ab      	strh	r3, [r5, r6]
      if(this->MacTxFrequency[i] > 0) {
 80111ee:	009a      	lsls	r2, r3, #2
 80111f0:	18aa      	adds	r2, r5, r2
 80111f2:	6992      	ldr	r2, [r2, #24]
 80111f4:	2a00      	cmp	r2, #0
 80111f6:	d004      	beq.n	8011202 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x82>
        UnwrappedChannelMask = UnwrappedChannelMask ^ (1 << i);
 80111f8:	0001      	movs	r1, r0
 80111fa:	4099      	lsls	r1, r3
 80111fc:	5baa      	ldrh	r2, [r5, r6]
 80111fe:	404a      	eors	r2, r1
 8011200:	53aa      	strh	r2, [r5, r6]
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 8011202:	3301      	adds	r3, #1
 8011204:	2b10      	cmp	r3, #16
 8011206:	d1f2      	bne.n	80111ee <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x6e>
  eStatusChannel status = OKCHANNEL;
 8011208:	2000      	movs	r0, #0
 801120a:	e7e5      	b.n	80111d8 <_ZN13LoraRegionsEUI6SX126xE22RegionBuildChannelMaskEht+0x58>
 801120c:	08018b3e 	.word	0x08018b3e

08011210 <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidMacFrequencyEm>:
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsValidMacFrequency(uint32_t Frequency) {
 8011210:	b510      	push	{r4, lr}
  InsertTrace(__COUNTER__, FileId);
 8011212:	2006      	movs	r0, #6
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsValidMacFrequency(uint32_t Frequency) {
 8011214:	000c      	movs	r4, r1
  InsertTrace(__COUNTER__, FileId);
 8011216:	2101      	movs	r1, #1
 8011218:	f000 fc38 	bl	8011a8c <_Z11InsertTracehh>
    return (status);
 801121c:	2000      	movs	r0, #0
  if(Frequency == 0) {
 801121e:	4284      	cmp	r4, r0
 8011220:	d00a      	beq.n	8011238 <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidMacFrequencyEm+0x28>
  if((Frequency > FREQMAX) || (Frequency < FREQMIN)) {
 8011222:	4b06      	ldr	r3, [pc, #24]	; (801123c <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidMacFrequencyEm+0x2c>)
 8011224:	4a06      	ldr	r2, [pc, #24]	; (8011240 <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidMacFrequencyEm+0x30>)
 8011226:	18e3      	adds	r3, r4, r3
 8011228:	4293      	cmp	r3, r2
 801122a:	d905      	bls.n	8011238 <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidMacFrequencyEm+0x28>
    DEBUG_PRINTF("RECEIVE AN INVALID FREQUENCY = %d\n", Frequency);
 801122c:	0022      	movs	r2, r4
 801122e:	4905      	ldr	r1, [pc, #20]	; (8011244 <_ZN13LoraRegionsEUI6SX126xE25RegionIsValidMacFrequencyEm+0x34>)
 8011230:	f7f9 fabc 	bl	800a7ac <SEGGER_RTT_printf>
    status = ERRORLORAWAN;
 8011234:	2001      	movs	r0, #1
 8011236:	4240      	negs	r0, r0
}
 8011238:	bd10      	pop	{r4, pc}
 801123a:	46c0      	nop			; (mov r8, r8)
 801123c:	ff7c5110 	.word	0xff7c5110
 8011240:	00011170 	.word	0x00011170
 8011244:	08018b8d 	.word	0x08018b8d

08011248 <_ZN13LoraRegionsEUI6SX126xE27RegionIsValidMacRxFrequencyEm>:
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsValidMacRxFrequency(uint32_t Frequency) {
 8011248:	b510      	push	{r4, lr}
 801124a:	000c      	movs	r4, r1
  InsertTrace(__COUNTER__, FileId);
 801124c:	2007      	movs	r0, #7
 801124e:	2101      	movs	r1, #1
 8011250:	f000 fc1c 	bl	8011a8c <_Z11InsertTracehh>
  if((Frequency > FREQMAX) || (Frequency < FREQMIN)) {
 8011254:	4b06      	ldr	r3, [pc, #24]	; (8011270 <_ZN13LoraRegionsEUI6SX126xE27RegionIsValidMacRxFrequencyEm+0x28>)
  eStatusLoRaWan status = OKLORAWAN;
 8011256:	2000      	movs	r0, #0
  if((Frequency > FREQMAX) || (Frequency < FREQMIN)) {
 8011258:	18e2      	adds	r2, r4, r3
 801125a:	4b06      	ldr	r3, [pc, #24]	; (8011274 <_ZN13LoraRegionsEUI6SX126xE27RegionIsValidMacRxFrequencyEm+0x2c>)
 801125c:	429a      	cmp	r2, r3
 801125e:	d905      	bls.n	801126c <_ZN13LoraRegionsEUI6SX126xE27RegionIsValidMacRxFrequencyEm+0x24>
    DEBUG_PRINTF("RECEIVE AN INVALID Rx FREQUENCY = %d\n", Frequency);
 8011260:	0022      	movs	r2, r4
 8011262:	4905      	ldr	r1, [pc, #20]	; (8011278 <_ZN13LoraRegionsEUI6SX126xE27RegionIsValidMacRxFrequencyEm+0x30>)
 8011264:	f7f9 faa2 	bl	800a7ac <SEGGER_RTT_printf>
    status = ERRORLORAWAN;
 8011268:	2001      	movs	r0, #1
 801126a:	4240      	negs	r0, r0
}
 801126c:	bd10      	pop	{r4, pc}
 801126e:	46c0      	nop			; (mov r8, r8)
 8011270:	ff7c5110 	.word	0xff7c5110
 8011274:	00011170 	.word	0x00011170
 8011278:	08018bb0 	.word	0x08018bb0

0801127c <_ZN13LoraRegionsEUI6SX126xE20RegionIsValidTxPowerEh>:
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsValidTxPower(uint8_t Power) {
 801127c:	b510      	push	{r4, lr}
 801127e:	000a      	movs	r2, r1
  eStatusLoRaWan status = OKLORAWAN;
 8011280:	2000      	movs	r0, #0
  if((Power > 7)) {
 8011282:	2907      	cmp	r1, #7
 8011284:	d904      	bls.n	8011290 <_ZN13LoraRegionsEUI6SX126xE20RegionIsValidTxPowerEh+0x14>
    DEBUG_PRINTF("RECEIVE AN INVALID Power Cmd = %d\n", Power);
 8011286:	4903      	ldr	r1, [pc, #12]	; (8011294 <_ZN13LoraRegionsEUI6SX126xE20RegionIsValidTxPowerEh+0x18>)
 8011288:	f7f9 fa90 	bl	800a7ac <SEGGER_RTT_printf>
    status = ERRORLORAWAN;
 801128c:	2001      	movs	r0, #1
 801128e:	4240      	negs	r0, r0
}
 8011290:	bd10      	pop	{r4, pc}
 8011292:	46c0      	nop			; (mov r8, r8)
 8011294:	08018adc 	.word	0x08018adc

08011298 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv>:
template < class R >void LoraRegionsEU<R>::RegionGetCFList(void) {
 8011298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801129a:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 801129c:	2101      	movs	r1, #1
 801129e:	0027      	movs	r7, r4
  for(int i = 0; i < 5; i++) {
 80112a0:	2600      	movs	r6, #0
  InsertTrace(__COUNTER__, FileId);
 80112a2:	0008      	movs	r0, r1
 80112a4:	f000 fbf2 	bl	8011a8c <_Z11InsertTracehh>
 80112a8:	4b24      	ldr	r3, [pc, #144]	; (801133c <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xa4>)
 80112aa:	3724      	adds	r7, #36	; 0x24
 80112ac:	18e3      	adds	r3, r4, r3
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	349b      	adds	r4, #155	; 0x9b
    this->MacTxFrequency [3 + i] = 100 * ((this->CFList[0 + (3 * i)]) + (this->CFList[1 + (3 * i)] << 8) + (this->CFList[2 + (3 * i)] << 16));
 80112b2:	9b00      	ldr	r3, [sp, #0]
 80112b4:	9a00      	ldr	r2, [sp, #0]
 80112b6:	785b      	ldrb	r3, [r3, #1]
 80112b8:	7812      	ldrb	r2, [r2, #0]
 80112ba:	021b      	lsls	r3, r3, #8
 80112bc:	189b      	adds	r3, r3, r2
 80112be:	9a00      	ldr	r2, [sp, #0]
 80112c0:	2500      	movs	r5, #0
 80112c2:	7892      	ldrb	r2, [r2, #2]
 80112c4:	0412      	lsls	r2, r2, #16
 80112c6:	189b      	adds	r3, r3, r2
 80112c8:	2264      	movs	r2, #100	; 0x64
 80112ca:	4353      	muls	r3, r2
    if((this->MacTxFrequency [3 + i] >= (FREQMIN * 100)) && (this->MacTxFrequency [3 + i] <= (FREQMAX * 100))) {
 80112cc:	4a1c      	ldr	r2, [pc, #112]	; (8011340 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xa8>)
    this->MacTxFrequency [3 + i] = 100 * ((this->CFList[0 + (3 * i)]) + (this->CFList[1 + (3 * i)] << 8) + (this->CFList[2 + (3 * i)] << 16));
 80112ce:	603b      	str	r3, [r7, #0]
    if((this->MacTxFrequency [3 + i] >= (FREQMIN * 100)) && (this->MacTxFrequency [3 + i] <= (FREQMAX * 100))) {
 80112d0:	1899      	adds	r1, r3, r2
 80112d2:	4a1c      	ldr	r2, [pc, #112]	; (8011344 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xac>)
    this->MacRx1Frequency [3 + i] = 100 * ((this->CFList[0 + (3 * i)]) + (this->CFList[1 + (3 * i)] << 8) + (this->CFList[2 + (3 * i)] << 16));
 80112d4:	643b      	str	r3, [r7, #64]	; 0x40
    if((this->MacTxFrequency [3 + i] >= (FREQMIN * 100)) && (this->MacTxFrequency [3 + i] <= (FREQMAX * 100))) {
 80112d6:	4291      	cmp	r1, r2
 80112d8:	d828      	bhi.n	801132c <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0x94>
      this->MacMaxDataRateChannel [3 + i]  = 5;
 80112da:	2205      	movs	r2, #5
      this->MacChannelIndexEnabled [3 + i] = CHANNEL_ENABLED;
 80112dc:	0021      	movs	r1, r4
      this->MacMaxDataRateChannel [3 + i]  = 5;
 80112de:	7422      	strb	r2, [r4, #16]
      this->MacChannelIndexEnabled [3 + i] = CHANNEL_ENABLED;
 80112e0:	2201      	movs	r2, #1
 80112e2:	3120      	adds	r1, #32
      this->MacMinDataRateChannel [3 + i]  = 0;
 80112e4:	7025      	strb	r5, [r4, #0]
      this->MacChannelIndexEnabled [3 + i] = CHANNEL_ENABLED;
 80112e6:	9101      	str	r1, [sp, #4]
 80112e8:	700a      	strb	r2, [r1, #0]
      DEBUG_PRINTF(" MacTxFrequency [%d] = %d \n", i, this->MacTxFrequency [3 + i]);
 80112ea:	0028      	movs	r0, r5
 80112ec:	0032      	movs	r2, r6
 80112ee:	4916      	ldr	r1, [pc, #88]	; (8011348 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xb0>)
 80112f0:	f7f9 fa5c 	bl	800a7ac <SEGGER_RTT_printf>
      DEBUG_PRINTF(" MacMinDataRateChannel [%d] = %d \n", i, this->MacMinDataRateChannel [3 + i]);
 80112f4:	7823      	ldrb	r3, [r4, #0]
 80112f6:	0032      	movs	r2, r6
 80112f8:	4914      	ldr	r1, [pc, #80]	; (801134c <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xb4>)
 80112fa:	0028      	movs	r0, r5
 80112fc:	f7f9 fa56 	bl	800a7ac <SEGGER_RTT_printf>
      DEBUG_PRINTF(" MacMaxDataRateChannel [%d] = %d \n", i, this->MacMaxDataRateChannel [3 + i]);
 8011300:	7c23      	ldrb	r3, [r4, #16]
 8011302:	0032      	movs	r2, r6
 8011304:	4912      	ldr	r1, [pc, #72]	; (8011350 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xb8>)
 8011306:	0028      	movs	r0, r5
 8011308:	f7f9 fa50 	bl	800a7ac <SEGGER_RTT_printf>
      DEBUG_PRINTF(" MacChannelIndexEnabled [%d] = %d \n", i, this->MacChannelIndexEnabled [3 + i]);
 801130c:	9b01      	ldr	r3, [sp, #4]
 801130e:	0032      	movs	r2, r6
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	4910      	ldr	r1, [pc, #64]	; (8011354 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xbc>)
 8011314:	0028      	movs	r0, r5
 8011316:	f7f9 fa49 	bl	800a7ac <SEGGER_RTT_printf>
 801131a:	9b00      	ldr	r3, [sp, #0]
  for(int i = 0; i < 5; i++) {
 801131c:	3601      	adds	r6, #1
 801131e:	3303      	adds	r3, #3
 8011320:	9300      	str	r3, [sp, #0]
 8011322:	3704      	adds	r7, #4
 8011324:	3401      	adds	r4, #1
 8011326:	2e05      	cmp	r6, #5
 8011328:	d1c3      	bne.n	80112b2 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0x1a>
}
 801132a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      this->MacTxFrequency  [3 + i] = 0;
 801132c:	603d      	str	r5, [r7, #0]
      this->MacRx1Frequency [3 + i] = 0;
 801132e:	643d      	str	r5, [r7, #64]	; 0x40
      DEBUG_MSG("INVALID TX FREQUENCY IN CFLIST \n");
 8011330:	4909      	ldr	r1, [pc, #36]	; (8011358 <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0xc0>)
 8011332:	0028      	movs	r0, r5
 8011334:	f7f9 f87a 	bl	800a42c <SEGGER_RTT_WriteString>
 8011338:	e7ef      	b.n	801131a <_ZN13LoraRegionsEUI6SX126xE15RegionGetCFListEv+0x82>
 801133a:	46c0      	nop			; (mov r8, r8)
 801133c:	0000026a 	.word	0x0000026a
 8011340:	cc8faa40 	.word	0xcc8faa40
 8011344:	006acfc0 	.word	0x006acfc0
 8011348:	080188fb 	.word	0x080188fb
 801134c:	08018917 	.word	0x08018917
 8011350:	0801893a 	.word	0x0801893a
 8011354:	0801895d 	.word	0x0801895d
 8011358:	08018981 	.word	0x08018981

0801135c <_ZN13LoraRegionsEUI6SX126xE14RegionSetPowerEh>:
template < class R >void LoraRegionsEU<R>::RegionSetPower(uint8_t PowerCmd) {
 801135c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801135e:	0004      	movs	r4, r0
 8011360:	000d      	movs	r5, r1
  InsertTrace(__COUNTER__, FileId);
 8011362:	2000      	movs	r0, #0
 8011364:	2101      	movs	r1, #1
 8011366:	f000 fb91 	bl	8011a8c <_Z11InsertTracehh>
  uint8_t PowerTab [ 8 ] = { TX_POWER, TX_POWER - 2, TX_POWER - 4, TX_POWER - 6, TX_POWER - 8, TX_POWER - 10, TX_POWER - 12, TX_POWER - 14 };
 801136a:	4b08      	ldr	r3, [pc, #32]	; (801138c <_ZN13LoraRegionsEUI6SX126xE14RegionSetPowerEh+0x30>)
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	4b08      	ldr	r3, [pc, #32]	; (8011390 <_ZN13LoraRegionsEUI6SX126xE14RegionSetPowerEh+0x34>)
 8011370:	9301      	str	r3, [sp, #4]
  if(PowerCmd > 7) {
 8011372:	2d07      	cmp	r5, #7
 8011374:	d906      	bls.n	8011384 <_ZN13LoraRegionsEUI6SX126xE14RegionSetPowerEh+0x28>
    this->MacTxPower = 14;
 8011376:	230e      	movs	r3, #14
    DEBUG_MSG("INVALID POWER \n");
 8011378:	4906      	ldr	r1, [pc, #24]	; (8011394 <_ZN13LoraRegionsEUI6SX126xE14RegionSetPowerEh+0x38>)
    this->MacTxPower = 14;
 801137a:	7223      	strb	r3, [r4, #8]
    DEBUG_MSG("INVALID POWER \n");
 801137c:	2000      	movs	r0, #0
 801137e:	f7f9 f855 	bl	800a42c <SEGGER_RTT_WriteString>
}
 8011382:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    this->MacTxPower = PowerTab[PowerCmd];
 8011384:	466b      	mov	r3, sp
 8011386:	5d5b      	ldrb	r3, [r3, r5]
 8011388:	7223      	strb	r3, [r4, #8]
}
 801138a:	e7fa      	b.n	8011382 <_ZN13LoraRegionsEUI6SX126xE14RegionSetPowerEh+0x26>
 801138c:	080a0c0e 	.word	0x080a0c0e
 8011390:	00020406 	.word	0x00020406
 8011394:	080188eb 	.word	0x080188eb

08011398 <_ZN13LoraRegionsEUI6SX126xE13RegionSetMaskEv>:
template < class R >void LoraRegionsEU<R>::RegionSetMask(void) {
 8011398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  InsertTrace(__COUNTER__, FileId);
 801139a:	2101      	movs	r1, #1
template < class R >void LoraRegionsEU<R>::RegionSetMask(void) {
 801139c:	0005      	movs	r5, r0
  InsertTrace(__COUNTER__, FileId);
 801139e:	2003      	movs	r0, #3
 80113a0:	f000 fb74 	bl	8011a8c <_Z11InsertTracehh>
    this->MacChannelIndexEnabled [i] = (UnwrappedChannelMask >> i) & 0x1;   // @note trade off between size and code simplification
 80113a4:	278f      	movs	r7, #143	; 0x8f
  DEBUG_MSG(" \n Mask = ");
 80113a6:	490c      	ldr	r1, [pc, #48]	; (80113d8 <_ZN13LoraRegionsEUI6SX126xE13RegionSetMaskEv+0x40>)
 80113a8:	2000      	movs	r0, #0
 80113aa:	f7f9 f83f 	bl	800a42c <SEGGER_RTT_WriteString>
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80113ae:	2400      	movs	r4, #0
    this->MacChannelIndexEnabled [i] = (UnwrappedChannelMask >> i) & 0x1;   // @note trade off between size and code simplification
 80113b0:	2601      	movs	r6, #1
 80113b2:	013f      	lsls	r7, r7, #4
 80113b4:	5bea      	ldrh	r2, [r5, r7]
 80113b6:	0023      	movs	r3, r4
 80113b8:	4122      	asrs	r2, r4
 80113ba:	33b8      	adds	r3, #184	; 0xb8
 80113bc:	4032      	ands	r2, r6
 80113be:	54ea      	strb	r2, [r5, r3]
    DEBUG_PRINTF(" %d ", this->MacChannelIndexEnabled [i]);
 80113c0:	4906      	ldr	r1, [pc, #24]	; (80113dc <_ZN13LoraRegionsEUI6SX126xE13RegionSetMaskEv+0x44>)
 80113c2:	2000      	movs	r0, #0
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80113c4:	3401      	adds	r4, #1
    DEBUG_PRINTF(" %d ", this->MacChannelIndexEnabled [i]);
 80113c6:	f7f9 f9f1 	bl	800a7ac <SEGGER_RTT_printf>
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80113ca:	2c10      	cmp	r4, #16
 80113cc:	d1f2      	bne.n	80113b4 <_ZN13LoraRegionsEUI6SX126xE13RegionSetMaskEv+0x1c>
  DEBUG_MSG(" \n");
 80113ce:	4904      	ldr	r1, [pc, #16]	; (80113e0 <_ZN13LoraRegionsEUI6SX126xE13RegionSetMaskEv+0x48>)
 80113d0:	2000      	movs	r0, #0
 80113d2:	f7f9 f82b 	bl	800a42c <SEGGER_RTT_WriteString>
};
 80113d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113d8:	080188e0 	.word	0x080188e0
 80113dc:	08018a2f 	.word	0x08018a2f
 80113e0:	0801806f 	.word	0x0801806f

080113e4 <_ZN13LoraRegionsEUI6SX126xE24RegionIsValidRx1DrOffsetEh>:
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionIsValidRx1DrOffset(uint8_t Rx1DataRateOffset) {
 80113e4:	b510      	push	{r4, lr}
  eStatusLoRaWan status = OKLORAWAN;
 80113e6:	2000      	movs	r0, #0
  if(Rx1DataRateOffset > 5) {
 80113e8:	2905      	cmp	r1, #5
 80113ea:	d904      	bls.n	80113f6 <_ZN13LoraRegionsEUI6SX126xE24RegionIsValidRx1DrOffsetEh+0x12>
    DEBUG_MSG("RECEIVE AN INVALID RX1 DR OFFSET \n");
 80113ec:	4902      	ldr	r1, [pc, #8]	; (80113f8 <_ZN13LoraRegionsEUI6SX126xE24RegionIsValidRx1DrOffsetEh+0x14>)
 80113ee:	f7f9 f81d 	bl	800a42c <SEGGER_RTT_WriteString>
    status = ERRORLORAWAN;
 80113f2:	2001      	movs	r0, #1
 80113f4:	4240      	negs	r0, r0
}
 80113f6:	bd10      	pop	{r4, pc}
 80113f8:	08018b6a 	.word	0x08018b6a

080113fc <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv>:
template < class R >void  LoraRegionsEU<R>::RegionGiveNextChannel(void) {
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8011400:	2101      	movs	r1, #1
 8011402:	200a      	movs	r0, #10
 8011404:	f000 fb42 	bl	8011a8c <_Z11InsertTracehh>
 8011408:	0023      	movs	r3, r4
 801140a:	0022      	movs	r2, r4
  uint8_t NbOfActiveChannel = 0;
 801140c:	2500      	movs	r5, #0
 801140e:	33b8      	adds	r3, #184	; 0xb8
 8011410:	32c8      	adds	r2, #200	; 0xc8
    if(this->MacChannelIndexEnabled [i] == CHANNEL_ENABLED) {
 8011412:	7819      	ldrb	r1, [r3, #0]
 8011414:	2901      	cmp	r1, #1
 8011416:	d101      	bne.n	801141c <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv+0x20>
      NbOfActiveChannel++;
 8011418:	3501      	adds	r5, #1
 801141a:	b2ed      	uxtb	r5, r5
 801141c:	3301      	adds	r3, #1
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 801141e:	4293      	cmp	r3, r2
 8011420:	d1f7      	bne.n	8011412 <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv+0x16>
  uint8_t temp = randr(0, (NbOfActiveChannel - 1));
 8011422:	1e69      	subs	r1, r5, #1
 8011424:	2000      	movs	r0, #0
 8011426:	f000 fb71 	bl	8011b0c <_Z5randrll>
 801142a:	0006      	movs	r6, r0
  ChannelIndex = this->FindEnabledChannel(temp);    // @note datarate valid not yett tested
 801142c:	b2c1      	uxtb	r1, r0
 801142e:	0020      	movs	r0, r4
 8011430:	f7fd fd7e 	bl	800ef30 <_ZN16LoraWanContainerILi16E6SX126xE18FindEnabledChannelEh>
  if(ChannelIndex == -1) {
 8011434:	1c43      	adds	r3, r0, #1
 8011436:	d106      	bne.n	8011446 <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv+0x4a>
    DEBUG_PRINTF("INVALID CHANNEL  active channel = %d and random channel = %d \n", NbOfActiveChannel, temp);
 8011438:	b2f3      	uxtb	r3, r6
 801143a:	002a      	movs	r2, r5
 801143c:	4907      	ldr	r1, [pc, #28]	; (801145c <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv+0x60>)
 801143e:	2000      	movs	r0, #0
 8011440:	f7f9 f9b4 	bl	800a7ac <SEGGER_RTT_printf>
};
 8011444:	bd70      	pop	{r4, r5, r6, pc}
    this->MacTxFrequencyCurrent = this->MacTxFrequency[ChannelIndex];
 8011446:	23e8      	movs	r3, #232	; 0xe8
 8011448:	0080      	lsls	r0, r0, #2
 801144a:	1820      	adds	r0, r4, r0
 801144c:	6982      	ldr	r2, [r0, #24]
 801144e:	00db      	lsls	r3, r3, #3
 8011450:	50e2      	str	r2, [r4, r3]
    this->MacRx1FrequencyCurrent = this->MacRx1Frequency[ChannelIndex];
 8011452:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8011454:	4b02      	ldr	r3, [pc, #8]	; (8011460 <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv+0x64>)
 8011456:	50e2      	str	r2, [r4, r3]
};
 8011458:	e7f4      	b.n	8011444 <_ZN13LoraRegionsEUI6SX126xE21RegionGiveNextChannelEv+0x48>
 801145a:	46c0      	nop			; (mov r8, r8)
 801145c:	08018aff 	.word	0x08018aff
 8011460:	00000744 	.word	0x00000744

08011464 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m>:
template < class R > LoraRegionsEU<R>::LoraRegionsEU(sLoRaWanKeys LoRaWanKeys, R *RadioUser, uint32_t FlashAdress) : LoraWanContainer<16, R> (LoRaWanKeys, RadioUser, FlashAdress) {
 8011464:	b084      	sub	sp, #16
 8011466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011468:	b087      	sub	sp, #28
 801146a:	920e      	str	r2, [sp, #56]	; 0x38
 801146c:	0015      	movs	r5, r2
 801146e:	466a      	mov	r2, sp
 8011470:	0004      	movs	r4, r0
 8011472:	000e      	movs	r6, r1
 8011474:	469c      	mov	ip, r3
 8011476:	930f      	str	r3, [sp, #60]	; 0x3c
 8011478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801147a:	910d      	str	r1, [sp, #52]	; 0x34
 801147c:	9305      	str	r3, [sp, #20]
 801147e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011480:	9304      	str	r3, [sp, #16]
 8011482:	ab10      	add	r3, sp, #64	; 0x40
 8011484:	cb83      	ldmia	r3!, {r0, r1, r7}
 8011486:	c283      	stmia	r2!, {r0, r1, r7}
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	0031      	movs	r1, r6
  memset(this->MacChannelIndexEnabled, CHANNEL_DISABLED, this->NUMBER_OF_CHANNEL);
 801148c:	0026      	movs	r6, r4
template < class R > LoraRegionsEU<R>::LoraRegionsEU(sLoRaWanKeys LoRaWanKeys, R *RadioUser, uint32_t FlashAdress) : LoraWanContainer<16, R> (LoRaWanKeys, RadioUser, FlashAdress) {
 801148e:	6013      	str	r3, [r2, #0]
 8011490:	002a      	movs	r2, r5
  memset(this->MacMinDataRateChannel, 0, this->NUMBER_OF_CHANNEL);
 8011492:	0025      	movs	r5, r4
template < class R > LoraRegionsEU<R>::LoraRegionsEU(sLoRaWanKeys LoRaWanKeys, R *RadioUser, uint32_t FlashAdress) : LoraWanContainer<16, R> (LoRaWanKeys, RadioUser, FlashAdress) {
 8011494:	4663      	mov	r3, ip
 8011496:	0020      	movs	r0, r4
 8011498:	f7fd fb1a 	bl	800ead0 <_ZN16LoraWanContainerILi16E6SX126xEC1E12sLoRaWanKeysPS0_m>
 801149c:	4b23      	ldr	r3, [pc, #140]	; (801152c <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xc8>)
  memset(this->MacChannelIndexEnabled, CHANNEL_DISABLED, this->NUMBER_OF_CHANNEL);
 801149e:	36ba      	adds	r6, #186	; 0xba
template < class R > LoraRegionsEU<R>::LoraRegionsEU(sLoRaWanKeys LoRaWanKeys, R *RadioUser, uint32_t FlashAdress) : LoraWanContainer<16, R> (LoRaWanKeys, RadioUser, FlashAdress) {
 80114a0:	6023      	str	r3, [r4, #0]
  memset(this->MacChannelIndexEnabled, CHANNEL_DISABLED, this->NUMBER_OF_CHANNEL);
 80114a2:	220e      	movs	r2, #14
 80114a4:	2100      	movs	r1, #0
 80114a6:	0030      	movs	r0, r6
  memset(this->MacMinDataRateChannel, 0, this->NUMBER_OF_CHANNEL);
 80114a8:	359a      	adds	r5, #154	; 0x9a
  memset(this->MacChannelIndexEnabled, CHANNEL_DISABLED, this->NUMBER_OF_CHANNEL);
 80114aa:	f004 f917 	bl	80156dc <memset>
  memset(this->MacMinDataRateChannel, 0, this->NUMBER_OF_CHANNEL);
 80114ae:	220e      	movs	r2, #14
 80114b0:	2100      	movs	r1, #0
 80114b2:	0028      	movs	r0, r5
 80114b4:	f004 f912 	bl	80156dc <memset>
 80114b8:	0022      	movs	r2, r4
 80114ba:	0021      	movs	r1, r4
    this->MacTxFrequency  [i] = 0;
 80114bc:	2300      	movs	r3, #0
 80114be:	3218      	adds	r2, #24
 80114c0:	3158      	adds	r1, #88	; 0x58
 80114c2:	6013      	str	r3, [r2, #0]
    this->MacRx1Frequency [i] = 0;
 80114c4:	6413      	str	r3, [r2, #64]	; 0x40
 80114c6:	3204      	adds	r2, #4
  for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80114c8:	428a      	cmp	r2, r1
 80114ca:	d1fa      	bne.n	80114c2 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0x5e>
  this->MacChannelIndexEnabled[0]  = CHANNEL_ENABLED;
 80114cc:	0022      	movs	r2, r4
 80114ce:	2102      	movs	r1, #2
 80114d0:	32b8      	adds	r2, #184	; 0xb8
 80114d2:	31ff      	adds	r1, #255	; 0xff
 80114d4:	8011      	strh	r1, [r2, #0]
  this->MacMinDataRateChannel[0]   = 0;
 80114d6:	0021      	movs	r1, r4
  this->MacChannelIndexEnabled[1]  = CHANNEL_ENABLED;
 80114d8:	2201      	movs	r2, #1
  this->MacMaxDataRateChannel[0]   = 5;
 80114da:	4815      	ldr	r0, [pc, #84]	; (8011530 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xcc>)
  this->MacMinDataRateChannel[0]   = 0;
 80114dc:	3198      	adds	r1, #152	; 0x98
  this->MacChannelIndexEnabled[1]  = CHANNEL_ENABLED;
 80114de:	7032      	strb	r2, [r6, #0]
  this->MacMinDataRateChannel[0]   = 0;
 80114e0:	800b      	strh	r3, [r1, #0]
  this->MacMinDataRateChannel[1]   = 0;
 80114e2:	702b      	strb	r3, [r5, #0]
  this->MacMaxDataRateChannel[0]   = 5;
 80114e4:	8208      	strh	r0, [r1, #16]
  this->MacMaxDataRateChannel[1]   = 5;
 80114e6:	2005      	movs	r0, #5
 80114e8:	7488      	strb	r0, [r1, #18]
  this->MacTxFrequency[2]          = 868500000;
 80114ea:	4912      	ldr	r1, [pc, #72]	; (8011534 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xd0>)
  this->MacRx1DataRateOffset       = 0;
 80114ec:	7523      	strb	r3, [r4, #20]
  this->MacTxFrequency[2]          = 868500000;
 80114ee:	6221      	str	r1, [r4, #32]
  this->MacRx1Frequency[2]         = 868500000;
 80114f0:	6621      	str	r1, [r4, #96]	; 0x60
  this->MacRx2Frequency            = 869525000;
 80114f2:	4911      	ldr	r1, [pc, #68]	; (8011538 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xd4>)
  this->MacRx2DataRate             = RX2DR_INIT;
 80114f4:	73a3      	strb	r3, [r4, #14]
  this->MacRx1Delay                = RECEIVE_DELAY1;
 80114f6:	0023      	movs	r3, r4
  this->MacRx2Frequency            = 869525000;
 80114f8:	6121      	str	r1, [r4, #16]
  this->MacTxPower                 = TX_POWER;
 80114fa:	210e      	movs	r1, #14
  this->MacTxFrequency[0]          = 868100000;
 80114fc:	4d0f      	ldr	r5, [pc, #60]	; (801153c <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xd8>)
  this->MacTxFrequency[1]          = 868300000;
 80114fe:	4810      	ldr	r0, [pc, #64]	; (8011540 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xdc>)
  this->MacRx1Delay                = RECEIVE_DELAY1;
 8011500:	33c8      	adds	r3, #200	; 0xc8
  this->MacTxFrequency[1]          = 868300000;
 8011502:	61e0      	str	r0, [r4, #28]
  this->MacRx1Frequency[1]         = 868300000;
 8011504:	65e0      	str	r0, [r4, #92]	; 0x5c
  this->MacTxPower                 = TX_POWER;
 8011506:	7221      	strb	r1, [r4, #8]
  this->MacTxFrequency[0]          = 868100000;
 8011508:	61a5      	str	r5, [r4, #24]
  this->MacRx1Frequency[0]         = 868100000;
 801150a:	65a5      	str	r5, [r4, #88]	; 0x58
  this->MacRx1Delay                = RECEIVE_DELAY1;
 801150c:	601a      	str	r2, [r3, #0]
  this->MacTxDataRateAdr           = 3; // XXX: Make it use SF9 as default DR because we can't join the TTN on SF12 (why?)
 801150e:	2303      	movs	r3, #3
 8011510:	71e3      	strb	r3, [r4, #7]
  memset(DistriDataRateInit, 0, 8);
 8011512:	4b0c      	ldr	r3, [pc, #48]	; (8011544 <_ZN13LoraRegionsEUI6SX126xEC1E12sLoRaWanKeysPS0_m+0xe0>)
 8011514:	3207      	adds	r2, #7
 8011516:	18e0      	adds	r0, r4, r3
 8011518:	2100      	movs	r1, #0
 801151a:	f004 f8df 	bl	80156dc <memset>
}
 801151e:	0020      	movs	r0, r4
 8011520:	b007      	add	sp, #28
 8011522:	bcf0      	pop	{r4, r5, r6, r7}
 8011524:	bc08      	pop	{r3}
 8011526:	b004      	add	sp, #16
 8011528:	4718      	bx	r3
 801152a:	46c0      	nop			; (mov r8, r8)
 801152c:	08017bd4 	.word	0x08017bd4
 8011530:	00000505 	.word	0x00000505
 8011534:	33c44220 	.word	0x33c44220
 8011538:	33d3e608 	.word	0x33d3e608
 801153c:	33be27a0 	.word	0x33be27a0
 8011540:	33c134e0 	.word	0x33c134e0
 8011544:	000008e8 	.word	0x000008e8

08011548 <_ZN13LoraRegionsEUI6SX126xE20RegionMaxPayloadSizeEh>:
  uint8_t M [ 8 ] = { 59, 59, 59, 123, 230, 230, 230, 230 };
 8011548:	4b07      	ldr	r3, [pc, #28]	; (8011568 <_ZN13LoraRegionsEUI6SX126xE20RegionMaxPayloadSizeEh+0x20>)
template < class R >eStatusLoRaWan LoraRegionsEU<R>::RegionMaxPayloadSize(uint8_t sizeIn) {
 801154a:	b082      	sub	sp, #8
  uint8_t M [ 8 ] = { 59, 59, 59, 123, 230, 230, 230, 230 };
 801154c:	9300      	str	r3, [sp, #0]
 801154e:	4b07      	ldr	r3, [pc, #28]	; (801156c <_ZN13LoraRegionsEUI6SX126xE20RegionMaxPayloadSizeEh+0x24>)
  status = (sizeIn >= M[this->MacTxDataRate]) ? ERRORLORAWAN : OKLORAWAN;
 8011550:	466a      	mov	r2, sp
  uint8_t M [ 8 ] = { 59, 59, 59, 123, 230, 230, 230, 230 };
 8011552:	9301      	str	r3, [sp, #4]
  status = (sizeIn >= M[this->MacTxDataRate]) ? ERRORLORAWAN : OKLORAWAN;
 8011554:	7983      	ldrb	r3, [r0, #6]
 8011556:	2000      	movs	r0, #0
 8011558:	5cd3      	ldrb	r3, [r2, r3]
 801155a:	4299      	cmp	r1, r3
 801155c:	4140      	adcs	r0, r0
 801155e:	4240      	negs	r0, r0
 8011560:	b240      	sxtb	r0, r0
}
 8011562:	b002      	add	sp, #8
 8011564:	4770      	bx	lr
 8011566:	46c0      	nop			; (mov r8, r8)
 8011568:	7b3b3b3b 	.word	0x7b3b3b3b
 801156c:	e6e6e6e6 	.word	0xe6e6e6e6

08011570 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh>:
template < class R >void LoraRegionsEU<R>::RegionSetDataRateDistribution(uint8_t adrMode) {
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	000e      	movs	r6, r1
  memset(DistriDataRateInit, 0, 8);
 8011574:	4b1d      	ldr	r3, [pc, #116]	; (80115ec <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x7c>)
 8011576:	2208      	movs	r2, #8
 8011578:	18c5      	adds	r5, r0, r3
template < class R >void LoraRegionsEU<R>::RegionSetDataRateDistribution(uint8_t adrMode) {
 801157a:	0004      	movs	r4, r0
  memset(DistriDataRateInit, 0, 8);
 801157c:	2100      	movs	r1, #0
 801157e:	0028      	movs	r0, r5
 8011580:	f004 f8ac 	bl	80156dc <memset>
  switch(adrMode) {
 8011584:	1e70      	subs	r0, r6, #1
 8011586:	4a1a      	ldr	r2, [pc, #104]	; (80115f0 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x80>)
 8011588:	4e18      	ldr	r6, [pc, #96]	; (80115ec <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x7c>)
 801158a:	2301      	movs	r3, #1
 801158c:	2803      	cmp	r0, #3
 801158e:	d82a      	bhi.n	80115e6 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x76>
 8011590:	f7f6 fdcc 	bl	800812c <__gnu_thumb1_case_uqi>
 8011594:	221e1a02 	.word	0x221e1a02
    DistriDataRateInit[0]    = 4;
 8011598:	4b16      	ldr	r3, [pc, #88]	; (80115f4 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x84>)
 801159a:	51a3      	str	r3, [r4, r6]
    DistriDataRateInit[3]    = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	50a3      	str	r3, [r4, r2]
    this->MacNbTrans         = 1;
 80115a0:	3301      	adds	r3, #1
    this->MacNbTrans         = 1;
 80115a2:	7323      	strb	r3, [r4, #12]
  this->MacTxPower                 = 14;
 80115a4:	230e      	movs	r3, #14
  this->MacChannelIndexEnabled [0] = CHANNEL_ENABLED;
 80115a6:	2202      	movs	r2, #2
  this->MacTxPower                 = 14;
 80115a8:	7223      	strb	r3, [r4, #8]
  this->MacChannelIndexEnabled [0] = CHANNEL_ENABLED;
 80115aa:	0023      	movs	r3, r4
 80115ac:	32ff      	adds	r2, #255	; 0xff
 80115ae:	33b8      	adds	r3, #184	; 0xb8
 80115b0:	801a      	strh	r2, [r3, #0]
  this->MacChannelIndexEnabled [1] = CHANNEL_ENABLED;
 80115b2:	3a01      	subs	r2, #1
 80115b4:	3aff      	subs	r2, #255	; 0xff
 80115b6:	709a      	strb	r2, [r3, #2]
  memcpy(DistriDataRate, DistriDataRateInit, 8);
 80115b8:	238e      	movs	r3, #142	; 0x8e
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	0029      	movs	r1, r5
 80115be:	18e0      	adds	r0, r4, r3
 80115c0:	3207      	adds	r2, #7
 80115c2:	f004 f882 	bl	80156ca <memcpy>
}
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
    DistriDataRateInit[3]    = 0;
 80115c8:	490b      	ldr	r1, [pc, #44]	; (80115f8 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x88>)
    DistriDataRateInit[0]    = 1;
 80115ca:	51a3      	str	r3, [r4, r6]
    DistriDataRateInit[3]    = 0;
 80115cc:	50a1      	str	r1, [r4, r2]
 80115ce:	e7e8      	b.n	80115a2 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x32>
    DistriDataRateInit[3]    = 0;
 80115d0:	2180      	movs	r1, #128	; 0x80
    DistriDataRateInit[0]    = 1;
 80115d2:	51a3      	str	r3, [r4, r6]
    DistriDataRateInit[3]    = 0;
 80115d4:	0049      	lsls	r1, r1, #1
 80115d6:	e7f9      	b.n	80115cc <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x5c>
    DistriDataRateInit[0]    = ((USER_DR_DISTRIBUTION_PARAMETERS) & (0xF0000000)) >> 28;
 80115d8:	2300      	movs	r3, #0
 80115da:	51a3      	str	r3, [r4, r6]
    DistriDataRateInit[3]    = ((USER_DR_DISTRIBUTION_PARAMETERS) & (0x000F0000)) >> 16;
 80115dc:	3301      	adds	r3, #1
 80115de:	33ff      	adds	r3, #255	; 0xff
 80115e0:	50a3      	str	r3, [r4, r2]
    this->MacNbTrans         = USER_NUMBER_OF_RETRANSMISSION;
 80115e2:	3bff      	subs	r3, #255	; 0xff
 80115e4:	e7dd      	b.n	80115a2 <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x32>
    DistriDataRateInit[0]    = 1;
 80115e6:	51a3      	str	r3, [r4, r6]
    DistriDataRateInit[3]    = 0;
 80115e8:	2100      	movs	r1, #0
 80115ea:	e7ef      	b.n	80115cc <_ZN13LoraRegionsEUI6SX126xE29RegionSetDataRateDistributionEh+0x5c>
 80115ec:	000008e8 	.word	0x000008e8
 80115f0:	000008ec 	.word	0x000008ec
 80115f4:	00010204 	.word	0x00010204
 80115f8:	00000504 	.word	0x00000504

080115fc <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv>:
template < class R >void LoraRegionsEU<R>::RegionLoadFromFlash(void) {
 80115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  InsertTrace(__COUNTER__, FileId);
 80115fe:	2101      	movs	r1, #1
template < class R >void LoraRegionsEU<R>::RegionLoadFromFlash(void) {
 8011600:	b085      	sub	sp, #20
 8011602:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8011604:	200b      	movs	r0, #11
 8011606:	f000 fa41 	bl	8011a8c <_Z11InsertTracehh>
  mcu.RestoreContext((uint8_t *)(&BackUpFlash), this->UserFlashAdress, sizeof(sBackUpFlash));
 801160a:	22e7      	movs	r2, #231	; 0xe7
 801160c:	23c0      	movs	r3, #192	; 0xc0
 801160e:	4d90      	ldr	r5, [pc, #576]	; (8011850 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x254>)
 8011610:	00d2      	lsls	r2, r2, #3
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	58a2      	ldr	r2, [r4, r2]
 8011616:	0029      	movs	r1, r5
 8011618:	488e      	ldr	r0, [pc, #568]	; (8011854 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x258>)
 801161a:	f7fc fd43 	bl	800e0a4 <_ZN12McuSTM32L07114RestoreContextEPhmm>
  Crc64((uint8_t *)&BackUpFlash, offsetof(struct sBackUpFlash, CrcHigh), &crcLow, &crcHigh);
 801161e:	21bc      	movs	r1, #188	; 0xbc
 8011620:	ab03      	add	r3, sp, #12
 8011622:	aa02      	add	r2, sp, #8
 8011624:	0049      	lsls	r1, r1, #1
 8011626:	0028      	movs	r0, r5
 8011628:	f000 fa90 	bl	8011b4c <_Z5Crc64PhiPmS0_>
  if((crcLow == BackUpFlash.CrcLow) && (crcHigh == BackUpFlash.CrcHigh)) {        // explicit else = factory reset => the default value inside the constructor
 801162c:	23be      	movs	r3, #190	; 0xbe
 801162e:	005b      	lsls	r3, r3, #1
 8011630:	58eb      	ldr	r3, [r5, r3]
 8011632:	9a02      	ldr	r2, [sp, #8]
 8011634:	4293      	cmp	r3, r2
 8011636:	d000      	beq.n	801163a <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x3e>
 8011638:	e0f8      	b.n	801182c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x230>
 801163a:	002b      	movs	r3, r5
 801163c:	33fc      	adds	r3, #252	; 0xfc
 801163e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011640:	9a03      	ldr	r2, [sp, #12]
 8011642:	4293      	cmp	r3, r2
 8011644:	d000      	beq.n	8011648 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x4c>
 8011646:	e0f1      	b.n	801182c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x230>
    BackUpFlash.FcntUp                 +=  FLASH_UPDATE_PERIOD; //@note automatic increment
 8011648:	002a      	movs	r2, r5
    BackUpFlash.NbOfReset++;
 801164a:	21a0      	movs	r1, #160	; 0xa0
    BackUpFlash.FcntUp                 +=  FLASH_UPDATE_PERIOD; //@note automatic increment
 801164c:	32c8      	adds	r2, #200	; 0xc8
 801164e:	6813      	ldr	r3, [r2, #0]
    BackUpFlash.NbOfReset++;
 8011650:	0049      	lsls	r1, r1, #1
    BackUpFlash.FcntUp                 +=  FLASH_UPDATE_PERIOD; //@note automatic increment
 8011652:	3320      	adds	r3, #32
 8011654:	6013      	str	r3, [r2, #0]
    BackUpFlash.NbOfReset++;
 8011656:	5c6b      	ldrb	r3, [r5, r1]
    this->SetDevAddr(BackUpFlash.DevAddr);
 8011658:	0020      	movs	r0, r4
    BackUpFlash.NbOfReset++;
 801165a:	3301      	adds	r3, #1
 801165c:	b2db      	uxtb	r3, r3
 801165e:	546b      	strb	r3, [r5, r1]
    this->NbOfReset                     = BackUpFlash.NbOfReset;
 8011660:	7163      	strb	r3, [r4, #5]
    this->MacTxDataRate                 = BackUpFlash.MacTxDataRate;
 8011662:	782b      	ldrb	r3, [r5, #0]
    this->MacRx1Delay                   = BackUpFlash.MacRx1Delay;
 8011664:	0029      	movs	r1, r5
    this->MacTxDataRate                 = BackUpFlash.MacTxDataRate;
 8011666:	71a3      	strb	r3, [r4, #6]
    this->MacTxPower                    = BackUpFlash.MacTxPower;
 8011668:	786b      	ldrb	r3, [r5, #1]
    this->MacRx1Delay                   = BackUpFlash.MacRx1Delay;
 801166a:	31c4      	adds	r1, #196	; 0xc4
    this->MacTxPower                    = BackUpFlash.MacTxPower;
 801166c:	7223      	strb	r3, [r4, #8]
    this->MacChMask                     = BackUpFlash.MacChMask;
 801166e:	886b      	ldrh	r3, [r5, #2]
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 8011670:	2600      	movs	r6, #0
    this->MacChMask                     = BackUpFlash.MacChMask;
 8011672:	8163      	strh	r3, [r4, #10]
    this->MacNbTrans                    = BackUpFlash.MacNbTrans;
 8011674:	792b      	ldrb	r3, [r5, #4]
 8011676:	7323      	strb	r3, [r4, #12]
    this->MacRx2Frequency               = BackUpFlash.MacRx2Frequency;
 8011678:	68ab      	ldr	r3, [r5, #8]
 801167a:	6123      	str	r3, [r4, #16]
    this->MacRx2DataRate                = BackUpFlash.MacRx2DataRate;
 801167c:	7b2b      	ldrb	r3, [r5, #12]
 801167e:	73a3      	strb	r3, [r4, #14]
    this->MacRx1DataRateOffset          = BackUpFlash.MacRx1DataRateOffset;
 8011680:	7b6b      	ldrb	r3, [r5, #13]
 8011682:	7523      	strb	r3, [r4, #20]
    this->MacRx1Delay                   = BackUpFlash.MacRx1Delay;
 8011684:	0023      	movs	r3, r4
 8011686:	6809      	ldr	r1, [r1, #0]
 8011688:	33c8      	adds	r3, #200	; 0xc8
 801168a:	6019      	str	r1, [r3, #0]
    this->FcntUp                        = BackUpFlash.FcntUp;
 801168c:	6812      	ldr	r2, [r2, #0]
 801168e:	605a      	str	r2, [r3, #4]
    this->FcntDwn                       = BackUpFlash.FcntDwn;
 8011690:	002a      	movs	r2, r5
 8011692:	32cc      	adds	r2, #204	; 0xcc
 8011694:	6812      	ldr	r2, [r2, #0]
 8011696:	609a      	str	r2, [r3, #8]
    this->SetDevAddr(BackUpFlash.DevAddr);
 8011698:	002b      	movs	r3, r5
 801169a:	33d0      	adds	r3, #208	; 0xd0
 801169c:	6819      	ldr	r1, [r3, #0]
 801169e:	f7fd fc3f 	bl	800ef20 <_ZN16LoraWanContainerILi16E6SX126xE10SetDevAddrEm>
    this->DevNonce                      = BackUpFlash.DevNonce;
 80116a2:	239f      	movs	r3, #159	; 0x9f
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	5aea      	ldrh	r2, [r5, r3]
 80116a8:	332b      	adds	r3, #43	; 0x2b
 80116aa:	33ff      	adds	r3, #255	; 0xff
 80116ac:	52e2      	strh	r2, [r4, r3]
    this->Phy.JoinedStatus              = (eJoinStatus) BackUpFlash.JoinedStatus;
 80116ae:	3b2d      	subs	r3, #45	; 0x2d
 80116b0:	3bff      	subs	r3, #255	; 0xff
 80116b2:	5ceb      	ldrb	r3, [r5, r3]
 80116b4:	4a68      	ldr	r2, [pc, #416]	; (8011858 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x25c>)
 80116b6:	0021      	movs	r1, r4
 80116b8:	54a3      	strb	r3, [r4, r2]
 80116ba:	0023      	movs	r3, r4
 80116bc:	4867      	ldr	r0, [pc, #412]	; (801185c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x260>)
 80116be:	3118      	adds	r1, #24
 80116c0:	3398      	adds	r3, #152	; 0x98
 80116c2:	9201      	str	r2, [sp, #4]
      this->MacTxFrequency[i]         = BackUpFlash.MacTxFrequency[i];
 80116c4:	6802      	ldr	r2, [r0, #0]
 80116c6:	3004      	adds	r0, #4
 80116c8:	600a      	str	r2, [r1, #0]
      this->MacRx1Frequency[i]        = BackUpFlash.MacRx1Frequency[i];
 80116ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80116cc:	3104      	adds	r1, #4
 80116ce:	63ca      	str	r2, [r1, #60]	; 0x3c
 80116d0:	19aa      	adds	r2, r5, r6
      this->MacMaxDataRateChannel[i]  = BackUpFlash.MacMaxDataRateChannel[i];
 80116d2:	0017      	movs	r7, r2
 80116d4:	37a0      	adds	r7, #160	; 0xa0
 80116d6:	783f      	ldrb	r7, [r7, #0]
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80116d8:	3601      	adds	r6, #1
      this->MacMaxDataRateChannel[i]  = BackUpFlash.MacMaxDataRateChannel[i];
 80116da:	741f      	strb	r7, [r3, #16]
      this->MacMinDataRateChannel[i]  = BackUpFlash.MacMinDataRateChannel[i];
 80116dc:	0017      	movs	r7, r2
 80116de:	3790      	adds	r7, #144	; 0x90
 80116e0:	783f      	ldrb	r7, [r7, #0]
      this->MacChannelIndexEnabled[i] = BackUpFlash.MacChannelIndexEnabled[i];
 80116e2:	32b0      	adds	r2, #176	; 0xb0
      this->MacMinDataRateChannel[i]  = BackUpFlash.MacMinDataRateChannel[i];
 80116e4:	701f      	strb	r7, [r3, #0]
      this->MacChannelIndexEnabled[i] = BackUpFlash.MacChannelIndexEnabled[i];
 80116e6:	7817      	ldrb	r7, [r2, #0]
 80116e8:	001a      	movs	r2, r3
 80116ea:	3220      	adds	r2, #32
 80116ec:	7017      	strb	r7, [r2, #0]
 80116ee:	3301      	adds	r3, #1
    for(int i = 0; i < this->NUMBER_OF_CHANNEL; i++) {
 80116f0:	2e10      	cmp	r6, #16
 80116f2:	d1e7      	bne.n	80116c4 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0xc8>
    this->otaDevice = BackUpFlash.otaDevice;
 80116f4:	23a4      	movs	r3, #164	; 0xa4
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	5ceb      	ldrb	r3, [r5, r3]
    memcpy(this->appKey, BackUpFlash.appKey, sizeof this->appKey);
 80116fa:	0029      	movs	r1, r5
    this->otaDevice = BackUpFlash.otaDevice;
 80116fc:	1e5a      	subs	r2, r3, #1
 80116fe:	4193      	sbcs	r3, r2
 8011700:	0022      	movs	r2, r4
    memcpy(this->appKey, BackUpFlash.appKey, sizeof this->appKey);
 8011702:	0020      	movs	r0, r4
    this->otaDevice = BackUpFlash.otaDevice;
 8011704:	32ff      	adds	r2, #255	; 0xff
    memcpy(this->appKey, BackUpFlash.appKey, sizeof this->appKey);
 8011706:	315a      	adds	r1, #90	; 0x5a
    this->otaDevice = BackUpFlash.otaDevice;
 8011708:	7653      	strb	r3, [r2, #25]
    memcpy(this->appKey, BackUpFlash.appKey, sizeof this->appKey);
 801170a:	31ff      	adds	r1, #255	; 0xff
 801170c:	0032      	movs	r2, r6
 801170e:	30f8      	adds	r0, #248	; 0xf8
 8011710:	f003 ffdb 	bl	80156ca <memcpy>
    memcpy(this->appEui, BackUpFlash.appEui, sizeof this->appEui);
 8011714:	0020      	movs	r0, r4
 8011716:	0029      	movs	r1, r5
 8011718:	3011      	adds	r0, #17
 801171a:	3152      	adds	r1, #82	; 0x52
 801171c:	31ff      	adds	r1, #255	; 0xff
 801171e:	2208      	movs	r2, #8
 8011720:	30ff      	adds	r0, #255	; 0xff
 8011722:	f003 ffd2 	bl	80156ca <memcpy>
    memcpy(this->devEui, BackUpFlash.devEui, sizeof this->appEui);
 8011726:	0020      	movs	r0, r4
 8011728:	0029      	movs	r1, r5
    memcpy(&this->appSKey[0], &BackUpFlash.appSKey[0], 16);
 801172a:	0027      	movs	r7, r4
    memcpy(this->devEui, BackUpFlash.devEui, sizeof this->appEui);
 801172c:	3009      	adds	r0, #9
 801172e:	314a      	adds	r1, #74	; 0x4a
    memcpy(&this->appSKey[0], &BackUpFlash.appSKey[0], 16);
 8011730:	37e8      	adds	r7, #232	; 0xe8
    memcpy(this->devEui, BackUpFlash.devEui, sizeof this->appEui);
 8011732:	31ff      	adds	r1, #255	; 0xff
 8011734:	2208      	movs	r2, #8
 8011736:	30ff      	adds	r0, #255	; 0xff
 8011738:	f003 ffc7 	bl	80156ca <memcpy>
    memcpy(&this->appSKey[0], &BackUpFlash.appSKey[0], 16);
 801173c:	0032      	movs	r2, r6
 801173e:	4948      	ldr	r1, [pc, #288]	; (8011860 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x264>)
 8011740:	0038      	movs	r0, r7
 8011742:	f003 ffc2 	bl	80156ca <memcpy>
    memcpy(&this->nwkSKey[0], &BackUpFlash.nwkSKey[0], 16);
 8011746:	0020      	movs	r0, r4
 8011748:	0032      	movs	r2, r6
 801174a:	4946      	ldr	r1, [pc, #280]	; (8011864 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x268>)
 801174c:	30d8      	adds	r0, #216	; 0xd8
 801174e:	f003 ffbc 	bl	80156ca <memcpy>
    memcpy(&this->appSKey[0], &BackUpFlash.appSKey[0], 16);
 8011752:	0032      	movs	r2, r6
 8011754:	4942      	ldr	r1, [pc, #264]	; (8011860 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x264>)
 8011756:	0038      	movs	r0, r7
 8011758:	f003 ffb7 	bl	80156ca <memcpy>
    Crc64((uint8_t *)&BackUpFlash, offsetof(struct sBackUpFlash, CrcHigh), &crcLow, &crcHigh);
 801175c:	21bc      	movs	r1, #188	; 0xbc
 801175e:	ab03      	add	r3, sp, #12
 8011760:	aa02      	add	r2, sp, #8
 8011762:	0028      	movs	r0, r5
 8011764:	0049      	lsls	r1, r1, #1
 8011766:	f000 f9f1 	bl	8011b4c <_Z5Crc64PhiPmS0_>
    BackUpFlash.CrcLow  = crcLow;
 801176a:	23be      	movs	r3, #190	; 0xbe
 801176c:	9a02      	ldr	r2, [sp, #8]
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	50ea      	str	r2, [r5, r3]
    BackUpFlash.CrcHigh = crcHigh;
 8011772:	002b      	movs	r3, r5
 8011774:	9a03      	ldr	r2, [sp, #12]
 8011776:	33fc      	adds	r3, #252	; 0xfc
 8011778:	67da      	str	r2, [r3, #124]	; 0x7c
    mcu.StoreContext(&BackUpFlash, this->UserFlashAdress, sizeof BackUpFlash);
 801177a:	22e7      	movs	r2, #231	; 0xe7
 801177c:	23c0      	movs	r3, #192	; 0xc0
 801177e:	00d2      	lsls	r2, r2, #3
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	58a2      	ldr	r2, [r4, r2]
 8011784:	0029      	movs	r1, r5
 8011786:	4833      	ldr	r0, [pc, #204]	; (8011854 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x258>)
 8011788:	f7fc fc93 	bl	800e0b2 <_ZN12McuSTM32L07112StoreContextEPKvmm>
    DEBUG_PRINTF("\n MacTxDataRate = %d ", this->MacTxDataRate);
 801178c:	79a2      	ldrb	r2, [r4, #6]
 801178e:	4936      	ldr	r1, [pc, #216]	; (8011868 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x26c>)
 8011790:	2000      	movs	r0, #0
 8011792:	f7f9 f80b 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n MacTxPower = %d ", this->MacTxPower);
 8011796:	7a22      	ldrb	r2, [r4, #8]
 8011798:	4934      	ldr	r1, [pc, #208]	; (801186c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x270>)
 801179a:	2000      	movs	r0, #0
 801179c:	f7f9 f806 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n MacChMask = 0x%x ", this->MacChMask);
 80117a0:	8962      	ldrh	r2, [r4, #10]
 80117a2:	4933      	ldr	r1, [pc, #204]	; (8011870 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x274>)
 80117a4:	2000      	movs	r0, #0
 80117a6:	f7f9 f801 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n MacRx2Frequency = %d ", this->MacRx2Frequency);
 80117aa:	6922      	ldr	r2, [r4, #16]
 80117ac:	4931      	ldr	r1, [pc, #196]	; (8011874 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x278>)
 80117ae:	2000      	movs	r0, #0
 80117b0:	f7f8 fffc 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n MacRx2DataRate = %d ", this->MacRx2DataRate);
 80117b4:	7ba2      	ldrb	r2, [r4, #14]
 80117b6:	4930      	ldr	r1, [pc, #192]	; (8011878 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x27c>)
 80117b8:	2000      	movs	r0, #0
 80117ba:	f7f8 fff7 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n MacRx1DataRateOffset = %d ", this->MacRx1DataRateOffset);
 80117be:	7d22      	ldrb	r2, [r4, #20]
 80117c0:	492e      	ldr	r1, [pc, #184]	; (801187c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x280>)
 80117c2:	2000      	movs	r0, #0
 80117c4:	f7f8 fff2 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n MacRx1Delay = %d ", this->MacRx1Delay);
 80117c8:	0023      	movs	r3, r4
 80117ca:	33c8      	adds	r3, #200	; 0xc8
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	492c      	ldr	r1, [pc, #176]	; (8011880 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x284>)
 80117d0:	2000      	movs	r0, #0
 80117d2:	f7f8 ffeb 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n FcntUp = %d ", this->FcntUp);
 80117d6:	0023      	movs	r3, r4
 80117d8:	33cc      	adds	r3, #204	; 0xcc
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	4929      	ldr	r1, [pc, #164]	; (8011884 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x288>)
 80117de:	2000      	movs	r0, #0
 80117e0:	f7f8 ffe4 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n FcntDwn = %d ", this->FcntDwn);
 80117e4:	0023      	movs	r3, r4
 80117e6:	33d0      	adds	r3, #208	; 0xd0
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	4927      	ldr	r1, [pc, #156]	; (8011888 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x28c>)
 80117ec:	2000      	movs	r0, #0
 80117ee:	f7f8 ffdd 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n DevAddr = 0x%x ", this->DevAddr);
 80117f2:	0023      	movs	r3, r4
 80117f4:	33d4      	adds	r3, #212	; 0xd4
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	4924      	ldr	r1, [pc, #144]	; (801188c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x290>)
 80117fa:	2000      	movs	r0, #0
 80117fc:	f7f8 ffd6 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n DevNonce = 0x%x ", this->DevNonce);
 8011800:	239a      	movs	r3, #154	; 0x9a
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	5ae2      	ldrh	r2, [r4, r3]
 8011806:	4922      	ldr	r1, [pc, #136]	; (8011890 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x294>)
 8011808:	2000      	movs	r0, #0
 801180a:	f7f8 ffcf 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n JoinedStatus = %d ", this->Phy.JoinedStatus);
 801180e:	9b01      	ldr	r3, [sp, #4]
 8011810:	4920      	ldr	r1, [pc, #128]	; (8011894 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x298>)
 8011812:	5ce2      	ldrb	r2, [r4, r3]
 8011814:	2000      	movs	r0, #0
 8011816:	f7f8 ffc9 	bl	800a7ac <SEGGER_RTT_printf>
    DEBUG_PRINTF("\n NbOfReset = %d ", BackUpFlash.NbOfReset);
 801181a:	23a0      	movs	r3, #160	; 0xa0
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	5cea      	ldrb	r2, [r5, r3]
 8011820:	491d      	ldr	r1, [pc, #116]	; (8011898 <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x29c>)
 8011822:	2000      	movs	r0, #0
 8011824:	f7f8 ffc2 	bl	800a7ac <SEGGER_RTT_printf>
}
 8011828:	b005      	add	sp, #20
 801182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    BackUpFlash.NbOfReset = 0;
 801182c:	23a0      	movs	r3, #160	; 0xa0
 801182e:	2600      	movs	r6, #0
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	54ee      	strb	r6, [r5, r3]
    BackUpFlash.txPort = 1;
 8011834:	236a      	movs	r3, #106	; 0x6a
 8011836:	2201      	movs	r2, #1
 8011838:	33ff      	adds	r3, #255	; 0xff
 801183a:	54ea      	strb	r2, [r5, r3]
    RegionSaveInFlash();
 801183c:	6823      	ldr	r3, [r4, #0]
 801183e:	0020      	movs	r0, r4
 8011840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011842:	4798      	blx	r3
    DEBUG_MSG("WRONG CRC \n");
 8011844:	4915      	ldr	r1, [pc, #84]	; (801189c <_ZN13LoraRegionsEUI6SX126xE19RegionLoadFromFlashEv+0x2a0>)
 8011846:	0030      	movs	r0, r6
 8011848:	f7f8 fdf0 	bl	800a42c <SEGGER_RTT_WriteString>
    NVIC_SystemReset();
 801184c:	f7ff fb7a 	bl	8010f44 <__NVIC_SystemReset>
 8011850:	200016cc 	.word	0x200016cc
 8011854:	20001988 	.word	0x20001988
 8011858:	000006ad 	.word	0x000006ad
 801185c:	200016dc 	.word	0x200016dc
 8011860:	200017b0 	.word	0x200017b0
 8011864:	200017a0 	.word	0x200017a0
 8011868:	080189c8 	.word	0x080189c8
 801186c:	080189de 	.word	0x080189de
 8011870:	080189f1 	.word	0x080189f1
 8011874:	08018a05 	.word	0x08018a05
 8011878:	08018a1d 	.word	0x08018a1d
 801187c:	08018a34 	.word	0x08018a34
 8011880:	08018a51 	.word	0x08018a51
 8011884:	08018a65 	.word	0x08018a65
 8011888:	08018a74 	.word	0x08018a74
 801188c:	08018a84 	.word	0x08018a84
 8011890:	08018a96 	.word	0x08018a96
 8011894:	08018aa9 	.word	0x08018aa9
 8011898:	08018abe 	.word	0x08018abe
 801189c:	08018ad0 	.word	0x08018ad0

080118a0 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh>:
}
/***********************************************************************************************/
/*                      Private  Methods                                                        */
/***********************************************************************************************/
//@notereview function a commun
template < class R >void LoraRegionsEU<R>::TxDataRateToSfBw(uint8_t dataRate) {
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	0004      	movs	r4, r0
 80118a4:	000d      	movs	r5, r1
  InsertTrace(__COUNTER__, FileId);
 80118a6:	200d      	movs	r0, #13
 80118a8:	2101      	movs	r1, #1
 80118aa:	f000 f8ef 	bl	8011a8c <_Z11InsertTracehh>
  this->MacTxModulationCurrent = LORA;
 80118ae:	2000      	movs	r0, #0
 80118b0:	4b0f      	ldr	r3, [pc, #60]	; (80118f0 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x50>)
 80118b2:	54e0      	strb	r0, [r4, r3]
  if(dataRate < 6) {
 80118b4:	2d05      	cmp	r5, #5
 80118b6:	d806      	bhi.n	80118c6 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x26>
    this->MacTxSfCurrent = 12 - dataRate;
 80118b8:	230c      	movs	r3, #12
 80118ba:	1b5d      	subs	r5, r3, r5
 80118bc:	4b0d      	ldr	r3, [pc, #52]	; (80118f4 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x54>)
 80118be:	54e5      	strb	r5, [r4, r3]
    this->MacTxBwCurrent = BW125;
 80118c0:	4b0d      	ldr	r3, [pc, #52]	; (80118f8 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x58>)
 80118c2:	54e0      	strb	r0, [r4, r3]
  } else {
    this->MacTxSfCurrent = 12;
    this->MacTxBwCurrent = BW125;
    DEBUG_MSG(" Invalid Datarate \n");
  }
}
 80118c4:	bd70      	pop	{r4, r5, r6, pc}
  } else if(dataRate == 6) {
 80118c6:	2d06      	cmp	r5, #6
 80118c8:	d106      	bne.n	80118d8 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x38>
    this->MacTxSfCurrent = 7;
 80118ca:	2207      	movs	r2, #7
 80118cc:	4b09      	ldr	r3, [pc, #36]	; (80118f4 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x54>)
 80118ce:	54e2      	strb	r2, [r4, r3]
    this->MacTxBwCurrent = BW250;
 80118d0:	4b09      	ldr	r3, [pc, #36]	; (80118f8 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x58>)
    this->MacTxModulationCurrent = FSK;
 80118d2:	2201      	movs	r2, #1
 80118d4:	54e2      	strb	r2, [r4, r3]
 80118d6:	e7f5      	b.n	80118c4 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x24>
  else if(dataRate == 7) {
 80118d8:	2d07      	cmp	r5, #7
 80118da:	d0fa      	beq.n	80118d2 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x32>
    this->MacTxSfCurrent = 12;
 80118dc:	220c      	movs	r2, #12
 80118de:	4b05      	ldr	r3, [pc, #20]	; (80118f4 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x54>)
    DEBUG_MSG(" Invalid Datarate \n");
 80118e0:	4906      	ldr	r1, [pc, #24]	; (80118fc <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x5c>)
    this->MacTxSfCurrent = 12;
 80118e2:	54e2      	strb	r2, [r4, r3]
    this->MacTxBwCurrent = BW125;
 80118e4:	4b04      	ldr	r3, [pc, #16]	; (80118f8 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x58>)
 80118e6:	54e0      	strb	r0, [r4, r3]
    DEBUG_MSG(" Invalid Datarate \n");
 80118e8:	f7f8 fda0 	bl	800a42c <SEGGER_RTT_WriteString>
}
 80118ec:	e7ea      	b.n	80118c4 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh+0x24>
 80118ee:	46c0      	nop			; (mov r8, r8)
 80118f0:	0000073d 	.word	0x0000073d
 80118f4:	0000073c 	.word	0x0000073c
 80118f8:	0000073f 	.word	0x0000073f
 80118fc:	080189a2 	.word	0x080189a2

08011900 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv>:
template < class R >void LoraRegionsEU<R>::RegionGiveNextDataRate(void) {
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8011904:	2101      	movs	r1, #1
 8011906:	2008      	movs	r0, #8
 8011908:	f000 f8c0 	bl	8011a8c <_Z11InsertTracehh>
  if(this->AdrModeSelect == STATIC_ADR_MODE) {
 801190c:	4b1c      	ldr	r3, [pc, #112]	; (8011980 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x80>)
 801190e:	5ce3      	ldrb	r3, [r4, r3]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10f      	bne.n	8011934 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x34>
    this->AdrEnable = 1;
 8011914:	2201      	movs	r2, #1
    this->MacTxDataRate = this->MacTxDataRateAdr;
 8011916:	79e3      	ldrb	r3, [r4, #7]
 8011918:	71a3      	strb	r3, [r4, #6]
    this->AdrEnable = 1;
 801191a:	4b1a      	ldr	r3, [pc, #104]	; (8011984 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x84>)
    this->AdrEnable = 0;
 801191c:	54e2      	strb	r2, [r4, r3]
  this->MacTxDataRate = (this->MacTxDataRate > 7) ? 7 : this->MacTxDataRate;
 801191e:	79a2      	ldrb	r2, [r4, #6]
 8011920:	1c13      	adds	r3, r2, #0
 8011922:	2a07      	cmp	r2, #7
 8011924:	d900      	bls.n	8011928 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x28>
 8011926:	2307      	movs	r3, #7
 8011928:	b2d9      	uxtb	r1, r3
 801192a:	71a3      	strb	r3, [r4, #6]
  TxDataRateToSfBw(this->MacTxDataRate);
 801192c:	0020      	movs	r0, r4
 801192e:	f7ff ffb7 	bl	80118a0 <_ZN13LoraRegionsEUI6SX126xE16TxDataRateToSfBwEh>
}
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	238e      	movs	r3, #142	; 0x8e
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	18e1      	adds	r1, r4, r3
 801193a:	4b13      	ldr	r3, [pc, #76]	; (8011988 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x88>)
 801193c:	0008      	movs	r0, r1
 801193e:	18e2      	adds	r2, r4, r3
    uint8_t DistriSum = 0;
 8011940:	2300      	movs	r3, #0
      DistriSum += DistriDataRate[i];
 8011942:	780d      	ldrb	r5, [r1, #0]
 8011944:	3101      	adds	r1, #1
 8011946:	195b      	adds	r3, r3, r5
 8011948:	b2db      	uxtb	r3, r3
    for(i = 0; i < 8; i++) {
 801194a:	4291      	cmp	r1, r2
 801194c:	d1f9      	bne.n	8011942 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x42>
    if(DistriSum == 0) {
 801194e:	2b00      	cmp	r3, #0
 8011950:	d102      	bne.n	8011958 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x58>
      memcpy(DistriDataRate, DistriDataRateInit, 8);
 8011952:	2208      	movs	r2, #8
 8011954:	f003 feb9 	bl	80156ca <memcpy>
    uint8_t Newdr = randr(0, 7);
 8011958:	2107      	movs	r1, #7
 801195a:	2000      	movs	r0, #0
 801195c:	f000 f8d6 	bl	8011b0c <_Z5randrll>
    while(DistriDataRate[Newdr] == 0) {
 8011960:	218e      	movs	r1, #142	; 0x8e
    uint8_t Newdr = randr(0, 7);
 8011962:	b2c3      	uxtb	r3, r0
    while(DistriDataRate[Newdr] == 0) {
 8011964:	18e2      	adds	r2, r4, r3
 8011966:	0109      	lsls	r1, r1, #4
 8011968:	1852      	adds	r2, r2, r1
 801196a:	7810      	ldrb	r0, [r2, #0]
 801196c:	2800      	cmp	r0, #0
 801196e:	d101      	bne.n	8011974 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x74>
      Newdr = randr(0, 7);
 8011970:	2107      	movs	r1, #7
 8011972:	e7f3      	b.n	801195c <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x5c>
    DistriDataRate[Newdr]--;
 8011974:	3801      	subs	r0, #1
    this->MacTxDataRate = Newdr;
 8011976:	71a3      	strb	r3, [r4, #6]
    DistriDataRate[Newdr]--;
 8011978:	7010      	strb	r0, [r2, #0]
    this->AdrEnable = 0;
 801197a:	4b02      	ldr	r3, [pc, #8]	; (8011984 <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x84>)
 801197c:	2200      	movs	r2, #0
 801197e:	e7cd      	b.n	801191c <_ZN13LoraRegionsEUI6SX126xE22RegionGiveNextDataRateEv+0x1c>
 8011980:	0000047a 	.word	0x0000047a
 8011984:	00000489 	.word	0x00000489
 8011988:	000008e8 	.word	0x000008e8

0801198c <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh>:
template < class R >void LoraRegionsEU<R>::Rx2DataRateToSfBw(uint8_t dataRate) {
 801198c:	b570      	push	{r4, r5, r6, lr}
 801198e:	000d      	movs	r5, r1
 8011990:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 8011992:	2101      	movs	r1, #1
 8011994:	200e      	movs	r0, #14
 8011996:	f000 f879 	bl	8011a8c <_Z11InsertTracehh>
  if(dataRate < 6) {
 801199a:	2d05      	cmp	r5, #5
 801199c:	d807      	bhi.n	80119ae <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x22>
    this->MacRx2SfCurrent = 12 - dataRate;
 801199e:	230c      	movs	r3, #12
    this->MacRx2BwCurrent = BW125;
 80119a0:	2200      	movs	r2, #0
    this->MacRx2SfCurrent = 12 - dataRate;
 80119a2:	1b5d      	subs	r5, r3, r5
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x4c>)
 80119a6:	54e5      	strb	r5, [r4, r3]
    this->MacRx2BwCurrent = BW125;
 80119a8:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x50>)
  } else if(dataRate == 6) {
    this->MacRx2SfCurrent = 7;
    this->MacRx2BwCurrent = BW250;
 80119aa:	54e2      	strb	r2, [r4, r3]
  else {
    this->MacRx2SfCurrent = 12;
    this->MacRx2BwCurrent = BW125;
    DEBUG_MSG(" Invalid Datarate \n");
  }
}
 80119ac:	bd70      	pop	{r4, r5, r6, pc}
  } else if(dataRate == 6) {
 80119ae:	2d06      	cmp	r5, #6
 80119b0:	d105      	bne.n	80119be <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x32>
    this->MacRx2SfCurrent = 7;
 80119b2:	2207      	movs	r2, #7
 80119b4:	4b08      	ldr	r3, [pc, #32]	; (80119d8 <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x4c>)
 80119b6:	54e2      	strb	r2, [r4, r3]
    this->MacRx2BwCurrent = BW250;
 80119b8:	4b08      	ldr	r3, [pc, #32]	; (80119dc <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x50>)
 80119ba:	3a06      	subs	r2, #6
 80119bc:	e7f5      	b.n	80119aa <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x1e>
  else if(dataRate == 7) {
 80119be:	2d07      	cmp	r5, #7
 80119c0:	d0f4      	beq.n	80119ac <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x20>
    this->MacRx2SfCurrent = 12;
 80119c2:	220c      	movs	r2, #12
    this->MacRx2BwCurrent = BW125;
 80119c4:	2000      	movs	r0, #0
    this->MacRx2SfCurrent = 12;
 80119c6:	4b04      	ldr	r3, [pc, #16]	; (80119d8 <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x4c>)
    DEBUG_MSG(" Invalid Datarate \n");
 80119c8:	4905      	ldr	r1, [pc, #20]	; (80119e0 <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x54>)
    this->MacRx2SfCurrent = 12;
 80119ca:	54e2      	strb	r2, [r4, r3]
    this->MacRx2BwCurrent = BW125;
 80119cc:	4b03      	ldr	r3, [pc, #12]	; (80119dc <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x50>)
 80119ce:	54e0      	strb	r0, [r4, r3]
    DEBUG_MSG(" Invalid Datarate \n");
 80119d0:	f7f8 fd2c 	bl	800a42c <SEGGER_RTT_WriteString>
}
 80119d4:	e7ea      	b.n	80119ac <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh+0x20>
 80119d6:	46c0      	nop			; (mov r8, r8)
 80119d8:	0000074a 	.word	0x0000074a
 80119dc:	0000074b 	.word	0x0000074b
 80119e0:	080189a2 	.word	0x080189a2

080119e4 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType>:
template < class R >void LoraRegionsEU<R>::RegionSetRxConfig(eRxWinType type) {
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	000d      	movs	r5, r1
 80119e8:	0004      	movs	r4, r0
  InsertTrace(__COUNTER__, FileId);
 80119ea:	2101      	movs	r1, #1
 80119ec:	2004      	movs	r0, #4
 80119ee:	f000 f84d 	bl	8011a8c <_Z11InsertTracehh>
  if(type == RX1) {
 80119f2:	2d00      	cmp	r5, #0
 80119f4:	d110      	bne.n	8011a18 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x34>
    this->MacRx1SfCurrent = (this->MacTxSfCurrent < 12 - this->MacRx1DataRateOffset) ? this->MacTxSfCurrent + this->MacRx1DataRateOffset : 12;
 80119f6:	4b0e      	ldr	r3, [pc, #56]	; (8011a30 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x4c>)
 80119f8:	7d21      	ldrb	r1, [r4, #20]
 80119fa:	5ce2      	ldrb	r2, [r4, r3]
 80119fc:	230c      	movs	r3, #12
 80119fe:	1a58      	subs	r0, r3, r1
 8011a00:	4282      	cmp	r2, r0
 8011a02:	da01      	bge.n	8011a08 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x24>
 8011a04:	1852      	adds	r2, r2, r1
 8011a06:	b2d3      	uxtb	r3, r2
 8011a08:	22e9      	movs	r2, #233	; 0xe9
 8011a0a:	00d2      	lsls	r2, r2, #3
 8011a0c:	54a3      	strb	r3, [r4, r2]
    this->MacRx1BwCurrent = this->MacTxBwCurrent;
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x50>)
 8011a10:	5ce2      	ldrb	r2, [r4, r3]
 8011a12:	4b09      	ldr	r3, [pc, #36]	; (8011a38 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x54>)
 8011a14:	54e2      	strb	r2, [r4, r3]
}
 8011a16:	bd70      	pop	{r4, r5, r6, pc}
  } else if(type == RX2) {
 8011a18:	2d01      	cmp	r5, #1
 8011a1a:	d104      	bne.n	8011a26 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x42>
    Rx2DataRateToSfBw(this->MacRx2DataRate);
 8011a1c:	7ba1      	ldrb	r1, [r4, #14]
 8011a1e:	0020      	movs	r0, r4
 8011a20:	f7ff ffb4 	bl	801198c <_ZN13LoraRegionsEUI6SX126xE17Rx2DataRateToSfBwEh>
 8011a24:	e7f7      	b.n	8011a16 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x32>
    DEBUG_MSG("INVALID RX TYPE \n");
 8011a26:	4905      	ldr	r1, [pc, #20]	; (8011a3c <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x58>)
 8011a28:	2000      	movs	r0, #0
 8011a2a:	f7f8 fcff 	bl	800a42c <SEGGER_RTT_WriteString>
}
 8011a2e:	e7f2      	b.n	8011a16 <_ZN13LoraRegionsEUI6SX126xE17RegionSetRxConfigE10eRxWinType+0x32>
 8011a30:	0000073c 	.word	0x0000073c
 8011a34:	0000073f 	.word	0x0000073f
 8011a38:	00000749 	.word	0x00000749
 8011a3c:	080189b6 	.word	0x080189b6

08011a40 <_ZN16LoraWanContainerILi16E6SX126xE11IsrTimerRx1Ev>:
template class LoraWanContainer <72, SX1276>;
template class LoraWanContainer <72, SX126x>;
template class LoraWanContainer <16, SX1272>;
template class LoraWanContainer <72, SX1272>;
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::IsrTimerRx1(void) {
  StateTimer = TIMERSTATE_SLEEP;
 8011a40:	23db      	movs	r3, #219	; 0xdb
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::IsrTimerRx1(void) {
 8011a42:	b570      	push	{r4, r5, r6, lr}
  StateTimer = TIMERSTATE_SLEEP;
 8011a44:	2500      	movs	r5, #0
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::IsrTimerRx1(void) {
 8011a46:	0004      	movs	r4, r0
  StateTimer = TIMERSTATE_SLEEP;
 8011a48:	00db      	lsls	r3, r3, #3
 8011a4a:	50c5      	str	r5, [r0, r3]
  InsertTrace(__COUNTER__, FileId);
 8011a4c:	2107      	movs	r1, #7
 8011a4e:	0028      	movs	r0, r5
 8011a50:	f000 f81c 	bl	8011a8c <_Z11InsertTracehh>
  RegionSetRxConfig(RX1);
 8011a54:	6823      	ldr	r3, [r4, #0]
 8011a56:	0029      	movs	r1, r5
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	0020      	movs	r0, r4
 8011a5c:	4798      	blx	r3
  ConfigureRadioForRx1();
 8011a5e:	0020      	movs	r0, r4
 8011a60:	f7fd f960 	bl	800ed24 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx1Ev>
};
 8011a64:	bd70      	pop	{r4, r5, r6, pc}

08011a66 <_ZN16LoraWanContainerILi16E6SX126xE11IsrTimerRx2Ev>:

template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::IsrTimerRx2(void) {
  StateTimer = TIMERSTATE_SLEEP;
 8011a66:	23db      	movs	r3, #219	; 0xdb
 8011a68:	2200      	movs	r2, #0
template <int NBCHANNEL, class R> void LoraWanContainer<NBCHANNEL, R>::IsrTimerRx2(void) {
 8011a6a:	b510      	push	{r4, lr}
 8011a6c:	0004      	movs	r4, r0
  StateTimer = TIMERSTATE_SLEEP;
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	50c2      	str	r2, [r0, r3]
  InsertTrace(__COUNTER__, FileId);
 8011a72:	2107      	movs	r1, #7
 8011a74:	2001      	movs	r0, #1
 8011a76:	f000 f809 	bl	8011a8c <_Z11InsertTracehh>
  RegionSetRxConfig(RX2);
 8011a7a:	6823      	ldr	r3, [r4, #0]
 8011a7c:	2101      	movs	r1, #1
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	0020      	movs	r0, r4
 8011a82:	4798      	blx	r3
  ConfigureRadioForRx2();
 8011a84:	0020      	movs	r0, r4
 8011a86:	f7fd f96f 	bl	800ed68 <_ZN16LoraWanContainerILi16E6SX126xE20ConfigureRadioForRx2Ev>
};
 8011a8a:	bd10      	pop	{r4, pc}

08011a8c <_Z11InsertTracehh>:
#ifdef DEBUG_TRACE_ENABLE
uint32_t ExtDebugTrace[TRACE_SIZE + 4] __attribute__((section("NoInit"), zero_init));
#endif
void InsertTrace(uint8_t id, uint8_t FileId) {
#ifdef DEBUG_TRACE_ENABLE
  ExtDebugTrace[ TRACE_SIZE - 1 ] ++;
 8011a8c:	22ff      	movs	r2, #255	; 0xff
void InsertTrace(uint8_t id, uint8_t FileId) {
 8011a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ExtDebugTrace[ TRACE_SIZE - 1 ] ++;
 8011a90:	4d0e      	ldr	r5, [pc, #56]	; (8011acc <_Z11InsertTracehh+0x40>)
 8011a92:	0092      	lsls	r2, r2, #2
 8011a94:	58ab      	ldr	r3, [r5, r2]
  TracePointer = ExtDebugTrace[ TRACE_SIZE - 1 ] & 0xff;
 8011a96:	4f0e      	ldr	r7, [pc, #56]	; (8011ad0 <_Z11InsertTracehh+0x44>)
  ExtDebugTrace[ TRACE_SIZE - 1 ] ++;
 8011a98:	3301      	adds	r3, #1
void InsertTrace(uint8_t id, uint8_t FileId) {
 8011a9a:	000c      	movs	r4, r1
 8011a9c:	0006      	movs	r6, r0
  ExtDebugTrace[ TRACE_SIZE - 1 ] ++;
 8011a9e:	50ab      	str	r3, [r5, r2]
  TracePointer = ExtDebugTrace[ TRACE_SIZE - 1 ] & 0xff;
 8011aa0:	703b      	strb	r3, [r7, #0]
  if(id > 31) {
    DEBUG_MSG("ERROR TRACE COUNTER > 31\n");
 8011aa2:	490c      	ldr	r1, [pc, #48]	; (8011ad4 <_Z11InsertTracehh+0x48>)
  if(id > 31) {
 8011aa4:	281f      	cmp	r0, #31
 8011aa6:	d802      	bhi.n	8011aae <_Z11InsertTracehh+0x22>
    return;
  }
  if(FileId > 7) {
 8011aa8:	2c07      	cmp	r4, #7
 8011aaa:	d904      	bls.n	8011ab6 <_Z11InsertTracehh+0x2a>
    DEBUG_MSG("ERROR TRACE FILE_ID > 7\n");
 8011aac:	490a      	ldr	r1, [pc, #40]	; (8011ad8 <_Z11InsertTracehh+0x4c>)
 8011aae:	2000      	movs	r0, #0
 8011ab0:	f7f8 fcbc 	bl	800a42c <SEGGER_RTT_WriteString>
    return;
  }
  ExtDebugTrace[TracePointer] = ((mcu.RtcGetTimeMs() & 0x00FFFFFF) << 8) + ((FileId & 0x7) << 5) + (id & 0x1F);
#endif
}
 8011ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ExtDebugTrace[TracePointer] = ((mcu.RtcGetTimeMs() & 0x00FFFFFF) << 8) + ((FileId & 0x7) << 5) + (id & 0x1F);
 8011ab6:	4809      	ldr	r0, [pc, #36]	; (8011adc <_Z11InsertTracehh+0x50>)
 8011ab8:	f7fc fb06 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
 8011abc:	0164      	lsls	r4, r4, #5
 8011abe:	783b      	ldrb	r3, [r7, #0]
 8011ac0:	19a4      	adds	r4, r4, r6
 8011ac2:	0200      	lsls	r0, r0, #8
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	1820      	adds	r0, r4, r0
 8011ac8:	5158      	str	r0, [r3, r5]
 8011aca:	e7f3      	b.n	8011ab4 <_Z11InsertTracehh+0x28>
 8011acc:	20000814 	.word	0x20000814
 8011ad0:	20000e91 	.word	0x20000e91
 8011ad4:	08018bd6 	.word	0x08018bd6
 8011ad8:	08018bf0 	.word	0x08018bf0
 8011adc:	20001988 	.word	0x20001988

08011ae0 <_Z5rand1v>:

static uint32_t next = 1;

int32_t rand1(void)
{
  return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8011ae0:	4b06      	ldr	r3, [pc, #24]	; (8011afc <_Z5rand1v+0x1c>)
 8011ae2:	4807      	ldr	r0, [pc, #28]	; (8011b00 <_Z5rand1v+0x20>)
 8011ae4:	681a      	ldr	r2, [r3, #0]
{
 8011ae6:	b510      	push	{r4, lr}
  return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8011ae8:	4350      	muls	r0, r2
 8011aea:	4a06      	ldr	r2, [pc, #24]	; (8011b04 <_Z5rand1v+0x24>)
 8011aec:	4906      	ldr	r1, [pc, #24]	; (8011b08 <_Z5rand1v+0x28>)
 8011aee:	1880      	adds	r0, r0, r2
 8011af0:	6018      	str	r0, [r3, #0]
 8011af2:	f7f6 fbb5 	bl	8008260 <__aeabi_uidivmod>
}
 8011af6:	0008      	movs	r0, r1
 8011af8:	bd10      	pop	{r4, pc}
 8011afa:	46c0      	nop			; (mov r8, r8)
 8011afc:	200004fc 	.word	0x200004fc
 8011b00:	41c64e6d 	.word	0x41c64e6d
 8011b04:	00003039 	.word	0x00003039
 8011b08:	7fffffff 	.word	0x7fffffff

08011b0c <_Z5randrll>:
  next = seed;
}
// Standard random functions redefinition end

int32_t randr(int32_t min, int32_t max)
{
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	0005      	movs	r5, r0
 8011b10:	000c      	movs	r4, r1
  return (int32_t)rand1() % (max - min + 1) + min;
 8011b12:	f7ff ffe5 	bl	8011ae0 <_Z5rand1v>
 8011b16:	1b61      	subs	r1, r4, r5
 8011b18:	3101      	adds	r1, #1
 8011b1a:	f7f6 fc8b 	bl	8008434 <__aeabi_idivmod>
 8011b1e:	1948      	adds	r0, r1, r5
}
 8011b20:	bd70      	pop	{r4, r5, r6, pc}

08011b22 <_Z7memcpy1PhPKht>:

void memcpy1(uint8_t *dst, const uint8_t *src, uint16_t size)
{
 8011b22:	2300      	movs	r3, #0
 8011b24:	b510      	push	{r4, lr}
  while(size--)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d003      	beq.n	8011b32 <_Z7memcpy1PhPKht+0x10>
  {
    *dst++ = *src++;
 8011b2a:	5ccc      	ldrb	r4, [r1, r3]
 8011b2c:	54c4      	strb	r4, [r0, r3]
 8011b2e:	3301      	adds	r3, #1
  while(size--)
 8011b30:	e7f9      	b.n	8011b26 <_Z7memcpy1PhPKht+0x4>
  }
}
 8011b32:	bd10      	pop	{r4, pc}

08011b34 <_Z7memset1Phht>:
  }
}

void memset1(uint8_t *dst, uint8_t value, uint16_t size)
{
  while(size--)
 8011b34:	4b04      	ldr	r3, [pc, #16]	; (8011b48 <_Z7memset1Phht+0x14>)
 8011b36:	3a01      	subs	r2, #1
 8011b38:	b292      	uxth	r2, r2
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d002      	beq.n	8011b44 <_Z7memset1Phht+0x10>
  {
    *dst++ = value;
 8011b3e:	7001      	strb	r1, [r0, #0]
 8011b40:	3001      	adds	r0, #1
  while(size--)
 8011b42:	e7f8      	b.n	8011b36 <_Z7memset1Phht+0x2>
  }
}
 8011b44:	4770      	bx	lr
 8011b46:	46c0      	nop			; (mov r8, r8)
 8011b48:	0000ffff 	.word	0x0000ffff

08011b4c <_Z5Crc64PhiPmS0_>:

#define POLY64REV     0x95AC9329AC4BC9B5
#define INITIALCRC    0xFFFFFFFFFFFFFFFF

void Crc64(uint8_t *dataIn, int size, uint32_t *crcLow, uint32_t *crcHigh)
{
 8011b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b4e:	b085      	sub	sp, #20
 8011b50:	9202      	str	r2, [sp, #8]
  int i, j;
  uint64_t crc = INITIALCRC, part;
  static int init = 0;
  static  uint64_t  CRCTable[256];

  if(!init)
 8011b52:	4a26      	ldr	r2, [pc, #152]	; (8011bec <_Z5Crc64PhiPmS0_+0xa0>)
{
 8011b54:	469c      	mov	ip, r3
  if(!init)
 8011b56:	6813      	ldr	r3, [r2, #0]
{
 8011b58:	9000      	str	r0, [sp, #0]
 8011b5a:	9101      	str	r1, [sp, #4]
  if(!init)
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d124      	bne.n	8011baa <_Z5Crc64PhiPmS0_+0x5e>
  {
    init = 1;
 8011b60:	2000      	movs	r0, #0
 8011b62:	2100      	movs	r1, #0
 8011b64:	3301      	adds	r3, #1
 8011b66:	6013      	str	r3, [r2, #0]
    for(i = 0; i < 256; i++)
    {
      part = i;
      for(j = 0; j < 8; j++)
      {
        if(part & 1) {
 8011b68:	9303      	str	r3, [sp, #12]
      part = i;
 8011b6a:	0003      	movs	r3, r0
 8011b6c:	000a      	movs	r2, r1
 8011b6e:	2408      	movs	r4, #8
          part = (part >> 1) ^ POLY64REV;
 8011b70:	4d1f      	ldr	r5, [pc, #124]	; (8011bf0 <_Z5Crc64PhiPmS0_+0xa4>)
        if(part & 1) {
 8011b72:	9e03      	ldr	r6, [sp, #12]
 8011b74:	07d7      	lsls	r7, r2, #31
 8011b76:	401e      	ands	r6, r3
 8011b78:	085b      	lsrs	r3, r3, #1
 8011b7a:	433b      	orrs	r3, r7
 8011b7c:	0852      	lsrs	r2, r2, #1
 8011b7e:	2e00      	cmp	r6, #0
 8011b80:	d002      	beq.n	8011b88 <_Z5Crc64PhiPmS0_+0x3c>
          part = (part >> 1) ^ POLY64REV;
 8011b82:	4e1c      	ldr	r6, [pc, #112]	; (8011bf4 <_Z5Crc64PhiPmS0_+0xa8>)
 8011b84:	406a      	eors	r2, r5
 8011b86:	4073      	eors	r3, r6
 8011b88:	3c01      	subs	r4, #1
      for(j = 0; j < 8; j++)
 8011b8a:	2c00      	cmp	r4, #0
 8011b8c:	d1f1      	bne.n	8011b72 <_Z5Crc64PhiPmS0_+0x26>
        }
        else {
          part >>= 1;
        }
      }
      CRCTable[i] = part;
 8011b8e:	4d1a      	ldr	r5, [pc, #104]	; (8011bf8 <_Z5Crc64PhiPmS0_+0xac>)
 8011b90:	00c4      	lsls	r4, r0, #3
 8011b92:	1964      	adds	r4, r4, r5
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	6062      	str	r2, [r4, #4]
 8011b98:	2301      	movs	r3, #1
 8011b9a:	2400      	movs	r4, #0
 8011b9c:	18c0      	adds	r0, r0, r3
 8011b9e:	4161      	adcs	r1, r4
    for(i = 0; i < 256; i++)
 8011ba0:	33ff      	adds	r3, #255	; 0xff
 8011ba2:	4298      	cmp	r0, r3
 8011ba4:	d1e1      	bne.n	8011b6a <_Z5Crc64PhiPmS0_+0x1e>
 8011ba6:	2900      	cmp	r1, #0
 8011ba8:	d1df      	bne.n	8011b6a <_Z5Crc64PhiPmS0_+0x1e>
  uint64_t crc = INITIALCRC, part;
 8011baa:	2301      	movs	r3, #1
 8011bac:	425b      	negs	r3, r3
 8011bae:	001a      	movs	r2, r3
    }
  }

  for(i = 0; i < size; i++)
  {
    crc = CRCTable[(crc ^ *dataIn++) & 0xff] ^ (crc >> 8);
 8011bb0:	27ff      	movs	r7, #255	; 0xff
      part = i;
 8011bb2:	9900      	ldr	r1, [sp, #0]
    crc = CRCTable[(crc ^ *dataIn++) & 0xff] ^ (crc >> 8);
 8011bb4:	4e10      	ldr	r6, [pc, #64]	; (8011bf8 <_Z5Crc64PhiPmS0_+0xac>)
  for(i = 0; i < size; i++)
 8011bb6:	9800      	ldr	r0, [sp, #0]
 8011bb8:	9c01      	ldr	r4, [sp, #4]
 8011bba:	1a08      	subs	r0, r1, r0
 8011bbc:	4284      	cmp	r4, r0
 8011bbe:	dd0e      	ble.n	8011bde <_Z5Crc64PhiPmS0_+0x92>
    crc = CRCTable[(crc ^ *dataIn++) & 0xff] ^ (crc >> 8);
 8011bc0:	7808      	ldrb	r0, [r1, #0]
 8011bc2:	0615      	lsls	r5, r2, #24
 8011bc4:	4058      	eors	r0, r3
 8011bc6:	4038      	ands	r0, r7
 8011bc8:	00c0      	lsls	r0, r0, #3
 8011bca:	1830      	adds	r0, r6, r0
 8011bcc:	6804      	ldr	r4, [r0, #0]
 8011bce:	0a1b      	lsrs	r3, r3, #8
 8011bd0:	6840      	ldr	r0, [r0, #4]
 8011bd2:	432b      	orrs	r3, r5
 8011bd4:	0a12      	lsrs	r2, r2, #8
 8011bd6:	4063      	eors	r3, r4
 8011bd8:	4042      	eors	r2, r0
 8011bda:	3101      	adds	r1, #1
  for(i = 0; i < size; i++)
 8011bdc:	e7eb      	b.n	8011bb6 <_Z5Crc64PhiPmS0_+0x6a>
  }
  /*
  The output is done in two parts to avoid problems with
  architecture-dependent word order
  */
  *crcLow = crc & 0xffffffff;
 8011bde:	9902      	ldr	r1, [sp, #8]
 8011be0:	600b      	str	r3, [r1, #0]
  *crcHigh = (crc >> 32) & 0xffffffff;
 8011be2:	4663      	mov	r3, ip
 8011be4:	601a      	str	r2, [r3, #0]
}
 8011be6:	b005      	add	sp, #20
 8011be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bea:	46c0      	nop			; (mov r8, r8)
 8011bec:	20000e94 	.word	0x20000e94
 8011bf0:	95ac9329 	.word	0x95ac9329
 8011bf4:	ac4bc9b5 	.word	0xac4bc9b5
 8011bf8:	20000e98 	.word	0x20000e98

08011bfc <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8011bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8011bfe:	2508      	movs	r5, #8
 8011c00:	2100      	movs	r1, #0
 8011c02:	002a      	movs	r2, r5
 8011c04:	4668      	mov	r0, sp
 8011c06:	f003 fd69 	bl	80156dc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8011c0a:	4c19      	ldr	r4, [pc, #100]	; (8011c70 <MX_ADC_Init+0x74>)
 8011c0c:	4b19      	ldr	r3, [pc, #100]	; (8011c74 <MX_ADC_Init+0x78>)
  hadc.Init.OversamplingMode = DISABLE;
 8011c0e:	2200      	movs	r2, #0
  hadc.Instance = ADC1;
 8011c10:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011c12:	2380      	movs	r3, #128	; 0x80
 8011c14:	061b      	lsls	r3, r3, #24
 8011c16:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8011c18:	2307      	movs	r3, #7
 8011c1a:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8011c1c:	3b06      	subs	r3, #6
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = ENABLE;
 8011c1e:	18e1      	adds	r1, r4, r3
 8011c20:	77cb      	strb	r3, [r1, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8011c22:	1ca1      	adds	r1, r4, #2
  hadc.Init.OversamplingMode = DISABLE;
 8011c24:	63e2      	str	r2, [r4, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8011c26:	60a2      	str	r2, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011c28:	60e2      	str	r2, [r4, #12]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8011c2a:	77ca      	strb	r2, [r1, #31]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011c2c:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011c2e:	22c2      	movs	r2, #194	; 0xc2
 8011c30:	32ff      	adds	r2, #255	; 0xff
 8011c32:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8011c34:	6165      	str	r5, [r4, #20]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8011c36:	0022      	movs	r2, r4
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8011c38:	2580      	movs	r5, #128	; 0x80
  hadc.Init.DMAContinuousRequests = ENABLE;
 8011c3a:	322c      	adds	r2, #44	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8011c3c:	016d      	lsls	r5, r5, #5
  hadc.Init.LowPowerAutoWait = ENABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8011c3e:	0020      	movs	r0, r4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8011c40:	6123      	str	r3, [r4, #16]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8011c42:	7013      	strb	r3, [r2, #0]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8011c44:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = ENABLE;
 8011c46:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8011c48:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8011c4a:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8011c4c:	f7f9 f9f6 	bl	800b03c <HAL_ADC_Init>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d001      	beq.n	8011c58 <MX_ADC_Init+0x5c>
  {
    Error_Handler();
 8011c54:	f001 f892 	bl	8012d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8011c58:	4b07      	ldr	r3, [pc, #28]	; (8011c78 <MX_ADC_Init+0x7c>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8011c5a:	4669      	mov	r1, sp
 8011c5c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8011c5e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8011c60:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8011c62:	f7f9 fb95 	bl	800b390 <HAL_ADC_ConfigChannel>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d001      	beq.n	8011c6e <MX_ADC_Init+0x72>
  {
    Error_Handler();
 8011c6a:	f001 f887 	bl	8012d7c <Error_Handler>
  }

}
 8011c6e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8011c70:	20001854 	.word	0x20001854
 8011c74:	40012400 	.word	0x40012400
 8011c78:	44020000 	.word	0x44020000

08011c7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 8011c7c:	4b13      	ldr	r3, [pc, #76]	; (8011ccc <HAL_ADC_MspInit+0x50>)
 8011c7e:	6802      	ldr	r2, [r0, #0]
{
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	0005      	movs	r5, r0
  if(adcHandle->Instance==ADC1)
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d11f      	bne.n	8011cc8 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011c88:	2380      	movs	r3, #128	; 0x80
 8011c8a:	4a11      	ldr	r2, [pc, #68]	; (8011cd0 <HAL_ADC_MspInit+0x54>)
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	6b51      	ldr	r1, [r2, #52]	; 0x34

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8011c90:	4c10      	ldr	r4, [pc, #64]	; (8011cd4 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011c92:	430b      	orrs	r3, r1
 8011c94:	6353      	str	r3, [r2, #52]	; 0x34
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8011c96:	2280      	movs	r2, #128	; 0x80
 8011c98:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011c9a:	1892      	adds	r2, r2, r2
 8011c9c:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011c9e:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8011ca0:	4b0d      	ldr	r3, [pc, #52]	; (8011cd8 <HAL_ADC_MspInit+0x5c>)
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011ca2:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8011ca4:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011ca6:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8011ca8:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8011caa:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8011cac:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8011cae:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011cb0:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8011cb2:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8011cb4:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8011cb6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8011cb8:	f7f9 fc7a 	bl	800b5b0 <HAL_DMA_Init>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d001      	beq.n	8011cc4 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8011cc0:	f001 f85c 	bl	8012d7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8011cc4:	64ec      	str	r4, [r5, #76]	; 0x4c
 8011cc6:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8011cc8:	bd70      	pop	{r4, r5, r6, pc}
 8011cca:	46c0      	nop			; (mov r8, r8)
 8011ccc:	40012400 	.word	0x40012400
 8011cd0:	40021000 	.word	0x40021000
 8011cd4:	20001b3c 	.word	0x20001b3c
 8011cd8:	40020008 	.word	0x40020008

08011cdc <hal_delay_ms>:

void atca_delay_10us(uint32_t delay) {
  HAL_Delay(delay / 100);
}

void atca_delay_ms(uint32_t delay) {
 8011cdc:	b510      	push	{r4, lr}
  HAL_Delay(delay);
 8011cde:	f7f9 f8ef 	bl	800aec0 <HAL_Delay>
}
 8011ce2:	bd10      	pop	{r4, pc}

08011ce4 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 8011ce4:	b570      	push	{r4, r5, r6, lr}
    if (mbed_i2c_hal_first_init) {
 8011ce6:	4e15      	ldr	r6, [pc, #84]	; (8011d3c <hal_i2c_init+0x58>)
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 8011ce8:	0005      	movs	r5, r0
    if (mbed_i2c_hal_first_init) {
 8011cea:	7833      	ldrb	r3, [r6, #0]
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg) {
 8011cec:	000c      	movs	r4, r1
    if (mbed_i2c_hal_first_init) {
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d006      	beq.n	8011d00 <hal_i2c_init+0x1c>
       // mbed_i2c = new I2C(MBED_CONF_CRYPTOAUTHLIB_I2C_SDA, MBED_CONF_CRYPTOAUTHLIB_I2C_SCL);
    	HAL_I2C_MspInit(&hi2c1);
 8011cf2:	4813      	ldr	r0, [pc, #76]	; (8011d40 <hal_i2c_init+0x5c>)
 8011cf4:	f000 fbf4 	bl	80124e0 <HAL_I2C_MspInit>
        for (size_t ix = 0; ix < ATAC_HAL_MBED_MAX_I2C; ix++) {
            mbed_i2c_hal_data[ix].active = false;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4a12      	ldr	r2, [pc, #72]	; (8011d44 <hal_i2c_init+0x60>)
        }
        mbed_i2c_hal_first_init = false;
 8011cfc:	7033      	strb	r3, [r6, #0]
            mbed_i2c_hal_data[ix].active = false;
 8011cfe:	7013      	strb	r3, [r2, #0]
    }

    if (cfg->iface_type != ATCA_I2C_IFACE) {
 8011d00:	7826      	ldrb	r6, [r4, #0]
        return ATCA_BAD_PARAM;
 8011d02:	20e2      	movs	r0, #226	; 0xe2
    if (cfg->iface_type != ATCA_I2C_IFACE) {
 8011d04:	2e00      	cmp	r6, #0
 8011d06:	d108      	bne.n	8011d1a <hal_i2c_init+0x36>
    }

    // OK... Let's find an unused item...
    mbed_i2c_hal_data_t *hal_data = NULL;
    for (size_t ix = 0; ix < ATAC_HAL_MBED_MAX_I2C; ix++) {
        if (!mbed_i2c_hal_data[ix].active) {
 8011d08:	4b0e      	ldr	r3, [pc, #56]	; (8011d44 <hal_i2c_init+0x60>)
 8011d0a:	7818      	ldrb	r0, [r3, #0]
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d005      	beq.n	8011d1c <hal_i2c_init+0x38>
            break;
        }
    }

    if (!hal_data) {
    	DBG_PRINTF("Could not find unallocated mbed_i2c_hal_data_t structure");
 8011d10:	490d      	ldr	r1, [pc, #52]	; (8011d48 <hal_i2c_init+0x64>)
 8011d12:	0030      	movs	r0, r6
 8011d14:	f7f8 fd4a 	bl	800a7ac <SEGGER_RTT_printf>
        return ATCA_ALLOC_FAILURE;
 8011d18:	20fb      	movs	r0, #251	; 0xfb
    hal_data->i2c = I2C1;

    ((ATCAHAL_t*)hal)->hal_data = hal_data;

    return ATCA_SUCCESS;
}
 8011d1a:	bd70      	pop	{r4, r5, r6, pc}
    hal_data->active = true;
 8011d1c:	2101      	movs	r1, #1
 8011d1e:	7019      	strb	r1, [r3, #0]
	hal_data->slave_address = cfg->atcai2c.slave_address;
 8011d20:	7921      	ldrb	r1, [r4, #4]
    hal_data->baud = cfg->atcai2c.baud;
 8011d22:	68a2      	ldr	r2, [r4, #8]
	hal_data->slave_address = cfg->atcai2c.slave_address;
 8011d24:	7059      	strb	r1, [r3, #1]
    hal_data->bus = cfg->atcai2c.bus;
 8011d26:	7961      	ldrb	r1, [r4, #5]
    hal_data->baud = cfg->atcai2c.baud;
 8011d28:	605a      	str	r2, [r3, #4]
    hal_data->bus = cfg->atcai2c.bus;
 8011d2a:	7099      	strb	r1, [r3, #2]
    hal_data->wake_delay = cfg->wake_delay;
 8011d2c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    hal_data->rx_retries = cfg->rx_retries;
 8011d2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hal_data->wake_delay = cfg->wake_delay;
 8011d30:	8119      	strh	r1, [r3, #8]
    hal_data->i2c = I2C1;
 8011d32:	4906      	ldr	r1, [pc, #24]	; (8011d4c <hal_i2c_init+0x68>)
    hal_data->rx_retries = cfg->rx_retries;
 8011d34:	60da      	str	r2, [r3, #12]
    hal_data->i2c = I2C1;
 8011d36:	6119      	str	r1, [r3, #16]
    ((ATCAHAL_t*)hal)->hal_data = hal_data;
 8011d38:	622b      	str	r3, [r5, #32]
    return ATCA_SUCCESS;
 8011d3a:	e7ee      	b.n	8011d1a <hal_i2c_init+0x36>
 8011d3c:	20000500 	.word	0x20000500
 8011d40:	20001ad4 	.word	0x20001ad4
 8011d44:	20001698 	.word	0x20001698
 8011d48:	08018c09 	.word	0x08018c09
 8011d4c:	40005400 	.word	0x40005400

08011d50 <hal_i2c_post_init>:

ATCA_STATUS hal_i2c_post_init(ATCAIface iface) {
  return ATCA_SUCCESS;
}
 8011d50:	2000      	movs	r0, #0
 8011d52:	4770      	bx	lr

08011d54 <hal_i2c_send>:
 * \param[in] iface     instance
 * \param[in] txdata    pointer to space to bytes to send
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t word_address, uint8_t *txdata, int txlength) {
 8011d54:	b507      	push	{r0, r1, r2, lr}
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x3;    // insert the Word Address Value, Command token
 8011d56:	2103      	movs	r1, #3
    txlength++;         // account for word address value byte.
 8011d58:	3301      	adds	r3, #1
    txdata[0] = 0x3;    // insert the Word Address Value, Command token
 8011d5a:	7011      	strb	r1, [r2, #0]

//    int r = hal_data->i2c->write(hal_data->slave_address, (char*)txdata, txlength);
      int r;
    r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, txdata, txlength, 100);
 8011d5c:	3161      	adds	r1, #97	; 0x61
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	9100      	str	r1, [sp, #0]
 8011d62:	4805      	ldr	r0, [pc, #20]	; (8011d78 <hal_i2c_send+0x24>)
 8011d64:	315c      	adds	r1, #92	; 0x5c
 8011d66:	f7fa f8fd 	bl	800bf64 <HAL_I2C_Master_Transmit>
//    DBG_PRINTF("hal_i2c_send returned %x", r);
    if (r != 0) {
        return ATCA_TX_FAIL;
 8011d6a:	23f7      	movs	r3, #247	; 0xf7
    if (r != 0) {
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d100      	bne.n	8011d72 <hal_i2c_send+0x1e>
    }
    return ATCA_SUCCESS;
 8011d70:	0003      	movs	r3, r0
}
 8011d72:	0018      	movs	r0, r3
 8011d74:	bd0e      	pop	{r1, r2, r3, pc}
 8011d76:	46c0      	nop			; (mov r8, r8)
 8011d78:	20001ad4 	.word	0x20001ad4

08011d7c <hal_i2c_receive>:

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 8011d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d7e:	b087      	sub	sp, #28
    mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);
 8011d80:	6a46      	ldr	r6, [r0, #36]	; 0x24
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 8011d82:	9302      	str	r3, [sp, #8]
    // read procedure is:
    // 1. read 1 byte, this will be the length of the package
    // 2. read the rest of the package

    uint8_t lengthPackage[1] = { 0 };
    int r = -1;
 8011d84:	2001      	movs	r0, #1
    uint8_t lengthPackage[1] = { 0 };
 8011d86:	2300      	movs	r3, #0
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength) {
 8011d88:	0015      	movs	r5, r2
    uint8_t lengthPackage[1] = { 0 };
 8011d8a:	ac05      	add	r4, sp, #20
    int retries = hal_data->rx_retries;
 8011d8c:	68f7      	ldr	r7, [r6, #12]
    uint8_t lengthPackage[1] = { 0 };
 8011d8e:	7023      	strb	r3, [r4, #0]
    int r = -1;
 8011d90:	4240      	negs	r0, r0
    while (--retries > 0 && r != 0) {
 8011d92:	3f01      	subs	r7, #1
 8011d94:	2f00      	cmp	r7, #0
 8011d96:	dd1a      	ble.n	8011dce <hal_i2c_receive+0x52>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d10f      	bne.n	8011dbc <hal_i2c_receive+0x40>

    if (r != 0) {
        return ATCA_RX_TIMEOUT;
    }

    uint8_t bytesToRead = lengthPackage[0] - 1;
 8011d9c:	7827      	ldrb	r7, [r4, #0]
 8011d9e:	1e7a      	subs	r2, r7, #1
 8011da0:	b2d2      	uxtb	r2, r2

    if (bytesToRead > *rxlength) {
 8011da2:	b293      	uxth	r3, r2
 8011da4:	9303      	str	r3, [sp, #12]
 8011da6:	9b02      	ldr	r3, [sp, #8]
 8011da8:	b291      	uxth	r1, r2
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	4299      	cmp	r1, r3
 8011dae:	d913      	bls.n	8011dd8 <hal_i2c_receive+0x5c>
    	DBG_PRINTF("hal_i2c_receive buffer too small, requested %u, but have %u", bytesToRead, *rxlength);
 8011db0:	4919      	ldr	r1, [pc, #100]	; (8011e18 <hal_i2c_receive+0x9c>)
 8011db2:	2000      	movs	r0, #0
 8011db4:	f7f8 fcfa 	bl	800a7ac <SEGGER_RTT_printf>
        return ATCA_SMALL_BUFFER;
 8011db8:	20ed      	movs	r0, #237	; 0xed
 8011dba:	e00b      	b.n	8011dd4 <hal_i2c_receive+0x58>
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, lengthPackage, 1, 100);
 8011dbc:	2364      	movs	r3, #100	; 0x64
 8011dbe:	0022      	movs	r2, r4
 8011dc0:	9300      	str	r3, [sp, #0]
 8011dc2:	21c0      	movs	r1, #192	; 0xc0
 8011dc4:	3b63      	subs	r3, #99	; 0x63
 8011dc6:	4815      	ldr	r0, [pc, #84]	; (8011e1c <hal_i2c_receive+0xa0>)
 8011dc8:	f7fa f962 	bl	800c090 <HAL_I2C_Master_Receive>
 8011dcc:	e7e1      	b.n	8011d92 <hal_i2c_receive+0x16>
    if (r != 0) {
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	d0e4      	beq.n	8011d9c <hal_i2c_receive+0x20>
        return ATCA_RX_TIMEOUT;
 8011dd2:	20eb      	movs	r0, #235	; 0xeb
    }

    *rxlength = lengthPackage[0];

    return ATCA_SUCCESS;
}
 8011dd4:	b007      	add	sp, #28
 8011dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(rxdata, 0, *rxlength);
 8011dd8:	001a      	movs	r2, r3
 8011dda:	2100      	movs	r1, #0
 8011ddc:	0028      	movs	r0, r5
 8011dde:	f003 fc7d 	bl	80156dc <memset>
    r = -1;
 8011de2:	2001      	movs	r0, #1
    rxdata[0] = lengthPackage[0];
 8011de4:	702f      	strb	r7, [r5, #0]
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, rxdata+1, bytesToRead, 100);
 8011de6:	2764      	movs	r7, #100	; 0x64
    retries = hal_data->rx_retries;
 8011de8:	68f6      	ldr	r6, [r6, #12]
    r = -1;
 8011dea:	4240      	negs	r0, r0
    while (--retries > 0 && r != 0) {
 8011dec:	3e01      	subs	r6, #1
 8011dee:	2e00      	cmp	r6, #0
 8011df0:	dd0e      	ble.n	8011e10 <hal_i2c_receive+0x94>
 8011df2:	2800      	cmp	r0, #0
 8011df4:	d104      	bne.n	8011e00 <hal_i2c_receive+0x84>
    *rxlength = lengthPackage[0];
 8011df6:	7823      	ldrb	r3, [r4, #0]
 8011df8:	9a02      	ldr	r2, [sp, #8]
    return ATCA_SUCCESS;
 8011dfa:	2000      	movs	r0, #0
    *rxlength = lengthPackage[0];
 8011dfc:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
 8011dfe:	e7e9      	b.n	8011dd4 <hal_i2c_receive+0x58>
    	r = HAL_I2C_Master_Receive(&hi2c1, 0xC0, rxdata+1, bytesToRead, 100);
 8011e00:	1c6a      	adds	r2, r5, #1
 8011e02:	9700      	str	r7, [sp, #0]
 8011e04:	9b03      	ldr	r3, [sp, #12]
 8011e06:	21c0      	movs	r1, #192	; 0xc0
 8011e08:	4804      	ldr	r0, [pc, #16]	; (8011e1c <hal_i2c_receive+0xa0>)
 8011e0a:	f7fa f941 	bl	800c090 <HAL_I2C_Master_Receive>
 8011e0e:	e7ed      	b.n	8011dec <hal_i2c_receive+0x70>
    if (r != 0) {
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d1de      	bne.n	8011dd2 <hal_i2c_receive+0x56>
 8011e14:	e7ef      	b.n	8011df6 <hal_i2c_receive+0x7a>
 8011e16:	46c0      	nop			; (mov r8, r8)
 8011e18:	08018c42 	.word	0x08018c42
 8011e1c:	20001ad4 	.word	0x20001ad4

08011e20 <hal_i2c_wake>:


ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
 8011e20:	b507      	push	{r0, r1, r2, lr}
   HAL_I2C_Master_Transmit(&hi2c1, 0x00, 0x00, 1, 100);
 8011e22:	2364      	movs	r3, #100	; 0x64
 8011e24:	2200      	movs	r2, #0
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	0011      	movs	r1, r2
 8011e2a:	3b63      	subs	r3, #99	; 0x63
 8011e2c:	4802      	ldr	r0, [pc, #8]	; (8011e38 <hal_i2c_wake+0x18>)
 8011e2e:	f7fa f899 	bl	800bf64 <HAL_I2C_Master_Transmit>
   return ATCA_SUCCESS;
}
 8011e32:	2000      	movs	r0, #0
 8011e34:	bd0e      	pop	{r1, r2, r3, pc}
 8011e36:	46c0      	nop			; (mov r8, r8)
 8011e38:	20001ad4 	.word	0x20001ad4

08011e3c <hal_i2c_idle>:

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
 8011e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);

	 uint8_t buffer[1] = { 0x2 }; // idle word address value
 8011e3e:	2302      	movs	r3, #2
 8011e40:	aa03      	add	r2, sp, #12
 8011e42:	7013      	strb	r3, [r2, #0]
	 HAL_StatusTypeDef r;
     r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 8011e44:	3362      	adds	r3, #98	; 0x62
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	21c0      	movs	r1, #192	; 0xc0
 8011e4a:	3b63      	subs	r3, #99	; 0x63
 8011e4c:	4802      	ldr	r0, [pc, #8]	; (8011e58 <hal_i2c_idle+0x1c>)
 8011e4e:	f7fa f889 	bl	800bf64 <HAL_I2C_Master_Transmit>

    return ATCA_SUCCESS;
}
 8011e52:	2000      	movs	r0, #0
 8011e54:	b005      	add	sp, #20
 8011e56:	bd00      	pop	{pc}
 8011e58:	20001ad4 	.word	0x20001ad4

08011e5c <hal_i2c_sleep>:

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
 8011e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	mbed_i2c_hal_data_t *hal_data = (mbed_i2c_hal_data_t*)(iface->hal_data);

	uint8_t buffer[1] = { 0x1 };  // sleep word address value
 8011e5e:	2301      	movs	r3, #1
	HAL_StatusTypeDef r;
	r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 8011e60:	2164      	movs	r1, #100	; 0x64
	uint8_t buffer[1] = { 0x1 };  // sleep word address value
 8011e62:	aa03      	add	r2, sp, #12
 8011e64:	7013      	strb	r3, [r2, #0]
	r = HAL_I2C_Master_Transmit(&hi2c1, 0xC0, buffer, 1, 100);
 8011e66:	4804      	ldr	r0, [pc, #16]	; (8011e78 <hal_i2c_sleep+0x1c>)
 8011e68:	9100      	str	r1, [sp, #0]
 8011e6a:	315c      	adds	r1, #92	; 0x5c
 8011e6c:	f7fa f87a 	bl	800bf64 <HAL_I2C_Master_Transmit>

    return ATCA_SUCCESS;
}
 8011e70:	2000      	movs	r0, #0
 8011e72:	b005      	add	sp, #20
 8011e74:	bd00      	pop	{pc}
 8011e76:	46c0      	nop			; (mov r8, r8)
 8011e78:	20001ad4 	.word	0x20001ad4

08011e7c <hal_i2c_release>:
	mbed_i2c_hal_data_t *data = (mbed_i2c_hal_data_t*)hal_data;

	    if (data->i2c) {
	        // is now static, don't delete
	    }
	    data->active = false;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	7003      	strb	r3, [r0, #0]

    return ATCA_SUCCESS;
}
 8011e80:	0018      	movs	r0, r3
 8011e82:	4770      	bx	lr

08011e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8011e84:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011e86:	2001      	movs	r0, #1
 8011e88:	4a0c      	ldr	r2, [pc, #48]	; (8011ebc <MX_DMA_Init+0x38>)
 8011e8a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011e8c:	4301      	orrs	r1, r0
 8011e8e:	6311      	str	r1, [r2, #48]	; 0x30
 8011e90:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8011e92:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011e94:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8011e96:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011e98:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8011e9a:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011e9c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8011e9e:	f7f9 fb1b 	bl	800b4d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8011ea2:	2009      	movs	r0, #9
 8011ea4:	f7f9 fb42 	bl	800b52c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	200a      	movs	r0, #10
 8011eac:	0011      	movs	r1, r2
 8011eae:	f7f9 fb13 	bl	800b4d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8011eb2:	200a      	movs	r0, #10
 8011eb4:	f7f9 fb3a 	bl	800b52c <HAL_NVIC_EnableIRQ>

}
 8011eb8:	bd07      	pop	{r0, r1, r2, pc}
 8011eba:	46c0      	nop			; (mov r8, r8)
 8011ebc:	40021000 	.word	0x40021000

08011ec0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8011ec0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ec2:	2404      	movs	r4, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ec4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ec6:	2702      	movs	r7, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8011ec8:	26a0      	movs	r6, #160	; 0xa0
{
 8011eca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ecc:	2214      	movs	r2, #20
 8011ece:	2100      	movs	r1, #0
 8011ed0:	a803      	add	r0, sp, #12
 8011ed2:	f003 fc03 	bl	80156dc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ed6:	4b4f      	ldr	r3, [pc, #316]	; (8012014 <MX_GPIO_Init+0x154>)
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8011ed8:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8011edc:	0030      	movs	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ede:	4322      	orrs	r2, r4
 8011ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 8011ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8011ee4:	494c      	ldr	r1, [pc, #304]	; (8012018 <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ee6:	4022      	ands	r2, r4
 8011ee8:	9200      	str	r2, [sp, #0]
 8011eea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eee:	432a      	orrs	r2, r5
 8011ef0:	62da      	str	r2, [r3, #44]	; 0x2c
 8011ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef4:	402a      	ands	r2, r5
 8011ef6:	9201      	str	r2, [sp, #4]
 8011ef8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011efc:	433a      	orrs	r2, r7
 8011efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8011f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8011f02:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f04:	403b      	ands	r3, r7
 8011f06:	9302      	str	r3, [sp, #8]
 8011f08:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RF_Switch_Pin|SX126x_SPI_NSS_Pin|DC_Conv_Mode_Pin|SX126x_DIO3_Pin, GPIO_PIN_RESET);
 8011f0a:	f7f9 fe21 	bl	800bb50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SX126x_Reset_Pin, GPIO_PIN_RESET);
 8011f0e:	2200      	movs	r2, #0
 8011f10:	2113      	movs	r1, #19
 8011f12:	4842      	ldr	r0, [pc, #264]	; (801201c <MX_GPIO_Init+0x15c>)
 8011f14:	f7f9 fe1c 	bl	800bb50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8011f18:	4b41      	ldr	r3, [pc, #260]	; (8012020 <MX_GPIO_Init+0x160>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 8011f1a:	a903      	add	r1, sp, #12
 8011f1c:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8011f1e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Button0_Pin;
 8011f20:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f22:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 8011f24:	f7f9 fd4e 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_Int_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8011f28:	4b3e      	ldr	r3, [pc, #248]	; (8012024 <MX_GPIO_Init+0x164>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(NFC_Int_GPIO_Port, &GPIO_InitStruct);
 8011f2a:	a903      	add	r1, sp, #12
 8011f2c:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8011f2e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = NFC_Int_Pin;
 8011f30:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011f32:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(NFC_Int_GPIO_Port, &GPIO_InitStruct);
 8011f34:	f7f9 fd46 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_Switch_Pin;
 8011f38:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f3a:	2400      	movs	r4, #0
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 8011f3c:	a903      	add	r1, sp, #12
 8011f3e:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f40:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f42:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f44:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RF_Switch_GPIO_Port, &GPIO_InitStruct);
 8011f46:	f7f9 fd3d 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TEMP_Int_Pin|Reed_Switch_Pin;
 8011f4a:	2382      	movs	r3, #130	; 0x82
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011f50:	4b35      	ldr	r3, [pc, #212]	; (8012028 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f52:	a903      	add	r1, sp, #12
 8011f54:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011f56:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f58:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f5a:	f7f9 fd33 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
 8011f5e:	4b33      	ldr	r3, [pc, #204]	; (801202c <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f60:	a903      	add	r1, sp, #12
 8011f62:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SX126x_SPI_NSS_Pin|SX126x_DIO3_Pin;
 8011f64:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f66:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f68:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f6a:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f6c:	f7f9 fd2a 	bl	800b9c4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8011f70:	a903      	add	r1, sp, #12
 8011f72:	482a      	ldr	r0, [pc, #168]	; (801201c <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pin = LED_1_Pin;
 8011f74:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f76:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f78:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f7a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8011f7c:	f7f9 fd22 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_2_Pin|SX126x_Reset_Pin;
 8011f80:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f82:	a903      	add	r1, sp, #12
 8011f84:	4825      	ldr	r0, [pc, #148]	; (801201c <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pin = LED_2_Pin|SX126x_Reset_Pin;
 8011f86:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f88:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f8a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f8c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f8e:	f7f9 fd19 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 8011f92:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 8011f94:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 8011f96:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 8011f98:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = DC_Conv_Mode_Pin;
 8011f9a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f9c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fa0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DC_Conv_Mode_GPIO_Port, &GPIO_InitStruct);
 8011fa2:	f7f9 fd0f 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIGHT_Int_Pin;
 8011fa6:	2380      	movs	r3, #128	; 0x80
 8011fa8:	00db      	lsls	r3, r3, #3
 8011faa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011fac:	4b1e      	ldr	r3, [pc, #120]	; (8012028 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(LIGHT_Int_GPIO_Port, &GPIO_InitStruct);
 8011fae:	a903      	add	r1, sp, #12
 8011fb0:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011fb2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011fb4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(LIGHT_Int_GPIO_Port, &GPIO_InitStruct);
 8011fb6:	f7f9 fd05 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 8011fba:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 8011fbc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 8011fbe:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 8011fc0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SX126x_Busy_Pin;
 8011fc2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011fc4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011fc6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SX126x_Busy_GPIO_Port, &GPIO_InitStruct);
 8011fc8:	f7f9 fcfc 	bl	800b9c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX126x_DIO1_Pin;
 8011fcc:	2320      	movs	r3, #32
 8011fce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011fd0:	4b15      	ldr	r3, [pc, #84]	; (8012028 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 8011fd2:	a903      	add	r1, sp, #12
 8011fd4:	4811      	ldr	r0, [pc, #68]	; (801201c <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011fd6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fd8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SX126x_DIO1_GPIO_Port, &GPIO_InitStruct);
 8011fda:	f7f9 fcf3 	bl	800b9c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 8011fde:	0022      	movs	r2, r4
 8011fe0:	0039      	movs	r1, r7
 8011fe2:	2005      	movs	r0, #5
 8011fe4:	f7f9 fa78 	bl	800b4d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8011fe8:	2005      	movs	r0, #5
 8011fea:	f7f9 fa9f 	bl	800b52c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8011fee:	0022      	movs	r2, r4
 8011ff0:	0021      	movs	r1, r4
 8011ff2:	2006      	movs	r0, #6
 8011ff4:	f7f9 fa70 	bl	800b4d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8011ff8:	2006      	movs	r0, #6
 8011ffa:	f7f9 fa97 	bl	800b52c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8011ffe:	0022      	movs	r2, r4
 8012000:	0021      	movs	r1, r4
 8012002:	2007      	movs	r0, #7
 8012004:	f7f9 fa68 	bl	800b4d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8012008:	2007      	movs	r0, #7
 801200a:	f7f9 fa8f 	bl	800b52c <HAL_NVIC_EnableIRQ>

}
 801200e:	b009      	add	sp, #36	; 0x24
 8012010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012012:	46c0      	nop			; (mov r8, r8)
 8012014:	40021000 	.word	0x40021000
 8012018:	00001114 	.word	0x00001114
 801201c:	50000400 	.word	0x50000400
 8012020:	10310000 	.word	0x10310000
 8012024:	10210000 	.word	0x10210000
 8012028:	10110000 	.word	0x10110000
 801202c:	00001010 	.word	0x00001010

08012030 <LEDBlinkTask>:
    HAL_Delay(1000);
  }
}

void LEDBlinkTask(void* info) {
  uint8_t allowButton = (uint32_t) info >> 0 & 0x1;
 8012030:	2301      	movs	r3, #1
void LEDBlinkTask(void* info) {
 8012032:	b570      	push	{r4, r5, r6, lr}
 8012034:	4c0b      	ldr	r4, [pc, #44]	; (8012064 <LEDBlinkTask+0x34>)
  uint8_t useGreenColor = (uint32_t) info >> 1 & 0x1;
 8012036:	0842      	lsrs	r2, r0, #1
  uint8_t useRedColor = (uint32_t) info >> 2 & 0x1;
 8012038:	0885      	lsrs	r5, r0, #2

  if (allowButton) {
    SET_BIT(EXTI->IMR, EXTI_IMR_IM0);
 801203a:	6821      	ldr	r1, [r4, #0]
  if (allowButton) {
 801203c:	4218      	tst	r0, r3
 801203e:	d00e      	beq.n	801205e <LEDBlinkTask+0x2e>
    SET_BIT(EXTI->IMR, EXTI_IMR_IM0);
 8012040:	430b      	orrs	r3, r1
 8012042:	6023      	str	r3, [r4, #0]
  } else {
    CLEAR_BIT(EXTI->IMR, EXTI_IMR_IM0);
  }

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, useGreenColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8012044:	2401      	movs	r4, #1
 8012046:	4808      	ldr	r0, [pc, #32]	; (8012068 <LEDBlinkTask+0x38>)
 8012048:	4022      	ands	r2, r4
 801204a:	0021      	movs	r1, r4
 801204c:	f7f9 fd80 	bl	800bb50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, useRedColor ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8012050:	002a      	movs	r2, r5
 8012052:	2102      	movs	r1, #2
 8012054:	4022      	ands	r2, r4
 8012056:	4804      	ldr	r0, [pc, #16]	; (8012068 <LEDBlinkTask+0x38>)
 8012058:	f7f9 fd7a 	bl	800bb50 <HAL_GPIO_WritePin>
}
 801205c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(EXTI->IMR, EXTI_IMR_IM0);
 801205e:	4399      	bics	r1, r3
 8012060:	6021      	str	r1, [r4, #0]
 8012062:	e7ef      	b.n	8012044 <LEDBlinkTask+0x14>
 8012064:	40010400 	.word	0x40010400
 8012068:	50000400 	.word	0x50000400

0801206c <I2C_Scan>:
uint32_t I2C_Scan(void) {
 801206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  DEBUG_MSG("Scanning I2C bus:\n");
 801206e:	2402      	movs	r4, #2
 8012070:	4911      	ldr	r1, [pc, #68]	; (80120b8 <I2C_Scan+0x4c>)
 8012072:	2000      	movs	r0, #0
  for(uint8_t k = 1; k < 128; k++) {
 8012074:	2780      	movs	r7, #128	; 0x80
  DEBUG_MSG("Scanning I2C bus:\n");
 8012076:	f7f8 f9d9 	bl	800a42c <SEGGER_RTT_WriteString>
  uint32_t device_count = 0;
 801207a:	2500      	movs	r5, #0
    HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, k << 1, 2, 2);
 801207c:	0026      	movs	r6, r4
  for(uint8_t k = 1; k < 128; k++) {
 801207e:	007f      	lsls	r7, r7, #1
    HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, k << 1, 2, 2);
 8012080:	b2a1      	uxth	r1, r4
 8012082:	0033      	movs	r3, r6
 8012084:	0032      	movs	r2, r6
 8012086:	480d      	ldr	r0, [pc, #52]	; (80120bc <I2C_Scan+0x50>)
 8012088:	f7fa fa0c 	bl	800c4a4 <HAL_I2C_IsDeviceReady>
    if (result == HAL_OK) {
 801208c:	2800      	cmp	r0, #0
 801208e:	d10d      	bne.n	80120ac <I2C_Scan+0x40>
      DEBUG_PRINTF("0x%02x\n", k << 1); // Received an ACK at that address
 8012090:	0022      	movs	r2, r4
 8012092:	490b      	ldr	r1, [pc, #44]	; (80120c0 <I2C_Scan+0x54>)
 8012094:	f7f8 fb8a 	bl	800a7ac <SEGGER_RTT_printf>
      device_count++;
 8012098:	3501      	adds	r5, #1
 801209a:	3402      	adds	r4, #2
  for(uint8_t k = 1; k < 128; k++) {
 801209c:	42bc      	cmp	r4, r7
 801209e:	d1ef      	bne.n	8012080 <I2C_Scan+0x14>
  DEBUG_MSG("\n");
 80120a0:	4908      	ldr	r1, [pc, #32]	; (80120c4 <I2C_Scan+0x58>)
 80120a2:	2000      	movs	r0, #0
 80120a4:	f7f8 f9c2 	bl	800a42c <SEGGER_RTT_WriteString>
}
 80120a8:	0028      	movs	r0, r5
 80120aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      DEBUG_MSG("."); // No ACK received at that address
 80120ac:	4906      	ldr	r1, [pc, #24]	; (80120c8 <I2C_Scan+0x5c>)
 80120ae:	2000      	movs	r0, #0
 80120b0:	f7f8 f9bc 	bl	800a42c <SEGGER_RTT_WriteString>
 80120b4:	e7f1      	b.n	801209a <I2C_Scan+0x2e>
 80120b6:	46c0      	nop			; (mov r8, r8)
 80120b8:	08018d32 	.word	0x08018d32
 80120bc:	20001ad4 	.word	0x20001ad4
 80120c0:	080191cb 	.word	0x080191cb
 80120c4:	08018070 	.word	0x08018070
 80120c8:	08017d75 	.word	0x08017d75

080120cc <getBatteryVoltage>:
uint32_t getBatteryVoltage() {
 80120cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  while (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK);
 80120ce:	4d17      	ldr	r5, [pc, #92]	; (801212c <getBatteryVoltage+0x60>)
 80120d0:	2100      	movs	r1, #0
 80120d2:	0028      	movs	r0, r5
 80120d4:	f7f9 f9b0 	bl	800b438 <HAL_ADCEx_Calibration_Start>
 80120d8:	2800      	cmp	r0, #0
 80120da:	d1f8      	bne.n	80120ce <getBatteryVoltage+0x2>
  VREFINT_CAL = *p; // read the value at pointer address
 80120dc:	4b14      	ldr	r3, [pc, #80]	; (8012130 <getBatteryVoltage+0x64>)
  volatile uint16_t adc_value[2] = { 0, 0 };
 80120de:	ac01      	add	r4, sp, #4
  VREFINT_CAL = *p; // read the value at pointer address
 80120e0:	881e      	ldrh	r6, [r3, #0]
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 80120e2:	2202      	movs	r2, #2
 80120e4:	0021      	movs	r1, r4
  volatile uint16_t adc_value[2] = { 0, 0 };
 80120e6:	8020      	strh	r0, [r4, #0]
 80120e8:	8060      	strh	r0, [r4, #2]
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 2);
 80120ea:	0028      	movs	r0, r5
 80120ec:	f7f9 f87e 	bl	800b1ec <HAL_ADC_Start_DMA>
  HAL_Delay(10);
 80120f0:	200a      	movs	r0, #10
 80120f2:	f7f8 fee5 	bl	800aec0 <HAL_Delay>
  HAL_ADC_Stop_DMA(&hadc);
 80120f6:	0028      	movs	r0, r5
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 80120f8:	8864      	ldrh	r4, [r4, #2]
  HAL_ADC_Stop_DMA(&hadc);
 80120fa:	f7f9 f8bf 	bl	800b27c <HAL_ADC_Stop_DMA>
  vdda = ((3.0 * 1000 * VREFINT_CAL) / adc_value[1]);
 80120fe:	0030      	movs	r0, r6
 8012100:	f7f8 f862 	bl	800a1c8 <__aeabi_ui2d>
 8012104:	2200      	movs	r2, #0
 8012106:	4b0b      	ldr	r3, [pc, #44]	; (8012134 <getBatteryVoltage+0x68>)
 8012108:	f7f7 fa34 	bl	8009574 <__aeabi_dmul>
 801210c:	b2a4      	uxth	r4, r4
 801210e:	0006      	movs	r6, r0
 8012110:	0020      	movs	r0, r4
 8012112:	000f      	movs	r7, r1
 8012114:	f7f8 f81e 	bl	800a154 <__aeabi_i2d>
 8012118:	0002      	movs	r2, r0
 801211a:	000b      	movs	r3, r1
 801211c:	0030      	movs	r0, r6
 801211e:	0039      	movs	r1, r7
 8012120:	f7f6 fe1e 	bl	8008d60 <__aeabi_ddiv>
 8012124:	f7f6 fa20 	bl	8008568 <__aeabi_d2uiz>
}
 8012128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801212a:	46c0      	nop			; (mov r8, r8)
 801212c:	20001854 	.word	0x20001854
 8012130:	1ff80078 	.word	0x1ff80078
 8012134:	40a77000 	.word	0x40a77000

08012138 <LEDBlink>:
 *   to prevent input overlay and therefore ambiguity.
 *   Thus Performing blinks while Button is masked by LEDBlink, is undefined behaviour.
 */
void LEDBlink(enum LEDBlinkPattern pattern) {
  struct task t;
  uint32_t when = tasks_ticks + 1;
 8012138:	4b3c      	ldr	r3, [pc, #240]	; (801222c <LEDBlink+0xf4>)
void LEDBlink(enum LEDBlinkPattern pattern) {
 801213a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t when = tasks_ticks + 1;
 801213c:	681c      	ldr	r4, [r3, #0]
  t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 801213e:	2302      	movs	r3, #2
void LEDBlink(enum LEDBlinkPattern pattern) {
 8012140:	b085      	sub	sp, #20
  t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 8012142:	9302      	str	r3, [sp, #8]
  t.when = when + 1;
 8012144:	18e3      	adds	r3, r4, r3
 8012146:	9301      	str	r3, [sp, #4]
  t.cb = &LEDBlinkTask;
 8012148:	4b39      	ldr	r3, [pc, #228]	; (8012230 <LEDBlink+0xf8>)
 801214a:	9303      	str	r3, [sp, #12]

  /* 1x Green Blinks 1s, Total 1s. */
  switch(pattern) {
 801214c:	2806      	cmp	r0, #6
 801214e:	d824      	bhi.n	801219a <LEDBlink+0x62>
 8012150:	0025      	movs	r5, r4
 8012152:	350b      	adds	r5, #11
 8012154:	f7f5 ffea 	bl	800812c <__gnu_thumb1_case_uqi>
 8012158:	44230b04 	.word	0x44230b04
 801215c:	4a47      	.short	0x4a47
 801215e:	66          	.byte	0x66
 801215f:	00          	.byte	0x00
  case BlinkPattern_G: {
    tasks_add(t);
 8012160:	9801      	ldr	r0, [sp, #4]
 8012162:	9902      	ldr	r1, [sp, #8]
    break;
  }
  /* 1x Orange Blinks 1s. Total 1s. */
  case BlinkPattern_B: {
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_RED | LEDBLINK_COLOR_GREEN);
    tasks_add(t);
 8012164:	9a03      	ldr	r2, [sp, #12]
 8012166:	f002 f9bb 	bl	80144e0 <tasks_add>
    t.arg = (void*) LEDBLINK_BUTTON_ENABLE;
    t.when = when + 10;
    tasks_add(t);
 801216a:	0028      	movs	r0, r5
 801216c:	e011      	b.n	8012192 <LEDBlink+0x5a>
    tasks_add(t);
 801216e:	9801      	ldr	r0, [sp, #4]
 8012170:	9902      	ldr	r1, [sp, #8]
    tasks_add(t);
 8012172:	9a03      	ldr	r2, [sp, #12]
 8012174:	f002 f9b4 	bl	80144e0 <tasks_add>
    tasks_add(t);
 8012178:	2100      	movs	r1, #0
 801217a:	9a03      	ldr	r2, [sp, #12]
 801217c:	0028      	movs	r0, r5
 801217e:	f002 f9af 	bl	80144e0 <tasks_add>
    t.when = when + 20;
 8012182:	0020      	movs	r0, r4
    tasks_add(t);
 8012184:	2102      	movs	r1, #2
    t.when = when + 20;
 8012186:	3015      	adds	r0, #21
    tasks_add(t);
 8012188:	9a03      	ldr	r2, [sp, #12]
 801218a:	f002 f9a9 	bl	80144e0 <tasks_add>
    t.when = when + 30;
 801218e:	0020      	movs	r0, r4
 8012190:	301f      	adds	r0, #31
    tasks_add(t);
 8012192:	2101      	movs	r1, #1
 8012194:	9a03      	ldr	r2, [sp, #12]
 8012196:	f002 f9a3 	bl	80144e0 <tasks_add>
    break;
  }
  }
}
 801219a:	b005      	add	sp, #20
 801219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t.arg = (void*) LEDBLINK_BUTTON_DISABLE;
 801219e:	2600      	movs	r6, #0
    tasks_add(t);
 80121a0:	9902      	ldr	r1, [sp, #8]
 80121a2:	9a03      	ldr	r2, [sp, #12]
 80121a4:	9801      	ldr	r0, [sp, #4]
 80121a6:	f002 f99b 	bl	80144e0 <tasks_add>
    tasks_add(t);
 80121aa:	0028      	movs	r0, r5
 80121ac:	0031      	movs	r1, r6
 80121ae:	9a03      	ldr	r2, [sp, #12]
 80121b0:	f002 f996 	bl	80144e0 <tasks_add>
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_GREEN);
 80121b4:	2502      	movs	r5, #2
    t.when = when + 20;
 80121b6:	0020      	movs	r0, r4
    tasks_add(t);
 80121b8:	0029      	movs	r1, r5
 80121ba:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 80121bc:	3015      	adds	r0, #21
    tasks_add(t);
 80121be:	f002 f98f 	bl	80144e0 <tasks_add>
    t.when = when + 30;
 80121c2:	0020      	movs	r0, r4
    tasks_add(t);
 80121c4:	0031      	movs	r1, r6
    t.when = when + 30;
 80121c6:	301f      	adds	r0, #31
    tasks_add(t);
 80121c8:	9a03      	ldr	r2, [sp, #12]
 80121ca:	f002 f989 	bl	80144e0 <tasks_add>
    t.when = when + 40;
 80121ce:	0020      	movs	r0, r4
    tasks_add(t);
 80121d0:	0029      	movs	r1, r5
    t.when = when + 40;
 80121d2:	3029      	adds	r0, #41	; 0x29
    tasks_add(t);
 80121d4:	9a03      	ldr	r2, [sp, #12]
 80121d6:	f002 f983 	bl	80144e0 <tasks_add>
    t.when = when + 50;
 80121da:	0020      	movs	r0, r4
 80121dc:	3033      	adds	r0, #51	; 0x33
 80121de:	e7d8      	b.n	8012192 <LEDBlink+0x5a>
    tasks_add(t);
 80121e0:	9801      	ldr	r0, [sp, #4]
 80121e2:	2104      	movs	r1, #4
 80121e4:	e7be      	b.n	8012164 <LEDBlink+0x2c>
    tasks_add(t);
 80121e6:	9801      	ldr	r0, [sp, #4]
 80121e8:	2104      	movs	r1, #4
 80121ea:	e7c2      	b.n	8012172 <LEDBlink+0x3a>
    t.arg = (void*) (LEDBLINK_BUTTON_DISABLE | LEDBLINK_COLOR_RED);
 80121ec:	2604      	movs	r6, #4
    t.arg = (void*) LEDBLINK_BUTTON_DISABLE;
 80121ee:	2700      	movs	r7, #0
    tasks_add(t);
 80121f0:	0031      	movs	r1, r6
 80121f2:	9a03      	ldr	r2, [sp, #12]
 80121f4:	9801      	ldr	r0, [sp, #4]
 80121f6:	f002 f973 	bl	80144e0 <tasks_add>
    tasks_add(t);
 80121fa:	0039      	movs	r1, r7
 80121fc:	9a03      	ldr	r2, [sp, #12]
 80121fe:	0028      	movs	r0, r5
 8012200:	f002 f96e 	bl	80144e0 <tasks_add>
    t.when = when + 20;
 8012204:	0020      	movs	r0, r4
    tasks_add(t);
 8012206:	0031      	movs	r1, r6
 8012208:	9a03      	ldr	r2, [sp, #12]
    t.when = when + 20;
 801220a:	3015      	adds	r0, #21
    tasks_add(t);
 801220c:	f002 f968 	bl	80144e0 <tasks_add>
    t.when = when + 30;
 8012210:	0020      	movs	r0, r4
    tasks_add(t);
 8012212:	0039      	movs	r1, r7
    t.when = when + 30;
 8012214:	301f      	adds	r0, #31
    tasks_add(t);
 8012216:	9a03      	ldr	r2, [sp, #12]
 8012218:	f002 f962 	bl	80144e0 <tasks_add>
    t.when = when + 40;
 801221c:	0020      	movs	r0, r4
    tasks_add(t);
 801221e:	0031      	movs	r1, r6
    t.when = when + 40;
 8012220:	3029      	adds	r0, #41	; 0x29
 8012222:	e7d7      	b.n	80121d4 <LEDBlink+0x9c>
    tasks_add(t);
 8012224:	9801      	ldr	r0, [sp, #4]
 8012226:	2106      	movs	r1, #6
 8012228:	e79c      	b.n	8012164 <LEDBlink+0x2c>
 801222a:	46c0      	nop			; (mov r8, r8)
 801222c:	20001a98 	.word	0x20001a98
 8012230:	08012031 	.word	0x08012031

08012234 <HW_EnterStopMode>:

  hal_reinit(); // TODO: Is this even needed?
  //main(); // TODO: Is this even needed?
}

void HW_EnterStopMode() {
 8012234:	b510      	push	{r4, lr}
  /* Finish tasks before entry to low power state */
  while(tasks_has_pending() == -1) {};
 8012236:	f002 f979 	bl	801452c <tasks_has_pending>
 801223a:	1c43      	adds	r3, r0, #1
 801223c:	d0fb      	beq.n	8012236 <HW_EnterStopMode+0x2>
  __HAL_RCC_PWR_CLK_ENABLE(); // Enable power control clock

  hwSlept = true;
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // | PWR_CR_CWUF
  HW_ExitStopMode();
}
 801223e:	bd10      	pop	{r4, pc}

08012240 <HW_EraseEEPROM>:
  ST25DV_SetMBEN_Dyn(&St25Dv_Obj);

  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
}

void HW_EraseEEPROM(uint32_t address) {
 8012240:	b510      	push	{r4, lr}
 8012242:	0004      	movs	r4, r0
  HAL_FLASHEx_DATAEEPROM_Unlock();
 8012244:	f7f9 fb60 	bl	800b908 <HAL_FLASHEx_DATAEEPROM_Unlock>
  if (HAL_FLASHEx_DATAEEPROM_Erase(address) != HAL_OK) {
 8012248:	0020      	movs	r0, r4
 801224a:	f7f9 fb7f 	bl	800b94c <HAL_FLASHEx_DATAEEPROM_Erase>
 801224e:	2800      	cmp	r0, #0
 8012250:	d004      	beq.n	801225c <HW_EraseEEPROM+0x1c>
    DBG_PRINTF("ERROR ERASING EEPROM: 0x%02X!\n", address);
 8012252:	0022      	movs	r2, r4
 8012254:	4903      	ldr	r1, [pc, #12]	; (8012264 <HW_EraseEEPROM+0x24>)
 8012256:	2000      	movs	r0, #0
 8012258:	f7f8 faa8 	bl	800a7ac <SEGGER_RTT_printf>
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 801225c:	f7f9 fb6c 	bl	800b938 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8012260:	bd10      	pop	{r4, pc}
 8012262:	46c0      	nop			; (mov r8, r8)
 8012264:	08018c7e 	.word	0x08018c7e

08012268 <HW_ProgramEEPROM>:

void HW_ProgramEEPROM(uint32_t address, uint32_t data) {
 8012268:	b570      	push	{r4, r5, r6, lr}
 801226a:	000d      	movs	r5, r1
 801226c:	0004      	movs	r4, r0
  HAL_FLASHEx_DATAEEPROM_Unlock();
 801226e:	f7f9 fb4b 	bl	800b908 <HAL_FLASHEx_DATAEEPROM_Unlock>
  if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, address, data)
 8012272:	002a      	movs	r2, r5
 8012274:	0021      	movs	r1, r4
 8012276:	2002      	movs	r0, #2
 8012278:	f7f9 fb7a 	bl	800b970 <HAL_FLASHEx_DATAEEPROM_Program>
 801227c:	2800      	cmp	r0, #0
 801227e:	d004      	beq.n	801228a <HW_ProgramEEPROM+0x22>
      != HAL_OK) {
    DBG_PRINTF("ERROR PROGRAMMING EEPROM: 0x%02X!\n", address);
 8012280:	0022      	movs	r2, r4
 8012282:	4903      	ldr	r1, [pc, #12]	; (8012290 <HW_ProgramEEPROM+0x28>)
 8012284:	2000      	movs	r0, #0
 8012286:	f7f8 fa91 	bl	800a7ac <SEGGER_RTT_printf>
  }
  HAL_FLASHEx_DATAEEPROM_Lock();
 801228a:	f7f9 fb55 	bl	800b938 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	08018cb9 	.word	0x08018cb9

08012294 <HW_WriteEEPROM>:

void HW_WriteEEPROM(void *addr, const void *buf, size_t size) {
 8012294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012296:	b087      	sub	sp, #28
 8012298:	0006      	movs	r6, r0
 801229a:	9102      	str	r1, [sp, #8]
 801229c:	0014      	movs	r4, r2
  assert_param(IS_FLASH_DATA_ADDRESS(addr));
  assert_param(IS_FLASH_DATA_ADDRESS(addr + size));
  if(HAL_FLASHEx_DATAEEPROM_Unlock()) goto err;
 801229e:	f7f9 fb33 	bl	800b908 <HAL_FLASHEx_DATAEEPROM_Unlock>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d148      	bne.n	8012338 <HW_WriteEEPROM+0xa4>

  /* Store to initial non-word address */
  if((uintptr_t)addr % 4) {
 80122a6:	2303      	movs	r3, #3
 80122a8:	0030      	movs	r0, r6
 80122aa:	4018      	ands	r0, r3
 80122ac:	d01a      	beq.n	80122e4 <HW_WriteEEPROM+0x50>
    size_t off = (uintptr_t)addr % 4, len = 4 - off > size ? size : 4 - off;
 80122ae:	2504      	movs	r5, #4
 80122b0:	1a2d      	subs	r5, r5, r0
 80122b2:	42a5      	cmp	r5, r4
 80122b4:	d900      	bls.n	80122b8 <HW_WriteEEPROM+0x24>
 80122b6:	0025      	movs	r5, r4
    uint32_t *prev = (uint32_t*)((uintptr_t)addr >> 2 << 2), word = *prev;
 80122b8:	0037      	movs	r7, r6
 80122ba:	439f      	bics	r7, r3
 80122bc:	683b      	ldr	r3, [r7, #0]
    memcpy((char*)&word + off, buf, len);
 80122be:	002a      	movs	r2, r5
    uint32_t *prev = (uint32_t*)((uintptr_t)addr >> 2 << 2), word = *prev;
 80122c0:	9305      	str	r3, [sp, #20]
    memcpy((char*)&word + off, buf, len);
 80122c2:	ab05      	add	r3, sp, #20
 80122c4:	9902      	ldr	r1, [sp, #8]
 80122c6:	1818      	adds	r0, r3, r0
 80122c8:	f003 f9ff 	bl	80156ca <memcpy>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)prev, word)) goto err;
 80122cc:	9a05      	ldr	r2, [sp, #20]
 80122ce:	0039      	movs	r1, r7
 80122d0:	2002      	movs	r0, #2
 80122d2:	f7f9 fb4d 	bl	800b970 <HAL_FLASHEx_DATAEEPROM_Program>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	d12e      	bne.n	8012338 <HW_WriteEEPROM+0xa4>
    addr = prev + 1, buf = (char*)buf + len, size -= len;
 80122da:	9b02      	ldr	r3, [sp, #8]
 80122dc:	1d3e      	adds	r6, r7, #4
 80122de:	195b      	adds	r3, r3, r5
 80122e0:	9302      	str	r3, [sp, #8]
 80122e2:	1b64      	subs	r4, r4, r5
  }

  assert((uintptr_t)addr % 4 == 0);
 80122e4:	2303      	movs	r3, #3
 80122e6:	0037      	movs	r7, r6
 80122e8:	0035      	movs	r5, r6
 80122ea:	401f      	ands	r7, r3
 80122ec:	d108      	bne.n	8012300 <HW_WriteEEPROM+0x6c>

  /* Store to word aligned addresses */
  for(size_t i = 0; i * 4 < size; i++) {
    uint32_t word;
    memcpy(&word, (char*)buf + i * 4, i * 4 + 4 > size ? (word = ((uint32_t*)addr)[i], size % 4) : 4);
 80122ee:	9303      	str	r3, [sp, #12]
  for(size_t i = 0; i * 4 < size; i++) {
 80122f0:	42bc      	cmp	r4, r7
 80122f2:	d80c      	bhi.n	801230e <HW_WriteEEPROM+0x7a>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)addr + i * 4, word)) goto err;
  }

  if(HAL_FLASHEx_DATAEEPROM_Lock()) goto err;
 80122f4:	f7f9 fb20 	bl	800b938 <HAL_FLASHEx_DATAEEPROM_Lock>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d11d      	bne.n	8012338 <HW_WriteEEPROM+0xa4>

  return;
err:
  DBG_PRINTF("EEPROM <WR ERR %p buf:%p size:%zu err:%" PRIx32 "\n", addr, buf, size, HAL_FLASH_GetError());
}
 80122fc:	b007      	add	sp, #28
 80122fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert((uintptr_t)addr % 4 == 0);
 8012300:	218c      	movs	r1, #140	; 0x8c
 8012302:	4b13      	ldr	r3, [pc, #76]	; (8012350 <HW_WriteEEPROM+0xbc>)
 8012304:	4a13      	ldr	r2, [pc, #76]	; (8012354 <HW_WriteEEPROM+0xc0>)
 8012306:	31ff      	adds	r1, #255	; 0xff
 8012308:	4813      	ldr	r0, [pc, #76]	; (8012358 <HW_WriteEEPROM+0xc4>)
 801230a:	f003 f945 	bl	8015598 <__assert_func>
 801230e:	9b02      	ldr	r3, [sp, #8]
    memcpy(&word, (char*)buf + i * 4, i * 4 + 4 > size ? (word = ((uint32_t*)addr)[i], size % 4) : 4);
 8012310:	2204      	movs	r2, #4
 8012312:	19d9      	adds	r1, r3, r7
 8012314:	3704      	adds	r7, #4
 8012316:	42bc      	cmp	r4, r7
 8012318:	d203      	bcs.n	8012322 <HW_WriteEEPROM+0x8e>
 801231a:	682b      	ldr	r3, [r5, #0]
 801231c:	9a03      	ldr	r2, [sp, #12]
 801231e:	9305      	str	r3, [sp, #20]
 8012320:	4022      	ands	r2, r4
 8012322:	a805      	add	r0, sp, #20
 8012324:	f003 f9d1 	bl	80156ca <memcpy>
    if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (uint32_t)addr + i * 4, word)) goto err;
 8012328:	0029      	movs	r1, r5
 801232a:	9a05      	ldr	r2, [sp, #20]
 801232c:	2002      	movs	r0, #2
 801232e:	f7f9 fb1f 	bl	800b970 <HAL_FLASHEx_DATAEEPROM_Program>
 8012332:	3504      	adds	r5, #4
 8012334:	2800      	cmp	r0, #0
 8012336:	d0db      	beq.n	80122f0 <HW_WriteEEPROM+0x5c>
  DBG_PRINTF("EEPROM <WR ERR %p buf:%p size:%zu err:%" PRIx32 "\n", addr, buf, size, HAL_FLASH_GetError());
 8012338:	f7f9 faa6 	bl	800b888 <HAL_FLASH_GetError>
 801233c:	9400      	str	r4, [sp, #0]
 801233e:	9001      	str	r0, [sp, #4]
 8012340:	9b02      	ldr	r3, [sp, #8]
 8012342:	0032      	movs	r2, r6
 8012344:	4905      	ldr	r1, [pc, #20]	; (801235c <HW_WriteEEPROM+0xc8>)
 8012346:	2000      	movs	r0, #0
 8012348:	f7f8 fa30 	bl	800a7ac <SEGGER_RTT_printf>
 801234c:	e7d6      	b.n	80122fc <HW_WriteEEPROM+0x68>
 801234e:	46c0      	nop			; (mov r8, r8)
 8012350:	08018cdc 	.word	0x08018cdc
 8012354:	08018d45 	.word	0x08018d45
 8012358:	08018cf5 	.word	0x08018cf5
 801235c:	08018d07 	.word	0x08018d07

08012360 <HW_ReadEEPROM>:

void HW_ReadEEPROM(const void *addr, void *buf, size_t size) {
 8012360:	000b      	movs	r3, r1
 8012362:	b510      	push	{r4, lr}
  assert_param(IS_FLASH_DATA_ADDRESS(addr));
  assert_param(IS_FLASH_DATA_ADDRESS(addr + size));
  memcpy(buf, addr, size);
 8012364:	0001      	movs	r1, r0
 8012366:	0018      	movs	r0, r3
 8012368:	f003 f9af 	bl	80156ca <memcpy>
}
 801236c:	bd10      	pop	{r4, pc}
	...

08012370 <HW_RTCGetMsTime>:
 *        | .tm_wday[0, 6]     | .WeekDay[1, 7]      | See RTC_WeekDay_Definitions    |
 *        | .tm_mday[1, 31]    | .Date[1, 31]        |                                |
 *        | .tm_mon[0, 11]     | .Month[1, 12]       | See RTC_Month_Date_Definitions |
 *        | .tm_year[1970 + x] | .Year[0, 99]        |                                |
 */
uint32_t HW_RTCGetMsTime(void) {
 8012370:	b570      	push	{r4, r5, r6, lr}
  RTC_TimeTypeDef ts;
  RTC_DateTypeDef ds;
  struct tm timeinfo;
  time_t seconds;

  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8012372:	4e16      	ldr	r6, [pc, #88]	; (80123cc <HW_RTCGetMsTime+0x5c>)
uint32_t HW_RTCGetMsTime(void) {
 8012374:	b090      	sub	sp, #64	; 0x40
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 8012376:	ac02      	add	r4, sp, #8
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8012378:	ad01      	add	r5, sp, #4
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 801237a:	0021      	movs	r1, r4
 801237c:	2200      	movs	r2, #0
 801237e:	0030      	movs	r0, r6
 8012380:	f7fb fac0 	bl	800d904 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 8012384:	2200      	movs	r2, #0
 8012386:	0029      	movs	r1, r5
 8012388:	0030      	movs	r0, r6
 801238a:	f7fb fae5 	bl	800d958 <HAL_RTC_GetDate>
  timeinfo.tm_sec  = ts.Seconds;
 801238e:	78a3      	ldrb	r3, [r4, #2]
  timeinfo.tm_min  = ts.Minutes;
  timeinfo.tm_hour = ts.Hours;
  timeinfo.tm_mday = ds.Date;
  timeinfo.tm_mon  = ds.Month - 1;
  timeinfo.tm_year = ds.Year;
  seconds = mktime(&timeinfo);
 8012390:	a807      	add	r0, sp, #28
  timeinfo.tm_sec  = ts.Seconds;
 8012392:	9307      	str	r3, [sp, #28]
  timeinfo.tm_min  = ts.Minutes;
 8012394:	7863      	ldrb	r3, [r4, #1]
 8012396:	9308      	str	r3, [sp, #32]
  timeinfo.tm_hour = ts.Hours;
 8012398:	7823      	ldrb	r3, [r4, #0]
 801239a:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_mday = ds.Date;
 801239c:	78ab      	ldrb	r3, [r5, #2]
 801239e:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_mon  = ds.Month - 1;
 80123a0:	786b      	ldrb	r3, [r5, #1]
 80123a2:	3b01      	subs	r3, #1
 80123a4:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_year = ds.Year;
 80123a6:	78eb      	ldrb	r3, [r5, #3]
 80123a8:	930c      	str	r3, [sp, #48]	; 0x30
  seconds = mktime(&timeinfo);
 80123aa:	f003 fa69 	bl	8015880 <mktime>
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 80123ae:	68a1      	ldr	r1, [r4, #8]
  seconds = mktime(&timeinfo);
 80123b0:	0005      	movs	r5, r0
  return seconds * 1000 + (ts.SecondFraction - ts.SubSeconds) * 1000 / (ts.SecondFraction + 1);
 80123b2:	6860      	ldr	r0, [r4, #4]
 80123b4:	24fa      	movs	r4, #250	; 0xfa
 80123b6:	1a08      	subs	r0, r1, r0
 80123b8:	00a4      	lsls	r4, r4, #2
 80123ba:	4360      	muls	r0, r4
 80123bc:	3101      	adds	r1, #1
 80123be:	f7f5 fec9 	bl	8008154 <__udivsi3>
 80123c2:	4365      	muls	r5, r4
 80123c4:	1940      	adds	r0, r0, r5
}
 80123c6:	b010      	add	sp, #64	; 0x40
 80123c8:	bd70      	pop	{r4, r5, r6, pc}
 80123ca:	46c0      	nop			; (mov r8, r8)
 80123cc:	200018e0 	.word	0x200018e0

080123d0 <HW_RTCGetSTime>:
 *        HW_RTCGetSTime - seconds time wraps 100 years (RTC defined).
 *
 * SEE ALSO
 *        HW_RTC_GetMsTime
 */
uint32_t HW_RTCGetSTime(void) {
 80123d0:	b570      	push	{r4, r5, r6, lr}
  RTC_TimeTypeDef ts;
  RTC_DateTypeDef ds;
  struct tm timeinfo;
  time_t seconds;

  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 80123d2:	4e0f      	ldr	r6, [pc, #60]	; (8012410 <HW_RTCGetSTime+0x40>)
uint32_t HW_RTCGetSTime(void) {
 80123d4:	b090      	sub	sp, #64	; 0x40
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 80123d6:	ad02      	add	r5, sp, #8
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 80123d8:	ac01      	add	r4, sp, #4
  HAL_RTC_GetTime(&hrtc, &ts, FORMAT_BIN);
 80123da:	0029      	movs	r1, r5
 80123dc:	2200      	movs	r2, #0
 80123de:	0030      	movs	r0, r6
 80123e0:	f7fb fa90 	bl	800d904 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &ds, FORMAT_BIN);
 80123e4:	2200      	movs	r2, #0
 80123e6:	0021      	movs	r1, r4
 80123e8:	0030      	movs	r0, r6
 80123ea:	f7fb fab5 	bl	800d958 <HAL_RTC_GetDate>
  timeinfo.tm_hour = ts.Hours;
 80123ee:	782b      	ldrb	r3, [r5, #0]
  timeinfo.tm_min  = ts.Minutes;
  timeinfo.tm_sec  = ts.Seconds;
  timeinfo.tm_mday = ds.Date;
  timeinfo.tm_mon  = ds.Month;
  timeinfo.tm_year = ds.Year;
  seconds = mktime(&timeinfo);
 80123f0:	a807      	add	r0, sp, #28
  timeinfo.tm_hour = ts.Hours;
 80123f2:	9309      	str	r3, [sp, #36]	; 0x24
  timeinfo.tm_min  = ts.Minutes;
 80123f4:	786b      	ldrb	r3, [r5, #1]
 80123f6:	9308      	str	r3, [sp, #32]
  timeinfo.tm_sec  = ts.Seconds;
 80123f8:	78ab      	ldrb	r3, [r5, #2]
 80123fa:	9307      	str	r3, [sp, #28]
  timeinfo.tm_mday = ds.Date;
 80123fc:	78a3      	ldrb	r3, [r4, #2]
 80123fe:	930a      	str	r3, [sp, #40]	; 0x28
  timeinfo.tm_mon  = ds.Month;
 8012400:	7863      	ldrb	r3, [r4, #1]
 8012402:	930b      	str	r3, [sp, #44]	; 0x2c
  timeinfo.tm_year = ds.Year;
 8012404:	78e3      	ldrb	r3, [r4, #3]
 8012406:	930c      	str	r3, [sp, #48]	; 0x30
  seconds = mktime(&timeinfo);
 8012408:	f003 fa3a 	bl	8015880 <mktime>
  return seconds;
}
 801240c:	b010      	add	sp, #64	; 0x40
 801240e:	bd70      	pop	{r4, r5, r6, pc}
 8012410:	200018e0 	.word	0x200018e0

08012414 <HW_ExitStopMode>:
  if(!hwSlept)
 8012414:	4b17      	ldr	r3, [pc, #92]	; (8012474 <HW_ExitStopMode+0x60>)
void HW_ExitStopMode() {
 8012416:	b570      	push	{r4, r5, r6, lr}
  if(!hwSlept)
 8012418:	781a      	ldrb	r2, [r3, #0]
 801241a:	2a00      	cmp	r2, #0
 801241c:	d028      	beq.n	8012470 <HW_ExitStopMode+0x5c>
  hwSlept = false;
 801241e:	2400      	movs	r4, #0
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8012420:	2007      	movs	r0, #7
  hwSlept = false;
 8012422:	701c      	strb	r4, [r3, #0]
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8012424:	f7f9 f8b6 	bl	800b594 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8012428:	2005      	movs	r0, #5
 801242a:	f7f9 f8b3 	bl	800b594 <HAL_NVIC_ClearPendingIRQ>
  MX_GPIO_Init();
 801242e:	f7ff fd47 	bl	8011ec0 <MX_GPIO_Init>
  DBG_PRINTF("WAKE UP! RTC:%d SysTick:%d\n", HW_RTCGetSTime(), HAL_GetTick());
 8012432:	f7ff ffcd 	bl	80123d0 <HW_RTCGetSTime>
 8012436:	0005      	movs	r5, r0
 8012438:	f7f8 fd3c 	bl	800aeb4 <HAL_GetTick>
 801243c:	002a      	movs	r2, r5
 801243e:	0003      	movs	r3, r0
 8012440:	490d      	ldr	r1, [pc, #52]	; (8012478 <HW_ExitStopMode+0x64>)
 8012442:	0020      	movs	r0, r4
 8012444:	f7f8 f9b2 	bl	800a7ac <SEGGER_RTT_printf>
  HAL_GPIO_WritePin(DC_Conv_Mode_GPIO_Port, DC_Conv_Mode_Pin, GPIO_PIN_SET);
 8012448:	2180      	movs	r1, #128	; 0x80
 801244a:	20a0      	movs	r0, #160	; 0xa0
 801244c:	2201      	movs	r2, #1
 801244e:	0049      	lsls	r1, r1, #1
 8012450:	05c0      	lsls	r0, r0, #23
 8012452:	f7f9 fb7d 	bl	800bb50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_Switch_GPIO_Port, RF_Switch_Pin, GPIO_PIN_SET);
 8012456:	20a0      	movs	r0, #160	; 0xa0
 8012458:	2104      	movs	r1, #4
 801245a:	2201      	movs	r2, #1
 801245c:	05c0      	lsls	r0, r0, #23
 801245e:	f7f9 fb77 	bl	800bb50 <HAL_GPIO_WritePin>
  ST25DV_SetMBEN_Dyn(&St25Dv_Obj);
 8012462:	4806      	ldr	r0, [pc, #24]	; (801247c <HW_ExitStopMode+0x68>)
 8012464:	f7f8 fb72 	bl	800ab4c <ST25DV_SetMBEN_Dyn>
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 8012468:	211a      	movs	r1, #26
 801246a:	4805      	ldr	r0, [pc, #20]	; (8012480 <HW_ExitStopMode+0x6c>)
 801246c:	f7fa fd26 	bl	800cebc <HAL_LPTIM_Counter_Start_IT>
}
 8012470:	bd70      	pop	{r4, r5, r6, pc}
 8012472:	46c0      	nop			; (mov r8, r8)
 8012474:	20001b84 	.word	0x20001b84
 8012478:	08018c9d 	.word	0x08018c9d
 801247c:	20001bd4 	.word	0x20001bd4
 8012480:	200018b0 	.word	0x200018b0

08012484 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012484:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8012486:	4b14      	ldr	r3, [pc, #80]	; (80124d8 <MX_I2C1_Init+0x54>)
 8012488:	4c14      	ldr	r4, [pc, #80]	; (80124dc <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00000000;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801248a:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 801248c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000000;
 801248e:	2300      	movs	r3, #0
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012490:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000000;
 8012492:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8012494:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012496:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012498:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801249a:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801249c:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801249e:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80124a0:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80124a2:	f7f9 fd09 	bl	800beb8 <HAL_I2C_Init>
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d001      	beq.n	80124ae <MX_I2C1_Init+0x2a>
  {
    Error_Handler();
 80124aa:	f000 fc67 	bl	8012d7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80124ae:	2100      	movs	r1, #0
 80124b0:	0020      	movs	r0, r4
 80124b2:	f7fa fb5d 	bl	800cb70 <HAL_I2CEx_ConfigAnalogFilter>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d001      	beq.n	80124be <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
 80124ba:	f000 fc5f 	bl	8012d7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80124be:	2100      	movs	r1, #0
 80124c0:	0020      	movs	r0, r4
 80124c2:	f7fa fb7b 	bl	800cbbc <HAL_I2CEx_ConfigDigitalFilter>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d001      	beq.n	80124ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80124ca:	f000 fc57 	bl	8012d7c <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80124ce:	2080      	movs	r0, #128	; 0x80
 80124d0:	0140      	lsls	r0, r0, #5
 80124d2:	f7fa fb97 	bl	800cc04 <HAL_I2CEx_EnableFastModePlus>

}
 80124d6:	bd10      	pop	{r4, pc}
 80124d8:	40005400 	.word	0x40005400
 80124dc:	20001ad4 	.word	0x20001ad4

080124e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80124e0:	b530      	push	{r4, r5, lr}
 80124e2:	0005      	movs	r5, r0
 80124e4:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124e6:	2214      	movs	r2, #20
 80124e8:	2100      	movs	r1, #0
 80124ea:	a801      	add	r0, sp, #4
 80124ec:	f003 f8f6 	bl	80156dc <memset>
  if(i2cHandle->Instance==I2C1)
 80124f0:	4b1f      	ldr	r3, [pc, #124]	; (8012570 <HAL_I2C_MspInit+0x90>)
 80124f2:	682a      	ldr	r2, [r5, #0]
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d139      	bne.n	801256c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80124f8:	2102      	movs	r1, #2
 80124fa:	4c1e      	ldr	r4, [pc, #120]	; (8012574 <HAL_I2C_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124fc:	481e      	ldr	r0, [pc, #120]	; (8012578 <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80124fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012500:	430a      	orrs	r2, r1
 8012502:	62e2      	str	r2, [r4, #44]	; 0x2c
 8012504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012506:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012508:	400b      	ands	r3, r1
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801250e:	23c0      	movs	r3, #192	; 0xc0
 8012510:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012512:	3bae      	subs	r3, #174	; 0xae
 8012514:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012516:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012518:	3b11      	subs	r3, #17
 801251a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801251c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 801251e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012520:	f7f9 fa50 	bl	800b9c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012524:	2380      	movs	r3, #128	; 0x80
 8012526:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012528:	039b      	lsls	r3, r3, #14
 801252a:	4313      	orrs	r3, r2
 801252c:	63a3      	str	r3, [r4, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 801252e:	4c13      	ldr	r4, [pc, #76]	; (801257c <HAL_I2C_MspInit+0x9c>)
 8012530:	4b13      	ldr	r3, [pc, #76]	; (8012580 <HAL_I2C_MspInit+0xa0>)
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012532:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8012534:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8012536:	2306      	movs	r3, #6
 8012538:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801253a:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 801253c:	0020      	movs	r0, r4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801253e:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012540:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012542:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012544:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012546:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8012548:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 801254a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 801254c:	f7f9 f830 	bl	800b5b0 <HAL_DMA_Init>
 8012550:	2800      	cmp	r0, #0
 8012552:	d001      	beq.n	8012558 <HAL_I2C_MspInit+0x78>
    {
      Error_Handler();
 8012554:	f000 fc12 	bl	8012d7c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8012558:	2200      	movs	r2, #0
 801255a:	2017      	movs	r0, #23
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 801255c:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 801255e:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8012560:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8012562:	f7f8 ffb9 	bl	800b4d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8012566:	2017      	movs	r0, #23
 8012568:	f7f8 ffe0 	bl	800b52c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801256c:	b007      	add	sp, #28
 801256e:	bd30      	pop	{r4, r5, pc}
 8012570:	40005400 	.word	0x40005400
 8012574:	40021000 	.word	0x40021000
 8012578:	50000400 	.word	0x50000400
 801257c:	20001b88 	.word	0x20001b88
 8012580:	40020030 	.word	0x40020030

08012584 <DBG_PrintBuffer>:
  DBG_PRINTF("EDGE %u->%u, HOLD %10u, GAP %10u, TS %10u, LPTIM %10u%s\n", lastEdge, currEdge, hold, gap, now, tasks_ticks, debug_msg);
  lastEdge = currEdge;
  return;
}

static void DBG_PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8012584:	b570      	push	{r4, r5, r6, lr}
 8012586:	0014      	movs	r4, r2
 8012588:	000d      	movs	r5, r1
  DBG_PRINTF("%s0x", pre);
 801258a:	0002      	movs	r2, r0
 801258c:	490b      	ldr	r1, [pc, #44]	; (80125bc <DBG_PrintBuffer+0x38>)
 801258e:	2000      	movs	r0, #0
static void DBG_PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8012590:	001e      	movs	r6, r3
  DBG_PRINTF("%s0x", pre);
 8012592:	f7f8 f90b 	bl	800a7ac <SEGGER_RTT_printf>
 8012596:	3c01      	subs	r4, #1
 8012598:	b2a4      	uxth	r4, r4
 801259a:	192c      	adds	r4, r5, r4
 801259c:	3d01      	subs	r5, #1
  if(len) do {
    DBG_PRINTF("%02x", buf[--len]);
 801259e:	7822      	ldrb	r2, [r4, #0]
 80125a0:	4907      	ldr	r1, [pc, #28]	; (80125c0 <DBG_PrintBuffer+0x3c>)
 80125a2:	2000      	movs	r0, #0
 80125a4:	3c01      	subs	r4, #1
 80125a6:	f7f8 f901 	bl	800a7ac <SEGGER_RTT_printf>
  } while(len);
 80125aa:	42ac      	cmp	r4, r5
 80125ac:	d1f7      	bne.n	801259e <DBG_PrintBuffer+0x1a>
  DBG_PRINTF("%s", post);
 80125ae:	0032      	movs	r2, r6
 80125b0:	4904      	ldr	r1, [pc, #16]	; (80125c4 <DBG_PrintBuffer+0x40>)
 80125b2:	2000      	movs	r0, #0
 80125b4:	f7f8 f8fa 	bl	800a7ac <SEGGER_RTT_printf>
}
 80125b8:	bd70      	pop	{r4, r5, r6, pc}
 80125ba:	46c0      	nop			; (mov r8, r8)
 80125bc:	08018e35 	.word	0x08018e35
 80125c0:	08018e3a 	.word	0x08018e3a
 80125c4:	08018e3f 	.word	0x08018e3f

080125c8 <ButtonTask_SinglePress>:
static void ButtonTask_SinglePress(void* unused) {
 80125c8:	b510      	push	{r4, lr}
  LEDBlink(BlinkPattern_G);
 80125ca:	2000      	movs	r0, #0
 80125cc:	f7ff fdb4 	bl	8012138 <LEDBlink>
  detectedGesture = 1, enqueueToSend(EVENT);
 80125d0:	2201      	movs	r2, #1
  buttonPendingSinglePress = NULL;
 80125d2:	2400      	movs	r4, #0
  detectedGesture = 1, enqueueToSend(EVENT);
 80125d4:	4b08      	ldr	r3, [pc, #32]	; (80125f8 <ButtonTask_SinglePress+0x30>)
 80125d6:	2002      	movs	r0, #2
 80125d8:	701a      	strb	r2, [r3, #0]
 80125da:	f000 fb27 	bl	8012c2c <enqueueToSend>
  buttonPendingSinglePress = NULL;
 80125de:	4b07      	ldr	r3, [pc, #28]	; (80125fc <ButtonTask_SinglePress+0x34>)
 80125e0:	601c      	str	r4, [r3, #0]
  DBG_PRINTF("SCHEDULE EXECUTED,                          TS %10u, LPTIM %10u, GESTURE Single Press\n", HAL_GetTick(), tasks_ticks);
 80125e2:	f7f8 fc67 	bl	800aeb4 <HAL_GetTick>
 80125e6:	4b06      	ldr	r3, [pc, #24]	; (8012600 <ButtonTask_SinglePress+0x38>)
 80125e8:	0002      	movs	r2, r0
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	4905      	ldr	r1, [pc, #20]	; (8012604 <ButtonTask_SinglePress+0x3c>)
 80125ee:	0020      	movs	r0, r4
 80125f0:	f7f8 f8dc 	bl	800a7ac <SEGGER_RTT_printf>
}
 80125f4:	bd10      	pop	{r4, pc}
 80125f6:	46c0      	nop			; (mov r8, r8)
 80125f8:	2000184d 	.word	0x2000184d
 80125fc:	200016ac 	.word	0x200016ac
 8012600:	20001a98 	.word	0x20001a98
 8012604:	08018dde 	.word	0x08018dde

08012608 <ButtonISR>:
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8012608:	20a0      	movs	r0, #160	; 0xa0
void ButtonISR() {
 801260a:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 801260c:	2101      	movs	r1, #1
void ButtonISR() {
 801260e:	b089      	sub	sp, #36	; 0x24
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8012610:	05c0      	lsls	r0, r0, #23
 8012612:	f7f9 fa97 	bl	800bb44 <HAL_GPIO_ReadPin>
 8012616:	0004      	movs	r4, r0
  uint32_t hold, gap, now = HW_RTCGetMsTime();
 8012618:	f7ff feaa 	bl	8012370 <HW_RTCGetMsTime>
 801261c:	0005      	movs	r5, r0
  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 801261e:	2c00      	cmp	r4, #0
 8012620:	d106      	bne.n	8012630 <ButtonISR+0x28>
 8012622:	4b2d      	ldr	r3, [pc, #180]	; (80126d8 <ButtonISR+0xd0>)
 8012624:	681e      	ldr	r6, [r3, #0]
 8012626:	1b86      	subs	r6, r0, r6
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8012628:	4b2b      	ldr	r3, [pc, #172]	; (80126d8 <ButtonISR+0xd0>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	1b5b      	subs	r3, r3, r5
 801262e:	e005      	b.n	801263c <ButtonISR+0x34>
  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8012630:	4b2a      	ldr	r3, [pc, #168]	; (80126dc <ButtonISR+0xd4>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	1a1e      	subs	r6, r3, r0
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8012636:	1ac3      	subs	r3, r0, r3
 8012638:	2c01      	cmp	r4, #1
 801263a:	d1f5      	bne.n	8012628 <ButtonISR+0x20>
 801263c:	9307      	str	r3, [sp, #28]
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 801263e:	4b28      	ldr	r3, [pc, #160]	; (80126e0 <ButtonISR+0xd8>)
 8012640:	781a      	ldrb	r2, [r3, #0]
    debug_msg = ", DEBOUNCE";
 8012642:	4b28      	ldr	r3, [pc, #160]	; (80126e4 <ButtonISR+0xdc>)
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8012644:	42a2      	cmp	r2, r4
 8012646:	d024      	beq.n	8012692 <ButtonISR+0x8a>
 8012648:	4f23      	ldr	r7, [pc, #140]	; (80126d8 <ButtonISR+0xd0>)
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	1a6a      	subs	r2, r5, r1
 801264e:	2a64      	cmp	r2, #100	; 0x64
 8012650:	d91f      	bls.n	8012692 <ButtonISR+0x8a>
 8012652:	4a22      	ldr	r2, [pc, #136]	; (80126dc <ButtonISR+0xd4>)
 8012654:	6812      	ldr	r2, [r2, #0]
 8012656:	1aa8      	subs	r0, r5, r2
 8012658:	2864      	cmp	r0, #100	; 0x64
 801265a:	d91a      	bls.n	8012692 <ButtonISR+0x8a>
  lastRise = currEdge == GPIO_PIN_SET   ? now : lastRise;
 801265c:	2c01      	cmp	r4, #1
 801265e:	d100      	bne.n	8012662 <ButtonISR+0x5a>
 8012660:	0029      	movs	r1, r5
 8012662:	6039      	str	r1, [r7, #0]
  lastFall = currEdge == GPIO_PIN_RESET ? now : lastFall;
 8012664:	2c00      	cmp	r4, #0
 8012666:	d100      	bne.n	801266a <ButtonISR+0x62>
 8012668:	002a      	movs	r2, r5
 801266a:	4b1c      	ldr	r3, [pc, #112]	; (80126dc <ButtonISR+0xd4>)
 801266c:	601a      	str	r2, [r3, #0]
    debug_msg = ", GESTURE Undefined Press";
 801266e:	4b1e      	ldr	r3, [pc, #120]	; (80126e8 <ButtonISR+0xe0>)
 if(currEdge == GPIO_PIN_RESET && hold <= 1500) {
 8012670:	2c00      	cmp	r4, #0
 8012672:	d10e      	bne.n	8012692 <ButtonISR+0x8a>
 8012674:	4a1d      	ldr	r2, [pc, #116]	; (80126ec <ButtonISR+0xe4>)
 8012676:	4296      	cmp	r6, r2
 8012678:	d81e      	bhi.n	80126b8 <ButtonISR+0xb0>
    buttonPendingSinglePress = NULL;
 801267a:	4b1d      	ldr	r3, [pc, #116]	; (80126f0 <ButtonISR+0xe8>)
    LEDBlink(BlinkPattern_G);
 801267c:	0020      	movs	r0, r4
    buttonPendingSinglePress = NULL;
 801267e:	601c      	str	r4, [r3, #0]
    LEDBlink(BlinkPattern_G);
 8012680:	f7ff fd5a 	bl	8012138 <LEDBlink>
    detectedGesture = 1, enqueueToSend(EVENT);
 8012684:	2201      	movs	r2, #1
 8012686:	4b1b      	ldr	r3, [pc, #108]	; (80126f4 <ButtonISR+0xec>)
 8012688:	2002      	movs	r0, #2
 801268a:	701a      	strb	r2, [r3, #0]
 801268c:	f000 face 	bl	8012c2c <enqueueToSend>
    debug_msg = ", GESTURE Single Press";
 8012690:	4b19      	ldr	r3, [pc, #100]	; (80126f8 <ButtonISR+0xf0>)
  DBG_PRINTF("EDGE %u->%u, HOLD %10u, GAP %10u, TS %10u, LPTIM %10u%s\n", lastEdge, currEdge, hold, gap, now, tasks_ticks, debug_msg);
 8012692:	4a1a      	ldr	r2, [pc, #104]	; (80126fc <ButtonISR+0xf4>)
 8012694:	2000      	movs	r0, #0
 8012696:	6811      	ldr	r1, [r2, #0]
 8012698:	4a11      	ldr	r2, [pc, #68]	; (80126e0 <ButtonISR+0xd8>)
 801269a:	7812      	ldrb	r2, [r2, #0]
 801269c:	9304      	str	r3, [sp, #16]
 801269e:	9b07      	ldr	r3, [sp, #28]
 80126a0:	9103      	str	r1, [sp, #12]
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	9502      	str	r5, [sp, #8]
 80126a6:	0023      	movs	r3, r4
 80126a8:	9600      	str	r6, [sp, #0]
 80126aa:	4915      	ldr	r1, [pc, #84]	; (8012700 <ButtonISR+0xf8>)
 80126ac:	f7f8 f87e 	bl	800a7ac <SEGGER_RTT_printf>
  lastEdge = currEdge;
 80126b0:	4b0b      	ldr	r3, [pc, #44]	; (80126e0 <ButtonISR+0xd8>)
 80126b2:	701c      	strb	r4, [r3, #0]
}
 80126b4:	b009      	add	sp, #36	; 0x24
 80126b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(currEdge == GPIO_PIN_RESET && 2001 <= hold && hold <= 8000) {
 80126b8:	4a12      	ldr	r2, [pc, #72]	; (8012704 <ButtonISR+0xfc>)
 80126ba:	4913      	ldr	r1, [pc, #76]	; (8012708 <ButtonISR+0x100>)
 80126bc:	18b2      	adds	r2, r6, r2
 80126be:	428a      	cmp	r2, r1
 80126c0:	d8e7      	bhi.n	8012692 <ButtonISR+0x8a>
    LEDBlink(BlinkPattern_R);
 80126c2:	2003      	movs	r0, #3
 80126c4:	f7ff fd38 	bl	8012138 <LEDBlink>
    detectedGesture = 3, enqueueToSend(EVENT);
 80126c8:	2203      	movs	r2, #3
 80126ca:	4b0a      	ldr	r3, [pc, #40]	; (80126f4 <ButtonISR+0xec>)
 80126cc:	2002      	movs	r0, #2
 80126ce:	701a      	strb	r2, [r3, #0]
 80126d0:	f000 faac 	bl	8012c2c <enqueueToSend>
    debug_msg = ", GESTURE Long Press";
 80126d4:	4b0d      	ldr	r3, [pc, #52]	; (801270c <ButtonISR+0x104>)
    detectedGesture = 3, enqueueToSend(EVENT);
 80126d6:	e7dc      	b.n	8012692 <ButtonISR+0x8a>
 80126d8:	200016bc 	.word	0x200016bc
 80126dc:	200016b4 	.word	0x200016b4
 80126e0:	200016b0 	.word	0x200016b0
 80126e4:	08018d9a 	.word	0x08018d9a
 80126e8:	08018d54 	.word	0x08018d54
 80126ec:	000005dc 	.word	0x000005dc
 80126f0:	200016ac 	.word	0x200016ac
 80126f4:	2000184d 	.word	0x2000184d
 80126f8:	08018d6e 	.word	0x08018d6e
 80126fc:	20001a98 	.word	0x20001a98
 8012700:	08018da5 	.word	0x08018da5
 8012704:	fffff82f 	.word	0xfffff82f
 8012708:	0000176f 	.word	0x0000176f
 801270c:	08018d85 	.word	0x08018d85

08012710 <ReedSwitchISR>:


void ReedSwitchISR() {
  struct task t;

  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8012710:	20a0      	movs	r0, #160	; 0xa0
void ReedSwitchISR() {
 8012712:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8012714:	2101      	movs	r1, #1
void ReedSwitchISR() {
 8012716:	b08d      	sub	sp, #52	; 0x34
  GPIO_PinState currEdge = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8012718:	05c0      	lsls	r0, r0, #23
 801271a:	f7f9 fa13 	bl	800bb44 <HAL_GPIO_ReadPin>
 801271e:	0004      	movs	r4, r0
  uint32_t hold, gap, now = HW_RTCGetMsTime();
 8012720:	f7ff fe26 	bl	8012370 <HW_RTCGetMsTime>
 8012724:	0005      	movs	r5, r0
  static uint32_t lastFall = 0;
  static uint32_t lastRise = 0;
  static uint8_t  lastEdge = 0;
  const char *debug_msg = "";

  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8012726:	2c00      	cmp	r4, #0
 8012728:	d106      	bne.n	8012738 <ReedSwitchISR+0x28>
 801272a:	4b29      	ldr	r3, [pc, #164]	; (80127d0 <ReedSwitchISR+0xc0>)
 801272c:	681e      	ldr	r6, [r3, #0]
 801272e:	1b86      	subs	r6, r0, r6
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 8012730:	4b27      	ldr	r3, [pc, #156]	; (80127d0 <ReedSwitchISR+0xc0>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	1b5b      	subs	r3, r3, r5
 8012736:	e005      	b.n	8012744 <ReedSwitchISR+0x34>
  hold = currEdge == GPIO_PIN_RESET ? now - lastRise : lastFall - now;
 8012738:	4b26      	ldr	r3, [pc, #152]	; (80127d4 <ReedSwitchISR+0xc4>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	1a1e      	subs	r6, r3, r0
  gap  = currEdge == GPIO_PIN_SET   ? now - lastFall : lastRise - now;
 801273e:	1ac3      	subs	r3, r0, r3
 8012740:	2c01      	cmp	r4, #1
 8012742:	d1f5      	bne.n	8012730 <ReedSwitchISR+0x20>
 8012744:	9307      	str	r3, [sp, #28]

  /* Debounce */
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 8012746:	4b24      	ldr	r3, [pc, #144]	; (80127d8 <ReedSwitchISR+0xc8>)
 8012748:	781a      	ldrb	r2, [r3, #0]
    debug_msg = ", DEBOUNCE";
 801274a:	4b24      	ldr	r3, [pc, #144]	; (80127dc <ReedSwitchISR+0xcc>)
  if(currEdge == lastEdge || now - lastRise <= 100 || now - lastFall <= 100) {
 801274c:	42a2      	cmp	r2, r4
 801274e:	d027      	beq.n	80127a0 <ReedSwitchISR+0x90>
 8012750:	4f1f      	ldr	r7, [pc, #124]	; (80127d0 <ReedSwitchISR+0xc0>)
 8012752:	6839      	ldr	r1, [r7, #0]
 8012754:	1a6a      	subs	r2, r5, r1
 8012756:	2a64      	cmp	r2, #100	; 0x64
 8012758:	d922      	bls.n	80127a0 <ReedSwitchISR+0x90>
 801275a:	4a1e      	ldr	r2, [pc, #120]	; (80127d4 <ReedSwitchISR+0xc4>)
 801275c:	6812      	ldr	r2, [r2, #0]
 801275e:	1aa8      	subs	r0, r5, r2
 8012760:	2864      	cmp	r0, #100	; 0x64
 8012762:	d91d      	bls.n	80127a0 <ReedSwitchISR+0x90>
    goto exit;
  }

  lastRise = currEdge == GPIO_PIN_SET   ? now : lastRise;
 8012764:	2c01      	cmp	r4, #1
 8012766:	d100      	bne.n	801276a <ReedSwitchISR+0x5a>
 8012768:	0029      	movs	r1, r5
 801276a:	6039      	str	r1, [r7, #0]
  lastFall = currEdge == GPIO_PIN_RESET ? now : lastFall;
 801276c:	2c00      	cmp	r4, #0
 801276e:	d100      	bne.n	8012772 <ReedSwitchISR+0x62>
 8012770:	002a      	movs	r2, r5
 8012772:	4b18      	ldr	r3, [pc, #96]	; (80127d4 <ReedSwitchISR+0xc4>)
 8012774:	4f1a      	ldr	r7, [pc, #104]	; (80127e0 <ReedSwitchISR+0xd0>)
 8012776:	601a      	str	r2, [r3, #0]

  /* Single Press */
  if(currEdge == GPIO_PIN_RESET && buttonPendingSinglePress == NULL && hold <= 1500) {
 8012778:	2c00      	cmp	r4, #0
 801277a:	d124      	bne.n	80127c6 <ReedSwitchISR+0xb6>
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d121      	bne.n	80127c6 <ReedSwitchISR+0xb6>
 8012782:	4b18      	ldr	r3, [pc, #96]	; (80127e4 <ReedSwitchISR+0xd4>)
 8012784:	429e      	cmp	r6, r3
 8012786:	d81e      	bhi.n	80127c6 <ReedSwitchISR+0xb6>
    debug_msg = ", SCHEDULE Press";
    t.when = tasks_ticks + 15;
 8012788:	4b17      	ldr	r3, [pc, #92]	; (80127e8 <ReedSwitchISR+0xd8>)
    t.arg = NULL;
    t.cb = &ButtonTask_SinglePress;
 801278a:	4a18      	ldr	r2, [pc, #96]	; (80127ec <ReedSwitchISR+0xdc>)
    t.when = tasks_ticks + 15;
 801278c:	6818      	ldr	r0, [r3, #0]
    buttonPendingSinglePress = tasks_add(t);
 801278e:	0021      	movs	r1, r4
    t.when = tasks_ticks + 15;
 8012790:	300f      	adds	r0, #15
 8012792:	9009      	str	r0, [sp, #36]	; 0x24
    t.arg = NULL;
 8012794:	940a      	str	r4, [sp, #40]	; 0x28
    t.cb = &ButtonTask_SinglePress;
 8012796:	920b      	str	r2, [sp, #44]	; 0x2c
    buttonPendingSinglePress = tasks_add(t);
 8012798:	f001 fea2 	bl	80144e0 <tasks_add>
    debug_msg = ", SCHEDULE Press";
 801279c:	4b14      	ldr	r3, [pc, #80]	; (80127f0 <ReedSwitchISR+0xe0>)
    buttonPendingSinglePress = tasks_add(t);
 801279e:	6038      	str	r0, [r7, #0]
    debug_msg = ", GESTURE Undefined Press";
    buttonPendingSinglePress = NULL;
  }

exit:
  DBG_PRINTF("EDGE %u->%u, HOLD %10u, GAP %10u, TS %10u, LPTIM %10u%s\n", lastEdge, currEdge, hold, gap, now, tasks_ticks, debug_msg);
 80127a0:	4a11      	ldr	r2, [pc, #68]	; (80127e8 <ReedSwitchISR+0xd8>)
 80127a2:	2000      	movs	r0, #0
 80127a4:	6811      	ldr	r1, [r2, #0]
 80127a6:	4a0c      	ldr	r2, [pc, #48]	; (80127d8 <ReedSwitchISR+0xc8>)
 80127a8:	7812      	ldrb	r2, [r2, #0]
 80127aa:	9304      	str	r3, [sp, #16]
 80127ac:	9b07      	ldr	r3, [sp, #28]
 80127ae:	9103      	str	r1, [sp, #12]
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	9502      	str	r5, [sp, #8]
 80127b4:	0023      	movs	r3, r4
 80127b6:	9600      	str	r6, [sp, #0]
 80127b8:	490e      	ldr	r1, [pc, #56]	; (80127f4 <ReedSwitchISR+0xe4>)
 80127ba:	f7f7 fff7 	bl	800a7ac <SEGGER_RTT_printf>
  lastEdge = currEdge;
 80127be:	4b06      	ldr	r3, [pc, #24]	; (80127d8 <ReedSwitchISR+0xc8>)
 80127c0:	701c      	strb	r4, [r3, #0]
  return;

}
 80127c2:	b00d      	add	sp, #52	; 0x34
 80127c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buttonPendingSinglePress = NULL;
 80127c6:	2300      	movs	r3, #0
 80127c8:	603b      	str	r3, [r7, #0]
    debug_msg = ", GESTURE Undefined Press";
 80127ca:	4b0b      	ldr	r3, [pc, #44]	; (80127f8 <ReedSwitchISR+0xe8>)
 80127cc:	e7e8      	b.n	80127a0 <ReedSwitchISR+0x90>
 80127ce:	46c0      	nop			; (mov r8, r8)
 80127d0:	200016c0 	.word	0x200016c0
 80127d4:	200016b8 	.word	0x200016b8
 80127d8:	200016b1 	.word	0x200016b1
 80127dc:	08018d9a 	.word	0x08018d9a
 80127e0:	200016ac 	.word	0x200016ac
 80127e4:	000005dc 	.word	0x000005dc
 80127e8:	20001a98 	.word	0x20001a98
 80127ec:	080125c9 	.word	0x080125c9
 80127f0:	08018f59 	.word	0x08018f59
 80127f4:	08018da5 	.word	0x08018da5
 80127f8:	08018d54 	.word	0x08018d54

080127fc <NFCISR>:
 *        NFC comms doc:
 *          /MESSAGE_FORMAT_NFC.md
 *        Bootldr commit log:
 *          664ec8186463d2e7f5d8676ce9745a5a89fdbd50 at /hw/stm32-update-bootloader
 */
void NFCISR(void) {
 80127fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127fe:	b0c9      	sub	sp, #292	; 0x124
  struct NFC_State nfc;
  /* Password state */
  static bool pw_valid = false;
  static uint32_t pw_timestamp;

  nfc_activity = HAL_GetTick();
 8012800:	f7f8 fb58 	bl	800aeb4 <HAL_GetTick>
 8012804:	4b82      	ldr	r3, [pc, #520]	; (8012a10 <NFCISR+0x214>)

  /* Write default password, if no password preset */
  if(~*(uint32_t*)EEPROM_PW != *(uint32_t*)EEPROM_PW_COMPLEMENT) {
 8012806:	4d83      	ldr	r5, [pc, #524]	; (8012a14 <NFCISR+0x218>)
  nfc_activity = HAL_GetTick();
 8012808:	6018      	str	r0, [r3, #0]
  if(~*(uint32_t*)EEPROM_PW != *(uint32_t*)EEPROM_PW_COMPLEMENT) {
 801280a:	682b      	ldr	r3, [r5, #0]
 801280c:	4c82      	ldr	r4, [pc, #520]	; (8012a18 <NFCISR+0x21c>)
 801280e:	43db      	mvns	r3, r3
 8012810:	6822      	ldr	r2, [r4, #0]
 8012812:	4293      	cmp	r3, r2
 8012814:	d00d      	beq.n	8012832 <NFCISR+0x36>
    HW_EraseEEPROM(EEPROM_PW);
 8012816:	0028      	movs	r0, r5
 8012818:	f7ff fd12 	bl	8012240 <HW_EraseEEPROM>
    HW_EraseEEPROM(EEPROM_PW_COMPLEMENT);
 801281c:	0020      	movs	r0, r4
 801281e:	f7ff fd0f 	bl	8012240 <HW_EraseEEPROM>
    HW_ProgramEEPROM(EEPROM_PW,            0x78563412);
 8012822:	497e      	ldr	r1, [pc, #504]	; (8012a1c <NFCISR+0x220>)
 8012824:	0028      	movs	r0, r5
 8012826:	f7ff fd1f 	bl	8012268 <HW_ProgramEEPROM>
    HW_ProgramEEPROM(EEPROM_PW_COMPLEMENT, 0x87a9cbed);
 801282a:	497d      	ldr	r1, [pc, #500]	; (8012a20 <NFCISR+0x224>)
 801282c:	0020      	movs	r0, r4
 801282e:	f7ff fd1b 	bl	8012268 <HW_ProgramEEPROM>
  }

  /* Timout privileged session */
  if(pw_valid && (HW_RTCGetMsTime() < pw_timestamp || HW_RTCGetMsTime() >= pw_timestamp + NFC_PWTIMEOUT)) pw_valid = false;
 8012832:	4f7c      	ldr	r7, [pc, #496]	; (8012a24 <NFCISR+0x228>)
 8012834:	783b      	ldrb	r3, [r7, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d007      	beq.n	801284a <NFCISR+0x4e>
 801283a:	f7ff fd99 	bl	8012370 <HW_RTCGetMsTime>
 801283e:	4c7a      	ldr	r4, [pc, #488]	; (8012a28 <NFCISR+0x22c>)
 8012840:	6823      	ldr	r3, [r4, #0]
 8012842:	4298      	cmp	r0, r3
 8012844:	d245      	bcs.n	80128d2 <NFCISR+0xd6>
 8012846:	2300      	movs	r3, #0
 8012848:	703b      	strb	r3, [r7, #0]
   * 2) mailbox length    3) mailbox 1st byte
   *
   * Describing the cause of interrupt, whether mailbox needs to be read,
   * and peek at first byte, in case its fw upload, precluding further readout.
   * */
  if(NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_ITSTS_DYN_REG, (void*)&nfc, 4)) return;
 801284a:	ac07      	add	r4, sp, #28
 801284c:	2304      	movs	r3, #4
 801284e:	0022      	movs	r2, r4
 8012850:	4976      	ldr	r1, [pc, #472]	; (8012a2c <NFCISR+0x230>)
 8012852:	20a6      	movs	r0, #166	; 0xa6
 8012854:	f000 ff42 	bl	80136dc <NFC_ReadReg>
 8012858:	2800      	cmp	r0, #0
 801285a:	d000      	beq.n	801285e <NFCISR+0x62>
 801285c:	e096      	b.n	801298c <NFCISR+0x190>
  DBG_PRINTF("NFC IRQ IT_STS:0x%02x MB_CTRL:0x%02x MB_LEN:0x%02x, Interrupt\n", nfc.it_sts, nfc.mb_ctrl, nfc.mb_len);
 801285e:	78a1      	ldrb	r1, [r4, #2]
 8012860:	7863      	ldrb	r3, [r4, #1]
 8012862:	7822      	ldrb	r2, [r4, #0]
 8012864:	9100      	str	r1, [sp, #0]
 8012866:	4972      	ldr	r1, [pc, #456]	; (8012a30 <NFCISR+0x234>)
 8012868:	f7f7 ffa0 	bl	800a7ac <SEGGER_RTT_printf>

  /* Mailbox must have incoming data (put by RF) atleast 2 bytes */
  if(~nfc.it_sts & ST25DV_ITSTS_DYN_RFPUTMSG_MASK || !nfc.mb_len) return;
 801286c:	7823      	ldrb	r3, [r4, #0]
 801286e:	069b      	lsls	r3, r3, #26
 8012870:	d400      	bmi.n	8012874 <NFCISR+0x78>
 8012872:	e08b      	b.n	801298c <NFCISR+0x190>
 8012874:	78a3      	ldrb	r3, [r4, #2]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d100      	bne.n	801287c <NFCISR+0x80>
 801287a:	e087      	b.n	801298c <NFCISR+0x190>

  /* FW update triggers reboot to bootloader */
  if(pw_valid && nfc.mb[MB_FCTCODE] == MB_R2HFIRMWAREUPDATE) {
 801287c:	783b      	ldrb	r3, [r7, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d012      	beq.n	80128a8 <NFCISR+0xac>
 8012882:	78e3      	ldrb	r3, [r4, #3]
 8012884:	2b04      	cmp	r3, #4
 8012886:	d10f      	bne.n	80128a8 <NFCISR+0xac>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, 1, ", Firmware Update Message\n");
 8012888:	211f      	movs	r1, #31
 801288a:	4b6a      	ldr	r3, [pc, #424]	; (8012a34 <NFCISR+0x238>)
 801288c:	2201      	movs	r2, #1
 801288e:	4469      	add	r1, sp
 8012890:	4869      	ldr	r0, [pc, #420]	; (8012a38 <NFCISR+0x23c>)
 8012892:	f7ff fe77 	bl	8012584 <DBG_PrintBuffer>

    /* Tell bootloader to listen NFC for 2 minutes and not require password */
    HW_EraseEEPROM(EEPROM_BOOTMODE);
 8012896:	4869      	ldr	r0, [pc, #420]	; (8012a3c <NFCISR+0x240>)
 8012898:	f7ff fcd2 	bl	8012240 <HW_EraseEEPROM>
    HW_ProgramEEPROM(EEPROM_BOOTMODE, BOOTMODE_WAITNFC_MASK | BOOTMODE_PASSOK_MASK | BOOTMODE_KEEPNFC_MASK);
 801289c:	2107      	movs	r1, #7
 801289e:	4867      	ldr	r0, [pc, #412]	; (8012a3c <NFCISR+0x240>)
 80128a0:	f7ff fce2 	bl	8012268 <HW_ProgramEEPROM>


    /* Reboot, with mailbox blocking due partial read, thus retain ST25DV state across boot */
    HAL_NVIC_SystemReset();
 80128a4:	f7f8 fe4e 	bl	800b544 <HAL_NVIC_SystemReset>
  }

  /* Read Mailbox */
  if((r = NFC_ReadReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG + 1, nfc.mb + 1, nfc.mb_len))) return;
 80128a8:	78a3      	ldrb	r3, [r4, #2]
 80128aa:	aa08      	add	r2, sp, #32
 80128ac:	4964      	ldr	r1, [pc, #400]	; (8012a40 <NFCISR+0x244>)
 80128ae:	20a6      	movs	r0, #166	; 0xa6
 80128b0:	f000 ff14 	bl	80136dc <NFC_ReadReg>
 80128b4:	1e05      	subs	r5, r0, #0
 80128b6:	d169      	bne.n	801298c <NFCISR+0x190>
 80128b8:	78a2      	ldrb	r2, [r4, #2]

  /* Parse frame */
  switch(nfc.mb[MB_FCTCODE]) {
 80128ba:	78e3      	ldrb	r3, [r4, #3]
 80128bc:	3201      	adds	r2, #1
 80128be:	485e      	ldr	r0, [pc, #376]	; (8012a38 <NFCISR+0x23c>)
 80128c0:	2b20      	cmp	r3, #32
 80128c2:	d014      	beq.n	80128ee <NFCISR+0xf2>
 80128c4:	d80d      	bhi.n	80128e2 <NFCISR+0xe6>
 80128c6:	2b08      	cmp	r3, #8
 80128c8:	d062      	beq.n	8012990 <NFCISR+0x194>

    /* Grant privileged session for time limited period */
    pw_timestamp = HW_RTCGetMsTime();
    break;
  default:
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Undefined Message\n");
 80128ca:	211f      	movs	r1, #31
 80128cc:	4b5d      	ldr	r3, [pc, #372]	; (8012a44 <NFCISR+0x248>)
 80128ce:	4469      	add	r1, sp
 80128d0:	e04e      	b.n	8012970 <NFCISR+0x174>
  if(pw_valid && (HW_RTCGetMsTime() < pw_timestamp || HW_RTCGetMsTime() >= pw_timestamp + NFC_PWTIMEOUT)) pw_valid = false;
 80128d2:	f7ff fd4d 	bl	8012370 <HW_RTCGetMsTime>
 80128d6:	6823      	ldr	r3, [r4, #0]
 80128d8:	4a5b      	ldr	r2, [pc, #364]	; (8012a48 <NFCISR+0x24c>)
 80128da:	189b      	adds	r3, r3, r2
 80128dc:	4298      	cmp	r0, r3
 80128de:	d2b2      	bcs.n	8012846 <NFCISR+0x4a>
 80128e0:	e7b3      	b.n	801284a <NFCISR+0x4e>
  switch(nfc.mb[MB_FCTCODE]) {
 80128e2:	2b21      	cmp	r3, #33	; 0x21
 80128e4:	d047      	beq.n	8012976 <NFCISR+0x17a>
 80128e6:	2b22      	cmp	r3, #34	; 0x22
 80128e8:	d1ef      	bne.n	80128ca <NFCISR+0xce>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 80128ea:	4e58      	ldr	r6, [pc, #352]	; (8012a4c <NFCISR+0x250>)
 80128ec:	e007      	b.n	80128fe <NFCISR+0x102>
    const bool is_conf = nfc.mb[MB_FCTCODE] == MB_R2HGETCONFIG && (nfc.mb[MB_LENGTH] == 0 || nfc.mb[MB_DATA] == 0);
 80128ee:	79e3      	ldrb	r3, [r4, #7]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d002      	beq.n	80128fa <NFCISR+0xfe>
 80128f4:	7a23      	ldrb	r3, [r4, #8]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1f7      	bne.n	80128ea <NFCISR+0xee>
 80128fa:	2501      	movs	r5, #1
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 80128fc:	4e54      	ldr	r6, [pc, #336]	; (8012a50 <NFCISR+0x254>)
 80128fe:	211f      	movs	r1, #31
 8012900:	0033      	movs	r3, r6
 8012902:	4469      	add	r1, sp
 8012904:	f7ff fe3e 	bl	8012584 <DBG_PrintBuffer>
    if(nfc.mb_len + 1 < MB_DATA) break;
 8012908:	78a3      	ldrb	r3, [r4, #2]
 801290a:	2b03      	cmp	r3, #3
 801290c:	d93e      	bls.n	801298c <NFCISR+0x190>
    if(nfc.mb[MB_LENGTH] > 1) break;
 801290e:	79e3      	ldrb	r3, [r4, #7]
 8012910:	2b01      	cmp	r3, #1
 8012912:	d83b      	bhi.n	801298c <NFCISR+0x190>
    if(memcmp(nfc.mb + MB_CMDRESP, (uint8_t[3]){MB_COMMAND, MB_NOERROR, MB_NOTCHAINED}, 3)) break;
 8012914:	2300      	movs	r3, #0
 8012916:	a905      	add	r1, sp, #20
 8012918:	800b      	strh	r3, [r1, #0]
 801291a:	708b      	strb	r3, [r1, #2]
 801291c:	2203      	movs	r2, #3
 801291e:	a808      	add	r0, sp, #32
 8012920:	f002 fec4 	bl	80156ac <memcmp>
 8012924:	2800      	cmp	r0, #0
 8012926:	d131      	bne.n	801298c <NFCISR+0x190>
    nfc.mb[MB_LENGTH] = (is_conf ? PBEncodeMsg_DeviceConfiguration : PBEncodeMsg_DeviceSensors)(nfc.mb + MB_DATA, sizeof nfc.mb - MB_DATA, pw_valid);
 8012928:	4b4a      	ldr	r3, [pc, #296]	; (8012a54 <NFCISR+0x258>)
 801292a:	2d00      	cmp	r5, #0
 801292c:	d000      	beq.n	8012930 <NFCISR+0x134>
 801292e:	4b4a      	ldr	r3, [pc, #296]	; (8012a58 <NFCISR+0x25c>)
 8012930:	783a      	ldrb	r2, [r7, #0]
 8012932:	21fb      	movs	r1, #251	; 0xfb
 8012934:	a809      	add	r0, sp, #36	; 0x24
 8012936:	4798      	blx	r3
    nfc.mb[MB_CMDRESP] = MB_RESPONSE;
 8012938:	2201      	movs	r2, #1
    nfc.mb[MB_LENGTH] = (is_conf ? PBEncodeMsg_DeviceConfiguration : PBEncodeMsg_DeviceSensors)(nfc.mb + MB_DATA, sizeof nfc.mb - MB_DATA, pw_valid);
 801293a:	b2c3      	uxtb	r3, r0
 801293c:	71e3      	strb	r3, [r4, #7]
    nfc.mb[MB_CMDRESP] = MB_RESPONSE;
 801293e:	7122      	strb	r2, [r4, #4]
    assert(nfc.mb[MB_LENGTH] <= sizeof nfc.mb - MB_DATA);
 8012940:	2bfb      	cmp	r3, #251	; 0xfb
 8012942:	d906      	bls.n	8012952 <NFCISR+0x156>
 8012944:	2158      	movs	r1, #88	; 0x58
 8012946:	4b45      	ldr	r3, [pc, #276]	; (8012a5c <NFCISR+0x260>)
 8012948:	4a45      	ldr	r2, [pc, #276]	; (8012a60 <NFCISR+0x264>)
 801294a:	31ff      	adds	r1, #255	; 0xff
 801294c:	4845      	ldr	r0, [pc, #276]	; (8012a64 <NFCISR+0x268>)
 801294e:	f002 fe23 	bl	8015598 <__assert_func>
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, nfc.mb, nfc.mb[MB_LENGTH] + MB_DATA))
 8012952:	221f      	movs	r2, #31
 8012954:	3305      	adds	r3, #5
 8012956:	446a      	add	r2, sp
 8012958:	4943      	ldr	r1, [pc, #268]	; (8012a68 <NFCISR+0x26c>)
 801295a:	20a6      	movs	r0, #166	; 0xa6
 801295c:	f000 ff1e 	bl	801379c <NFC_WriteReg>
 8012960:	2800      	cmp	r0, #0
 8012962:	d113      	bne.n	801298c <NFCISR+0x190>
      DBG_PrintBuffer("NFC >TX ", nfc.mb, nfc.mb[MB_LENGTH] + MB_DATA, is_conf ? ", Ask Configure Message\n" : ", Ask Sensor Message\n");
 8012964:	211f      	movs	r1, #31
 8012966:	0033      	movs	r3, r6
 8012968:	79e2      	ldrb	r2, [r4, #7]
 801296a:	4840      	ldr	r0, [pc, #256]	; (8012a6c <NFCISR+0x270>)
 801296c:	3205      	adds	r2, #5
 801296e:	4469      	add	r1, sp
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Undefined Message\n");
 8012970:	f7ff fe08 	bl	8012584 <DBG_PrintBuffer>
    break;
 8012974:	e00a      	b.n	801298c <NFCISR+0x190>
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Set Configure Message\n");
 8012976:	211f      	movs	r1, #31
 8012978:	4b3d      	ldr	r3, [pc, #244]	; (8012a70 <NFCISR+0x274>)
 801297a:	4469      	add	r1, sp
 801297c:	f7ff fe02 	bl	8012584 <DBG_PrintBuffer>
    PBDecodeMsg(nfc.mb + MB_DATA, nfc.mb_len + 1 - MB_DATA);
 8012980:	78a1      	ldrb	r1, [r4, #2]
 8012982:	a809      	add	r0, sp, #36	; 0x24
 8012984:	3904      	subs	r1, #4
 8012986:	b2c9      	uxtb	r1, r1
 8012988:	f001 f8fc 	bl	8013b84 <PBDecodeMsg>
  }
}
 801298c:	b049      	add	sp, #292	; 0x124
 801298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PrintBuffer("NFC <RX ", nfc.mb, nfc.mb_len + 1, ", Password Message\n");
 8012990:	211f      	movs	r1, #31
 8012992:	4d38      	ldr	r5, [pc, #224]	; (8012a74 <NFCISR+0x278>)
 8012994:	4469      	add	r1, sp
 8012996:	002b      	movs	r3, r5
 8012998:	f7ff fdf4 	bl	8012584 <DBG_PrintBuffer>
    if(nfc.mb_len + 1 != 9) break;
 801299c:	78a3      	ldrb	r3, [r4, #2]
 801299e:	2b08      	cmp	r3, #8
 80129a0:	d1f4      	bne.n	801298c <NFCISR+0x190>
    if(memcmp(nfc.mb, (uint8_t[5]){MB_R2HPRESENTPASSWORD, MB_RESPONSE, MB_NOERROR, MB_NOTCHAINED, 0x04}, 5)) break;
 80129a2:	2205      	movs	r2, #5
 80129a4:	4934      	ldr	r1, [pc, #208]	; (8012a78 <NFCISR+0x27c>)
 80129a6:	a803      	add	r0, sp, #12
 80129a8:	f002 fe8f 	bl	80156ca <memcpy>
 80129ac:	231f      	movs	r3, #31
 80129ae:	446b      	add	r3, sp
 80129b0:	2205      	movs	r2, #5
 80129b2:	a903      	add	r1, sp, #12
 80129b4:	0018      	movs	r0, r3
 80129b6:	f002 fe79 	bl	80156ac <memcmp>
 80129ba:	1e06      	subs	r6, r0, #0
 80129bc:	d1e6      	bne.n	801298c <NFCISR+0x190>
    pw_valid = !memcmp((uint32_t*)EEPROM_PW, nfc.mb + MB_DATA, 4);
 80129be:	2204      	movs	r2, #4
 80129c0:	a909      	add	r1, sp, #36	; 0x24
 80129c2:	4814      	ldr	r0, [pc, #80]	; (8012a14 <NFCISR+0x218>)
 80129c4:	f002 fe72 	bl	80156ac <memcmp>
 80129c8:	4243      	negs	r3, r0
 80129ca:	4143      	adcs	r3, r0
 80129cc:	703b      	strb	r3, [r7, #0]
    const uint8_t response[5] = {MB_R2HPRESENTPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 80129ce:	2384      	movs	r3, #132	; 0x84
 80129d0:	1e42      	subs	r2, r0, #1
 80129d2:	4190      	sbcs	r0, r2
 80129d4:	ac05      	add	r4, sp, #20
 80129d6:	005b      	lsls	r3, r3, #1
 80129d8:	8023      	strh	r3, [r4, #0]
 80129da:	3b06      	subs	r3, #6
 80129dc:	4240      	negs	r0, r0
 80129de:	3bff      	subs	r3, #255	; 0xff
 80129e0:	4003      	ands	r3, r0
 80129e2:	70a3      	strb	r3, [r4, #2]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 80129e4:	0022      	movs	r2, r4
 80129e6:	2305      	movs	r3, #5
 80129e8:	491f      	ldr	r1, [pc, #124]	; (8012a68 <NFCISR+0x26c>)
 80129ea:	20a6      	movs	r0, #166	; 0xa6
    const uint8_t response[5] = {MB_R2HPRESENTPASSWORD, MB_RESPONSE, pw_valid ? MB_NOERROR : MB_BADREQUEST, MB_NOTCHAINED, 0x00};
 80129ec:	70e6      	strb	r6, [r4, #3]
 80129ee:	7126      	strb	r6, [r4, #4]
    if(NFCTAG_OK == NFC_WriteReg(ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, response, sizeof response))
 80129f0:	f000 fed4 	bl	801379c <NFC_WriteReg>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d105      	bne.n	8012a04 <NFCISR+0x208>
      DBG_PrintBuffer("NFC >TX ", response, sizeof response, ", Password Message\n");
 80129f8:	002b      	movs	r3, r5
 80129fa:	2205      	movs	r2, #5
 80129fc:	0021      	movs	r1, r4
 80129fe:	481b      	ldr	r0, [pc, #108]	; (8012a6c <NFCISR+0x270>)
 8012a00:	f7ff fdc0 	bl	8012584 <DBG_PrintBuffer>
    pw_timestamp = HW_RTCGetMsTime();
 8012a04:	f7ff fcb4 	bl	8012370 <HW_RTCGetMsTime>
 8012a08:	4b07      	ldr	r3, [pc, #28]	; (8012a28 <NFCISR+0x22c>)
 8012a0a:	6018      	str	r0, [r3, #0]
    break;
 8012a0c:	e7be      	b.n	801298c <NFCISR+0x190>
 8012a0e:	46c0      	nop			; (mov r8, r8)
 8012a10:	20001bd0 	.word	0x20001bd0
 8012a14:	08080008 	.word	0x08080008
 8012a18:	0808000c 	.word	0x0808000c
 8012a1c:	78563412 	.word	0x78563412
 8012a20:	87a9cbed 	.word	0x87a9cbed
 8012a24:	200016c8 	.word	0x200016c8
 8012a28:	200016c4 	.word	0x200016c4
 8012a2c:	00002005 	.word	0x00002005
 8012a30:	08018e71 	.word	0x08018e71
 8012a34:	08018eb0 	.word	0x08018eb0
 8012a38:	08018ecb 	.word	0x08018ecb
 8012a3c:	08080000 	.word	0x08080000
 8012a40:	00002009 	.word	0x00002009
 8012a44:	08018f44 	.word	0x08018f44
 8012a48:	0001d4c0 	.word	0x0001d4c0
 8012a4c:	08018e5b 	.word	0x08018e5b
 8012a50:	08018e42 	.word	0x08018e42
 8012a54:	08013ec1 	.word	0x08013ec1
 8012a58:	08013fa1 	.word	0x08013fa1
 8012a5c:	08018ed4 	.word	0x08018ed4
 8012a60:	08018f6a 	.word	0x08018f6a
 8012a64:	08018f01 	.word	0x08018f01
 8012a68:	00002008 	.word	0x00002008
 8012a6c:	08018f0e 	.word	0x08018f0e
 8012a70:	08018f17 	.word	0x08018f17
 8012a74:	08018f30 	.word	0x08018f30
 8012a78:	08017b10 	.word	0x08017b10

08012a7c <MX_LPTIM1_Init>:
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8012a7c:	22e0      	movs	r2, #224	; 0xe0
  hlptim1.Instance = LPTIM1;
 8012a7e:	480a      	ldr	r0, [pc, #40]	; (8012aa8 <MX_LPTIM1_Init+0x2c>)
 8012a80:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <MX_LPTIM1_Init+0x30>)
{
 8012a82:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 8012a84:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8012a86:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8012a88:	0112      	lsls	r2, r2, #4
 8012a8a:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8012a8c:	4a08      	ldr	r2, [pc, #32]	; (8012ab0 <MX_LPTIM1_Init+0x34>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8012a8e:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8012a90:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8012a92:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8012a94:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8012a96:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8012a98:	f7fa f8e0 	bl	800cc5c <HAL_LPTIM_Init>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d001      	beq.n	8012aa4 <MX_LPTIM1_Init+0x28>
  {
    Error_Handler();
 8012aa0:	f000 f96c 	bl	8012d7c <Error_Handler>
  }

}
 8012aa4:	bd10      	pop	{r4, pc}
 8012aa6:	46c0      	nop			; (mov r8, r8)
 8012aa8:	200018b0 	.word	0x200018b0
 8012aac:	40007c00 	.word	0x40007c00
 8012ab0:	0000ffff 	.word	0x0000ffff

08012ab4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 8012ab4:	4b09      	ldr	r3, [pc, #36]	; (8012adc <HAL_LPTIM_MspInit+0x28>)
 8012ab6:	6802      	ldr	r2, [r0, #0]
{
 8012ab8:	b510      	push	{r4, lr}
  if(lptimHandle->Instance==LPTIM1)
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d10d      	bne.n	8012ada <HAL_LPTIM_MspInit+0x26>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8012abe:	2380      	movs	r3, #128	; 0x80
 8012ac0:	4a07      	ldr	r2, [pc, #28]	; (8012ae0 <HAL_LPTIM_MspInit+0x2c>)
 8012ac2:	061b      	lsls	r3, r3, #24
 8012ac4:	6b91      	ldr	r1, [r2, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 8012ac6:	200d      	movs	r0, #13
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8012ac8:	430b      	orrs	r3, r1
 8012aca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 8012acc:	2101      	movs	r1, #1
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f7f8 fd02 	bl	800b4d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8012ad4:	200d      	movs	r0, #13
 8012ad6:	f7f8 fd29 	bl	800b52c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8012ada:	bd10      	pop	{r4, pc}
 8012adc:	40007c00 	.word	0x40007c00
 8012ae0:	40021000 	.word	0x40021000

08012ae4 <lrw_GetSF>:
  uint8_t  GetNbOfReset(void);
  void                       ActivateClassC(void);
  void                       DeActivateClassC(void);

  uint8_t GetSF(void) {
    return packet.GetSF();
 8012ae4:	4b02      	ldr	r3, [pc, #8]	; (8012af0 <lrw_GetSF+0xc>)
 8012ae6:	681a      	ldr	r2, [r3, #0]
 * DESCRIPTION
 *        Why we wanna see these? Idk, srsly stop asking me.
 *        Surf web yourself, I'm cargo culting this one.
 */
uint8_t lrw_GetSF(void) {
  return gLp->GetSF();
 8012ae8:	4b02      	ldr	r3, [pc, #8]	; (8012af4 <lrw_GetSF+0x10>)
 8012aea:	5cd0      	ldrb	r0, [r2, r3]
}
 8012aec:	4770      	bx	lr
 8012aee:	46c0      	nop			; (mov r8, r8)
 8012af0:	20001850 	.word	0x20001850
 8012af4:	0000073c 	.word	0x0000073c

08012af8 <lrw_GetBW>:
  }

  eBandWidth GetBW(void) {
    return packet.GetBW();
 8012af8:	4b02      	ldr	r3, [pc, #8]	; (8012b04 <lrw_GetBW+0xc>)
 8012afa:	681a      	ldr	r2, [r3, #0]

eBandWidth lrw_GetBW(void) {
  return gLp->GetBW();
 8012afc:	4b02      	ldr	r3, [pc, #8]	; (8012b08 <lrw_GetBW+0x10>)
 8012afe:	5cd0      	ldrb	r0, [r2, r3]
}
 8012b00:	4770      	bx	lr
 8012b02:	46c0      	nop			; (mov r8, r8)
 8012b04:	20001850 	.word	0x20001850
 8012b08:	0000073f 	.word	0x0000073f

08012b0c <lrw_SyncBackUpFlash>:
 *        This may very well be the purpose of the commented out code within
 *        SetProvisionning, but that forces a struct and setting every value
 *        always. Too rigid.
 */
void lrw_SyncBackUpFlash(void) {
  Crc64((uint8_t *)&BackUpFlash, offsetof(struct sBackUpFlash, CrcHigh), &BackUpFlash.CrcLow, &BackUpFlash.CrcHigh);
 8012b0c:	21bc      	movs	r1, #188	; 0xbc
void lrw_SyncBackUpFlash(void) {
 8012b0e:	b510      	push	{r4, lr}
  Crc64((uint8_t *)&BackUpFlash, offsetof(struct sBackUpFlash, CrcHigh), &BackUpFlash.CrcLow, &BackUpFlash.CrcHigh);
 8012b10:	4c09      	ldr	r4, [pc, #36]	; (8012b38 <lrw_SyncBackUpFlash+0x2c>)
 8012b12:	4b0a      	ldr	r3, [pc, #40]	; (8012b3c <lrw_SyncBackUpFlash+0x30>)
 8012b14:	0020      	movs	r0, r4
 8012b16:	4a0a      	ldr	r2, [pc, #40]	; (8012b40 <lrw_SyncBackUpFlash+0x34>)
 8012b18:	0049      	lsls	r1, r1, #1
 8012b1a:	f7ff f817 	bl	8011b4c <_Z5Crc64PhiPmS0_>
  mcu.StoreContext(&BackUpFlash, EEPROM_LORA, sizeof BackUpFlash);
 8012b1e:	23c0      	movs	r3, #192	; 0xc0
 8012b20:	4a08      	ldr	r2, [pc, #32]	; (8012b44 <lrw_SyncBackUpFlash+0x38>)
 8012b22:	0021      	movs	r1, r4
 8012b24:	005b      	lsls	r3, r3, #1
 8012b26:	4808      	ldr	r0, [pc, #32]	; (8012b48 <lrw_SyncBackUpFlash+0x3c>)
 8012b28:	f7fb fac3 	bl	800e0b2 <_ZN12McuSTM32L07112StoreContextEPKvmm>
  gLp->RestoreContext();
 8012b2c:	4b07      	ldr	r3, [pc, #28]	; (8012b4c <lrw_SyncBackUpFlash+0x40>)
 8012b2e:	6818      	ldr	r0, [r3, #0]
 8012b30:	f7fb fda2 	bl	800e678 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14RestoreContextEv>
}
 8012b34:	bd10      	pop	{r4, pc}
 8012b36:	46c0      	nop			; (mov r8, r8)
 8012b38:	200016cc 	.word	0x200016cc
 8012b3c:	20001844 	.word	0x20001844
 8012b40:	20001848 	.word	0x20001848
 8012b44:	08080010 	.word	0x08080010
 8012b48:	20001988 	.word	0x20001988
 8012b4c:	20001850 	.word	0x20001850

08012b50 <lrw_SetProvisionning>:

void lrw_SetProvisionning(void) {
 8012b50:	b510      	push	{r4, lr}
  gLp->SetProvisionning();
 8012b52:	4b02      	ldr	r3, [pc, #8]	; (8012b5c <lrw_SetProvisionning+0xc>)
 8012b54:	6818      	ldr	r0, [r3, #0]
 8012b56:	f7fb fd93 	bl	800e680 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE16SetProvisionningEv>
}
 8012b5a:	bd10      	pop	{r4, pc}
 8012b5c:	20001850 	.word	0x20001850

08012b60 <_ZL8DebugArrPKvj>:
  default:
    DEBUG_MSG("IRQ Unhandled\n");
  }
}

void DebugArr(const void *buf, size_t len) {
 8012b60:	b570      	push	{r4, r5, r6, lr}
 8012b62:	0004      	movs	r4, r0
 8012b64:	1845      	adds	r5, r0, r1
  for(size_t i = 0; i < len; i++) {
    DEBUG_PRINTF("%02x ", ((const uint8_t *)buf)[i]);
 8012b66:	7822      	ldrb	r2, [r4, #0]
 8012b68:	4903      	ldr	r1, [pc, #12]	; (8012b78 <_ZL8DebugArrPKvj+0x18>)
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	3401      	adds	r4, #1
 8012b6e:	f7f7 fe1d 	bl	800a7ac <SEGGER_RTT_printf>
  for(size_t i = 0; i < len; i++) {
 8012b72:	42ac      	cmp	r4, r5
 8012b74:	d1f7      	bne.n	8012b66 <_ZL8DebugArrPKvj+0x6>
  }
}
 8012b76:	bd70      	pop	{r4, r5, r6, pc}
 8012b78:	08019002 	.word	0x08019002

08012b7c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8012b7c:	b510      	push	{r4, lr}
  switch(GPIO_Pin) {
 8012b7e:	2808      	cmp	r0, #8
 8012b80:	d02c      	beq.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
 8012b82:	d808      	bhi.n	8012b96 <HAL_GPIO_EXTI_Callback+0x1a>
 8012b84:	2801      	cmp	r0, #1
 8012b86:	d018      	beq.n	8012bba <HAL_GPIO_EXTI_Callback+0x3e>
 8012b88:	2802      	cmp	r0, #2
 8012b8a:	d031      	beq.n	8012bf0 <HAL_GPIO_EXTI_Callback+0x74>
    DEBUG_MSG("IRQ Unhandled\n");
 8012b8c:	4920      	ldr	r1, [pc, #128]	; (8012c10 <HAL_GPIO_EXTI_Callback+0x94>)
 8012b8e:	2000      	movs	r0, #0
 8012b90:	f7f7 fc4c 	bl	800a42c <SEGGER_RTT_WriteString>
}
 8012b94:	e022      	b.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
  switch(GPIO_Pin) {
 8012b96:	2380      	movs	r3, #128	; 0x80
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	4298      	cmp	r0, r3
 8012b9c:	d02d      	beq.n	8012bfa <HAL_GPIO_EXTI_Callback+0x7e>
 8012b9e:	2380      	movs	r3, #128	; 0x80
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	4298      	cmp	r0, r3
 8012ba4:	d01a      	beq.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
 8012ba6:	2820      	cmp	r0, #32
 8012ba8:	d1f0      	bne.n	8012b8c <HAL_GPIO_EXTI_Callback+0x10>
    if(userIt == 0) {
 8012baa:	4b1a      	ldr	r3, [pc, #104]	; (8012c14 <HAL_GPIO_EXTI_Callback+0x98>)
 8012bac:	695a      	ldr	r2, [r3, #20]
 8012bae:	2a00      	cmp	r2, #0
 8012bb0:	d11b      	bne.n	8012bea <HAL_GPIO_EXTI_Callback+0x6e>
      Funcext(objext);
 8012bb2:	689a      	ldr	r2, [r3, #8]
 8012bb4:	68d8      	ldr	r0, [r3, #12]
 8012bb6:	4790      	blx	r2
 8012bb8:	e010      	b.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
    DEBUG_MSG("IRQ Button Pin\n");
 8012bba:	4917      	ldr	r1, [pc, #92]	; (8012c18 <HAL_GPIO_EXTI_Callback+0x9c>)
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	f7f7 fc35 	bl	800a42c <SEGGER_RTT_WriteString>
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8012bc2:	2304      	movs	r3, #4
 8012bc4:	4a15      	ldr	r2, [pc, #84]	; (8012c1c <HAL_GPIO_EXTI_Callback+0xa0>)
    if(gLp->IsJoined() == NOT_JOINED && gLp->GetIsOtaDevice() == OTA_DEVICE) {
 8012bc6:	4c16      	ldr	r4, [pc, #88]	; (8012c20 <HAL_GPIO_EXTI_Callback+0xa4>)
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8012bc8:	6811      	ldr	r1, [r2, #0]
    if(gLp->IsJoined() == NOT_JOINED && gLp->GetIsOtaDevice() == OTA_DEVICE) {
 8012bca:	6820      	ldr	r0, [r4, #0]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8012bcc:	430b      	orrs	r3, r1
 8012bce:	6013      	str	r3, [r2, #0]
    if(gLp->IsJoined() == NOT_JOINED && gLp->GetIsOtaDevice() == OTA_DEVICE) {
 8012bd0:	f7fb fd44 	bl	800e65c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE8IsJoinedEv>
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d002      	beq.n	8012bde <HAL_GPIO_EXTI_Callback+0x62>
    ButtonISR();
 8012bd8:	f7ff fd16 	bl	8012608 <ButtonISR>
}
 8012bdc:	bd10      	pop	{r4, pc}
    if(gLp->IsJoined() == NOT_JOINED && gLp->GetIsOtaDevice() == OTA_DEVICE) {
 8012bde:	6820      	ldr	r0, [r4, #0]
 8012be0:	f7fb fd52 	bl	800e688 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14GetIsOtaDeviceEv>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d0f9      	beq.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
 8012be8:	e7f6      	b.n	8012bd8 <HAL_GPIO_EXTI_Callback+0x5c>
      _UserFuncext();
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	4798      	blx	r3
 8012bee:	e7f5      	b.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
    HW_ExitStopMode();
 8012bf0:	f7ff fc10 	bl	8012414 <HW_ExitStopMode>
    NFCISR();
 8012bf4:	f7ff fe02 	bl	80127fc <NFCISR>
    break;
 8012bf8:	e7f0      	b.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
    ReedSwitchISR();
 8012bfa:	f7ff fd89 	bl	8012710 <ReedSwitchISR>
    triggerType = 0;
 8012bfe:	2000      	movs	r0, #0
 8012c00:	4b08      	ldr	r3, [pc, #32]	; (8012c24 <HAL_GPIO_EXTI_Callback+0xa8>)
    DEBUG_PRINTF("IRQ Reed Switch Pin trigger:%u\n", triggerType);
 8012c02:	0002      	movs	r2, r0
 8012c04:	4908      	ldr	r1, [pc, #32]	; (8012c28 <HAL_GPIO_EXTI_Callback+0xac>)
    triggerType = 0;
 8012c06:	7018      	strb	r0, [r3, #0]
    DEBUG_PRINTF("IRQ Reed Switch Pin trigger:%u\n", triggerType);
 8012c08:	f7f7 fdd0 	bl	800a7ac <SEGGER_RTT_printf>
    break;
 8012c0c:	e7e6      	b.n	8012bdc <HAL_GPIO_EXTI_Callback+0x60>
 8012c0e:	46c0      	nop			; (mov r8, r8)
 8012c10:	08018fc3 	.word	0x08018fc3
 8012c14:	20001988 	.word	0x20001988
 8012c18:	08018f93 	.word	0x08018f93
 8012c1c:	40007000 	.word	0x40007000
 8012c20:	20001850 	.word	0x20001850
 8012c24:	200019a4 	.word	0x200019a4
 8012c28:	08018fa3 	.word	0x08018fa3

08012c2c <enqueueToSend>:
 *
 *    Interrupt context
 *        Ill-advised. May block, the battery voltage invokes 10ms HAL_Delay.
 *        And then there are all those sensor reads.
 */
void enqueueToSend(enum MsgType msg_type) {
 8012c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t i = 0;

  /* Pick an empty buffer to use */
  while(lrw.queue[i].len && ++i < LRW_QUEUE_LEN);
 8012c2e:	4c3b      	ldr	r4, [pc, #236]	; (8012d1c <enqueueToSend+0xf0>)
 8012c30:	7b65      	ldrb	r5, [r4, #13]
 8012c32:	2d00      	cmp	r5, #0
 8012c34:	d00d      	beq.n	8012c52 <enqueueToSend+0x26>
 8012c36:	7ee3      	ldrb	r3, [r4, #27]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d009      	beq.n	8012c50 <enqueueToSend+0x24>
 8012c3c:	0023      	movs	r3, r4
 8012c3e:	3329      	adds	r3, #41	; 0x29
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d038      	beq.n	8012cb8 <enqueueToSend+0x8c>

  /* It appears there's no empty buffer */
  if(i >= LRW_QUEUE_LEN) {
    DEBUG_MSG("LRW ERR Queue full!\n");
 8012c46:	4936      	ldr	r1, [pc, #216]	; (8012d20 <enqueueToSend+0xf4>)
 8012c48:	2000      	movs	r0, #0
 8012c4a:	f7f7 fbef 	bl	800a42c <SEGGER_RTT_WriteString>
    }
#endif
    break;
  }
  }
}
 8012c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(lrw.queue[i].len && ++i < LRW_QUEUE_LEN);
 8012c50:	2501      	movs	r5, #1
  lrw.queue[i].msg_type = msg_type;
 8012c52:	230e      	movs	r3, #14
 8012c54:	436b      	muls	r3, r5
 8012c56:	18e3      	adds	r3, r4, r3
 8012c58:	7318      	strb	r0, [r3, #12]
  switch(msg_type) {
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d02e      	beq.n	8012cbc <enqueueToSend+0x90>
 8012c5e:	2802      	cmp	r0, #2
 8012c60:	d1f5      	bne.n	8012c4e <enqueueToSend+0x22>
      uint32_t v = getBatteryVoltage() / 10;
 8012c62:	f7ff fa33 	bl	80120cc <getBatteryVoltage>
 8012c66:	210a      	movs	r1, #10
 8012c68:	f7f5 fa74 	bl	8008154 <__udivsi3>
      v = v < 201 ? 201 : v;
 8012c6c:	28c9      	cmp	r0, #201	; 0xc9
 8012c6e:	d200      	bcs.n	8012c72 <enqueueToSend+0x46>
 8012c70:	20c9      	movs	r0, #201	; 0xc9
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012c72:	230e      	movs	r3, #14
      v = v > 327 ? 327 : v;
 8012c74:	2248      	movs	r2, #72	; 0x48
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012c76:	436b      	muls	r3, r5
      v = v > 327 ? 327 : v;
 8012c78:	32ff      	adds	r2, #255	; 0xff
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012c7a:	18e3      	adds	r3, r4, r3
      v = v > 327 ? 327 : v;
 8012c7c:	4290      	cmp	r0, r2
 8012c7e:	d900      	bls.n	8012c82 <enqueueToSend+0x56>
 8012c80:	0010      	movs	r0, r2
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012c82:	3038      	adds	r0, #56	; 0x38
 8012c84:	7058      	strb	r0, [r3, #1]
      switch(detectedGesture) {
 8012c86:	4b27      	ldr	r3, [pc, #156]	; (8012d24 <enqueueToSend+0xf8>)
 8012c88:	781a      	ldrb	r2, [r3, #0]
 8012c8a:	2a02      	cmp	r2, #2
 8012c8c:	d030      	beq.n	8012cf0 <enqueueToSend+0xc4>
 8012c8e:	2a03      	cmp	r2, #3
 8012c90:	d036      	beq.n	8012d00 <enqueueToSend+0xd4>
 8012c92:	2a01      	cmp	r2, #1
 8012c94:	d13c      	bne.n	8012d10 <enqueueToSend+0xe4>
      case 1: gest = 0x00, gest_cnt = BackUpFlash.singleCount++; break;
 8012c96:	23b5      	movs	r3, #181	; 0xb5
 8012c98:	2700      	movs	r7, #0
 8012c9a:	4a23      	ldr	r2, [pc, #140]	; (8012d28 <enqueueToSend+0xfc>)
 8012c9c:	005b      	lsls	r3, r3, #1
 8012c9e:	5cd6      	ldrb	r6, [r2, r3]
 8012ca0:	1c71      	adds	r1, r6, #1
 8012ca2:	54d1      	strb	r1, [r2, r3]
      lrw.queue[i].buf[0] = gest | LRW_B0_TRIGGER_EVENT;
 8012ca4:	230e      	movs	r3, #14
 8012ca6:	435d      	muls	r5, r3
 8012ca8:	3b0d      	subs	r3, #13
 8012caa:	431f      	orrs	r7, r3
 8012cac:	5567      	strb	r7, [r4, r5]
      lrw.queue[i].len = 3;
 8012cae:	3302      	adds	r3, #2
      lrw.queue[i].buf[2] = gest_cnt;
 8012cb0:	1964      	adds	r4, r4, r5
 8012cb2:	70a6      	strb	r6, [r4, #2]
      lrw.queue[i].len = 3;
 8012cb4:	7363      	strb	r3, [r4, #13]
    break;
 8012cb6:	e7ca      	b.n	8012c4e <enqueueToSend+0x22>
  while(lrw.queue[i].len && ++i < LRW_QUEUE_LEN);
 8012cb8:	2502      	movs	r5, #2
 8012cba:	e7ca      	b.n	8012c52 <enqueueToSend+0x26>
      uint32_t v = getBatteryVoltage() / 10;
 8012cbc:	f7ff fa06 	bl	80120cc <getBatteryVoltage>
 8012cc0:	210a      	movs	r1, #10
 8012cc2:	f7f5 fa47 	bl	8008154 <__udivsi3>
      v = v < 201 ? 201 : v;
 8012cc6:	28c9      	cmp	r0, #201	; 0xc9
 8012cc8:	d200      	bcs.n	8012ccc <enqueueToSend+0xa0>
 8012cca:	20c9      	movs	r0, #201	; 0xc9
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012ccc:	230e      	movs	r3, #14
      v = v > 327 ? 327 : v;
 8012cce:	2248      	movs	r2, #72	; 0x48
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012cd0:	436b      	muls	r3, r5
      v = v > 327 ? 327 : v;
 8012cd2:	32ff      	adds	r2, #255	; 0xff
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012cd4:	18e3      	adds	r3, r4, r3
      v = v > 327 ? 327 : v;
 8012cd6:	4290      	cmp	r0, r2
 8012cd8:	d900      	bls.n	8012cdc <enqueueToSend+0xb0>
 8012cda:	0010      	movs	r0, r2
      lrw.queue[i].buf[1] = (v - 200) & 0x7f;
 8012cdc:	3038      	adds	r0, #56	; 0x38
 8012cde:	7058      	strb	r0, [r3, #1]
    lrw.queue[i].len = 2;
 8012ce0:	230e      	movs	r3, #14
 8012ce2:	2202      	movs	r2, #2
 8012ce4:	435d      	muls	r5, r3
 8012ce6:	1963      	adds	r3, r4, r5
 8012ce8:	735a      	strb	r2, [r3, #13]
    lrw.queue[i].buf[0] = 0;
 8012cea:	2300      	movs	r3, #0
 8012cec:	5563      	strb	r3, [r4, r5]
    break;
 8012cee:	e7ae      	b.n	8012c4e <enqueueToSend+0x22>
      case 2: gest = 0x10, gest_cnt = BackUpFlash.doubleCount++; break;
 8012cf0:	236c      	movs	r3, #108	; 0x6c
 8012cf2:	4a0d      	ldr	r2, [pc, #52]	; (8012d28 <enqueueToSend+0xfc>)
 8012cf4:	33ff      	adds	r3, #255	; 0xff
 8012cf6:	5cd6      	ldrb	r6, [r2, r3]
 8012cf8:	2710      	movs	r7, #16
 8012cfa:	1c71      	adds	r1, r6, #1
 8012cfc:	54d1      	strb	r1, [r2, r3]
 8012cfe:	e7d1      	b.n	8012ca4 <enqueueToSend+0x78>
      case 3: gest = 0x20, gest_cnt = BackUpFlash.longCount++; break;
 8012d00:	23b6      	movs	r3, #182	; 0xb6
 8012d02:	4a09      	ldr	r2, [pc, #36]	; (8012d28 <enqueueToSend+0xfc>)
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	5cd6      	ldrb	r6, [r2, r3]
 8012d08:	2720      	movs	r7, #32
 8012d0a:	1c71      	adds	r1, r6, #1
 8012d0c:	54d1      	strb	r1, [r2, r3]
 8012d0e:	e7c9      	b.n	8012ca4 <enqueueToSend+0x78>
      default: DBG_PRINTF("LRW ERR Unknown gesture %u\n", detectedGesture);
 8012d10:	4906      	ldr	r1, [pc, #24]	; (8012d2c <enqueueToSend+0x100>)
 8012d12:	2000      	movs	r0, #0
 8012d14:	f7f7 fd4a 	bl	800a7ac <SEGGER_RTT_printf>
 8012d18:	e7c4      	b.n	8012ca4 <enqueueToSend+0x78>
 8012d1a:	46c0      	nop			; (mov r8, r8)
 8012d1c:	2000195d 	.word	0x2000195d
 8012d20:	08019008 	.word	0x08019008
 8012d24:	2000184d 	.word	0x2000184d
 8012d28:	200016cc 	.word	0x200016cc
 8012d2c:	0801901d 	.word	0x0801901d

08012d30 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8012d30:	b570      	push	{r4, r5, r6, lr}
  currentTime = HW_RTCGetSTime();
 8012d32:	f7ff fb4d 	bl	80123d0 <HW_RTCGetSTime>
  timeDifference = currentTime - startTime;
 8012d36:	4d0c      	ldr	r5, [pc, #48]	; (8012d68 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
  currentTime = HW_RTCGetSTime();
 8012d38:	0006      	movs	r6, r0
  timeDifference = currentTime - startTime;
 8012d3a:	682b      	ldr	r3, [r5, #0]
  DEBUG_PRINTF("RTC WAKEUP diff:%u\n", timeDifference);
 8012d3c:	490b      	ldr	r1, [pc, #44]	; (8012d6c <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
  timeDifference = currentTime - startTime;
 8012d3e:	1ac4      	subs	r4, r0, r3
  DEBUG_PRINTF("RTC WAKEUP diff:%u\n", timeDifference);
 8012d40:	0022      	movs	r2, r4
 8012d42:	2000      	movs	r0, #0
 8012d44:	f7f7 fd32 	bl	800a7ac <SEGGER_RTT_printf>
  if(timeDifference >= timeBase) { // 24h in ms
 8012d48:	4b09      	ldr	r3, [pc, #36]	; (8012d70 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 8012d4a:	429c      	cmp	r4, r3
 8012d4c:	d907      	bls.n	8012d5e <HAL_RTCEx_WakeUpTimerEventCallback+0x2e>
    triggerType = 8;
 8012d4e:	2208      	movs	r2, #8
 8012d50:	4b08      	ldr	r3, [pc, #32]	; (8012d74 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
    enqueueToSend(HEARTBEAT);
 8012d52:	2000      	movs	r0, #0
    triggerType = 8;
 8012d54:	701a      	strb	r2, [r3, #0]
    enqueueToSend(HEARTBEAT);
 8012d56:	f7ff ff69 	bl	8012c2c <enqueueToSend>
    startTime = currentTime;
 8012d5a:	602e      	str	r6, [r5, #0]
}
 8012d5c:	bd70      	pop	{r4, r5, r6, pc}
    DEBUG_MSG("RTC ERR Why did I wake up?\n");
 8012d5e:	4906      	ldr	r1, [pc, #24]	; (8012d78 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8012d60:	2000      	movs	r0, #0
 8012d62:	f7f7 fb63 	bl	800a42c <SEGGER_RTT_WriteString>
}
 8012d66:	e7f9      	b.n	8012d5c <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>
 8012d68:	200019a0 	.word	0x200019a0
 8012d6c:	08018fd2 	.word	0x08018fd2
 8012d70:	0001517f 	.word	0x0001517f
 8012d74:	200019a4 	.word	0x200019a4
 8012d78:	08018fe6 	.word	0x08018fe6

08012d7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8012d7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  DBG_PRINTF("ERROR OCCURRED\n");
 8012d7e:	490a      	ldr	r1, [pc, #40]	; (8012da8 <Error_Handler+0x2c>)
 8012d80:	2000      	movs	r0, #0
 8012d82:	f7f7 fd13 	bl	800a7ac <SEGGER_RTT_printf>
  HAL_Delay(10000);
 8012d86:	4809      	ldr	r0, [pc, #36]	; (8012dac <Error_Handler+0x30>)
 8012d88:	f7f8 f89a 	bl	800aec0 <HAL_Delay>
  DBG_PRINTF("REBOOTING NOW...\n");
 8012d8c:	4908      	ldr	r1, [pc, #32]	; (8012db0 <Error_Handler+0x34>)
 8012d8e:	2000      	movs	r0, #0
 8012d90:	f7f7 fd0c 	bl	800a7ac <SEGGER_RTT_printf>
 8012d94:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012d98:	4b06      	ldr	r3, [pc, #24]	; (8012db4 <Error_Handler+0x38>)
 8012d9a:	4a07      	ldr	r2, [pc, #28]	; (8012db8 <Error_Handler+0x3c>)
 8012d9c:	60da      	str	r2, [r3, #12]
 8012d9e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8012da2:	46c0      	nop			; (mov r8, r8)
 8012da4:	e7fd      	b.n	8012da2 <Error_Handler+0x26>
 8012da6:	46c0      	nop			; (mov r8, r8)
 8012da8:	08018f71 	.word	0x08018f71
 8012dac:	00002710 	.word	0x00002710
 8012db0:	08018f81 	.word	0x08018f81
 8012db4:	e000ed00 	.word	0xe000ed00
 8012db8:	05fa0004 	.word	0x05fa0004

08012dbc <_Z18SystemClock_Configv>:
{
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012dc0:	2234      	movs	r2, #52	; 0x34
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	a80d      	add	r0, sp, #52	; 0x34
 8012dc6:	f002 fc89 	bl	80156dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012dca:	2214      	movs	r2, #20
 8012dcc:	2100      	movs	r1, #0
 8012dce:	4668      	mov	r0, sp
 8012dd0:	f002 fc84 	bl	80156dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012dd4:	2220      	movs	r2, #32
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	a805      	add	r0, sp, #20
 8012dda:	f002 fc7f 	bl	80156dc <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012dde:	2380      	movs	r3, #128	; 0x80
 8012de0:	491d      	ldr	r1, [pc, #116]	; (8012e58 <_Z18SystemClock_Configv+0x9c>)
 8012de2:	4c1e      	ldr	r4, [pc, #120]	; (8012e5c <_Z18SystemClock_Configv+0xa0>)
 8012de4:	680a      	ldr	r2, [r1, #0]
 8012de6:	011b      	lsls	r3, r3, #4
 8012de8:	4022      	ands	r2, r4
 8012dea:	4313      	orrs	r3, r2
 8012dec:	600b      	str	r3, [r1, #0]
  HAL_PWR_EnableBkUpAccess();
 8012dee:	f7fa f8a9 	bl	800cf44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8012df2:	4a1b      	ldr	r2, [pc, #108]	; (8012e60 <_Z18SystemClock_Configv+0xa4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012df4:	a80d      	add	r0, sp, #52	; 0x34
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8012df6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8012df8:	4023      	ands	r3, r4
 8012dfa:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8012dfc:	231c      	movs	r3, #28
 8012dfe:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8012e00:	33e4      	adds	r3, #228	; 0xe4
 8012e02:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8012e04:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012e06:	3bff      	subs	r3, #255	; 0xff
 8012e08:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8012e0a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8012e0c:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8012e0e:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8012e10:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8012e12:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8012e14:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012e16:	f7fa f8e9 	bl	800cfec <HAL_RCC_OscConfig>
 8012e1a:	1e01      	subs	r1, r0, #0
 8012e1c:	d001      	beq.n	8012e22 <_Z18SystemClock_Configv+0x66>
    Error_Handler();
 8012e1e:	f7ff ffad 	bl	8012d7c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012e22:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8012e24:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012e26:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012e28:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012e2a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8012e2c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012e2e:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8012e30:	f7fa fb32 	bl	800d498 <HAL_RCC_ClockConfig>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d1f2      	bne.n	8012e1e <_Z18SystemClock_Configv+0x62>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8012e38:	23a8      	movs	r3, #168	; 0xa8
 8012e3a:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012e3c:	2380      	movs	r3, #128	; 0x80
 8012e3e:	025b      	lsls	r3, r3, #9
 8012e40:	9306      	str	r3, [sp, #24]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012e42:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012e44:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012e46:	031b      	lsls	r3, r3, #12
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012e48:	a805      	add	r0, sp, #20
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8012e4a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012e4c:	f7fa fbf2 	bl	800d634 <HAL_RCCEx_PeriphCLKConfig>
 8012e50:	2800      	cmp	r0, #0
 8012e52:	d1e4      	bne.n	8012e1e <_Z18SystemClock_Configv+0x62>
}
 8012e54:	b01a      	add	sp, #104	; 0x68
 8012e56:	bd10      	pop	{r4, pc}
 8012e58:	40007000 	.word	0x40007000
 8012e5c:	ffffe7ff 	.word	0xffffe7ff
 8012e60:	40021000 	.word	0x40021000

08012e64 <main>:
int main(void) {
 8012e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e66:	4cce      	ldr	r4, [pc, #824]	; (80131a0 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e68:	2500      	movs	r5, #0
int main(void) {
 8012e6a:	44a5      	add	sp, r4
  HAL_Init();
 8012e6c:	f7f8 f802 	bl	800ae74 <HAL_Init>
  SystemClock_Config();
 8012e70:	f7ff ffa4 	bl	8012dbc <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8012e74:	f7ff f824 	bl	8011ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 8012e78:	f7ff f804 	bl	8011e84 <MX_DMA_Init>
  MX_ADC_Init();
 8012e7c:	f7fe febe 	bl	8011bfc <MX_ADC_Init>
  MX_I2C1_Init();
 8012e80:	f7ff fb00 	bl	8012484 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 8012e84:	f7ff fdfa 	bl	8012a7c <MX_LPTIM1_Init>
  MX_RTC_Init();
 8012e88:	f001 f9ce 	bl	8014228 <MX_RTC_Init>
  MX_SPI1_Init();
 8012e8c:	f001 fa08 	bl	80142a0 <MX_SPI1_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e90:	220c      	movs	r2, #12
 8012e92:	2100      	movs	r1, #0
 8012e94:	a815      	add	r0, sp, #84	; 0x54
 8012e96:	f002 fc21 	bl	80156dc <memset>
  GPIO_InitStruct.Pin = LIGHT_Int_Pin;
 8012e9a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LIGHT_Int_GPIO_Port, &GPIO_InitStruct);
 8012e9c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012e9e:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = LIGHT_Int_Pin;
 8012ea0:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(LIGHT_Int_GPIO_Port, &GPIO_InitStruct);
 8012ea2:	a913      	add	r1, sp, #76	; 0x4c
 8012ea4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LIGHT_Int_Pin;
 8012ea6:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012ea8:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LIGHT_Int_GPIO_Port, &GPIO_InitStruct);
 8012eaa:	f7f8 fd8b 	bl	800b9c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 8012eae:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = TEMP_Int_Pin;
 8012eb0:	2308      	movs	r3, #8
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 8012eb2:	a913      	add	r1, sp, #76	; 0x4c
 8012eb4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TEMP_Int_Pin;
 8012eb6:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012eb8:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eba:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(TEMP_Int_GPIO_Port, &GPIO_InitStruct);
 8012ebc:	f7f8 fd82 	bl	800b9c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RF_Switch_GPIO_Port, RF_Switch_Pin, GPIO_PIN_SET);
 8012ec0:	20a0      	movs	r0, #160	; 0xa0
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	2104      	movs	r1, #4
 8012ec6:	05c0      	lsls	r0, r0, #23
 8012ec8:	f7f8 fe42 	bl	800bb50 <HAL_GPIO_WritePin>
  DEBUG_PRINTF("BOOTED mainfw RTT@0x%08x\n", &_SEGGER_RTT);
 8012ecc:	4ab5      	ldr	r2, [pc, #724]	; (80131a4 <main+0x340>)
 8012ece:	49b6      	ldr	r1, [pc, #728]	; (80131a8 <main+0x344>)
 8012ed0:	0028      	movs	r0, r5
 8012ed2:	f7f7 fc6b 	bl	800a7ac <SEGGER_RTT_printf>
  I2C_Scan();
 8012ed6:	f7ff f8c9 	bl	801206c <I2C_Scan>
  HAL_GPIO_WritePin(DC_Conv_Mode_GPIO_Port, DC_Conv_Mode_Pin, GPIO_PIN_SET);
 8012eda:	2180      	movs	r1, #128	; 0x80
 8012edc:	20a0      	movs	r0, #160	; 0xa0
 8012ede:	2201      	movs	r2, #1
 8012ee0:	0049      	lsls	r1, r1, #1
 8012ee2:	05c0      	lsls	r0, r0, #23
 8012ee4:	f7f8 fe34 	bl	800bb50 <HAL_GPIO_WritePin>
  SX126x RadioUser(LORA_BUSY, LORA_CS, LORA_RESET, TX_RX_IT);
 8012ee8:	2180      	movs	r1, #128	; 0x80
 8012eea:	4bb0      	ldr	r3, [pc, #704]	; (80131ac <main+0x348>)
 8012eec:	ac0f      	add	r4, sp, #60	; 0x3c
 8012eee:	0109      	lsls	r1, r1, #4
 8012ef0:	0020      	movs	r0, r4
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	2210      	movs	r2, #16
 8012ef6:	4bae      	ldr	r3, [pc, #696]	; (80131b0 <main+0x34c>)
 8012ef8:	f001 fe9c 	bl	8014c34 <_ZN6SX126xC1E7PinNameS0_S0_S0_>
  LoraWanObject<LoraRegionsEU, SX126x> Lp(LoraWanKeys, &RadioUser, EEPROM_LORA);
 8012efc:	48ad      	ldr	r0, [pc, #692]	; (80131b4 <main+0x350>)
 8012efe:	4bae      	ldr	r3, [pc, #696]	; (80131b8 <main+0x354>)
 8012f00:	466a      	mov	r2, sp
 8012f02:	9305      	str	r3, [sp, #20]
 8012f04:	0003      	movs	r3, r0
 8012f06:	9404      	str	r4, [sp, #16]
 8012f08:	330c      	adds	r3, #12
 8012f0a:	cb52      	ldmia	r3!, {r1, r4, r6}
 8012f0c:	c252      	stmia	r2!, {r1, r4, r6}
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	af1f      	add	r7, sp, #124	; 0x7c
 8012f12:	6013      	str	r3, [r2, #0]
 8012f14:	c80e      	ldmia	r0!, {r1, r2, r3}
 8012f16:	0038      	movs	r0, r7
 8012f18:	f7fb fb1a 	bl	800e550 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xEC1E12sLoRaWanKeysPS1_m>
  gLp = &Lp;
 8012f1c:	4ba7      	ldr	r3, [pc, #668]	; (80131bc <main+0x358>)
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 8012f1e:	211a      	movs	r1, #26
 8012f20:	48a7      	ldr	r0, [pc, #668]	; (80131c0 <main+0x35c>)
  gLp = &Lp;
 8012f22:	601f      	str	r7, [r3, #0]
  HAL_LPTIM_Counter_Start_IT(&hlptim1, TIMER_COUNT);
 8012f24:	f7f9 ffca 	bl	800cebc <HAL_LPTIM_Counter_Start_IT>
  Lp.RestoreContext();
 8012f28:	0038      	movs	r0, r7
 8012f2a:	f7fb fba5 	bl	800e678 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14RestoreContextEv>
  DEBUG_PRINTF("EEPROM RAM BackUpFlash.MacTxDataRate    0x%02x\n", BackUpFlash.MacTxDataRate);
 8012f2e:	4ca5      	ldr	r4, [pc, #660]	; (80131c4 <main+0x360>)
 8012f30:	49a5      	ldr	r1, [pc, #660]	; (80131c8 <main+0x364>)
 8012f32:	7822      	ldrb	r2, [r4, #0]
 8012f34:	0028      	movs	r0, r5
 8012f36:	f7f7 fc39 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM RAM BackUpFlash.MacTxPower       0x%02x\n", BackUpFlash.MacTxPower);
 8012f3a:	7862      	ldrb	r2, [r4, #1]
 8012f3c:	49a3      	ldr	r1, [pc, #652]	; (80131cc <main+0x368>)
 8012f3e:	0028      	movs	r0, r5
 8012f40:	f7f7 fc34 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM RAM BackUpFlash.MacChMask        0x%02x\n", BackUpFlash.MacChMask);
 8012f44:	8862      	ldrh	r2, [r4, #2]
 8012f46:	49a2      	ldr	r1, [pc, #648]	; (80131d0 <main+0x36c>)
 8012f48:	0028      	movs	r0, r5
 8012f4a:	f7f7 fc2f 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM RAM BackUpFlash.MacNbTrans       0x%02x\n", BackUpFlash.MacNbTrans);
 8012f4e:	7922      	ldrb	r2, [r4, #4]
 8012f50:	49a0      	ldr	r1, [pc, #640]	; (80131d4 <main+0x370>)
 8012f52:	0028      	movs	r0, r5
 8012f54:	f7f7 fc2a 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM ROM BackUpFlash.MacRx2Frequency  0x%02x\n", BackUpFlash.MacRx2Frequency);
 8012f58:	68a2      	ldr	r2, [r4, #8]
 8012f5a:	499f      	ldr	r1, [pc, #636]	; (80131d8 <main+0x374>)
 8012f5c:	0028      	movs	r0, r5
 8012f5e:	f7f7 fc25 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM ROM BackUpFlash.JoinedStatus     0x%02x\n", BackUpFlash.JoinedStatus);
 8012f62:	239e      	movs	r3, #158	; 0x9e
 8012f64:	005b      	lsls	r3, r3, #1
 8012f66:	5ce2      	ldrb	r2, [r4, r3]
 8012f68:	499c      	ldr	r1, [pc, #624]	; (80131dc <main+0x378>)
 8012f6a:	0028      	movs	r0, r5
 8012f6c:	f7f7 fc1e 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM ROM BackUpFlash.CrcHigh          0x%02x\n", BackUpFlash.CrcHigh);
 8012f70:	0022      	movs	r2, r4
 8012f72:	32fc      	adds	r2, #252	; 0xfc
 8012f74:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8012f76:	499a      	ldr	r1, [pc, #616]	; (80131e0 <main+0x37c>)
 8012f78:	0028      	movs	r0, r5
 8012f7a:	f7f7 fc17 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_PRINTF("EEPROM ROM BackUpFlash.CrcLow           0x%02x\n", BackUpFlash.CrcLow);
 8012f7e:	23be      	movs	r3, #190	; 0xbe
 8012f80:	005b      	lsls	r3, r3, #1
 8012f82:	58e2      	ldr	r2, [r4, r3]
 8012f84:	4997      	ldr	r1, [pc, #604]	; (80131e4 <main+0x380>)
 8012f86:	0028      	movs	r0, r5
 8012f88:	f7f7 fc10 	bl	800a7ac <SEGGER_RTT_printf>
  DEBUG_MSG("EEPROM ROM BackUpFlash.devEui "), DebugArr(BackUpFlash.devEui, 8), DEBUG_MSG("\n");
 8012f8c:	4996      	ldr	r1, [pc, #600]	; (80131e8 <main+0x384>)
 8012f8e:	0028      	movs	r0, r5
 8012f90:	f7f7 fa4c 	bl	800a42c <SEGGER_RTT_WriteString>
 8012f94:	2108      	movs	r1, #8
 8012f96:	4895      	ldr	r0, [pc, #596]	; (80131ec <main+0x388>)
 8012f98:	f7ff fde2 	bl	8012b60 <_ZL8DebugArrPKvj>
 8012f9c:	4e94      	ldr	r6, [pc, #592]	; (80131f0 <main+0x38c>)
 8012f9e:	0028      	movs	r0, r5
 8012fa0:	0031      	movs	r1, r6
 8012fa2:	f7f7 fa43 	bl	800a42c <SEGGER_RTT_WriteString>
  DEBUG_MSG("EEPROM ROM BackUpFlash.appEui "), DebugArr(BackUpFlash.appEui, 8), DEBUG_MSG("\n");
 8012fa6:	4993      	ldr	r1, [pc, #588]	; (80131f4 <main+0x390>)
 8012fa8:	0028      	movs	r0, r5
 8012faa:	f7f7 fa3f 	bl	800a42c <SEGGER_RTT_WriteString>
 8012fae:	2108      	movs	r1, #8
 8012fb0:	4891      	ldr	r0, [pc, #580]	; (80131f8 <main+0x394>)
 8012fb2:	f7ff fdd5 	bl	8012b60 <_ZL8DebugArrPKvj>
 8012fb6:	0031      	movs	r1, r6
 8012fb8:	0028      	movs	r0, r5
 8012fba:	f7f7 fa37 	bl	800a42c <SEGGER_RTT_WriteString>
  DEBUG_MSG("EEPROM ROM BackUpFlash.appKey "), DebugArr(BackUpFlash.appKey, 16), DEBUG_MSG("\n");
 8012fbe:	498f      	ldr	r1, [pc, #572]	; (80131fc <main+0x398>)
 8012fc0:	0028      	movs	r0, r5
 8012fc2:	f7f7 fa33 	bl	800a42c <SEGGER_RTT_WriteString>
 8012fc6:	2110      	movs	r1, #16
 8012fc8:	488d      	ldr	r0, [pc, #564]	; (8013200 <main+0x39c>)
 8012fca:	f7ff fdc9 	bl	8012b60 <_ZL8DebugArrPKvj>
 8012fce:	0031      	movs	r1, r6
 8012fd0:	0028      	movs	r0, r5
 8012fd2:	f7f7 fa2b 	bl	800a42c <SEGGER_RTT_WriteString>
  Lp.NewJoin();
 8012fd6:	0038      	movs	r0, r7
 8012fd8:	f7fb fb5a 	bl	800e690 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE7NewJoinEv>
  BackUpFlash.JoinedStatus = 0;
 8012fdc:	239e      	movs	r3, #158	; 0x9e
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8012fde:	4e89      	ldr	r6, [pc, #548]	; (8013204 <main+0x3a0>)
  BackUpFlash.JoinedStatus = 0;
 8012fe0:	005b      	lsls	r3, r3, #1
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8012fe2:	0030      	movs	r0, r6
  BackUpFlash.JoinedStatus = 0;
 8012fe4:	54e5      	strb	r5, [r4, r3]
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8012fe6:	f7fa fd55 	bl	800da94 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8012fea:	002a      	movs	r2, r5
 8012fec:	2103      	movs	r1, #3
 8012fee:	2002      	movs	r0, #2
 8012ff0:	f7f8 fa72 	bl	800b4d8 <HAL_NVIC_SetPriority>
  if(BackUpFlash.JoinedStatus)
 8012ff4:	239e      	movs	r3, #158	; 0x9e
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	5ce3      	ldrb	r3, [r4, r3]
 8012ffa:	42ab      	cmp	r3, r5
 8012ffc:	d004      	beq.n	8013008 <main+0x1a4>
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, timeBase - 1, timeBase - 1 <= UINT16_MAX ?
 8012ffe:	2206      	movs	r2, #6
 8013000:	4981      	ldr	r1, [pc, #516]	; (8013208 <main+0x3a4>)
 8013002:	0030      	movs	r0, r6
 8013004:	f7fa fcca 	bl	800d99c <HAL_RTCEx_SetWakeUpTimer_IT>
  NFC_Init();
 8013008:	f000 f9f2 	bl	80133f0 <NFC_Init>
ATECC_status = atcab_init(gCfg);
 801300c:	4b7f      	ldr	r3, [pc, #508]	; (801320c <main+0x3a8>)
 801300e:	6818      	ldr	r0, [r3, #0]
 8013010:	f001 faf6 	bl	8014600 <atcab_init>
 8013014:	4e7e      	ldr	r6, [pc, #504]	; (8013210 <main+0x3ac>)
 8013016:	1e02      	subs	r2, r0, #0
 8013018:	7030      	strb	r0, [r6, #0]
if (ATECC_status != ATCA_SUCCESS ) {
 801301a:	d003      	beq.n	8013024 <main+0x1c0>
  DBG_PRINTF("ATECC608a configuration failed: %x\n", ATECC_status);
 801301c:	497d      	ldr	r1, [pc, #500]	; (8013214 <main+0x3b0>)
 801301e:	2000      	movs	r0, #0
 8013020:	f7f7 fbc4 	bl	800a7ac <SEGGER_RTT_printf>
ATECC_status = atcab_read_serial_number(serialnum);
 8013024:	4b7c      	ldr	r3, [pc, #496]	; (8013218 <main+0x3b4>)
 8013026:	ad0c      	add	r5, sp, #48	; 0x30
 8013028:	0029      	movs	r1, r5
 801302a:	6818      	ldr	r0, [r3, #0]
 801302c:	f001 fd43 	bl	8014ab6 <calib_read_serial_number>
 8013030:	7030      	strb	r0, [r6, #0]
if (ATECC_status != ATCA_SUCCESS) {
 8013032:	2800      	cmp	r0, #0
 8013034:	d03a      	beq.n	80130ac <main+0x248>
  DBG_PRINTF("ATECC608A could not read serial number: %x\n", ATECC_status);
 8013036:	0002      	movs	r2, r0
 8013038:	4978      	ldr	r1, [pc, #480]	; (801321c <main+0x3b8>)
 801303a:	2000      	movs	r0, #0
 801303c:	f7f7 fbb6 	bl	800a7ac <SEGGER_RTT_printf>
    Lp.SetDataRateStrategy(STATIC_ADR_MODE);
 8013040:	2100      	movs	r1, #0
 8013042:	0038      	movs	r0, r7
 8013044:	f7fb fb10 	bl	800e668 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE19SetDataRateStrategyE17eDataRateStrategy>
    if (Lp.IsJoined() == NOT_JOINED && Lp.GetIsOtaDevice() == OTA_DEVICE) {
 8013048:	0038      	movs	r0, r7
 801304a:	f7fb fb07 	bl	800e65c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE8IsJoinedEv>
 801304e:	4e74      	ldr	r6, [pc, #464]	; (8013220 <main+0x3bc>)
 8013050:	2800      	cmp	r0, #0
 8013052:	d13f      	bne.n	80130d4 <main+0x270>
 8013054:	0038      	movs	r0, r7
 8013056:	f7fb fb17 	bl	800e688 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14GetIsOtaDeviceEv>
 801305a:	1e05      	subs	r5, r0, #0
 801305c:	d13a      	bne.n	80130d4 <main+0x270>
      InsertTrace(__COUNTER__, FileId);
 801305e:	2104      	movs	r1, #4
 8013060:	f7fe fd14 	bl	8011a8c <_Z11InsertTracehh>
      DBG_PRINTF("JOINING... \n");
 8013064:	496f      	ldr	r1, [pc, #444]	; (8013224 <main+0x3c0>)
 8013066:	0028      	movs	r0, r5
 8013068:	f7f7 fba0 	bl	800a7ac <SEGGER_RTT_printf>
      joinTrials++;
 801306c:	4a6e      	ldr	r2, [pc, #440]	; (8013228 <main+0x3c4>)
      LpState = Lp.Join();
 801306e:	0038      	movs	r0, r7
      joinTrials++;
 8013070:	7813      	ldrb	r3, [r2, #0]
 8013072:	3301      	adds	r3, #1
 8013074:	7013      	strb	r3, [r2, #0]
      LpState = Lp.Join();
 8013076:	f7fb fab7 	bl	800e5e8 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE4JoinEv>
 801307a:	7030      	strb	r0, [r6, #0]
    while(LpState != LWPSTATE_IDLE && LpState != LWPSTATE_ERROR && LpState != LWPSTATE_INVALID) {
 801307c:	4d68      	ldr	r5, [pc, #416]	; (8013220 <main+0x3bc>)
 801307e:	782b      	ldrb	r3, [r5, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d037      	beq.n	80130f4 <main+0x290>
 8013084:	2b09      	cmp	r3, #9
 8013086:	d100      	bne.n	801308a <main+0x226>
 8013088:	e169      	b.n	801335e <main+0x4fa>
 801308a:	2b07      	cmp	r3, #7
 801308c:	d032      	beq.n	80130f4 <main+0x290>
      LpState = Lp.LoraWanProcess(&AvailableRxPacket);
 801308e:	4967      	ldr	r1, [pc, #412]	; (801322c <main+0x3c8>)
 8013090:	0038      	movs	r0, r7
 8013092:	f7fb fb65 	bl	800e760 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14LoraWanProcessEPh>
      DEBUG_PRINTF("STATE %u\n", LpState);
 8013096:	4966      	ldr	r1, [pc, #408]	; (8013230 <main+0x3cc>)
      LpState = Lp.LoraWanProcess(&AvailableRxPacket);
 8013098:	0002      	movs	r2, r0
 801309a:	7028      	strb	r0, [r5, #0]
      DEBUG_PRINTF("STATE %u\n", LpState);
 801309c:	2000      	movs	r0, #0
 801309e:	f7f7 fb85 	bl	800a7ac <SEGGER_RTT_printf>
      mcu.GotoSleepMSecond(100);
 80130a2:	2164      	movs	r1, #100	; 0x64
 80130a4:	4863      	ldr	r0, [pc, #396]	; (8013234 <main+0x3d0>)
 80130a6:	f7fb f857 	bl	800e158 <_ZN12McuSTM32L07116GotoSleepMSecondEi>
    while(LpState != LWPSTATE_IDLE && LpState != LWPSTATE_ERROR && LpState != LWPSTATE_INVALID) {
 80130aa:	e7e7      	b.n	801307c <main+0x218>
  DBG_PRINTF("ATECC608A serial number: %d:%d:%d:%d:%d:%d:%d:%d:%d \n", serialnum[0],serialnum[1],serialnum[2],serialnum[3],serialnum[4],serialnum[5],serialnum[6],serialnum[7],serialnum[8]);
 80130ac:	7a29      	ldrb	r1, [r5, #8]
 80130ae:	786b      	ldrb	r3, [r5, #1]
 80130b0:	782a      	ldrb	r2, [r5, #0]
 80130b2:	9106      	str	r1, [sp, #24]
 80130b4:	79e9      	ldrb	r1, [r5, #7]
 80130b6:	9105      	str	r1, [sp, #20]
 80130b8:	79a9      	ldrb	r1, [r5, #6]
 80130ba:	9104      	str	r1, [sp, #16]
 80130bc:	7969      	ldrb	r1, [r5, #5]
 80130be:	9103      	str	r1, [sp, #12]
 80130c0:	7929      	ldrb	r1, [r5, #4]
 80130c2:	9102      	str	r1, [sp, #8]
 80130c4:	78e9      	ldrb	r1, [r5, #3]
 80130c6:	9101      	str	r1, [sp, #4]
 80130c8:	78a9      	ldrb	r1, [r5, #2]
 80130ca:	9100      	str	r1, [sp, #0]
 80130cc:	495a      	ldr	r1, [pc, #360]	; (8013238 <main+0x3d4>)
 80130ce:	f7f7 fb6d 	bl	800a7ac <SEGGER_RTT_printf>
 80130d2:	e7b5      	b.n	8013040 <main+0x1dc>
    } else if(LpState == LWPSTATE_IDLE) {
 80130d4:	7835      	ldrb	r5, [r6, #0]
 80130d6:	2d00      	cmp	r5, #0
 80130d8:	d1d0      	bne.n	801307c <main+0x218>
      while(!lrw.queue[i].len && ++i < LRW_QUEUE_LEN);
 80130da:	4e58      	ldr	r6, [pc, #352]	; (801323c <main+0x3d8>)
 80130dc:	7b73      	ldrb	r3, [r6, #13]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d135      	bne.n	801314e <main+0x2ea>
 80130e2:	7ef3      	ldrb	r3, [r6, #27]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d131      	bne.n	801314c <main+0x2e8>
 80130e8:	0033      	movs	r3, r6
 80130ea:	3329      	adds	r3, #41	; 0x29
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	3502      	adds	r5, #2
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d12c      	bne.n	801314e <main+0x2ea>
    if(AvailableRxPacket != NO_LORA_RXPACKET_AVAILABLE) {
 80130f4:	4b4d      	ldr	r3, [pc, #308]	; (801322c <main+0x3c8>)
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d100      	bne.n	80130fe <main+0x29a>
 80130fc:	e0b5      	b.n	801326a <main+0x406>
      InsertTrace(__COUNTER__, FileId);
 80130fe:	2104      	movs	r1, #4
 8013100:	2002      	movs	r0, #2
      Lp.ReceivePayload(&UserRxFport, UserRxPayload, &UserRxPayloadSize);
 8013102:	2526      	movs	r5, #38	; 0x26
      InsertTrace(__COUNTER__, FileId);
 8013104:	f7fe fcc2 	bl	8011a8c <_Z11InsertTracehh>
      Lp.ReceivePayload(&UserRxFport, UserRxPayload, &UserRxPayloadSize);
 8013108:	2127      	movs	r1, #39	; 0x27
 801310a:	ab02      	add	r3, sp, #8
 801310c:	18ed      	adds	r5, r5, r3
 801310e:	a802      	add	r0, sp, #8
 8013110:	1809      	adds	r1, r1, r0
 8013112:	002b      	movs	r3, r5
 8013114:	aa18      	add	r2, sp, #96	; 0x60
 8013116:	0038      	movs	r0, r7
 8013118:	f7fb fa48 	bl	800e5ac <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14ReceivePayloadEPhS3_S3_>
      DEBUG_PRINTF("Receive on port %d an Applicative Downlink \n DATA[%d] = [ ", UserRxFport, UserRxPayloadSize);
 801311c:	2127      	movs	r1, #39	; 0x27
 801311e:	aa02      	add	r2, sp, #8
 8013120:	1852      	adds	r2, r2, r1
 8013122:	782b      	ldrb	r3, [r5, #0]
 8013124:	7812      	ldrb	r2, [r2, #0]
 8013126:	4946      	ldr	r1, [pc, #280]	; (8013240 <main+0x3dc>)
 8013128:	2000      	movs	r0, #0
 801312a:	f7f7 fb3f 	bl	800a7ac <SEGGER_RTT_printf>
      for(size_t i = 0; i < UserRxPayloadSize; i++) {
 801312e:	2600      	movs	r6, #0
 8013130:	782b      	ldrb	r3, [r5, #0]
 8013132:	42b3      	cmp	r3, r6
 8013134:	d800      	bhi.n	8013138 <main+0x2d4>
 8013136:	e087      	b.n	8013248 <main+0x3e4>
        DEBUG_PRINTF( "0x%.2x ", UserRxPayload[i]);
 8013138:	2258      	movs	r2, #88	; 0x58
 801313a:	ab02      	add	r3, sp, #8
 801313c:	189b      	adds	r3, r3, r2
 801313e:	5d9a      	ldrb	r2, [r3, r6]
 8013140:	4940      	ldr	r1, [pc, #256]	; (8013244 <main+0x3e0>)
 8013142:	2000      	movs	r0, #0
 8013144:	f7f7 fb32 	bl	800a7ac <SEGGER_RTT_printf>
      for(size_t i = 0; i < UserRxPayloadSize; i++) {
 8013148:	3601      	adds	r6, #1
 801314a:	e7f1      	b.n	8013130 <main+0x2cc>
      while(!lrw.queue[i].len && ++i < LRW_QUEUE_LEN);
 801314c:	2501      	movs	r5, #1
        LpState = Lp.SendPayload(BackUpFlash.txPort, lrw.queue[i].buf, lrw.queue[i].len, UNCONF_DATA_UP);
 801314e:	230e      	movs	r3, #14
 8013150:	226a      	movs	r2, #106	; 0x6a
 8013152:	436b      	muls	r3, r5
 8013154:	32ff      	adds	r2, #255	; 0xff
 8013156:	5ca1      	ldrb	r1, [r4, r2]
 8013158:	3a68      	subs	r2, #104	; 0x68
 801315a:	18f6      	adds	r6, r6, r3
 801315c:	3aff      	subs	r2, #255	; 0xff
 801315e:	7b73      	ldrb	r3, [r6, #13]
 8013160:	0038      	movs	r0, r7
 8013162:	9200      	str	r2, [sp, #0]
 8013164:	0032      	movs	r2, r6
 8013166:	f7fb faad 	bl	800e6c4 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE11SendPayloadEhPKhhh>
 801316a:	4b2d      	ldr	r3, [pc, #180]	; (8013220 <main+0x3bc>)
 801316c:	7018      	strb	r0, [r3, #0]
        BackUpFlash.lastPayloadSendTime = lrw.queue[i].msg_type == HEARTBEAT ? (BackUpFlash.lastHeartbeatSendTime = mcu.RtcGetTimeMs()) : mcu.RtcGetTimeMs();
 801316e:	7b33      	ldrb	r3, [r6, #12]
 8013170:	4830      	ldr	r0, [pc, #192]	; (8013234 <main+0x3d0>)
 8013172:	2b00      	cmp	r3, #0
 8013174:	d111      	bne.n	801319a <main+0x336>
 8013176:	f7fa ffa7 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
 801317a:	0023      	movs	r3, r4
 801317c:	33fc      	adds	r3, #252	; 0xfc
 801317e:	6798      	str	r0, [r3, #120]	; 0x78
 8013180:	0023      	movs	r3, r4
 8013182:	33fc      	adds	r3, #252	; 0xfc
 8013184:	6758      	str	r0, [r3, #116]	; 0x74
        Lp.SetProvisionning(); // XXX: We do this also to save singleCount et al
 8013186:	0038      	movs	r0, r7
 8013188:	f7fb fa7a 	bl	800e680 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE16SetProvisionningEv>
        lrw.queue[i].len = 0;
 801318c:	230e      	movs	r3, #14
 801318e:	435d      	muls	r5, r3
 8013190:	4b2a      	ldr	r3, [pc, #168]	; (801323c <main+0x3d8>)
 8013192:	195d      	adds	r5, r3, r5
 8013194:	2300      	movs	r3, #0
 8013196:	736b      	strb	r3, [r5, #13]
 8013198:	e770      	b.n	801307c <main+0x218>
        BackUpFlash.lastPayloadSendTime = lrw.queue[i].msg_type == HEARTBEAT ? (BackUpFlash.lastHeartbeatSendTime = mcu.RtcGetTimeMs()) : mcu.RtcGetTimeMs();
 801319a:	f7fa ff95 	bl	800e0c8 <_ZN12McuSTM32L07112RtcGetTimeMsEv>
 801319e:	e7ef      	b.n	8013180 <main+0x31c>
 80131a0:	fffff67c 	.word	0xfffff67c
 80131a4:	20000410 	.word	0x20000410
 80131a8:	08019039 	.word	0x08019039
 80131ac:	00010020 	.word	0x00010020
 80131b0:	00010010 	.word	0x00010010
 80131b4:	20000548 	.word	0x20000548
 80131b8:	08080010 	.word	0x08080010
 80131bc:	20001850 	.word	0x20001850
 80131c0:	200018b0 	.word	0x200018b0
 80131c4:	200016cc 	.word	0x200016cc
 80131c8:	08019053 	.word	0x08019053
 80131cc:	08019083 	.word	0x08019083
 80131d0:	080190b3 	.word	0x080190b3
 80131d4:	080190e3 	.word	0x080190e3
 80131d8:	08019113 	.word	0x08019113
 80131dc:	08019143 	.word	0x08019143
 80131e0:	08019173 	.word	0x08019173
 80131e4:	080191a3 	.word	0x080191a3
 80131e8:	080191d3 	.word	0x080191d3
 80131ec:	20001815 	.word	0x20001815
 80131f0:	08018070 	.word	0x08018070
 80131f4:	080191f2 	.word	0x080191f2
 80131f8:	2000181d 	.word	0x2000181d
 80131fc:	08019211 	.word	0x08019211
 8013200:	20001825 	.word	0x20001825
 8013204:	200018e0 	.word	0x200018e0
 8013208:	0001517f 	.word	0x0001517f
 801320c:	20000564 	.word	0x20000564
 8013210:	200016c9 	.word	0x200016c9
 8013214:	08019230 	.word	0x08019230
 8013218:	20001a9c 	.word	0x20001a9c
 801321c:	08019254 	.word	0x08019254
 8013220:	2000184c 	.word	0x2000184c
 8013224:	080192b6 	.word	0x080192b6
 8013228:	2000195c 	.word	0x2000195c
 801322c:	200016ca 	.word	0x200016ca
 8013230:	080192c3 	.word	0x080192c3
 8013234:	20001988 	.word	0x20001988
 8013238:	08019280 	.word	0x08019280
 801323c:	2000195d 	.word	0x2000195d
 8013240:	080192cd 	.word	0x080192cd
 8013244:	08019308 	.word	0x08019308
      DEBUG_MSG("]\n");
 8013248:	494d      	ldr	r1, [pc, #308]	; (8013380 <main+0x51c>)
 801324a:	2000      	movs	r0, #0
 801324c:	f7f7 f8ee 	bl	800a42c <SEGGER_RTT_WriteString>
      if(UserRxFport == 224 || UserRxPayloadSize == 0) {
 8013250:	2227      	movs	r2, #39	; 0x27
 8013252:	ab02      	add	r3, sp, #8
 8013254:	189b      	adds	r3, r3, r2
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	2be0      	cmp	r3, #224	; 0xe0
 801325a:	d002      	beq.n	8013262 <main+0x3fe>
 801325c:	782b      	ldrb	r3, [r5, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <main+0x406>
        DEBUG_MSG("Receive Certification Payload \n");
 8013262:	4948      	ldr	r1, [pc, #288]	; (8013384 <main+0x520>)
 8013264:	2000      	movs	r0, #0
 8013266:	f7f7 f8e1 	bl	800a42c <SEGGER_RTT_WriteString>
    if(Lp.IsJoined() == NOT_JOINED && Lp.GetIsOtaDevice() == OTA_DEVICE && LpState != LWPSTATE_INVALID) {
 801326a:	0038      	movs	r0, r7
 801326c:	f7fb f9f6 	bl	800e65c <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE8IsJoinedEv>
 8013270:	4e45      	ldr	r6, [pc, #276]	; (8013388 <main+0x524>)
 8013272:	2800      	cmp	r0, #0
 8013274:	d04e      	beq.n	8013314 <main+0x4b0>
      InsertTrace(__COUNTER__, FileId);
 8013276:	2104      	movs	r1, #4
 8013278:	0008      	movs	r0, r1
 801327a:	f7fe fc07 	bl	8011a8c <_Z11InsertTracehh>
      if(joinTrials > 0) {
 801327e:	7833      	ldrb	r3, [r6, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d026      	beq.n	80132d2 <main+0x46e>
        joinTrials = 0;
 8013284:	2500      	movs	r5, #0
 8013286:	7035      	strb	r5, [r6, #0]
        DEBUG_PRINTF("---JOINED------------ %d\n", HW_RTCGetMsTime());
 8013288:	f7ff f872 	bl	8012370 <HW_RTCGetMsTime>
 801328c:	493f      	ldr	r1, [pc, #252]	; (801338c <main+0x528>)
 801328e:	0002      	movs	r2, r0
 8013290:	0028      	movs	r0, r5
 8013292:	f7f7 fa8b 	bl	800a7ac <SEGGER_RTT_printf>
        DEBUG_PRINTF("---BackUpFlash.JoinedStatus------------ %d\n", BackUpFlash.JoinedStatus);
 8013296:	239e      	movs	r3, #158	; 0x9e
 8013298:	005b      	lsls	r3, r3, #1
 801329a:	5ce2      	ldrb	r2, [r4, r3]
 801329c:	493c      	ldr	r1, [pc, #240]	; (8013390 <main+0x52c>)
 801329e:	0028      	movs	r0, r5
 80132a0:	f7f7 fa84 	bl	800a7ac <SEGGER_RTT_printf>
        DEBUG_PRINTF("---BackUpFlash.FcntUp------------ %d\n", BackUpFlash.FcntUp);
 80132a4:	0023      	movs	r3, r4
 80132a6:	33c8      	adds	r3, #200	; 0xc8
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	493a      	ldr	r1, [pc, #232]	; (8013394 <main+0x530>)
 80132ac:	0028      	movs	r0, r5
 80132ae:	f7f7 fa7d 	bl	800a7ac <SEGGER_RTT_printf>
        LEDBlink(BlinkPattern_RG);
 80132b2:	2004      	movs	r0, #4
 80132b4:	f7fe ff40 	bl	8012138 <LEDBlink>
        startTime = BackUpFlash.lastPayloadSendTime;
 80132b8:	0023      	movs	r3, r4
 80132ba:	33fc      	adds	r3, #252	; 0xfc
 80132bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80132be:	4b36      	ldr	r3, [pc, #216]	; (8013398 <main+0x534>)
        HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, timeBase - 1, timeBase - 1 <= UINT16_MAX ?
 80132c0:	4936      	ldr	r1, [pc, #216]	; (801339c <main+0x538>)
        startTime = BackUpFlash.lastPayloadSendTime;
 80132c2:	601a      	str	r2, [r3, #0]
        HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, timeBase - 1, timeBase - 1 <= UINT16_MAX ?
 80132c4:	4836      	ldr	r0, [pc, #216]	; (80133a0 <main+0x53c>)
 80132c6:	2206      	movs	r2, #6
 80132c8:	f7fa fb68 	bl	800d99c <HAL_RTCEx_SetWakeUpTimer_IT>
        Lp.SetProvisionning();
 80132cc:	0038      	movs	r0, r7
 80132ce:	f7fb f9d7 	bl	800e680 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE16SetProvisionningEv>
      HAL_Delay(500);
 80132d2:	20fa      	movs	r0, #250	; 0xfa
 80132d4:	0040      	lsls	r0, r0, #1
 80132d6:	f7f7 fdf3 	bl	800aec0 <HAL_Delay>
      if(LpState == LWPSTATE_IDLE && !tasks_has_pending() && !NFC_HasActivity() && !LRW_HasActivity()) {
 80132da:	4b32      	ldr	r3, [pc, #200]	; (80133a4 <main+0x540>)
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d000      	beq.n	80132e4 <main+0x480>
 80132e2:	e6ad      	b.n	8013040 <main+0x1dc>
 80132e4:	f001 f922 	bl	801452c <tasks_has_pending>
 80132e8:	2800      	cmp	r0, #0
 80132ea:	d000      	beq.n	80132ee <main+0x48a>
 80132ec:	e6a8      	b.n	8013040 <main+0x1dc>
 80132ee:	f000 f971 	bl	80135d4 <NFC_HasActivity>
 80132f2:	2800      	cmp	r0, #0
 80132f4:	d000      	beq.n	80132f8 <main+0x494>
 80132f6:	e6a3      	b.n	8013040 <main+0x1dc>
    if(lrw.queue[i].len)
 80132f8:	4b2b      	ldr	r3, [pc, #172]	; (80133a8 <main+0x544>)
 80132fa:	7b5a      	ldrb	r2, [r3, #13]
 80132fc:	2a00      	cmp	r2, #0
 80132fe:	d000      	beq.n	8013302 <main+0x49e>
 8013300:	e69e      	b.n	8013040 <main+0x1dc>
 8013302:	7eda      	ldrb	r2, [r3, #27]
 8013304:	2a00      	cmp	r2, #0
 8013306:	d000      	beq.n	801330a <main+0x4a6>
 8013308:	e69a      	b.n	8013040 <main+0x1dc>
 801330a:	3329      	adds	r3, #41	; 0x29
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d01d      	beq.n	801334e <main+0x4ea>
 8013312:	e695      	b.n	8013040 <main+0x1dc>
    if(Lp.IsJoined() == NOT_JOINED && Lp.GetIsOtaDevice() == OTA_DEVICE && LpState != LWPSTATE_INVALID) {
 8013314:	0038      	movs	r0, r7
 8013316:	f7fb f9b7 	bl	800e688 <_ZN13LoraWanObjectI13LoraRegionsEU6SX126xE14GetIsOtaDeviceEv>
 801331a:	1e05      	subs	r5, r0, #0
 801331c:	d1ab      	bne.n	8013276 <main+0x412>
 801331e:	4b21      	ldr	r3, [pc, #132]	; (80133a4 <main+0x540>)
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	2b07      	cmp	r3, #7
 8013324:	d0a7      	beq.n	8013276 <main+0x412>
      InsertTrace(__COUNTER__, FileId);
 8013326:	2104      	movs	r1, #4
 8013328:	2003      	movs	r0, #3
 801332a:	f7fe fbaf 	bl	8011a8c <_Z11InsertTracehh>
      DEBUG_MSG("NOT JOINED\n");
 801332e:	491f      	ldr	r1, [pc, #124]	; (80133ac <main+0x548>)
 8013330:	0028      	movs	r0, r5
 8013332:	f7f7 f87b 	bl	800a42c <SEGGER_RTT_WriteString>
      if(joinTrials == 5) {
 8013336:	7833      	ldrb	r3, [r6, #0]
 8013338:	9309      	str	r3, [sp, #36]	; 0x24
 801333a:	2b05      	cmp	r3, #5
 801333c:	d10a      	bne.n	8013354 <main+0x4f0>
        DEBUG_MSG("GIVING UP JOINING\n");
 801333e:	491c      	ldr	r1, [pc, #112]	; (80133b0 <main+0x54c>)
 8013340:	0028      	movs	r0, r5
        joinTrials = 0;
 8013342:	7035      	strb	r5, [r6, #0]
        DEBUG_MSG("GIVING UP JOINING\n");
 8013344:	f7f7 f872 	bl	800a42c <SEGGER_RTT_WriteString>
        LEDBlink(BlinkPattern_RRR);
 8013348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801334a:	f7fe fef5 	bl	8012138 <LEDBlink>
        HW_EnterStopMode();
 801334e:	f7fe ff71 	bl	8012234 <HW_EnterStopMode>
 8013352:	e675      	b.n	8013040 <main+0x1dc>
        mcu.GotoSleepSecond(10);
 8013354:	210a      	movs	r1, #10
 8013356:	4817      	ldr	r0, [pc, #92]	; (80133b4 <main+0x550>)
 8013358:	f7fa feec 	bl	800e134 <_ZN12McuSTM32L07115GotoSleepSecondEi>
 801335c:	e670      	b.n	8013040 <main+0x1dc>
      InsertTrace(__COUNTER__, FileId);
 801335e:	2104      	movs	r1, #4
 8013360:	2001      	movs	r0, #1
 8013362:	f7fe fb93 	bl	8011a8c <_Z11InsertTracehh>
      DEBUG_MSG("ERROR STATE, RESETTING MCU\n");
 8013366:	4914      	ldr	r1, [pc, #80]	; (80133b8 <main+0x554>)
 8013368:	2000      	movs	r0, #0
 801336a:	f7f7 f85f 	bl	800a42c <SEGGER_RTT_WriteString>
 801336e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013372:	4b12      	ldr	r3, [pc, #72]	; (80133bc <main+0x558>)
 8013374:	4a12      	ldr	r2, [pc, #72]	; (80133c0 <main+0x55c>)
 8013376:	60da      	str	r2, [r3, #12]
 8013378:	f3bf 8f4f 	dsb	sy
    __NOP();
 801337c:	46c0      	nop			; (mov r8, r8)
 801337e:	e7fd      	b.n	801337c <main+0x518>
 8013380:	08019310 	.word	0x08019310
 8013384:	08019313 	.word	0x08019313
 8013388:	2000195c 	.word	0x2000195c
 801338c:	08019352 	.word	0x08019352
 8013390:	0801936c 	.word	0x0801936c
 8013394:	08019398 	.word	0x08019398
 8013398:	200019a0 	.word	0x200019a0
 801339c:	0001517f 	.word	0x0001517f
 80133a0:	200018e0 	.word	0x200018e0
 80133a4:	2000184c 	.word	0x2000184c
 80133a8:	2000195d 	.word	0x2000195d
 80133ac:	08019333 	.word	0x08019333
 80133b0:	0801933f 	.word	0x0801933f
 80133b4:	20001988 	.word	0x20001988
 80133b8:	080193be 	.word	0x080193be
 80133bc:	e000ed00 	.word	0xe000ed00
 80133c0:	05fa0004 	.word	0x05fa0004

080133c4 <_GLOBAL__sub_I_int_statusBMA400>:
};
 80133c4:	4b02      	ldr	r3, [pc, #8]	; (80133d0 <_GLOBAL__sub_I_int_statusBMA400+0xc>)
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	4b02      	ldr	r3, [pc, #8]	; (80133d4 <_GLOBAL__sub_I_int_statusBMA400+0x10>)
 80133ca:	615a      	str	r2, [r3, #20]
  NVIC_SystemReset();
  /* USER CODE END Error_Handler_Debug */
}
 80133cc:	4770      	bx	lr
 80133ce:	46c0      	nop			; (mov r8, r8)
 80133d0:	20000514 	.word	0x20000514
 80133d4:	20000548 	.word	0x20000548

080133d8 <nop>:
  ST25DV_PresentI2CPassword(&St25Dv_Obj, (ST25DV_PASSWD){0x12345678, 0x13245678});
}

static int32_t nop(void) {
  return 0;
}
 80133d8:	2000      	movs	r0, #0
 80133da:	4770      	bx	lr

080133dc <NFC_IsReady>:

static int32_t NFC_IsReady(uint16_t DevAddr, const uint32_t Trials) {
 80133dc:	b510      	push	{r4, lr}
 80133de:	000a      	movs	r2, r1
  return HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT);
 80133e0:	2364      	movs	r3, #100	; 0x64
 80133e2:	0001      	movs	r1, r0
 80133e4:	4801      	ldr	r0, [pc, #4]	; (80133ec <NFC_IsReady+0x10>)
 80133e6:	f7f9 f85d 	bl	800c4a4 <HAL_I2C_IsDeviceReady>
}
 80133ea:	bd10      	pop	{r4, pc}
 80133ec:	20001ad4 	.word	0x20001ad4

080133f0 <NFC_Init>:
int32_t NFC_Init(void) {
 80133f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ST25DV_I2CSSO_STATUS i2csso = ST25DV_SESSION_CLOSED;
 80133f2:	2609      	movs	r6, #9
 80133f4:	2300      	movs	r3, #0
int32_t NFC_Init(void) {
 80133f6:	b08d      	sub	sp, #52	; 0x34
  ST25DV_I2CSSO_STATUS i2csso = ST25DV_SESSION_CLOSED;
 80133f8:	446e      	add	r6, sp
 80133fa:	7033      	strb	r3, [r6, #0]
  io.DeInit = NULL;
 80133fc:	9307      	str	r3, [sp, #28]
  io.IsReady = NFC_IsReady;
 80133fe:	4b6c      	ldr	r3, [pc, #432]	; (80135b0 <NFC_Init+0x1c0>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8013400:	4d6c      	ldr	r5, [pc, #432]	; (80135b4 <NFC_Init+0x1c4>)
  io.IsReady = NFC_IsReady;
 8013402:	9308      	str	r3, [sp, #32]
  io.Write = NFC_WriteReg;
 8013404:	4b6c      	ldr	r3, [pc, #432]	; (80135b8 <NFC_Init+0x1c8>)
  io.Init = nop;
 8013406:	4a6d      	ldr	r2, [pc, #436]	; (80135bc <NFC_Init+0x1cc>)
  io.Write = NFC_WriteReg;
 8013408:	9309      	str	r3, [sp, #36]	; 0x24
  io.Read = NFC_ReadReg;
 801340a:	4b6d      	ldr	r3, [pc, #436]	; (80135c0 <NFC_Init+0x1d0>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 801340c:	a906      	add	r1, sp, #24
  io.Read = NFC_ReadReg;
 801340e:	930a      	str	r3, [sp, #40]	; 0x28
  io.GetTick = (int32_t (*)(void))HAL_GetTick;
 8013410:	4b6c      	ldr	r3, [pc, #432]	; (80135c4 <NFC_Init+0x1d4>)
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8013412:	0028      	movs	r0, r5
  io.Init = nop;
 8013414:	9206      	str	r2, [sp, #24]
  io.GetTick = (int32_t (*)(void))HAL_GetTick;
 8013416:	930b      	str	r3, [sp, #44]	; 0x2c
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 8013418:	f7f7 fa82 	bl	800a920 <ST25DV_RegisterBusIO>
 801341c:	1e04      	subs	r4, r0, #0
 801341e:	d000      	beq.n	8013422 <NFC_Init+0x32>
 8013420:	e0ab      	b.n	801357a <NFC_Init+0x18a>
  if((r = St25Dv_Drv.Init(&St25Dv_Obj))) {c = 0x2; goto err;};
 8013422:	4f69      	ldr	r7, [pc, #420]	; (80135c8 <NFC_Init+0x1d8>)
 8013424:	0028      	movs	r0, r5
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	4798      	blx	r3
 801342a:	2302      	movs	r3, #2
 801342c:	1e04      	subs	r4, r0, #0
 801342e:	d000      	beq.n	8013432 <NFC_Init+0x42>
 8013430:	e0a4      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x3; goto err;};
 8013432:	0031      	movs	r1, r6
 8013434:	0028      	movs	r0, r5
 8013436:	f7f7 fb65 	bl	800ab04 <ST25DV_ReadI2CSecuritySession_Dyn>
 801343a:	1e04      	subs	r4, r0, #0
 801343c:	d000      	beq.n	8013440 <NFC_Init+0x50>
 801343e:	e0a6      	b.n	801358e <NFC_Init+0x19e>
  if(i2csso == ST25DV_SESSION_CLOSED)
 8013440:	7833      	ldrb	r3, [r6, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d100      	bne.n	8013448 <NFC_Init+0x58>
 8013446:	e061      	b.n	801350c <NFC_Init+0x11c>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x5; goto err;};
 8013448:	0031      	movs	r1, r6
 801344a:	0028      	movs	r0, r5
 801344c:	f7f7 fb5a 	bl	800ab04 <ST25DV_ReadI2CSecuritySession_Dyn>
 8013450:	1e04      	subs	r4, r0, #0
 8013452:	d000      	beq.n	8013456 <NFC_Init+0x66>
 8013454:	e09d      	b.n	8013592 <NFC_Init+0x1a2>
  if(i2csso == ST25DV_SESSION_CLOSED) {c = 0x6; goto err;};
 8013456:	7833      	ldrb	r3, [r6, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d100      	bne.n	801345e <NFC_Init+0x6e>
 801345c:	e09b      	b.n	8013596 <NFC_Init+0x1a6>
  if((r = St25Dv_Drv.GetITStatus(&St25Dv_Obj, &v))) {c = 0x7; goto err;};
 801345e:	260e      	movs	r6, #14
 8013460:	446e      	add	r6, sp
 8013462:	0031      	movs	r1, r6
 8013464:	0028      	movs	r0, r5
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	4798      	blx	r3
 801346a:	1e04      	subs	r4, r0, #0
 801346c:	d000      	beq.n	8013470 <NFC_Init+0x80>
 801346e:	e094      	b.n	801359a <NFC_Init+0x1aa>
  if(v != (ST25DV_GPO_ALL_MASK))
 8013470:	8833      	ldrh	r3, [r6, #0]
 8013472:	2bff      	cmp	r3, #255	; 0xff
 8013474:	d159      	bne.n	801352a <NFC_Init+0x13a>
  if((r = ST25DV_ReadRFMngt(&St25Dv_Obj, &rfmngt))) {c = 0x9; goto err;};
 8013476:	af03      	add	r7, sp, #12
 8013478:	0039      	movs	r1, r7
 801347a:	0028      	movs	r0, r5
 801347c:	f7f7 faf7 	bl	800aa6e <ST25DV_ReadRFMngt>
 8013480:	1e04      	subs	r4, r0, #0
 8013482:	d000      	beq.n	8013486 <NFC_Init+0x96>
 8013484:	e08b      	b.n	801359e <NFC_Init+0x1ae>
  if(rfmngt.RfDisable || rfmngt.RfSleep)
 8013486:	783b      	ldrb	r3, [r7, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d156      	bne.n	801353a <NFC_Init+0x14a>
 801348c:	787b      	ldrb	r3, [r7, #1]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d153      	bne.n	801353a <NFC_Init+0x14a>
  if((r = ST25DV_WriteRFMngt_Dyn(&St25Dv_Obj, 0))) {c = 0xb; goto err;};
 8013492:	2100      	movs	r1, #0
 8013494:	0028      	movs	r0, r5
 8013496:	f7f7 fb50 	bl	800ab3a <ST25DV_WriteRFMngt_Dyn>
 801349a:	230b      	movs	r3, #11
 801349c:	1e04      	subs	r4, r0, #0
 801349e:	d000      	beq.n	80134a2 <NFC_Init+0xb2>
 80134a0:	e06c      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadEHMode(&St25Dv_Obj, &ehmode))) {c = 0xc; goto err;}
 80134a2:	270a      	movs	r7, #10
 80134a4:	446f      	add	r7, sp
 80134a6:	0039      	movs	r1, r7
 80134a8:	0028      	movs	r0, r5
 80134aa:	f7f7 fac5 	bl	800aa38 <ST25DV_ReadEHMode>
 80134ae:	1e04      	subs	r4, r0, #0
 80134b0:	d000      	beq.n	80134b4 <NFC_Init+0xc4>
 80134b2:	e076      	b.n	80135a2 <NFC_Init+0x1b2>
  if(ehmode == ST25DV_EH_ACTIVE_AFTER_BOOT)
 80134b4:	783b      	ldrb	r3, [r7, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d047      	beq.n	801354a <NFC_Init+0x15a>
  if((r = ST25DV_ResetEHENMode_Dyn(&St25Dv_Obj))) {c = 0xe; goto err;};
 80134ba:	0028      	movs	r0, r5
 80134bc:	f7f7 fb34 	bl	800ab28 <ST25DV_ResetEHENMode_Dyn>
 80134c0:	230e      	movs	r3, #14
 80134c2:	1e04      	subs	r4, r0, #0
 80134c4:	d15a      	bne.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadMBWDG(&St25Dv_Obj, (uint8_t*)&v))) {c = 0xf; goto err;};
 80134c6:	0031      	movs	r1, r6
 80134c8:	0028      	movs	r0, r5
 80134ca:	f7f7 fb0d 	bl	800aae8 <ST25DV_ReadMBWDG>
 80134ce:	1e04      	subs	r4, r0, #0
 80134d0:	d000      	beq.n	80134d4 <NFC_Init+0xe4>
 80134d2:	e068      	b.n	80135a6 <NFC_Init+0x1b6>
  if((uint8_t)v)
 80134d4:	7833      	ldrb	r3, [r6, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d13f      	bne.n	801355a <NFC_Init+0x16a>
  if((r = ST25DV_ReadMBMode(&St25Dv_Obj, &mbmode))) {c = 0x11; goto err;};
 80134da:	260b      	movs	r6, #11
 80134dc:	446e      	add	r6, sp
 80134de:	0031      	movs	r1, r6
 80134e0:	0028      	movs	r0, r5
 80134e2:	f7f7 fae6 	bl	800aab2 <ST25DV_ReadMBMode>
 80134e6:	1e04      	subs	r4, r0, #0
 80134e8:	d15f      	bne.n	80135aa <NFC_Init+0x1ba>
  if(mbmode == ST25DV_DISABLE)
 80134ea:	7833      	ldrb	r3, [r6, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d03c      	beq.n	801356a <NFC_Init+0x17a>
  if((r = ST25DV_ResetMBEN_Dyn(&St25Dv_Obj))) {c = 0x11; goto err;};
 80134f0:	0028      	movs	r0, r5
 80134f2:	f7f7 fb34 	bl	800ab5e <ST25DV_ResetMBEN_Dyn>
 80134f6:	2311      	movs	r3, #17
 80134f8:	1e04      	subs	r4, r0, #0
 80134fa:	d13f      	bne.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_SetMBEN_Dyn(&St25Dv_Obj))) {c = 0x12; goto err;};
 80134fc:	0028      	movs	r0, r5
 80134fe:	f7f7 fb25 	bl	800ab4c <ST25DV_SetMBEN_Dyn>
 8013502:	1e04      	subs	r4, r0, #0
 8013504:	d137      	bne.n	8013576 <NFC_Init+0x186>
}
 8013506:	0020      	movs	r0, r4
 8013508:	b00d      	add	sp, #52	; 0x34
 801350a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((r = ST25DV_PresentI2CPassword(&St25Dv_Obj, (ST25DV_PASSWD){0}))) {c = 0x4; goto err;};
 801350c:	0001      	movs	r1, r0
 801350e:	2208      	movs	r2, #8
 8013510:	a804      	add	r0, sp, #16
 8013512:	f002 f8e3 	bl	80156dc <memset>
 8013516:	9904      	ldr	r1, [sp, #16]
 8013518:	9a05      	ldr	r2, [sp, #20]
 801351a:	0028      	movs	r0, r5
 801351c:	f7f7 fa63 	bl	800a9e6 <ST25DV_PresentI2CPassword>
 8013520:	1e04      	subs	r4, r0, #0
 8013522:	d100      	bne.n	8013526 <NFC_Init+0x136>
 8013524:	e790      	b.n	8013448 <NFC_Init+0x58>
 8013526:	2304      	movs	r3, #4
 8013528:	e028      	b.n	801357c <NFC_Init+0x18c>
    if((r = St25Dv_Drv.ConfigIT(&St25Dv_Obj, ST25DV_GPO_ALL_MASK))) {c = 0x8; goto err;};
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	21ff      	movs	r1, #255	; 0xff
 801352e:	0028      	movs	r0, r5
 8013530:	4798      	blx	r3
 8013532:	1e04      	subs	r4, r0, #0
 8013534:	d09f      	beq.n	8013476 <NFC_Init+0x86>
 8013536:	2308      	movs	r3, #8
 8013538:	e020      	b.n	801357c <NFC_Init+0x18c>
    if((r = ST25DV_WriteRFMngt(&St25Dv_Obj, 0))) {c = 0xa; goto err;};
 801353a:	2100      	movs	r1, #0
 801353c:	0028      	movs	r0, r5
 801353e:	f7f7 faaf 	bl	800aaa0 <ST25DV_WriteRFMngt>
 8013542:	1e04      	subs	r4, r0, #0
 8013544:	d0a5      	beq.n	8013492 <NFC_Init+0xa2>
 8013546:	230a      	movs	r3, #10
 8013548:	e018      	b.n	801357c <NFC_Init+0x18c>
    if((r = ST25DV_WriteEHMode(&St25Dv_Obj, ST25DV_EH_ON_DEMAND))) {c = 0xd; goto err;}
 801354a:	2101      	movs	r1, #1
 801354c:	0028      	movs	r0, r5
 801354e:	f7f7 fa85 	bl	800aa5c <ST25DV_WriteEHMode>
 8013552:	1e04      	subs	r4, r0, #0
 8013554:	d0b1      	beq.n	80134ba <NFC_Init+0xca>
 8013556:	230d      	movs	r3, #13
 8013558:	e010      	b.n	801357c <NFC_Init+0x18c>
    if((r = ST25DV_WriteMBWDG(&St25Dv_Obj, 0))) {c = 0x10; goto err;};
 801355a:	0001      	movs	r1, r0
 801355c:	0028      	movs	r0, r5
 801355e:	f7f7 fac8 	bl	800aaf2 <ST25DV_WriteMBWDG>
 8013562:	1e04      	subs	r4, r0, #0
 8013564:	d0b9      	beq.n	80134da <NFC_Init+0xea>
 8013566:	2310      	movs	r3, #16
 8013568:	e008      	b.n	801357c <NFC_Init+0x18c>
    if((r = ST25DV_WriteMBMode(&St25Dv_Obj, ST25DV_ENABLE))) {c = 0x12; goto err;};
 801356a:	2101      	movs	r1, #1
 801356c:	0028      	movs	r0, r5
 801356e:	f7f7 fab2 	bl	800aad6 <ST25DV_WriteMBMode>
 8013572:	1e04      	subs	r4, r0, #0
 8013574:	d0bc      	beq.n	80134f0 <NFC_Init+0x100>
 8013576:	2312      	movs	r3, #18
 8013578:	e000      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_RegisterBusIO(&St25Dv_Obj, &io))) {c = 0x1; goto err;};
 801357a:	2301      	movs	r3, #1
  DBG_PRINTF("NFC ERR ST25DV ret:0x%x cond:0x%x err:0x%x Init Failed!\n", r, c, hi2c1.ErrorCode);
 801357c:	4a13      	ldr	r2, [pc, #76]	; (80135cc <NFC_Init+0x1dc>)
 801357e:	4914      	ldr	r1, [pc, #80]	; (80135d0 <NFC_Init+0x1e0>)
 8013580:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013582:	2000      	movs	r0, #0
 8013584:	9200      	str	r2, [sp, #0]
 8013586:	0022      	movs	r2, r4
 8013588:	f7f7 f910 	bl	800a7ac <SEGGER_RTT_printf>
  return r;
 801358c:	e7bb      	b.n	8013506 <NFC_Init+0x116>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x3; goto err;};
 801358e:	2303      	movs	r3, #3
 8013590:	e7f4      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadI2CSecuritySession_Dyn(&St25Dv_Obj, &i2csso))) {c = 0x5; goto err;};
 8013592:	2305      	movs	r3, #5
 8013594:	e7f2      	b.n	801357c <NFC_Init+0x18c>
  if(i2csso == ST25DV_SESSION_CLOSED) {c = 0x6; goto err;};
 8013596:	2306      	movs	r3, #6
 8013598:	e7f0      	b.n	801357c <NFC_Init+0x18c>
  if((r = St25Dv_Drv.GetITStatus(&St25Dv_Obj, &v))) {c = 0x7; goto err;};
 801359a:	2307      	movs	r3, #7
 801359c:	e7ee      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadRFMngt(&St25Dv_Obj, &rfmngt))) {c = 0x9; goto err;};
 801359e:	2309      	movs	r3, #9
 80135a0:	e7ec      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadEHMode(&St25Dv_Obj, &ehmode))) {c = 0xc; goto err;}
 80135a2:	230c      	movs	r3, #12
 80135a4:	e7ea      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadMBWDG(&St25Dv_Obj, (uint8_t*)&v))) {c = 0xf; goto err;};
 80135a6:	230f      	movs	r3, #15
 80135a8:	e7e8      	b.n	801357c <NFC_Init+0x18c>
  if((r = ST25DV_ReadMBMode(&St25Dv_Obj, &mbmode))) {c = 0x11; goto err;};
 80135aa:	2311      	movs	r3, #17
 80135ac:	e7e6      	b.n	801357c <NFC_Init+0x18c>
 80135ae:	46c0      	nop			; (mov r8, r8)
 80135b0:	080133dd 	.word	0x080133dd
 80135b4:	20001bd4 	.word	0x20001bd4
 80135b8:	0801379d 	.word	0x0801379d
 80135bc:	080133d9 	.word	0x080133d9
 80135c0:	080136dd 	.word	0x080136dd
 80135c4:	0800aeb5 	.word	0x0800aeb5
 80135c8:	200004b8 	.word	0x200004b8
 80135cc:	20001ad4 	.word	0x20001ad4
 80135d0:	080193da 	.word	0x080193da

080135d4 <NFC_HasActivity>:

int32_t NFC_HasActivity(void) {
 80135d4:	b510      	push	{r4, lr}
  //DEBUG_PRINTF("NFC ACT %10d %10d is %d\n", HAL_GetTick(), nfc_activity, HAL_GetTick() - nfc_activity < 2000U);
  return HAL_GetTick() - nfc_activity < 2000U;
 80135d6:	f7f7 fc6d 	bl	800aeb4 <HAL_GetTick>
 80135da:	4b04      	ldr	r3, [pc, #16]	; (80135ec <NFC_HasActivity+0x18>)
 80135dc:	4a04      	ldr	r2, [pc, #16]	; (80135f0 <NFC_HasActivity+0x1c>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	1ac3      	subs	r3, r0, r3
 80135e2:	2000      	movs	r0, #0
 80135e4:	429a      	cmp	r2, r3
 80135e6:	4140      	adcs	r0, r0
}
 80135e8:	bd10      	pop	{r4, pc}
 80135ea:	46c0      	nop			; (mov r8, r8)
 80135ec:	20001bd0 	.word	0x20001bd0
 80135f0:	000007cf 	.word	0x000007cf

080135f4 <NFC_WaitACK>:
 *        We, just like HAL, don't wait nor clear STOP flag on timeout.
 *
 *        Do you think compiler would reorder the hi2c->Lock assigns?
 *        There's sequence points, but no explicit dependency across them.
 */
int32_t NFC_WaitACK(uint32_t Timeout) {
 80135f4:	4673      	mov	r3, lr
 80135f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135f8:	b085      	sub	sp, #20
 80135fa:	9303      	str	r3, [sp, #12]
 80135fc:	0007      	movs	r7, r0
  I2C_HandleTypeDef * const hi2c = &hi2c1;
  uint32_t tickstart = HAL_GetTick();
 80135fe:	f7f7 fc59 	bl	800aeb4 <HAL_GetTick>

  /* Grab I2C Handle */
  if(hi2c->State != HAL_I2C_STATE_READY)
 8013602:	4c33      	ldr	r4, [pc, #204]	; (80136d0 <NFC_WaitACK+0xdc>)
  uint32_t tickstart = HAL_GetTick();
 8013604:	9002      	str	r0, [sp, #8]
  if(hi2c->State != HAL_I2C_STATE_READY)
 8013606:	0022      	movs	r2, r4
 8013608:	3241      	adds	r2, #65	; 0x41
 801360a:	7816      	ldrb	r6, [r2, #0]
    return HAL_BUSY;
 801360c:	2502      	movs	r5, #2
  if(hi2c->State != HAL_I2C_STATE_READY)
 801360e:	b2f6      	uxtb	r6, r6
 8013610:	2e20      	cmp	r6, #32
 8013612:	d134      	bne.n	801367e <NFC_WaitACK+0x8a>
  if(hi2c->Instance->ISR & I2C_ISR_BUSY)
 8013614:	6823      	ldr	r3, [r4, #0]
 8013616:	6999      	ldr	r1, [r3, #24]
 8013618:	2380      	movs	r3, #128	; 0x80
 801361a:	021b      	lsls	r3, r3, #8
 801361c:	400b      	ands	r3, r1
 801361e:	d12e      	bne.n	801367e <NFC_WaitACK+0x8a>
    return HAL_BUSY;
  if(hi2c->Lock == HAL_LOCKED)
 8013620:	0021      	movs	r1, r4
 8013622:	3140      	adds	r1, #64	; 0x40
 8013624:	7808      	ldrb	r0, [r1, #0]
 8013626:	2801      	cmp	r0, #1
 8013628:	d029      	beq.n	801367e <NFC_WaitACK+0x8a>
    return HAL_BUSY;
  else
    hi2c->Lock = HAL_LOCKED;
 801362a:	2001      	movs	r0, #1
 801362c:	7008      	strb	r0, [r1, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801362e:	2124      	movs	r1, #36	; 0x24
 8013630:	7011      	strb	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013632:	6463      	str	r3, [r4, #68]	; 0x44

  do {
    /* Generate Start */
    hi2c->Instance->CR2 = I2C_CR2_START | I2C_CR2_AUTOEND | (I2C_CR2_SADD & ST25DV_ADDR_DATA_I2C);
 8013634:	6823      	ldr	r3, [r4, #0]
 8013636:	4a27      	ldr	r2, [pc, #156]	; (80136d4 <NFC_WaitACK+0xe0>)
 8013638:	605a      	str	r2, [r3, #4]

    /* Wait till AUTOEND mode generates STOP, or timeout */
    while(~hi2c->Instance->ISR & I2C_ISR_STOPF)
 801363a:	6823      	ldr	r3, [r4, #0]
 801363c:	0035      	movs	r5, r6
 801363e:	699a      	ldr	r2, [r3, #24]
 8013640:	4395      	bics	r5, r2
 8013642:	d11f      	bne.n	8013684 <NFC_WaitACK+0x90>
      if(Timeout != HAL_MAX_DELAY && (HAL_GetTick() - tickstart > Timeout || !Timeout))
        goto timeout;

    /* We've been ACK'ed, cleanup and go home */
    if(~hi2c->Instance->ISR & I2C_ISR_NACKF) {
 8013644:	2110      	movs	r1, #16
 8013646:	699a      	ldr	r2, [r3, #24]
 8013648:	4391      	bics	r1, r2
 801364a:	d034      	beq.n	80136b6 <NFC_WaitACK+0xc2>
      hi2c->Instance->ICR |= I2C_ISR_STOPF;
 801364c:	69da      	ldr	r2, [r3, #28]
 801364e:	4332      	orrs	r2, r6
 8013650:	61da      	str	r2, [r3, #28]
      /* Release I2C_Handle */
      hi2c->State = HAL_I2C_STATE_READY;
 8013652:	0023      	movs	r3, r4
      hi2c->Lock = HAL_UNLOCKED;
 8013654:	3440      	adds	r4, #64	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8013656:	3341      	adds	r3, #65	; 0x41
 8013658:	701e      	strb	r6, [r3, #0]
      hi2c->Lock = HAL_UNLOCKED;
 801365a:	7025      	strb	r5, [r4, #0]
      if(HAL_GetTick() - tickstart > 100)
 801365c:	f7f7 fc2a 	bl	800aeb4 <HAL_GetTick>
 8013660:	9b02      	ldr	r3, [sp, #8]
 8013662:	1ac0      	subs	r0, r0, r3
 8013664:	2864      	cmp	r0, #100	; 0x64
 8013666:	d90a      	bls.n	801367e <NFC_WaitACK+0x8a>
        DBG_PRINTF("NFC I2C WAIT INFO dur:%5d timeout:%5d caller:0x%p\n", HAL_GetTick() - tickstart, Timeout, __builtin_return_address(0));
 8013668:	f7f7 fc24 	bl	800aeb4 <HAL_GetTick>
 801366c:	9b02      	ldr	r3, [sp, #8]
 801366e:	491a      	ldr	r1, [pc, #104]	; (80136d8 <NFC_WaitACK+0xe4>)
 8013670:	1ac2      	subs	r2, r0, r3
 8013672:	9b03      	ldr	r3, [sp, #12]
 8013674:	0028      	movs	r0, r5
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	003b      	movs	r3, r7
 801367a:	f7f7 f897 	bl	800a7ac <SEGGER_RTT_printf>
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  hi2c->Lock = HAL_UNLOCKED;
  return HAL_ERROR;
}
 801367e:	0028      	movs	r0, r5
 8013680:	b005      	add	sp, #20
 8013682:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY && (HAL_GetTick() - tickstart > Timeout || !Timeout))
 8013684:	1c7a      	adds	r2, r7, #1
 8013686:	d0d9      	beq.n	801363c <NFC_WaitACK+0x48>
 8013688:	f7f7 fc14 	bl	800aeb4 <HAL_GetTick>
 801368c:	9b02      	ldr	r3, [sp, #8]
 801368e:	1ac0      	subs	r0, r0, r3
 8013690:	42b8      	cmp	r0, r7
 8013692:	d801      	bhi.n	8013698 <NFC_WaitACK+0xa4>
 8013694:	2f00      	cmp	r7, #0
 8013696:	d1d0      	bne.n	801363a <NFC_WaitACK+0x46>
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013698:	2220      	movs	r2, #32
 801369a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return HAL_ERROR;
 801369c:	2501      	movs	r5, #1
  hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801369e:	4313      	orrs	r3, r2
 80136a0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80136a2:	0023      	movs	r3, r4
 80136a4:	3341      	adds	r3, #65	; 0x41
 80136a6:	701a      	strb	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80136a8:	0022      	movs	r2, r4
 80136aa:	2300      	movs	r3, #0
 80136ac:	3242      	adds	r2, #66	; 0x42
  hi2c->Lock = HAL_UNLOCKED;
 80136ae:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80136b0:	7013      	strb	r3, [r2, #0]
  hi2c->Lock = HAL_UNLOCKED;
 80136b2:	7023      	strb	r3, [r4, #0]
  return HAL_ERROR;
 80136b4:	e7e3      	b.n	801367e <NFC_WaitACK+0x8a>
    hi2c->Instance->ICR |= I2C_ISR_NACKF | I2C_ISR_STOPF;
 80136b6:	2230      	movs	r2, #48	; 0x30
 80136b8:	69d9      	ldr	r1, [r3, #28]
 80136ba:	430a      	orrs	r2, r1
 80136bc:	61da      	str	r2, [r3, #28]
  } while(Timeout == HAL_MAX_DELAY || (HAL_GetTick() - tickstart < Timeout && Timeout));
 80136be:	1c7b      	adds	r3, r7, #1
 80136c0:	d0b8      	beq.n	8013634 <NFC_WaitACK+0x40>
 80136c2:	f7f7 fbf7 	bl	800aeb4 <HAL_GetTick>
 80136c6:	9b02      	ldr	r3, [sp, #8]
 80136c8:	1ac0      	subs	r0, r0, r3
 80136ca:	42b8      	cmp	r0, r7
 80136cc:	d3b2      	bcc.n	8013634 <NFC_WaitACK+0x40>
timeout:
 80136ce:	e7e3      	b.n	8013698 <NFC_WaitACK+0xa4>
 80136d0:	20001ad4 	.word	0x20001ad4
 80136d4:	020020a6 	.word	0x020020a6
 80136d8:	080194b7 	.word	0x080194b7

080136dc <NFC_ReadReg>:
int32_t NFC_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) {
 80136dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136de:	4674      	mov	r4, lr
 80136e0:	b08d      	sub	sp, #52	; 0x34
 80136e2:	001e      	movs	r6, r3
 80136e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80136e6:	9107      	str	r1, [sp, #28]
 80136e8:	9209      	str	r2, [sp, #36]	; 0x24
 80136ea:	9006      	str	r0, [sp, #24]
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 80136ec:	2732      	movs	r7, #50	; 0x32
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80136ee:	f7f7 fbe1 	bl	800aeb4 <HAL_GetTick>
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 80136f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80136f4:	9008      	str	r0, [sp, #32]
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 80136f6:	9300      	str	r3, [sp, #0]
 80136f8:	9702      	str	r7, [sp, #8]
 80136fa:	9601      	str	r6, [sp, #4]
 80136fc:	2302      	movs	r3, #2
 80136fe:	9a07      	ldr	r2, [sp, #28]
 8013700:	9906      	ldr	r1, [sp, #24]
 8013702:	4823      	ldr	r0, [pc, #140]	; (8013790 <NFC_ReadReg+0xb4>)
 8013704:	f7f8 fe10 	bl	800c328 <HAL_I2C_Mem_Read>
    return 0;
 8013708:	2400      	movs	r4, #0
  if(!HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50))
 801370a:	42a0      	cmp	r0, r4
 801370c:	d012      	beq.n	8013734 <NFC_ReadReg+0x58>
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 801370e:	2503      	movs	r5, #3
  NFC_WaitACK(5);
 8013710:	2005      	movs	r0, #5
 8013712:	f7ff ff6f 	bl	80135f4 <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 8013716:	970a      	str	r7, [sp, #40]	; 0x28
 8013718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801371a:	4f1d      	ldr	r7, [pc, #116]	; (8013790 <NFC_ReadReg+0xb4>)
 801371c:	9302      	str	r3, [sp, #8]
 801371e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013720:	9601      	str	r6, [sp, #4]
 8013722:	9300      	str	r3, [sp, #0]
 8013724:	9a07      	ldr	r2, [sp, #28]
 8013726:	2302      	movs	r3, #2
 8013728:	9906      	ldr	r1, [sp, #24]
 801372a:	0038      	movs	r0, r7
 801372c:	f7f8 fdfc 	bl	800c328 <HAL_I2C_Mem_Read>
 8013730:	1e04      	subs	r4, r0, #0
 8013732:	d102      	bne.n	801373a <NFC_ReadReg+0x5e>
}
 8013734:	0020      	movs	r0, r4
 8013736:	b00d      	add	sp, #52	; 0x34
 8013738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("NFC I2C <RX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801373a:	f7f7 fbbb 	bl	800aeb4 <HAL_GetTick>
 801373e:	9907      	ldr	r1, [sp, #28]
 8013740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013742:	9a08      	ldr	r2, [sp, #32]
 8013744:	9103      	str	r1, [sp, #12]
 8013746:	9906      	ldr	r1, [sp, #24]
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 8013748:	3d01      	subs	r5, #1
    DBG_PRINTF("NFC I2C <RX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801374a:	1a82      	subs	r2, r0, r2
 801374c:	9102      	str	r1, [sp, #8]
 801374e:	9301      	str	r3, [sp, #4]
 8013750:	9604      	str	r6, [sp, #16]
 8013752:	9400      	str	r4, [sp, #0]
 8013754:	002b      	movs	r3, r5
 8013756:	490f      	ldr	r1, [pc, #60]	; (8013794 <NFC_ReadReg+0xb8>)
 8013758:	2000      	movs	r0, #0
 801375a:	f7f7 f827 	bl	800a7ac <SEGGER_RTT_printf>
 801375e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013760:	f7ff ff48 	bl	80135f4 <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 50)))
 8013764:	2d00      	cmp	r5, #0
 8013766:	d1d7      	bne.n	8013718 <NFC_ReadReg+0x3c>
    DBG_PRINTF("NFC I2C <RX ERR dur:%3d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:0x%x caller:%p\n", HAL_GetTick() - ts, r, hi2c1.ErrorCode, DevAddr, Reg, Length, __builtin_return_address(0));
 8013768:	f7f7 fba4 	bl	800aeb4 <HAL_GetTick>
 801376c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801376e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013770:	9104      	str	r1, [sp, #16]
 8013772:	9907      	ldr	r1, [sp, #28]
 8013774:	9a08      	ldr	r2, [sp, #32]
 8013776:	9102      	str	r1, [sp, #8]
 8013778:	9906      	ldr	r1, [sp, #24]
 801377a:	1a82      	subs	r2, r0, r2
 801377c:	9101      	str	r1, [sp, #4]
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	9603      	str	r6, [sp, #12]
 8013782:	0023      	movs	r3, r4
 8013784:	4904      	ldr	r1, [pc, #16]	; (8013798 <NFC_ReadReg+0xbc>)
 8013786:	0028      	movs	r0, r5
 8013788:	f7f7 f810 	bl	800a7ac <SEGGER_RTT_printf>
 801378c:	e7d2      	b.n	8013734 <NFC_ReadReg+0x58>
 801378e:	46c0      	nop			; (mov r8, r8)
 8013790:	20001ad4 	.word	0x20001ad4
 8013794:	08019413 	.word	0x08019413
 8013798:	08019463 	.word	0x08019463

0801379c <NFC_WriteReg>:
int32_t NFC_WriteReg(uint16_t DevAddr, uint16_t Reg, const uint8_t *pData, uint16_t Length) {
 801379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801379e:	4674      	mov	r4, lr
 80137a0:	b08d      	sub	sp, #52	; 0x34
 80137a2:	001e      	movs	r6, r3
 80137a4:	940b      	str	r4, [sp, #44]	; 0x2c
 80137a6:	9107      	str	r1, [sp, #28]
 80137a8:	9209      	str	r2, [sp, #36]	; 0x24
 80137aa:	9006      	str	r0, [sp, #24]
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 80137ac:	2732      	movs	r7, #50	; 0x32
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80137ae:	f7f7 fb81 	bl	800aeb4 <HAL_GetTick>
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 80137b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80137b4:	9008      	str	r0, [sp, #32]
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	9702      	str	r7, [sp, #8]
 80137ba:	9601      	str	r6, [sp, #4]
 80137bc:	2302      	movs	r3, #2
 80137be:	9a07      	ldr	r2, [sp, #28]
 80137c0:	9906      	ldr	r1, [sp, #24]
 80137c2:	4823      	ldr	r0, [pc, #140]	; (8013850 <NFC_WriteReg+0xb4>)
 80137c4:	f7f8 fcfa 	bl	800c1bc <HAL_I2C_Mem_Write>
    return 0;
 80137c8:	2400      	movs	r4, #0
  if(!HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50))
 80137ca:	42a0      	cmp	r0, r4
 80137cc:	d012      	beq.n	80137f4 <NFC_WriteReg+0x58>
  uint32_t try = 3, r = 1, ts = HAL_GetTick();
 80137ce:	2503      	movs	r5, #3
  NFC_WaitACK(5);
 80137d0:	2005      	movs	r0, #5
 80137d2:	f7ff ff0f 	bl	80135f4 <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 80137d6:	970a      	str	r7, [sp, #40]	; 0x28
 80137d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137da:	4f1d      	ldr	r7, [pc, #116]	; (8013850 <NFC_WriteReg+0xb4>)
 80137dc:	9302      	str	r3, [sp, #8]
 80137de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e0:	9601      	str	r6, [sp, #4]
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	9a07      	ldr	r2, [sp, #28]
 80137e6:	2302      	movs	r3, #2
 80137e8:	9906      	ldr	r1, [sp, #24]
 80137ea:	0038      	movs	r0, r7
 80137ec:	f7f8 fce6 	bl	800c1bc <HAL_I2C_Mem_Write>
 80137f0:	1e04      	subs	r4, r0, #0
 80137f2:	d102      	bne.n	80137fa <NFC_WriteReg+0x5e>
}
 80137f4:	0020      	movs	r0, r4
 80137f6:	b00d      	add	sp, #52	; 0x34
 80137f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_PRINTF("NFC I2C >TX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 80137fa:	f7f7 fb5b 	bl	800aeb4 <HAL_GetTick>
 80137fe:	9907      	ldr	r1, [sp, #28]
 8013800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013802:	9a08      	ldr	r2, [sp, #32]
 8013804:	9103      	str	r1, [sp, #12]
 8013806:	9906      	ldr	r1, [sp, #24]
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 8013808:	3d01      	subs	r5, #1
    DBG_PRINTF("NFC I2C >TX TRY dur:%3d try:%2d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:%x\n", HAL_GetTick() - ts, try, r, hi2c1.ErrorCode, DevAddr, Reg, Length), NFC_WaitACK(50);
 801380a:	1a82      	subs	r2, r0, r2
 801380c:	9102      	str	r1, [sp, #8]
 801380e:	9301      	str	r3, [sp, #4]
 8013810:	9604      	str	r6, [sp, #16]
 8013812:	9400      	str	r4, [sp, #0]
 8013814:	002b      	movs	r3, r5
 8013816:	490f      	ldr	r1, [pc, #60]	; (8013854 <NFC_WriteReg+0xb8>)
 8013818:	2000      	movs	r0, #0
 801381a:	f7f6 ffc7 	bl	800a7ac <SEGGER_RTT_printf>
 801381e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013820:	f7ff fee8 	bl	80135f4 <NFC_WaitACK>
  while(try-- && (r = HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, (void*)pData, Length, 50)))
 8013824:	2d00      	cmp	r5, #0
 8013826:	d1d7      	bne.n	80137d8 <NFC_WriteReg+0x3c>
    DBG_PRINTF("NFC I2C >TX ERR dur:%3d ret:0x%x err:0x%x dev:0x%02x reg:0x%04x len:0x%x caller:%p\n", HAL_GetTick() - ts, r, hi2c1.ErrorCode, DevAddr, Reg, Length, __builtin_return_address(0));
 8013828:	f7f7 fb44 	bl	800aeb4 <HAL_GetTick>
 801382c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801382e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013830:	9104      	str	r1, [sp, #16]
 8013832:	9907      	ldr	r1, [sp, #28]
 8013834:	9a08      	ldr	r2, [sp, #32]
 8013836:	9102      	str	r1, [sp, #8]
 8013838:	9906      	ldr	r1, [sp, #24]
 801383a:	1a82      	subs	r2, r0, r2
 801383c:	9101      	str	r1, [sp, #4]
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	9603      	str	r6, [sp, #12]
 8013842:	0023      	movs	r3, r4
 8013844:	4904      	ldr	r1, [pc, #16]	; (8013858 <NFC_WriteReg+0xbc>)
 8013846:	0028      	movs	r0, r5
 8013848:	f7f6 ffb0 	bl	800a7ac <SEGGER_RTT_printf>
 801384c:	e7d2      	b.n	80137f4 <NFC_WriteReg+0x58>
 801384e:	46c0      	nop			; (mov r8, r8)
 8013850:	20001ad4 	.word	0x20001ad4
 8013854:	080194ea 	.word	0x080194ea
 8013858:	0801953a 	.word	0x0801953a

0801385c <u64>:
 *        0 1 2 3 --el-memcpy--> 3210 --proto--> 0 1 2 3
 *        0 1 2 3 --be-memcpy--> 0123 --proto--> 3 2 1 0
 *        0 1 2 3 --el-boolor--> 3210 --proto--> 0 1 2 3
 *        0 1 2 3 --be-boolor--> 3210 --proto--> 0 1 2 3
 */
static uint64_t u64(uint8_t b[static 8]) {
 801385c:	0003      	movs	r3, r0
  return
      (uint64_t)b[7] << 56 | (uint64_t)b[6] << 48 |
      (uint64_t)b[5] << 40 | (uint64_t)b[4] << 32 |
      (uint64_t)b[3] << 24 | (uint64_t)b[2] << 16 |
      (uint64_t)b[1] << 8  | (uint64_t)b[0];
 801385e:	785a      	ldrb	r2, [r3, #1]
 8013860:	7800      	ldrb	r0, [r0, #0]
 8013862:	0212      	lsls	r2, r2, #8
 8013864:	4302      	orrs	r2, r0
 8013866:	7898      	ldrb	r0, [r3, #2]
 8013868:	7919      	ldrb	r1, [r3, #4]
 801386a:	0400      	lsls	r0, r0, #16
 801386c:	4302      	orrs	r2, r0
 801386e:	78d8      	ldrb	r0, [r3, #3]
 8013870:	0600      	lsls	r0, r0, #24
 8013872:	4310      	orrs	r0, r2
 8013874:	795a      	ldrb	r2, [r3, #5]
 8013876:	0212      	lsls	r2, r2, #8
 8013878:	430a      	orrs	r2, r1
 801387a:	7999      	ldrb	r1, [r3, #6]
 801387c:	0409      	lsls	r1, r1, #16
 801387e:	430a      	orrs	r2, r1
 8013880:	79d9      	ldrb	r1, [r3, #7]
 8013882:	0609      	lsls	r1, r1, #24
 8013884:	4311      	orrs	r1, r2
}
 8013886:	4770      	bx	lr

08013888 <PrintBuffer>:
static void PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8013888:	b570      	push	{r4, r5, r6, lr}
 801388a:	0014      	movs	r4, r2
 801388c:	000d      	movs	r5, r1
  DBG_PRINTF("%s0x", pre);
 801388e:	0002      	movs	r2, r0
 8013890:	490c      	ldr	r1, [pc, #48]	; (80138c4 <PrintBuffer+0x3c>)
 8013892:	2000      	movs	r0, #0
static void PrintBuffer(const char* pre, const uint8_t buf[], uint16_t len, const char* post) {
 8013894:	001e      	movs	r6, r3
  DBG_PRINTF("%s0x", pre);
 8013896:	f7f6 ff89 	bl	800a7ac <SEGGER_RTT_printf>
  if(len) do {
 801389a:	2c00      	cmp	r4, #0
 801389c:	d00b      	beq.n	80138b6 <PrintBuffer+0x2e>
 801389e:	3c01      	subs	r4, #1
 80138a0:	b2a4      	uxth	r4, r4
 80138a2:	192c      	adds	r4, r5, r4
 80138a4:	3d01      	subs	r5, #1
    DBG_PRINTF("%02x", buf[--len]);
 80138a6:	7822      	ldrb	r2, [r4, #0]
 80138a8:	4907      	ldr	r1, [pc, #28]	; (80138c8 <PrintBuffer+0x40>)
 80138aa:	2000      	movs	r0, #0
 80138ac:	3c01      	subs	r4, #1
 80138ae:	f7f6 ff7d 	bl	800a7ac <SEGGER_RTT_printf>
  } while(len);
 80138b2:	42a5      	cmp	r5, r4
 80138b4:	d1f7      	bne.n	80138a6 <PrintBuffer+0x1e>
  DBG_PRINTF("%s", post);
 80138b6:	0032      	movs	r2, r6
 80138b8:	4904      	ldr	r1, [pc, #16]	; (80138cc <PrintBuffer+0x44>)
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7f6 ff76 	bl	800a7ac <SEGGER_RTT_printf>
}
 80138c0:	bd70      	pop	{r4, r5, r6, pc}
 80138c2:	46c0      	nop			; (mov r8, r8)
 80138c4:	08018e35 	.word	0x08018e35
 80138c8:	08018e3a 	.word	0x08018e3a
 80138cc:	08018e3f 	.word	0x08018e3f

080138d0 <PBEncodeField>:
 *
 * BUGS
 *        Heed perils of variable argument lists! If passing literals, cast!
 *        Else u32 value 3 becomes a u64 + UB, e.g. 0xb4dc0ded_00000003.
 */
size_t PBEncodeField(uint8_t * restrict out, size_t len, uint32_t key, ...) {
 80138d0:	b40c      	push	{r2, r3}
 80138d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138d4:	0007      	movs	r7, r0
  va_list ap;
  size_t size = 0;
  const uint8_t type = key & 0x7;
 80138d6:	2007      	movs	r0, #7
size_t PBEncodeField(uint8_t * restrict out, size_t len, uint32_t key, ...) {
 80138d8:	b087      	sub	sp, #28
 80138da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const uint8_t type = key & 0x7;
 80138dc:	b2da      	uxtb	r2, r3
 80138de:	4010      	ands	r0, r2
  const uint32_t id = key >> 3;
 80138e0:	08dc      	lsrs	r4, r3, #3

  /* contract programming * preconditions */
  assert(type == 0 || type == 1 || type == 2 || type == 5);
 80138e2:	2802      	cmp	r0, #2
 80138e4:	d907      	bls.n	80138f6 <PBEncodeField+0x26>
 80138e6:	2805      	cmp	r0, #5
 80138e8:	d005      	beq.n	80138f6 <PBEncodeField+0x26>
 80138ea:	2168      	movs	r1, #104	; 0x68
 80138ec:	4b6c      	ldr	r3, [pc, #432]	; (8013aa0 <PBEncodeField+0x1d0>)
 80138ee:	4a6d      	ldr	r2, [pc, #436]	; (8013aa4 <PBEncodeField+0x1d4>)
  assert(out || !len);
 80138f0:	486d      	ldr	r0, [pc, #436]	; (8013aa8 <PBEncodeField+0x1d8>)
 80138f2:	f001 fe51 	bl	8015598 <__assert_func>
 80138f6:	09db      	lsrs	r3, r3, #7
 80138f8:	2f00      	cmp	r7, #0
 80138fa:	d106      	bne.n	801390a <PBEncodeField+0x3a>
 80138fc:	2900      	cmp	r1, #0
 80138fe:	d100      	bne.n	8013902 <PBEncodeField+0x32>
 8013900:	e0c9      	b.n	8013a96 <PBEncodeField+0x1c6>
 8013902:	4b6a      	ldr	r3, [pc, #424]	; (8013aac <PBEncodeField+0x1dc>)
 8013904:	4a67      	ldr	r2, [pc, #412]	; (8013aa4 <PBEncodeField+0x1d4>)
 8013906:	2169      	movs	r1, #105	; 0x69
 8013908:	e7f2      	b.n	80138f0 <PBEncodeField+0x20>
  assert(id);
 801390a:	2c00      	cmp	r4, #0
 801390c:	d103      	bne.n	8013916 <PBEncodeField+0x46>
 801390e:	4b68      	ldr	r3, [pc, #416]	; (8013ab0 <PBEncodeField+0x1e0>)
 8013910:	4a64      	ldr	r2, [pc, #400]	; (8013aa4 <PBEncodeField+0x1d4>)
 8013912:	216a      	movs	r1, #106	; 0x6a
 8013914:	e7ec      	b.n	80138f0 <PBEncodeField+0x20>

  /* Encode key */

  /* encode 1st byte of any key */
  if(size++ < len)
 8013916:	2900      	cmp	r1, #0
 8013918:	d007      	beq.n	801392a <PBEncodeField+0x5a>
    /* 3 type bits | 4 id bits | 8th continuation bit */
    out[size - 1] = (key & 0x7f) | (key >> 7 ? 0x80 : 0);
 801391a:	247f      	movs	r4, #127	; 0x7f
 801391c:	4022      	ands	r2, r4
 801391e:	001c      	movs	r4, r3
 8013920:	1e65      	subs	r5, r4, #1
 8013922:	41ac      	sbcs	r4, r5
 8013924:	01e4      	lsls	r4, r4, #7
 8013926:	4322      	orrs	r2, r4
 8013928:	703a      	strb	r2, [r7, #0]

  /* for each 7-bits encode 1-byte (25-bits, 4-bytes total) */
  for(uint32_t i = id >> 4; i; i >>= 7)
    if(size++ < len)
      /* 7 id bits | 8th continuation bit */
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 801392a:	227f      	movs	r2, #127	; 0x7f
  for(uint32_t i = id >> 4; i; i >>= 7)
 801392c:	2401      	movs	r4, #1
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 801392e:	4694      	mov	ip, r2
  for(uint32_t i = id >> 4; i; i >>= 7)
 8013930:	2b00      	cmp	r3, #0
 8013932:	d108      	bne.n	8013946 <PBEncodeField+0x76>

  /* Encode value */

  va_start(ap, key);
 8013934:	ab0d      	add	r3, sp, #52	; 0x34
 8013936:	9302      	str	r3, [sp, #8]
  switch(type) {
 8013938:	2805      	cmp	r0, #5
 801393a:	d835      	bhi.n	80139a8 <PBEncodeField+0xd8>
 801393c:	f7f4 fbf6 	bl	800812c <__gnu_thumb1_case_uqi>
 8013940:	34773a11 	.word	0x34773a11
 8013944:	6134      	.short	0x6134
 8013946:	09da      	lsrs	r2, r3, #7
    if(size++ < len)
 8013948:	42a1      	cmp	r1, r4
 801394a:	d907      	bls.n	801395c <PBEncodeField+0x8c>
      out[size - 1] = (i & 0x7f) | (i >> 7 ? 0x80 : 0);
 801394c:	4665      	mov	r5, ip
 801394e:	0016      	movs	r6, r2
 8013950:	402b      	ands	r3, r5
 8013952:	1e75      	subs	r5, r6, #1
 8013954:	41ae      	sbcs	r6, r5
 8013956:	01f6      	lsls	r6, r6, #7
 8013958:	4333      	orrs	r3, r6
 801395a:	553b      	strb	r3, [r7, r4]
 801395c:	3401      	adds	r4, #1
  for(uint32_t i = id >> 4; i; i >>= 7)
 801395e:	0013      	movs	r3, r2
 8013960:	e7e6      	b.n	8013930 <PBEncodeField+0x60>
  case PB_TAGTYPE_VARINT: {
    /* foreach 7-bits encode 1-byte (64-bits, 10-bytes total) */
    uint64_t in = va_arg(ap, uint64_t);
 8013962:	9b02      	ldr	r3, [sp, #8]
 8013964:	0025      	movs	r5, r4
 8013966:	1dda      	adds	r2, r3, #7
 8013968:	2307      	movs	r3, #7
 801396a:	439a      	bics	r2, r3
 801396c:	0013      	movs	r3, r2
 801396e:	3308      	adds	r3, #8
 8013970:	9302      	str	r3, [sp, #8]
 8013972:	6813      	ldr	r3, [r2, #0]
 8013974:	6852      	ldr	r2, [r2, #4]
 8013976:	0656      	lsls	r6, r2, #25
 8013978:	09d8      	lsrs	r0, r3, #7
 801397a:	4330      	orrs	r0, r6
 801397c:	0006      	movs	r6, r0
 801397e:	09d2      	lsrs	r2, r2, #7
 8013980:	4316      	orrs	r6, r2
    do {
      if(size++ < len)
 8013982:	3401      	adds	r4, #1
 8013984:	46b4      	mov	ip, r6
 8013986:	42a9      	cmp	r1, r5
 8013988:	d909      	bls.n	801399e <PBEncodeField+0xce>
        out[size - 1] = (in & 0x7f) | (in >> 7 ? 0x80 : 0);
 801398a:	267f      	movs	r6, #127	; 0x7f
 801398c:	4033      	ands	r3, r6
 801398e:	4666      	mov	r6, ip
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	1e73      	subs	r3, r6, #1
 8013994:	419e      	sbcs	r6, r3
 8013996:	9b00      	ldr	r3, [sp, #0]
 8013998:	01f6      	lsls	r6, r6, #7
 801399a:	431e      	orrs	r6, r3
 801399c:	557e      	strb	r6, [r7, r5]
 801399e:	0003      	movs	r3, r0
    } while(in >>= 7);
 80139a0:	4660      	mov	r0, ip
      if(size++ < len)
 80139a2:	0025      	movs	r5, r4
    } while(in >>= 7);
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d1e6      	bne.n	8013976 <PBEncodeField+0xa6>
  default: break;;
  }
  va_end(ap);

  return size;
}
 80139a8:	0020      	movs	r0, r4
 80139aa:	b007      	add	sp, #28
 80139ac:	bcf0      	pop	{r4, r5, r6, r7}
 80139ae:	bc08      	pop	{r3}
 80139b0:	b002      	add	sp, #8
 80139b2:	4718      	bx	r3
    uint64_t x = va_arg(ap, uint64_t);
 80139b4:	2207      	movs	r2, #7
 80139b6:	9b02      	ldr	r3, [sp, #8]
 80139b8:	0025      	movs	r5, r4
 80139ba:	3307      	adds	r3, #7
 80139bc:	4393      	bics	r3, r2
 80139be:	001a      	movs	r2, r3
 80139c0:	3208      	adds	r2, #8
 80139c2:	9202      	str	r2, [sp, #8]
 80139c4:	3508      	adds	r5, #8
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 80139c6:	42a1      	cmp	r1, r4
 80139c8:	d303      	bcc.n	80139d2 <PBEncodeField+0x102>
 80139ca:	42a9      	cmp	r1, r5
 80139cc:	d203      	bcs.n	80139d6 <PBEncodeField+0x106>
 80139ce:	1b0a      	subs	r2, r1, r4
    if(cpylen)
 80139d0:	d102      	bne.n	80139d8 <PBEncodeField+0x108>
    break;;
 80139d2:	002c      	movs	r4, r5
 80139d4:	e7e8      	b.n	80139a8 <PBEncodeField+0xd8>
    const size_t cpylen = size > len ? 0 : size + 8 > len ? len - size : 8;
 80139d6:	2208      	movs	r2, #8
    uint64_t x = va_arg(ap, uint64_t);
 80139d8:	6818      	ldr	r0, [r3, #0]
      memcpy(out + size, (const uint8_t[8]){
 80139da:	a904      	add	r1, sp, #16
    uint64_t x = va_arg(ap, uint64_t);
 80139dc:	685b      	ldr	r3, [r3, #4]
        x >>  0, x >>  8, x >> 16, x >> 24,
 80139de:	0a06      	lsrs	r6, r0, #8
      memcpy(out + size, (const uint8_t[8]){
 80139e0:	7008      	strb	r0, [r1, #0]
 80139e2:	704e      	strb	r6, [r1, #1]
        x >>  0, x >>  8, x >> 16, x >> 24,
 80139e4:	0c06      	lsrs	r6, r0, #16
 80139e6:	0e00      	lsrs	r0, r0, #24
      memcpy(out + size, (const uint8_t[8]){
 80139e8:	70c8      	strb	r0, [r1, #3]
        x >> 32, x >> 40, x >> 48, x >> 56}, cpylen);
 80139ea:	0a18      	lsrs	r0, r3, #8
      memcpy(out + size, (const uint8_t[8]){
 80139ec:	710b      	strb	r3, [r1, #4]
 80139ee:	7148      	strb	r0, [r1, #5]
        x >> 32, x >> 40, x >> 48, x >> 56}, cpylen);
 80139f0:	0c18      	lsrs	r0, r3, #16
 80139f2:	0e1b      	lsrs	r3, r3, #24
      memcpy(out + size, (const uint8_t[8]){
 80139f4:	708e      	strb	r6, [r1, #2]
 80139f6:	7188      	strb	r0, [r1, #6]
 80139f8:	71cb      	strb	r3, [r1, #7]
      memcpy(out + size, (const uint8_t[4]){
 80139fa:	1938      	adds	r0, r7, r4
 80139fc:	f001 fe65 	bl	80156ca <memcpy>
 8013a00:	e7e7      	b.n	80139d2 <PBEncodeField+0x102>
    uint32_t x = va_arg(ap, uint32_t);
 8013a02:	9b02      	ldr	r3, [sp, #8]
 8013a04:	1d25      	adds	r5, r4, #4
 8013a06:	1d1a      	adds	r2, r3, #4
 8013a08:	9202      	str	r2, [sp, #8]
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8013a0a:	42a1      	cmp	r1, r4
 8013a0c:	d3e1      	bcc.n	80139d2 <PBEncodeField+0x102>
 8013a0e:	428d      	cmp	r5, r1
 8013a10:	d90b      	bls.n	8013a2a <PBEncodeField+0x15a>
 8013a12:	1b0a      	subs	r2, r1, r4
    if(cpylen)
 8013a14:	d0dd      	beq.n	80139d2 <PBEncodeField+0x102>
    uint32_t x = va_arg(ap, uint32_t);
 8013a16:	681b      	ldr	r3, [r3, #0]
      memcpy(out + size, (const uint8_t[4]){
 8013a18:	a903      	add	r1, sp, #12
        x >>  0, x >>  8, x >> 16, x >> 24}, cpylen);
 8013a1a:	0a18      	lsrs	r0, r3, #8
      memcpy(out + size, (const uint8_t[4]){
 8013a1c:	700b      	strb	r3, [r1, #0]
 8013a1e:	7048      	strb	r0, [r1, #1]
        x >>  0, x >>  8, x >> 16, x >> 24}, cpylen);
 8013a20:	0c18      	lsrs	r0, r3, #16
 8013a22:	0e1b      	lsrs	r3, r3, #24
      memcpy(out + size, (const uint8_t[4]){
 8013a24:	7088      	strb	r0, [r1, #2]
 8013a26:	70cb      	strb	r3, [r1, #3]
 8013a28:	e7e7      	b.n	80139fa <PBEncodeField+0x12a>
    const size_t cpylen = size > len ? 0 : size + 4 > len ? len - size : 4;
 8013a2a:	2204      	movs	r2, #4
 8013a2c:	e7f3      	b.n	8013a16 <PBEncodeField+0x146>
    const size_t buflen = va_arg(ap, size_t);
 8013a2e:	9b02      	ldr	r3, [sp, #8]
    uint64_t x = buflen;
 8013a30:	2600      	movs	r6, #0
    const uint8_t *buf = va_arg(ap, uint8_t * restrict);
 8013a32:	0018      	movs	r0, r3
    const size_t buflen = va_arg(ap, size_t);
 8013a34:	681a      	ldr	r2, [r3, #0]
    const uint8_t *buf = va_arg(ap, uint8_t * restrict);
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	3008      	adds	r0, #8
 8013a3a:	9002      	str	r0, [sp, #8]
 8013a3c:	9301      	str	r3, [sp, #4]
    uint64_t x = buflen;
 8013a3e:	9200      	str	r2, [sp, #0]
 8013a40:	0675      	lsls	r5, r6, #25
 8013a42:	46ac      	mov	ip, r5
 8013a44:	9b00      	ldr	r3, [sp, #0]
      if(size++ < len)
 8013a46:	1c60      	adds	r0, r4, #1
 8013a48:	09dd      	lsrs	r5, r3, #7
 8013a4a:	4663      	mov	r3, ip
 8013a4c:	431d      	orrs	r5, r3
 8013a4e:	09f3      	lsrs	r3, r6, #7
 8013a50:	469c      	mov	ip, r3
 8013a52:	42a1      	cmp	r1, r4
 8013a54:	d90b      	bls.n	8013a6e <PBEncodeField+0x19e>
        out[size - 1] = (x & 0x7f) | (x >> 7 ? 0x80 : 0);
 8013a56:	237f      	movs	r3, #127	; 0x7f
 8013a58:	9e00      	ldr	r6, [sp, #0]
 8013a5a:	401e      	ands	r6, r3
 8013a5c:	9600      	str	r6, [sp, #0]
 8013a5e:	4666      	mov	r6, ip
 8013a60:	432e      	orrs	r6, r5
 8013a62:	1e73      	subs	r3, r6, #1
 8013a64:	419e      	sbcs	r6, r3
 8013a66:	9b00      	ldr	r3, [sp, #0]
 8013a68:	01f6      	lsls	r6, r6, #7
 8013a6a:	431e      	orrs	r6, r3
 8013a6c:	553e      	strb	r6, [r7, r4]
 8013a6e:	4666      	mov	r6, ip
 8013a70:	9500      	str	r5, [sp, #0]
      if(size++ < len)
 8013a72:	0004      	movs	r4, r0
    } while(x >>= 7);
 8013a74:	4335      	orrs	r5, r6
 8013a76:	d1e3      	bne.n	8013a40 <PBEncodeField+0x170>
 8013a78:	1814      	adds	r4, r2, r0
    const size_t cpylen = size > len ? 0 : size + buflen > len ? len - size : buflen;
 8013a7a:	4281      	cmp	r1, r0
 8013a7c:	d200      	bcs.n	8013a80 <PBEncodeField+0x1b0>
 8013a7e:	e793      	b.n	80139a8 <PBEncodeField+0xd8>
 8013a80:	42a1      	cmp	r1, r4
 8013a82:	d200      	bcs.n	8013a86 <PBEncodeField+0x1b6>
 8013a84:	1a0a      	subs	r2, r1, r0
    if(cpylen)
 8013a86:	2a00      	cmp	r2, #0
 8013a88:	d100      	bne.n	8013a8c <PBEncodeField+0x1bc>
 8013a8a:	e78d      	b.n	80139a8 <PBEncodeField+0xd8>
      memcpy(out + size, buf, cpylen);
 8013a8c:	1838      	adds	r0, r7, r0
 8013a8e:	9901      	ldr	r1, [sp, #4]
 8013a90:	f001 fe1b 	bl	80156ca <memcpy>
  return size;
 8013a94:	e788      	b.n	80139a8 <PBEncodeField+0xd8>
  assert(id);
 8013a96:	2c00      	cmp	r4, #0
 8013a98:	d000      	beq.n	8013a9c <PBEncodeField+0x1cc>
 8013a9a:	e746      	b.n	801392a <PBEncodeField+0x5a>
 8013a9c:	e737      	b.n	801390e <PBEncodeField+0x3e>
 8013a9e:	46c0      	nop			; (mov r8, r8)
 8013aa0:	08019764 	.word	0x08019764
 8013aa4:	080197b4 	.word	0x080197b4
 8013aa8:	08019795 	.word	0x08019795
 8013aac:	080197a5 	.word	0x080197a5
 8013ab0:	080197b1 	.word	0x080197b1

08013ab4 <PBDecodeVarint>:
 *        0x7fff_ffff_ffff_ffff | 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f
 *        0xffff_ffff_ffff_ffff | 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0
 *        0xffff_ffff_ffff_ffff | 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f
 *
 */
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8013ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    nextbits = maxbits - bits;
    nextbits = nextbits > 7 ? 7 : nextbits;
    bitmask = ((uint8_t)1 << nextbits) - 1;

    /* Carve bits, affix to value */
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013ab6:	000b      	movs	r3, r1
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8013ab8:	0015      	movs	r5, r2
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013aba:	2207      	movs	r2, #7
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8013abc:	000f      	movs	r7, r1
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013abe:	4013      	ands	r3, r2
 8013ac0:	1e59      	subs	r1, r3, #1
 8013ac2:	418b      	sbcs	r3, r1
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8013ac4:	b085      	sub	sp, #20
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013ac6:	08f9      	lsrs	r1, r7, #3
 8013ac8:	185b      	adds	r3, r3, r1
    nextbits = nextbits > 7 ? 7 : nextbits;
 8013aca:	4669      	mov	r1, sp
uint8_t PBDecodeVarint(const uint8_t* varint, uint8_t maxbits, void* value) {
 8013acc:	0006      	movs	r6, r0
  uint8_t nextbits, bitmask, bits = 0;
 8013ace:	2400      	movs	r4, #0
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013ad0:	3b01      	subs	r3, #1
    nextbits = nextbits > 7 ? 7 : nextbits;
 8013ad2:	73ca      	strb	r2, [r1, #15]
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013ad4:	9302      	str	r3, [sp, #8]
    varint += !!bits;
 8013ad6:	0023      	movs	r3, r4
 8013ad8:	1e5a      	subs	r2, r3, #1
 8013ada:	4193      	sbcs	r3, r2
 8013adc:	18f6      	adds	r6, r6, r3
    nextbits = maxbits - bits;
 8013ade:	1b3b      	subs	r3, r7, r4
 8013ae0:	b2db      	uxtb	r3, r3
    nextbits = nextbits > 7 ? 7 : nextbits;
 8013ae2:	1c1a      	adds	r2, r3, #0
 8013ae4:	2b07      	cmp	r3, #7
 8013ae6:	d901      	bls.n	8013aec <PBDecodeVarint+0x38>
 8013ae8:	466b      	mov	r3, sp
 8013aea:	7bda      	ldrb	r2, [r3, #15]
 8013aec:	b2d3      	uxtb	r3, r2
 8013aee:	9301      	str	r3, [sp, #4]
    bitmask = ((uint8_t)1 << nextbits) - 1;
 8013af0:	2301      	movs	r3, #1
 8013af2:	9a01      	ldr	r2, [sp, #4]
 8013af4:	4093      	lsls	r3, r2
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013af6:	9a02      	ldr	r2, [sp, #8]
    bitmask = ((uint8_t)1 << nextbits) - 1;
 8013af8:	3b01      	subs	r3, #1
 8013afa:	b2db      	uxtb	r3, r3
    switch(maxbits / 8 + !!(maxbits % 8)) {
 8013afc:	2a07      	cmp	r2, #7
 8013afe:	d814      	bhi.n	8013b2a <PBDecodeVarint+0x76>
 8013b00:	0010      	movs	r0, r2
 8013b02:	f7f4 fb13 	bl	800812c <__gnu_thumb1_case_uqi>
 8013b06:	1504      	.short	0x1504
 8013b08:	12121c12 	.word	0x12121c12
 8013b0c:	2312      	.short	0x2312
    case 1: *(uint8_t *)value |= ((bitmask & *varint) + (uint8_t )0) << bits; break;
 8013b0e:	7830      	ldrb	r0, [r6, #0]
 8013b10:	4003      	ands	r3, r0
 8013b12:	40a3      	lsls	r3, r4
 8013b14:	7828      	ldrb	r0, [r5, #0]
 8013b16:	4303      	orrs	r3, r0
 8013b18:	702b      	strb	r3, [r5, #0]
    case 2: *(uint16_t*)value |= ((bitmask & *varint) + (uint16_t)0) << bits; break;
    case 4: *(uint32_t*)value |= ((bitmask & *varint) + (uint32_t)0) << bits; break;
    case 8: *(uint64_t*)value |= ((bitmask & *varint) + (uint64_t)0) << bits; break;
    default: return 0; break;
    }
    bits += nextbits;
 8013b1a:	9b01      	ldr	r3, [sp, #4]
 8013b1c:	18e4      	adds	r4, r4, r3

  /* Check continuation bit after taking value */
  } while(0x80 & *varint && bits < maxbits);
 8013b1e:	7833      	ldrb	r3, [r6, #0]
    bits += nextbits;
 8013b20:	b2e4      	uxtb	r4, r4
  } while(0x80 & *varint && bits < maxbits);
 8013b22:	2b7f      	cmp	r3, #127	; 0x7f
 8013b24:	d91f      	bls.n	8013b66 <PBDecodeVarint+0xb2>
 8013b26:	42a7      	cmp	r7, r4
 8013b28:	d8d5      	bhi.n	8013ad6 <PBDecodeVarint+0x22>
    default: return 0; break;
 8013b2a:	2000      	movs	r0, #0

  /* Return input bytes read or 0 if too many continuation bits set */
  return *varint & 0x80 ? 0 : bits / 7 + !!(bits % 7);
}
 8013b2c:	b005      	add	sp, #20
 8013b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case 2: *(uint16_t*)value |= ((bitmask & *varint) + (uint16_t)0) << bits; break;
 8013b30:	7830      	ldrb	r0, [r6, #0]
 8013b32:	4003      	ands	r3, r0
 8013b34:	40a3      	lsls	r3, r4
 8013b36:	8828      	ldrh	r0, [r5, #0]
 8013b38:	4303      	orrs	r3, r0
 8013b3a:	802b      	strh	r3, [r5, #0]
 8013b3c:	e7ed      	b.n	8013b1a <PBDecodeVarint+0x66>
    case 4: *(uint32_t*)value |= ((bitmask & *varint) + (uint32_t)0) << bits; break;
 8013b3e:	7830      	ldrb	r0, [r6, #0]
 8013b40:	682a      	ldr	r2, [r5, #0]
 8013b42:	4003      	ands	r3, r0
 8013b44:	40a3      	lsls	r3, r4
 8013b46:	4313      	orrs	r3, r2
 8013b48:	602b      	str	r3, [r5, #0]
 8013b4a:	e7e6      	b.n	8013b1a <PBDecodeVarint+0x66>
    case 8: *(uint64_t*)value |= ((bitmask & *varint) + (uint64_t)0) << bits; break;
 8013b4c:	7830      	ldrb	r0, [r6, #0]
 8013b4e:	0022      	movs	r2, r4
 8013b50:	4018      	ands	r0, r3
 8013b52:	2100      	movs	r1, #0
 8013b54:	f7f4 fc74 	bl	8008440 <__aeabi_llsl>
 8013b58:	682b      	ldr	r3, [r5, #0]
 8013b5a:	4318      	orrs	r0, r3
 8013b5c:	686b      	ldr	r3, [r5, #4]
 8013b5e:	6028      	str	r0, [r5, #0]
 8013b60:	4319      	orrs	r1, r3
 8013b62:	6069      	str	r1, [r5, #4]
 8013b64:	e7d9      	b.n	8013b1a <PBDecodeVarint+0x66>
  return *varint & 0x80 ? 0 : bits / 7 + !!(bits % 7);
 8013b66:	2107      	movs	r1, #7
 8013b68:	0020      	movs	r0, r4
 8013b6a:	f7f4 fb79 	bl	8008260 <__aeabi_uidivmod>
 8013b6e:	b2cd      	uxtb	r5, r1
 8013b70:	1e69      	subs	r1, r5, #1
 8013b72:	418d      	sbcs	r5, r1
 8013b74:	0020      	movs	r0, r4
 8013b76:	2107      	movs	r1, #7
 8013b78:	f7f4 faec 	bl	8008154 <__udivsi3>
 8013b7c:	1828      	adds	r0, r5, r0
 8013b7e:	b2c0      	uxtb	r0, r0
 8013b80:	e7d4      	b.n	8013b2c <PBDecodeVarint+0x78>
	...

08013b84 <PBDecodeMsg>:
 *
 *            larger key  varint_length  payload
 *              82 80 40             05  aa bb cc dd ee
 *        bytes 131072 = {0xaa, 0xbb, 0xcc, 0xdd, 0xee}
 */
void PBDecodeMsg(const uint8_t *msg, uint8_t len) {
 8013b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b86:	b08b      	sub	sp, #44	; 0x2c
 8013b88:	9001      	str	r0, [sp, #4]
 8013b8a:	1e0d      	subs	r5, r1, #0
  const char *debug_msg = "\n";
  uint8_t debug_fieldpos = 0;
  bool pending_lora_changes = false, pending_changes = false;

  /* 1st byte always zero, to allow future (unlikely) breaking changes */
  if(len < 1 || msg[0]) {
 8013b8c:	d100      	bne.n	8013b90 <PBDecodeMsg+0xc>
 8013b8e:	e16c      	b.n	8013e6a <PBDecodeMsg+0x2e6>
 8013b90:	7806      	ldrb	r6, [r0, #0]
 8013b92:	2e00      	cmp	r6, #0
 8013b94:	d000      	beq.n	8013b98 <PBDecodeMsg+0x14>
 8013b96:	e168      	b.n	8013e6a <PBDecodeMsg+0x2e6>
    debug_msg = ", Unknown message version\n";
    goto err;
  }
  if(len == 1) {
 8013b98:	2901      	cmp	r1, #1
 8013b9a:	d100      	bne.n	8013b9e <PBDecodeMsg+0x1a>
 8013b9c:	e168      	b.n	8013e70 <PBDecodeMsg+0x2ec>
  bool pending_lora_changes = false, pending_changes = false;
 8013b9e:	9605      	str	r6, [sp, #20]
 8013ba0:	9602      	str	r6, [sp, #8]
    debug_msg = ", Out-of-bounds\n";
    goto err;
  }
  pos++;
 8013ba2:	3601      	adds	r6, #1
  /* Each iteration is 1 key-value field */
  while(pos != len) {
    /*
     * Decode Key
     */
    uint8_t tagtype = msg[pos] & 0x7;
 8013ba4:	2207      	movs	r2, #7
 8013ba6:	9b01      	ldr	r3, [sp, #4]
    uint32_t tagnr = 0;
    uint8_t val_rawbytes;
    uint64_t val_int = 0;
 8013ba8:	2100      	movs	r1, #0
    uint8_t tagtype = msg[pos] & 0x7;
 8013baa:	199b      	adds	r3, r3, r6
 8013bac:	9304      	str	r3, [sp, #16]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	1c70      	adds	r0, r6, #1
 8013bb2:	401a      	ands	r2, r3
 8013bb4:	9203      	str	r2, [sp, #12]
    uint32_t tagnr = 0;
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	9207      	str	r2, [sp, #28]
    uint64_t val_int = 0;
 8013bba:	2200      	movs	r2, #0
 8013bbc:	9108      	str	r1, [sp, #32]
 8013bbe:	9209      	str	r2, [sp, #36]	; 0x24

    debug_fieldpos = pos;

    /* Continuation bit set, tag could be 2 to 5 bytes, values [16,2^29-1] */
    if(msg[pos] & 0x80) {
 8013bc0:	b25a      	sxtb	r2, r3
 8013bc2:	2a00      	cmp	r2, #0
 8013bc4:	da2d      	bge.n	8013c22 <PBDecodeMsg+0x9e>
      /* Reuse code to decode subsequent 1 to 4 bytes. */
      uint8_t tagnr_bitlimit = len - pos < 5 ? (len - pos) * 7 : 25;
 8013bc6:	1bab      	subs	r3, r5, r6
 8013bc8:	3119      	adds	r1, #25
 8013bca:	2b04      	cmp	r3, #4
 8013bcc:	dc02      	bgt.n	8013bd4 <PBDecodeMsg+0x50>
 8013bce:	2207      	movs	r2, #7
 8013bd0:	4353      	muls	r3, r2
 8013bd2:	b2d9      	uxtb	r1, r3
      uint8_t tagnr_bytes = PBDecodeVarint(msg + pos + 1, tagnr_bitlimit, &tagnr);
 8013bd4:	9b01      	ldr	r3, [sp, #4]
 8013bd6:	aa07      	add	r2, sp, #28
 8013bd8:	1818      	adds	r0, r3, r0
 8013bda:	f7ff ff6b 	bl	8013ab4 <PBDecodeVarint>

      /* Prevent varint spill, i.e. continuation bit set in all *accessed* bytes */
      if(!tagnr_bytes) {
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d100      	bne.n	8013be4 <PBDecodeMsg+0x60>
 8013be2:	e133      	b.n	8013e4c <PBDecodeMsg+0x2c8>
        goto err;
      }

      /* Merge value of 1st byte with value of subsequent 1 to 4 bytes. */
      tagnr <<= 4;
      tagnr |= (msg[pos] & 0x78) >> 3;
 8013be4:	9b04      	ldr	r3, [sp, #16]
      tagnr <<= 4;
 8013be6:	9a07      	ldr	r2, [sp, #28]
      tagnr |= (msg[pos] & 0x78) >> 3;
 8013be8:	781b      	ldrb	r3, [r3, #0]
      tagnr <<= 4;
 8013bea:	0112      	lsls	r2, r2, #4
      tagnr |= (msg[pos] & 0x78) >> 3;
 8013bec:	065b      	lsls	r3, r3, #25
 8013bee:	0f1b      	lsrs	r3, r3, #28
 8013bf0:	1c74      	adds	r4, r6, #1
 8013bf2:	4313      	orrs	r3, r2
      pos += tagnr_bytes + 1;
 8013bf4:	1824      	adds	r4, r4, r0
      tagnr |= (msg[pos] & 0x78) >> 3;
 8013bf6:	9307      	str	r3, [sp, #28]
      pos += tagnr_bytes + 1;
 8013bf8:	b2e4      	uxtb	r4, r4
      tagnr = (msg[pos] & 0x78) >> 3;
      pos += 1;
    }

    /* Key being zero is ill-formed */
    if(!tagnr) {
 8013bfa:	9b07      	ldr	r3, [sp, #28]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d100      	bne.n	8013c02 <PBDecodeMsg+0x7e>
 8013c00:	e126      	b.n	8013e50 <PBDecodeMsg+0x2cc>
    /*
     * Decode Value
     */

    /* Key without value is ill-formed. */
    if(!(len - pos)) {
 8013c02:	42ac      	cmp	r4, r5
 8013c04:	d100      	bne.n	8013c08 <PBDecodeMsg+0x84>
 8013c06:	e125      	b.n	8013e54 <PBDecodeMsg+0x2d0>
      debug_msg = ", Out-of-bounds tag w/o value\n";
      goto err;
    }

    /* Need size in case to skip unknown field. */
    switch(tagtype) {
 8013c08:	9b03      	ldr	r3, [sp, #12]
 8013c0a:	2b05      	cmp	r3, #5
 8013c0c:	d900      	bls.n	8013c10 <PBDecodeMsg+0x8c>
 8013c0e:	e123      	b.n	8013e58 <PBDecodeMsg+0x2d4>
 8013c10:	0018      	movs	r0, r3
 8013c12:	f7f4 fa95 	bl	8008140 <__gnu_thumb1_case_uhi>
 8013c16:	000a      	.short	0x000a
 8013c18:	0044001a 	.word	0x0044001a
 8013c1c:	01210121 	.word	0x01210121
 8013c20:	0067      	.short	0x0067
      tagnr = (msg[pos] & 0x78) >> 3;
 8013c22:	10db      	asrs	r3, r3, #3
 8013c24:	9307      	str	r3, [sp, #28]
      pos += 1;
 8013c26:	b2c4      	uxtb	r4, r0
 8013c28:	e7e7      	b.n	8013bfa <PBDecodeMsg+0x76>
    case PB_TAGTYPE_VARINT: {
      uint8_t varint_bitlimit = len - pos < 10 ? (len - pos) * 7 : 64;
 8013c2a:	1b2b      	subs	r3, r5, r4
 8013c2c:	2140      	movs	r1, #64	; 0x40
 8013c2e:	2b09      	cmp	r3, #9
 8013c30:	dc02      	bgt.n	8013c38 <PBDecodeMsg+0xb4>
 8013c32:	2207      	movs	r2, #7
 8013c34:	4353      	muls	r3, r2
 8013c36:	b2d9      	uxtb	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8013c38:	9b01      	ldr	r3, [sp, #4]
 8013c3a:	aa08      	add	r2, sp, #32
 8013c3c:	1918      	adds	r0, r3, r4
 8013c3e:	f7ff ff39 	bl	8013ab4 <PBDecodeVarint>
 8013c42:	0007      	movs	r7, r0
      break;
    }
    }

    /* Value was too large or ill-formed */
    if(!val_rawbytes) {
 8013c44:	2f00      	cmp	r7, #0
 8013c46:	d107      	bne.n	8013c58 <PBDecodeMsg+0xd4>
 8013c48:	e035      	b.n	8013cb6 <PBDecodeMsg+0x132>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8013c4a:	9b01      	ldr	r3, [sp, #4]
 8013c4c:	2208      	movs	r2, #8
 8013c4e:	1919      	adds	r1, r3, r4
 8013c50:	a808      	add	r0, sp, #32
 8013c52:	f001 fd3a 	bl	80156ca <memcpy>
      val_rawbytes = 8;
 8013c56:	2708      	movs	r7, #8
    /*
     * Read Value
     */

    /* LoRaWAN */
    if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_OTAA) {
 8013c58:	9b07      	ldr	r3, [sp, #28]
 8013c5a:	9a03      	ldr	r2, [sp, #12]
 8013c5c:	00db      	lsls	r3, r3, #3
 8013c5e:	4313      	orrs	r3, r2
 8013c60:	2b28      	cmp	r3, #40	; 0x28
 8013c62:	d147      	bne.n	8013cf4 <PBDecodeMsg+0x170>
      DBG_PRINTF("NFC <RX lora_otaa 0x%02" PRIu8 "\n", val_int);
 8013c64:	9a08      	ldr	r2, [sp, #32]
 8013c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c68:	4982      	ldr	r1, [pc, #520]	; (8013e74 <PBDecodeMsg+0x2f0>)
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	f7f6 fd9e 	bl	800a7ac <SEGGER_RTT_printf>
      BackUpFlash.otaDevice = !val_int;
 8013c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c72:	9b08      	ldr	r3, [sp, #32]
 8013c74:	4980      	ldr	r1, [pc, #512]	; (8013e78 <PBDecodeMsg+0x2f4>)
 8013c76:	4313      	orrs	r3, r2
 8013c78:	425a      	negs	r2, r3
 8013c7a:	4153      	adcs	r3, r2
 8013c7c:	22a4      	movs	r2, #164	; 0xa4
 8013c7e:	0052      	lsls	r2, r2, #1
 8013c80:	548b      	strb	r3, [r1, r2]
      pending_lora_changes = true;

    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_EUI) {
      DBG_PRINTF("NFC <RX lora_dev_eui 0x%016" PRIu64 "\n", val_int);
      b64(BackUpFlash.devEui, val_int);
      pending_lora_changes = true;
 8013c82:	2301      	movs	r3, #1
 8013c84:	9302      	str	r3, [sp, #8]
      PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, "");
      DBG_PRINTF(", TAGNR %u, TAGTYPE %u, Unknown key-value\n", tagnr, tagtype);
    }

    /* Move onto the next key-value */
    pos += val_rawbytes;
 8013c86:	19e4      	adds	r4, r4, r7
 8013c88:	b2e6      	uxtb	r6, r4
  while(pos != len) {
 8013c8a:	42b5      	cmp	r5, r6
 8013c8c:	d18a      	bne.n	8013ba4 <PBDecodeMsg+0x20>
  }

  /* Store new values to EEPROM and load to Lp if changes made */
  if(pending_lora_changes) {
 8013c8e:	9b02      	ldr	r3, [sp, #8]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d100      	bne.n	8013c96 <PBDecodeMsg+0x112>
 8013c94:	e0e2      	b.n	8013e5c <PBDecodeMsg+0x2d8>
    lrw_SyncBackUpFlash();
 8013c96:	f7fe ff39 	bl	8012b0c <lrw_SyncBackUpFlash>
  }

  return;
err:
  PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, debug_msg);
}
 8013c9a:	b00b      	add	sp, #44	; 0x2c
 8013c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8013c9e:	1b29      	subs	r1, r5, r4
 8013ca0:	3901      	subs	r1, #1
 8013ca2:	1e4b      	subs	r3, r1, #1
 8013ca4:	4199      	sbcs	r1, r3
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8013ca6:	9b01      	ldr	r3, [sp, #4]
      uint8_t varint_bitlimit = len - pos == 1 ? 7 : 8;
 8013ca8:	3107      	adds	r1, #7
      val_rawbytes = PBDecodeVarint(msg + pos, varint_bitlimit, &val_int);
 8013caa:	1918      	adds	r0, r3, r4
 8013cac:	aa08      	add	r2, sp, #32
 8013cae:	f7ff ff01 	bl	8013ab4 <PBDecodeVarint>
      if(!val_rawbytes) break;
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d108      	bne.n	8013cc8 <PBDecodeMsg+0x144>
      debug_msg = ", Ill-formed value\n";
 8013cb6:	4b71      	ldr	r3, [pc, #452]	; (8013e7c <PBDecodeMsg+0x2f8>)
  PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, debug_msg);
 8013cb8:	9901      	ldr	r1, [sp, #4]
 8013cba:	1baa      	subs	r2, r5, r6
 8013cbc:	b292      	uxth	r2, r2
 8013cbe:	1989      	adds	r1, r1, r6
 8013cc0:	486f      	ldr	r0, [pc, #444]	; (8013e80 <PBDecodeMsg+0x2fc>)
 8013cc2:	f7ff fde1 	bl	8013888 <PrintBuffer>
 8013cc6:	e7e8      	b.n	8013c9a <PBDecodeMsg+0x116>
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8013cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pos += val_rawbytes;
 8013cca:	1824      	adds	r4, r4, r0
 8013ccc:	b2e4      	uxtb	r4, r4
      val_rawbytes = val_int > 250 || val_int > (uint8_t)(len - pos)
 8013cce:	9f08      	ldr	r7, [sp, #32]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d1f0      	bne.n	8013cb6 <PBDecodeMsg+0x132>
 8013cd4:	2ffa      	cmp	r7, #250	; 0xfa
 8013cd6:	d8ee      	bhi.n	8013cb6 <PBDecodeMsg+0x132>
 8013cd8:	1b2b      	subs	r3, r5, r4
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	429f      	cmp	r7, r3
 8013cde:	d8ea      	bhi.n	8013cb6 <PBDecodeMsg+0x132>
 8013ce0:	b2ff      	uxtb	r7, r7
 8013ce2:	e7af      	b.n	8013c44 <PBDecodeMsg+0xc0>
      memcpy(&val_int, msg + pos, val_rawbytes);
 8013ce4:	9b01      	ldr	r3, [sp, #4]
 8013ce6:	2204      	movs	r2, #4
 8013ce8:	1919      	adds	r1, r3, r4
 8013cea:	a808      	add	r0, sp, #32
 8013cec:	f001 fced 	bl	80156ca <memcpy>
      val_rawbytes = 4;
 8013cf0:	2704      	movs	r7, #4
 8013cf2:	e7b1      	b.n	8013c58 <PBDecodeMsg+0xd4>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_EUI) {
 8013cf4:	2b31      	cmp	r3, #49	; 0x31
 8013cf6:	d123      	bne.n	8013d40 <PBDecodeMsg+0x1bc>
      DBG_PRINTF("NFC <RX lora_dev_eui 0x%016" PRIu64 "\n", val_int);
 8013cf8:	9a08      	ldr	r2, [sp, #32]
 8013cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cfc:	4961      	ldr	r1, [pc, #388]	; (8013e84 <PBDecodeMsg+0x300>)
 8013cfe:	2000      	movs	r0, #0
 8013d00:	f7f6 fd54 	bl	800a7ac <SEGGER_RTT_printf>
  b[0] = v >>  0 & 0xFF;
 8013d04:	204a      	movs	r0, #74	; 0x4a
 8013d06:	4b5c      	ldr	r3, [pc, #368]	; (8013e78 <PBDecodeMsg+0x2f4>)
      b64(BackUpFlash.devEui, val_int);
 8013d08:	9908      	ldr	r1, [sp, #32]
  b[0] = v >>  0 & 0xFF;
 8013d0a:	30ff      	adds	r0, #255	; 0xff
 8013d0c:	5419      	strb	r1, [r3, r0]
  b[1] = v >>  8 & 0xFF;
 8013d0e:	0a0e      	lsrs	r6, r1, #8
 8013d10:	3001      	adds	r0, #1
 8013d12:	541e      	strb	r6, [r3, r0]
  b[2] = v >> 16 & 0xFF;
 8013d14:	204c      	movs	r0, #76	; 0x4c
 8013d16:	0c0e      	lsrs	r6, r1, #16
 8013d18:	30ff      	adds	r0, #255	; 0xff
 8013d1a:	541e      	strb	r6, [r3, r0]
  b[3] = v >> 24 & 0xFF;
 8013d1c:	0e09      	lsrs	r1, r1, #24
 8013d1e:	3001      	adds	r0, #1
 8013d20:	5419      	strb	r1, [r3, r0]
  b[4] = v >> 32 & 0xFF;
 8013d22:	214e      	movs	r1, #78	; 0x4e
      b64(BackUpFlash.devEui, val_int);
 8013d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
  b[4] = v >> 32 & 0xFF;
 8013d26:	31ff      	adds	r1, #255	; 0xff
 8013d28:	545a      	strb	r2, [r3, r1]
  b[5] = v >> 40 & 0xFF;
 8013d2a:	0a10      	lsrs	r0, r2, #8
 8013d2c:	3101      	adds	r1, #1
 8013d2e:	5458      	strb	r0, [r3, r1]
  b[6] = v >> 48 & 0xFF;
 8013d30:	2150      	movs	r1, #80	; 0x50
 8013d32:	0c10      	lsrs	r0, r2, #16
 8013d34:	31ff      	adds	r1, #255	; 0xff
 8013d36:	5458      	strb	r0, [r3, r1]
  b[7] = v >> 56 & 0xFF;
 8013d38:	0e12      	lsrs	r2, r2, #24
 8013d3a:	3101      	adds	r1, #1
 8013d3c:	545a      	strb	r2, [r3, r1]
 8013d3e:	e7a0      	b.n	8013c82 <PBDecodeMsg+0xfe>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_EUI) {
 8013d40:	2b39      	cmp	r3, #57	; 0x39
 8013d42:	d11e      	bne.n	8013d82 <PBDecodeMsg+0x1fe>
      DBG_PRINTF("NFC <RX lora_app_eui 0x%016" PRIu64 "\n", val_int);
 8013d44:	9a08      	ldr	r2, [sp, #32]
 8013d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d48:	494f      	ldr	r1, [pc, #316]	; (8013e88 <PBDecodeMsg+0x304>)
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	f7f6 fd2e 	bl	800a7ac <SEGGER_RTT_printf>
  b[0] = v >>  0 & 0xFF;
 8013d50:	2052      	movs	r0, #82	; 0x52
 8013d52:	4b49      	ldr	r3, [pc, #292]	; (8013e78 <PBDecodeMsg+0x2f4>)
      b64(BackUpFlash.appEui, val_int);
 8013d54:	9908      	ldr	r1, [sp, #32]
  b[0] = v >>  0 & 0xFF;
 8013d56:	30ff      	adds	r0, #255	; 0xff
 8013d58:	5419      	strb	r1, [r3, r0]
  b[1] = v >>  8 & 0xFF;
 8013d5a:	0a0e      	lsrs	r6, r1, #8
 8013d5c:	3001      	adds	r0, #1
 8013d5e:	541e      	strb	r6, [r3, r0]
  b[2] = v >> 16 & 0xFF;
 8013d60:	2054      	movs	r0, #84	; 0x54
 8013d62:	0c0e      	lsrs	r6, r1, #16
 8013d64:	30ff      	adds	r0, #255	; 0xff
 8013d66:	541e      	strb	r6, [r3, r0]
  b[3] = v >> 24 & 0xFF;
 8013d68:	0e09      	lsrs	r1, r1, #24
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	5419      	strb	r1, [r3, r0]
  b[4] = v >> 32 & 0xFF;
 8013d6e:	2156      	movs	r1, #86	; 0x56
      b64(BackUpFlash.appEui, val_int);
 8013d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
  b[4] = v >> 32 & 0xFF;
 8013d72:	31ff      	adds	r1, #255	; 0xff
 8013d74:	545a      	strb	r2, [r3, r1]
  b[5] = v >> 40 & 0xFF;
 8013d76:	0a10      	lsrs	r0, r2, #8
 8013d78:	3101      	adds	r1, #1
 8013d7a:	5458      	strb	r0, [r3, r1]
  b[6] = v >> 48 & 0xFF;
 8013d7c:	0c10      	lsrs	r0, r2, #16
 8013d7e:	2158      	movs	r1, #88	; 0x58
 8013d80:	e7d8      	b.n	8013d34 <PBDecodeMsg+0x1b0>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_APP_KEY && val_rawbytes == sizeof BackUpFlash.appKey) {
 8013d82:	2b42      	cmp	r3, #66	; 0x42
 8013d84:	d112      	bne.n	8013dac <PBDecodeMsg+0x228>
 8013d86:	2f10      	cmp	r7, #16
 8013d88:	d152      	bne.n	8013e30 <PBDecodeMsg+0x2ac>
      PrintBuffer("NFC <RX lora_app_key ", msg + pos, len - pos, "");
 8013d8a:	9b01      	ldr	r3, [sp, #4]
 8013d8c:	1b2a      	subs	r2, r5, r4
 8013d8e:	191e      	adds	r6, r3, r4
 8013d90:	b292      	uxth	r2, r2
 8013d92:	0031      	movs	r1, r6
 8013d94:	483d      	ldr	r0, [pc, #244]	; (8013e8c <PBDecodeMsg+0x308>)
 8013d96:	4b3e      	ldr	r3, [pc, #248]	; (8013e90 <PBDecodeMsg+0x30c>)
 8013d98:	f7ff fd76 	bl	8013888 <PrintBuffer>
      memcpy(BackUpFlash.appKey, msg + pos, sizeof BackUpFlash.appKey);
 8013d9c:	003a      	movs	r2, r7
 8013d9e:	0031      	movs	r1, r6
 8013da0:	4835      	ldr	r0, [pc, #212]	; (8013e78 <PBDecodeMsg+0x2f4>)
 8013da2:	305a      	adds	r0, #90	; 0x5a
 8013da4:	30ff      	adds	r0, #255	; 0xff
      memcpy(BackUpFlash.appSKey, msg + pos, sizeof BackUpFlash.appSKey);
 8013da6:	f001 fc90 	bl	80156ca <memcpy>
 8013daa:	e76a      	b.n	8013c82 <PBDecodeMsg+0xfe>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_DEV_ADDR) {
 8013dac:	2b4d      	cmp	r3, #77	; 0x4d
 8013dae:	d10a      	bne.n	8013dc6 <PBDecodeMsg+0x242>
      DBG_PRINTF("NFC <RX lora_dev_addr 0x%08" PRIu32 "\n", val_int);
 8013db0:	9a08      	ldr	r2, [sp, #32]
 8013db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db4:	4937      	ldr	r1, [pc, #220]	; (8013e94 <PBDecodeMsg+0x310>)
 8013db6:	2000      	movs	r0, #0
 8013db8:	f7f6 fcf8 	bl	800a7ac <SEGGER_RTT_printf>
      BackUpFlash.DevAddr = val_int;
 8013dbc:	4b2e      	ldr	r3, [pc, #184]	; (8013e78 <PBDecodeMsg+0x2f4>)
 8013dbe:	9a08      	ldr	r2, [sp, #32]
 8013dc0:	33d0      	adds	r3, #208	; 0xd0
 8013dc2:	601a      	str	r2, [r3, #0]
 8013dc4:	e75d      	b.n	8013c82 <PBDecodeMsg+0xfe>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_NET_SESSION_KEY && val_rawbytes == sizeof BackUpFlash.nwkSKey) {
 8013dc6:	2b52      	cmp	r3, #82	; 0x52
 8013dc8:	d10f      	bne.n	8013dea <PBDecodeMsg+0x266>
 8013dca:	2f10      	cmp	r7, #16
 8013dcc:	d130      	bne.n	8013e30 <PBDecodeMsg+0x2ac>
      PrintBuffer("NFC <RX lora_mac_net_session_key ", msg + pos, len - pos, "");
 8013dce:	9b01      	ldr	r3, [sp, #4]
 8013dd0:	1b2a      	subs	r2, r5, r4
 8013dd2:	191e      	adds	r6, r3, r4
 8013dd4:	b292      	uxth	r2, r2
 8013dd6:	0031      	movs	r1, r6
 8013dd8:	482f      	ldr	r0, [pc, #188]	; (8013e98 <PBDecodeMsg+0x314>)
 8013dda:	4b2d      	ldr	r3, [pc, #180]	; (8013e90 <PBDecodeMsg+0x30c>)
 8013ddc:	f7ff fd54 	bl	8013888 <PrintBuffer>
      memcpy(BackUpFlash.nwkSKey, msg + pos, sizeof BackUpFlash.nwkSKey);
 8013de0:	4825      	ldr	r0, [pc, #148]	; (8013e78 <PBDecodeMsg+0x2f4>)
 8013de2:	003a      	movs	r2, r7
 8013de4:	0031      	movs	r1, r6
 8013de6:	30d4      	adds	r0, #212	; 0xd4
 8013de8:	e7dd      	b.n	8013da6 <PBDecodeMsg+0x222>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_MAC_APP_SESSION_KEY && val_rawbytes == sizeof BackUpFlash.appSKey) {
 8013dea:	2b5a      	cmp	r3, #90	; 0x5a
 8013dec:	d10f      	bne.n	8013e0e <PBDecodeMsg+0x28a>
 8013dee:	2f10      	cmp	r7, #16
 8013df0:	d11e      	bne.n	8013e30 <PBDecodeMsg+0x2ac>
      PrintBuffer("NFC <RX lora_mac_app_session_key ", msg + pos, len - pos, "");
 8013df2:	9b01      	ldr	r3, [sp, #4]
 8013df4:	1b2a      	subs	r2, r5, r4
 8013df6:	191e      	adds	r6, r3, r4
 8013df8:	b292      	uxth	r2, r2
 8013dfa:	0031      	movs	r1, r6
 8013dfc:	4827      	ldr	r0, [pc, #156]	; (8013e9c <PBDecodeMsg+0x318>)
 8013dfe:	4b24      	ldr	r3, [pc, #144]	; (8013e90 <PBDecodeMsg+0x30c>)
 8013e00:	f7ff fd42 	bl	8013888 <PrintBuffer>
      memcpy(BackUpFlash.appSKey, msg + pos, sizeof BackUpFlash.appSKey);
 8013e04:	481c      	ldr	r0, [pc, #112]	; (8013e78 <PBDecodeMsg+0x2f4>)
 8013e06:	003a      	movs	r2, r7
 8013e08:	0031      	movs	r1, r6
 8013e0a:	30e4      	adds	r0, #228	; 0xe4
 8013e0c:	e7cb      	b.n	8013da6 <PBDecodeMsg+0x222>
    } else if((tagnr << 3 | tagtype) == PBMSG_BX_LORA_PORT) {
 8013e0e:	2b70      	cmp	r3, #112	; 0x70
 8013e10:	d10e      	bne.n	8013e30 <PBDecodeMsg+0x2ac>
      DBG_PRINTF("NFC <RX lora_port 0x%02" PRIu8 "\n", val_int);
 8013e12:	9a08      	ldr	r2, [sp, #32]
 8013e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e16:	4922      	ldr	r1, [pc, #136]	; (8013ea0 <PBDecodeMsg+0x31c>)
 8013e18:	2000      	movs	r0, #0
 8013e1a:	f7f6 fcc7 	bl	800a7ac <SEGGER_RTT_printf>
      BackUpFlash.txPort = val_int;
 8013e1e:	236a      	movs	r3, #106	; 0x6a
 8013e20:	4a15      	ldr	r2, [pc, #84]	; (8013e78 <PBDecodeMsg+0x2f4>)
 8013e22:	9908      	ldr	r1, [sp, #32]
 8013e24:	33ff      	adds	r3, #255	; 0xff
 8013e26:	54d1      	strb	r1, [r2, r3]
      pending_changes = true;
 8013e28:	3b69      	subs	r3, #105	; 0x69
 8013e2a:	3bff      	subs	r3, #255	; 0xff
 8013e2c:	9305      	str	r3, [sp, #20]
 8013e2e:	e72a      	b.n	8013c86 <PBDecodeMsg+0x102>
      PrintBuffer("NFC <RX Undefined ", msg + debug_fieldpos, len - debug_fieldpos, "");
 8013e30:	1baa      	subs	r2, r5, r6
 8013e32:	9904      	ldr	r1, [sp, #16]
 8013e34:	b292      	uxth	r2, r2
 8013e36:	4b16      	ldr	r3, [pc, #88]	; (8013e90 <PBDecodeMsg+0x30c>)
 8013e38:	4811      	ldr	r0, [pc, #68]	; (8013e80 <PBDecodeMsg+0x2fc>)
 8013e3a:	f7ff fd25 	bl	8013888 <PrintBuffer>
      DBG_PRINTF(", TAGNR %u, TAGTYPE %u, Unknown key-value\n", tagnr, tagtype);
 8013e3e:	9b03      	ldr	r3, [sp, #12]
 8013e40:	9a07      	ldr	r2, [sp, #28]
 8013e42:	4918      	ldr	r1, [pc, #96]	; (8013ea4 <PBDecodeMsg+0x320>)
 8013e44:	2000      	movs	r0, #0
 8013e46:	f7f6 fcb1 	bl	800a7ac <SEGGER_RTT_printf>
 8013e4a:	e71c      	b.n	8013c86 <PBDecodeMsg+0x102>
        debug_msg = ", Out-of-bounds varint tagnr\n";
 8013e4c:	4b16      	ldr	r3, [pc, #88]	; (8013ea8 <PBDecodeMsg+0x324>)
 8013e4e:	e733      	b.n	8013cb8 <PBDecodeMsg+0x134>
      debug_msg = ", Ill-formed tagnr\n";
 8013e50:	4b16      	ldr	r3, [pc, #88]	; (8013eac <PBDecodeMsg+0x328>)
 8013e52:	e731      	b.n	8013cb8 <PBDecodeMsg+0x134>
      debug_msg = ", Out-of-bounds tag w/o value\n";
 8013e54:	4b16      	ldr	r3, [pc, #88]	; (8013eb0 <PBDecodeMsg+0x32c>)
 8013e56:	e72f      	b.n	8013cb8 <PBDecodeMsg+0x134>
      debug_msg = ", Ill-formed tagtype\n";
 8013e58:	4b16      	ldr	r3, [pc, #88]	; (8013eb4 <PBDecodeMsg+0x330>)
 8013e5a:	e72d      	b.n	8013cb8 <PBDecodeMsg+0x134>
  } else if(pending_changes) {
 8013e5c:	9b05      	ldr	r3, [sp, #20]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d100      	bne.n	8013e64 <PBDecodeMsg+0x2e0>
 8013e62:	e71a      	b.n	8013c9a <PBDecodeMsg+0x116>
    lrw_SetProvisionning();
 8013e64:	f7fe fe74 	bl	8012b50 <lrw_SetProvisionning>
 8013e68:	e717      	b.n	8013c9a <PBDecodeMsg+0x116>
  uint8_t debug_fieldpos = 0;
 8013e6a:	2600      	movs	r6, #0
    debug_msg = ", Unknown message version\n";
 8013e6c:	4b12      	ldr	r3, [pc, #72]	; (8013eb8 <PBDecodeMsg+0x334>)
 8013e6e:	e723      	b.n	8013cb8 <PBDecodeMsg+0x134>
    debug_msg = ", Out-of-bounds\n";
 8013e70:	4b12      	ldr	r3, [pc, #72]	; (8013ebc <PBDecodeMsg+0x338>)
 8013e72:	e721      	b.n	8013cb8 <PBDecodeMsg+0x134>
 8013e74:	08019635 	.word	0x08019635
 8013e78:	200016cc 	.word	0x200016cc
 8013e7c:	080195f5 	.word	0x080195f5
 8013e80:	08019726 	.word	0x08019726
 8013e84:	08019651 	.word	0x08019651
 8013e88:	08019671 	.word	0x08019671
 8013e8c:	08019691 	.word	0x08019691
 8013e90:	08018071 	.word	0x08018071
 8013e94:	080196a7 	.word	0x080196a7
 8013e98:	080196c6 	.word	0x080196c6
 8013e9c:	080196e8 	.word	0x080196e8
 8013ea0:	0801970a 	.word	0x0801970a
 8013ea4:	08019739 	.word	0x08019739
 8013ea8:	0801958e 	.word	0x0801958e
 8013eac:	080195ac 	.word	0x080195ac
 8013eb0:	080195c0 	.word	0x080195c0
 8013eb4:	080195df 	.word	0x080195df
 8013eb8:	08019609 	.word	0x08019609
 8013ebc:	08019624 	.word	0x08019624

08013ec0 <PBEncodeMsg_DeviceSensors>:

size_t PBEncodeMsg_DeviceSensors(uint8_t *msg, size_t len, bool pw_valid) {
 8013ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ec2:	0005      	movs	r5, r0
 8013ec4:	b085      	sub	sp, #20
 8013ec6:	1e0c      	subs	r4, r1, #0
  size_t size = 0;
  (void)pw_valid;

  /* discriminator byte specifies message DeviceSensors */
  if(size++ < len)
 8013ec8:	d05c      	beq.n	8013f84 <PBEncodeMsg_DeviceSensors+0xc4>
    msg[0] = PBMSGID_DEVICE_SENSORS;
 8013eca:	2301      	movs	r3, #1
 8013ecc:	7003      	strb	r3, [r0, #0]

  /* enum: Device Part Number */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013ece:	4299      	cmp	r1, r3
 8013ed0:	d949      	bls.n	8013f66 <PBEncodeMsg_DeviceSensors+0xa6>
 8013ed2:	18c0      	adds	r0, r0, r3
 8013ed4:	3901      	subs	r1, #1
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	2300      	movs	r3, #0
 8013eda:	9200      	str	r2, [sp, #0]
 8013edc:	9301      	str	r3, [sp, #4]
 8013ede:	3207      	adds	r2, #7
 8013ee0:	f7ff fcf6 	bl	80138d0 <PBEncodeField>
 8013ee4:	1c46      	adds	r6, r0, #1
      PBENUM_PARTNR_STA
#endif
  );

  /*  uint8_t: Device Battery Voltage */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 8013ee6:	42b4      	cmp	r4, r6
 8013ee8:	d940      	bls.n	8013f6c <PBEncodeMsg_DeviceSensors+0xac>
 8013eea:	1ba3      	subs	r3, r4, r6
 8013eec:	19af      	adds	r7, r5, r6
 8013eee:	9303      	str	r3, [sp, #12]
 8013ef0:	f7fe f8ec 	bl	80120cc <getBatteryVoltage>
 8013ef4:	210a      	movs	r1, #10
 8013ef6:	f7f4 f92d 	bl	8008154 <__udivsi3>
 8013efa:	2300      	movs	r3, #0
 8013efc:	9000      	str	r0, [sp, #0]
 8013efe:	9301      	str	r3, [sp, #4]
 8013f00:	2210      	movs	r2, #16
 8013f02:	9903      	ldr	r1, [sp, #12]
 8013f04:	0038      	movs	r0, r7
 8013f06:	f7ff fce3 	bl	80138d0 <PBEncodeField>
 8013f0a:	1986      	adds	r6, r0, r6

  /*  int16_t: Z-Axis Acceleration */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_Z_AXIS, PBEncodeSInt(987));
#elif defined(STA)
  /*  uint8_t: Gesture Count */
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_SINGLE_COUNT, (uint64_t)BackUpFlash.singleCount);
 8013f0c:	42b4      	cmp	r4, r6
 8013f0e:	d930      	bls.n	8013f72 <PBEncodeMsg_DeviceSensors+0xb2>
 8013f10:	19a8      	adds	r0, r5, r6
 8013f12:	1ba1      	subs	r1, r4, r6
 8013f14:	23b5      	movs	r3, #181	; 0xb5
 8013f16:	4f21      	ldr	r7, [pc, #132]	; (8013f9c <PBEncodeMsg_DeviceSensors+0xdc>)
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	5cfb      	ldrb	r3, [r7, r3]
 8013f1c:	2258      	movs	r2, #88	; 0x58
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	2300      	movs	r3, #0
 8013f22:	9301      	str	r3, [sp, #4]
 8013f24:	f7ff fcd4 	bl	80138d0 <PBEncodeField>
 8013f28:	1836      	adds	r6, r6, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_DOUBLE_COUNT, (uint64_t)BackUpFlash.doubleCount);
 8013f2a:	42b4      	cmp	r4, r6
 8013f2c:	d924      	bls.n	8013f78 <PBEncodeMsg_DeviceSensors+0xb8>
 8013f2e:	19a8      	adds	r0, r5, r6
 8013f30:	1ba1      	subs	r1, r4, r6
 8013f32:	236c      	movs	r3, #108	; 0x6c
 8013f34:	33ff      	adds	r3, #255	; 0xff
 8013f36:	5cfb      	ldrb	r3, [r7, r3]
 8013f38:	2260      	movs	r2, #96	; 0x60
 8013f3a:	9300      	str	r3, [sp, #0]
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	9301      	str	r3, [sp, #4]
 8013f40:	f7ff fcc6 	bl	80138d0 <PBEncodeField>
 8013f44:	1836      	adds	r6, r6, r0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_LONG_COUNT, (uint64_t)BackUpFlash.longCount);
 8013f46:	42b4      	cmp	r4, r6
 8013f48:	d919      	bls.n	8013f7e <PBEncodeMsg_DeviceSensors+0xbe>
 8013f4a:	19a8      	adds	r0, r5, r6
 8013f4c:	1ba1      	subs	r1, r4, r6
 8013f4e:	23b6      	movs	r3, #182	; 0xb6
 8013f50:	005b      	lsls	r3, r3, #1
 8013f52:	5cfb      	ldrb	r3, [r7, r3]
 8013f54:	2268      	movs	r2, #104	; 0x68
 8013f56:	9300      	str	r3, [sp, #0]
 8013f58:	2300      	movs	r3, #0
 8013f5a:	9301      	str	r3, [sp, #4]
 8013f5c:	f7ff fcb8 	bl	80138d0 <PBEncodeField>
 8013f60:	1830      	adds	r0, r6, r0
#endif

  return size;
}
 8013f62:	b005      	add	sp, #20
 8013f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f66:	2000      	movs	r0, #0
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013f68:	0001      	movs	r1, r0
 8013f6a:	e7b4      	b.n	8013ed6 <PBEncodeMsg_DeviceSensors+0x16>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 8013f6c:	2700      	movs	r7, #0
 8013f6e:	9703      	str	r7, [sp, #12]
 8013f70:	e7be      	b.n	8013ef0 <PBEncodeMsg_DeviceSensors+0x30>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_SINGLE_COUNT, (uint64_t)BackUpFlash.singleCount);
 8013f72:	2000      	movs	r0, #0
 8013f74:	0001      	movs	r1, r0
 8013f76:	e7cd      	b.n	8013f14 <PBEncodeMsg_DeviceSensors+0x54>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_DOUBLE_COUNT, (uint64_t)BackUpFlash.doubleCount);
 8013f78:	2000      	movs	r0, #0
 8013f7a:	0001      	movs	r1, r0
 8013f7c:	e7d9      	b.n	8013f32 <PBEncodeMsg_DeviceSensors+0x72>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_SENSOR_GESTURE_LONG_COUNT, (uint64_t)BackUpFlash.longCount);
 8013f7e:	2000      	movs	r0, #0
 8013f80:	0001      	movs	r1, r0
 8013f82:	e7e4      	b.n	8013f4e <PBEncodeMsg_DeviceSensors+0x8e>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013f84:	2201      	movs	r2, #1
 8013f86:	2300      	movs	r3, #0
 8013f88:	0008      	movs	r0, r1
 8013f8a:	9200      	str	r2, [sp, #0]
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	3207      	adds	r2, #7
 8013f90:	f7ff fc9e 	bl	80138d0 <PBEncodeField>
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 8013f94:	0027      	movs	r7, r4
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_PART_NUMBER,
 8013f96:	1c46      	adds	r6, r0, #1
  size += PBEncodeMsgField(msg, len, size, PBSMSG_TX_DEVICE_BATTERY_VOLTAGE, (uint64_t)getBatteryVoltage() / 10);
 8013f98:	9403      	str	r4, [sp, #12]
 8013f9a:	e7a9      	b.n	8013ef0 <PBEncodeMsg_DeviceSensors+0x30>
 8013f9c:	200016cc 	.word	0x200016cc

08013fa0 <PBEncodeMsg_DeviceConfiguration>:

size_t PBEncodeMsg_DeviceConfiguration(uint8_t *msg, size_t len, bool pw_valid) {
 8013fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fa2:	0005      	movs	r5, r0
 8013fa4:	b087      	sub	sp, #28
 8013fa6:	000c      	movs	r4, r1
 8013fa8:	0017      	movs	r7, r2
  size_t size = 0;

  /* discriminator byte specifies message DeviceConfiguration */
  if(size++ < len)
 8013faa:	2900      	cmp	r1, #0
 8013fac:	d000      	beq.n	8013fb0 <PBEncodeMsg_DeviceConfiguration+0x10>
 8013fae:	e0f9      	b.n	80141a4 <PBEncodeMsg_DeviceConfiguration+0x204>
size_t PBEncodeMsg_DeviceConfiguration(uint8_t *msg, size_t len, bool pw_valid) {
 8013fb0:	2000      	movs	r0, #0

  /* Device Info
   * ----------- */

  /* enum: Device Part Number */
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_PART_NUMBER,
 8013fb2:	0001      	movs	r1, r0
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	9200      	str	r2, [sp, #0]
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	3207      	adds	r2, #7
 8013fbe:	f7ff fc87 	bl	80138d0 <PBEncodeField>
 8013fc2:	1c46      	adds	r6, r0, #1
  );

  /* Development version is 0, and zero is implied implicitly. No need to
   * explicitly encode "Device Firmware Version" */

  if(pw_valid) {
 8013fc4:	2f00      	cmp	r7, #0
 8013fc6:	d100      	bne.n	8013fca <PBEncodeMsg_DeviceConfiguration+0x2a>
 8013fc8:	e0e9      	b.n	801419e <PBEncodeMsg_DeviceConfiguration+0x1fe>
    /* LoRa Settings
     * ------------- */

    /*     bool: (TTN) Activation Method */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)(BackUpFlash.otaDevice == OTA_DEVICE));
 8013fca:	42b4      	cmp	r4, r6
 8013fcc:	d800      	bhi.n	8013fd0 <PBEncodeMsg_DeviceConfiguration+0x30>
 8013fce:	e0f1      	b.n	80141b4 <PBEncodeMsg_DeviceConfiguration+0x214>
 8013fd0:	19a8      	adds	r0, r5, r6
 8013fd2:	1ba1      	subs	r1, r4, r6
 8013fd4:	23a4      	movs	r3, #164	; 0xa4
 8013fd6:	4a8e      	ldr	r2, [pc, #568]	; (8014210 <PBEncodeMsg_DeviceConfiguration+0x270>)
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	5cd3      	ldrb	r3, [r2, r3]
 8013fdc:	2700      	movs	r7, #0
 8013fde:	425a      	negs	r2, r3
 8013fe0:	4153      	adcs	r3, r2
 8013fe2:	9701      	str	r7, [sp, #4]
 8013fe4:	9300      	str	r3, [sp, #0]
 8013fe6:	2228      	movs	r2, #40	; 0x28
 8013fe8:	f7ff fc72 	bl	80138d0 <PBEncodeField>
 8013fec:	1836      	adds	r6, r6, r0

    /*  char[8]: (TTN) Device EUI */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(BackUpFlash.devEui));
 8013fee:	42b4      	cmp	r4, r6
 8013ff0:	d800      	bhi.n	8013ff4 <PBEncodeMsg_DeviceConfiguration+0x54>
 8013ff2:	e0e2      	b.n	80141ba <PBEncodeMsg_DeviceConfiguration+0x21a>
 8013ff4:	1ba3      	subs	r3, r4, r6
 8013ff6:	19af      	adds	r7, r5, r6
 8013ff8:	9302      	str	r3, [sp, #8]
 8013ffa:	4886      	ldr	r0, [pc, #536]	; (8014214 <PBEncodeMsg_DeviceConfiguration+0x274>)
 8013ffc:	f7ff fc2e 	bl	801385c <u64>
 8014000:	2231      	movs	r2, #49	; 0x31
 8014002:	9000      	str	r0, [sp, #0]
 8014004:	9101      	str	r1, [sp, #4]
 8014006:	0038      	movs	r0, r7
 8014008:	9902      	ldr	r1, [sp, #8]
 801400a:	f7ff fc61 	bl	80138d0 <PBEncodeField>
 801400e:	1837      	adds	r7, r6, r0

    /*  char[8]: (TTN) Application EUI */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(BackUpFlash.appEui));
 8014010:	42bc      	cmp	r4, r7
 8014012:	d800      	bhi.n	8014016 <PBEncodeMsg_DeviceConfiguration+0x76>
 8014014:	e0d3      	b.n	80141be <PBEncodeMsg_DeviceConfiguration+0x21e>
 8014016:	1be3      	subs	r3, r4, r7
 8014018:	19ee      	adds	r6, r5, r7
 801401a:	9302      	str	r3, [sp, #8]
 801401c:	487e      	ldr	r0, [pc, #504]	; (8014218 <PBEncodeMsg_DeviceConfiguration+0x278>)
 801401e:	f7ff fc1d 	bl	801385c <u64>
 8014022:	2239      	movs	r2, #57	; 0x39
 8014024:	9000      	str	r0, [sp, #0]
 8014026:	9101      	str	r1, [sp, #4]
 8014028:	0030      	movs	r0, r6
 801402a:	9902      	ldr	r1, [sp, #8]
 801402c:	f7ff fc50 	bl	80138d0 <PBEncodeField>
 8014030:	183e      	adds	r6, r7, r0

    /* char[16]: (TTN) App Key */
    size += PBEncodeMsgField(msg, len, size,
 8014032:	42b4      	cmp	r4, r6
 8014034:	d800      	bhi.n	8014038 <PBEncodeMsg_DeviceConfiguration+0x98>
 8014036:	e0c5      	b.n	80141c4 <PBEncodeMsg_DeviceConfiguration+0x224>
 8014038:	19a8      	adds	r0, r5, r6
 801403a:	1ba1      	subs	r1, r4, r6
 801403c:	4b77      	ldr	r3, [pc, #476]	; (801421c <PBEncodeMsg_DeviceConfiguration+0x27c>)
 801403e:	2242      	movs	r2, #66	; 0x42
 8014040:	9300      	str	r3, [sp, #0]
 8014042:	2310      	movs	r3, #16
 8014044:	f7ff fc44 	bl	80138d0 <PBEncodeField>
 8014048:	1836      	adds	r6, r6, r0
        PBMSG_BX_LORA_APP_KEY,
        PBMSG_BX_LORA_APP_KEY_SIZE, BackUpFlash.appKey);

    /* uint32_t: (TTN) Device Address */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_ADDR, BackUpFlash.DevAddr);
 801404a:	42b4      	cmp	r4, r6
 801404c:	d800      	bhi.n	8014050 <PBEncodeMsg_DeviceConfiguration+0xb0>
 801404e:	e0bc      	b.n	80141ca <PBEncodeMsg_DeviceConfiguration+0x22a>
 8014050:	19a8      	adds	r0, r5, r6
 8014052:	1ba1      	subs	r1, r4, r6
 8014054:	4b6e      	ldr	r3, [pc, #440]	; (8014210 <PBEncodeMsg_DeviceConfiguration+0x270>)
 8014056:	224d      	movs	r2, #77	; 0x4d
 8014058:	33d0      	adds	r3, #208	; 0xd0
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f7ff fc38 	bl	80138d0 <PBEncodeField>
 8014060:	1836      	adds	r6, r6, r0

    /* char[16]: (TTN) Network Session Key */
    size += PBEncodeMsgField(msg, len, size,
 8014062:	42b4      	cmp	r4, r6
 8014064:	d800      	bhi.n	8014068 <PBEncodeMsg_DeviceConfiguration+0xc8>
 8014066:	e0b3      	b.n	80141d0 <PBEncodeMsg_DeviceConfiguration+0x230>
 8014068:	19a8      	adds	r0, r5, r6
 801406a:	1ba1      	subs	r1, r4, r6
 801406c:	4b6c      	ldr	r3, [pc, #432]	; (8014220 <PBEncodeMsg_DeviceConfiguration+0x280>)
 801406e:	2252      	movs	r2, #82	; 0x52
 8014070:	9300      	str	r3, [sp, #0]
 8014072:	2310      	movs	r3, #16
 8014074:	f7ff fc2c 	bl	80138d0 <PBEncodeField>
 8014078:	1836      	adds	r6, r6, r0
        PBMSG_BX_LORA_MAC_NET_SESSION_KEY,
        PBMSG_BX_LORA_MAC_NET_SESSION_KEY_SIZE, BackUpFlash.nwkSKey);

    /* char[16]: (TTN) Application Session key */
    size += PBEncodeMsgField(msg, len, size,
 801407a:	42b4      	cmp	r4, r6
 801407c:	d800      	bhi.n	8014080 <PBEncodeMsg_DeviceConfiguration+0xe0>
 801407e:	e0aa      	b.n	80141d6 <PBEncodeMsg_DeviceConfiguration+0x236>
 8014080:	19a8      	adds	r0, r5, r6
 8014082:	1ba1      	subs	r1, r4, r6
 8014084:	4b67      	ldr	r3, [pc, #412]	; (8014224 <PBEncodeMsg_DeviceConfiguration+0x284>)
 8014086:	225a      	movs	r2, #90	; 0x5a
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	2310      	movs	r3, #16
 801408c:	f7ff fc20 	bl	80138d0 <PBEncodeField>
 8014090:	1836      	adds	r6, r6, r0
        PBMSG_BX_LORA_MAC_APP_SESSION_KEY,
        PBMSG_BX_LORA_MAC_APP_SESSION_KEY_SIZE, BackUpFlash.appSKey);

    /*     bool: LoRa Join Status */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_JOINED, (uint64_t)BackUpFlash.JoinedStatus);
 8014092:	42b4      	cmp	r4, r6
 8014094:	d800      	bhi.n	8014098 <PBEncodeMsg_DeviceConfiguration+0xf8>
 8014096:	e0a1      	b.n	80141dc <PBEncodeMsg_DeviceConfiguration+0x23c>
 8014098:	19a8      	adds	r0, r5, r6
 801409a:	1ba1      	subs	r1, r4, r6
 801409c:	239e      	movs	r3, #158	; 0x9e
 801409e:	2700      	movs	r7, #0
 80140a0:	4a5b      	ldr	r2, [pc, #364]	; (8014210 <PBEncodeMsg_DeviceConfiguration+0x270>)
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	5cd3      	ldrb	r3, [r2, r3]
 80140a6:	9701      	str	r7, [sp, #4]
 80140a8:	9300      	str	r3, [sp, #0]
 80140aa:	2260      	movs	r2, #96	; 0x60
 80140ac:	f7ff fc10 	bl	80138d0 <PBEncodeField>
 80140b0:	1836      	adds	r6, r6, r0

    /*  uint8_t: LoRa Frequency Plan */
    // XXX: When we start having RegionUS
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_FP, PBENUM_FP_EU868);
 80140b2:	42b4      	cmp	r4, r6
 80140b4:	d800      	bhi.n	80140b8 <PBEncodeMsg_DeviceConfiguration+0x118>
 80140b6:	e094      	b.n	80141e2 <PBEncodeMsg_DeviceConfiguration+0x242>
 80140b8:	19a8      	adds	r0, r5, r6
 80140ba:	1ba1      	subs	r1, r4, r6
 80140bc:	2201      	movs	r2, #1
 80140be:	2300      	movs	r3, #0
 80140c0:	9200      	str	r2, [sp, #0]
 80140c2:	9301      	str	r3, [sp, #4]
 80140c4:	3267      	adds	r2, #103	; 0x67
 80140c6:	f7ff fc03 	bl	80138d0 <PBEncodeField>
 80140ca:	1836      	adds	r6, r6, r0

    /*  uint8_t: LoRa Port */
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)BackUpFlash.txPort);
 80140cc:	42b4      	cmp	r4, r6
 80140ce:	d800      	bhi.n	80140d2 <PBEncodeMsg_DeviceConfiguration+0x132>
 80140d0:	e08a      	b.n	80141e8 <PBEncodeMsg_DeviceConfiguration+0x248>
 80140d2:	19a8      	adds	r0, r5, r6
 80140d4:	1ba1      	subs	r1, r4, r6
 80140d6:	236a      	movs	r3, #106	; 0x6a
 80140d8:	2700      	movs	r7, #0
 80140da:	4a4d      	ldr	r2, [pc, #308]	; (8014210 <PBEncodeMsg_DeviceConfiguration+0x270>)
 80140dc:	33ff      	adds	r3, #255	; 0xff
 80140de:	5cd3      	ldrb	r3, [r2, r3]
 80140e0:	9701      	str	r7, [sp, #4]
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	2270      	movs	r2, #112	; 0x70
 80140e6:	f7ff fbf3 	bl	80138d0 <PBEncodeField>
 80140ea:	1836      	adds	r6, r6, r0

    /*  uint8_t: LoRa Tx Power */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)BackUpFlash.MacTxPower);
 80140ec:	42b4      	cmp	r4, r6
 80140ee:	d800      	bhi.n	80140f2 <PBEncodeMsg_DeviceConfiguration+0x152>
 80140f0:	e07d      	b.n	80141ee <PBEncodeMsg_DeviceConfiguration+0x24e>
 80140f2:	19a8      	adds	r0, r5, r6
 80140f4:	1ba1      	subs	r1, r4, r6
 80140f6:	2700      	movs	r7, #0
 80140f8:	4b45      	ldr	r3, [pc, #276]	; (8014210 <PBEncodeMsg_DeviceConfiguration+0x270>)
 80140fa:	2278      	movs	r2, #120	; 0x78
 80140fc:	785b      	ldrb	r3, [r3, #1]
 80140fe:	9701      	str	r7, [sp, #4]
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	f7ff fbe5 	bl	80138d0 <PBEncodeField>
 8014106:	1836      	adds	r6, r6, r0

    /*  uint8_t: LoRa Spreading Factor */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_SF, (uint64_t)lrw_GetSF());
 8014108:	42b4      	cmp	r4, r6
 801410a:	d800      	bhi.n	801410e <PBEncodeMsg_DeviceConfiguration+0x16e>
 801410c:	e072      	b.n	80141f4 <PBEncodeMsg_DeviceConfiguration+0x254>
 801410e:	1ba3      	subs	r3, r4, r6
 8014110:	19af      	adds	r7, r5, r6
 8014112:	9302      	str	r3, [sp, #8]
 8014114:	f7fe fce6 	bl	8012ae4 <lrw_GetSF>
 8014118:	2300      	movs	r3, #0
 801411a:	9000      	str	r0, [sp, #0]
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	0038      	movs	r0, r7
 8014120:	2280      	movs	r2, #128	; 0x80
 8014122:	9902      	ldr	r1, [sp, #8]
 8014124:	f7ff fbd4 	bl	80138d0 <PBEncodeField>
 8014128:	1837      	adds	r7, r6, r0

    /*  uint8_t: LoRa Bandwidth */
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_BW, (uint64_t)lrw_GetBW() + 1);
 801412a:	42bc      	cmp	r4, r7
 801412c:	d964      	bls.n	80141f8 <PBEncodeMsg_DeviceConfiguration+0x258>
 801412e:	1be3      	subs	r3, r4, r7
 8014130:	19ee      	adds	r6, r5, r7
 8014132:	9305      	str	r3, [sp, #20]
 8014134:	f7fe fce0 	bl	8012af8 <lrw_GetBW>
 8014138:	2300      	movs	r3, #0
 801413a:	2201      	movs	r2, #1
 801413c:	9303      	str	r3, [sp, #12]
 801413e:	2300      	movs	r3, #0
 8014140:	9002      	str	r0, [sp, #8]
 8014142:	9802      	ldr	r0, [sp, #8]
 8014144:	9903      	ldr	r1, [sp, #12]
 8014146:	1812      	adds	r2, r2, r0
 8014148:	414b      	adcs	r3, r1
 801414a:	0030      	movs	r0, r6
 801414c:	9200      	str	r2, [sp, #0]
 801414e:	9301      	str	r3, [sp, #4]
 8014150:	9905      	ldr	r1, [sp, #20]
 8014152:	2288      	movs	r2, #136	; 0x88
 8014154:	f7ff fbbc 	bl	80138d0 <PBEncodeField>
 8014158:	183e      	adds	r6, r7, r0

    /*     bool: LoRa Confirmed Messages */
    // TODO: What even is this?
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)0);
 801415a:	42b4      	cmp	r4, r6
 801415c:	d94f      	bls.n	80141fe <PBEncodeMsg_DeviceConfiguration+0x25e>
 801415e:	19a8      	adds	r0, r5, r6
 8014160:	1ba1      	subs	r1, r4, r6
 8014162:	2700      	movs	r7, #0
 8014164:	2290      	movs	r2, #144	; 0x90
 8014166:	9700      	str	r7, [sp, #0]
 8014168:	9701      	str	r7, [sp, #4]
 801416a:	f7ff fbb1 	bl	80138d0 <PBEncodeField>
 801416e:	1836      	adds	r6, r6, r0
 8014170:	003b      	movs	r3, r7

    /*     bool: LoRa Adaptive Data Rate */
    // TODO: Probably will only matter once we port in the new C minimouse
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_ADAPTIVE_DATA_RATE, (uint64_t)0);
 8014172:	42b4      	cmp	r4, r6
 8014174:	d946      	bls.n	8014204 <PBEncodeMsg_DeviceConfiguration+0x264>
 8014176:	19a8      	adds	r0, r5, r6
 8014178:	1ba1      	subs	r1, r4, r6
 801417a:	9700      	str	r7, [sp, #0]
 801417c:	9301      	str	r3, [sp, #4]
 801417e:	2298      	movs	r2, #152	; 0x98
 8014180:	f7ff fba6 	bl	80138d0 <PBEncodeField>
 8014184:	1836      	adds	r6, r6, r0

    /*     bool: LoRa Respect Duty Cycle */
    // TODO: Probably will only matter once we port in the new C minimouse
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_RESPECT_DUTY_CYCLE, (uint64_t)0);
 8014186:	42b4      	cmp	r4, r6
 8014188:	d93f      	bls.n	801420a <PBEncodeMsg_DeviceConfiguration+0x26a>
 801418a:	19a8      	adds	r0, r5, r6
 801418c:	1ba1      	subs	r1, r4, r6
 801418e:	2200      	movs	r2, #0
 8014190:	2300      	movs	r3, #0
 8014192:	9200      	str	r2, [sp, #0]
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	32a0      	adds	r2, #160	; 0xa0
 8014198:	f7ff fb9a 	bl	80138d0 <PBEncodeField>
 801419c:	1836      	adds	r6, r6, r0
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_SENSOR_Z_AXIS_THRESHOLD, (uint64_t)100);
#endif
  }

  return size;
}
 801419e:	0030      	movs	r0, r6
 80141a0:	b007      	add	sp, #28
 80141a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    msg[0] = PBMSGID_DEVICE_CONFIGURATION;
 80141a4:	2300      	movs	r3, #0
 80141a6:	7003      	strb	r3, [r0, #0]
  size += PBEncodeMsgField(msg, len, size, PBMSG_TX_DEVICE_PART_NUMBER,
 80141a8:	2901      	cmp	r1, #1
 80141aa:	d800      	bhi.n	80141ae <PBEncodeMsg_DeviceConfiguration+0x20e>
 80141ac:	e700      	b.n	8013fb0 <PBEncodeMsg_DeviceConfiguration+0x10>
 80141ae:	3001      	adds	r0, #1
 80141b0:	3901      	subs	r1, #1
 80141b2:	e6ff      	b.n	8013fb4 <PBEncodeMsg_DeviceConfiguration+0x14>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_OTAA, (uint64_t)(BackUpFlash.otaDevice == OTA_DEVICE));
 80141b4:	2000      	movs	r0, #0
 80141b6:	0001      	movs	r1, r0
 80141b8:	e70c      	b.n	8013fd4 <PBEncodeMsg_DeviceConfiguration+0x34>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_EUI, u64(BackUpFlash.devEui));
 80141ba:	9702      	str	r7, [sp, #8]
 80141bc:	e71d      	b.n	8013ffa <PBEncodeMsg_DeviceConfiguration+0x5a>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_APP_EUI, u64(BackUpFlash.appEui));
 80141be:	2600      	movs	r6, #0
 80141c0:	9602      	str	r6, [sp, #8]
 80141c2:	e72b      	b.n	801401c <PBEncodeMsg_DeviceConfiguration+0x7c>
    size += PBEncodeMsgField(msg, len, size,
 80141c4:	2000      	movs	r0, #0
 80141c6:	0001      	movs	r1, r0
 80141c8:	e738      	b.n	801403c <PBEncodeMsg_DeviceConfiguration+0x9c>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_DEV_ADDR, BackUpFlash.DevAddr);
 80141ca:	2000      	movs	r0, #0
 80141cc:	0001      	movs	r1, r0
 80141ce:	e741      	b.n	8014054 <PBEncodeMsg_DeviceConfiguration+0xb4>
    size += PBEncodeMsgField(msg, len, size,
 80141d0:	2000      	movs	r0, #0
 80141d2:	0001      	movs	r1, r0
 80141d4:	e74a      	b.n	801406c <PBEncodeMsg_DeviceConfiguration+0xcc>
    size += PBEncodeMsgField(msg, len, size,
 80141d6:	2000      	movs	r0, #0
 80141d8:	0001      	movs	r1, r0
 80141da:	e753      	b.n	8014084 <PBEncodeMsg_DeviceConfiguration+0xe4>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_JOINED, (uint64_t)BackUpFlash.JoinedStatus);
 80141dc:	2000      	movs	r0, #0
 80141de:	0001      	movs	r1, r0
 80141e0:	e75c      	b.n	801409c <PBEncodeMsg_DeviceConfiguration+0xfc>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_FP, PBENUM_FP_EU868);
 80141e2:	0038      	movs	r0, r7
 80141e4:	0039      	movs	r1, r7
 80141e6:	e769      	b.n	80140bc <PBEncodeMsg_DeviceConfiguration+0x11c>
    size += PBEncodeMsgField(msg, len, size, PBMSG_BX_LORA_PORT, (uint64_t)BackUpFlash.txPort);
 80141e8:	2000      	movs	r0, #0
 80141ea:	0001      	movs	r1, r0
 80141ec:	e773      	b.n	80140d6 <PBEncodeMsg_DeviceConfiguration+0x136>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_TXP, (uint64_t)BackUpFlash.MacTxPower);
 80141ee:	0038      	movs	r0, r7
 80141f0:	0039      	movs	r1, r7
 80141f2:	e780      	b.n	80140f6 <PBEncodeMsg_DeviceConfiguration+0x156>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_SF, (uint64_t)lrw_GetSF());
 80141f4:	9702      	str	r7, [sp, #8]
 80141f6:	e78d      	b.n	8014114 <PBEncodeMsg_DeviceConfiguration+0x174>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_BW, (uint64_t)lrw_GetBW() + 1);
 80141f8:	2600      	movs	r6, #0
 80141fa:	9605      	str	r6, [sp, #20]
 80141fc:	e79a      	b.n	8014134 <PBEncodeMsg_DeviceConfiguration+0x194>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_CONFIRMED_MESSAGES, (uint64_t)0);
 80141fe:	9803      	ldr	r0, [sp, #12]
 8014200:	0001      	movs	r1, r0
 8014202:	e7ae      	b.n	8014162 <PBEncodeMsg_DeviceConfiguration+0x1c2>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_ADAPTIVE_DATA_RATE, (uint64_t)0);
 8014204:	2000      	movs	r0, #0
 8014206:	0001      	movs	r1, r0
 8014208:	e7b7      	b.n	801417a <PBEncodeMsg_DeviceConfiguration+0x1da>
    size += PBEncodeMsgField(msg, len, size, PBMSG_TX_LORA_RESPECT_DUTY_CYCLE, (uint64_t)0);
 801420a:	2000      	movs	r0, #0
 801420c:	0001      	movs	r1, r0
 801420e:	e7be      	b.n	801418e <PBEncodeMsg_DeviceConfiguration+0x1ee>
 8014210:	200016cc 	.word	0x200016cc
 8014214:	20001815 	.word	0x20001815
 8014218:	2000181d 	.word	0x2000181d
 801421c:	20001825 	.word	0x20001825
 8014220:	200017a0 	.word	0x200017a0
 8014224:	200017b0 	.word	0x200017b0

08014228 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8014228:	b510      	push	{r4, lr}

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 801422a:	4b0f      	ldr	r3, [pc, #60]	; (8014268 <MX_RTC_Init+0x40>)
 801422c:	4c0f      	ldr	r4, [pc, #60]	; (801426c <MX_RTC_Init+0x44>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 801422e:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8014230:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8014232:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 127;
 8014234:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8014236:	0020      	movs	r0, r4
  hrtc.Init.SynchPrediv = 255;
 8014238:	3280      	adds	r2, #128	; 0x80
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801423a:	6063      	str	r3, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 801423c:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801423e:	6123      	str	r3, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8014240:	6163      	str	r3, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8014242:	61a3      	str	r3, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8014244:	61e3      	str	r3, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8014246:	f7f9 faf9 	bl	800d83c <HAL_RTC_Init>
 801424a:	2800      	cmp	r0, #0
 801424c:	d001      	beq.n	8014252 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 801424e:	f7fe fd95 	bl	8012d7c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8014252:	2206      	movs	r2, #6
 8014254:	2100      	movs	r1, #0
 8014256:	0020      	movs	r0, r4
 8014258:	f7f9 fba0 	bl	800d99c <HAL_RTCEx_SetWakeUpTimer_IT>
 801425c:	2800      	cmp	r0, #0
 801425e:	d001      	beq.n	8014264 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8014260:	f7fe fd8c 	bl	8012d7c <Error_Handler>
  }

}
 8014264:	bd10      	pop	{r4, pc}
 8014266:	46c0      	nop			; (mov r8, r8)
 8014268:	40002800 	.word	0x40002800
 801426c:	200018e0 	.word	0x200018e0

08014270 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8014270:	4b09      	ldr	r3, [pc, #36]	; (8014298 <HAL_RTC_MspInit+0x28>)
 8014272:	6802      	ldr	r2, [r0, #0]
{
 8014274:	b510      	push	{r4, lr}
  if(rtcHandle->Instance==RTC)
 8014276:	429a      	cmp	r2, r3
 8014278:	d10d      	bne.n	8014296 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 801427a:	2380      	movs	r3, #128	; 0x80
 801427c:	4a07      	ldr	r2, [pc, #28]	; (801429c <HAL_RTC_MspInit+0x2c>)
 801427e:	02db      	lsls	r3, r3, #11
 8014280:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8014282:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8014284:	430b      	orrs	r3, r1
 8014286:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8014288:	2200      	movs	r2, #0
 801428a:	0011      	movs	r1, r2
 801428c:	f7f7 f924 	bl	800b4d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8014290:	2002      	movs	r0, #2
 8014292:	f7f7 f94b 	bl	800b52c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8014296:	bd10      	pop	{r4, pc}
 8014298:	40002800 	.word	0x40002800
 801429c:	40021000 	.word	0x40021000

080142a0 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 80142a0:	480e      	ldr	r0, [pc, #56]	; (80142dc <MX_SPI1_Init+0x3c>)
 80142a2:	4b0f      	ldr	r3, [pc, #60]	; (80142e0 <MX_SPI1_Init+0x40>)
{
 80142a4:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80142a6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80142a8:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80142aa:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80142b0:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80142b2:	0092      	lsls	r2, r2, #2
 80142b4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80142b6:	3ae9      	subs	r2, #233	; 0xe9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80142b8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80142ba:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80142bc:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80142be:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80142c0:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80142c2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80142c4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80142c6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80142c8:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80142ca:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80142cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80142ce:	f7f9 fcc5 	bl	800dc5c <HAL_SPI_Init>
 80142d2:	2800      	cmp	r0, #0
 80142d4:	d001      	beq.n	80142da <MX_SPI1_Init+0x3a>
  {
    Error_Handler();
 80142d6:	f7fe fd51 	bl	8012d7c <Error_Handler>
  }

}
 80142da:	bd10      	pop	{r4, pc}
 80142dc:	20001904 	.word	0x20001904
 80142e0:	40013000 	.word	0x40013000

080142e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80142e4:	b510      	push	{r4, lr}
 80142e6:	0004      	movs	r4, r0
 80142e8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142ea:	2214      	movs	r2, #20
 80142ec:	2100      	movs	r1, #0
 80142ee:	a801      	add	r0, sp, #4
 80142f0:	f001 f9f4 	bl	80156dc <memset>
  if(spiHandle->Instance==SPI1)
 80142f4:	4b13      	ldr	r3, [pc, #76]	; (8014344 <HAL_SPI_MspInit+0x60>)
 80142f6:	6822      	ldr	r2, [r4, #0]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d120      	bne.n	801433e <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80142fc:	2280      	movs	r2, #128	; 0x80
 80142fe:	4b12      	ldr	r3, [pc, #72]	; (8014348 <HAL_SPI_MspInit+0x64>)
 8014300:	0152      	lsls	r2, r2, #5
 8014302:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = SX126x_SPI_SCK_Pin|SX126x_SPI_MISO_Pin|SX126x_SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014304:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014306:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014308:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 801430a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801430e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014310:	430a      	orrs	r2, r1
 8014312:	62da      	str	r2, [r3, #44]	; 0x2c
 8014314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014316:	400b      	ands	r3, r1
 8014318:	9300      	str	r3, [sp, #0]
 801431a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SX126x_SPI_SCK_Pin|SX126x_SPI_MISO_Pin|SX126x_SPI_MOSI_Pin;
 801431c:	23e0      	movs	r3, #224	; 0xe0
 801431e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014320:	3bde      	subs	r3, #222	; 0xde
 8014322:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014324:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014326:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014328:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801432a:	f7f7 fb4b 	bl	800b9c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801432e:	2200      	movs	r2, #0
 8014330:	2019      	movs	r0, #25
 8014332:	0011      	movs	r1, r2
 8014334:	f7f7 f8d0 	bl	800b4d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8014338:	2019      	movs	r0, #25
 801433a:	f7f7 f8f7 	bl	800b52c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 801433e:	b006      	add	sp, #24
 8014340:	bd10      	pop	{r4, pc}
 8014342:	46c0      	nop			; (mov r8, r8)
 8014344:	40013000 	.word	0x40013000
 8014348:	40021000 	.word	0x40021000

0801434c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 801434c:	480d      	ldr	r0, [pc, #52]	; (8014384 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801434e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8014350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014352:	e003      	b.n	801435c <LoopCopyDataInit>

08014354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014354:	4b0c      	ldr	r3, [pc, #48]	; (8014388 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8014356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801435a:	3104      	adds	r1, #4

0801435c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 801435c:	480b      	ldr	r0, [pc, #44]	; (801438c <LoopForever+0xa>)
  ldr  r3, =_edata
 801435e:	4b0c      	ldr	r3, [pc, #48]	; (8014390 <LoopForever+0xe>)
  adds  r2, r0, r1
 8014360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014364:	d3f6      	bcc.n	8014354 <CopyDataInit>
  ldr  r2, =_sbss
 8014366:	4a0b      	ldr	r2, [pc, #44]	; (8014394 <LoopForever+0x12>)
  b  LoopFillZerobss
 8014368:	e002      	b.n	8014370 <LoopFillZerobss>

0801436a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 801436a:	2300      	movs	r3, #0
  str  r3, [r2]
 801436c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801436e:	3204      	adds	r2, #4

08014370 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8014370:	4b09      	ldr	r3, [pc, #36]	; (8014398 <LoopForever+0x16>)
  cmp  r2, r3
 8014372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014374:	d3f9      	bcc.n	801436a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8014376:	f000 f885 	bl	8014484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801437a:	f001 f93b 	bl	80155f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801437e:	f7fe fd71 	bl	8012e64 <main>

08014382 <LoopForever>:

LoopForever:
    b LoopForever
 8014382:	e7fe      	b.n	8014382 <LoopForever>
   ldr   r0, =_estack
 8014384:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8014388:	08019b34 	.word	0x08019b34
  ldr  r0, =_sdata
 801438c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014390:	20000814 	.word	0x20000814
  ldr  r2, =_sbss
 8014394:	20000c28 	.word	0x20000c28
  ldr  r3, = _ebss
 8014398:	20001c00 	.word	0x20001c00

0801439c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801439c:	e7fe      	b.n	801439c <ADC1_COMP_IRQHandler>
	...

080143a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80143a0:	2201      	movs	r2, #1
 80143a2:	4b09      	ldr	r3, [pc, #36]	; (80143c8 <HAL_MspInit+0x28>)
{
 80143a4:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80143a6:	6b59      	ldr	r1, [r3, #52]	; 0x34

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80143a8:	2004      	movs	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80143aa:	430a      	orrs	r2, r1
 80143ac:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80143ae:	2280      	movs	r2, #128	; 0x80
 80143b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80143b2:	0552      	lsls	r2, r2, #21
 80143b4:	430a      	orrs	r2, r1
 80143b6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80143b8:	2200      	movs	r2, #0
 80143ba:	0011      	movs	r1, r2
 80143bc:	f7f7 f88c 	bl	800b4d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80143c0:	2004      	movs	r0, #4
 80143c2:	f7f7 f8b3 	bl	800b52c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80143c6:	bd10      	pop	{r4, pc}
 80143c8:	40021000 	.word	0x40021000

080143cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80143cc:	4770      	bx	lr

080143ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80143ce:	e7fe      	b.n	80143ce <HardFault_Handler>

080143d0 <SVC_Handler>:
 80143d0:	4770      	bx	lr

080143d2 <PendSV_Handler>:
 80143d2:	4770      	bx	lr

080143d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80143d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80143d6:	f7f6 fd61 	bl	800ae9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80143da:	bd10      	pop	{r4, pc}

080143dc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80143dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80143de:	4802      	ldr	r0, [pc, #8]	; (80143e8 <RTC_IRQHandler+0xc>)
 80143e0:	f7f9 fb94 	bl	800db0c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80143e4:	bd10      	pop	{r4, pc}
 80143e6:	46c0      	nop			; (mov r8, r8)
 80143e8:	200018e0 	.word	0x200018e0

080143ec <RCC_IRQHandler>:
 80143ec:	4770      	bx	lr

080143ee <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80143ee:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80143f0:	2001      	movs	r0, #1
 80143f2:	f7f7 fbb3 	bl	800bb5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80143f6:	2002      	movs	r0, #2
 80143f8:	f7f7 fbb0 	bl	800bb5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80143fc:	bd10      	pop	{r4, pc}

080143fe <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80143fe:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8014400:	2008      	movs	r0, #8
 8014402:	f7f7 fbab 	bl	800bb5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8014406:	bd10      	pop	{r4, pc}

08014408 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8014408:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 801440a:	2020      	movs	r0, #32
 801440c:	f7f7 fba6 	bl	800bb5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8014410:	2080      	movs	r0, #128	; 0x80
 8014412:	0080      	lsls	r0, r0, #2
 8014414:	f7f7 fba2 	bl	800bb5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8014418:	2080      	movs	r0, #128	; 0x80
 801441a:	00c0      	lsls	r0, r0, #3
 801441c:	f7f7 fb9e 	bl	800bb5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8014420:	bd10      	pop	{r4, pc}
	...

08014424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8014424:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8014426:	4802      	ldr	r0, [pc, #8]	; (8014430 <DMA1_Channel1_IRQHandler+0xc>)
 8014428:	f7f7 f98b 	bl	800b742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801442c:	bd10      	pop	{r4, pc}
 801442e:	46c0      	nop			; (mov r8, r8)
 8014430:	20001b3c 	.word	0x20001b3c

08014434 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8014434:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8014436:	4802      	ldr	r0, [pc, #8]	; (8014440 <DMA1_Channel2_3_IRQHandler+0xc>)
 8014438:	f7f7 f983 	bl	800b742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 801443c:	bd10      	pop	{r4, pc}
 801443e:	46c0      	nop			; (mov r8, r8)
 8014440:	20001b88 	.word	0x20001b88

08014444 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8014444:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8014446:	4802      	ldr	r0, [pc, #8]	; (8014450 <LPTIM1_IRQHandler+0xc>)
 8014448:	f7f8 fc57 	bl	800ccfa <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 801444c:	bd10      	pop	{r4, pc}
 801444e:	46c0      	nop			; (mov r8, r8)
 8014450:	200018b0 	.word	0x200018b0

08014454 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8014454:	4806      	ldr	r0, [pc, #24]	; (8014470 <I2C1_IRQHandler+0x1c>)
{
 8014456:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8014458:	6803      	ldr	r3, [r0, #0]
 801445a:	699a      	ldr	r2, [r3, #24]
 801445c:	23e0      	movs	r3, #224	; 0xe0
 801445e:	00db      	lsls	r3, r3, #3
 8014460:	421a      	tst	r2, r3
 8014462:	d002      	beq.n	801446a <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8014464:	f7f8 fb44 	bl	800caf0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8014468:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 801446a:	f7f8 f8ad 	bl	800c5c8 <HAL_I2C_EV_IRQHandler>
}
 801446e:	e7fb      	b.n	8014468 <I2C1_IRQHandler+0x14>
 8014470:	20001ad4 	.word	0x20001ad4

08014474 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8014474:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */
  __NOP();
 8014476:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8014478:	4801      	ldr	r0, [pc, #4]	; (8014480 <SPI1_IRQHandler+0xc>)
 801447a:	f7f9 fd45 	bl	800df08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 801447e:	bd10      	pop	{r4, pc}
 8014480:	20001904 	.word	0x20001904

08014484 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8014484:	2280      	movs	r2, #128	; 0x80
 8014486:	4b0f      	ldr	r3, [pc, #60]	; (80144c4 <SystemInit+0x40>)
 8014488:	0052      	lsls	r2, r2, #1
 801448a:	6819      	ldr	r1, [r3, #0]
 801448c:	430a      	orrs	r2, r1
 801448e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8014490:	68da      	ldr	r2, [r3, #12]
 8014492:	490d      	ldr	r1, [pc, #52]	; (80144c8 <SystemInit+0x44>)
 8014494:	400a      	ands	r2, r1
 8014496:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	490c      	ldr	r1, [pc, #48]	; (80144cc <SystemInit+0x48>)
 801449c:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801449e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80144a0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80144a2:	689a      	ldr	r2, [r3, #8]
 80144a4:	438a      	bics	r2, r1
 80144a6:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	4909      	ldr	r1, [pc, #36]	; (80144d0 <SystemInit+0x4c>)
 80144ac:	400a      	ands	r2, r1
 80144ae:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80144b0:	68da      	ldr	r2, [r3, #12]
 80144b2:	4908      	ldr	r1, [pc, #32]	; (80144d4 <SystemInit+0x50>)
 80144b4:	400a      	ands	r2, r1
 80144b6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80144b8:	2200      	movs	r2, #0
 80144ba:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80144bc:	4b06      	ldr	r3, [pc, #24]	; (80144d8 <SystemInit+0x54>)
 80144be:	4a07      	ldr	r2, [pc, #28]	; (80144dc <SystemInit+0x58>)
 80144c0:	609a      	str	r2, [r3, #8]
#endif
}
 80144c2:	4770      	bx	lr
 80144c4:	40021000 	.word	0x40021000
 80144c8:	88ff400c 	.word	0x88ff400c
 80144cc:	fef6fff6 	.word	0xfef6fff6
 80144d0:	fffbffff 	.word	0xfffbffff
 80144d4:	ff02ffff 	.word	0xff02ffff
 80144d8:	e000ed00 	.word	0xe000ed00
 80144dc:	08008000 	.word	0x08008000

080144e0 <tasks_add>:
volatile uint32_t tasks_ticks = 0;

struct task *tasks_add(struct task t);
int tasks_has_pending(void);

struct task *tasks_add(struct task t) {
 80144e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144e2:	b085      	sub	sp, #20
 80144e4:	ab01      	add	r3, sp, #4
 80144e6:	609a      	str	r2, [r3, #8]
  uint8_t i = 0;

  do {
    if(tasks[i].when <= tasks_ticks) {
 80144e8:	240c      	movs	r4, #12
struct task *tasks_add(struct task t) {
 80144ea:	2200      	movs	r2, #0
 80144ec:	6059      	str	r1, [r3, #4]
    if(tasks[i].when <= tasks_ticks) {
 80144ee:	4d0c      	ldr	r5, [pc, #48]	; (8014520 <tasks_add+0x40>)
 80144f0:	490c      	ldr	r1, [pc, #48]	; (8014524 <tasks_add+0x44>)
struct task *tasks_add(struct task t) {
 80144f2:	9001      	str	r0, [sp, #4]
    if(tasks[i].when <= tasks_ticks) {
 80144f4:	0020      	movs	r0, r4
 80144f6:	4350      	muls	r0, r2
 80144f8:	1940      	adds	r0, r0, r5
 80144fa:	680e      	ldr	r6, [r1, #0]
 80144fc:	6807      	ldr	r7, [r0, #0]
 80144fe:	42b7      	cmp	r7, r6
 8014500:	d804      	bhi.n	801450c <tasks_add+0x2c>
      tasks[i] = t;
 8014502:	0002      	movs	r2, r0
 8014504:	cb32      	ldmia	r3!, {r1, r4, r5}
 8014506:	c232      	stmia	r2!, {r1, r4, r5}
    }
  } while(++i % TASK_MAX != 0);

  DEBUG_MSG("Couldn't add task, no space left!\n");
  return NULL;
}
 8014508:	b005      	add	sp, #20
 801450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801450c:	3201      	adds	r2, #1
  } while(++i % TASK_MAX != 0);
 801450e:	2a14      	cmp	r2, #20
 8014510:	d1f0      	bne.n	80144f4 <tasks_add+0x14>
  DEBUG_MSG("Couldn't add task, no space left!\n");
 8014512:	4905      	ldr	r1, [pc, #20]	; (8014528 <tasks_add+0x48>)
 8014514:	2000      	movs	r0, #0
 8014516:	f7f5 ff89 	bl	800a42c <SEGGER_RTT_WriteString>
  return NULL;
 801451a:	2000      	movs	r0, #0
 801451c:	e7f4      	b.n	8014508 <tasks_add+0x28>
 801451e:	46c0      	nop			; (mov r8, r8)
 8014520:	200019a8 	.word	0x200019a8
 8014524:	20001a98 	.word	0x20001a98
 8014528:	08019806 	.word	0x08019806

0801452c <tasks_has_pending>:
void tasks_del(struct task *t) {
  memset(t, 0, sizeof *t);
}

int tasks_has_pending(void) {
  for(size_t i = 0; i < TASK_MAX; i++) {
 801452c:	2300      	movs	r3, #0
    if(tasks[i].when > tasks_ticks)
 801452e:	210c      	movs	r1, #12
int tasks_has_pending(void) {
 8014530:	b530      	push	{r4, r5, lr}
    if(tasks[i].when > tasks_ticks)
 8014532:	4a08      	ldr	r2, [pc, #32]	; (8014554 <tasks_has_pending+0x28>)
 8014534:	4808      	ldr	r0, [pc, #32]	; (8014558 <tasks_has_pending+0x2c>)
 8014536:	000d      	movs	r5, r1
 8014538:	435d      	muls	r5, r3
 801453a:	6814      	ldr	r4, [r2, #0]
 801453c:	5945      	ldr	r5, [r0, r5]
 801453e:	42a5      	cmp	r5, r4
 8014540:	d804      	bhi.n	801454c <tasks_has_pending+0x20>
  for(size_t i = 0; i < TASK_MAX; i++) {
 8014542:	3301      	adds	r3, #1
 8014544:	2b14      	cmp	r3, #20
 8014546:	d1f6      	bne.n	8014536 <tasks_has_pending+0xa>
      return -1;
  }
  return 0;
 8014548:	2000      	movs	r0, #0
}
 801454a:	bd30      	pop	{r4, r5, pc}
      return -1;
 801454c:	2001      	movs	r0, #1
 801454e:	4240      	negs	r0, r0
 8014550:	e7fb      	b.n	801454a <tasks_has_pending+0x1e>
 8014552:	46c0      	nop			; (mov r8, r8)
 8014554:	20001a98 	.word	0x20001a98
 8014558:	200019a8 	.word	0x200019a8

0801455c <HAL_LPTIM_AutoReloadMatchCallback>:

volatile uint8_t processingRdyTasks = 0;
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim1) {
 801455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tasks_ticks++;
 801455e:	4e0f      	ldr	r6, [pc, #60]	; (801459c <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
  if (processingRdyTasks) {
 8014560:	4d0f      	ldr	r5, [pc, #60]	; (80145a0 <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
  tasks_ticks++;
 8014562:	6833      	ldr	r3, [r6, #0]
 8014564:	3301      	adds	r3, #1
 8014566:	6033      	str	r3, [r6, #0]
  if (processingRdyTasks) {
 8014568:	782b      	ldrb	r3, [r5, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d004      	beq.n	8014578 <HAL_LPTIM_AutoReloadMatchCallback+0x1c>
    DEBUG_MSG("Timer ticked before task processing done.\n");
 801456e:	490d      	ldr	r1, [pc, #52]	; (80145a4 <HAL_LPTIM_AutoReloadMatchCallback+0x48>)
 8014570:	2000      	movs	r0, #0
 8014572:	f7f5 ff5b 	bl	800a42c <SEGGER_RTT_WriteString>
        tasks[i].cb(tasks[i].arg); // execute task function
      }
    }
    processingRdyTasks = 0;
  }
}
 8014576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014578:	4c0b      	ldr	r4, [pc, #44]	; (80145a8 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
    processingRdyTasks = 1;
 801457a:	2301      	movs	r3, #1
 801457c:	0027      	movs	r7, r4
 801457e:	702b      	strb	r3, [r5, #0]
 8014580:	37f0      	adds	r7, #240	; 0xf0
      if (tasks[i].when == tasks_ticks) { // Ready
 8014582:	6833      	ldr	r3, [r6, #0]
 8014584:	6822      	ldr	r2, [r4, #0]
 8014586:	429a      	cmp	r2, r3
 8014588:	d102      	bne.n	8014590 <HAL_LPTIM_AutoReloadMatchCallback+0x34>
        tasks[i].cb(tasks[i].arg); // execute task function
 801458a:	6860      	ldr	r0, [r4, #4]
 801458c:	68a3      	ldr	r3, [r4, #8]
 801458e:	4798      	blx	r3
 8014590:	340c      	adds	r4, #12
    for (size_t i = 0; i < TASK_MAX; ++i) {
 8014592:	42bc      	cmp	r4, r7
 8014594:	d1f5      	bne.n	8014582 <HAL_LPTIM_AutoReloadMatchCallback+0x26>
    processingRdyTasks = 0;
 8014596:	2300      	movs	r3, #0
 8014598:	702b      	strb	r3, [r5, #0]
}
 801459a:	e7ec      	b.n	8014576 <HAL_LPTIM_AutoReloadMatchCallback+0x1a>
 801459c:	20001a98 	.word	0x20001a98
 80145a0:	200019a5 	.word	0x200019a5
 80145a4:	080197db 	.word	0x080197db
 80145a8:	200019a8 	.word	0x200019a8

080145ac <atcab_init_ext>:
 *  \param[in]  cfg    Logical interface configuration. Some predefined
 *                     configurations can be found in atca_cfgs.h
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_init_ext(ATCADevice* device, ATCAIfaceCfg *cfg)
{
 80145ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145ae:	0004      	movs	r4, r0
 80145b0:	000d      	movs	r5, r1
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (device)
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d102      	bne.n	80145bc <atcab_init_ext+0x10>
            (*device)->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
        }
#endif
    }

    return ATCA_SUCCESS;
 80145b6:	2300      	movs	r3, #0
}
 80145b8:	0018      	movs	r0, r3
 80145ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (*device)
 80145bc:	6803      	ldr	r3, [r0, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <atcab_init_ext+0x1a>
    {
        return status;
    }
    *device = NULL;
#else
    deleteATCADevice(device);
 80145c2:	f000 f887 	bl	80146d4 <deleteATCADevice>
        *device = newATCADevice(cfg);
 80145c6:	0028      	movs	r0, r5
 80145c8:	f000 f84c 	bl	8014664 <newATCADevice>
            return ATCA_GEN_FAIL;
 80145cc:	23e1      	movs	r3, #225	; 0xe1
        *device = newATCADevice(cfg);
 80145ce:	6020      	str	r0, [r4, #0]
        if (*device == NULL)
 80145d0:	2800      	cmp	r0, #0
 80145d2:	d0f1      	beq.n	80145b8 <atcab_init_ext+0xc>
        if (cfg->devtype == ATECC608)
 80145d4:	786b      	ldrb	r3, [r5, #1]
 80145d6:	2b03      	cmp	r3, #3
 80145d8:	d1ed      	bne.n	80145b6 <atcab_init_ext+0xa>
            if ((status = calib_read_bytes_zone(*device, ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &(*device)->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
 80145da:	2200      	movs	r2, #0
 80145dc:	3b02      	subs	r3, #2
 80145de:	9301      	str	r3, [sp, #4]
 80145e0:	6803      	ldr	r3, [r0, #0]
 80145e2:	0011      	movs	r1, r2
 80145e4:	3301      	adds	r3, #1
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	2313      	movs	r3, #19
 80145ea:	f000 fa8a 	bl	8014b02 <calib_read_bytes_zone>
 80145ee:	1e03      	subs	r3, r0, #0
 80145f0:	d1e2      	bne.n	80145b8 <atcab_init_ext+0xc>
            (*device)->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
 80145f2:	2007      	movs	r0, #7
 80145f4:	6822      	ldr	r2, [r4, #0]
 80145f6:	6811      	ldr	r1, [r2, #0]
 80145f8:	784a      	ldrb	r2, [r1, #1]
 80145fa:	4382      	bics	r2, r0
 80145fc:	704a      	strb	r2, [r1, #1]
 80145fe:	e7db      	b.n	80145b8 <atcab_init_ext+0xc>

08014600 <atcab_init>:
{
 8014600:	b510      	push	{r4, lr}
 8014602:	0001      	movs	r1, r0
    return atcab_init_ext(&_gDevice, cfg);
 8014604:	4801      	ldr	r0, [pc, #4]	; (801460c <atcab_init+0xc>)
 8014606:	f7ff ffd1 	bl	80145ac <atcab_init_ext>
}
 801460a:	bd10      	pop	{r4, pc}
 801460c:	20001a9c 	.word	0x20001a9c

08014610 <initATCACommand>:
 *                         should be associated with this command object.
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
 8014610:	0003      	movs	r3, r0
    if (ca_cmd == NULL)
    {
        return ATCA_BAD_PARAM;
 8014612:	20e2      	movs	r0, #226	; 0xe2
    if (ca_cmd == NULL)
 8014614:	2900      	cmp	r1, #0
 8014616:	d002      	beq.n	801461e <initATCACommand+0xe>
    }

    ca_cmd->dt = device_type;
    ca_cmd->clock_divider = 0;
 8014618:	2000      	movs	r0, #0
    ca_cmd->dt = device_type;
 801461a:	700b      	strb	r3, [r1, #0]
    ca_cmd->clock_divider = 0;
 801461c:	7048      	strb	r0, [r1, #1]

    return ATCA_SUCCESS;
}
 801461e:	4770      	bx	lr

08014620 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
 8014620:	b510      	push	{r4, lr}
 8014622:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
 8014624:	d004      	beq.n	8014630 <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
 8014626:	6800      	ldr	r0, [r0, #0]
 8014628:	f001 f824 	bl	8015674 <free>
    *ca_cmd = NULL;
 801462c:	2300      	movs	r3, #0
 801462e:	6023      	str	r3, [r4, #0]
}
 8014630:	bd10      	pop	{r4, pc}

08014632 <atca_trace>:
}

ATCA_STATUS atca_trace(ATCA_STATUS status)
{
    return status;
}
 8014632:	4770      	bx	lr

08014634 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
 8014634:	b570      	push	{r4, r5, r6, lr}
 8014636:	0005      	movs	r5, r0
 8014638:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    {
        return ATCA_BAD_PARAM;
 801463a:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
 801463c:	2d00      	cmp	r5, #0
 801463e:	d010      	beq.n	8014662 <initATCADevice+0x2e>
 8014640:	2900      	cmp	r1, #0
 8014642:	d00e      	beq.n	8014662 <initATCADevice+0x2e>
 8014644:	6809      	ldr	r1, [r1, #0]
 8014646:	2900      	cmp	r1, #0
 8014648:	d00b      	beq.n	8014662 <initATCADevice+0x2e>
 801464a:	6863      	ldr	r3, [r4, #4]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d008      	beq.n	8014662 <initATCADevice+0x2e>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
 8014650:	7868      	ldrb	r0, [r5, #1]
 8014652:	f7ff ffdd 	bl	8014610 <initATCACommand>
    if (status != ATCA_SUCCESS)
 8014656:	2800      	cmp	r0, #0
 8014658:	d103      	bne.n	8014662 <initATCADevice+0x2e>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
 801465a:	6861      	ldr	r1, [r4, #4]
 801465c:	0028      	movs	r0, r5
 801465e:	f000 f876 	bl	801474e <initATCAIface>
    {
        return status;
    }

    return ATCA_SUCCESS;
}
 8014662:	bd70      	pop	{r4, r5, r6, pc}

08014664 <newATCADevice>:
{
 8014664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014666:	1e07      	subs	r7, r0, #0
    if (cfg == NULL)
 8014668:	d102      	bne.n	8014670 <newATCADevice+0xc>
        return NULL;
 801466a:	2400      	movs	r4, #0
}
 801466c:	0020      	movs	r0, r4
 801466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
 8014670:	2018      	movs	r0, #24
 8014672:	f000 fff5 	bl	8015660 <malloc>
 8014676:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
 8014678:	d0f7      	beq.n	801466a <newATCADevice+0x6>
    memset(ca_dev, 0, sizeof(struct atca_device));
 801467a:	2214      	movs	r2, #20
 801467c:	2100      	movs	r1, #0
 801467e:	3004      	adds	r0, #4
 8014680:	f001 f82c 	bl	80156dc <memset>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
 8014684:	2004      	movs	r0, #4
 8014686:	f000 ffeb 	bl	8015660 <malloc>
 801468a:	1e05      	subs	r5, r0, #0
 801468c:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
 801468e:	d103      	bne.n	8014698 <newATCADevice+0x34>
        free(ca_dev);
 8014690:	0020      	movs	r0, r4
 8014692:	f000 ffef 	bl	8015674 <free>
 8014696:	e7e8      	b.n	801466a <newATCADevice+0x6>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
 8014698:	2028      	movs	r0, #40	; 0x28
 801469a:	f000 ffe1 	bl	8015660 <malloc>
 801469e:	0006      	movs	r6, r0
 80146a0:	6060      	str	r0, [r4, #4]
        free(ca_dev->mCommands);
 80146a2:	0028      	movs	r0, r5
    if (ca_dev->mIface == NULL)
 80146a4:	2e00      	cmp	r6, #0
 80146a6:	d009      	beq.n	80146bc <newATCADevice+0x58>
    status = initATCADevice(cfg, ca_dev);
 80146a8:	0021      	movs	r1, r4
 80146aa:	0038      	movs	r0, r7
 80146ac:	f7ff ffc2 	bl	8014634 <initATCADevice>
    if (status != ATCA_SUCCESS)
 80146b0:	2800      	cmp	r0, #0
 80146b2:	d0db      	beq.n	801466c <newATCADevice+0x8>
        free(ca_dev->mIface);
 80146b4:	6860      	ldr	r0, [r4, #4]
 80146b6:	f000 ffdd 	bl	8015674 <free>
        free(ca_dev->mCommands);
 80146ba:	6820      	ldr	r0, [r4, #0]
 80146bc:	f000 ffda 	bl	8015674 <free>
 80146c0:	e7e6      	b.n	8014690 <newATCADevice+0x2c>

080146c2 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
 80146c2:	0003      	movs	r3, r0
 80146c4:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
 80146c6:	20e2      	movs	r0, #226	; 0xe2
    if (ca_dev == NULL)
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d002      	beq.n	80146d2 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
 80146cc:	6858      	ldr	r0, [r3, #4]
 80146ce:	f000 f887 	bl	80147e0 <releaseATCAIface>
}
 80146d2:	bd10      	pop	{r4, pc}

080146d4 <deleteATCADevice>:
{
 80146d4:	b510      	push	{r4, lr}
 80146d6:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
 80146d8:	d013      	beq.n	8014702 <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
 80146da:	6800      	ldr	r0, [r0, #0]
 80146dc:	f7ff fff1 	bl	80146c2 <releaseATCADevice>
    deleteATCACommand(&(*ca_dev)->mCommands);
 80146e0:	6820      	ldr	r0, [r4, #0]
 80146e2:	f7ff ff9d 	bl	8014620 <deleteATCACommand>
    if ((*ca_dev)->mIface)
 80146e6:	6823      	ldr	r3, [r4, #0]
 80146e8:	6858      	ldr	r0, [r3, #4]
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d004      	beq.n	80146f8 <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
 80146ee:	f000 ffc1 	bl	8015674 <free>
        (*ca_dev)->mIface = NULL;
 80146f2:	2200      	movs	r2, #0
 80146f4:	6823      	ldr	r3, [r4, #0]
 80146f6:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
 80146f8:	6820      	ldr	r0, [r4, #0]
 80146fa:	f000 ffbb 	bl	8015674 <free>
    *ca_dev = NULL;
 80146fe:	2300      	movs	r3, #0
 8014700:	6023      	str	r3, [r4, #0]
}
 8014702:	bd10      	pop	{r4, pc}

08014704 <atinit>:
 *         be called instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atinit(ATCAIface ca_iface)
{
 8014704:	b513      	push	{r0, r1, r4, lr}
 8014706:	0004      	movs	r4, r0
    ATCA_STATUS status = hal_iface_init(ca_iface->mIfaceCFG, hal);
 8014708:	a901      	add	r1, sp, #4
 801470a:	6840      	ldr	r0, [r0, #4]
 801470c:	f000 fa70 	bl	8014bf0 <hal_iface_init>
    if (ATCA_SUCCESS == status)
 8014710:	2800      	cmp	r0, #0
 8014712:	d11b      	bne.n	801474c <atinit+0x48>
        ca_iface->atinit     = (*hal)->halinit;
 8014714:	9801      	ldr	r0, [sp, #4]

    status = _atinit(ca_iface, &hal);

    if (ATCA_SUCCESS == status)
    {
        status = ca_iface->atinit(hal, ca_iface->mIfaceCFG);
 8014716:	6861      	ldr	r1, [r4, #4]
        ca_iface->atpostinit = (*hal)->halpostinit;
 8014718:	6842      	ldr	r2, [r0, #4]
        ca_iface->atinit     = (*hal)->halinit;
 801471a:	6803      	ldr	r3, [r0, #0]
        ca_iface->atpostinit = (*hal)->halpostinit;
 801471c:	60e2      	str	r2, [r4, #12]
        ca_iface->atsend     = (*hal)->halsend;
 801471e:	6882      	ldr	r2, [r0, #8]
        ca_iface->atinit     = (*hal)->halinit;
 8014720:	60a3      	str	r3, [r4, #8]
        ca_iface->atsend     = (*hal)->halsend;
 8014722:	6122      	str	r2, [r4, #16]
        ca_iface->atreceive  = (*hal)->halreceive;
 8014724:	68c2      	ldr	r2, [r0, #12]
 8014726:	6162      	str	r2, [r4, #20]
        ca_iface->atwake     = (*hal)->halwake;
 8014728:	6902      	ldr	r2, [r0, #16]
 801472a:	61a2      	str	r2, [r4, #24]
        ca_iface->atsleep    = (*hal)->halsleep;
 801472c:	6982      	ldr	r2, [r0, #24]
 801472e:	6222      	str	r2, [r4, #32]
        ca_iface->atidle     = (*hal)->halidle;
 8014730:	6942      	ldr	r2, [r0, #20]
 8014732:	61e2      	str	r2, [r4, #28]
        ca_iface->hal_data   = (*hal)->hal_data;
 8014734:	6a02      	ldr	r2, [r0, #32]
 8014736:	6262      	str	r2, [r4, #36]	; 0x24
        status = ca_iface->atinit(hal, ca_iface->mIfaceCFG);
 8014738:	4798      	blx	r3
    }
    if (status == ATCA_SUCCESS)
 801473a:	2800      	cmp	r0, #0
 801473c:	d106      	bne.n	801474c <atinit+0x48>
    {
        ca_iface->hal_data = hal->hal_data;
 801473e:	9b01      	ldr	r3, [sp, #4]
 8014740:	6a1a      	ldr	r2, [r3, #32]
 8014742:	6262      	str	r2, [r4, #36]	; 0x24
        hal->hal_data = NULL;
 8014744:	6218      	str	r0, [r3, #32]

        // Perform the post init
        status = ca_iface->atpostinit(ca_iface);
 8014746:	68e3      	ldr	r3, [r4, #12]
 8014748:	0020      	movs	r0, r4
 801474a:	4798      	blx	r3
    }

    return status;
}
 801474c:	bd16      	pop	{r1, r2, r4, pc}

0801474e <initATCAIface>:
{
 801474e:	0003      	movs	r3, r0
 8014750:	b510      	push	{r4, lr}
        return ATCA_BAD_PARAM;
 8014752:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
 8014754:	2b00      	cmp	r3, #0
 8014756:	d007      	beq.n	8014768 <initATCAIface+0x1a>
 8014758:	2900      	cmp	r1, #0
 801475a:	d005      	beq.n	8014768 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
 801475c:	781a      	ldrb	r2, [r3, #0]
    status = atinit(ca_iface);
 801475e:	0008      	movs	r0, r1
    ca_iface->mType = cfg->iface_type;
 8014760:	700a      	strb	r2, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
 8014762:	604b      	str	r3, [r1, #4]
    status = atinit(ca_iface);
 8014764:	f7ff ffce 	bl	8014704 <atinit>
}
 8014768:	bd10      	pop	{r4, pc}

0801476a <atsend>:
 * \param[in] txdata         Data to be transmitted to the device.
 * \param[in] txlength       Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t word_address, uint8_t *txdata, int txlength)
{
 801476a:	b570      	push	{r4, r5, r6, lr}
 801476c:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 801476e:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 8014770:	2c00      	cmp	r4, #0
 8014772:	d005      	beq.n	8014780 <atsend+0x16>
    }

    if (ca_iface->atsend)
 8014774:	6925      	ldr	r5, [r4, #16]
    {
        return ca_iface->atsend(ca_iface, word_address, txdata, txlength);
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 8014776:	301b      	adds	r0, #27
    if (ca_iface->atsend)
 8014778:	2d00      	cmp	r5, #0
 801477a:	d001      	beq.n	8014780 <atsend+0x16>
        return ca_iface->atsend(ca_iface, word_address, txdata, txlength);
 801477c:	0020      	movs	r0, r4
 801477e:	47a8      	blx	r5
    }
}
 8014780:	bd70      	pop	{r4, r5, r6, pc}

08014782 <atreceive>:
 * \param[in,out] rxlength       As input, the size of the rxdata buffer.
 *                               As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t word_address, uint8_t *rxdata, uint16_t *rxlength)
{
 8014782:	b570      	push	{r4, r5, r6, lr}
 8014784:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 8014786:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 8014788:	2c00      	cmp	r4, #0
 801478a:	d005      	beq.n	8014798 <atreceive+0x16>
    }

    if (ca_iface->atreceive)
 801478c:	6965      	ldr	r5, [r4, #20]
    {
        return ca_iface->atreceive(ca_iface, word_address, rxdata, rxlength);
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 801478e:	301b      	adds	r0, #27
    if (ca_iface->atreceive)
 8014790:	2d00      	cmp	r5, #0
 8014792:	d001      	beq.n	8014798 <atreceive+0x16>
        return ca_iface->atreceive(ca_iface, word_address, rxdata, rxlength);
 8014794:	0020      	movs	r0, r4
 8014796:	47a8      	blx	r5
    }
}
 8014798:	bd70      	pop	{r4, r5, r6, pc}

0801479a <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
 801479a:	b510      	push	{r4, lr}
 801479c:	0004      	movs	r4, r0
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 801479e:	20e2      	movs	r0, #226	; 0xe2
    if (!ca_iface)
 80147a0:	2c00      	cmp	r4, #0
 80147a2:	d00d      	beq.n	80147c0 <atwake+0x26>
    }

    if (ca_iface->atwake)
 80147a4:	69a3      	ldr	r3, [r4, #24]
        }
        return status;
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 80147a6:	301b      	adds	r0, #27
    if (ca_iface->atwake)
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d009      	beq.n	80147c0 <atwake+0x26>
        ATCA_STATUS status = ca_iface->atwake(ca_iface);
 80147ac:	0020      	movs	r0, r4
 80147ae:	4798      	blx	r3
        if (ATCA_WAKE_FAILED == status)
 80147b0:	28d0      	cmp	r0, #208	; 0xd0
 80147b2:	d105      	bne.n	80147c0 <atwake+0x26>
            atca_delay_ms(ATCA_POST_DELAY_MSEC);
 80147b4:	38b7      	subs	r0, #183	; 0xb7
 80147b6:	f7fd fa91 	bl	8011cdc <hal_delay_ms>
            status = ca_iface->atwake(ca_iface);
 80147ba:	69a3      	ldr	r3, [r4, #24]
 80147bc:	0020      	movs	r0, r4
 80147be:	4798      	blx	r3
    }
}
 80147c0:	bd10      	pop	{r4, pc}

080147c2 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
 80147c2:	b510      	push	{r4, lr}
    if (!ca_iface)
    {
        return ATCA_BAD_PARAM;
 80147c4:	24e2      	movs	r4, #226	; 0xe2
    if (!ca_iface)
 80147c6:	2800      	cmp	r0, #0
 80147c8:	d008      	beq.n	80147dc <atidle+0x1a>
    }

    if (ca_iface->atidle)
 80147ca:	69c3      	ldr	r3, [r0, #28]
        atca_delay_ms(1);
        return status;
    }
    else
    {
        return ATCA_NOT_INITIALIZED;
 80147cc:	341b      	adds	r4, #27
    if (ca_iface->atidle)
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d004      	beq.n	80147dc <atidle+0x1a>
        ATCA_STATUS status = ca_iface->atidle(ca_iface);
 80147d2:	4798      	blx	r3
 80147d4:	0004      	movs	r4, r0
        atca_delay_ms(1);
 80147d6:	2001      	movs	r0, #1
 80147d8:	f7fd fa80 	bl	8011cdc <hal_delay_ms>
    }
}
 80147dc:	0020      	movs	r0, r4
 80147de:	bd10      	pop	{r4, pc}

080147e0 <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
 80147e0:	0003      	movs	r3, r0
 80147e2:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
 80147e4:	20e2      	movs	r0, #226	; 0xe2
    if (ca_iface == NULL)
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d003      	beq.n	80147f2 <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
 80147ea:	7818      	ldrb	r0, [r3, #0]
 80147ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80147ee:	f000 fa11 	bl	8014c14 <hal_iface_release>
}
 80147f2:	bd10      	pop	{r4, pc}

080147f4 <calib_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
 80147f4:	b570      	push	{r4, r5, r6, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;
 80147f6:	2503      	movs	r5, #3
{
 80147f8:	9c04      	ldr	r4, [sp, #16]
    uint8_t mem_zone = zone & 0x03;
 80147fa:	4005      	ands	r5, r0

    if (addr == NULL)
 80147fc:	2c00      	cmp	r4, #0
 80147fe:	d103      	bne.n	8014808 <calib_get_addr+0x14>
    {
        return ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 8014800:	20e2      	movs	r0, #226	; 0xe2
 8014802:	f7ff ff16 	bl	8014632 <atca_trace>
        }
    }
    while (0);

    return status;
}
 8014806:	bd70      	pop	{r4, r5, r6, pc}
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
 8014808:	2d03      	cmp	r5, #3
 801480a:	d0f9      	beq.n	8014800 <calib_get_addr+0xc>
        *addr = 0;
 801480c:	2000      	movs	r0, #0
 801480e:	2607      	movs	r6, #7
 8014810:	8020      	strh	r0, [r4, #0]
 8014812:	4033      	ands	r3, r6
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
 8014814:	2d02      	cmp	r5, #2
 8014816:	d003      	beq.n	8014820 <calib_get_addr+0x2c>
            *addr = block << 3;
 8014818:	00d2      	lsls	r2, r2, #3
            *addr |= block << 8;
 801481a:	4313      	orrs	r3, r2
 801481c:	8023      	strh	r3, [r4, #0]
 801481e:	e7f2      	b.n	8014806 <calib_get_addr+0x12>
            *addr = slot << 3;
 8014820:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
 8014822:	430b      	orrs	r3, r1
            *addr |= block << 8;
 8014824:	0212      	lsls	r2, r2, #8
 8014826:	e7f8      	b.n	801481a <calib_get_addr+0x26>

08014828 <calib_get_zone_size>:
 * \param[out] size    Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_get_zone_size(ATCADevice device, uint8_t zone, uint16_t slot, size_t* size)
{
 8014828:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;

    if ((device == NULL) || (size == NULL))
 801482a:	2800      	cmp	r0, #0
 801482c:	d001      	beq.n	8014832 <calib_get_zone_size+0xa>
 801482e:	2b00      	cmp	r3, #0
 8014830:	d103      	bne.n	801483a <calib_get_zone_size+0x12>
        switch (zone)
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_TRACE(ATCA_BAD_PARAM, "Invalid zone received"); break;
 8014832:	20e2      	movs	r0, #226	; 0xe2
 8014834:	f7ff fefd 	bl	8014632 <atca_trace>
        default: status = ATCA_TRACE(ATCA_BAD_PARAM, "Invalid zone received"); break;
        }
    }

    return status;
}
 8014838:	bd10      	pop	{r4, pc}
    if (device->mIface->mIfaceCFG->devtype == ATSHA204A)
 801483a:	6840      	ldr	r0, [r0, #4]
 801483c:	6840      	ldr	r0, [r0, #4]
 801483e:	7840      	ldrb	r0, [r0, #1]
 8014840:	2800      	cmp	r0, #0
 8014842:	d10d      	bne.n	8014860 <calib_get_zone_size+0x38>
        switch (zone)
 8014844:	2901      	cmp	r1, #1
 8014846:	d009      	beq.n	801485c <calib_get_zone_size+0x34>
        switch (zone)
 8014848:	2900      	cmp	r1, #0
 801484a:	d003      	beq.n	8014854 <calib_get_zone_size+0x2c>
 801484c:	2902      	cmp	r1, #2
 801484e:	d1f0      	bne.n	8014832 <calib_get_zone_size+0xa>
        case ATCA_ZONE_DATA:   *size = 32; break;
 8014850:	2220      	movs	r2, #32
 8014852:	e000      	b.n	8014856 <calib_get_zone_size+0x2e>
        case ATCA_ZONE_CONFIG: *size = 88; break;
 8014854:	2258      	movs	r2, #88	; 0x58
                *size = 72;
 8014856:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
 8014858:	2000      	movs	r0, #0
 801485a:	e7ed      	b.n	8014838 <calib_get_zone_size+0x10>
        case ATCA_ZONE_OTP:    *size = 64; break;
 801485c:	2240      	movs	r2, #64	; 0x40
 801485e:	e7fa      	b.n	8014856 <calib_get_zone_size+0x2e>
    else if (device->mIface->mIfaceCFG->devtype == ATSHA206A)
 8014860:	2804      	cmp	r0, #4
 8014862:	d104      	bne.n	801486e <calib_get_zone_size+0x46>
        switch (zone)
 8014864:	2901      	cmp	r1, #1
 8014866:	d1ef      	bne.n	8014848 <calib_get_zone_size+0x20>
        case ATCA_ZONE_OTP:    *size = 0; break;
 8014868:	2000      	movs	r0, #0
 801486a:	6018      	str	r0, [r3, #0]
 801486c:	e7e4      	b.n	8014838 <calib_get_zone_size+0x10>
        switch (zone)
 801486e:	2901      	cmp	r1, #1
 8014870:	d0f4      	beq.n	801485c <calib_get_zone_size+0x34>
 8014872:	2900      	cmp	r1, #0
 8014874:	d005      	beq.n	8014882 <calib_get_zone_size+0x5a>
 8014876:	2902      	cmp	r1, #2
 8014878:	d1db      	bne.n	8014832 <calib_get_zone_size+0xa>
            if (slot < 8)
 801487a:	2a07      	cmp	r2, #7
 801487c:	d803      	bhi.n	8014886 <calib_get_zone_size+0x5e>
                *size = 36;
 801487e:	2224      	movs	r2, #36	; 0x24
 8014880:	e7e9      	b.n	8014856 <calib_get_zone_size+0x2e>
        case ATCA_ZONE_CONFIG: *size = 128; break;
 8014882:	2280      	movs	r2, #128	; 0x80
 8014884:	e7e7      	b.n	8014856 <calib_get_zone_size+0x2e>
            else if (slot == 8)
 8014886:	2a08      	cmp	r2, #8
 8014888:	d102      	bne.n	8014890 <calib_get_zone_size+0x68>
                *size = 416;
 801488a:	3299      	adds	r2, #153	; 0x99
 801488c:	32ff      	adds	r2, #255	; 0xff
 801488e:	e7e2      	b.n	8014856 <calib_get_zone_size+0x2e>
            else if (slot < 16)
 8014890:	2a0f      	cmp	r2, #15
 8014892:	d8ce      	bhi.n	8014832 <calib_get_zone_size+0xa>
                *size = 72;
 8014894:	2248      	movs	r2, #72	; 0x48
 8014896:	e7de      	b.n	8014856 <calib_get_zone_size+0x2e>

08014898 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
 8014898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801489a:	180b      	adds	r3, r1, r0
 801489c:	9301      	str	r3, [sp, #4]
    size_t counter;
    uint16_t crc_register = 0;
 801489e:	2300      	movs	r3, #0
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
 80148a0:	9801      	ldr	r0, [sp, #4]
 80148a2:	4288      	cmp	r0, r1
 80148a4:	d103      	bne.n	80148ae <atCRC+0x16>
            {
                crc_register ^= polynom;
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
 80148a6:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
 80148a8:	0a1b      	lsrs	r3, r3, #8
 80148aa:	7053      	strb	r3, [r2, #1]
}
 80148ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 80148ae:	7808      	ldrb	r0, [r1, #0]
 80148b0:	2408      	movs	r4, #8
 80148b2:	4684      	mov	ip, r0
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80148b4:	2001      	movs	r0, #1
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 80148b6:	4666      	mov	r6, ip
 80148b8:	0005      	movs	r5, r0
 80148ba:	4035      	ands	r5, r6
 80148bc:	1e6e      	subs	r6, r5, #1
 80148be:	41b5      	sbcs	r5, r6
            crc_bit = crc_register >> 15;
 80148c0:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
 80148c2:	005b      	lsls	r3, r3, #1
 80148c4:	b29b      	uxth	r3, r3
            if (data_bit != crc_bit)
 80148c6:	42bd      	cmp	r5, r7
 80148c8:	d002      	beq.n	80148d0 <atCRC+0x38>
                crc_register ^= polynom;
 80148ca:	4d05      	ldr	r5, [pc, #20]	; (80148e0 <atCRC+0x48>)
 80148cc:	406b      	eors	r3, r5
 80148ce:	b29b      	uxth	r3, r3
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80148d0:	0040      	lsls	r0, r0, #1
 80148d2:	3c01      	subs	r4, #1
 80148d4:	b2c0      	uxtb	r0, r0
 80148d6:	2c00      	cmp	r4, #0
 80148d8:	d1ed      	bne.n	80148b6 <atCRC+0x1e>
 80148da:	3101      	adds	r1, #1
 80148dc:	e7e0      	b.n	80148a0 <atCRC+0x8>
 80148de:	46c0      	nop			; (mov r8, r8)
 80148e0:	ffff8005 	.word	0xffff8005

080148e4 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
 80148e4:	b510      	push	{r4, lr}

    packet->param2 = ATCA_UINT16_HOST_TO_LE(packet->param2);

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
 80148e6:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
 80148e8:	7840      	ldrb	r0, [r0, #1]
 80148ea:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
 80148ec:	b2c0      	uxtb	r0, r0
 80148ee:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
 80148f0:	f7ff ffd2 	bl	8014898 <atCRC>
}
 80148f4:	bd10      	pop	{r4, pc}

080148f6 <atRead>:
    packet->opcode = ATCA_READ;
 80148f6:	2302      	movs	r3, #2
{
 80148f8:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
 80148fa:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
 80148fc:	3305      	adds	r3, #5
    atCalcCrc(packet);
 80148fe:	0008      	movs	r0, r1
    packet->txsize = READ_COUNT;
 8014900:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
 8014902:	f7ff ffef 	bl	80148e4 <atCalcCrc>
}
 8014906:	2000      	movs	r0, #0
 8014908:	bd10      	pop	{r4, pc}

0801490a <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
 801490a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801490c:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
 801490e:	7803      	ldrb	r3, [r0, #0]

    count -= ATCA_CRC_SIZE;
    atCRC(count, response, crc);
 8014910:	ae01      	add	r6, sp, #4
    count -= ATCA_CRC_SIZE;
 8014912:	3b02      	subs	r3, #2
    atCRC(count, response, crc);
 8014914:	b2dc      	uxtb	r4, r3
 8014916:	0032      	movs	r2, r6
 8014918:	0001      	movs	r1, r0
 801491a:	0020      	movs	r0, r4
 801491c:	f7ff ffbc 	bl	8014898 <atCRC>

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
 8014920:	7832      	ldrb	r2, [r6, #0]
 8014922:	5d2b      	ldrb	r3, [r5, r4]
 8014924:	20e5      	movs	r0, #229	; 0xe5
 8014926:	429a      	cmp	r2, r3
 8014928:	d105      	bne.n	8014936 <atCheckCrc+0x2c>
 801492a:	192c      	adds	r4, r5, r4
 801492c:	7872      	ldrb	r2, [r6, #1]
 801492e:	7863      	ldrb	r3, [r4, #1]
 8014930:	429a      	cmp	r2, r3
 8014932:	d100      	bne.n	8014936 <atCheckCrc+0x2c>
 8014934:	2000      	movs	r0, #0
}
 8014936:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08014938 <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    if (data[0] == 0x04)        // error packets are always 4 bytes long
 8014938:	7803      	ldrb	r3, [r0, #0]
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
 801493a:	2200      	movs	r2, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
 801493c:	2b04      	cmp	r3, #4
 801493e:	d116      	bne.n	801496e <isATCAError+0x36>
        switch (data[1])
 8014940:	7843      	ldrb	r3, [r0, #1]
 8014942:	2b07      	cmp	r3, #7
 8014944:	d01e      	beq.n	8014984 <isATCAError+0x4c>
 8014946:	d80b      	bhi.n	8014960 <isATCAError+0x28>
 8014948:	2b01      	cmp	r3, #1
 801494a:	d019      	beq.n	8014980 <isATCAError+0x48>
 801494c:	4293      	cmp	r3, r2
 801494e:	d00e      	beq.n	801496e <isATCAError+0x36>
            return ATCA_PARSE_ERROR;
 8014950:	32d2      	adds	r2, #210	; 0xd2
        switch (data[1])
 8014952:	2b03      	cmp	r3, #3
 8014954:	d00b      	beq.n	801496e <isATCAError+0x36>
            return ATCA_STATUS_ECC;
 8014956:	3204      	adds	r2, #4
        switch (data[1])
 8014958:	2b05      	cmp	r3, #5
 801495a:	d008      	beq.n	801496e <isATCAError+0x36>
            return ATCA_GEN_FAIL;
 801495c:	22e1      	movs	r2, #225	; 0xe1
 801495e:	e006      	b.n	801496e <isATCAError+0x36>
            return ATCA_EXECUTION_ERROR;
 8014960:	22f4      	movs	r2, #244	; 0xf4
        switch (data[1])
 8014962:	2b0f      	cmp	r3, #15
 8014964:	d003      	beq.n	801496e <isATCAError+0x36>
 8014966:	d804      	bhi.n	8014972 <isATCAError+0x3a>
            return ATCA_HEALTH_TEST_ERROR;
 8014968:	3206      	adds	r2, #6
        switch (data[1])
 801496a:	2b08      	cmp	r3, #8
 801496c:	d1f6      	bne.n	801495c <isATCAError+0x24>
    }
}
 801496e:	0010      	movs	r0, r2
 8014970:	4770      	bx	lr
            return ATCA_WAKE_SUCCESS;
 8014972:	22f3      	movs	r2, #243	; 0xf3
        switch (data[1])
 8014974:	2b11      	cmp	r3, #17
 8014976:	d0fa      	beq.n	801496e <isATCAError+0x36>
            return ATCA_STATUS_CRC;
 8014978:	3a1f      	subs	r2, #31
        switch (data[1])
 801497a:	2bff      	cmp	r3, #255	; 0xff
 801497c:	d0f7      	beq.n	801496e <isATCAError+0x36>
 801497e:	e7ed      	b.n	801495c <isATCAError+0x24>
            return ATCA_CHECKMAC_VERIFY_FAILED;
 8014980:	22d1      	movs	r2, #209	; 0xd1
 8014982:	e7f4      	b.n	801496e <isATCAError+0x36>
            return ATCA_STATUS_SELFTEST_ERROR;
 8014984:	22d7      	movs	r2, #215	; 0xd7
 8014986:	e7f2      	b.n	801496e <isATCAError+0x36>

08014988 <calib_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_execute_command(ATCAPacket* packet, ATCADevice device)
{
 8014988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801498a:	b085      	sub	sp, #20
 801498c:	9001      	str	r0, [sp, #4]
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
 801498e:	6848      	ldr	r0, [r1, #4]
{
 8014990:	000e      	movs	r6, r1
        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
 8014992:	f7ff ff02 	bl	801479a <atwake>
 8014996:	1e04      	subs	r4, r0, #0
 8014998:	d12d      	bne.n	80149f6 <calib_execute_command+0x6e>
        {
            break;
        }

        if (ATCA_I2C_IFACE == device->mIface->mIfaceCFG->iface_type)
 801499a:	6870      	ldr	r0, [r6, #4]
    uint8_t word_address = 0xFF;
 801499c:	21ff      	movs	r1, #255	; 0xff
        if (ATCA_I2C_IFACE == device->mIface->mIfaceCFG->iface_type)
 801499e:	6843      	ldr	r3, [r0, #4]
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d100      	bne.n	80149a8 <calib_execute_command+0x20>
        {
            word_address = 0x03; // insert the Word Address Value, Command token
 80149a6:	39fc      	subs	r1, #252	; 0xfc
        }

        // send the command
        if ((status = atsend(device->mIface, word_address, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
 80149a8:	9b01      	ldr	r3, [sp, #4]
 80149aa:	9a01      	ldr	r2, [sp, #4]
 80149ac:	785b      	ldrb	r3, [r3, #1]
 80149ae:	f7ff fedc 	bl	801476a <atsend>
 80149b2:	1e04      	subs	r4, r0, #0
 80149b4:	d11f      	bne.n	80149f6 <calib_execute_command+0x6e>
        {
            break;
        }

        // Delay for execution time or initial wait before polling
        atca_delay_ms(execution_or_wait_time);
 80149b6:	2001      	movs	r0, #1
 80149b8:	f7fd f990 	bl	8011cdc <hal_delay_ms>
 80149bc:	4b19      	ldr	r3, [pc, #100]	; (8014a24 <calib_execute_command+0x9c>)
 80149be:	9300      	str	r3, [sp, #0]

        do
        {
            memset(packet->data, 0, sizeof(packet->data));
 80149c0:	9b01      	ldr	r3, [sp, #4]
 80149c2:	22c0      	movs	r2, #192	; 0xc0
 80149c4:	1d9d      	adds	r5, r3, #6
 80149c6:	2100      	movs	r1, #0
 80149c8:	0028      	movs	r0, r5
 80149ca:	f000 fe87 	bl	80156dc <memset>
            // receive the response
            rxsize = sizeof(packet->data);
 80149ce:	ab02      	add	r3, sp, #8
 80149d0:	1d9f      	adds	r7, r3, #6
 80149d2:	23c0      	movs	r3, #192	; 0xc0
            if ((status = atreceive(device->mIface, 0, packet->data, &rxsize)) == ATCA_SUCCESS)
 80149d4:	002a      	movs	r2, r5
            rxsize = sizeof(packet->data);
 80149d6:	803b      	strh	r3, [r7, #0]
            if ((status = atreceive(device->mIface, 0, packet->data, &rxsize)) == ATCA_SUCCESS)
 80149d8:	2100      	movs	r1, #0
 80149da:	003b      	movs	r3, r7
 80149dc:	6870      	ldr	r0, [r6, #4]
 80149de:	f7ff fed0 	bl	8014782 <atreceive>
 80149e2:	1e04      	subs	r4, r0, #0
 80149e4:	d011      	beq.n	8014a0a <calib_execute_command+0x82>
                break;
            }

#ifndef ATCA_NO_POLL
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
 80149e6:	2002      	movs	r0, #2
 80149e8:	f7fd f978 	bl	8011cdc <hal_delay_ms>
 80149ec:	9b00      	ldr	r3, [sp, #0]
 80149ee:	3b01      	subs	r3, #1
 80149f0:	9300      	str	r3, [sp, #0]
#endif
        }
        while (max_delay_count-- > 0);
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d1e4      	bne.n	80149c0 <calib_execute_command+0x38>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
 80149f6:	6870      	ldr	r0, [r6, #4]
 80149f8:	f7ff fee3 	bl	80147c2 <atidle>
    return status;
 80149fc:	0020      	movs	r0, r4
 80149fe:	b005      	add	sp, #20
 8014a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
                status = ATCA_RX_NO_RESPONSE;
 8014a02:	4263      	negs	r3, r4
 8014a04:	415c      	adcs	r4, r3
 8014a06:	34e6      	adds	r4, #230	; 0xe6
 8014a08:	e7f5      	b.n	80149f6 <calib_execute_command+0x6e>
        if (rxsize < 4)
 8014a0a:	883c      	ldrh	r4, [r7, #0]
 8014a0c:	2c03      	cmp	r4, #3
 8014a0e:	d9f8      	bls.n	8014a02 <calib_execute_command+0x7a>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
 8014a10:	0028      	movs	r0, r5
 8014a12:	f7ff ff7a 	bl	801490a <atCheckCrc>
 8014a16:	1e04      	subs	r4, r0, #0
 8014a18:	d1ed      	bne.n	80149f6 <calib_execute_command+0x6e>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
 8014a1a:	0028      	movs	r0, r5
 8014a1c:	f7ff ff8c 	bl	8014938 <isATCAError>
 8014a20:	0004      	movs	r4, r0
 8014a22:	e7e8      	b.n	80149f6 <calib_execute_command+0x6e>
 8014a24:	000004e3 	.word	0x000004e3

08014a28 <calib_read_zone>:
 *  \param[in]  len      Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_zone(ATCADevice device, uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
 8014a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a2a:	b0b9      	sub	sp, #228	; 0xe4
 8014a2c:	0007      	movs	r7, r0
 8014a2e:	a840      	add	r0, sp, #256	; 0x100
 8014a30:	7800      	ldrb	r0, [r0, #0]
 8014a32:	000e      	movs	r6, r1
 8014a34:	0011      	movs	r1, r2
 8014a36:	001a      	movs	r2, r3
 8014a38:	ab3e      	add	r3, sp, #248	; 0xf8
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	9003      	str	r0, [sp, #12]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if ((device == NULL) || (data == NULL))
 8014a3e:	2f00      	cmp	r7, #0
 8014a40:	d002      	beq.n	8014a48 <calib_read_zone+0x20>
 8014a42:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d106      	bne.n	8014a56 <calib_read_zone+0x2e>
        {
            status = ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 8014a48:	20e2      	movs	r0, #226	; 0xe2
 8014a4a:	f7ff fdf2 	bl	8014632 <atca_trace>
 8014a4e:	0004      	movs	r4, r0
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
 8014a50:	0020      	movs	r0, r4
 8014a52:	b039      	add	sp, #228	; 0xe4
 8014a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (len != 4 && len != 32)
 8014a56:	9803      	ldr	r0, [sp, #12]
 8014a58:	2804      	cmp	r0, #4
 8014a5a:	d001      	beq.n	8014a60 <calib_read_zone+0x38>
 8014a5c:	2820      	cmp	r0, #32
 8014a5e:	d1f3      	bne.n	8014a48 <calib_read_zone+0x20>
        if ((status = calib_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
 8014a60:	200e      	movs	r0, #14
 8014a62:	ac02      	add	r4, sp, #8
 8014a64:	1900      	adds	r0, r0, r4
 8014a66:	9000      	str	r0, [sp, #0]
 8014a68:	0030      	movs	r0, r6
 8014a6a:	f7ff fec3 	bl	80147f4 <calib_get_addr>
 8014a6e:	1e04      	subs	r4, r0, #0
 8014a70:	d003      	beq.n	8014a7a <calib_read_zone+0x52>
            ATCA_TRACE(status, "calib_read_zone - execution failed");
 8014a72:	0020      	movs	r0, r4
 8014a74:	f7ff fddd 	bl	8014632 <atca_trace>
 8014a78:	e7ea      	b.n	8014a50 <calib_read_zone+0x28>
        if (len == ATCA_BLOCK_SIZE)
 8014a7a:	9b03      	ldr	r3, [sp, #12]
 8014a7c:	2b20      	cmp	r3, #32
 8014a7e:	d101      	bne.n	8014a84 <calib_read_zone+0x5c>
            zone = zone | ATCA_ZONE_READWRITE_32;
 8014a80:	3360      	adds	r3, #96	; 0x60
 8014a82:	431e      	orrs	r6, r3
        packet.param2 = addr;
 8014a84:	ab02      	add	r3, sp, #8
        packet.param1 = zone;
 8014a86:	ad06      	add	r5, sp, #24
        packet.param2 = addr;
 8014a88:	89db      	ldrh	r3, [r3, #14]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
 8014a8a:	0029      	movs	r1, r5
 8014a8c:	6838      	ldr	r0, [r7, #0]
        packet.param1 = zone;
 8014a8e:	70ee      	strb	r6, [r5, #3]
        packet.param2 = addr;
 8014a90:	80ab      	strh	r3, [r5, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
 8014a92:	f7ff ff30 	bl	80148f6 <atRead>
 8014a96:	1e04      	subs	r4, r0, #0
 8014a98:	d1eb      	bne.n	8014a72 <calib_read_zone+0x4a>
        if ((status = atca_execute_command(&packet, device)) != ATCA_SUCCESS)
 8014a9a:	0039      	movs	r1, r7
 8014a9c:	0028      	movs	r0, r5
 8014a9e:	f7ff ff73 	bl	8014988 <calib_execute_command>
 8014aa2:	1e04      	subs	r4, r0, #0
 8014aa4:	d1e5      	bne.n	8014a72 <calib_read_zone+0x4a>
        memcpy(data, &packet.data[1], len);
 8014aa6:	2117      	movs	r1, #23
 8014aa8:	ab02      	add	r3, sp, #8
 8014aaa:	9a03      	ldr	r2, [sp, #12]
 8014aac:	18c9      	adds	r1, r1, r3
 8014aae:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8014ab0:	f000 fe0b 	bl	80156ca <memcpy>
 8014ab4:	e7cc      	b.n	8014a50 <calib_read_zone+0x28>

08014ab6 <calib_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_serial_number(ATCADevice device, uint8_t* serial_number)
{
 8014ab6:	b570      	push	{r4, r5, r6, lr}
 8014ab8:	000c      	movs	r4, r1
 8014aba:	b08c      	sub	sp, #48	; 0x30
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
 8014abc:	2900      	cmp	r1, #0
 8014abe:	d106      	bne.n	8014ace <calib_read_serial_number+0x18>
    {
        return ATCA_TRACE(ATCA_BAD_PARAM, "NULL pointer received");
 8014ac0:	20e2      	movs	r0, #226	; 0xe2
 8014ac2:	f7ff fdb6 	bl	8014632 <atca_trace>
 8014ac6:	0005      	movs	r5, r0
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
 8014ac8:	0028      	movs	r0, r5
 8014aca:	b00c      	add	sp, #48	; 0x30
 8014acc:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = calib_read_zone(device, ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
 8014ace:	2100      	movs	r1, #0
 8014ad0:	2320      	movs	r3, #32
 8014ad2:	ae04      	add	r6, sp, #16
 8014ad4:	9302      	str	r3, [sp, #8]
 8014ad6:	9601      	str	r6, [sp, #4]
 8014ad8:	9100      	str	r1, [sp, #0]
 8014ada:	000b      	movs	r3, r1
 8014adc:	000a      	movs	r2, r1
 8014ade:	f7ff ffa3 	bl	8014a28 <calib_read_zone>
 8014ae2:	1e05      	subs	r5, r0, #0
 8014ae4:	d002      	beq.n	8014aec <calib_read_serial_number+0x36>
            ATCA_TRACE(status, "calib_read_zone - failed");
 8014ae6:	f7ff fda4 	bl	8014632 <atca_trace>
            break;
 8014aea:	e7ed      	b.n	8014ac8 <calib_read_serial_number+0x12>
        memcpy(&serial_number[0], &read_buf[0], 4);
 8014aec:	0031      	movs	r1, r6
 8014aee:	2204      	movs	r2, #4
 8014af0:	0020      	movs	r0, r4
 8014af2:	f000 fdea 	bl	80156ca <memcpy>
        memcpy(&serial_number[4], &read_buf[8], 5);
 8014af6:	1d20      	adds	r0, r4, #4
 8014af8:	2205      	movs	r2, #5
 8014afa:	a906      	add	r1, sp, #24
 8014afc:	f000 fde5 	bl	80156ca <memcpy>
 8014b00:	e7e2      	b.n	8014ac8 <calib_read_serial_number+0x12>

08014b02 <calib_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS calib_read_bytes_zone(ATCADevice device, uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
 8014b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b04:	001e      	movs	r6, r3
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
 8014b06:	2300      	movs	r3, #0
{
 8014b08:	b095      	sub	sp, #84	; 0x54
 8014b0a:	9009      	str	r0, [sp, #36]	; 0x24
 8014b0c:	9107      	str	r1, [sp, #28]
 8014b0e:	9208      	str	r2, [sp, #32]
    size_t zone_size = 0;
 8014b10:	930b      	str	r3, [sp, #44]	; 0x2c
    uint8_t read_size = ATCA_BLOCK_SIZE;
    size_t read_buf_idx = 0;
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
 8014b12:	2902      	cmp	r1, #2
 8014b14:	d904      	bls.n	8014b20 <calib_read_bytes_zone+0x1e>
            ATCA_TRACE(status, "calib_get_zone_size - failed");
            break;
        }
        if (offset + length > zone_size)
        {
            return ATCA_TRACE(ATCA_BAD_PARAM, "Invalid parameter received"); // Can't read past the end of a zone
 8014b16:	20e2      	movs	r0, #226	; 0xe2
 8014b18:	f7ff fd8b 	bl	8014632 <atca_trace>
 8014b1c:	0005      	movs	r5, r0
 8014b1e:	e009      	b.n	8014b34 <calib_read_bytes_zone+0x32>
    if (zone == ATCA_ZONE_DATA && slot > 15)
 8014b20:	9b07      	ldr	r3, [sp, #28]
 8014b22:	2b02      	cmp	r3, #2
 8014b24:	d102      	bne.n	8014b2c <calib_read_bytes_zone+0x2a>
 8014b26:	9b08      	ldr	r3, [sp, #32]
 8014b28:	2b0f      	cmp	r3, #15
 8014b2a:	d8f4      	bhi.n	8014b16 <calib_read_bytes_zone+0x14>
    if (length == 0)
 8014b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d103      	bne.n	8014b3a <calib_read_bytes_zone+0x38>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
 8014b32:	2500      	movs	r5, #0
        }
    }
    while (false);

    return status;
}
 8014b34:	0028      	movs	r0, r5
 8014b36:	b015      	add	sp, #84	; 0x54
 8014b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (data == NULL)
 8014b3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d0ea      	beq.n	8014b16 <calib_read_bytes_zone+0x14>
        if (ATCA_SUCCESS != (status = calib_get_zone_size(device, zone, slot, &zone_size)))
 8014b40:	ab0b      	add	r3, sp, #44	; 0x2c
 8014b42:	9a08      	ldr	r2, [sp, #32]
 8014b44:	9907      	ldr	r1, [sp, #28]
 8014b46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b48:	f7ff fe6e 	bl	8014828 <calib_get_zone_size>
 8014b4c:	0005      	movs	r5, r0
 8014b4e:	1e04      	subs	r4, r0, #0
 8014b50:	d003      	beq.n	8014b5a <calib_read_bytes_zone+0x58>
                ATCA_TRACE(status, "calib_read_zone - falied");
 8014b52:	0028      	movs	r0, r5
 8014b54:	f7ff fd6d 	bl	8014632 <atca_trace>
                break;
 8014b58:	e7ec      	b.n	8014b34 <calib_read_bytes_zone+0x32>
        if (offset + length > zone_size)
 8014b5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b5e:	199b      	adds	r3, r3, r6
 8014b60:	4293      	cmp	r3, r2
 8014b62:	d8d8      	bhi.n	8014b16 <calib_read_bytes_zone+0x14>
        cur_block = offset / ATCA_BLOCK_SIZE;
 8014b64:	0973      	lsrs	r3, r6, #5
 8014b66:	9305      	str	r3, [sp, #20]
    uint8_t read_size = ATCA_BLOCK_SIZE;
 8014b68:	2320      	movs	r3, #32
    size_t data_idx = 0;
 8014b6a:	0007      	movs	r7, r0
    uint8_t read_size = ATCA_BLOCK_SIZE;
 8014b6c:	9306      	str	r3, [sp, #24]
        while (data_idx < length)
 8014b6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b70:	429f      	cmp	r7, r3
 8014b72:	d2de      	bcs.n	8014b32 <calib_read_bytes_zone+0x30>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
 8014b74:	9b06      	ldr	r3, [sp, #24]
 8014b76:	2b20      	cmp	r3, #32
 8014b78:	d10b      	bne.n	8014b92 <calib_read_bytes_zone+0x90>
 8014b7a:	9b05      	ldr	r3, [sp, #20]
 8014b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b7e:	015b      	lsls	r3, r3, #5
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	2b1f      	cmp	r3, #31
 8014b84:	d805      	bhi.n	8014b92 <calib_read_bytes_zone+0x90>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
 8014b86:	2307      	movs	r3, #7
 8014b88:	19bc      	adds	r4, r7, r6
 8014b8a:	08a4      	lsrs	r4, r4, #2
 8014b8c:	401c      	ands	r4, r3
                read_size = ATCA_WORD_SIZE;
 8014b8e:	3b03      	subs	r3, #3
 8014b90:	9306      	str	r3, [sp, #24]
            if (ATCA_SUCCESS != (status = calib_read_zone(device, zone, slot, (uint8_t)cur_block, (uint8_t)cur_offset, read_buf, read_size)))
 8014b92:	466b      	mov	r3, sp
 8014b94:	9a06      	ldr	r2, [sp, #24]
 8014b96:	7d1b      	ldrb	r3, [r3, #20]
 8014b98:	9202      	str	r2, [sp, #8]
 8014b9a:	aa0c      	add	r2, sp, #48	; 0x30
 8014b9c:	9201      	str	r2, [sp, #4]
 8014b9e:	b2e2      	uxtb	r2, r4
 8014ba0:	9200      	str	r2, [sp, #0]
 8014ba2:	9907      	ldr	r1, [sp, #28]
 8014ba4:	9a08      	ldr	r2, [sp, #32]
 8014ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ba8:	f7ff ff3e 	bl	8014a28 <calib_read_zone>
 8014bac:	0005      	movs	r5, r0
 8014bae:	1e01      	subs	r1, r0, #0
 8014bb0:	d1cf      	bne.n	8014b52 <calib_read_bytes_zone+0x50>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
 8014bb2:	9b05      	ldr	r3, [sp, #20]
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	191b      	adds	r3, r3, r4
 8014bb8:	009b      	lsls	r3, r3, #2
            if (read_offset < offset)
 8014bba:	429e      	cmp	r6, r3
 8014bbc:	d900      	bls.n	8014bc0 <calib_read_bytes_zone+0xbe>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
 8014bbe:	1af1      	subs	r1, r6, r3
            if (length - data_idx < read_size - read_buf_idx)
 8014bc0:	9b06      	ldr	r3, [sp, #24]
 8014bc2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014bc4:	1a5b      	subs	r3, r3, r1
 8014bc6:	1bd5      	subs	r5, r2, r7
 8014bc8:	429d      	cmp	r5, r3
 8014bca:	d900      	bls.n	8014bce <calib_read_bytes_zone+0xcc>
 8014bcc:	001d      	movs	r5, r3
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
 8014bce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014bd0:	002a      	movs	r2, r5
 8014bd2:	19d8      	adds	r0, r3, r7
 8014bd4:	ab0c      	add	r3, sp, #48	; 0x30
 8014bd6:	1859      	adds	r1, r3, r1
 8014bd8:	f000 fd77 	bl	80156ca <memcpy>
            if (read_size == ATCA_BLOCK_SIZE)
 8014bdc:	9b06      	ldr	r3, [sp, #24]
            data_idx += copy_length;
 8014bde:	197f      	adds	r7, r7, r5
            if (read_size == ATCA_BLOCK_SIZE)
 8014be0:	2b20      	cmp	r3, #32
 8014be2:	d103      	bne.n	8014bec <calib_read_bytes_zone+0xea>
                cur_block += 1;
 8014be4:	9b05      	ldr	r3, [sp, #20]
 8014be6:	3301      	adds	r3, #1
 8014be8:	9305      	str	r3, [sp, #20]
 8014bea:	e7c0      	b.n	8014b6e <calib_read_bytes_zone+0x6c>
                cur_offset += 1;
 8014bec:	3401      	adds	r4, #1
 8014bee:	e7be      	b.n	8014b6e <calib_read_bytes_zone+0x6c>

08014bf0 <hal_iface_init>:
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t **hal)
{
    ATCA_STATUS status = ATCA_BAD_PARAM;
 8014bf0:	23e2      	movs	r3, #226	; 0xe2

    if (cfg && hal)
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	d009      	beq.n	8014c0a <hal_iface_init+0x1a>
 8014bf6:	2900      	cmp	r1, #0
 8014bf8:	d007      	beq.n	8014c0a <hal_iface_init+0x1a>
    {
        status = hal_iface_get_registered(cfg->iface_type, hal);
 8014bfa:	7802      	ldrb	r2, [r0, #0]
    if ((ATCA_UNKNOWN_IFACE > iface_type) && hal)
 8014bfc:	2a06      	cmp	r2, #6
 8014bfe:	d804      	bhi.n	8014c0a <hal_iface_init+0x1a>
        *hal = atca_registered_hal_list[iface_type];
 8014c00:	4b03      	ldr	r3, [pc, #12]	; (8014c10 <hal_iface_init+0x20>)
 8014c02:	0092      	lsls	r2, r2, #2
 8014c04:	58d3      	ldr	r3, [r2, r3]
 8014c06:	600b      	str	r3, [r1, #0]
        status = ATCA_SUCCESS;
 8014c08:	2300      	movs	r3, #0
        }
#endif
    }

    return status;
}
 8014c0a:	0018      	movs	r0, r3
 8014c0c:	4770      	bx	lr
 8014c0e:	46c0      	nop			; (mov r8, r8)
 8014c10:	2000059c 	.word	0x2000059c

08014c14 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
 8014c14:	0003      	movs	r3, r0
 8014c16:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_BAD_PARAM;
 8014c18:	20e2      	movs	r0, #226	; 0xe2
    if ((ATCA_UNKNOWN_IFACE > iface_type) && hal)
 8014c1a:	2b06      	cmp	r3, #6
 8014c1c:	d807      	bhi.n	8014c2e <hal_iface_release+0x1a>

    status = hal_iface_get_registered(iface_type, &hal);

    if (ATCA_SUCCESS == status)
    {
        status = hal->halrelease ? hal->halrelease(hal_data) : ATCA_BAD_PARAM;
 8014c1e:	4a04      	ldr	r2, [pc, #16]	; (8014c30 <hal_iface_release+0x1c>)
        *hal = atca_registered_hal_list[iface_type];
 8014c20:	009b      	lsls	r3, r3, #2
        status = hal->halrelease ? hal->halrelease(hal_data) : ATCA_BAD_PARAM;
 8014c22:	589b      	ldr	r3, [r3, r2]
 8014c24:	69db      	ldr	r3, [r3, #28]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d001      	beq.n	8014c2e <hal_iface_release+0x1a>
 8014c2a:	0008      	movs	r0, r1
 8014c2c:	4798      	blx	r3
    }

    return status;
}
 8014c2e:	bd10      	pop	{r4, pc}
 8014c30:	2000059c 	.word	0x2000059c

08014c34 <_ZN6SX126xC1E7PinNameS0_S0_S0_>:
/************************************************************************************************
 *                                 Public  Methods                                              *
 ************************************************************************************************/
const uint8_t SX126x::LoraSyncword[2] = {0x34, 0x44};

SX126x::SX126x(PinName Busy, PinName nss, PinName reset, PinName Interrupt):
 8014c34:	b570      	push	{r4, r5, r6, lr}
 8014c36:	0004      	movs	r4, r0
 8014c38:	0008      	movs	r0, r1
  pinBusy(Busy),
  pinReset(reset),
  pinCS(nss) {
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014c3a:	4d07      	ldr	r5, [pc, #28]	; (8014c58 <_ZN6SX126xC1E7PinNameS0_S0_S0_+0x24>)
SX126x::SX126x(PinName Busy, PinName nss, PinName reset, PinName Interrupt):
 8014c3c:	0011      	movs	r1, r2
  pinCS(nss) {
 8014c3e:	6060      	str	r0, [r4, #4]
 8014c40:	60a3      	str	r3, [r4, #8]
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014c42:	0028      	movs	r0, r5
  pinCS(nss) {
 8014c44:	60e2      	str	r2, [r4, #12]
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014c46:	2201      	movs	r2, #1
 8014c48:	f7f9 faa4 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
  mcu.Init_Irq(Interrupt) ;
 8014c4c:	0028      	movs	r0, r5
 8014c4e:	9904      	ldr	r1, [sp, #16]
 8014c50:	f7f9 fa0e 	bl	800e070 <_ZN12McuSTM32L0718Init_IrqE7PinName>
}
 8014c54:	0020      	movs	r0, r4
 8014c56:	bd70      	pop	{r4, r5, r6, pc}
 8014c58:	20001988 	.word	0x20001988

08014c5c <_ZN6SX126x5ResetEv>:
IrqFlags_t SX126x::GetIrqFlagsFsk(void) {
  //! \warning: FSK is under still test and not officialy supported on this driver
  return this->GetIrqFlagsLora();
}

void SX126x::Reset(void) {
 8014c5c:	b570      	push	{r4, r5, r6, lr}
 8014c5e:	0004      	movs	r4, r0
  // Reset radio
  mcu.SetValueDigitalOutPin(pinReset, 0);
 8014c60:	4d09      	ldr	r5, [pc, #36]	; (8014c88 <_ZN6SX126x5ResetEv+0x2c>)
 8014c62:	6881      	ldr	r1, [r0, #8]
 8014c64:	2200      	movs	r2, #0
 8014c66:	0028      	movs	r0, r5
 8014c68:	f7f9 fa94 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
    HAL_Delay(delayms);
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	f7f6 f927 	bl	800aec0 <HAL_Delay>
  //wait_us( 100 );
  mcu.mwait_ms(1);
  mcu.SetValueDigitalOutPin(pinReset, 1);
 8014c72:	0028      	movs	r0, r5
 8014c74:	2201      	movs	r2, #1
 8014c76:	68a1      	ldr	r1, [r4, #8]
 8014c78:	f7f9 fa8c 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
 8014c7c:	2001      	movs	r0, #1
 8014c7e:	f7f6 f91f 	bl	800aec0 <HAL_Delay>
  //wait_us( 200 );
  mcu.mwait_ms(1);   // XXX: Without increasing to 3ms, no LoRa message will be actually sent.
  radioMode = AWAKE;
 8014c82:	2301      	movs	r3, #1
 8014c84:	7023      	strb	r3, [r4, #0]
}
 8014c86:	bd70      	pop	{r4, r5, r6, pc}
 8014c88:	20001988 	.word	0x20001988

08014c8c <_ZN6SX126x10waitOnBusyEv>:
  uint8_t temp;
  temp = (state == true) ? 0x01 : 0x00;
  WriteCommand(STOP_TIMER_ON_PREAMBLE, &temp, 1);
}

void SX126x::waitOnBusy(void) {
 8014c8c:	b510      	push	{r4, lr}
 8014c8e:	0004      	movs	r4, r0
  while(mcu.GetValueDigitalInPin(pinBusy)  == 1) { };
 8014c90:	6861      	ldr	r1, [r4, #4]
 8014c92:	4803      	ldr	r0, [pc, #12]	; (8014ca0 <_ZN6SX126x10waitOnBusyEv+0x14>)
 8014c94:	f7f9 fa90 	bl	800e1b8 <_ZN12McuSTM32L07120GetValueDigitalInPinE7PinName>
 8014c98:	2801      	cmp	r0, #1
 8014c9a:	d0f9      	beq.n	8014c90 <_ZN6SX126x10waitOnBusyEv+0x4>
}
 8014c9c:	bd10      	pop	{r4, pc}
 8014c9e:	46c0      	nop			; (mov r8, r8)
 8014ca0:	20001988 	.word	0x20001988

08014ca4 <_ZN6SX126x16CheckDeviceReadyEv>:
  if(radioMode != SLEEP) {
 8014ca4:	7802      	ldrb	r2, [r0, #0]
void SX126x::CheckDeviceReady(void) {
 8014ca6:	b570      	push	{r4, r5, r6, lr}
 8014ca8:	0004      	movs	r4, r0
  if(radioMode != SLEEP) {
 8014caa:	2a00      	cmp	r2, #0
 8014cac:	d002      	beq.n	8014cb4 <_ZN6SX126x16CheckDeviceReadyEv+0x10>
    waitOnBusy();
 8014cae:	f7ff ffed 	bl	8014c8c <_ZN6SX126x10waitOnBusyEv>
}
 8014cb2:	bd70      	pop	{r4, r5, r6, pc}
    mcu.SetValueDigitalOutPin(pinCS, 0);
 8014cb4:	4d07      	ldr	r5, [pc, #28]	; (8014cd4 <_ZN6SX126x16CheckDeviceReadyEv+0x30>)
 8014cb6:	68c1      	ldr	r1, [r0, #12]
 8014cb8:	0028      	movs	r0, r5
 8014cba:	f7f9 fa6b 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
    waitOnBusy();
 8014cbe:	0020      	movs	r0, r4
 8014cc0:	f7ff ffe4 	bl	8014c8c <_ZN6SX126x10waitOnBusyEv>
    mcu.SetValueDigitalOutPin(pinCS, 1);
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	68e1      	ldr	r1, [r4, #12]
 8014cc8:	0028      	movs	r0, r5
 8014cca:	f7f9 fa63 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
    radioMode = AWAKE;
 8014cce:	2301      	movs	r3, #1
 8014cd0:	7023      	strb	r3, [r4, #0]
}
 8014cd2:	e7ee      	b.n	8014cb2 <_ZN6SX126x16CheckDeviceReadyEv+0xe>
 8014cd4:	20001988 	.word	0x20001988

08014cd8 <_ZN6SX126x10ReadBufferEhPhh>:
void SX126x::ReadBuffer(uint8_t offset, uint8_t *payload, uint8_t payloadSize) {
 8014cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cda:	0006      	movs	r6, r0
 8014cdc:	001f      	movs	r7, r3
 8014cde:	0014      	movs	r4, r2
 8014ce0:	9101      	str	r1, [sp, #4]
  waitOnBusy();
 8014ce2:	f7ff ffd3 	bl	8014c8c <_ZN6SX126x10waitOnBusyEv>
  mcu.SetValueDigitalOutPin(pinCS, 0);
 8014ce6:	4d11      	ldr	r5, [pc, #68]	; (8014d2c <_ZN6SX126x10ReadBufferEhPhh+0x54>)
 8014ce8:	2200      	movs	r2, #0
 8014cea:	68f1      	ldr	r1, [r6, #12]
 8014cec:	0028      	movs	r0, r5
 8014cee:	f7f9 fa51 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
  mcu.SpiWrite(READ_BUFFER);
 8014cf2:	211e      	movs	r1, #30
 8014cf4:	0028      	movs	r0, r5
 8014cf6:	f7f9 f9bd 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
  mcu.SpiWrite(offset);
 8014cfa:	9901      	ldr	r1, [sp, #4]
 8014cfc:	0028      	movs	r0, r5
 8014cfe:	f7f9 f9b9 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
  mcu.SpiWrite(0);
 8014d02:	2100      	movs	r1, #0
 8014d04:	0028      	movs	r0, r5
 8014d06:	f7f9 f9b5 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014d0a:	19e7      	adds	r7, r4, r7
  for(uint8_t i = 0; i < payloadSize; i++)
 8014d0c:	42bc      	cmp	r4, r7
 8014d0e:	d006      	beq.n	8014d1e <_ZN6SX126x10ReadBufferEhPhh+0x46>
    payload[i] = mcu.SpiWrite(0);
 8014d10:	2100      	movs	r1, #0
 8014d12:	0028      	movs	r0, r5
 8014d14:	f7f9 f9ae 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014d18:	7020      	strb	r0, [r4, #0]
 8014d1a:	3401      	adds	r4, #1
  for(uint8_t i = 0; i < payloadSize; i++)
 8014d1c:	e7f6      	b.n	8014d0c <_ZN6SX126x10ReadBufferEhPhh+0x34>
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014d1e:	68f1      	ldr	r1, [r6, #12]
 8014d20:	0028      	movs	r0, r5
 8014d22:	2201      	movs	r2, #1
 8014d24:	f7f9 fa36 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
}
 8014d28:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014d2a:	46c0      	nop			; (mov r8, r8)
 8014d2c:	20001988 	.word	0x20001988

08014d30 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht>:
uint8_t SX126x::ReadCommand(OpCode_t command, uint8_t *buffer, uint16_t size) {
 8014d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d32:	0006      	movs	r6, r0
 8014d34:	001f      	movs	r7, r3
 8014d36:	0014      	movs	r4, r2
 8014d38:	9101      	str	r1, [sp, #4]
  waitOnBusy();
 8014d3a:	f7ff ffa7 	bl	8014c8c <_ZN6SX126x10waitOnBusyEv>
  mcu.SetValueDigitalOutPin(pinCS, 0);
 8014d3e:	4d10      	ldr	r5, [pc, #64]	; (8014d80 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht+0x50>)
 8014d40:	2200      	movs	r2, #0
 8014d42:	68f1      	ldr	r1, [r6, #12]
 8014d44:	0028      	movs	r0, r5
 8014d46:	f7f9 fa25 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
  mcu.SpiWrite((uint8_t) command);
 8014d4a:	9901      	ldr	r1, [sp, #4]
 8014d4c:	0028      	movs	r0, r5
 8014d4e:	f7f9 f991 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
  status = mcu.SpiWrite(0x00);
 8014d52:	2100      	movs	r1, #0
 8014d54:	0028      	movs	r0, r5
 8014d56:	f7f9 f98d 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014d5a:	19e7      	adds	r7, r4, r7
 8014d5c:	9001      	str	r0, [sp, #4]
  for(uint16_t i = 0; i < size; i++) {
 8014d5e:	42bc      	cmp	r4, r7
 8014d60:	d006      	beq.n	8014d70 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht+0x40>
    buffer[i] = mcu.SpiWrite(0x00);
 8014d62:	2100      	movs	r1, #0
 8014d64:	0028      	movs	r0, r5
 8014d66:	f7f9 f985 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014d6a:	7020      	strb	r0, [r4, #0]
 8014d6c:	3401      	adds	r4, #1
  for(uint16_t i = 0; i < size; i++) {
 8014d6e:	e7f6      	b.n	8014d5e <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht+0x2e>
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014d70:	0028      	movs	r0, r5
 8014d72:	68f1      	ldr	r1, [r6, #12]
 8014d74:	2201      	movs	r2, #1
 8014d76:	f7f9 fa0d 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
}
 8014d7a:	9801      	ldr	r0, [sp, #4]
 8014d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014d7e:	46c0      	nop			; (mov r8, r8)
 8014d80:	20001988 	.word	0x20001988

08014d84 <_ZN6SX126x15GetIrqFlagsLoraEv>:
IrqFlags_t SX126x::GetIrqFlagsLora(void) {
 8014d84:	b513      	push	{r0, r1, r4, lr}
  ReadCommand(GET_IRQ_STATUS, irqStatus, 2);
 8014d86:	ac01      	add	r4, sp, #4
 8014d88:	2302      	movs	r3, #2
 8014d8a:	0022      	movs	r2, r4
 8014d8c:	2112      	movs	r1, #18
 8014d8e:	f7ff ffcf 	bl	8014d30 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht>
  if((irqStatus[0] & (IRQ_RX_TX_TIMEOUT >> 8)) != 0) {
 8014d92:	2202      	movs	r2, #2
 8014d94:	7820      	ldrb	r0, [r4, #0]
 8014d96:	4010      	ands	r0, r2
    irqFlags = (IrqFlags_t)(irqFlags | RXTIMEOUT_IRQ_FLAG);
 8014d98:	1e43      	subs	r3, r0, #1
 8014d9a:	4198      	sbcs	r0, r3
  if((irqStatus[1] & IRQ_RX_DONE) != 0) {
 8014d9c:	7863      	ldrb	r3, [r4, #1]
    irqFlags = (IrqFlags_t)(irqFlags | RXTIMEOUT_IRQ_FLAG);
 8014d9e:	01c0      	lsls	r0, r0, #7
  if((irqStatus[1] & IRQ_RX_DONE) != 0) {
 8014da0:	4213      	tst	r3, r2
 8014da2:	d001      	beq.n	8014da8 <_ZN6SX126x15GetIrqFlagsLoraEv+0x24>
    irqFlags = (IrqFlags_t)(irqFlags | RECEIVE_PACKET_IRQ_FLAG);
 8014da4:	323e      	adds	r2, #62	; 0x3e
 8014da6:	4310      	orrs	r0, r2
  if((irqStatus[1] & IRQ_TX_DONE) != 0) {
 8014da8:	07da      	lsls	r2, r3, #31
 8014daa:	d501      	bpl.n	8014db0 <_ZN6SX126x15GetIrqFlagsLoraEv+0x2c>
    irqFlags = (IrqFlags_t)(irqFlags | SENT_PACKET_IRQ_FLAG);
 8014dac:	2220      	movs	r2, #32
 8014dae:	4310      	orrs	r0, r2
  if(((irqStatus[1] & IRQ_HEADER_ERROR) != 0) ||
 8014db0:	2260      	movs	r2, #96	; 0x60
 8014db2:	4213      	tst	r3, r2
 8014db4:	d000      	beq.n	8014db8 <_ZN6SX126x15GetIrqFlagsLoraEv+0x34>
    irqFlags = (IrqFlags_t)(irqFlags | BAD_PACKET_IRQ_FLAG);
 8014db6:	4310      	orrs	r0, r2
}
 8014db8:	bd16      	pop	{r1, r2, r4, pc}

08014dba <_ZN6SX126x14GetIrqFlagsFskEv>:
IrqFlags_t SX126x::GetIrqFlagsFsk(void) {
 8014dba:	b510      	push	{r4, lr}
  return this->GetIrqFlagsLora();
 8014dbc:	f7ff ffe2 	bl	8014d84 <_ZN6SX126x15GetIrqFlagsLoraEv>
}
 8014dc0:	bd10      	pop	{r4, pc}

08014dc2 <_ZN6SX126x19GetPacketStatusLoraEPsS0_S0_>:
void SX126x::GetPacketStatusLora(int16_t *pktRssi, int16_t *snr, int16_t *signalRssi) {
 8014dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dc4:	000f      	movs	r7, r1
  ReadCommand(GET_PACKET_STATUS, pktStatus, 3);
 8014dc6:	ac01      	add	r4, sp, #4
void SX126x::GetPacketStatusLora(int16_t *pktRssi, int16_t *snr, int16_t *signalRssi) {
 8014dc8:	0015      	movs	r5, r2
 8014dca:	001e      	movs	r6, r3
  ReadCommand(GET_PACKET_STATUS, pktStatus, 3);
 8014dcc:	0022      	movs	r2, r4
 8014dce:	2303      	movs	r3, #3
 8014dd0:	2114      	movs	r1, #20
 8014dd2:	f7ff ffad 	bl	8014d30 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht>
  *pktRssi = - (int)pktStatus[0] / 2;
 8014dd6:	7823      	ldrb	r3, [r4, #0]
 8014dd8:	105b      	asrs	r3, r3, #1
 8014dda:	425b      	negs	r3, r3
 8014ddc:	803b      	strh	r3, [r7, #0]
  (pktStatus[1] < 128) ? (*snr = (int)pktStatus[1] / 4) : (*snr = (((int)pktStatus[1] - 256) / 4));
 8014dde:	7863      	ldrb	r3, [r4, #1]
 8014de0:	b25a      	sxtb	r2, r3
 8014de2:	2a00      	cmp	r2, #0
 8014de4:	db06      	blt.n	8014df4 <_ZN6SX126x19GetPacketStatusLoraEPsS0_S0_+0x32>
 8014de6:	089b      	lsrs	r3, r3, #2
 8014de8:	802b      	strh	r3, [r5, #0]
  *signalRssi = -(int)pktStatus[2] / 2;
 8014dea:	78a3      	ldrb	r3, [r4, #2]
 8014dec:	105b      	asrs	r3, r3, #1
 8014dee:	425b      	negs	r3, r3
 8014df0:	8033      	strh	r3, [r6, #0]
}
 8014df2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  (pktStatus[1] < 128) ? (*snr = (int)pktStatus[1] / 4) : (*snr = (((int)pktStatus[1] - 256) / 4));
 8014df4:	3bfd      	subs	r3, #253	; 0xfd
 8014df6:	109b      	asrs	r3, r3, #2
 8014df8:	e7f6      	b.n	8014de8 <_ZN6SX126x19GetPacketStatusLoraEPsS0_S0_+0x26>

08014dfa <_ZN6SX126x17GetRxBufferStatusEPhS0_>:
void SX126x::GetRxBufferStatus(uint8_t *payloadSize, uint8_t *rxStartBufferPointer) {
 8014dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014dfc:	000e      	movs	r6, r1
 8014dfe:	0015      	movs	r5, r2
  ReadCommand(GET_RX_BUFFER_STATUS, status, 2);
 8014e00:	ac01      	add	r4, sp, #4
 8014e02:	2302      	movs	r3, #2
 8014e04:	0022      	movs	r2, r4
 8014e06:	2113      	movs	r1, #19
 8014e08:	f7ff ff92 	bl	8014d30 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht>
  *payloadSize = status[0];
 8014e0c:	7823      	ldrb	r3, [r4, #0]
 8014e0e:	7033      	strb	r3, [r6, #0]
  *rxStartBufferPointer = status[1];
 8014e10:	7863      	ldrb	r3, [r4, #1]
 8014e12:	702b      	strb	r3, [r5, #0]
}
 8014e14:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08014e16 <_ZN6SX126x16FetchPayloadLoraEPhS0_PsS1_>:
) {
 8014e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e18:	0004      	movs	r4, r0
 8014e1a:	000e      	movs	r6, r1
  uint8_t offset = 0;
 8014e1c:	2700      	movs	r7, #0
) {
 8014e1e:	b085      	sub	sp, #20
 8014e20:	9301      	str	r3, [sp, #4]
  uint8_t offset = 0;
 8014e22:	ab02      	add	r3, sp, #8
 8014e24:	1ddd      	adds	r5, r3, #7
) {
 8014e26:	9200      	str	r2, [sp, #0]
  GetRxBufferStatus(payloadSize, &offset);
 8014e28:	002a      	movs	r2, r5
  uint8_t offset = 0;
 8014e2a:	71df      	strb	r7, [r3, #7]
  GetRxBufferStatus(payloadSize, &offset);
 8014e2c:	f7ff ffe5 	bl	8014dfa <_ZN6SX126x17GetRxBufferStatusEPhS0_>
  ReadBuffer(offset, payload, *payloadSize);
 8014e30:	7833      	ldrb	r3, [r6, #0]
 8014e32:	7829      	ldrb	r1, [r5, #0]
 8014e34:	9a00      	ldr	r2, [sp, #0]
 8014e36:	0020      	movs	r0, r4
 8014e38:	f7ff ff4e 	bl	8014cd8 <_ZN6SX126x10ReadBufferEhPhh>
  GetPacketStatusLora(NULL, snr, signalRssi);
 8014e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e3e:	9a01      	ldr	r2, [sp, #4]
 8014e40:	0039      	movs	r1, r7
 8014e42:	0020      	movs	r0, r4
 8014e44:	f7ff ffbd 	bl	8014dc2 <_ZN6SX126x19GetPacketStatusLoraEPsS0_S0_>
}
 8014e48:	b005      	add	sp, #20
 8014e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e4c <_ZN6SX126x15FetchPayloadFskEPhS0_PsS1_>:
) {
 8014e4c:	b513      	push	{r0, r1, r4, lr}
  this->FetchPayloadLora(payloadSize, payload, snr, signalRssi);
 8014e4e:	9c04      	ldr	r4, [sp, #16]
 8014e50:	9400      	str	r4, [sp, #0]
 8014e52:	f7ff ffe0 	bl	8014e16 <_ZN6SX126x16FetchPayloadLoraEPhS0_PsS1_>
}
 8014e56:	bd13      	pop	{r0, r1, r4, pc}

08014e58 <_ZN6SX126x9GetErrorsEv>:
  buf[0] = 0x00;
 8014e58:	2300      	movs	r3, #0
void SX126x::GetErrors() {
 8014e5a:	b507      	push	{r0, r1, r2, lr}
  buf[0] = 0x00;
 8014e5c:	aa01      	add	r2, sp, #4
 8014e5e:	8013      	strh	r3, [r2, #0]
  ReadCommand(GET_DEVICE_ERRORS, buf, 2);
 8014e60:	2117      	movs	r1, #23
 8014e62:	3302      	adds	r3, #2
 8014e64:	f7ff ff64 	bl	8014d30 <_ZN6SX126x11ReadCommandENS_8OpCode_tEPht>
}
 8014e68:	bd07      	pop	{r0, r1, r2, pc}
	...

08014e6c <_ZN6SX126x11WriteBufferEhPhh>:

void SX126x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8014e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e6e:	0006      	movs	r6, r0
 8014e70:	001f      	movs	r7, r3
 8014e72:	0014      	movs	r4, r2
 8014e74:	9101      	str	r1, [sp, #4]
  // wait on low busy
  CheckDeviceReady();
 8014e76:	f7ff ff15 	bl	8014ca4 <_ZN6SX126x16CheckDeviceReadyEv>

  // Write buffers
  mcu.SetValueDigitalOutPin(pinCS, 0);
 8014e7a:	4d0e      	ldr	r5, [pc, #56]	; (8014eb4 <_ZN6SX126x11WriteBufferEhPhh+0x48>)
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	68f1      	ldr	r1, [r6, #12]
 8014e80:	0028      	movs	r0, r5
 8014e82:	f7f9 f987 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
  mcu.SpiWrite(WRITE_BUFFER);
 8014e86:	210e      	movs	r1, #14
 8014e88:	0028      	movs	r0, r5
 8014e8a:	f7f9 f8f3 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
  mcu.SpiWrite(offset);
 8014e8e:	9901      	ldr	r1, [sp, #4]
 8014e90:	0028      	movs	r0, r5
 8014e92:	f7f9 f8ef 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014e96:	19e7      	adds	r7, r4, r7
  for(uint16_t i = 0; i < size; i++) {
 8014e98:	42bc      	cmp	r4, r7
 8014e9a:	d005      	beq.n	8014ea8 <_ZN6SX126x11WriteBufferEhPhh+0x3c>
    mcu.SpiWrite(buffer[i]);
 8014e9c:	7821      	ldrb	r1, [r4, #0]
 8014e9e:	0028      	movs	r0, r5
 8014ea0:	f7f9 f8e8 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014ea4:	3401      	adds	r4, #1
  for(uint16_t i = 0; i < size; i++) {
 8014ea6:	e7f7      	b.n	8014e98 <_ZN6SX126x11WriteBufferEhPhh+0x2c>
  }
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014ea8:	68f1      	ldr	r1, [r6, #12]
 8014eaa:	0028      	movs	r0, r5
 8014eac:	2201      	movs	r2, #1
 8014eae:	f7f9 f971 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
}
 8014eb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014eb4:	20001988 	.word	0x20001988

08014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>:


void SX126x::WriteCommand(OpCode_t opCode, uint8_t *buffer, uint16_t size) {
 8014eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014eba:	0006      	movs	r6, r0
 8014ebc:	001f      	movs	r7, r3
 8014ebe:	0014      	movs	r4, r2
 8014ec0:	9101      	str	r1, [sp, #4]
  // wait on low busy
  CheckDeviceReady();
 8014ec2:	f7ff feef 	bl	8014ca4 <_ZN6SX126x16CheckDeviceReadyEv>
  // Send command
  mcu.SetValueDigitalOutPin(pinCS, 0);
 8014ec6:	4d0c      	ldr	r5, [pc, #48]	; (8014ef8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht+0x40>)
 8014ec8:	2200      	movs	r2, #0
 8014eca:	68f1      	ldr	r1, [r6, #12]
 8014ecc:	0028      	movs	r0, r5
 8014ece:	f7f9 f961 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
  mcu.SpiWrite((uint8_t) opCode);
 8014ed2:	9901      	ldr	r1, [sp, #4]
 8014ed4:	0028      	movs	r0, r5
 8014ed6:	f7f9 f8cd 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014eda:	19e7      	adds	r7, r4, r7
  for(uint16_t i = 0; i < size; i++) {
 8014edc:	42bc      	cmp	r4, r7
 8014ede:	d005      	beq.n	8014eec <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht+0x34>
    mcu.SpiWrite(buffer[i]);
 8014ee0:	7821      	ldrb	r1, [r4, #0]
 8014ee2:	0028      	movs	r0, r5
 8014ee4:	f7f9 f8c6 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 8014ee8:	3401      	adds	r4, #1
  for(uint16_t i = 0; i < size; i++) {
 8014eea:	e7f7      	b.n	8014edc <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht+0x24>
  }
  mcu.SetValueDigitalOutPin(pinCS, 1);
 8014eec:	68f1      	ldr	r1, [r6, #12]
 8014eee:	0028      	movs	r0, r5
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	f7f9 f94f 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
}
 8014ef6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014ef8:	20001988 	.word	0x20001988

08014efc <_ZN6SX126x5SleepEb>:
void SX126x::Sleep(bool coldStart) {
 8014efc:	b513      	push	{r0, r1, r4, lr}
  mode = (coldStart == true) ? 0x00 : 0x04;
 8014efe:	424b      	negs	r3, r1
 8014f00:	4159      	adcs	r1, r3
 8014f02:	466b      	mov	r3, sp
 8014f04:	0089      	lsls	r1, r1, #2
 8014f06:	1dda      	adds	r2, r3, #7
 8014f08:	7011      	strb	r1, [r2, #0]
  WriteCommand(SET_SLEEP, &mode, 1);
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	2184      	movs	r1, #132	; 0x84
void SX126x::Sleep(bool coldStart) {
 8014f0e:	0004      	movs	r4, r0
  WriteCommand(SET_SLEEP, &mode, 1);
 8014f10:	f7ff ffd2 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
  radioMode = SLEEP;
 8014f14:	2300      	movs	r3, #0
 8014f16:	7023      	strb	r3, [r4, #0]
}
 8014f18:	bd13      	pop	{r0, r1, r4, pc}

08014f1a <_ZN6SX126x15SetDioIrqParamsEtttt>:
) {
 8014f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8014f1c:	466e      	mov	r6, sp
) {
 8014f1e:	ac06      	add	r4, sp, #24
 8014f20:	8824      	ldrh	r4, [r4, #0]
  buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8014f22:	0a0d      	lsrs	r5, r1, #8
  buf[1] = (uint8_t)(irqMask & 0x00FF);
 8014f24:	7071      	strb	r1, [r6, #1]
  buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8014f26:	70f2      	strb	r2, [r6, #3]
  buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8014f28:	7173      	strb	r3, [r6, #5]
  buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8014f2a:	0a11      	lsrs	r1, r2, #8
  buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8014f2c:	0a1a      	lsrs	r2, r3, #8
  buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8014f2e:	0a23      	lsrs	r3, r4, #8
 8014f30:	71b3      	strb	r3, [r6, #6]
  WriteCommand(SET_DIO_IRQ_PARAMS, buf, 8);
 8014f32:	2308      	movs	r3, #8
  buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8014f34:	70b1      	strb	r1, [r6, #2]
  buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8014f36:	7132      	strb	r2, [r6, #4]
  WriteCommand(SET_DIO_IRQ_PARAMS, buf, 8);
 8014f38:	0019      	movs	r1, r3
  buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8014f3a:	466a      	mov	r2, sp
  buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8014f3c:	7035      	strb	r5, [r6, #0]
  buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8014f3e:	71f4      	strb	r4, [r6, #7]
  WriteCommand(SET_DIO_IRQ_PARAMS, buf, 8);
 8014f40:	f7ff ffba 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8014f44:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08014f46 <_ZN6SX126x14ClearIrqStatusEt>:
void SX126x::ClearIrqStatus(uint16_t irq) {
 8014f46:	b507      	push	{r0, r1, r2, lr}
  buf[0] = (uint8_t)(((uint16_t)irq >> 8) & 0x00FF);
 8014f48:	0a0b      	lsrs	r3, r1, #8
 8014f4a:	aa01      	add	r2, sp, #4
 8014f4c:	7013      	strb	r3, [r2, #0]
  WriteCommand(CLR_IRQ_STATUS, buf, 2);
 8014f4e:	2302      	movs	r3, #2
  buf[1] = (uint8_t)((uint16_t)irq & 0x00FF);
 8014f50:	7051      	strb	r1, [r2, #1]
  WriteCommand(CLR_IRQ_STATUS, buf, 2);
 8014f52:	0019      	movs	r1, r3
 8014f54:	f7ff ffb0 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8014f58:	bd07      	pop	{r0, r1, r2, pc}
	...

08014f5c <_ZN6SX126x17ClearIrqFlagsLoraEv>:
void SX126x::ClearIrqFlagsLora(void) {
 8014f5c:	b510      	push	{r4, lr}
  ClearIrqStatus(IRQ_RADIO_ALL);
 8014f5e:	4902      	ldr	r1, [pc, #8]	; (8014f68 <_ZN6SX126x17ClearIrqFlagsLoraEv+0xc>)
 8014f60:	f7ff fff1 	bl	8014f46 <_ZN6SX126x14ClearIrqStatusEt>
}
 8014f64:	bd10      	pop	{r4, pc}
 8014f66:	46c0      	nop			; (mov r8, r8)
 8014f68:	0000ffff 	.word	0x0000ffff

08014f6c <_ZN6SX126x16ClearIrqFlagsFskEv>:
 8014f6c:	b510      	push	{r4, lr}
 8014f6e:	f7ff fff5 	bl	8014f5c <_ZN6SX126x17ClearIrqFlagsLoraEv>
 8014f72:	bd10      	pop	{r4, pc}

08014f74 <_ZN6SX126x20SetBufferBaseAddressEhh>:
void SX126x::SetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8014f74:	b513      	push	{r0, r1, r4, lr}
  buf[0] = txBaseAddress;
 8014f76:	ac01      	add	r4, sp, #4
 8014f78:	7021      	strb	r1, [r4, #0]
  buf[1] = rxBaseAddress;
 8014f7a:	7062      	strb	r2, [r4, #1]
  WriteCommand(SET_BUFFER_BASE_ADDRESS, buf, 2);
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	0022      	movs	r2, r4
 8014f80:	218f      	movs	r1, #143	; 0x8f
 8014f82:	f7ff ff99 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8014f86:	bd13      	pop	{r0, r1, r4, pc}

08014f88 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth>:
  uint8_t buf[4] = { 0x00, 0x00, 0x00, 0x00 };
 8014f88:	2300      	movs	r3, #0
) {
 8014f8a:	b513      	push	{r0, r1, r4, lr}
  uint8_t buf[4] = { 0x00, 0x00, 0x00, 0x00 };
 8014f8c:	ac01      	add	r4, sp, #4
 8014f8e:	9301      	str	r3, [sp, #4]
  buf[0] = SF;
 8014f90:	7021      	strb	r1, [r4, #0]
  switch(BW) {
 8014f92:	2a01      	cmp	r2, #1
 8014f94:	d010      	beq.n	8014fb8 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x30>
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d00b      	beq.n	8014fb2 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x2a>
 8014f9a:	2a02      	cmp	r2, #2
 8014f9c:	d00e      	beq.n	8014fbc <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x34>
  buf[2] = 0x01; // Coding rate = 4/5
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	70a3      	strb	r3, [r4, #2]
  if(((BW == BW125) && ((SF == 11) || (SF == 12))) ||
 8014fa2:	2a00      	cmp	r2, #0
 8014fa4:	d10c      	bne.n	8014fc0 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x38>
 8014fa6:	390b      	subs	r1, #11
 8014fa8:	4299      	cmp	r1, r3
 8014faa:	d80d      	bhi.n	8014fc8 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x40>
    buf[3] = 0x01;
 8014fac:	2301      	movs	r3, #1
 8014fae:	70e3      	strb	r3, [r4, #3]
 8014fb0:	e00a      	b.n	8014fc8 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x40>
    buf[1] = 4;
 8014fb2:	2304      	movs	r3, #4
    buf[1] = 6;
 8014fb4:	7063      	strb	r3, [r4, #1]
    break;
 8014fb6:	e7f2      	b.n	8014f9e <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x16>
    buf[1] = 5;
 8014fb8:	2305      	movs	r3, #5
 8014fba:	e7fb      	b.n	8014fb4 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x2c>
    buf[1] = 6;
 8014fbc:	2306      	movs	r3, #6
 8014fbe:	e7f9      	b.n	8014fb4 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x2c>
  if(((BW == BW125) && ((SF == 11) || (SF == 12))) ||
 8014fc0:	2a01      	cmp	r2, #1
 8014fc2:	d101      	bne.n	8014fc8 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x40>
      ((BW == BW250) && (SF == 12))) {
 8014fc4:	290c      	cmp	r1, #12
 8014fc6:	d0f1      	beq.n	8014fac <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth+0x24>
  WriteCommand(SET_MODULATION_PARAMS, buf, 4);
 8014fc8:	2304      	movs	r3, #4
 8014fca:	0022      	movs	r2, r4
 8014fcc:	218b      	movs	r1, #139	; 0x8b
 8014fce:	f7ff ff73 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8014fd2:	bd13      	pop	{r0, r1, r4, pc}

08014fd4 <_ZN6SX126x22SetModulationParamsFskEv>:
void SX126x::SetModulationParamsFsk() {
 8014fd4:	b513      	push	{r0, r1, r4, lr}
  uint8_t buf[8] = {0};
 8014fd6:	2206      	movs	r2, #6
void SX126x::SetModulationParamsFsk() {
 8014fd8:	0004      	movs	r4, r0
  uint8_t buf[8] = {0};
 8014fda:	2100      	movs	r1, #0
 8014fdc:	4668      	mov	r0, sp
 8014fde:	f000 fb7d 	bl	80156dc <memset>
  buf[1] = (FSK_DATARATE_MOD_PARAMETER >> 8) & 0xFF;
 8014fe2:	466a      	mov	r2, sp
 8014fe4:	2350      	movs	r3, #80	; 0x50
 8014fe6:	7053      	strb	r3, [r2, #1]
  buf[3] = FSK_PULSE_SHAPE_MOD_PARAMETER;
 8014fe8:	3b47      	subs	r3, #71	; 0x47
 8014fea:	70d3      	strb	r3, [r2, #3]
  buf[4] = FSK_RX_BW_MOD_PARAMETER;
 8014fec:	330a      	adds	r3, #10
 8014fee:	7113      	strb	r3, [r2, #4]
  buf[6] = (FSK_FDEV_MOD_PARAMETER >> 8) & 0xFF;
 8014ff0:	4b03      	ldr	r3, [pc, #12]	; (8015000 <_ZN6SX126x22SetModulationParamsFskEv+0x2c>)
  WriteCommand(SET_MODULATION_PARAMS, buf, 8);
 8014ff2:	218b      	movs	r1, #139	; 0x8b
  buf[6] = (FSK_FDEV_MOD_PARAMETER >> 8) & 0xFF;
 8014ff4:	80d3      	strh	r3, [r2, #6]
  WriteCommand(SET_MODULATION_PARAMS, buf, 8);
 8014ff6:	0020      	movs	r0, r4
 8014ff8:	2308      	movs	r3, #8
 8014ffa:	f7ff ff5d 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8014ffe:	bd13      	pop	{r0, r1, r4, pc}
 8015000:	00006666 	.word	0x00006666

08015004 <_ZN6SX126x19SetPacketParamsLoraEhNS_10InvertIQ_tE>:
void SX126x::SetPacketParamsLora(uint8_t payloadSize, InvertIQ_t IqType) {
 8015004:	b513      	push	{r0, r1, r4, lr}
  uint8_t buf[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015006:	2300      	movs	r3, #0
  buf[1] = 0x08;
 8015008:	466c      	mov	r4, sp
  uint8_t buf[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801500a:	9300      	str	r3, [sp, #0]
  buf[1] = 0x08;
 801500c:	3308      	adds	r3, #8
 801500e:	7063      	strb	r3, [r4, #1]
  buf[4] = 0x01;  // Uplink: CRC ON
 8015010:	2301      	movs	r3, #1
  buf[3] = payloadSize;
 8015012:	70e1      	strb	r1, [r4, #3]
  buf[4] = 0x01;  // Uplink: CRC ON
 8015014:	7123      	strb	r3, [r4, #4]
  buf[5] = (uint8_t) IqType;  // Uplink: Standard IQ
 8015016:	7162      	strb	r2, [r4, #5]
  WriteCommand(SET_PACKET_PARAMS, buf, 6);
 8015018:	2306      	movs	r3, #6
 801501a:	466a      	mov	r2, sp
 801501c:	218c      	movs	r1, #140	; 0x8c
 801501e:	f7ff ff4b 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8015022:	bd13      	pop	{r0, r1, r4, pc}

08015024 <_ZN6SX126x18SetPacketParamsFskEh>:
void SX126x::SetPacketParamsFsk(uint8_t payloadSize) {
 8015024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t buf[9] = { 0x00 };
 8015026:	2505      	movs	r5, #5
 8015028:	ac01      	add	r4, sp, #4
void SX126x::SetPacketParamsFsk(uint8_t payloadSize) {
 801502a:	0006      	movs	r6, r0
  uint8_t buf[9] = { 0x00 };
 801502c:	002a      	movs	r2, r5
 801502e:	2100      	movs	r1, #0
 8015030:	0020      	movs	r0, r4
 8015032:	f000 fb53 	bl	80156dc <memset>
  buf[3] = FSK_SYNC_WORD_LENGTH_PACKET_PARAMETER;
 8015036:	2318      	movs	r3, #24
  buf[6] = FSK_PAYLOAD_LENGTH_PACKET_PARAMETER;
 8015038:	22ff      	movs	r2, #255	; 0xff
  buf[3] = FSK_SYNC_WORD_LENGTH_PACKET_PARAMETER;
 801503a:	70e3      	strb	r3, [r4, #3]
  buf[6] = FSK_PAYLOAD_LENGTH_PACKET_PARAMETER;
 801503c:	71a2      	strb	r2, [r4, #6]
  buf[5] = FSK_PACKET_TYPE_PACKET_PARAMETER;
 801503e:	3b17      	subs	r3, #23
  buf[7] = FSK_CRC_TYPE_PACKET_PARAMETER;
 8015040:	3af9      	subs	r2, #249	; 0xf9
  buf[5] = FSK_PACKET_TYPE_PACKET_PARAMETER;
 8015042:	7163      	strb	r3, [r4, #5]
  buf[7] = FSK_CRC_TYPE_PACKET_PARAMETER;
 8015044:	71e2      	strb	r2, [r4, #7]
  buf[8] = FSK_WHITENING_PACKET_PARAMETER;
 8015046:	7223      	strb	r3, [r4, #8]
  WriteCommand(SET_PACKET_PARAMS, buf, 9);
 8015048:	0030      	movs	r0, r6
 801504a:	3308      	adds	r3, #8
 801504c:	0022      	movs	r2, r4
 801504e:	218c      	movs	r1, #140	; 0x8c
  buf[1] = FSK_PREAMBLE_LENGTH_PACKET_PARAMETER;
 8015050:	7065      	strb	r5, [r4, #1]
  buf[2] = FSK_PREAMBLE_DETECTOR_LENGTH_PACKET_PARAMETER;
 8015052:	70a5      	strb	r5, [r4, #2]
  WriteCommand(SET_PACKET_PARAMS, buf, 9);
 8015054:	f7ff ff30 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8015058:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0801505a <_ZN6SX126x13SetPacketTypeE15eModulationType.part.2>:
void SX126x::SetPacketType(eModulationType modulation) {
 801505a:	b507      	push	{r0, r1, r2, lr}
    uint8_t mod = 1;
 801505c:	466b      	mov	r3, sp
 801505e:	1dda      	adds	r2, r3, #7
 8015060:	2301      	movs	r3, #1
    WriteCommand(SET_PACKET_TYPE, (uint8_t *)&mod, 1);
 8015062:	218a      	movs	r1, #138	; 0x8a
    uint8_t mod = 1;
 8015064:	7013      	strb	r3, [r2, #0]
    WriteCommand(SET_PACKET_TYPE, (uint8_t *)&mod, 1);
 8015066:	f7ff ff27 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 801506a:	bd07      	pop	{r0, r1, r2, pc}

0801506c <_ZN6SX126x11SetPaConfigEhhhh>:
) {
 801506c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801506e:	ac06      	add	r4, sp, #24
 8015070:	7825      	ldrb	r5, [r4, #0]
  buf[0] = paDutyCycle;
 8015072:	ac01      	add	r4, sp, #4
 8015074:	7021      	strb	r1, [r4, #0]
  buf[1] = hpMax;
 8015076:	7062      	strb	r2, [r4, #1]
  buf[2] = deviceSel;
 8015078:	70a3      	strb	r3, [r4, #2]
  WriteCommand(SET_PA_CONFIG, buf, 4);
 801507a:	0022      	movs	r2, r4
 801507c:	2304      	movs	r3, #4
 801507e:	2195      	movs	r1, #149	; 0x95
  buf[3] = paLut;
 8015080:	70e5      	strb	r5, [r4, #3]
  WriteCommand(SET_PA_CONFIG, buf, 4);
 8015082:	f7ff ff19 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8015086:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08015088 <_ZN6SX126x14SetRfFrequencyEm>:
void SX126x::SetRfFrequency(uint32_t frequency) {
 8015088:	b513      	push	{r0, r1, r4, lr}
 801508a:	0004      	movs	r4, r0
  freq = (uint32_t)((double)frequency / (double)RADIO_FREQ_STEP);
 801508c:	0008      	movs	r0, r1
 801508e:	f7f5 f89b 	bl	800a1c8 <__aeabi_ui2d>
 8015092:	2200      	movs	r2, #0
 8015094:	4b09      	ldr	r3, [pc, #36]	; (80150bc <_ZN6SX126x14SetRfFrequencyEm+0x34>)
 8015096:	f7f3 fe63 	bl	8008d60 <__aeabi_ddiv>
 801509a:	f7f3 fa65 	bl	8008568 <__aeabi_d2uiz>
  buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 801509e:	aa01      	add	r2, sp, #4
 80150a0:	0e03      	lsrs	r3, r0, #24
 80150a2:	7013      	strb	r3, [r2, #0]
  buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 80150a4:	0c03      	lsrs	r3, r0, #16
 80150a6:	7053      	strb	r3, [r2, #1]
  buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 80150a8:	0a03      	lsrs	r3, r0, #8
 80150aa:	7093      	strb	r3, [r2, #2]
  buf[3] = (uint8_t)(freq & 0xFF);
 80150ac:	70d0      	strb	r0, [r2, #3]
  WriteCommand(SET_RF_FREQUENCY, buf, 4);
 80150ae:	2304      	movs	r3, #4
 80150b0:	2186      	movs	r1, #134	; 0x86
 80150b2:	0020      	movs	r0, r4
 80150b4:	f7ff ff00 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 80150b8:	bd13      	pop	{r0, r1, r4, pc}
 80150ba:	46c0      	nop			; (mov r8, r8)
 80150bc:	3fee8480 	.word	0x3fee8480

080150c0 <_ZN6SX126x10SetStandbyENS_14StandbyModes_tE>:
void SX126x::SetStandby(StandbyModes_t standbyConfig) {
 80150c0:	b507      	push	{r0, r1, r2, lr}
 80150c2:	466b      	mov	r3, sp
 80150c4:	1dda      	adds	r2, r3, #7
 80150c6:	7011      	strb	r1, [r2, #0]
  WriteCommand(SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 80150c8:	2301      	movs	r3, #1
 80150ca:	2180      	movs	r1, #128	; 0x80
 80150cc:	f7ff fef4 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 80150d0:	bd07      	pop	{r0, r1, r2, pc}

080150d2 <_ZN6SX126x16SetRegulatorModeENS_20RadioRegulatorMode_tE>:
void SX126x::SetRegulatorMode(RadioRegulatorMode_t mode) {
 80150d2:	b507      	push	{r0, r1, r2, lr}
 80150d4:	466b      	mov	r3, sp
 80150d6:	1dda      	adds	r2, r3, #7
 80150d8:	7011      	strb	r1, [r2, #0]
  WriteCommand(SET_REGULATORMODE, (uint8_t *)&mode, 1);
 80150da:	2301      	movs	r3, #1
 80150dc:	2196      	movs	r1, #150	; 0x96
 80150de:	f7ff feeb 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 80150e2:	bd07      	pop	{r0, r1, r2, pc}

080150e4 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>:
void SX126x::SetDio2AsRfSwitchCtrl(uint8_t enable) {
 80150e4:	b507      	push	{r0, r1, r2, lr}
 80150e6:	466b      	mov	r3, sp
 80150e8:	1dda      	adds	r2, r3, #7
 80150ea:	7011      	strb	r1, [r2, #0]
  WriteCommand(SET_RFSWITCHMODE, &enable, 1);
 80150ec:	2301      	movs	r3, #1
 80150ee:	219d      	movs	r1, #157	; 0x9d
 80150f0:	f7ff fee2 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 80150f4:	bd07      	pop	{r0, r1, r2, pc}

080150f6 <_ZN6SX126x5SetRxEm>:
void SX126x::SetRx(uint32_t timeout) {
 80150f6:	b507      	push	{r0, r1, r2, lr}
  buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 80150f8:	0c0b      	lsrs	r3, r1, #16
 80150fa:	aa01      	add	r2, sp, #4
 80150fc:	7013      	strb	r3, [r2, #0]
  buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 80150fe:	0a0b      	lsrs	r3, r1, #8
 8015100:	7053      	strb	r3, [r2, #1]
  buf[2] = (uint8_t)(timeout & 0xFF);
 8015102:	7091      	strb	r1, [r2, #2]
  WriteCommand(SET_RX, buf, 3);
 8015104:	2303      	movs	r3, #3
 8015106:	2182      	movs	r1, #130	; 0x82
 8015108:	f7ff fed6 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 801510c:	bd07      	pop	{r0, r1, r2, pc}

0801510e <_ZN6SX126x5SetTxEm>:
void SX126x::SetTx(uint32_t timeout) {
 801510e:	b507      	push	{r0, r1, r2, lr}
  buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8015110:	0c0b      	lsrs	r3, r1, #16
 8015112:	aa01      	add	r2, sp, #4
 8015114:	7013      	strb	r3, [r2, #0]
  buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8015116:	0a0b      	lsrs	r3, r1, #8
 8015118:	7053      	strb	r3, [r2, #1]
  buf[2] = (uint8_t)(timeout & 0xFF);
 801511a:	7091      	strb	r1, [r2, #2]
  WriteCommand(SET_TX, buf, 3);
 801511c:	2303      	movs	r3, #3
 801511e:	2183      	movs	r1, #131	; 0x83
 8015120:	f7ff feca 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8015124:	bd07      	pop	{r0, r1, r2, pc}

08015126 <_ZN6SX126x19StopTimerOnPreambleEb>:
void SX126x::StopTimerOnPreamble(bool state) {
 8015126:	b507      	push	{r0, r1, r2, lr}
  temp = (state == true) ? 0x01 : 0x00;
 8015128:	466b      	mov	r3, sp
 801512a:	1dda      	adds	r2, r3, #7
 801512c:	7011      	strb	r1, [r2, #0]
  WriteCommand(STOP_TIMER_ON_PREAMBLE, &temp, 1);
 801512e:	2301      	movs	r3, #1
 8015130:	219f      	movs	r1, #159	; 0x9f
 8015132:	f7ff fec1 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8015136:	bd07      	pop	{r0, r1, r2, pc}

08015138 <_ZN6SX126x14WriteRegistersEtPht>:

void SX126x::WriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size) {
 8015138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801513a:	0007      	movs	r7, r0
 801513c:	000e      	movs	r6, r1
 801513e:	0014      	movs	r4, r2
 8015140:	9301      	str	r3, [sp, #4]
  // wait on low busy
  CheckDeviceReady();
 8015142:	f7ff fdaf 	bl	8014ca4 <_ZN6SX126x16CheckDeviceReadyEv>

  // Write registers
  mcu.SetValueDigitalOutPin(pinCS, 0);
 8015146:	4d11      	ldr	r5, [pc, #68]	; (801518c <_ZN6SX126x14WriteRegistersEtPht+0x54>)
 8015148:	2200      	movs	r2, #0
 801514a:	68f9      	ldr	r1, [r7, #12]
 801514c:	0028      	movs	r0, r5
 801514e:	f7f9 f821 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
  mcu.SpiWrite(WRITE_REGISTER);
 8015152:	210d      	movs	r1, #13
 8015154:	0028      	movs	r0, r5
 8015156:	f7f8 ff8d 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
  mcu.SpiWrite((address & 0xFF00) >> 8);
 801515a:	0a31      	lsrs	r1, r6, #8
 801515c:	0028      	movs	r0, r5
 801515e:	f7f8 ff89 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
  mcu.SpiWrite(address & 0x00FF);
 8015162:	b2f1      	uxtb	r1, r6
 8015164:	0028      	movs	r0, r5
 8015166:	f7f8 ff85 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 801516a:	9b01      	ldr	r3, [sp, #4]
 801516c:	18e6      	adds	r6, r4, r3

  for(uint16_t i = 0; i < size; i++) {
 801516e:	42b4      	cmp	r4, r6
 8015170:	d005      	beq.n	801517e <_ZN6SX126x14WriteRegistersEtPht+0x46>
    mcu.SpiWrite(buffer[i]);
 8015172:	7821      	ldrb	r1, [r4, #0]
 8015174:	0028      	movs	r0, r5
 8015176:	f7f8 ff7d 	bl	800e074 <_ZN12McuSTM32L0718SpiWriteEi>
 801517a:	3401      	adds	r4, #1
  for(uint16_t i = 0; i < size; i++) {
 801517c:	e7f7      	b.n	801516e <_ZN6SX126x14WriteRegistersEtPht+0x36>
  }

  mcu.SetValueDigitalOutPin(pinCS, 1);
 801517e:	68f9      	ldr	r1, [r7, #12]
 8015180:	0028      	movs	r0, r5
 8015182:	2201      	movs	r2, #1
 8015184:	f7f9 f806 	bl	800e194 <_ZN12McuSTM32L07121SetValueDigitalOutPinE7PinNamei>
}
 8015188:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801518a:	46c0      	nop			; (mov r8, r8)
 801518c:	20001988 	.word	0x20001988

08015190 <_ZN6SX126x6RxLoraE10eBandWidthhmm>:
) {
 8015190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015192:	0004      	movs	r4, r0
 8015194:	001f      	movs	r7, r3
 8015196:	0015      	movs	r5, r2
 8015198:	000e      	movs	r6, r1
 801519a:	f7ff ff5e 	bl	801505a <_ZN6SX126x13SetPacketTypeE15eModulationType.part.2>
  SetRfFrequency(channel);
 801519e:	0039      	movs	r1, r7
 80151a0:	0020      	movs	r0, r4
 80151a2:	f7ff ff71 	bl	8015088 <_ZN6SX126x14SetRfFrequencyEm>
  SetModulationParamsLora(SF, BW);
 80151a6:	0032      	movs	r2, r6
 80151a8:	0029      	movs	r1, r5
 80151aa:	0020      	movs	r0, r4
 80151ac:	f7ff feec 	bl	8014f88 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth>
  SetPacketParamsLora(0, IQ_INVERTED);
 80151b0:	2201      	movs	r2, #1
 80151b2:	0020      	movs	r0, r4
 80151b4:	2100      	movs	r1, #0
 80151b6:	f7ff ff25 	bl	8015004 <_ZN6SX126x19SetPacketParamsLoraEhNS_10InvertIQ_tE>
  StopTimerOnPreamble(false);
 80151ba:	0020      	movs	r0, r4
 80151bc:	2100      	movs	r1, #0
 80151be:	f7ff ffb2 	bl	8015126 <_ZN6SX126x19StopTimerOnPreambleEb>
  WriteRegisters(REG_LORA_SYNC_WORD_MSB, (uint8_t *) this->LoraSyncword, 2);
 80151c2:	21e8      	movs	r1, #232	; 0xe8
 80151c4:	0020      	movs	r0, r4
 80151c6:	2302      	movs	r3, #2
 80151c8:	4a08      	ldr	r2, [pc, #32]	; (80151ec <_ZN6SX126x6RxLoraE10eBandWidthhmm+0x5c>)
 80151ca:	00c9      	lsls	r1, r1, #3
 80151cc:	f7ff ffb4 	bl	8015138 <_ZN6SX126x14WriteRegistersEtPht>
  SetDioIrqParams(
 80151d0:	2300      	movs	r3, #0
 80151d2:	4907      	ldr	r1, [pc, #28]	; (80151f0 <_ZN6SX126x6RxLoraE10eBandWidthhmm+0x60>)
 80151d4:	9300      	str	r3, [sp, #0]
 80151d6:	000a      	movs	r2, r1
 80151d8:	0020      	movs	r0, r4
 80151da:	f7ff fe9e 	bl	8014f1a <_ZN6SX126x15SetDioIrqParamsEtttt>
  SetRx(rxTimeoutMs << 6);
 80151de:	9b08      	ldr	r3, [sp, #32]
 80151e0:	0020      	movs	r0, r4
 80151e2:	0199      	lsls	r1, r3, #6
 80151e4:	f7ff ff87 	bl	80150f6 <_ZN6SX126x5SetRxEm>
}
 80151e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80151ea:	46c0      	nop			; (mov r8, r8)
 80151ec:	0801982a 	.word	0x0801982a
 80151f0:	00000242 	.word	0x00000242

080151f4 <_ZN6SX126x18SetCrcSeedFskCCITTEv>:
void SX126x::SetCrcSeedFskCCITT(void) {
 80151f4:	b507      	push	{r0, r1, r2, lr}
  buf[0] = (uint8_t)((CRC_CCITT_SEED >> 8) & 0xFF);
 80151f6:	4b04      	ldr	r3, [pc, #16]	; (8015208 <_ZN6SX126x18SetCrcSeedFskCCITTEv+0x14>)
 80151f8:	aa01      	add	r2, sp, #4
 80151fa:	8013      	strh	r3, [r2, #0]
  WriteRegisters(REG_CRCSEEDBASEADDR, buf, 2);
 80151fc:	4903      	ldr	r1, [pc, #12]	; (801520c <_ZN6SX126x18SetCrcSeedFskCCITTEv+0x18>)
 80151fe:	2302      	movs	r3, #2
 8015200:	f7ff ff9a 	bl	8015138 <_ZN6SX126x14WriteRegistersEtPht>
}
 8015204:	bd07      	pop	{r0, r1, r2, pc}
 8015206:	46c0      	nop			; (mov r8, r8)
 8015208:	00000f1d 	.word	0x00000f1d
 801520c:	000006bc 	.word	0x000006bc

08015210 <_ZN6SX126x24SetCrcPolynomialFskCCITTEv>:
void SX126x::SetCrcPolynomialFskCCITT(void) {
 8015210:	b507      	push	{r0, r1, r2, lr}
  buf[0] = (uint8_t)((CRC_POLYNOMIAL_CCITT >> 8) & 0xFF);
 8015212:	4b04      	ldr	r3, [pc, #16]	; (8015224 <_ZN6SX126x24SetCrcPolynomialFskCCITTEv+0x14>)
 8015214:	aa01      	add	r2, sp, #4
 8015216:	8013      	strh	r3, [r2, #0]
  WriteRegisters(REG_CRCPOLYBASEADDR, buf, 2);
 8015218:	4903      	ldr	r1, [pc, #12]	; (8015228 <_ZN6SX126x24SetCrcPolynomialFskCCITTEv+0x18>)
 801521a:	2302      	movs	r3, #2
 801521c:	f7ff ff8c 	bl	8015138 <_ZN6SX126x14WriteRegistersEtPht>
}
 8015220:	bd07      	pop	{r0, r1, r2, pc}
 8015222:	46c0      	nop			; (mov r8, r8)
 8015224:	00002110 	.word	0x00002110
 8015228:	000006be 	.word	0x000006be

0801522c <_ZN6SX126x17ConfigureCrcCCITTEv>:
void SX126x::ConfigureCrcCCITT(void) {
 801522c:	b510      	push	{r4, lr}
 801522e:	0004      	movs	r4, r0
  this->SetCrcSeedFskCCITT();
 8015230:	f7ff ffe0 	bl	80151f4 <_ZN6SX126x18SetCrcSeedFskCCITTEv>
  this->SetCrcPolynomialFskCCITT();
 8015234:	0020      	movs	r0, r4
 8015236:	f7ff ffeb 	bl	8015210 <_ZN6SX126x24SetCrcPolynomialFskCCITTEv>
}
 801523a:	bd10      	pop	{r4, pc}

0801523c <_ZN6SX126x11SetTxParamsEa>:
void SX126x::SetTxParams(int8_t power) {
 801523c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801523e:	2301      	movs	r3, #1
 8015240:	0006      	movs	r6, r0
 8015242:	000c      	movs	r4, r1
    SX126x::SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8015244:	9300      	str	r3, [sp, #0]
 8015246:	2200      	movs	r2, #0
  if(power == 15) {
 8015248:	290f      	cmp	r1, #15
 801524a:	d116      	bne.n	801527a <_ZN6SX126x11SetTxParamsEa+0x3e>
    SX126x::SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801524c:	2106      	movs	r1, #6
 801524e:	f7ff ff0d 	bl	801506c <_ZN6SX126x11SetPaConfigEhhhh>
    power = 14;
 8015252:	3c01      	subs	r4, #1
  buf[0] = 0x18;
 8015254:	2318      	movs	r3, #24
 8015256:	ad03      	add	r5, sp, #12
 8015258:	702b      	strb	r3, [r5, #0]
  WriteRegisters(REG_OCP, buf, 1);   // current max is 80 mA for the whole device
 801525a:	002a      	movs	r2, r5
 801525c:	0030      	movs	r0, r6
 801525e:	3b17      	subs	r3, #23
 8015260:	490d      	ldr	r1, [pc, #52]	; (8015298 <_ZN6SX126x11SetTxParamsEa+0x5c>)
 8015262:	f7ff ff69 	bl	8015138 <_ZN6SX126x14WriteRegistersEtPht>
  buf[1] = 0x04; // Ramp time : 200 �s
 8015266:	2304      	movs	r3, #4
  WriteCommand(SET_TX_PARAMS, buf, 2);
 8015268:	002a      	movs	r2, r5
  buf[1] = 0x04; // Ramp time : 200 �s
 801526a:	706b      	strb	r3, [r5, #1]
  WriteCommand(SET_TX_PARAMS, buf, 2);
 801526c:	0030      	movs	r0, r6
 801526e:	3b02      	subs	r3, #2
 8015270:	218e      	movs	r1, #142	; 0x8e
  buf[0] = power;
 8015272:	702c      	strb	r4, [r5, #0]
  WriteCommand(SET_TX_PARAMS, buf, 2);
 8015274:	f7ff fe20 	bl	8014eb8 <_ZN6SX126x12WriteCommandENS_8OpCode_tEPht>
}
 8015278:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    SX126x::SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801527a:	2104      	movs	r1, #4
 801527c:	f7ff fef6 	bl	801506c <_ZN6SX126x11SetPaConfigEhhhh>
 8015280:	1c23      	adds	r3, r4, #0
 8015282:	1ce2      	adds	r2, r4, #3
 8015284:	da03      	bge.n	801528e <_ZN6SX126x11SetTxParamsEa+0x52>
 8015286:	4b05      	ldr	r3, [pc, #20]	; (801529c <_ZN6SX126x11SetTxParamsEa+0x60>)
 8015288:	781b      	ldrb	r3, [r3, #0]
 801528a:	b25c      	sxtb	r4, r3
 801528c:	e7e2      	b.n	8015254 <_ZN6SX126x11SetTxParamsEa+0x18>
 801528e:	b262      	sxtb	r2, r4
 8015290:	2a0e      	cmp	r2, #14
 8015292:	ddfa      	ble.n	801528a <_ZN6SX126x11SetTxParamsEa+0x4e>
 8015294:	230e      	movs	r3, #14
 8015296:	e7f8      	b.n	801528a <_ZN6SX126x11SetTxParamsEa+0x4e>
 8015298:	000008e7 	.word	0x000008e7
 801529c:	08019829 	.word	0x08019829

080152a0 <_ZN6SX126x8SendLoraEPhhh10eBandWidthma>:
) {
 80152a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152a2:	0004      	movs	r4, r0
 80152a4:	2600      	movs	r6, #0
 80152a6:	001f      	movs	r7, r3
 80152a8:	0015      	movs	r5, r2
 80152aa:	b085      	sub	sp, #20
 80152ac:	ab0a      	add	r3, sp, #40	; 0x28
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	9102      	str	r1, [sp, #8]
 80152b2:	9303      	str	r3, [sp, #12]
 80152b4:	ab0c      	add	r3, sp, #48	; 0x30
 80152b6:	579e      	ldrsb	r6, [r3, r6]
  Reset();
 80152b8:	f7ff fcd0 	bl	8014c5c <_ZN6SX126x5ResetEv>
  SetRegulatorMode(USE_DCDC);
 80152bc:	0020      	movs	r0, r4
 80152be:	2101      	movs	r1, #1
 80152c0:	f7ff ff07 	bl	80150d2 <_ZN6SX126x16SetRegulatorModeENS_20RadioRegulatorMode_tE>
  SetDio2AsRfSwitchCtrl(true);
 80152c4:	0020      	movs	r0, r4
 80152c6:	2101      	movs	r1, #1
 80152c8:	f7ff ff0c 	bl	80150e4 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>
  SetStandby(STDBY_XOSC);
 80152cc:	2101      	movs	r1, #1
 80152ce:	0020      	movs	r0, r4
 80152d0:	f7ff fef6 	bl	80150c0 <_ZN6SX126x10SetStandbyENS_14StandbyModes_tE>
 80152d4:	0020      	movs	r0, r4
 80152d6:	f7ff fec0 	bl	801505a <_ZN6SX126x13SetPacketTypeE15eModulationType.part.2>
  SetRfFrequency(channel);
 80152da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152dc:	0020      	movs	r0, r4
 80152de:	f7ff fed3 	bl	8015088 <_ZN6SX126x14SetRfFrequencyEm>
  SetModulationParamsLora(SF, BW);
 80152e2:	9a03      	ldr	r2, [sp, #12]
 80152e4:	0039      	movs	r1, r7
 80152e6:	0020      	movs	r0, r4
 80152e8:	f7ff fe4e 	bl	8014f88 <_ZN6SX126x23SetModulationParamsLoraEh10eBandWidth>
  SetPacketParamsLora(payloadSize, IQ_STANDARD);
 80152ec:	2200      	movs	r2, #0
 80152ee:	0029      	movs	r1, r5
 80152f0:	0020      	movs	r0, r4
 80152f2:	f7ff fe87 	bl	8015004 <_ZN6SX126x19SetPacketParamsLoraEhNS_10InvertIQ_tE>
  SetTxParams(power);
 80152f6:	0031      	movs	r1, r6
 80152f8:	0020      	movs	r0, r4
 80152fa:	f7ff ff9f 	bl	801523c <_ZN6SX126x11SetTxParamsEa>
  WriteRegisters(REG_LORA_SYNC_WORD_MSB, (uint8_t *) this->LoraSyncword, 2);
 80152fe:	21e8      	movs	r1, #232	; 0xe8
 8015300:	2302      	movs	r3, #2
 8015302:	0020      	movs	r0, r4
 8015304:	4a0f      	ldr	r2, [pc, #60]	; (8015344 <_ZN6SX126x8SendLoraEPhhh10eBandWidthma+0xa4>)
 8015306:	00c9      	lsls	r1, r1, #3
 8015308:	f7ff ff16 	bl	8015138 <_ZN6SX126x14WriteRegistersEtPht>
  SetBufferBaseAddress(0, 0);
 801530c:	2200      	movs	r2, #0
 801530e:	0020      	movs	r0, r4
 8015310:	0011      	movs	r1, r2
 8015312:	f7ff fe2f 	bl	8014f74 <_ZN6SX126x20SetBufferBaseAddressEhh>
  WriteBuffer(0, payload, payloadSize);
 8015316:	002b      	movs	r3, r5
  SetDioIrqParams(
 8015318:	2500      	movs	r5, #0
  WriteBuffer(0, payload, payloadSize);
 801531a:	9a02      	ldr	r2, [sp, #8]
 801531c:	0020      	movs	r0, r4
 801531e:	2100      	movs	r1, #0
 8015320:	f7ff fda4 	bl	8014e6c <_ZN6SX126x11WriteBufferEhPhh>
  SetDioIrqParams(
 8015324:	4908      	ldr	r1, [pc, #32]	; (8015348 <_ZN6SX126x8SendLoraEPhhh10eBandWidthma+0xa8>)
 8015326:	002b      	movs	r3, r5
 8015328:	000a      	movs	r2, r1
 801532a:	0020      	movs	r0, r4
 801532c:	9500      	str	r5, [sp, #0]
 801532e:	f7ff fdf4 	bl	8014f1a <_ZN6SX126x15SetDioIrqParamsEtttt>
  SetTx(0);
 8015332:	0029      	movs	r1, r5
 8015334:	0020      	movs	r0, r4
 8015336:	f7ff feea 	bl	801510e <_ZN6SX126x5SetTxEm>
  GetErrors();
 801533a:	0020      	movs	r0, r4
 801533c:	f7ff fd8c 	bl	8014e58 <_ZN6SX126x9GetErrorsEv>
}
 8015340:	b005      	add	sp, #20
 8015342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015344:	0801982a 	.word	0x0801982a
 8015348:	0000ffff 	.word	0x0000ffff

0801534c <_ZN6SX126x13WriteRegisterEth>:

void SX126x::WriteRegister(uint16_t address, uint8_t value) {
 801534c:	b507      	push	{r0, r1, r2, lr}
 801534e:	0013      	movs	r3, r2
 8015350:	466a      	mov	r2, sp
 8015352:	3207      	adds	r2, #7
 8015354:	7013      	strb	r3, [r2, #0]
  this->WriteRegisters(address, &value, 1);
 8015356:	2301      	movs	r3, #1
 8015358:	f7ff feee 	bl	8015138 <_ZN6SX126x14WriteRegistersEtPht>
}
 801535c:	bd07      	pop	{r0, r1, r2, pc}

0801535e <_ZN6SX126x21SetSyncWordFskLorawanEv>:
{
 801535e:	b570      	push	{r4, r5, r6, lr}
  WriteRegister(REG_SYNCWORDBASEADDRESS, (FSK_SYNCWORD_LORAWAN_REG_VALUE >> 16) & 0x0000FF);
 8015360:	25d8      	movs	r5, #216	; 0xd8
{
 8015362:	0004      	movs	r4, r0
  WriteRegister(REG_SYNCWORDBASEADDRESS, (FSK_SYNCWORD_LORAWAN_REG_VALUE >> 16) & 0x0000FF);
 8015364:	00ed      	lsls	r5, r5, #3
 8015366:	0029      	movs	r1, r5
 8015368:	22c1      	movs	r2, #193	; 0xc1
 801536a:	f7ff ffef 	bl	801534c <_ZN6SX126x13WriteRegisterEth>
  WriteRegister(REG_SYNCWORDBASEADDRESS, (FSK_SYNCWORD_LORAWAN_REG_VALUE >> 8) & 0x0000FF);
 801536e:	0029      	movs	r1, r5
 8015370:	0020      	movs	r0, r4
 8015372:	2294      	movs	r2, #148	; 0x94
 8015374:	f7ff ffea 	bl	801534c <_ZN6SX126x13WriteRegisterEth>
  WriteRegister(REG_SYNCWORDBASEADDRESS, FSK_SYNCWORD_LORAWAN_REG_VALUE & 0x0000FF);
 8015378:	0029      	movs	r1, r5
 801537a:	22c1      	movs	r2, #193	; 0xc1
 801537c:	0020      	movs	r0, r4
 801537e:	f7ff ffe5 	bl	801534c <_ZN6SX126x13WriteRegisterEth>
}
 8015382:	bd70      	pop	{r4, r5, r6, pc}

08015384 <_ZN6SX126x7SendFskEPhhma>:
) {
 8015384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015386:	0004      	movs	r4, r0
 8015388:	2600      	movs	r6, #0
 801538a:	001f      	movs	r7, r3
 801538c:	0015      	movs	r5, r2
 801538e:	b085      	sub	sp, #20
 8015390:	ab0a      	add	r3, sp, #40	; 0x28
 8015392:	9103      	str	r1, [sp, #12]
 8015394:	579e      	ldrsb	r6, [r3, r6]
  Reset();
 8015396:	f7ff fc61 	bl	8014c5c <_ZN6SX126x5ResetEv>
  SetRegulatorMode(USE_DCDC);
 801539a:	0020      	movs	r0, r4
 801539c:	2101      	movs	r1, #1
 801539e:	f7ff fe98 	bl	80150d2 <_ZN6SX126x16SetRegulatorModeENS_20RadioRegulatorMode_tE>
  SetDio2AsRfSwitchCtrl(true);
 80153a2:	0020      	movs	r0, r4
 80153a4:	2101      	movs	r1, #1
 80153a6:	f7ff fe9d 	bl	80150e4 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>
  SetStandby(STDBY_XOSC);
 80153aa:	0020      	movs	r0, r4
 80153ac:	2101      	movs	r1, #1
 80153ae:	f7ff fe87 	bl	80150c0 <_ZN6SX126x10SetStandbyENS_14StandbyModes_tE>
  SetRfFrequency(channel);
 80153b2:	0039      	movs	r1, r7
 80153b4:	0020      	movs	r0, r4
 80153b6:	f7ff fe67 	bl	8015088 <_ZN6SX126x14SetRfFrequencyEm>
  SetModulationParamsFsk();
 80153ba:	0020      	movs	r0, r4
 80153bc:	f7ff fe0a 	bl	8014fd4 <_ZN6SX126x22SetModulationParamsFskEv>
  SetPacketParamsFsk(payloadSize);
 80153c0:	0029      	movs	r1, r5
 80153c2:	0020      	movs	r0, r4
 80153c4:	f7ff fe2e 	bl	8015024 <_ZN6SX126x18SetPacketParamsFskEh>
  ConfigureCrcCCITT();
 80153c8:	0020      	movs	r0, r4
 80153ca:	f7ff ff2f 	bl	801522c <_ZN6SX126x17ConfigureCrcCCITTEv>
  SetTxParams(power);
 80153ce:	0031      	movs	r1, r6
 80153d0:	0020      	movs	r0, r4
 80153d2:	f7ff ff33 	bl	801523c <_ZN6SX126x11SetTxParamsEa>
  SetSyncWordFskLorawan();
 80153d6:	0020      	movs	r0, r4
 80153d8:	f7ff ffc1 	bl	801535e <_ZN6SX126x21SetSyncWordFskLorawanEv>
  SetBufferBaseAddress(0, 0);
 80153dc:	2200      	movs	r2, #0
 80153de:	0020      	movs	r0, r4
 80153e0:	0011      	movs	r1, r2
 80153e2:	f7ff fdc7 	bl	8014f74 <_ZN6SX126x20SetBufferBaseAddressEhh>
  WriteBuffer(0, payload, payloadSize);
 80153e6:	002b      	movs	r3, r5
  SetDioIrqParams(
 80153e8:	2500      	movs	r5, #0
  WriteBuffer(0, payload, payloadSize);
 80153ea:	9a03      	ldr	r2, [sp, #12]
 80153ec:	0020      	movs	r0, r4
 80153ee:	2100      	movs	r1, #0
 80153f0:	f7ff fd3c 	bl	8014e6c <_ZN6SX126x11WriteBufferEhPhh>
  SetDioIrqParams(
 80153f4:	4906      	ldr	r1, [pc, #24]	; (8015410 <_ZN6SX126x7SendFskEPhhma+0x8c>)
 80153f6:	002b      	movs	r3, r5
 80153f8:	000a      	movs	r2, r1
 80153fa:	0020      	movs	r0, r4
 80153fc:	9500      	str	r5, [sp, #0]
 80153fe:	f7ff fd8c 	bl	8014f1a <_ZN6SX126x15SetDioIrqParamsEtttt>
  SetTx(0);
 8015402:	0029      	movs	r1, r5
 8015404:	0020      	movs	r0, r4
 8015406:	f7ff fe82 	bl	801510e <_ZN6SX126x5SetTxEm>
}
 801540a:	b005      	add	sp, #20
 801540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801540e:	46c0      	nop			; (mov r8, r8)
 8015410:	0000ffff 	.word	0x0000ffff

08015414 <_ZN6SX126x5RxFskEmm>:
) {
 8015414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015416:	0004      	movs	r4, r0
 8015418:	0015      	movs	r5, r2
  SetRfFrequency(channel);
 801541a:	f7ff fe35 	bl	8015088 <_ZN6SX126x14SetRfFrequencyEm>
  SetModulationParamsFsk();
 801541e:	0020      	movs	r0, r4
 8015420:	f7ff fdd8 	bl	8014fd4 <_ZN6SX126x22SetModulationParamsFskEv>
  SetPacketParamsFsk(0);
 8015424:	0020      	movs	r0, r4
 8015426:	2100      	movs	r1, #0
 8015428:	f7ff fdfc 	bl	8015024 <_ZN6SX126x18SetPacketParamsFskEh>
  StopTimerOnPreamble(true);
 801542c:	2101      	movs	r1, #1
 801542e:	0020      	movs	r0, r4
 8015430:	f7ff fe79 	bl	8015126 <_ZN6SX126x19StopTimerOnPreambleEb>
  SetSyncWordFskLorawan();
 8015434:	0020      	movs	r0, r4
 8015436:	f7ff ff92 	bl	801535e <_ZN6SX126x21SetSyncWordFskLorawanEv>
  SetDioIrqParams(
 801543a:	2300      	movs	r3, #0
 801543c:	4907      	ldr	r1, [pc, #28]	; (801545c <_ZN6SX126x5RxFskEmm+0x48>)
 801543e:	9300      	str	r3, [sp, #0]
 8015440:	000a      	movs	r2, r1
 8015442:	0020      	movs	r0, r4
 8015444:	f7ff fd69 	bl	8014f1a <_ZN6SX126x15SetDioIrqParamsEtttt>
  ClearIrqStatus(IRQ_RADIO_ALL);
 8015448:	0020      	movs	r0, r4
 801544a:	4905      	ldr	r1, [pc, #20]	; (8015460 <_ZN6SX126x5RxFskEmm+0x4c>)
 801544c:	f7ff fd7b 	bl	8014f46 <_ZN6SX126x14ClearIrqStatusEt>
  SetRx(rxTimeoutMs << 6);
 8015450:	01a9      	lsls	r1, r5, #6
 8015452:	0020      	movs	r0, r4
 8015454:	f7ff fe4f 	bl	80150f6 <_ZN6SX126x5SetRxEm>
}
 8015458:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 801545a:	46c0      	nop			; (mov r8, r8)
 801545c:	00000242 	.word	0x00000242
 8015460:	0000ffff 	.word	0x0000ffff

08015464 <__cxa_pure_virtual>:
 8015464:	b510      	push	{r4, lr}
 8015466:	f000 f805 	bl	8015474 <_ZSt9terminatev>

0801546a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801546a:	b510      	push	{r4, lr}
 801546c:	4780      	blx	r0
 801546e:	f000 f88b 	bl	8015588 <abort>
	...

08015474 <_ZSt9terminatev>:
 8015474:	4b02      	ldr	r3, [pc, #8]	; (8015480 <_ZSt9terminatev+0xc>)
 8015476:	b510      	push	{r4, lr}
 8015478:	6818      	ldr	r0, [r3, #0]
 801547a:	f7ff fff6 	bl	801546a <_ZN10__cxxabiv111__terminateEPFvvE>
 801547e:	46c0      	nop			; (mov r8, r8)
 8015480:	200005dc 	.word	0x200005dc

08015484 <ceil>:
 8015484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015486:	004b      	lsls	r3, r1, #1
 8015488:	4a39      	ldr	r2, [pc, #228]	; (8015570 <ceil+0xec>)
 801548a:	0d5b      	lsrs	r3, r3, #21
 801548c:	b085      	sub	sp, #20
 801548e:	189e      	adds	r6, r3, r2
 8015490:	000c      	movs	r4, r1
 8015492:	0005      	movs	r5, r0
 8015494:	9003      	str	r0, [sp, #12]
 8015496:	2e13      	cmp	r6, #19
 8015498:	dc32      	bgt.n	8015500 <ceil+0x7c>
 801549a:	2e00      	cmp	r6, #0
 801549c:	da13      	bge.n	80154c6 <ceil+0x42>
 801549e:	4a35      	ldr	r2, [pc, #212]	; (8015574 <ceil+0xf0>)
 80154a0:	4b35      	ldr	r3, [pc, #212]	; (8015578 <ceil+0xf4>)
 80154a2:	f7f3 f941 	bl	8008728 <__aeabi_dadd>
 80154a6:	2200      	movs	r2, #0
 80154a8:	2300      	movs	r3, #0
 80154aa:	f7f2 ffff 	bl	80084ac <__aeabi_dcmpgt>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d006      	beq.n	80154c0 <ceil+0x3c>
 80154b2:	2c00      	cmp	r4, #0
 80154b4:	db57      	blt.n	8015566 <ceil+0xe2>
 80154b6:	432c      	orrs	r4, r5
 80154b8:	2500      	movs	r5, #0
 80154ba:	42ac      	cmp	r4, r5
 80154bc:	d000      	beq.n	80154c0 <ceil+0x3c>
 80154be:	4c2f      	ldr	r4, [pc, #188]	; (801557c <ceil+0xf8>)
 80154c0:	0028      	movs	r0, r5
 80154c2:	0021      	movs	r1, r4
 80154c4:	e026      	b.n	8015514 <ceil+0x90>
 80154c6:	4f2e      	ldr	r7, [pc, #184]	; (8015580 <ceil+0xfc>)
 80154c8:	4137      	asrs	r7, r6
 80154ca:	003b      	movs	r3, r7
 80154cc:	400b      	ands	r3, r1
 80154ce:	4303      	orrs	r3, r0
 80154d0:	d020      	beq.n	8015514 <ceil+0x90>
 80154d2:	9000      	str	r0, [sp, #0]
 80154d4:	9101      	str	r1, [sp, #4]
 80154d6:	4a27      	ldr	r2, [pc, #156]	; (8015574 <ceil+0xf0>)
 80154d8:	4b27      	ldr	r3, [pc, #156]	; (8015578 <ceil+0xf4>)
 80154da:	9800      	ldr	r0, [sp, #0]
 80154dc:	9901      	ldr	r1, [sp, #4]
 80154de:	f7f3 f923 	bl	8008728 <__aeabi_dadd>
 80154e2:	2200      	movs	r2, #0
 80154e4:	2300      	movs	r3, #0
 80154e6:	f7f2 ffe1 	bl	80084ac <__aeabi_dcmpgt>
 80154ea:	2800      	cmp	r0, #0
 80154ec:	d0e8      	beq.n	80154c0 <ceil+0x3c>
 80154ee:	2c00      	cmp	r4, #0
 80154f0:	dd03      	ble.n	80154fa <ceil+0x76>
 80154f2:	2380      	movs	r3, #128	; 0x80
 80154f4:	035b      	lsls	r3, r3, #13
 80154f6:	4133      	asrs	r3, r6
 80154f8:	18e4      	adds	r4, r4, r3
 80154fa:	43bc      	bics	r4, r7
 80154fc:	2500      	movs	r5, #0
 80154fe:	e7df      	b.n	80154c0 <ceil+0x3c>
 8015500:	2e33      	cmp	r6, #51	; 0x33
 8015502:	dd09      	ble.n	8015518 <ceil+0x94>
 8015504:	2380      	movs	r3, #128	; 0x80
 8015506:	00db      	lsls	r3, r3, #3
 8015508:	429e      	cmp	r6, r3
 801550a:	d103      	bne.n	8015514 <ceil+0x90>
 801550c:	0002      	movs	r2, r0
 801550e:	000b      	movs	r3, r1
 8015510:	f7f3 f90a 	bl	8008728 <__aeabi_dadd>
 8015514:	b005      	add	sp, #20
 8015516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015518:	2701      	movs	r7, #1
 801551a:	4a1a      	ldr	r2, [pc, #104]	; (8015584 <ceil+0x100>)
 801551c:	427f      	negs	r7, r7
 801551e:	189b      	adds	r3, r3, r2
 8015520:	40df      	lsrs	r7, r3
 8015522:	4238      	tst	r0, r7
 8015524:	d0f6      	beq.n	8015514 <ceil+0x90>
 8015526:	9000      	str	r0, [sp, #0]
 8015528:	9101      	str	r1, [sp, #4]
 801552a:	4a12      	ldr	r2, [pc, #72]	; (8015574 <ceil+0xf0>)
 801552c:	4b12      	ldr	r3, [pc, #72]	; (8015578 <ceil+0xf4>)
 801552e:	9800      	ldr	r0, [sp, #0]
 8015530:	9901      	ldr	r1, [sp, #4]
 8015532:	f7f3 f8f9 	bl	8008728 <__aeabi_dadd>
 8015536:	2200      	movs	r2, #0
 8015538:	2300      	movs	r3, #0
 801553a:	f7f2 ffb7 	bl	80084ac <__aeabi_dcmpgt>
 801553e:	2800      	cmp	r0, #0
 8015540:	d0be      	beq.n	80154c0 <ceil+0x3c>
 8015542:	2c00      	cmp	r4, #0
 8015544:	dd02      	ble.n	801554c <ceil+0xc8>
 8015546:	2e14      	cmp	r6, #20
 8015548:	d102      	bne.n	8015550 <ceil+0xcc>
 801554a:	3401      	adds	r4, #1
 801554c:	43bd      	bics	r5, r7
 801554e:	e7b7      	b.n	80154c0 <ceil+0x3c>
 8015550:	2334      	movs	r3, #52	; 0x34
 8015552:	1b9e      	subs	r6, r3, r6
 8015554:	3b33      	subs	r3, #51	; 0x33
 8015556:	40b3      	lsls	r3, r6
 8015558:	18ed      	adds	r5, r5, r3
 801555a:	9b03      	ldr	r3, [sp, #12]
 801555c:	429d      	cmp	r5, r3
 801555e:	419b      	sbcs	r3, r3
 8015560:	425b      	negs	r3, r3
 8015562:	18e4      	adds	r4, r4, r3
 8015564:	e7f2      	b.n	801554c <ceil+0xc8>
 8015566:	2480      	movs	r4, #128	; 0x80
 8015568:	2500      	movs	r5, #0
 801556a:	0624      	lsls	r4, r4, #24
 801556c:	e7a8      	b.n	80154c0 <ceil+0x3c>
 801556e:	46c0      	nop			; (mov r8, r8)
 8015570:	fffffc01 	.word	0xfffffc01
 8015574:	8800759c 	.word	0x8800759c
 8015578:	7e37e43c 	.word	0x7e37e43c
 801557c:	3ff00000 	.word	0x3ff00000
 8015580:	000fffff 	.word	0x000fffff
 8015584:	fffffbed 	.word	0xfffffbed

08015588 <abort>:
 8015588:	b510      	push	{r4, lr}
 801558a:	2006      	movs	r0, #6
 801558c:	f000 fecc 	bl	8016328 <raise>
 8015590:	2001      	movs	r0, #1
 8015592:	f002 faaf 	bl	8017af4 <_exit>
	...

08015598 <__assert_func>:
 8015598:	b530      	push	{r4, r5, lr}
 801559a:	001c      	movs	r4, r3
 801559c:	4b09      	ldr	r3, [pc, #36]	; (80155c4 <__assert_func+0x2c>)
 801559e:	0005      	movs	r5, r0
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	b085      	sub	sp, #20
 80155a4:	68d8      	ldr	r0, [r3, #12]
 80155a6:	4b08      	ldr	r3, [pc, #32]	; (80155c8 <__assert_func+0x30>)
 80155a8:	2a00      	cmp	r2, #0
 80155aa:	d101      	bne.n	80155b0 <__assert_func+0x18>
 80155ac:	4b07      	ldr	r3, [pc, #28]	; (80155cc <__assert_func+0x34>)
 80155ae:	001a      	movs	r2, r3
 80155b0:	9202      	str	r2, [sp, #8]
 80155b2:	9301      	str	r3, [sp, #4]
 80155b4:	9100      	str	r1, [sp, #0]
 80155b6:	002b      	movs	r3, r5
 80155b8:	0022      	movs	r2, r4
 80155ba:	4905      	ldr	r1, [pc, #20]	; (80155d0 <__assert_func+0x38>)
 80155bc:	f000 f80a 	bl	80155d4 <fiprintf>
 80155c0:	f7ff ffe2 	bl	8015588 <abort>
 80155c4:	200005e0 	.word	0x200005e0
 80155c8:	0801982c 	.word	0x0801982c
 80155cc:	08018071 	.word	0x08018071
 80155d0:	08019839 	.word	0x08019839

080155d4 <fiprintf>:
 80155d4:	b40e      	push	{r1, r2, r3}
 80155d6:	b503      	push	{r0, r1, lr}
 80155d8:	0001      	movs	r1, r0
 80155da:	ab03      	add	r3, sp, #12
 80155dc:	4804      	ldr	r0, [pc, #16]	; (80155f0 <fiprintf+0x1c>)
 80155de:	cb04      	ldmia	r3!, {r2}
 80155e0:	6800      	ldr	r0, [r0, #0]
 80155e2:	9301      	str	r3, [sp, #4]
 80155e4:	f000 fbd8 	bl	8015d98 <_vfiprintf_r>
 80155e8:	b002      	add	sp, #8
 80155ea:	bc08      	pop	{r3}
 80155ec:	b003      	add	sp, #12
 80155ee:	4718      	bx	r3
 80155f0:	200005e0 	.word	0x200005e0

080155f4 <__libc_init_array>:
 80155f4:	b570      	push	{r4, r5, r6, lr}
 80155f6:	2600      	movs	r6, #0
 80155f8:	4d0c      	ldr	r5, [pc, #48]	; (801562c <__libc_init_array+0x38>)
 80155fa:	4c0d      	ldr	r4, [pc, #52]	; (8015630 <__libc_init_array+0x3c>)
 80155fc:	1b64      	subs	r4, r4, r5
 80155fe:	10a4      	asrs	r4, r4, #2
 8015600:	42a6      	cmp	r6, r4
 8015602:	d109      	bne.n	8015618 <__libc_init_array+0x24>
 8015604:	2600      	movs	r6, #0
 8015606:	f002 fa77 	bl	8017af8 <_init>
 801560a:	4d0a      	ldr	r5, [pc, #40]	; (8015634 <__libc_init_array+0x40>)
 801560c:	4c0a      	ldr	r4, [pc, #40]	; (8015638 <__libc_init_array+0x44>)
 801560e:	1b64      	subs	r4, r4, r5
 8015610:	10a4      	asrs	r4, r4, #2
 8015612:	42a6      	cmp	r6, r4
 8015614:	d105      	bne.n	8015622 <__libc_init_array+0x2e>
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	00b3      	lsls	r3, r6, #2
 801561a:	58eb      	ldr	r3, [r5, r3]
 801561c:	4798      	blx	r3
 801561e:	3601      	adds	r6, #1
 8015620:	e7ee      	b.n	8015600 <__libc_init_array+0xc>
 8015622:	00b3      	lsls	r3, r6, #2
 8015624:	58eb      	ldr	r3, [r5, r3]
 8015626:	4798      	blx	r3
 8015628:	3601      	adds	r6, #1
 801562a:	e7f2      	b.n	8015612 <__libc_init_array+0x1e>
 801562c:	08019b28 	.word	0x08019b28
 8015630:	08019b28 	.word	0x08019b28
 8015634:	08019b28 	.word	0x08019b28
 8015638:	08019b30 	.word	0x08019b30

0801563c <__locale_ctype_ptr_l>:
 801563c:	30ec      	adds	r0, #236	; 0xec
 801563e:	6800      	ldr	r0, [r0, #0]
 8015640:	4770      	bx	lr
	...

08015644 <__locale_ctype_ptr>:
 8015644:	4b04      	ldr	r3, [pc, #16]	; (8015658 <__locale_ctype_ptr+0x14>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6a1b      	ldr	r3, [r3, #32]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d100      	bne.n	8015650 <__locale_ctype_ptr+0xc>
 801564e:	4b03      	ldr	r3, [pc, #12]	; (801565c <__locale_ctype_ptr+0x18>)
 8015650:	33ec      	adds	r3, #236	; 0xec
 8015652:	6818      	ldr	r0, [r3, #0]
 8015654:	4770      	bx	lr
 8015656:	46c0      	nop			; (mov r8, r8)
 8015658:	200005e0 	.word	0x200005e0
 801565c:	20000644 	.word	0x20000644

08015660 <malloc>:
 8015660:	b510      	push	{r4, lr}
 8015662:	4b03      	ldr	r3, [pc, #12]	; (8015670 <malloc+0x10>)
 8015664:	0001      	movs	r1, r0
 8015666:	6818      	ldr	r0, [r3, #0]
 8015668:	f000 fb10 	bl	8015c8c <_malloc_r>
 801566c:	bd10      	pop	{r4, pc}
 801566e:	46c0      	nop			; (mov r8, r8)
 8015670:	200005e0 	.word	0x200005e0

08015674 <free>:
 8015674:	b510      	push	{r4, lr}
 8015676:	4b03      	ldr	r3, [pc, #12]	; (8015684 <free+0x10>)
 8015678:	0001      	movs	r1, r0
 801567a:	6818      	ldr	r0, [r3, #0]
 801567c:	f000 fabc 	bl	8015bf8 <_free_r>
 8015680:	bd10      	pop	{r4, pc}
 8015682:	46c0      	nop			; (mov r8, r8)
 8015684:	200005e0 	.word	0x200005e0

08015688 <__ascii_mbtowc>:
 8015688:	b082      	sub	sp, #8
 801568a:	2900      	cmp	r1, #0
 801568c:	d100      	bne.n	8015690 <__ascii_mbtowc+0x8>
 801568e:	a901      	add	r1, sp, #4
 8015690:	1e10      	subs	r0, r2, #0
 8015692:	d006      	beq.n	80156a2 <__ascii_mbtowc+0x1a>
 8015694:	2b00      	cmp	r3, #0
 8015696:	d006      	beq.n	80156a6 <__ascii_mbtowc+0x1e>
 8015698:	7813      	ldrb	r3, [r2, #0]
 801569a:	600b      	str	r3, [r1, #0]
 801569c:	7810      	ldrb	r0, [r2, #0]
 801569e:	1e43      	subs	r3, r0, #1
 80156a0:	4198      	sbcs	r0, r3
 80156a2:	b002      	add	sp, #8
 80156a4:	4770      	bx	lr
 80156a6:	2002      	movs	r0, #2
 80156a8:	4240      	negs	r0, r0
 80156aa:	e7fa      	b.n	80156a2 <__ascii_mbtowc+0x1a>

080156ac <memcmp>:
 80156ac:	b530      	push	{r4, r5, lr}
 80156ae:	2400      	movs	r4, #0
 80156b0:	42a2      	cmp	r2, r4
 80156b2:	d101      	bne.n	80156b8 <memcmp+0xc>
 80156b4:	2000      	movs	r0, #0
 80156b6:	e005      	b.n	80156c4 <memcmp+0x18>
 80156b8:	5d03      	ldrb	r3, [r0, r4]
 80156ba:	1c65      	adds	r5, r4, #1
 80156bc:	5d0c      	ldrb	r4, [r1, r4]
 80156be:	42a3      	cmp	r3, r4
 80156c0:	d001      	beq.n	80156c6 <memcmp+0x1a>
 80156c2:	1b18      	subs	r0, r3, r4
 80156c4:	bd30      	pop	{r4, r5, pc}
 80156c6:	002c      	movs	r4, r5
 80156c8:	e7f2      	b.n	80156b0 <memcmp+0x4>

080156ca <memcpy>:
 80156ca:	2300      	movs	r3, #0
 80156cc:	b510      	push	{r4, lr}
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d100      	bne.n	80156d4 <memcpy+0xa>
 80156d2:	bd10      	pop	{r4, pc}
 80156d4:	5ccc      	ldrb	r4, [r1, r3]
 80156d6:	54c4      	strb	r4, [r0, r3]
 80156d8:	3301      	adds	r3, #1
 80156da:	e7f8      	b.n	80156ce <memcpy+0x4>

080156dc <memset>:
 80156dc:	0003      	movs	r3, r0
 80156de:	1812      	adds	r2, r2, r0
 80156e0:	4293      	cmp	r3, r2
 80156e2:	d100      	bne.n	80156e6 <memset+0xa>
 80156e4:	4770      	bx	lr
 80156e6:	7019      	strb	r1, [r3, #0]
 80156e8:	3301      	adds	r3, #1
 80156ea:	e7f9      	b.n	80156e0 <memset+0x4>

080156ec <validate_structure>:
 80156ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156ee:	6801      	ldr	r1, [r0, #0]
 80156f0:	0004      	movs	r4, r0
 80156f2:	293b      	cmp	r1, #59	; 0x3b
 80156f4:	d90b      	bls.n	801570e <validate_structure+0x22>
 80156f6:	223c      	movs	r2, #60	; 0x3c
 80156f8:	4668      	mov	r0, sp
 80156fa:	f001 f94d 	bl	8016998 <div>
 80156fe:	6863      	ldr	r3, [r4, #4]
 8015700:	9900      	ldr	r1, [sp, #0]
 8015702:	9a01      	ldr	r2, [sp, #4]
 8015704:	185b      	adds	r3, r3, r1
 8015706:	6063      	str	r3, [r4, #4]
 8015708:	2a00      	cmp	r2, #0
 801570a:	db51      	blt.n	80157b0 <validate_structure+0xc4>
 801570c:	6022      	str	r2, [r4, #0]
 801570e:	6861      	ldr	r1, [r4, #4]
 8015710:	293b      	cmp	r1, #59	; 0x3b
 8015712:	d90b      	bls.n	801572c <validate_structure+0x40>
 8015714:	223c      	movs	r2, #60	; 0x3c
 8015716:	4668      	mov	r0, sp
 8015718:	f001 f93e 	bl	8016998 <div>
 801571c:	68a3      	ldr	r3, [r4, #8]
 801571e:	9900      	ldr	r1, [sp, #0]
 8015720:	9a01      	ldr	r2, [sp, #4]
 8015722:	185b      	adds	r3, r3, r1
 8015724:	60a3      	str	r3, [r4, #8]
 8015726:	2a00      	cmp	r2, #0
 8015728:	db47      	blt.n	80157ba <validate_structure+0xce>
 801572a:	6062      	str	r2, [r4, #4]
 801572c:	68a1      	ldr	r1, [r4, #8]
 801572e:	2917      	cmp	r1, #23
 8015730:	d90b      	bls.n	801574a <validate_structure+0x5e>
 8015732:	2218      	movs	r2, #24
 8015734:	4668      	mov	r0, sp
 8015736:	f001 f92f 	bl	8016998 <div>
 801573a:	68e3      	ldr	r3, [r4, #12]
 801573c:	9900      	ldr	r1, [sp, #0]
 801573e:	9a01      	ldr	r2, [sp, #4]
 8015740:	185b      	adds	r3, r3, r1
 8015742:	60e3      	str	r3, [r4, #12]
 8015744:	2a00      	cmp	r2, #0
 8015746:	db3d      	blt.n	80157c4 <validate_structure+0xd8>
 8015748:	60a2      	str	r2, [r4, #8]
 801574a:	6921      	ldr	r1, [r4, #16]
 801574c:	290b      	cmp	r1, #11
 801574e:	d90b      	bls.n	8015768 <validate_structure+0x7c>
 8015750:	220c      	movs	r2, #12
 8015752:	4668      	mov	r0, sp
 8015754:	f001 f920 	bl	8016998 <div>
 8015758:	6963      	ldr	r3, [r4, #20]
 801575a:	9900      	ldr	r1, [sp, #0]
 801575c:	9a01      	ldr	r2, [sp, #4]
 801575e:	185b      	adds	r3, r3, r1
 8015760:	6163      	str	r3, [r4, #20]
 8015762:	2a00      	cmp	r2, #0
 8015764:	db33      	blt.n	80157ce <validate_structure+0xe2>
 8015766:	6122      	str	r2, [r4, #16]
 8015768:	6965      	ldr	r5, [r4, #20]
 801576a:	231c      	movs	r3, #28
 801576c:	07aa      	lsls	r2, r5, #30
 801576e:	d10f      	bne.n	8015790 <validate_structure+0xa4>
 8015770:	2164      	movs	r1, #100	; 0x64
 8015772:	0028      	movs	r0, r5
 8015774:	f7f2 fe5e 	bl	8008434 <__aeabi_idivmod>
 8015778:	231d      	movs	r3, #29
 801577a:	2900      	cmp	r1, #0
 801577c:	d108      	bne.n	8015790 <validate_structure+0xa4>
 801577e:	4b3c      	ldr	r3, [pc, #240]	; (8015870 <validate_structure+0x184>)
 8015780:	3191      	adds	r1, #145	; 0x91
 8015782:	18e8      	adds	r0, r5, r3
 8015784:	31ff      	adds	r1, #255	; 0xff
 8015786:	f7f2 fe55 	bl	8008434 <__aeabi_idivmod>
 801578a:	424b      	negs	r3, r1
 801578c:	414b      	adcs	r3, r1
 801578e:	331c      	adds	r3, #28
 8015790:	68e2      	ldr	r2, [r4, #12]
 8015792:	271d      	movs	r7, #29
 8015794:	2a00      	cmp	r2, #0
 8015796:	dd45      	ble.n	8015824 <validate_structure+0x138>
 8015798:	2603      	movs	r6, #3
 801579a:	271c      	movs	r7, #28
 801579c:	6922      	ldr	r2, [r4, #16]
 801579e:	68e1      	ldr	r1, [r4, #12]
 80157a0:	2a01      	cmp	r2, #1
 80157a2:	d043      	beq.n	801582c <validate_structure+0x140>
 80157a4:	4d33      	ldr	r5, [pc, #204]	; (8015874 <validate_structure+0x188>)
 80157a6:	0090      	lsls	r0, r2, #2
 80157a8:	5940      	ldr	r0, [r0, r5]
 80157aa:	4281      	cmp	r1, r0
 80157ac:	dc41      	bgt.n	8015832 <validate_structure+0x146>
 80157ae:	e03c      	b.n	801582a <validate_structure+0x13e>
 80157b0:	323c      	adds	r2, #60	; 0x3c
 80157b2:	3b01      	subs	r3, #1
 80157b4:	6022      	str	r2, [r4, #0]
 80157b6:	6063      	str	r3, [r4, #4]
 80157b8:	e7a9      	b.n	801570e <validate_structure+0x22>
 80157ba:	323c      	adds	r2, #60	; 0x3c
 80157bc:	3b01      	subs	r3, #1
 80157be:	6062      	str	r2, [r4, #4]
 80157c0:	60a3      	str	r3, [r4, #8]
 80157c2:	e7b3      	b.n	801572c <validate_structure+0x40>
 80157c4:	3218      	adds	r2, #24
 80157c6:	3b01      	subs	r3, #1
 80157c8:	60a2      	str	r2, [r4, #8]
 80157ca:	60e3      	str	r3, [r4, #12]
 80157cc:	e7bd      	b.n	801574a <validate_structure+0x5e>
 80157ce:	320c      	adds	r2, #12
 80157d0:	3b01      	subs	r3, #1
 80157d2:	6122      	str	r2, [r4, #16]
 80157d4:	6163      	str	r3, [r4, #20]
 80157d6:	e7c7      	b.n	8015768 <validate_structure+0x7c>
 80157d8:	6922      	ldr	r2, [r4, #16]
 80157da:	3a01      	subs	r2, #1
 80157dc:	6122      	str	r2, [r4, #16]
 80157de:	3201      	adds	r2, #1
 80157e0:	d117      	bne.n	8015812 <validate_structure+0x126>
 80157e2:	230b      	movs	r3, #11
 80157e4:	2203      	movs	r2, #3
 80157e6:	6965      	ldr	r5, [r4, #20]
 80157e8:	6123      	str	r3, [r4, #16]
 80157ea:	1e68      	subs	r0, r5, #1
 80157ec:	6160      	str	r0, [r4, #20]
 80157ee:	3311      	adds	r3, #17
 80157f0:	4210      	tst	r0, r2
 80157f2:	d10e      	bne.n	8015812 <validate_structure+0x126>
 80157f4:	2164      	movs	r1, #100	; 0x64
 80157f6:	f7f2 fe1d 	bl	8008434 <__aeabi_idivmod>
 80157fa:	003b      	movs	r3, r7
 80157fc:	2900      	cmp	r1, #0
 80157fe:	d108      	bne.n	8015812 <validate_structure+0x126>
 8015800:	4b1d      	ldr	r3, [pc, #116]	; (8015878 <validate_structure+0x18c>)
 8015802:	3191      	adds	r1, #145	; 0x91
 8015804:	18e8      	adds	r0, r5, r3
 8015806:	31ff      	adds	r1, #255	; 0xff
 8015808:	f7f2 fe14 	bl	8008434 <__aeabi_idivmod>
 801580c:	424b      	negs	r3, r1
 801580e:	414b      	adcs	r3, r1
 8015810:	331c      	adds	r3, #28
 8015812:	6921      	ldr	r1, [r4, #16]
 8015814:	001a      	movs	r2, r3
 8015816:	2901      	cmp	r1, #1
 8015818:	d002      	beq.n	8015820 <validate_structure+0x134>
 801581a:	4a16      	ldr	r2, [pc, #88]	; (8015874 <validate_structure+0x188>)
 801581c:	0089      	lsls	r1, r1, #2
 801581e:	588a      	ldr	r2, [r1, r2]
 8015820:	18b6      	adds	r6, r6, r2
 8015822:	60e6      	str	r6, [r4, #12]
 8015824:	68e6      	ldr	r6, [r4, #12]
 8015826:	2e00      	cmp	r6, #0
 8015828:	ddd6      	ble.n	80157d8 <validate_structure+0xec>
 801582a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801582c:	428b      	cmp	r3, r1
 801582e:	dafc      	bge.n	801582a <validate_structure+0x13e>
 8015830:	0018      	movs	r0, r3
 8015832:	1a09      	subs	r1, r1, r0
 8015834:	3201      	adds	r2, #1
 8015836:	60e1      	str	r1, [r4, #12]
 8015838:	6122      	str	r2, [r4, #16]
 801583a:	2a0c      	cmp	r2, #12
 801583c:	d1ae      	bne.n	801579c <validate_structure+0xb0>
 801583e:	2300      	movs	r3, #0
 8015840:	6965      	ldr	r5, [r4, #20]
 8015842:	6123      	str	r3, [r4, #16]
 8015844:	1c68      	adds	r0, r5, #1
 8015846:	6160      	str	r0, [r4, #20]
 8015848:	003b      	movs	r3, r7
 801584a:	4230      	tst	r0, r6
 801584c:	d1a6      	bne.n	801579c <validate_structure+0xb0>
 801584e:	2164      	movs	r1, #100	; 0x64
 8015850:	f7f2 fdf0 	bl	8008434 <__aeabi_idivmod>
 8015854:	231d      	movs	r3, #29
 8015856:	2900      	cmp	r1, #0
 8015858:	d1a0      	bne.n	801579c <validate_structure+0xb0>
 801585a:	4b08      	ldr	r3, [pc, #32]	; (801587c <validate_structure+0x190>)
 801585c:	3191      	adds	r1, #145	; 0x91
 801585e:	18e8      	adds	r0, r5, r3
 8015860:	31ff      	adds	r1, #255	; 0xff
 8015862:	f7f2 fde7 	bl	8008434 <__aeabi_idivmod>
 8015866:	424b      	negs	r3, r1
 8015868:	414b      	adcs	r3, r1
 801586a:	331c      	adds	r3, #28
 801586c:	e796      	b.n	801579c <validate_structure+0xb0>
 801586e:	46c0      	nop			; (mov r8, r8)
 8015870:	0000076c 	.word	0x0000076c
 8015874:	08019874 	.word	0x08019874
 8015878:	0000076b 	.word	0x0000076b
 801587c:	0000076d 	.word	0x0000076d

08015880 <mktime>:
 8015880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015882:	b08b      	sub	sp, #44	; 0x2c
 8015884:	0004      	movs	r4, r0
 8015886:	f001 fa6d 	bl	8016d64 <__gettzinfo>
 801588a:	0007      	movs	r7, r0
 801588c:	0020      	movs	r0, r4
 801588e:	f7ff ff2d 	bl	80156ec <validate_structure>
 8015892:	233c      	movs	r3, #60	; 0x3c
 8015894:	6862      	ldr	r2, [r4, #4]
 8015896:	68a1      	ldr	r1, [r4, #8]
 8015898:	4353      	muls	r3, r2
 801589a:	6822      	ldr	r2, [r4, #0]
 801589c:	189b      	adds	r3, r3, r2
 801589e:	22e1      	movs	r2, #225	; 0xe1
 80158a0:	0112      	lsls	r2, r2, #4
 80158a2:	434a      	muls	r2, r1
 80158a4:	189b      	adds	r3, r3, r2
 80158a6:	9300      	str	r3, [sp, #0]
 80158a8:	68e2      	ldr	r2, [r4, #12]
 80158aa:	17db      	asrs	r3, r3, #31
 80158ac:	9301      	str	r3, [sp, #4]
 80158ae:	6923      	ldr	r3, [r4, #16]
 80158b0:	1e50      	subs	r0, r2, #1
 80158b2:	4ab5      	ldr	r2, [pc, #724]	; (8015b88 <mktime+0x308>)
 80158b4:	0099      	lsls	r1, r3, #2
 80158b6:	588a      	ldr	r2, [r1, r2]
 80158b8:	1882      	adds	r2, r0, r2
 80158ba:	9204      	str	r2, [sp, #16]
 80158bc:	6962      	ldr	r2, [r4, #20]
 80158be:	9203      	str	r2, [sp, #12]
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	dd14      	ble.n	80158ee <mktime+0x6e>
 80158c4:	0013      	movs	r3, r2
 80158c6:	079b      	lsls	r3, r3, #30
 80158c8:	d111      	bne.n	80158ee <mktime+0x6e>
 80158ca:	2164      	movs	r1, #100	; 0x64
 80158cc:	0010      	movs	r0, r2
 80158ce:	f7f2 fdb1 	bl	8008434 <__aeabi_idivmod>
 80158d2:	2900      	cmp	r1, #0
 80158d4:	d108      	bne.n	80158e8 <mktime+0x68>
 80158d6:	9b03      	ldr	r3, [sp, #12]
 80158d8:	4aac      	ldr	r2, [pc, #688]	; (8015b8c <mktime+0x30c>)
 80158da:	3191      	adds	r1, #145	; 0x91
 80158dc:	31ff      	adds	r1, #255	; 0xff
 80158de:	1898      	adds	r0, r3, r2
 80158e0:	f7f2 fda8 	bl	8008434 <__aeabi_idivmod>
 80158e4:	2900      	cmp	r1, #0
 80158e6:	d102      	bne.n	80158ee <mktime+0x6e>
 80158e8:	9b04      	ldr	r3, [sp, #16]
 80158ea:	3301      	adds	r3, #1
 80158ec:	9304      	str	r3, [sp, #16]
 80158ee:	9b04      	ldr	r3, [sp, #16]
 80158f0:	49a7      	ldr	r1, [pc, #668]	; (8015b90 <mktime+0x310>)
 80158f2:	61e3      	str	r3, [r4, #28]
 80158f4:	9b03      	ldr	r3, [sp, #12]
 80158f6:	4aa7      	ldr	r2, [pc, #668]	; (8015b94 <mktime+0x314>)
 80158f8:	185b      	adds	r3, r3, r1
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d900      	bls.n	8015900 <mktime+0x80>
 80158fe:	e174      	b.n	8015bea <mktime+0x36a>
 8015900:	9b03      	ldr	r3, [sp, #12]
 8015902:	2b46      	cmp	r3, #70	; 0x46
 8015904:	dc00      	bgt.n	8015908 <mktime+0x88>
 8015906:	e088      	b.n	8015a1a <mktime+0x19a>
 8015908:	26c8      	movs	r6, #200	; 0xc8
 801590a:	2546      	movs	r5, #70	; 0x46
 801590c:	0076      	lsls	r6, r6, #1
 801590e:	2303      	movs	r3, #3
 8015910:	421d      	tst	r5, r3
 8015912:	d000      	beq.n	8015916 <mktime+0x96>
 8015914:	e07f      	b.n	8015a16 <mktime+0x196>
 8015916:	2164      	movs	r1, #100	; 0x64
 8015918:	0028      	movs	r0, r5
 801591a:	f7f2 fd8b 	bl	8008434 <__aeabi_idivmod>
 801591e:	23b7      	movs	r3, #183	; 0xb7
 8015920:	005b      	lsls	r3, r3, #1
 8015922:	2900      	cmp	r1, #0
 8015924:	d108      	bne.n	8015938 <mktime+0xb8>
 8015926:	4b99      	ldr	r3, [pc, #612]	; (8015b8c <mktime+0x30c>)
 8015928:	0031      	movs	r1, r6
 801592a:	18e8      	adds	r0, r5, r3
 801592c:	f7f2 fd82 	bl	8008434 <__aeabi_idivmod>
 8015930:	424b      	negs	r3, r1
 8015932:	414b      	adcs	r3, r1
 8015934:	336e      	adds	r3, #110	; 0x6e
 8015936:	33ff      	adds	r3, #255	; 0xff
 8015938:	9a04      	ldr	r2, [sp, #16]
 801593a:	3501      	adds	r5, #1
 801593c:	18d3      	adds	r3, r2, r3
 801593e:	9304      	str	r3, [sp, #16]
 8015940:	9b03      	ldr	r3, [sp, #12]
 8015942:	42ab      	cmp	r3, r5
 8015944:	d1e3      	bne.n	801590e <mktime+0x8e>
 8015946:	9a04      	ldr	r2, [sp, #16]
 8015948:	4b93      	ldr	r3, [pc, #588]	; (8015b98 <mktime+0x318>)
 801594a:	4353      	muls	r3, r2
 801594c:	0018      	movs	r0, r3
 801594e:	17d9      	asrs	r1, r3, #31
 8015950:	9a00      	ldr	r2, [sp, #0]
 8015952:	9b01      	ldr	r3, [sp, #4]
 8015954:	1812      	adds	r2, r2, r0
 8015956:	414b      	adcs	r3, r1
 8015958:	9200      	str	r2, [sp, #0]
 801595a:	9301      	str	r3, [sp, #4]
 801595c:	f000 fdbc 	bl	80164d8 <__tz_lock>
 8015960:	f000 fdbc 	bl	80164dc <_tzset_unlocked>
 8015964:	4b8d      	ldr	r3, [pc, #564]	; (8015b9c <mktime+0x31c>)
 8015966:	681d      	ldr	r5, [r3, #0]
 8015968:	2d00      	cmp	r5, #0
 801596a:	d04c      	beq.n	8015a06 <mktime+0x186>
 801596c:	6963      	ldr	r3, [r4, #20]
 801596e:	4a87      	ldr	r2, [pc, #540]	; (8015b8c <mktime+0x30c>)
 8015970:	1898      	adds	r0, r3, r2
 8015972:	6a23      	ldr	r3, [r4, #32]
 8015974:	9305      	str	r3, [sp, #20]
 8015976:	9308      	str	r3, [sp, #32]
 8015978:	2b00      	cmp	r3, #0
 801597a:	dd01      	ble.n	8015980 <mktime+0x100>
 801597c:	2301      	movs	r3, #1
 801597e:	9308      	str	r3, [sp, #32]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	4283      	cmp	r3, r0
 8015984:	d000      	beq.n	8015988 <mktime+0x108>
 8015986:	e089      	b.n	8015a9c <mktime+0x21c>
 8015988:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801598a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801598c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801598e:	0002      	movs	r2, r0
 8015990:	9309      	str	r3, [sp, #36]	; 0x24
 8015992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015994:	9306      	str	r3, [sp, #24]
 8015996:	17db      	asrs	r3, r3, #31
 8015998:	9307      	str	r3, [sp, #28]
 801599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599c:	001d      	movs	r5, r3
 801599e:	17de      	asrs	r6, r3, #31
 80159a0:	469c      	mov	ip, r3
 80159a2:	000b      	movs	r3, r1
 80159a4:	1b52      	subs	r2, r2, r5
 80159a6:	41b3      	sbcs	r3, r6
 80159a8:	001e      	movs	r6, r3
 80159aa:	9b01      	ldr	r3, [sp, #4]
 80159ac:	0015      	movs	r5, r2
 80159ae:	429e      	cmp	r6, r3
 80159b0:	dc0e      	bgt.n	80159d0 <mktime+0x150>
 80159b2:	d102      	bne.n	80159ba <mktime+0x13a>
 80159b4:	9b00      	ldr	r3, [sp, #0]
 80159b6:	429d      	cmp	r5, r3
 80159b8:	d80a      	bhi.n	80159d0 <mktime+0x150>
 80159ba:	9a06      	ldr	r2, [sp, #24]
 80159bc:	9b07      	ldr	r3, [sp, #28]
 80159be:	1a80      	subs	r0, r0, r2
 80159c0:	4199      	sbcs	r1, r3
 80159c2:	9b01      	ldr	r3, [sp, #4]
 80159c4:	4299      	cmp	r1, r3
 80159c6:	dc6e      	bgt.n	8015aa6 <mktime+0x226>
 80159c8:	d102      	bne.n	80159d0 <mktime+0x150>
 80159ca:	9b00      	ldr	r3, [sp, #0]
 80159cc:	4298      	cmp	r0, r3
 80159ce:	d86a      	bhi.n	8015aa6 <mktime+0x226>
 80159d0:	9806      	ldr	r0, [sp, #24]
 80159d2:	9907      	ldr	r1, [sp, #28]
 80159d4:	6a3a      	ldr	r2, [r7, #32]
 80159d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d8:	1a12      	subs	r2, r2, r0
 80159da:	418b      	sbcs	r3, r1
 80159dc:	6839      	ldr	r1, [r7, #0]
 80159de:	2900      	cmp	r1, #0
 80159e0:	d063      	beq.n	8015aaa <mktime+0x22a>
 80159e2:	9901      	ldr	r1, [sp, #4]
 80159e4:	428b      	cmp	r3, r1
 80159e6:	dc0a      	bgt.n	80159fe <mktime+0x17e>
 80159e8:	d102      	bne.n	80159f0 <mktime+0x170>
 80159ea:	9900      	ldr	r1, [sp, #0]
 80159ec:	428a      	cmp	r2, r1
 80159ee:	d806      	bhi.n	80159fe <mktime+0x17e>
 80159f0:	9b01      	ldr	r3, [sp, #4]
 80159f2:	429e      	cmp	r6, r3
 80159f4:	dc60      	bgt.n	8015ab8 <mktime+0x238>
 80159f6:	d102      	bne.n	80159fe <mktime+0x17e>
 80159f8:	9b00      	ldr	r3, [sp, #0]
 80159fa:	429d      	cmp	r5, r3
 80159fc:	d85c      	bhi.n	8015ab8 <mktime+0x238>
 80159fe:	9b05      	ldr	r3, [sp, #20]
 8015a00:	2500      	movs	r5, #0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	da5c      	bge.n	8015ac0 <mktime+0x240>
 8015a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a08:	001e      	movs	r6, r3
 8015a0a:	17df      	asrs	r7, r3, #31
 8015a0c:	9a00      	ldr	r2, [sp, #0]
 8015a0e:	9b01      	ldr	r3, [sp, #4]
 8015a10:	18b6      	adds	r6, r6, r2
 8015a12:	415f      	adcs	r7, r3
 8015a14:	e0a6      	b.n	8015b64 <mktime+0x2e4>
 8015a16:	236e      	movs	r3, #110	; 0x6e
 8015a18:	e78d      	b.n	8015936 <mktime+0xb6>
 8015a1a:	9b03      	ldr	r3, [sp, #12]
 8015a1c:	2b46      	cmp	r3, #70	; 0x46
 8015a1e:	d092      	beq.n	8015946 <mktime+0xc6>
 8015a20:	26c8      	movs	r6, #200	; 0xc8
 8015a22:	2545      	movs	r5, #69	; 0x45
 8015a24:	0076      	lsls	r6, r6, #1
 8015a26:	e016      	b.n	8015a56 <mktime+0x1d6>
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d130      	bne.n	8015a8e <mktime+0x20e>
 8015a2c:	2164      	movs	r1, #100	; 0x64
 8015a2e:	0028      	movs	r0, r5
 8015a30:	f7f2 fd00 	bl	8008434 <__aeabi_idivmod>
 8015a34:	23b7      	movs	r3, #183	; 0xb7
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	2900      	cmp	r1, #0
 8015a3a:	d108      	bne.n	8015a4e <mktime+0x1ce>
 8015a3c:	4b53      	ldr	r3, [pc, #332]	; (8015b8c <mktime+0x30c>)
 8015a3e:	0031      	movs	r1, r6
 8015a40:	18e8      	adds	r0, r5, r3
 8015a42:	f7f2 fcf7 	bl	8008434 <__aeabi_idivmod>
 8015a46:	424b      	negs	r3, r1
 8015a48:	414b      	adcs	r3, r1
 8015a4a:	336e      	adds	r3, #110	; 0x6e
 8015a4c:	33ff      	adds	r3, #255	; 0xff
 8015a4e:	9a04      	ldr	r2, [sp, #16]
 8015a50:	3d01      	subs	r5, #1
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	9304      	str	r3, [sp, #16]
 8015a56:	2303      	movs	r3, #3
 8015a58:	9a03      	ldr	r2, [sp, #12]
 8015a5a:	402b      	ands	r3, r5
 8015a5c:	42aa      	cmp	r2, r5
 8015a5e:	dbe3      	blt.n	8015a28 <mktime+0x1a8>
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d116      	bne.n	8015a92 <mktime+0x212>
 8015a64:	2164      	movs	r1, #100	; 0x64
 8015a66:	0010      	movs	r0, r2
 8015a68:	f7f2 fce4 	bl	8008434 <__aeabi_idivmod>
 8015a6c:	2900      	cmp	r1, #0
 8015a6e:	d112      	bne.n	8015a96 <mktime+0x216>
 8015a70:	9b03      	ldr	r3, [sp, #12]
 8015a72:	4a46      	ldr	r2, [pc, #280]	; (8015b8c <mktime+0x30c>)
 8015a74:	3191      	adds	r1, #145	; 0x91
 8015a76:	1898      	adds	r0, r3, r2
 8015a78:	31ff      	adds	r1, #255	; 0xff
 8015a7a:	f7f2 fcdb 	bl	8008434 <__aeabi_idivmod>
 8015a7e:	424b      	negs	r3, r1
 8015a80:	4159      	adcs	r1, r3
 8015a82:	316e      	adds	r1, #110	; 0x6e
 8015a84:	31ff      	adds	r1, #255	; 0xff
 8015a86:	9b04      	ldr	r3, [sp, #16]
 8015a88:	1a5b      	subs	r3, r3, r1
 8015a8a:	9304      	str	r3, [sp, #16]
 8015a8c:	e75b      	b.n	8015946 <mktime+0xc6>
 8015a8e:	236e      	movs	r3, #110	; 0x6e
 8015a90:	e7dc      	b.n	8015a4c <mktime+0x1cc>
 8015a92:	216e      	movs	r1, #110	; 0x6e
 8015a94:	e7f6      	b.n	8015a84 <mktime+0x204>
 8015a96:	21b7      	movs	r1, #183	; 0xb7
 8015a98:	0049      	lsls	r1, r1, #1
 8015a9a:	e7f4      	b.n	8015a86 <mktime+0x206>
 8015a9c:	f000 fc6c 	bl	8016378 <__tzcalc_limits>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d000      	beq.n	8015aa6 <mktime+0x226>
 8015aa4:	e770      	b.n	8015988 <mktime+0x108>
 8015aa6:	9d08      	ldr	r5, [sp, #32]
 8015aa8:	e051      	b.n	8015b4e <mktime+0x2ce>
 8015aaa:	9901      	ldr	r1, [sp, #4]
 8015aac:	428b      	cmp	r3, r1
 8015aae:	dc9f      	bgt.n	80159f0 <mktime+0x170>
 8015ab0:	d102      	bne.n	8015ab8 <mktime+0x238>
 8015ab2:	9900      	ldr	r1, [sp, #0]
 8015ab4:	428a      	cmp	r2, r1
 8015ab6:	d89b      	bhi.n	80159f0 <mktime+0x170>
 8015ab8:	9b05      	ldr	r3, [sp, #20]
 8015aba:	2501      	movs	r5, #1
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	db49      	blt.n	8015b54 <mktime+0x2d4>
 8015ac0:	9e08      	ldr	r6, [sp, #32]
 8015ac2:	406e      	eors	r6, r5
 8015ac4:	2e01      	cmp	r6, #1
 8015ac6:	d142      	bne.n	8015b4e <mktime+0x2ce>
 8015ac8:	4663      	mov	r3, ip
 8015aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015acc:	1a9b      	subs	r3, r3, r2
 8015ace:	2d00      	cmp	r5, #0
 8015ad0:	d100      	bne.n	8015ad4 <mktime+0x254>
 8015ad2:	425b      	negs	r3, r3
 8015ad4:	0018      	movs	r0, r3
 8015ad6:	6822      	ldr	r2, [r4, #0]
 8015ad8:	17d9      	asrs	r1, r3, #31
 8015ada:	18d2      	adds	r2, r2, r3
 8015adc:	6022      	str	r2, [r4, #0]
 8015ade:	9a00      	ldr	r2, [sp, #0]
 8015ae0:	9b01      	ldr	r3, [sp, #4]
 8015ae2:	1812      	adds	r2, r2, r0
 8015ae4:	414b      	adcs	r3, r1
 8015ae6:	9200      	str	r2, [sp, #0]
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	68e3      	ldr	r3, [r4, #12]
 8015aec:	0020      	movs	r0, r4
 8015aee:	9305      	str	r3, [sp, #20]
 8015af0:	f7ff fdfc 	bl	80156ec <validate_structure>
 8015af4:	68e3      	ldr	r3, [r4, #12]
 8015af6:	9a05      	ldr	r2, [sp, #20]
 8015af8:	1a9b      	subs	r3, r3, r2
 8015afa:	d028      	beq.n	8015b4e <mktime+0x2ce>
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	dc20      	bgt.n	8015b42 <mktime+0x2c2>
 8015b00:	1c5a      	adds	r2, r3, #1
 8015b02:	db00      	blt.n	8015b06 <mktime+0x286>
 8015b04:	001e      	movs	r6, r3
 8015b06:	9b04      	ldr	r3, [sp, #16]
 8015b08:	69e2      	ldr	r2, [r4, #28]
 8015b0a:	199b      	adds	r3, r3, r6
 8015b0c:	9304      	str	r3, [sp, #16]
 8015b0e:	2303      	movs	r3, #3
 8015b10:	18b6      	adds	r6, r6, r2
 8015b12:	d547      	bpl.n	8015ba4 <mktime+0x324>
 8015b14:	9a03      	ldr	r2, [sp, #12]
 8015b16:	1e50      	subs	r0, r2, #1
 8015b18:	4218      	tst	r0, r3
 8015b1a:	d115      	bne.n	8015b48 <mktime+0x2c8>
 8015b1c:	2164      	movs	r1, #100	; 0x64
 8015b1e:	f7f2 fc89 	bl	8008434 <__aeabi_idivmod>
 8015b22:	2900      	cmp	r1, #0
 8015b24:	d12d      	bne.n	8015b82 <mktime+0x302>
 8015b26:	4a1e      	ldr	r2, [pc, #120]	; (8015ba0 <mktime+0x320>)
 8015b28:	9b03      	ldr	r3, [sp, #12]
 8015b2a:	4694      	mov	ip, r2
 8015b2c:	3191      	adds	r1, #145	; 0x91
 8015b2e:	4463      	add	r3, ip
 8015b30:	0018      	movs	r0, r3
 8015b32:	31ff      	adds	r1, #255	; 0xff
 8015b34:	f7f2 fc7e 	bl	8008434 <__aeabi_idivmod>
 8015b38:	424b      	negs	r3, r1
 8015b3a:	4159      	adcs	r1, r3
 8015b3c:	316d      	adds	r1, #109	; 0x6d
 8015b3e:	31ff      	adds	r1, #255	; 0xff
 8015b40:	e004      	b.n	8015b4c <mktime+0x2cc>
 8015b42:	2601      	movs	r6, #1
 8015b44:	4276      	negs	r6, r6
 8015b46:	e7de      	b.n	8015b06 <mktime+0x286>
 8015b48:	21b6      	movs	r1, #182	; 0xb6
 8015b4a:	0049      	lsls	r1, r1, #1
 8015b4c:	61e1      	str	r1, [r4, #28]
 8015b4e:	2d01      	cmp	r5, #1
 8015b50:	d000      	beq.n	8015b54 <mktime+0x2d4>
 8015b52:	e758      	b.n	8015a06 <mktime+0x186>
 8015b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b56:	2501      	movs	r5, #1
 8015b58:	001e      	movs	r6, r3
 8015b5a:	17df      	asrs	r7, r3, #31
 8015b5c:	9a00      	ldr	r2, [sp, #0]
 8015b5e:	9b01      	ldr	r3, [sp, #4]
 8015b60:	18b6      	adds	r6, r6, r2
 8015b62:	415f      	adcs	r7, r3
 8015b64:	f000 fcb9 	bl	80164da <__tz_unlock>
 8015b68:	9804      	ldr	r0, [sp, #16]
 8015b6a:	6225      	str	r5, [r4, #32]
 8015b6c:	3004      	adds	r0, #4
 8015b6e:	2107      	movs	r1, #7
 8015b70:	f7f2 fc60 	bl	8008434 <__aeabi_idivmod>
 8015b74:	2900      	cmp	r1, #0
 8015b76:	db36      	blt.n	8015be6 <mktime+0x366>
 8015b78:	61a1      	str	r1, [r4, #24]
 8015b7a:	0030      	movs	r0, r6
 8015b7c:	0039      	movs	r1, r7
 8015b7e:	b00b      	add	sp, #44	; 0x2c
 8015b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b82:	216e      	movs	r1, #110	; 0x6e
 8015b84:	e7db      	b.n	8015b3e <mktime+0x2be>
 8015b86:	46c0      	nop			; (mov r8, r8)
 8015b88:	080198a4 	.word	0x080198a4
 8015b8c:	0000076c 	.word	0x0000076c
 8015b90:	00002710 	.word	0x00002710
 8015b94:	00004e20 	.word	0x00004e20
 8015b98:	00015180 	.word	0x00015180
 8015b9c:	20001ac4 	.word	0x20001ac4
 8015ba0:	0000076b 	.word	0x0000076b
 8015ba4:	9a03      	ldr	r2, [sp, #12]
 8015ba6:	421a      	tst	r2, r3
 8015ba8:	d116      	bne.n	8015bd8 <mktime+0x358>
 8015baa:	2164      	movs	r1, #100	; 0x64
 8015bac:	0010      	movs	r0, r2
 8015bae:	f7f2 fc41 	bl	8008434 <__aeabi_idivmod>
 8015bb2:	2900      	cmp	r1, #0
 8015bb4:	d112      	bne.n	8015bdc <mktime+0x35c>
 8015bb6:	4a0f      	ldr	r2, [pc, #60]	; (8015bf4 <mktime+0x374>)
 8015bb8:	9b03      	ldr	r3, [sp, #12]
 8015bba:	4694      	mov	ip, r2
 8015bbc:	3191      	adds	r1, #145	; 0x91
 8015bbe:	4463      	add	r3, ip
 8015bc0:	0018      	movs	r0, r3
 8015bc2:	31ff      	adds	r1, #255	; 0xff
 8015bc4:	f7f2 fc36 	bl	8008434 <__aeabi_idivmod>
 8015bc8:	424b      	negs	r3, r1
 8015bca:	4159      	adcs	r1, r3
 8015bcc:	316e      	adds	r1, #110	; 0x6e
 8015bce:	31ff      	adds	r1, #255	; 0xff
 8015bd0:	428e      	cmp	r6, r1
 8015bd2:	da06      	bge.n	8015be2 <mktime+0x362>
 8015bd4:	61e6      	str	r6, [r4, #28]
 8015bd6:	e7ba      	b.n	8015b4e <mktime+0x2ce>
 8015bd8:	216e      	movs	r1, #110	; 0x6e
 8015bda:	e7f8      	b.n	8015bce <mktime+0x34e>
 8015bdc:	21b7      	movs	r1, #183	; 0xb7
 8015bde:	0049      	lsls	r1, r1, #1
 8015be0:	e7f6      	b.n	8015bd0 <mktime+0x350>
 8015be2:	1a76      	subs	r6, r6, r1
 8015be4:	e7f6      	b.n	8015bd4 <mktime+0x354>
 8015be6:	3107      	adds	r1, #7
 8015be8:	e7c6      	b.n	8015b78 <mktime+0x2f8>
 8015bea:	2601      	movs	r6, #1
 8015bec:	4276      	negs	r6, r6
 8015bee:	17f7      	asrs	r7, r6, #31
 8015bf0:	e7c3      	b.n	8015b7a <mktime+0x2fa>
 8015bf2:	46c0      	nop			; (mov r8, r8)
 8015bf4:	0000076c 	.word	0x0000076c

08015bf8 <_free_r>:
 8015bf8:	b570      	push	{r4, r5, r6, lr}
 8015bfa:	0005      	movs	r5, r0
 8015bfc:	2900      	cmp	r1, #0
 8015bfe:	d010      	beq.n	8015c22 <_free_r+0x2a>
 8015c00:	1f0c      	subs	r4, r1, #4
 8015c02:	6823      	ldr	r3, [r4, #0]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	da00      	bge.n	8015c0a <_free_r+0x12>
 8015c08:	18e4      	adds	r4, r4, r3
 8015c0a:	0028      	movs	r0, r5
 8015c0c:	f001 f925 	bl	8016e5a <__malloc_lock>
 8015c10:	4a1d      	ldr	r2, [pc, #116]	; (8015c88 <_free_r+0x90>)
 8015c12:	6813      	ldr	r3, [r2, #0]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d105      	bne.n	8015c24 <_free_r+0x2c>
 8015c18:	6063      	str	r3, [r4, #4]
 8015c1a:	6014      	str	r4, [r2, #0]
 8015c1c:	0028      	movs	r0, r5
 8015c1e:	f001 f91d 	bl	8016e5c <__malloc_unlock>
 8015c22:	bd70      	pop	{r4, r5, r6, pc}
 8015c24:	42a3      	cmp	r3, r4
 8015c26:	d909      	bls.n	8015c3c <_free_r+0x44>
 8015c28:	6821      	ldr	r1, [r4, #0]
 8015c2a:	1860      	adds	r0, r4, r1
 8015c2c:	4283      	cmp	r3, r0
 8015c2e:	d1f3      	bne.n	8015c18 <_free_r+0x20>
 8015c30:	6818      	ldr	r0, [r3, #0]
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	1841      	adds	r1, r0, r1
 8015c36:	6021      	str	r1, [r4, #0]
 8015c38:	e7ee      	b.n	8015c18 <_free_r+0x20>
 8015c3a:	0013      	movs	r3, r2
 8015c3c:	685a      	ldr	r2, [r3, #4]
 8015c3e:	2a00      	cmp	r2, #0
 8015c40:	d001      	beq.n	8015c46 <_free_r+0x4e>
 8015c42:	42a2      	cmp	r2, r4
 8015c44:	d9f9      	bls.n	8015c3a <_free_r+0x42>
 8015c46:	6819      	ldr	r1, [r3, #0]
 8015c48:	1858      	adds	r0, r3, r1
 8015c4a:	42a0      	cmp	r0, r4
 8015c4c:	d10b      	bne.n	8015c66 <_free_r+0x6e>
 8015c4e:	6820      	ldr	r0, [r4, #0]
 8015c50:	1809      	adds	r1, r1, r0
 8015c52:	1858      	adds	r0, r3, r1
 8015c54:	6019      	str	r1, [r3, #0]
 8015c56:	4282      	cmp	r2, r0
 8015c58:	d1e0      	bne.n	8015c1c <_free_r+0x24>
 8015c5a:	6810      	ldr	r0, [r2, #0]
 8015c5c:	6852      	ldr	r2, [r2, #4]
 8015c5e:	1841      	adds	r1, r0, r1
 8015c60:	6019      	str	r1, [r3, #0]
 8015c62:	605a      	str	r2, [r3, #4]
 8015c64:	e7da      	b.n	8015c1c <_free_r+0x24>
 8015c66:	42a0      	cmp	r0, r4
 8015c68:	d902      	bls.n	8015c70 <_free_r+0x78>
 8015c6a:	230c      	movs	r3, #12
 8015c6c:	602b      	str	r3, [r5, #0]
 8015c6e:	e7d5      	b.n	8015c1c <_free_r+0x24>
 8015c70:	6821      	ldr	r1, [r4, #0]
 8015c72:	1860      	adds	r0, r4, r1
 8015c74:	4282      	cmp	r2, r0
 8015c76:	d103      	bne.n	8015c80 <_free_r+0x88>
 8015c78:	6810      	ldr	r0, [r2, #0]
 8015c7a:	6852      	ldr	r2, [r2, #4]
 8015c7c:	1841      	adds	r1, r0, r1
 8015c7e:	6021      	str	r1, [r4, #0]
 8015c80:	6062      	str	r2, [r4, #4]
 8015c82:	605c      	str	r4, [r3, #4]
 8015c84:	e7ca      	b.n	8015c1c <_free_r+0x24>
 8015c86:	46c0      	nop			; (mov r8, r8)
 8015c88:	20001aa0 	.word	0x20001aa0

08015c8c <_malloc_r>:
 8015c8c:	2303      	movs	r3, #3
 8015c8e:	b570      	push	{r4, r5, r6, lr}
 8015c90:	1ccd      	adds	r5, r1, #3
 8015c92:	439d      	bics	r5, r3
 8015c94:	3508      	adds	r5, #8
 8015c96:	0006      	movs	r6, r0
 8015c98:	2d0c      	cmp	r5, #12
 8015c9a:	d21e      	bcs.n	8015cda <_malloc_r+0x4e>
 8015c9c:	250c      	movs	r5, #12
 8015c9e:	42a9      	cmp	r1, r5
 8015ca0:	d81d      	bhi.n	8015cde <_malloc_r+0x52>
 8015ca2:	0030      	movs	r0, r6
 8015ca4:	f001 f8d9 	bl	8016e5a <__malloc_lock>
 8015ca8:	4a25      	ldr	r2, [pc, #148]	; (8015d40 <_malloc_r+0xb4>)
 8015caa:	6814      	ldr	r4, [r2, #0]
 8015cac:	0021      	movs	r1, r4
 8015cae:	2900      	cmp	r1, #0
 8015cb0:	d119      	bne.n	8015ce6 <_malloc_r+0x5a>
 8015cb2:	4c24      	ldr	r4, [pc, #144]	; (8015d44 <_malloc_r+0xb8>)
 8015cb4:	6823      	ldr	r3, [r4, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d103      	bne.n	8015cc2 <_malloc_r+0x36>
 8015cba:	0030      	movs	r0, r6
 8015cbc:	f000 faf8 	bl	80162b0 <_sbrk_r>
 8015cc0:	6020      	str	r0, [r4, #0]
 8015cc2:	0029      	movs	r1, r5
 8015cc4:	0030      	movs	r0, r6
 8015cc6:	f000 faf3 	bl	80162b0 <_sbrk_r>
 8015cca:	1c43      	adds	r3, r0, #1
 8015ccc:	d12b      	bne.n	8015d26 <_malloc_r+0x9a>
 8015cce:	230c      	movs	r3, #12
 8015cd0:	0030      	movs	r0, r6
 8015cd2:	6033      	str	r3, [r6, #0]
 8015cd4:	f001 f8c2 	bl	8016e5c <__malloc_unlock>
 8015cd8:	e003      	b.n	8015ce2 <_malloc_r+0x56>
 8015cda:	2d00      	cmp	r5, #0
 8015cdc:	dadf      	bge.n	8015c9e <_malloc_r+0x12>
 8015cde:	230c      	movs	r3, #12
 8015ce0:	6033      	str	r3, [r6, #0]
 8015ce2:	2000      	movs	r0, #0
 8015ce4:	bd70      	pop	{r4, r5, r6, pc}
 8015ce6:	680b      	ldr	r3, [r1, #0]
 8015ce8:	1b5b      	subs	r3, r3, r5
 8015cea:	d419      	bmi.n	8015d20 <_malloc_r+0x94>
 8015cec:	2b0b      	cmp	r3, #11
 8015cee:	d903      	bls.n	8015cf8 <_malloc_r+0x6c>
 8015cf0:	600b      	str	r3, [r1, #0]
 8015cf2:	18cc      	adds	r4, r1, r3
 8015cf4:	6025      	str	r5, [r4, #0]
 8015cf6:	e003      	b.n	8015d00 <_malloc_r+0x74>
 8015cf8:	684b      	ldr	r3, [r1, #4]
 8015cfa:	428c      	cmp	r4, r1
 8015cfc:	d10d      	bne.n	8015d1a <_malloc_r+0x8e>
 8015cfe:	6013      	str	r3, [r2, #0]
 8015d00:	0030      	movs	r0, r6
 8015d02:	f001 f8ab 	bl	8016e5c <__malloc_unlock>
 8015d06:	0020      	movs	r0, r4
 8015d08:	2207      	movs	r2, #7
 8015d0a:	300b      	adds	r0, #11
 8015d0c:	1d23      	adds	r3, r4, #4
 8015d0e:	4390      	bics	r0, r2
 8015d10:	1ac3      	subs	r3, r0, r3
 8015d12:	d0e7      	beq.n	8015ce4 <_malloc_r+0x58>
 8015d14:	425a      	negs	r2, r3
 8015d16:	50e2      	str	r2, [r4, r3]
 8015d18:	e7e4      	b.n	8015ce4 <_malloc_r+0x58>
 8015d1a:	6063      	str	r3, [r4, #4]
 8015d1c:	000c      	movs	r4, r1
 8015d1e:	e7ef      	b.n	8015d00 <_malloc_r+0x74>
 8015d20:	000c      	movs	r4, r1
 8015d22:	6849      	ldr	r1, [r1, #4]
 8015d24:	e7c3      	b.n	8015cae <_malloc_r+0x22>
 8015d26:	2303      	movs	r3, #3
 8015d28:	1cc4      	adds	r4, r0, #3
 8015d2a:	439c      	bics	r4, r3
 8015d2c:	42a0      	cmp	r0, r4
 8015d2e:	d0e1      	beq.n	8015cf4 <_malloc_r+0x68>
 8015d30:	1a21      	subs	r1, r4, r0
 8015d32:	0030      	movs	r0, r6
 8015d34:	f000 fabc 	bl	80162b0 <_sbrk_r>
 8015d38:	1c43      	adds	r3, r0, #1
 8015d3a:	d1db      	bne.n	8015cf4 <_malloc_r+0x68>
 8015d3c:	e7c7      	b.n	8015cce <_malloc_r+0x42>
 8015d3e:	46c0      	nop			; (mov r8, r8)
 8015d40:	20001aa0 	.word	0x20001aa0
 8015d44:	20001aa4 	.word	0x20001aa4

08015d48 <__sfputc_r>:
 8015d48:	6893      	ldr	r3, [r2, #8]
 8015d4a:	b510      	push	{r4, lr}
 8015d4c:	3b01      	subs	r3, #1
 8015d4e:	6093      	str	r3, [r2, #8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	da04      	bge.n	8015d5e <__sfputc_r+0x16>
 8015d54:	6994      	ldr	r4, [r2, #24]
 8015d56:	42a3      	cmp	r3, r4
 8015d58:	db07      	blt.n	8015d6a <__sfputc_r+0x22>
 8015d5a:	290a      	cmp	r1, #10
 8015d5c:	d005      	beq.n	8015d6a <__sfputc_r+0x22>
 8015d5e:	6813      	ldr	r3, [r2, #0]
 8015d60:	1c58      	adds	r0, r3, #1
 8015d62:	6010      	str	r0, [r2, #0]
 8015d64:	7019      	strb	r1, [r3, #0]
 8015d66:	0008      	movs	r0, r1
 8015d68:	bd10      	pop	{r4, pc}
 8015d6a:	f000 fd3d 	bl	80167e8 <__swbuf_r>
 8015d6e:	0001      	movs	r1, r0
 8015d70:	e7f9      	b.n	8015d66 <__sfputc_r+0x1e>

08015d72 <__sfputs_r>:
 8015d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d74:	0006      	movs	r6, r0
 8015d76:	000f      	movs	r7, r1
 8015d78:	0014      	movs	r4, r2
 8015d7a:	18d5      	adds	r5, r2, r3
 8015d7c:	42ac      	cmp	r4, r5
 8015d7e:	d101      	bne.n	8015d84 <__sfputs_r+0x12>
 8015d80:	2000      	movs	r0, #0
 8015d82:	e007      	b.n	8015d94 <__sfputs_r+0x22>
 8015d84:	7821      	ldrb	r1, [r4, #0]
 8015d86:	003a      	movs	r2, r7
 8015d88:	0030      	movs	r0, r6
 8015d8a:	f7ff ffdd 	bl	8015d48 <__sfputc_r>
 8015d8e:	3401      	adds	r4, #1
 8015d90:	1c43      	adds	r3, r0, #1
 8015d92:	d1f3      	bne.n	8015d7c <__sfputs_r+0xa>
 8015d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d98 <_vfiprintf_r>:
 8015d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d9a:	b0a1      	sub	sp, #132	; 0x84
 8015d9c:	9003      	str	r0, [sp, #12]
 8015d9e:	000f      	movs	r7, r1
 8015da0:	0016      	movs	r6, r2
 8015da2:	001d      	movs	r5, r3
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d005      	beq.n	8015db4 <_vfiprintf_r+0x1c>
 8015da8:	6983      	ldr	r3, [r0, #24]
 8015daa:	9305      	str	r3, [sp, #20]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <_vfiprintf_r+0x1c>
 8015db0:	f000 ff02 	bl	8016bb8 <__sinit>
 8015db4:	4b7b      	ldr	r3, [pc, #492]	; (8015fa4 <_vfiprintf_r+0x20c>)
 8015db6:	429f      	cmp	r7, r3
 8015db8:	d15c      	bne.n	8015e74 <_vfiprintf_r+0xdc>
 8015dba:	9b03      	ldr	r3, [sp, #12]
 8015dbc:	685f      	ldr	r7, [r3, #4]
 8015dbe:	89bb      	ldrh	r3, [r7, #12]
 8015dc0:	071b      	lsls	r3, r3, #28
 8015dc2:	d563      	bpl.n	8015e8c <_vfiprintf_r+0xf4>
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d060      	beq.n	8015e8c <_vfiprintf_r+0xf4>
 8015dca:	2300      	movs	r3, #0
 8015dcc:	ac08      	add	r4, sp, #32
 8015dce:	6163      	str	r3, [r4, #20]
 8015dd0:	3320      	adds	r3, #32
 8015dd2:	7663      	strb	r3, [r4, #25]
 8015dd4:	3310      	adds	r3, #16
 8015dd6:	76a3      	strb	r3, [r4, #26]
 8015dd8:	9507      	str	r5, [sp, #28]
 8015dda:	0035      	movs	r5, r6
 8015ddc:	782b      	ldrb	r3, [r5, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d001      	beq.n	8015de6 <_vfiprintf_r+0x4e>
 8015de2:	2b25      	cmp	r3, #37	; 0x25
 8015de4:	d15c      	bne.n	8015ea0 <_vfiprintf_r+0x108>
 8015de6:	1bab      	subs	r3, r5, r6
 8015de8:	9305      	str	r3, [sp, #20]
 8015dea:	d00c      	beq.n	8015e06 <_vfiprintf_r+0x6e>
 8015dec:	0032      	movs	r2, r6
 8015dee:	0039      	movs	r1, r7
 8015df0:	9803      	ldr	r0, [sp, #12]
 8015df2:	f7ff ffbe 	bl	8015d72 <__sfputs_r>
 8015df6:	1c43      	adds	r3, r0, #1
 8015df8:	d100      	bne.n	8015dfc <_vfiprintf_r+0x64>
 8015dfa:	e0c4      	b.n	8015f86 <_vfiprintf_r+0x1ee>
 8015dfc:	6962      	ldr	r2, [r4, #20]
 8015dfe:	9b05      	ldr	r3, [sp, #20]
 8015e00:	4694      	mov	ip, r2
 8015e02:	4463      	add	r3, ip
 8015e04:	6163      	str	r3, [r4, #20]
 8015e06:	782b      	ldrb	r3, [r5, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d100      	bne.n	8015e0e <_vfiprintf_r+0x76>
 8015e0c:	e0bb      	b.n	8015f86 <_vfiprintf_r+0x1ee>
 8015e0e:	2201      	movs	r2, #1
 8015e10:	2300      	movs	r3, #0
 8015e12:	4252      	negs	r2, r2
 8015e14:	6062      	str	r2, [r4, #4]
 8015e16:	a904      	add	r1, sp, #16
 8015e18:	3254      	adds	r2, #84	; 0x54
 8015e1a:	1852      	adds	r2, r2, r1
 8015e1c:	1c6e      	adds	r6, r5, #1
 8015e1e:	6023      	str	r3, [r4, #0]
 8015e20:	60e3      	str	r3, [r4, #12]
 8015e22:	60a3      	str	r3, [r4, #8]
 8015e24:	7013      	strb	r3, [r2, #0]
 8015e26:	65a3      	str	r3, [r4, #88]	; 0x58
 8015e28:	7831      	ldrb	r1, [r6, #0]
 8015e2a:	2205      	movs	r2, #5
 8015e2c:	485e      	ldr	r0, [pc, #376]	; (8015fa8 <_vfiprintf_r+0x210>)
 8015e2e:	f001 f809 	bl	8016e44 <memchr>
 8015e32:	1c75      	adds	r5, r6, #1
 8015e34:	2800      	cmp	r0, #0
 8015e36:	d135      	bne.n	8015ea4 <_vfiprintf_r+0x10c>
 8015e38:	6822      	ldr	r2, [r4, #0]
 8015e3a:	06d3      	lsls	r3, r2, #27
 8015e3c:	d504      	bpl.n	8015e48 <_vfiprintf_r+0xb0>
 8015e3e:	2353      	movs	r3, #83	; 0x53
 8015e40:	a904      	add	r1, sp, #16
 8015e42:	185b      	adds	r3, r3, r1
 8015e44:	2120      	movs	r1, #32
 8015e46:	7019      	strb	r1, [r3, #0]
 8015e48:	0713      	lsls	r3, r2, #28
 8015e4a:	d504      	bpl.n	8015e56 <_vfiprintf_r+0xbe>
 8015e4c:	2353      	movs	r3, #83	; 0x53
 8015e4e:	a904      	add	r1, sp, #16
 8015e50:	185b      	adds	r3, r3, r1
 8015e52:	212b      	movs	r1, #43	; 0x2b
 8015e54:	7019      	strb	r1, [r3, #0]
 8015e56:	7833      	ldrb	r3, [r6, #0]
 8015e58:	2b2a      	cmp	r3, #42	; 0x2a
 8015e5a:	d02c      	beq.n	8015eb6 <_vfiprintf_r+0x11e>
 8015e5c:	0035      	movs	r5, r6
 8015e5e:	2100      	movs	r1, #0
 8015e60:	200a      	movs	r0, #10
 8015e62:	68e3      	ldr	r3, [r4, #12]
 8015e64:	782a      	ldrb	r2, [r5, #0]
 8015e66:	1c6e      	adds	r6, r5, #1
 8015e68:	3a30      	subs	r2, #48	; 0x30
 8015e6a:	2a09      	cmp	r2, #9
 8015e6c:	d964      	bls.n	8015f38 <_vfiprintf_r+0x1a0>
 8015e6e:	2900      	cmp	r1, #0
 8015e70:	d02e      	beq.n	8015ed0 <_vfiprintf_r+0x138>
 8015e72:	e026      	b.n	8015ec2 <_vfiprintf_r+0x12a>
 8015e74:	4b4d      	ldr	r3, [pc, #308]	; (8015fac <_vfiprintf_r+0x214>)
 8015e76:	429f      	cmp	r7, r3
 8015e78:	d102      	bne.n	8015e80 <_vfiprintf_r+0xe8>
 8015e7a:	9b03      	ldr	r3, [sp, #12]
 8015e7c:	689f      	ldr	r7, [r3, #8]
 8015e7e:	e79e      	b.n	8015dbe <_vfiprintf_r+0x26>
 8015e80:	4b4b      	ldr	r3, [pc, #300]	; (8015fb0 <_vfiprintf_r+0x218>)
 8015e82:	429f      	cmp	r7, r3
 8015e84:	d19b      	bne.n	8015dbe <_vfiprintf_r+0x26>
 8015e86:	9b03      	ldr	r3, [sp, #12]
 8015e88:	68df      	ldr	r7, [r3, #12]
 8015e8a:	e798      	b.n	8015dbe <_vfiprintf_r+0x26>
 8015e8c:	0039      	movs	r1, r7
 8015e8e:	9803      	ldr	r0, [sp, #12]
 8015e90:	f000 fd0c 	bl	80168ac <__swsetup_r>
 8015e94:	2800      	cmp	r0, #0
 8015e96:	d098      	beq.n	8015dca <_vfiprintf_r+0x32>
 8015e98:	2001      	movs	r0, #1
 8015e9a:	4240      	negs	r0, r0
 8015e9c:	b021      	add	sp, #132	; 0x84
 8015e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ea0:	3501      	adds	r5, #1
 8015ea2:	e79b      	b.n	8015ddc <_vfiprintf_r+0x44>
 8015ea4:	4b40      	ldr	r3, [pc, #256]	; (8015fa8 <_vfiprintf_r+0x210>)
 8015ea6:	6822      	ldr	r2, [r4, #0]
 8015ea8:	1ac0      	subs	r0, r0, r3
 8015eaa:	2301      	movs	r3, #1
 8015eac:	4083      	lsls	r3, r0
 8015eae:	4313      	orrs	r3, r2
 8015eb0:	6023      	str	r3, [r4, #0]
 8015eb2:	002e      	movs	r6, r5
 8015eb4:	e7b8      	b.n	8015e28 <_vfiprintf_r+0x90>
 8015eb6:	9b07      	ldr	r3, [sp, #28]
 8015eb8:	1d19      	adds	r1, r3, #4
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	9107      	str	r1, [sp, #28]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	db01      	blt.n	8015ec6 <_vfiprintf_r+0x12e>
 8015ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ec4:	e004      	b.n	8015ed0 <_vfiprintf_r+0x138>
 8015ec6:	425b      	negs	r3, r3
 8015ec8:	60e3      	str	r3, [r4, #12]
 8015eca:	2302      	movs	r3, #2
 8015ecc:	4313      	orrs	r3, r2
 8015ece:	6023      	str	r3, [r4, #0]
 8015ed0:	782b      	ldrb	r3, [r5, #0]
 8015ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8015ed4:	d10a      	bne.n	8015eec <_vfiprintf_r+0x154>
 8015ed6:	786b      	ldrb	r3, [r5, #1]
 8015ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8015eda:	d135      	bne.n	8015f48 <_vfiprintf_r+0x1b0>
 8015edc:	9b07      	ldr	r3, [sp, #28]
 8015ede:	3502      	adds	r5, #2
 8015ee0:	1d1a      	adds	r2, r3, #4
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	9207      	str	r2, [sp, #28]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	db2b      	blt.n	8015f42 <_vfiprintf_r+0x1aa>
 8015eea:	9309      	str	r3, [sp, #36]	; 0x24
 8015eec:	4e31      	ldr	r6, [pc, #196]	; (8015fb4 <_vfiprintf_r+0x21c>)
 8015eee:	7829      	ldrb	r1, [r5, #0]
 8015ef0:	2203      	movs	r2, #3
 8015ef2:	0030      	movs	r0, r6
 8015ef4:	f000 ffa6 	bl	8016e44 <memchr>
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	d006      	beq.n	8015f0a <_vfiprintf_r+0x172>
 8015efc:	2340      	movs	r3, #64	; 0x40
 8015efe:	1b80      	subs	r0, r0, r6
 8015f00:	4083      	lsls	r3, r0
 8015f02:	6822      	ldr	r2, [r4, #0]
 8015f04:	3501      	adds	r5, #1
 8015f06:	4313      	orrs	r3, r2
 8015f08:	6023      	str	r3, [r4, #0]
 8015f0a:	7829      	ldrb	r1, [r5, #0]
 8015f0c:	2206      	movs	r2, #6
 8015f0e:	482a      	ldr	r0, [pc, #168]	; (8015fb8 <_vfiprintf_r+0x220>)
 8015f10:	1c6e      	adds	r6, r5, #1
 8015f12:	7621      	strb	r1, [r4, #24]
 8015f14:	f000 ff96 	bl	8016e44 <memchr>
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	d03a      	beq.n	8015f92 <_vfiprintf_r+0x1fa>
 8015f1c:	4b27      	ldr	r3, [pc, #156]	; (8015fbc <_vfiprintf_r+0x224>)
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d125      	bne.n	8015f6e <_vfiprintf_r+0x1d6>
 8015f22:	2207      	movs	r2, #7
 8015f24:	9b07      	ldr	r3, [sp, #28]
 8015f26:	3307      	adds	r3, #7
 8015f28:	4393      	bics	r3, r2
 8015f2a:	3308      	adds	r3, #8
 8015f2c:	9307      	str	r3, [sp, #28]
 8015f2e:	6963      	ldr	r3, [r4, #20]
 8015f30:	9a04      	ldr	r2, [sp, #16]
 8015f32:	189b      	adds	r3, r3, r2
 8015f34:	6163      	str	r3, [r4, #20]
 8015f36:	e750      	b.n	8015dda <_vfiprintf_r+0x42>
 8015f38:	4343      	muls	r3, r0
 8015f3a:	2101      	movs	r1, #1
 8015f3c:	189b      	adds	r3, r3, r2
 8015f3e:	0035      	movs	r5, r6
 8015f40:	e790      	b.n	8015e64 <_vfiprintf_r+0xcc>
 8015f42:	2301      	movs	r3, #1
 8015f44:	425b      	negs	r3, r3
 8015f46:	e7d0      	b.n	8015eea <_vfiprintf_r+0x152>
 8015f48:	2300      	movs	r3, #0
 8015f4a:	200a      	movs	r0, #10
 8015f4c:	001a      	movs	r2, r3
 8015f4e:	3501      	adds	r5, #1
 8015f50:	6063      	str	r3, [r4, #4]
 8015f52:	7829      	ldrb	r1, [r5, #0]
 8015f54:	1c6e      	adds	r6, r5, #1
 8015f56:	3930      	subs	r1, #48	; 0x30
 8015f58:	2909      	cmp	r1, #9
 8015f5a:	d903      	bls.n	8015f64 <_vfiprintf_r+0x1cc>
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d0c5      	beq.n	8015eec <_vfiprintf_r+0x154>
 8015f60:	9209      	str	r2, [sp, #36]	; 0x24
 8015f62:	e7c3      	b.n	8015eec <_vfiprintf_r+0x154>
 8015f64:	4342      	muls	r2, r0
 8015f66:	2301      	movs	r3, #1
 8015f68:	1852      	adds	r2, r2, r1
 8015f6a:	0035      	movs	r5, r6
 8015f6c:	e7f1      	b.n	8015f52 <_vfiprintf_r+0x1ba>
 8015f6e:	ab07      	add	r3, sp, #28
 8015f70:	9300      	str	r3, [sp, #0]
 8015f72:	003a      	movs	r2, r7
 8015f74:	4b12      	ldr	r3, [pc, #72]	; (8015fc0 <_vfiprintf_r+0x228>)
 8015f76:	0021      	movs	r1, r4
 8015f78:	9803      	ldr	r0, [sp, #12]
 8015f7a:	e000      	b.n	8015f7e <_vfiprintf_r+0x1e6>
 8015f7c:	bf00      	nop
 8015f7e:	9004      	str	r0, [sp, #16]
 8015f80:	9b04      	ldr	r3, [sp, #16]
 8015f82:	3301      	adds	r3, #1
 8015f84:	d1d3      	bne.n	8015f2e <_vfiprintf_r+0x196>
 8015f86:	89bb      	ldrh	r3, [r7, #12]
 8015f88:	065b      	lsls	r3, r3, #25
 8015f8a:	d500      	bpl.n	8015f8e <_vfiprintf_r+0x1f6>
 8015f8c:	e784      	b.n	8015e98 <_vfiprintf_r+0x100>
 8015f8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015f90:	e784      	b.n	8015e9c <_vfiprintf_r+0x104>
 8015f92:	ab07      	add	r3, sp, #28
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	003a      	movs	r2, r7
 8015f98:	4b09      	ldr	r3, [pc, #36]	; (8015fc0 <_vfiprintf_r+0x228>)
 8015f9a:	0021      	movs	r1, r4
 8015f9c:	9803      	ldr	r0, [sp, #12]
 8015f9e:	f000 f87f 	bl	80160a0 <_printf_i>
 8015fa2:	e7ec      	b.n	8015f7e <_vfiprintf_r+0x1e6>
 8015fa4:	08019a64 	.word	0x08019a64
 8015fa8:	080198d4 	.word	0x080198d4
 8015fac:	08019a84 	.word	0x08019a84
 8015fb0:	08019a44 	.word	0x08019a44
 8015fb4:	080198da 	.word	0x080198da
 8015fb8:	080198de 	.word	0x080198de
 8015fbc:	00000000 	.word	0x00000000
 8015fc0:	08015d73 	.word	0x08015d73

08015fc4 <_printf_common>:
 8015fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fc6:	0015      	movs	r5, r2
 8015fc8:	9301      	str	r3, [sp, #4]
 8015fca:	688a      	ldr	r2, [r1, #8]
 8015fcc:	690b      	ldr	r3, [r1, #16]
 8015fce:	9000      	str	r0, [sp, #0]
 8015fd0:	000c      	movs	r4, r1
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	da00      	bge.n	8015fd8 <_printf_common+0x14>
 8015fd6:	0013      	movs	r3, r2
 8015fd8:	0022      	movs	r2, r4
 8015fda:	602b      	str	r3, [r5, #0]
 8015fdc:	3243      	adds	r2, #67	; 0x43
 8015fde:	7812      	ldrb	r2, [r2, #0]
 8015fe0:	2a00      	cmp	r2, #0
 8015fe2:	d001      	beq.n	8015fe8 <_printf_common+0x24>
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	602b      	str	r3, [r5, #0]
 8015fe8:	6823      	ldr	r3, [r4, #0]
 8015fea:	069b      	lsls	r3, r3, #26
 8015fec:	d502      	bpl.n	8015ff4 <_printf_common+0x30>
 8015fee:	682b      	ldr	r3, [r5, #0]
 8015ff0:	3302      	adds	r3, #2
 8015ff2:	602b      	str	r3, [r5, #0]
 8015ff4:	2706      	movs	r7, #6
 8015ff6:	6823      	ldr	r3, [r4, #0]
 8015ff8:	401f      	ands	r7, r3
 8015ffa:	d027      	beq.n	801604c <_printf_common+0x88>
 8015ffc:	0023      	movs	r3, r4
 8015ffe:	3343      	adds	r3, #67	; 0x43
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	1e5a      	subs	r2, r3, #1
 8016004:	4193      	sbcs	r3, r2
 8016006:	6822      	ldr	r2, [r4, #0]
 8016008:	0692      	lsls	r2, r2, #26
 801600a:	d430      	bmi.n	801606e <_printf_common+0xaa>
 801600c:	0022      	movs	r2, r4
 801600e:	9901      	ldr	r1, [sp, #4]
 8016010:	3243      	adds	r2, #67	; 0x43
 8016012:	9800      	ldr	r0, [sp, #0]
 8016014:	9e08      	ldr	r6, [sp, #32]
 8016016:	47b0      	blx	r6
 8016018:	1c43      	adds	r3, r0, #1
 801601a:	d025      	beq.n	8016068 <_printf_common+0xa4>
 801601c:	2306      	movs	r3, #6
 801601e:	6820      	ldr	r0, [r4, #0]
 8016020:	682a      	ldr	r2, [r5, #0]
 8016022:	68e1      	ldr	r1, [r4, #12]
 8016024:	4003      	ands	r3, r0
 8016026:	2500      	movs	r5, #0
 8016028:	2b04      	cmp	r3, #4
 801602a:	d103      	bne.n	8016034 <_printf_common+0x70>
 801602c:	1a8d      	subs	r5, r1, r2
 801602e:	43eb      	mvns	r3, r5
 8016030:	17db      	asrs	r3, r3, #31
 8016032:	401d      	ands	r5, r3
 8016034:	68a3      	ldr	r3, [r4, #8]
 8016036:	6922      	ldr	r2, [r4, #16]
 8016038:	4293      	cmp	r3, r2
 801603a:	dd01      	ble.n	8016040 <_printf_common+0x7c>
 801603c:	1a9b      	subs	r3, r3, r2
 801603e:	18ed      	adds	r5, r5, r3
 8016040:	2700      	movs	r7, #0
 8016042:	42bd      	cmp	r5, r7
 8016044:	d120      	bne.n	8016088 <_printf_common+0xc4>
 8016046:	2000      	movs	r0, #0
 8016048:	e010      	b.n	801606c <_printf_common+0xa8>
 801604a:	3701      	adds	r7, #1
 801604c:	68e3      	ldr	r3, [r4, #12]
 801604e:	682a      	ldr	r2, [r5, #0]
 8016050:	1a9b      	subs	r3, r3, r2
 8016052:	42bb      	cmp	r3, r7
 8016054:	ddd2      	ble.n	8015ffc <_printf_common+0x38>
 8016056:	0022      	movs	r2, r4
 8016058:	2301      	movs	r3, #1
 801605a:	3219      	adds	r2, #25
 801605c:	9901      	ldr	r1, [sp, #4]
 801605e:	9800      	ldr	r0, [sp, #0]
 8016060:	9e08      	ldr	r6, [sp, #32]
 8016062:	47b0      	blx	r6
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d1f0      	bne.n	801604a <_printf_common+0x86>
 8016068:	2001      	movs	r0, #1
 801606a:	4240      	negs	r0, r0
 801606c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801606e:	2030      	movs	r0, #48	; 0x30
 8016070:	18e1      	adds	r1, r4, r3
 8016072:	3143      	adds	r1, #67	; 0x43
 8016074:	7008      	strb	r0, [r1, #0]
 8016076:	0021      	movs	r1, r4
 8016078:	1c5a      	adds	r2, r3, #1
 801607a:	3145      	adds	r1, #69	; 0x45
 801607c:	7809      	ldrb	r1, [r1, #0]
 801607e:	18a2      	adds	r2, r4, r2
 8016080:	3243      	adds	r2, #67	; 0x43
 8016082:	3302      	adds	r3, #2
 8016084:	7011      	strb	r1, [r2, #0]
 8016086:	e7c1      	b.n	801600c <_printf_common+0x48>
 8016088:	0022      	movs	r2, r4
 801608a:	2301      	movs	r3, #1
 801608c:	321a      	adds	r2, #26
 801608e:	9901      	ldr	r1, [sp, #4]
 8016090:	9800      	ldr	r0, [sp, #0]
 8016092:	9e08      	ldr	r6, [sp, #32]
 8016094:	47b0      	blx	r6
 8016096:	1c43      	adds	r3, r0, #1
 8016098:	d0e6      	beq.n	8016068 <_printf_common+0xa4>
 801609a:	3701      	adds	r7, #1
 801609c:	e7d1      	b.n	8016042 <_printf_common+0x7e>
	...

080160a0 <_printf_i>:
 80160a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160a2:	b089      	sub	sp, #36	; 0x24
 80160a4:	9204      	str	r2, [sp, #16]
 80160a6:	000a      	movs	r2, r1
 80160a8:	3243      	adds	r2, #67	; 0x43
 80160aa:	9305      	str	r3, [sp, #20]
 80160ac:	9003      	str	r0, [sp, #12]
 80160ae:	9202      	str	r2, [sp, #8]
 80160b0:	7e0a      	ldrb	r2, [r1, #24]
 80160b2:	000c      	movs	r4, r1
 80160b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160b6:	2a6e      	cmp	r2, #110	; 0x6e
 80160b8:	d100      	bne.n	80160bc <_printf_i+0x1c>
 80160ba:	e086      	b.n	80161ca <_printf_i+0x12a>
 80160bc:	d81f      	bhi.n	80160fe <_printf_i+0x5e>
 80160be:	2a63      	cmp	r2, #99	; 0x63
 80160c0:	d033      	beq.n	801612a <_printf_i+0x8a>
 80160c2:	d808      	bhi.n	80160d6 <_printf_i+0x36>
 80160c4:	2a00      	cmp	r2, #0
 80160c6:	d100      	bne.n	80160ca <_printf_i+0x2a>
 80160c8:	e08c      	b.n	80161e4 <_printf_i+0x144>
 80160ca:	2a58      	cmp	r2, #88	; 0x58
 80160cc:	d04d      	beq.n	801616a <_printf_i+0xca>
 80160ce:	0025      	movs	r5, r4
 80160d0:	3542      	adds	r5, #66	; 0x42
 80160d2:	702a      	strb	r2, [r5, #0]
 80160d4:	e030      	b.n	8016138 <_printf_i+0x98>
 80160d6:	2a64      	cmp	r2, #100	; 0x64
 80160d8:	d001      	beq.n	80160de <_printf_i+0x3e>
 80160da:	2a69      	cmp	r2, #105	; 0x69
 80160dc:	d1f7      	bne.n	80160ce <_printf_i+0x2e>
 80160de:	6819      	ldr	r1, [r3, #0]
 80160e0:	6825      	ldr	r5, [r4, #0]
 80160e2:	1d0a      	adds	r2, r1, #4
 80160e4:	0628      	lsls	r0, r5, #24
 80160e6:	d529      	bpl.n	801613c <_printf_i+0x9c>
 80160e8:	6808      	ldr	r0, [r1, #0]
 80160ea:	601a      	str	r2, [r3, #0]
 80160ec:	2800      	cmp	r0, #0
 80160ee:	da03      	bge.n	80160f8 <_printf_i+0x58>
 80160f0:	232d      	movs	r3, #45	; 0x2d
 80160f2:	9a02      	ldr	r2, [sp, #8]
 80160f4:	4240      	negs	r0, r0
 80160f6:	7013      	strb	r3, [r2, #0]
 80160f8:	4e6b      	ldr	r6, [pc, #428]	; (80162a8 <_printf_i+0x208>)
 80160fa:	270a      	movs	r7, #10
 80160fc:	e04f      	b.n	801619e <_printf_i+0xfe>
 80160fe:	2a73      	cmp	r2, #115	; 0x73
 8016100:	d074      	beq.n	80161ec <_printf_i+0x14c>
 8016102:	d808      	bhi.n	8016116 <_printf_i+0x76>
 8016104:	2a6f      	cmp	r2, #111	; 0x6f
 8016106:	d01f      	beq.n	8016148 <_printf_i+0xa8>
 8016108:	2a70      	cmp	r2, #112	; 0x70
 801610a:	d1e0      	bne.n	80160ce <_printf_i+0x2e>
 801610c:	2220      	movs	r2, #32
 801610e:	6809      	ldr	r1, [r1, #0]
 8016110:	430a      	orrs	r2, r1
 8016112:	6022      	str	r2, [r4, #0]
 8016114:	e003      	b.n	801611e <_printf_i+0x7e>
 8016116:	2a75      	cmp	r2, #117	; 0x75
 8016118:	d016      	beq.n	8016148 <_printf_i+0xa8>
 801611a:	2a78      	cmp	r2, #120	; 0x78
 801611c:	d1d7      	bne.n	80160ce <_printf_i+0x2e>
 801611e:	0022      	movs	r2, r4
 8016120:	2178      	movs	r1, #120	; 0x78
 8016122:	3245      	adds	r2, #69	; 0x45
 8016124:	7011      	strb	r1, [r2, #0]
 8016126:	4e61      	ldr	r6, [pc, #388]	; (80162ac <_printf_i+0x20c>)
 8016128:	e022      	b.n	8016170 <_printf_i+0xd0>
 801612a:	0025      	movs	r5, r4
 801612c:	681a      	ldr	r2, [r3, #0]
 801612e:	3542      	adds	r5, #66	; 0x42
 8016130:	1d11      	adds	r1, r2, #4
 8016132:	6019      	str	r1, [r3, #0]
 8016134:	6813      	ldr	r3, [r2, #0]
 8016136:	702b      	strb	r3, [r5, #0]
 8016138:	2301      	movs	r3, #1
 801613a:	e065      	b.n	8016208 <_printf_i+0x168>
 801613c:	6808      	ldr	r0, [r1, #0]
 801613e:	601a      	str	r2, [r3, #0]
 8016140:	0669      	lsls	r1, r5, #25
 8016142:	d5d3      	bpl.n	80160ec <_printf_i+0x4c>
 8016144:	b200      	sxth	r0, r0
 8016146:	e7d1      	b.n	80160ec <_printf_i+0x4c>
 8016148:	6819      	ldr	r1, [r3, #0]
 801614a:	6825      	ldr	r5, [r4, #0]
 801614c:	1d08      	adds	r0, r1, #4
 801614e:	6018      	str	r0, [r3, #0]
 8016150:	6808      	ldr	r0, [r1, #0]
 8016152:	062e      	lsls	r6, r5, #24
 8016154:	d505      	bpl.n	8016162 <_printf_i+0xc2>
 8016156:	4e54      	ldr	r6, [pc, #336]	; (80162a8 <_printf_i+0x208>)
 8016158:	2708      	movs	r7, #8
 801615a:	2a6f      	cmp	r2, #111	; 0x6f
 801615c:	d01b      	beq.n	8016196 <_printf_i+0xf6>
 801615e:	270a      	movs	r7, #10
 8016160:	e019      	b.n	8016196 <_printf_i+0xf6>
 8016162:	066d      	lsls	r5, r5, #25
 8016164:	d5f7      	bpl.n	8016156 <_printf_i+0xb6>
 8016166:	b280      	uxth	r0, r0
 8016168:	e7f5      	b.n	8016156 <_printf_i+0xb6>
 801616a:	3145      	adds	r1, #69	; 0x45
 801616c:	4e4e      	ldr	r6, [pc, #312]	; (80162a8 <_printf_i+0x208>)
 801616e:	700a      	strb	r2, [r1, #0]
 8016170:	6818      	ldr	r0, [r3, #0]
 8016172:	6822      	ldr	r2, [r4, #0]
 8016174:	1d01      	adds	r1, r0, #4
 8016176:	6800      	ldr	r0, [r0, #0]
 8016178:	6019      	str	r1, [r3, #0]
 801617a:	0615      	lsls	r5, r2, #24
 801617c:	d521      	bpl.n	80161c2 <_printf_i+0x122>
 801617e:	07d3      	lsls	r3, r2, #31
 8016180:	d502      	bpl.n	8016188 <_printf_i+0xe8>
 8016182:	2320      	movs	r3, #32
 8016184:	431a      	orrs	r2, r3
 8016186:	6022      	str	r2, [r4, #0]
 8016188:	2710      	movs	r7, #16
 801618a:	2800      	cmp	r0, #0
 801618c:	d103      	bne.n	8016196 <_printf_i+0xf6>
 801618e:	2320      	movs	r3, #32
 8016190:	6822      	ldr	r2, [r4, #0]
 8016192:	439a      	bics	r2, r3
 8016194:	6022      	str	r2, [r4, #0]
 8016196:	0023      	movs	r3, r4
 8016198:	2200      	movs	r2, #0
 801619a:	3343      	adds	r3, #67	; 0x43
 801619c:	701a      	strb	r2, [r3, #0]
 801619e:	6863      	ldr	r3, [r4, #4]
 80161a0:	60a3      	str	r3, [r4, #8]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	db58      	blt.n	8016258 <_printf_i+0x1b8>
 80161a6:	2204      	movs	r2, #4
 80161a8:	6821      	ldr	r1, [r4, #0]
 80161aa:	4391      	bics	r1, r2
 80161ac:	6021      	str	r1, [r4, #0]
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d154      	bne.n	801625c <_printf_i+0x1bc>
 80161b2:	9d02      	ldr	r5, [sp, #8]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d05a      	beq.n	801626e <_printf_i+0x1ce>
 80161b8:	0025      	movs	r5, r4
 80161ba:	7833      	ldrb	r3, [r6, #0]
 80161bc:	3542      	adds	r5, #66	; 0x42
 80161be:	702b      	strb	r3, [r5, #0]
 80161c0:	e055      	b.n	801626e <_printf_i+0x1ce>
 80161c2:	0655      	lsls	r5, r2, #25
 80161c4:	d5db      	bpl.n	801617e <_printf_i+0xde>
 80161c6:	b280      	uxth	r0, r0
 80161c8:	e7d9      	b.n	801617e <_printf_i+0xde>
 80161ca:	681a      	ldr	r2, [r3, #0]
 80161cc:	680d      	ldr	r5, [r1, #0]
 80161ce:	1d10      	adds	r0, r2, #4
 80161d0:	6949      	ldr	r1, [r1, #20]
 80161d2:	6018      	str	r0, [r3, #0]
 80161d4:	6813      	ldr	r3, [r2, #0]
 80161d6:	062e      	lsls	r6, r5, #24
 80161d8:	d501      	bpl.n	80161de <_printf_i+0x13e>
 80161da:	6019      	str	r1, [r3, #0]
 80161dc:	e002      	b.n	80161e4 <_printf_i+0x144>
 80161de:	066d      	lsls	r5, r5, #25
 80161e0:	d5fb      	bpl.n	80161da <_printf_i+0x13a>
 80161e2:	8019      	strh	r1, [r3, #0]
 80161e4:	2300      	movs	r3, #0
 80161e6:	9d02      	ldr	r5, [sp, #8]
 80161e8:	6123      	str	r3, [r4, #16]
 80161ea:	e04f      	b.n	801628c <_printf_i+0x1ec>
 80161ec:	681a      	ldr	r2, [r3, #0]
 80161ee:	1d11      	adds	r1, r2, #4
 80161f0:	6019      	str	r1, [r3, #0]
 80161f2:	6815      	ldr	r5, [r2, #0]
 80161f4:	2100      	movs	r1, #0
 80161f6:	6862      	ldr	r2, [r4, #4]
 80161f8:	0028      	movs	r0, r5
 80161fa:	f000 fe23 	bl	8016e44 <memchr>
 80161fe:	2800      	cmp	r0, #0
 8016200:	d001      	beq.n	8016206 <_printf_i+0x166>
 8016202:	1b40      	subs	r0, r0, r5
 8016204:	6060      	str	r0, [r4, #4]
 8016206:	6863      	ldr	r3, [r4, #4]
 8016208:	6123      	str	r3, [r4, #16]
 801620a:	2300      	movs	r3, #0
 801620c:	9a02      	ldr	r2, [sp, #8]
 801620e:	7013      	strb	r3, [r2, #0]
 8016210:	e03c      	b.n	801628c <_printf_i+0x1ec>
 8016212:	6923      	ldr	r3, [r4, #16]
 8016214:	002a      	movs	r2, r5
 8016216:	9904      	ldr	r1, [sp, #16]
 8016218:	9803      	ldr	r0, [sp, #12]
 801621a:	9d05      	ldr	r5, [sp, #20]
 801621c:	47a8      	blx	r5
 801621e:	1c43      	adds	r3, r0, #1
 8016220:	d03e      	beq.n	80162a0 <_printf_i+0x200>
 8016222:	6823      	ldr	r3, [r4, #0]
 8016224:	079b      	lsls	r3, r3, #30
 8016226:	d415      	bmi.n	8016254 <_printf_i+0x1b4>
 8016228:	9b07      	ldr	r3, [sp, #28]
 801622a:	68e0      	ldr	r0, [r4, #12]
 801622c:	4298      	cmp	r0, r3
 801622e:	da39      	bge.n	80162a4 <_printf_i+0x204>
 8016230:	0018      	movs	r0, r3
 8016232:	e037      	b.n	80162a4 <_printf_i+0x204>
 8016234:	0022      	movs	r2, r4
 8016236:	2301      	movs	r3, #1
 8016238:	3219      	adds	r2, #25
 801623a:	9904      	ldr	r1, [sp, #16]
 801623c:	9803      	ldr	r0, [sp, #12]
 801623e:	9e05      	ldr	r6, [sp, #20]
 8016240:	47b0      	blx	r6
 8016242:	1c43      	adds	r3, r0, #1
 8016244:	d02c      	beq.n	80162a0 <_printf_i+0x200>
 8016246:	3501      	adds	r5, #1
 8016248:	68e3      	ldr	r3, [r4, #12]
 801624a:	9a07      	ldr	r2, [sp, #28]
 801624c:	1a9b      	subs	r3, r3, r2
 801624e:	42ab      	cmp	r3, r5
 8016250:	dcf0      	bgt.n	8016234 <_printf_i+0x194>
 8016252:	e7e9      	b.n	8016228 <_printf_i+0x188>
 8016254:	2500      	movs	r5, #0
 8016256:	e7f7      	b.n	8016248 <_printf_i+0x1a8>
 8016258:	2800      	cmp	r0, #0
 801625a:	d0ad      	beq.n	80161b8 <_printf_i+0x118>
 801625c:	9d02      	ldr	r5, [sp, #8]
 801625e:	0039      	movs	r1, r7
 8016260:	f7f1 fffe 	bl	8008260 <__aeabi_uidivmod>
 8016264:	5c73      	ldrb	r3, [r6, r1]
 8016266:	3d01      	subs	r5, #1
 8016268:	702b      	strb	r3, [r5, #0]
 801626a:	2800      	cmp	r0, #0
 801626c:	d1f7      	bne.n	801625e <_printf_i+0x1be>
 801626e:	2f08      	cmp	r7, #8
 8016270:	d109      	bne.n	8016286 <_printf_i+0x1e6>
 8016272:	6823      	ldr	r3, [r4, #0]
 8016274:	07db      	lsls	r3, r3, #31
 8016276:	d506      	bpl.n	8016286 <_printf_i+0x1e6>
 8016278:	6863      	ldr	r3, [r4, #4]
 801627a:	6922      	ldr	r2, [r4, #16]
 801627c:	4293      	cmp	r3, r2
 801627e:	dc02      	bgt.n	8016286 <_printf_i+0x1e6>
 8016280:	2330      	movs	r3, #48	; 0x30
 8016282:	3d01      	subs	r5, #1
 8016284:	702b      	strb	r3, [r5, #0]
 8016286:	9b02      	ldr	r3, [sp, #8]
 8016288:	1b5b      	subs	r3, r3, r5
 801628a:	6123      	str	r3, [r4, #16]
 801628c:	9b05      	ldr	r3, [sp, #20]
 801628e:	aa07      	add	r2, sp, #28
 8016290:	9300      	str	r3, [sp, #0]
 8016292:	0021      	movs	r1, r4
 8016294:	9b04      	ldr	r3, [sp, #16]
 8016296:	9803      	ldr	r0, [sp, #12]
 8016298:	f7ff fe94 	bl	8015fc4 <_printf_common>
 801629c:	1c43      	adds	r3, r0, #1
 801629e:	d1b8      	bne.n	8016212 <_printf_i+0x172>
 80162a0:	2001      	movs	r0, #1
 80162a2:	4240      	negs	r0, r0
 80162a4:	b009      	add	sp, #36	; 0x24
 80162a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162a8:	080198e5 	.word	0x080198e5
 80162ac:	080198f6 	.word	0x080198f6

080162b0 <_sbrk_r>:
 80162b0:	2300      	movs	r3, #0
 80162b2:	b570      	push	{r4, r5, r6, lr}
 80162b4:	4c06      	ldr	r4, [pc, #24]	; (80162d0 <_sbrk_r+0x20>)
 80162b6:	0005      	movs	r5, r0
 80162b8:	0008      	movs	r0, r1
 80162ba:	6023      	str	r3, [r4, #0]
 80162bc:	f001 fc0a 	bl	8017ad4 <_sbrk>
 80162c0:	1c43      	adds	r3, r0, #1
 80162c2:	d103      	bne.n	80162cc <_sbrk_r+0x1c>
 80162c4:	6823      	ldr	r3, [r4, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d000      	beq.n	80162cc <_sbrk_r+0x1c>
 80162ca:	602b      	str	r3, [r5, #0]
 80162cc:	bd70      	pop	{r4, r5, r6, pc}
 80162ce:	46c0      	nop			; (mov r8, r8)
 80162d0:	20001bfc 	.word	0x20001bfc

080162d4 <_raise_r>:
 80162d4:	b570      	push	{r4, r5, r6, lr}
 80162d6:	0004      	movs	r4, r0
 80162d8:	000d      	movs	r5, r1
 80162da:	291f      	cmp	r1, #31
 80162dc:	d904      	bls.n	80162e8 <_raise_r+0x14>
 80162de:	2316      	movs	r3, #22
 80162e0:	6003      	str	r3, [r0, #0]
 80162e2:	2001      	movs	r0, #1
 80162e4:	4240      	negs	r0, r0
 80162e6:	bd70      	pop	{r4, r5, r6, pc}
 80162e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d004      	beq.n	80162f8 <_raise_r+0x24>
 80162ee:	008a      	lsls	r2, r1, #2
 80162f0:	189b      	adds	r3, r3, r2
 80162f2:	681a      	ldr	r2, [r3, #0]
 80162f4:	2a00      	cmp	r2, #0
 80162f6:	d108      	bne.n	801630a <_raise_r+0x36>
 80162f8:	0020      	movs	r0, r4
 80162fa:	f000 f831 	bl	8016360 <_getpid_r>
 80162fe:	002a      	movs	r2, r5
 8016300:	0001      	movs	r1, r0
 8016302:	0020      	movs	r0, r4
 8016304:	f000 f81a 	bl	801633c <_kill_r>
 8016308:	e7ed      	b.n	80162e6 <_raise_r+0x12>
 801630a:	2000      	movs	r0, #0
 801630c:	2a01      	cmp	r2, #1
 801630e:	d0ea      	beq.n	80162e6 <_raise_r+0x12>
 8016310:	1c51      	adds	r1, r2, #1
 8016312:	d103      	bne.n	801631c <_raise_r+0x48>
 8016314:	2316      	movs	r3, #22
 8016316:	3001      	adds	r0, #1
 8016318:	6023      	str	r3, [r4, #0]
 801631a:	e7e4      	b.n	80162e6 <_raise_r+0x12>
 801631c:	2400      	movs	r4, #0
 801631e:	0028      	movs	r0, r5
 8016320:	601c      	str	r4, [r3, #0]
 8016322:	4790      	blx	r2
 8016324:	0020      	movs	r0, r4
 8016326:	e7de      	b.n	80162e6 <_raise_r+0x12>

08016328 <raise>:
 8016328:	b510      	push	{r4, lr}
 801632a:	4b03      	ldr	r3, [pc, #12]	; (8016338 <raise+0x10>)
 801632c:	0001      	movs	r1, r0
 801632e:	6818      	ldr	r0, [r3, #0]
 8016330:	f7ff ffd0 	bl	80162d4 <_raise_r>
 8016334:	bd10      	pop	{r4, pc}
 8016336:	46c0      	nop			; (mov r8, r8)
 8016338:	200005e0 	.word	0x200005e0

0801633c <_kill_r>:
 801633c:	2300      	movs	r3, #0
 801633e:	b570      	push	{r4, r5, r6, lr}
 8016340:	4c06      	ldr	r4, [pc, #24]	; (801635c <_kill_r+0x20>)
 8016342:	0005      	movs	r5, r0
 8016344:	0008      	movs	r0, r1
 8016346:	0011      	movs	r1, r2
 8016348:	6023      	str	r3, [r4, #0]
 801634a:	f001 fbab 	bl	8017aa4 <_kill>
 801634e:	1c43      	adds	r3, r0, #1
 8016350:	d103      	bne.n	801635a <_kill_r+0x1e>
 8016352:	6823      	ldr	r3, [r4, #0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d000      	beq.n	801635a <_kill_r+0x1e>
 8016358:	602b      	str	r3, [r5, #0]
 801635a:	bd70      	pop	{r4, r5, r6, pc}
 801635c:	20001bfc 	.word	0x20001bfc

08016360 <_getpid_r>:
 8016360:	b510      	push	{r4, lr}
 8016362:	f001 fb8f 	bl	8017a84 <_getpid>
 8016366:	bd10      	pop	{r4, pc}

08016368 <strcpy>:
 8016368:	0003      	movs	r3, r0
 801636a:	780a      	ldrb	r2, [r1, #0]
 801636c:	3101      	adds	r1, #1
 801636e:	701a      	strb	r2, [r3, #0]
 8016370:	3301      	adds	r3, #1
 8016372:	2a00      	cmp	r2, #0
 8016374:	d1f9      	bne.n	801636a <strcpy+0x2>
 8016376:	4770      	bx	lr

08016378 <__tzcalc_limits>:
 8016378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801637a:	b089      	sub	sp, #36	; 0x24
 801637c:	0004      	movs	r4, r0
 801637e:	f000 fcf1 	bl	8016d64 <__gettzinfo>
 8016382:	4b4e      	ldr	r3, [pc, #312]	; (80164bc <__tzcalc_limits+0x144>)
 8016384:	0006      	movs	r6, r0
 8016386:	2000      	movs	r0, #0
 8016388:	429c      	cmp	r4, r3
 801638a:	dd5f      	ble.n	801644c <__tzcalc_limits+0xd4>
 801638c:	256e      	movs	r5, #110	; 0x6e
 801638e:	2164      	movs	r1, #100	; 0x64
 8016390:	4b4b      	ldr	r3, [pc, #300]	; (80164c0 <__tzcalc_limits+0x148>)
 8016392:	35ff      	adds	r5, #255	; 0xff
 8016394:	18e0      	adds	r0, r4, r3
 8016396:	4345      	muls	r5, r0
 8016398:	4b4a      	ldr	r3, [pc, #296]	; (80164c4 <__tzcalc_limits+0x14c>)
 801639a:	6074      	str	r4, [r6, #4]
 801639c:	18e0      	adds	r0, r4, r3
 801639e:	4b4a      	ldr	r3, [pc, #296]	; (80164c8 <__tzcalc_limits+0x150>)
 80163a0:	1080      	asrs	r0, r0, #2
 80163a2:	182d      	adds	r5, r5, r0
 80163a4:	4249      	negs	r1, r1
 80163a6:	18e0      	adds	r0, r4, r3
 80163a8:	f7f1 ff5e 	bl	8008268 <__divsi3>
 80163ac:	21c8      	movs	r1, #200	; 0xc8
 80163ae:	4b47      	ldr	r3, [pc, #284]	; (80164cc <__tzcalc_limits+0x154>)
 80163b0:	182d      	adds	r5, r5, r0
 80163b2:	0049      	lsls	r1, r1, #1
 80163b4:	18e0      	adds	r0, r4, r3
 80163b6:	f7f1 ff57 	bl	8008268 <__divsi3>
 80163ba:	2164      	movs	r1, #100	; 0x64
 80163bc:	182b      	adds	r3, r5, r0
 80163be:	0020      	movs	r0, r4
 80163c0:	9300      	str	r3, [sp, #0]
 80163c2:	f7f2 f837 	bl	8008434 <__aeabi_idivmod>
 80163c6:	9101      	str	r1, [sp, #4]
 80163c8:	21c8      	movs	r1, #200	; 0xc8
 80163ca:	0020      	movs	r0, r4
 80163cc:	0049      	lsls	r1, r1, #1
 80163ce:	f7f2 f831 	bl	8008434 <__aeabi_idivmod>
 80163d2:	000a      	movs	r2, r1
 80163d4:	4253      	negs	r3, r2
 80163d6:	415a      	adcs	r2, r3
 80163d8:	0033      	movs	r3, r6
 80163da:	3358      	adds	r3, #88	; 0x58
 80163dc:	9307      	str	r3, [sp, #28]
 80163de:	2303      	movs	r3, #3
 80163e0:	0035      	movs	r5, r6
 80163e2:	401c      	ands	r4, r3
 80163e4:	9102      	str	r1, [sp, #8]
 80163e6:	9204      	str	r2, [sp, #16]
 80163e8:	3508      	adds	r5, #8
 80163ea:	9405      	str	r4, [sp, #20]
 80163ec:	782b      	ldrb	r3, [r5, #0]
 80163ee:	68ef      	ldr	r7, [r5, #12]
 80163f0:	2b4a      	cmp	r3, #74	; 0x4a
 80163f2:	d12d      	bne.n	8016450 <__tzcalc_limits+0xd8>
 80163f4:	9b00      	ldr	r3, [sp, #0]
 80163f6:	19dc      	adds	r4, r3, r7
 80163f8:	9b05      	ldr	r3, [sp, #20]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d102      	bne.n	8016404 <__tzcalc_limits+0x8c>
 80163fe:	9b01      	ldr	r3, [sp, #4]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d103      	bne.n	801640c <__tzcalc_limits+0x94>
 8016404:	2100      	movs	r1, #0
 8016406:	9b02      	ldr	r3, [sp, #8]
 8016408:	428b      	cmp	r3, r1
 801640a:	d103      	bne.n	8016414 <__tzcalc_limits+0x9c>
 801640c:	2101      	movs	r1, #1
 801640e:	2f3b      	cmp	r7, #59	; 0x3b
 8016410:	dc00      	bgt.n	8016414 <__tzcalc_limits+0x9c>
 8016412:	2100      	movs	r1, #0
 8016414:	1864      	adds	r4, r4, r1
 8016416:	3c01      	subs	r4, #1
 8016418:	492d      	ldr	r1, [pc, #180]	; (80164d0 <__tzcalc_limits+0x158>)
 801641a:	692b      	ldr	r3, [r5, #16]
 801641c:	434c      	muls	r4, r1
 801641e:	18e4      	adds	r4, r4, r3
 8016420:	6a2b      	ldr	r3, [r5, #32]
 8016422:	18e4      	adds	r4, r4, r3
 8016424:	61ac      	str	r4, [r5, #24]
 8016426:	9b07      	ldr	r3, [sp, #28]
 8016428:	17e4      	asrs	r4, r4, #31
 801642a:	61ec      	str	r4, [r5, #28]
 801642c:	3528      	adds	r5, #40	; 0x28
 801642e:	42ab      	cmp	r3, r5
 8016430:	d1dc      	bne.n	80163ec <__tzcalc_limits+0x74>
 8016432:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 8016434:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8016436:	2301      	movs	r3, #1
 8016438:	4291      	cmp	r1, r2
 801643a:	dc05      	bgt.n	8016448 <__tzcalc_limits+0xd0>
 801643c:	d103      	bne.n	8016446 <__tzcalc_limits+0xce>
 801643e:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8016440:	6a31      	ldr	r1, [r6, #32]
 8016442:	428a      	cmp	r2, r1
 8016444:	d800      	bhi.n	8016448 <__tzcalc_limits+0xd0>
 8016446:	2300      	movs	r3, #0
 8016448:	2001      	movs	r0, #1
 801644a:	6033      	str	r3, [r6, #0]
 801644c:	b009      	add	sp, #36	; 0x24
 801644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016450:	2b44      	cmp	r3, #68	; 0x44
 8016452:	d102      	bne.n	801645a <__tzcalc_limits+0xe2>
 8016454:	9b00      	ldr	r3, [sp, #0]
 8016456:	19dc      	adds	r4, r3, r7
 8016458:	e7de      	b.n	8016418 <__tzcalc_limits+0xa0>
 801645a:	9b05      	ldr	r3, [sp, #20]
 801645c:	9a04      	ldr	r2, [sp, #16]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d103      	bne.n	801646a <__tzcalc_limits+0xf2>
 8016462:	9b01      	ldr	r3, [sp, #4]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d000      	beq.n	801646a <__tzcalc_limits+0xf2>
 8016468:	2201      	movs	r2, #1
 801646a:	2330      	movs	r3, #48	; 0x30
 801646c:	4353      	muls	r3, r2
 801646e:	9306      	str	r3, [sp, #24]
 8016470:	4b18      	ldr	r3, [pc, #96]	; (80164d4 <__tzcalc_limits+0x15c>)
 8016472:	2100      	movs	r1, #0
 8016474:	469c      	mov	ip, r3
 8016476:	6868      	ldr	r0, [r5, #4]
 8016478:	9c00      	ldr	r4, [sp, #0]
 801647a:	9a06      	ldr	r2, [sp, #24]
 801647c:	3101      	adds	r1, #1
 801647e:	008b      	lsls	r3, r1, #2
 8016480:	189b      	adds	r3, r3, r2
 8016482:	4662      	mov	r2, ip
 8016484:	3b04      	subs	r3, #4
 8016486:	58d3      	ldr	r3, [r2, r3]
 8016488:	9303      	str	r3, [sp, #12]
 801648a:	4288      	cmp	r0, r1
 801648c:	dc10      	bgt.n	80164b0 <__tzcalc_limits+0x138>
 801648e:	1d20      	adds	r0, r4, #4
 8016490:	2107      	movs	r1, #7
 8016492:	f7f1 ffcf 	bl	8008434 <__aeabi_idivmod>
 8016496:	1a79      	subs	r1, r7, r1
 8016498:	d500      	bpl.n	801649c <__tzcalc_limits+0x124>
 801649a:	3107      	adds	r1, #7
 801649c:	68ab      	ldr	r3, [r5, #8]
 801649e:	1e5a      	subs	r2, r3, #1
 80164a0:	2307      	movs	r3, #7
 80164a2:	4353      	muls	r3, r2
 80164a4:	1859      	adds	r1, r3, r1
 80164a6:	9b03      	ldr	r3, [sp, #12]
 80164a8:	4299      	cmp	r1, r3
 80164aa:	da04      	bge.n	80164b6 <__tzcalc_limits+0x13e>
 80164ac:	1864      	adds	r4, r4, r1
 80164ae:	e7b3      	b.n	8016418 <__tzcalc_limits+0xa0>
 80164b0:	9b03      	ldr	r3, [sp, #12]
 80164b2:	18e4      	adds	r4, r4, r3
 80164b4:	e7e1      	b.n	801647a <__tzcalc_limits+0x102>
 80164b6:	3907      	subs	r1, #7
 80164b8:	e7f5      	b.n	80164a6 <__tzcalc_limits+0x12e>
 80164ba:	46c0      	nop			; (mov r8, r8)
 80164bc:	000007b1 	.word	0x000007b1
 80164c0:	fffff84e 	.word	0xfffff84e
 80164c4:	fffff84f 	.word	0xfffff84f
 80164c8:	fffff893 	.word	0xfffff893
 80164cc:	fffff9bf 	.word	0xfffff9bf
 80164d0:	00015180 	.word	0x00015180
 80164d4:	08019aa4 	.word	0x08019aa4

080164d8 <__tz_lock>:
 80164d8:	4770      	bx	lr

080164da <__tz_unlock>:
 80164da:	4770      	bx	lr

080164dc <_tzset_unlocked>:
 80164dc:	b510      	push	{r4, lr}
 80164de:	4b02      	ldr	r3, [pc, #8]	; (80164e8 <_tzset_unlocked+0xc>)
 80164e0:	6818      	ldr	r0, [r3, #0]
 80164e2:	f000 f803 	bl	80164ec <_tzset_unlocked_r>
 80164e6:	bd10      	pop	{r4, pc}
 80164e8:	200005e0 	.word	0x200005e0

080164ec <_tzset_unlocked_r>:
 80164ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ee:	b08d      	sub	sp, #52	; 0x34
 80164f0:	0007      	movs	r7, r0
 80164f2:	f000 fc37 	bl	8016d64 <__gettzinfo>
 80164f6:	49af      	ldr	r1, [pc, #700]	; (80167b4 <_tzset_unlocked_r+0x2c8>)
 80164f8:	0006      	movs	r6, r0
 80164fa:	0038      	movs	r0, r7
 80164fc:	f000 fc2c 	bl	8016d58 <_getenv_r>
 8016500:	4dad      	ldr	r5, [pc, #692]	; (80167b8 <_tzset_unlocked_r+0x2cc>)
 8016502:	1e04      	subs	r4, r0, #0
 8016504:	d10d      	bne.n	8016522 <_tzset_unlocked_r+0x36>
 8016506:	4bad      	ldr	r3, [pc, #692]	; (80167bc <_tzset_unlocked_r+0x2d0>)
 8016508:	4aad      	ldr	r2, [pc, #692]	; (80167c0 <_tzset_unlocked_r+0x2d4>)
 801650a:	6018      	str	r0, [r3, #0]
 801650c:	4bad      	ldr	r3, [pc, #692]	; (80167c4 <_tzset_unlocked_r+0x2d8>)
 801650e:	6018      	str	r0, [r3, #0]
 8016510:	4bad      	ldr	r3, [pc, #692]	; (80167c8 <_tzset_unlocked_r+0x2dc>)
 8016512:	6828      	ldr	r0, [r5, #0]
 8016514:	601a      	str	r2, [r3, #0]
 8016516:	605a      	str	r2, [r3, #4]
 8016518:	f7ff f8ac 	bl	8015674 <free>
 801651c:	602c      	str	r4, [r5, #0]
 801651e:	b00d      	add	sp, #52	; 0x34
 8016520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016522:	6829      	ldr	r1, [r5, #0]
 8016524:	2900      	cmp	r1, #0
 8016526:	d159      	bne.n	80165dc <_tzset_unlocked_r+0xf0>
 8016528:	6828      	ldr	r0, [r5, #0]
 801652a:	f7ff f8a3 	bl	8015674 <free>
 801652e:	0020      	movs	r0, r4
 8016530:	f7f1 fdf4 	bl	800811c <strlen>
 8016534:	1c41      	adds	r1, r0, #1
 8016536:	0038      	movs	r0, r7
 8016538:	f7ff fba8 	bl	8015c8c <_malloc_r>
 801653c:	6028      	str	r0, [r5, #0]
 801653e:	2800      	cmp	r0, #0
 8016540:	d151      	bne.n	80165e6 <_tzset_unlocked_r+0xfa>
 8016542:	7823      	ldrb	r3, [r4, #0]
 8016544:	49a1      	ldr	r1, [pc, #644]	; (80167cc <_tzset_unlocked_r+0x2e0>)
 8016546:	3b3a      	subs	r3, #58	; 0x3a
 8016548:	425a      	negs	r2, r3
 801654a:	4153      	adcs	r3, r2
 801654c:	18e4      	adds	r4, r4, r3
 801654e:	4aa0      	ldr	r2, [pc, #640]	; (80167d0 <_tzset_unlocked_r+0x2e4>)
 8016550:	ab0a      	add	r3, sp, #40	; 0x28
 8016552:	0020      	movs	r0, r4
 8016554:	f000 fcaa 	bl	8016eac <siscanf>
 8016558:	2800      	cmp	r0, #0
 801655a:	dde0      	ble.n	801651e <_tzset_unlocked_r+0x32>
 801655c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801655e:	18e4      	adds	r4, r4, r3
 8016560:	7823      	ldrb	r3, [r4, #0]
 8016562:	2b2d      	cmp	r3, #45	; 0x2d
 8016564:	d143      	bne.n	80165ee <_tzset_unlocked_r+0x102>
 8016566:	3b2e      	subs	r3, #46	; 0x2e
 8016568:	3401      	adds	r4, #1
 801656a:	9304      	str	r3, [sp, #16]
 801656c:	2716      	movs	r7, #22
 801656e:	ab02      	add	r3, sp, #8
 8016570:	18ff      	adds	r7, r7, r3
 8016572:	2300      	movs	r3, #0
 8016574:	ad08      	add	r5, sp, #32
 8016576:	803b      	strh	r3, [r7, #0]
 8016578:	802b      	strh	r3, [r5, #0]
 801657a:	ab0a      	add	r3, sp, #40	; 0x28
 801657c:	9303      	str	r3, [sp, #12]
 801657e:	9502      	str	r5, [sp, #8]
 8016580:	9301      	str	r3, [sp, #4]
 8016582:	9700      	str	r7, [sp, #0]
 8016584:	aa07      	add	r2, sp, #28
 8016586:	4993      	ldr	r1, [pc, #588]	; (80167d4 <_tzset_unlocked_r+0x2e8>)
 8016588:	0020      	movs	r0, r4
 801658a:	f000 fc8f 	bl	8016eac <siscanf>
 801658e:	2800      	cmp	r0, #0
 8016590:	ddc5      	ble.n	801651e <_tzset_unlocked_r+0x32>
 8016592:	233c      	movs	r3, #60	; 0x3c
 8016594:	883a      	ldrh	r2, [r7, #0]
 8016596:	4f90      	ldr	r7, [pc, #576]	; (80167d8 <_tzset_unlocked_r+0x2ec>)
 8016598:	4353      	muls	r3, r2
 801659a:	882a      	ldrh	r2, [r5, #0]
 801659c:	4d8a      	ldr	r5, [pc, #552]	; (80167c8 <_tzset_unlocked_r+0x2dc>)
 801659e:	189b      	adds	r3, r3, r2
 80165a0:	aa02      	add	r2, sp, #8
 80165a2:	8a91      	ldrh	r1, [r2, #20]
 80165a4:	22e1      	movs	r2, #225	; 0xe1
 80165a6:	0112      	lsls	r2, r2, #4
 80165a8:	434a      	muls	r2, r1
 80165aa:	189b      	adds	r3, r3, r2
 80165ac:	9a04      	ldr	r2, [sp, #16]
 80165ae:	4987      	ldr	r1, [pc, #540]	; (80167cc <_tzset_unlocked_r+0x2e0>)
 80165b0:	435a      	muls	r2, r3
 80165b2:	4b87      	ldr	r3, [pc, #540]	; (80167d0 <_tzset_unlocked_r+0x2e4>)
 80165b4:	62b2      	str	r2, [r6, #40]	; 0x28
 80165b6:	602b      	str	r3, [r5, #0]
 80165b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ba:	003a      	movs	r2, r7
 80165bc:	18e4      	adds	r4, r4, r3
 80165be:	0020      	movs	r0, r4
 80165c0:	ab0a      	add	r3, sp, #40	; 0x28
 80165c2:	f000 fc73 	bl	8016eac <siscanf>
 80165c6:	2800      	cmp	r0, #0
 80165c8:	dc18      	bgt.n	80165fc <_tzset_unlocked_r+0x110>
 80165ca:	682b      	ldr	r3, [r5, #0]
 80165cc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80165ce:	606b      	str	r3, [r5, #4]
 80165d0:	4b7a      	ldr	r3, [pc, #488]	; (80167bc <_tzset_unlocked_r+0x2d0>)
 80165d2:	601a      	str	r2, [r3, #0]
 80165d4:	2200      	movs	r2, #0
 80165d6:	4b7b      	ldr	r3, [pc, #492]	; (80167c4 <_tzset_unlocked_r+0x2d8>)
 80165d8:	601a      	str	r2, [r3, #0]
 80165da:	e7a0      	b.n	801651e <_tzset_unlocked_r+0x32>
 80165dc:	f7f1 fd94 	bl	8008108 <strcmp>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d09c      	beq.n	801651e <_tzset_unlocked_r+0x32>
 80165e4:	e7a0      	b.n	8016528 <_tzset_unlocked_r+0x3c>
 80165e6:	0021      	movs	r1, r4
 80165e8:	f7ff febe 	bl	8016368 <strcpy>
 80165ec:	e7a9      	b.n	8016542 <_tzset_unlocked_r+0x56>
 80165ee:	2201      	movs	r2, #1
 80165f0:	3b2b      	subs	r3, #43	; 0x2b
 80165f2:	9204      	str	r2, [sp, #16]
 80165f4:	425a      	negs	r2, r3
 80165f6:	4153      	adcs	r3, r2
 80165f8:	18e4      	adds	r4, r4, r3
 80165fa:	e7b7      	b.n	801656c <_tzset_unlocked_r+0x80>
 80165fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165fe:	606f      	str	r7, [r5, #4]
 8016600:	18e4      	adds	r4, r4, r3
 8016602:	7823      	ldrb	r3, [r4, #0]
 8016604:	2b2d      	cmp	r3, #45	; 0x2d
 8016606:	d000      	beq.n	801660a <_tzset_unlocked_r+0x11e>
 8016608:	e08d      	b.n	8016726 <_tzset_unlocked_r+0x23a>
 801660a:	3b2e      	subs	r3, #46	; 0x2e
 801660c:	3401      	adds	r4, #1
 801660e:	9304      	str	r3, [sp, #16]
 8016610:	2716      	movs	r7, #22
 8016612:	2300      	movs	r3, #0
 8016614:	aa02      	add	r2, sp, #8
 8016616:	18bf      	adds	r7, r7, r2
 8016618:	ad07      	add	r5, sp, #28
 801661a:	8313      	strh	r3, [r2, #24]
 801661c:	802b      	strh	r3, [r5, #0]
 801661e:	803b      	strh	r3, [r7, #0]
 8016620:	aa08      	add	r2, sp, #32
 8016622:	930a      	str	r3, [sp, #40]	; 0x28
 8016624:	ab0a      	add	r3, sp, #40	; 0x28
 8016626:	9202      	str	r2, [sp, #8]
 8016628:	9303      	str	r3, [sp, #12]
 801662a:	9301      	str	r3, [sp, #4]
 801662c:	9700      	str	r7, [sp, #0]
 801662e:	002a      	movs	r2, r5
 8016630:	4968      	ldr	r1, [pc, #416]	; (80167d4 <_tzset_unlocked_r+0x2e8>)
 8016632:	0020      	movs	r0, r4
 8016634:	f000 fc3a 	bl	8016eac <siscanf>
 8016638:	2800      	cmp	r0, #0
 801663a:	dd00      	ble.n	801663e <_tzset_unlocked_r+0x152>
 801663c:	e07a      	b.n	8016734 <_tzset_unlocked_r+0x248>
 801663e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8016640:	4a66      	ldr	r2, [pc, #408]	; (80167dc <_tzset_unlocked_r+0x2f0>)
 8016642:	189b      	adds	r3, r3, r2
 8016644:	6533      	str	r3, [r6, #80]	; 0x50
 8016646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016648:	0037      	movs	r7, r6
 801664a:	18e4      	adds	r4, r4, r3
 801664c:	2300      	movs	r3, #0
 801664e:	3708      	adds	r7, #8
 8016650:	9304      	str	r3, [sp, #16]
 8016652:	7823      	ldrb	r3, [r4, #0]
 8016654:	3b2c      	subs	r3, #44	; 0x2c
 8016656:	425a      	negs	r2, r3
 8016658:	4153      	adcs	r3, r2
 801665a:	18e4      	adds	r4, r4, r3
 801665c:	7825      	ldrb	r5, [r4, #0]
 801665e:	2d4d      	cmp	r5, #77	; 0x4d
 8016660:	d000      	beq.n	8016664 <_tzset_unlocked_r+0x178>
 8016662:	e078      	b.n	8016756 <_tzset_unlocked_r+0x26a>
 8016664:	221e      	movs	r2, #30
 8016666:	a902      	add	r1, sp, #8
 8016668:	1852      	adds	r2, r2, r1
 801666a:	9202      	str	r2, [sp, #8]
 801666c:	aa09      	add	r2, sp, #36	; 0x24
 801666e:	9200      	str	r2, [sp, #0]
 8016670:	221a      	movs	r2, #26
 8016672:	ab0a      	add	r3, sp, #40	; 0x28
 8016674:	1852      	adds	r2, r2, r1
 8016676:	9303      	str	r3, [sp, #12]
 8016678:	9301      	str	r3, [sp, #4]
 801667a:	4959      	ldr	r1, [pc, #356]	; (80167e0 <_tzset_unlocked_r+0x2f4>)
 801667c:	0020      	movs	r0, r4
 801667e:	f000 fc15 	bl	8016eac <siscanf>
 8016682:	2803      	cmp	r0, #3
 8016684:	d000      	beq.n	8016688 <_tzset_unlocked_r+0x19c>
 8016686:	e74a      	b.n	801651e <_tzset_unlocked_r+0x32>
 8016688:	ab02      	add	r3, sp, #8
 801668a:	8b59      	ldrh	r1, [r3, #26]
 801668c:	1e4b      	subs	r3, r1, #1
 801668e:	2b0b      	cmp	r3, #11
 8016690:	d900      	bls.n	8016694 <_tzset_unlocked_r+0x1a8>
 8016692:	e744      	b.n	801651e <_tzset_unlocked_r+0x32>
 8016694:	ab02      	add	r3, sp, #8
 8016696:	8b9a      	ldrh	r2, [r3, #28]
 8016698:	1e53      	subs	r3, r2, #1
 801669a:	2b04      	cmp	r3, #4
 801669c:	d900      	bls.n	80166a0 <_tzset_unlocked_r+0x1b4>
 801669e:	e73e      	b.n	801651e <_tzset_unlocked_r+0x32>
 80166a0:	ab02      	add	r3, sp, #8
 80166a2:	8bdb      	ldrh	r3, [r3, #30]
 80166a4:	2b06      	cmp	r3, #6
 80166a6:	d900      	bls.n	80166aa <_tzset_unlocked_r+0x1be>
 80166a8:	e739      	b.n	801651e <_tzset_unlocked_r+0x32>
 80166aa:	703d      	strb	r5, [r7, #0]
 80166ac:	6079      	str	r1, [r7, #4]
 80166ae:	60ba      	str	r2, [r7, #8]
 80166b0:	60fb      	str	r3, [r7, #12]
 80166b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166b4:	18e5      	adds	r5, r4, r3
 80166b6:	2302      	movs	r3, #2
 80166b8:	aa07      	add	r2, sp, #28
 80166ba:	8013      	strh	r3, [r2, #0]
 80166bc:	2300      	movs	r3, #0
 80166be:	a902      	add	r1, sp, #8
 80166c0:	ac08      	add	r4, sp, #32
 80166c2:	82cb      	strh	r3, [r1, #22]
 80166c4:	8023      	strh	r3, [r4, #0]
 80166c6:	930a      	str	r3, [sp, #40]	; 0x28
 80166c8:	782b      	ldrb	r3, [r5, #0]
 80166ca:	2b2f      	cmp	r3, #47	; 0x2f
 80166cc:	d10b      	bne.n	80166e6 <_tzset_unlocked_r+0x1fa>
 80166ce:	2116      	movs	r1, #22
 80166d0:	a802      	add	r0, sp, #8
 80166d2:	1809      	adds	r1, r1, r0
 80166d4:	ab0a      	add	r3, sp, #40	; 0x28
 80166d6:	9100      	str	r1, [sp, #0]
 80166d8:	9303      	str	r3, [sp, #12]
 80166da:	9402      	str	r4, [sp, #8]
 80166dc:	9301      	str	r3, [sp, #4]
 80166de:	4941      	ldr	r1, [pc, #260]	; (80167e4 <_tzset_unlocked_r+0x2f8>)
 80166e0:	0028      	movs	r0, r5
 80166e2:	f000 fbe3 	bl	8016eac <siscanf>
 80166e6:	ab02      	add	r3, sp, #8
 80166e8:	8ada      	ldrh	r2, [r3, #22]
 80166ea:	233c      	movs	r3, #60	; 0x3c
 80166ec:	4353      	muls	r3, r2
 80166ee:	8822      	ldrh	r2, [r4, #0]
 80166f0:	189b      	adds	r3, r3, r2
 80166f2:	aa07      	add	r2, sp, #28
 80166f4:	8811      	ldrh	r1, [r2, #0]
 80166f6:	22e1      	movs	r2, #225	; 0xe1
 80166f8:	0112      	lsls	r2, r2, #4
 80166fa:	434a      	muls	r2, r1
 80166fc:	189b      	adds	r3, r3, r2
 80166fe:	613b      	str	r3, [r7, #16]
 8016700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016702:	3728      	adds	r7, #40	; 0x28
 8016704:	18ec      	adds	r4, r5, r3
 8016706:	9b04      	ldr	r3, [sp, #16]
 8016708:	2b01      	cmp	r3, #1
 801670a:	d122      	bne.n	8016752 <_tzset_unlocked_r+0x266>
 801670c:	6870      	ldr	r0, [r6, #4]
 801670e:	f7ff fe33 	bl	8016378 <__tzcalc_limits>
 8016712:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8016714:	4b29      	ldr	r3, [pc, #164]	; (80167bc <_tzset_unlocked_r+0x2d0>)
 8016716:	601a      	str	r2, [r3, #0]
 8016718:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801671a:	1a9b      	subs	r3, r3, r2
 801671c:	1e5a      	subs	r2, r3, #1
 801671e:	4193      	sbcs	r3, r2
 8016720:	4a28      	ldr	r2, [pc, #160]	; (80167c4 <_tzset_unlocked_r+0x2d8>)
 8016722:	6013      	str	r3, [r2, #0]
 8016724:	e6fb      	b.n	801651e <_tzset_unlocked_r+0x32>
 8016726:	2201      	movs	r2, #1
 8016728:	3b2b      	subs	r3, #43	; 0x2b
 801672a:	9204      	str	r2, [sp, #16]
 801672c:	425a      	negs	r2, r3
 801672e:	4153      	adcs	r3, r2
 8016730:	18e4      	adds	r4, r4, r3
 8016732:	e76d      	b.n	8016610 <_tzset_unlocked_r+0x124>
 8016734:	233c      	movs	r3, #60	; 0x3c
 8016736:	883a      	ldrh	r2, [r7, #0]
 8016738:	8829      	ldrh	r1, [r5, #0]
 801673a:	4353      	muls	r3, r2
 801673c:	aa02      	add	r2, sp, #8
 801673e:	8b12      	ldrh	r2, [r2, #24]
 8016740:	189b      	adds	r3, r3, r2
 8016742:	22e1      	movs	r2, #225	; 0xe1
 8016744:	0112      	lsls	r2, r2, #4
 8016746:	434a      	muls	r2, r1
 8016748:	189b      	adds	r3, r3, r2
 801674a:	9a04      	ldr	r2, [sp, #16]
 801674c:	435a      	muls	r2, r3
 801674e:	0013      	movs	r3, r2
 8016750:	e778      	b.n	8016644 <_tzset_unlocked_r+0x158>
 8016752:	2301      	movs	r3, #1
 8016754:	e77c      	b.n	8016650 <_tzset_unlocked_r+0x164>
 8016756:	2344      	movs	r3, #68	; 0x44
 8016758:	9305      	str	r3, [sp, #20]
 801675a:	2d4a      	cmp	r5, #74	; 0x4a
 801675c:	d101      	bne.n	8016762 <_tzset_unlocked_r+0x276>
 801675e:	3401      	adds	r4, #1
 8016760:	9505      	str	r5, [sp, #20]
 8016762:	220a      	movs	r2, #10
 8016764:	a90b      	add	r1, sp, #44	; 0x2c
 8016766:	0020      	movs	r0, r4
 8016768:	f000 fcba 	bl	80170e0 <strtoul>
 801676c:	231e      	movs	r3, #30
 801676e:	aa02      	add	r2, sp, #8
 8016770:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016772:	189b      	adds	r3, r3, r2
 8016774:	8018      	strh	r0, [r3, #0]
 8016776:	42a5      	cmp	r5, r4
 8016778:	d116      	bne.n	80167a8 <_tzset_unlocked_r+0x2bc>
 801677a:	9b04      	ldr	r3, [sp, #16]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d108      	bne.n	8016792 <_tzset_unlocked_r+0x2a6>
 8016780:	334d      	adds	r3, #77	; 0x4d
 8016782:	7233      	strb	r3, [r6, #8]
 8016784:	2303      	movs	r3, #3
 8016786:	60f3      	str	r3, [r6, #12]
 8016788:	3b01      	subs	r3, #1
 801678a:	6133      	str	r3, [r6, #16]
 801678c:	9b04      	ldr	r3, [sp, #16]
 801678e:	6173      	str	r3, [r6, #20]
 8016790:	e791      	b.n	80166b6 <_tzset_unlocked_r+0x1ca>
 8016792:	0033      	movs	r3, r6
 8016794:	224d      	movs	r2, #77	; 0x4d
 8016796:	3330      	adds	r3, #48	; 0x30
 8016798:	701a      	strb	r2, [r3, #0]
 801679a:	230b      	movs	r3, #11
 801679c:	6373      	str	r3, [r6, #52]	; 0x34
 801679e:	3b0a      	subs	r3, #10
 80167a0:	63b3      	str	r3, [r6, #56]	; 0x38
 80167a2:	2300      	movs	r3, #0
 80167a4:	63f3      	str	r3, [r6, #60]	; 0x3c
 80167a6:	e786      	b.n	80166b6 <_tzset_unlocked_r+0x1ca>
 80167a8:	9b05      	ldr	r3, [sp, #20]
 80167aa:	b280      	uxth	r0, r0
 80167ac:	703b      	strb	r3, [r7, #0]
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	e781      	b.n	80166b6 <_tzset_unlocked_r+0x1ca>
 80167b2:	46c0      	nop			; (mov r8, r8)
 80167b4:	08019907 	.word	0x08019907
 80167b8:	20001ac0 	.word	0x20001ac0
 80167bc:	20001ac8 	.word	0x20001ac8
 80167c0:	0801990a 	.word	0x0801990a
 80167c4:	20001ac4 	.word	0x20001ac4
 80167c8:	200007b0 	.word	0x200007b0
 80167cc:	0801990e 	.word	0x0801990e
 80167d0:	20001ab3 	.word	0x20001ab3
 80167d4:	08019931 	.word	0x08019931
 80167d8:	20001aa8 	.word	0x20001aa8
 80167dc:	fffff1f0 	.word	0xfffff1f0
 80167e0:	0801991d 	.word	0x0801991d
 80167e4:	08019930 	.word	0x08019930

080167e8 <__swbuf_r>:
 80167e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ea:	0005      	movs	r5, r0
 80167ec:	000e      	movs	r6, r1
 80167ee:	0014      	movs	r4, r2
 80167f0:	2800      	cmp	r0, #0
 80167f2:	d004      	beq.n	80167fe <__swbuf_r+0x16>
 80167f4:	6983      	ldr	r3, [r0, #24]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d101      	bne.n	80167fe <__swbuf_r+0x16>
 80167fa:	f000 f9dd 	bl	8016bb8 <__sinit>
 80167fe:	4b22      	ldr	r3, [pc, #136]	; (8016888 <__swbuf_r+0xa0>)
 8016800:	429c      	cmp	r4, r3
 8016802:	d12d      	bne.n	8016860 <__swbuf_r+0x78>
 8016804:	686c      	ldr	r4, [r5, #4]
 8016806:	69a3      	ldr	r3, [r4, #24]
 8016808:	60a3      	str	r3, [r4, #8]
 801680a:	89a3      	ldrh	r3, [r4, #12]
 801680c:	071b      	lsls	r3, r3, #28
 801680e:	d531      	bpl.n	8016874 <__swbuf_r+0x8c>
 8016810:	6923      	ldr	r3, [r4, #16]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d02e      	beq.n	8016874 <__swbuf_r+0x8c>
 8016816:	6823      	ldr	r3, [r4, #0]
 8016818:	6922      	ldr	r2, [r4, #16]
 801681a:	b2f7      	uxtb	r7, r6
 801681c:	1a98      	subs	r0, r3, r2
 801681e:	6963      	ldr	r3, [r4, #20]
 8016820:	b2f6      	uxtb	r6, r6
 8016822:	4283      	cmp	r3, r0
 8016824:	dc05      	bgt.n	8016832 <__swbuf_r+0x4a>
 8016826:	0021      	movs	r1, r4
 8016828:	0028      	movs	r0, r5
 801682a:	f000 f957 	bl	8016adc <_fflush_r>
 801682e:	2800      	cmp	r0, #0
 8016830:	d126      	bne.n	8016880 <__swbuf_r+0x98>
 8016832:	68a3      	ldr	r3, [r4, #8]
 8016834:	3001      	adds	r0, #1
 8016836:	3b01      	subs	r3, #1
 8016838:	60a3      	str	r3, [r4, #8]
 801683a:	6823      	ldr	r3, [r4, #0]
 801683c:	1c5a      	adds	r2, r3, #1
 801683e:	6022      	str	r2, [r4, #0]
 8016840:	701f      	strb	r7, [r3, #0]
 8016842:	6963      	ldr	r3, [r4, #20]
 8016844:	4283      	cmp	r3, r0
 8016846:	d004      	beq.n	8016852 <__swbuf_r+0x6a>
 8016848:	89a3      	ldrh	r3, [r4, #12]
 801684a:	07db      	lsls	r3, r3, #31
 801684c:	d51a      	bpl.n	8016884 <__swbuf_r+0x9c>
 801684e:	2e0a      	cmp	r6, #10
 8016850:	d118      	bne.n	8016884 <__swbuf_r+0x9c>
 8016852:	0021      	movs	r1, r4
 8016854:	0028      	movs	r0, r5
 8016856:	f000 f941 	bl	8016adc <_fflush_r>
 801685a:	2800      	cmp	r0, #0
 801685c:	d012      	beq.n	8016884 <__swbuf_r+0x9c>
 801685e:	e00f      	b.n	8016880 <__swbuf_r+0x98>
 8016860:	4b0a      	ldr	r3, [pc, #40]	; (801688c <__swbuf_r+0xa4>)
 8016862:	429c      	cmp	r4, r3
 8016864:	d101      	bne.n	801686a <__swbuf_r+0x82>
 8016866:	68ac      	ldr	r4, [r5, #8]
 8016868:	e7cd      	b.n	8016806 <__swbuf_r+0x1e>
 801686a:	4b09      	ldr	r3, [pc, #36]	; (8016890 <__swbuf_r+0xa8>)
 801686c:	429c      	cmp	r4, r3
 801686e:	d1ca      	bne.n	8016806 <__swbuf_r+0x1e>
 8016870:	68ec      	ldr	r4, [r5, #12]
 8016872:	e7c8      	b.n	8016806 <__swbuf_r+0x1e>
 8016874:	0021      	movs	r1, r4
 8016876:	0028      	movs	r0, r5
 8016878:	f000 f818 	bl	80168ac <__swsetup_r>
 801687c:	2800      	cmp	r0, #0
 801687e:	d0ca      	beq.n	8016816 <__swbuf_r+0x2e>
 8016880:	2601      	movs	r6, #1
 8016882:	4276      	negs	r6, r6
 8016884:	0030      	movs	r0, r6
 8016886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016888:	08019a64 	.word	0x08019a64
 801688c:	08019a84 	.word	0x08019a84
 8016890:	08019a44 	.word	0x08019a44

08016894 <__ascii_wctomb>:
 8016894:	1e0b      	subs	r3, r1, #0
 8016896:	d004      	beq.n	80168a2 <__ascii_wctomb+0xe>
 8016898:	2aff      	cmp	r2, #255	; 0xff
 801689a:	d904      	bls.n	80168a6 <__ascii_wctomb+0x12>
 801689c:	238a      	movs	r3, #138	; 0x8a
 801689e:	6003      	str	r3, [r0, #0]
 80168a0:	3b8b      	subs	r3, #139	; 0x8b
 80168a2:	0018      	movs	r0, r3
 80168a4:	4770      	bx	lr
 80168a6:	700a      	strb	r2, [r1, #0]
 80168a8:	2301      	movs	r3, #1
 80168aa:	e7fa      	b.n	80168a2 <__ascii_wctomb+0xe>

080168ac <__swsetup_r>:
 80168ac:	4b36      	ldr	r3, [pc, #216]	; (8016988 <__swsetup_r+0xdc>)
 80168ae:	b570      	push	{r4, r5, r6, lr}
 80168b0:	681d      	ldr	r5, [r3, #0]
 80168b2:	0006      	movs	r6, r0
 80168b4:	000c      	movs	r4, r1
 80168b6:	2d00      	cmp	r5, #0
 80168b8:	d005      	beq.n	80168c6 <__swsetup_r+0x1a>
 80168ba:	69ab      	ldr	r3, [r5, #24]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d102      	bne.n	80168c6 <__swsetup_r+0x1a>
 80168c0:	0028      	movs	r0, r5
 80168c2:	f000 f979 	bl	8016bb8 <__sinit>
 80168c6:	4b31      	ldr	r3, [pc, #196]	; (801698c <__swsetup_r+0xe0>)
 80168c8:	429c      	cmp	r4, r3
 80168ca:	d10f      	bne.n	80168ec <__swsetup_r+0x40>
 80168cc:	686c      	ldr	r4, [r5, #4]
 80168ce:	230c      	movs	r3, #12
 80168d0:	5ee2      	ldrsh	r2, [r4, r3]
 80168d2:	b293      	uxth	r3, r2
 80168d4:	0719      	lsls	r1, r3, #28
 80168d6:	d42d      	bmi.n	8016934 <__swsetup_r+0x88>
 80168d8:	06d9      	lsls	r1, r3, #27
 80168da:	d411      	bmi.n	8016900 <__swsetup_r+0x54>
 80168dc:	2309      	movs	r3, #9
 80168de:	2001      	movs	r0, #1
 80168e0:	6033      	str	r3, [r6, #0]
 80168e2:	3337      	adds	r3, #55	; 0x37
 80168e4:	4313      	orrs	r3, r2
 80168e6:	81a3      	strh	r3, [r4, #12]
 80168e8:	4240      	negs	r0, r0
 80168ea:	bd70      	pop	{r4, r5, r6, pc}
 80168ec:	4b28      	ldr	r3, [pc, #160]	; (8016990 <__swsetup_r+0xe4>)
 80168ee:	429c      	cmp	r4, r3
 80168f0:	d101      	bne.n	80168f6 <__swsetup_r+0x4a>
 80168f2:	68ac      	ldr	r4, [r5, #8]
 80168f4:	e7eb      	b.n	80168ce <__swsetup_r+0x22>
 80168f6:	4b27      	ldr	r3, [pc, #156]	; (8016994 <__swsetup_r+0xe8>)
 80168f8:	429c      	cmp	r4, r3
 80168fa:	d1e8      	bne.n	80168ce <__swsetup_r+0x22>
 80168fc:	68ec      	ldr	r4, [r5, #12]
 80168fe:	e7e6      	b.n	80168ce <__swsetup_r+0x22>
 8016900:	075b      	lsls	r3, r3, #29
 8016902:	d513      	bpl.n	801692c <__swsetup_r+0x80>
 8016904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016906:	2900      	cmp	r1, #0
 8016908:	d008      	beq.n	801691c <__swsetup_r+0x70>
 801690a:	0023      	movs	r3, r4
 801690c:	3344      	adds	r3, #68	; 0x44
 801690e:	4299      	cmp	r1, r3
 8016910:	d002      	beq.n	8016918 <__swsetup_r+0x6c>
 8016912:	0030      	movs	r0, r6
 8016914:	f7ff f970 	bl	8015bf8 <_free_r>
 8016918:	2300      	movs	r3, #0
 801691a:	6363      	str	r3, [r4, #52]	; 0x34
 801691c:	2224      	movs	r2, #36	; 0x24
 801691e:	89a3      	ldrh	r3, [r4, #12]
 8016920:	4393      	bics	r3, r2
 8016922:	81a3      	strh	r3, [r4, #12]
 8016924:	2300      	movs	r3, #0
 8016926:	6063      	str	r3, [r4, #4]
 8016928:	6923      	ldr	r3, [r4, #16]
 801692a:	6023      	str	r3, [r4, #0]
 801692c:	2308      	movs	r3, #8
 801692e:	89a2      	ldrh	r2, [r4, #12]
 8016930:	4313      	orrs	r3, r2
 8016932:	81a3      	strh	r3, [r4, #12]
 8016934:	6923      	ldr	r3, [r4, #16]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d10b      	bne.n	8016952 <__swsetup_r+0xa6>
 801693a:	21a0      	movs	r1, #160	; 0xa0
 801693c:	2280      	movs	r2, #128	; 0x80
 801693e:	89a3      	ldrh	r3, [r4, #12]
 8016940:	0089      	lsls	r1, r1, #2
 8016942:	0092      	lsls	r2, r2, #2
 8016944:	400b      	ands	r3, r1
 8016946:	4293      	cmp	r3, r2
 8016948:	d003      	beq.n	8016952 <__swsetup_r+0xa6>
 801694a:	0021      	movs	r1, r4
 801694c:	0030      	movs	r0, r6
 801694e:	f000 fa35 	bl	8016dbc <__smakebuf_r>
 8016952:	2301      	movs	r3, #1
 8016954:	89a2      	ldrh	r2, [r4, #12]
 8016956:	4013      	ands	r3, r2
 8016958:	d011      	beq.n	801697e <__swsetup_r+0xd2>
 801695a:	2300      	movs	r3, #0
 801695c:	60a3      	str	r3, [r4, #8]
 801695e:	6963      	ldr	r3, [r4, #20]
 8016960:	425b      	negs	r3, r3
 8016962:	61a3      	str	r3, [r4, #24]
 8016964:	2000      	movs	r0, #0
 8016966:	6923      	ldr	r3, [r4, #16]
 8016968:	4283      	cmp	r3, r0
 801696a:	d1be      	bne.n	80168ea <__swsetup_r+0x3e>
 801696c:	230c      	movs	r3, #12
 801696e:	5ee2      	ldrsh	r2, [r4, r3]
 8016970:	0613      	lsls	r3, r2, #24
 8016972:	d5ba      	bpl.n	80168ea <__swsetup_r+0x3e>
 8016974:	2340      	movs	r3, #64	; 0x40
 8016976:	4313      	orrs	r3, r2
 8016978:	81a3      	strh	r3, [r4, #12]
 801697a:	3801      	subs	r0, #1
 801697c:	e7b5      	b.n	80168ea <__swsetup_r+0x3e>
 801697e:	0792      	lsls	r2, r2, #30
 8016980:	d400      	bmi.n	8016984 <__swsetup_r+0xd8>
 8016982:	6963      	ldr	r3, [r4, #20]
 8016984:	60a3      	str	r3, [r4, #8]
 8016986:	e7ed      	b.n	8016964 <__swsetup_r+0xb8>
 8016988:	200005e0 	.word	0x200005e0
 801698c:	08019a64 	.word	0x08019a64
 8016990:	08019a84 	.word	0x08019a84
 8016994:	08019a44 	.word	0x08019a44

08016998 <div>:
 8016998:	b570      	push	{r4, r5, r6, lr}
 801699a:	000e      	movs	r6, r1
 801699c:	0004      	movs	r4, r0
 801699e:	0011      	movs	r1, r2
 80169a0:	0030      	movs	r0, r6
 80169a2:	0015      	movs	r5, r2
 80169a4:	f7f1 fd46 	bl	8008434 <__aeabi_idivmod>
 80169a8:	2e00      	cmp	r6, #0
 80169aa:	db07      	blt.n	80169bc <div+0x24>
 80169ac:	2900      	cmp	r1, #0
 80169ae:	da01      	bge.n	80169b4 <div+0x1c>
 80169b0:	3001      	adds	r0, #1
 80169b2:	1b49      	subs	r1, r1, r5
 80169b4:	6020      	str	r0, [r4, #0]
 80169b6:	6061      	str	r1, [r4, #4]
 80169b8:	0020      	movs	r0, r4
 80169ba:	bd70      	pop	{r4, r5, r6, pc}
 80169bc:	2900      	cmp	r1, #0
 80169be:	ddf9      	ble.n	80169b4 <div+0x1c>
 80169c0:	3801      	subs	r0, #1
 80169c2:	1949      	adds	r1, r1, r5
 80169c4:	e7f6      	b.n	80169b4 <div+0x1c>
	...

080169c8 <__sflush_r>:
 80169c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169ca:	898a      	ldrh	r2, [r1, #12]
 80169cc:	0005      	movs	r5, r0
 80169ce:	000c      	movs	r4, r1
 80169d0:	0713      	lsls	r3, r2, #28
 80169d2:	d460      	bmi.n	8016a96 <__sflush_r+0xce>
 80169d4:	684b      	ldr	r3, [r1, #4]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	dc04      	bgt.n	80169e4 <__sflush_r+0x1c>
 80169da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80169dc:	2b00      	cmp	r3, #0
 80169de:	dc01      	bgt.n	80169e4 <__sflush_r+0x1c>
 80169e0:	2000      	movs	r0, #0
 80169e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80169e6:	2f00      	cmp	r7, #0
 80169e8:	d0fa      	beq.n	80169e0 <__sflush_r+0x18>
 80169ea:	2300      	movs	r3, #0
 80169ec:	682e      	ldr	r6, [r5, #0]
 80169ee:	602b      	str	r3, [r5, #0]
 80169f0:	2380      	movs	r3, #128	; 0x80
 80169f2:	015b      	lsls	r3, r3, #5
 80169f4:	6a21      	ldr	r1, [r4, #32]
 80169f6:	401a      	ands	r2, r3
 80169f8:	d034      	beq.n	8016a64 <__sflush_r+0x9c>
 80169fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80169fc:	89a3      	ldrh	r3, [r4, #12]
 80169fe:	075b      	lsls	r3, r3, #29
 8016a00:	d506      	bpl.n	8016a10 <__sflush_r+0x48>
 8016a02:	6863      	ldr	r3, [r4, #4]
 8016a04:	1ac0      	subs	r0, r0, r3
 8016a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d001      	beq.n	8016a10 <__sflush_r+0x48>
 8016a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016a0e:	1ac0      	subs	r0, r0, r3
 8016a10:	0002      	movs	r2, r0
 8016a12:	6a21      	ldr	r1, [r4, #32]
 8016a14:	2300      	movs	r3, #0
 8016a16:	0028      	movs	r0, r5
 8016a18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016a1a:	47b8      	blx	r7
 8016a1c:	89a1      	ldrh	r1, [r4, #12]
 8016a1e:	1c43      	adds	r3, r0, #1
 8016a20:	d106      	bne.n	8016a30 <__sflush_r+0x68>
 8016a22:	682b      	ldr	r3, [r5, #0]
 8016a24:	2b1d      	cmp	r3, #29
 8016a26:	d830      	bhi.n	8016a8a <__sflush_r+0xc2>
 8016a28:	4a2b      	ldr	r2, [pc, #172]	; (8016ad8 <__sflush_r+0x110>)
 8016a2a:	40da      	lsrs	r2, r3
 8016a2c:	07d3      	lsls	r3, r2, #31
 8016a2e:	d52c      	bpl.n	8016a8a <__sflush_r+0xc2>
 8016a30:	2300      	movs	r3, #0
 8016a32:	6063      	str	r3, [r4, #4]
 8016a34:	6923      	ldr	r3, [r4, #16]
 8016a36:	6023      	str	r3, [r4, #0]
 8016a38:	04cb      	lsls	r3, r1, #19
 8016a3a:	d505      	bpl.n	8016a48 <__sflush_r+0x80>
 8016a3c:	1c43      	adds	r3, r0, #1
 8016a3e:	d102      	bne.n	8016a46 <__sflush_r+0x7e>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d100      	bne.n	8016a48 <__sflush_r+0x80>
 8016a46:	6560      	str	r0, [r4, #84]	; 0x54
 8016a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a4a:	602e      	str	r6, [r5, #0]
 8016a4c:	2900      	cmp	r1, #0
 8016a4e:	d0c7      	beq.n	80169e0 <__sflush_r+0x18>
 8016a50:	0023      	movs	r3, r4
 8016a52:	3344      	adds	r3, #68	; 0x44
 8016a54:	4299      	cmp	r1, r3
 8016a56:	d002      	beq.n	8016a5e <__sflush_r+0x96>
 8016a58:	0028      	movs	r0, r5
 8016a5a:	f7ff f8cd 	bl	8015bf8 <_free_r>
 8016a5e:	2000      	movs	r0, #0
 8016a60:	6360      	str	r0, [r4, #52]	; 0x34
 8016a62:	e7be      	b.n	80169e2 <__sflush_r+0x1a>
 8016a64:	2301      	movs	r3, #1
 8016a66:	0028      	movs	r0, r5
 8016a68:	47b8      	blx	r7
 8016a6a:	1c43      	adds	r3, r0, #1
 8016a6c:	d1c6      	bne.n	80169fc <__sflush_r+0x34>
 8016a6e:	682b      	ldr	r3, [r5, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d0c3      	beq.n	80169fc <__sflush_r+0x34>
 8016a74:	2b1d      	cmp	r3, #29
 8016a76:	d001      	beq.n	8016a7c <__sflush_r+0xb4>
 8016a78:	2b16      	cmp	r3, #22
 8016a7a:	d101      	bne.n	8016a80 <__sflush_r+0xb8>
 8016a7c:	602e      	str	r6, [r5, #0]
 8016a7e:	e7af      	b.n	80169e0 <__sflush_r+0x18>
 8016a80:	2340      	movs	r3, #64	; 0x40
 8016a82:	89a2      	ldrh	r2, [r4, #12]
 8016a84:	4313      	orrs	r3, r2
 8016a86:	81a3      	strh	r3, [r4, #12]
 8016a88:	e7ab      	b.n	80169e2 <__sflush_r+0x1a>
 8016a8a:	2340      	movs	r3, #64	; 0x40
 8016a8c:	430b      	orrs	r3, r1
 8016a8e:	2001      	movs	r0, #1
 8016a90:	81a3      	strh	r3, [r4, #12]
 8016a92:	4240      	negs	r0, r0
 8016a94:	e7a5      	b.n	80169e2 <__sflush_r+0x1a>
 8016a96:	690f      	ldr	r7, [r1, #16]
 8016a98:	2f00      	cmp	r7, #0
 8016a9a:	d0a1      	beq.n	80169e0 <__sflush_r+0x18>
 8016a9c:	680b      	ldr	r3, [r1, #0]
 8016a9e:	600f      	str	r7, [r1, #0]
 8016aa0:	1bdb      	subs	r3, r3, r7
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	0792      	lsls	r2, r2, #30
 8016aa8:	d100      	bne.n	8016aac <__sflush_r+0xe4>
 8016aaa:	694b      	ldr	r3, [r1, #20]
 8016aac:	60a3      	str	r3, [r4, #8]
 8016aae:	9b01      	ldr	r3, [sp, #4]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	dc00      	bgt.n	8016ab6 <__sflush_r+0xee>
 8016ab4:	e794      	b.n	80169e0 <__sflush_r+0x18>
 8016ab6:	9b01      	ldr	r3, [sp, #4]
 8016ab8:	003a      	movs	r2, r7
 8016aba:	6a21      	ldr	r1, [r4, #32]
 8016abc:	0028      	movs	r0, r5
 8016abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ac0:	47b0      	blx	r6
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	dc03      	bgt.n	8016ace <__sflush_r+0x106>
 8016ac6:	2340      	movs	r3, #64	; 0x40
 8016ac8:	89a2      	ldrh	r2, [r4, #12]
 8016aca:	4313      	orrs	r3, r2
 8016acc:	e7df      	b.n	8016a8e <__sflush_r+0xc6>
 8016ace:	9b01      	ldr	r3, [sp, #4]
 8016ad0:	183f      	adds	r7, r7, r0
 8016ad2:	1a1b      	subs	r3, r3, r0
 8016ad4:	9301      	str	r3, [sp, #4]
 8016ad6:	e7ea      	b.n	8016aae <__sflush_r+0xe6>
 8016ad8:	20400001 	.word	0x20400001

08016adc <_fflush_r>:
 8016adc:	690b      	ldr	r3, [r1, #16]
 8016ade:	b570      	push	{r4, r5, r6, lr}
 8016ae0:	0005      	movs	r5, r0
 8016ae2:	000c      	movs	r4, r1
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d101      	bne.n	8016aec <_fflush_r+0x10>
 8016ae8:	2000      	movs	r0, #0
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d004      	beq.n	8016afa <_fflush_r+0x1e>
 8016af0:	6983      	ldr	r3, [r0, #24]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d101      	bne.n	8016afa <_fflush_r+0x1e>
 8016af6:	f000 f85f 	bl	8016bb8 <__sinit>
 8016afa:	4b0b      	ldr	r3, [pc, #44]	; (8016b28 <_fflush_r+0x4c>)
 8016afc:	429c      	cmp	r4, r3
 8016afe:	d109      	bne.n	8016b14 <_fflush_r+0x38>
 8016b00:	686c      	ldr	r4, [r5, #4]
 8016b02:	220c      	movs	r2, #12
 8016b04:	5ea3      	ldrsh	r3, [r4, r2]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d0ee      	beq.n	8016ae8 <_fflush_r+0xc>
 8016b0a:	0021      	movs	r1, r4
 8016b0c:	0028      	movs	r0, r5
 8016b0e:	f7ff ff5b 	bl	80169c8 <__sflush_r>
 8016b12:	e7ea      	b.n	8016aea <_fflush_r+0xe>
 8016b14:	4b05      	ldr	r3, [pc, #20]	; (8016b2c <_fflush_r+0x50>)
 8016b16:	429c      	cmp	r4, r3
 8016b18:	d101      	bne.n	8016b1e <_fflush_r+0x42>
 8016b1a:	68ac      	ldr	r4, [r5, #8]
 8016b1c:	e7f1      	b.n	8016b02 <_fflush_r+0x26>
 8016b1e:	4b04      	ldr	r3, [pc, #16]	; (8016b30 <_fflush_r+0x54>)
 8016b20:	429c      	cmp	r4, r3
 8016b22:	d1ee      	bne.n	8016b02 <_fflush_r+0x26>
 8016b24:	68ec      	ldr	r4, [r5, #12]
 8016b26:	e7ec      	b.n	8016b02 <_fflush_r+0x26>
 8016b28:	08019a64 	.word	0x08019a64
 8016b2c:	08019a84 	.word	0x08019a84
 8016b30:	08019a44 	.word	0x08019a44

08016b34 <std>:
 8016b34:	2300      	movs	r3, #0
 8016b36:	b510      	push	{r4, lr}
 8016b38:	0004      	movs	r4, r0
 8016b3a:	6003      	str	r3, [r0, #0]
 8016b3c:	6043      	str	r3, [r0, #4]
 8016b3e:	6083      	str	r3, [r0, #8]
 8016b40:	8181      	strh	r1, [r0, #12]
 8016b42:	6643      	str	r3, [r0, #100]	; 0x64
 8016b44:	81c2      	strh	r2, [r0, #14]
 8016b46:	6103      	str	r3, [r0, #16]
 8016b48:	6143      	str	r3, [r0, #20]
 8016b4a:	6183      	str	r3, [r0, #24]
 8016b4c:	0019      	movs	r1, r3
 8016b4e:	2208      	movs	r2, #8
 8016b50:	305c      	adds	r0, #92	; 0x5c
 8016b52:	f7fe fdc3 	bl	80156dc <memset>
 8016b56:	4b05      	ldr	r3, [pc, #20]	; (8016b6c <std+0x38>)
 8016b58:	6224      	str	r4, [r4, #32]
 8016b5a:	6263      	str	r3, [r4, #36]	; 0x24
 8016b5c:	4b04      	ldr	r3, [pc, #16]	; (8016b70 <std+0x3c>)
 8016b5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8016b60:	4b04      	ldr	r3, [pc, #16]	; (8016b74 <std+0x40>)
 8016b62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016b64:	4b04      	ldr	r3, [pc, #16]	; (8016b78 <std+0x44>)
 8016b66:	6323      	str	r3, [r4, #48]	; 0x30
 8016b68:	bd10      	pop	{r4, pc}
 8016b6a:	46c0      	nop			; (mov r8, r8)
 8016b6c:	08016efd 	.word	0x08016efd
 8016b70:	08016f29 	.word	0x08016f29
 8016b74:	08016f61 	.word	0x08016f61
 8016b78:	08016f8d 	.word	0x08016f8d

08016b7c <_cleanup_r>:
 8016b7c:	b510      	push	{r4, lr}
 8016b7e:	4902      	ldr	r1, [pc, #8]	; (8016b88 <_cleanup_r+0xc>)
 8016b80:	f000 f88c 	bl	8016c9c <_fwalk_reent>
 8016b84:	bd10      	pop	{r4, pc}
 8016b86:	46c0      	nop			; (mov r8, r8)
 8016b88:	08016add 	.word	0x08016add

08016b8c <__sfmoreglue>:
 8016b8c:	b570      	push	{r4, r5, r6, lr}
 8016b8e:	2568      	movs	r5, #104	; 0x68
 8016b90:	1e4a      	subs	r2, r1, #1
 8016b92:	4355      	muls	r5, r2
 8016b94:	000e      	movs	r6, r1
 8016b96:	0029      	movs	r1, r5
 8016b98:	3174      	adds	r1, #116	; 0x74
 8016b9a:	f7ff f877 	bl	8015c8c <_malloc_r>
 8016b9e:	1e04      	subs	r4, r0, #0
 8016ba0:	d008      	beq.n	8016bb4 <__sfmoreglue+0x28>
 8016ba2:	2100      	movs	r1, #0
 8016ba4:	002a      	movs	r2, r5
 8016ba6:	6001      	str	r1, [r0, #0]
 8016ba8:	6046      	str	r6, [r0, #4]
 8016baa:	300c      	adds	r0, #12
 8016bac:	60a0      	str	r0, [r4, #8]
 8016bae:	3268      	adds	r2, #104	; 0x68
 8016bb0:	f7fe fd94 	bl	80156dc <memset>
 8016bb4:	0020      	movs	r0, r4
 8016bb6:	bd70      	pop	{r4, r5, r6, pc}

08016bb8 <__sinit>:
 8016bb8:	6983      	ldr	r3, [r0, #24]
 8016bba:	b513      	push	{r0, r1, r4, lr}
 8016bbc:	0004      	movs	r4, r0
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d128      	bne.n	8016c14 <__sinit+0x5c>
 8016bc2:	6483      	str	r3, [r0, #72]	; 0x48
 8016bc4:	64c3      	str	r3, [r0, #76]	; 0x4c
 8016bc6:	6503      	str	r3, [r0, #80]	; 0x50
 8016bc8:	4b13      	ldr	r3, [pc, #76]	; (8016c18 <__sinit+0x60>)
 8016bca:	4a14      	ldr	r2, [pc, #80]	; (8016c1c <__sinit+0x64>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	6282      	str	r2, [r0, #40]	; 0x28
 8016bd0:	9301      	str	r3, [sp, #4]
 8016bd2:	4298      	cmp	r0, r3
 8016bd4:	d101      	bne.n	8016bda <__sinit+0x22>
 8016bd6:	2301      	movs	r3, #1
 8016bd8:	6183      	str	r3, [r0, #24]
 8016bda:	0020      	movs	r0, r4
 8016bdc:	f000 f820 	bl	8016c20 <__sfp>
 8016be0:	6060      	str	r0, [r4, #4]
 8016be2:	0020      	movs	r0, r4
 8016be4:	f000 f81c 	bl	8016c20 <__sfp>
 8016be8:	60a0      	str	r0, [r4, #8]
 8016bea:	0020      	movs	r0, r4
 8016bec:	f000 f818 	bl	8016c20 <__sfp>
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	60e0      	str	r0, [r4, #12]
 8016bf4:	2104      	movs	r1, #4
 8016bf6:	6860      	ldr	r0, [r4, #4]
 8016bf8:	f7ff ff9c 	bl	8016b34 <std>
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	2109      	movs	r1, #9
 8016c00:	68a0      	ldr	r0, [r4, #8]
 8016c02:	f7ff ff97 	bl	8016b34 <std>
 8016c06:	2202      	movs	r2, #2
 8016c08:	2112      	movs	r1, #18
 8016c0a:	68e0      	ldr	r0, [r4, #12]
 8016c0c:	f7ff ff92 	bl	8016b34 <std>
 8016c10:	2301      	movs	r3, #1
 8016c12:	61a3      	str	r3, [r4, #24]
 8016c14:	bd13      	pop	{r0, r1, r4, pc}
 8016c16:	46c0      	nop			; (mov r8, r8)
 8016c18:	08019868 	.word	0x08019868
 8016c1c:	08016b7d 	.word	0x08016b7d

08016c20 <__sfp>:
 8016c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c22:	4b1c      	ldr	r3, [pc, #112]	; (8016c94 <__sfp+0x74>)
 8016c24:	0007      	movs	r7, r0
 8016c26:	681e      	ldr	r6, [r3, #0]
 8016c28:	69b3      	ldr	r3, [r6, #24]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d102      	bne.n	8016c34 <__sfp+0x14>
 8016c2e:	0030      	movs	r0, r6
 8016c30:	f7ff ffc2 	bl	8016bb8 <__sinit>
 8016c34:	3648      	adds	r6, #72	; 0x48
 8016c36:	68b4      	ldr	r4, [r6, #8]
 8016c38:	6873      	ldr	r3, [r6, #4]
 8016c3a:	3b01      	subs	r3, #1
 8016c3c:	d504      	bpl.n	8016c48 <__sfp+0x28>
 8016c3e:	6833      	ldr	r3, [r6, #0]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d007      	beq.n	8016c54 <__sfp+0x34>
 8016c44:	6836      	ldr	r6, [r6, #0]
 8016c46:	e7f6      	b.n	8016c36 <__sfp+0x16>
 8016c48:	220c      	movs	r2, #12
 8016c4a:	5ea5      	ldrsh	r5, [r4, r2]
 8016c4c:	2d00      	cmp	r5, #0
 8016c4e:	d00d      	beq.n	8016c6c <__sfp+0x4c>
 8016c50:	3468      	adds	r4, #104	; 0x68
 8016c52:	e7f2      	b.n	8016c3a <__sfp+0x1a>
 8016c54:	2104      	movs	r1, #4
 8016c56:	0038      	movs	r0, r7
 8016c58:	f7ff ff98 	bl	8016b8c <__sfmoreglue>
 8016c5c:	6030      	str	r0, [r6, #0]
 8016c5e:	2800      	cmp	r0, #0
 8016c60:	d1f0      	bne.n	8016c44 <__sfp+0x24>
 8016c62:	230c      	movs	r3, #12
 8016c64:	0004      	movs	r4, r0
 8016c66:	603b      	str	r3, [r7, #0]
 8016c68:	0020      	movs	r0, r4
 8016c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c6c:	0020      	movs	r0, r4
 8016c6e:	4b0a      	ldr	r3, [pc, #40]	; (8016c98 <__sfp+0x78>)
 8016c70:	6665      	str	r5, [r4, #100]	; 0x64
 8016c72:	6025      	str	r5, [r4, #0]
 8016c74:	6065      	str	r5, [r4, #4]
 8016c76:	60a5      	str	r5, [r4, #8]
 8016c78:	60e3      	str	r3, [r4, #12]
 8016c7a:	6125      	str	r5, [r4, #16]
 8016c7c:	6165      	str	r5, [r4, #20]
 8016c7e:	61a5      	str	r5, [r4, #24]
 8016c80:	2208      	movs	r2, #8
 8016c82:	0029      	movs	r1, r5
 8016c84:	305c      	adds	r0, #92	; 0x5c
 8016c86:	f7fe fd29 	bl	80156dc <memset>
 8016c8a:	6365      	str	r5, [r4, #52]	; 0x34
 8016c8c:	63a5      	str	r5, [r4, #56]	; 0x38
 8016c8e:	64a5      	str	r5, [r4, #72]	; 0x48
 8016c90:	64e5      	str	r5, [r4, #76]	; 0x4c
 8016c92:	e7e9      	b.n	8016c68 <__sfp+0x48>
 8016c94:	08019868 	.word	0x08019868
 8016c98:	ffff0001 	.word	0xffff0001

08016c9c <_fwalk_reent>:
 8016c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c9e:	0004      	movs	r4, r0
 8016ca0:	0007      	movs	r7, r0
 8016ca2:	2600      	movs	r6, #0
 8016ca4:	9101      	str	r1, [sp, #4]
 8016ca6:	3448      	adds	r4, #72	; 0x48
 8016ca8:	2c00      	cmp	r4, #0
 8016caa:	d101      	bne.n	8016cb0 <_fwalk_reent+0x14>
 8016cac:	0030      	movs	r0, r6
 8016cae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016cb0:	6863      	ldr	r3, [r4, #4]
 8016cb2:	68a5      	ldr	r5, [r4, #8]
 8016cb4:	9300      	str	r3, [sp, #0]
 8016cb6:	9b00      	ldr	r3, [sp, #0]
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	9300      	str	r3, [sp, #0]
 8016cbc:	d501      	bpl.n	8016cc2 <_fwalk_reent+0x26>
 8016cbe:	6824      	ldr	r4, [r4, #0]
 8016cc0:	e7f2      	b.n	8016ca8 <_fwalk_reent+0xc>
 8016cc2:	89ab      	ldrh	r3, [r5, #12]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d908      	bls.n	8016cda <_fwalk_reent+0x3e>
 8016cc8:	220e      	movs	r2, #14
 8016cca:	5eab      	ldrsh	r3, [r5, r2]
 8016ccc:	3301      	adds	r3, #1
 8016cce:	d004      	beq.n	8016cda <_fwalk_reent+0x3e>
 8016cd0:	0029      	movs	r1, r5
 8016cd2:	0038      	movs	r0, r7
 8016cd4:	9b01      	ldr	r3, [sp, #4]
 8016cd6:	4798      	blx	r3
 8016cd8:	4306      	orrs	r6, r0
 8016cda:	3568      	adds	r5, #104	; 0x68
 8016cdc:	e7eb      	b.n	8016cb6 <_fwalk_reent+0x1a>
	...

08016ce0 <_findenv_r>:
 8016ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ce2:	000e      	movs	r6, r1
 8016ce4:	b085      	sub	sp, #20
 8016ce6:	0007      	movs	r7, r0
 8016ce8:	9203      	str	r2, [sp, #12]
 8016cea:	f000 fa33 	bl	8017154 <__env_lock>
 8016cee:	4c19      	ldr	r4, [pc, #100]	; (8016d54 <_findenv_r+0x74>)
 8016cf0:	0033      	movs	r3, r6
 8016cf2:	6825      	ldr	r5, [r4, #0]
 8016cf4:	2d00      	cmp	r5, #0
 8016cf6:	d106      	bne.n	8016d06 <_findenv_r+0x26>
 8016cf8:	0038      	movs	r0, r7
 8016cfa:	f000 fa2c 	bl	8017156 <__env_unlock>
 8016cfe:	2000      	movs	r0, #0
 8016d00:	b005      	add	sp, #20
 8016d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d04:	3301      	adds	r3, #1
 8016d06:	781a      	ldrb	r2, [r3, #0]
 8016d08:	2a00      	cmp	r2, #0
 8016d0a:	d01f      	beq.n	8016d4c <_findenv_r+0x6c>
 8016d0c:	2a3d      	cmp	r2, #61	; 0x3d
 8016d0e:	d1f9      	bne.n	8016d04 <_findenv_r+0x24>
 8016d10:	e7f2      	b.n	8016cf8 <_findenv_r+0x18>
 8016d12:	3504      	adds	r5, #4
 8016d14:	6828      	ldr	r0, [r5, #0]
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d0ee      	beq.n	8016cf8 <_findenv_r+0x18>
 8016d1a:	9a01      	ldr	r2, [sp, #4]
 8016d1c:	0031      	movs	r1, r6
 8016d1e:	f000 f93b 	bl	8016f98 <strncmp>
 8016d22:	2800      	cmp	r0, #0
 8016d24:	d1f5      	bne.n	8016d12 <_findenv_r+0x32>
 8016d26:	9a01      	ldr	r2, [sp, #4]
 8016d28:	682b      	ldr	r3, [r5, #0]
 8016d2a:	4694      	mov	ip, r2
 8016d2c:	4463      	add	r3, ip
 8016d2e:	9302      	str	r3, [sp, #8]
 8016d30:	781b      	ldrb	r3, [r3, #0]
 8016d32:	2b3d      	cmp	r3, #61	; 0x3d
 8016d34:	d1ed      	bne.n	8016d12 <_findenv_r+0x32>
 8016d36:	6823      	ldr	r3, [r4, #0]
 8016d38:	0038      	movs	r0, r7
 8016d3a:	1aed      	subs	r5, r5, r3
 8016d3c:	9b03      	ldr	r3, [sp, #12]
 8016d3e:	10ad      	asrs	r5, r5, #2
 8016d40:	601d      	str	r5, [r3, #0]
 8016d42:	f000 fa08 	bl	8017156 <__env_unlock>
 8016d46:	9802      	ldr	r0, [sp, #8]
 8016d48:	3001      	adds	r0, #1
 8016d4a:	e7d9      	b.n	8016d00 <_findenv_r+0x20>
 8016d4c:	1b9b      	subs	r3, r3, r6
 8016d4e:	9301      	str	r3, [sp, #4]
 8016d50:	e7e0      	b.n	8016d14 <_findenv_r+0x34>
 8016d52:	46c0      	nop			; (mov r8, r8)
 8016d54:	20000810 	.word	0x20000810

08016d58 <_getenv_r>:
 8016d58:	b507      	push	{r0, r1, r2, lr}
 8016d5a:	aa01      	add	r2, sp, #4
 8016d5c:	f7ff ffc0 	bl	8016ce0 <_findenv_r>
 8016d60:	bd0e      	pop	{r1, r2, r3, pc}
	...

08016d64 <__gettzinfo>:
 8016d64:	4800      	ldr	r0, [pc, #0]	; (8016d68 <__gettzinfo+0x4>)
 8016d66:	4770      	bx	lr
 8016d68:	200007b8 	.word	0x200007b8

08016d6c <__swhatbuf_r>:
 8016d6c:	b570      	push	{r4, r5, r6, lr}
 8016d6e:	000e      	movs	r6, r1
 8016d70:	001d      	movs	r5, r3
 8016d72:	230e      	movs	r3, #14
 8016d74:	5ec9      	ldrsh	r1, [r1, r3]
 8016d76:	b096      	sub	sp, #88	; 0x58
 8016d78:	0014      	movs	r4, r2
 8016d7a:	2900      	cmp	r1, #0
 8016d7c:	da07      	bge.n	8016d8e <__swhatbuf_r+0x22>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	602b      	str	r3, [r5, #0]
 8016d82:	89b3      	ldrh	r3, [r6, #12]
 8016d84:	061b      	lsls	r3, r3, #24
 8016d86:	d411      	bmi.n	8016dac <__swhatbuf_r+0x40>
 8016d88:	2380      	movs	r3, #128	; 0x80
 8016d8a:	00db      	lsls	r3, r3, #3
 8016d8c:	e00f      	b.n	8016dae <__swhatbuf_r+0x42>
 8016d8e:	466a      	mov	r2, sp
 8016d90:	f000 f9e2 	bl	8017158 <_fstat_r>
 8016d94:	2800      	cmp	r0, #0
 8016d96:	dbf2      	blt.n	8016d7e <__swhatbuf_r+0x12>
 8016d98:	22f0      	movs	r2, #240	; 0xf0
 8016d9a:	9b01      	ldr	r3, [sp, #4]
 8016d9c:	0212      	lsls	r2, r2, #8
 8016d9e:	4013      	ands	r3, r2
 8016da0:	4a05      	ldr	r2, [pc, #20]	; (8016db8 <__swhatbuf_r+0x4c>)
 8016da2:	189b      	adds	r3, r3, r2
 8016da4:	425a      	negs	r2, r3
 8016da6:	4153      	adcs	r3, r2
 8016da8:	602b      	str	r3, [r5, #0]
 8016daa:	e7ed      	b.n	8016d88 <__swhatbuf_r+0x1c>
 8016dac:	2340      	movs	r3, #64	; 0x40
 8016dae:	2000      	movs	r0, #0
 8016db0:	6023      	str	r3, [r4, #0]
 8016db2:	b016      	add	sp, #88	; 0x58
 8016db4:	bd70      	pop	{r4, r5, r6, pc}
 8016db6:	46c0      	nop			; (mov r8, r8)
 8016db8:	ffffe000 	.word	0xffffe000

08016dbc <__smakebuf_r>:
 8016dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dbe:	2602      	movs	r6, #2
 8016dc0:	898b      	ldrh	r3, [r1, #12]
 8016dc2:	0005      	movs	r5, r0
 8016dc4:	000c      	movs	r4, r1
 8016dc6:	4233      	tst	r3, r6
 8016dc8:	d006      	beq.n	8016dd8 <__smakebuf_r+0x1c>
 8016dca:	0023      	movs	r3, r4
 8016dcc:	3347      	adds	r3, #71	; 0x47
 8016dce:	6023      	str	r3, [r4, #0]
 8016dd0:	6123      	str	r3, [r4, #16]
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	6163      	str	r3, [r4, #20]
 8016dd6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016dd8:	ab01      	add	r3, sp, #4
 8016dda:	466a      	mov	r2, sp
 8016ddc:	f7ff ffc6 	bl	8016d6c <__swhatbuf_r>
 8016de0:	9900      	ldr	r1, [sp, #0]
 8016de2:	0007      	movs	r7, r0
 8016de4:	0028      	movs	r0, r5
 8016de6:	f7fe ff51 	bl	8015c8c <_malloc_r>
 8016dea:	2800      	cmp	r0, #0
 8016dec:	d108      	bne.n	8016e00 <__smakebuf_r+0x44>
 8016dee:	220c      	movs	r2, #12
 8016df0:	5ea3      	ldrsh	r3, [r4, r2]
 8016df2:	059a      	lsls	r2, r3, #22
 8016df4:	d4ef      	bmi.n	8016dd6 <__smakebuf_r+0x1a>
 8016df6:	2203      	movs	r2, #3
 8016df8:	4393      	bics	r3, r2
 8016dfa:	431e      	orrs	r6, r3
 8016dfc:	81a6      	strh	r6, [r4, #12]
 8016dfe:	e7e4      	b.n	8016dca <__smakebuf_r+0xe>
 8016e00:	4b0f      	ldr	r3, [pc, #60]	; (8016e40 <__smakebuf_r+0x84>)
 8016e02:	62ab      	str	r3, [r5, #40]	; 0x28
 8016e04:	2380      	movs	r3, #128	; 0x80
 8016e06:	89a2      	ldrh	r2, [r4, #12]
 8016e08:	6020      	str	r0, [r4, #0]
 8016e0a:	4313      	orrs	r3, r2
 8016e0c:	81a3      	strh	r3, [r4, #12]
 8016e0e:	9b00      	ldr	r3, [sp, #0]
 8016e10:	6120      	str	r0, [r4, #16]
 8016e12:	6163      	str	r3, [r4, #20]
 8016e14:	9b01      	ldr	r3, [sp, #4]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00d      	beq.n	8016e36 <__smakebuf_r+0x7a>
 8016e1a:	230e      	movs	r3, #14
 8016e1c:	5ee1      	ldrsh	r1, [r4, r3]
 8016e1e:	0028      	movs	r0, r5
 8016e20:	f000 f9ac 	bl	801717c <_isatty_r>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	d006      	beq.n	8016e36 <__smakebuf_r+0x7a>
 8016e28:	2203      	movs	r2, #3
 8016e2a:	89a3      	ldrh	r3, [r4, #12]
 8016e2c:	4393      	bics	r3, r2
 8016e2e:	001a      	movs	r2, r3
 8016e30:	2301      	movs	r3, #1
 8016e32:	4313      	orrs	r3, r2
 8016e34:	81a3      	strh	r3, [r4, #12]
 8016e36:	89a0      	ldrh	r0, [r4, #12]
 8016e38:	4338      	orrs	r0, r7
 8016e3a:	81a0      	strh	r0, [r4, #12]
 8016e3c:	e7cb      	b.n	8016dd6 <__smakebuf_r+0x1a>
 8016e3e:	46c0      	nop			; (mov r8, r8)
 8016e40:	08016b7d 	.word	0x08016b7d

08016e44 <memchr>:
 8016e44:	b2c9      	uxtb	r1, r1
 8016e46:	1882      	adds	r2, r0, r2
 8016e48:	4290      	cmp	r0, r2
 8016e4a:	d101      	bne.n	8016e50 <memchr+0xc>
 8016e4c:	2000      	movs	r0, #0
 8016e4e:	4770      	bx	lr
 8016e50:	7803      	ldrb	r3, [r0, #0]
 8016e52:	428b      	cmp	r3, r1
 8016e54:	d0fb      	beq.n	8016e4e <memchr+0xa>
 8016e56:	3001      	adds	r0, #1
 8016e58:	e7f6      	b.n	8016e48 <memchr+0x4>

08016e5a <__malloc_lock>:
 8016e5a:	4770      	bx	lr

08016e5c <__malloc_unlock>:
 8016e5c:	4770      	bx	lr

08016e5e <_realloc_r>:
 8016e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e60:	0007      	movs	r7, r0
 8016e62:	000d      	movs	r5, r1
 8016e64:	0016      	movs	r6, r2
 8016e66:	2900      	cmp	r1, #0
 8016e68:	d105      	bne.n	8016e76 <_realloc_r+0x18>
 8016e6a:	0011      	movs	r1, r2
 8016e6c:	f7fe ff0e 	bl	8015c8c <_malloc_r>
 8016e70:	0004      	movs	r4, r0
 8016e72:	0020      	movs	r0, r4
 8016e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e76:	2a00      	cmp	r2, #0
 8016e78:	d103      	bne.n	8016e82 <_realloc_r+0x24>
 8016e7a:	f7fe febd 	bl	8015bf8 <_free_r>
 8016e7e:	0034      	movs	r4, r6
 8016e80:	e7f7      	b.n	8016e72 <_realloc_r+0x14>
 8016e82:	f000 f9a1 	bl	80171c8 <_malloc_usable_size_r>
 8016e86:	002c      	movs	r4, r5
 8016e88:	42b0      	cmp	r0, r6
 8016e8a:	d2f2      	bcs.n	8016e72 <_realloc_r+0x14>
 8016e8c:	0031      	movs	r1, r6
 8016e8e:	0038      	movs	r0, r7
 8016e90:	f7fe fefc 	bl	8015c8c <_malloc_r>
 8016e94:	1e04      	subs	r4, r0, #0
 8016e96:	d0ec      	beq.n	8016e72 <_realloc_r+0x14>
 8016e98:	0029      	movs	r1, r5
 8016e9a:	0032      	movs	r2, r6
 8016e9c:	f7fe fc15 	bl	80156ca <memcpy>
 8016ea0:	0029      	movs	r1, r5
 8016ea2:	0038      	movs	r0, r7
 8016ea4:	f7fe fea8 	bl	8015bf8 <_free_r>
 8016ea8:	e7e3      	b.n	8016e72 <_realloc_r+0x14>
	...

08016eac <siscanf>:
 8016eac:	b40e      	push	{r1, r2, r3}
 8016eae:	2381      	movs	r3, #129	; 0x81
 8016eb0:	b570      	push	{r4, r5, r6, lr}
 8016eb2:	b09d      	sub	sp, #116	; 0x74
 8016eb4:	ac02      	add	r4, sp, #8
 8016eb6:	ad21      	add	r5, sp, #132	; 0x84
 8016eb8:	009b      	lsls	r3, r3, #2
 8016eba:	cd40      	ldmia	r5!, {r6}
 8016ebc:	81a3      	strh	r3, [r4, #12]
 8016ebe:	9002      	str	r0, [sp, #8]
 8016ec0:	9006      	str	r0, [sp, #24]
 8016ec2:	f7f1 f92b 	bl	800811c <strlen>
 8016ec6:	4b0b      	ldr	r3, [pc, #44]	; (8016ef4 <siscanf+0x48>)
 8016ec8:	6060      	str	r0, [r4, #4]
 8016eca:	6263      	str	r3, [r4, #36]	; 0x24
 8016ecc:	2300      	movs	r3, #0
 8016ece:	6160      	str	r0, [r4, #20]
 8016ed0:	4809      	ldr	r0, [pc, #36]	; (8016ef8 <siscanf+0x4c>)
 8016ed2:	6363      	str	r3, [r4, #52]	; 0x34
 8016ed4:	64a3      	str	r3, [r4, #72]	; 0x48
 8016ed6:	3b01      	subs	r3, #1
 8016ed8:	81e3      	strh	r3, [r4, #14]
 8016eda:	0032      	movs	r2, r6
 8016edc:	002b      	movs	r3, r5
 8016ede:	0021      	movs	r1, r4
 8016ee0:	6800      	ldr	r0, [r0, #0]
 8016ee2:	9501      	str	r5, [sp, #4]
 8016ee4:	f000 f9d4 	bl	8017290 <__ssvfiscanf_r>
 8016ee8:	b01d      	add	sp, #116	; 0x74
 8016eea:	bc70      	pop	{r4, r5, r6}
 8016eec:	bc08      	pop	{r3}
 8016eee:	b003      	add	sp, #12
 8016ef0:	4718      	bx	r3
 8016ef2:	46c0      	nop			; (mov r8, r8)
 8016ef4:	08016f25 	.word	0x08016f25
 8016ef8:	200005e0 	.word	0x200005e0

08016efc <__sread>:
 8016efc:	b570      	push	{r4, r5, r6, lr}
 8016efe:	000c      	movs	r4, r1
 8016f00:	250e      	movs	r5, #14
 8016f02:	5f49      	ldrsh	r1, [r1, r5]
 8016f04:	f000 fc9a 	bl	801783c <_read_r>
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	db03      	blt.n	8016f14 <__sread+0x18>
 8016f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016f0e:	181b      	adds	r3, r3, r0
 8016f10:	6563      	str	r3, [r4, #84]	; 0x54
 8016f12:	bd70      	pop	{r4, r5, r6, pc}
 8016f14:	89a3      	ldrh	r3, [r4, #12]
 8016f16:	4a02      	ldr	r2, [pc, #8]	; (8016f20 <__sread+0x24>)
 8016f18:	4013      	ands	r3, r2
 8016f1a:	81a3      	strh	r3, [r4, #12]
 8016f1c:	e7f9      	b.n	8016f12 <__sread+0x16>
 8016f1e:	46c0      	nop			; (mov r8, r8)
 8016f20:	ffffefff 	.word	0xffffefff

08016f24 <__seofread>:
 8016f24:	2000      	movs	r0, #0
 8016f26:	4770      	bx	lr

08016f28 <__swrite>:
 8016f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f2a:	001f      	movs	r7, r3
 8016f2c:	898b      	ldrh	r3, [r1, #12]
 8016f2e:	0005      	movs	r5, r0
 8016f30:	000c      	movs	r4, r1
 8016f32:	0016      	movs	r6, r2
 8016f34:	05db      	lsls	r3, r3, #23
 8016f36:	d505      	bpl.n	8016f44 <__swrite+0x1c>
 8016f38:	230e      	movs	r3, #14
 8016f3a:	5ec9      	ldrsh	r1, [r1, r3]
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	2302      	movs	r3, #2
 8016f40:	f000 f92e 	bl	80171a0 <_lseek_r>
 8016f44:	89a3      	ldrh	r3, [r4, #12]
 8016f46:	4a05      	ldr	r2, [pc, #20]	; (8016f5c <__swrite+0x34>)
 8016f48:	0028      	movs	r0, r5
 8016f4a:	4013      	ands	r3, r2
 8016f4c:	81a3      	strh	r3, [r4, #12]
 8016f4e:	0032      	movs	r2, r6
 8016f50:	230e      	movs	r3, #14
 8016f52:	5ee1      	ldrsh	r1, [r4, r3]
 8016f54:	003b      	movs	r3, r7
 8016f56:	f000 f8d7 	bl	8017108 <_write_r>
 8016f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f5c:	ffffefff 	.word	0xffffefff

08016f60 <__sseek>:
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	000c      	movs	r4, r1
 8016f64:	250e      	movs	r5, #14
 8016f66:	5f49      	ldrsh	r1, [r1, r5]
 8016f68:	f000 f91a 	bl	80171a0 <_lseek_r>
 8016f6c:	89a3      	ldrh	r3, [r4, #12]
 8016f6e:	1c42      	adds	r2, r0, #1
 8016f70:	d103      	bne.n	8016f7a <__sseek+0x1a>
 8016f72:	4a05      	ldr	r2, [pc, #20]	; (8016f88 <__sseek+0x28>)
 8016f74:	4013      	ands	r3, r2
 8016f76:	81a3      	strh	r3, [r4, #12]
 8016f78:	bd70      	pop	{r4, r5, r6, pc}
 8016f7a:	2280      	movs	r2, #128	; 0x80
 8016f7c:	0152      	lsls	r2, r2, #5
 8016f7e:	4313      	orrs	r3, r2
 8016f80:	81a3      	strh	r3, [r4, #12]
 8016f82:	6560      	str	r0, [r4, #84]	; 0x54
 8016f84:	e7f8      	b.n	8016f78 <__sseek+0x18>
 8016f86:	46c0      	nop			; (mov r8, r8)
 8016f88:	ffffefff 	.word	0xffffefff

08016f8c <__sclose>:
 8016f8c:	b510      	push	{r4, lr}
 8016f8e:	230e      	movs	r3, #14
 8016f90:	5ec9      	ldrsh	r1, [r1, r3]
 8016f92:	f000 f8cd 	bl	8017130 <_close_r>
 8016f96:	bd10      	pop	{r4, pc}

08016f98 <strncmp>:
 8016f98:	2300      	movs	r3, #0
 8016f9a:	b530      	push	{r4, r5, lr}
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d00a      	beq.n	8016fb6 <strncmp+0x1e>
 8016fa0:	3a01      	subs	r2, #1
 8016fa2:	5cc4      	ldrb	r4, [r0, r3]
 8016fa4:	5ccd      	ldrb	r5, [r1, r3]
 8016fa6:	42ac      	cmp	r4, r5
 8016fa8:	d104      	bne.n	8016fb4 <strncmp+0x1c>
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d002      	beq.n	8016fb4 <strncmp+0x1c>
 8016fae:	3301      	adds	r3, #1
 8016fb0:	2c00      	cmp	r4, #0
 8016fb2:	d1f6      	bne.n	8016fa2 <strncmp+0xa>
 8016fb4:	1b63      	subs	r3, r4, r5
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	bd30      	pop	{r4, r5, pc}

08016fba <_strtoul_l.isra.0>:
 8016fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fbc:	001f      	movs	r7, r3
 8016fbe:	000e      	movs	r6, r1
 8016fc0:	b085      	sub	sp, #20
 8016fc2:	9003      	str	r0, [sp, #12]
 8016fc4:	9101      	str	r1, [sp, #4]
 8016fc6:	9202      	str	r2, [sp, #8]
 8016fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fca:	7834      	ldrb	r4, [r6, #0]
 8016fcc:	f7fe fb36 	bl	801563c <__locale_ctype_ptr_l>
 8016fd0:	2208      	movs	r2, #8
 8016fd2:	1900      	adds	r0, r0, r4
 8016fd4:	7843      	ldrb	r3, [r0, #1]
 8016fd6:	1c75      	adds	r5, r6, #1
 8016fd8:	4013      	ands	r3, r2
 8016fda:	d138      	bne.n	801704e <_strtoul_l.isra.0+0x94>
 8016fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8016fde:	d138      	bne.n	8017052 <_strtoul_l.isra.0+0x98>
 8016fe0:	7874      	ldrb	r4, [r6, #1]
 8016fe2:	1cb5      	adds	r5, r6, #2
 8016fe4:	3301      	adds	r3, #1
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	2f00      	cmp	r7, #0
 8016fea:	d065      	beq.n	80170b8 <_strtoul_l.isra.0+0xfe>
 8016fec:	2f10      	cmp	r7, #16
 8016fee:	d109      	bne.n	8017004 <_strtoul_l.isra.0+0x4a>
 8016ff0:	2c30      	cmp	r4, #48	; 0x30
 8016ff2:	d107      	bne.n	8017004 <_strtoul_l.isra.0+0x4a>
 8016ff4:	2220      	movs	r2, #32
 8016ff6:	782b      	ldrb	r3, [r5, #0]
 8016ff8:	4393      	bics	r3, r2
 8016ffa:	2b58      	cmp	r3, #88	; 0x58
 8016ffc:	d157      	bne.n	80170ae <_strtoul_l.isra.0+0xf4>
 8016ffe:	2710      	movs	r7, #16
 8017000:	786c      	ldrb	r4, [r5, #1]
 8017002:	3502      	adds	r5, #2
 8017004:	2001      	movs	r0, #1
 8017006:	0039      	movs	r1, r7
 8017008:	4240      	negs	r0, r0
 801700a:	f7f1 f8a3 	bl	8008154 <__udivsi3>
 801700e:	0006      	movs	r6, r0
 8017010:	2001      	movs	r0, #1
 8017012:	0039      	movs	r1, r7
 8017014:	4240      	negs	r0, r0
 8017016:	f7f1 f923 	bl	8008260 <__aeabi_uidivmod>
 801701a:	2300      	movs	r3, #0
 801701c:	2201      	movs	r2, #1
 801701e:	468c      	mov	ip, r1
 8017020:	0018      	movs	r0, r3
 8017022:	4252      	negs	r2, r2
 8017024:	0021      	movs	r1, r4
 8017026:	3930      	subs	r1, #48	; 0x30
 8017028:	2909      	cmp	r1, #9
 801702a:	d817      	bhi.n	801705c <_strtoul_l.isra.0+0xa2>
 801702c:	000c      	movs	r4, r1
 801702e:	42a7      	cmp	r7, r4
 8017030:	dd22      	ble.n	8017078 <_strtoul_l.isra.0+0xbe>
 8017032:	2b00      	cmp	r3, #0
 8017034:	db1e      	blt.n	8017074 <_strtoul_l.isra.0+0xba>
 8017036:	0013      	movs	r3, r2
 8017038:	4286      	cmp	r6, r0
 801703a:	d305      	bcc.n	8017048 <_strtoul_l.isra.0+0x8e>
 801703c:	d101      	bne.n	8017042 <_strtoul_l.isra.0+0x88>
 801703e:	45a4      	cmp	ip, r4
 8017040:	db02      	blt.n	8017048 <_strtoul_l.isra.0+0x8e>
 8017042:	2301      	movs	r3, #1
 8017044:	4378      	muls	r0, r7
 8017046:	1820      	adds	r0, r4, r0
 8017048:	782c      	ldrb	r4, [r5, #0]
 801704a:	3501      	adds	r5, #1
 801704c:	e7ea      	b.n	8017024 <_strtoul_l.isra.0+0x6a>
 801704e:	002e      	movs	r6, r5
 8017050:	e7ba      	b.n	8016fc8 <_strtoul_l.isra.0+0xe>
 8017052:	2c2b      	cmp	r4, #43	; 0x2b
 8017054:	d1c7      	bne.n	8016fe6 <_strtoul_l.isra.0+0x2c>
 8017056:	1cb5      	adds	r5, r6, #2
 8017058:	7874      	ldrb	r4, [r6, #1]
 801705a:	e7c4      	b.n	8016fe6 <_strtoul_l.isra.0+0x2c>
 801705c:	0021      	movs	r1, r4
 801705e:	3941      	subs	r1, #65	; 0x41
 8017060:	2919      	cmp	r1, #25
 8017062:	d801      	bhi.n	8017068 <_strtoul_l.isra.0+0xae>
 8017064:	3c37      	subs	r4, #55	; 0x37
 8017066:	e7e2      	b.n	801702e <_strtoul_l.isra.0+0x74>
 8017068:	0021      	movs	r1, r4
 801706a:	3961      	subs	r1, #97	; 0x61
 801706c:	2919      	cmp	r1, #25
 801706e:	d803      	bhi.n	8017078 <_strtoul_l.isra.0+0xbe>
 8017070:	3c57      	subs	r4, #87	; 0x57
 8017072:	e7dc      	b.n	801702e <_strtoul_l.isra.0+0x74>
 8017074:	0013      	movs	r3, r2
 8017076:	e7e7      	b.n	8017048 <_strtoul_l.isra.0+0x8e>
 8017078:	2b00      	cmp	r3, #0
 801707a:	da09      	bge.n	8017090 <_strtoul_l.isra.0+0xd6>
 801707c:	2322      	movs	r3, #34	; 0x22
 801707e:	2001      	movs	r0, #1
 8017080:	9a03      	ldr	r2, [sp, #12]
 8017082:	4240      	negs	r0, r0
 8017084:	6013      	str	r3, [r2, #0]
 8017086:	9b02      	ldr	r3, [sp, #8]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d10a      	bne.n	80170a2 <_strtoul_l.isra.0+0xe8>
 801708c:	b005      	add	sp, #20
 801708e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017090:	9a00      	ldr	r2, [sp, #0]
 8017092:	2a00      	cmp	r2, #0
 8017094:	d000      	beq.n	8017098 <_strtoul_l.isra.0+0xde>
 8017096:	4240      	negs	r0, r0
 8017098:	9a02      	ldr	r2, [sp, #8]
 801709a:	2a00      	cmp	r2, #0
 801709c:	d0f6      	beq.n	801708c <_strtoul_l.isra.0+0xd2>
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d001      	beq.n	80170a6 <_strtoul_l.isra.0+0xec>
 80170a2:	1e6b      	subs	r3, r5, #1
 80170a4:	9301      	str	r3, [sp, #4]
 80170a6:	9b02      	ldr	r3, [sp, #8]
 80170a8:	9a01      	ldr	r2, [sp, #4]
 80170aa:	601a      	str	r2, [r3, #0]
 80170ac:	e7ee      	b.n	801708c <_strtoul_l.isra.0+0xd2>
 80170ae:	2430      	movs	r4, #48	; 0x30
 80170b0:	2f00      	cmp	r7, #0
 80170b2:	d1a7      	bne.n	8017004 <_strtoul_l.isra.0+0x4a>
 80170b4:	2708      	movs	r7, #8
 80170b6:	e7a5      	b.n	8017004 <_strtoul_l.isra.0+0x4a>
 80170b8:	2c30      	cmp	r4, #48	; 0x30
 80170ba:	d09b      	beq.n	8016ff4 <_strtoul_l.isra.0+0x3a>
 80170bc:	270a      	movs	r7, #10
 80170be:	e7a1      	b.n	8017004 <_strtoul_l.isra.0+0x4a>

080170c0 <_strtoul_r>:
 80170c0:	b513      	push	{r0, r1, r4, lr}
 80170c2:	4c05      	ldr	r4, [pc, #20]	; (80170d8 <_strtoul_r+0x18>)
 80170c4:	6824      	ldr	r4, [r4, #0]
 80170c6:	6a24      	ldr	r4, [r4, #32]
 80170c8:	2c00      	cmp	r4, #0
 80170ca:	d100      	bne.n	80170ce <_strtoul_r+0xe>
 80170cc:	4c03      	ldr	r4, [pc, #12]	; (80170dc <_strtoul_r+0x1c>)
 80170ce:	9400      	str	r4, [sp, #0]
 80170d0:	f7ff ff73 	bl	8016fba <_strtoul_l.isra.0>
 80170d4:	bd16      	pop	{r1, r2, r4, pc}
 80170d6:	46c0      	nop			; (mov r8, r8)
 80170d8:	200005e0 	.word	0x200005e0
 80170dc:	20000644 	.word	0x20000644

080170e0 <strtoul>:
 80170e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170e2:	0013      	movs	r3, r2
 80170e4:	4a06      	ldr	r2, [pc, #24]	; (8017100 <strtoul+0x20>)
 80170e6:	0005      	movs	r5, r0
 80170e8:	6810      	ldr	r0, [r2, #0]
 80170ea:	6a04      	ldr	r4, [r0, #32]
 80170ec:	2c00      	cmp	r4, #0
 80170ee:	d100      	bne.n	80170f2 <strtoul+0x12>
 80170f0:	4c04      	ldr	r4, [pc, #16]	; (8017104 <strtoul+0x24>)
 80170f2:	000a      	movs	r2, r1
 80170f4:	9400      	str	r4, [sp, #0]
 80170f6:	0029      	movs	r1, r5
 80170f8:	f7ff ff5f 	bl	8016fba <_strtoul_l.isra.0>
 80170fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80170fe:	46c0      	nop			; (mov r8, r8)
 8017100:	200005e0 	.word	0x200005e0
 8017104:	20000644 	.word	0x20000644

08017108 <_write_r>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	0005      	movs	r5, r0
 801710c:	0008      	movs	r0, r1
 801710e:	0011      	movs	r1, r2
 8017110:	2200      	movs	r2, #0
 8017112:	4c06      	ldr	r4, [pc, #24]	; (801712c <_write_r+0x24>)
 8017114:	6022      	str	r2, [r4, #0]
 8017116:	001a      	movs	r2, r3
 8017118:	f7f3 f994 	bl	800a444 <_write>
 801711c:	1c43      	adds	r3, r0, #1
 801711e:	d103      	bne.n	8017128 <_write_r+0x20>
 8017120:	6823      	ldr	r3, [r4, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d000      	beq.n	8017128 <_write_r+0x20>
 8017126:	602b      	str	r3, [r5, #0]
 8017128:	bd70      	pop	{r4, r5, r6, pc}
 801712a:	46c0      	nop			; (mov r8, r8)
 801712c:	20001bfc 	.word	0x20001bfc

08017130 <_close_r>:
 8017130:	2300      	movs	r3, #0
 8017132:	b570      	push	{r4, r5, r6, lr}
 8017134:	4c06      	ldr	r4, [pc, #24]	; (8017150 <_close_r+0x20>)
 8017136:	0005      	movs	r5, r0
 8017138:	0008      	movs	r0, r1
 801713a:	6023      	str	r3, [r4, #0]
 801713c:	f000 fc92 	bl	8017a64 <_close>
 8017140:	1c43      	adds	r3, r0, #1
 8017142:	d103      	bne.n	801714c <_close_r+0x1c>
 8017144:	6823      	ldr	r3, [r4, #0]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d000      	beq.n	801714c <_close_r+0x1c>
 801714a:	602b      	str	r3, [r5, #0]
 801714c:	bd70      	pop	{r4, r5, r6, pc}
 801714e:	46c0      	nop			; (mov r8, r8)
 8017150:	20001bfc 	.word	0x20001bfc

08017154 <__env_lock>:
 8017154:	4770      	bx	lr

08017156 <__env_unlock>:
 8017156:	4770      	bx	lr

08017158 <_fstat_r>:
 8017158:	2300      	movs	r3, #0
 801715a:	b570      	push	{r4, r5, r6, lr}
 801715c:	4c06      	ldr	r4, [pc, #24]	; (8017178 <_fstat_r+0x20>)
 801715e:	0005      	movs	r5, r0
 8017160:	0008      	movs	r0, r1
 8017162:	0011      	movs	r1, r2
 8017164:	6023      	str	r3, [r4, #0]
 8017166:	f000 fc85 	bl	8017a74 <_fstat>
 801716a:	1c43      	adds	r3, r0, #1
 801716c:	d103      	bne.n	8017176 <_fstat_r+0x1e>
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d000      	beq.n	8017176 <_fstat_r+0x1e>
 8017174:	602b      	str	r3, [r5, #0]
 8017176:	bd70      	pop	{r4, r5, r6, pc}
 8017178:	20001bfc 	.word	0x20001bfc

0801717c <_isatty_r>:
 801717c:	2300      	movs	r3, #0
 801717e:	b570      	push	{r4, r5, r6, lr}
 8017180:	4c06      	ldr	r4, [pc, #24]	; (801719c <_isatty_r+0x20>)
 8017182:	0005      	movs	r5, r0
 8017184:	0008      	movs	r0, r1
 8017186:	6023      	str	r3, [r4, #0]
 8017188:	f000 fc84 	bl	8017a94 <_isatty>
 801718c:	1c43      	adds	r3, r0, #1
 801718e:	d103      	bne.n	8017198 <_isatty_r+0x1c>
 8017190:	6823      	ldr	r3, [r4, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d000      	beq.n	8017198 <_isatty_r+0x1c>
 8017196:	602b      	str	r3, [r5, #0]
 8017198:	bd70      	pop	{r4, r5, r6, pc}
 801719a:	46c0      	nop			; (mov r8, r8)
 801719c:	20001bfc 	.word	0x20001bfc

080171a0 <_lseek_r>:
 80171a0:	b570      	push	{r4, r5, r6, lr}
 80171a2:	0005      	movs	r5, r0
 80171a4:	0008      	movs	r0, r1
 80171a6:	0011      	movs	r1, r2
 80171a8:	2200      	movs	r2, #0
 80171aa:	4c06      	ldr	r4, [pc, #24]	; (80171c4 <_lseek_r+0x24>)
 80171ac:	6022      	str	r2, [r4, #0]
 80171ae:	001a      	movs	r2, r3
 80171b0:	f000 fc80 	bl	8017ab4 <_lseek>
 80171b4:	1c43      	adds	r3, r0, #1
 80171b6:	d103      	bne.n	80171c0 <_lseek_r+0x20>
 80171b8:	6823      	ldr	r3, [r4, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d000      	beq.n	80171c0 <_lseek_r+0x20>
 80171be:	602b      	str	r3, [r5, #0]
 80171c0:	bd70      	pop	{r4, r5, r6, pc}
 80171c2:	46c0      	nop			; (mov r8, r8)
 80171c4:	20001bfc 	.word	0x20001bfc

080171c8 <_malloc_usable_size_r>:
 80171c8:	1f0b      	subs	r3, r1, #4
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	1f18      	subs	r0, r3, #4
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	da01      	bge.n	80171d6 <_malloc_usable_size_r+0xe>
 80171d2:	580b      	ldr	r3, [r1, r0]
 80171d4:	18c0      	adds	r0, r0, r3
 80171d6:	4770      	bx	lr

080171d8 <_sungetc_r>:
 80171d8:	b570      	push	{r4, r5, r6, lr}
 80171da:	0014      	movs	r4, r2
 80171dc:	1c4b      	adds	r3, r1, #1
 80171de:	d103      	bne.n	80171e8 <_sungetc_r+0x10>
 80171e0:	2501      	movs	r5, #1
 80171e2:	426d      	negs	r5, r5
 80171e4:	0028      	movs	r0, r5
 80171e6:	bd70      	pop	{r4, r5, r6, pc}
 80171e8:	8993      	ldrh	r3, [r2, #12]
 80171ea:	2220      	movs	r2, #32
 80171ec:	4393      	bics	r3, r2
 80171ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80171f0:	81a3      	strh	r3, [r4, #12]
 80171f2:	b2ce      	uxtb	r6, r1
 80171f4:	b2cd      	uxtb	r5, r1
 80171f6:	6863      	ldr	r3, [r4, #4]
 80171f8:	2a00      	cmp	r2, #0
 80171fa:	d010      	beq.n	801721e <_sungetc_r+0x46>
 80171fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80171fe:	429a      	cmp	r2, r3
 8017200:	dd07      	ble.n	8017212 <_sungetc_r+0x3a>
 8017202:	6823      	ldr	r3, [r4, #0]
 8017204:	3b01      	subs	r3, #1
 8017206:	6023      	str	r3, [r4, #0]
 8017208:	701e      	strb	r6, [r3, #0]
 801720a:	6863      	ldr	r3, [r4, #4]
 801720c:	3301      	adds	r3, #1
 801720e:	6063      	str	r3, [r4, #4]
 8017210:	e7e8      	b.n	80171e4 <_sungetc_r+0xc>
 8017212:	0021      	movs	r1, r4
 8017214:	f000 fbe8 	bl	80179e8 <__submore>
 8017218:	2800      	cmp	r0, #0
 801721a:	d0f2      	beq.n	8017202 <_sungetc_r+0x2a>
 801721c:	e7e0      	b.n	80171e0 <_sungetc_r+0x8>
 801721e:	6921      	ldr	r1, [r4, #16]
 8017220:	6822      	ldr	r2, [r4, #0]
 8017222:	2900      	cmp	r1, #0
 8017224:	d007      	beq.n	8017236 <_sungetc_r+0x5e>
 8017226:	4291      	cmp	r1, r2
 8017228:	d205      	bcs.n	8017236 <_sungetc_r+0x5e>
 801722a:	1e51      	subs	r1, r2, #1
 801722c:	7808      	ldrb	r0, [r1, #0]
 801722e:	42a8      	cmp	r0, r5
 8017230:	d101      	bne.n	8017236 <_sungetc_r+0x5e>
 8017232:	6021      	str	r1, [r4, #0]
 8017234:	e7ea      	b.n	801720c <_sungetc_r+0x34>
 8017236:	6423      	str	r3, [r4, #64]	; 0x40
 8017238:	0023      	movs	r3, r4
 801723a:	3344      	adds	r3, #68	; 0x44
 801723c:	6363      	str	r3, [r4, #52]	; 0x34
 801723e:	2303      	movs	r3, #3
 8017240:	63a3      	str	r3, [r4, #56]	; 0x38
 8017242:	0023      	movs	r3, r4
 8017244:	3346      	adds	r3, #70	; 0x46
 8017246:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017248:	701e      	strb	r6, [r3, #0]
 801724a:	6023      	str	r3, [r4, #0]
 801724c:	2301      	movs	r3, #1
 801724e:	e7de      	b.n	801720e <_sungetc_r+0x36>

08017250 <__ssrefill_r>:
 8017250:	b510      	push	{r4, lr}
 8017252:	000c      	movs	r4, r1
 8017254:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017256:	2900      	cmp	r1, #0
 8017258:	d00e      	beq.n	8017278 <__ssrefill_r+0x28>
 801725a:	0023      	movs	r3, r4
 801725c:	3344      	adds	r3, #68	; 0x44
 801725e:	4299      	cmp	r1, r3
 8017260:	d001      	beq.n	8017266 <__ssrefill_r+0x16>
 8017262:	f7fe fcc9 	bl	8015bf8 <_free_r>
 8017266:	2000      	movs	r0, #0
 8017268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801726a:	6360      	str	r0, [r4, #52]	; 0x34
 801726c:	6063      	str	r3, [r4, #4]
 801726e:	4283      	cmp	r3, r0
 8017270:	d002      	beq.n	8017278 <__ssrefill_r+0x28>
 8017272:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017274:	6023      	str	r3, [r4, #0]
 8017276:	bd10      	pop	{r4, pc}
 8017278:	6923      	ldr	r3, [r4, #16]
 801727a:	2001      	movs	r0, #1
 801727c:	6023      	str	r3, [r4, #0]
 801727e:	2300      	movs	r3, #0
 8017280:	89a2      	ldrh	r2, [r4, #12]
 8017282:	6063      	str	r3, [r4, #4]
 8017284:	3320      	adds	r3, #32
 8017286:	4313      	orrs	r3, r2
 8017288:	81a3      	strh	r3, [r4, #12]
 801728a:	4240      	negs	r0, r0
 801728c:	e7f3      	b.n	8017276 <__ssrefill_r+0x26>
	...

08017290 <__ssvfiscanf_r>:
 8017290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017292:	0017      	movs	r7, r2
 8017294:	2200      	movs	r2, #0
 8017296:	4cb0      	ldr	r4, [pc, #704]	; (8017558 <__ssvfiscanf_r+0x2c8>)
 8017298:	25c0      	movs	r5, #192	; 0xc0
 801729a:	44a5      	add	sp, r4
 801729c:	9248      	str	r2, [sp, #288]	; 0x120
 801729e:	9249      	str	r2, [sp, #292]	; 0x124
 80172a0:	aa05      	add	r2, sp, #20
 80172a2:	924a      	str	r2, [sp, #296]	; 0x128
 80172a4:	22be      	movs	r2, #190	; 0xbe
 80172a6:	000c      	movs	r4, r1
 80172a8:	49ac      	ldr	r1, [pc, #688]	; (801755c <__ssvfiscanf_r+0x2cc>)
 80172aa:	9000      	str	r0, [sp, #0]
 80172ac:	0052      	lsls	r2, r2, #1
 80172ae:	a845      	add	r0, sp, #276	; 0x114
 80172b0:	5081      	str	r1, [r0, r2]
 80172b2:	49ab      	ldr	r1, [pc, #684]	; (8017560 <__ssvfiscanf_r+0x2d0>)
 80172b4:	006d      	lsls	r5, r5, #1
 80172b6:	5141      	str	r1, [r0, r5]
 80172b8:	9304      	str	r3, [sp, #16]
 80172ba:	783b      	ldrb	r3, [r7, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d100      	bne.n	80172c2 <__ssvfiscanf_r+0x32>
 80172c0:	e148      	b.n	8017554 <__ssvfiscanf_r+0x2c4>
 80172c2:	f7fe f9bf 	bl	8015644 <__locale_ctype_ptr>
 80172c6:	2208      	movs	r2, #8
 80172c8:	783b      	ldrb	r3, [r7, #0]
 80172ca:	1c7e      	adds	r6, r7, #1
 80172cc:	18c0      	adds	r0, r0, r3
 80172ce:	9301      	str	r3, [sp, #4]
 80172d0:	7843      	ldrb	r3, [r0, #1]
 80172d2:	4013      	ands	r3, r2
 80172d4:	d020      	beq.n	8017318 <__ssvfiscanf_r+0x88>
 80172d6:	6863      	ldr	r3, [r4, #4]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	dd14      	ble.n	8017306 <__ssvfiscanf_r+0x76>
 80172dc:	f7fe f9b2 	bl	8015644 <__locale_ctype_ptr>
 80172e0:	2108      	movs	r1, #8
 80172e2:	6823      	ldr	r3, [r4, #0]
 80172e4:	781a      	ldrb	r2, [r3, #0]
 80172e6:	1880      	adds	r0, r0, r2
 80172e8:	7842      	ldrb	r2, [r0, #1]
 80172ea:	420a      	tst	r2, r1
 80172ec:	d101      	bne.n	80172f2 <__ssvfiscanf_r+0x62>
 80172ee:	0037      	movs	r7, r6
 80172f0:	e7e3      	b.n	80172ba <__ssvfiscanf_r+0x2a>
 80172f2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80172f4:	3301      	adds	r3, #1
 80172f6:	9201      	str	r2, [sp, #4]
 80172f8:	3201      	adds	r2, #1
 80172fa:	9249      	str	r2, [sp, #292]	; 0x124
 80172fc:	6862      	ldr	r2, [r4, #4]
 80172fe:	6023      	str	r3, [r4, #0]
 8017300:	3a01      	subs	r2, #1
 8017302:	6062      	str	r2, [r4, #4]
 8017304:	e7e7      	b.n	80172d6 <__ssvfiscanf_r+0x46>
 8017306:	ab45      	add	r3, sp, #276	; 0x114
 8017308:	595b      	ldr	r3, [r3, r5]
 801730a:	0021      	movs	r1, r4
 801730c:	9800      	ldr	r0, [sp, #0]
 801730e:	9301      	str	r3, [sp, #4]
 8017310:	4798      	blx	r3
 8017312:	2800      	cmp	r0, #0
 8017314:	d0e2      	beq.n	80172dc <__ssvfiscanf_r+0x4c>
 8017316:	e7ea      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 8017318:	9a01      	ldr	r2, [sp, #4]
 801731a:	2a25      	cmp	r2, #37	; 0x25
 801731c:	d16d      	bne.n	80173fa <__ssvfiscanf_r+0x16a>
 801731e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017320:	9345      	str	r3, [sp, #276]	; 0x114
 8017322:	787b      	ldrb	r3, [r7, #1]
 8017324:	2b2a      	cmp	r3, #42	; 0x2a
 8017326:	d102      	bne.n	801732e <__ssvfiscanf_r+0x9e>
 8017328:	3b1a      	subs	r3, #26
 801732a:	9345      	str	r3, [sp, #276]	; 0x114
 801732c:	1cbe      	adds	r6, r7, #2
 801732e:	0037      	movs	r7, r6
 8017330:	220a      	movs	r2, #10
 8017332:	7839      	ldrb	r1, [r7, #0]
 8017334:	1c7b      	adds	r3, r7, #1
 8017336:	9302      	str	r3, [sp, #8]
 8017338:	000b      	movs	r3, r1
 801733a:	3b30      	subs	r3, #48	; 0x30
 801733c:	2b09      	cmp	r3, #9
 801733e:	d924      	bls.n	801738a <__ssvfiscanf_r+0xfa>
 8017340:	4e88      	ldr	r6, [pc, #544]	; (8017564 <__ssvfiscanf_r+0x2d4>)
 8017342:	2203      	movs	r2, #3
 8017344:	0030      	movs	r0, r6
 8017346:	f7ff fd7d 	bl	8016e44 <memchr>
 801734a:	2800      	cmp	r0, #0
 801734c:	d007      	beq.n	801735e <__ssvfiscanf_r+0xce>
 801734e:	2301      	movs	r3, #1
 8017350:	1b80      	subs	r0, r0, r6
 8017352:	4083      	lsls	r3, r0
 8017354:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017356:	9f02      	ldr	r7, [sp, #8]
 8017358:	4313      	orrs	r3, r2
 801735a:	9203      	str	r2, [sp, #12]
 801735c:	9345      	str	r3, [sp, #276]	; 0x114
 801735e:	783b      	ldrb	r3, [r7, #0]
 8017360:	1c7e      	adds	r6, r7, #1
 8017362:	2b67      	cmp	r3, #103	; 0x67
 8017364:	d835      	bhi.n	80173d2 <__ssvfiscanf_r+0x142>
 8017366:	2b65      	cmp	r3, #101	; 0x65
 8017368:	d300      	bcc.n	801736c <__ssvfiscanf_r+0xdc>
 801736a:	e0b8      	b.n	80174de <__ssvfiscanf_r+0x24e>
 801736c:	2b47      	cmp	r3, #71	; 0x47
 801736e:	d814      	bhi.n	801739a <__ssvfiscanf_r+0x10a>
 8017370:	2b45      	cmp	r3, #69	; 0x45
 8017372:	d300      	bcc.n	8017376 <__ssvfiscanf_r+0xe6>
 8017374:	e0b3      	b.n	80174de <__ssvfiscanf_r+0x24e>
 8017376:	2b00      	cmp	r3, #0
 8017378:	d100      	bne.n	801737c <__ssvfiscanf_r+0xec>
 801737a:	e0e8      	b.n	801754e <__ssvfiscanf_r+0x2be>
 801737c:	2b25      	cmp	r3, #37	; 0x25
 801737e:	d03c      	beq.n	80173fa <__ssvfiscanf_r+0x16a>
 8017380:	2303      	movs	r3, #3
 8017382:	934b      	str	r3, [sp, #300]	; 0x12c
 8017384:	3307      	adds	r3, #7
 8017386:	9346      	str	r3, [sp, #280]	; 0x118
 8017388:	e066      	b.n	8017458 <__ssvfiscanf_r+0x1c8>
 801738a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801738c:	9f02      	ldr	r7, [sp, #8]
 801738e:	9303      	str	r3, [sp, #12]
 8017390:	4353      	muls	r3, r2
 8017392:	3b30      	subs	r3, #48	; 0x30
 8017394:	1859      	adds	r1, r3, r1
 8017396:	9147      	str	r1, [sp, #284]	; 0x11c
 8017398:	e7cb      	b.n	8017332 <__ssvfiscanf_r+0xa2>
 801739a:	2b5b      	cmp	r3, #91	; 0x5b
 801739c:	d100      	bne.n	80173a0 <__ssvfiscanf_r+0x110>
 801739e:	e07a      	b.n	8017496 <__ssvfiscanf_r+0x206>
 80173a0:	d810      	bhi.n	80173c4 <__ssvfiscanf_r+0x134>
 80173a2:	2b58      	cmp	r3, #88	; 0x58
 80173a4:	d1ec      	bne.n	8017380 <__ssvfiscanf_r+0xf0>
 80173a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173a8:	9201      	str	r2, [sp, #4]
 80173aa:	2280      	movs	r2, #128	; 0x80
 80173ac:	9901      	ldr	r1, [sp, #4]
 80173ae:	0092      	lsls	r2, r2, #2
 80173b0:	430a      	orrs	r2, r1
 80173b2:	9245      	str	r2, [sp, #276]	; 0x114
 80173b4:	2210      	movs	r2, #16
 80173b6:	9246      	str	r2, [sp, #280]	; 0x118
 80173b8:	226e      	movs	r2, #110	; 0x6e
 80173ba:	429a      	cmp	r2, r3
 80173bc:	419b      	sbcs	r3, r3
 80173be:	425b      	negs	r3, r3
 80173c0:	3303      	adds	r3, #3
 80173c2:	e048      	b.n	8017456 <__ssvfiscanf_r+0x1c6>
 80173c4:	2b63      	cmp	r3, #99	; 0x63
 80173c6:	d100      	bne.n	80173ca <__ssvfiscanf_r+0x13a>
 80173c8:	e072      	b.n	80174b0 <__ssvfiscanf_r+0x220>
 80173ca:	2b64      	cmp	r3, #100	; 0x64
 80173cc:	d1d8      	bne.n	8017380 <__ssvfiscanf_r+0xf0>
 80173ce:	220a      	movs	r2, #10
 80173d0:	e7f1      	b.n	80173b6 <__ssvfiscanf_r+0x126>
 80173d2:	2b70      	cmp	r3, #112	; 0x70
 80173d4:	d035      	beq.n	8017442 <__ssvfiscanf_r+0x1b2>
 80173d6:	d808      	bhi.n	80173ea <__ssvfiscanf_r+0x15a>
 80173d8:	2b6e      	cmp	r3, #110	; 0x6e
 80173da:	d100      	bne.n	80173de <__ssvfiscanf_r+0x14e>
 80173dc:	e070      	b.n	80174c0 <__ssvfiscanf_r+0x230>
 80173de:	d837      	bhi.n	8017450 <__ssvfiscanf_r+0x1c0>
 80173e0:	2b69      	cmp	r3, #105	; 0x69
 80173e2:	d1cd      	bne.n	8017380 <__ssvfiscanf_r+0xf0>
 80173e4:	2300      	movs	r3, #0
 80173e6:	9346      	str	r3, [sp, #280]	; 0x118
 80173e8:	e7ea      	b.n	80173c0 <__ssvfiscanf_r+0x130>
 80173ea:	2b75      	cmp	r3, #117	; 0x75
 80173ec:	d0ef      	beq.n	80173ce <__ssvfiscanf_r+0x13e>
 80173ee:	2b78      	cmp	r3, #120	; 0x78
 80173f0:	d0d9      	beq.n	80173a6 <__ssvfiscanf_r+0x116>
 80173f2:	2b73      	cmp	r3, #115	; 0x73
 80173f4:	d1c4      	bne.n	8017380 <__ssvfiscanf_r+0xf0>
 80173f6:	2302      	movs	r3, #2
 80173f8:	e02d      	b.n	8017456 <__ssvfiscanf_r+0x1c6>
 80173fa:	6863      	ldr	r3, [r4, #4]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	dd0f      	ble.n	8017420 <__ssvfiscanf_r+0x190>
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	9901      	ldr	r1, [sp, #4]
 8017404:	781a      	ldrb	r2, [r3, #0]
 8017406:	428a      	cmp	r2, r1
 8017408:	d000      	beq.n	801740c <__ssvfiscanf_r+0x17c>
 801740a:	e0a3      	b.n	8017554 <__ssvfiscanf_r+0x2c4>
 801740c:	3301      	adds	r3, #1
 801740e:	6862      	ldr	r2, [r4, #4]
 8017410:	6023      	str	r3, [r4, #0]
 8017412:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8017414:	3a01      	subs	r2, #1
 8017416:	9301      	str	r3, [sp, #4]
 8017418:	3301      	adds	r3, #1
 801741a:	6062      	str	r2, [r4, #4]
 801741c:	9349      	str	r3, [sp, #292]	; 0x124
 801741e:	e766      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 8017420:	ab45      	add	r3, sp, #276	; 0x114
 8017422:	595b      	ldr	r3, [r3, r5]
 8017424:	0021      	movs	r1, r4
 8017426:	9800      	ldr	r0, [sp, #0]
 8017428:	9302      	str	r3, [sp, #8]
 801742a:	4798      	blx	r3
 801742c:	2800      	cmp	r0, #0
 801742e:	d0e7      	beq.n	8017400 <__ssvfiscanf_r+0x170>
 8017430:	9848      	ldr	r0, [sp, #288]	; 0x120
 8017432:	2800      	cmp	r0, #0
 8017434:	d000      	beq.n	8017438 <__ssvfiscanf_r+0x1a8>
 8017436:	e086      	b.n	8017546 <__ssvfiscanf_r+0x2b6>
 8017438:	3801      	subs	r0, #1
 801743a:	23a7      	movs	r3, #167	; 0xa7
 801743c:	009b      	lsls	r3, r3, #2
 801743e:	449d      	add	sp, r3
 8017440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017442:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017444:	9201      	str	r2, [sp, #4]
 8017446:	2220      	movs	r2, #32
 8017448:	9901      	ldr	r1, [sp, #4]
 801744a:	430a      	orrs	r2, r1
 801744c:	9245      	str	r2, [sp, #276]	; 0x114
 801744e:	e7aa      	b.n	80173a6 <__ssvfiscanf_r+0x116>
 8017450:	2308      	movs	r3, #8
 8017452:	9346      	str	r3, [sp, #280]	; 0x118
 8017454:	3b04      	subs	r3, #4
 8017456:	934b      	str	r3, [sp, #300]	; 0x12c
 8017458:	6863      	ldr	r3, [r4, #4]
 801745a:	2b00      	cmp	r3, #0
 801745c:	dd41      	ble.n	80174e2 <__ssvfiscanf_r+0x252>
 801745e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017460:	9301      	str	r3, [sp, #4]
 8017462:	065b      	lsls	r3, r3, #25
 8017464:	d408      	bmi.n	8017478 <__ssvfiscanf_r+0x1e8>
 8017466:	f7fe f8ed 	bl	8015644 <__locale_ctype_ptr>
 801746a:	2108      	movs	r1, #8
 801746c:	6823      	ldr	r3, [r4, #0]
 801746e:	781a      	ldrb	r2, [r3, #0]
 8017470:	1880      	adds	r0, r0, r2
 8017472:	7842      	ldrb	r2, [r0, #1]
 8017474:	420a      	tst	r2, r1
 8017476:	d13d      	bne.n	80174f4 <__ssvfiscanf_r+0x264>
 8017478:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801747a:	2b02      	cmp	r3, #2
 801747c:	dc4f      	bgt.n	801751e <__ssvfiscanf_r+0x28e>
 801747e:	ab04      	add	r3, sp, #16
 8017480:	0022      	movs	r2, r4
 8017482:	a945      	add	r1, sp, #276	; 0x114
 8017484:	9800      	ldr	r0, [sp, #0]
 8017486:	f000 f871 	bl	801756c <_scanf_chars>
 801748a:	2801      	cmp	r0, #1
 801748c:	d062      	beq.n	8017554 <__ssvfiscanf_r+0x2c4>
 801748e:	2802      	cmp	r0, #2
 8017490:	d000      	beq.n	8017494 <__ssvfiscanf_r+0x204>
 8017492:	e72c      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 8017494:	e7cc      	b.n	8017430 <__ssvfiscanf_r+0x1a0>
 8017496:	0031      	movs	r1, r6
 8017498:	a805      	add	r0, sp, #20
 801749a:	f000 f9e3 	bl	8017864 <__sccl>
 801749e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80174a0:	0006      	movs	r6, r0
 80174a2:	9301      	str	r3, [sp, #4]
 80174a4:	2340      	movs	r3, #64	; 0x40
 80174a6:	9a01      	ldr	r2, [sp, #4]
 80174a8:	4313      	orrs	r3, r2
 80174aa:	9345      	str	r3, [sp, #276]	; 0x114
 80174ac:	2301      	movs	r3, #1
 80174ae:	e7d2      	b.n	8017456 <__ssvfiscanf_r+0x1c6>
 80174b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80174b2:	9301      	str	r3, [sp, #4]
 80174b4:	2340      	movs	r3, #64	; 0x40
 80174b6:	9a01      	ldr	r2, [sp, #4]
 80174b8:	4313      	orrs	r3, r2
 80174ba:	9345      	str	r3, [sp, #276]	; 0x114
 80174bc:	2300      	movs	r3, #0
 80174be:	e7ca      	b.n	8017456 <__ssvfiscanf_r+0x1c6>
 80174c0:	9845      	ldr	r0, [sp, #276]	; 0x114
 80174c2:	06c3      	lsls	r3, r0, #27
 80174c4:	d500      	bpl.n	80174c8 <__ssvfiscanf_r+0x238>
 80174c6:	e712      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 80174c8:	9b04      	ldr	r3, [sp, #16]
 80174ca:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80174cc:	1d19      	adds	r1, r3, #4
 80174ce:	9104      	str	r1, [sp, #16]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	07c7      	lsls	r7, r0, #31
 80174d4:	d501      	bpl.n	80174da <__ssvfiscanf_r+0x24a>
 80174d6:	801a      	strh	r2, [r3, #0]
 80174d8:	e709      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 80174da:	601a      	str	r2, [r3, #0]
 80174dc:	e707      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 80174de:	2305      	movs	r3, #5
 80174e0:	e7b9      	b.n	8017456 <__ssvfiscanf_r+0x1c6>
 80174e2:	ab45      	add	r3, sp, #276	; 0x114
 80174e4:	595b      	ldr	r3, [r3, r5]
 80174e6:	0021      	movs	r1, r4
 80174e8:	9800      	ldr	r0, [sp, #0]
 80174ea:	9301      	str	r3, [sp, #4]
 80174ec:	4798      	blx	r3
 80174ee:	2800      	cmp	r0, #0
 80174f0:	d0b5      	beq.n	801745e <__ssvfiscanf_r+0x1ce>
 80174f2:	e79d      	b.n	8017430 <__ssvfiscanf_r+0x1a0>
 80174f4:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80174f6:	9201      	str	r2, [sp, #4]
 80174f8:	3201      	adds	r2, #1
 80174fa:	9249      	str	r2, [sp, #292]	; 0x124
 80174fc:	6862      	ldr	r2, [r4, #4]
 80174fe:	3a01      	subs	r2, #1
 8017500:	6062      	str	r2, [r4, #4]
 8017502:	2a00      	cmp	r2, #0
 8017504:	dd02      	ble.n	801750c <__ssvfiscanf_r+0x27c>
 8017506:	3301      	adds	r3, #1
 8017508:	6023      	str	r3, [r4, #0]
 801750a:	e7ac      	b.n	8017466 <__ssvfiscanf_r+0x1d6>
 801750c:	ab45      	add	r3, sp, #276	; 0x114
 801750e:	595b      	ldr	r3, [r3, r5]
 8017510:	0021      	movs	r1, r4
 8017512:	9800      	ldr	r0, [sp, #0]
 8017514:	9301      	str	r3, [sp, #4]
 8017516:	4798      	blx	r3
 8017518:	2800      	cmp	r0, #0
 801751a:	d0a4      	beq.n	8017466 <__ssvfiscanf_r+0x1d6>
 801751c:	e788      	b.n	8017430 <__ssvfiscanf_r+0x1a0>
 801751e:	2b04      	cmp	r3, #4
 8017520:	dc06      	bgt.n	8017530 <__ssvfiscanf_r+0x2a0>
 8017522:	ab04      	add	r3, sp, #16
 8017524:	0022      	movs	r2, r4
 8017526:	a945      	add	r1, sp, #276	; 0x114
 8017528:	9800      	ldr	r0, [sp, #0]
 801752a:	f000 f885 	bl	8017638 <_scanf_i>
 801752e:	e7ac      	b.n	801748a <__ssvfiscanf_r+0x1fa>
 8017530:	4b0d      	ldr	r3, [pc, #52]	; (8017568 <__ssvfiscanf_r+0x2d8>)
 8017532:	2b00      	cmp	r3, #0
 8017534:	d100      	bne.n	8017538 <__ssvfiscanf_r+0x2a8>
 8017536:	e6da      	b.n	80172ee <__ssvfiscanf_r+0x5e>
 8017538:	ab04      	add	r3, sp, #16
 801753a:	0022      	movs	r2, r4
 801753c:	a945      	add	r1, sp, #276	; 0x114
 801753e:	9800      	ldr	r0, [sp, #0]
 8017540:	e000      	b.n	8017544 <__ssvfiscanf_r+0x2b4>
 8017542:	bf00      	nop
 8017544:	e7a1      	b.n	801748a <__ssvfiscanf_r+0x1fa>
 8017546:	89a3      	ldrh	r3, [r4, #12]
 8017548:	065b      	lsls	r3, r3, #25
 801754a:	d400      	bmi.n	801754e <__ssvfiscanf_r+0x2be>
 801754c:	e775      	b.n	801743a <__ssvfiscanf_r+0x1aa>
 801754e:	2001      	movs	r0, #1
 8017550:	4240      	negs	r0, r0
 8017552:	e772      	b.n	801743a <__ssvfiscanf_r+0x1aa>
 8017554:	9848      	ldr	r0, [sp, #288]	; 0x120
 8017556:	e770      	b.n	801743a <__ssvfiscanf_r+0x1aa>
 8017558:	fffffd64 	.word	0xfffffd64
 801755c:	080171d9 	.word	0x080171d9
 8017560:	08017251 	.word	0x08017251
 8017564:	080198da 	.word	0x080198da
 8017568:	00000000 	.word	0x00000000

0801756c <_scanf_chars>:
 801756c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801756e:	0015      	movs	r5, r2
 8017570:	688a      	ldr	r2, [r1, #8]
 8017572:	9001      	str	r0, [sp, #4]
 8017574:	000c      	movs	r4, r1
 8017576:	2a00      	cmp	r2, #0
 8017578:	d104      	bne.n	8017584 <_scanf_chars+0x18>
 801757a:	698a      	ldr	r2, [r1, #24]
 801757c:	2a00      	cmp	r2, #0
 801757e:	d117      	bne.n	80175b0 <_scanf_chars+0x44>
 8017580:	3201      	adds	r2, #1
 8017582:	60a2      	str	r2, [r4, #8]
 8017584:	6822      	ldr	r2, [r4, #0]
 8017586:	06d2      	lsls	r2, r2, #27
 8017588:	d403      	bmi.n	8017592 <_scanf_chars+0x26>
 801758a:	681a      	ldr	r2, [r3, #0]
 801758c:	1d11      	adds	r1, r2, #4
 801758e:	6019      	str	r1, [r3, #0]
 8017590:	6817      	ldr	r7, [r2, #0]
 8017592:	2600      	movs	r6, #0
 8017594:	69a3      	ldr	r3, [r4, #24]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d01f      	beq.n	80175da <_scanf_chars+0x6e>
 801759a:	2b01      	cmp	r3, #1
 801759c:	d10b      	bne.n	80175b6 <_scanf_chars+0x4a>
 801759e:	682b      	ldr	r3, [r5, #0]
 80175a0:	6962      	ldr	r2, [r4, #20]
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	5cd3      	ldrb	r3, [r2, r3]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d117      	bne.n	80175da <_scanf_chars+0x6e>
 80175aa:	2e00      	cmp	r6, #0
 80175ac:	d133      	bne.n	8017616 <_scanf_chars+0xaa>
 80175ae:	e009      	b.n	80175c4 <_scanf_chars+0x58>
 80175b0:	2201      	movs	r2, #1
 80175b2:	4252      	negs	r2, r2
 80175b4:	e7e5      	b.n	8017582 <_scanf_chars+0x16>
 80175b6:	2b02      	cmp	r3, #2
 80175b8:	d006      	beq.n	80175c8 <_scanf_chars+0x5c>
 80175ba:	2e00      	cmp	r6, #0
 80175bc:	d12b      	bne.n	8017616 <_scanf_chars+0xaa>
 80175be:	69a3      	ldr	r3, [r4, #24]
 80175c0:	2b01      	cmp	r3, #1
 80175c2:	d128      	bne.n	8017616 <_scanf_chars+0xaa>
 80175c4:	2001      	movs	r0, #1
 80175c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80175c8:	f7fe f83c 	bl	8015644 <__locale_ctype_ptr>
 80175cc:	2208      	movs	r2, #8
 80175ce:	682b      	ldr	r3, [r5, #0]
 80175d0:	781b      	ldrb	r3, [r3, #0]
 80175d2:	18c0      	adds	r0, r0, r3
 80175d4:	7843      	ldrb	r3, [r0, #1]
 80175d6:	4213      	tst	r3, r2
 80175d8:	d1ef      	bne.n	80175ba <_scanf_chars+0x4e>
 80175da:	2210      	movs	r2, #16
 80175dc:	6823      	ldr	r3, [r4, #0]
 80175de:	3601      	adds	r6, #1
 80175e0:	4213      	tst	r3, r2
 80175e2:	d103      	bne.n	80175ec <_scanf_chars+0x80>
 80175e4:	682b      	ldr	r3, [r5, #0]
 80175e6:	781b      	ldrb	r3, [r3, #0]
 80175e8:	703b      	strb	r3, [r7, #0]
 80175ea:	3701      	adds	r7, #1
 80175ec:	682a      	ldr	r2, [r5, #0]
 80175ee:	686b      	ldr	r3, [r5, #4]
 80175f0:	3201      	adds	r2, #1
 80175f2:	602a      	str	r2, [r5, #0]
 80175f4:	68a2      	ldr	r2, [r4, #8]
 80175f6:	3b01      	subs	r3, #1
 80175f8:	3a01      	subs	r2, #1
 80175fa:	606b      	str	r3, [r5, #4]
 80175fc:	60a2      	str	r2, [r4, #8]
 80175fe:	2a00      	cmp	r2, #0
 8017600:	d009      	beq.n	8017616 <_scanf_chars+0xaa>
 8017602:	2b00      	cmp	r3, #0
 8017604:	dcc6      	bgt.n	8017594 <_scanf_chars+0x28>
 8017606:	23c0      	movs	r3, #192	; 0xc0
 8017608:	005b      	lsls	r3, r3, #1
 801760a:	58e3      	ldr	r3, [r4, r3]
 801760c:	0029      	movs	r1, r5
 801760e:	9801      	ldr	r0, [sp, #4]
 8017610:	4798      	blx	r3
 8017612:	2800      	cmp	r0, #0
 8017614:	d0be      	beq.n	8017594 <_scanf_chars+0x28>
 8017616:	2310      	movs	r3, #16
 8017618:	6822      	ldr	r2, [r4, #0]
 801761a:	4013      	ands	r3, r2
 801761c:	d106      	bne.n	801762c <_scanf_chars+0xc0>
 801761e:	68e2      	ldr	r2, [r4, #12]
 8017620:	3201      	adds	r2, #1
 8017622:	60e2      	str	r2, [r4, #12]
 8017624:	69a2      	ldr	r2, [r4, #24]
 8017626:	2a00      	cmp	r2, #0
 8017628:	d000      	beq.n	801762c <_scanf_chars+0xc0>
 801762a:	703b      	strb	r3, [r7, #0]
 801762c:	6923      	ldr	r3, [r4, #16]
 801762e:	2000      	movs	r0, #0
 8017630:	199e      	adds	r6, r3, r6
 8017632:	6126      	str	r6, [r4, #16]
 8017634:	e7c7      	b.n	80175c6 <_scanf_chars+0x5a>
	...

08017638 <_scanf_i>:
 8017638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801763a:	000c      	movs	r4, r1
 801763c:	b08b      	sub	sp, #44	; 0x2c
 801763e:	9302      	str	r3, [sp, #8]
 8017640:	4b78      	ldr	r3, [pc, #480]	; (8017824 <_scanf_i+0x1ec>)
 8017642:	9004      	str	r0, [sp, #16]
 8017644:	0016      	movs	r6, r2
 8017646:	aa07      	add	r2, sp, #28
 8017648:	cb23      	ldmia	r3!, {r0, r1, r5}
 801764a:	c223      	stmia	r2!, {r0, r1, r5}
 801764c:	4b76      	ldr	r3, [pc, #472]	; (8017828 <_scanf_i+0x1f0>)
 801764e:	9305      	str	r3, [sp, #20]
 8017650:	69a3      	ldr	r3, [r4, #24]
 8017652:	2b03      	cmp	r3, #3
 8017654:	d101      	bne.n	801765a <_scanf_i+0x22>
 8017656:	4b75      	ldr	r3, [pc, #468]	; (801782c <_scanf_i+0x1f4>)
 8017658:	9305      	str	r3, [sp, #20]
 801765a:	22ae      	movs	r2, #174	; 0xae
 801765c:	2000      	movs	r0, #0
 801765e:	68a3      	ldr	r3, [r4, #8]
 8017660:	0052      	lsls	r2, r2, #1
 8017662:	1e59      	subs	r1, r3, #1
 8017664:	9003      	str	r0, [sp, #12]
 8017666:	4291      	cmp	r1, r2
 8017668:	d905      	bls.n	8017676 <_scanf_i+0x3e>
 801766a:	3b5e      	subs	r3, #94	; 0x5e
 801766c:	3bff      	subs	r3, #255	; 0xff
 801766e:	9303      	str	r3, [sp, #12]
 8017670:	235e      	movs	r3, #94	; 0x5e
 8017672:	33ff      	adds	r3, #255	; 0xff
 8017674:	60a3      	str	r3, [r4, #8]
 8017676:	0023      	movs	r3, r4
 8017678:	331c      	adds	r3, #28
 801767a:	9301      	str	r3, [sp, #4]
 801767c:	23d0      	movs	r3, #208	; 0xd0
 801767e:	2700      	movs	r7, #0
 8017680:	6822      	ldr	r2, [r4, #0]
 8017682:	011b      	lsls	r3, r3, #4
 8017684:	4313      	orrs	r3, r2
 8017686:	6023      	str	r3, [r4, #0]
 8017688:	9b01      	ldr	r3, [sp, #4]
 801768a:	9300      	str	r3, [sp, #0]
 801768c:	6833      	ldr	r3, [r6, #0]
 801768e:	a807      	add	r0, sp, #28
 8017690:	7819      	ldrb	r1, [r3, #0]
 8017692:	00bb      	lsls	r3, r7, #2
 8017694:	2202      	movs	r2, #2
 8017696:	5818      	ldr	r0, [r3, r0]
 8017698:	f7ff fbd4 	bl	8016e44 <memchr>
 801769c:	2800      	cmp	r0, #0
 801769e:	d02b      	beq.n	80176f8 <_scanf_i+0xc0>
 80176a0:	2f01      	cmp	r7, #1
 80176a2:	d162      	bne.n	801776a <_scanf_i+0x132>
 80176a4:	6863      	ldr	r3, [r4, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d106      	bne.n	80176b8 <_scanf_i+0x80>
 80176aa:	3308      	adds	r3, #8
 80176ac:	6822      	ldr	r2, [r4, #0]
 80176ae:	6063      	str	r3, [r4, #4]
 80176b0:	33f9      	adds	r3, #249	; 0xf9
 80176b2:	33ff      	adds	r3, #255	; 0xff
 80176b4:	4313      	orrs	r3, r2
 80176b6:	6023      	str	r3, [r4, #0]
 80176b8:	4b5d      	ldr	r3, [pc, #372]	; (8017830 <_scanf_i+0x1f8>)
 80176ba:	6822      	ldr	r2, [r4, #0]
 80176bc:	4013      	ands	r3, r2
 80176be:	6023      	str	r3, [r4, #0]
 80176c0:	68a3      	ldr	r3, [r4, #8]
 80176c2:	1e5a      	subs	r2, r3, #1
 80176c4:	60a2      	str	r2, [r4, #8]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d016      	beq.n	80176f8 <_scanf_i+0xc0>
 80176ca:	6833      	ldr	r3, [r6, #0]
 80176cc:	1c5a      	adds	r2, r3, #1
 80176ce:	6032      	str	r2, [r6, #0]
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	9a00      	ldr	r2, [sp, #0]
 80176d4:	7013      	strb	r3, [r2, #0]
 80176d6:	6873      	ldr	r3, [r6, #4]
 80176d8:	1c55      	adds	r5, r2, #1
 80176da:	3b01      	subs	r3, #1
 80176dc:	6073      	str	r3, [r6, #4]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	dc09      	bgt.n	80176f6 <_scanf_i+0xbe>
 80176e2:	23c0      	movs	r3, #192	; 0xc0
 80176e4:	005b      	lsls	r3, r3, #1
 80176e6:	58e3      	ldr	r3, [r4, r3]
 80176e8:	0031      	movs	r1, r6
 80176ea:	9804      	ldr	r0, [sp, #16]
 80176ec:	9300      	str	r3, [sp, #0]
 80176ee:	4798      	blx	r3
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d000      	beq.n	80176f6 <_scanf_i+0xbe>
 80176f4:	e080      	b.n	80177f8 <_scanf_i+0x1c0>
 80176f6:	9500      	str	r5, [sp, #0]
 80176f8:	3701      	adds	r7, #1
 80176fa:	2f03      	cmp	r7, #3
 80176fc:	d1c6      	bne.n	801768c <_scanf_i+0x54>
 80176fe:	6863      	ldr	r3, [r4, #4]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d101      	bne.n	8017708 <_scanf_i+0xd0>
 8017704:	330a      	adds	r3, #10
 8017706:	6063      	str	r3, [r4, #4]
 8017708:	2110      	movs	r1, #16
 801770a:	2700      	movs	r7, #0
 801770c:	6863      	ldr	r3, [r4, #4]
 801770e:	6960      	ldr	r0, [r4, #20]
 8017710:	1ac9      	subs	r1, r1, r3
 8017712:	4b48      	ldr	r3, [pc, #288]	; (8017834 <_scanf_i+0x1fc>)
 8017714:	18c9      	adds	r1, r1, r3
 8017716:	f000 f8a5 	bl	8017864 <__sccl>
 801771a:	9d00      	ldr	r5, [sp, #0]
 801771c:	68a3      	ldr	r3, [r4, #8]
 801771e:	6822      	ldr	r2, [r4, #0]
 8017720:	9300      	str	r3, [sp, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d041      	beq.n	80177aa <_scanf_i+0x172>
 8017726:	6831      	ldr	r1, [r6, #0]
 8017728:	6963      	ldr	r3, [r4, #20]
 801772a:	7808      	ldrb	r0, [r1, #0]
 801772c:	5c1b      	ldrb	r3, [r3, r0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d03b      	beq.n	80177aa <_scanf_i+0x172>
 8017732:	2830      	cmp	r0, #48	; 0x30
 8017734:	d129      	bne.n	801778a <_scanf_i+0x152>
 8017736:	2380      	movs	r3, #128	; 0x80
 8017738:	011b      	lsls	r3, r3, #4
 801773a:	421a      	tst	r2, r3
 801773c:	d025      	beq.n	801778a <_scanf_i+0x152>
 801773e:	9b03      	ldr	r3, [sp, #12]
 8017740:	3701      	adds	r7, #1
 8017742:	2b00      	cmp	r3, #0
 8017744:	d005      	beq.n	8017752 <_scanf_i+0x11a>
 8017746:	001a      	movs	r2, r3
 8017748:	9b00      	ldr	r3, [sp, #0]
 801774a:	3a01      	subs	r2, #1
 801774c:	3301      	adds	r3, #1
 801774e:	9203      	str	r2, [sp, #12]
 8017750:	60a3      	str	r3, [r4, #8]
 8017752:	6873      	ldr	r3, [r6, #4]
 8017754:	3b01      	subs	r3, #1
 8017756:	6073      	str	r3, [r6, #4]
 8017758:	2b00      	cmp	r3, #0
 801775a:	dd1d      	ble.n	8017798 <_scanf_i+0x160>
 801775c:	6833      	ldr	r3, [r6, #0]
 801775e:	3301      	adds	r3, #1
 8017760:	6033      	str	r3, [r6, #0]
 8017762:	68a3      	ldr	r3, [r4, #8]
 8017764:	3b01      	subs	r3, #1
 8017766:	60a3      	str	r3, [r4, #8]
 8017768:	e7d8      	b.n	801771c <_scanf_i+0xe4>
 801776a:	2f02      	cmp	r7, #2
 801776c:	d1a8      	bne.n	80176c0 <_scanf_i+0x88>
 801776e:	21c0      	movs	r1, #192	; 0xc0
 8017770:	2380      	movs	r3, #128	; 0x80
 8017772:	6822      	ldr	r2, [r4, #0]
 8017774:	00c9      	lsls	r1, r1, #3
 8017776:	4011      	ands	r1, r2
 8017778:	009b      	lsls	r3, r3, #2
 801777a:	4299      	cmp	r1, r3
 801777c:	d1bf      	bne.n	80176fe <_scanf_i+0xc6>
 801777e:	3bf1      	subs	r3, #241	; 0xf1
 8017780:	3bff      	subs	r3, #255	; 0xff
 8017782:	6063      	str	r3, [r4, #4]
 8017784:	33f0      	adds	r3, #240	; 0xf0
 8017786:	4313      	orrs	r3, r2
 8017788:	e799      	b.n	80176be <_scanf_i+0x86>
 801778a:	4b2b      	ldr	r3, [pc, #172]	; (8017838 <_scanf_i+0x200>)
 801778c:	4013      	ands	r3, r2
 801778e:	6023      	str	r3, [r4, #0]
 8017790:	780b      	ldrb	r3, [r1, #0]
 8017792:	702b      	strb	r3, [r5, #0]
 8017794:	3501      	adds	r5, #1
 8017796:	e7dc      	b.n	8017752 <_scanf_i+0x11a>
 8017798:	23c0      	movs	r3, #192	; 0xc0
 801779a:	005b      	lsls	r3, r3, #1
 801779c:	58e3      	ldr	r3, [r4, r3]
 801779e:	0031      	movs	r1, r6
 80177a0:	9804      	ldr	r0, [sp, #16]
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	4798      	blx	r3
 80177a6:	2800      	cmp	r0, #0
 80177a8:	d0db      	beq.n	8017762 <_scanf_i+0x12a>
 80177aa:	6823      	ldr	r3, [r4, #0]
 80177ac:	05db      	lsls	r3, r3, #23
 80177ae:	d50e      	bpl.n	80177ce <_scanf_i+0x196>
 80177b0:	9b01      	ldr	r3, [sp, #4]
 80177b2:	429d      	cmp	r5, r3
 80177b4:	d907      	bls.n	80177c6 <_scanf_i+0x18e>
 80177b6:	23be      	movs	r3, #190	; 0xbe
 80177b8:	3d01      	subs	r5, #1
 80177ba:	005b      	lsls	r3, r3, #1
 80177bc:	7829      	ldrb	r1, [r5, #0]
 80177be:	58e3      	ldr	r3, [r4, r3]
 80177c0:	0032      	movs	r2, r6
 80177c2:	9804      	ldr	r0, [sp, #16]
 80177c4:	4798      	blx	r3
 80177c6:	9b01      	ldr	r3, [sp, #4]
 80177c8:	2001      	movs	r0, #1
 80177ca:	429d      	cmp	r5, r3
 80177cc:	d027      	beq.n	801781e <_scanf_i+0x1e6>
 80177ce:	2210      	movs	r2, #16
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	401a      	ands	r2, r3
 80177d4:	d11c      	bne.n	8017810 <_scanf_i+0x1d8>
 80177d6:	702a      	strb	r2, [r5, #0]
 80177d8:	6863      	ldr	r3, [r4, #4]
 80177da:	9901      	ldr	r1, [sp, #4]
 80177dc:	9804      	ldr	r0, [sp, #16]
 80177de:	9e05      	ldr	r6, [sp, #20]
 80177e0:	47b0      	blx	r6
 80177e2:	9b02      	ldr	r3, [sp, #8]
 80177e4:	6821      	ldr	r1, [r4, #0]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	068a      	lsls	r2, r1, #26
 80177ea:	d507      	bpl.n	80177fc <_scanf_i+0x1c4>
 80177ec:	1d1a      	adds	r2, r3, #4
 80177ee:	9902      	ldr	r1, [sp, #8]
 80177f0:	600a      	str	r2, [r1, #0]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	6018      	str	r0, [r3, #0]
 80177f6:	e008      	b.n	801780a <_scanf_i+0x1d2>
 80177f8:	2700      	movs	r7, #0
 80177fa:	e7d6      	b.n	80177aa <_scanf_i+0x172>
 80177fc:	1d1a      	adds	r2, r3, #4
 80177fe:	07ce      	lsls	r6, r1, #31
 8017800:	d5f5      	bpl.n	80177ee <_scanf_i+0x1b6>
 8017802:	9902      	ldr	r1, [sp, #8]
 8017804:	600a      	str	r2, [r1, #0]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	8018      	strh	r0, [r3, #0]
 801780a:	68e3      	ldr	r3, [r4, #12]
 801780c:	3301      	adds	r3, #1
 801780e:	60e3      	str	r3, [r4, #12]
 8017810:	2000      	movs	r0, #0
 8017812:	9b01      	ldr	r3, [sp, #4]
 8017814:	1aed      	subs	r5, r5, r3
 8017816:	6923      	ldr	r3, [r4, #16]
 8017818:	19ef      	adds	r7, r5, r7
 801781a:	19df      	adds	r7, r3, r7
 801781c:	6127      	str	r7, [r4, #16]
 801781e:	b00b      	add	sp, #44	; 0x2c
 8017820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017822:	46c0      	nop			; (mov r8, r8)
 8017824:	08017b18 	.word	0x08017b18
 8017828:	080170c1 	.word	0x080170c1
 801782c:	080179c9 	.word	0x080179c9
 8017830:	fffffaff 	.word	0xfffffaff
 8017834:	08019b04 	.word	0x08019b04
 8017838:	fffff6ff 	.word	0xfffff6ff

0801783c <_read_r>:
 801783c:	b570      	push	{r4, r5, r6, lr}
 801783e:	0005      	movs	r5, r0
 8017840:	0008      	movs	r0, r1
 8017842:	0011      	movs	r1, r2
 8017844:	2200      	movs	r2, #0
 8017846:	4c06      	ldr	r4, [pc, #24]	; (8017860 <_read_r+0x24>)
 8017848:	6022      	str	r2, [r4, #0]
 801784a:	001a      	movs	r2, r3
 801784c:	f000 f93a 	bl	8017ac4 <_read>
 8017850:	1c43      	adds	r3, r0, #1
 8017852:	d103      	bne.n	801785c <_read_r+0x20>
 8017854:	6823      	ldr	r3, [r4, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d000      	beq.n	801785c <_read_r+0x20>
 801785a:	602b      	str	r3, [r5, #0]
 801785c:	bd70      	pop	{r4, r5, r6, pc}
 801785e:	46c0      	nop			; (mov r8, r8)
 8017860:	20001bfc 	.word	0x20001bfc

08017864 <__sccl>:
 8017864:	b570      	push	{r4, r5, r6, lr}
 8017866:	780b      	ldrb	r3, [r1, #0]
 8017868:	0005      	movs	r5, r0
 801786a:	2b5e      	cmp	r3, #94	; 0x5e
 801786c:	d018      	beq.n	80178a0 <__sccl+0x3c>
 801786e:	1c4a      	adds	r2, r1, #1
 8017870:	2100      	movs	r1, #0
 8017872:	0028      	movs	r0, r5
 8017874:	1c6c      	adds	r4, r5, #1
 8017876:	34ff      	adds	r4, #255	; 0xff
 8017878:	7001      	strb	r1, [r0, #0]
 801787a:	3001      	adds	r0, #1
 801787c:	42a0      	cmp	r0, r4
 801787e:	d1fb      	bne.n	8017878 <__sccl+0x14>
 8017880:	1e50      	subs	r0, r2, #1
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00b      	beq.n	801789e <__sccl+0x3a>
 8017886:	2001      	movs	r0, #1
 8017888:	4041      	eors	r1, r0
 801788a:	54e9      	strb	r1, [r5, r3]
 801788c:	7814      	ldrb	r4, [r2, #0]
 801788e:	1c50      	adds	r0, r2, #1
 8017890:	2c2d      	cmp	r4, #45	; 0x2d
 8017892:	d00c      	beq.n	80178ae <__sccl+0x4a>
 8017894:	2c5d      	cmp	r4, #93	; 0x5d
 8017896:	d002      	beq.n	801789e <__sccl+0x3a>
 8017898:	2c00      	cmp	r4, #0
 801789a:	d105      	bne.n	80178a8 <__sccl+0x44>
 801789c:	0010      	movs	r0, r2
 801789e:	bd70      	pop	{r4, r5, r6, pc}
 80178a0:	1c8a      	adds	r2, r1, #2
 80178a2:	784b      	ldrb	r3, [r1, #1]
 80178a4:	2101      	movs	r1, #1
 80178a6:	e7e4      	b.n	8017872 <__sccl+0xe>
 80178a8:	0023      	movs	r3, r4
 80178aa:	0002      	movs	r2, r0
 80178ac:	e7ed      	b.n	801788a <__sccl+0x26>
 80178ae:	7856      	ldrb	r6, [r2, #1]
 80178b0:	2e5d      	cmp	r6, #93	; 0x5d
 80178b2:	d0f9      	beq.n	80178a8 <__sccl+0x44>
 80178b4:	42b3      	cmp	r3, r6
 80178b6:	dcf7      	bgt.n	80178a8 <__sccl+0x44>
 80178b8:	3202      	adds	r2, #2
 80178ba:	3301      	adds	r3, #1
 80178bc:	54e9      	strb	r1, [r5, r3]
 80178be:	429e      	cmp	r6, r3
 80178c0:	dcfb      	bgt.n	80178ba <__sccl+0x56>
 80178c2:	e7e3      	b.n	801788c <__sccl+0x28>

080178c4 <_strtol_l.isra.0>:
 80178c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178c6:	001f      	movs	r7, r3
 80178c8:	000e      	movs	r6, r1
 80178ca:	b087      	sub	sp, #28
 80178cc:	9005      	str	r0, [sp, #20]
 80178ce:	9101      	str	r1, [sp, #4]
 80178d0:	9202      	str	r2, [sp, #8]
 80178d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80178d4:	7834      	ldrb	r4, [r6, #0]
 80178d6:	f7fd feb1 	bl	801563c <__locale_ctype_ptr_l>
 80178da:	2208      	movs	r2, #8
 80178dc:	1900      	adds	r0, r0, r4
 80178de:	7843      	ldrb	r3, [r0, #1]
 80178e0:	1c75      	adds	r5, r6, #1
 80178e2:	4013      	ands	r3, r2
 80178e4:	d136      	bne.n	8017954 <_strtol_l.isra.0+0x90>
 80178e6:	2c2d      	cmp	r4, #45	; 0x2d
 80178e8:	d136      	bne.n	8017958 <_strtol_l.isra.0+0x94>
 80178ea:	1cb5      	adds	r5, r6, #2
 80178ec:	7874      	ldrb	r4, [r6, #1]
 80178ee:	2601      	movs	r6, #1
 80178f0:	2f00      	cmp	r7, #0
 80178f2:	d062      	beq.n	80179ba <_strtol_l.isra.0+0xf6>
 80178f4:	2f10      	cmp	r7, #16
 80178f6:	d109      	bne.n	801790c <_strtol_l.isra.0+0x48>
 80178f8:	2c30      	cmp	r4, #48	; 0x30
 80178fa:	d107      	bne.n	801790c <_strtol_l.isra.0+0x48>
 80178fc:	2220      	movs	r2, #32
 80178fe:	782b      	ldrb	r3, [r5, #0]
 8017900:	4393      	bics	r3, r2
 8017902:	2b58      	cmp	r3, #88	; 0x58
 8017904:	d154      	bne.n	80179b0 <_strtol_l.isra.0+0xec>
 8017906:	2710      	movs	r7, #16
 8017908:	786c      	ldrb	r4, [r5, #1]
 801790a:	3502      	adds	r5, #2
 801790c:	4b2d      	ldr	r3, [pc, #180]	; (80179c4 <_strtol_l.isra.0+0x100>)
 801790e:	0039      	movs	r1, r7
 8017910:	18f3      	adds	r3, r6, r3
 8017912:	0018      	movs	r0, r3
 8017914:	9303      	str	r3, [sp, #12]
 8017916:	f7f0 fca3 	bl	8008260 <__aeabi_uidivmod>
 801791a:	9104      	str	r1, [sp, #16]
 801791c:	2101      	movs	r1, #1
 801791e:	2300      	movs	r3, #0
 8017920:	4249      	negs	r1, r1
 8017922:	0002      	movs	r2, r0
 8017924:	468c      	mov	ip, r1
 8017926:	0018      	movs	r0, r3
 8017928:	0021      	movs	r1, r4
 801792a:	3930      	subs	r1, #48	; 0x30
 801792c:	2909      	cmp	r1, #9
 801792e:	d81a      	bhi.n	8017966 <_strtol_l.isra.0+0xa2>
 8017930:	000c      	movs	r4, r1
 8017932:	42a7      	cmp	r7, r4
 8017934:	dd23      	ble.n	801797e <_strtol_l.isra.0+0xba>
 8017936:	1c59      	adds	r1, r3, #1
 8017938:	d009      	beq.n	801794e <_strtol_l.isra.0+0x8a>
 801793a:	4663      	mov	r3, ip
 801793c:	4282      	cmp	r2, r0
 801793e:	d306      	bcc.n	801794e <_strtol_l.isra.0+0x8a>
 8017940:	d102      	bne.n	8017948 <_strtol_l.isra.0+0x84>
 8017942:	9904      	ldr	r1, [sp, #16]
 8017944:	42a1      	cmp	r1, r4
 8017946:	db02      	blt.n	801794e <_strtol_l.isra.0+0x8a>
 8017948:	2301      	movs	r3, #1
 801794a:	4378      	muls	r0, r7
 801794c:	1820      	adds	r0, r4, r0
 801794e:	782c      	ldrb	r4, [r5, #0]
 8017950:	3501      	adds	r5, #1
 8017952:	e7e9      	b.n	8017928 <_strtol_l.isra.0+0x64>
 8017954:	002e      	movs	r6, r5
 8017956:	e7bc      	b.n	80178d2 <_strtol_l.isra.0+0xe>
 8017958:	2c2b      	cmp	r4, #43	; 0x2b
 801795a:	d001      	beq.n	8017960 <_strtol_l.isra.0+0x9c>
 801795c:	001e      	movs	r6, r3
 801795e:	e7c7      	b.n	80178f0 <_strtol_l.isra.0+0x2c>
 8017960:	1cb5      	adds	r5, r6, #2
 8017962:	7874      	ldrb	r4, [r6, #1]
 8017964:	e7fa      	b.n	801795c <_strtol_l.isra.0+0x98>
 8017966:	0021      	movs	r1, r4
 8017968:	3941      	subs	r1, #65	; 0x41
 801796a:	2919      	cmp	r1, #25
 801796c:	d801      	bhi.n	8017972 <_strtol_l.isra.0+0xae>
 801796e:	3c37      	subs	r4, #55	; 0x37
 8017970:	e7df      	b.n	8017932 <_strtol_l.isra.0+0x6e>
 8017972:	0021      	movs	r1, r4
 8017974:	3961      	subs	r1, #97	; 0x61
 8017976:	2919      	cmp	r1, #25
 8017978:	d801      	bhi.n	801797e <_strtol_l.isra.0+0xba>
 801797a:	3c57      	subs	r4, #87	; 0x57
 801797c:	e7d9      	b.n	8017932 <_strtol_l.isra.0+0x6e>
 801797e:	1c5a      	adds	r2, r3, #1
 8017980:	d108      	bne.n	8017994 <_strtol_l.isra.0+0xd0>
 8017982:	9a05      	ldr	r2, [sp, #20]
 8017984:	3323      	adds	r3, #35	; 0x23
 8017986:	6013      	str	r3, [r2, #0]
 8017988:	9b02      	ldr	r3, [sp, #8]
 801798a:	9803      	ldr	r0, [sp, #12]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d109      	bne.n	80179a4 <_strtol_l.isra.0+0xe0>
 8017990:	b007      	add	sp, #28
 8017992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017994:	2e00      	cmp	r6, #0
 8017996:	d000      	beq.n	801799a <_strtol_l.isra.0+0xd6>
 8017998:	4240      	negs	r0, r0
 801799a:	9a02      	ldr	r2, [sp, #8]
 801799c:	2a00      	cmp	r2, #0
 801799e:	d0f7      	beq.n	8017990 <_strtol_l.isra.0+0xcc>
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d001      	beq.n	80179a8 <_strtol_l.isra.0+0xe4>
 80179a4:	1e6b      	subs	r3, r5, #1
 80179a6:	9301      	str	r3, [sp, #4]
 80179a8:	9b02      	ldr	r3, [sp, #8]
 80179aa:	9a01      	ldr	r2, [sp, #4]
 80179ac:	601a      	str	r2, [r3, #0]
 80179ae:	e7ef      	b.n	8017990 <_strtol_l.isra.0+0xcc>
 80179b0:	2430      	movs	r4, #48	; 0x30
 80179b2:	2f00      	cmp	r7, #0
 80179b4:	d1aa      	bne.n	801790c <_strtol_l.isra.0+0x48>
 80179b6:	2708      	movs	r7, #8
 80179b8:	e7a8      	b.n	801790c <_strtol_l.isra.0+0x48>
 80179ba:	2c30      	cmp	r4, #48	; 0x30
 80179bc:	d09e      	beq.n	80178fc <_strtol_l.isra.0+0x38>
 80179be:	270a      	movs	r7, #10
 80179c0:	e7a4      	b.n	801790c <_strtol_l.isra.0+0x48>
 80179c2:	46c0      	nop			; (mov r8, r8)
 80179c4:	7fffffff 	.word	0x7fffffff

080179c8 <_strtol_r>:
 80179c8:	b513      	push	{r0, r1, r4, lr}
 80179ca:	4c05      	ldr	r4, [pc, #20]	; (80179e0 <_strtol_r+0x18>)
 80179cc:	6824      	ldr	r4, [r4, #0]
 80179ce:	6a24      	ldr	r4, [r4, #32]
 80179d0:	2c00      	cmp	r4, #0
 80179d2:	d100      	bne.n	80179d6 <_strtol_r+0xe>
 80179d4:	4c03      	ldr	r4, [pc, #12]	; (80179e4 <_strtol_r+0x1c>)
 80179d6:	9400      	str	r4, [sp, #0]
 80179d8:	f7ff ff74 	bl	80178c4 <_strtol_l.isra.0>
 80179dc:	bd16      	pop	{r1, r2, r4, pc}
 80179de:	46c0      	nop			; (mov r8, r8)
 80179e0:	200005e0 	.word	0x200005e0
 80179e4:	20000644 	.word	0x20000644

080179e8 <__submore>:
 80179e8:	000b      	movs	r3, r1
 80179ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179ec:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80179ee:	3344      	adds	r3, #68	; 0x44
 80179f0:	000c      	movs	r4, r1
 80179f2:	429d      	cmp	r5, r3
 80179f4:	d11c      	bne.n	8017a30 <__submore+0x48>
 80179f6:	2680      	movs	r6, #128	; 0x80
 80179f8:	00f6      	lsls	r6, r6, #3
 80179fa:	0031      	movs	r1, r6
 80179fc:	f7fe f946 	bl	8015c8c <_malloc_r>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d102      	bne.n	8017a0a <__submore+0x22>
 8017a04:	2001      	movs	r0, #1
 8017a06:	4240      	negs	r0, r0
 8017a08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a0a:	0023      	movs	r3, r4
 8017a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8017a0e:	63a6      	str	r6, [r4, #56]	; 0x38
 8017a10:	3346      	adds	r3, #70	; 0x46
 8017a12:	781a      	ldrb	r2, [r3, #0]
 8017a14:	4b10      	ldr	r3, [pc, #64]	; (8017a58 <__submore+0x70>)
 8017a16:	54c2      	strb	r2, [r0, r3]
 8017a18:	0023      	movs	r3, r4
 8017a1a:	3345      	adds	r3, #69	; 0x45
 8017a1c:	781a      	ldrb	r2, [r3, #0]
 8017a1e:	4b0f      	ldr	r3, [pc, #60]	; (8017a5c <__submore+0x74>)
 8017a20:	54c2      	strb	r2, [r0, r3]
 8017a22:	782a      	ldrb	r2, [r5, #0]
 8017a24:	4b0e      	ldr	r3, [pc, #56]	; (8017a60 <__submore+0x78>)
 8017a26:	54c2      	strb	r2, [r0, r3]
 8017a28:	18c0      	adds	r0, r0, r3
 8017a2a:	6020      	str	r0, [r4, #0]
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	e7eb      	b.n	8017a08 <__submore+0x20>
 8017a30:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8017a32:	0029      	movs	r1, r5
 8017a34:	0073      	lsls	r3, r6, #1
 8017a36:	001a      	movs	r2, r3
 8017a38:	9301      	str	r3, [sp, #4]
 8017a3a:	f7ff fa10 	bl	8016e5e <_realloc_r>
 8017a3e:	1e05      	subs	r5, r0, #0
 8017a40:	d0e0      	beq.n	8017a04 <__submore+0x1c>
 8017a42:	1987      	adds	r7, r0, r6
 8017a44:	0001      	movs	r1, r0
 8017a46:	0032      	movs	r2, r6
 8017a48:	0038      	movs	r0, r7
 8017a4a:	f7fd fe3e 	bl	80156ca <memcpy>
 8017a4e:	9b01      	ldr	r3, [sp, #4]
 8017a50:	6027      	str	r7, [r4, #0]
 8017a52:	6365      	str	r5, [r4, #52]	; 0x34
 8017a54:	63a3      	str	r3, [r4, #56]	; 0x38
 8017a56:	e7e9      	b.n	8017a2c <__submore+0x44>
 8017a58:	000003ff 	.word	0x000003ff
 8017a5c:	000003fe 	.word	0x000003fe
 8017a60:	000003fd 	.word	0x000003fd

08017a64 <_close>:
 8017a64:	2258      	movs	r2, #88	; 0x58
 8017a66:	2001      	movs	r0, #1
 8017a68:	4b01      	ldr	r3, [pc, #4]	; (8017a70 <_close+0xc>)
 8017a6a:	4240      	negs	r0, r0
 8017a6c:	601a      	str	r2, [r3, #0]
 8017a6e:	4770      	bx	lr
 8017a70:	20001bfc 	.word	0x20001bfc

08017a74 <_fstat>:
 8017a74:	2258      	movs	r2, #88	; 0x58
 8017a76:	2001      	movs	r0, #1
 8017a78:	4b01      	ldr	r3, [pc, #4]	; (8017a80 <_fstat+0xc>)
 8017a7a:	4240      	negs	r0, r0
 8017a7c:	601a      	str	r2, [r3, #0]
 8017a7e:	4770      	bx	lr
 8017a80:	20001bfc 	.word	0x20001bfc

08017a84 <_getpid>:
 8017a84:	2258      	movs	r2, #88	; 0x58
 8017a86:	2001      	movs	r0, #1
 8017a88:	4b01      	ldr	r3, [pc, #4]	; (8017a90 <_getpid+0xc>)
 8017a8a:	4240      	negs	r0, r0
 8017a8c:	601a      	str	r2, [r3, #0]
 8017a8e:	4770      	bx	lr
 8017a90:	20001bfc 	.word	0x20001bfc

08017a94 <_isatty>:
 8017a94:	2258      	movs	r2, #88	; 0x58
 8017a96:	4b02      	ldr	r3, [pc, #8]	; (8017aa0 <_isatty+0xc>)
 8017a98:	2000      	movs	r0, #0
 8017a9a:	601a      	str	r2, [r3, #0]
 8017a9c:	4770      	bx	lr
 8017a9e:	46c0      	nop			; (mov r8, r8)
 8017aa0:	20001bfc 	.word	0x20001bfc

08017aa4 <_kill>:
 8017aa4:	2258      	movs	r2, #88	; 0x58
 8017aa6:	2001      	movs	r0, #1
 8017aa8:	4b01      	ldr	r3, [pc, #4]	; (8017ab0 <_kill+0xc>)
 8017aaa:	4240      	negs	r0, r0
 8017aac:	601a      	str	r2, [r3, #0]
 8017aae:	4770      	bx	lr
 8017ab0:	20001bfc 	.word	0x20001bfc

08017ab4 <_lseek>:
 8017ab4:	2258      	movs	r2, #88	; 0x58
 8017ab6:	2001      	movs	r0, #1
 8017ab8:	4b01      	ldr	r3, [pc, #4]	; (8017ac0 <_lseek+0xc>)
 8017aba:	4240      	negs	r0, r0
 8017abc:	601a      	str	r2, [r3, #0]
 8017abe:	4770      	bx	lr
 8017ac0:	20001bfc 	.word	0x20001bfc

08017ac4 <_read>:
 8017ac4:	2258      	movs	r2, #88	; 0x58
 8017ac6:	2001      	movs	r0, #1
 8017ac8:	4b01      	ldr	r3, [pc, #4]	; (8017ad0 <_read+0xc>)
 8017aca:	4240      	negs	r0, r0
 8017acc:	601a      	str	r2, [r3, #0]
 8017ace:	4770      	bx	lr
 8017ad0:	20001bfc 	.word	0x20001bfc

08017ad4 <_sbrk>:
 8017ad4:	4b05      	ldr	r3, [pc, #20]	; (8017aec <_sbrk+0x18>)
 8017ad6:	0002      	movs	r2, r0
 8017ad8:	6819      	ldr	r1, [r3, #0]
 8017ada:	2900      	cmp	r1, #0
 8017adc:	d101      	bne.n	8017ae2 <_sbrk+0xe>
 8017ade:	4904      	ldr	r1, [pc, #16]	; (8017af0 <_sbrk+0x1c>)
 8017ae0:	6019      	str	r1, [r3, #0]
 8017ae2:	6818      	ldr	r0, [r3, #0]
 8017ae4:	1882      	adds	r2, r0, r2
 8017ae6:	601a      	str	r2, [r3, #0]
 8017ae8:	4770      	bx	lr
 8017aea:	46c0      	nop			; (mov r8, r8)
 8017aec:	20001ad0 	.word	0x20001ad0
 8017af0:	20001c00 	.word	0x20001c00

08017af4 <_exit>:
 8017af4:	e7fe      	b.n	8017af4 <_exit>
	...

08017af8 <_init>:
 8017af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017afa:	46c0      	nop			; (mov r8, r8)
 8017afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017afe:	bc08      	pop	{r3}
 8017b00:	469e      	mov	lr, r3
 8017b02:	4770      	bx	lr

08017b04 <_fini>:
 8017b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b06:	46c0      	nop			; (mov r8, r8)
 8017b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b0a:	bc08      	pop	{r3}
 8017b0c:	469e      	mov	lr, r3
 8017b0e:	4770      	bx	lr
